###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       15/Mar/2016  18:17:12
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_gpio.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_gpio.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\stm32f7xx_hal_gpio.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\stm32f7xx_hal_gpio.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_gpio.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f7xx_hal_gpio.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    25-June-2015
      7            * @brief   GPIO HAL module driver.
      8            *          This file provides firmware functions to manage the following 
      9            *          functionalities of the General Purpose Input/Output (GPIO) peripheral:
     10            *           + Initialization and de-initialization functions
     11            *           + IO operation functions
     12            *
     13            @verbatim
     14            ==============================================================================
     15                              ##### GPIO Peripheral features #####
     16            ==============================================================================
     17            [..] 
     18            Subject to the specific hardware characteristics of each I/O port listed in the datasheet, each
     19            port bit of the General Purpose IO (GPIO) Ports, can be individually configured by software
     20            in several modes:
     21            (+) Input mode 
     22            (+) Analog mode
     23            (+) Output mode
     24            (+) Alternate function mode
     25            (+) External interrupt/event lines
     26          
     27            [..]  
     28            During and just after reset, the alternate functions and external interrupt  
     29            lines are not active and the I/O ports are configured in input floating mode.
     30            
     31            [..]   
     32            All GPIO pins have weak internal pull-up and pull-down resistors, which can be 
     33            activated or not.
     34          
     35            [..]
     36            In Output or Alternate mode, each IO can be configured on open-drain or push-pull
     37            type and the IO speed can be selected depending on the VDD value.
     38          
     39            [..]  
     40            All ports have external interrupt/event capability. To use external interrupt 
     41            lines, the port must be configured in input mode. All available GPIO pins are 
     42            connected to the 16 external interrupt/event lines from EXTI0 to EXTI15.
     43            
     44            [..]
     45            The external interrupt/event controller consists of up to 23 edge detectors 
     46            (16 lines are connected to GPIO) for generating event/interrupt requests (each 
     47            input line can be independently configured to select the type (interrupt or event) 
     48            and the corresponding trigger event (rising or falling or both). Each line can 
     49            also be masked independently. 
     50          
     51                               ##### How to use this driver #####
     52            ==============================================================================  
     53            [..]
     54              (#) Enable the GPIO AHB clock using the following function: __HAL_RCC_GPIOx_CLK_ENABLE(). 
     55          
     56              (#) Configure the GPIO pin(s) using HAL_GPIO_Init().
     57                  (++) Configure the IO mode using "Mode" member from GPIO_InitTypeDef structure
     58                  (++) Activate Pull-up, Pull-down resistor using "Pull" member from GPIO_InitTypeDef 
     59                       structure.
     60                  (++) In case of Output or alternate function mode selection: the speed is 
     61                       configured through "Speed" member from GPIO_InitTypeDef structure.
     62                  (++) In alternate mode is selection, the alternate function connected to the IO
     63                       is configured through "Alternate" member from GPIO_InitTypeDef structure.
     64                  (++) Analog mode is required when a pin is to be used as ADC channel 
     65                       or DAC output.
     66                  (++) In case of external interrupt/event selection the "Mode" member from 
     67                       GPIO_InitTypeDef structure select the type (interrupt or event) and 
     68                       the corresponding trigger event (rising or falling or both).
     69          
     70              (#) In case of external interrupt/event mode selection, configure NVIC IRQ priority 
     71                  mapped to the EXTI line using HAL_NVIC_SetPriority() and enable it using
     72                  HAL_NVIC_EnableIRQ().
     73                   
     74              (#) To get the level of a pin configured in input mode use HAL_GPIO_ReadPin().
     75                      
     76              (#) To set/reset the level of a pin configured in output mode use 
     77                  HAL_GPIO_WritePin()/HAL_GPIO_TogglePin().
     78              
     79              (#) To lock pin configuration until next reset use HAL_GPIO_LockPin().
     80          
     81                           
     82              (#) During and just after reset, the alternate functions are not 
     83                  active and the GPIO pins are configured in input floating mode (except JTAG
     84                  pins).
     85            
     86              (#) The LSE oscillator pins OSC32_IN and OSC32_OUT can be used as general purpose 
     87                  (PC14 and PC15, respectively) when the LSE oscillator is off. The LSE has 
     88                  priority over the GPIO function.
     89            
     90              (#) The HSE oscillator pins OSC_IN/OSC_OUT can be used as 
     91                  general purpose PH0 and PH1, respectively, when the HSE oscillator is off. 
     92                  The HSE has priority over the GPIO function.
     93            
     94            @endverbatim
     95            ******************************************************************************
     96            * @attention
     97            *
     98            * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
     99            *
    100            * Redistribution and use in source and binary forms, with or without modification,
    101            * are permitted provided that the following conditions are met:
    102            *   1. Redistributions of source code must retain the above copyright notice,
    103            *      this list of conditions and the following disclaimer.
    104            *   2. Redistributions in binary form must reproduce the above copyright notice,
    105            *      this list of conditions and the following disclaimer in the documentation
    106            *      and/or other materials provided with the distribution.
    107            *   3. Neither the name of STMicroelectronics nor the names of its contributors
    108            *      may be used to endorse or promote products derived from this software
    109            *      without specific prior written permission.
    110            *
    111            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    112            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    113            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    114            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    115            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    116            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    117            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    118            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    119            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    120            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    121            *
    122            ******************************************************************************
    123            */ 
    124          
    125          /* Includes ------------------------------------------------------------------*/
    126          #include "stm32f7xx_hal.h"
    127          
    128          /** @addtogroup STM32F7xx_HAL_Driver
    129            * @{
    130            */
    131          
    132          /** @defgroup GPIO GPIO
    133            * @brief GPIO HAL module driver
    134            * @{
    135            */
    136          
    137          #ifdef HAL_GPIO_MODULE_ENABLED
    138          
    139          /* Private typedef -----------------------------------------------------------*/
    140          /* Private define ------------------------------------------------------------*/
    141          /** @addtogroup GPIO_Private_Constants GPIO Private Constants
    142            * @{
    143            */
    144          #define GPIO_MODE             ((uint32_t)0x00000003)
    145          #define EXTI_MODE             ((uint32_t)0x10000000)
    146          #define GPIO_MODE_IT          ((uint32_t)0x00010000)
    147          #define GPIO_MODE_EVT         ((uint32_t)0x00020000)
    148          #define RISING_EDGE           ((uint32_t)0x00100000)
    149          #define FALLING_EDGE          ((uint32_t)0x00200000)
    150          #define GPIO_OUTPUT_TYPE      ((uint32_t)0x00000010)
    151          
    152          #define GPIO_NUMBER           ((uint32_t)16)
    153          /**
    154            * @}
    155            */
    156          /* Private macro -------------------------------------------------------------*/
    157          /* Private variables ---------------------------------------------------------*/
    158          /* Private function prototypes -----------------------------------------------*/
    159          /* Private functions ---------------------------------------------------------*/
    160          /* Exported functions --------------------------------------------------------*/
    161          /** @defgroup GPIO_Exported_Functions GPIO Exported Functions
    162            * @{
    163            */
    164          
    165          /** @defgroup GPIO_Exported_Functions_Group1 Initialization and de-initialization functions
    166           *  @brief    Initialization and Configuration functions
    167           *
    168          @verbatim
    169           ===============================================================================
    170                        ##### Initialization and de-initialization functions #####
    171           ===============================================================================
    172            [..]
    173              This section provides functions allowing to initialize and de-initialize the GPIOs
    174              to be ready for use.
    175           
    176          @endverbatim
    177            * @{
    178            */
    179          
    180          /**
    181            * @brief  Initializes the GPIOx peripheral according to the specified parameters in the GPIO_Init.
    182            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral.
    183            * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
    184            *         the configuration information for the specified GPIO peripheral.
    185            * @retval None
    186            */

   \                                 In section .text, align 2, keep-with-next
    187          void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
    188          {
   \                     HAL_GPIO_Init: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x4602             MOV      R2,R0
    189            uint32_t position = 0x00;
   \   00000008   0x2300             MOVS     R3,#+0
    190            uint32_t ioposition = 0x00;
    191            uint32_t iocurrent = 0x00;
    192            uint32_t temp = 0x00;
    193          
    194            /* Check the parameters */
    195            assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    196            assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
    197            assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
    198            assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
    199          
    200            /* Configure the port pins */
    201            for(position = 0; position < GPIO_NUMBER; position++)
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0x.... 0x....      LDR.W    R9,??DataTable2  ;; 0x40013c00
   \   00000010   0x.... 0x....      LDR.W    R10,??DataTable2_1  ;; 0x40013808
   \   00000014   0x....             LDR.N    R7,??DataTable2_2  ;; 0x40023844
   \   00000016   0xF04F 0x0E0F      MOV      LR,#+15
    202            {
    203              /* Get the IO position */
    204              ioposition = ((uint32_t)0x01) << position;
   \                     ??HAL_GPIO_Init_0: (+1)
   \   0000001A   0x2001             MOVS     R0,#+1
    205              /* Get the current IO position */
    206              iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
   \   0000001C   0xF8D1 0xC000      LDR      R12,[R1, #+0]
   \   00000020   0x4098             LSLS     R0,R0,R3
   \   00000022   0xEA00 0x080C      AND      R8,R0,R12
    207          
    208              if(iocurrent == ioposition)
   \   00000026   0x4580             CMP      R8,R0
   \   00000028   0xF040 0x80CC      BNE.W    ??HAL_GPIO_Init_1
    209              {
    210                /*--------------------- GPIO Mode Configuration ------------------------*/
    211                /* In case of Alternate function mode selection */
    212                if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
   \   0000002C   0xF8D1 0xC004      LDR      R12,[R1, #+4]
   \   00000030   0xF1BC 0x0F02      CMP      R12,#+2
   \   00000034   0xBF18             IT       NE 
   \   00000036   0xF1BC 0x0F12      CMPNE    R12,#+18
   \   0000003A   0xD113             BNE.N    ??HAL_GPIO_Init_2
   \   0000003C   0xEA4F 0x0CD3      LSR      R12,R3,#+3
    213                {
    214                  /* Check the Alternate function parameter */
    215                  assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
    216                  
    217                  /* Configure Alternate function mapped with the current IO */
    218                  temp = GPIOx->AFR[position >> 3];
    219                  temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
    220                  temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
    221                  GPIOx->AFR[position >> 3] = temp;
   \   00000040   0xF003 0x0507      AND      R5,R3,#0x7
   \   00000044   0xEB02 0x0C8C      ADD      R12,R2,R12, LSL #+2
   \   00000048   0x00AD             LSLS     R5,R5,#+2
   \   0000004A   0xFA0E 0xFB05      LSL      R11,LR,R5
   \   0000004E   0xF8DC 0x6020      LDR      R6,[R12, #+32]
   \   00000052   0xEA26 0x060B      BIC      R6,R6,R11
   \   00000056   0xF8D1 0xB010      LDR      R11,[R1, #+16]
   \   0000005A   0xFA0B 0xF505      LSL      R5,R11,R5
   \   0000005E   0x4335             ORRS     R5,R5,R6
   \   00000060   0xF8CC 0x5020      STR      R5,[R12, #+32]
    222                }
    223          
    224                /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
    225                temp = GPIOx->MODER;
    226                temp &= ~(GPIO_MODER_MODER0 << (position * 2));
    227                temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
    228                GPIOx->MODER = temp;
   \                     ??HAL_GPIO_Init_2: (+1)
   \   00000064   0xF04F 0x0C03      MOV      R12,#+3
   \   00000068   0x6815             LDR      R5,[R2, #+0]
   \   0000006A   0x790E             LDRB     R6,[R1, #+4]
   \   0000006C   0xFA0C 0xFC04      LSL      R12,R12,R4
   \   00000070   0xEA6F 0x0C0C      MVN      R12,R12
   \   00000074   0xEA0C 0x0505      AND      R5,R12,R5
   \   00000078   0xF006 0x0603      AND      R6,R6,#0x3
   \   0000007C   0x40A6             LSLS     R6,R6,R4
   \   0000007E   0x4335             ORRS     R5,R6,R5
   \   00000080   0x6015             STR      R5,[R2, #+0]
    229          
    230                /* In case of Output or Alternate function mode selection */
    231                if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
    232                   (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
   \   00000082   0x684D             LDR      R5,[R1, #+4]
   \   00000084   0x2D01             CMP      R5,#+1
   \   00000086   0xBF18             IT       NE 
   \   00000088   0x2D02             CMPNE    R5,#+2
   \   0000008A   0xD003             BEQ.N    ??HAL_GPIO_Init_3
   \   0000008C   0x2D11             CMP      R5,#+17
   \   0000008E   0xBF18             IT       NE 
   \   00000090   0x2D12             CMPNE    R5,#+18
   \   00000092   0xD10F             BNE.N    ??HAL_GPIO_Init_4
    233                {
    234                  /* Check the Speed parameter */
    235                  assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
    236                  /* Configure the IO Speed */
    237                  temp = GPIOx->OSPEEDR; 
   \                     ??HAL_GPIO_Init_3: (+1)
   \   00000094   0x6895             LDR      R5,[R2, #+8]
    238                  temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
    239                  temp |= (GPIO_Init->Speed << (position * 2));
    240                  GPIOx->OSPEEDR = temp;
   \   00000096   0x68CE             LDR      R6,[R1, #+12]
   \   00000098   0xEA0C 0x0505      AND      R5,R12,R5
   \   0000009C   0x40A6             LSLS     R6,R6,R4
   \   0000009E   0x4335             ORRS     R5,R6,R5
   \   000000A0   0x6095             STR      R5,[R2, #+8]
    241          
    242                  /* Configure the IO Output Type */
    243                  temp = GPIOx->OTYPER;
   \   000000A2   0x6855             LDR      R5,[R2, #+4]
    244                  temp &= ~(GPIO_OTYPER_OT_0 << position) ;
    245                  temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
    246                  GPIOx->OTYPER = temp;
   \   000000A4   0xEA25 0x0000      BIC      R0,R5,R0
   \   000000A8   0x684D             LDR      R5,[R1, #+4]
   \   000000AA   0xF3C5 0x1500      UBFX     R5,R5,#+4,#+1
   \   000000AE   0x409D             LSLS     R5,R5,R3
   \   000000B0   0x4328             ORRS     R0,R5,R0
   \   000000B2   0x6050             STR      R0,[R2, #+4]
    247                }
    248          
    249                /* Activate the Pull-up or Pull down resistor for the current IO */
    250                temp = GPIOx->PUPDR;
   \                     ??HAL_GPIO_Init_4: (+1)
   \   000000B4   0x68D0             LDR      R0,[R2, #+12]
    251                temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
    252                temp |= ((GPIO_Init->Pull) << (position * 2));
    253                GPIOx->PUPDR = temp;
   \   000000B6   0xEA0C 0x0000      AND      R0,R12,R0
   \   000000BA   0xF8D1 0xC008      LDR      R12,[R1, #+8]
   \   000000BE   0xFA0C 0xFC04      LSL      R12,R12,R4
   \   000000C2   0xEA4C 0x0000      ORR      R0,R12,R0
   \   000000C6   0x60D0             STR      R0,[R2, #+12]
    254          
    255                /*--------------------- EXTI Mode Configuration ------------------------*/
    256                /* Configure the External Interrupt or event for the current IO */
    257                if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
   \   000000C8   0x6848             LDR      R0,[R1, #+4]
   \   000000CA   0x00C0             LSLS     R0,R0,#+3
   \   000000CC   0xD57A             BPL.N    ??HAL_GPIO_Init_1
    258                {
    259                  /* Enable SYSCFG Clock */
    260                  __HAL_RCC_SYSCFG_CLK_ENABLE();
   \   000000CE   0x6838             LDR      R0,[R7, #+0]
    261          
    262                  temp = SYSCFG->EXTICR[position >> 2];
    263                  temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
   \   000000D0   0xF003 0x0C03      AND      R12,R3,#0x3
   \   000000D4   0xEA4F 0x0C8C      LSL      R12,R12,#+2
   \   000000D8   0xFA0E 0xF60C      LSL      R6,LR,R12
   \   000000DC   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   000000E0   0x6038             STR      R0,[R7, #+0]
   \   000000E2   0x6838             LDR      R0,[R7, #+0]
   \   000000E4   0xF400 0x4080      AND      R0,R0,#0x4000
   \   000000E8   0x9000             STR      R0,[SP, #+0]
   \   000000EA   0x9800             LDR      R0,[SP, #+0]
   \   000000EC   0x0898             LSRS     R0,R3,#+2
   \   000000EE   0xF85A 0x5020      LDR      R5,[R10, R0, LSL #+2]
   \   000000F2   0x43B5             BICS     R5,R5,R6
    264                  temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
   \   000000F4   0x....             LDR.N    R6,??DataTable2_3  ;; 0x40020000
   \   000000F6   0x42B2             CMP      R2,R6
   \   000000F8   0xBF08             IT       EQ 
   \   000000FA   0x2600             MOVEQ    R6,#+0
   \   000000FC   0xD02C             BEQ.N    ??HAL_GPIO_Init_5
   \   000000FE   0x....             LDR.N    R6,??DataTable2_4  ;; 0x40020400
   \   00000100   0x42B2             CMP      R2,R6
   \   00000102   0xBF08             IT       EQ 
   \   00000104   0x2601             MOVEQ    R6,#+1
   \   00000106   0xD027             BEQ.N    ??HAL_GPIO_Init_5
   \   00000108   0x....             LDR.N    R6,??DataTable2_5  ;; 0x40020800
   \   0000010A   0x42B2             CMP      R2,R6
   \   0000010C   0xBF08             IT       EQ 
   \   0000010E   0x2602             MOVEQ    R6,#+2
   \   00000110   0xD022             BEQ.N    ??HAL_GPIO_Init_5
   \   00000112   0x....             LDR.N    R6,??DataTable2_6  ;; 0x40020c00
   \   00000114   0x42B2             CMP      R2,R6
   \   00000116   0xBF08             IT       EQ 
   \   00000118   0x2603             MOVEQ    R6,#+3
   \   0000011A   0xD01D             BEQ.N    ??HAL_GPIO_Init_5
   \   0000011C   0x....             LDR.N    R6,??DataTable2_7  ;; 0x40021000
   \   0000011E   0x42B2             CMP      R2,R6
   \   00000120   0xBF08             IT       EQ 
   \   00000122   0x2604             MOVEQ    R6,#+4
   \   00000124   0xD018             BEQ.N    ??HAL_GPIO_Init_5
   \   00000126   0x....             LDR.N    R6,??DataTable2_8  ;; 0x40021400
   \   00000128   0x42B2             CMP      R2,R6
   \   0000012A   0xBF08             IT       EQ 
   \   0000012C   0x2605             MOVEQ    R6,#+5
   \   0000012E   0xD013             BEQ.N    ??HAL_GPIO_Init_5
   \   00000130   0x....             LDR.N    R6,??DataTable2_9  ;; 0x40021800
   \   00000132   0x42B2             CMP      R2,R6
   \   00000134   0xBF08             IT       EQ 
   \   00000136   0x2606             MOVEQ    R6,#+6
   \   00000138   0xD00E             BEQ.N    ??HAL_GPIO_Init_5
   \   0000013A   0x....             LDR.N    R6,??DataTable2_10  ;; 0x40021c00
   \   0000013C   0x42B2             CMP      R2,R6
   \   0000013E   0xBF08             IT       EQ 
   \   00000140   0x2607             MOVEQ    R6,#+7
   \   00000142   0xD009             BEQ.N    ??HAL_GPIO_Init_5
   \   00000144   0x....             LDR.N    R6,??DataTable2_11  ;; 0x40022000
   \   00000146   0x42B2             CMP      R2,R6
   \   00000148   0xBF08             IT       EQ 
   \   0000014A   0x2608             MOVEQ    R6,#+8
   \   0000014C   0xD004             BEQ.N    ??HAL_GPIO_Init_5
   \   0000014E   0x....             LDR.N    R6,??DataTable2_12  ;; 0x40022400
   \   00000150   0x42B2             CMP      R2,R6
   \   00000152   0xBF0C             ITE      EQ 
   \   00000154   0x2609             MOVEQ    R6,#+9
   \   00000156   0x260A             MOVNE    R6,#+10
    265                  SYSCFG->EXTICR[position >> 2] = temp;
   \                     ??HAL_GPIO_Init_5: (+1)
   \   00000158   0xFA06 0xFC0C      LSL      R12,R6,R12
   \   0000015C   0xEA4C 0x0C05      ORR      R12,R12,R5
   \   00000160   0xF84A 0xC020      STR      R12,[R10, R0, LSL #+2]
    266          
    267                  /* Clear EXTI line configuration */
    268                  temp = EXTI->IMR;
   \   00000164   0xF8D9 0xC000      LDR      R12,[R9, #+0]
    269                  temp &= ~((uint32_t)iocurrent);
    270                  if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
   \   00000168   0x684D             LDR      R5,[R1, #+4]
   \   0000016A   0xEA6F 0x0008      MVN      R0,R8
   \   0000016E   0xEA00 0x0C0C      AND      R12,R0,R12
   \   00000172   0x03ED             LSLS     R5,R5,#+15
   \   00000174   0xBF48             IT       MI 
   \   00000176   0xEA48 0x0C0C      ORRMI    R12,R8,R12
    271                  {
    272                    temp |= iocurrent;
    273                  }
    274                  EXTI->IMR = temp;
   \   0000017A   0xF8C9 0xC000      STR      R12,[R9, #+0]
    275          
    276                  temp = EXTI->EMR;
   \   0000017E   0xF8D9 0xC004      LDR      R12,[R9, #+4]
    277                  temp &= ~((uint32_t)iocurrent);
    278                  if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
   \   00000182   0x684D             LDR      R5,[R1, #+4]
   \   00000184   0xEA00 0x0C0C      AND      R12,R0,R12
   \   00000188   0x03AD             LSLS     R5,R5,#+14
   \   0000018A   0xBF48             IT       MI 
   \   0000018C   0xEA48 0x0C0C      ORRMI    R12,R8,R12
    279                  {
    280                    temp |= iocurrent;
    281                  }
    282                  EXTI->EMR = temp;
   \   00000190   0xF8C9 0xC004      STR      R12,[R9, #+4]
    283          
    284                  /* Clear Rising Falling edge configuration */
    285                  temp = EXTI->RTSR;
   \   00000194   0xF8D9 0xC008      LDR      R12,[R9, #+8]
    286                  temp &= ~((uint32_t)iocurrent);
    287                  if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
   \   00000198   0x684D             LDR      R5,[R1, #+4]
   \   0000019A   0xEA00 0x0C0C      AND      R12,R0,R12
   \   0000019E   0x02ED             LSLS     R5,R5,#+11
   \   000001A0   0xBF48             IT       MI 
   \   000001A2   0xEA48 0x0C0C      ORRMI    R12,R8,R12
    288                  {
    289                    temp |= iocurrent;
    290                  }
    291                  EXTI->RTSR = temp;
   \   000001A6   0xF8C9 0xC008      STR      R12,[R9, #+8]
    292          
    293                  temp = EXTI->FTSR;
   \   000001AA   0xF8D9 0xC00C      LDR      R12,[R9, #+12]
    294                  temp &= ~((uint32_t)iocurrent);
   \   000001AE   0xEA00 0x000C      AND      R0,R0,R12
    295                  if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
   \   000001B2   0xF8D1 0xC004      LDR      R12,[R1, #+4]
   \   000001B6   0xEA5F 0x2C8C      LSLS     R12,R12,#+10
   \   000001BA   0xBF48             IT       MI 
   \   000001BC   0xEA48 0x0000      ORRMI    R0,R8,R0
    296                  {
    297                    temp |= iocurrent;
    298                  }
    299                  EXTI->FTSR = temp;
   \   000001C0   0xF8C9 0x000C      STR      R0,[R9, #+12]
    300                }
    301              }
    302            }
   \                     ??HAL_GPIO_Init_1: (+1)
   \   000001C4   0x1C5B             ADDS     R3,R3,#+1
   \   000001C6   0x1CA4             ADDS     R4,R4,#+2
   \   000001C8   0x2B10             CMP      R3,#+16
   \   000001CA   0xF4FF 0xAF26      BCC.W    ??HAL_GPIO_Init_0
    303          }
   \   000001CE   0xB001             ADD      SP,SP,#+4
   \   000001D0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    304          
    305          /**
    306            * @brief  De-initializes the GPIOx peripheral registers to their default reset values.
    307            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral.
    308            * @param  GPIO_Pin: specifies the port bit to be written.
    309            *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
    310            * @retval None
    311            */

   \                                 In section .text, align 4, keep-with-next
    312          void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
    313          {
   \                     HAL_GPIO_DeInit: (+1)
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
    314            uint32_t position;
    315            uint32_t ioposition = 0x00;
    316            uint32_t iocurrent = 0x00;
    317            uint32_t tmp = 0x00;
    318          
    319            /* Check the parameters */
    320            assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    321            
    322            /* Configure the port pins */
    323            for(position = 0; position < GPIO_NUMBER; position++)
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x.... 0x....      LDR.W    R3,??DataTable2
   \   0000000C   0x.... 0x....      LDR.W    R8,??DataTable2_3  ;; 0x40020000
   \   00000010   0x.... 0x....      LDR.W    R9,??DataTable2_1  ;; 0x40013808
   \   00000014   0xF04F 0x0A0F      MOV      R10,#+15
   \   00000018   0xF04F 0x0B01      MOV      R11,#+1
    324            {
    325              /* Get the IO position */
    326              ioposition = ((uint32_t)0x01) << position;
    327              /* Get the current IO position */
    328              iocurrent = (GPIO_Pin) & ioposition;
   \                     ??HAL_GPIO_DeInit_0: (+1)
   \   0000001C   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \   00000020   0xFA0B 0xFE01      LSL      LR,R11,R1
   \   00000024   0xEA0E 0x0C0C      AND      R12,LR,R12
    329          
    330              if(iocurrent == ioposition)
   \   00000028   0x45F4             CMP      R12,LR
   \   0000002A   0xD17C             BNE.N    ??HAL_GPIO_DeInit_1
    331              {
    332                /*------------------------- GPIO Mode Configuration --------------------*/
    333                /* Configure IO Direction in Input Floating Mode */
    334                GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
   \   0000002C   0x2403             MOVS     R4,#+3
   \   0000002E   0x4094             LSLS     R4,R4,R2
   \   00000030   0x6805             LDR      R5,[R0, #+0]
   \   00000032   0x43E4             MVNS     R4,R4
   \   00000034   0xF001 0x0707      AND      R7,R1,#0x7
   \   00000038   0x00BF             LSLS     R7,R7,#+2
   \   0000003A   0x4025             ANDS     R5,R4,R5
   \   0000003C   0xFA0A 0xF707      LSL      R7,R10,R7
   \   00000040   0x6005             STR      R5,[R0, #+0]
   \   00000042   0x08CD             LSRS     R5,R1,#+3
   \   00000044   0xEB00 0x0585      ADD      R5,R0,R5, LSL #+2
   \   00000048   0x6A2E             LDR      R6,[R5, #+32]
   \   0000004A   0x43BE             BICS     R6,R6,R7
   \   0000004C   0x622E             STR      R6,[R5, #+32]
    335          
    336                /* Configure the default Alternate Function in current IO */
    337                GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
    338          
    339                /* Configure the default value for IO Speed */
    340                GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
   \   0000004E   0x6885             LDR      R5,[R0, #+8]
   \   00000050   0x4025             ANDS     R5,R4,R5
   \   00000052   0x6085             STR      R5,[R0, #+8]
    341          
    342                /* Configure the default value IO Output Type */
    343                GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
   \   00000054   0x6845             LDR      R5,[R0, #+4]
   \   00000056   0xEA25 0x0E0E      BIC      LR,R5,LR
   \   0000005A   0xF8C0 0xE004      STR      LR,[R0, #+4]
    344          
    345                /* Deactivate the Pull-up and Pull-down resistor for the current IO */
    346                GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
   \   0000005E   0xF8D0 0xE00C      LDR      LR,[R0, #+12]
   \   00000062   0xEA04 0x0E0E      AND      LR,R4,LR
    347          
    348                /*------------------------- EXTI Mode Configuration --------------------*/
    349                tmp = SYSCFG->EXTICR[position >> 2];
    350                tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
   \   00000066   0xF001 0x0403      AND      R4,R1,#0x3
   \   0000006A   0xF8C0 0xE00C      STR      LR,[R0, #+12]
   \   0000006E   0xEA4F 0x0E91      LSR      LR,R1,#+2
   \   00000072   0xF859 0x602E      LDR      R6,[R9, LR, LSL #+2]
   \   00000076   0x00A4             LSLS     R4,R4,#+2
   \   00000078   0xFA0A 0xF504      LSL      R5,R10,R4
   \   0000007C   0x402E             ANDS     R6,R5,R6
    351                if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
   \   0000007E   0x4540             CMP      R0,R8
   \   00000080   0xBF08             IT       EQ 
   \   00000082   0x2700             MOVEQ    R7,#+0
   \   00000084   0xD02C             BEQ.N    ??HAL_GPIO_DeInit_2
   \   00000086   0x....             LDR.N    R7,??DataTable2_4  ;; 0x40020400
   \   00000088   0x42B8             CMP      R0,R7
   \   0000008A   0xBF08             IT       EQ 
   \   0000008C   0x2701             MOVEQ    R7,#+1
   \   0000008E   0xD027             BEQ.N    ??HAL_GPIO_DeInit_2
   \   00000090   0x....             LDR.N    R7,??DataTable2_5  ;; 0x40020800
   \   00000092   0x42B8             CMP      R0,R7
   \   00000094   0xBF08             IT       EQ 
   \   00000096   0x2702             MOVEQ    R7,#+2
   \   00000098   0xD022             BEQ.N    ??HAL_GPIO_DeInit_2
   \   0000009A   0x....             LDR.N    R7,??DataTable2_6  ;; 0x40020c00
   \   0000009C   0x42B8             CMP      R0,R7
   \   0000009E   0xBF08             IT       EQ 
   \   000000A0   0x2703             MOVEQ    R7,#+3
   \   000000A2   0xD01D             BEQ.N    ??HAL_GPIO_DeInit_2
   \   000000A4   0x....             LDR.N    R7,??DataTable2_7  ;; 0x40021000
   \   000000A6   0x42B8             CMP      R0,R7
   \   000000A8   0xBF08             IT       EQ 
   \   000000AA   0x2704             MOVEQ    R7,#+4
   \   000000AC   0xD018             BEQ.N    ??HAL_GPIO_DeInit_2
   \   000000AE   0x....             LDR.N    R7,??DataTable2_8  ;; 0x40021400
   \   000000B0   0x42B8             CMP      R0,R7
   \   000000B2   0xBF08             IT       EQ 
   \   000000B4   0x2705             MOVEQ    R7,#+5
   \   000000B6   0xD013             BEQ.N    ??HAL_GPIO_DeInit_2
   \   000000B8   0x....             LDR.N    R7,??DataTable2_9  ;; 0x40021800
   \   000000BA   0x42B8             CMP      R0,R7
   \   000000BC   0xBF08             IT       EQ 
   \   000000BE   0x2706             MOVEQ    R7,#+6
   \   000000C0   0xD00E             BEQ.N    ??HAL_GPIO_DeInit_2
   \   000000C2   0x....             LDR.N    R7,??DataTable2_10  ;; 0x40021c00
   \   000000C4   0x42B8             CMP      R0,R7
   \   000000C6   0xBF08             IT       EQ 
   \   000000C8   0x2707             MOVEQ    R7,#+7
   \   000000CA   0xD009             BEQ.N    ??HAL_GPIO_DeInit_2
   \   000000CC   0x....             LDR.N    R7,??DataTable2_11  ;; 0x40022000
   \   000000CE   0x42B8             CMP      R0,R7
   \   000000D0   0xBF08             IT       EQ 
   \   000000D2   0x2708             MOVEQ    R7,#+8
   \   000000D4   0xD004             BEQ.N    ??HAL_GPIO_DeInit_2
   \   000000D6   0x....             LDR.N    R7,??DataTable2_12  ;; 0x40022400
   \   000000D8   0x42B8             CMP      R0,R7
   \   000000DA   0xBF0C             ITE      EQ 
   \   000000DC   0x2709             MOVEQ    R7,#+9
   \   000000DE   0x270A             MOVNE    R7,#+10
   \                     ??HAL_GPIO_DeInit_2: (+1)
   \   000000E0   0xFA07 0xF404      LSL      R4,R7,R4
   \   000000E4   0x42A6             CMP      R6,R4
   \   000000E6   0xD11E             BNE.N    ??HAL_GPIO_DeInit_1
    352                {
    353                  /* Configure the External Interrupt or event for the current IO */
    354                  tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
    355                  SYSCFG->EXTICR[position >> 2] &= ~tmp;
   \   000000E8   0xF859 0x402E      LDR      R4,[R9, LR, LSL #+2]
    356          
    357                  /* Clear EXTI line configuration */
    358                  EXTI->IMR &= ~((uint32_t)iocurrent);
   \   000000EC   0xEA6F 0x0C0C      MVN      R12,R12
   \   000000F0   0x43AC             BICS     R4,R4,R5
   \   000000F2   0xF849 0x402E      STR      R4,[R9, LR, LSL #+2]
   \   000000F6   0xF8D3 0xE000      LDR      LR,[R3, #+0]
   \   000000FA   0xEA0C 0x0E0E      AND      LR,R12,LR
   \   000000FE   0xF8C3 0xE000      STR      LR,[R3, #+0]
    359                  EXTI->EMR &= ~((uint32_t)iocurrent);
   \   00000102   0xF8D3 0xE004      LDR      LR,[R3, #+4]
   \   00000106   0xEA0C 0x0E0E      AND      LR,R12,LR
   \   0000010A   0xF8C3 0xE004      STR      LR,[R3, #+4]
    360          
    361                  /* Clear Rising Falling edge configuration */
    362                  EXTI->RTSR &= ~((uint32_t)iocurrent);
   \   0000010E   0xF8D3 0xE008      LDR      LR,[R3, #+8]
   \   00000112   0xEA0C 0x0E0E      AND      LR,R12,LR
   \   00000116   0xF8C3 0xE008      STR      LR,[R3, #+8]
    363                  EXTI->FTSR &= ~((uint32_t)iocurrent);
   \   0000011A   0xF8D3 0xE00C      LDR      LR,[R3, #+12]
   \   0000011E   0xEA0C 0x0C0E      AND      R12,R12,LR
   \   00000122   0xF8C3 0xC00C      STR      R12,[R3, #+12]
    364          	  }
    365              }
    366            }
   \                     ??HAL_GPIO_DeInit_1: (+1)
   \   00000126   0x1C49             ADDS     R1,R1,#+1
   \   00000128   0x1C92             ADDS     R2,R2,#+2
   \   0000012A   0x2910             CMP      R1,#+16
   \   0000012C   0xF4FF 0xAF76      BCC.W    ??HAL_GPIO_DeInit_0
    367          }
   \   00000130   0xB001             ADD      SP,SP,#+4
   \   00000132   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    368          
    369          /**
    370            * @}
    371            */
    372          
    373          /** @defgroup GPIO_Exported_Functions_Group2 IO operation functions 
    374           *  @brief   GPIO Read and Write
    375           *
    376          @verbatim
    377           ===============================================================================
    378                                 ##### IO operation functions #####
    379           ===============================================================================
    380          
    381          @endverbatim
    382            * @{
    383            */
    384          
    385          /**
    386            * @brief  Reads the specified input port pin.
    387            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral.
    388            * @param  GPIO_Pin: specifies the port bit to read.
    389            *         This parameter can be GPIO_PIN_x where x can be (0..15).
    390            * @retval The input port pin value.
    391            */

   \                                 In section .text, align 2, keep-with-next
    392          GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    393          {
    394            GPIO_PinState bitstatus;
    395          
    396            /* Check the parameters */
    397            assert_param(IS_GPIO_PIN(GPIO_Pin));
    398          
    399            if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
   \                     HAL_GPIO_ReadPin: (+1)
   \   00000000   0x6900             LDR      R0,[R0, #+16]
   \   00000002   0x4008             ANDS     R0,R1,R0
   \   00000004   0x1E40             SUBS     R0,R0,#+1
   \   00000006   0x4180             SBCS     R0,R0,R0
   \   00000008   0x43C0             MVNS     R0,R0
   \   0000000A   0x0FC0             LSRS     R0,R0,#+31
    400            {
    401              bitstatus = GPIO_PIN_SET;
    402            }
    403            else
    404            {
    405              bitstatus = GPIO_PIN_RESET;
    406            }
    407            return bitstatus;
   \   0000000C   0x4770             BX       LR               ;; return
    408          }
    409          
    410          /**
    411            * @brief  Sets or clears the selected data port bit.
    412            *
    413            * @note   This function uses GPIOx_BSRR register to allow atomic read/modify
    414            *         accesses. In this way, there is no risk of an IRQ occurring between
    415            *         the read and the modify access.
    416            *
    417            * @param  GPIOx: where x can be (A..K) to select the GPIO peripheral.
    418            * @param  GPIO_Pin: specifies the port bit to be written.
    419            *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
    420            * @param  PinState: specifies the value to be written to the selected bit.
    421            *          This parameter can be one of the GPIO_PinState enum values:
    422            *            @arg GPIO_PIN_RESET: to clear the port pin
    423            *            @arg GPIO_PIN_SET: to set the port pin
    424            * @retval None
    425            */

   \                                 In section .text, align 2, keep-with-next
    426          void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
    427          {
    428            /* Check the parameters */
    429            assert_param(IS_GPIO_PIN(GPIO_Pin));
    430            assert_param(IS_GPIO_PIN_ACTION(PinState));
    431          
    432            if(PinState != GPIO_PIN_RESET)
   \                     HAL_GPIO_WritePin: (+1)
   \   00000000   0xB902             CBNZ.N   R2,??HAL_GPIO_WritePin_0
    433            {
    434              GPIOx->BSRR = GPIO_Pin;
    435            }
    436            else
    437            {
    438              GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
   \   00000002   0x0409             LSLS     R1,R1,#+16
   \                     ??HAL_GPIO_WritePin_0: (+1)
   \   00000004   0x6181             STR      R1,[R0, #+24]
    439            }
    440          }
   \   00000006   0x4770             BX       LR               ;; return
    441          
    442          /**
    443            * @brief  Toggles the specified GPIO pins.
    444            * @param  GPIOx: Where x can be (A..I) to select the GPIO peripheral.
    445            * @param  GPIO_Pin: Specifies the pins to be toggled.
    446            * @retval None
    447            */

   \                                 In section .text, align 2, keep-with-next
    448          void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    449          {
    450            /* Check the parameters */
    451            assert_param(IS_GPIO_PIN(GPIO_Pin));
    452          
    453            GPIOx->ODR ^= GPIO_Pin;
   \                     HAL_GPIO_TogglePin: (+1)
   \   00000000   0x6942             LDR      R2,[R0, #+20]
   \   00000002   0x4051             EORS     R1,R1,R2
   \   00000004   0x6141             STR      R1,[R0, #+20]
    454          }
   \   00000006   0x4770             BX       LR               ;; return
    455          
    456          /**
    457            * @brief  Locks GPIO Pins configuration registers.
    458            * @note   The locked registers are GPIOx_MODER, GPIOx_OTYPER, GPIOx_OSPEEDR,
    459            *         GPIOx_PUPDR, GPIOx_AFRL and GPIOx_AFRH.
    460            * @note   The configuration of the locked GPIO pins can no longer be modified
    461            *         until the next reset.
    462            * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F7 family
    463            * @param  GPIO_Pin: specifies the port bit to be locked.
    464            *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
    465            * @retval None
    466            */

   \                                 In section .text, align 2, keep-with-next
    467          HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    468          {
   \                     HAL_GPIO_LockPin: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
    469            __IO uint32_t tmp = GPIO_LCKR_LCKK;
   \   00000002   0xF44F 0x3280      MOV      R2,#+65536
   \   00000006   0x9200             STR      R2,[SP, #+0]
    470          
    471            /* Check the parameters */
    472            assert_param(IS_GPIO_PIN(GPIO_Pin));
    473          
    474            /* Apply lock key write sequence */
    475            tmp |= GPIO_Pin;
   \   00000008   0x9A00             LDR      R2,[SP, #+0]
   \   0000000A   0x430A             ORRS     R2,R1,R2
   \   0000000C   0x9200             STR      R2,[SP, #+0]
    476            /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
    477            GPIOx->LCKR = tmp;
   \   0000000E   0x9A00             LDR      R2,[SP, #+0]
   \   00000010   0x61C2             STR      R2,[R0, #+28]
    478            /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
    479            GPIOx->LCKR = GPIO_Pin;
   \   00000012   0x61C1             STR      R1,[R0, #+28]
    480            /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
    481            GPIOx->LCKR = tmp;
   \   00000014   0x9900             LDR      R1,[SP, #+0]
   \   00000016   0x61C1             STR      R1,[R0, #+28]
    482            /* Read LCKK bit*/
    483            tmp = GPIOx->LCKR;
   \   00000018   0x69C1             LDR      R1,[R0, #+28]
   \   0000001A   0x9100             STR      R1,[SP, #+0]
    484          
    485           if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
   \   0000001C   0x69C0             LDR      R0,[R0, #+28]
    486            {
    487              return HAL_OK;
    488            }
    489            else
    490            {
    491              return HAL_ERROR;
   \   0000001E   0xB001             ADD      SP,SP,#+4
   \   00000020   0xF400 0x3080      AND      R0,R0,#0x10000
   \   00000024   0x1E40             SUBS     R0,R0,#+1
   \   00000026   0x4180             SBCS     R0,R0,R0
   \   00000028   0x0FC0             LSRS     R0,R0,#+31
   \   0000002A   0x4770             BX       LR               ;; return
    492            }
    493          }
    494          
    495          /**
    496            * @brief  This function handles EXTI interrupt request.
    497            * @param  GPIO_Pin: Specifies the pins connected EXTI line
    498            * @retval None
    499            */

   \                                 In section .text, align 2, keep-with-next
    500          void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
    501          {
    502            /* EXTI line interrupt detected */
    503            if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
   \                     HAL_GPIO_EXTI_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable2_13  ;; 0x40013c14
   \   00000002   0x6813             LDR      R3,[R2, #+0]
   \   00000004   0x4203             TST      R3,R0
   \   00000006   0xD100             BNE.N    ??HAL_GPIO_EXTI_IRQHandler_0
   \   00000008   0x4770             BX       LR
    504            {
    505              __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
   \                     ??HAL_GPIO_EXTI_IRQHandler_0: (+1)
   \   0000000A   0xB500             PUSH     {LR}
   \   0000000C   0xB081             SUB      SP,SP,#+4
   \   0000000E   0x6010             STR      R0,[R2, #+0]
    506              HAL_GPIO_EXTI_Callback(GPIO_Pin);
   \   00000010   0x.... 0x....      BL       HAL_GPIO_EXTI_Callback
    507            }
    508          }
   \   00000014   0xB001             ADD      SP,SP,#+4
   \   00000016   0xBD00             POP      {PC}             ;; return
    509          
    510          /**
    511            * @brief  EXTI line detection callbacks.
    512            * @param  GPIO_Pin: Specifies the pins connected EXTI line
    513            * @retval None
    514            */

   \                                 In section .text, align 2, keep-with-next
    515          __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
    516          {
    517            /* NOTE: This function Should not be modified, when the callback is needed,
    518                     the HAL_GPIO_EXTI_Callback could be implemented in the user file
    519             */
    520          }
   \                     HAL_GPIO_EXTI_Callback: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40013C00         DC32     0x40013c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40013808         DC32     0x40013808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40023844         DC32     0x40023844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x40021C00         DC32     0x40021c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x40022400         DC32     0x40022400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x40013C14         DC32     0x40013c14
    521          
    522          /**
    523            * @}
    524            */
    525          
    526          
    527          /**
    528            * @}
    529            */
    530          
    531          #endif /* HAL_GPIO_MODULE_ENABLED */
    532          /**
    533            * @}
    534            */
    535          
    536          /**
    537            * @}
    538            */
    539          
    540          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   HAL_GPIO_DeInit
       0   HAL_GPIO_EXTI_Callback
       8   HAL_GPIO_EXTI_IRQHandler
         8   -> HAL_GPIO_EXTI_Callback
      40   HAL_GPIO_Init
       4   HAL_GPIO_LockPin
       0   HAL_GPIO_ReadPin
       0   HAL_GPIO_TogglePin
       0   HAL_GPIO_WritePin


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
     310  HAL_GPIO_DeInit
       2  HAL_GPIO_EXTI_Callback
      24  HAL_GPIO_EXTI_IRQHandler
     468  HAL_GPIO_Init
      44  HAL_GPIO_LockPin
      14  HAL_GPIO_ReadPin
       8  HAL_GPIO_TogglePin
       8  HAL_GPIO_WritePin

 
 934 bytes in section .text
 
 934 bytes of CODE memory

Errors: none
Warnings: none
