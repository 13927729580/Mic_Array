###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       20/Dec/2015  03:50:45
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Middlewares\ST\STM32_USB_Host_Library\Core\Src\usbh_core.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Middlewares\ST\STM32_USB_Host_Library\Core\Src\usbh_core.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -Ohz --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\usbh_core.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\usbh_core.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Middlewares\ST\STM32_USB_Host_Library\Core\Src\usbh_core.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbh_core.c 
      4            * @author  MCD Application Team
      5            * @version V3.2.1
      6            * @date    26-June-2015
      7            * @brief   This file implements the functions for the core state machine process
      8            *          the enumeration and the control transfer process
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     13            *
     14            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     15            * You may not use this file except in compliance with the License.
     16            * You may obtain a copy of the License at:
     17            *
     18            *        http://www.st.com/software_license_agreement_liberty_v2
     19            *
     20            * Unless required by applicable law or agreed to in writing, software 
     21            * distributed under the License is distributed on an "AS IS" BASIS, 
     22            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     23            * See the License for the specific language governing permissions and
     24            * limitations under the License.
     25            *
     26            ******************************************************************************
     27            */ 
     28          /* Includes ------------------------------------------------------------------*/
     29          
     30          #include "usbh_core.h"
     31          
     32          
     33          /** @addtogroup USBH_LIB
     34            * @{
     35            */
     36          
     37          /** @addtogroup USBH_LIB_CORE
     38            * @{
     39            */
     40          
     41          /** @defgroup USBH_CORE 
     42            * @brief This file handles the basic enumeration when a device is connected 
     43            *          to the host.
     44            * @{
     45            */ 
     46          
     47          
     48          /** @defgroup USBH_CORE_Private_Defines
     49            * @{
     50            */ 
     51          #define USBH_ADDRESS_DEFAULT                     0
     52          #define USBH_ADDRESS_ASSIGNED                    1      
     53          #define USBH_MPS_DEFAULT                         0x40
     54          /**
     55            * @}
     56            */ 
     57          
     58          /** @defgroup USBH_CORE_Private_Macros
     59            * @{
     60            */ 
     61          /**
     62            * @}
     63            */ 
     64          
     65          
     66          /** @defgroup USBH_CORE_Private_Variables
     67            * @{
     68            */ 
     69          /**
     70            * @}
     71            */ 
     72           
     73          
     74          /** @defgroup USBH_CORE_Private_Functions
     75            * @{
     76            */ 
     77          static USBH_StatusTypeDef  USBH_HandleEnum    (USBH_HandleTypeDef *phost);
     78          static void                USBH_HandleSof     (USBH_HandleTypeDef *phost);
     79          static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost);
     80          
     81          #if (USBH_USE_OS == 1)  
     82          static void USBH_Process_OS(void const * argument);
     83          #endif
     84          
     85          /**
     86            * @brief  HCD_Init 
     87            *         Initialize the HOST Core.
     88            * @param  phost: Host Handle
     89            * @param  pUsrFunc: User Callback
     90            * @retval USBH Status
     91            */

   \                                 In section .text, align 2, keep-with-next
     92          USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t ), uint8_t id)
     93          {
   \                     USBH_Init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x460D             MOV      R5,R1
     94            /* Check whether the USB Host handle is valid */
     95            if(phost == NULL)
   \   00000006   0xD10C             BNE.N    ??USBH_Init_0
     96            {
     97              USBH_ErrLog("Invalid Host handle");
   \   00000008   0x.... 0x....      ADR.W    R0,?_0
   \   0000000C   0x.... 0x....      BL       printf
   \   00000010   0x.... 0x....      ADR.W    R0,?_1
   \   00000014   0x.... 0x....      BL       printf
   \   00000018   0x....             ADR.N    R0,??DataTable31  ;; "\n"
   \   0000001A   0x.... 0x....      BL       printf
     98              return USBH_FAIL; 
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0xBD70             POP      {R4-R6,PC}
     99            }
    100            
    101            /* Set DRiver ID */
    102            phost->id = id;
   \                     ??USBH_Init_0: (+1)
   \   00000022   0xF504 0x762B      ADD      R6,R4,#+684
    103            
    104            /* Unlink class*/
    105            phost->pActiveClass = NULL;
   \   00000026   0xF504 0x7019      ADD      R0,R4,#+612
   \   0000002A   0x7032             STRB     R2,[R6, #+0]
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x6001             STR      R1,[R0, #+0]
    106            phost->ClassNumber = 0;
   \   00000030   0x6041             STR      R1,[R0, #+4]
    107            
    108            /* Restore default states and prepare EP0 */ 
    109            DeInitStateMachine(phost);
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       DeInitStateMachine
    110            
    111            /* Assign User process */
    112            if(pUsrFunc != NULL)
   \   00000038   0x0028             MOVS     R0,R5
    113            {
    114              phost->pUser = pUsrFunc;
    115            }
    116            
    117          #if (USBH_USE_OS == 1) 
    118            
    119            /* Create USB Host Queue */
    120            osMessageQDef(USBH_Queue, 10, uint16_t);
    121            phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL); 
    122            
    123            /*Create USB Host Task */
    124          #if defined (USBH_PROCESS_STACK_SIZE)
    125            osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
    126          #else
    127            osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, 8 * configMINIMAL_STACK_SIZE);
    128          #endif  
    129            phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
    130          #endif  
    131            
    132            /* Initialize low level driver */
    133            USBH_LL_Init(phost);
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0xBF18             IT       NE 
   \   0000003E   0x60B5             STRNE    R5,[R6, #+8]
   \   00000040   0x.... 0x....      BL       USBH_LL_Init
    134            return USBH_OK;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
    135          }
    136          
    137          /**
    138            * @brief  HCD_Init 
    139            *         De-Initialize the Host portion of the driver.
    140            * @param  phost: Host Handle
    141            * @retval USBH Status
    142            */

   \                                 In section .text, align 2, keep-with-next
    143          USBH_StatusTypeDef  USBH_DeInit(USBH_HandleTypeDef *phost)
    144          {
   \                     USBH_DeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    145            DeInitStateMachine(phost);
   \   00000004   0x.... 0x....      BL       DeInitStateMachine
    146            
    147            if(phost->pData != NULL)
   \   00000008   0xF504 0x7019      ADD      R0,R4,#+612
   \   0000000C   0x6CC1             LDR      R1,[R0, #+76]
   \   0000000E   0xB129             CBZ.N    R1,??USBH_DeInit_0
    148            {
    149              phost->pActiveClass->pData = NULL;
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x61C1             STR      R1,[R0, #+28]
    150              USBH_LL_Stop(phost);
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       USBH_LL_Stop
    151            }
    152          
    153            return USBH_OK;
   \                     ??USBH_DeInit_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    154          }
    155          
    156          /**
    157            * @brief  DeInitStateMachine 
    158            *         De-Initialize the Host state machine.
    159            * @param  phost: Host Handle
    160            * @retval USBH Status
    161            */

   \                                 In section .text, align 2, keep-with-next
    162          static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
    163          {
   \                     DeInitStateMachine: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    164            uint32_t i = 0;
    165          
    166            /* Clear Pipes flags*/
    167            for ( ; i < USBH_MAX_PIPES_NBR; i++)
    168            {
    169              phost->Pipes[i] = 0;
   \   00000004   0x213C             MOVS     R1,#+60
   \   00000006   0xF504 0x701B      ADD      R0,R4,#+620
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr4
    170            }
    171            
    172            for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
    173            {
    174              phost->device.Data[i] = 0;
   \   0000000E   0xF44F 0x7100      MOV      R1,#+512
   \   00000012   0xF104 0x001C      ADD      R0,R4,#+28
   \   00000016   0x.... 0x....      BL       __aeabi_memclr4
    175            }
    176            
    177            phost->gState = HOST_IDLE;
   \   0000001A   0x2000             MOVS     R0,#+0
    178            phost->EnumState = ENUM_IDLE;
    179            phost->RequestState = CMD_SEND;
    180            phost->Timer = 0;  
    181            
    182            phost->Control.state = CTRL_SETUP;
    183            phost->Control.pipe_size = USBH_MPS_DEFAULT;  
    184            phost->Control.errorcount = 0;
    185            
    186            phost->device.address = USBH_ADDRESS_DEFAULT;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x7020             STRB     R0,[R4, #+0]
   \   00000020   0x7060             STRB     R0,[R4, #+1]
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x70A0             STRB     R0,[R4, #+2]
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF8C4 0x02A8      STR      R0,[R4, #+680]
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x7620             STRB     R0,[R4, #+24]
   \   00000030   0x2040             MOVS     R0,#+64
   \   00000032   0x71A0             STRB     R0,[R4, #+6]
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x7660             STRB     R0,[R4, #+25]
   \   00000038   0xF504 0x7007      ADD      R0,R4,#+540
   \   0000003C   0x7001             STRB     R1,[R0, #+0]
    187            phost->device.speed   = USBH_SPEED_FULL;
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x7041             STRB     R1,[R0, #+1]
    188            
    189            return USBH_OK;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xBD10             POP      {R4,PC}          ;; return
    190          }
    191          
    192          /**
    193            * @brief  USBH_RegisterClass 
    194            *         Link class driver to Host Core.
    195            * @param  phost : Host Handle
    196            * @param  pclass: Class handle
    197            * @retval USBH Status
    198            */

   \                                 In section .text, align 2, keep-with-next
    199          USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
    200          {
   \                     USBH_RegisterClass: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4603             MOV      R3,R0
    201            USBH_StatusTypeDef   status = USBH_OK;
   \   00000004   0x2000             MOVS     R0,#+0
    202            
    203            if(pclass != 0)
   \   00000006   0x....             ADR.N    R4,??DataTable31  ;; "\n"
   \   00000008   0x.... 0x....      ADR.W    R2,?_0
   \   0000000C   0xB181             CBZ.N    R1,??USBH_RegisterClass_0
    204            {
    205              if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
   \   0000000E   0xF8D3 0x5268      LDR      R5,[R3, #+616]
   \   00000012   0xB93D             CBNZ.N   R5,??USBH_RegisterClass_1
    206              {
    207                /* link the class to the USB Host handle */
    208                phost->pClass[phost->ClassNumber++] = pclass;
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0xF8C3 0x2268      STR      R2,[R3, #+616]
   \   0000001A   0xEB03 0x0285      ADD      R2,R3,R5, LSL #+2
   \   0000001E   0xF8C2 0x1260      STR      R1,[R2, #+608]
    209                status = USBH_OK;
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}
    210              }
    211              else
    212              {
    213                USBH_ErrLog("Max Class Number reached");
   \                     ??USBH_RegisterClass_1: (+1)
   \   00000024   0x4610             MOV      R0,R2
   \   00000026   0x.... 0x....      BL       printf
   \   0000002A   0x.... 0x....      ADR.W    R0,?_3
   \   0000002E   0xE004             B.N      ??USBH_RegisterClass_2
    214                status = USBH_FAIL; 
    215              }
    216            }
    217            else
    218            {
    219              USBH_ErrLog("Invalid Class handle");
   \                     ??USBH_RegisterClass_0: (+1)
   \   00000030   0x4610             MOV      R0,R2
   \   00000032   0x.... 0x....      BL       printf
   \   00000036   0x.... 0x....      ADR.W    R0,?_4
   \                     ??USBH_RegisterClass_2: (+1)
   \   0000003A   0x.... 0x....      BL       printf
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       printf
    220              status = USBH_FAIL; 
   \   00000044   0x2002             MOVS     R0,#+2
    221            }
    222            
    223            return status;
   \   00000046   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    224          }
    225          
    226          /**
    227            * @brief  USBH_SelectInterface 
    228            *         Select current interface.
    229            * @param  phost: Host Handle
    230            * @param  interface: Interface number
    231            * @retval USBH Status
    232            */

   \                                 In section .text, align 2, keep-with-next
    233          USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
    234          {
   \                     USBH_SelectInterface: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4606             MOV      R6,R0
    235            USBH_StatusTypeDef   status = USBH_OK;
    236            
    237            if(interface < phost->device.CfgDesc.bNumInterfaces)
   \   00000004   0xF206 0x201F      ADDW     R0,R6,#+543
   \   00000008   0x460F             MOV      R7,R1
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0x7DC1             LDRB     R1,[R0, #+23]
   \   0000000E   0x....             ADR.N    R5,??DataTable31  ;; "\n"
   \   00000010   0x428F             CMP      R7,R1
   \   00000012   0xD220             BCS.N    ??USBH_SelectInterface_0
    238            {
    239              phost->device.current_interface = interface;
   \   00000014   0x7007             STRB     R7,[R0, #+0]
    240              USBH_UsrLog ("Switching to Interface (#%d)", interface);
   \   00000016   0x4639             MOV      R1,R7
   \   00000018   0x.... 0x....      ADR.W    R0,?_5
   \   0000001C   0x.... 0x....      BL       printf
   \   00000020   0x.... 0x....      BL       ?Subroutine2
    241              USBH_UsrLog ("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass );
   \                     ??CrossCallReturnLabel_13: (+1)
   \   00000024   0x2022             MOVS     R0,#+34
   \   00000026   0xFB10 0x6007      SMLABB   R0,R0,R7,R6
   \   0000002A   0xF200 0x2641      ADDW     R6,R0,#+577
   \   0000002E   0x.... 0x....      ADR.W    R0,?_6
   \   00000032   0x7831             LDRB     R1,[R6, #+0]
   \   00000034   0x.... 0x....      BL       printf
   \   00000038   0x.... 0x....      BL       ?Subroutine2
    242              USBH_UsrLog ("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass );
   \                     ??CrossCallReturnLabel_12: (+1)
   \   0000003C   0x7871             LDRB     R1,[R6, #+1]
   \   0000003E   0x.... 0x....      ADR.W    R0,?_7
   \   00000042   0x.... 0x....      BL       printf
   \   00000046   0x.... 0x....      BL       ?Subroutine2
    243              USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
   \                     ??CrossCallReturnLabel_11: (+1)
   \   0000004A   0x78B1             LDRB     R1,[R6, #+2]
   \   0000004C   0x.... 0x....      ADR.W    R0,?_8
   \   00000050   0x.... 0x....      BL       printf
   \   00000054   0xE008             B.N      ??USBH_SelectInterface_1
    244            }
    245            else
    246            {
    247              USBH_ErrLog ("Cannot Select This Interface.");
   \                     ??USBH_SelectInterface_0: (+1)
   \   00000056   0x.... 0x....      ADR.W    R0,?_0
   \   0000005A   0x2402             MOVS     R4,#+2
   \   0000005C   0x.... 0x....      BL       printf
   \   00000060   0x.... 0x....      ADR.W    R0,?_9
   \   00000064   0x.... 0x....      BL       printf
   \                     ??USBH_SelectInterface_1: (+1)
   \   00000068   0x.... 0x....      BL       ?Subroutine2
    248              status = USBH_FAIL; 
    249            }
    250            return status;  
   \                     ??CrossCallReturnLabel_10: (+1)
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    251          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x4628             MOV      R0,R5
   \   00000002   0x.... 0x....      B.W      printf
    252          
    253          /**
    254            * @brief  USBH_GetActiveClass 
    255            *         Return Device Class.
    256            * @param  phost: Host Handle
    257            * @param  interface: Interface index
    258            * @retval Class Code
    259            */

   \                                 In section .text, align 2, keep-with-next
    260          uint8_t USBH_GetActiveClass(USBH_HandleTypeDef *phost)
    261          {
    262             return (phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass);            
   \                     USBH_GetActiveClass: (+1)
   \   00000000   0xF890 0x0241      LDRB     R0,[R0, #+577]
   \   00000004   0x4770             BX       LR               ;; return
    263          }
    264          /**
    265            * @brief  USBH_FindInterface 
    266            *         Find the interface index for a specific class.
    267            * @param  phost: Host Handle
    268            * @param  Class: Class code
    269            * @param  SubClass: SubClass code
    270            * @param  Protocol: Protocol code
    271            * @retval interface index in the configuration structure
    272            * @note : (1)interface index 0xFF means interface index not found
    273            */

   \                                 In section .text, align 2, keep-with-next
    274          uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
    275          {
   \                     USBH_FindInterface: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    276            USBH_InterfaceDescTypeDef    *pif ;
    277            USBH_CfgDescTypeDef          *pcfg ;
    278            int8_t                        if_ix = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    279            
    280            pif = (USBH_InterfaceDescTypeDef *)0;
    281            pcfg = &phost->device.CfgDesc;  
   \   00000004   0xF200 0x2032      ADDW     R0,R0,#+562
    282            
    283            while (if_ix < USBH_MAX_NUM_INTERFACES)
    284            {
    285              pif = &pcfg->Itf_Desc[if_ix];
   \                     ??USBH_FindInterface_0: (+1)
   \   00000008   0x2522             MOVS     R5,#+34
   \   0000000A   0xFB14 0x0505      SMLABB   R5,R4,R5,R0
   \   0000000E   0x350A             ADDS     R5,R5,#+10
    286              if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
    287                 ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
    288                   ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
   \   00000010   0x796E             LDRB     R6,[R5, #+5]
   \   00000012   0x428E             CMP      R6,R1
   \   00000014   0xBF18             IT       NE 
   \   00000016   0x29FF             CMPNE    R1,#+255
   \   00000018   0xD10B             BNE.N    ??USBH_FindInterface_1
   \   0000001A   0x79AE             LDRB     R6,[R5, #+6]
   \   0000001C   0x4296             CMP      R6,R2
   \   0000001E   0xBF18             IT       NE 
   \   00000020   0x2AFF             CMPNE    R2,#+255
   \   00000022   0xD106             BNE.N    ??USBH_FindInterface_1
   \   00000024   0x79ED             LDRB     R5,[R5, #+7]
   \   00000026   0x429D             CMP      R5,R3
   \   00000028   0xBF18             IT       NE 
   \   0000002A   0x2BFF             CMPNE    R3,#+255
   \   0000002C   0xD101             BNE.N    ??USBH_FindInterface_1
    289              {
    290                return  if_ix;
   \   0000002E   0xB2E0             UXTB     R0,R4
   \   00000030   0xBD70             POP      {R4-R6,PC}
    291              }
    292              if_ix++;
   \                     ??USBH_FindInterface_1: (+1)
   \   00000032   0x1C64             ADDS     R4,R4,#+1
    293            }
   \   00000034   0xB264             SXTB     R4,R4
   \   00000036   0x2C01             CMP      R4,#+1
   \   00000038   0xDBE6             BLT.N    ??USBH_FindInterface_0
    294            return 0xFF;
   \   0000003A   0x20FF             MOVS     R0,#+255
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    295          }
    296          
    297          /**
    298            * @brief  USBH_FindInterfaceIndex 
    299            *         Find the interface index for a specific class interface and alternate setting number.
    300            * @param  phost: Host Handle
    301            * @param  interface_number: interface number
    302            * @param  alt_settings    : alternate setting number
    303            * @retval interface index in the configuration structure
    304            * @note : (1)interface index 0xFF means interface index not found
    305            */

   \                                 In section .text, align 2, keep-with-next
    306          uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
    307          {
   \                     USBH_FindInterfaceIndex: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    308            USBH_InterfaceDescTypeDef    *pif ;
    309            USBH_CfgDescTypeDef          *pcfg ;
    310            int8_t                        if_ix = 0;
   \   00000002   0x2300             MOVS     R3,#+0
    311            
    312            pif = (USBH_InterfaceDescTypeDef *)0;
    313            pcfg = &phost->device.CfgDesc;  
   \   00000004   0xF200 0x2032      ADDW     R0,R0,#+562
    314            
    315            while (if_ix < USBH_MAX_NUM_INTERFACES)
    316            {
    317              pif = &pcfg->Itf_Desc[if_ix];
   \                     ??USBH_FindInterfaceIndex_0: (+1)
   \   00000008   0x2422             MOVS     R4,#+34
   \   0000000A   0xFB13 0x0404      SMLABB   R4,R3,R4,R0
   \   0000000E   0x340A             ADDS     R4,R4,#+10
    318              if((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
   \   00000010   0x78A5             LDRB     R5,[R4, #+2]
   \   00000012   0x428D             CMP      R5,R1
   \   00000014   0xBF04             ITT      EQ 
   \   00000016   0x78E4             LDRBEQ   R4,[R4, #+3]
   \   00000018   0x4294             CMPEQ    R4,R2
   \   0000001A   0xD101             BNE.N    ??USBH_FindInterfaceIndex_1
    319              {
    320                return  if_ix;
   \   0000001C   0xB2D8             UXTB     R0,R3
   \   0000001E   0xBD30             POP      {R4,R5,PC}
    321              }
    322              if_ix++;
   \                     ??USBH_FindInterfaceIndex_1: (+1)
   \   00000020   0x1C5B             ADDS     R3,R3,#+1
    323            }
   \   00000022   0xB25B             SXTB     R3,R3
   \   00000024   0x2B01             CMP      R3,#+1
   \   00000026   0xDBEF             BLT.N    ??USBH_FindInterfaceIndex_0
    324            return 0xFF;
   \   00000028   0x20FF             MOVS     R0,#+255
   \   0000002A   0xBD30             POP      {R4,R5,PC}       ;; return
    325          }
    326          
    327          /**
    328            * @brief  USBH_Start 
    329            *         Start the USB Host Core.
    330            * @param  phost: Host Handle
    331            * @retval USBH Status
    332            */

   \                                 In section .text, align 2, keep-with-next
    333          USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
    334          {
   \                     USBH_Start: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    335            /* Start the low level driver  */
    336            USBH_LL_Start(phost);
   \   00000004   0x.... 0x....      BL       USBH_LL_Start
    337            
    338            /* Activate VBUS on the port */ 
    339            USBH_LL_DriverVBUS (phost, TRUE);
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       USBH_LL_DriverVBUS
    340            
    341            return USBH_OK;  
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    342          }
    343          
    344          /**
    345            * @brief  USBH_Stop 
    346            *         Stop the USB Host Core.
    347            * @param  phost: Host Handle
    348            * @retval USBH Status
    349            */

   \                                 In section .text, align 2, keep-with-next
    350          USBH_StatusTypeDef  USBH_Stop   (USBH_HandleTypeDef *phost)
    351          {
   \                     USBH_Stop: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    352            /* Stop and cleanup the low level driver  */
    353            USBH_LL_Stop(phost);  
   \   00000004   0x.... 0x....      BL       USBH_LL_Stop
    354            
    355            /* DeActivate VBUS on the port */ 
    356            USBH_LL_DriverVBUS (phost, FALSE);
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       USBH_LL_DriverVBUS
    357            
    358            /* FRee Control Pipes */
    359            USBH_FreePipe  (phost, phost->Control.pipe_in);
   \   00000010   0x.... 0x....      BL       ?Subroutine3
    360            USBH_FreePipe  (phost, phost->Control.pipe_out);  
   \                     ??CrossCallReturnLabel_17: (+1)
   \   00000014   0x7961             LDRB     R1,[R4, #+5]
   \   00000016   0x.... 0x....      BL       ??Subroutine3_0
    361            
    362            return USBH_OK;  
   \                     ??CrossCallReturnLabel_15: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    363          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x7921             LDRB     R1,[R4, #+4]
   \                     ??Subroutine3_0: (+1)
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      B.W      USBH_FreePipe
    364          
    365          /**
    366            * @brief  HCD_ReEnumerate 
    367            *         Perform a new Enumeration phase.
    368            * @param  phost: Host Handle
    369            * @retval USBH Status
    370            */

   \                                 In section .text, align 2, keep-with-next
    371          USBH_StatusTypeDef  USBH_ReEnumerate   (USBH_HandleTypeDef *phost)
    372          {
   \                     USBH_ReEnumerate: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    373            /*Stop Host */ 
    374            USBH_Stop(phost);
   \   00000004   0x.... 0x....      BL       USBH_Stop
    375          
    376            /*Device has disconnected, so wait for 200 ms */  
    377            USBH_Delay(200);
   \   00000008   0x20C8             MOVS     R0,#+200
   \   0000000A   0x.... 0x....      BL       USBH_Delay
    378            
    379            /* Set State machines in default state */
    380            DeInitStateMachine(phost);
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       DeInitStateMachine
    381             
    382            /* Start again the host */
    383            USBH_Start(phost);
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       USBH_Start
    384                
    385          #if (USBH_USE_OS == 1)
    386                osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
    387          #endif  
    388            return USBH_OK;  
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    389          }
    390          
    391          /**
    392            * @brief  USBH_Process 
    393            *         Background process of the USB Core.
    394            * @param  phost: Host Handle
    395            * @retval USBH Status
    396            */

   \                                 In section .text, align 4, keep-with-next
    397          USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
    398          {
   \                     USBH_Process: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    399            __IO USBH_StatusTypeDef status = USBH_FAIL;
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    400            uint8_t idx = 0;
    401            
    402            switch (phost->gState)
   \   0000000A   0xF504 0x7507      ADD      R5,R4,#+540
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0xF504 0x7718      ADD      R7,R4,#+608
   \   00000014   0x....             ADR.N    R6,??DataTable33  ;; "\n"
   \   00000016   0x280A             CMP      R0,#+10
   \   00000018   0xD812             BHI.N    ??USBH_Process_1
   \   0000001A   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??USBH_Process_0:
   \   0000001E   0x06 0xC8          DC8      0x6,0xC8,0x12,0xBE
   \              0x12 0xBE    
   \   00000022   0xC8 0x42          DC8      0xC8,0x42,0x9E,0x5B
   \              0x9E 0x5B    
   \   00000026   0x63 0x6E          DC8      0x63,0x6E,0xB8,0x0
   \              0xB8 0x00    
    403            {
    404            case HOST_IDLE :
    405              
    406              if (phost->device.is_connected)  
   \                     ??USBH_Process_2: (+1)
   \   0000002A   0x78A8             LDRB     R0,[R5, #+2]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD007             BEQ.N    ??USBH_Process_1
    407              {
    408                /* Wait for 200 ms after connection */
    409                phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x7020             STRB     R0,[R4, #+0]
    410                USBH_Delay(200); 
   \   00000034   0x20C8             MOVS     R0,#+200
   \   00000036   0x.... 0x....      BL       USBH_Delay
    411                USBH_LL_ResetPort(phost);
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x.... 0x....      BL       USBH_LL_ResetPort
   \                     ??USBH_Process_1: (+1)
   \   00000040   0xE0B5             B.N      ??USBH_Process_3
    412          #if (USBH_USE_OS == 1)
    413                osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
    414          #endif
    415              }
    416              break;
    417              
    418            case HOST_DEV_WAIT_FOR_ATTACHMENT:
    419              break;    
    420              
    421            case HOST_DEV_ATTACHED :
    422              
    423              USBH_UsrLog("USB Device Attached");  
   \                     ??USBH_Process_4: (+1)
   \   00000042   0x.... 0x....      ADR.W    R0,?_10
   \   00000046   0x.... 0x....      BL       printf
   \   0000004A   0x.... 0x....      BL       ?Subroutine0
    424                
    425              /* Wait for 100 ms after Reset */
    426              USBH_Delay(100); 
   \                     ??CrossCallReturnLabel_4: (+1)
   \   0000004E   0x2064             MOVS     R0,#+100
   \   00000050   0x.... 0x....      BL       USBH_Delay
    427                    
    428              phost->device.speed = USBH_LL_GetSpeed(phost);
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       USBH_LL_GetSpeed
   \   0000005A   0x7068             STRB     R0,[R5, #+1]
    429              
    430              phost->gState = HOST_ENUMERATION;
   \   0000005C   0x2005             MOVS     R0,#+5
   \   0000005E   0x7020             STRB     R0,[R4, #+0]
    431              
    432              phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       USBH_AllocPipe
   \   00000068   0x7160             STRB     R0,[R4, #+5]
    433              phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
   \   0000006A   0x2180             MOVS     R1,#+128
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       USBH_AllocPipe
    434              
    435              
    436              /* Open Control pipes */
    437              USBH_OpenPipe (phost,
    438                             phost->Control.pipe_in,
    439                             0x80,
    440                             phost->device.address,
    441                             phost->device.speed,
    442                             USBH_EP_CONTROL,
    443                             phost->Control.pipe_size); 
   \   00000072   0x79A1             LDRB     R1,[R4, #+6]
   \   00000074   0x7120             STRB     R0,[R4, #+4]
   \   00000076   0x2280             MOVS     R2,#+128
   \   00000078   0x9102             STR      R1,[SP, #+8]
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x9101             STR      R1,[SP, #+4]
   \   0000007E   0x7869             LDRB     R1,[R5, #+1]
   \   00000080   0x9100             STR      R1,[SP, #+0]
   \   00000082   0x782B             LDRB     R3,[R5, #+0]
   \   00000084   0x4601             MOV      R1,R0
   \   00000086   0x.... 0x....      BL       ?Subroutine4
    444              
    445              /* Open Control pipes */
    446              USBH_OpenPipe (phost,
    447                             phost->Control.pipe_out,
    448                             0x00,
    449                             phost->device.address,
    450                             phost->device.speed,
    451                             USBH_EP_CONTROL,
    452                             phost->Control.pipe_size);
   \                     ??CrossCallReturnLabel_21: (+1)
   \   0000008A   0x79A0             LDRB     R0,[R4, #+6]
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0x9002             STR      R0,[SP, #+8]
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x9001             STR      R0,[SP, #+4]
   \   00000094   0x7868             LDRB     R0,[R5, #+1]
   \   00000096   0x9000             STR      R0,[SP, #+0]
   \   00000098   0x782B             LDRB     R3,[R5, #+0]
   \   0000009A   0x7961             LDRB     R1,[R4, #+5]
   \   0000009C   0x.... 0x....      BL       ?Subroutine4
    453              
    454          #if (USBH_USE_OS == 1)
    455              osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
    456          #endif    
    457              
    458              break;
   \                     ??CrossCallReturnLabel_20: (+1)
   \   000000A0   0xE085             B.N      ??USBH_Process_3
    459              
    460            case HOST_ENUMERATION:     
    461              /* Check for enumeration status */  
    462              if ( USBH_HandleEnum(phost) == USBH_OK)
   \                     ??USBH_Process_5: (+1)
   \   000000A2   0x4620             MOV      R0,R4
   \   000000A4   0x.... 0x....      BL       USBH_HandleEnum
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD1F9             BNE.N    ??CrossCallReturnLabel_20
    463              { 
    464                /* The function shall return USBH_OK when full enumeration is complete */
    465                USBH_UsrLog ("Enumeration done.");
   \   000000AC   0x.... 0x....      ADR.W    R0,?_11
   \   000000B0   0x.... 0x....      BL       printf
   \   000000B4   0x.... 0x....      BL       ?Subroutine0
    466                phost->device.current_interface = 0;
   \                     ??CrossCallReturnLabel_3: (+1)
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x70E8             STRB     R0,[R5, #+3]
    467                if(phost->device.DevDesc.bNumConfigurations == 1)
   \   000000BC   0x7D68             LDRB     R0,[R5, #+21]
   \   000000BE   0x2801             CMP      R0,#+1
   \   000000C0   0xD106             BNE.N    ??USBH_Process_6
    468                {
    469                  USBH_UsrLog ("This device has only 1 configuration.");
   \   000000C2   0x.... 0x....      ADR.W    R0,?_12
   \   000000C6   0x.... 0x....      BL       printf
   \   000000CA   0x.... 0x....      BL       ?Subroutine0
    470                  phost->gState  = HOST_SET_CONFIGURATION;        
   \                     ??CrossCallReturnLabel_2: (+1)
   \   000000CE   0xE007             B.N      ??USBH_Process_7
    471                  
    472                }
    473                else
    474                {
    475                  phost->gState  = HOST_INPUT; 
   \                     ??USBH_Process_6: (+1)
   \   000000D0   0x2007             MOVS     R0,#+7
   \   000000D2   0xE04D             B.N      ??USBH_Process_8
    476                }
    477                    
    478              }
    479              break;
    480              
    481            case HOST_INPUT:
    482              {
    483                /* user callback for end of device basic enumeration */
    484                if(phost->pUser != NULL)
   \                     ??USBH_Process_9: (+1)
   \   000000D4   0x6D7A             LDR      R2,[R7, #+84]
   \   000000D6   0x0010             MOVS     R0,R2
   \   000000D8   0xD069             BEQ.N    ??USBH_Process_3
    485                {
    486                  phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
   \   000000DA   0x2101             MOVS     R1,#+1
   \   000000DC   0x4620             MOV      R0,R4
   \   000000DE   0x4790             BLX      R2
    487                  phost->gState = HOST_SET_CONFIGURATION;
   \                     ??USBH_Process_7: (+1)
   \   000000E0   0x2008             MOVS     R0,#+8
   \   000000E2   0xE045             B.N      ??USBH_Process_8
    488                  
    489          #if (USBH_USE_OS == 1)
    490                  osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
    491          #endif         
    492                }
    493              }
    494              break;
    495              
    496            case HOST_SET_CONFIGURATION:
    497              /* set configuration */
    498              if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
   \                     ??USBH_Process_10: (+1)
   \   000000E4   0x7EE9             LDRB     R1,[R5, #+27]
   \   000000E6   0x4620             MOV      R0,R4
   \   000000E8   0x.... 0x....      BL       USBH_SetCfg
   \   000000EC   0x2800             CMP      R0,#+0
   \   000000EE   0xD15E             BNE.N    ??USBH_Process_3
    499              {
    500                phost->gState  = HOST_CHECK_CLASS;
   \   000000F0   0x2009             MOVS     R0,#+9
   \   000000F2   0x7020             STRB     R0,[R4, #+0]
    501                USBH_UsrLog ("Default configuration set.");
   \   000000F4   0x.... 0x....      ADR.W    R0,?_13
   \   000000F8   0xE044             B.N      ??USBH_Process_11
    502                
    503              }      
    504              
    505              break;
    506              
    507            case HOST_CHECK_CLASS:
    508              
    509              if(phost->ClassNumber == 0)
   \                     ??USBH_Process_12: (+1)
   \   000000FA   0x68B8             LDR      R0,[R7, #+8]
   \   000000FC   0xB910             CBNZ.N   R0,??USBH_Process_13
    510              {
    511                USBH_UsrLog ("No Class has been registered.");
   \   000000FE   0x.... 0x....      ADR.W    R0,?_14
   \   00000102   0xE03F             B.N      ??USBH_Process_11
    512              }
    513              else
    514              {
    515                phost->pActiveClass = NULL;
    516                
    517                for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
    518                {
    519                  if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
   \                     ??USBH_Process_13: (+1)
   \   00000104   0x6839             LDR      R1,[R7, #+0]
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0x6078             STR      R0,[R7, #+4]
   \   0000010A   0xF894 0x2241      LDRB     R2,[R4, #+577]
   \   0000010E   0x7908             LDRB     R0,[R1, #+4]
   \   00000110   0x4290             CMP      R0,R2
   \   00000112   0xD11D             BNE.N    ??USBH_Process_14
    520                  {
    521                    phost->pActiveClass = phost->pClass[idx];
   \   00000114   0x6079             STR      R1,[R7, #+4]
    522                  }
    523                }
    524                
    525                if(phost->pActiveClass != NULL)
   \   00000116   0xB1D9             CBZ.N    R1,??USBH_Process_14
    526                {
    527                  if(phost->pActiveClass->Init(phost)== USBH_OK)
   \   00000118   0x6889             LDR      R1,[R1, #+8]
   \   0000011A   0x4620             MOV      R0,R4
   \   0000011C   0x4788             BLX      R1
   \   0000011E   0xB970             CBNZ.N   R0,??USBH_Process_15
    528                  {
    529                    phost->gState  = HOST_CLASS_REQUEST; 
   \   00000120   0x2006             MOVS     R0,#+6
   \   00000122   0x7020             STRB     R0,[R4, #+0]
    530                    USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
   \   00000124   0x6878             LDR      R0,[R7, #+4]
   \   00000126   0x6801             LDR      R1,[R0, #+0]
   \   00000128   0x.... 0x....      ADR.W    R0,?_15
   \   0000012C   0x.... 0x....      BL       printf
   \   00000130   0x.... 0x....      BL       ?Subroutine0
    531                    
    532                    /* Inform user that a class has been activated */
    533                    phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000134   0x6D7A             LDR      R2,[R7, #+84]
   \   00000136   0x2103             MOVS     R1,#+3
   \   00000138   0x4620             MOV      R0,R4
   \   0000013A   0x4790             BLX      R2
   \   0000013C   0xE037             B.N      ??USBH_Process_3
    534                  }
    535                  else
    536                  {
    537                    phost->gState  = HOST_ABORT_STATE;
   \                     ??USBH_Process_15: (+1)
   \   0000013E   0x200C             MOVS     R0,#+12
   \   00000140   0x7020             STRB     R0,[R4, #+0]
    538                    USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
   \   00000142   0x6878             LDR      R0,[R7, #+4]
   \   00000144   0x6801             LDR      R1,[R0, #+0]
   \   00000146   0x.... 0x....      ADR.W    R0,?_16
   \   0000014A   0x.... 0x....      BL       printf
   \   0000014E   0xE01B             B.N      ??USBH_Process_16
    539                  }
    540                }
    541                else
    542                {
    543                  phost->gState  = HOST_ABORT_STATE;
   \                     ??USBH_Process_14: (+1)
   \   00000150   0x200C             MOVS     R0,#+12
   \   00000152   0x7020             STRB     R0,[R4, #+0]
    544                  USBH_UsrLog ("No registered class for this device.");
   \   00000154   0x.... 0x....      ADR.W    R0,?_17
   \   00000158   0xE014             B.N      ??USBH_Process_11
    545                }
    546              }
    547              
    548          #if (USBH_USE_OS == 1)
    549              osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
    550          #endif 
    551              break;    
    552              
    553            case HOST_CLASS_REQUEST:  
    554              /* process class standard control requests state machine */
    555              if(phost->pActiveClass != NULL)
   \                     ??USBH_Process_17: (+1)
   \   0000015A   0x6879             LDR      R1,[R7, #+4]
   \   0000015C   0xB151             CBZ.N    R1,??USBH_Process_18
    556              {
    557                status = phost->pActiveClass->Requests(phost);
   \   0000015E   0x6909             LDR      R1,[R1, #+16]
   \   00000160   0x4620             MOV      R0,R4
   \   00000162   0x4788             BLX      R1
   \   00000164   0xF88D 0x0000      STRB     R0,[SP, #+0]
    558                
    559                if(status == USBH_OK)
   \   00000168   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000016C   0xB9F8             CBNZ.N   R0,??USBH_Process_3
    560                {
    561                  phost->gState  = HOST_CLASS;        
   \   0000016E   0x200A             MOVS     R0,#+10
   \                     ??USBH_Process_8: (+1)
   \   00000170   0x7020             STRB     R0,[R4, #+0]
   \   00000172   0xE01C             B.N      ??USBH_Process_3
    562                }  
    563              }
    564              else
    565              {
    566                phost->gState  = HOST_ABORT_STATE;
   \                     ??USBH_Process_18: (+1)
   \   00000174   0x200C             MOVS     R0,#+12
   \   00000176   0x7020             STRB     R0,[R4, #+0]
    567                USBH_ErrLog ("Invalid Class Driver.");
   \   00000178   0x.... 0x....      ADR.W    R0,?_0
   \   0000017C   0x.... 0x....      BL       printf
   \   00000180   0x.... 0x....      ADR.W    R0,?_18
   \                     ??USBH_Process_11: (+1)
   \   00000184   0x.... 0x....      BL       printf
    568              
    569          #if (USBH_USE_OS == 1)
    570              osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
    571          #endif       
    572              }
   \                     ??USBH_Process_16: (+1)
   \   00000188   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \   0000018C   0xE00F             B.N      ??USBH_Process_3
    573              
    574              break;    
    575            case HOST_CLASS:   
    576              /* process class state machine */
    577              if(phost->pActiveClass != NULL)
   \                     ??USBH_Process_19: (+1)
   \   0000018E   0x6879             LDR      R1,[R7, #+4]
   \   00000190   0xB169             CBZ.N    R1,??USBH_Process_3
    578              { 
    579                phost->pActiveClass->BgndProcess(phost);
   \   00000192   0x6949             LDR      R1,[R1, #+20]
   \   00000194   0x4620             MOV      R0,R4
   \   00000196   0x4788             BLX      R1
   \   00000198   0xE009             B.N      ??USBH_Process_3
    580              }
    581              break;       
    582          
    583            case HOST_DEV_DISCONNECTED :
    584              
    585              DeInitStateMachine(phost);  
   \                     ??USBH_Process_20: (+1)
   \   0000019A   0x4620             MOV      R0,R4
   \   0000019C   0x.... 0x....      BL       DeInitStateMachine
    586              
    587              /* Re-Initilaize Host for new Enumeration */
    588              if(phost->pActiveClass != NULL)
   \   000001A0   0x6879             LDR      R1,[R7, #+4]
   \   000001A2   0xB121             CBZ.N    R1,??USBH_Process_3
    589              {
    590                phost->pActiveClass->DeInit(phost); 
   \   000001A4   0x68C9             LDR      R1,[R1, #+12]
   \   000001A6   0x4620             MOV      R0,R4
   \   000001A8   0x4788             BLX      R1
    591                phost->pActiveClass = NULL;
   \   000001AA   0x2000             MOVS     R0,#+0
   \   000001AC   0x6078             STR      R0,[R7, #+4]
    592              }     
    593              break;
    594              
    595            case HOST_ABORT_STATE:
    596            default :
    597              break;
    598            }
    599           return USBH_OK;  
   \                     ??USBH_Process_3: (+1)
   \   000001AE   0x2000             MOVS     R0,#+0
   \   000001B0   0xBDFE             POP      {R1-R7,PC}       ;; return
    600          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x4630             MOV      R0,R6
   \   00000002   0x.... 0x....      B.W      printf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x4620             MOV      R0,R4
   \   00000002   0x.... 0x....      B.W      USBH_OpenPipe
    601          
    602          
    603          /**
    604            * @brief  USBH_HandleEnum 
    605            *         This function includes the complete enumeration process
    606            * @param  phost: Host Handle
    607            * @retval USBH_Status
    608            */

   \                                 In section .text, align 4, keep-with-next
    609          static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
    610          {
   \                     USBH_HandleEnum: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4604             MOV      R4,R0
    611            USBH_StatusTypeDef Status = USBH_BUSY;  
    612            
    613            switch (phost->EnumState)
   \   00000008   0x1C67             ADDS     R7,R4,#+1
   \   0000000A   0x2501             MOVS     R5,#+1
   \   0000000C   0xF504 0x7607      ADD      R6,R4,#+540
   \   00000010   0x7838             LDRB     R0,[R7, #+0]
   \   00000012   0x.... 0x....      ADR.W    R8,??DataTable33  ;; "\n"
   \   00000016   0x2807             CMP      R0,#+7
   \   00000018   0xD82A             BHI.N    ??USBH_HandleEnum_1
   \   0000001A   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??USBH_HandleEnum_0:
   \   0000001E   0x04 0x0E          DC8      0x4,0xE,0x24,0x46
   \              0x24 0x46    
   \   00000022   0x4E 0x56          DC8      0x4E,0x56,0x6B,0x80
   \              0x6B 0x80    
    614            {
    615            case ENUM_IDLE:  
    616              /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    617              if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
   \                     ??USBH_HandleEnum_2: (+1)
   \   00000026   0x2108             MOVS     R1,#+8
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       USBH_Get_DevDesc
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD11E             BNE.N    ??USBH_HandleEnum_1
    618              {
    619                phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
   \   00000032   0x7AF0             LDRB     R0,[R6, #+11]
    620          
    621                phost->EnumState = ENUM_GET_FULL_DEV_DESC;
   \   00000034   0x703D             STRB     R5,[R7, #+0]
   \   00000036   0x7178             STRB     R0,[R7, #+5]
    622                
    623                /* modify control channels configuration for MaxPacket size */
    624                USBH_OpenPipe (phost,
    625                                     phost->Control.pipe_in,
    626                                     0x80,
    627                                     phost->device.address,
    628                                     phost->device.speed,
    629                                     USBH_EP_CONTROL,
    630                                     phost->Control.pipe_size); 
   \   00000038   0xE028             B.N      ??USBH_HandleEnum_3
    631                
    632                /* Open Control pipes */
    633                USBH_OpenPipe (phost,
    634                                     phost->Control.pipe_out,
    635                                     0x00,
    636                                     phost->device.address,
    637                                     phost->device.speed,
    638                                     USBH_EP_CONTROL,
    639                                     phost->Control.pipe_size);           
    640                
    641              }
    642              break;
    643              
    644            case ENUM_GET_FULL_DEV_DESC:  
    645              /* Get FULL Device Desc  */
    646              if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
   \                     ??USBH_HandleEnum_4: (+1)
   \   0000003A   0x2112             MOVS     R1,#+18
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       USBH_Get_DevDesc
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD114             BNE.N    ??USBH_HandleEnum_1
    647              {
    648                USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
   \   00000046   0x89F1             LDRH     R1,[R6, #+14]
   \   00000048   0x.... 0x....      ADR.W    R0,?_19
   \   0000004C   0x.... 0x....      BL       printf
   \   00000050   0x.... 0x....      BL       ?Subroutine1
    649                USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
   \                     ??CrossCallReturnLabel_9: (+1)
   \   00000054   0x89B1             LDRH     R1,[R6, #+12]
   \   00000056   0x.... 0x....      ADR.W    R0,?_20
   \   0000005A   0x.... 0x....      BL       printf
   \   0000005E   0x.... 0x....      BL       ?Subroutine1
    650                
    651                phost->EnumState = ENUM_SET_ADDR;
   \                     ??CrossCallReturnLabel_8: (+1)
   \   00000062   0x2002             MOVS     R0,#+2
   \   00000064   0xE059             B.N      ??USBH_HandleEnum_5
    652                 
    653              }
    654              break;
    655             
    656            case ENUM_SET_ADDR: 
    657              /* set address */
    658              if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
   \                     ??USBH_HandleEnum_6: (+1)
   \   00000066   0x2101             MOVS     R1,#+1
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0x.... 0x....      BL       USBH_SetAddress
   \   0000006E   0x2800             CMP      R0,#+0
   \                     ??USBH_HandleEnum_1: (+1)
   \   00000070   0xD169             BNE.N    ??USBH_HandleEnum_7
    659              {
    660                USBH_Delay(2);
   \   00000072   0x2002             MOVS     R0,#+2
   \   00000074   0x.... 0x....      BL       USBH_Delay
    661                phost->device.address = USBH_DEVICE_ADDRESS;
   \   00000078   0x7035             STRB     R5,[R6, #+0]
    662                
    663                /* user callback for device address assigned */
    664                USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0x.... 0x....      ADR.W    R0,?_21
   \   00000080   0x.... 0x....      BL       printf
   \   00000084   0x.... 0x....      BL       ?Subroutine1
    665                phost->EnumState = ENUM_GET_CFG_DESC;
   \                     ??CrossCallReturnLabel_7: (+1)
   \   00000088   0x2003             MOVS     R0,#+3
   \   0000008A   0x7038             STRB     R0,[R7, #+0]
    666                
    667                /* modify control channels to update device address */
    668                USBH_OpenPipe (phost,
    669                                     phost->Control.pipe_in,
    670                                     0x80,
    671                                     phost->device.address,
    672                                     phost->device.speed,
    673                                     USBH_EP_CONTROL,
    674                                     phost->Control.pipe_size); 
   \                     ??USBH_HandleEnum_3: (+1)
   \   0000008C   0x7978             LDRB     R0,[R7, #+5]
   \   0000008E   0x2280             MOVS     R2,#+128
   \   00000090   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_22: (+1)
   \   00000094   0x78F9             LDRB     R1,[R7, #+3]
   \   00000096   0x.... 0x....      BL       ?Subroutine4
    675                
    676                /* Open Control pipes */
    677                USBH_OpenPipe (phost,
    678                                     phost->Control.pipe_out,
    679                                     0x00,
    680                                     phost->device.address,
    681                                     phost->device.speed,
    682                                     USBH_EP_CONTROL,
    683                                     phost->Control.pipe_size);        
   \                     ??CrossCallReturnLabel_19: (+1)
   \   0000009A   0x7978             LDRB     R0,[R7, #+5]
   \   0000009C   0x2200             MOVS     R2,#+0
   \   0000009E   0x.... 0x....      BL       ?Subroutine5
    684              }
   \                     ??CrossCallReturnLabel_23: (+1)
   \   000000A2   0x7939             LDRB     R1,[R7, #+4]
   \   000000A4   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_18: (+1)
   \   000000A8   0xE04D             B.N      ??USBH_HandleEnum_7
    685              break;
    686              
    687            case ENUM_GET_CFG_DESC:  
    688              /* get standard configuration descriptor */
    689              if ( USBH_Get_CfgDesc(phost, 
    690                                    USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
   \                     ??USBH_HandleEnum_8: (+1)
   \   000000AA   0x2109             MOVS     R1,#+9
   \   000000AC   0x4620             MOV      R0,R4
   \   000000AE   0x.... 0x....      BL       USBH_Get_CfgDesc
   \   000000B2   0x2800             CMP      R0,#+0
   \   000000B4   0xD147             BNE.N    ??USBH_HandleEnum_7
    691              {
    692                phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
   \   000000B6   0x2004             MOVS     R0,#+4
   \   000000B8   0xE02F             B.N      ??USBH_HandleEnum_5
    693              }
    694              break;
    695              
    696            case ENUM_GET_FULL_CFG_DESC:  
    697              /* get FULL config descriptor (config, interface, endpoints) */
    698              if (USBH_Get_CfgDesc(phost, 
    699                                   phost->device.CfgDesc.wTotalLength) == USBH_OK)
   \                     ??USBH_HandleEnum_9: (+1)
   \   000000BA   0x8B31             LDRH     R1,[R6, #+24]
   \   000000BC   0x4620             MOV      R0,R4
   \   000000BE   0x.... 0x....      BL       USBH_Get_CfgDesc
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD13F             BNE.N    ??USBH_HandleEnum_7
    700              {
    701                phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
   \   000000C6   0x2005             MOVS     R0,#+5
   \   000000C8   0xE027             B.N      ??USBH_HandleEnum_5
    702              }
    703              break;
    704              
    705            case ENUM_GET_MFC_STRING_DESC:  
    706              if (phost->device.DevDesc.iManufacturer != 0)
   \                     ??USBH_HandleEnum_10: (+1)
   \   000000CA   0x7CB1             LDRB     R1,[R6, #+18]
   \   000000CC   0xB151             CBZ.N    R1,??USBH_HandleEnum_11
    707              { /* Check that Manufacturer String is available */
    708                
    709                if ( USBH_Get_StringDesc(phost,
    710                                         phost->device.DevDesc.iManufacturer, 
    711                                          phost->device.Data , 
    712                                         0xff) == USBH_OK)
   \   000000CE   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_26: (+1)
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD137             BNE.N    ??USBH_HandleEnum_7
    713                {
    714                  /* User callback for Manufacturing string */
    715                  USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
   \   000000D6   0xF104 0x011C      ADD      R1,R4,#+28
   \   000000DA   0x.... 0x....      ADR.W    R0,?_22
   \   000000DE   0x.... 0x....      BL       printf
   \   000000E2   0xE003             B.N      ??USBH_HandleEnum_12
    716                  phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
    717                  
    718          #if (USBH_USE_OS == 1)
    719              osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
    720          #endif          
    721                }
    722              }
    723              else
    724              {
    725               USBH_UsrLog("Manufacturer : N/A");      
   \                     ??USBH_HandleEnum_11: (+1)
   \   000000E4   0x.... 0x....      ADR.W    R0,?_23
   \   000000E8   0x.... 0x....      BL       printf
   \                     ??USBH_HandleEnum_12: (+1)
   \   000000EC   0x.... 0x....      BL       ?Subroutine1
    726               phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
   \                     ??CrossCallReturnLabel_6: (+1)
   \   000000F0   0x2006             MOVS     R0,#+6
   \   000000F2   0xE012             B.N      ??USBH_HandleEnum_5
    727          #if (USBH_USE_OS == 1)
    728              osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
    729          #endif       
    730              }
    731              break;
    732              
    733            case ENUM_GET_PRODUCT_STRING_DESC:   
    734              if (phost->device.DevDesc.iProduct != 0)
   \                     ??USBH_HandleEnum_13: (+1)
   \   000000F4   0x7CF1             LDRB     R1,[R6, #+19]
   \   000000F6   0xB149             CBZ.N    R1,??USBH_HandleEnum_14
    735              { /* Check that Product string is available */
    736                if ( USBH_Get_StringDesc(phost,
    737                                         phost->device.DevDesc.iProduct, 
    738                                         phost->device.Data, 
    739                                         0xff) == USBH_OK)
   \   000000F8   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_25: (+1)
   \   000000FC   0xBB18             CBNZ.N   R0,??USBH_HandleEnum_7
    740                {
    741                  /* User callback for Product string */
    742                  USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
   \   000000FE   0xF104 0x011C      ADD      R1,R4,#+28
   \   00000102   0x.... 0x....      ADR.W    R0,?_24
   \   00000106   0x.... 0x....      BL       printf
   \   0000010A   0xE003             B.N      ??USBH_HandleEnum_15
    743                  phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
    744                }
    745              }
    746              else
    747              {
    748                USBH_UsrLog("Product : N/A");
   \                     ??USBH_HandleEnum_14: (+1)
   \   0000010C   0x.... 0x....      ADR.W    R0,?_25
   \   00000110   0x.... 0x....      BL       printf
   \                     ??USBH_HandleEnum_15: (+1)
   \   00000114   0x.... 0x....      BL       ?Subroutine1
    749                phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000118   0x2007             MOVS     R0,#+7
   \                     ??USBH_HandleEnum_5: (+1)
   \   0000011A   0x7038             STRB     R0,[R7, #+0]
   \   0000011C   0xE013             B.N      ??USBH_HandleEnum_7
    750          #if (USBH_USE_OS == 1)
    751              osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
    752          #endif        
    753              } 
    754              break;
    755              
    756            case ENUM_GET_SERIALNUM_STRING_DESC:   
    757              if (phost->device.DevDesc.iSerialNumber != 0)
   \                     ??USBH_HandleEnum_16: (+1)
   \   0000011E   0x7D31             LDRB     R1,[R6, #+20]
   \   00000120   0xB149             CBZ.N    R1,??USBH_HandleEnum_17
    758              { /* Check that Serial number string is available */    
    759                if ( USBH_Get_StringDesc(phost,
    760                                         phost->device.DevDesc.iSerialNumber, 
    761                                         phost->device.Data, 
    762                                         0xff) == USBH_OK)
   \   00000122   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_24: (+1)
   \   00000126   0xB970             CBNZ.N   R0,??USBH_HandleEnum_7
    763                {
    764                  /* User callback for Serial number string */
    765                   USBH_UsrLog("Serial Number : %s",  (char *)phost->device.Data);
   \   00000128   0xF104 0x011C      ADD      R1,R4,#+28
   \   0000012C   0x.... 0x....      ADR.W    R0,?_26
   \   00000130   0x.... 0x....      BL       printf
   \   00000134   0xE003             B.N      ??USBH_HandleEnum_18
    766                  Status = USBH_OK;
    767                }
    768              }
    769              else
    770              {
    771                USBH_UsrLog("Serial Number : N/A"); 
   \                     ??USBH_HandleEnum_17: (+1)
   \   00000136   0x.... 0x....      ADR.W    R0,?_27
   \   0000013A   0x.... 0x....      BL       printf
   \                     ??USBH_HandleEnum_18: (+1)
   \   0000013E   0x4640             MOV      R0,R8
   \   00000140   0x2500             MOVS     R5,#+0
   \   00000142   0x.... 0x....      BL       printf
    772                Status = USBH_OK;
    773          #if (USBH_USE_OS == 1)
    774              osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
    775          #endif        
    776              }  
    777              break;
    778              
    779            default:
    780              break;
    781            }  
    782            return Status;
   \                     ??USBH_HandleEnum_7: (+1)
   \   00000146   0x4628             MOV      R0,R5
   \   00000148   0xB004             ADD      SP,SP,#+16
   \   0000014A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    783          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0x23FF             MOVS     R3,#+255
   \   00000002   0xF104 0x021C      ADD      R2,R4,#+28
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      B.W      USBH_Get_StringDesc

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x9002             STR      R0,[SP, #+8]
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9001             STR      R0,[SP, #+4]
   \   00000006   0x7870             LDRB     R0,[R6, #+1]
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x7833             LDRB     R3,[R6, #+0]
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x4640             MOV      R0,R8
   \   00000002   0x.... 0x....      B.W      printf
    784          
    785          /**
    786            * @brief  USBH_LL_SetTimer 
    787            *         Set the initial Host Timer tick
    788            * @param  phost: Host Handle
    789            * @retval None
    790            */

   \                                 In section .text, align 2, keep-with-next
    791          void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
    792          {
    793            phost->Timer = time;
   \                     USBH_LL_SetTimer: (+1)
   \   00000000   0xF8C0 0x12A8      STR      R1,[R0, #+680]
    794          }
   \   00000004   0x4770             BX       LR               ;; return
    795          /**
    796            * @brief  USBH_LL_IncTimer 
    797            *         Increment Host Timer tick
    798            * @param  phost: Host Handle
    799            * @retval None
    800            */

   \                                 In section .text, align 2, keep-with-next
    801          void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
    802          {
    803            phost->Timer ++;
   \                     USBH_LL_IncTimer: (+1)
   \   00000000   0xF500 0x7119      ADD      R1,R0,#+612
   \   00000004   0x6C4A             LDR      R2,[R1, #+68]
   \   00000006   0x1C52             ADDS     R2,R2,#+1
   \   00000008   0x644A             STR      R2,[R1, #+68]
    804            USBH_HandleSof(phost);
   \   0000000A   0x7802             LDRB     R2,[R0, #+0]
   \   0000000C   0x2A0A             CMP      R2,#+10
   \   0000000E   0xD104             BNE.N    ??USBH_LL_IncTimer_0
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xBF1C             ITT      NE 
   \   00000016   0x6989             LDRNE    R1,[R1, #+24]
   \   00000018   0x4708             BXNE     R1
    805          }
   \                     ??USBH_LL_IncTimer_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
    806          
    807          /**
    808            * @brief  USBH_HandleSof 
    809            *         Call SOF process
    810            * @param  phost: Host Handle
    811            * @retval None
    812            */
    813          void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
    814          {
    815            if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
    816            {
    817              phost->pActiveClass->SOFProcess(phost);
    818            }
    819          }
    820          /**
    821            * @brief  USBH_LL_Connect 
    822            *         Handle USB Host connexion event
    823            * @param  phost: Host Handle
    824            * @retval USBH_Status
    825            */

   \                                 In section .text, align 2, keep-with-next
    826          USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
    827          {
   \                     USBH_LL_Connect: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    828            if(phost->gState == HOST_IDLE )
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0xB949             CBNZ.N   R1,??USBH_LL_Connect_0
    829            {
    830              phost->device.is_connected = 1;
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0xF880 0x121E      STRB     R1,[R0, #+542]
    831              
    832              if(phost->pUser != NULL)
   \   0000000C   0xF8D0 0x22B4      LDR      R2,[R0, #+692]
   \   00000010   0x0011             MOVS     R1,R2
   \   00000012   0xD007             BEQ.N    ??USBH_LL_Connect_1
    833              {    
    834                phost->pUser(phost, HOST_USER_CONNECTION);
   \   00000014   0x2104             MOVS     R1,#+4
   \   00000016   0x4790             BLX      R2
   \   00000018   0xE004             B.N      ??USBH_LL_Connect_1
    835              }
    836            } 
    837            else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
   \                     ??USBH_LL_Connect_0: (+1)
   \   0000001A   0x7801             LDRB     R1,[R0, #+0]
   \   0000001C   0x2901             CMP      R1,#+1
   \   0000001E   0xBF04             ITT      EQ 
   \   00000020   0x2102             MOVEQ    R1,#+2
   \   00000022   0x7001             STRBEQ   R1,[R0, #+0]
    838            {
    839              phost->gState = HOST_DEV_ATTACHED ;
    840            }
    841          #if (USBH_USE_OS == 1)
    842            osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
    843          #endif 
    844            
    845            return USBH_OK;
   \                     ??USBH_LL_Connect_1: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xBD02             POP      {R1,PC}          ;; return
    846          }
    847          
    848          /**
    849            * @brief  USBH_LL_Disconnect 
    850            *         Handle USB Host disconnection event
    851            * @param  phost: Host Handle
    852            * @retval USBH_Status
    853            */

   \                                 In section .text, align 2, keep-with-next
    854          USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
    855          {
   \                     USBH_LL_Disconnect: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    856            /*Stop Host */ 
    857            USBH_LL_Stop(phost);  
   \   00000004   0x.... 0x....      BL       USBH_LL_Stop
    858            
    859            /* FRee Control Pipes */
    860            USBH_FreePipe  (phost, phost->Control.pipe_in);
   \   00000008   0x.... 0x....      BL       ?Subroutine3
    861            USBH_FreePipe  (phost, phost->Control.pipe_out);  
   \                     ??CrossCallReturnLabel_16: (+1)
   \   0000000C   0x7961             LDRB     R1,[R4, #+5]
   \   0000000E   0x.... 0x....      BL       ??Subroutine3_0
    862             
    863            phost->device.is_connected = 0; 
   \                     ??CrossCallReturnLabel_14: (+1)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF884 0x021E      STRB     R0,[R4, #+542]
    864             
    865            if(phost->pUser != NULL)
   \   00000018   0xF8D4 0x22B4      LDR      R2,[R4, #+692]
   \   0000001C   0x0010             MOVS     R0,R2
   \   0000001E   0xD002             BEQ.N    ??USBH_LL_Disconnect_0
    866            {    
    867              phost->pUser(phost, HOST_USER_DISCONNECTION);
   \   00000020   0x2105             MOVS     R1,#+5
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x4790             BLX      R2
    868            }
    869            USBH_UsrLog("USB Device disconnected"); 
   \                     ??USBH_LL_Disconnect_0: (+1)
   \   00000026   0x.... 0x....      ADR.W    R0,?_28
   \   0000002A   0x.... 0x....      BL       printf
   \   0000002E   0x....             ADR.N    R0,??DataTable34  ;; "\n"
   \   00000030   0x.... 0x....      BL       printf
    870            
    871            /* Start the low level driver  */
    872            USBH_LL_Start(phost);
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       USBH_LL_Start
    873            
    874            phost->gState = HOST_DEV_DISCONNECTED;
   \   0000003A   0x2003             MOVS     R0,#+3
   \   0000003C   0x7020             STRB     R0,[R4, #+0]
    875            
    876          #if (USBH_USE_OS == 1)
    877            osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
    878          #endif 
    879            
    880            return USBH_OK;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
    881          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x45 0x52          DC8 "ERROR: "
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x49 0x6E          DC8 "Invalid Host handle"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x48 0x6F    
   \              0x73 0x74    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x6C    
   \              0x65 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x4D 0x61          DC8 "Max Class Number reached"
   \              0x78 0x20    
   \              0x43 0x6C    
   \              0x61 0x73    
   \              0x73 0x20    
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x63 0x68    
   \              0x65 0x64    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x49 0x6E          DC8 "Invalid Class handle"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x43 0x6C    
   \              0x61 0x73    
   \              0x73 0x20    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x6C 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x53 0x77          DC8 "Switching to Interface (#%d)"
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x6F    
   \              0x20 0x49    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x66 0x61    
   \              0x63 0x65    
   \              0x20 0x28    
   \              0x23 0x25    
   \              0x64 0x29    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x43 0x6C          DC8 "Class    : %xh"
   \              0x61 0x73    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x78 0x68    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x53 0x75          DC8 "SubClass : %xh"
   \              0x62 0x43    
   \              0x6C 0x61    
   \              0x73 0x73    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x78 0x68    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x50 0x72          DC8 "Protocol : %xh"
   \              0x6F 0x74    
   \              0x6F 0x63    
   \              0x6F 0x6C    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x78 0x68    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x43 0x61          DC8 "Cannot Select This Interface."
   \              0x6E 0x6E    
   \              0x6F 0x74    
   \              0x20 0x53    
   \              0x65 0x6C    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x54 0x68    
   \              0x69 0x73    
   \              0x20 0x49    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x66 0x61    
   \              0x63 0x65    
   \              0x2E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x55 0x53          DC8 "USB Device Attached"
   \              0x42 0x20    
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x41    
   \              0x74 0x74    
   \              0x61 0x63    
   \              0x68 0x65    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x45 0x6E          DC8 "Enumeration done."
   \              0x75 0x6D    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x64 0x6F    
   \              0x6E 0x65    
   \              0x2E 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x54 0x68          DC8 "This device has only 1 configuration."
   \              0x69 0x73    
   \              0x20 0x64    
   \              0x65 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x68 0x61    
   \              0x73 0x20    
   \              0x6F 0x6E    
   \              0x6C 0x79    
   \              0x20 0x31    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x66 0x69    
   \              0x67 0x75    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x2E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x44 0x65          DC8 "Default configuration set."
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x73 0x65    
   \              0x74 0x2E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x4E 0x6F          DC8 "No Class has been registered."
   \              0x20 0x43    
   \              0x6C 0x61    
   \              0x73 0x73    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x62    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x72 0x65    
   \              0x67 0x69    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x2E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x25 0x73          DC8 "%s class started."
   \              0x20 0x63    
   \              0x6C 0x61    
   \              0x73 0x73    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x44 0x65          DC8 "Device not supporting %s class."
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x73    
   \              0x75 0x70    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x25 0x73    
   \              0x20 0x63    
   \              0x6C 0x61    
   \              0x73 0x73    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x4E 0x6F          DC8 "No registered class for this device."
   \              0x20 0x72    
   \              0x65 0x67    
   \              0x69 0x73    
   \              0x74 0x65    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x63 0x6C    
   \              0x61 0x73    
   \              0x73 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x74 0x68    
   \              0x69 0x73    
   \              0x20 0x64    
   \              0x65 0x76    
   \              0x69 0x63    
   \              0x65 0x2E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_18:
   \   00000000   0x49 0x6E          DC8 "Invalid Class Driver."
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x43 0x6C    
   \              0x61 0x73    
   \              0x73 0x20    
   \              0x44 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_19:
   \   00000000   0x50 0x49          DC8 "PID: %xh"
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x68    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_20:
   \   00000000   0x56 0x49          DC8 "VID: %xh"
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x68    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_21:
   \   00000000   0x41 0x64          DC8 "Address (#%d) assigned."
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x28 0x23    
   \              0x25 0x64    
   \              0x29 0x20    
   \              0x61 0x73    
   \              0x73 0x69    
   \              0x67 0x6E    
   \              0x65 0x64    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_22:
   \   00000000   0x4D 0x61          DC8 "Manufacturer : %s"
   \              0x6E 0x75    
   \              0x66 0x61    
   \              0x63 0x74    
   \              0x75 0x72    
   \              0x65 0x72    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x73 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_23:
   \   00000000   0x4D 0x61          DC8 "Manufacturer : N/A"
   \              0x6E 0x75    
   \              0x66 0x61    
   \              0x63 0x74    
   \              0x75 0x72    
   \              0x65 0x72    
   \              0x20 0x3A    
   \              0x20 0x4E    
   \              0x2F 0x41    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_24:
   \   00000000   0x50 0x72          DC8 "Product : %s"
   \              0x6F 0x64    
   \              0x75 0x63    
   \              0x74 0x20    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_25:
   \   00000000   0x50 0x72          DC8 "Product : N/A"
   \              0x6F 0x64    
   \              0x75 0x63    
   \              0x74 0x20    
   \              0x3A 0x20    
   \              0x4E 0x2F    
   \              0x41 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_26:
   \   00000000   0x53 0x65          DC8 "Serial Number : %s"
   \              0x72 0x69    
   \              0x61 0x6C    
   \              0x20 0x4E    
   \              0x75 0x6D    
   \              0x62 0x65    
   \              0x72 0x20    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_27:
   \   00000000   0x53 0x65          DC8 "Serial Number : N/A"
   \              0x72 0x69    
   \              0x61 0x6C    
   \              0x20 0x4E    
   \              0x75 0x6D    
   \              0x62 0x65    
   \              0x72 0x20    
   \              0x3A 0x20    
   \              0x4E 0x2F    
   \              0x41 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_28:
   \   00000000   0x55 0x53          DC8 "USB Device disconnected"
   \              0x42 0x20    
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x64    
   \              0x69 0x73    
   \              0x63 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_2:
   \   00000000   0x0A 0x00          DC8 "\012"
    882          
    883          
    884          #if (USBH_USE_OS == 1)  
    885          /**
    886            * @brief  USB Host Thread task
    887            * @param  pvParameters not used
    888            * @retval None
    889            */
    890          static void USBH_Process_OS(void const * argument)
    891          {
    892            osEvent event;
    893            
    894            for(;;)
    895            {
    896              event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
    897              
    898              if( event.status == osEventMessage )
    899              {
    900                USBH_Process((USBH_HandleTypeDef *)argument);
    901              }
    902             }
    903          }
    904          
    905          /**
    906          * @brief  USBH_LL_NotifyURBChange 
    907          *         Notify URB state Change
    908          * @param  phost: Host handle
    909          * @retval USBH Status
    910          */
    911          USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
    912          {
    913            osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
    914            return USBH_OK;
    915          }
    916          #endif  
    917          /**
    918            * @}
    919            */ 
    920          
    921          /**
    922            * @}
    923            */ 
    924          
    925          /**
    926            * @}
    927            */
    928          
    929          /**
    930            * @}
    931            */ 
    932          
    933          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DeInitStateMachine
         8   -> __aeabi_memclr4
       8   USBH_DeInit
         8   -> DeInitStateMachine
         8   -> USBH_LL_Stop
      16   USBH_FindInterface
      12   USBH_FindInterfaceIndex
       0   USBH_GetActiveClass
      40   USBH_HandleEnum
        40   -> USBH_Delay
        40   -> USBH_Get_CfgDesc
        40   -> USBH_Get_DevDesc
        40   -> USBH_Get_StringDesc
        40   -> USBH_OpenPipe
        40   -> USBH_SetAddress
        40   -> printf
      16   USBH_Init
        16   -> DeInitStateMachine
        16   -> USBH_LL_Init
        16   -> printf
       8   USBH_LL_Connect
         8   -- Indirect call
       8   USBH_LL_Disconnect
         8   -- Indirect call
         8   -> USBH_FreePipe
         8   -> USBH_LL_Start
         8   -> USBH_LL_Stop
         8   -> printf
       0   USBH_LL_IncTimer
         0   -- Indirect call
       0   USBH_LL_SetTimer
      32   USBH_Process
        32   -- Indirect call
        32   -> DeInitStateMachine
        32   -> USBH_AllocPipe
        32   -> USBH_Delay
        32   -> USBH_HandleEnum
        32   -> USBH_LL_GetSpeed
        32   -> USBH_LL_ResetPort
        32   -> USBH_OpenPipe
        32   -> USBH_SetCfg
        32   -> printf
       8   USBH_ReEnumerate
         8   -> DeInitStateMachine
         8   -> USBH_Delay
         8   -> USBH_Start
         8   -> USBH_Stop
      16   USBH_RegisterClass
        16   -> printf
      24   USBH_SelectInterface
        24   -> printf
       8   USBH_Start
         8   -> USBH_LL_DriverVBUS
         8   -> USBH_LL_Start
       8   USBH_Stop
         8   -> USBH_FreePipe
         8   -> USBH_LL_DriverVBUS
         8   -> USBH_LL_Stop


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable31
       4  ??DataTable33
       4  ??DataTable34
       6  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
       8  ?Subroutine3
       6  ?Subroutine4
      14  ?Subroutine5
      12  ?Subroutine6
       8  ?_0
      20  ?_1
      20  ?_10
      20  ?_11
      40  ?_12
      28  ?_13
      32  ?_14
      20  ?_15
      32  ?_16
      40  ?_17
      24  ?_18
      12  ?_19
       2  ?_2
      12  ?_20
      24  ?_21
      20  ?_22
      20  ?_23
      16  ?_24
      16  ?_25
      20  ?_26
      20  ?_27
      24  ?_28
      28  ?_3
      24  ?_4
      32  ?_5
      16  ?_6
      16  ?_7
      16  ?_8
      32  ?_9
      70  DeInitStateMachine
      32  USBH_DeInit
      62  USBH_FindInterface
      44  USBH_FindInterfaceIndex
       6  USBH_GetActiveClass
     334  USBH_HandleEnum
      72  USBH_Init
      40  USBH_LL_Connect
      66  USBH_LL_Disconnect
      28  USBH_LL_IncTimer
       6  USBH_LL_SetTimer
     434  USBH_Process
      30  USBH_ReEnumerate
      72  USBH_RegisterClass
     112  USBH_SelectInterface
      20  USBH_Start
      30  USBH_Stop

 
     2 bytes in section .rodata
 2 160 bytes in section .text
 
 2 160 bytes of CODE  memory
     2 bytes of CONST memory

Errors: none
Warnings: none
