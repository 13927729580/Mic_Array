###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       22/Dec/2015  23:09:58
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_dma.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_dma.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -Ohz --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\stm32f7xx_hal_dma.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\stm32f7xx_hal_dma.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_dma.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f7xx_hal_dma.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    25-June-2015
      7            * @brief   DMA HAL module driver.
      8            *    
      9            *          This file provides firmware functions to manage the following 
     10            *          functionalities of the Direct Memory Access (DMA) peripheral:
     11            *           + Initialization and de-initialization functions
     12            *           + IO operation functions
     13            *           + Peripheral State and errors functions
     14            @verbatim     
     15            ==============================================================================      
     16                                  ##### How to use this driver #####
     17            ============================================================================== 
     18            [..]
     19             (#) Enable and configure the peripheral to be connected to the DMA Stream
     20                 (except for internal SRAM/FLASH memories: no initialization is 
     21                 necessary) please refer to Reference manual for connection between peripherals
     22                 and DMA requests . 
     23                    
     24             (#) For a given Stream, program the required configuration through the following parameters:   
     25                 Transfer Direction, Source and Destination data formats, 
     26                 Circular, Normal or peripheral flow control mode, Stream Priority level, 
     27                 Source and Destination Increment mode, FIFO mode and its Threshold (if needed), 
     28                 Burst mode for Source and/or Destination (if needed) using HAL_DMA_Init() function.
     29                               
     30               *** Polling mode IO operation ***
     31               =================================   
     32              [..] 
     33                    (+) Use HAL_DMA_Start() to start DMA transfer after the configuration of Source 
     34                        address and destination address and the Length of data to be transferred
     35                    (+) Use HAL_DMA_PollForTransfer() to poll for the end of current transfer, in this  
     36                        case a fixed Timeout can be configured by User depending from his application.
     37                         
     38               *** Interrupt mode IO operation ***    
     39               =================================== 
     40              [..]     
     41                    (+) Configure the DMA interrupt priority using HAL_NVIC_SetPriority()
     42                    (+) Enable the DMA IRQ handler using HAL_NVIC_EnableIRQ() 
     43                    (+) Use HAL_DMA_Start_IT() to start DMA transfer after the configuration of  
     44                        Source address and destination address and the Length of data to be transferred. In this 
     45                        case the DMA interrupt is configured 
     46                    (+) Use HAL_DMA_IRQHandler() called under DMA_IRQHandler() Interrupt subroutine
     47                    (+) At the end of data transfer HAL_DMA_IRQHandler() function is executed and user can 
     48                        add his own function by customization of function pointer XferCpltCallback and 
     49                        XferErrorCallback (i.e a member of DMA handle structure). 
     50              [..]                
     51               (#) Use HAL_DMA_GetState() function to return the DMA state and HAL_DMA_GetError() in case of error 
     52                   detection.
     53                   
     54               (#) Use HAL_DMA_Abort() function to abort the current transfer
     55               
     56               -@-   In Memory-to-Memory transfer mode, Circular mode is not allowed.
     57              
     58               -@-   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
     59                     possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
     60                     Half-Word data size for the peripheral to access its data register and set Word data size
     61                     for the Memory to gain in access time. Each two half words will be packed and written in
     62                     a single access to a Word in the Memory).
     63                
     64               -@-   When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
     65                     and Destination. In this case the Peripheral Data Size will be applied to both Source
     66                     and Destination.               
     67            
     68               *** DMA HAL driver macros list ***
     69               ============================================= 
     70               [..]
     71                 Below the list of most used macros in DMA HAL driver.
     72                 
     73                (+) __HAL_DMA_ENABLE: Enable the specified DMA Stream.
     74                (+) __HAL_DMA_DISABLE: Disable the specified DMA Stream.
     75                (+) __HAL_DMA_GET_FS: Return the current DMA Stream FIFO filled level.
     76                (+) __HAL_DMA_GET_FLAG: Get the DMA Stream pending flags.
     77                (+) __HAL_DMA_CLEAR_FLAG: Clear the DMA Stream pending flags.
     78                (+) __HAL_DMA_ENABLE_IT: Enable the specified DMA Stream interrupts.
     79                (+) __HAL_DMA_DISABLE_IT: Disable the specified DMA Stream interrupts.
     80                (+) __HAL_DMA_GET_IT_SOURCE: Check whether the specified DMA Stream interrupt has occurred or not. 
     81               
     82               [..] 
     83                (@) You can refer to the DMA HAL driver header file for more useful macros  
     84            
     85            @endverbatim
     86            ******************************************************************************
     87            * @attention
     88            *
     89            * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
     90            *
     91            * Redistribution and use in source and binary forms, with or without modification,
     92            * are permitted provided that the following conditions are met:
     93            *   1. Redistributions of source code must retain the above copyright notice,
     94            *      this list of conditions and the following disclaimer.
     95            *   2. Redistributions in binary form must reproduce the above copyright notice,
     96            *      this list of conditions and the following disclaimer in the documentation
     97            *      and/or other materials provided with the distribution.
     98            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     99            *      may be used to endorse or promote products derived from this software
    100            *      without specific prior written permission.
    101            *
    102            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    103            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    104            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    105            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    106            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    107            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    108            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    109            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    110            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    111            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    112            *
    113            ******************************************************************************
    114            */ 
    115          
    116          /* Includes ------------------------------------------------------------------*/
    117          #include "stm32f7xx_hal.h"
    118          
    119          /** @addtogroup STM32F7xx_HAL_Driver
    120            * @{
    121            */
    122          
    123          /** @defgroup DMA DMA
    124            * @brief DMA HAL module driver
    125            * @{
    126            */
    127          
    128          #ifdef HAL_DMA_MODULE_ENABLED
    129          
    130          /* Private types -------------------------------------------------------------*/
    131          /* Private variables ---------------------------------------------------------*/
    132          /* Private constants ---------------------------------------------------------*/
    133          /** @addtogroup DMA_Private_Constants
    134           * @{
    135           */
    136           #define HAL_TIMEOUT_DMA_ABORT    ((uint32_t)1000)  /* 1s */
    137          /**
    138            * @}
    139            */
    140          /* Private macros ------------------------------------------------------------*/
    141          /* Private functions ---------------------------------------------------------*/
    142          /** @addtogroup DMA_Private_Functions
    143            * @{
    144            */
    145          static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
    146          /**
    147            * @brief  Sets the DMA Transfer parameter.
    148            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    149            *                     the configuration information for the specified DMA Stream.
    150            * @param  SrcAddress: The source memory Buffer address
    151            * @param  DstAddress: The destination memory Buffer address
    152            * @param  DataLength: The length of data to be transferred from source to destination
    153            * @retval HAL status
    154            */

   \                                 In section .text, align 2, keep-with-next
    155          static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
    156          {
   \                     DMA_SetConfig: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    157            /* Clear DBM bit */
    158            hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
   \   00000002   0x6804             LDR      R4,[R0, #+0]
   \   00000004   0x6825             LDR      R5,[R4, #+0]
   \   00000006   0xF425 0x2580      BIC      R5,R5,#0x40000
   \   0000000A   0x6025             STR      R5,[R4, #+0]
    159          	
    160            /* Configure DMA Stream data length */
    161            hdma->Instance->NDTR = DataLength;
   \   0000000C   0x6063             STR      R3,[R4, #+4]
    162          
    163            /* Peripheral to Memory */
    164            if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
   \   0000000E   0x6880             LDR      R0,[R0, #+8]
   \   00000010   0x2840             CMP      R0,#+64
   \   00000012   0xBF07             ITTEE    EQ 
   \   00000014   0x60A2             STREQ    R2,[R4, #+8]
   \   00000016   0x60E1             STREQ    R1,[R4, #+12]
   \   00000018   0x60A1             STRNE    R1,[R4, #+8]
   \   0000001A   0x60E2             STRNE    R2,[R4, #+12]
    165            {
    166              /* Configure DMA Stream destination address */
    167              hdma->Instance->PAR = DstAddress;
    168          
    169              /* Configure DMA Stream source address */
    170              hdma->Instance->M0AR = SrcAddress;
    171            }
    172            /* Memory to Peripheral */
    173            else
    174            {
    175              /* Configure DMA Stream source address */
    176              hdma->Instance->PAR = SrcAddress;
    177              
    178              /* Configure DMA Stream destination address */
    179              hdma->Instance->M0AR = DstAddress;
   \   0000001C   0xBD30             POP      {R4,R5,PC}
    180            }
    181          }
    182          
    183          /**
    184            * @}
    185            */  
    186            
    187          /* Exported functions ---------------------------------------------------------*/
    188          /** @addtogroup DMA_Exported_Functions
    189            * @{
    190            */
    191          
    192          /** @addtogroup DMA_Exported_Functions_Group1
    193            *
    194          @verbatim   
    195           ===============================================================================
    196                       ##### Initialization and de-initialization functions  #####
    197           ===============================================================================  
    198              [..]
    199              This section provides functions allowing to initialize the DMA Stream source
    200              and destination addresses, incrementation and data sizes, transfer direction, 
    201              circular/normal mode selection, memory-to-memory mode selection and Stream priority value.
    202              [..]
    203              The HAL_DMA_Init() function follows the DMA configuration procedures as described in
    204              reference manual.  
    205          
    206          @endverbatim
    207            * @{
    208            */
    209            
    210          /**
    211            * @brief  Initializes the DMA according to the specified
    212            *         parameters in the DMA_InitTypeDef and create the associated handle.
    213            * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
    214            *               the configuration information for the specified DMA Stream.  
    215            * @retval HAL status
    216            */

   \                                 In section .text, align 2, keep-with-next
    217          HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
    218          { 
   \                     HAL_DMA_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    219            uint32_t tmp = 0;
    220            
    221            /* Check the DMA peripheral state */
    222            if(hdma == NULL)
   \   00000002   0xB908             CBNZ.N   R0,??HAL_DMA_Init_0
    223            {
    224              return HAL_ERROR;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0xBD10             POP      {R4,PC}
    225            }
    226          
    227            /* Check the parameters */
    228            assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
    229            assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
    230            assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
    231            assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
    232            assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
    233            assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
    234            assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
    235            assert_param(IS_DMA_MODE(hdma->Init.Mode));
    236            assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
    237            assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
    238            /* Check the memory burst, peripheral burst and FIFO threshold parameters only
    239               when FIFO mode is enabled */
    240            if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
    241            {
    242              assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
    243              assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    244              assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    245            }
    246          
    247            /* Change DMA peripheral state */
    248            hdma->State = HAL_DMA_STATE_BUSY;
   \                     ??HAL_DMA_Init_0: (+1)
   \   00000008   0x2102             MOVS     R1,#+2
    249          
    250            /* Get the CR register value */
    251            tmp = hdma->Instance->CR;
    252          
    253            /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    254            tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
    255                                DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
    256                                DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
    257                                DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));
    258          
    259            /* Prepare the DMA Stream configuration */
    260            tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
    261                    hdma->Init.PeriphInc           | hdma->Init.MemInc           |
    262                    hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
    263                    hdma->Init.Mode                | hdma->Init.Priority;
   \   0000000A   0x.... 0x....      LDR.W    R3,??DataTable1  ;; 0xf010803f
   \   0000000E   0xF880 0x1035      STRB     R1,[R0, #+53]
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0x680A             LDR      R2,[R1, #+0]
   \   00000016   0x401A             ANDS     R2,R3,R2
   \   00000018   0x6843             LDR      R3,[R0, #+4]
   \   0000001A   0x431A             ORRS     R2,R3,R2
   \   0000001C   0x6883             LDR      R3,[R0, #+8]
   \   0000001E   0x431A             ORRS     R2,R3,R2
   \   00000020   0x68C3             LDR      R3,[R0, #+12]
   \   00000022   0x431A             ORRS     R2,R3,R2
   \   00000024   0x6903             LDR      R3,[R0, #+16]
   \   00000026   0x431A             ORRS     R2,R3,R2
   \   00000028   0x6943             LDR      R3,[R0, #+20]
   \   0000002A   0x431A             ORRS     R2,R3,R2
   \   0000002C   0x6983             LDR      R3,[R0, #+24]
   \   0000002E   0x431A             ORRS     R2,R3,R2
   \   00000030   0x69C3             LDR      R3,[R0, #+28]
   \   00000032   0x431A             ORRS     R2,R3,R2
   \   00000034   0x6A03             LDR      R3,[R0, #+32]
   \   00000036   0x431A             ORRS     R2,R3,R2
    264          
    265            /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    266            if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
   \   00000038   0x6A43             LDR      R3,[R0, #+36]
   \   0000003A   0x2B04             CMP      R3,#+4
   \   0000003C   0xD103             BNE.N    ??HAL_DMA_Init_1
    267            {
    268              /* Get memory burst and peripheral burst */
    269              tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
   \   0000003E   0x6AC3             LDR      R3,[R0, #+44]
   \   00000040   0x6B04             LDR      R4,[R0, #+48]
   \   00000042   0x4323             ORRS     R3,R4,R3
   \   00000044   0x431A             ORRS     R2,R3,R2
    270            }
    271            
    272            /* Write to DMA Stream CR register */
    273            hdma->Instance->CR = tmp;  
   \                     ??HAL_DMA_Init_1: (+1)
   \   00000046   0x600A             STR      R2,[R1, #+0]
    274          
    275            /* Get the FCR register value */
    276            tmp = hdma->Instance->FCR;
   \   00000048   0x6801             LDR      R1,[R0, #+0]
   \   0000004A   0x694A             LDR      R2,[R1, #+20]
    277          
    278            /* Clear Direct mode and FIFO threshold bits */
    279            tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
    280          
    281            /* Prepare the DMA Stream FIFO configuration */
    282            tmp |= hdma->Init.FIFOMode;
   \   0000004C   0x6A43             LDR      R3,[R0, #+36]
   \   0000004E   0x08D2             LSRS     R2,R2,#+3
    283          
    284            /* the FIFO threshold is not used when the FIFO mode is disabled */
    285            if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
   \   00000050   0x2B04             CMP      R3,#+4
   \   00000052   0xEA43 0x02C2      ORR      R2,R3,R2, LSL #+3
   \   00000056   0xBF04             ITT      EQ 
   \   00000058   0x6A83             LDREQ    R3,[R0, #+40]
   \   0000005A   0x431A             ORREQ    R2,R3,R2
    286            {
    287              /* Get the FIFO threshold */
    288              tmp |= hdma->Init.FIFOThreshold;
    289            }
    290            
    291            /* Write to DMA Stream FCR */
    292            hdma->Instance->FCR = tmp;
   \   0000005C   0x614A             STR      R2,[R1, #+20]
    293          
    294            /* Initialize the error code */
    295            hdma->ErrorCode = HAL_DMA_ERROR_NONE;
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x64C1             STR      R1,[R0, #+76]
    296          
    297            /* Initialize the DMA state */
    298            hdma->State = HAL_DMA_STATE_READY;
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0xF880 0x1035      STRB     R1,[R0, #+53]
    299          
    300            return HAL_OK;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0xBD10             POP      {R4,PC}          ;; return
    301          }
    302          
    303          /**
    304            * @brief  DeInitializes the DMA peripheral 
    305            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
    306            *               the configuration information for the specified DMA Stream.  
    307            * @retval HAL status
    308            */

   \                                 In section .text, align 2, keep-with-next
    309          HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
    310          {
    311            /* Check the DMA peripheral state */
    312            if(hdma == NULL)
   \                     HAL_DMA_DeInit: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000006   0xBF1D             ITTTE    NE 
   \   00000008   0xF100 0x0134      ADDNE    R1,R0,#+52
   \   0000000C   0x7849             LDRBNE   R1,[R1, #+1]
   \   0000000E   0x2902             CMPNE    R1,#+2
   \   00000010   0x2001             MOVEQ    R0,#+1
    313            {
    314              return HAL_ERROR;
    315            }
    316            
    317            /* Check the DMA peripheral state */
    318            if(hdma->State == HAL_DMA_STATE_BUSY)
    319            {
    320               return HAL_ERROR;
   \   00000012   0xF000 0x81F4      BEQ.W    ??HAL_DMA_DeInit_0
    321            }
    322          
    323            /* Disable the selected DMA Streamx */
    324            __HAL_DMA_DISABLE(hdma);
   \   00000016   0x6801             LDR      R1,[R0, #+0]
    325          
    326            /* Reset DMA Streamx control register */
    327            hdma->Instance->CR   = 0;
    328          
    329            /* Reset DMA Streamx number of data to transfer register */
    330            hdma->Instance->NDTR = 0;
    331          
    332            /* Reset DMA Streamx peripheral address register */
    333            hdma->Instance->PAR  = 0;
    334          
    335            /* Reset DMA Streamx memory 0 address register */
    336            hdma->Instance->M0AR = 0;
    337          
    338            /* Reset DMA Streamx memory 1 address register */
    339            hdma->Instance->M1AR = 0;
    340          
    341            /* Reset DMA Streamx FIFO control register */
    342            hdma->Instance->FCR  = (uint32_t)0x00000021;
    343          
    344            /* Clear all flags */
    345            __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
   \   00000018   0x.... 0x....      LDR.W    R8,??DataTable1_1  ;; 0x40026459
   \   0000001C   0x.... 0x....      LDR.W    R3,??DataTable1_2  ;; 0x400260b9
   \   00000020   0xF04F 0x7E80      MOV      LR,#+16777216
   \   00000024   0xF44F 0x2780      MOV      R7,#+262144
   \   00000028   0x.... 0x....      LDR.W    R4,??DataTable1_3  ;; 0x400264a0
   \   0000002C   0x680A             LDR      R2,[R1, #+0]
   \   0000002E   0xF44F 0x7980      MOV      R9,#+256
   \   00000032   0x.... 0x....      LDR.W    R5,??DataTable1_4  ;; 0x40026488
   \   00000036   0x.... 0x....      LDR.W    R10,??DataTable1_5  ;; 0x800004
   \   0000003A   0x0852             LSRS     R2,R2,#+1
   \   0000003C   0x0052             LSLS     R2,R2,#+1
   \   0000003E   0x600A             STR      R2,[R1, #+0]
   \   00000040   0x6802             LDR      R2,[R0, #+0]
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x.... 0x....      LDR.W    R6,??DataTable1_6  ;; 0x40026470
   \   00000048   0x6011             STR      R1,[R2, #+0]
   \   0000004A   0x6802             LDR      R2,[R0, #+0]
   \   0000004C   0x6051             STR      R1,[R2, #+4]
   \   0000004E   0x6802             LDR      R2,[R0, #+0]
   \   00000050   0x6091             STR      R1,[R2, #+8]
   \   00000052   0x6802             LDR      R2,[R0, #+0]
   \   00000054   0x60D1             STR      R1,[R2, #+12]
   \   00000056   0x6802             LDR      R2,[R0, #+0]
   \   00000058   0x6111             STR      R1,[R2, #+16]
   \   0000005A   0x6802             LDR      R2,[R0, #+0]
   \   0000005C   0x2121             MOVS     R1,#+33
   \   0000005E   0x6151             STR      R1,[R2, #+20]
   \   00000060   0xF8D0 0xC000      LDR      R12,[R0, #+0]
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable1_7  ;; 0x40026008
   \   00000068   0x.... 0x....      LDR.W    R2,??DataTable1_8  ;; 0x40026408
   \   0000006C   0x45C4             CMP      R12,R8
   \   0000006E   0xD30D             BCC.N    ??HAL_DMA_DeInit_1
   \   00000070   0x45B4             CMP      R12,R6
   \   00000072   0xBF08             IT       EQ 
   \   00000074   0x46D6             MOVEQ    LR,R10
   \   00000076   0xD006             BEQ.N    ??HAL_DMA_DeInit_2
   \   00000078   0x45AC             CMP      R12,R5
   \   0000007A   0xBF08             IT       EQ 
   \   0000007C   0x46CE             MOVEQ    LR,R9
   \   0000007E   0xD002             BEQ.N    ??HAL_DMA_DeInit_2
   \   00000080   0x45A4             CMP      R12,R4
   \   00000082   0xBF08             IT       EQ 
   \   00000084   0x46BE             MOVEQ    LR,R7
   \                     ??HAL_DMA_DeInit_2: (+1)
   \   00000086   0xF8C2 0xE004      STR      LR,[R2, #+4]
   \   0000008A   0xE040             B.N      ??HAL_DMA_DeInit_3
   \                     ??HAL_DMA_DeInit_1: (+1)
   \   0000008C   0x459C             CMP      R12,R3
   \   0000008E   0xD313             BCC.N    ??HAL_DMA_DeInit_4
   \   00000090   0x.... 0x....      LDR.W    R11,??DataTable2  ;; 0x40026410
   \   00000094   0x45DC             CMP      R12,R11
   \   00000096   0xBF08             IT       EQ 
   \   00000098   0x46D6             MOVEQ    LR,R10
   \   0000009A   0xD00A             BEQ.N    ??HAL_DMA_DeInit_5
   \   0000009C   0x.... 0x....      LDR.W    R10,??DataTable3  ;; 0x40026428
   \   000000A0   0x45D4             CMP      R12,R10
   \   000000A2   0xBF08             IT       EQ 
   \   000000A4   0x46CE             MOVEQ    LR,R9
   \   000000A6   0xD004             BEQ.N    ??HAL_DMA_DeInit_5
   \   000000A8   0x.... 0x....      LDR.W    R9,??DataTable4  ;; 0x40026440
   \   000000AC   0x45CC             CMP      R12,R9
   \   000000AE   0xBF08             IT       EQ 
   \   000000B0   0x46BE             MOVEQ    LR,R7
   \                     ??HAL_DMA_DeInit_5: (+1)
   \   000000B2   0xF8C2 0xE000      STR      LR,[R2, #+0]
   \   000000B6   0xE02A             B.N      ??HAL_DMA_DeInit_3
   \                     ??HAL_DMA_DeInit_4: (+1)
   \   000000B8   0x.... 0x....      LDR.W    R11,??DataTable5  ;; 0x40026059
   \   000000BC   0x45DC             CMP      R12,R11
   \   000000BE   0xD313             BCC.N    ??HAL_DMA_DeInit_6
   \   000000C0   0x.... 0x....      LDR.W    R11,??DataTable6  ;; 0x40026070
   \   000000C4   0x45DC             CMP      R12,R11
   \   000000C6   0xBF08             IT       EQ 
   \   000000C8   0x46D6             MOVEQ    LR,R10
   \   000000CA   0xD00A             BEQ.N    ??HAL_DMA_DeInit_7
   \   000000CC   0x.... 0x....      LDR.W    R10,??DataTable7  ;; 0x40026088
   \   000000D0   0x45D4             CMP      R12,R10
   \   000000D2   0xBF08             IT       EQ 
   \   000000D4   0x46CE             MOVEQ    LR,R9
   \   000000D6   0xD004             BEQ.N    ??HAL_DMA_DeInit_7
   \   000000D8   0x.... 0x....      LDR.W    R9,??DataTable8  ;; 0x400260a0
   \   000000DC   0x45CC             CMP      R12,R9
   \   000000DE   0xBF08             IT       EQ 
   \   000000E0   0x46BE             MOVEQ    LR,R7
   \                     ??HAL_DMA_DeInit_7: (+1)
   \   000000E2   0xF8C1 0xE004      STR      LR,[R1, #+4]
   \   000000E6   0xE012             B.N      ??HAL_DMA_DeInit_3
   \                     ??HAL_DMA_DeInit_6: (+1)
   \   000000E8   0x.... 0x....      LDR.W    R11,??DataTable10  ;; 0x40026010
   \   000000EC   0x45DC             CMP      R12,R11
   \   000000EE   0xBF08             IT       EQ 
   \   000000F0   0x46D6             MOVEQ    LR,R10
   \   000000F2   0xD00A             BEQ.N    ??HAL_DMA_DeInit_8
   \   000000F4   0x.... 0x....      LDR.W    R10,??DataTable10_1  ;; 0x40026028
   \   000000F8   0x45D4             CMP      R12,R10
   \   000000FA   0xBF08             IT       EQ 
   \   000000FC   0x46CE             MOVEQ    LR,R9
   \   000000FE   0xD004             BEQ.N    ??HAL_DMA_DeInit_8
   \   00000100   0x.... 0x....      LDR.W    R9,??DataTable12  ;; 0x40026040
   \   00000104   0x45CC             CMP      R12,R9
   \   00000106   0xBF08             IT       EQ 
   \   00000108   0x46BE             MOVEQ    LR,R7
   \                     ??HAL_DMA_DeInit_8: (+1)
   \   0000010A   0xF8C1 0xE000      STR      LR,[R1, #+0]
    346            __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_DeInit_3: (+1)
   \   0000010E   0x6807             LDR      R7,[R0, #+0]
   \   00000110   0xF04F 0x6C00      MOV      R12,#+134217728
   \   00000114   0xF44F 0x1E00      MOV      LR,#+2097152
   \   00000118   0xF44F 0x6900      MOV      R9,#+2048
   \   0000011C   0x4547             CMP      R7,R8
   \   0000011E   0xD30E             BCC.N    ??HAL_DMA_DeInit_9
   \   00000120   0x42B7             CMP      R7,R6
   \   00000122   0xBF08             IT       EQ 
   \   00000124   0xF04F 0x0C20      MOVEQ    R12,#+32
   \   00000128   0xD006             BEQ.N    ??HAL_DMA_DeInit_10
   \   0000012A   0x42AF             CMP      R7,R5
   \   0000012C   0xBF08             IT       EQ 
   \   0000012E   0x46CC             MOVEQ    R12,R9
   \   00000130   0xD002             BEQ.N    ??HAL_DMA_DeInit_10
   \   00000132   0x42A7             CMP      R7,R4
   \   00000134   0xBF08             IT       EQ 
   \   00000136   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_10: (+1)
   \   00000138   0xF8C2 0xC004      STR      R12,[R2, #+4]
   \   0000013C   0xE043             B.N      ??HAL_DMA_DeInit_11
   \                     ??HAL_DMA_DeInit_9: (+1)
   \   0000013E   0x429F             CMP      R7,R3
   \   00000140   0xD314             BCC.N    ??HAL_DMA_DeInit_12
   \   00000142   0x.... 0x....      LDR.W    R10,??DataTable2  ;; 0x40026410
   \   00000146   0x4557             CMP      R7,R10
   \   00000148   0xBF08             IT       EQ 
   \   0000014A   0xF04F 0x0C20      MOVEQ    R12,#+32
   \   0000014E   0xD00A             BEQ.N    ??HAL_DMA_DeInit_13
   \   00000150   0x.... 0x....      LDR.W    R10,??DataTable3  ;; 0x40026428
   \   00000154   0x4557             CMP      R7,R10
   \   00000156   0xBF08             IT       EQ 
   \   00000158   0x46CC             MOVEQ    R12,R9
   \   0000015A   0xD004             BEQ.N    ??HAL_DMA_DeInit_13
   \   0000015C   0x.... 0x....      LDR.W    R9,??DataTable4  ;; 0x40026440
   \   00000160   0x454F             CMP      R7,R9
   \   00000162   0xBF08             IT       EQ 
   \   00000164   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_13: (+1)
   \   00000166   0xF8C2 0xC000      STR      R12,[R2, #+0]
   \   0000016A   0xE02C             B.N      ??HAL_DMA_DeInit_11
   \                     ??HAL_DMA_DeInit_12: (+1)
   \   0000016C   0x.... 0x....      LDR.W    R10,??DataTable5  ;; 0x40026059
   \   00000170   0x4557             CMP      R7,R10
   \   00000172   0xD314             BCC.N    ??HAL_DMA_DeInit_14
   \   00000174   0x.... 0x....      LDR.W    R10,??DataTable6  ;; 0x40026070
   \   00000178   0x4557             CMP      R7,R10
   \   0000017A   0xBF08             IT       EQ 
   \   0000017C   0xF04F 0x0C20      MOVEQ    R12,#+32
   \   00000180   0xD00A             BEQ.N    ??HAL_DMA_DeInit_15
   \   00000182   0x.... 0x....      LDR.W    R10,??DataTable7  ;; 0x40026088
   \   00000186   0x4557             CMP      R7,R10
   \   00000188   0xBF08             IT       EQ 
   \   0000018A   0x46CC             MOVEQ    R12,R9
   \   0000018C   0xD004             BEQ.N    ??HAL_DMA_DeInit_15
   \   0000018E   0x.... 0x....      LDR.W    R9,??DataTable8  ;; 0x400260a0
   \   00000192   0x454F             CMP      R7,R9
   \   00000194   0xBF08             IT       EQ 
   \   00000196   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_15: (+1)
   \   00000198   0xF8C1 0xC004      STR      R12,[R1, #+4]
   \   0000019C   0xE013             B.N      ??HAL_DMA_DeInit_11
   \                     ??HAL_DMA_DeInit_14: (+1)
   \   0000019E   0x.... 0x....      LDR.W    R10,??DataTable10  ;; 0x40026010
   \   000001A2   0x4557             CMP      R7,R10
   \   000001A4   0xBF08             IT       EQ 
   \   000001A6   0xF04F 0x0C20      MOVEQ    R12,#+32
   \   000001AA   0xD00A             BEQ.N    ??HAL_DMA_DeInit_16
   \   000001AC   0x.... 0x....      LDR.W    R10,??DataTable10_1  ;; 0x40026028
   \   000001B0   0x4557             CMP      R7,R10
   \   000001B2   0xBF08             IT       EQ 
   \   000001B4   0x46CC             MOVEQ    R12,R9
   \   000001B6   0xD004             BEQ.N    ??HAL_DMA_DeInit_16
   \   000001B8   0x.... 0x....      LDR.W    R9,??DataTable12  ;; 0x40026040
   \   000001BC   0x454F             CMP      R7,R9
   \   000001BE   0xBF08             IT       EQ 
   \   000001C0   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_16: (+1)
   \   000001C2   0xF8C1 0xC000      STR      R12,[R1, #+0]
    347            __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_DeInit_11: (+1)
   \   000001C6   0x6807             LDR      R7,[R0, #+0]
   \   000001C8   0xF04F 0x7C00      MOV      R12,#+33554432
   \   000001CC   0xF44F 0x2E00      MOV      LR,#+524288
   \   000001D0   0xF44F 0x7900      MOV      R9,#+512
   \   000001D4   0x4547             CMP      R7,R8
   \   000001D6   0xD30E             BCC.N    ??HAL_DMA_DeInit_17
   \   000001D8   0x42B7             CMP      R7,R6
   \   000001DA   0xBF08             IT       EQ 
   \   000001DC   0xF04F 0x0C08      MOVEQ    R12,#+8
   \   000001E0   0xD006             BEQ.N    ??HAL_DMA_DeInit_18
   \   000001E2   0x42AF             CMP      R7,R5
   \   000001E4   0xBF08             IT       EQ 
   \   000001E6   0x46CC             MOVEQ    R12,R9
   \   000001E8   0xD002             BEQ.N    ??HAL_DMA_DeInit_18
   \   000001EA   0x42A7             CMP      R7,R4
   \   000001EC   0xBF08             IT       EQ 
   \   000001EE   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_18: (+1)
   \   000001F0   0xF8C2 0xC004      STR      R12,[R2, #+4]
   \   000001F4   0xE043             B.N      ??HAL_DMA_DeInit_19
   \                     ??HAL_DMA_DeInit_17: (+1)
   \   000001F6   0x429F             CMP      R7,R3
   \   000001F8   0xD314             BCC.N    ??HAL_DMA_DeInit_20
   \   000001FA   0x.... 0x....      LDR.W    R10,??DataTable2  ;; 0x40026410
   \   000001FE   0x4557             CMP      R7,R10
   \   00000200   0xBF08             IT       EQ 
   \   00000202   0xF04F 0x0C08      MOVEQ    R12,#+8
   \   00000206   0xD00A             BEQ.N    ??HAL_DMA_DeInit_21
   \   00000208   0x.... 0x....      LDR.W    R10,??DataTable3  ;; 0x40026428
   \   0000020C   0x4557             CMP      R7,R10
   \   0000020E   0xBF08             IT       EQ 
   \   00000210   0x46CC             MOVEQ    R12,R9
   \   00000212   0xD004             BEQ.N    ??HAL_DMA_DeInit_21
   \   00000214   0x.... 0x....      LDR.W    R9,??DataTable4  ;; 0x40026440
   \   00000218   0x454F             CMP      R7,R9
   \   0000021A   0xBF08             IT       EQ 
   \   0000021C   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_21: (+1)
   \   0000021E   0xF8C2 0xC000      STR      R12,[R2, #+0]
   \   00000222   0xE02C             B.N      ??HAL_DMA_DeInit_19
   \                     ??HAL_DMA_DeInit_20: (+1)
   \   00000224   0x.... 0x....      LDR.W    R10,??DataTable5  ;; 0x40026059
   \   00000228   0x4557             CMP      R7,R10
   \   0000022A   0xD314             BCC.N    ??HAL_DMA_DeInit_22
   \   0000022C   0x.... 0x....      LDR.W    R10,??DataTable6  ;; 0x40026070
   \   00000230   0x4557             CMP      R7,R10
   \   00000232   0xBF08             IT       EQ 
   \   00000234   0xF04F 0x0C08      MOVEQ    R12,#+8
   \   00000238   0xD00A             BEQ.N    ??HAL_DMA_DeInit_23
   \   0000023A   0x.... 0x....      LDR.W    R10,??DataTable7  ;; 0x40026088
   \   0000023E   0x4557             CMP      R7,R10
   \   00000240   0xBF08             IT       EQ 
   \   00000242   0x46CC             MOVEQ    R12,R9
   \   00000244   0xD004             BEQ.N    ??HAL_DMA_DeInit_23
   \   00000246   0x.... 0x....      LDR.W    R9,??DataTable8  ;; 0x400260a0
   \   0000024A   0x454F             CMP      R7,R9
   \   0000024C   0xBF08             IT       EQ 
   \   0000024E   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_23: (+1)
   \   00000250   0xF8C1 0xC004      STR      R12,[R1, #+4]
   \   00000254   0xE013             B.N      ??HAL_DMA_DeInit_19
   \                     ??HAL_DMA_DeInit_22: (+1)
   \   00000256   0x.... 0x....      LDR.W    R10,??DataTable10  ;; 0x40026010
   \   0000025A   0x4557             CMP      R7,R10
   \   0000025C   0xBF08             IT       EQ 
   \   0000025E   0xF04F 0x0C08      MOVEQ    R12,#+8
   \   00000262   0xD00A             BEQ.N    ??HAL_DMA_DeInit_24
   \   00000264   0x.... 0x....      LDR.W    R10,??DataTable10_1  ;; 0x40026028
   \   00000268   0x4557             CMP      R7,R10
   \   0000026A   0xBF08             IT       EQ 
   \   0000026C   0x46CC             MOVEQ    R12,R9
   \   0000026E   0xD004             BEQ.N    ??HAL_DMA_DeInit_24
   \   00000270   0x.... 0x....      LDR.W    R9,??DataTable12  ;; 0x40026040
   \   00000274   0x454F             CMP      R7,R9
   \   00000276   0xBF08             IT       EQ 
   \   00000278   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_24: (+1)
   \   0000027A   0xF8C1 0xC000      STR      R12,[R1, #+0]
    348            __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_DeInit_19: (+1)
   \   0000027E   0x6807             LDR      R7,[R0, #+0]
   \   00000280   0xF44F 0x0C80      MOV      R12,#+4194304
   \   00000284   0xF44F 0x3E80      MOV      LR,#+65536
   \   00000288   0x.... 0x....      LDR.W    R9,??DataTable14  ;; 0x800001
   \   0000028C   0x4547             CMP      R7,R8
   \   0000028E   0xD30E             BCC.N    ??HAL_DMA_DeInit_25
   \   00000290   0x42B7             CMP      R7,R6
   \   00000292   0xBF08             IT       EQ 
   \   00000294   0x46CC             MOVEQ    R12,R9
   \   00000296   0xD007             BEQ.N    ??HAL_DMA_DeInit_26
   \   00000298   0x42AF             CMP      R7,R5
   \   0000029A   0xBF08             IT       EQ 
   \   0000029C   0xF04F 0x0C40      MOVEQ    R12,#+64
   \   000002A0   0xD002             BEQ.N    ??HAL_DMA_DeInit_26
   \   000002A2   0x42A7             CMP      R7,R4
   \   000002A4   0xBF08             IT       EQ 
   \   000002A6   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_26: (+1)
   \   000002A8   0xF8C2 0xC004      STR      R12,[R2, #+4]
   \   000002AC   0xE043             B.N      ??HAL_DMA_DeInit_27
   \                     ??HAL_DMA_DeInit_25: (+1)
   \   000002AE   0x429F             CMP      R7,R3
   \   000002B0   0xD314             BCC.N    ??HAL_DMA_DeInit_28
   \   000002B2   0x.... 0x....      LDR.W    R10,??DataTable2  ;; 0x40026410
   \   000002B6   0x4557             CMP      R7,R10
   \   000002B8   0xBF08             IT       EQ 
   \   000002BA   0x46CC             MOVEQ    R12,R9
   \   000002BC   0xD00B             BEQ.N    ??HAL_DMA_DeInit_29
   \   000002BE   0x.... 0x....      LDR.W    R9,??DataTable3  ;; 0x40026428
   \   000002C2   0x454F             CMP      R7,R9
   \   000002C4   0xBF08             IT       EQ 
   \   000002C6   0xF04F 0x0C40      MOVEQ    R12,#+64
   \   000002CA   0xD004             BEQ.N    ??HAL_DMA_DeInit_29
   \   000002CC   0x.... 0x....      LDR.W    R9,??DataTable4  ;; 0x40026440
   \   000002D0   0x454F             CMP      R7,R9
   \   000002D2   0xBF08             IT       EQ 
   \   000002D4   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_29: (+1)
   \   000002D6   0xF8C2 0xC000      STR      R12,[R2, #+0]
   \   000002DA   0xE02C             B.N      ??HAL_DMA_DeInit_27
   \                     ??HAL_DMA_DeInit_28: (+1)
   \   000002DC   0x.... 0x....      LDR.W    R10,??DataTable5  ;; 0x40026059
   \   000002E0   0x4557             CMP      R7,R10
   \   000002E2   0xD314             BCC.N    ??HAL_DMA_DeInit_30
   \   000002E4   0x.... 0x....      LDR.W    R10,??DataTable6  ;; 0x40026070
   \   000002E8   0x4557             CMP      R7,R10
   \   000002EA   0xBF08             IT       EQ 
   \   000002EC   0x46CC             MOVEQ    R12,R9
   \   000002EE   0xD00B             BEQ.N    ??HAL_DMA_DeInit_31
   \   000002F0   0x.... 0x....      LDR.W    R9,??DataTable7  ;; 0x40026088
   \   000002F4   0x454F             CMP      R7,R9
   \   000002F6   0xBF08             IT       EQ 
   \   000002F8   0xF04F 0x0C40      MOVEQ    R12,#+64
   \   000002FC   0xD004             BEQ.N    ??HAL_DMA_DeInit_31
   \   000002FE   0x.... 0x....      LDR.W    R9,??DataTable8  ;; 0x400260a0
   \   00000302   0x454F             CMP      R7,R9
   \   00000304   0xBF08             IT       EQ 
   \   00000306   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_31: (+1)
   \   00000308   0xF8C1 0xC004      STR      R12,[R1, #+4]
   \   0000030C   0xE013             B.N      ??HAL_DMA_DeInit_27
   \                     ??HAL_DMA_DeInit_30: (+1)
   \   0000030E   0x.... 0x....      LDR.W    R10,??DataTable10  ;; 0x40026010
   \   00000312   0x4557             CMP      R7,R10
   \   00000314   0xBF08             IT       EQ 
   \   00000316   0x46CC             MOVEQ    R12,R9
   \   00000318   0xD00B             BEQ.N    ??HAL_DMA_DeInit_32
   \   0000031A   0x.... 0x....      LDR.W    R9,??DataTable10_1  ;; 0x40026028
   \   0000031E   0x454F             CMP      R7,R9
   \   00000320   0xBF08             IT       EQ 
   \   00000322   0xF04F 0x0C40      MOVEQ    R12,#+64
   \   00000326   0xD004             BEQ.N    ??HAL_DMA_DeInit_32
   \   00000328   0x.... 0x....      LDR.W    R9,??DataTable12  ;; 0x40026040
   \   0000032C   0x454F             CMP      R7,R9
   \   0000032E   0xBF08             IT       EQ 
   \   00000330   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_32: (+1)
   \   00000332   0xF8C1 0xC000      STR      R12,[R1, #+0]
    349            __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_DeInit_27: (+1)
   \   00000336   0x6807             LDR      R7,[R0, #+0]
   \   00000338   0xF04F 0x6C80      MOV      R12,#+67108864
   \   0000033C   0xF44F 0x1E80      MOV      LR,#+1048576
   \   00000340   0xF44F 0x6980      MOV      R9,#+1024
   \   00000344   0x4547             CMP      R7,R8
   \   00000346   0xD30E             BCC.N    ??HAL_DMA_DeInit_33
   \   00000348   0x42B7             CMP      R7,R6
   \   0000034A   0xBF08             IT       EQ 
   \   0000034C   0xF04F 0x0C10      MOVEQ    R12,#+16
   \   00000350   0xD006             BEQ.N    ??HAL_DMA_DeInit_34
   \   00000352   0x42AF             CMP      R7,R5
   \   00000354   0xBF08             IT       EQ 
   \   00000356   0x46CC             MOVEQ    R12,R9
   \   00000358   0xD002             BEQ.N    ??HAL_DMA_DeInit_34
   \   0000035A   0x42A7             CMP      R7,R4
   \   0000035C   0xBF08             IT       EQ 
   \   0000035E   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_34: (+1)
   \   00000360   0xF8C2 0xC004      STR      R12,[R2, #+4]
   \   00000364   0xE043             B.N      ??HAL_DMA_DeInit_35
   \                     ??HAL_DMA_DeInit_33: (+1)
   \   00000366   0x429F             CMP      R7,R3
   \   00000368   0xD314             BCC.N    ??HAL_DMA_DeInit_36
   \   0000036A   0x.... 0x....      LDR.W    R1,??DataTable2  ;; 0x40026410
   \   0000036E   0x428F             CMP      R7,R1
   \   00000370   0xBF08             IT       EQ 
   \   00000372   0xF04F 0x0C10      MOVEQ    R12,#+16
   \   00000376   0xD00A             BEQ.N    ??HAL_DMA_DeInit_37
   \   00000378   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x40026428
   \   0000037C   0x428F             CMP      R7,R1
   \   0000037E   0xBF08             IT       EQ 
   \   00000380   0x46CC             MOVEQ    R12,R9
   \   00000382   0xD004             BEQ.N    ??HAL_DMA_DeInit_37
   \   00000384   0x.... 0x....      LDR.W    R1,??DataTable4  ;; 0x40026440
   \   00000388   0x428F             CMP      R7,R1
   \   0000038A   0xBF08             IT       EQ 
   \   0000038C   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_37: (+1)
   \   0000038E   0xF8C2 0xC000      STR      R12,[R2, #+0]
   \   00000392   0xE02C             B.N      ??HAL_DMA_DeInit_35
   \                     ??HAL_DMA_DeInit_36: (+1)
   \   00000394   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x40026059
   \   00000398   0x4297             CMP      R7,R2
   \   0000039A   0xD314             BCC.N    ??HAL_DMA_DeInit_38
   \   0000039C   0x.... 0x....      LDR.W    R2,??DataTable6  ;; 0x40026070
   \   000003A0   0x4297             CMP      R7,R2
   \   000003A2   0xBF08             IT       EQ 
   \   000003A4   0xF04F 0x0C10      MOVEQ    R12,#+16
   \   000003A8   0xD00A             BEQ.N    ??HAL_DMA_DeInit_39
   \   000003AA   0x.... 0x....      LDR.W    R2,??DataTable7  ;; 0x40026088
   \   000003AE   0x4297             CMP      R7,R2
   \   000003B0   0xBF08             IT       EQ 
   \   000003B2   0x46CC             MOVEQ    R12,R9
   \   000003B4   0xD004             BEQ.N    ??HAL_DMA_DeInit_39
   \   000003B6   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0x400260a0
   \   000003BA   0x4297             CMP      R7,R2
   \   000003BC   0xBF08             IT       EQ 
   \   000003BE   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_39: (+1)
   \   000003C0   0xF8C1 0xC004      STR      R12,[R1, #+4]
   \   000003C4   0xE013             B.N      ??HAL_DMA_DeInit_35
   \                     ??HAL_DMA_DeInit_38: (+1)
   \   000003C6   0x.... 0x....      LDR.W    R2,??DataTable10  ;; 0x40026010
   \   000003CA   0x4297             CMP      R7,R2
   \   000003CC   0xBF08             IT       EQ 
   \   000003CE   0xF04F 0x0C10      MOVEQ    R12,#+16
   \   000003D2   0xD00A             BEQ.N    ??HAL_DMA_DeInit_40
   \   000003D4   0x.... 0x....      LDR.W    R2,??DataTable10_1  ;; 0x40026028
   \   000003D8   0x4297             CMP      R7,R2
   \   000003DA   0xBF08             IT       EQ 
   \   000003DC   0x46CC             MOVEQ    R12,R9
   \   000003DE   0xD004             BEQ.N    ??HAL_DMA_DeInit_40
   \   000003E0   0x.... 0x....      LDR.W    R2,??DataTable12  ;; 0x40026040
   \   000003E4   0x4297             CMP      R7,R2
   \   000003E6   0xBF08             IT       EQ 
   \   000003E8   0x46F4             MOVEQ    R12,LR
   \                     ??HAL_DMA_DeInit_40: (+1)
   \   000003EA   0xF8C1 0xC000      STR      R12,[R1, #+0]
    350          
    351            /* Initialize the error code */
    352            hdma->ErrorCode = HAL_DMA_ERROR_NONE;
   \                     ??HAL_DMA_DeInit_35: (+1)
   \   000003EE   0x2100             MOVS     R1,#+0
   \   000003F0   0xF100 0x0234      ADD      R2,R0,#+52
   \   000003F4   0x6191             STR      R1,[R2, #+24]
    353          
    354            /* Initialize the DMA state */
    355            hdma->State = HAL_DMA_STATE_RESET;
   \   000003F6   0x7051             STRB     R1,[R2, #+1]
    356          
    357            /* Release Lock */
    358            __HAL_UNLOCK(hdma);
   \   000003F8   0xF880 0x1034      STRB     R1,[R0, #+52]
    359          
    360            return HAL_OK;
   \   000003FC   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_DeInit_0: (+1)
   \   000003FE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    361          }
    362          
    363          /**
    364            * @}
    365            */
    366          
    367          /** @addtogroup DMA_Exported_Functions_Group2
    368            *
    369          @verbatim   
    370           ===============================================================================
    371                                #####  IO operation functions  #####
    372           ===============================================================================  
    373              [..]  This section provides functions allowing to:
    374                (+) Configure the source, destination address and data length and Start DMA transfer
    375                (+) Configure the source, destination address and data length and 
    376                    Start DMA transfer with interrupt
    377                (+) Abort DMA transfer
    378                (+) Poll for transfer complete
    379                (+) Handle DMA interrupt request  
    380          
    381          @endverbatim
    382            * @{
    383            */
    384          
    385          /**
    386            * @brief  Starts the DMA Transfer.
    387            * @param  hdma      : pointer to a DMA_HandleTypeDef structure that contains
    388            *                     the configuration information for the specified DMA Stream.  
    389            * @param  SrcAddress: The source memory Buffer address
    390            * @param  DstAddress: The destination memory Buffer address
    391            * @param  DataLength: The length of data to be transferred from source to destination
    392            * @retval HAL status
    393            */

   \                                 In section .text, align 2, keep-with-next
    394          HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
    395          {
   \                     HAL_DMA_Start: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
    396            /* Process locked */
    397            __HAL_LOCK(hdma);
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000006   0xD101             BNE.N    ??HAL_DMA_Start_0
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??HAL_DMA_Start_0: (+1)
   \   0000000C   0x.... 0x....      BL       ?Subroutine2
    398          
    399            /* Change DMA peripheral state */
    400            hdma->State = HAL_DMA_STATE_BUSY;
    401          
    402             /* Check the parameters */
    403            assert_param(IS_DMA_BUFFER_SIZE(DataLength));
    404          
    405            /* Disable the peripheral */
    406            __HAL_DMA_DISABLE(hdma);
    407          
    408            /* Configure the source, destination address and the data length */
    409            DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    410          
    411            /* Enable the Peripheral */
    412            __HAL_DMA_ENABLE(hdma);
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000010   0x....             B.N      ?Subroutine0
    413          
    414            return HAL_OK; 
    415          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x6820             LDR      R0,[R4, #+0]
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000008   0x6001             STR      R1,[R0, #+0]
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xBD32             POP      {R1,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x2501             MOVS     R5,#+1
   \   00000002   0x7005             STRB     R5,[R0, #+0]
   \   00000004   0x2502             MOVS     R5,#+2
   \   00000006   0x7045             STRB     R5,[R0, #+1]
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x6805             LDR      R5,[R0, #+0]
   \   0000000C   0x086D             LSRS     R5,R5,#+1
   \   0000000E   0x006D             LSLS     R5,R5,#+1
   \   00000010   0x6005             STR      R5,[R0, #+0]
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x....             B.N      DMA_SetConfig

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0xF104 0x0034      ADD      R0,R4,#+52
   \   00000006   0x7805             LDRB     R5,[R0, #+0]
   \   00000008   0x2D01             CMP      R5,#+1
   \   0000000A   0x4770             BX       LR
    416          
    417          /**
    418            * @brief  Start the DMA Transfer with interrupt enabled.
    419            * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
    420            *                     the configuration information for the specified DMA Stream.  
    421            * @param  SrcAddress: The source memory Buffer address
    422            * @param  DstAddress: The destination memory Buffer address
    423            * @param  DataLength: The length of data to be transferred from source to destination
    424            * @retval HAL status
    425            */

   \                                 In section .text, align 2, keep-with-next
    426          HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
    427          {
   \                     HAL_DMA_Start_IT: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
    428            /* Process locked */
    429            __HAL_LOCK(hdma);
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000006   0xD101             BNE.N    ??HAL_DMA_Start_IT_0
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??HAL_DMA_Start_IT_0: (+1)
   \   0000000C   0x.... 0x....      BL       ?Subroutine2
    430          
    431            /* Change DMA peripheral state */
    432            hdma->State = HAL_DMA_STATE_BUSY;
    433          
    434             /* Check the parameters */
    435            assert_param(IS_DMA_BUFFER_SIZE(DataLength));
    436          
    437            /* Disable the peripheral */
    438            __HAL_DMA_DISABLE(hdma);
    439          
    440            /* Configure the source, destination address and the data length */
    441            DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    442          
    443            /* Enable the transfer complete interrupt */
    444            __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000010   0x6820             LDR      R0,[R4, #+0]
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000018   0x6001             STR      R1,[R0, #+0]
    445          
    446            /* Enable the Half transfer complete interrupt */
    447            __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
   \   0000001A   0x6820             LDR      R0,[R4, #+0]
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0xF041 0x0108      ORR      R1,R1,#0x8
   \   00000022   0x6001             STR      R1,[R0, #+0]
    448          
    449            /* Enable the transfer Error interrupt */
    450            __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
   \   00000024   0x6820             LDR      R0,[R4, #+0]
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000002C   0x6001             STR      R1,[R0, #+0]
    451          
    452            /* Enable the FIFO Error interrupt */
    453            __HAL_DMA_ENABLE_IT(hdma, DMA_IT_FE);
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x6941             LDR      R1,[R0, #+20]
   \   00000032   0xF041 0x0180      ORR      R1,R1,#0x80
   \   00000036   0x6141             STR      R1,[R0, #+20]
    454          
    455            /* Enable the direct mode Error interrupt */
    456            __HAL_DMA_ENABLE_IT(hdma, DMA_IT_DME);
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0x6801             LDR      R1,[R0, #+0]
   \   0000003C   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000040   0x6001             STR      R1,[R0, #+0]
    457          
    458             /* Enable the Peripheral */
    459            __HAL_DMA_ENABLE(hdma);
   \   00000042                      REQUIRE ?Subroutine0
   \   00000042                      ;; // Fall through to label ?Subroutine0
    460          
    461            return HAL_OK;
    462          } 
    463          
    464          /**
    465            * @brief  Aborts the DMA Transfer.
    466            * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
    467            *                 the configuration information for the specified DMA Stream.
    468            *                   
    469            * @note  After disabling a DMA Stream, a check for wait until the DMA Stream is 
    470            *        effectively disabled is added. If a Stream is disabled 
    471            *        while a data transfer is ongoing, the current data will be transferred
    472            *        and the Stream will be effectively disabled only after the transfer of
    473            *        this single data is finished.  
    474            * @retval HAL status
    475            */

   \                                 In section .text, align 2, keep-with-next
    476          HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
    477          {
   \                     HAL_DMA_Abort: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    478            uint32_t tickstart = 0;
    479          
    480            /* Disable the stream */
    481            __HAL_DMA_DISABLE(hdma);
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x0849             LSRS     R1,R1,#+1
   \   0000000A   0x0049             LSLS     R1,R1,#+1
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    482          
    483            /* Get tick */
    484            tickstart = HAL_GetTick();
   \   0000000E   0x.... 0x....      BL       HAL_GetTick
   \   00000012   0x4605             MOV      R5,R0
    485          
    486            /* Check if the DMA Stream is effectively disabled */
    487            while((hdma->Instance->CR & DMA_SxCR_EN) != 0)
   \                     ??HAL_DMA_Abort_0: (+1)
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x07C0             LSLS     R0,R0,#+31
   \   0000001A   0xD511             BPL.N    ??HAL_DMA_Abort_1
    488            {
    489              /* Check for the Timeout */
    490              if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
   \   0000001C   0x.... 0x....      BL       HAL_GetTick
   \   00000020   0x1B40             SUBS     R0,R0,R5
   \   00000022   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000026   0xD9F5             BLS.N    ??HAL_DMA_Abort_0
    491              {
    492                /* Update error code */
    493                hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
   \   00000028   0xF104 0x0034      ADD      R0,R4,#+52
   \   0000002C   0x6981             LDR      R1,[R0, #+24]
   \   0000002E   0xF041 0x0120      ORR      R1,R1,#0x20
   \   00000032   0x6181             STR      R1,[R0, #+24]
    494                
    495                /* Process Unlocked */
    496                __HAL_UNLOCK(hdma);
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x7001             STRB     R1,[R0, #+0]
    497                
    498                /* Change the DMA state */
    499                hdma->State = HAL_DMA_STATE_TIMEOUT;
   \   00000038   0x2103             MOVS     R1,#+3
   \   0000003A   0x7041             STRB     R1,[R0, #+1]
    500                
    501                return HAL_TIMEOUT;
   \   0000003C   0x2003             MOVS     R0,#+3
   \   0000003E   0xBD32             POP      {R1,R4,R5,PC}
    502              }
    503            }
    504            /* Process Unlocked */
    505            __HAL_UNLOCK(hdma);
   \                     ??HAL_DMA_Abort_1: (+1)
   \   00000040   0xF104 0x0034      ADD      R0,R4,#+52
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x7001             STRB     R1,[R0, #+0]
    506          
    507            /* Change the DMA state*/
    508            hdma->State = HAL_DMA_STATE_READY;
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x7041             STRB     R1,[R0, #+1]
    509          
    510            return HAL_OK;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    511          }
    512          
    513          /**
    514            * @brief  Polling for transfer complete.
    515            * @param  hdma:          pointer to a DMA_HandleTypeDef structure that contains
    516            *                        the configuration information for the specified DMA Stream.
    517            * @param  CompleteLevel: Specifies the DMA level complete.  
    518            * @param  Timeout:       Timeout duration.
    519            * @retval HAL status
    520            */

   \                                 In section .text, align 2, keep-with-next
    521          HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
    522          {
   \                     HAL_DMA_PollForTransfer: (+1)
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
    523            uint32_t temp, tmp, tmp1, tmp2;
    524            uint32_t tickstart = 0; 
    525          
    526            /* Get the level transfer complete flag */
    527            if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF44F 0x6480      MOV      R4,#+1024
   \   0000000E   0xF04F 0x6980      MOV      R9,#+67108864
   \   00000012   0xF44F 0x1B80      MOV      R11,#+1048576
   \   00000016   0xF44F 0x6600      MOV      R6,#+2048
   \   0000001A   0xF04F 0x6A00      MOV      R10,#+134217728
   \   0000001E   0xF44F 0x1800      MOV      R8,#+2097152
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0x40026010
   \   00000026   0xD137             BNE.N    ??HAL_DMA_PollForTransfer_0
    528            {
    529              /* Transfer Complete flag */
    530              temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
   \   00000028   0x4288             CMP      R0,R1
   \   0000002A   0xBF1C             ITT      NE 
   \   0000002C   0x.... 0x....      LDRNE.W  R1,??DataTable2  ;; 0x40026410
   \   00000030   0x4288             CMPNE    R0,R1
   \   00000032   0xD007             BEQ.N    ??HAL_DMA_PollForTransfer_1
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable6  ;; 0x40026070
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xBF1C             ITT      NE 
   \   0000003C   0x.... 0x....      LDRNE.W  R1,??DataTable14_1  ;; 0x40026470
   \   00000040   0x4288             CMPNE    R0,R1
   \   00000042   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_2
   \                     ??HAL_DMA_PollForTransfer_1: (+1)
   \   00000044   0x2020             MOVS     R0,#+32
   \   00000046   0xE036             B.N      ??HAL_DMA_PollForTransfer_3
   \                     ??HAL_DMA_PollForTransfer_2: (+1)
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable10_1  ;; 0x40026028
   \   0000004C   0x4288             CMP      R0,R1
   \   0000004E   0xBF1C             ITT      NE 
   \   00000050   0x.... 0x....      LDRNE.W  R1,??DataTable3  ;; 0x40026428
   \   00000054   0x4288             CMPNE    R0,R1
   \   00000056   0xD007             BEQ.N    ??HAL_DMA_PollForTransfer_4
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable7  ;; 0x40026088
   \   0000005C   0x4288             CMP      R0,R1
   \   0000005E   0xBF1C             ITT      NE 
   \   00000060   0x.... 0x....      LDRNE.W  R1,??DataTable14_2  ;; 0x40026488
   \   00000064   0x4288             CMPNE    R0,R1
   \   00000066   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_5
   \                     ??HAL_DMA_PollForTransfer_4: (+1)
   \   00000068   0x9600             STR      R6,[SP, #+0]
   \   0000006A   0xE04D             B.N      ??HAL_DMA_PollForTransfer_6
   \                     ??HAL_DMA_PollForTransfer_5: (+1)
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable12  ;; 0x40026040
   \   00000070   0x4288             CMP      R0,R1
   \   00000072   0xBF1C             ITT      NE 
   \   00000074   0x.... 0x....      LDRNE.W  R1,??DataTable4  ;; 0x40026440
   \   00000078   0x4288             CMPNE    R0,R1
   \   0000007A   0xD007             BEQ.N    ??HAL_DMA_PollForTransfer_7
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable8  ;; 0x400260a0
   \   00000080   0x4288             CMP      R0,R1
   \   00000082   0xBF1C             ITT      NE 
   \   00000084   0x.... 0x....      LDRNE.W  R1,??DataTable14_3  ;; 0x400264a0
   \   00000088   0x4288             CMPNE    R0,R1
   \   0000008A   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_8
   \                     ??HAL_DMA_PollForTransfer_7: (+1)
   \   0000008C   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   00000090   0xE03A             B.N      ??HAL_DMA_PollForTransfer_6
   \                     ??HAL_DMA_PollForTransfer_8: (+1)
   \   00000092   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   00000096   0xE037             B.N      ??HAL_DMA_PollForTransfer_6
    531            }
    532            else
    533            {
    534              /* Half Transfer Complete flag */
    535              temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
   \                     ??HAL_DMA_PollForTransfer_0: (+1)
   \   00000098   0x4288             CMP      R0,R1
   \   0000009A   0xBF1C             ITT      NE 
   \   0000009C   0x.... 0x....      LDRNE.W  R1,??DataTable2  ;; 0x40026410
   \   000000A0   0x4288             CMPNE    R0,R1
   \   000000A2   0xD007             BEQ.N    ??HAL_DMA_PollForTransfer_9
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable6  ;; 0x40026070
   \   000000A8   0x4288             CMP      R0,R1
   \   000000AA   0xBF1C             ITT      NE 
   \   000000AC   0x.... 0x....      LDRNE.W  R1,??DataTable14_1  ;; 0x40026470
   \   000000B0   0x4288             CMPNE    R0,R1
   \   000000B2   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_10
   \                     ??HAL_DMA_PollForTransfer_9: (+1)
   \   000000B4   0x2010             MOVS     R0,#+16
   \                     ??HAL_DMA_PollForTransfer_3: (+1)
   \   000000B6   0x9000             STR      R0,[SP, #+0]
   \   000000B8   0xE026             B.N      ??HAL_DMA_PollForTransfer_6
   \                     ??HAL_DMA_PollForTransfer_10: (+1)
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable10_1  ;; 0x40026028
   \   000000BE   0x4288             CMP      R0,R1
   \   000000C0   0xBF1C             ITT      NE 
   \   000000C2   0x.... 0x....      LDRNE.W  R1,??DataTable3  ;; 0x40026428
   \   000000C6   0x4288             CMPNE    R0,R1
   \   000000C8   0xD007             BEQ.N    ??HAL_DMA_PollForTransfer_11
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable7  ;; 0x40026088
   \   000000CE   0x4288             CMP      R0,R1
   \   000000D0   0xBF1C             ITT      NE 
   \   000000D2   0x.... 0x....      LDRNE.W  R1,??DataTable14_2  ;; 0x40026488
   \   000000D6   0x4288             CMPNE    R0,R1
   \   000000D8   0xD101             BNE.N    ??HAL_DMA_PollForTransfer_12
   \                     ??HAL_DMA_PollForTransfer_11: (+1)
   \   000000DA   0x9400             STR      R4,[SP, #+0]
   \   000000DC   0xE014             B.N      ??HAL_DMA_PollForTransfer_6
   \                     ??HAL_DMA_PollForTransfer_12: (+1)
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable12  ;; 0x40026040
   \   000000E2   0x4288             CMP      R0,R1
   \   000000E4   0xBF1C             ITT      NE 
   \   000000E6   0x.... 0x....      LDRNE.W  R1,??DataTable4  ;; 0x40026440
   \   000000EA   0x4288             CMPNE    R0,R1
   \   000000EC   0xD007             BEQ.N    ??HAL_DMA_PollForTransfer_13
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable8  ;; 0x400260a0
   \   000000F2   0x4288             CMP      R0,R1
   \   000000F4   0xBF1C             ITT      NE 
   \   000000F6   0x.... 0x....      LDRNE.W  R1,??DataTable14_3  ;; 0x400264a0
   \   000000FA   0x4288             CMPNE    R0,R1
   \   000000FC   0xD102             BNE.N    ??HAL_DMA_PollForTransfer_14
   \                     ??HAL_DMA_PollForTransfer_13: (+1)
   \   000000FE   0xF8CD 0xB000      STR      R11,[SP, #+0]
   \   00000102   0xE001             B.N      ??HAL_DMA_PollForTransfer_6
   \                     ??HAL_DMA_PollForTransfer_14: (+1)
   \   00000104   0xF8CD 0x9000      STR      R9,[SP, #+0]
    536            }
    537          
    538            /* Get tick */
    539            tickstart = HAL_GetTick();
   \                     ??HAL_DMA_PollForTransfer_6: (+1)
   \   00000108   0x.... 0x....      BL       HAL_GetTick
   \   0000010C   0x9001             STR      R0,[SP, #+4]
   \   0000010E   0x.... 0x....      LDR.W    R5,??DataTable14_4  ;; 0x40026000
   \   00000112   0x.... 0x....      LDR.W    R7,??DataTable14_5  ;; 0x40026400
    540          
    541            while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
   \                     ??HAL_DMA_PollForTransfer_15: (+1)
   \   00000116   0x9802             LDR      R0,[SP, #+8]
   \   00000118   0x6802             LDR      R2,[R0, #+0]
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable14_6  ;; 0x40026459
   \   0000011E   0x4611             MOV      R1,R2
   \   00000120   0x4281             CMP      R1,R0
   \   00000122   0xBF28             IT       CS 
   \   00000124   0x6878             LDRCS    R0,[R7, #+4]
   \   00000126   0xD20B             BCS.N    ??HAL_DMA_PollForTransfer_16
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0x400260b9
   \   0000012C   0x4281             CMP      R1,R0
   \   0000012E   0xBF28             IT       CS 
   \   00000130   0x6838             LDRCS    R0,[R7, #+0]
   \   00000132   0xD205             BCS.N    ??HAL_DMA_PollForTransfer_16
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable5  ;; 0x40026059
   \   00000138   0x4281             CMP      R1,R0
   \   0000013A   0xBF2C             ITE      CS 
   \   0000013C   0x6868             LDRCS    R0,[R5, #+4]
   \   0000013E   0x6828             LDRCC    R0,[R5, #+0]
   \                     ??HAL_DMA_PollForTransfer_16: (+1)
   \   00000140   0x9B00             LDR      R3,[SP, #+0]
   \   00000142   0x4018             ANDS     R0,R3,R0
   \   00000144   0xF040 0x81FB      BNE.W    ??HAL_DMA_PollForTransfer_17
    542            {
    543              tmp  = __HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
   \   00000148   0x.... 0x....      LDR.W    R0,??DataTable14_6  ;; 0x40026459
   \   0000014C   0x4281             CMP      R1,R0
   \   0000014E   0xD324             BCC.N    ??HAL_DMA_PollForTransfer_18
   \   00000150   0x.... 0x....      LDR.W    R2,??DataTable14_1  ;; 0x40026470
   \   00000154   0x6878             LDR      R0,[R7, #+4]
   \   00000156   0x4291             CMP      R1,R2
   \   00000158   0xD105             BNE.N    ??HAL_DMA_PollForTransfer_19
   \   0000015A   0xF000 0x0C08      AND      R12,R0,#0x8
   \   0000015E   0x6878             LDR      R0,[R7, #+4]
   \   00000160   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_11: (+1)
   \   00000164   0xE017             B.N      ??CrossCallReturnLabel_39
   \                     ??HAL_DMA_PollForTransfer_19: (+1)
   \   00000166   0x.... 0x....      LDR.W    R2,??DataTable14_2  ;; 0x40026488
   \   0000016A   0x4291             CMP      R1,R2
   \   0000016C   0xD105             BNE.N    ??HAL_DMA_PollForTransfer_20
   \   0000016E   0xF400 0x7C00      AND      R12,R0,#0x200
   \   00000172   0x6878             LDR      R0,[R7, #+4]
   \   00000174   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_31: (+1)
   \   00000178   0xE00D             B.N      ??CrossCallReturnLabel_39
   \                     ??HAL_DMA_PollForTransfer_20: (+1)
   \   0000017A   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_15: (+1)
   \   0000017E   0xD105             BNE.N    ??HAL_DMA_PollForTransfer_21
   \   00000180   0xF400 0x2C00      AND      R12,R0,#0x80000
   \   00000184   0x6878             LDR      R0,[R7, #+4]
   \   00000186   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_35: (+1)
   \   0000018A   0xE004             B.N      ??CrossCallReturnLabel_39
   \                     ??HAL_DMA_PollForTransfer_21: (+1)
   \   0000018C   0xF000 0x7C00      AND      R12,R0,#0x2000000
   \   00000190   0x6878             LDR      R0,[R7, #+4]
   \   00000192   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_39: (+1)
   \   00000196   0x6878             LDR      R0,[R7, #+4]
   \   00000198   0xE075             B.N      ??HAL_DMA_PollForTransfer_22
   \                     ??HAL_DMA_PollForTransfer_18: (+1)
   \   0000019A   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0x400260b9
   \   0000019E   0x4281             CMP      R1,R0
   \   000001A0   0xD324             BCC.N    ??HAL_DMA_PollForTransfer_23
   \   000001A2   0x.... 0x....      LDR.W    R2,??DataTable2  ;; 0x40026410
   \   000001A6   0x6838             LDR      R0,[R7, #+0]
   \   000001A8   0x4291             CMP      R1,R2
   \   000001AA   0xD105             BNE.N    ??HAL_DMA_PollForTransfer_24
   \   000001AC   0xF000 0x0C08      AND      R12,R0,#0x8
   \   000001B0   0x6838             LDR      R0,[R7, #+0]
   \   000001B2   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_12: (+1)
   \   000001B6   0xE017             B.N      ??CrossCallReturnLabel_36
   \                     ??HAL_DMA_PollForTransfer_24: (+1)
   \   000001B8   0x.... 0x....      LDR.W    R2,??DataTable3  ;; 0x40026428
   \   000001BC   0x4291             CMP      R1,R2
   \   000001BE   0xD105             BNE.N    ??HAL_DMA_PollForTransfer_25
   \   000001C0   0xF400 0x7C00      AND      R12,R0,#0x200
   \   000001C4   0x6838             LDR      R0,[R7, #+0]
   \   000001C6   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_32: (+1)
   \   000001CA   0xE00D             B.N      ??CrossCallReturnLabel_36
   \                     ??HAL_DMA_PollForTransfer_25: (+1)
   \   000001CC   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_23: (+1)
   \   000001D0   0xD005             BEQ.N    ??HAL_DMA_PollForTransfer_26
   \   000001D2   0xF000 0x7C00      AND      R12,R0,#0x2000000
   \   000001D6   0x6838             LDR      R0,[R7, #+0]
   \   000001D8   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_40: (+1)
   \   000001DC   0xE004             B.N      ??CrossCallReturnLabel_36
   \                     ??HAL_DMA_PollForTransfer_26: (+1)
   \   000001DE   0xF400 0x2C00      AND      R12,R0,#0x80000
   \   000001E2   0x6838             LDR      R0,[R7, #+0]
   \   000001E4   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_36: (+1)
   \   000001E8   0x6838             LDR      R0,[R7, #+0]
   \   000001EA   0xE04C             B.N      ??HAL_DMA_PollForTransfer_22
   \                     ??HAL_DMA_PollForTransfer_23: (+1)
   \   000001EC   0x.... 0x....      LDR.W    R0,??DataTable5  ;; 0x40026059
   \   000001F0   0x4281             CMP      R1,R0
   \   000001F2   0xD324             BCC.N    ??HAL_DMA_PollForTransfer_27
   \   000001F4   0x.... 0x....      LDR.W    R2,??DataTable6  ;; 0x40026070
   \   000001F8   0x6868             LDR      R0,[R5, #+4]
   \   000001FA   0x4291             CMP      R1,R2
   \   000001FC   0xD105             BNE.N    ??HAL_DMA_PollForTransfer_28
   \   000001FE   0xF000 0x0C08      AND      R12,R0,#0x8
   \   00000202   0x6868             LDR      R0,[R5, #+4]
   \   00000204   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_13: (+1)
   \   00000208   0xE017             B.N      ??CrossCallReturnLabel_37
   \                     ??HAL_DMA_PollForTransfer_28: (+1)
   \   0000020A   0x.... 0x....      LDR.W    R2,??DataTable7  ;; 0x40026088
   \   0000020E   0x4291             CMP      R1,R2
   \   00000210   0xD105             BNE.N    ??HAL_DMA_PollForTransfer_29
   \   00000212   0xF400 0x7C00      AND      R12,R0,#0x200
   \   00000216   0x6868             LDR      R0,[R5, #+4]
   \   00000218   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_33: (+1)
   \   0000021C   0xE00D             B.N      ??CrossCallReturnLabel_37
   \                     ??HAL_DMA_PollForTransfer_29: (+1)
   \   0000021E   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_57: (+1)
   \   00000222   0xD005             BEQ.N    ??HAL_DMA_PollForTransfer_30
   \   00000224   0xF000 0x7C00      AND      R12,R0,#0x2000000
   \   00000228   0x6868             LDR      R0,[R5, #+4]
   \   0000022A   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_41: (+1)
   \   0000022E   0xE004             B.N      ??CrossCallReturnLabel_37
   \                     ??HAL_DMA_PollForTransfer_30: (+1)
   \   00000230   0xF400 0x2C00      AND      R12,R0,#0x80000
   \   00000234   0x6868             LDR      R0,[R5, #+4]
   \   00000236   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_37: (+1)
   \   0000023A   0x6868             LDR      R0,[R5, #+4]
   \   0000023C   0xE023             B.N      ??HAL_DMA_PollForTransfer_22
   \                     ??HAL_DMA_PollForTransfer_27: (+1)
   \   0000023E   0x.... 0x....      LDR.W    R2,??DataTable10  ;; 0x40026010
   \   00000242   0x6828             LDR      R0,[R5, #+0]
   \   00000244   0x4291             CMP      R1,R2
   \   00000246   0xD105             BNE.N    ??HAL_DMA_PollForTransfer_31
   \   00000248   0xF000 0x0C08      AND      R12,R0,#0x8
   \   0000024C   0x6828             LDR      R0,[R5, #+0]
   \   0000024E   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_14: (+1)
   \   00000252   0xE017             B.N      ??CrossCallReturnLabel_38
   \                     ??HAL_DMA_PollForTransfer_31: (+1)
   \   00000254   0x.... 0x....      LDR.W    R2,??DataTable10_1  ;; 0x40026028
   \   00000258   0x4291             CMP      R1,R2
   \   0000025A   0xD105             BNE.N    ??HAL_DMA_PollForTransfer_32
   \   0000025C   0xF400 0x7C00      AND      R12,R0,#0x200
   \   00000260   0x6828             LDR      R0,[R5, #+0]
   \   00000262   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_34: (+1)
   \   00000266   0xE00D             B.N      ??CrossCallReturnLabel_38
   \                     ??HAL_DMA_PollForTransfer_32: (+1)
   \   00000268   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_65: (+1)
   \   0000026C   0xD005             BEQ.N    ??HAL_DMA_PollForTransfer_33
   \   0000026E   0xF000 0x7C00      AND      R12,R0,#0x2000000
   \   00000272   0x6828             LDR      R0,[R5, #+0]
   \   00000274   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_42: (+1)
   \   00000278   0xE004             B.N      ??CrossCallReturnLabel_38
   \                     ??HAL_DMA_PollForTransfer_33: (+1)
   \   0000027A   0xF400 0x2C00      AND      R12,R0,#0x80000
   \   0000027E   0x6828             LDR      R0,[R5, #+0]
   \   00000280   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_38: (+1)
   \   00000284   0x6828             LDR      R0,[R5, #+0]
   \                     ??HAL_DMA_PollForTransfer_22: (+1)
   \   00000286   0x4003             ANDS     R3,R3,R0
    544              tmp1 = __HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
    545              tmp2 = __HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
    546              if((tmp != RESET) || (tmp1 != RESET) || (tmp2 != RESET))
   \   00000288   0xEA42 0x000C      ORR      R0,R2,R12
   \   0000028C   0x4318             ORRS     R0,R3,R0
   \   0000028E   0xF000 0x813C      BEQ.W    ??HAL_DMA_PollForTransfer_34
    547              {
    548                if(tmp != RESET)
   \   00000292   0x9802             LDR      R0,[SP, #+8]
   \   00000294   0x3034             ADDS     R0,R0,#+52
   \   00000296   0xF1BC 0x0F00      CMP      R12,#+0
   \   0000029A   0xD060             BEQ.N    ??HAL_DMA_PollForTransfer_35
    549                {
    550                  /* Update error code */
    551                  hdma->ErrorCode |= HAL_DMA_ERROR_TE;
   \   0000029C   0x6984             LDR      R4,[R0, #+24]
    552          
    553                  /* Clear the transfer error flag */
    554                  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
   \   0000029E   0x.... 0x....      LDR.W    R10,??DataTable14_6  ;; 0x40026459
   \   000002A2   0x4551             CMP      R1,R10
   \   000002A4   0xF44F 0x2900      MOV      R9,#+524288
   \   000002A8   0xF044 0x0401      ORR      R4,R4,#0x1
   \   000002AC   0xF44F 0x7600      MOV      R6,#+512
   \   000002B0   0x6184             STR      R4,[R0, #+24]
   \   000002B2   0xF04F 0x7400      MOV      R4,#+33554432
   \   000002B6   0xD312             BCC.N    ??HAL_DMA_PollForTransfer_36
   \   000002B8   0x.... 0x....      LDR.W    R10,??DataTable14_1  ;; 0x40026470
   \   000002BC   0x4551             CMP      R1,R10
   \   000002BE   0xBF08             IT       EQ 
   \   000002C0   0x2408             MOVEQ    R4,#+8
   \   000002C2   0xD00A             BEQ.N    ??HAL_DMA_PollForTransfer_37
   \   000002C4   0x.... 0x....      LDR.W    R10,??DataTable14_2  ;; 0x40026488
   \   000002C8   0x4551             CMP      R1,R10
   \   000002CA   0xBF08             IT       EQ 
   \   000002CC   0x4634             MOVEQ    R4,R6
   \   000002CE   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_37
   \   000002D0   0x.... 0x....      LDR.W    R6,??DataTable14_3  ;; 0x400264a0
   \   000002D4   0x42B1             CMP      R1,R6
   \   000002D6   0xBF08             IT       EQ 
   \   000002D8   0x464C             MOVEQ    R4,R9
   \                     ??HAL_DMA_PollForTransfer_37: (+1)
   \   000002DA   0x60FC             STR      R4,[R7, #+12]
   \   000002DC   0xE03F             B.N      ??HAL_DMA_PollForTransfer_35
   \                     ??HAL_DMA_PollForTransfer_36: (+1)
   \   000002DE   0x.... 0x....      LDR.W    R10,??DataTable14_7  ;; 0x400260b9
   \   000002E2   0x4551             CMP      R1,R10
   \   000002E4   0xD312             BCC.N    ??HAL_DMA_PollForTransfer_38
   \   000002E6   0x.... 0x....      LDR.W    R10,??DataTable2  ;; 0x40026410
   \   000002EA   0x4551             CMP      R1,R10
   \   000002EC   0xBF08             IT       EQ 
   \   000002EE   0x2408             MOVEQ    R4,#+8
   \   000002F0   0xD00A             BEQ.N    ??HAL_DMA_PollForTransfer_39
   \   000002F2   0x.... 0x....      LDR.W    R10,??DataTable3  ;; 0x40026428
   \   000002F6   0x4551             CMP      R1,R10
   \   000002F8   0xBF08             IT       EQ 
   \   000002FA   0x4634             MOVEQ    R4,R6
   \   000002FC   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_39
   \   000002FE   0x.... 0x....      LDR.W    R6,??DataTable4  ;; 0x40026440
   \   00000302   0x42B1             CMP      R1,R6
   \   00000304   0xBF08             IT       EQ 
   \   00000306   0x464C             MOVEQ    R4,R9
   \                     ??HAL_DMA_PollForTransfer_39: (+1)
   \   00000308   0x60BC             STR      R4,[R7, #+8]
   \   0000030A   0xE028             B.N      ??HAL_DMA_PollForTransfer_35
   \                     ??HAL_DMA_PollForTransfer_38: (+1)
   \   0000030C   0x.... 0x....      LDR.W    R10,??DataTable5  ;; 0x40026059
   \   00000310   0x4551             CMP      R1,R10
   \   00000312   0xD312             BCC.N    ??HAL_DMA_PollForTransfer_40
   \   00000314   0x.... 0x....      LDR.W    R10,??DataTable6  ;; 0x40026070
   \   00000318   0x4551             CMP      R1,R10
   \   0000031A   0xBF08             IT       EQ 
   \   0000031C   0x2408             MOVEQ    R4,#+8
   \   0000031E   0xD00A             BEQ.N    ??HAL_DMA_PollForTransfer_41
   \   00000320   0x.... 0x....      LDR.W    R10,??DataTable7  ;; 0x40026088
   \   00000324   0x4551             CMP      R1,R10
   \   00000326   0xBF08             IT       EQ 
   \   00000328   0x4634             MOVEQ    R4,R6
   \   0000032A   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_41
   \   0000032C   0x.... 0x....      LDR.W    R6,??DataTable8  ;; 0x400260a0
   \   00000330   0x42B1             CMP      R1,R6
   \   00000332   0xBF08             IT       EQ 
   \   00000334   0x464C             MOVEQ    R4,R9
   \                     ??HAL_DMA_PollForTransfer_41: (+1)
   \   00000336   0x60EC             STR      R4,[R5, #+12]
   \   00000338   0xE011             B.N      ??HAL_DMA_PollForTransfer_35
   \                     ??HAL_DMA_PollForTransfer_40: (+1)
   \   0000033A   0x.... 0x....      LDR.W    R10,??DataTable10  ;; 0x40026010
   \   0000033E   0x4551             CMP      R1,R10
   \   00000340   0xBF08             IT       EQ 
   \   00000342   0x2408             MOVEQ    R4,#+8
   \   00000344   0xD00A             BEQ.N    ??HAL_DMA_PollForTransfer_42
   \   00000346   0x.... 0x....      LDR.W    R10,??DataTable10_1  ;; 0x40026028
   \   0000034A   0x4551             CMP      R1,R10
   \   0000034C   0xBF08             IT       EQ 
   \   0000034E   0x4634             MOVEQ    R4,R6
   \   00000350   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_42
   \   00000352   0x.... 0x....      LDR.W    R6,??DataTable12  ;; 0x40026040
   \   00000356   0x42B1             CMP      R1,R6
   \   00000358   0xBF08             IT       EQ 
   \   0000035A   0x464C             MOVEQ    R4,R9
   \                     ??HAL_DMA_PollForTransfer_42: (+1)
   \   0000035C   0x60AC             STR      R4,[R5, #+8]
    555                }
    556                if(tmp1 != RESET)
   \                     ??HAL_DMA_PollForTransfer_35: (+1)
   \   0000035E   0x2A00             CMP      R2,#+0
   \   00000360   0xD064             BEQ.N    ??HAL_DMA_PollForTransfer_43
    557                {
    558                  /* Update error code */
    559                  hdma->ErrorCode |= HAL_DMA_ERROR_FE;
   \   00000362   0x6981             LDR      R1,[R0, #+24]
    560           
    561                  /* Clear the FIFO error flag */
    562                  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
   \   00000364   0x.... 0x....      LDR.W    R6,??DataTable14_6  ;; 0x40026459
   \   00000368   0xF44F 0x3280      MOV      R2,#+65536
   \   0000036C   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000370   0x6181             STR      R1,[R0, #+24]
   \   00000372   0x9902             LDR      R1,[SP, #+8]
   \   00000374   0x680C             LDR      R4,[R1, #+0]
   \   00000376   0xF44F 0x0180      MOV      R1,#+4194304
   \   0000037A   0x42B4             CMP      R4,R6
   \   0000037C   0xD313             BCC.N    ??HAL_DMA_PollForTransfer_44
   \   0000037E   0x.... 0x....      LDR.W    R6,??DataTable14_1  ;; 0x40026470
   \   00000382   0x42B4             CMP      R4,R6
   \   00000384   0xBF08             IT       EQ 
   \   00000386   0x.... 0x....      LDREQ.W  R1,??DataTable14  ;; 0x800001
   \   0000038A   0xD00A             BEQ.N    ??HAL_DMA_PollForTransfer_45
   \   0000038C   0x.... 0x....      LDR.W    R6,??DataTable14_2  ;; 0x40026488
   \   00000390   0x42B4             CMP      R4,R6
   \   00000392   0xBF08             IT       EQ 
   \   00000394   0x2140             MOVEQ    R1,#+64
   \   00000396   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_45
   \   00000398   0x.... 0x....      LDR.W    R6,??DataTable14_3  ;; 0x400264a0
   \   0000039C   0x42B4             CMP      R4,R6
   \   0000039E   0xBF08             IT       EQ 
   \   000003A0   0x4611             MOVEQ    R1,R2
   \                     ??HAL_DMA_PollForTransfer_45: (+1)
   \   000003A2   0x60F9             STR      R1,[R7, #+12]
   \   000003A4   0xE042             B.N      ??HAL_DMA_PollForTransfer_43
   \                     ??HAL_DMA_PollForTransfer_44: (+1)
   \   000003A6   0x.... 0x....      LDR.W    R6,??DataTable14_7  ;; 0x400260b9
   \   000003AA   0x42B4             CMP      R4,R6
   \   000003AC   0xD313             BCC.N    ??HAL_DMA_PollForTransfer_46
   \   000003AE   0x.... 0x....      LDR.W    R6,??DataTable2  ;; 0x40026410
   \   000003B2   0x42B4             CMP      R4,R6
   \   000003B4   0xBF08             IT       EQ 
   \   000003B6   0x.... 0x....      LDREQ.W  R1,??DataTable14  ;; 0x800001
   \   000003BA   0xD00A             BEQ.N    ??HAL_DMA_PollForTransfer_47
   \   000003BC   0x.... 0x....      LDR.W    R6,??DataTable3  ;; 0x40026428
   \   000003C0   0x42B4             CMP      R4,R6
   \   000003C2   0xBF08             IT       EQ 
   \   000003C4   0x2140             MOVEQ    R1,#+64
   \   000003C6   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_47
   \   000003C8   0x.... 0x....      LDR.W    R6,??DataTable4  ;; 0x40026440
   \   000003CC   0x42B4             CMP      R4,R6
   \   000003CE   0xBF08             IT       EQ 
   \   000003D0   0x4611             MOVEQ    R1,R2
   \                     ??HAL_DMA_PollForTransfer_47: (+1)
   \   000003D2   0x60B9             STR      R1,[R7, #+8]
   \   000003D4   0xE02A             B.N      ??HAL_DMA_PollForTransfer_43
   \                     ??HAL_DMA_PollForTransfer_46: (+1)
   \   000003D6   0x.... 0x....      LDR.W    R6,??DataTable5  ;; 0x40026059
   \   000003DA   0x42B4             CMP      R4,R6
   \   000003DC   0xD313             BCC.N    ??HAL_DMA_PollForTransfer_48
   \   000003DE   0x.... 0x....      LDR.W    R6,??DataTable6  ;; 0x40026070
   \   000003E2   0x42B4             CMP      R4,R6
   \   000003E4   0xBF08             IT       EQ 
   \   000003E6   0x.... 0x....      LDREQ.W  R1,??DataTable14  ;; 0x800001
   \   000003EA   0xD00A             BEQ.N    ??HAL_DMA_PollForTransfer_49
   \   000003EC   0x.... 0x....      LDR.W    R6,??DataTable7  ;; 0x40026088
   \   000003F0   0x42B4             CMP      R4,R6
   \   000003F2   0xBF08             IT       EQ 
   \   000003F4   0x2140             MOVEQ    R1,#+64
   \   000003F6   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_49
   \   000003F8   0x.... 0x....      LDR.W    R6,??DataTable8  ;; 0x400260a0
   \   000003FC   0x42B4             CMP      R4,R6
   \   000003FE   0xBF08             IT       EQ 
   \   00000400   0x4611             MOVEQ    R1,R2
   \                     ??HAL_DMA_PollForTransfer_49: (+1)
   \   00000402   0x60E9             STR      R1,[R5, #+12]
   \   00000404   0xE012             B.N      ??HAL_DMA_PollForTransfer_43
   \                     ??HAL_DMA_PollForTransfer_48: (+1)
   \   00000406   0x.... 0x....      LDR.W    R6,??DataTable10  ;; 0x40026010
   \   0000040A   0x42B4             CMP      R4,R6
   \   0000040C   0xBF08             IT       EQ 
   \   0000040E   0x.... 0x....      LDREQ.W  R1,??DataTable14  ;; 0x800001
   \   00000412   0xD00A             BEQ.N    ??HAL_DMA_PollForTransfer_50
   \   00000414   0x.... 0x....      LDR.W    R6,??DataTable10_1  ;; 0x40026028
   \   00000418   0x42B4             CMP      R4,R6
   \   0000041A   0xBF08             IT       EQ 
   \   0000041C   0x2140             MOVEQ    R1,#+64
   \   0000041E   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_50
   \   00000420   0x.... 0x....      LDR.W    R6,??DataTable12  ;; 0x40026040
   \   00000424   0x42B4             CMP      R4,R6
   \   00000426   0xBF08             IT       EQ 
   \   00000428   0x4611             MOVEQ    R1,R2
   \                     ??HAL_DMA_PollForTransfer_50: (+1)
   \   0000042A   0x60A9             STR      R1,[R5, #+8]
    563                }
    564                if(tmp2 != RESET)
   \                     ??HAL_DMA_PollForTransfer_43: (+1)
   \   0000042C   0x2B00             CMP      R3,#+0
   \   0000042E   0xD066             BEQ.N    ??HAL_DMA_PollForTransfer_51
    565                {
    566                  /* Update error code */
    567                  hdma->ErrorCode |= HAL_DMA_ERROR_DME;
   \   00000430   0x6981             LDR      R1,[R0, #+24]
    568          
    569                  /* Clear the Direct Mode error flag */
    570                  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
   \   00000432   0x.... 0x....      LDR.W    R2,??DataTable14_6  ;; 0x40026459
   \   00000436   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000043A   0x6181             STR      R1,[R0, #+24]
   \   0000043C   0x9902             LDR      R1,[SP, #+8]
   \   0000043E   0x6809             LDR      R1,[R1, #+0]
   \   00000440   0x4291             CMP      R1,R2
   \   00000442   0xD315             BCC.N    ??HAL_DMA_PollForTransfer_52
   \   00000444   0x.... 0x....      BL       ?Subroutine3
    571                }
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000448   0xBF08             IT       EQ 
   \   0000044A   0x.... 0x....      LDREQ.W  R1,??DataTable14_8  ;; 0x800004
   \   0000044E   0xD00D             BEQ.N    ??HAL_DMA_PollForTransfer_53
   \   00000450   0x.... 0x....      LDR.W    R2,??DataTable14_2  ;; 0x40026488
   \   00000454   0x4291             CMP      R1,R2
   \   00000456   0xBF08             IT       EQ 
   \   00000458   0xF44F 0x7180      MOVEQ    R1,#+256
   \   0000045C   0xD006             BEQ.N    ??HAL_DMA_PollForTransfer_53
   \   0000045E   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_16: (+1)
   \   00000462   0xBF0C             ITE      EQ 
   \   00000464   0xF44F 0x2180      MOVEQ    R1,#+262144
   \   00000468   0xF04F 0x7180      MOVNE    R1,#+16777216
   \                     ??HAL_DMA_PollForTransfer_53: (+1)
   \   0000046C   0x60F9             STR      R1,[R7, #+12]
   \   0000046E   0xE046             B.N      ??HAL_DMA_PollForTransfer_51
   \                     ??HAL_DMA_PollForTransfer_52: (+1)
   \   00000470   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_82: (+1)
   \   00000474   0xD315             BCC.N    ??HAL_DMA_PollForTransfer_54
   \   00000476   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_43: (+1)
   \   0000047A   0xBF08             IT       EQ 
   \   0000047C   0x.... 0x....      LDREQ.W  R1,??DataTable14_8  ;; 0x800004
   \   00000480   0xD00D             BEQ.N    ??HAL_DMA_PollForTransfer_55
   \   00000482   0x.... 0x....      LDR.W    R2,??DataTable3  ;; 0x40026428
   \   00000486   0x4291             CMP      R1,R2
   \   00000488   0xBF08             IT       EQ 
   \   0000048A   0xF44F 0x7180      MOVEQ    R1,#+256
   \   0000048E   0xD006             BEQ.N    ??HAL_DMA_PollForTransfer_55
   \   00000490   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_24: (+1)
   \   00000494   0xBF0C             ITE      EQ 
   \   00000496   0xF44F 0x2180      MOVEQ    R1,#+262144
   \   0000049A   0xF04F 0x7180      MOVNE    R1,#+16777216
   \                     ??HAL_DMA_PollForTransfer_55: (+1)
   \   0000049E   0x60B9             STR      R1,[R7, #+8]
   \   000004A0   0xE02D             B.N      ??HAL_DMA_PollForTransfer_51
   \                     ??HAL_DMA_PollForTransfer_54: (+1)
   \   000004A2   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_89: (+1)
   \   000004A6   0xD315             BCC.N    ??HAL_DMA_PollForTransfer_56
   \   000004A8   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_50: (+1)
   \   000004AC   0xBF08             IT       EQ 
   \   000004AE   0x.... 0x....      LDREQ.W  R1,??DataTable14_8  ;; 0x800004
   \   000004B2   0xD00D             BEQ.N    ??HAL_DMA_PollForTransfer_57
   \   000004B4   0x.... 0x....      LDR.W    R2,??DataTable7  ;; 0x40026088
   \   000004B8   0x4291             CMP      R1,R2
   \   000004BA   0xBF08             IT       EQ 
   \   000004BC   0xF44F 0x7180      MOVEQ    R1,#+256
   \   000004C0   0xD006             BEQ.N    ??HAL_DMA_PollForTransfer_57
   \   000004C2   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_58: (+1)
   \   000004C6   0xBF0C             ITE      EQ 
   \   000004C8   0xF44F 0x2180      MOVEQ    R1,#+262144
   \   000004CC   0xF04F 0x7180      MOVNE    R1,#+16777216
   \                     ??HAL_DMA_PollForTransfer_57: (+1)
   \   000004D0   0x60E9             STR      R1,[R5, #+12]
   \   000004D2   0xE014             B.N      ??HAL_DMA_PollForTransfer_51
   \                     ??HAL_DMA_PollForTransfer_56: (+1)
   \   000004D4   0x.... 0x....      BL       ?Subroutine14
   \                     ??CrossCallReturnLabel_73: (+1)
   \   000004D8   0xBF08             IT       EQ 
   \   000004DA   0x.... 0x....      LDREQ.W  R1,??DataTable14_8  ;; 0x800004
   \   000004DE   0xD00D             BEQ.N    ??HAL_DMA_PollForTransfer_58
   \   000004E0   0x.... 0x....      LDR.W    R2,??DataTable10_1  ;; 0x40026028
   \   000004E4   0x4291             CMP      R1,R2
   \   000004E6   0xBF08             IT       EQ 
   \   000004E8   0xF44F 0x7180      MOVEQ    R1,#+256
   \   000004EC   0xD006             BEQ.N    ??HAL_DMA_PollForTransfer_58
   \   000004EE   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_66: (+1)
   \   000004F2   0xBF0C             ITE      EQ 
   \   000004F4   0xF44F 0x2180      MOVEQ    R1,#+262144
   \   000004F8   0xF04F 0x7180      MOVNE    R1,#+16777216
   \                     ??HAL_DMA_PollForTransfer_58: (+1)
   \   000004FC   0x60A9             STR      R1,[R5, #+8]
    572                /* Change the DMA state */
    573                hdma->State= HAL_DMA_STATE_ERROR;
   \                     ??HAL_DMA_PollForTransfer_51: (+1)
   \   000004FE   0x2104             MOVS     R1,#+4
   \   00000500   0x7041             STRB     R1,[R0, #+1]
    574                
    575                /* Process Unlocked */
    576                __HAL_UNLOCK(hdma);
   \   00000502   0x2100             MOVS     R1,#+0
   \   00000504   0x7001             STRB     R1,[R0, #+0]
    577          
    578                return HAL_ERROR;
   \   00000506   0x2001             MOVS     R0,#+1
   \   00000508   0xE1C3             B.N      ??HAL_DMA_PollForTransfer_59
    579              }  
    580              /* Check for the Timeout */
    581              if(Timeout != HAL_MAX_DELAY)
   \                     ??HAL_DMA_PollForTransfer_34: (+1)
   \   0000050A   0x9804             LDR      R0,[SP, #+16]
   \   0000050C   0xF110 0x0F01      CMN      R0,#+1
   \   00000510   0xF43F 0xAE01      BEQ.W    ??HAL_DMA_PollForTransfer_15
    582              {
    583                if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
   \   00000514   0xB138             CBZ.N    R0,??HAL_DMA_PollForTransfer_60
   \   00000516   0x.... 0x....      BL       HAL_GetTick
   \   0000051A   0x9901             LDR      R1,[SP, #+4]
   \   0000051C   0x1A40             SUBS     R0,R0,R1
   \   0000051E   0x9904             LDR      R1,[SP, #+16]
   \   00000520   0x4281             CMP      R1,R0
   \   00000522   0xF4BF 0xADF8      BCS.W    ??HAL_DMA_PollForTransfer_15
    584                {
    585                  /* Update error code */
    586                  hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
   \                     ??HAL_DMA_PollForTransfer_60: (+1)
   \   00000526   0x9802             LDR      R0,[SP, #+8]
   \   00000528   0x3034             ADDS     R0,R0,#+52
   \   0000052A   0x6981             LDR      R1,[R0, #+24]
   \   0000052C   0xF041 0x0120      ORR      R1,R1,#0x20
   \   00000530   0x6181             STR      R1,[R0, #+24]
    587          
    588                  /* Change the DMA state */
    589                  hdma->State = HAL_DMA_STATE_TIMEOUT;
   \   00000532   0x2103             MOVS     R1,#+3
   \   00000534   0x7041             STRB     R1,[R0, #+1]
    590          
    591                  /* Process Unlocked */
    592                  __HAL_UNLOCK(hdma);
   \   00000536   0x2100             MOVS     R1,#+0
   \   00000538   0x7001             STRB     R1,[R0, #+0]
    593                  
    594                  return HAL_TIMEOUT;
   \   0000053A   0x2003             MOVS     R0,#+3
   \   0000053C   0xE1A9             B.N      ??HAL_DMA_PollForTransfer_59
    595                }
    596              }
    597            }
    598          
    599            if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
   \                     ??HAL_DMA_PollForTransfer_17: (+1)
   \   0000053E   0x9802             LDR      R0,[SP, #+8]
   \   00000540   0x9B03             LDR      R3,[SP, #+12]
   \   00000542   0x6812             LDR      R2,[R2, #+0]
   \   00000544   0x3034             ADDS     R0,R0,#+52
   \   00000546   0x2B00             CMP      R3,#+0
   \   00000548   0xF040 0x8115      BNE.W    ??HAL_DMA_PollForTransfer_61
    600            {
    601              /* Multi_Buffering mode enabled */
    602              if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
   \   0000054C   0x0352             LSLS     R2,R2,#+13
   \   0000054E   0x.... 0x....      LDR.W    R2,??DataTable14_6  ;; 0x40026459
   \   00000552   0xF140 0x808C      BPL.W    ??HAL_DMA_PollForTransfer_62
    603              {
    604                /* Clear the half transfer complete flag */
    605                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \   00000556   0x4291             CMP      R1,R2
   \   00000558   0xD30E             BCC.N    ??HAL_DMA_PollForTransfer_63
   \   0000055A   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_5: (+1)
   \   0000055E   0xBF0E             ITEE     EQ 
   \   00000560   0x2410             MOVEQ    R4,#+16
   \   00000562   0x.... 0x....      LDRNE.W  R2,??DataTable14_2  ;; 0x40026488
   \   00000566   0x4291             CMPNE    R1,R2
   \   00000568   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_64
   \   0000056A   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_17: (+1)
   \   0000056E   0xBF0C             ITE      EQ 
   \   00000570   0x465C             MOVEQ    R4,R11
   \   00000572   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_64: (+1)
   \   00000574   0x60FC             STR      R4,[R7, #+12]
   \   00000576   0xE02E             B.N      ??HAL_DMA_PollForTransfer_65
   \                     ??HAL_DMA_PollForTransfer_63: (+1)
   \   00000578   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_83: (+1)
   \   0000057C   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_66
   \   0000057E   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_44: (+1)
   \   00000582   0xBF0E             ITEE     EQ 
   \   00000584   0x2410             MOVEQ    R4,#+16
   \   00000586   0x....             LDRNE.N  R2,??DataTable3  ;; 0x40026428
   \   00000588   0x4291             CMPNE    R1,R2
   \   0000058A   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_67
   \   0000058C   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_25: (+1)
   \   00000590   0xBF0C             ITE      EQ 
   \   00000592   0x465C             MOVEQ    R4,R11
   \   00000594   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_67: (+1)
   \   00000596   0x60BC             STR      R4,[R7, #+8]
   \   00000598   0xE01D             B.N      ??HAL_DMA_PollForTransfer_65
   \                     ??HAL_DMA_PollForTransfer_66: (+1)
   \   0000059A   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_90: (+1)
   \   0000059E   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_68
   \   000005A0   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_51: (+1)
   \   000005A4   0xBF0E             ITEE     EQ 
   \   000005A6   0x2410             MOVEQ    R4,#+16
   \   000005A8   0x....             LDRNE.N  R2,??DataTable7  ;; 0x40026088
   \   000005AA   0x4291             CMPNE    R1,R2
   \   000005AC   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_69
   \   000005AE   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_59: (+1)
   \   000005B2   0xBF0C             ITE      EQ 
   \   000005B4   0x465C             MOVEQ    R4,R11
   \   000005B6   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_69: (+1)
   \   000005B8   0x60EC             STR      R4,[R5, #+12]
   \   000005BA   0xE00C             B.N      ??HAL_DMA_PollForTransfer_65
   \                     ??HAL_DMA_PollForTransfer_68: (+1)
   \   000005BC   0x.... 0x....      BL       ?Subroutine14
   \                     ??CrossCallReturnLabel_74: (+1)
   \   000005C0   0xBF0E             ITEE     EQ 
   \   000005C2   0x2410             MOVEQ    R4,#+16
   \   000005C4   0x....             LDRNE.N  R2,??DataTable10_1  ;; 0x40026028
   \   000005C6   0x4291             CMPNE    R1,R2
   \   000005C8   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_70
   \   000005CA   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_67: (+1)
   \   000005CE   0xBF0C             ITE      EQ 
   \   000005D0   0x465C             MOVEQ    R4,R11
   \   000005D2   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_70: (+1)
   \   000005D4   0x60AC             STR      R4,[R5, #+8]
    606                /* Clear the transfer complete flag */
    607                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_PollForTransfer_65: (+1)
   \   000005D6   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_80: (+1)
   \   000005DA   0xD30E             BCC.N    ??HAL_DMA_PollForTransfer_71
   \   000005DC   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_6: (+1)
   \   000005E0   0xBF0E             ITEE     EQ 
   \   000005E2   0x2620             MOVEQ    R6,#+32
   \   000005E4   0x.... 0x....      LDRNE.W  R2,??DataTable14_2  ;; 0x40026488
   \   000005E8   0x4291             CMPNE    R1,R2
   \   000005EA   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_72
   \   000005EC   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_18: (+1)
   \   000005F0   0xBF0C             ITE      EQ 
   \   000005F2   0x4646             MOVEQ    R6,R8
   \   000005F4   0x4656             MOVNE    R6,R10
   \                     ??HAL_DMA_PollForTransfer_72: (+1)
   \   000005F6   0x60FE             STR      R6,[R7, #+12]
   \   000005F8   0xE02E             B.N      ??HAL_DMA_PollForTransfer_73
   \                     ??HAL_DMA_PollForTransfer_71: (+1)
   \   000005FA   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_84: (+1)
   \   000005FE   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_74
   \   00000600   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_45: (+1)
   \   00000604   0xBF0E             ITEE     EQ 
   \   00000606   0x2620             MOVEQ    R6,#+32
   \   00000608   0x....             LDRNE.N  R2,??DataTable3  ;; 0x40026428
   \   0000060A   0x4291             CMPNE    R1,R2
   \   0000060C   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_75
   \   0000060E   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_26: (+1)
   \   00000612   0xBF0C             ITE      EQ 
   \   00000614   0x4646             MOVEQ    R6,R8
   \   00000616   0x4656             MOVNE    R6,R10
   \                     ??HAL_DMA_PollForTransfer_75: (+1)
   \   00000618   0x60BE             STR      R6,[R7, #+8]
   \   0000061A   0xE01D             B.N      ??HAL_DMA_PollForTransfer_73
   \                     ??HAL_DMA_PollForTransfer_74: (+1)
   \   0000061C   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_91: (+1)
   \   00000620   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_76
   \   00000622   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_52: (+1)
   \   00000626   0xBF0E             ITEE     EQ 
   \   00000628   0x2620             MOVEQ    R6,#+32
   \   0000062A   0x....             LDRNE.N  R2,??DataTable7  ;; 0x40026088
   \   0000062C   0x4291             CMPNE    R1,R2
   \   0000062E   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_77
   \   00000630   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_60: (+1)
   \   00000634   0xBF0C             ITE      EQ 
   \   00000636   0x4646             MOVEQ    R6,R8
   \   00000638   0x4656             MOVNE    R6,R10
   \                     ??HAL_DMA_PollForTransfer_77: (+1)
   \   0000063A   0x60EE             STR      R6,[R5, #+12]
   \   0000063C   0xE00C             B.N      ??HAL_DMA_PollForTransfer_73
   \                     ??HAL_DMA_PollForTransfer_76: (+1)
   \   0000063E   0x.... 0x....      BL       ?Subroutine14
   \                     ??CrossCallReturnLabel_75: (+1)
   \   00000642   0xBF0E             ITEE     EQ 
   \   00000644   0x2620             MOVEQ    R6,#+32
   \   00000646   0x....             LDRNE.N  R2,??DataTable10_1  ;; 0x40026028
   \   00000648   0x4291             CMPNE    R1,R2
   \   0000064A   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_78
   \   0000064C   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_68: (+1)
   \   00000650   0xBF0C             ITE      EQ 
   \   00000652   0x4646             MOVEQ    R6,R8
   \   00000654   0x4656             MOVNE    R6,R10
   \                     ??HAL_DMA_PollForTransfer_78: (+1)
   \   00000656   0x60AE             STR      R6,[R5, #+8]
    608          
    609                /* Current memory buffer used is Memory 0 */
    610                if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
   \                     ??HAL_DMA_PollForTransfer_73: (+1)
   \   00000658   0x9902             LDR      R1,[SP, #+8]
   \   0000065A   0x6809             LDR      R1,[R1, #+0]
   \   0000065C   0x680A             LDR      R2,[R1, #+0]
   \   0000065E   0x0312             LSLS     R2,R2,#+12
   \   00000660   0xD554             BPL.N    ??HAL_DMA_PollForTransfer_79
    611                {
    612                  /* Change DMA peripheral state */
    613                  hdma->State = HAL_DMA_STATE_READY_MEM0;
    614                }
    615                /* Current memory buffer used is Memory 1 */
    616                else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
   \   00000662   0x6809             LDR      R1,[R1, #+0]
   \   00000664   0x0309             LSLS     R1,R1,#+12
   \   00000666   0xF140 0x8083      BPL.W    ??HAL_DMA_PollForTransfer_80
    617                {
    618                  /* Change DMA peripheral state */
    619                  hdma->State = HAL_DMA_STATE_READY_MEM1;
   \   0000066A   0x2121             MOVS     R1,#+33
   \   0000066C   0xE07F             B.N      ??HAL_DMA_PollForTransfer_81
    620                }
    621              }
    622              else
    623              {
    624                /* Clear the half transfer complete flag */
    625                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_PollForTransfer_62: (+1)
   \   0000066E   0x4291             CMP      R1,R2
   \   00000670   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_82
   \   00000672   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_7: (+1)
   \   00000676   0xBF0E             ITEE     EQ 
   \   00000678   0x2410             MOVEQ    R4,#+16
   \   0000067A   0x....             LDRNE.N  R2,??DataTable14_2  ;; 0x40026488
   \   0000067C   0x4291             CMPNE    R1,R2
   \   0000067E   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_83
   \   00000680   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_19: (+1)
   \   00000684   0xBF0C             ITE      EQ 
   \   00000686   0x465C             MOVEQ    R4,R11
   \   00000688   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_83: (+1)
   \   0000068A   0x60FC             STR      R4,[R7, #+12]
   \   0000068C   0xE02E             B.N      ??HAL_DMA_PollForTransfer_84
   \                     ??HAL_DMA_PollForTransfer_82: (+1)
   \   0000068E   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_85: (+1)
   \   00000692   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_85
   \   00000694   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_46: (+1)
   \   00000698   0xBF0E             ITEE     EQ 
   \   0000069A   0x2410             MOVEQ    R4,#+16
   \   0000069C   0x....             LDRNE.N  R2,??DataTable3  ;; 0x40026428
   \   0000069E   0x4291             CMPNE    R1,R2
   \   000006A0   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_86
   \   000006A2   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_27: (+1)
   \   000006A6   0xBF0C             ITE      EQ 
   \   000006A8   0x465C             MOVEQ    R4,R11
   \   000006AA   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_86: (+1)
   \   000006AC   0x60BC             STR      R4,[R7, #+8]
   \   000006AE   0xE01D             B.N      ??HAL_DMA_PollForTransfer_84
   \                     ??HAL_DMA_PollForTransfer_85: (+1)
   \   000006B0   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_92: (+1)
   \   000006B4   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_87
   \   000006B6   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_53: (+1)
   \   000006BA   0xBF0E             ITEE     EQ 
   \   000006BC   0x2410             MOVEQ    R4,#+16
   \   000006BE   0x....             LDRNE.N  R2,??DataTable7  ;; 0x40026088
   \   000006C0   0x4291             CMPNE    R1,R2
   \   000006C2   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_88
   \   000006C4   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_61: (+1)
   \   000006C8   0xBF0C             ITE      EQ 
   \   000006CA   0x465C             MOVEQ    R4,R11
   \   000006CC   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_88: (+1)
   \   000006CE   0x60EC             STR      R4,[R5, #+12]
   \   000006D0   0xE00C             B.N      ??HAL_DMA_PollForTransfer_84
   \                     ??HAL_DMA_PollForTransfer_87: (+1)
   \   000006D2   0x.... 0x....      BL       ?Subroutine14
   \                     ??CrossCallReturnLabel_76: (+1)
   \   000006D6   0xBF0E             ITEE     EQ 
   \   000006D8   0x2410             MOVEQ    R4,#+16
   \   000006DA   0x....             LDRNE.N  R2,??DataTable10_1  ;; 0x40026028
   \   000006DC   0x4291             CMPNE    R1,R2
   \   000006DE   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_89
   \   000006E0   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_69: (+1)
   \   000006E4   0xBF0C             ITE      EQ 
   \   000006E6   0x465C             MOVEQ    R4,R11
   \   000006E8   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_89: (+1)
   \   000006EA   0x60AC             STR      R4,[R5, #+8]
    626                /* Clear the transfer complete flag */
    627                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)); 
   \                     ??HAL_DMA_PollForTransfer_84: (+1)
   \   000006EC   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_81: (+1)
   \   000006F0   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_90
   \   000006F2   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_8: (+1)
   \   000006F6   0xBF0E             ITEE     EQ 
   \   000006F8   0x2620             MOVEQ    R6,#+32
   \   000006FA   0x....             LDRNE.N  R2,??DataTable14_2  ;; 0x40026488
   \   000006FC   0x4291             CMPNE    R1,R2
   \   000006FE   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_91
   \   00000700   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_20: (+1)
   \   00000704   0xBF0C             ITE      EQ 
   \   00000706   0x4646             MOVEQ    R6,R8
   \   00000708   0x4656             MOVNE    R6,R10
   \                     ??HAL_DMA_PollForTransfer_91: (+1)
   \   0000070A   0x60FE             STR      R6,[R7, #+12]
   \                     ??HAL_DMA_PollForTransfer_79: (+1)
   \   0000070C   0xE02E             B.N      ??HAL_DMA_PollForTransfer_92
   \                     ??HAL_DMA_PollForTransfer_90: (+1)
   \   0000070E   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_86: (+1)
   \   00000712   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_93
   \   00000714   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_47: (+1)
   \   00000718   0xBF0E             ITEE     EQ 
   \   0000071A   0x2620             MOVEQ    R6,#+32
   \   0000071C   0x....             LDRNE.N  R2,??DataTable3  ;; 0x40026428
   \   0000071E   0x4291             CMPNE    R1,R2
   \   00000720   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_94
   \   00000722   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_28: (+1)
   \   00000726   0xBF0C             ITE      EQ 
   \   00000728   0x4646             MOVEQ    R6,R8
   \   0000072A   0x4656             MOVNE    R6,R10
   \                     ??HAL_DMA_PollForTransfer_94: (+1)
   \   0000072C   0x60BE             STR      R6,[R7, #+8]
   \   0000072E   0xE01D             B.N      ??HAL_DMA_PollForTransfer_92
   \                     ??HAL_DMA_PollForTransfer_93: (+1)
   \   00000730   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_93: (+1)
   \   00000734   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_95
   \   00000736   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_54: (+1)
   \   0000073A   0xBF0E             ITEE     EQ 
   \   0000073C   0x2620             MOVEQ    R6,#+32
   \   0000073E   0x....             LDRNE.N  R2,??DataTable7  ;; 0x40026088
   \   00000740   0x4291             CMPNE    R1,R2
   \   00000742   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_96
   \   00000744   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_62: (+1)
   \   00000748   0xBF0C             ITE      EQ 
   \   0000074A   0x4646             MOVEQ    R6,R8
   \   0000074C   0x4656             MOVNE    R6,R10
   \                     ??HAL_DMA_PollForTransfer_96: (+1)
   \   0000074E   0x60EE             STR      R6,[R5, #+12]
   \   00000750   0xE00C             B.N      ??HAL_DMA_PollForTransfer_92
   \                     ??HAL_DMA_PollForTransfer_95: (+1)
   \   00000752   0x.... 0x....      BL       ?Subroutine14
   \                     ??CrossCallReturnLabel_77: (+1)
   \   00000756   0xBF0E             ITEE     EQ 
   \   00000758   0x2620             MOVEQ    R6,#+32
   \   0000075A   0x....             LDRNE.N  R2,??DataTable10_1  ;; 0x40026028
   \   0000075C   0x4291             CMPNE    R1,R2
   \   0000075E   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_97
   \   00000760   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_70: (+1)
   \   00000764   0xBF0C             ITE      EQ 
   \   00000766   0x4646             MOVEQ    R6,R8
   \   00000768   0x4656             MOVNE    R6,R10
   \                     ??HAL_DMA_PollForTransfer_97: (+1)
   \   0000076A   0x60AE             STR      R6,[R5, #+8]
    628          
    629                /* The selected Streamx EN bit is cleared (DMA is disabled and all transfers
    630                   are complete) */
    631                hdma->State = HAL_DMA_STATE_READY_MEM0;
   \                     ??HAL_DMA_PollForTransfer_92: (+1)
   \   0000076C   0x2111             MOVS     R1,#+17
   \                     ??HAL_DMA_PollForTransfer_81: (+1)
   \   0000076E   0x7041             STRB     R1,[R0, #+1]
    632              }
    633              /* Process Unlocked */
    634              __HAL_UNLOCK(hdma);
   \                     ??HAL_DMA_PollForTransfer_80: (+1)
   \   00000770   0x2100             MOVS     R1,#+0
   \   00000772   0x7001             STRB     R1,[R0, #+0]
   \   00000774   0xE08C             B.N      ??HAL_DMA_PollForTransfer_98
    635            }
    636            else
    637            { 
    638              /* Multi_Buffering mode enabled */
    639              if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
   \                     ??HAL_DMA_PollForTransfer_61: (+1)
   \   00000776   0x0352             LSLS     R2,R2,#+13
   \   00000778   0x....             LDR.N    R2,??DataTable14_6  ;; 0x40026459
   \   0000077A   0xD548             BPL.N    ??HAL_DMA_PollForTransfer_99
    640              {
    641                /* Clear the half transfer complete flag */
    642                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \   0000077C   0x4291             CMP      R1,R2
   \   0000077E   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_100
   \   00000780   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_9: (+1)
   \   00000784   0xBF0E             ITEE     EQ 
   \   00000786   0x2410             MOVEQ    R4,#+16
   \   00000788   0x....             LDRNE.N  R2,??DataTable14_2  ;; 0x40026488
   \   0000078A   0x4291             CMPNE    R1,R2
   \   0000078C   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_101
   \   0000078E   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_21: (+1)
   \   00000792   0xBF0C             ITE      EQ 
   \   00000794   0x465C             MOVEQ    R4,R11
   \   00000796   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_101: (+1)
   \   00000798   0x60FC             STR      R4,[R7, #+12]
   \   0000079A   0xE02E             B.N      ??HAL_DMA_PollForTransfer_102
   \                     ??HAL_DMA_PollForTransfer_100: (+1)
   \   0000079C   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_87: (+1)
   \   000007A0   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_103
   \   000007A2   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_48: (+1)
   \   000007A6   0xBF0E             ITEE     EQ 
   \   000007A8   0x2410             MOVEQ    R4,#+16
   \   000007AA   0x....             LDRNE.N  R2,??DataTable3  ;; 0x40026428
   \   000007AC   0x4291             CMPNE    R1,R2
   \   000007AE   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_104
   \   000007B0   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_29: (+1)
   \   000007B4   0xBF0C             ITE      EQ 
   \   000007B6   0x465C             MOVEQ    R4,R11
   \   000007B8   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_104: (+1)
   \   000007BA   0x60BC             STR      R4,[R7, #+8]
   \   000007BC   0xE01D             B.N      ??HAL_DMA_PollForTransfer_102
   \                     ??HAL_DMA_PollForTransfer_103: (+1)
   \   000007BE   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_94: (+1)
   \   000007C2   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_105
   \   000007C4   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_55: (+1)
   \   000007C8   0xBF0E             ITEE     EQ 
   \   000007CA   0x2410             MOVEQ    R4,#+16
   \   000007CC   0x....             LDRNE.N  R2,??DataTable7  ;; 0x40026088
   \   000007CE   0x4291             CMPNE    R1,R2
   \   000007D0   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_106
   \   000007D2   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_63: (+1)
   \   000007D6   0xBF0C             ITE      EQ 
   \   000007D8   0x465C             MOVEQ    R4,R11
   \   000007DA   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_106: (+1)
   \   000007DC   0x60EC             STR      R4,[R5, #+12]
   \   000007DE   0xE00C             B.N      ??HAL_DMA_PollForTransfer_102
   \                     ??HAL_DMA_PollForTransfer_105: (+1)
   \   000007E0   0x.... 0x....      BL       ?Subroutine14
   \                     ??CrossCallReturnLabel_78: (+1)
   \   000007E4   0xBF0E             ITEE     EQ 
   \   000007E6   0x2410             MOVEQ    R4,#+16
   \   000007E8   0x....             LDRNE.N  R2,??DataTable10_1  ;; 0x40026028
   \   000007EA   0x4291             CMPNE    R1,R2
   \   000007EC   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_107
   \   000007EE   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_71: (+1)
   \   000007F2   0xBF0C             ITE      EQ 
   \   000007F4   0x465C             MOVEQ    R4,R11
   \   000007F6   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_107: (+1)
   \   000007F8   0x60AC             STR      R4,[R5, #+8]
    643          
    644                /* Current memory buffer used is Memory 0 */
    645                if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
   \                     ??HAL_DMA_PollForTransfer_102: (+1)
   \   000007FA   0x9902             LDR      R1,[SP, #+8]
   \   000007FC   0x6809             LDR      R1,[R1, #+0]
   \   000007FE   0x680A             LDR      R2,[R1, #+0]
   \   00000800   0x0312             LSLS     R2,R2,#+12
   \   00000802   0xD543             BPL.N    ??HAL_DMA_PollForTransfer_108
    646                {
    647                  /* Change DMA peripheral state */
    648                  hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
    649                }
    650                /* Current memory buffer used is Memory 1 */
    651                else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
   \   00000804   0x6809             LDR      R1,[R1, #+0]
   \   00000806   0x0309             LSLS     R1,R1,#+12
   \   00000808   0xD542             BPL.N    ??HAL_DMA_PollForTransfer_98
    652                {
    653                  /* Change DMA peripheral state */
    654                  hdma->State = HAL_DMA_STATE_READY_HALF_MEM1;
   \   0000080A   0x2141             MOVS     R1,#+65
   \   0000080C   0xE03F             B.N      ??HAL_DMA_PollForTransfer_109
    655                }
    656              }
    657              else
    658              {
    659                /* Clear the half transfer complete flag */
    660                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_PollForTransfer_99: (+1)
   \   0000080E   0x4291             CMP      R1,R2
   \   00000810   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_110
   \   00000812   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_10: (+1)
   \   00000816   0xBF0E             ITEE     EQ 
   \   00000818   0x2410             MOVEQ    R4,#+16
   \   0000081A   0x....             LDRNE.N  R2,??DataTable14_2  ;; 0x40026488
   \   0000081C   0x4291             CMPNE    R1,R2
   \   0000081E   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_111
   \   00000820   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_22: (+1)
   \   00000824   0xBF0C             ITE      EQ 
   \   00000826   0x465C             MOVEQ    R4,R11
   \   00000828   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_111: (+1)
   \   0000082A   0x60FC             STR      R4,[R7, #+12]
   \   0000082C   0xE02E             B.N      ??HAL_DMA_PollForTransfer_108
   \                     ??HAL_DMA_PollForTransfer_110: (+1)
   \   0000082E   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_88: (+1)
   \   00000832   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_112
   \   00000834   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_49: (+1)
   \   00000838   0xBF0E             ITEE     EQ 
   \   0000083A   0x2410             MOVEQ    R4,#+16
   \   0000083C   0x....             LDRNE.N  R2,??DataTable3  ;; 0x40026428
   \   0000083E   0x4291             CMPNE    R1,R2
   \   00000840   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_113
   \   00000842   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_30: (+1)
   \   00000846   0xBF0C             ITE      EQ 
   \   00000848   0x465C             MOVEQ    R4,R11
   \   0000084A   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_113: (+1)
   \   0000084C   0x60BC             STR      R4,[R7, #+8]
   \   0000084E   0xE01D             B.N      ??HAL_DMA_PollForTransfer_108
   \                     ??HAL_DMA_PollForTransfer_112: (+1)
   \   00000850   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_95: (+1)
   \   00000854   0xD30D             BCC.N    ??HAL_DMA_PollForTransfer_114
   \   00000856   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_56: (+1)
   \   0000085A   0xBF0E             ITEE     EQ 
   \   0000085C   0x2410             MOVEQ    R4,#+16
   \   0000085E   0x....             LDRNE.N  R2,??DataTable7  ;; 0x40026088
   \   00000860   0x4291             CMPNE    R1,R2
   \   00000862   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_115
   \   00000864   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_64: (+1)
   \   00000868   0xBF0C             ITE      EQ 
   \   0000086A   0x465C             MOVEQ    R4,R11
   \   0000086C   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_115: (+1)
   \   0000086E   0x60EC             STR      R4,[R5, #+12]
   \   00000870   0xE00C             B.N      ??HAL_DMA_PollForTransfer_108
   \                     ??HAL_DMA_PollForTransfer_114: (+1)
   \   00000872   0x.... 0x....      BL       ?Subroutine14
   \                     ??CrossCallReturnLabel_79: (+1)
   \   00000876   0xBF0E             ITEE     EQ 
   \   00000878   0x2410             MOVEQ    R4,#+16
   \   0000087A   0x....             LDRNE.N  R2,??DataTable10_1  ;; 0x40026028
   \   0000087C   0x4291             CMPNE    R1,R2
   \   0000087E   0xD004             BEQ.N    ??HAL_DMA_PollForTransfer_116
   \   00000880   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_72: (+1)
   \   00000884   0xBF0C             ITE      EQ 
   \   00000886   0x465C             MOVEQ    R4,R11
   \   00000888   0x464C             MOVNE    R4,R9
   \                     ??HAL_DMA_PollForTransfer_116: (+1)
   \   0000088A   0x60AC             STR      R4,[R5, #+8]
    661          
    662                /* Change DMA peripheral state */
    663                hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
   \                     ??HAL_DMA_PollForTransfer_108: (+1)
   \   0000088C   0x2131             MOVS     R1,#+49
   \                     ??HAL_DMA_PollForTransfer_109: (+1)
   \   0000088E   0x7041             STRB     R1,[R0, #+1]
    664              }
    665            }
    666            return HAL_OK;
   \                     ??HAL_DMA_PollForTransfer_98: (+1)
   \   00000890   0x2000             MOVS     R0,#+0
   \                     ??HAL_DMA_PollForTransfer_59: (+1)
   \   00000892   0xB005             ADD      SP,SP,#+20
   \   00000894   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    667          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine17: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable5  ;; 0x40026059
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine16: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable14_7  ;; 0x400260b9
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15: (+1)
   \   00000000   0x9902             LDR      R1,[SP, #+8]
   \   00000002   0x....             LDR.N    R2,??DataTable14_6  ;; 0x40026459
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x4291             CMP      R1,R2
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable10  ;; 0x40026010
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable12  ;; 0x40026040
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable8  ;; 0x400260a0
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable15  ;; 0x40026070
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable15_1  ;; 0x40026410
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9: (+1)
   \   00000000   0xF04F 0x7380      MOV      R3,#+16777216
   \   00000004   0xF400 0x0280      AND      R2,R0,#0x400000
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \   00000000   0xF44F 0x2380      MOV      R3,#+262144
   \   00000004   0xF400 0x3280      AND      R2,R0,#0x10000
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0xF44F 0x7380      MOV      R3,#+256
   \   00000004   0xF000 0x0240      AND      R2,R0,#0x40
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable15_2  ;; 0x40026440
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable14_3  ;; 0x400264a0
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable14  ;; 0x800001
   \   00000002   0x....             LDR.N    R3,??DataTable14_8  ;; 0x800004
   \   00000004   0x4002             ANDS     R2,R2,R0
   \   00000006   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable14_1  ;; 0x40026470
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0x4770             BX       LR
    668          
    669          /**
    670            * @brief  Handles DMA interrupt request.
    671            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
    672            *               the configuration information for the specified DMA Stream.  
    673            * @retval None
    674            */

   \                                 In section .text, align 2, keep-with-next
    675          void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
    676          {
   \                     HAL_DMA_IRQHandler: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
    677            /* Transfer Error Interrupt management ***************************************/
    678            if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
   \   00000006   0x.... 0x....      LDR.W    R9,??DataTable15_3  ;; 0x40026459
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable15_4  ;; 0x40026000
   \   0000000E   0x.... 0x....      LDR.W    R6,??DataTable15_5  ;; 0x40026400
   \   00000012   0x6823             LDR      R3,[R4, #+0]
   \   00000014   0xF04F 0x7000      MOV      R0,#+33554432
   \   00000018   0xF44F 0x2100      MOV      R1,#+524288
   \   0000001C   0xF44F 0x7200      MOV      R2,#+512
   \   00000020   0x454B             CMP      R3,R9
   \   00000022   0x.... 0x....      LDR.W    R10,??DataTable15_6  ;; 0x40026488
   \   00000026   0x.... 0x....      LDR.W    R8,??DataTable15_7  ;; 0x40026470
   \   0000002A   0xD311             BCC.N    ??HAL_DMA_IRQHandler_0
   \   0000002C   0x4543             CMP      R3,R8
   \   0000002E   0xF8D6 0xE004      LDR      LR,[R6, #+4]
   \   00000032   0xBF08             IT       EQ 
   \   00000034   0xF04F 0x0C08      MOVEQ    R12,#+8
   \   00000038   0xD053             BEQ.N    ??HAL_DMA_IRQHandler_1
   \   0000003A   0x4553             CMP      R3,R10
   \   0000003C   0xBF08             IT       EQ 
   \   0000003E   0x4694             MOVEQ    R12,R2
   \   00000040   0xD04F             BEQ.N    ??HAL_DMA_IRQHandler_1
   \   00000042   0x.... 0x....      LDR.W    R7,??DataTable15_8  ;; 0x400264a0
   \   00000046   0x42BB             CMP      R3,R7
   \   00000048   0xBF14             ITE      NE 
   \   0000004A   0x4684             MOVNE    R12,R0
   \   0000004C   0x468C             MOVEQ    R12,R1
   \   0000004E   0xE048             B.N      ??HAL_DMA_IRQHandler_1
   \                     ??HAL_DMA_IRQHandler_0: (+1)
   \   00000050   0x.... 0x....      LDR.W    R7,??DataTable15_9  ;; 0x400260b9
   \   00000054   0x42BB             CMP      R3,R7
   \   00000056   0xD315             BCC.N    ??HAL_DMA_IRQHandler_2
   \   00000058   0x.... 0x....      LDR.W    R7,??DataTable15_1  ;; 0x40026410
   \   0000005C   0xF8D6 0xE000      LDR      LR,[R6, #+0]
   \   00000060   0x42BB             CMP      R3,R7
   \   00000062   0xBF08             IT       EQ 
   \   00000064   0xF04F 0x0C08      MOVEQ    R12,#+8
   \   00000068   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_1
   \   0000006A   0x.... 0x....      LDR.W    R7,??DataTable15_10  ;; 0x40026428
   \   0000006E   0x42BB             CMP      R3,R7
   \   00000070   0xBF08             IT       EQ 
   \   00000072   0x4694             MOVEQ    R12,R2
   \   00000074   0xD035             BEQ.N    ??HAL_DMA_IRQHandler_1
   \   00000076   0x.... 0x....      LDR.W    R7,??DataTable15_2  ;; 0x40026440
   \   0000007A   0x42BB             CMP      R3,R7
   \   0000007C   0xBF14             ITE      NE 
   \   0000007E   0x4684             MOVNE    R12,R0
   \   00000080   0x468C             MOVEQ    R12,R1
   \   00000082   0xE02E             B.N      ??HAL_DMA_IRQHandler_1
   \                     ??HAL_DMA_IRQHandler_2: (+1)
   \   00000084   0x.... 0x....      LDR.W    R7,??DataTable15_11  ;; 0x40026059
   \   00000088   0x42BB             CMP      R3,R7
   \   0000008A   0xD315             BCC.N    ??HAL_DMA_IRQHandler_3
   \   0000008C   0x.... 0x....      LDR.W    R7,??DataTable15  ;; 0x40026070
   \   00000090   0xF8D5 0xE004      LDR      LR,[R5, #+4]
   \   00000094   0x42BB             CMP      R3,R7
   \   00000096   0xBF08             IT       EQ 
   \   00000098   0xF04F 0x0C08      MOVEQ    R12,#+8
   \   0000009C   0xD021             BEQ.N    ??HAL_DMA_IRQHandler_1
   \   0000009E   0x.... 0x....      LDR.W    R7,??DataTable15_12  ;; 0x40026088
   \   000000A2   0x42BB             CMP      R3,R7
   \   000000A4   0xBF08             IT       EQ 
   \   000000A6   0x4694             MOVEQ    R12,R2
   \   000000A8   0xD01B             BEQ.N    ??HAL_DMA_IRQHandler_1
   \   000000AA   0x.... 0x....      LDR.W    R7,??DataTable15_13  ;; 0x400260a0
   \   000000AE   0x42BB             CMP      R3,R7
   \   000000B0   0xBF14             ITE      NE 
   \   000000B2   0x4684             MOVNE    R12,R0
   \   000000B4   0x468C             MOVEQ    R12,R1
   \   000000B6   0xE014             B.N      ??HAL_DMA_IRQHandler_1
   \                     ??HAL_DMA_IRQHandler_3: (+1)
   \   000000B8   0x.... 0x....      LDR.W    R7,??DataTable15_14  ;; 0x40026010
   \   000000BC   0xF8D5 0xE000      LDR      LR,[R5, #+0]
   \   000000C0   0x42BB             CMP      R3,R7
   \   000000C2   0xBF08             IT       EQ 
   \   000000C4   0xF04F 0x0C08      MOVEQ    R12,#+8
   \   000000C8   0xD00B             BEQ.N    ??HAL_DMA_IRQHandler_1
   \   000000CA   0x.... 0x....      LDR.W    R7,??DataTable15_15  ;; 0x40026028
   \   000000CE   0x42BB             CMP      R3,R7
   \   000000D0   0xBF08             IT       EQ 
   \   000000D2   0x4694             MOVEQ    R12,R2
   \   000000D4   0xD005             BEQ.N    ??HAL_DMA_IRQHandler_1
   \   000000D6   0x.... 0x....      LDR.W    R7,??DataTable15_16  ;; 0x40026040
   \   000000DA   0x42BB             CMP      R3,R7
   \   000000DC   0xBF0C             ITE      EQ 
   \   000000DE   0x468C             MOVEQ    R12,R1
   \   000000E0   0x4684             MOVNE    R12,R0
   \                     ??HAL_DMA_IRQHandler_1: (+1)
   \   000000E2   0xEA1C 0x0C0E      ANDS     R12,R12,LR
   \   000000E6   0xF104 0x0734      ADD      R7,R4,#+52
   \   000000EA   0xD069             BEQ.N    ??HAL_DMA_IRQHandler_4
    679            {
    680              if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
   \   000000EC   0xF8D3 0xC000      LDR      R12,[R3, #+0]
   \   000000F0   0xEA5F 0x7C4C      LSLS     R12,R12,#+29
   \   000000F4   0xD564             BPL.N    ??HAL_DMA_IRQHandler_4
    681              {
    682                /* Disable the transfer error interrupt */
    683                __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
   \   000000F6   0xF8D3 0xC000      LDR      R12,[R3, #+0]
   \   000000FA   0xF02C 0x0C04      BIC      R12,R12,#0x4
   \   000000FE   0xF8C3 0xC000      STR      R12,[R3, #+0]
    684          
    685                /* Clear the transfer error flag */
    686                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
   \   00000102   0x6823             LDR      R3,[R4, #+0]
   \   00000104   0x454B             CMP      R3,R9
   \   00000106   0xD30E             BCC.N    ??HAL_DMA_IRQHandler_5
   \   00000108   0x4543             CMP      R3,R8
   \   0000010A   0xBF08             IT       EQ 
   \   0000010C   0x2008             MOVEQ    R0,#+8
   \   0000010E   0xD008             BEQ.N    ??HAL_DMA_IRQHandler_6
   \   00000110   0x4553             CMP      R3,R10
   \   00000112   0xBF08             IT       EQ 
   \   00000114   0x4610             MOVEQ    R0,R2
   \   00000116   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_6
   \   00000118   0x.... 0x....      LDR.W    R2,??DataTable15_8  ;; 0x400264a0
   \   0000011C   0x4293             CMP      R3,R2
   \   0000011E   0xBF08             IT       EQ 
   \   00000120   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_6: (+1)
   \   00000122   0x60F0             STR      R0,[R6, #+12]
   \   00000124   0xE03F             B.N      ??HAL_DMA_IRQHandler_7
   \                     ??HAL_DMA_IRQHandler_5: (+1)
   \   00000126   0x.... 0x....      LDR.W    R12,??DataTable15_9  ;; 0x400260b9
   \   0000012A   0x4563             CMP      R3,R12
   \   0000012C   0xD312             BCC.N    ??HAL_DMA_IRQHandler_8
   \   0000012E   0x.... 0x....      LDR.W    R12,??DataTable15_1  ;; 0x40026410
   \   00000132   0x4563             CMP      R3,R12
   \   00000134   0xBF08             IT       EQ 
   \   00000136   0x2008             MOVEQ    R0,#+8
   \   00000138   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_9
   \   0000013A   0x.... 0x....      LDR.W    R12,??DataTable15_10  ;; 0x40026428
   \   0000013E   0x4563             CMP      R3,R12
   \   00000140   0xBF08             IT       EQ 
   \   00000142   0x4610             MOVEQ    R0,R2
   \   00000144   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_9
   \   00000146   0x.... 0x....      LDR.W    R2,??DataTable15_2  ;; 0x40026440
   \   0000014A   0x4293             CMP      R3,R2
   \   0000014C   0xBF08             IT       EQ 
   \   0000014E   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_9: (+1)
   \   00000150   0x60B0             STR      R0,[R6, #+8]
   \   00000152   0xE028             B.N      ??HAL_DMA_IRQHandler_7
   \                     ??HAL_DMA_IRQHandler_8: (+1)
   \   00000154   0x.... 0x....      LDR.W    R12,??DataTable15_11  ;; 0x40026059
   \   00000158   0x4563             CMP      R3,R12
   \   0000015A   0xD312             BCC.N    ??HAL_DMA_IRQHandler_10
   \   0000015C   0x.... 0x....      LDR.W    R12,??DataTable15  ;; 0x40026070
   \   00000160   0x4563             CMP      R3,R12
   \   00000162   0xBF08             IT       EQ 
   \   00000164   0x2008             MOVEQ    R0,#+8
   \   00000166   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_11
   \   00000168   0x.... 0x....      LDR.W    R12,??DataTable15_12  ;; 0x40026088
   \   0000016C   0x4563             CMP      R3,R12
   \   0000016E   0xBF08             IT       EQ 
   \   00000170   0x4610             MOVEQ    R0,R2
   \   00000172   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_11
   \   00000174   0x.... 0x....      LDR.W    R2,??DataTable15_13  ;; 0x400260a0
   \   00000178   0x4293             CMP      R3,R2
   \   0000017A   0xBF08             IT       EQ 
   \   0000017C   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_11: (+1)
   \   0000017E   0x60E8             STR      R0,[R5, #+12]
   \   00000180   0xE011             B.N      ??HAL_DMA_IRQHandler_7
   \                     ??HAL_DMA_IRQHandler_10: (+1)
   \   00000182   0x.... 0x....      LDR.W    R12,??DataTable15_14  ;; 0x40026010
   \   00000186   0x4563             CMP      R3,R12
   \   00000188   0xBF08             IT       EQ 
   \   0000018A   0x2008             MOVEQ    R0,#+8
   \   0000018C   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_12
   \   0000018E   0x.... 0x....      LDR.W    R12,??DataTable15_15  ;; 0x40026028
   \   00000192   0x4563             CMP      R3,R12
   \   00000194   0xBF08             IT       EQ 
   \   00000196   0x4610             MOVEQ    R0,R2
   \   00000198   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_12
   \   0000019A   0x.... 0x....      LDR.W    R2,??DataTable15_16  ;; 0x40026040
   \   0000019E   0x4293             CMP      R3,R2
   \   000001A0   0xBF08             IT       EQ 
   \   000001A2   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_12: (+1)
   \   000001A4   0x60A8             STR      R0,[R5, #+8]
    687          
    688                /* Update error code */
    689                hdma->ErrorCode |= HAL_DMA_ERROR_TE;
   \                     ??HAL_DMA_IRQHandler_7: (+1)
   \   000001A6   0x69B8             LDR      R0,[R7, #+24]
   \   000001A8   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000001AC   0x61B8             STR      R0,[R7, #+24]
    690          
    691                /* Change the DMA state */
    692                hdma->State = HAL_DMA_STATE_ERROR;
   \   000001AE   0x2004             MOVS     R0,#+4
   \   000001B0   0x7078             STRB     R0,[R7, #+1]
    693          
    694                /* Process Unlocked */
    695                __HAL_UNLOCK(hdma); 
   \   000001B2   0x2000             MOVS     R0,#+0
   \   000001B4   0x7038             STRB     R0,[R7, #+0]
    696          
    697                if(hdma->XferErrorCallback != NULL)
   \   000001B6   0x6979             LDR      R1,[R7, #+20]
   \   000001B8   0x0008             MOVS     R0,R1
   \   000001BA   0xBF1C             ITT      NE 
    698                {
    699                  /* Transfer error callback */
    700                  hdma->XferErrorCallback(hdma);
   \   000001BC   0x4620             MOVNE    R0,R4
   \   000001BE   0x4788             BLXNE    R1
    701                }
    702              }
    703            }
    704            /* FIFO Error Interrupt management ******************************************/
    705            if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
   \                     ??HAL_DMA_IRQHandler_4: (+1)
   \   000001C0   0x6823             LDR      R3,[R4, #+0]
   \   000001C2   0xF44F 0x0080      MOV      R0,#+4194304
   \   000001C6   0xF44F 0x3180      MOV      R1,#+65536
   \   000001CA   0x.... 0x....      LDR.W    R2,??DataTable15_17  ;; 0x800001
   \   000001CE   0x454B             CMP      R3,R9
   \   000001D0   0xD311             BCC.N    ??HAL_DMA_IRQHandler_13
   \   000001D2   0x4543             CMP      R3,R8
   \   000001D4   0xF8D6 0xE004      LDR      LR,[R6, #+4]
   \   000001D8   0xBF08             IT       EQ 
   \   000001DA   0x4694             MOVEQ    R12,R2
   \   000001DC   0xD054             BEQ.N    ??HAL_DMA_IRQHandler_14
   \   000001DE   0x4553             CMP      R3,R10
   \   000001E0   0xBF08             IT       EQ 
   \   000001E2   0xF04F 0x0C40      MOVEQ    R12,#+64
   \   000001E6   0xD04F             BEQ.N    ??HAL_DMA_IRQHandler_14
   \   000001E8   0x.... 0x....      LDR.W    R11,??DataTable15_8  ;; 0x400264a0
   \   000001EC   0x455B             CMP      R3,R11
   \   000001EE   0xBF14             ITE      NE 
   \   000001F0   0x4684             MOVNE    R12,R0
   \   000001F2   0x468C             MOVEQ    R12,R1
   \   000001F4   0xE048             B.N      ??HAL_DMA_IRQHandler_14
   \                     ??HAL_DMA_IRQHandler_13: (+1)
   \   000001F6   0x.... 0x....      LDR.W    LR,??DataTable15_9  ;; 0x400260b9
   \   000001FA   0x4573             CMP      R3,LR
   \   000001FC   0xD315             BCC.N    ??HAL_DMA_IRQHandler_15
   \   000001FE   0x.... 0x....      LDR.W    R11,??DataTable15_1  ;; 0x40026410
   \   00000202   0xF8D6 0xE000      LDR      LR,[R6, #+0]
   \   00000206   0x455B             CMP      R3,R11
   \   00000208   0xBF08             IT       EQ 
   \   0000020A   0x4694             MOVEQ    R12,R2
   \   0000020C   0xD03C             BEQ.N    ??HAL_DMA_IRQHandler_14
   \   0000020E   0x.... 0x....      LDR.W    R11,??DataTable15_10  ;; 0x40026428
   \   00000212   0x455B             CMP      R3,R11
   \   00000214   0xBF08             IT       EQ 
   \   00000216   0xF04F 0x0C40      MOVEQ    R12,#+64
   \   0000021A   0xD035             BEQ.N    ??HAL_DMA_IRQHandler_14
   \   0000021C   0x.... 0x....      LDR.W    R11,??DataTable15_2  ;; 0x40026440
   \   00000220   0x455B             CMP      R3,R11
   \   00000222   0xBF14             ITE      NE 
   \   00000224   0x4684             MOVNE    R12,R0
   \   00000226   0x468C             MOVEQ    R12,R1
   \   00000228   0xE02E             B.N      ??HAL_DMA_IRQHandler_14
   \                     ??HAL_DMA_IRQHandler_15: (+1)
   \   0000022A   0x.... 0x....      LDR.W    LR,??DataTable15_11  ;; 0x40026059
   \   0000022E   0x4573             CMP      R3,LR
   \   00000230   0xD315             BCC.N    ??HAL_DMA_IRQHandler_16
   \   00000232   0x.... 0x....      LDR.W    R11,??DataTable15  ;; 0x40026070
   \   00000236   0xF8D5 0xE004      LDR      LR,[R5, #+4]
   \   0000023A   0x455B             CMP      R3,R11
   \   0000023C   0xBF08             IT       EQ 
   \   0000023E   0x4694             MOVEQ    R12,R2
   \   00000240   0xD022             BEQ.N    ??HAL_DMA_IRQHandler_14
   \   00000242   0x.... 0x....      LDR.W    R11,??DataTable15_12  ;; 0x40026088
   \   00000246   0x455B             CMP      R3,R11
   \   00000248   0xBF08             IT       EQ 
   \   0000024A   0xF04F 0x0C40      MOVEQ    R12,#+64
   \   0000024E   0xD01B             BEQ.N    ??HAL_DMA_IRQHandler_14
   \   00000250   0x.... 0x....      LDR.W    R11,??DataTable15_13  ;; 0x400260a0
   \   00000254   0x455B             CMP      R3,R11
   \   00000256   0xBF14             ITE      NE 
   \   00000258   0x4684             MOVNE    R12,R0
   \   0000025A   0x468C             MOVEQ    R12,R1
   \   0000025C   0xE014             B.N      ??HAL_DMA_IRQHandler_14
   \                     ??HAL_DMA_IRQHandler_16: (+1)
   \   0000025E   0x.... 0x....      LDR.W    R11,??DataTable15_14  ;; 0x40026010
   \   00000262   0xF8D5 0xE000      LDR      LR,[R5, #+0]
   \   00000266   0x455B             CMP      R3,R11
   \   00000268   0xBF08             IT       EQ 
   \   0000026A   0x4694             MOVEQ    R12,R2
   \   0000026C   0xD00C             BEQ.N    ??HAL_DMA_IRQHandler_14
   \   0000026E   0x.... 0x....      LDR.W    R11,??DataTable15_15  ;; 0x40026028
   \   00000272   0x455B             CMP      R3,R11
   \   00000274   0xBF08             IT       EQ 
   \   00000276   0xF04F 0x0C40      MOVEQ    R12,#+64
   \   0000027A   0xD005             BEQ.N    ??HAL_DMA_IRQHandler_14
   \   0000027C   0x.... 0x....      LDR.W    R11,??DataTable15_16  ;; 0x40026040
   \   00000280   0x455B             CMP      R3,R11
   \   00000282   0xBF0C             ITE      EQ 
   \   00000284   0x468C             MOVEQ    R12,R1
   \   00000286   0x4684             MOVNE    R12,R0
   \                     ??HAL_DMA_IRQHandler_14: (+1)
   \   00000288   0xEA1C 0x0C0E      ANDS     R12,R12,LR
   \   0000028C   0xD069             BEQ.N    ??HAL_DMA_IRQHandler_17
    706            {
    707              if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
   \   0000028E   0xF8D3 0xC014      LDR      R12,[R3, #+20]
   \   00000292   0xEA5F 0x6C0C      LSLS     R12,R12,#+24
   \   00000296   0xD564             BPL.N    ??HAL_DMA_IRQHandler_17
    708              {
    709                /* Disable the FIFO Error interrupt */
    710                __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
   \   00000298   0xF8D3 0xC014      LDR      R12,[R3, #+20]
   \   0000029C   0xF02C 0x0C80      BIC      R12,R12,#0x80
   \   000002A0   0xF8C3 0xC014      STR      R12,[R3, #+20]
    711          
    712                /* Clear the FIFO error flag */
    713                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
   \   000002A4   0x6823             LDR      R3,[R4, #+0]
   \   000002A6   0x454B             CMP      R3,R9
   \   000002A8   0xD30E             BCC.N    ??HAL_DMA_IRQHandler_18
   \   000002AA   0x4543             CMP      R3,R8
   \   000002AC   0xBF08             IT       EQ 
   \   000002AE   0x4610             MOVEQ    R0,R2
   \   000002B0   0xD008             BEQ.N    ??HAL_DMA_IRQHandler_19
   \   000002B2   0x4553             CMP      R3,R10
   \   000002B4   0xBF08             IT       EQ 
   \   000002B6   0x2040             MOVEQ    R0,#+64
   \   000002B8   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_19
   \   000002BA   0x.... 0x....      LDR.W    R2,??DataTable15_8  ;; 0x400264a0
   \   000002BE   0x4293             CMP      R3,R2
   \   000002C0   0xBF08             IT       EQ 
   \   000002C2   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_19: (+1)
   \   000002C4   0x60F0             STR      R0,[R6, #+12]
   \   000002C6   0xE03F             B.N      ??HAL_DMA_IRQHandler_20
   \                     ??HAL_DMA_IRQHandler_18: (+1)
   \   000002C8   0x.... 0x....      LDR.W    R12,??DataTable15_9  ;; 0x400260b9
   \   000002CC   0x4563             CMP      R3,R12
   \   000002CE   0xD312             BCC.N    ??HAL_DMA_IRQHandler_21
   \   000002D0   0x.... 0x....      LDR.W    R12,??DataTable15_1  ;; 0x40026410
   \   000002D4   0x4563             CMP      R3,R12
   \   000002D6   0xBF08             IT       EQ 
   \   000002D8   0x4610             MOVEQ    R0,R2
   \   000002DA   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_22
   \   000002DC   0x.... 0x....      LDR.W    R2,??DataTable15_10  ;; 0x40026428
   \   000002E0   0x4293             CMP      R3,R2
   \   000002E2   0xBF08             IT       EQ 
   \   000002E4   0x2040             MOVEQ    R0,#+64
   \   000002E6   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_22
   \   000002E8   0x.... 0x....      LDR.W    R2,??DataTable15_2  ;; 0x40026440
   \   000002EC   0x4293             CMP      R3,R2
   \   000002EE   0xBF08             IT       EQ 
   \   000002F0   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_22: (+1)
   \   000002F2   0x60B0             STR      R0,[R6, #+8]
   \   000002F4   0xE028             B.N      ??HAL_DMA_IRQHandler_20
   \                     ??HAL_DMA_IRQHandler_21: (+1)
   \   000002F6   0x.... 0x....      LDR.W    R12,??DataTable15_11  ;; 0x40026059
   \   000002FA   0x4563             CMP      R3,R12
   \   000002FC   0xD312             BCC.N    ??HAL_DMA_IRQHandler_23
   \   000002FE   0x.... 0x....      LDR.W    R12,??DataTable15  ;; 0x40026070
   \   00000302   0x4563             CMP      R3,R12
   \   00000304   0xBF08             IT       EQ 
   \   00000306   0x4610             MOVEQ    R0,R2
   \   00000308   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_24
   \   0000030A   0x.... 0x....      LDR.W    R2,??DataTable15_12  ;; 0x40026088
   \   0000030E   0x4293             CMP      R3,R2
   \   00000310   0xBF08             IT       EQ 
   \   00000312   0x2040             MOVEQ    R0,#+64
   \   00000314   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_24
   \   00000316   0x.... 0x....      LDR.W    R2,??DataTable15_13  ;; 0x400260a0
   \   0000031A   0x4293             CMP      R3,R2
   \   0000031C   0xBF08             IT       EQ 
   \   0000031E   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_24: (+1)
   \   00000320   0x60E8             STR      R0,[R5, #+12]
   \   00000322   0xE011             B.N      ??HAL_DMA_IRQHandler_20
   \                     ??HAL_DMA_IRQHandler_23: (+1)
   \   00000324   0x.... 0x....      LDR.W    R12,??DataTable15_14  ;; 0x40026010
   \   00000328   0x4563             CMP      R3,R12
   \   0000032A   0xBF08             IT       EQ 
   \   0000032C   0x4610             MOVEQ    R0,R2
   \   0000032E   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_25
   \   00000330   0x.... 0x....      LDR.W    R2,??DataTable15_15  ;; 0x40026028
   \   00000334   0x4293             CMP      R3,R2
   \   00000336   0xBF08             IT       EQ 
   \   00000338   0x2040             MOVEQ    R0,#+64
   \   0000033A   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_25
   \   0000033C   0x.... 0x....      LDR.W    R2,??DataTable15_16  ;; 0x40026040
   \   00000340   0x4293             CMP      R3,R2
   \   00000342   0xBF08             IT       EQ 
   \   00000344   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_25: (+1)
   \   00000346   0x60A8             STR      R0,[R5, #+8]
    714          
    715                /* Update error code */
    716                hdma->ErrorCode |= HAL_DMA_ERROR_FE;
   \                     ??HAL_DMA_IRQHandler_20: (+1)
   \   00000348   0x69B8             LDR      R0,[R7, #+24]
   \   0000034A   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000034E   0x61B8             STR      R0,[R7, #+24]
    717          
    718                /* Change the DMA state */
    719                hdma->State = HAL_DMA_STATE_ERROR;
   \   00000350   0x2004             MOVS     R0,#+4
   \   00000352   0x7078             STRB     R0,[R7, #+1]
    720          
    721                /* Process Unlocked */
    722                __HAL_UNLOCK(hdma);
   \   00000354   0x2000             MOVS     R0,#+0
   \   00000356   0x7038             STRB     R0,[R7, #+0]
    723          
    724                if(hdma->XferErrorCallback != NULL)
   \   00000358   0x6979             LDR      R1,[R7, #+20]
   \   0000035A   0x0008             MOVS     R0,R1
   \   0000035C   0xBF1C             ITT      NE 
    725                {
    726                  /* Transfer error callback */
    727                  hdma->XferErrorCallback(hdma);
   \   0000035E   0x4620             MOVNE    R0,R4
   \   00000360   0x4788             BLXNE    R1
    728                }
    729              }
    730            }
    731            /* Direct Mode Error Interrupt management ***********************************/
    732            if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
   \                     ??HAL_DMA_IRQHandler_17: (+1)
   \   00000362   0x6820             LDR      R0,[R4, #+0]
   \   00000364   0xF44F 0x2180      MOV      R1,#+262144
   \   00000368   0x9000             STR      R0,[SP, #+0]
   \   0000036A   0xF44F 0x7280      MOV      R2,#+256
   \   0000036E   0x4684             MOV      R12,R0
   \   00000370   0x45CC             CMP      R12,R9
   \   00000372   0xF04F 0x7080      MOV      R0,#+16777216
   \   00000376   0x.... 0x....      LDR.W    R3,??DataTable15_18  ;; 0x800004
   \   0000037A   0xD310             BCC.N    ??HAL_DMA_IRQHandler_26
   \   0000037C   0x45C4             CMP      R12,R8
   \   0000037E   0xF8D6 0xE004      LDR      LR,[R6, #+4]
   \   00000382   0xBF08             IT       EQ 
   \   00000384   0x469C             MOVEQ    R12,R3
   \   00000386   0xD050             BEQ.N    ??HAL_DMA_IRQHandler_27
   \   00000388   0x45D4             CMP      R12,R10
   \   0000038A   0xBF08             IT       EQ 
   \   0000038C   0x4694             MOVEQ    R12,R2
   \   0000038E   0xD04C             BEQ.N    ??HAL_DMA_IRQHandler_27
   \   00000390   0x.... 0x....      LDR.W    R11,??DataTable15_8  ;; 0x400264a0
   \   00000394   0x45DC             CMP      R12,R11
   \   00000396   0xBF14             ITE      NE 
   \   00000398   0x4684             MOVNE    R12,R0
   \   0000039A   0x468C             MOVEQ    R12,R1
   \   0000039C   0xE045             B.N      ??HAL_DMA_IRQHandler_27
   \                     ??HAL_DMA_IRQHandler_26: (+1)
   \   0000039E   0x.... 0x....      LDR.W    LR,??DataTable15_9  ;; 0x400260b9
   \   000003A2   0x45F4             CMP      R12,LR
   \   000003A4   0xD314             BCC.N    ??HAL_DMA_IRQHandler_28
   \   000003A6   0x.... 0x....      LDR.W    R11,??DataTable15_1  ;; 0x40026410
   \   000003AA   0xF8D6 0xE000      LDR      LR,[R6, #+0]
   \   000003AE   0x45DC             CMP      R12,R11
   \   000003B0   0xBF08             IT       EQ 
   \   000003B2   0x469C             MOVEQ    R12,R3
   \   000003B4   0xD039             BEQ.N    ??HAL_DMA_IRQHandler_27
   \   000003B6   0x.... 0x....      LDR.W    R11,??DataTable15_10  ;; 0x40026428
   \   000003BA   0x45DC             CMP      R12,R11
   \   000003BC   0xBF08             IT       EQ 
   \   000003BE   0x4694             MOVEQ    R12,R2
   \   000003C0   0xD033             BEQ.N    ??HAL_DMA_IRQHandler_27
   \   000003C2   0x.... 0x....      LDR.W    R11,??DataTable15_2  ;; 0x40026440
   \   000003C6   0x45DC             CMP      R12,R11
   \   000003C8   0xBF14             ITE      NE 
   \   000003CA   0x4684             MOVNE    R12,R0
   \   000003CC   0x468C             MOVEQ    R12,R1
   \   000003CE   0xE02C             B.N      ??HAL_DMA_IRQHandler_27
   \                     ??HAL_DMA_IRQHandler_28: (+1)
   \   000003D0   0x.... 0x....      LDR.W    LR,??DataTable15_11  ;; 0x40026059
   \   000003D4   0x45F4             CMP      R12,LR
   \   000003D6   0xD314             BCC.N    ??HAL_DMA_IRQHandler_29
   \   000003D8   0x.... 0x....      LDR.W    R11,??DataTable15  ;; 0x40026070
   \   000003DC   0xF8D5 0xE004      LDR      LR,[R5, #+4]
   \   000003E0   0x45DC             CMP      R12,R11
   \   000003E2   0xBF08             IT       EQ 
   \   000003E4   0x469C             MOVEQ    R12,R3
   \   000003E6   0xD020             BEQ.N    ??HAL_DMA_IRQHandler_27
   \   000003E8   0x.... 0x....      LDR.W    R11,??DataTable15_12  ;; 0x40026088
   \   000003EC   0x45DC             CMP      R12,R11
   \   000003EE   0xBF08             IT       EQ 
   \   000003F0   0x4694             MOVEQ    R12,R2
   \   000003F2   0xD01A             BEQ.N    ??HAL_DMA_IRQHandler_27
   \   000003F4   0x.... 0x....      LDR.W    R11,??DataTable15_13  ;; 0x400260a0
   \   000003F8   0x45DC             CMP      R12,R11
   \   000003FA   0xBF14             ITE      NE 
   \   000003FC   0x4684             MOVNE    R12,R0
   \   000003FE   0x468C             MOVEQ    R12,R1
   \   00000400   0xE013             B.N      ??HAL_DMA_IRQHandler_27
   \                     ??HAL_DMA_IRQHandler_29: (+1)
   \   00000402   0x.... 0x....      LDR.W    R11,??DataTable15_14  ;; 0x40026010
   \   00000406   0xF8D5 0xE000      LDR      LR,[R5, #+0]
   \   0000040A   0x45DC             CMP      R12,R11
   \   0000040C   0xBF08             IT       EQ 
   \   0000040E   0x469C             MOVEQ    R12,R3
   \   00000410   0xD00B             BEQ.N    ??HAL_DMA_IRQHandler_27
   \   00000412   0x.... 0x....      LDR.W    R11,??DataTable15_15  ;; 0x40026028
   \   00000416   0x45DC             CMP      R12,R11
   \   00000418   0xBF08             IT       EQ 
   \   0000041A   0x4694             MOVEQ    R12,R2
   \   0000041C   0xD005             BEQ.N    ??HAL_DMA_IRQHandler_27
   \   0000041E   0x.... 0x....      LDR.W    R11,??DataTable15_16  ;; 0x40026040
   \   00000422   0x45DC             CMP      R12,R11
   \   00000424   0xBF0C             ITE      EQ 
   \   00000426   0x468C             MOVEQ    R12,R1
   \   00000428   0x4684             MOVNE    R12,R0
   \                     ??HAL_DMA_IRQHandler_27: (+1)
   \   0000042A   0xEA1C 0x0C0E      ANDS     R12,R12,LR
   \   0000042E   0xD070             BEQ.N    ??HAL_DMA_IRQHandler_30
    733            {
    734              if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
   \   00000430   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \   00000434   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   00000438   0xEA5F 0x7C8C      LSLS     R12,R12,#+30
   \   0000043C   0xD569             BPL.N    ??HAL_DMA_IRQHandler_30
    735              {
    736                /* Disable the direct mode Error interrupt */
    737                __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
   \   0000043E   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \   00000442   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   00000446   0xF8DD 0xE000      LDR      LR,[SP, #+0]
   \   0000044A   0xF02C 0x0C02      BIC      R12,R12,#0x2
   \   0000044E   0xF8CE 0xC000      STR      R12,[LR, #+0]
    738          
    739                /* Clear the direct mode error flag */
    740                __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
   \   00000452   0xF8D4 0xC000      LDR      R12,[R4, #+0]
   \   00000456   0x45CC             CMP      R12,R9
   \   00000458   0xD30E             BCC.N    ??HAL_DMA_IRQHandler_31
   \   0000045A   0x45C4             CMP      R12,R8
   \   0000045C   0xBF08             IT       EQ 
   \   0000045E   0x4618             MOVEQ    R0,R3
   \   00000460   0xD008             BEQ.N    ??HAL_DMA_IRQHandler_32
   \   00000462   0x45D4             CMP      R12,R10
   \   00000464   0xBF08             IT       EQ 
   \   00000466   0x4610             MOVEQ    R0,R2
   \   00000468   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_32
   \   0000046A   0x.... 0x....      LDR.W    R2,??DataTable15_8  ;; 0x400264a0
   \   0000046E   0x4594             CMP      R12,R2
   \   00000470   0xBF08             IT       EQ 
   \   00000472   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_32: (+1)
   \   00000474   0x60F0             STR      R0,[R6, #+12]
   \   00000476   0xE03F             B.N      ??HAL_DMA_IRQHandler_33
   \                     ??HAL_DMA_IRQHandler_31: (+1)
   \   00000478   0x.... 0x....      LDR.W    LR,??DataTable15_9  ;; 0x400260b9
   \   0000047C   0x45F4             CMP      R12,LR
   \   0000047E   0xD312             BCC.N    ??HAL_DMA_IRQHandler_34
   \   00000480   0x.... 0x....      LDR.W    LR,??DataTable15_1  ;; 0x40026410
   \   00000484   0x45F4             CMP      R12,LR
   \   00000486   0xBF08             IT       EQ 
   \   00000488   0x4618             MOVEQ    R0,R3
   \   0000048A   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_35
   \   0000048C   0x.... 0x....      LDR.W    R3,??DataTable15_10  ;; 0x40026428
   \   00000490   0x459C             CMP      R12,R3
   \   00000492   0xBF08             IT       EQ 
   \   00000494   0x4610             MOVEQ    R0,R2
   \   00000496   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_35
   \   00000498   0x.... 0x....      LDR.W    R2,??DataTable15_2  ;; 0x40026440
   \   0000049C   0x4594             CMP      R12,R2
   \   0000049E   0xBF08             IT       EQ 
   \   000004A0   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_35: (+1)
   \   000004A2   0x60B0             STR      R0,[R6, #+8]
   \   000004A4   0xE028             B.N      ??HAL_DMA_IRQHandler_33
   \                     ??HAL_DMA_IRQHandler_34: (+1)
   \   000004A6   0x.... 0x....      LDR.W    LR,??DataTable15_11  ;; 0x40026059
   \   000004AA   0x45F4             CMP      R12,LR
   \   000004AC   0xD312             BCC.N    ??HAL_DMA_IRQHandler_36
   \   000004AE   0x.... 0x....      LDR.W    LR,??DataTable15  ;; 0x40026070
   \   000004B2   0x45F4             CMP      R12,LR
   \   000004B4   0xBF08             IT       EQ 
   \   000004B6   0x4618             MOVEQ    R0,R3
   \   000004B8   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_37
   \   000004BA   0x.... 0x....      LDR.W    R3,??DataTable15_12  ;; 0x40026088
   \   000004BE   0x459C             CMP      R12,R3
   \   000004C0   0xBF08             IT       EQ 
   \   000004C2   0x4610             MOVEQ    R0,R2
   \   000004C4   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_37
   \   000004C6   0x.... 0x....      LDR.W    R2,??DataTable15_13  ;; 0x400260a0
   \   000004CA   0x4594             CMP      R12,R2
   \   000004CC   0xBF08             IT       EQ 
   \   000004CE   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_37: (+1)
   \   000004D0   0x60E8             STR      R0,[R5, #+12]
   \   000004D2   0xE011             B.N      ??HAL_DMA_IRQHandler_33
   \                     ??HAL_DMA_IRQHandler_36: (+1)
   \   000004D4   0x.... 0x....      LDR.W    LR,??DataTable15_14  ;; 0x40026010
   \   000004D8   0x45F4             CMP      R12,LR
   \   000004DA   0xBF08             IT       EQ 
   \   000004DC   0x4618             MOVEQ    R0,R3
   \   000004DE   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_38
   \   000004E0   0x.... 0x....      LDR.W    R3,??DataTable15_15  ;; 0x40026028
   \   000004E4   0x459C             CMP      R12,R3
   \   000004E6   0xBF08             IT       EQ 
   \   000004E8   0x4610             MOVEQ    R0,R2
   \   000004EA   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_38
   \   000004EC   0x.... 0x....      LDR.W    R2,??DataTable15_16  ;; 0x40026040
   \   000004F0   0x4594             CMP      R12,R2
   \   000004F2   0xBF08             IT       EQ 
   \   000004F4   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_38: (+1)
   \   000004F6   0x60A8             STR      R0,[R5, #+8]
    741          
    742                /* Update error code */
    743                hdma->ErrorCode |= HAL_DMA_ERROR_DME;
   \                     ??HAL_DMA_IRQHandler_33: (+1)
   \   000004F8   0x69B8             LDR      R0,[R7, #+24]
   \   000004FA   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000004FE   0x61B8             STR      R0,[R7, #+24]
    744          
    745                /* Change the DMA state */
    746                hdma->State = HAL_DMA_STATE_ERROR;
   \   00000500   0x2004             MOVS     R0,#+4
   \   00000502   0x7078             STRB     R0,[R7, #+1]
    747          
    748                /* Process Unlocked */
    749                __HAL_UNLOCK(hdma);
   \   00000504   0x2000             MOVS     R0,#+0
   \   00000506   0x7038             STRB     R0,[R7, #+0]
    750          
    751                if(hdma->XferErrorCallback != NULL)
   \   00000508   0x6979             LDR      R1,[R7, #+20]
   \   0000050A   0x0008             MOVS     R0,R1
   \   0000050C   0xBF1C             ITT      NE 
    752                {
    753                  /* Transfer error callback */
    754                  hdma->XferErrorCallback(hdma);
   \   0000050E   0x4620             MOVNE    R0,R4
   \   00000510   0x4788             BLXNE    R1
    755                }
    756              }
    757            }
    758            /* Half Transfer Complete Interrupt management ******************************/
    759            if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
   \                     ??HAL_DMA_IRQHandler_30: (+1)
   \   00000512   0x6823             LDR      R3,[R4, #+0]
   \   00000514   0xF04F 0x6080      MOV      R0,#+67108864
   \   00000518   0xF44F 0x1180      MOV      R1,#+1048576
   \   0000051C   0xF44F 0x6280      MOV      R2,#+1024
   \   00000520   0x469C             MOV      R12,R3
   \   00000522   0x45CC             CMP      R12,R9
   \   00000524   0xD311             BCC.N    ??HAL_DMA_IRQHandler_39
   \   00000526   0x45C4             CMP      R12,R8
   \   00000528   0xF8D6 0xE004      LDR      LR,[R6, #+4]
   \   0000052C   0xBF08             IT       EQ 
   \   0000052E   0xF04F 0x0B10      MOVEQ    R11,#+16
   \   00000532   0xD053             BEQ.N    ??HAL_DMA_IRQHandler_40
   \   00000534   0x45D4             CMP      R12,R10
   \   00000536   0xBF08             IT       EQ 
   \   00000538   0x4693             MOVEQ    R11,R2
   \   0000053A   0xD04F             BEQ.N    ??HAL_DMA_IRQHandler_40
   \   0000053C   0x.... 0x....      LDR.W    R11,??DataTable15_8  ;; 0x400264a0
   \   00000540   0x45DC             CMP      R12,R11
   \   00000542   0xBF14             ITE      NE 
   \   00000544   0x4683             MOVNE    R11,R0
   \   00000546   0x468B             MOVEQ    R11,R1
   \   00000548   0xE048             B.N      ??HAL_DMA_IRQHandler_40
   \                     ??HAL_DMA_IRQHandler_39: (+1)
   \   0000054A   0x.... 0x....      LDR.W    LR,??DataTable15_9  ;; 0x400260b9
   \   0000054E   0x45F4             CMP      R12,LR
   \   00000550   0xD315             BCC.N    ??HAL_DMA_IRQHandler_41
   \   00000552   0x.... 0x....      LDR.W    R11,??DataTable15_1  ;; 0x40026410
   \   00000556   0xF8D6 0xE000      LDR      LR,[R6, #+0]
   \   0000055A   0x45DC             CMP      R12,R11
   \   0000055C   0xBF08             IT       EQ 
   \   0000055E   0xF04F 0x0B10      MOVEQ    R11,#+16
   \   00000562   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_40
   \   00000564   0x.... 0x....      LDR.W    R11,??DataTable15_10  ;; 0x40026428
   \   00000568   0x45DC             CMP      R12,R11
   \   0000056A   0xBF08             IT       EQ 
   \   0000056C   0x4693             MOVEQ    R11,R2
   \   0000056E   0xD035             BEQ.N    ??HAL_DMA_IRQHandler_40
   \   00000570   0x.... 0x....      LDR.W    R11,??DataTable15_2  ;; 0x40026440
   \   00000574   0x45DC             CMP      R12,R11
   \   00000576   0xBF14             ITE      NE 
   \   00000578   0x4683             MOVNE    R11,R0
   \   0000057A   0x468B             MOVEQ    R11,R1
   \   0000057C   0xE02E             B.N      ??HAL_DMA_IRQHandler_40
   \                     ??HAL_DMA_IRQHandler_41: (+1)
   \   0000057E   0x.... 0x....      LDR.W    LR,??DataTable15_11  ;; 0x40026059
   \   00000582   0x45F4             CMP      R12,LR
   \   00000584   0xD315             BCC.N    ??HAL_DMA_IRQHandler_42
   \   00000586   0x.... 0x....      LDR.W    R11,??DataTable15  ;; 0x40026070
   \   0000058A   0xF8D5 0xE004      LDR      LR,[R5, #+4]
   \   0000058E   0x45DC             CMP      R12,R11
   \   00000590   0xBF08             IT       EQ 
   \   00000592   0xF04F 0x0B10      MOVEQ    R11,#+16
   \   00000596   0xD021             BEQ.N    ??HAL_DMA_IRQHandler_40
   \   00000598   0x.... 0x....      LDR.W    R11,??DataTable15_12  ;; 0x40026088
   \   0000059C   0x45DC             CMP      R12,R11
   \   0000059E   0xBF08             IT       EQ 
   \   000005A0   0x4693             MOVEQ    R11,R2
   \   000005A2   0xD01B             BEQ.N    ??HAL_DMA_IRQHandler_40
   \   000005A4   0x.... 0x....      LDR.W    R11,??DataTable15_13  ;; 0x400260a0
   \   000005A8   0x45DC             CMP      R12,R11
   \   000005AA   0xBF14             ITE      NE 
   \   000005AC   0x4683             MOVNE    R11,R0
   \   000005AE   0x468B             MOVEQ    R11,R1
   \   000005B0   0xE014             B.N      ??HAL_DMA_IRQHandler_40
   \                     ??HAL_DMA_IRQHandler_42: (+1)
   \   000005B2   0x.... 0x....      LDR.W    R11,??DataTable15_14  ;; 0x40026010
   \   000005B6   0xF8D5 0xE000      LDR      LR,[R5, #+0]
   \   000005BA   0x45DC             CMP      R12,R11
   \   000005BC   0xBF08             IT       EQ 
   \   000005BE   0xF04F 0x0B10      MOVEQ    R11,#+16
   \   000005C2   0xD00B             BEQ.N    ??HAL_DMA_IRQHandler_40
   \   000005C4   0x.... 0x....      LDR.W    R11,??DataTable15_15  ;; 0x40026028
   \   000005C8   0x45DC             CMP      R12,R11
   \   000005CA   0xBF08             IT       EQ 
   \   000005CC   0x4693             MOVEQ    R11,R2
   \   000005CE   0xD005             BEQ.N    ??HAL_DMA_IRQHandler_40
   \   000005D0   0x.... 0x....      LDR.W    R11,??DataTable15_16  ;; 0x40026040
   \   000005D4   0x45DC             CMP      R12,R11
   \   000005D6   0xBF0C             ITE      EQ 
   \   000005D8   0x468B             MOVEQ    R11,R1
   \   000005DA   0x4683             MOVNE    R11,R0
   \                     ??HAL_DMA_IRQHandler_40: (+1)
   \   000005DC   0xEA1B 0x0E0E      ANDS     LR,R11,LR
   \   000005E0   0xF000 0x80C5      BEQ.W    ??HAL_DMA_IRQHandler_43
    760            {
    761              if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
   \   000005E4   0xF8D3 0xE000      LDR      LR,[R3, #+0]
   \   000005E8   0xEA5F 0x7E0E      LSLS     LR,LR,#+28
   \   000005EC   0xF140 0x80BF      BPL.W    ??HAL_DMA_IRQHandler_43
    762              { 
    763                /* Multi_Buffering mode enabled */
    764                if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
   \   000005F0   0xF8D3 0xE000      LDR      LR,[R3, #+0]
   \   000005F4   0xEA5F 0x3E4E      LSLS     LR,LR,#+13
   \   000005F8   0xD559             BPL.N    ??HAL_DMA_IRQHandler_44
    765                {
    766                  /* Clear the half transfer complete flag */
    767                  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \   000005FA   0x45CC             CMP      R12,R9
   \   000005FC   0xD30E             BCC.N    ??HAL_DMA_IRQHandler_45
   \   000005FE   0x45C4             CMP      R12,R8
   \   00000600   0xBF08             IT       EQ 
   \   00000602   0x2010             MOVEQ    R0,#+16
   \   00000604   0xD008             BEQ.N    ??HAL_DMA_IRQHandler_46
   \   00000606   0x45D4             CMP      R12,R10
   \   00000608   0xBF08             IT       EQ 
   \   0000060A   0x4610             MOVEQ    R0,R2
   \   0000060C   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_46
   \   0000060E   0x.... 0x....      LDR.W    R2,??DataTable15_8  ;; 0x400264a0
   \   00000612   0x4594             CMP      R12,R2
   \   00000614   0xBF08             IT       EQ 
   \   00000616   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_46: (+1)
   \   00000618   0x60F0             STR      R0,[R6, #+12]
   \   0000061A   0xE03F             B.N      ??HAL_DMA_IRQHandler_47
   \                     ??HAL_DMA_IRQHandler_45: (+1)
   \   0000061C   0x.... 0x....      LDR.W    R3,??DataTable15_9  ;; 0x400260b9
   \   00000620   0x459C             CMP      R12,R3
   \   00000622   0xD312             BCC.N    ??HAL_DMA_IRQHandler_48
   \   00000624   0x.... 0x....      LDR.W    R3,??DataTable15_1  ;; 0x40026410
   \   00000628   0x459C             CMP      R12,R3
   \   0000062A   0xBF08             IT       EQ 
   \   0000062C   0x2010             MOVEQ    R0,#+16
   \   0000062E   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_49
   \   00000630   0x.... 0x....      LDR.W    R3,??DataTable15_10  ;; 0x40026428
   \   00000634   0x459C             CMP      R12,R3
   \   00000636   0xBF08             IT       EQ 
   \   00000638   0x4610             MOVEQ    R0,R2
   \   0000063A   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_49
   \   0000063C   0x.... 0x....      LDR.W    R2,??DataTable15_2  ;; 0x40026440
   \   00000640   0x4594             CMP      R12,R2
   \   00000642   0xBF08             IT       EQ 
   \   00000644   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_49: (+1)
   \   00000646   0x60B0             STR      R0,[R6, #+8]
   \   00000648   0xE028             B.N      ??HAL_DMA_IRQHandler_47
   \                     ??HAL_DMA_IRQHandler_48: (+1)
   \   0000064A   0x.... 0x....      LDR.W    R3,??DataTable15_11  ;; 0x40026059
   \   0000064E   0x459C             CMP      R12,R3
   \   00000650   0xD312             BCC.N    ??HAL_DMA_IRQHandler_50
   \   00000652   0x.... 0x....      LDR.W    R3,??DataTable15  ;; 0x40026070
   \   00000656   0x459C             CMP      R12,R3
   \   00000658   0xBF08             IT       EQ 
   \   0000065A   0x2010             MOVEQ    R0,#+16
   \   0000065C   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_51
   \   0000065E   0x.... 0x....      LDR.W    R3,??DataTable15_12  ;; 0x40026088
   \   00000662   0x459C             CMP      R12,R3
   \   00000664   0xBF08             IT       EQ 
   \   00000666   0x4610             MOVEQ    R0,R2
   \   00000668   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_51
   \   0000066A   0x.... 0x....      LDR.W    R2,??DataTable15_13  ;; 0x400260a0
   \   0000066E   0x4594             CMP      R12,R2
   \   00000670   0xBF08             IT       EQ 
   \   00000672   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_51: (+1)
   \   00000674   0x60E8             STR      R0,[R5, #+12]
   \   00000676   0xE011             B.N      ??HAL_DMA_IRQHandler_47
   \                     ??HAL_DMA_IRQHandler_50: (+1)
   \   00000678   0x.... 0x....      LDR.W    R3,??DataTable15_14  ;; 0x40026010
   \   0000067C   0x459C             CMP      R12,R3
   \   0000067E   0xBF08             IT       EQ 
   \   00000680   0x2010             MOVEQ    R0,#+16
   \   00000682   0xD00A             BEQ.N    ??HAL_DMA_IRQHandler_52
   \   00000684   0x.... 0x....      LDR.W    R3,??DataTable15_15  ;; 0x40026028
   \   00000688   0x459C             CMP      R12,R3
   \   0000068A   0xBF08             IT       EQ 
   \   0000068C   0x4610             MOVEQ    R0,R2
   \   0000068E   0xD004             BEQ.N    ??HAL_DMA_IRQHandler_52
   \   00000690   0x.... 0x....      LDR.W    R2,??DataTable15_16  ;; 0x40026040
   \   00000694   0x4594             CMP      R12,R2
   \   00000696   0xBF08             IT       EQ 
   \   00000698   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_52: (+1)
   \   0000069A   0x60A8             STR      R0,[R5, #+8]
    768          
    769                  /* Current memory buffer used is Memory 0 */
    770                  if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
   \                     ??HAL_DMA_IRQHandler_47: (+1)
   \   0000069C   0x6820             LDR      R0,[R4, #+0]
   \   0000069E   0x6801             LDR      R1,[R0, #+0]
   \   000006A0   0x0309             LSLS     R1,R1,#+12
   \   000006A2   0xD55D             BPL.N    ??HAL_DMA_IRQHandler_53
    771                  {
    772                    /* Change DMA peripheral state */
    773                    hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
    774                  }
    775                  /* Current memory buffer used is Memory 1 */
    776                  else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
   \   000006A4   0x6800             LDR      R0,[R0, #+0]
   \   000006A6   0x0300             LSLS     R0,R0,#+12
   \   000006A8   0xD55C             BPL.N    ??HAL_DMA_IRQHandler_54
    777                  {
    778                    /* Change DMA peripheral state */
    779                    hdma->State = HAL_DMA_STATE_READY_HALF_MEM1;
   \   000006AA   0x2041             MOVS     R0,#+65
   \   000006AC   0xE059             B.N      ??HAL_DMA_IRQHandler_55
    780                  }
    781                }
    782                else
    783                {
    784                  /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    785                  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
   \                     ??HAL_DMA_IRQHandler_44: (+1)
   \   000006AE   0xF8D3 0xC000      LDR      R12,[R3, #+0]
   \   000006B2   0xEA5F 0x5CCC      LSLS     R12,R12,#+23
   \   000006B6   0xD405             BMI.N    ??HAL_DMA_IRQHandler_56
    786                  {
    787                    /* Disable the half transfer interrupt */
    788                    __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
   \   000006B8   0xF8D3 0xC000      LDR      R12,[R3, #+0]
   \   000006BC   0xF02C 0x0C08      BIC      R12,R12,#0x8
   \   000006C0   0xF8C3 0xC000      STR      R12,[R3, #+0]
    789                  }
    790                  /* Clear the half transfer complete flag */
    791                  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_IRQHandler_56: (+1)
   \   000006C4   0x6823             LDR      R3,[R4, #+0]
   \   000006C6   0x454B             CMP      R3,R9
   \   000006C8   0xD30D             BCC.N    ??HAL_DMA_IRQHandler_57
   \   000006CA   0x4543             CMP      R3,R8
   \   000006CC   0xBF08             IT       EQ 
   \   000006CE   0x2010             MOVEQ    R0,#+16
   \   000006D0   0xD007             BEQ.N    ??HAL_DMA_IRQHandler_58
   \   000006D2   0x4553             CMP      R3,R10
   \   000006D4   0xBF08             IT       EQ 
   \   000006D6   0x4610             MOVEQ    R0,R2
   \   000006D8   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_58
   \   000006DA   0x....             LDR.N    R2,??DataTable15_8  ;; 0x400264a0
   \   000006DC   0x4293             CMP      R3,R2
   \   000006DE   0xBF08             IT       EQ 
   \   000006E0   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_58: (+1)
   \   000006E2   0x60F0             STR      R0,[R6, #+12]
   \   000006E4   0xE03C             B.N      ??HAL_DMA_IRQHandler_53
   \                     ??HAL_DMA_IRQHandler_57: (+1)
   \   000006E6   0x.... 0x....      LDR.W    R12,??DataTable15_9  ;; 0x400260b9
   \   000006EA   0x4563             CMP      R3,R12
   \   000006EC   0xD311             BCC.N    ??HAL_DMA_IRQHandler_59
   \   000006EE   0x.... 0x....      LDR.W    R12,??DataTable15_1  ;; 0x40026410
   \   000006F2   0x4563             CMP      R3,R12
   \   000006F4   0xBF08             IT       EQ 
   \   000006F6   0x2010             MOVEQ    R0,#+16
   \   000006F8   0xD009             BEQ.N    ??HAL_DMA_IRQHandler_60
   \   000006FA   0x.... 0x....      LDR.W    R12,??DataTable15_10  ;; 0x40026428
   \   000006FE   0x4563             CMP      R3,R12
   \   00000700   0xBF08             IT       EQ 
   \   00000702   0x4610             MOVEQ    R0,R2
   \   00000704   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_60
   \   00000706   0x....             LDR.N    R2,??DataTable15_2  ;; 0x40026440
   \   00000708   0x4293             CMP      R3,R2
   \   0000070A   0xBF08             IT       EQ 
   \   0000070C   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_60: (+1)
   \   0000070E   0x60B0             STR      R0,[R6, #+8]
   \   00000710   0xE026             B.N      ??HAL_DMA_IRQHandler_53
   \                     ??HAL_DMA_IRQHandler_59: (+1)
   \   00000712   0x.... 0x....      LDR.W    R12,??DataTable15_11  ;; 0x40026059
   \   00000716   0x4563             CMP      R3,R12
   \   00000718   0xD311             BCC.N    ??HAL_DMA_IRQHandler_61
   \   0000071A   0x.... 0x....      LDR.W    R12,??DataTable15  ;; 0x40026070
   \   0000071E   0x4563             CMP      R3,R12
   \   00000720   0xBF08             IT       EQ 
   \   00000722   0x2010             MOVEQ    R0,#+16
   \   00000724   0xD009             BEQ.N    ??HAL_DMA_IRQHandler_62
   \   00000726   0x.... 0x....      LDR.W    R12,??DataTable15_12  ;; 0x40026088
   \   0000072A   0x4563             CMP      R3,R12
   \   0000072C   0xBF08             IT       EQ 
   \   0000072E   0x4610             MOVEQ    R0,R2
   \   00000730   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_62
   \   00000732   0x....             LDR.N    R2,??DataTable15_13  ;; 0x400260a0
   \   00000734   0x4293             CMP      R3,R2
   \   00000736   0xBF08             IT       EQ 
   \   00000738   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_62: (+1)
   \   0000073A   0x60E8             STR      R0,[R5, #+12]
   \   0000073C   0xE010             B.N      ??HAL_DMA_IRQHandler_53
   \                     ??HAL_DMA_IRQHandler_61: (+1)
   \   0000073E   0x.... 0x....      LDR.W    R12,??DataTable15_14  ;; 0x40026010
   \   00000742   0x4563             CMP      R3,R12
   \   00000744   0xBF08             IT       EQ 
   \   00000746   0x2010             MOVEQ    R0,#+16
   \   00000748   0xD009             BEQ.N    ??HAL_DMA_IRQHandler_63
   \   0000074A   0x.... 0x....      LDR.W    R12,??DataTable15_15  ;; 0x40026028
   \   0000074E   0x4563             CMP      R3,R12
   \   00000750   0xBF08             IT       EQ 
   \   00000752   0x4610             MOVEQ    R0,R2
   \   00000754   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_63
   \   00000756   0x....             LDR.N    R2,??DataTable15_16  ;; 0x40026040
   \   00000758   0x4293             CMP      R3,R2
   \   0000075A   0xBF08             IT       EQ 
   \   0000075C   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_63: (+1)
   \   0000075E   0x60A8             STR      R0,[R5, #+8]
    792          
    793                  /* Change DMA peripheral state */
    794                  hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
   \                     ??HAL_DMA_IRQHandler_53: (+1)
   \   00000760   0x2031             MOVS     R0,#+49
   \                     ??HAL_DMA_IRQHandler_55: (+1)
   \   00000762   0x7078             STRB     R0,[R7, #+1]
    795                }
    796          
    797                if(hdma->XferHalfCpltCallback != NULL)
   \                     ??HAL_DMA_IRQHandler_54: (+1)
   \   00000764   0x68F9             LDR      R1,[R7, #+12]
   \   00000766   0x0008             MOVS     R0,R1
   \   00000768   0xBF1C             ITT      NE 
    798                {
    799                  /* Half transfer callback */
    800                  hdma->XferHalfCpltCallback(hdma);
   \   0000076A   0x4620             MOVNE    R0,R4
   \   0000076C   0x4788             BLXNE    R1
    801                }
    802              }
    803            }
    804            /* Transfer Complete Interrupt management ***********************************/
    805            if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
   \                     ??HAL_DMA_IRQHandler_43: (+1)
   \   0000076E   0x6823             LDR      R3,[R4, #+0]
   \   00000770   0xF04F 0x6000      MOV      R0,#+134217728
   \   00000774   0xF44F 0x1100      MOV      R1,#+2097152
   \   00000778   0xF44F 0x6200      MOV      R2,#+2048
   \   0000077C   0x469C             MOV      R12,R3
   \   0000077E   0x45CC             CMP      R12,R9
   \   00000780   0xD311             BCC.N    ??HAL_DMA_IRQHandler_64
   \   00000782   0x45C4             CMP      R12,R8
   \   00000784   0xF8D6 0xE004      LDR      LR,[R6, #+4]
   \   00000788   0xBF08             IT       EQ 
   \   0000078A   0xF04F 0x0B20      MOVEQ    R11,#+32
   \   0000078E   0xD053             BEQ.N    ??HAL_DMA_IRQHandler_65
   \   00000790   0x45D4             CMP      R12,R10
   \   00000792   0xBF08             IT       EQ 
   \   00000794   0x4693             MOVEQ    R11,R2
   \   00000796   0xD04F             BEQ.N    ??HAL_DMA_IRQHandler_65
   \   00000798   0x.... 0x....      LDR.W    R11,??DataTable15_8  ;; 0x400264a0
   \   0000079C   0x45DC             CMP      R12,R11
   \   0000079E   0xBF14             ITE      NE 
   \   000007A0   0x4683             MOVNE    R11,R0
   \   000007A2   0x468B             MOVEQ    R11,R1
   \   000007A4   0xE048             B.N      ??HAL_DMA_IRQHandler_65
   \                     ??HAL_DMA_IRQHandler_64: (+1)
   \   000007A6   0x.... 0x....      LDR.W    LR,??DataTable15_9  ;; 0x400260b9
   \   000007AA   0x45F4             CMP      R12,LR
   \   000007AC   0xD315             BCC.N    ??HAL_DMA_IRQHandler_66
   \   000007AE   0x.... 0x....      LDR.W    R11,??DataTable15_1  ;; 0x40026410
   \   000007B2   0xF8D6 0xE000      LDR      LR,[R6, #+0]
   \   000007B6   0x45DC             CMP      R12,R11
   \   000007B8   0xBF08             IT       EQ 
   \   000007BA   0xF04F 0x0B20      MOVEQ    R11,#+32
   \   000007BE   0xD03B             BEQ.N    ??HAL_DMA_IRQHandler_65
   \   000007C0   0x.... 0x....      LDR.W    R11,??DataTable15_10  ;; 0x40026428
   \   000007C4   0x45DC             CMP      R12,R11
   \   000007C6   0xBF08             IT       EQ 
   \   000007C8   0x4693             MOVEQ    R11,R2
   \   000007CA   0xD035             BEQ.N    ??HAL_DMA_IRQHandler_65
   \   000007CC   0x.... 0x....      LDR.W    R11,??DataTable15_2  ;; 0x40026440
   \   000007D0   0x45DC             CMP      R12,R11
   \   000007D2   0xBF14             ITE      NE 
   \   000007D4   0x4683             MOVNE    R11,R0
   \   000007D6   0x468B             MOVEQ    R11,R1
   \   000007D8   0xE02E             B.N      ??HAL_DMA_IRQHandler_65
   \                     ??HAL_DMA_IRQHandler_66: (+1)
   \   000007DA   0x.... 0x....      LDR.W    LR,??DataTable15_11  ;; 0x40026059
   \   000007DE   0x45F4             CMP      R12,LR
   \   000007E0   0xD315             BCC.N    ??HAL_DMA_IRQHandler_67
   \   000007E2   0x.... 0x....      LDR.W    R11,??DataTable15  ;; 0x40026070
   \   000007E6   0xF8D5 0xE004      LDR      LR,[R5, #+4]
   \   000007EA   0x45DC             CMP      R12,R11
   \   000007EC   0xBF08             IT       EQ 
   \   000007EE   0xF04F 0x0B20      MOVEQ    R11,#+32
   \   000007F2   0xD021             BEQ.N    ??HAL_DMA_IRQHandler_65
   \   000007F4   0x.... 0x....      LDR.W    R11,??DataTable15_12  ;; 0x40026088
   \   000007F8   0x45DC             CMP      R12,R11
   \   000007FA   0xBF08             IT       EQ 
   \   000007FC   0x4693             MOVEQ    R11,R2
   \   000007FE   0xD01B             BEQ.N    ??HAL_DMA_IRQHandler_65
   \   00000800   0x.... 0x....      LDR.W    R11,??DataTable15_13  ;; 0x400260a0
   \   00000804   0x45DC             CMP      R12,R11
   \   00000806   0xBF14             ITE      NE 
   \   00000808   0x4683             MOVNE    R11,R0
   \   0000080A   0x468B             MOVEQ    R11,R1
   \   0000080C   0xE014             B.N      ??HAL_DMA_IRQHandler_65
   \                     ??HAL_DMA_IRQHandler_67: (+1)
   \   0000080E   0x.... 0x....      LDR.W    R11,??DataTable15_14  ;; 0x40026010
   \   00000812   0xF8D5 0xE000      LDR      LR,[R5, #+0]
   \   00000816   0x45DC             CMP      R12,R11
   \   00000818   0xBF08             IT       EQ 
   \   0000081A   0xF04F 0x0B20      MOVEQ    R11,#+32
   \   0000081E   0xD00B             BEQ.N    ??HAL_DMA_IRQHandler_65
   \   00000820   0x.... 0x....      LDR.W    R11,??DataTable15_15  ;; 0x40026028
   \   00000824   0x45DC             CMP      R12,R11
   \   00000826   0xBF08             IT       EQ 
   \   00000828   0x4693             MOVEQ    R11,R2
   \   0000082A   0xD005             BEQ.N    ??HAL_DMA_IRQHandler_65
   \   0000082C   0x.... 0x....      LDR.W    R11,??DataTable15_16  ;; 0x40026040
   \   00000830   0x45DC             CMP      R12,R11
   \   00000832   0xBF0C             ITE      EQ 
   \   00000834   0x468B             MOVEQ    R11,R1
   \   00000836   0x4683             MOVNE    R11,R0
   \                     ??HAL_DMA_IRQHandler_65: (+1)
   \   00000838   0xEA1B 0x0E0E      ANDS     LR,R11,LR
   \   0000083C   0xD054             BEQ.N    ??HAL_DMA_IRQHandler_68
    806            {
    807              if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
   \   0000083E   0xF8D3 0xE000      LDR      LR,[R3, #+0]
   \   00000842   0xEA5F 0x6ECE      LSLS     LR,LR,#+27
   \   00000846   0xD556             BPL.N    ??HAL_DMA_IRQHandler_69
    808              {
    809                if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
   \   00000848   0xF8D3 0xE000      LDR      LR,[R3, #+0]
   \   0000084C   0xEA5F 0x3E4E      LSLS     LR,LR,#+13
   \   00000850   0xD553             BPL.N    ??HAL_DMA_IRQHandler_70
    810                {
    811                  /* Clear the transfer complete flag */
    812                  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
   \   00000852   0x45CC             CMP      R12,R9
   \   00000854   0xD30D             BCC.N    ??HAL_DMA_IRQHandler_71
   \   00000856   0x45C4             CMP      R12,R8
   \   00000858   0xBF08             IT       EQ 
   \   0000085A   0x2020             MOVEQ    R0,#+32
   \   0000085C   0xD007             BEQ.N    ??HAL_DMA_IRQHandler_72
   \   0000085E   0x45D4             CMP      R12,R10
   \   00000860   0xBF08             IT       EQ 
   \   00000862   0x4610             MOVEQ    R0,R2
   \   00000864   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_72
   \   00000866   0x....             LDR.N    R2,??DataTable15_8  ;; 0x400264a0
   \   00000868   0x4594             CMP      R12,R2
   \   0000086A   0xBF08             IT       EQ 
   \   0000086C   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_72: (+1)
   \   0000086E   0x60F0             STR      R0,[R6, #+12]
   \   00000870   0xE034             B.N      ??HAL_DMA_IRQHandler_73
   \                     ??HAL_DMA_IRQHandler_71: (+1)
   \   00000872   0x....             LDR.N    R3,??DataTable15_9  ;; 0x400260b9
   \   00000874   0x459C             CMP      R12,R3
   \   00000876   0xD30F             BCC.N    ??HAL_DMA_IRQHandler_74
   \   00000878   0x....             LDR.N    R3,??DataTable15_1  ;; 0x40026410
   \   0000087A   0x459C             CMP      R12,R3
   \   0000087C   0xBF08             IT       EQ 
   \   0000087E   0x2020             MOVEQ    R0,#+32
   \   00000880   0xD008             BEQ.N    ??HAL_DMA_IRQHandler_75
   \   00000882   0x....             LDR.N    R3,??DataTable15_10  ;; 0x40026428
   \   00000884   0x459C             CMP      R12,R3
   \   00000886   0xBF08             IT       EQ 
   \   00000888   0x4610             MOVEQ    R0,R2
   \   0000088A   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_75
   \   0000088C   0x....             LDR.N    R2,??DataTable15_2  ;; 0x40026440
   \   0000088E   0x4594             CMP      R12,R2
   \   00000890   0xBF08             IT       EQ 
   \   00000892   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_75: (+1)
   \   00000894   0x60B0             STR      R0,[R6, #+8]
   \   00000896   0xE021             B.N      ??HAL_DMA_IRQHandler_73
   \                     ??HAL_DMA_IRQHandler_74: (+1)
   \   00000898   0x....             LDR.N    R3,??DataTable15_11  ;; 0x40026059
   \   0000089A   0x459C             CMP      R12,R3
   \   0000089C   0xD30F             BCC.N    ??HAL_DMA_IRQHandler_76
   \   0000089E   0x....             LDR.N    R3,??DataTable15  ;; 0x40026070
   \   000008A0   0x459C             CMP      R12,R3
   \   000008A2   0xBF08             IT       EQ 
   \   000008A4   0x2020             MOVEQ    R0,#+32
   \   000008A6   0xD008             BEQ.N    ??HAL_DMA_IRQHandler_77
   \   000008A8   0x....             LDR.N    R3,??DataTable15_12  ;; 0x40026088
   \   000008AA   0x459C             CMP      R12,R3
   \   000008AC   0xBF08             IT       EQ 
   \   000008AE   0x4610             MOVEQ    R0,R2
   \   000008B0   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_77
   \   000008B2   0x....             LDR.N    R2,??DataTable15_13  ;; 0x400260a0
   \   000008B4   0x4594             CMP      R12,R2
   \   000008B6   0xBF08             IT       EQ 
   \   000008B8   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_77: (+1)
   \   000008BA   0x60E8             STR      R0,[R5, #+12]
   \   000008BC   0xE00E             B.N      ??HAL_DMA_IRQHandler_73
   \                     ??HAL_DMA_IRQHandler_76: (+1)
   \   000008BE   0x....             LDR.N    R3,??DataTable15_14  ;; 0x40026010
   \   000008C0   0x459C             CMP      R12,R3
   \   000008C2   0xBF08             IT       EQ 
   \   000008C4   0x2020             MOVEQ    R0,#+32
   \   000008C6   0xD008             BEQ.N    ??HAL_DMA_IRQHandler_78
   \   000008C8   0x....             LDR.N    R3,??DataTable15_15  ;; 0x40026028
   \   000008CA   0x459C             CMP      R12,R3
   \   000008CC   0xBF08             IT       EQ 
   \   000008CE   0x4610             MOVEQ    R0,R2
   \   000008D0   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_78
   \   000008D2   0x....             LDR.N    R2,??DataTable15_16  ;; 0x40026040
   \   000008D4   0x4594             CMP      R12,R2
   \   000008D6   0xBF08             IT       EQ 
   \   000008D8   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_78: (+1)
   \   000008DA   0x60A8             STR      R0,[R5, #+8]
    813          
    814                  /* Current memory buffer used is Memory 1 */
    815                  if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
   \                     ??HAL_DMA_IRQHandler_73: (+1)
   \   000008DC   0x6820             LDR      R0,[R4, #+0]
   \   000008DE   0x6801             LDR      R1,[R0, #+0]
   \   000008E0   0x0309             LSLS     R1,R1,#+12
   \   000008E2   0xD406             BMI.N    ??HAL_DMA_IRQHandler_79
    816                  {
    817                    if(hdma->XferM1CpltCallback != NULL)
   \   000008E4   0x6939             LDR      R1,[R7, #+16]
   \   000008E6   0x0008             MOVS     R0,R1
   \                     ??HAL_DMA_IRQHandler_68: (+1)
   \   000008E8   0xD066             BEQ.N    ??HAL_DMA_IRQHandler_80
    818                    {
    819                      /* Transfer complete Callback for memory1 */
    820                      hdma->XferM1CpltCallback(hdma);
   \   000008EA   0x4620             MOV      R0,R4
   \   000008EC   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   000008F0   0x4708             BX       R1
    821                    }
    822                  }
    823                  /* Current memory buffer used is Memory 0 */
    824                  else if((hdma->Instance->CR & DMA_SxCR_CT) != 0) 
   \                     ??HAL_DMA_IRQHandler_79: (+1)
   \   000008F2   0x6800             LDR      R0,[R0, #+0]
   \   000008F4   0x0300             LSLS     R0,R0,#+12
   \                     ??HAL_DMA_IRQHandler_69: (+1)
   \   000008F6   0xD55F             BPL.N    ??HAL_DMA_IRQHandler_80
    825                  {
    826                    if(hdma->XferCpltCallback != NULL)
   \   000008F8   0xE057             B.N      ??HAL_DMA_IRQHandler_81
    827                    {
    828                      /* Transfer complete Callback for memory0 */
    829                      hdma->XferCpltCallback(hdma);
    830                    }
    831                  }
    832                }
    833                /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
    834                else
    835                {
    836                  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
   \                     ??HAL_DMA_IRQHandler_70: (+1)
   \   000008FA   0xF8D3 0xC000      LDR      R12,[R3, #+0]
   \   000008FE   0xEA5F 0x5CCC      LSLS     R12,R12,#+23
   \   00000902   0xD405             BMI.N    ??HAL_DMA_IRQHandler_82
    837                  {
    838                    /* Disable the transfer complete interrupt */
    839                    __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
   \   00000904   0xF8D3 0xC000      LDR      R12,[R3, #+0]
   \   00000908   0xF02C 0x0C10      BIC      R12,R12,#0x10
   \   0000090C   0xF8C3 0xC000      STR      R12,[R3, #+0]
    840                  }
    841                  /* Clear the transfer complete flag */
    842                  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
   \                     ??HAL_DMA_IRQHandler_82: (+1)
   \   00000910   0x6823             LDR      R3,[R4, #+0]
   \   00000912   0x454B             CMP      R3,R9
   \   00000914   0xD30D             BCC.N    ??HAL_DMA_IRQHandler_83
   \   00000916   0x4543             CMP      R3,R8
   \   00000918   0xBF08             IT       EQ 
   \   0000091A   0x2020             MOVEQ    R0,#+32
   \   0000091C   0xD007             BEQ.N    ??HAL_DMA_IRQHandler_84
   \   0000091E   0x4553             CMP      R3,R10
   \   00000920   0xBF08             IT       EQ 
   \   00000922   0x4610             MOVEQ    R0,R2
   \   00000924   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_84
   \   00000926   0x....             LDR.N    R2,??DataTable15_8  ;; 0x400264a0
   \   00000928   0x4293             CMP      R3,R2
   \   0000092A   0xBF08             IT       EQ 
   \   0000092C   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_84: (+1)
   \   0000092E   0x60F0             STR      R0,[R6, #+12]
   \   00000930   0xE035             B.N      ??HAL_DMA_IRQHandler_85
   \                     ??HAL_DMA_IRQHandler_83: (+1)
   \   00000932   0x.... 0x....      LDR.W    R10,??DataTable15_9  ;; 0x400260b9
   \   00000936   0x4553             CMP      R3,R10
   \   00000938   0xD30F             BCC.N    ??HAL_DMA_IRQHandler_86
   \   0000093A   0x....             LDR.N    R5,??DataTable15_1  ;; 0x40026410
   \   0000093C   0x42AB             CMP      R3,R5
   \   0000093E   0xBF08             IT       EQ 
   \   00000940   0x2020             MOVEQ    R0,#+32
   \   00000942   0xD008             BEQ.N    ??HAL_DMA_IRQHandler_87
   \   00000944   0x....             LDR.N    R5,??DataTable15_10  ;; 0x40026428
   \   00000946   0x42AB             CMP      R3,R5
   \   00000948   0xBF08             IT       EQ 
   \   0000094A   0x4610             MOVEQ    R0,R2
   \   0000094C   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_87
   \   0000094E   0x....             LDR.N    R2,??DataTable15_2  ;; 0x40026440
   \   00000950   0x4293             CMP      R3,R2
   \   00000952   0xBF08             IT       EQ 
   \   00000954   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_87: (+1)
   \   00000956   0x60B0             STR      R0,[R6, #+8]
   \   00000958   0xE021             B.N      ??HAL_DMA_IRQHandler_85
   \                     ??HAL_DMA_IRQHandler_86: (+1)
   \   0000095A   0x....             LDR.N    R6,??DataTable15_11  ;; 0x40026059
   \   0000095C   0x42B3             CMP      R3,R6
   \   0000095E   0xD30F             BCC.N    ??HAL_DMA_IRQHandler_88
   \   00000960   0x....             LDR.N    R6,??DataTable15  ;; 0x40026070
   \   00000962   0x42B3             CMP      R3,R6
   \   00000964   0xBF08             IT       EQ 
   \   00000966   0x2020             MOVEQ    R0,#+32
   \   00000968   0xD008             BEQ.N    ??HAL_DMA_IRQHandler_89
   \   0000096A   0x....             LDR.N    R6,??DataTable15_12  ;; 0x40026088
   \   0000096C   0x42B3             CMP      R3,R6
   \   0000096E   0xBF08             IT       EQ 
   \   00000970   0x4610             MOVEQ    R0,R2
   \   00000972   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_89
   \   00000974   0x....             LDR.N    R2,??DataTable15_13  ;; 0x400260a0
   \   00000976   0x4293             CMP      R3,R2
   \   00000978   0xBF08             IT       EQ 
   \   0000097A   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_89: (+1)
   \   0000097C   0x60E8             STR      R0,[R5, #+12]
   \   0000097E   0xE00E             B.N      ??HAL_DMA_IRQHandler_85
   \                     ??HAL_DMA_IRQHandler_88: (+1)
   \   00000980   0x....             LDR.N    R6,??DataTable15_14  ;; 0x40026010
   \   00000982   0x42B3             CMP      R3,R6
   \   00000984   0xBF08             IT       EQ 
   \   00000986   0x2020             MOVEQ    R0,#+32
   \   00000988   0xD008             BEQ.N    ??HAL_DMA_IRQHandler_90
   \   0000098A   0x....             LDR.N    R6,??DataTable15_15  ;; 0x40026028
   \   0000098C   0x42B3             CMP      R3,R6
   \   0000098E   0xBF08             IT       EQ 
   \   00000990   0x4610             MOVEQ    R0,R2
   \   00000992   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_90
   \   00000994   0x....             LDR.N    R2,??DataTable15_16  ;; 0x40026040
   \   00000996   0x4293             CMP      R3,R2
   \   00000998   0xBF08             IT       EQ 
   \   0000099A   0x4608             MOVEQ    R0,R1
   \                     ??HAL_DMA_IRQHandler_90: (+1)
   \   0000099C   0x60A8             STR      R0,[R5, #+8]
    843          
    844                  /* Update error code */
    845                  hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
   \                     ??HAL_DMA_IRQHandler_85: (+1)
   \   0000099E   0x69B8             LDR      R0,[R7, #+24]
   \   000009A0   0x61B8             STR      R0,[R7, #+24]
    846          
    847                  /* Change the DMA state */
    848                  hdma->State = HAL_DMA_STATE_READY_MEM0;
   \   000009A2   0x2011             MOVS     R0,#+17
   \   000009A4   0x7078             STRB     R0,[R7, #+1]
    849          
    850                  /* Process Unlocked */
    851                  __HAL_UNLOCK(hdma);      
   \   000009A6   0x2000             MOVS     R0,#+0
   \   000009A8   0x7038             STRB     R0,[R7, #+0]
    852          
    853                  if(hdma->XferCpltCallback != NULL)
   \                     ??HAL_DMA_IRQHandler_81: (+1)
   \   000009AA   0x68B9             LDR      R1,[R7, #+8]
   \   000009AC   0x0008             MOVS     R0,R1
   \   000009AE   0xD003             BEQ.N    ??HAL_DMA_IRQHandler_80
    854                  {
    855                    /* Transfer complete callback */
    856                    hdma->XferCpltCallback(hdma);
   \   000009B0   0x4620             MOV      R0,R4
   \   000009B2   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   000009B6   0x4708             BX       R1
    857                  }
    858                }
    859              }
    860            }
    861          }
   \                     ??HAL_DMA_IRQHandler_80: (+1)
   \   000009B8   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    862          
    863          /**
    864            * @}
    865            */
    866          
    867          /** @addtogroup DMA_Exported_Functions_Group3
    868            *
    869          @verbatim
    870           ===============================================================================
    871                              ##### State and Errors functions #####
    872           ===============================================================================
    873              [..]
    874              This subsection provides functions allowing to
    875                (+) Check the DMA state
    876                (+) Get error code
    877          
    878          @endverbatim
    879            * @{
    880            */
    881          
    882          /**
    883            * @brief  Returns the DMA state.
    884            * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
    885            *               the configuration information for the specified DMA Stream.
    886            * @retval HAL state
    887            */

   \                                 In section .text, align 2, keep-with-next
    888          HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
    889          {
    890            return hdma->State;
   \                     HAL_DMA_GetState: (+1)
   \   00000000   0xF890 0x0035      LDRB     R0,[R0, #+53]
   \   00000004   0x4770             BX       LR               ;; return
    891          }
    892          
    893          /**
    894            * @brief  Return the DMA error code
    895            * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
    896            *              the configuration information for the specified DMA Stream.
    897            * @retval DMA Error Code
    898            */

   \                                 In section .text, align 2, keep-with-next
    899          uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
    900          {
    901            return hdma->ErrorCode;
   \                     HAL_DMA_GetError: (+1)
   \   00000000   0x6CC0             LDR      R0,[R0, #+76]
   \   00000002   0x4770             BX       LR               ;; return
    902          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0xF010803F         DC32     0xf010803f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40026459         DC32     0x40026459

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x400260B9         DC32     0x400260b9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x400264A0         DC32     0x400264a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40026488         DC32     0x40026488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x00800004         DC32     0x800004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x40026470         DC32     0x40026470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x40026008         DC32     0x40026008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x40026408         DC32     0x40026408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40026410         DC32     0x40026410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40026428         DC32     0x40026428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40026440         DC32     0x40026440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x40026059         DC32     0x40026059

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x40026070         DC32     0x40026070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x40026088         DC32     0x40026088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x400260A0         DC32     0x400260a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x40026010         DC32     0x40026010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x40026028         DC32     0x40026028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x40026040         DC32     0x40026040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x00800001         DC32     0x800001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x40026470         DC32     0x40026470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x40026488         DC32     0x40026488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x400264A0         DC32     0x400264a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x40026000         DC32     0x40026000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x40026400         DC32     0x40026400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x40026459         DC32     0x40026459

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x400260B9         DC32     0x400260b9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x00800004         DC32     0x800004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x40026070         DC32     0x40026070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x40026410         DC32     0x40026410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x40026440         DC32     0x40026440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x40026459         DC32     0x40026459

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \   00000000   0x40026000         DC32     0x40026000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \   00000000   0x40026400         DC32     0x40026400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \   00000000   0x40026488         DC32     0x40026488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \   00000000   0x40026470         DC32     0x40026470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \   00000000   0x400264A0         DC32     0x400264a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_9:
   \   00000000   0x400260B9         DC32     0x400260b9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_10:
   \   00000000   0x40026428         DC32     0x40026428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_11:
   \   00000000   0x40026059         DC32     0x40026059

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_12:
   \   00000000   0x40026088         DC32     0x40026088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_13:
   \   00000000   0x400260A0         DC32     0x400260a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_14:
   \   00000000   0x40026010         DC32     0x40026010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_15:
   \   00000000   0x40026028         DC32     0x40026028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_16:
   \   00000000   0x40026040         DC32     0x40026040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_17:
   \   00000000   0x00800001         DC32     0x800001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_18:
   \   00000000   0x00800004         DC32     0x800004
    903          
    904          /**
    905            * @}
    906            */
    907          
    908          /**
    909            * @}
    910            */
    911          
    912          #endif /* HAL_DMA_MODULE_ENABLED */
    913          /**
    914            * @}
    915            */
    916          
    917          /**
    918            * @}
    919            */
    920          
    921          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   DMA_SetConfig
      16   HAL_DMA_Abort
        16   -> HAL_GetTick
      36   HAL_DMA_DeInit
       0   HAL_DMA_GetError
       0   HAL_DMA_GetState
      40   HAL_DMA_IRQHandler
         0   -- Indirect call
        40   -- Indirect call
       8   HAL_DMA_Init
      56   HAL_DMA_PollForTransfer
        56   -> HAL_GetTick
      16   HAL_DMA_Start
        16   -> DMA_SetConfig
      16   HAL_DMA_Start_IT
        16   -> DMA_SetConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable12
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_12
       4  ??DataTable15_13
       4  ??DataTable15_14
       4  ??DataTable15_15
       4  ??DataTable15_16
       4  ??DataTable15_17
       4  ??DataTable15_18
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable4
       4  ??DataTable5
       4  ??DataTable6
       4  ??DataTable7
       4  ??DataTable8
      14  ?Subroutine0
      12  ?Subroutine1
       8  ?Subroutine10
       8  ?Subroutine11
       6  ?Subroutine12
       6  ?Subroutine13
       6  ?Subroutine14
      10  ?Subroutine15
       6  ?Subroutine16
       6  ?Subroutine17
      22  ?Subroutine2
       6  ?Subroutine3
       8  ?Subroutine4
       6  ?Subroutine5
       8  ?Subroutine6
      10  ?Subroutine7
      10  ?Subroutine8
      10  ?Subroutine9
      30  DMA_SetConfig
      80  HAL_DMA_Abort
    1026  HAL_DMA_DeInit
       4  HAL_DMA_GetError
       6  HAL_DMA_GetState
    2492  HAL_DMA_IRQHandler
     108  HAL_DMA_Init
    2200  HAL_DMA_PollForTransfer
      18  HAL_DMA_Start
      66  HAL_DMA_Start_IT

 
 6 380 bytes in section .text
 
 6 380 bytes of CODE memory

Errors: none
Warnings: none
