###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       12/Apr/2016  09:55:47
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\sta321mp.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\sta321mp.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\sta321mp.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\sta321mp.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\sta321mp.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          /* Description: Driver for STA321MP */
      8          
      9          #include "sta321mp.h"
     10          #include "main.h"
     11          #include <stdio.h>
     12          #include <stdlib.h>
     13          
     14          static void sta321mp_mixer( int16_t mix, int16_t ch_out, int16_t ch_in, uint32_t value);
     15          static void sta321mp_prescale(int16_t ch, uint32_t val);
     16          static void sta321mp_postscale(int16_t ch, uint32_t val);
     17          static void sta321mp_LP_48kHz(void);
     18          static void sta321mp_LP_192kHz(void);
     19          static void STA321MP_DefautLoad(void);
     20          static void sta321mp_biquad(int16_t channel, int16_t biquad, 
     21                                      uint32_t b1_2, uint32_t b2, uint32_t a1_2, uint32_t a2, uint32_t b0_2);
     22          
     23          
     24          extern I2C_HandleTypeDef hi2c2;

   \                                 In section .data, align 4
     25          uint8_t  pcSTAComnd[77]={/* Pre-setting */
     26          0x9B,//	Reg[00h]<=83h (10000011b)	Configuration Register A
     27          0x00,//	Reg[01h]<=00h (00000000b)	Configuration Register B
     28          0x25,//	Reg[02h]<=00h (00000000b)	Configuration Register C
     29          0xFE,//	Reg[03h]<=FEh (11111110b)	Configuration Register D
     30          0x18,//	Reg[04h]<=00h (00000000b)	Configuration Register E
     31          0x00,//	Reg[05h]<=00h (00000000b)	Configuration Register F
     32          0x00,//	Reg[06h]<=00h (00000000b)	Configuration Register G
     33          0x7E,//	Reg[07h]<=7Eh (01111110b)	Configuration Register H
     34          0x80,//	Reg[08h]<=00h (00000000b)	Configuration Register I
     35          0x00,//	Reg[09h]<=00h (00000000b)	Master Mute
     36          0x00,//	Reg[0Ah]<=FFh (11111111b)	Master Volume
     37          0x54,//	Reg[0Bh]<=60h (01100000b)	Channel 1 Volume
     38          0x54,//	Reg[0Ch]<=60h (01100000b)	Channel 2 Volume
     39          0x60,//	Reg[0Dh]<=60h (01100000b)	Channel 3 Volume
     40          0x48,//	Reg[0Eh]<=60h (01100000b)	Channel 4 Volume
     41          0x48,//	Reg[0Fh]<=60h (01100000b)	Channel 5 Volume
     42          0x60,//	Reg[10h]<=60h (01100000b)	Channel 6 Volume
     43          0x60,//	Reg[11h]<=60h (01100000b)	Channel 7 Volume
     44          0x60,//	Reg[12h]<=60h (01100000b)	Channel 8 Volume
     45          0x10,//	Reg[13h]<=10h (00010000b)	Channel 1 Mute, VolBP, Trim
     46          0x10,//	Reg[14h]<=10h (00010000b)	Channel 2 Mute, VolBP, Trim
     47          0x10,//	Reg[15h]<=10h (00010000b)	Channel 3 Mute, VolBP, Trim
     48          0x10,//	Reg[16h]<=10h (00010000b)	Channel 4 Mute, VolBP, Trim
     49          0x10,//	Reg[17h]<=10h (00010000b)	Channel 5 Mute, VolBP, Trim
     50          0x10,//	Reg[18h]<=10h (00010000b)	Channel 6 Mute, VolBP, Trim
     51          0x10,//	Reg[19h]<=10h (00010000b)	Channel 7 Mute, VolBP, Trim
     52          0x10,//	Reg[1Ah]<=10h (00010000b)	Channel 8 Mute, VolBP, Trim
     53          0x10,//	Reg[1Bh]<=10h (00010000b)	Channel 1 & 2 Input Mapping
     54          0x32,//	Reg[1Ch]<=32h (00110010b)	Channel 3 & 4 Input Mapping
     55          0x54,//	Reg[1Dh]<=54h (01010100b)	Channel 5 & 6 Input Mapping
     56          0x76,//	Reg[1Eh]<=76h (01110110b)	Channel 7 & 8 Input Mapping
     57          0x00,//	Reg[1Fh]<=00h (00000000b)	Auto Mode DM, GC, Volume, EQ
     58          0x80,//	Reg[20h]<=80h (10000000b)	Auto Mode Bass Management
     59          0x01,//	Reg[21h]<=01h (00000001b)	Auto Mode AM
     60          0xA0,//	Reg[22h]<=A0h (10100000b)	Preset EQ
     61          0x0F,//	Reg[23h]<=0Fh (00001111b)	Graphic EQ Band A
     62          0x0F,//	Reg[24h]<=0Fh (00001111b)	Graphic EQ Band B
     63          0x0F,//	Reg[25h]<=0Fh (00001111b)	Graphic EQ Band C
     64          0x0F,//	Reg[26h]<=0Fh (00001111b)	Graphic EQ Band D
     65          0x0F,//	Reg[27h]<=0Fh (00001111b)	Graphic EQ Band E
     66          0x00,//	Reg[28h]<=00h (00000000b)	Channel Filter Loop
     67          0x00,//	Reg[29h]<=00h (00000000b)	Channel Mix Loop
     68          0x00,//	Reg[2Ah]<=00h (00000000b)	Channel EQ Bypass
     69          0x00,//	Reg[2Bh]<=00h (00000000b)	Channel Tone Control Bypass
     70          0x77,//	Reg[2Ch]<=77h (01110111b)	Bass and Treble Tone Control
     71          0x00,//	Reg[2Dh]<=00h (00000000b)	Channel 1, 2, 3, 4 Limiter Select
     72          0x00,//	Reg[2Eh]<=00h (00000000b)	Channel 5, 6, 7, 8 Limiter Select
     73          0x6A,//	Reg[2Fh]<=6Ah (01101010b)	Limiter 1 Attack/Release Rate
     74          0x69,//	Reg[30h]<=69h (01101001b)	Limiter 1 Attack/Release Threshold
     75          0x6A,//	Reg[31h]<=6Ah (01101010b)	Limiter 2 Attack/Release Rate
     76          0x69,//	Reg[32h]<=69h (01101001b)	Limiter 2 Attack/Release Threshold
     77          0x40,//	Reg[33h]<=40h (01000000b)	PWM 1 & 2 Output Timing
     78          0x62,//	Reg[34h]<=62h (01100010b)	PWM 3 & 4 Output Timing
     79          0x51,//	Reg[35h]<=51h (01010001b)	PWM 5 & 6 Output Timing
     80          0x73,//	Reg[36h]<=73h (01110011b)	PWM 7 & 8 Output Timing
     81          0x10,//	Reg[37h]<=10h (00010000b)	I2S 1 & 2 Output Mapping
     82          0x32,//	Reg[38h]<=32h (00110010b)	I2S 3 & 4 Output Mapping
     83          0x54,//	Reg[39h]<=54h (01010100b)	I2S 5 & 6 Output Mapping
     84          0x76,//	Reg[3Ah]<=76h (01110110b)	I2S 7 & 8 Output Mapping
     85          0x00,//	Reg[3Bh]<=00h (00000000b)	Coefficient Address Bits 9..8
     86          0x00,//	Reg[3Ch]<=00h (00000000b)	Coefficient Address Bits 7..0
     87          0x00,//	Reg[3Dh]<=00h (00000000b)	Coefficient b1 Data Bits 23..16
     88          0x00,//	Reg[3Eh]<=00h (00000000b)	Coefficient b1 Data Bits 15..8
     89          0x00,//	Reg[3Fh]<=00h (00000000b)	Coefficient b1 Data Bits 7..0
     90          0x00,//	Reg[40h]<=00h (00000000b)	Coefficient b2 Data Bits 23..16
     91          0x00,//	Reg[41h]<=00h (00000000b)	Coefficient b2 Data Bits 15..8
     92          0x00,//	Reg[42h]<=00h (00000000b)	Coefficient b2 Data Bits 7..0
     93          0x00,//	Reg[43h]<=00h (00000000b)	Coefficient a1 Data Bits 23..16
     94          0x00,//	Reg[44h]<=00h (00000000b)	Coefficient a1 Data Bits 15..8
     95          0x00,//	Reg[45h]<=00h (00000000b)	Coefficient a1 Data Bits 7..0
     96          0x00,//	Reg[46h]<=00h (00000000b)	Coefficient a2 Data Bits 23..16
     97          0x00,//	Reg[47h]<=00h (00000000b)	Coefficient a2 Data Bits 15..8
     98          0x00,//	Reg[48h]<=00h (00000000b)	Coefficient a2 Data Bits 7..0
     99          0x40,//	Reg[49h]<=40h (01000000b)	Coefficient b0 Data Bits 23..16
    100          0x00,//	Reg[4Ah]<=00h (00000000b)	Coefficient b0 Data Bits 15..8
    101          0x00,//	Reg[4Bh]<=00h (00000000b)	Coefficient b0 Data Bits 7..0
    102          0x00//	Reg[4Ch]<=00h (00000000b)	Coefficient Write Control
    103          };
    104          
    105          uint8_t  pcSTAComnd1[2]={/* Pre-setting */
    106          0x00,//	Reg[5Ah]<=00h (00000000b)	Extended Limiter/DRC look-up table 
    107          0x00,//	Reg[5Bh]<=00h (00000000b)	Fine volume         
    108          };
    109          
    110          uint8_t  pcSTAComnd2[33]={/* Pre-setting */
    111          0x01,//	Reg[5Dh]<=00h (00000000b)	PCM Recombination Control 1        
    112          0x00,//	Reg[5Eh]<=00h (00000000b)	PCM Recombination Mode selector    
    113          0x20,//	Reg[5Fh]<=20h (00100000b)	PCM Recombination Control 2        
    114          0x20,//	Reg[60h]<=20h (00100000b)	PCM Recombination Control 3        
    115          0x20,//	Reg[61h]<=20h (00100000b)	PCM Recombination Control 4        
    116          0x60,//	Reg[62h]<=60h (01100000b)	PCM Recombination Control 5        
    117          0x60,//	Reg[63h]<=60h (01100000b)	PCM Recombination Control 6        
    118          0x60,//	Reg[64h]<=60h (01100000b)	PCM Recombination Control 7        
    119          0x33,//	Reg[65h]<=33h (00110011b)	PCM Recombination Control 8        
    120          0x33,//	Reg[66h]<=33h (00110011b)	PCM Recombination Control 9        
    121          0x33,//	Reg[67h]<=33h (00110011b)	PCM Recombination Control 10       
    122          0x1B,//	Reg[68h]<=1Bh (00011011b)	PCM Recombination Control 11       
    123          0x1B,//	Reg[69h]<=1Bh (00011011b)	PCM Recombination Control 12       
    124          0x1B,//	Reg[6Ah]<=1Bh (00011011b)	PCM Recombination Control 13       
    125          0x30,//	Reg[6Bh]<=30h (00110000b)	Extended Limiter 1 Attack Threshold
    126          0x30,//	Reg[6Ch]<=30h (00110000b)	Extended Limiter 2 Attack Threshold
    127          0x2F,//	Reg[6Dh]<=2Fh (00101111b)	Extended Limiter 1 Release Threshold
    128          0x2F,//	Reg[6Eh]<=2Fh (00101111b)	Extended Limiter 2 Release Threshold
    129          0x00,//	Reg[6Fh]<=00h (00000000b)	RMS Automuting Thresholds          
    130          0x00,//	Reg[70h]<=00h (00000000b)	RMS Control                        
    131          0x00,//	Reg[71h]<=00h (00000000b)	PLL Fractional 1 Control           
    132          0x00,//	Reg[72h]<=00h (00000000b)	PLL Fractional 0 Control           
    133          0x00,//	Reg[73h]<=00h (00000000b)	PLL Divider                        
    134          0x00,//	Reg[74h]<=00h (00000000b)	PLL Configuration 0                
    135          0x00,//	Reg[75h]<=00h (00000000b)	PLL Configuration 1                
    136          0x02,//	Reg[76h]<=02h (00000010b)	PLL Status                         
    137          0x00,//	Reg[77h]<=00h (00000000b)	Extended Biquad range Control 1    
    138          0x00,//	Reg[78h]<=00h (00000000b)	Extended Biquad range Control 2    
    139          0x10,//	Reg[79h]<=10h (00010000b)	Extended Biquad range Control 3    
    140          0xA2,//	Reg[7Ah]<=A2h (10100010b)	RMS Status Register ZD (High)      
    141          0xE9,//	Reg[7Bh]<=E9h (11101001b)	RMS Status Register ZD (Low)       
    142          0x00,//	Reg[7Ch]<=00h (00000000b)	RMS Status PWM level (High)        
    143          0x00,//	Reg[7Dh]<=00h (00000000b)	RMS Status PWM level (Low)   
    144          };
    145          
    146          uint8_t  pcSTAComnd3[6]={/* Pre-setting */
    147          0x18,//	Reg[80h]<=18h (00011000b)	DPT                                
    148          0x05,//	Reg[81h]<=05h (00000101b)	CFR129                             
    149          0x00,//	Reg[82h]<=00h (00000000b)	Pop suppression delay time 1       
    150          0xFF,//	Reg[83h]<=FFh (11111111b)	Pop suppression delay time 2       
    151          0x00,//	Reg[84h]<=00h (00000000b)	OTP readback 1/2                   
    152          0x00//	Reg[85h]<=00h (00000000b)	OTP readback 2/2
    153          };    
    154          
    155          GPIO_InitTypeDef GPIO_STA;
    156          uint8_t bufCoefBiquad[15];
   \                     bufCoefBiquad:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     GPIO_STA:
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     pcSTAComnd:
   \   00000024   0x9B 0x00          DC8 155, 0, 37, 254, 24, 0, 0, 126, 128, 0, 0, 84, 84, 96, 72, 72, 96
   \              0x25 0xFE    
   \              0x18 0x00    
   \              0x00 0x7E    
   \              0x80 0x00    
   \              0x00 0x54    
   \              0x54 0x60    
   \              0x48 0x48    
   \              0x60         
   \   00000035   0x60 0x60          DC8 96, 96, 16, 16, 16, 16, 16, 16, 16, 16, 16, 50, 84, 118, 0, 128, 1
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x32    
   \              0x54 0x76    
   \              0x00 0x80    
   \              0x01         
   \   00000046   0xA0 0x0F          DC8 160, 15, 15, 15, 15, 15, 0, 0, 0, 0, 119, 0, 0, 106, 105, 106, 105
   \              0x0F 0x0F    
   \              0x0F 0x0F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x77 0x00    
   \              0x00 0x6A    
   \              0x69 0x6A    
   \              0x69         
   \   00000057   0x40 0x62          DC8 64, 98, 81, 115, 16, 50, 84, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x51 0x73    
   \              0x10 0x32    
   \              0x54 0x76    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000006A   0x00 0x00          DC8 0, 0, 0, 64, 0, 0, 0, 0, 0, 0
   \              0x00 0x40    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     pcSTAComnd1:
   \   00000074   0x00 0x00          DC8 0, 0
   \   00000076   0x00 0x00          DC8 0, 0
   \                     pcSTAComnd2:
   \   00000078   0x01 0x00          DC8 1, 0, 32, 32, 32, 96, 96, 96, 51, 51, 51, 27, 27, 27, 48, 48, 47
   \              0x20 0x20    
   \              0x20 0x60    
   \              0x60 0x60    
   \              0x33 0x33    
   \              0x33 0x1B    
   \              0x1B 0x1B    
   \              0x30 0x30    
   \              0x2F         
   \   00000089   0x2F 0x00          DC8 47, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 16, 162, 233, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x00    
   \              0x00 0x10    
   \              0xA2 0xE9    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .data, align 4
   \                     pcSTAComnd3:
   \   00000000   0x18 0x05          DC8 24, 5, 0, 255, 0, 0, 0, 0
   \              0x00 0xFF    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
    157          void STA321MP_Ini(void)
    158          {
   \                     STA321MP_Ini: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
    159          
    160               __GPIOC_CLK_ENABLE();
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable5  ;; 0x40023830
    161               GPIO_STA.Pin = GPIO_PIN_0;
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable5_1
    162               GPIO_STA.Mode = GPIO_MODE_OUTPUT_PP;
    163               GPIO_STA.Pull = GPIO_PULLUP;
    164               GPIO_STA.Speed = GPIO_SPEED_LOW;
    165               HAL_GPIO_Init(GPIOC, &GPIO_STA);
   \   00000012   0x.... 0x....      LDR.W    R8,??DataTable5_2  ;; 0x40020800
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   \   00000018   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000001C   0x6001             STR      R1,[R0, #+0]
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF104 0x0110      ADD      R1,R4,#+16
   \   00000024   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x9800             LDR      R0,[SP, #+0]
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x6120             STR      R0,[R4, #+16]
   \   00000030   0x6160             STR      R0,[R4, #+20]
   \   00000032   0x61A0             STR      R0,[R4, #+24]
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x61E0             STR      R0,[R4, #+28]
   \   00000038   0x4640             MOV      R0,R8
   \   0000003A   0x.... 0x....      BL       HAL_GPIO_Init
    166          
    167          
    168          
    169          	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
   \   0000003E   0x2200             MOVS     R2,#+0
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x4640             MOV      R0,R8
   \   00000044   0x.... 0x....      BL       HAL_GPIO_WritePin
    170               HAL_Delay(300);
   \   00000048   0xF44F 0x7096      MOV      R0,#+300
   \   0000004C   0x.... 0x....      BL       HAL_Delay
    171               HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
   \   00000050   0x2201             MOVS     R2,#+1
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x4640             MOV      R0,R8
   \   00000056   0xF04F 0x08FF      MOV      R8,#+255
   \   0000005A   0x.... 0x....      BL       HAL_GPIO_WritePin
    172               HAL_Delay(300);
   \   0000005E   0xF44F 0x7096      MOV      R0,#+300
   \   00000062   0x.... 0x....      BL       HAL_Delay
    173          
    174          	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
   \   00000066   0x2201             MOVS     R2,#+1
   \   00000068   0x2108             MOVS     R1,#+8
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable5_3  ;; 0x40021000
   \   0000006E   0x.... 0x....      BL       HAL_GPIO_WritePin
    175          	  //HAL_Delay(300);	 
    176          
    177                STA321MP_DefautLoad();
   \   00000072   0x224D             MOVS     R2,#+77
   \   00000074   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x.... 0x....      BL       WriteSTAByte
   \   0000007E   0x2202             MOVS     R2,#+2
   \   00000080   0xF104 0x0174      ADD      R1,R4,#+116
   \   00000084   0x205A             MOVS     R0,#+90
   \   00000086   0x.... 0x....      BL       WriteSTAByte
   \   0000008A   0x2221             MOVS     R2,#+33
   \   0000008C   0xF104 0x0178      ADD      R1,R4,#+120
   \   00000090   0x205D             MOVS     R0,#+93
   \   00000092   0x.... 0x....      BL       WriteSTAByte
   \   00000096   0x2206             MOVS     R2,#+6
   \   00000098   0xF104 0x0178      ADD      R1,R4,#+120
   \   0000009C   0x2080             MOVS     R0,#+128
   \   0000009E   0x.... 0x....      BL       WriteSTAByte
    178                pcSTAComnd[0] = 0x98;//PDM_I_EN;          // PDM_CLK =  12.288 /4 = 3.072 Mhz  XTI = PLL/8 = 12.288 MHz		                       
   \   000000A2   0x2098             MOVS     R0,#+152
    179                WriteSTAByte(STA321MP_CONFA	,pcSTAComnd,1); //CONFA register
   \   000000A4   0x2201             MOVS     R2,#+1
   \   000000A6   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000000AA   0xF104 0x0124      ADD      R1,R4,#+36
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      BL       WriteSTAByte
    180          	    
    181                pcSTAComnd[0] = FS_XTI_256|RIGHTJUST_DATA_FORMAT;  /* 12.288Mhz/256 = 48 Khz --> BICKO = 32*48Khz = 6.144/4 Mhz*/
   \   000000B4   0x2025             MOVS     R0,#+37
    182                WriteSTAByte(STA321MP_CONFC,pcSTAComnd,1); //CONFC register
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000000BC   0xF104 0x0124      ADD      R1,R4,#+36
   \   000000C0   0x2002             MOVS     R0,#+2
   \   000000C2   0x.... 0x....      BL       WriteSTAByte
    183                   
    184          
    185                /*
    186                D7     D6      D5     D4     D3     D2     D1     D0
    187                MPC  CSZ4  CSZ3 CSZ2 CSZ1 CSZ0 OM1 OM0
    188                11111110
    189                OM0-OM1: FFX output mode
    190                CSZ[4:0] Compensating pulse size
    191                */
    192                ////pcSTAComnd[0] = 0xFE;  
    193                ////WriteSTAByte(STA321MP_CONFD,pcSTAComnd,1); //CONFD register
    194          		
    195                 pcSTAComnd[0] =  0xC0; //0x18;//Ch4/5 binary 0xC0
   \   000000C6   0x20C0             MOVS     R0,#+192
    196                 WriteSTAByte(STA321MP_CONFE,pcSTAComnd,1); //CONFE register
   \   000000C8   0x2201             MOVS     R2,#+1
   \   000000CA   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000000CE   0xF104 0x0124      ADD      R1,R4,#+36
   \   000000D2   0x2004             MOVS     R0,#+4
   \   000000D4   0x.... 0x....      BL       WriteSTAByte
    197                  
    198          
    199                  pcSTAComnd[0] = 0x18|CONF_HPENA; //0x18 CONF_HPENA
   \   000000D8   0x2019             MOVS     R0,#+25
    200                  WriteSTAByte(STA321MP_CONFF,pcSTAComnd,1); //CONFE register
   \   000000DA   0x2201             MOVS     R2,#+1
   \   000000DC   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000000E0   0xF104 0x0124      ADD      R1,R4,#+36
   \   000000E4   0x2005             MOVS     R0,#+5
   \   000000E6   0x.... 0x....      BL       WriteSTAByte
    201          		
    202          
    203                ////pcSTAComnd[0] = 0x00;
    204                ////WriteSTAByte(0x06,pcSTAComnd,1); //CONFG register
    205          
    206          
    207                pcSTAComnd[0] = 0x78;                //Reg[07h]<=7Ch (01111010b)	Configuration Register H:remove soft volumn
   \   000000EA   0x2078             MOVS     R0,#+120
    208                WriteSTAByte(STA321MP_CONFH	,pcSTAComnd,1); //CONFH register
   \   000000EC   0x2201             MOVS     R2,#+1
   \   000000EE   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000000F2   0xF104 0x0124      ADD      R1,R4,#+36
   \   000000F6   0x2007             MOVS     R0,#+7
   \   000000F8   0x.... 0x....      BL       WriteSTAByte
    209          
    210          
    211                  pcSTAComnd[0] = POWERDWNNOTACTV;
   \   000000FC   0x2080             MOVS     R0,#+128
    212                  WriteSTAByte(STA321MP_CONFI,pcSTAComnd,1);//CONFI register
   \   000000FE   0x2201             MOVS     R2,#+1
   \   00000100   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000104   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000108   0x2008             MOVS     R0,#+8
   \   0000010A   0x.... 0x....      BL       WriteSTAByte
    213          		
    214                  pcSTAComnd[0] = 0x00;/* Reg[0Ah]<=00h (00000000b)	Master Volume */    
   \   0000010E   0x2000             MOVS     R0,#+0
    215                  WriteSTAByte(STA321MP_MVOL,pcSTAComnd,1);
   \   00000110   0x2201             MOVS     R2,#+1
   \   00000112   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000116   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000011A   0x200A             MOVS     R0,#+10
   \   0000011C   0x.... 0x....      BL       WriteSTAByte
    216                  
    217                  pcSTAComnd[0] = MIC_VOL;
   \   00000120   0x2036             MOVS     R0,#+54
    218                  pcSTAComnd[1] = MIC_VOL;
    219                  pcSTAComnd[2] = MIC_VOL;
    220                  pcSTAComnd[3] = MIC_VOL; 
    221                  pcSTAComnd[4] = MIC_VOL;
    222                  pcSTAComnd[5] = MIC_VOL;
    223                  pcSTAComnd[6] = MIC_VOL;
    224                  pcSTAComnd[7] = MIC_VOL;
    225                  WriteSTAByte(STA321MP_C1VOL,pcSTAComnd,8);
   \   00000122   0x2208             MOVS     R2,#+8
   \   00000124   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000128   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000012C   0xF884 0x0025      STRB     R0,[R4, #+37]
   \   00000130   0xF884 0x0026      STRB     R0,[R4, #+38]
   \   00000134   0xF884 0x0027      STRB     R0,[R4, #+39]
   \   00000138   0xF884 0x0028      STRB     R0,[R4, #+40]
   \   0000013C   0xF884 0x0029      STRB     R0,[R4, #+41]
   \   00000140   0xF884 0x002A      STRB     R0,[R4, #+42]
   \   00000144   0xF884 0x002B      STRB     R0,[R4, #+43]
   \   00000148   0x200B             MOVS     R0,#+11
   \   0000014A   0x.... 0x....      BL       WriteSTAByte
    226          
    227          
    228                  pcSTAComnd[0] = 0x00;
   \   0000014E   0x2000             MOVS     R0,#+0
    229                  WriteSTAByte(STA321MP_CHNLMIX,&pcSTAComnd[0],1);
   \   00000150   0x2201             MOVS     R2,#+1
   \   00000152   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000156   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000015A   0x2028             MOVS     R0,#+40
   \   0000015C   0x.... 0x....      BL       WriteSTAByte
    230                  pcSTAComnd[0] = 0xFF;
   \   00000160   0xF884 0x8024      STRB     R8,[R4, #+36]
    231                  WriteSTAByte(STA321MP_TONEBP,&pcSTAComnd[0],1);
   \   00000164   0x2201             MOVS     R2,#+1
   \   00000166   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000016A   0x202B             MOVS     R0,#+43
   \   0000016C   0x.... 0x....      BL       WriteSTAByte
    232                  
    233                  pcSTAComnd[0] = 0x00;
   \   00000170   0x2000             MOVS     R0,#+0
    234                  WriteSTAByte(STA321MP_CBQ1,&pcSTAComnd[0],1);
   \   00000172   0x2201             MOVS     R2,#+1
   \   00000174   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000178   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000017C   0x2077             MOVS     R0,#+119
   \   0000017E   0x.... 0x....      BL       WriteSTAByte
    235          
    236                  pcSTAComnd[0] = 0x00;
   \   00000182   0x2000             MOVS     R0,#+0
    237                  WriteSTAByte(STA321MP_CBQ2,&pcSTAComnd[0],1);
   \   00000184   0x2201             MOVS     R2,#+1
   \   00000186   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000018A   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000018E   0x2078             MOVS     R0,#+120
   \   00000190   0x2701             MOVS     R7,#+1
   \   00000192   0x.... 0x....      BL       WriteSTAByte
    238          
    239                  pcSTAComnd[0] = 0x10;
   \   00000196   0x2010             MOVS     R0,#+16
    240                  WriteSTAByte(STA321MP_CBQ3,&pcSTAComnd[0],1);
   \   00000198   0x2201             MOVS     R2,#+1
   \   0000019A   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000019E   0xF104 0x0124      ADD      R1,R4,#+36
   \   000001A2   0x2079             MOVS     R0,#+121
   \   000001A4   0x.... 0x....      BL       WriteSTAByte
    241                         
    242                  //bit 2: 1-> Microphone recombination IP is active
    243                  //       0-> Microphone recombination IP is not active
    244                  //Recombination control register: bit 0: 1-Auto-config of the CLKOUT generator to Fout=sys_clk/32
    245                  //                                       0-CLK is configured only through COS bit
    246                  pcSTAComnd[0] = AUTO_CLKOUT;//AUTO_CLKOUT MIC_MODE
   \   000001A8   0x2001             MOVS     R0,#+1
    247                  WriteSTAByte(STA321MP_RCTR1,&pcSTAComnd[0],1);
   \   000001AA   0x2201             MOVS     R2,#+1
   \   000001AC   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000001B0   0xF104 0x0124      ADD      R1,R4,#+36
   \   000001B4   0x205D             MOVS     R0,#+93
   \   000001B6   0x.... 0x....      BL       WriteSTAByte
    248          
    249                  pcSTAComnd[0] = PDMSM_NORMAL;
   \   000001BA   0x2000             MOVS     R0,#+0
    250                  WriteSTAByte(STA321MP_PDMCT,&pcSTAComnd[0],1);
   \   000001BC   0x2201             MOVS     R2,#+1
   \   000001BE   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000001C2   0xF104 0x0124      ADD      R1,R4,#+36
   \   000001C6   0x205E             MOVS     R0,#+94
   \   000001C8   0x.... 0x....      BL       WriteSTAByte
    251          
    252                 pcSTAComnd[0] = I2S_OUT;
   \   000001CC   0x2009             MOVS     R0,#+9
    253                  WriteSTAByte(STA321MP_CFR129,pcSTAComnd,1);//Reg[81h]<=09h (00001001b)	CFR129  
   \   000001CE   0x2201             MOVS     R2,#+1
   \   000001D0   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000001D4   0xF104 0x0124      ADD      R1,R4,#+36
   \   000001D8   0x2081             MOVS     R0,#+129
   \   000001DA   0x.... 0x....      BL       WriteSTAByte
    254          
    255          #if 1
    256          		  // Initialize all the mixers
    257          		  for (char mixer = 1 ; mixer <= 2 ; mixer++)
    258          		    for (char channel = 1 ; channel <= 8 ; channel++)
   \                     ??STA321MP_Ini_0: (+1)
   \   000001DE   0x0638             LSLS     R0,R7,#+24
   \   000001E0   0x0C80             LSRS     R0,R0,#+18
   \   000001E2   0x2601             MOVS     R6,#+1
   \   000001E4   0xF500 0x79B0      ADD      R9,R0,#+352
    259          		      for (char input = 1 ; input <= 8 ; input++)
   \                     ??STA321MP_Ini_1: (+1)
   \   000001E8   0xF05F 0x0501      MOVS.W   R5,#+1
    260          		        if (input == channel)
   \                     ??STA321MP_Ini_2: (+1)
   \   000001EC   0xEA4F 0x4009      LSL      R0,R9,#+16
   \   000001F0   0x0E00             LSRS     R0,R0,#+24
   \   000001F2   0x42B5             CMP      R5,R6
   \   000001F4   0xF000 0x0003      AND      R0,R0,#0x3
   \   000001F8   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000001FC   0xD121             BNE.N    ??STA321MP_Ini_3
    261          		          sta321mp_mixer(mixer, channel, input, 0x7FFFFF); /* Setting channel 7, Mixer 1, channel 1 on  */
   \   000001FE   0x2201             MOVS     R2,#+1
   \   00000200   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000204   0x203B             MOVS     R0,#+59
   \   00000206   0x.... 0x....      BL       WriteSTAByte
   \   0000020A   0xF884 0x9024      STRB     R9,[R4, #+36]
   \   0000020E   0x2201             MOVS     R2,#+1
   \   00000210   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000214   0x203C             MOVS     R0,#+60
   \   00000216   0x.... 0x....      BL       WriteSTAByte
   \   0000021A   0x207F             MOVS     R0,#+127
   \   0000021C   0x2201             MOVS     R2,#+1
   \   0000021E   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000222   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000226   0x203D             MOVS     R0,#+61
   \   00000228   0x.... 0x....      BL       WriteSTAByte
   \   0000022C   0xF884 0x8024      STRB     R8,[R4, #+36]
   \   00000230   0x2201             MOVS     R2,#+1
   \   00000232   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000236   0x203E             MOVS     R0,#+62
   \   00000238   0x.... 0x....      BL       WriteSTAByte
   \   0000023C   0xF884 0x8024      STRB     R8,[R4, #+36]
   \   00000240   0xE022             B.N      ??STA321MP_Ini_4
    262          		        else
    263          		          sta321mp_mixer(mixer, channel, input, 0x000000); /* Setting channel 7, Mixer 1, channel 1 on  */
   \                     ??STA321MP_Ini_3: (+1)
   \   00000242   0x2201             MOVS     R2,#+1
   \   00000244   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000248   0x203B             MOVS     R0,#+59
   \   0000024A   0x.... 0x....      BL       WriteSTAByte
   \   0000024E   0xF884 0x9024      STRB     R9,[R4, #+36]
   \   00000252   0x2201             MOVS     R2,#+1
   \   00000254   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000258   0x203C             MOVS     R0,#+60
   \   0000025A   0x.... 0x....      BL       WriteSTAByte
   \   0000025E   0x2000             MOVS     R0,#+0
   \   00000260   0x2201             MOVS     R2,#+1
   \   00000262   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000266   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000026A   0x203D             MOVS     R0,#+61
   \   0000026C   0x.... 0x....      BL       WriteSTAByte
   \   00000270   0x2000             MOVS     R0,#+0
   \   00000272   0x2201             MOVS     R2,#+1
   \   00000274   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000278   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000027C   0x203E             MOVS     R0,#+62
   \   0000027E   0x.... 0x....      BL       WriteSTAByte
   \   00000282   0x2000             MOVS     R0,#+0
   \   00000284   0xF884 0x0024      STRB     R0,[R4, #+36]
   \                     ??STA321MP_Ini_4: (+1)
   \   00000288   0x2201             MOVS     R2,#+1
   \   0000028A   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000028E   0x203F             MOVS     R0,#+63
   \   00000290   0x1C6D             ADDS     R5,R5,#+1
   \   00000292   0x.... 0x....      BL       WriteSTAByte
   \   00000296   0x2001             MOVS     R0,#+1
   \   00000298   0x2201             MOVS     R2,#+1
   \   0000029A   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000029E   0xF104 0x0124      ADD      R1,R4,#+36
   \   000002A2   0x204C             MOVS     R0,#+76
   \   000002A4   0xF109 0x0901      ADD      R9,R9,#+1
   \   000002A8   0x.... 0x....      BL       WriteSTAByte
   \   000002AC   0x2D09             CMP      R5,#+9
   \   000002AE   0xDB9D             BLT.N    ??STA321MP_Ini_2
   \   000002B0   0x1C76             ADDS     R6,R6,#+1
   \   000002B2   0x2E09             CMP      R6,#+9
   \   000002B4   0xDB98             BLT.N    ??STA321MP_Ini_1
   \   000002B6   0x1C7F             ADDS     R7,R7,#+1
   \   000002B8   0x2F03             CMP      R7,#+3
   \   000002BA   0xDB90             BLT.N    ??STA321MP_Ini_0
    264          
    265          	      // initialize all the post-scale (channel 1)
    266          		  for (char channel = 1 ; channel <= 8 ; channel++)
   \   000002BC   0x2601             MOVS     R6,#+1
    267          		  {
    268          		    sta321mp_prescale(channel, 0x7FFFFF); 
   \                     ??STA321MP_Ini_5: (+1)
   \   000002BE   0xB2F7             UXTB     R7,R6
   \   000002C0   0xF207 0x158F      ADDW     R5,R7,#+399
   \   000002C4   0x0428             LSLS     R0,R5,#+16
   \   000002C6   0x0E00             LSRS     R0,R0,#+24
   \   000002C8   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000002CC   0x2201             MOVS     R2,#+1
   \   000002CE   0xF104 0x0124      ADD      R1,R4,#+36
   \   000002D2   0x203B             MOVS     R0,#+59
   \   000002D4   0x.... 0x....      BL       WriteSTAByte
   \   000002D8   0xF884 0x5024      STRB     R5,[R4, #+36]
   \   000002DC   0x2201             MOVS     R2,#+1
   \   000002DE   0xF104 0x0124      ADD      R1,R4,#+36
   \   000002E2   0x203C             MOVS     R0,#+60
   \   000002E4   0x.... 0x....      BL       WriteSTAByte
   \   000002E8   0x207F             MOVS     R0,#+127
   \   000002EA   0x2201             MOVS     R2,#+1
   \   000002EC   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000002F0   0xF104 0x0124      ADD      R1,R4,#+36
   \   000002F4   0x203D             MOVS     R0,#+61
   \   000002F6   0xF207 0x1797      ADDW     R7,R7,#+407
   \   000002FA   0x.... 0x....      BL       WriteSTAByte
   \   000002FE   0xF884 0x8024      STRB     R8,[R4, #+36]
   \   00000302   0x2201             MOVS     R2,#+1
   \   00000304   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000308   0x203E             MOVS     R0,#+62
   \   0000030A   0x.... 0x....      BL       WriteSTAByte
   \   0000030E   0xF884 0x8024      STRB     R8,[R4, #+36]
   \   00000312   0x2201             MOVS     R2,#+1
   \   00000314   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000318   0x203F             MOVS     R0,#+63
   \   0000031A   0x.... 0x....      BL       WriteSTAByte
   \   0000031E   0x2001             MOVS     R0,#+1
   \   00000320   0x2201             MOVS     R2,#+1
   \   00000322   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000326   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000032A   0x204C             MOVS     R0,#+76
   \   0000032C   0x1C76             ADDS     R6,R6,#+1
   \   0000032E   0x.... 0x....      BL       WriteSTAByte
    269          		    sta321mp_postscale(channel, 0x7FFFFF); 
   \   00000332   0x0438             LSLS     R0,R7,#+16
   \   00000334   0x0E00             LSRS     R0,R0,#+24
   \   00000336   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000033A   0x2201             MOVS     R2,#+1
   \   0000033C   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000340   0x203B             MOVS     R0,#+59
   \   00000342   0x.... 0x....      BL       WriteSTAByte
   \   00000346   0xF884 0x7024      STRB     R7,[R4, #+36]
   \   0000034A   0x2201             MOVS     R2,#+1
   \   0000034C   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000350   0x203C             MOVS     R0,#+60
   \   00000352   0x.... 0x....      BL       WriteSTAByte
   \   00000356   0x207F             MOVS     R0,#+127
   \   00000358   0x2201             MOVS     R2,#+1
   \   0000035A   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000035E   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000362   0x203D             MOVS     R0,#+61
   \   00000364   0x.... 0x....      BL       WriteSTAByte
   \   00000368   0xF884 0x8024      STRB     R8,[R4, #+36]
   \   0000036C   0x2201             MOVS     R2,#+1
   \   0000036E   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000372   0x203E             MOVS     R0,#+62
   \   00000374   0x.... 0x....      BL       WriteSTAByte
   \   00000378   0xF884 0x8024      STRB     R8,[R4, #+36]
   \   0000037C   0x2201             MOVS     R2,#+1
   \   0000037E   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000382   0x203F             MOVS     R0,#+63
   \   00000384   0x.... 0x....      BL       WriteSTAByte
   \   00000388   0x2001             MOVS     R0,#+1
   \   0000038A   0x2201             MOVS     R2,#+1
   \   0000038C   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000390   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000394   0x204C             MOVS     R0,#+76
   \   00000396   0x.... 0x....      BL       WriteSTAByte
    270          		  }
   \   0000039A   0x2E09             CMP      R6,#+9
   \   0000039C   0xDB8F             BLT.N    ??STA321MP_Ini_5
    271          
    272          		// set pwm output (channels 1/2 to pwm 7/8)
    273          		sta321mp_mixer( 1, 7, 1, 0x7FFFFF); /* Setting channel 7, Mixer 1, channel 1 on  */
   \   0000039E   0x2001             MOVS     R0,#+1
   \   000003A0   0x2201             MOVS     R2,#+1
   \   000003A2   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000003A6   0xF104 0x0124      ADD      R1,R4,#+36
   \   000003AA   0x203B             MOVS     R0,#+59
   \   000003AC   0x.... 0x....      BL       WriteSTAByte
   \   000003B0   0x20D0             MOVS     R0,#+208
   \   000003B2   0x2201             MOVS     R2,#+1
   \   000003B4   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000003B8   0xF104 0x0124      ADD      R1,R4,#+36
   \   000003BC   0x203C             MOVS     R0,#+60
   \   000003BE   0x.... 0x....      BL       WriteSTAByte
   \   000003C2   0x207F             MOVS     R0,#+127
   \   000003C4   0x2201             MOVS     R2,#+1
   \   000003C6   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000003CA   0xF104 0x0124      ADD      R1,R4,#+36
   \   000003CE   0x203D             MOVS     R0,#+61
   \   000003D0   0x.... 0x....      BL       WriteSTAByte
   \   000003D4   0xF884 0x8024      STRB     R8,[R4, #+36]
   \   000003D8   0x2201             MOVS     R2,#+1
   \   000003DA   0xF104 0x0124      ADD      R1,R4,#+36
   \   000003DE   0x203E             MOVS     R0,#+62
   \   000003E0   0x.... 0x....      BL       WriteSTAByte
   \   000003E4   0xF884 0x8024      STRB     R8,[R4, #+36]
   \   000003E8   0x2201             MOVS     R2,#+1
   \   000003EA   0xF104 0x0124      ADD      R1,R4,#+36
   \   000003EE   0x203F             MOVS     R0,#+63
   \   000003F0   0x.... 0x....      BL       WriteSTAByte
   \   000003F4   0x2001             MOVS     R0,#+1
   \   000003F6   0x2201             MOVS     R2,#+1
   \   000003F8   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000003FC   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000400   0x204C             MOVS     R0,#+76
   \   00000402   0x.... 0x....      BL       WriteSTAByte
    274          		sta321mp_mixer( 1, 7, 7, 0x000000); /* Setting channel 7, Mixer 1, channel 7 off */
   \   00000406   0x2001             MOVS     R0,#+1
   \   00000408   0x2201             MOVS     R2,#+1
   \   0000040A   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000040E   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000412   0x203B             MOVS     R0,#+59
   \   00000414   0x.... 0x....      BL       WriteSTAByte
   \   00000418   0x20D6             MOVS     R0,#+214
   \   0000041A   0x2201             MOVS     R2,#+1
   \   0000041C   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000420   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000424   0x203C             MOVS     R0,#+60
   \   00000426   0x.... 0x....      BL       WriteSTAByte
   \   0000042A   0x2000             MOVS     R0,#+0
   \   0000042C   0x2201             MOVS     R2,#+1
   \   0000042E   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000432   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000436   0x203D             MOVS     R0,#+61
   \   00000438   0x.... 0x....      BL       WriteSTAByte
   \   0000043C   0x2000             MOVS     R0,#+0
   \   0000043E   0x2201             MOVS     R2,#+1
   \   00000440   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000444   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000448   0x203E             MOVS     R0,#+62
   \   0000044A   0x.... 0x....      BL       WriteSTAByte
   \   0000044E   0x2000             MOVS     R0,#+0
   \   00000450   0x2201             MOVS     R2,#+1
   \   00000452   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000456   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000045A   0x203F             MOVS     R0,#+63
   \   0000045C   0x.... 0x....      BL       WriteSTAByte
   \   00000460   0x2001             MOVS     R0,#+1
   \   00000462   0x2201             MOVS     R2,#+1
   \   00000464   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000468   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000046C   0x204C             MOVS     R0,#+76
   \   0000046E   0x.... 0x....      BL       WriteSTAByte
    275          		sta321mp_mixer( 1, 8, 2, 0x7FFFFF); /* Setting channel 8, Mixer 1, channel 2 on  */
   \   00000472   0x2001             MOVS     R0,#+1
   \   00000474   0x2201             MOVS     R2,#+1
   \   00000476   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000047A   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000047E   0x203B             MOVS     R0,#+59
   \   00000480   0x.... 0x....      BL       WriteSTAByte
   \   00000484   0x20D9             MOVS     R0,#+217
   \   00000486   0x2201             MOVS     R2,#+1
   \   00000488   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000048C   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000490   0x203C             MOVS     R0,#+60
   \   00000492   0x.... 0x....      BL       WriteSTAByte
   \   00000496   0x207F             MOVS     R0,#+127
   \   00000498   0x2201             MOVS     R2,#+1
   \   0000049A   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000049E   0xF104 0x0124      ADD      R1,R4,#+36
   \   000004A2   0x203D             MOVS     R0,#+61
   \   000004A4   0x.... 0x....      BL       WriteSTAByte
   \   000004A8   0xF884 0x8024      STRB     R8,[R4, #+36]
   \   000004AC   0x2201             MOVS     R2,#+1
   \   000004AE   0xF104 0x0124      ADD      R1,R4,#+36
   \   000004B2   0x203E             MOVS     R0,#+62
   \   000004B4   0x.... 0x....      BL       WriteSTAByte
   \   000004B8   0xF884 0x8024      STRB     R8,[R4, #+36]
   \   000004BC   0x2201             MOVS     R2,#+1
   \   000004BE   0xF104 0x0124      ADD      R1,R4,#+36
   \   000004C2   0x203F             MOVS     R0,#+63
   \   000004C4   0x.... 0x....      BL       WriteSTAByte
   \   000004C8   0x2001             MOVS     R0,#+1
   \   000004CA   0x2201             MOVS     R2,#+1
   \   000004CC   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000004D0   0xF104 0x0124      ADD      R1,R4,#+36
   \   000004D4   0x204C             MOVS     R0,#+76
   \   000004D6   0x.... 0x....      BL       WriteSTAByte
    276          		sta321mp_mixer( 1, 8, 8, 0x000000); /* Setting channel 8, Mixer 1, channel 8 off */
   \   000004DA   0x2001             MOVS     R0,#+1
   \   000004DC   0x2201             MOVS     R2,#+1
   \   000004DE   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000004E2   0xF104 0x0124      ADD      R1,R4,#+36
   \   000004E6   0x203B             MOVS     R0,#+59
   \   000004E8   0x.... 0x....      BL       WriteSTAByte
   \   000004EC   0x20DF             MOVS     R0,#+223
   \   000004EE   0x2201             MOVS     R2,#+1
   \   000004F0   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000004F4   0xF104 0x0124      ADD      R1,R4,#+36
   \   000004F8   0x203C             MOVS     R0,#+60
   \   000004FA   0x.... 0x....      BL       WriteSTAByte
   \   000004FE   0x2000             MOVS     R0,#+0
   \   00000500   0x2201             MOVS     R2,#+1
   \   00000502   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000506   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000050A   0x203D             MOVS     R0,#+61
   \   0000050C   0x.... 0x....      BL       WriteSTAByte
   \   00000510   0x2000             MOVS     R0,#+0
   \   00000512   0x2201             MOVS     R2,#+1
   \   00000514   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000518   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000051C   0x203E             MOVS     R0,#+62
   \   0000051E   0x.... 0x....      BL       WriteSTAByte
   \   00000522   0x2000             MOVS     R0,#+0
   \   00000524   0x2201             MOVS     R2,#+1
   \   00000526   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000052A   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000052E   0x203F             MOVS     R0,#+63
   \   00000530   0x.... 0x....      BL       WriteSTAByte
   \   00000534   0x2001             MOVS     R0,#+1
   \   00000536   0x2201             MOVS     R2,#+1
   \   00000538   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000053C   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000540   0x204C             MOVS     R0,#+76
   \   00000542   0x.... 0x....      BL       WriteSTAByte
    277          #endif
    278          		STACoefSet();
   \   00000546   0xB001             ADD      SP,SP,#+4
   \   00000548   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \   0000054C   0x....             B.N      STACoefSet
    279          
    280          		//sta321mp_LP_48kHz();
    281                  //sta321mp_LP_192kHz();
    282                  //pcSTAComnd[0] = MAN_CLKOUT;
    283                  //WriteSTAByte(STA321MP_RCTR1,&pcSTAComnd[0],1);
    284           }
    285           
    286           

   \                                 In section .text, align 4, keep-with-next
    287           void ReadSTASeq(uint8_t Addr, uint8_t *pBufOut,uint8_t Len )
    288          {
   \                     ReadSTASeq: (+1)
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x460C             MOV      R4,R1
   \   00000006   0x4615             MOV      R5,R2
   \   00000008   0x.... 0x....      LDR.W    R6,??DataTable5_4
    289                  //while(HAL_I2C_Master_Transmit_IT(&hi2c2,0x40,pI2CData,2)!= HAL_OK)
    290          		{
    291                       ;
    292          		}
    293          
    294          		  /*##-3- Wait for the end of the transfer ###################################*/  
    295          		  /*  Before starting a new communication transfer, you need to check the current   
    296          		      state of the peripheral; if it?s busy you need to wait for the end of current
    297          		      transfer before starting a new one.
    298          		      For simplicity reasons, this example is just waiting till the end of the
    299          		      transfer, but application may perform other tasks while transfer operation
    300          		      is ongoing. */
    301          		  //while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY)
    302          		  {
    303          		  } 
    304          
    305          		 while(HAL_I2C_Master_Transmit(&hi2c2,STA_ADDR_1W,&Addr,1,1000)!=HAL_OK)
   \                     ??ReadSTASeq_0: (+1)
   \   0000000C   0xF44F 0x707A      MOV      R0,#+1000
   \   00000010   0x2301             MOVS     R3,#+1
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0xAA01             ADD      R2,SP,#+4
   \   00000016   0x2140             MOVS     R1,#+64
   \   00000018   0x4630             MOV      R0,R6
   \   0000001A   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xF47F 0xAFF4      BNE.W    ??ReadSTASeq_0
    306          		 {
    307                       ;
    308          		 }
    309          	     while(HAL_I2C_Master_Receive(&hi2c2,STA_ADDR_1R,pBufOut,Len,1000)!=HAL_OK)
   \                     ??ReadSTASeq_1: (+1)
   \   00000024   0xF44F 0x707A      MOV      R0,#+1000
   \   00000028   0x462B             MOV      R3,R5
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x4622             MOV      R2,R4
   \   0000002E   0x2141             MOVS     R1,#+65
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0x.... 0x....      BL       HAL_I2C_Master_Receive
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD1F4             BNE.N    ??ReadSTASeq_1
    310          	     {
    311                        ;
    312          	     }  
    313          }
   \   0000003A   0xB002             ADD      SP,SP,#+8
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    314          

   \                                 In section .text, align 4, keep-with-next
    315          void WriteSTAByte(uint8_t Addr, uint8_t *pBufIn, uint8_t len)
    316          {
   \                     WriteSTAByte: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4614             MOV      R4,R2
   \   00000006   0x4606             MOV      R6,R0
    317               uint8_t *DataSeq;
    318          	 
    319               DataSeq= (uint8_t *) malloc(len+1);
   \   00000008   0xF104 0x0801      ADD      R8,R4,#+1
   \   0000000C   0xB082             SUB      SP,SP,#+8
   \   0000000E   0x460F             MOV      R7,R1
   \   00000010   0x4640             MOV      R0,R8
   \   00000012   0x.... 0x....      BL       malloc
   \   00000016   0x4605             MOV      R5,R0
    320          
    321               /* copy data and address to buffer send*/
    322               for(uint8_t i=0;  i<(len+1);i++)
   \   00000018   0x2000             MOVS     R0,#+0
    323               {
    324                    if(i==0)
    325          		  {
    326          		      DataSeq[0]=Addr;
   \   0000001A   0x702E             STRB     R6,[R5, #+0]
   \   0000001C   0xE006             B.N      ??WriteSTAByte_0
   \                     ??WriteSTAByte_1: (+1)
   \   0000001E   0xB908             CBNZ.N   R0,??WriteSTAByte_2
   \   00000020   0x702E             STRB     R6,[R5, #+0]
   \   00000022   0xE003             B.N      ??WriteSTAByte_0
    327                    }
    328          		  else
    329          		  {
    330                        DataSeq[i] = pBufIn[i-1];
   \                     ??WriteSTAByte_2: (+1)
   \   00000024   0x19C1             ADDS     R1,R0,R7
   \   00000026   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   0000002A   0x5541             STRB     R1,[R0, R5]
    331          		  }
    332               }
   \                     ??WriteSTAByte_0: (+1)
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x4540             CMP      R0,R8
   \   00000032   0xDBF4             BLT.N    ??WriteSTAByte_1
    333          
    334          	 
    335          
    336          	 /* Send data to STA321 */
    337               while(HAL_I2C_Master_Transmit(&hi2c2,(uint16_t)STA_ADDR_1W,&DataSeq[0],len+1,1000)!=HAL_OK)
   \                     ??WriteSTAByte_3: (+1)
   \   00000034   0xF44F 0x707A      MOV      R0,#+1000
   \   00000038   0x1C63             ADDS     R3,R4,#+1
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0xB29B             UXTH     R3,R3
   \   0000003E   0x462A             MOV      R2,R5
   \   00000040   0x2140             MOVS     R1,#+64
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   00000046   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD1F2             BNE.N    ??WriteSTAByte_3
    338          	 {
    339                    ;
    340          	 }
    341          
    342          
    343          	 
    344          	 free(DataSeq);
   \   0000004E   0x4628             MOV      R0,R5
   \   00000050   0xB002             ADD      SP,SP,#+8
   \   00000052   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000056   0x.... 0x....      B.W      free
    345          
    346          }
    347          

   \                                 In section .text, align 4, keep-with-next
    348          void STACoefSet(void)
    349          {
   \                     STACoefSet: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    350          
    351          // sta321mp_biquad(codec, 1, 2, 0x2d7d5e, 0x3faa84, 0x6599c4, 0xad9ed1,0x1fd542);
    352          // sta321mp_biquad(codec, 1, 3, 0xfcec16, 0x177b7b, 0x63c973, 0xa4b499,0xbbdbd);
    353          // sta321mp_biquad(codec, 1, 4, 0xf4caac, 0x177b7b, 0x616997, 0x98a93a,0xbbdbd);
    354          // sta321mp_biquad(codec, 1, 5, 0xf1c0e3, 0x177b7b, 0x5f9823, 0x8e691f,0xbbdbd);
    355          // sta321mp_biquad(codec, 1, 6, 0xf083cb, 0x177b7b, 0x5ec1ab, 0x873641,0xbbdbd);
    356          // sta321mp_biquad(codec, 1, 7, 0xf00d82, 0x177b7b, 0x5f0547, 0x822c2a,0xbbdbd);
    357          
    358          
    359          //rio_SetCoefValue():	Coef[000h]<=822A2Dh		Coefficient 0x000 - C1H10 (b1/2)
    360          //rio_SetCoefValue():	Coef[001h]<=7DD5D3h		Coefficient 0x001 - C1H11 (b2)  
    361          //rio_SetCoefValue():	Coef[002h]<=7DD123h		Coefficient 0x002 - C1H12 (a1/2)
    362          //rio_SetCoefValue():	Coef[003h]<=844AFCh		Coefficient 0x003 - C1H13 (a2)  
    363          //rio_SetCoefValue():	Coef[004h]<=3EEAE9h		Coefficient 0x004 - C1H14 (b0/2)
    364          
    365          //sta321mp_biquad(1, 1, 0x822A2D, 0x7DD5D3, 0x7DD123, 0x844AFC,0x3EEAE9);
    366          sta321mp_biquad(1, 1, 0x803C5C, 0x7FC3A4, 0x7FC396, 0x80789B,0x3FE1D2);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable5_1
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000012   0x203B             MOVS     R0,#+59
   \   00000014   0x.... 0x....      BL       WriteSTAByte
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x2201             MOVS     R2,#+1
   \   0000001C   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000020   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000024   0x203C             MOVS     R0,#+60
   \   00000026   0x.... 0x....      BL       WriteSTAByte
   \   0000002A   0x2080             MOVS     R0,#+128
   \   0000002C   0x2201             MOVS     R2,#+1
   \   0000002E   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000032   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000036   0x203D             MOVS     R0,#+61
   \   00000038   0x.... 0x....      BL       WriteSTAByte
   \   0000003C   0x203C             MOVS     R0,#+60
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000044   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000048   0x203E             MOVS     R0,#+62
   \   0000004A   0x.... 0x....      BL       WriteSTAByte
   \   0000004E   0x205C             MOVS     R0,#+92
   \   00000050   0x2201             MOVS     R2,#+1
   \   00000052   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000056   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000005A   0x203F             MOVS     R0,#+63
   \   0000005C   0x.... 0x....      BL       WriteSTAByte
   \   00000060   0x207F             MOVS     R0,#+127
   \   00000062   0x2201             MOVS     R2,#+1
   \   00000064   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000068   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000006C   0x2040             MOVS     R0,#+64
   \   0000006E   0x.... 0x....      BL       WriteSTAByte
   \   00000072   0x20C3             MOVS     R0,#+195
   \   00000074   0x2201             MOVS     R2,#+1
   \   00000076   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000007A   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000007E   0x2041             MOVS     R0,#+65
   \   00000080   0x.... 0x....      BL       WriteSTAByte
   \   00000084   0x20A4             MOVS     R0,#+164
   \   00000086   0x2201             MOVS     R2,#+1
   \   00000088   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000008C   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000090   0x2042             MOVS     R0,#+66
   \   00000092   0x.... 0x....      BL       WriteSTAByte
   \   00000096   0x207F             MOVS     R0,#+127
   \   00000098   0x2201             MOVS     R2,#+1
   \   0000009A   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000009E   0xF104 0x0124      ADD      R1,R4,#+36
   \   000000A2   0x2043             MOVS     R0,#+67
   \   000000A4   0x.... 0x....      BL       WriteSTAByte
   \   000000A8   0x20C3             MOVS     R0,#+195
   \   000000AA   0x2201             MOVS     R2,#+1
   \   000000AC   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000000B0   0xF104 0x0124      ADD      R1,R4,#+36
   \   000000B4   0x2044             MOVS     R0,#+68
   \   000000B6   0x.... 0x....      BL       WriteSTAByte
   \   000000BA   0x2096             MOVS     R0,#+150
   \   000000BC   0x2201             MOVS     R2,#+1
   \   000000BE   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000000C2   0xF104 0x0124      ADD      R1,R4,#+36
   \   000000C6   0x2045             MOVS     R0,#+69
   \   000000C8   0x.... 0x....      BL       WriteSTAByte
   \   000000CC   0x2080             MOVS     R0,#+128
   \   000000CE   0x2201             MOVS     R2,#+1
   \   000000D0   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000000D4   0xF104 0x0124      ADD      R1,R4,#+36
   \   000000D8   0x2046             MOVS     R0,#+70
   \   000000DA   0x.... 0x....      BL       WriteSTAByte
   \   000000DE   0x2078             MOVS     R0,#+120
   \   000000E0   0x2201             MOVS     R2,#+1
   \   000000E2   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000000E6   0xF104 0x0124      ADD      R1,R4,#+36
   \   000000EA   0x2047             MOVS     R0,#+71
   \   000000EC   0x.... 0x....      BL       WriteSTAByte
   \   000000F0   0x209B             MOVS     R0,#+155
   \   000000F2   0x2201             MOVS     R2,#+1
   \   000000F4   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   000000F8   0xF104 0x0124      ADD      R1,R4,#+36
   \   000000FC   0x2048             MOVS     R0,#+72
   \   000000FE   0x.... 0x....      BL       WriteSTAByte
   \   00000102   0x203F             MOVS     R0,#+63
   \   00000104   0x2201             MOVS     R2,#+1
   \   00000106   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000010A   0xF104 0x0124      ADD      R1,R4,#+36
   \   0000010E   0x2049             MOVS     R0,#+73
   \   00000110   0x.... 0x....      BL       WriteSTAByte
   \   00000114   0x20E1             MOVS     R0,#+225
   \   00000116   0x2201             MOVS     R2,#+1
   \   00000118   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000011C   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000120   0x204A             MOVS     R0,#+74
   \   00000122   0x.... 0x....      BL       WriteSTAByte
   \   00000126   0x20D2             MOVS     R0,#+210
   \   00000128   0x2201             MOVS     R2,#+1
   \   0000012A   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   0000012E   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000132   0x204B             MOVS     R0,#+75
   \   00000134   0x.... 0x....      BL       WriteSTAByte
   \   00000138   0x2002             MOVS     R0,#+2
   \   0000013A   0x2201             MOVS     R2,#+1
   \   0000013C   0xF884 0x0024      STRB     R0,[R4, #+36]
   \   00000140   0xF104 0x0124      ADD      R1,R4,#+36
   \   00000144   0x204C             MOVS     R0,#+76
   \   00000146   0x.... 0x....      BL       WriteSTAByte
    367          
    368          bufCoefBiquad[0]= 41;
   \   0000014A   0x2029             MOVS     R0,#+41
   \   0000014C   0x7020             STRB     R0,[R4, #+0]
    369          bufCoefBiquad[1]= 20;
   \   0000014E   0x2014             MOVS     R0,#+20
   \   00000150   0x7060             STRB     R0,[R4, #+1]
    370          bufCoefBiquad[2]= 186;
   \   00000152   0x20BA             MOVS     R0,#+186
   \   00000154   0x70A0             STRB     R0,[R4, #+2]
    371          bufCoefBiquad[3]= 69;
   \   00000156   0x2045             MOVS     R0,#+69
   \   00000158   0x70E0             STRB     R0,[R4, #+3]
    372          bufCoefBiquad[4]= 103;
   \   0000015A   0x2067             MOVS     R0,#+103
   \   0000015C   0x7120             STRB     R0,[R4, #+4]
    373          bufCoefBiquad[5]= 10;
   \   0000015E   0x200A             MOVS     R0,#+10
   \   00000160   0x7160             STRB     R0,[R4, #+5]
    374          bufCoefBiquad[6]= 106;
   \   00000162   0x206A             MOVS     R0,#+106
   \   00000164   0x71A0             STRB     R0,[R4, #+6]
    375          bufCoefBiquad[7]= 110;
   \   00000166   0x206E             MOVS     R0,#+110
   \   00000168   0x71E0             STRB     R0,[R4, #+7]
    376          bufCoefBiquad[8]= 180;
   \   0000016A   0x20B4             MOVS     R0,#+180
   \   0000016C   0x7220             STRB     R0,[R4, #+8]
    377          bufCoefBiquad[9]= 166;
   \   0000016E   0x20A6             MOVS     R0,#+166
    378          bufCoefBiquad[10]= 71;
    379          bufCoefBiquad[11]= 204;
    380          bufCoefBiquad[12]= 34;
    381          bufCoefBiquad[13]= 179;
    382          bufCoefBiquad[14]= 133;
    383          WriteCoef(0x05, bufCoefBiquad);
   \   00000170   0x4621             MOV      R1,R4
   \   00000172   0x7260             STRB     R0,[R4, #+9]
   \   00000174   0x2047             MOVS     R0,#+71
   \   00000176   0x72A0             STRB     R0,[R4, #+10]
   \   00000178   0x20CC             MOVS     R0,#+204
   \   0000017A   0x72E0             STRB     R0,[R4, #+11]
   \   0000017C   0x2022             MOVS     R0,#+34
   \   0000017E   0x7320             STRB     R0,[R4, #+12]
   \   00000180   0x20B3             MOVS     R0,#+179
   \   00000182   0x7360             STRB     R0,[R4, #+13]
   \   00000184   0x2085             MOVS     R0,#+133
   \   00000186   0x73A0             STRB     R0,[R4, #+14]
   \   00000188   0x2005             MOVS     R0,#+5
   \   0000018A   0x.... 0x....      BL       WriteCoef
    384          bufCoefBiquad[0]= 249;
   \   0000018E   0x20F9             MOVS     R0,#+249
    385          bufCoefBiquad[1]= 20;
    386          bufCoefBiquad[2]= 79;
    387          bufCoefBiquad[3]= 20;
    388          bufCoefBiquad[4]= 181;
    389          bufCoefBiquad[5]= 137;
    390          bufCoefBiquad[6]= 105;
    391          bufCoefBiquad[7]= 227;
    392          bufCoefBiquad[8]= 180;
    393          bufCoefBiquad[9]= 158;
    394          bufCoefBiquad[10]= 219;
    395          bufCoefBiquad[11]= 204;
    396          bufCoefBiquad[12]= 10;
    397          bufCoefBiquad[13]= 90;
    398          bufCoefBiquad[14]= 196;
    399          WriteCoef(0x0a, bufCoefBiquad);
   \   00000190   0x4621             MOV      R1,R4
   \   00000192   0x7020             STRB     R0,[R4, #+0]
   \   00000194   0x2014             MOVS     R0,#+20
   \   00000196   0x7060             STRB     R0,[R4, #+1]
   \   00000198   0x204F             MOVS     R0,#+79
   \   0000019A   0x70A0             STRB     R0,[R4, #+2]
   \   0000019C   0x2014             MOVS     R0,#+20
   \   0000019E   0x70E0             STRB     R0,[R4, #+3]
   \   000001A0   0x20B5             MOVS     R0,#+181
   \   000001A2   0x7120             STRB     R0,[R4, #+4]
   \   000001A4   0x2089             MOVS     R0,#+137
   \   000001A6   0x7160             STRB     R0,[R4, #+5]
   \   000001A8   0x2069             MOVS     R0,#+105
   \   000001AA   0x71A0             STRB     R0,[R4, #+6]
   \   000001AC   0x20E3             MOVS     R0,#+227
   \   000001AE   0x71E0             STRB     R0,[R4, #+7]
   \   000001B0   0x20B4             MOVS     R0,#+180
   \   000001B2   0x7220             STRB     R0,[R4, #+8]
   \   000001B4   0x209E             MOVS     R0,#+158
   \   000001B6   0x7260             STRB     R0,[R4, #+9]
   \   000001B8   0x20DB             MOVS     R0,#+219
   \   000001BA   0x72A0             STRB     R0,[R4, #+10]
   \   000001BC   0x20CC             MOVS     R0,#+204
   \   000001BE   0x72E0             STRB     R0,[R4, #+11]
   \   000001C0   0x200A             MOVS     R0,#+10
   \   000001C2   0x7320             STRB     R0,[R4, #+12]
   \   000001C4   0x205A             MOVS     R0,#+90
   \   000001C6   0x7360             STRB     R0,[R4, #+13]
   \   000001C8   0x20C4             MOVS     R0,#+196
   \   000001CA   0x73A0             STRB     R0,[R4, #+14]
   \   000001CC   0x200A             MOVS     R0,#+10
   \   000001CE   0x.... 0x....      BL       WriteCoef
    400          bufCoefBiquad[0]= 243;
   \   000001D2   0x20F3             MOVS     R0,#+243
    401          bufCoefBiquad[1]= 7;
    402          bufCoefBiquad[2]= 255;
    403          bufCoefBiquad[3]= 20;
    404          bufCoefBiquad[4]= 181;
    405          bufCoefBiquad[5]= 137;
    406          bufCoefBiquad[6]= 105;
    407          bufCoefBiquad[7]= 52;
    408          bufCoefBiquad[8]= 233;
    409          bufCoefBiquad[9]= 148;
    410          bufCoefBiquad[10]= 200;
    411          bufCoefBiquad[11]= 180;
    412          bufCoefBiquad[12]= 10;
    413          bufCoefBiquad[13]= 90;
    414          bufCoefBiquad[14]= 196;
    415          WriteCoef(0x0f, bufCoefBiquad);
   \   000001D4   0x4621             MOV      R1,R4
   \   000001D6   0x7020             STRB     R0,[R4, #+0]
   \   000001D8   0x2007             MOVS     R0,#+7
   \   000001DA   0x7060             STRB     R0,[R4, #+1]
   \   000001DC   0x20FF             MOVS     R0,#+255
   \   000001DE   0x70A0             STRB     R0,[R4, #+2]
   \   000001E0   0x2014             MOVS     R0,#+20
   \   000001E2   0x70E0             STRB     R0,[R4, #+3]
   \   000001E4   0x20B5             MOVS     R0,#+181
   \   000001E6   0x7120             STRB     R0,[R4, #+4]
   \   000001E8   0x2089             MOVS     R0,#+137
   \   000001EA   0x7160             STRB     R0,[R4, #+5]
   \   000001EC   0x2069             MOVS     R0,#+105
   \   000001EE   0x71A0             STRB     R0,[R4, #+6]
   \   000001F0   0x2034             MOVS     R0,#+52
   \   000001F2   0x71E0             STRB     R0,[R4, #+7]
   \   000001F4   0x20E9             MOVS     R0,#+233
   \   000001F6   0x7220             STRB     R0,[R4, #+8]
   \   000001F8   0x2094             MOVS     R0,#+148
   \   000001FA   0x7260             STRB     R0,[R4, #+9]
   \   000001FC   0x20C8             MOVS     R0,#+200
   \   000001FE   0x72A0             STRB     R0,[R4, #+10]
   \   00000200   0x20B4             MOVS     R0,#+180
   \   00000202   0x72E0             STRB     R0,[R4, #+11]
   \   00000204   0x200A             MOVS     R0,#+10
   \   00000206   0x7320             STRB     R0,[R4, #+12]
   \   00000208   0x205A             MOVS     R0,#+90
   \   0000020A   0x7360             STRB     R0,[R4, #+13]
   \   0000020C   0x20C4             MOVS     R0,#+196
   \   0000020E   0x73A0             STRB     R0,[R4, #+14]
   \   00000210   0x200F             MOVS     R0,#+15
   \   00000212   0x.... 0x....      BL       WriteCoef
    416          bufCoefBiquad[0]= 240;
   \   00000216   0x20F0             MOVS     R0,#+240
    417          bufCoefBiquad[1]= 249;
    418          bufCoefBiquad[2]= 51;
    419          bufCoefBiquad[3]= 20;
    420          bufCoefBiquad[4]= 181;
    421          bufCoefBiquad[5]= 137;
    422          bufCoefBiquad[6]= 104;
    423          bufCoefBiquad[7]= 196;
    424          bufCoefBiquad[8]= 130;
    425          bufCoefBiquad[9]= 140;
    426          bufCoefBiquad[10]= 42;
    427          bufCoefBiquad[11]= 203;
    428          bufCoefBiquad[12]= 10;
    429          bufCoefBiquad[13]= 90;
    430          bufCoefBiquad[14]= 196;
    431          WriteCoef(0x014, bufCoefBiquad);
   \   00000218   0x4621             MOV      R1,R4
   \   0000021A   0x7020             STRB     R0,[R4, #+0]
   \   0000021C   0x20F9             MOVS     R0,#+249
   \   0000021E   0x7060             STRB     R0,[R4, #+1]
   \   00000220   0x2033             MOVS     R0,#+51
   \   00000222   0x70A0             STRB     R0,[R4, #+2]
   \   00000224   0x2014             MOVS     R0,#+20
   \   00000226   0x70E0             STRB     R0,[R4, #+3]
   \   00000228   0x20B5             MOVS     R0,#+181
   \   0000022A   0x7120             STRB     R0,[R4, #+4]
   \   0000022C   0x2089             MOVS     R0,#+137
   \   0000022E   0x7160             STRB     R0,[R4, #+5]
   \   00000230   0x2068             MOVS     R0,#+104
   \   00000232   0x71A0             STRB     R0,[R4, #+6]
   \   00000234   0x20C4             MOVS     R0,#+196
   \   00000236   0x71E0             STRB     R0,[R4, #+7]
   \   00000238   0x2082             MOVS     R0,#+130
   \   0000023A   0x7220             STRB     R0,[R4, #+8]
   \   0000023C   0x208C             MOVS     R0,#+140
   \   0000023E   0x7260             STRB     R0,[R4, #+9]
   \   00000240   0x202A             MOVS     R0,#+42
   \   00000242   0x72A0             STRB     R0,[R4, #+10]
   \   00000244   0x20CB             MOVS     R0,#+203
   \   00000246   0x72E0             STRB     R0,[R4, #+11]
   \   00000248   0x200A             MOVS     R0,#+10
   \   0000024A   0x7320             STRB     R0,[R4, #+12]
   \   0000024C   0x205A             MOVS     R0,#+90
   \   0000024E   0x7360             STRB     R0,[R4, #+13]
   \   00000250   0x20C4             MOVS     R0,#+196
   \   00000252   0x73A0             STRB     R0,[R4, #+14]
   \   00000254   0x2014             MOVS     R0,#+20
   \   00000256   0x.... 0x....      BL       WriteCoef
    432          bufCoefBiquad[0]= 240;
   \   0000025A   0x20F0             MOVS     R0,#+240
   \   0000025C   0x7020             STRB     R0,[R4, #+0]
    433          bufCoefBiquad[1]= 41;
   \   0000025E   0x2029             MOVS     R0,#+41
   \   00000260   0x7060             STRB     R0,[R4, #+1]
    434          bufCoefBiquad[2]= 185;
   \   00000262   0x20B9             MOVS     R0,#+185
   \   00000264   0x70A0             STRB     R0,[R4, #+2]
    435          bufCoefBiquad[3]= 20;
   \   00000266   0x2014             MOVS     R0,#+20
   \   00000268   0x70E0             STRB     R0,[R4, #+3]
    436          bufCoefBiquad[4]= 181;
   \   0000026A   0x20B5             MOVS     R0,#+181
   \   0000026C   0x7120             STRB     R0,[R4, #+4]
    437          bufCoefBiquad[5]= 137;
   \   0000026E   0x2089             MOVS     R0,#+137
   \   00000270   0x7160             STRB     R0,[R4, #+5]
    438          bufCoefBiquad[6]= 104;
   \   00000272   0x2068             MOVS     R0,#+104
   \   00000274   0x71A0             STRB     R0,[R4, #+6]
    439          bufCoefBiquad[7]= 197;
   \   00000276   0x20C5             MOVS     R0,#+197
    440          bufCoefBiquad[8]= 171;
    441          bufCoefBiquad[9]= 134;
    442          bufCoefBiquad[10]= 23;
    443          bufCoefBiquad[11]= 214;
    444          bufCoefBiquad[12]= 10;
    445          bufCoefBiquad[13]= 90;
    446          bufCoefBiquad[14]= 196;
    447          WriteCoef(0x019, bufCoefBiquad);
   \   00000278   0x4621             MOV      R1,R4
   \   0000027A   0x71E0             STRB     R0,[R4, #+7]
   \   0000027C   0x20AB             MOVS     R0,#+171
   \   0000027E   0x7220             STRB     R0,[R4, #+8]
   \   00000280   0x2086             MOVS     R0,#+134
   \   00000282   0x7260             STRB     R0,[R4, #+9]
   \   00000284   0x2017             MOVS     R0,#+23
   \   00000286   0x72A0             STRB     R0,[R4, #+10]
   \   00000288   0x20D6             MOVS     R0,#+214
   \   0000028A   0x72E0             STRB     R0,[R4, #+11]
   \   0000028C   0x200A             MOVS     R0,#+10
   \   0000028E   0x7320             STRB     R0,[R4, #+12]
   \   00000290   0x205A             MOVS     R0,#+90
   \   00000292   0x7360             STRB     R0,[R4, #+13]
   \   00000294   0x20C4             MOVS     R0,#+196
   \   00000296   0x73A0             STRB     R0,[R4, #+14]
   \   00000298   0x2019             MOVS     R0,#+25
   \   0000029A   0x.... 0x....      BL       WriteCoef
    448          bufCoefBiquad[0]= 239;
   \   0000029E   0x20EF             MOVS     R0,#+239
    449          bufCoefBiquad[1]= 221;
    450          bufCoefBiquad[2]= 94;
    451          bufCoefBiquad[3]= 20;
    452          bufCoefBiquad[4]= 181;
    453          bufCoefBiquad[5]= 137;
    454          bufCoefBiquad[6]= 105;
    455          bufCoefBiquad[7]= 97;
    456          bufCoefBiquad[8]= 227;
    457          bufCoefBiquad[9]= 129;
    458          bufCoefBiquad[10]= 213;
    459          bufCoefBiquad[11]= 134;
    460          bufCoefBiquad[12]= 10;
    461          bufCoefBiquad[13]= 90;
    462          bufCoefBiquad[14]= 196;
    463          WriteCoef(0x01e, bufCoefBiquad);
   \   000002A0   0x4621             MOV      R1,R4
   \   000002A2   0x7020             STRB     R0,[R4, #+0]
   \   000002A4   0x20DD             MOVS     R0,#+221
   \   000002A6   0x7060             STRB     R0,[R4, #+1]
   \   000002A8   0x205E             MOVS     R0,#+94
   \   000002AA   0x70A0             STRB     R0,[R4, #+2]
   \   000002AC   0x2014             MOVS     R0,#+20
   \   000002AE   0x70E0             STRB     R0,[R4, #+3]
   \   000002B0   0x20B5             MOVS     R0,#+181
   \   000002B2   0x7120             STRB     R0,[R4, #+4]
   \   000002B4   0x2089             MOVS     R0,#+137
   \   000002B6   0x7160             STRB     R0,[R4, #+5]
   \   000002B8   0x2069             MOVS     R0,#+105
   \   000002BA   0x71A0             STRB     R0,[R4, #+6]
   \   000002BC   0x2061             MOVS     R0,#+97
   \   000002BE   0x71E0             STRB     R0,[R4, #+7]
   \   000002C0   0x20E3             MOVS     R0,#+227
   \   000002C2   0x7220             STRB     R0,[R4, #+8]
   \   000002C4   0x2081             MOVS     R0,#+129
   \   000002C6   0x7260             STRB     R0,[R4, #+9]
   \   000002C8   0x20D5             MOVS     R0,#+213
   \   000002CA   0x72A0             STRB     R0,[R4, #+10]
   \   000002CC   0x2086             MOVS     R0,#+134
   \   000002CE   0x72E0             STRB     R0,[R4, #+11]
   \   000002D0   0x200A             MOVS     R0,#+10
   \   000002D2   0x7320             STRB     R0,[R4, #+12]
   \   000002D4   0x205A             MOVS     R0,#+90
   \   000002D6   0x7360             STRB     R0,[R4, #+13]
   \   000002D8   0x20C4             MOVS     R0,#+196
   \   000002DA   0x73A0             STRB     R0,[R4, #+14]
   \   000002DC   0xF05F 0x001E      MOVS.W   R0,#+30
   \   000002E0   0xE8BD 0x4010      POP      {R4,LR}
   \   000002E4                      REQUIRE WriteCoef
   \   000002E4                      ;; // Fall through to label WriteCoef
    464          }
    465          

   \                                 In section .text, align 4, keep-with-next
    466          void WriteCoef(uint16_t Adrss, uint8_t * BufData)
    467          {
   \                     WriteCoef: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4607             MOV      R7,R0
    468          //1. Write the top 2 bits of starting address to I2C register 0x3B
    469          pcSTAComnd[0] = (Adrss>>8)&0x03;
   \   00000006   0x0A00             LSRS     R0,R0,#+8
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x.... 0x....      LDR.W    R8,??DataTable5_1
   \   0000000E   0xF000 0x0003      AND      R0,R0,#0x3
   \   00000012   0x460C             MOV      R4,R1
   \   00000014   0xF888 0x0024      STRB     R0,[R8, #+36]
    470          WriteSTAByte(0x3B,&pcSTAComnd[0],1);
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0x.... 0x....      BL       malloc
   \   0000001E   0x4605             MOV      R5,R0
   \   00000020   0x233B             MOVS     R3,#+59
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0xF108 0x0223      ADD      R2,R8,#+35
   \   0000002A   0x.... 0x....      LDR.W    R9,??DataTable5_4
   \   0000002E   0x702B             STRB     R3,[R5, #+0]
   \   00000030   0xE005             B.N      ??WriteCoef_0
   \                     ??WriteCoef_1: (+1)
   \   00000032   0xB910             CBNZ.N   R0,??WriteCoef_2
   \   00000034   0x233B             MOVS     R3,#+59
   \   00000036   0x702B             STRB     R3,[R5, #+0]
   \   00000038   0xE001             B.N      ??WriteCoef_0
   \                     ??WriteCoef_2: (+1)
   \   0000003A   0x7813             LDRB     R3,[R2, #+0]
   \   0000003C   0x700B             STRB     R3,[R1, #+0]
   \                     ??WriteCoef_0: (+1)
   \   0000003E   0x1C40             ADDS     R0,R0,#+1
   \   00000040   0x1C52             ADDS     R2,R2,#+1
   \   00000042   0x1C49             ADDS     R1,R1,#+1
   \   00000044   0x2802             CMP      R0,#+2
   \   00000046   0xDBF4             BLT.N    ??WriteCoef_1
   \                     ??WriteCoef_3: (+1)
   \   00000048   0xF44F 0x707A      MOV      R0,#+1000
   \   0000004C   0x2302             MOVS     R3,#+2
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0x462A             MOV      R2,R5
   \   00000052   0x2140             MOVS     R1,#+64
   \   00000054   0x4648             MOV      R0,R9
   \   00000056   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD1F4             BNE.N    ??WriteCoef_3
   \   0000005E   0x4628             MOV      R0,R5
   \   00000060   0x.... 0x....      BL       free
    471          
    472          //2. Write the bottom 8 bits of starting address to I2C register 0x3C
    473          pcSTAComnd[0] = (Adrss);
   \   00000064   0xF888 0x7024      STRB     R7,[R8, #+36]
    474          WriteSTAByte(0x3C,&pcSTAComnd[0],1);
   \   00000068   0x2002             MOVS     R0,#+2
   \   0000006A   0x.... 0x....      BL       malloc
   \   0000006E   0x4607             MOV      R7,R0
   \   00000070   0x233C             MOVS     R3,#+60
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x4639             MOV      R1,R7
   \   00000076   0xF108 0x0223      ADD      R2,R8,#+35
   \   0000007A   0x703B             STRB     R3,[R7, #+0]
   \   0000007C   0xE005             B.N      ??WriteCoef_4
   \                     ??WriteCoef_5: (+1)
   \   0000007E   0xB910             CBNZ.N   R0,??WriteCoef_6
   \   00000080   0x233C             MOVS     R3,#+60
   \   00000082   0x703B             STRB     R3,[R7, #+0]
   \   00000084   0xE001             B.N      ??WriteCoef_4
   \                     ??WriteCoef_6: (+1)
   \   00000086   0x7813             LDRB     R3,[R2, #+0]
   \   00000088   0x700B             STRB     R3,[R1, #+0]
   \                     ??WriteCoef_4: (+1)
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0x1C52             ADDS     R2,R2,#+1
   \   0000008E   0x1C49             ADDS     R1,R1,#+1
   \   00000090   0x2802             CMP      R0,#+2
   \   00000092   0xDBF4             BLT.N    ??WriteCoef_5
   \                     ??WriteCoef_7: (+1)
   \   00000094   0xF44F 0x707A      MOV      R0,#+1000
   \   00000098   0x2302             MOVS     R3,#+2
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0x463A             MOV      R2,R7
   \   0000009E   0x2140             MOVS     R1,#+64
   \   000000A0   0x4648             MOV      R0,R9
   \   000000A2   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD1F4             BNE.N    ??WriteCoef_7
   \   000000AA   0x4638             MOV      R0,R7
   \   000000AC   0x273D             MOVS     R7,#+61
   \   000000AE   0x.... 0x....      BL       free
    475          
    476          //3. Write the top 8 bits of coefficient b1 in I2C address 0x3D
    477          //4. Write the middle 8 bits of coefficient b1 in I2C address 0x3E
    478          //5. Write the bottom 8 bits of coefficient b1 in I2C address 0x3F
    479          //6. Write the top 8 bits of coefficient b2 in I2C address 0x40
    480          //7. Write the middle 8-bits of coefficient b2 in I2C address 0x41
    481          //8. Write the bottom 8 bits of coefficient b2 in I2C address 0x42
    482          //9. Write the top 8 bits of coefficient a1 in I2C address 0x43
    483          //10. Write the middle 8 bits of coefficient a1 in I2C address 0x44
    484          //11. Write the bottom 8 bits of coefficient a1 in I2C address 0x45
    485          //12. Write the top 8 bits of coefficient a2 in I2C address 0x46
    486          //13. Write the middle 8 bits of coefficient a2 in I2C address 0x47
    487          //14. Write the bottom 8 bits of coefficient a2 in I2C address 0x48
    488          //15. Write the top 8-bits of coefficient b0 in I2C address 0x49
    489          //16. Write the middle 8 bits of coefficient b0 in I2C address 0x4A
    490          //17. Write the bottom 8 bits of coefficient b0 in I2C address 0x4B
    491          //WriteSTAByte(0x3D,BufData,15);
    492          
    493          for (uint8_t idxCoef=0; idxCoef < 5; idxCoef++)
   \   000000B2   0x2505             MOVS     R5,#+5
    494          {
    495          	//3. Write the top 8 bits of coefficient in I2C address 0x3D
    496          	//pcSTAComnd[0] = (uint8_t)((BufData[idxCoef] & 0x00FF0000)>>16);
    497              pcSTAComnd[0] = BufData[0+idxCoef*3];
   \                     ??WriteCoef_8: (+1)
   \   000000B4   0x7820             LDRB     R0,[R4, #+0]
   \   000000B6   0xF888 0x0024      STRB     R0,[R8, #+36]
    498          	WriteSTAByte(0x3D+idxCoef*3,&pcSTAComnd[0],1);
   \   000000BA   0x2002             MOVS     R0,#+2
   \   000000BC   0x.... 0x....      BL       malloc
   \   000000C0   0x4606             MOV      R6,R0
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x4631             MOV      R1,R6
   \   000000C6   0xF108 0x0223      ADD      R2,R8,#+35
   \   000000CA   0x7037             STRB     R7,[R6, #+0]
   \   000000CC   0xE004             B.N      ??WriteCoef_9
   \                     ??WriteCoef_10: (+1)
   \   000000CE   0xB908             CBNZ.N   R0,??WriteCoef_11
   \   000000D0   0x7037             STRB     R7,[R6, #+0]
   \   000000D2   0xE001             B.N      ??WriteCoef_9
   \                     ??WriteCoef_11: (+1)
   \   000000D4   0x7813             LDRB     R3,[R2, #+0]
   \   000000D6   0x700B             STRB     R3,[R1, #+0]
   \                     ??WriteCoef_9: (+1)
   \   000000D8   0x1C40             ADDS     R0,R0,#+1
   \   000000DA   0x1C52             ADDS     R2,R2,#+1
   \   000000DC   0x1C49             ADDS     R1,R1,#+1
   \   000000DE   0x2802             CMP      R0,#+2
   \   000000E0   0xF6FF 0xAFF5      BLT.W    ??WriteCoef_10
   \                     ??WriteCoef_12: (+1)
   \   000000E4   0xF44F 0x707A      MOV      R0,#+1000
   \   000000E8   0x2302             MOVS     R3,#+2
   \   000000EA   0x9000             STR      R0,[SP, #+0]
   \   000000EC   0x4632             MOV      R2,R6
   \   000000EE   0x2140             MOVS     R1,#+64
   \   000000F0   0x4648             MOV      R0,R9
   \   000000F2   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   000000F6   0x2800             CMP      R0,#+0
   \   000000F8   0xD1F4             BNE.N    ??WriteCoef_12
   \   000000FA   0x4630             MOV      R0,R6
   \   000000FC   0x1C7E             ADDS     R6,R7,#+1
   \   000000FE   0x.... 0x....      BL       free
    499          
    500          	//4. Write the middle 8 bits of coefficient in I2C address 0x3E
    501          	//pcSTAComnd[0] = (uint8_t)(((BufData[idxCoef]  & 0x0000FF00)>>8);
    502          	pcSTAComnd[0] = BufData[1+idxCoef*3];
   \   00000102   0x7860             LDRB     R0,[R4, #+1]
   \   00000104   0xF888 0x0024      STRB     R0,[R8, #+36]
    503          	WriteSTAByte(0x3E+idxCoef*3,&pcSTAComnd[0],1);
   \   00000108   0x2002             MOVS     R0,#+2
   \   0000010A   0x.... 0x....      BL       malloc
   \   0000010E   0x4682             MOV      R10,R0
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0x4651             MOV      R1,R10
   \   00000114   0xF108 0x0223      ADD      R2,R8,#+35
   \   00000118   0xF88A 0x6000      STRB     R6,[R10, #+0]
   \   0000011C   0xE005             B.N      ??WriteCoef_13
   \                     ??WriteCoef_14: (+1)
   \   0000011E   0xB910             CBNZ.N   R0,??WriteCoef_15
   \   00000120   0xF88A 0x6000      STRB     R6,[R10, #+0]
   \   00000124   0xE001             B.N      ??WriteCoef_13
   \                     ??WriteCoef_15: (+1)
   \   00000126   0x7813             LDRB     R3,[R2, #+0]
   \   00000128   0x700B             STRB     R3,[R1, #+0]
   \                     ??WriteCoef_13: (+1)
   \   0000012A   0x1C40             ADDS     R0,R0,#+1
   \   0000012C   0x1C52             ADDS     R2,R2,#+1
   \   0000012E   0x1C49             ADDS     R1,R1,#+1
   \   00000130   0x2802             CMP      R0,#+2
   \   00000132   0xDBF4             BLT.N    ??WriteCoef_14
   \                     ??WriteCoef_16: (+1)
   \   00000134   0xF44F 0x707A      MOV      R0,#+1000
   \   00000138   0x2302             MOVS     R3,#+2
   \   0000013A   0x9000             STR      R0,[SP, #+0]
   \   0000013C   0x4652             MOV      R2,R10
   \   0000013E   0x2140             MOVS     R1,#+64
   \   00000140   0x4648             MOV      R0,R9
   \   00000142   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000146   0x2800             CMP      R0,#+0
   \   00000148   0xD1F4             BNE.N    ??WriteCoef_16
   \   0000014A   0x4650             MOV      R0,R10
   \   0000014C   0x1CBE             ADDS     R6,R7,#+2
   \   0000014E   0x.... 0x....      BL       free
    504          
    505          	//5. Write the bottom 8 bits of coefficient in I2C address 0x3F
    506          	//pcSTAComnd[0] = (uint8_t)(((BufData[idxCoef]  & 0x000000FF));
    507          	pcSTAComnd[0] = BufData[2+idxCoef*3];
   \   00000152   0x78A0             LDRB     R0,[R4, #+2]
   \   00000154   0xF888 0x0024      STRB     R0,[R8, #+36]
    508          	WriteSTAByte(0x3F+idxCoef*3,&pcSTAComnd[0],1);
   \   00000158   0x2002             MOVS     R0,#+2
   \   0000015A   0x.... 0x....      BL       malloc
   \   0000015E   0x4682             MOV      R10,R0
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0x4651             MOV      R1,R10
   \   00000164   0xF108 0x0223      ADD      R2,R8,#+35
   \   00000168   0xF88A 0x6000      STRB     R6,[R10, #+0]
   \   0000016C   0xE005             B.N      ??WriteCoef_17
   \                     ??WriteCoef_18: (+1)
   \   0000016E   0xB910             CBNZ.N   R0,??WriteCoef_19
   \   00000170   0xF88A 0x6000      STRB     R6,[R10, #+0]
   \   00000174   0xE001             B.N      ??WriteCoef_17
   \                     ??WriteCoef_19: (+1)
   \   00000176   0x7813             LDRB     R3,[R2, #+0]
   \   00000178   0x700B             STRB     R3,[R1, #+0]
   \                     ??WriteCoef_17: (+1)
   \   0000017A   0x1C40             ADDS     R0,R0,#+1
   \   0000017C   0x1C52             ADDS     R2,R2,#+1
   \   0000017E   0x1C49             ADDS     R1,R1,#+1
   \   00000180   0x2802             CMP      R0,#+2
   \   00000182   0xDBF4             BLT.N    ??WriteCoef_18
   \                     ??WriteCoef_20: (+1)
   \   00000184   0xF44F 0x707A      MOV      R0,#+1000
   \   00000188   0x2302             MOVS     R3,#+2
   \   0000018A   0x9000             STR      R0,[SP, #+0]
   \   0000018C   0x4652             MOV      R2,R10
   \   0000018E   0x2140             MOVS     R1,#+64
   \   00000190   0x4648             MOV      R0,R9
   \   00000192   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000196   0x2800             CMP      R0,#+0
   \   00000198   0xD1F4             BNE.N    ??WriteCoef_20
   \   0000019A   0x4650             MOV      R0,R10
   \   0000019C   0x1CE4             ADDS     R4,R4,#+3
   \   0000019E   0x.... 0x....      BL       free
    509          }
   \   000001A2   0x1CFF             ADDS     R7,R7,#+3
   \   000001A4   0x1E6D             SUBS     R5,R5,#+1
   \   000001A6   0xF47F 0xAF85      BNE.W    ??WriteCoef_8
    510          
    511          
    512          
    513          //18. Write 1 to the WA bit in I2C address 0x4C
    514          pcSTAComnd[0] = 0x02;
   \   000001AA   0x2002             MOVS     R0,#+2
   \   000001AC   0xF888 0x0024      STRB     R0,[R8, #+36]
    515          WriteSTAByte(0x4C,&pcSTAComnd[0],1);
   \   000001B0   0x.... 0x....      BL       malloc
   \   000001B4   0x4604             MOV      R4,R0
   \   000001B6   0x234C             MOVS     R3,#+76
   \   000001B8   0x2000             MOVS     R0,#+0
   \   000001BA   0x4621             MOV      R1,R4
   \   000001BC   0xF108 0x0223      ADD      R2,R8,#+35
   \   000001C0   0x7023             STRB     R3,[R4, #+0]
   \   000001C2   0xE005             B.N      ??WriteCoef_21
   \                     ??WriteCoef_22: (+1)
   \   000001C4   0xB910             CBNZ.N   R0,??WriteCoef_23
   \   000001C6   0x234C             MOVS     R3,#+76
   \   000001C8   0x7023             STRB     R3,[R4, #+0]
   \   000001CA   0xE001             B.N      ??WriteCoef_21
   \                     ??WriteCoef_23: (+1)
   \   000001CC   0x7813             LDRB     R3,[R2, #+0]
   \   000001CE   0x700B             STRB     R3,[R1, #+0]
   \                     ??WriteCoef_21: (+1)
   \   000001D0   0x1C40             ADDS     R0,R0,#+1
   \   000001D2   0x1C52             ADDS     R2,R2,#+1
   \   000001D4   0x1C49             ADDS     R1,R1,#+1
   \   000001D6   0x2802             CMP      R0,#+2
   \   000001D8   0xF6FF 0xAFF4      BLT.W    ??WriteCoef_22
   \                     ??WriteCoef_24: (+1)
   \   000001DC   0xF44F 0x707A      MOV      R0,#+1000
   \   000001E0   0x2302             MOVS     R3,#+2
   \   000001E2   0x9000             STR      R0,[SP, #+0]
   \   000001E4   0x4622             MOV      R2,R4
   \   000001E6   0x2140             MOVS     R1,#+64
   \   000001E8   0x4648             MOV      R0,R9
   \   000001EA   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   000001EE   0x2800             CMP      R0,#+0
   \   000001F0   0xD1F4             BNE.N    ??WriteCoef_24
   \   000001F2   0x4620             MOV      R0,R4
   \   000001F4   0xB002             ADD      SP,SP,#+8
   \   000001F6   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   000001FA   0x.... 0x....      B.W      free
    516          
    517          }
    518          

   \                                 In section .text, align 4, keep-with-next
    519          void ReadCoef(uint16_t Adrss, uint8_t * BufData)
    520          {
   \                     ReadCoef: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4606             MOV      R6,R0
    521          //1. Write the top 2 bits of starting address to I2C register 0x3B
    522          pcSTAComnd[0] = (Adrss>>8)&0x03;
   \   00000006   0x0A00             LSRS     R0,R0,#+8
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x....             LDR.N    R5,??DataTable5_1
   \   0000000C   0xF000 0x0003      AND      R0,R0,#0x3
   \   00000010   0x460C             MOV      R4,R1
   \   00000012   0xF885 0x0024      STRB     R0,[R5, #+36]
    523          WriteSTAByte(0x3B,&pcSTAComnd[0],1);
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       malloc
   \   0000001C   0x4607             MOV      R7,R0
   \   0000001E   0x233B             MOVS     R3,#+59
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x4639             MOV      R1,R7
   \   00000024   0xF105 0x0223      ADD      R2,R5,#+35
   \   00000028   0x.... 0x....      LDR.W    R8,??DataTable5_4
   \   0000002C   0x703B             STRB     R3,[R7, #+0]
   \   0000002E   0xE005             B.N      ??ReadCoef_0
   \                     ??ReadCoef_1: (+1)
   \   00000030   0xB910             CBNZ.N   R0,??ReadCoef_2
   \   00000032   0x233B             MOVS     R3,#+59
   \   00000034   0x703B             STRB     R3,[R7, #+0]
   \   00000036   0xE001             B.N      ??ReadCoef_0
   \                     ??ReadCoef_2: (+1)
   \   00000038   0x7813             LDRB     R3,[R2, #+0]
   \   0000003A   0x700B             STRB     R3,[R1, #+0]
   \                     ??ReadCoef_0: (+1)
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0x1C52             ADDS     R2,R2,#+1
   \   00000040   0x1C49             ADDS     R1,R1,#+1
   \   00000042   0x2802             CMP      R0,#+2
   \   00000044   0xF6FF 0xAFF4      BLT.W    ??ReadCoef_1
   \                     ??ReadCoef_3: (+1)
   \   00000048   0xF44F 0x707A      MOV      R0,#+1000
   \   0000004C   0x2302             MOVS     R3,#+2
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0x463A             MOV      R2,R7
   \   00000052   0x2140             MOVS     R1,#+64
   \   00000054   0x4640             MOV      R0,R8
   \   00000056   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD1F4             BNE.N    ??ReadCoef_3
   \   0000005E   0x4638             MOV      R0,R7
   \   00000060   0x.... 0x....      BL       free
    524          
    525          //2. Write the bottom 8 bits of starting address to I2C register 0x3C
    526          pcSTAComnd[0] = (Adrss);
   \   00000064   0xF885 0x6024      STRB     R6,[R5, #+36]
    527          WriteSTAByte(0x3C,&pcSTAComnd[0],1);
   \   00000068   0x2002             MOVS     R0,#+2
   \   0000006A   0x.... 0x....      BL       malloc
   \   0000006E   0x4606             MOV      R6,R0
   \   00000070   0x233C             MOVS     R3,#+60
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x4631             MOV      R1,R6
   \   00000076   0xF105 0x0223      ADD      R2,R5,#+35
   \   0000007A   0x7033             STRB     R3,[R6, #+0]
   \   0000007C   0xE005             B.N      ??ReadCoef_4
   \                     ??ReadCoef_5: (+1)
   \   0000007E   0xB910             CBNZ.N   R0,??ReadCoef_6
   \   00000080   0x233C             MOVS     R3,#+60
   \   00000082   0x7033             STRB     R3,[R6, #+0]
   \   00000084   0xE001             B.N      ??ReadCoef_4
   \                     ??ReadCoef_6: (+1)
   \   00000086   0x7813             LDRB     R3,[R2, #+0]
   \   00000088   0x700B             STRB     R3,[R1, #+0]
   \                     ??ReadCoef_4: (+1)
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0x1C52             ADDS     R2,R2,#+1
   \   0000008E   0x1C49             ADDS     R1,R1,#+1
   \   00000090   0x2802             CMP      R0,#+2
   \   00000092   0xDBF4             BLT.N    ??ReadCoef_5
   \                     ??ReadCoef_7: (+1)
   \   00000094   0xF44F 0x707A      MOV      R0,#+1000
   \   00000098   0x2302             MOVS     R3,#+2
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0x4632             MOV      R2,R6
   \   0000009E   0x2140             MOVS     R1,#+64
   \   000000A0   0x4640             MOV      R0,R8
   \   000000A2   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD1F4             BNE.N    ??ReadCoef_7
   \   000000AA   0x4630             MOV      R0,R6
   \   000000AC   0x.... 0x....      BL       free
    528          
    529          ReadSTASeq(0x3D,BufData,3);
   \   000000B0   0x203D             MOVS     R0,#+61
   \   000000B2   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   000000B6   0xBF00             Nop      
   \                     ??ReadCoef_8: (+1)
   \   000000B8   0xF44F 0x707A      MOV      R0,#+1000
   \   000000BC   0x2301             MOVS     R3,#+1
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0xAA01             ADD      R2,SP,#+4
   \   000000C2   0x2140             MOVS     R1,#+64
   \   000000C4   0x4640             MOV      R0,R8
   \   000000C6   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xF47F 0xAFF4      BNE.W    ??ReadCoef_8
   \                     ??ReadCoef_9: (+1)
   \   000000D0   0xF44F 0x707A      MOV      R0,#+1000
   \   000000D4   0x2303             MOVS     R3,#+3
   \   000000D6   0x9000             STR      R0,[SP, #+0]
   \   000000D8   0x4622             MOV      R2,R4
   \   000000DA   0x2141             MOVS     R1,#+65
   \   000000DC   0x4640             MOV      R0,R8
   \   000000DE   0x.... 0x....      BL       HAL_I2C_Master_Receive
   \   000000E2   0x2800             CMP      R0,#+0
   \   000000E4   0xD1F4             BNE.N    ??ReadCoef_9
    530          
    531          }
   \   000000E6   0xB002             ADD      SP,SP,#+8
   \   000000E8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    532          
    533          

   \                                 In section .text, align 4, keep-with-next
    534          void SetCoefValue(uint16_t Adrss, uint32_t DataCoef)
    535          {
   \                     SetCoefValue: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4607             MOV      R7,R0
    536          //1. Write the top 2 bits of address to I2C register 0x3B
    537          pcSTAComnd[0] = (Adrss>>8)&0x03;
   \   00000006   0x0A00             LSRS     R0,R0,#+8
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x....             LDR.N    R5,??DataTable5_1
   \   0000000C   0xF000 0x0003      AND      R0,R0,#0x3
   \   00000010   0x460C             MOV      R4,R1
   \   00000012   0xF885 0x0024      STRB     R0,[R5, #+36]
    538          WriteSTAByte(0x3B,&pcSTAComnd[0],1);
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       malloc
   \   0000001C   0x4606             MOV      R6,R0
   \   0000001E   0x233B             MOVS     R3,#+59
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x4631             MOV      R1,R6
   \   00000024   0xF105 0x0223      ADD      R2,R5,#+35
   \   00000028   0x.... 0x....      LDR.W    R8,??DataTable5_4
   \   0000002C   0x7033             STRB     R3,[R6, #+0]
   \   0000002E   0xE005             B.N      ??SetCoefValue_0
   \                     ??SetCoefValue_1: (+1)
   \   00000030   0xB910             CBNZ.N   R0,??SetCoefValue_2
   \   00000032   0x233B             MOVS     R3,#+59
   \   00000034   0x7033             STRB     R3,[R6, #+0]
   \   00000036   0xE001             B.N      ??SetCoefValue_0
   \                     ??SetCoefValue_2: (+1)
   \   00000038   0x7813             LDRB     R3,[R2, #+0]
   \   0000003A   0x700B             STRB     R3,[R1, #+0]
   \                     ??SetCoefValue_0: (+1)
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0x1C52             ADDS     R2,R2,#+1
   \   00000040   0x1C49             ADDS     R1,R1,#+1
   \   00000042   0x2802             CMP      R0,#+2
   \   00000044   0xF6FF 0xAFF4      BLT.W    ??SetCoefValue_1
   \                     ??SetCoefValue_3: (+1)
   \   00000048   0xF44F 0x707A      MOV      R0,#+1000
   \   0000004C   0x2302             MOVS     R3,#+2
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0x4632             MOV      R2,R6
   \   00000052   0x2140             MOVS     R1,#+64
   \   00000054   0x4640             MOV      R0,R8
   \   00000056   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD1F4             BNE.N    ??SetCoefValue_3
   \   0000005E   0x4630             MOV      R0,R6
   \   00000060   0x.... 0x....      BL       free
    539          
    540          //2. Write the bottom 8 bits of address to I2C register 0x3C
    541          pcSTAComnd[0] = (Adrss);
   \   00000064   0xF885 0x7024      STRB     R7,[R5, #+36]
    542          WriteSTAByte(0x3C,&pcSTAComnd[0],1);
   \   00000068   0x2002             MOVS     R0,#+2
   \   0000006A   0x.... 0x....      BL       malloc
   \   0000006E   0x4607             MOV      R7,R0
   \   00000070   0x233C             MOVS     R3,#+60
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x4639             MOV      R1,R7
   \   00000076   0xF105 0x0223      ADD      R2,R5,#+35
   \   0000007A   0x703B             STRB     R3,[R7, #+0]
   \   0000007C   0xE005             B.N      ??SetCoefValue_4
   \                     ??SetCoefValue_5: (+1)
   \   0000007E   0xB910             CBNZ.N   R0,??SetCoefValue_6
   \   00000080   0x233C             MOVS     R3,#+60
   \   00000082   0x703B             STRB     R3,[R7, #+0]
   \   00000084   0xE001             B.N      ??SetCoefValue_4
   \                     ??SetCoefValue_6: (+1)
   \   00000086   0x7813             LDRB     R3,[R2, #+0]
   \   00000088   0x700B             STRB     R3,[R1, #+0]
   \                     ??SetCoefValue_4: (+1)
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0x1C52             ADDS     R2,R2,#+1
   \   0000008E   0x1C49             ADDS     R1,R1,#+1
   \   00000090   0x2802             CMP      R0,#+2
   \   00000092   0xDBF4             BLT.N    ??SetCoefValue_5
   \                     ??SetCoefValue_7: (+1)
   \   00000094   0xF44F 0x707A      MOV      R0,#+1000
   \   00000098   0x2302             MOVS     R3,#+2
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0x463A             MOV      R2,R7
   \   0000009E   0x2140             MOVS     R1,#+64
   \   000000A0   0x4640             MOV      R0,R8
   \   000000A2   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD1F4             BNE.N    ??SetCoefValue_7
   \   000000AA   0x4638             MOV      R0,R7
   \   000000AC   0x.... 0x....      BL       free
    543          
    544          //3. Write the top 8 bits of coefficient in I2C address 0x3D
    545          pcSTAComnd[0] = (uint8_t)((DataCoef & 0x00FF0000)>>16);
   \   000000B0   0x0C20             LSRS     R0,R4,#+16
   \   000000B2   0xF885 0x0024      STRB     R0,[R5, #+36]
    546          WriteSTAByte(0x3D,&pcSTAComnd[0],1);
   \   000000B6   0x2002             MOVS     R0,#+2
   \   000000B8   0x.... 0x....      BL       malloc
   \   000000BC   0x4607             MOV      R7,R0
   \   000000BE   0x233D             MOVS     R3,#+61
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0x4639             MOV      R1,R7
   \   000000C4   0xF105 0x0223      ADD      R2,R5,#+35
   \   000000C8   0x703B             STRB     R3,[R7, #+0]
   \   000000CA   0xE005             B.N      ??SetCoefValue_8
   \                     ??SetCoefValue_9: (+1)
   \   000000CC   0xB910             CBNZ.N   R0,??SetCoefValue_10
   \   000000CE   0x233D             MOVS     R3,#+61
   \   000000D0   0x703B             STRB     R3,[R7, #+0]
   \   000000D2   0xE001             B.N      ??SetCoefValue_8
   \                     ??SetCoefValue_10: (+1)
   \   000000D4   0x7813             LDRB     R3,[R2, #+0]
   \   000000D6   0x700B             STRB     R3,[R1, #+0]
   \                     ??SetCoefValue_8: (+1)
   \   000000D8   0x1C40             ADDS     R0,R0,#+1
   \   000000DA   0x1C52             ADDS     R2,R2,#+1
   \   000000DC   0x1C49             ADDS     R1,R1,#+1
   \   000000DE   0x2802             CMP      R0,#+2
   \   000000E0   0xF6FF 0xAFF4      BLT.W    ??SetCoefValue_9
   \                     ??SetCoefValue_11: (+1)
   \   000000E4   0xF44F 0x707A      MOV      R0,#+1000
   \   000000E8   0x2302             MOVS     R3,#+2
   \   000000EA   0x9000             STR      R0,[SP, #+0]
   \   000000EC   0x463A             MOV      R2,R7
   \   000000EE   0x2140             MOVS     R1,#+64
   \   000000F0   0x4640             MOV      R0,R8
   \   000000F2   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   000000F6   0x2800             CMP      R0,#+0
   \   000000F8   0xD1F4             BNE.N    ??SetCoefValue_11
   \   000000FA   0x4638             MOV      R0,R7
   \   000000FC   0x.... 0x....      BL       free
    547          
    548          //4. Write the middle 8 bits of coefficient in I2C address 0x3E
    549          pcSTAComnd[0] = (uint8_t)((DataCoef & 0x0000FF00)>>8);
   \   00000100   0x0A20             LSRS     R0,R4,#+8
   \   00000102   0xF885 0x0024      STRB     R0,[R5, #+36]
    550          WriteSTAByte(0x3E,&pcSTAComnd[0],1);
   \   00000106   0x2002             MOVS     R0,#+2
   \   00000108   0x.... 0x....      BL       malloc
   \   0000010C   0x4607             MOV      R7,R0
   \   0000010E   0x233E             MOVS     R3,#+62
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0x4639             MOV      R1,R7
   \   00000114   0xF105 0x0223      ADD      R2,R5,#+35
   \   00000118   0x703B             STRB     R3,[R7, #+0]
   \   0000011A   0xE005             B.N      ??SetCoefValue_12
   \                     ??SetCoefValue_13: (+1)
   \   0000011C   0xB910             CBNZ.N   R0,??SetCoefValue_14
   \   0000011E   0x233E             MOVS     R3,#+62
   \   00000120   0x703B             STRB     R3,[R7, #+0]
   \   00000122   0xE001             B.N      ??SetCoefValue_12
   \                     ??SetCoefValue_14: (+1)
   \   00000124   0x7813             LDRB     R3,[R2, #+0]
   \   00000126   0x700B             STRB     R3,[R1, #+0]
   \                     ??SetCoefValue_12: (+1)
   \   00000128   0x1C40             ADDS     R0,R0,#+1
   \   0000012A   0x1C52             ADDS     R2,R2,#+1
   \   0000012C   0x1C49             ADDS     R1,R1,#+1
   \   0000012E   0x2802             CMP      R0,#+2
   \   00000130   0xF6FF 0xAFF4      BLT.W    ??SetCoefValue_13
   \                     ??SetCoefValue_15: (+1)
   \   00000134   0xF44F 0x707A      MOV      R0,#+1000
   \   00000138   0x2302             MOVS     R3,#+2
   \   0000013A   0x9000             STR      R0,[SP, #+0]
   \   0000013C   0x463A             MOV      R2,R7
   \   0000013E   0x2140             MOVS     R1,#+64
   \   00000140   0x4640             MOV      R0,R8
   \   00000142   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000146   0x2800             CMP      R0,#+0
   \   00000148   0xD1F4             BNE.N    ??SetCoefValue_15
   \   0000014A   0x4638             MOV      R0,R7
   \   0000014C   0x.... 0x....      BL       free
    551          
    552          //5. Write the bottom 8 bits of coefficient in I2C address 0x3F
    553          pcSTAComnd[0] = (uint8_t)((DataCoef & 0x000000FF));
   \   00000150   0xF885 0x4024      STRB     R4,[R5, #+36]
    554          WriteSTAByte(0x3F,&pcSTAComnd[0],1);
   \   00000154   0x2002             MOVS     R0,#+2
   \   00000156   0x.... 0x....      BL       malloc
   \   0000015A   0x4604             MOV      R4,R0
   \   0000015C   0x233F             MOVS     R3,#+63
   \   0000015E   0x2000             MOVS     R0,#+0
   \   00000160   0x4621             MOV      R1,R4
   \   00000162   0xF105 0x0223      ADD      R2,R5,#+35
   \   00000166   0x7023             STRB     R3,[R4, #+0]
   \   00000168   0xE005             B.N      ??SetCoefValue_16
   \                     ??SetCoefValue_17: (+1)
   \   0000016A   0xB910             CBNZ.N   R0,??SetCoefValue_18
   \   0000016C   0x233F             MOVS     R3,#+63
   \   0000016E   0x7023             STRB     R3,[R4, #+0]
   \   00000170   0xE001             B.N      ??SetCoefValue_16
   \                     ??SetCoefValue_18: (+1)
   \   00000172   0x7813             LDRB     R3,[R2, #+0]
   \   00000174   0x700B             STRB     R3,[R1, #+0]
   \                     ??SetCoefValue_16: (+1)
   \   00000176   0x1C40             ADDS     R0,R0,#+1
   \   00000178   0x1C52             ADDS     R2,R2,#+1
   \   0000017A   0x1C49             ADDS     R1,R1,#+1
   \   0000017C   0x2802             CMP      R0,#+2
   \   0000017E   0xDBF4             BLT.N    ??SetCoefValue_17
   \                     ??SetCoefValue_19: (+1)
   \   00000180   0xF44F 0x707A      MOV      R0,#+1000
   \   00000184   0x2302             MOVS     R3,#+2
   \   00000186   0x9000             STR      R0,[SP, #+0]
   \   00000188   0x4622             MOV      R2,R4
   \   0000018A   0x2140             MOVS     R1,#+64
   \   0000018C   0x4640             MOV      R0,R8
   \   0000018E   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000192   0x2800             CMP      R0,#+0
   \   00000194   0xD1F4             BNE.N    ??SetCoefValue_19
   \   00000196   0x4620             MOV      R0,R4
   \   00000198   0x.... 0x....      BL       free
    555          
    556          
    557          //6. Write 1 to the W1 bit in I2C address 0x4C
    558          pcSTAComnd[0] = 0x01;
   \   0000019C   0x2001             MOVS     R0,#+1
   \   0000019E   0xF885 0x0024      STRB     R0,[R5, #+36]
    559          WriteSTAByte(0x4C,&pcSTAComnd[0],1);
   \   000001A2   0x2002             MOVS     R0,#+2
   \   000001A4   0x.... 0x....      BL       malloc
   \   000001A8   0x4604             MOV      R4,R0
   \   000001AA   0x234C             MOVS     R3,#+76
   \   000001AC   0x2000             MOVS     R0,#+0
   \   000001AE   0x4621             MOV      R1,R4
   \   000001B0   0xF105 0x0223      ADD      R2,R5,#+35
   \   000001B4   0x7023             STRB     R3,[R4, #+0]
   \   000001B6   0xE005             B.N      ??SetCoefValue_20
   \                     ??SetCoefValue_21: (+1)
   \   000001B8   0xB910             CBNZ.N   R0,??SetCoefValue_22
   \   000001BA   0x234C             MOVS     R3,#+76
   \   000001BC   0x7023             STRB     R3,[R4, #+0]
   \   000001BE   0xE001             B.N      ??SetCoefValue_20
   \                     ??SetCoefValue_22: (+1)
   \   000001C0   0x7813             LDRB     R3,[R2, #+0]
   \   000001C2   0x700B             STRB     R3,[R1, #+0]
   \                     ??SetCoefValue_20: (+1)
   \   000001C4   0x1C40             ADDS     R0,R0,#+1
   \   000001C6   0x1C52             ADDS     R2,R2,#+1
   \   000001C8   0x1C49             ADDS     R1,R1,#+1
   \   000001CA   0x2802             CMP      R0,#+2
   \   000001CC   0xF6FF 0xAFF4      BLT.W    ??SetCoefValue_21
   \                     ??SetCoefValue_23: (+1)
   \   000001D0   0xF44F 0x707A      MOV      R0,#+1000
   \   000001D4   0x2302             MOVS     R3,#+2
   \   000001D6   0x9000             STR      R0,[SP, #+0]
   \   000001D8   0x4622             MOV      R2,R4
   \   000001DA   0x2140             MOVS     R1,#+64
   \   000001DC   0x4640             MOV      R0,R8
   \   000001DE   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   000001E2   0x2800             CMP      R0,#+0
   \   000001E4   0xD1F4             BNE.N    ??SetCoefValue_23
   \   000001E6   0x4620             MOV      R0,R4
   \   000001E8   0xB002             ADD      SP,SP,#+8
   \   000001EA   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   000001EE   0x.... 0x....      B.W      free
    560          
    561          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     bufCoefBiquad

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     hi2c2
    562          
    563          
    564          static void sta321mp_mixer( int16_t mix, int16_t ch_out, int16_t ch_in, uint32_t value)
    565          {
    566              uint16_t address = 0x1A0 + 64*(mix-1) + 8*(ch_out-1) + (ch_in-1);
    567          
    568          	SetCoefValue(address,value);	
    569          }
    570          
    571          static void sta321mp_prescale(int16_t ch, uint32_t val)
    572          {
    573            unsigned int address = 0x190 + (ch-1);
    574            SetCoefValue(address, val);
    575          }
    576          
    577          
    578          static void sta321mp_postscale(int16_t ch, uint32_t val)
    579          {
    580            uint16_t address = 0x198 + (ch-1);
    581            SetCoefValue(address, val);
    582          }
    583          
    584          /* set the biquad coefficients in RAM */
    585          static void sta321mp_biquad(int16_t channel, int16_t biquad, 
    586                                      uint32_t b1_2, uint32_t b2, uint32_t a1_2, uint32_t a2, uint32_t b0_2)
    587          {
    588          
    589             uint16_t Adrss = 50*(channel-1) + 5*(biquad-1);
    590          
    591          	//1. Write the top 2 bits of address to I2C register 0x3B
    592          	pcSTAComnd[0] = (Adrss>>8)&0x03;
    593          	WriteSTAByte(0x3B,&pcSTAComnd[0],1);
    594          	
    595          	//2. Write the bottom 8 bits of address to I2C register 0x3C
    596          	pcSTAComnd[0] = (Adrss);
    597          	WriteSTAByte(0x3C,&pcSTAComnd[0],1);
    598          
    599              pcSTAComnd[0]= 0xFF & (b1_2 >> 16);
    600          	WriteSTAByte(0x3D,&pcSTAComnd[0],1);
    601          
    602          	
    603              pcSTAComnd[0]= 0xFF & (b1_2 >> 8);
    604          	WriteSTAByte(0x3E,&pcSTAComnd[0],1  );
    605          	
    606              pcSTAComnd[0]= 0xFF & b1_2;
    607          	WriteSTAByte(0x3F, &pcSTAComnd[0],1 );
    608          	
    609              pcSTAComnd[0]= 0xFF & (b2 >> 16);
    610          	WriteSTAByte(0x40, &pcSTAComnd[0],1 );
    611          	
    612              pcSTAComnd[0]= 0xFF & (b2 >> 8);
    613          	WriteSTAByte(0x41, &pcSTAComnd[0],1 );
    614          	
    615              pcSTAComnd[0]= 0xFF & b2;
    616          	WriteSTAByte( 0x42,&pcSTAComnd[0],1 );
    617          	
    618              pcSTAComnd[0]= 0xFF & (a1_2 >> 16);
    619          	WriteSTAByte( 0x43, &pcSTAComnd[0],1 );
    620          	
    621              pcSTAComnd[0]= 0xFF & (a1_2 >> 8);
    622          	WriteSTAByte( 0x44,  &pcSTAComnd[0],1);
    623          	
    624              pcSTAComnd[0]= 0xFF & a1_2;
    625          	WriteSTAByte( 0x45, &pcSTAComnd[0],1 );
    626          	
    627              pcSTAComnd[0]= 0xFF & (a2 >> 16);
    628          	WriteSTAByte( 0x46, &pcSTAComnd[0],1 );
    629          
    630              pcSTAComnd[0]=  0xFF & (a2 >> 8);
    631          	WriteSTAByte( 0x47, &pcSTAComnd[0],1);
    632          	
    633              pcSTAComnd[0]= 0xFF & a2;
    634          	WriteSTAByte( 0x48, &pcSTAComnd[0],1 );
    635          	
    636              pcSTAComnd[0]= 0xFF & (b0_2 >> 16);
    637          	WriteSTAByte( 0x49, &pcSTAComnd[0],1 );
    638          	
    639              pcSTAComnd[0]= 0xFF & (b0_2 >> 8);
    640          	WriteSTAByte( 0x4A, &pcSTAComnd[0],1 );
    641          	
    642              pcSTAComnd[0]= 0xFF & b0_2 ;
    643          	WriteSTAByte( 0x4B,&pcSTAComnd[0],1 );
    644          	
    645          	//18. Write 1 to the WA bit in I2C address 0x4C
    646          	pcSTAComnd[0] = 0x02;
    647          	WriteSTAByte(0x4C,&pcSTAComnd[0],1);
    648          
    649          }
    650          
    651          
    652          static void sta321mp_LP_48kHz(void)
                             ^
Warning[Pe177]: function "sta321mp_LP_48kHz" was declared but never referenced
    653          {
    654            /*
    655             * This function sets the biquads as a 14th order elliptic
    656             * Low pass filter with cutoff at 40kHz
    657             */
    658            sta321mp_biquad( 1, 1, 0x000000, 0x000000, 0x000000, 0x000000,0x400000); 
    659            sta321mp_biquad( 1, 2,  0x2d7d5e, 0x3faa84, 0x6599c4, 0xad9ed1,0x1fd542);
    660            sta321mp_biquad( 1, 3, 0xfcec16, 0x177b7b, 0x63c973, 0xa4b499,0xbbdbd);
    661            sta321mp_biquad( 1, 4, 0xf4caac, 0x177b7b, 0x616997, 0x98a93a,0xbbdbd);
    662            sta321mp_biquad( 1, 5, 0xf1c0e3, 0x177b7b, 0x5f9823, 0x8e691f,0xbbdbd);
    663            sta321mp_biquad( 1, 6, 0xf083cb, 0x177b7b, 0x5ec1ab, 0x873641,0xbbdbd);
    664            sta321mp_biquad( 1, 7, 0xf00d82, 0x177b7b, 0x5f0547, 0x822c2a,0xbbdbd);
    665            sta321mp_biquad( 1, 8, 0x000000, 0x000000, 0x000000, 0x000000,0x400000);
    666            sta321mp_biquad( 1, 9, 0x000000, 0x000000, 0x000000, 0x000000,0x400000);
    667            sta321mp_biquad( 1, 10,0x000000, 0x000000, 0x000000, 0x000000,0x400000);
    668          }
    669          
    670          static void sta321mp_LP_192kHz(void)
                             ^
Warning[Pe177]: function "sta321mp_LP_192kHz" was declared but never referenced
    671          {
    672            /*
    673             * This function sets the biquads as a 18th order butterworth
    674             * Low pass filter with cutoff at 40kHz
    675             */
    676            sta321mp_biquad(1, 2, 0x34417a, 0x34417a, 0x10e211, 0xfd899c,0x1a20bd);
    677            sta321mp_biquad(1, 3, 0x1be34f, 0x1be34f, 0x112371, 0xfb9073,0xdf1a7);
    678            sta321mp_biquad(1, 4, 0x1be34f, 0x1be34f, 0x11aa29, 0xf77f69,0xdf1a7);
    679            sta321mp_biquad(1, 5, 0x1be34f, 0x1be34f, 0x127eb2, 0xf1150f,0xdf1a7);
    680            sta321mp_biquad(1, 6, 0x1be34f, 0x1be34f, 0x13af2a, 0xe7e44f,0xdf1a7);
    681            sta321mp_biquad(1, 7, 0x1be34f, 0x1be34f, 0x155167, 0xdb446c,0xdf1a7);
    682            sta321mp_biquad(1, 8, 0x1be34f, 0x1be34f, 0x17867e, 0xca35c0,0xdf1a7);
    683            sta321mp_biquad(1, 9, 0x1be34f, 0x1be34f, 0x1a80c9, 0xb33334,0xdf1a7);
    684            sta321mp_biquad(1, 10, 0x1be34f, 0x1be34f, 0x1e8e71, 0x93e0cf,0xdf1a7);
    685          }
    686          
    687          
    688          static void STA321MP_DefautLoad(void)
    689          {
    690                WriteSTAByte(STA321MP_CONFA,pcSTAComnd,77);
    691                WriteSTAByte(0x5A,pcSTAComnd1,2);
    692                WriteSTAByte(0x5D,pcSTAComnd2,33);
    693          	  WriteSTAByte(0x80,pcSTAComnd2,6);
    694          	  
    695          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   ReadCoef
        32   -> HAL_I2C_Master_Receive
        32   -> HAL_I2C_Master_Transmit
        32   -> free
        32   -> malloc
      24   ReadSTASeq
        24   -> HAL_I2C_Master_Receive
        24   -> HAL_I2C_Master_Transmit
      32   STA321MP_Ini
        32   -> HAL_Delay
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
         0   -> STACoefSet
        32   -> WriteSTAByte
       8   STACoefSet
         0   -> WriteCoef
         8   -> WriteCoef
         8   -> WriteSTAByte
      32   SetCoefValue
        32   -> HAL_I2C_Master_Transmit
         0   -> free
        32   -> free
        32   -> malloc
      40   WriteCoef
        40   -> HAL_I2C_Master_Transmit
         0   -> free
        40   -> free
        40   -> malloc
      32   WriteSTAByte
        32   -> HAL_I2C_Master_Transmit
         0   -> free
        32   -> malloc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
     236  ReadCoef
      62  ReadSTASeq
    1358  STA321MP_Ini
     740  STACoefSet
     498  SetCoefValue
     510  WriteCoef
      90  WriteSTAByte
     156  bufCoefBiquad
          GPIO_STA
          pcSTAComnd
          pcSTAComnd1
          pcSTAComnd2
       8  pcSTAComnd3

 
   164 bytes in section .data
 3 514 bytes in section .text
 
 3 514 bytes of CODE memory
   164 bytes of DATA memory

Errors: none
Warnings: 2
