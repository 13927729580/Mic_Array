###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       05/Mar/2016  17:13:19
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\audio_application.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\audio_application.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Oh --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\audio_application.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\audio_application.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\audio_application.c
      1          
      2          
      3          /* Includes ------------------------------------------------------------------*/
      4          #include "audio_application.h"
      5          
      6          
      7          /* Private typedef -----------------------------------------------------------*/
      8          #define AUDIO_SIZE_ELEMENT (2*AUDIO_OUT_BUFFER_SIZE+10)
      9          /* Private define ------------------------------------------------------------*/
     10          /* Private macro -------------------------------------------------------------*/
     11          
     12          /** @defgroup AUDIO_APPLICATION_Exported_Variables 
     13          * @{
     14          */
     15          #pragma location= (SDRAM_BANK_ADDR+ 3*BUFFER_SIZE_BYTE)

   \                                 In section .bss, at 0xc00181e0
     16          int16_t PCM_Buffer1[8*AUDIO_OUT_BUFFER_SIZE];
   \                     PCM_Buffer1:
   \   00000000                      DS8 16384
     17          #pragma location= (SDRAM_BANK_ADDR+ 3*BUFFER_SIZE_BYTE+2*8*AUDIO_OUT_BUFFER_SIZE)

   \                                 In section .bss, at 0xc001c1e0
     18          int16_t PCM_Buffer2[8*AUDIO_OUT_BUFFER_SIZE];//AUDIO_CHANNELS
   \                     PCM_Buffer2:
   \   00000000                      DS8 16384
     19          #pragma location= (SDRAM_BANK_ADDR+ 3*BUFFER_SIZE_BYTE+4*8*AUDIO_OUT_BUFFER_SIZE)

   \                                 In section .bss, at 0xc00201e0
     20          int16_t PCM_Buffer3[8*AUDIO_OUT_BUFFER_SIZE];
   \                     PCM_Buffer3:
   \   00000000                      DS8 16384
     21          

   \                                 In section .bss, align 2
     22          __IO uint16_t cntFrm;
   \                     cntFrm:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     23          __IO uint8_t  swtBufUSBOut;
   \                     swtBufUSBOut:
   \   00000000                      DS8 1
     24          
     25          extern uint8_t buffer_switch;
     26          extern Mic_Array_Data Buffer1,Buffer2,Buffer3;
     27          extern __IO uint8_t   cntBtnPress;
     28          
     29          
     30          

   \                                 In section .text, align 2, keep-with-next
     31          void AudioUSBSend(uint16_t idxFrm) /* This function called every ms */
     32          {
     33          #if 0
     34          	switch (cntBtnPress)
     35          			{
     36          			  case 0:
     37          				  switch (buffer_switch)
     38          				  {
     39          					case BUF1_PLAY:
     40          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC1[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     41          					  break;
     42          					case BUF2_PLAY:
     43          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC1[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     44          					  break;
     45          					case BUF3_PLAY:
     46          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC1[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     47          					  break;
     48          					default:
     49          					  break;
     50          				  }   
     51          
     52          					break;
     53          			  case 1:
     54          				  switch (buffer_switch)
     55          				  {
     56          					case BUF1_PLAY:
     57          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC2[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     58          					  break;
     59          					case BUF2_PLAY:
     60          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC2[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     61          					  break;
     62          					case BUF3_PLAY:
     63          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC2[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     64          					  break;
     65          					default:
     66          					  break;
     67          				  }   
     68          
     69          					break;
     70          			  case 2:
     71          				  switch (buffer_switch)
     72          				  {
     73          					case BUF1_PLAY:
     74          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC3[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     75          					  break;
     76          					case BUF2_PLAY:
     77          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC3[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     78          					  break;
     79          					case BUF3_PLAY:
     80          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC3[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     81          					  break;
     82          					default:
     83          					  break;
     84          				  }   
     85          
     86          					break;
     87          			  case 3:
     88          				  switch (buffer_switch)
     89          				  {
     90          					case BUF1_PLAY:
     91          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC4[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     92          					  break;
     93          					case BUF2_PLAY:
     94          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC4[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     95          					  break;
     96          					case BUF3_PLAY:
     97          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC4[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     98          					  break;
     99          					default:
    100          					  break;
    101          				  }   
    102          
    103          					break;
    104          			  case 4:
    105          				  switch (buffer_switch)
    106          				  {
    107          					case BUF1_PLAY:
    108          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC5[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    109          					  break;
    110          					case BUF2_PLAY:
    111          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC5[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    112          					  break;
    113          					case BUF3_PLAY:
    114          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC5[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    115          					  break;
    116          					default:
    117          					  break;
    118          				  }   
    119          
    120          				  break;
    121          			  case 5:
    122          				  switch (buffer_switch)
    123          				  {
    124          					case BUF1_PLAY:
    125          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC6[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    126          					  break;
    127          					case BUF2_PLAY:
    128          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC6[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    129          					  break;
    130          					case BUF3_PLAY:
    131          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC6[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    132          					  break;
    133          					default:
    134          					  break;
    135          				  }   
    136          
    137          				  break;
    138          			  case 6:
    139          				  switch (buffer_switch)
    140          				  {
    141          					case BUF1_PLAY:
    142          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC7[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    143          					  break;
    144          					case BUF2_PLAY:
    145          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC7[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    146          					  break;
    147          					case BUF3_PLAY:
    148          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC7[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    149          					  break;
    150          					default:
    151          					  break;
    152          				  }   
    153          
    154          				  break;
    155          			  case 7:
    156          				  switch (buffer_switch)
    157          				  {
    158          					case BUF1_PLAY:
    159          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC8[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    160          					  break;
    161          					case BUF2_PLAY:
    162          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC8[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    163          					  break;
    164          					case BUF3_PLAY:
    165          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC8[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    166          					  break;
    167          					default:
    168          					  break;
    169          				  }   
    170          
    171          				  break;
    172          			  default:
    173          				   break;
    174          			}
    175          
    176          
    177          #else
    178              //Send_Audio_to_USB((int16_t *)PCM_Buffer1, AUDIO_OUT_BUFFER_SIZE*AUDIO_CHANNELS);
    179              
    180              (swtBufUSBOut)?Send_Audio_to_USB((int16_t *)&PCM_Buffer2[(2*AUDIO_SAMPLING_FREQUENCY/1000)*2*idxFrm], (2*AUDIO_SAMPLING_FREQUENCY/1000)*2)://AUDIO_CHANNELS
    181                             Send_Audio_to_USB((int16_t *)&PCM_Buffer1[(2*AUDIO_SAMPLING_FREQUENCY/1000)*2*idxFrm], (2*AUDIO_SAMPLING_FREQUENCY/1000)*2);//AUDIO_CHANNELS
   \                     AudioUSBSend: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable1
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xBF19             ITTEE    NE 
   \   00000008   0x2140             MOVNE    R1,#+64
   \   0000000A   0x....             LDRNE.N  R2,??DataTable1_1  ;; 0xc001c1e0
   \   0000000C   0x2140             MOVEQ    R1,#+64
   \   0000000E   0x....             LDREQ.N  R2,??DataTable1_2  ;; 0xc00181e0
   \   00000010   0xEB02 0x10C0      ADD      R0,R2,R0, LSL #+7
   \   00000014   0x.... 0x....      B.W      Send_Audio_to_USB
   \   00000018                      REQUIRE PCM_Buffer2
   \   00000018                      REQUIRE PCM_Buffer1
    182          #endif			   
    183          }
    184          
    185          /* This function should be called after data processing */

   \                                 In section .text, align 2, keep-with-next
    186          void AudioPlayerUpd(void) /* This function called with period of 64ms */
    187          {
    188          #if (!0)
    189          	switch (buffer_switch)
   \                     AudioPlayerUpd: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable1_3
   \   00000002   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0xB118             CBZ.N    R0,??AudioPlayerUpd_0
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD055             BEQ.N    ??AudioPlayerUpd_1
   \   0000000E   0xD32A             BCC.N    ??AudioPlayerUpd_2
   \   00000010   0xE07C             B.N      ??AudioPlayerUpd_3
    190              {
    191                case BUF1_PLAY:
    192          		for (uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
   \                     ??AudioPlayerUpd_0: (+1)
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x....             LDR.N    R4,??DataTable1_4
   \   00000016   0x....             LDR.N    R0,??DataTable1
   \   00000018   0x....             LDR.N    R1,??DataTable1_1  ;; 0xc001c1e0
   \   0000001A   0x....             LDR.N    R2,??DataTable1_2  ;; 0xc00181e0
    193          		{
    194          		  if (i%2==0)
   \                     ??AudioPlayerUpd_4: (+1)
   \   0000001C   0xEB03 0x75D3      ADD      R5,R3,R3, LSR #+31
   \   00000020   0x106D             ASRS     R5,R5,#+1
   \   00000022   0xEBB3 0x0645      SUBS     R6,R3,R5, LSL #+1
   \   00000026   0xD118             BNE.N    ??AudioPlayerUpd_5
    195          		  {
    196          			  for(uint8_t j=0;j<8;j++)//AUDIO_CHANNELS
   \   00000028   0xEB02 0x1605      ADD      R6,R2,R5, LSL #+4
   \   0000002C   0x46A0             MOV      R8,R4
   \   0000002E   0xEB01 0x1505      ADD      R5,R1,R5, LSL #+4
   \   00000032   0xF04F 0x0C08      MOV      R12,#+8
    197          			  {
    198          				  (swtBufUSBOut)?(PCM_Buffer1[8*(i/2)+j] = (int16_t)*(&Buffer3.bufMIC1[0] + AUDIO_SIZE_ELEMENT*j + i)):
    199          								  (PCM_Buffer2[8*(i/2)+j] = (int16_t)*(&Buffer3.bufMIC1[0] + AUDIO_SIZE_ELEMENT*j + i));
   \                     ??AudioPlayerUpd_6: (+1)
   \   00000036   0xF9B8 0xE000      LDRSH    LR,[R8, #+0]
   \   0000003A   0x7807             LDRB     R7,[R0, #+0]
    200          
    201          			  }
   \   0000003C   0xF508 0x5880      ADD      R8,R8,#+4096
   \   00000040   0xF108 0x0814      ADD      R8,R8,#+20
   \   00000044   0x2F00             CMP      R7,#+0
   \   00000046   0xBF14             ITE      NE 
   \   00000048   0xF8A6 0xE000      STRHNE   LR,[R6, #+0]
   \   0000004C   0xF8A5 0xE000      STRHEQ   LR,[R5, #+0]
   \   00000050   0x1CAD             ADDS     R5,R5,#+2
   \   00000052   0x1CB6             ADDS     R6,R6,#+2
   \   00000054   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   00000058   0xD1ED             BNE.N    ??AudioPlayerUpd_6
    202          		  }
    203          		}
   \                     ??AudioPlayerUpd_5: (+1)
   \   0000005A   0x1C5B             ADDS     R3,R3,#+1
   \   0000005C   0x1CA4             ADDS     R4,R4,#+2
   \   0000005E   0xF5B3 0x6F80      CMP      R3,#+1024
   \   00000062   0xDA53             BGE.N    ??AudioPlayerUpd_3
   \   00000064   0xE7DA             B.N      ??AudioPlayerUpd_4
    204                  break;    
    205                case BUF2_PLAY:
    206          	  	for (uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
   \                     ??AudioPlayerUpd_2: (+1)
   \   00000066   0x2300             MOVS     R3,#+0
   \   00000068   0x....             LDR.N    R4,??DataTable1_5
   \   0000006A   0x....             LDR.N    R0,??DataTable1
   \   0000006C   0x....             LDR.N    R1,??DataTable1_1  ;; 0xc001c1e0
   \   0000006E   0x....             LDR.N    R2,??DataTable1_2  ;; 0xc00181e0
    207           	  	{
    208           	  	    if (i%2==0)
   \                     ??AudioPlayerUpd_7: (+1)
   \   00000070   0xEB03 0x75D3      ADD      R5,R3,R3, LSR #+31
   \   00000074   0x106D             ASRS     R5,R5,#+1
   \   00000076   0xEBB3 0x0645      SUBS     R6,R3,R5, LSL #+1
   \   0000007A   0xD118             BNE.N    ??AudioPlayerUpd_8
    209           	  	    {
    210                          for(uint8_t j=0;j<8;j++)//AUDIO_CHANNELS
   \   0000007C   0xEB02 0x1605      ADD      R6,R2,R5, LSL #+4
   \   00000080   0x46A0             MOV      R8,R4
   \   00000082   0xEB01 0x1505      ADD      R5,R1,R5, LSL #+4
   \   00000086   0xF04F 0x0C08      MOV      R12,#+8
    211                          {
    212                              (swtBufUSBOut)?(PCM_Buffer1[8*(i/2)+j] = (int16_t)*(&Buffer1.bufMIC1[0] + AUDIO_SIZE_ELEMENT*j + i)):
    213          						            (PCM_Buffer2[8*(i/2)+j] = (int16_t)*(&Buffer1.bufMIC1[0] + AUDIO_SIZE_ELEMENT*j + i));
   \                     ??AudioPlayerUpd_9: (+1)
   \   0000008A   0xF9B8 0xE000      LDRSH    LR,[R8, #+0]
   \   0000008E   0x7807             LDRB     R7,[R0, #+0]
    214                          }
   \   00000090   0xF508 0x5880      ADD      R8,R8,#+4096
   \   00000094   0xF108 0x0814      ADD      R8,R8,#+20
   \   00000098   0x2F00             CMP      R7,#+0
   \   0000009A   0xBF14             ITE      NE 
   \   0000009C   0xF8A6 0xE000      STRHNE   LR,[R6, #+0]
   \   000000A0   0xF8A5 0xE000      STRHEQ   LR,[R5, #+0]
   \   000000A4   0x1CAD             ADDS     R5,R5,#+2
   \   000000A6   0x1CB6             ADDS     R6,R6,#+2
   \   000000A8   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   000000AC   0xD1ED             BNE.N    ??AudioPlayerUpd_9
    215           	  	    }
    216          		}
   \                     ??AudioPlayerUpd_8: (+1)
   \   000000AE   0x1C5B             ADDS     R3,R3,#+1
   \   000000B0   0x1CA4             ADDS     R4,R4,#+2
   \   000000B2   0xF5B3 0x6F80      CMP      R3,#+1024
   \   000000B6   0xDA29             BGE.N    ??AudioPlayerUpd_3
   \   000000B8   0xE7DA             B.N      ??AudioPlayerUpd_7
    217          		
    218                  break;
    219                case BUF3_PLAY:
    220          	  	for (uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
   \                     ??AudioPlayerUpd_1: (+1)
   \   000000BA   0x2300             MOVS     R3,#+0
   \   000000BC   0x....             LDR.N    R4,??DataTable1_6
   \   000000BE   0x....             LDR.N    R0,??DataTable1
   \   000000C0   0x....             LDR.N    R1,??DataTable1_1  ;; 0xc001c1e0
   \   000000C2   0x....             LDR.N    R2,??DataTable1_2  ;; 0xc00181e0
    221           	  	{
    222           	  	    if (i%2==0)
   \                     ??AudioPlayerUpd_10: (+1)
   \   000000C4   0xEB03 0x75D3      ADD      R5,R3,R3, LSR #+31
   \   000000C8   0x106D             ASRS     R5,R5,#+1
   \   000000CA   0xEBB3 0x0645      SUBS     R6,R3,R5, LSL #+1
   \   000000CE   0xD118             BNE.N    ??AudioPlayerUpd_11
    223           	  	    {
    224          	 	  	    for(uint8_t j=0;j<8;j++)//AUDIO_CHANNELS
   \   000000D0   0xEB02 0x1605      ADD      R6,R2,R5, LSL #+4
   \   000000D4   0x46A0             MOV      R8,R4
   \   000000D6   0xEB01 0x1505      ADD      R5,R1,R5, LSL #+4
   \   000000DA   0xF04F 0x0C08      MOV      R12,#+8
    225          	 	  	    {
    226                                      (swtBufUSBOut)?(PCM_Buffer1[8*(i/2)+j] = (int16_t)*(&Buffer2.bufMIC1[0] + AUDIO_SIZE_ELEMENT*j + i)):
    227          								            (PCM_Buffer2[8*(i/2)+j] = (int16_t)*(&Buffer2.bufMIC1[0] + AUDIO_SIZE_ELEMENT*j + i));	                
   \                     ??AudioPlayerUpd_12: (+1)
   \   000000DE   0xF9B8 0xE000      LDRSH    LR,[R8, #+0]
   \   000000E2   0x7807             LDRB     R7,[R0, #+0]
    228          	 	  	    }
   \   000000E4   0xF508 0x5880      ADD      R8,R8,#+4096
   \   000000E8   0xF108 0x0814      ADD      R8,R8,#+20
   \   000000EC   0x2F00             CMP      R7,#+0
   \   000000EE   0xBF14             ITE      NE 
   \   000000F0   0xF8A6 0xE000      STRHNE   LR,[R6, #+0]
   \   000000F4   0xF8A5 0xE000      STRHEQ   LR,[R5, #+0]
   \   000000F8   0x1CAD             ADDS     R5,R5,#+2
   \   000000FA   0x1CB6             ADDS     R6,R6,#+2
   \   000000FC   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   00000100   0xD1ED             BNE.N    ??AudioPlayerUpd_12
    229           	  	    }
    230          		}	  	
   \                     ??AudioPlayerUpd_11: (+1)
   \   00000102   0x1C5B             ADDS     R3,R3,#+1
   \   00000104   0x1CA4             ADDS     R4,R4,#+2
   \   00000106   0xF5B3 0x6F80      CMP      R3,#+1024
   \   0000010A   0xDBDB             BLT.N    ??AudioPlayerUpd_10
    231                  break;
    232                default:
    233                  break;
    234              }
    235          
    236          	swtBufUSBOut^=0x01;
   \                     ??AudioPlayerUpd_3: (+1)
   \   0000010C   0x....             LDR.N    R0,??DataTable1
   \   0000010E   0x7801             LDRB     R1,[R0, #+0]
   \   00000110   0xF081 0x0101      EOR      R1,R1,#0x1
   \   00000114   0x7001             STRB     R1,[R0, #+0]
    237          #else
    238          
    239          swtBufUSBOut^=0x01;
    240          
    241          
    242          /*-------------------------------------------------------------------------------------------------------------
    243          			  
    244          	Sequence  Record Data                     Processing Data                 Player Data
    245          			  
    246          	1-------  Buffer1                         Buffer2                         Buffer3
    247          			  
    248          	2-------  Buffer3                         Buffer1                         Buffer2		  
    249          			  
    250          	3-------  Buffer2                         Buffer3                         Buffer1 
    251           ---------------------------------------------------------------------------------------------------------------*/
    252          
    253          switch (buffer_switch)
    254          {
    255          	case BUF1_PLAY:
    256          		  switch (cntBtnPress)
    257          		  {
    258          			case 0:
    259          				  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    260          				  { 		   
    261          						   (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC1[i]):(PCM_Buffer2[i] = Buffer3.bufMIC1[i]);
    262          				  }
    263          				  break;
    264          			case 1:
    265          				  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    266          				  { 		   
    267          							(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC2[i]):(PCM_Buffer2[i] = Buffer3.bufMIC2[i]);
    268          				  }
    269          				  break;
    270          			case 2:
    271          				  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    272          				  {
    273          					  (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC3[i]):(PCM_Buffer2[i] = Buffer3.bufMIC3[i]);
    274          				  }
    275          				  break;
    276          			case 3:
    277          				  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    278          				  { 		 
    279          					  (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC4[i]):(PCM_Buffer2[i] = Buffer3.bufMIC4[i]);
    280          				  }
    281          				  break;
    282          			case 4:
    283          				for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    284          				{		   
    285          					(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC5[i]):(PCM_Buffer2[i] = Buffer3.bufMIC5[i]);
    286          				}
    287          				break;
    288          			case 5:
    289          				for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    290          				{		   
    291          					(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC6[i]):(PCM_Buffer2[i] = Buffer3.bufMIC6[i]);
    292          				}
    293          				break;
    294          			case 6:
    295          				for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    296          				{
    297          					(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC7[i]):(PCM_Buffer2[i] = Buffer3.bufMIC7[i]);
    298          				}
    299          				break;
    300          			case 7:
    301          				for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    302          				{
    303          					(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC8[i]):(PCM_Buffer2[i] = Buffer3.bufMIC8[i]);
    304          				}
    305          				break;
    306          			default:
    307          				 break;
    308          		  } 					  
    309          	  break;
    310          
    311            case BUF2_PLAY:
    312          	  switch (cntBtnPress)
    313          	  {
    314          		case 0:
    315          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    316          			  { 		   
    317          					   (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC1[i]):(PCM_Buffer2[i] = Buffer1.bufMIC1[i]);
    318          			  }
    319          			  break;
    320          		case 1:
    321          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    322          			  { 		   
    323          						(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC2[i]):(PCM_Buffer2[i] = Buffer1.bufMIC2[i]);
    324          			  }
    325          			  break;
    326          		case 2:
    327          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    328          			  {
    329          				  (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC3[i]):(PCM_Buffer2[i] = Buffer1.bufMIC3[i]);
    330          			  }
    331          			  break;
    332          		case 3:
    333          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    334          			  { 		 
    335          				  (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC4[i]):(PCM_Buffer2[i] = Buffer1.bufMIC4[i]);
    336          			  }
    337          			  break;
    338          		case 4:
    339          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    340          			{		   
    341          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC5[i]):(PCM_Buffer2[i] = Buffer1.bufMIC5[i]);
    342          			}
    343          			break;
    344          		case 5:
    345          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    346          			{		   
    347          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC6[i]):(PCM_Buffer2[i] = Buffer1.bufMIC6[i]);
    348          			}
    349          			break;
    350          		case 6:
    351          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    352          			{
    353          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC7[i]):(PCM_Buffer2[i] = Buffer1.bufMIC7[i]);
    354          			}
    355          			break;
    356          		case 7:
    357          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    358          			{
    359          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC8[i]):(PCM_Buffer2[i] = Buffer1.bufMIC8[i]);
    360          			}
    361          			break;
    362          		default:
    363          			 break;
    364          	  }
    365          	  
    366           
    367            
    368          	break;
    369            case BUF3_PLAY:
    370          	  switch (cntBtnPress)
    371          	  {
    372          		case 0:
    373          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    374          			  { 		   
    375          					   (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC1[i]):(PCM_Buffer2[i] = Buffer2.bufMIC1[i]);
    376          			  }
    377          			  break;
    378          		case 1:
    379          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    380          			  { 		   
    381          						(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC2[i]):(PCM_Buffer2[i] = Buffer2.bufMIC2[i]);
    382          			  }
    383          			  break;
    384          		case 2:
    385          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    386          			  {
    387          				  (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC3[i]):(PCM_Buffer2[i] = Buffer2.bufMIC3[i]);
    388          			  }
    389          			  break;
    390          		case 3:
    391          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    392          			  { 		 
    393          				  (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC4[i]):(PCM_Buffer2[i] = Buffer2.bufMIC4[i]);
    394          			  }
    395          			  break;
    396          		case 4:
    397          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    398          			{		   
    399          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC5[i]):(PCM_Buffer2[i] = Buffer2.bufMIC5[i]);
    400          			}
    401          			break;
    402          		case 5:
    403          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    404          			{		   
    405          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC6[i]):(PCM_Buffer2[i] = Buffer2.bufMIC6[i]);
    406          			}
    407          			break;
    408          		case 6:
    409          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    410          			{
    411          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC7[i]):(PCM_Buffer2[i] = Buffer2.bufMIC7[i]);
    412          			}
    413          			break;
    414          		case 7:
    415          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    416          			{
    417          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC8[i]):(PCM_Buffer2[i] = Buffer2.bufMIC8[i]);
    418          			}
    419          			break;
    420          		default:
    421          			 break;
    422          	  }
    423          		  
    424          	break;
    425            default:
    426          	break;
    427          }
    428          #endif
    429          
    430          }
   \   00000116   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \   0000011A                      REQUIRE PCM_Buffer1
   \   0000011A                      REQUIRE PCM_Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     swtBufUSBOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xC001C1E0         DC32     0xc001c1e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xC00181E0         DC32     0xc00181e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     Buffer2
    431          
    432          
    433          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   AudioPlayerUpd
       0   AudioUSBSend
         0   -> Send_Audio_to_USB


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
     282  AudioPlayerUpd
      24  AudioUSBSend
   16384  PCM_Buffer1
   16384  PCM_Buffer2
   16384  PCM_Buffer3
       2  cntFrm
       1  swtBufUSBOut

 
      3 bytes in section .bss
 49 152 bytes in section .bss  (abs)
    334 bytes in section .text
 
    334 bytes of CODE memory
 49 155 bytes of DATA memory

Errors: none
Warnings: none
