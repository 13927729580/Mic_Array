###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       30/Mar/2016  19:08:19
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\audio_application.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\audio_application.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\audio_application.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\audio_application.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\audio_application.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          /* Includes ------------------------------------------------------------------*/
      8          #include "audio_application.h"
      9          
     10          
     11          /* Private typedef -----------------------------------------------------------*/
     12          #define AUDIO_SIZE_ELEMENT (2*AUDIO_OUT_BUFFER_SIZE+10)
     13          /* Private define ------------------------------------------------------------*/
     14          /* Private macro -------------------------------------------------------------*/
     15          
     16          /** @defgroup AUDIO_APPLICATION_Exported_Variables 
     17          * @{
     18          */
     19          #if EXT_RAM
     20          #pragma location= (SDRAM_BANK_ADDR+ 3*BUFFER_SIZE_BYTE)
     21          #endif

   \                                 In section .bss, at 0xc00181e0
     22          int16_t PCM_Buffer1[8*AUDIO_OUT_BUFFER_SIZE];
   \                     PCM_Buffer1:
   \   00000000                      DS8 16384
     23          #if EXT_RAM
     24          #pragma location= (SDRAM_BANK_ADDR+ 3*BUFFER_SIZE_BYTE+2*8*AUDIO_OUT_BUFFER_SIZE)
     25          #endif

   \                                 In section .bss, at 0xc001c1e0
     26          int16_t PCM_Buffer2[8*AUDIO_OUT_BUFFER_SIZE];//AUDIO_CHANNELS
   \                     PCM_Buffer2:
   \   00000000                      DS8 16384
     27          #if EXT_RAM
     28          #pragma location= (SDRAM_BANK_ADDR+ 3*BUFFER_SIZE_BYTE+4*8*AUDIO_OUT_BUFFER_SIZE)
     29          #endif

   \                                 In section .bss, at 0xc00201e0
     30          int16_t PCM_Buffer3[8*AUDIO_OUT_BUFFER_SIZE];
   \                     PCM_Buffer3:
   \   00000000                      DS8 16384
     31          

   \                                 In section .bss, align 2
     32          __IO uint16_t cntFrm;
   \                     cntFrm:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     33          __IO uint8_t  swtBufUSBOut;
   \                     swtBufUSBOut:
   \   00000000                      DS8 1
     34          
     35          extern uint8_t buffer_switch;
     36          extern Mic_Array_Data Buffer1,Buffer2,Buffer3;
     37          extern __IO uint8_t   cntBtnPress;
     38          
     39          
     40          

   \                                 In section .text, align 2, keep-with-next
     41          void AudioUSBSend(uint16_t idxFrm) /* This function called every ms */
     42          {
     43          #if 0
     44          	switch (cntBtnPress)
     45          			{
     46          			  case 0:
     47          				  switch (buffer_switch)
     48          				  {
     49          					case BUF1_PLAY:
     50          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC1[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     51          					  break;
     52          					case BUF2_PLAY:
     53          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC1[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     54          					  break;
     55          					case BUF3_PLAY:
     56          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC1[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     57          					  break;
     58          					default:
     59          					  break;
     60          				  }   
     61          
     62          					break;
     63          			  case 1:
     64          				  switch (buffer_switch)
     65          				  {
     66          					case BUF1_PLAY:
     67          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC2[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     68          					  break;
     69          					case BUF2_PLAY:
     70          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC2[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     71          					  break;
     72          					case BUF3_PLAY:
     73          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC2[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     74          					  break;
     75          					default:
     76          					  break;
     77          				  }   
     78          
     79          					break;
     80          			  case 2:
     81          				  switch (buffer_switch)
     82          				  {
     83          					case BUF1_PLAY:
     84          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC3[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     85          					  break;
     86          					case BUF2_PLAY:
     87          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC3[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     88          					  break;
     89          					case BUF3_PLAY:
     90          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC3[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
     91          					  break;
     92          					default:
     93          					  break;
     94          				  }   
     95          
     96          					break;
     97          			  case 3:
     98          				  switch (buffer_switch)
     99          				  {
    100          					case BUF1_PLAY:
    101          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC4[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    102          					  break;
    103          					case BUF2_PLAY:
    104          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC4[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    105          					  break;
    106          					case BUF3_PLAY:
    107          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC4[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    108          					  break;
    109          					default:
    110          					  break;
    111          				  }   
    112          
    113          					break;
    114          			  case 4:
    115          				  switch (buffer_switch)
    116          				  {
    117          					case BUF1_PLAY:
    118          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC5[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    119          					  break;
    120          					case BUF2_PLAY:
    121          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC5[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    122          					  break;
    123          					case BUF3_PLAY:
    124          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC5[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    125          					  break;
    126          					default:
    127          					  break;
    128          				  }   
    129          
    130          				  break;
    131          			  case 5:
    132          				  switch (buffer_switch)
    133          				  {
    134          					case BUF1_PLAY:
    135          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC6[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    136          					  break;
    137          					case BUF2_PLAY:
    138          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC6[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    139          					  break;
    140          					case BUF3_PLAY:
    141          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC6[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    142          					  break;
    143          					default:
    144          					  break;
    145          				  }   
    146          
    147          				  break;
    148          			  case 6:
    149          				  switch (buffer_switch)
    150          				  {
    151          					case BUF1_PLAY:
    152          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC7[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    153          					  break;
    154          					case BUF2_PLAY:
    155          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC7[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    156          					  break;
    157          					case BUF3_PLAY:
    158          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC7[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    159          					  break;
    160          					default:
    161          					  break;
    162          				  }   
    163          
    164          				  break;
    165          			  case 7:
    166          				  switch (buffer_switch)
    167          				  {
    168          					case BUF1_PLAY:
    169          					  Send_Audio_to_USB((int16_t *)&Buffer1.bufMIC8[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    170          					  break;
    171          					case BUF2_PLAY:
    172          					  Send_Audio_to_USB((int16_t *)&Buffer2.bufMIC8[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    173          					  break;
    174          					case BUF3_PLAY:
    175          					  Send_Audio_to_USB((int16_t *)&Buffer3.bufMIC8[(AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS*idxFrm], (AUDIO_SAMPLING_FREQUENCY/1000)*AUDIO_CHANNELS);
    176          					  break;
    177          					default:
    178          					  break;
    179          				  }   
    180          
    181          				  break;
    182          			  default:
    183          				   break;
    184          			}
    185          
    186          
    187          #else
    188              //Send_Audio_to_USB((int16_t *)PCM_Buffer1, AUDIO_OUT_BUFFER_SIZE*AUDIO_CHANNELS);
    189              
    190              (!swtBufUSBOut)?Send_Audio_to_USB((int16_t *)&PCM_Buffer2[(8*AUDIO_SAMPLING_FREQUENCY/1000)*idxFrm], (8*AUDIO_SAMPLING_FREQUENCY/1000))://AUDIO_CHANNELS
    191                             Send_Audio_to_USB((int16_t *)&PCM_Buffer1[(8*AUDIO_SAMPLING_FREQUENCY/1000)*idxFrm], (8*AUDIO_SAMPLING_FREQUENCY/1000));//AUDIO_CHANNELS
   \                     AudioUSBSend: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable1
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xBF07             ITTEE    EQ 
   \   00000008   0x2180             MOVEQ    R1,#+128
   \   0000000A   0x....             LDREQ.N  R2,??DataTable1_1  ;; 0xc001c1e0
   \   0000000C   0x2180             MOVNE    R1,#+128
   \   0000000E   0x....             LDRNE.N  R2,??DataTable1_2  ;; 0xc00181e0
   \   00000010   0xEB02 0x2000      ADD      R0,R2,R0, LSL #+8
   \   00000014   0x.... 0x....      B.W      Send_Audio_to_USB
   \   00000018                      REQUIRE PCM_Buffer2
   \   00000018                      REQUIRE PCM_Buffer1
    192          #endif			   
    193          }
    194          
    195          /* This function should be called after data processing */

   \                                 In section .text, align 4, keep-with-next
    196          void AudioPlayerUpd(void) /* This function called with period of 64ms */
    197          {
    198          #if (!0)
    199          	switch (buffer_switch)
   \                     AudioPlayerUpd: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable1_3
   \   00000002   0xB4F0             PUSH     {R4-R7}
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xB120             CBZ.N    R0,??AudioPlayerUpd_0
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD036             BEQ.N    ??AudioPlayerUpd_1
   \   0000000C   0xD31B             BCC.N    ??AudioPlayerUpd_2
    200              {
    201                case BUF1_PLAY:
    202          		for (uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
    203          		{
    204          		  //if (i%2==0)
    205          		  {
    206          			  for(uint8_t j=0;j<8;j++)//AUDIO_CHANNELS
    207          			  {
    208          				  (swtBufUSBOut)?(PCM_Buffer1[8*(i)+j] = (int16_t)*(&Buffer3.bufMIC1[0] + AUDIO_SIZE_ELEMENT*j + i)):
    209          								  (PCM_Buffer2[8*(i)+j] = (int16_t)*(&Buffer3.bufMIC1[0] + AUDIO_SIZE_ELEMENT*j + i));
    210          
    211          			  }
    212          		  }
    213          		}
    214                  break;    
    215                case BUF2_PLAY:
    216          	  	for (uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
    217           	  	{
    218           	  	    //if (i%2==0)
    219           	  	    {
    220                          for(uint8_t j=0;j<8;j++)//AUDIO_CHANNELS
    221                          {
    222                              (swtBufUSBOut)?(PCM_Buffer1[8*(i)+j] = (int16_t)*(&Buffer1.bufMIC1[0] + AUDIO_SIZE_ELEMENT*j + i)):
    223          						            (PCM_Buffer2[8*(i)+j] = (int16_t)*(&Buffer1.bufMIC1[0] + AUDIO_SIZE_ELEMENT*j + i));
    224                          }
    225           	  	    }
    226          		}
    227          		
    228                  break;
    229                case BUF3_PLAY:
    230          	  	for (uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
    231           	  	{
    232           	  	    //if (i%2==0)
    233           	  	    {
    234          	 	  	    for(uint8_t j=0;j<8;j++)//AUDIO_CHANNELS
    235          	 	  	    {
    236                                      (swtBufUSBOut)?(PCM_Buffer1[8*(i)+j] = (int16_t)*(&Buffer2.bufMIC1[0] + AUDIO_SIZE_ELEMENT*j + i)):
    237          								            (PCM_Buffer2[8*(i)+j] = (int16_t)*(&Buffer2.bufMIC1[0] + AUDIO_SIZE_ELEMENT*j + i));	                
    238          	 	  	    }
    239           	  	    }
    240          		}	  	
    241                  break;
    242                default:
    243                  break;
    244              }
    245          
    246          	//swtBufUSBOut^=0x01;
    247          #else
    248          
    249          swtBufUSBOut^=0x01;
    250          
    251          
    252          /*-------------------------------------------------------------------------------------------------------------
    253          			  
    254          	Sequence  Record Data                     Processing Data                 Player Data
    255          			  
    256          	1-------  Buffer1                         Buffer2                         Buffer3
    257          			  
    258          	2-------  Buffer3                         Buffer1                         Buffer2		  
    259          			  
    260          	3-------  Buffer2                         Buffer3                         Buffer1 
    261           ---------------------------------------------------------------------------------------------------------------*/
    262          
    263          switch (buffer_switch)
    264          {
    265          	case BUF1_PLAY:
    266          		  switch (cntBtnPress)
    267          		  {
    268          			case 0:
    269          				  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    270          				  { 		   
    271          						   (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC1[i]):(PCM_Buffer2[i] = Buffer3.bufMIC1[i]);
    272          				  }
    273          				  break;
    274          			case 1:
    275          				  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    276          				  { 		   
    277          							(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC2[i]):(PCM_Buffer2[i] = Buffer3.bufMIC2[i]);
    278          				  }
    279          				  break;
    280          			case 2:
    281          				  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    282          				  {
    283          					  (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC3[i]):(PCM_Buffer2[i] = Buffer3.bufMIC3[i]);
    284          				  }
    285          				  break;
    286          			case 3:
    287          				  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    288          				  { 		 
    289          					  (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC4[i]):(PCM_Buffer2[i] = Buffer3.bufMIC4[i]);
    290          				  }
    291          				  break;
    292          			case 4:
    293          				for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    294          				{		   
    295          					(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC5[i]):(PCM_Buffer2[i] = Buffer3.bufMIC5[i]);
    296          				}
    297          				break;
    298          			case 5:
    299          				for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    300          				{		   
    301          					(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC6[i]):(PCM_Buffer2[i] = Buffer3.bufMIC6[i]);
    302          				}
    303          				break;
    304          			case 6:
    305          				for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    306          				{
    307          					(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC7[i]):(PCM_Buffer2[i] = Buffer3.bufMIC7[i]);
    308          				}
    309          				break;
    310          			case 7:
    311          				for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    312          				{
    313          					(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer3.bufMIC8[i]):(PCM_Buffer2[i] = Buffer3.bufMIC8[i]);
    314          				}
    315          				break;
    316          			default:
    317          				 break;
    318          		  } 					  
    319          	  break;
    320          
    321            case BUF2_PLAY:
    322          	  switch (cntBtnPress)
    323          	  {
    324          		case 0:
    325          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    326          			  { 		   
    327          					   (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC1[i]):(PCM_Buffer2[i] = Buffer1.bufMIC1[i]);
    328          			  }
    329          			  break;
    330          		case 1:
    331          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    332          			  { 		   
    333          						(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC2[i]):(PCM_Buffer2[i] = Buffer1.bufMIC2[i]);
    334          			  }
    335          			  break;
    336          		case 2:
    337          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    338          			  {
    339          				  (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC3[i]):(PCM_Buffer2[i] = Buffer1.bufMIC3[i]);
    340          			  }
    341          			  break;
    342          		case 3:
    343          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    344          			  { 		 
    345          				  (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC4[i]):(PCM_Buffer2[i] = Buffer1.bufMIC4[i]);
    346          			  }
    347          			  break;
    348          		case 4:
    349          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    350          			{		   
    351          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC5[i]):(PCM_Buffer2[i] = Buffer1.bufMIC5[i]);
    352          			}
    353          			break;
    354          		case 5:
    355          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    356          			{		   
    357          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC6[i]):(PCM_Buffer2[i] = Buffer1.bufMIC6[i]);
    358          			}
    359          			break;
    360          		case 6:
    361          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    362          			{
    363          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC7[i]):(PCM_Buffer2[i] = Buffer1.bufMIC7[i]);
    364          			}
    365          			break;
    366          		case 7:
    367          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    368          			{
    369          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer1.bufMIC8[i]):(PCM_Buffer2[i] = Buffer1.bufMIC8[i]);
    370          			}
    371          			break;
    372          		default:
    373          			 break;
    374          	  }
    375          	  
    376           
    377            
    378          	break;
    379            case BUF3_PLAY:
    380          	  switch (cntBtnPress)
    381          	  {
    382          		case 0:
    383          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    384          			  { 		   
    385          					   (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC1[i]):(PCM_Buffer2[i] = Buffer2.bufMIC1[i]);
    386          			  }
    387          			  break;
    388          		case 1:
    389          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    390          			  { 		   
    391          						(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC2[i]):(PCM_Buffer2[i] = Buffer2.bufMIC2[i]);
    392          			  }
    393          			  break;
    394          		case 2:
    395          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    396          			  {
    397          				  (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC3[i]):(PCM_Buffer2[i] = Buffer2.bufMIC3[i]);
    398          			  }
    399          			  break;
    400          		case 3:
    401          			  for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    402          			  { 		 
    403          				  (swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC4[i]):(PCM_Buffer2[i] = Buffer2.bufMIC4[i]);
    404          			  }
    405          			  break;
    406          		case 4:
    407          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    408          			{		   
    409          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC5[i]):(PCM_Buffer2[i] = Buffer2.bufMIC5[i]);
    410          			}
    411          			break;
    412          		case 5:
    413          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    414          			{		   
    415          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC6[i]):(PCM_Buffer2[i] = Buffer2.bufMIC6[i]);
    416          			}
    417          			break;
    418          		case 6:
    419          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    420          			{
    421          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC7[i]):(PCM_Buffer2[i] = Buffer2.bufMIC7[i]);
    422          			}
    423          			break;
    424          		case 7:
    425          			for (uint16_t i=0;i<AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE;i++)
    426          			{
    427          				(swtBufUSBOut)?(PCM_Buffer1[i] = Buffer2.bufMIC8[i]):(PCM_Buffer2[i] = Buffer2.bufMIC8[i]);
    428          			}
    429          			break;
    430          		default:
    431          			 break;
    432          	  }
    433          		  
    434          	break;
    435            default:
    436          	break;
    437          }
    438          #endif
    439          
    440          }
   \   0000000E   0xBCF0             POP      {R4-R7}
   \   00000010   0x4770             BX       LR
   \                     ??AudioPlayerUpd_0: (+1)
   \   00000012   0x....             LDR.N    R1,??DataTable1_4
   \   00000014   0x....             LDR.N    R2,??DataTable1_2  ;; 0xc00181e0
   \   00000016   0x....             LDR.N    R3,??DataTable1_1  ;; 0xc001c1e0
   \   00000018   0xF44F 0x6480      MOV      R4,#+1024
   \   0000001C   0x....             LDR.N    R0,??DataTable1
   \                     ??AudioPlayerUpd_3: (+1)
   \   0000001E   0x2508             MOVS     R5,#+8
   \                     ??AudioPlayerUpd_4: (+1)
   \   00000020   0xF9B1 0x6000      LDRSH    R6,[R1, #+0]
   \   00000024   0x7807             LDRB     R7,[R0, #+0]
   \   00000026   0xF501 0x5180      ADD      R1,R1,#+4096
   \   0000002A   0x2F00             CMP      R7,#+0
   \   0000002C   0xBF14             ITE      NE 
   \   0000002E   0x8016             STRHNE   R6,[R2, #+0]
   \   00000030   0x801E             STRHEQ   R6,[R3, #+0]
   \   00000032   0x3114             ADDS     R1,R1,#+20
   \   00000034   0x1C9B             ADDS     R3,R3,#+2
   \   00000036   0x1C92             ADDS     R2,R2,#+2
   \   00000038   0x1E6D             SUBS     R5,R5,#+1
   \   0000003A   0xD1F1             BNE.N    ??AudioPlayerUpd_4
   \   0000003C   0x....             LDR.N    R5,??DataTable1_5  ;; 0xffff7f62
   \   0000003E   0x1869             ADDS     R1,R5,R1
   \   00000040   0x1E64             SUBS     R4,R4,#+1
   \   00000042   0xD033             BEQ.N    ??AudioPlayerUpd_5
   \   00000044   0xE7EB             B.N      ??AudioPlayerUpd_3
   \                     ??AudioPlayerUpd_2: (+1)
   \   00000046   0x....             LDR.N    R1,??DataTable1_6
   \   00000048   0x....             LDR.N    R2,??DataTable1_2  ;; 0xc00181e0
   \   0000004A   0x....             LDR.N    R3,??DataTable1_1  ;; 0xc001c1e0
   \   0000004C   0xF44F 0x6480      MOV      R4,#+1024
   \   00000050   0x....             LDR.N    R0,??DataTable1
   \                     ??AudioPlayerUpd_6: (+1)
   \   00000052   0x2508             MOVS     R5,#+8
   \                     ??AudioPlayerUpd_7: (+1)
   \   00000054   0xF9B1 0x6000      LDRSH    R6,[R1, #+0]
   \   00000058   0x7807             LDRB     R7,[R0, #+0]
   \   0000005A   0xF501 0x5180      ADD      R1,R1,#+4096
   \   0000005E   0x2F00             CMP      R7,#+0
   \   00000060   0xBF14             ITE      NE 
   \   00000062   0x8016             STRHNE   R6,[R2, #+0]
   \   00000064   0x801E             STRHEQ   R6,[R3, #+0]
   \   00000066   0x3114             ADDS     R1,R1,#+20
   \   00000068   0x1C9B             ADDS     R3,R3,#+2
   \   0000006A   0x1C92             ADDS     R2,R2,#+2
   \   0000006C   0x1E6D             SUBS     R5,R5,#+1
   \   0000006E   0xD1F1             BNE.N    ??AudioPlayerUpd_7
   \   00000070   0x....             LDR.N    R5,??DataTable1_5  ;; 0xffff7f62
   \   00000072   0x1869             ADDS     R1,R5,R1
   \   00000074   0x1E64             SUBS     R4,R4,#+1
   \   00000076   0xD019             BEQ.N    ??AudioPlayerUpd_5
   \   00000078   0xE7EB             B.N      ??AudioPlayerUpd_6
   \                     ??AudioPlayerUpd_1: (+1)
   \   0000007A   0x....             LDR.N    R1,??DataTable1_7
   \   0000007C   0x....             LDR.N    R2,??DataTable1_2  ;; 0xc00181e0
   \   0000007E   0x....             LDR.N    R3,??DataTable1_1  ;; 0xc001c1e0
   \   00000080   0xF44F 0x6480      MOV      R4,#+1024
   \   00000084   0x....             LDR.N    R0,??DataTable1
   \                     ??AudioPlayerUpd_8: (+1)
   \   00000086   0x2508             MOVS     R5,#+8
   \                     ??AudioPlayerUpd_9: (+1)
   \   00000088   0xF9B1 0x6000      LDRSH    R6,[R1, #+0]
   \   0000008C   0x7807             LDRB     R7,[R0, #+0]
   \   0000008E   0xF501 0x5180      ADD      R1,R1,#+4096
   \   00000092   0x2F00             CMP      R7,#+0
   \   00000094   0xBF14             ITE      NE 
   \   00000096   0x8016             STRHNE   R6,[R2, #+0]
   \   00000098   0x801E             STRHEQ   R6,[R3, #+0]
   \   0000009A   0x3114             ADDS     R1,R1,#+20
   \   0000009C   0x1C9B             ADDS     R3,R3,#+2
   \   0000009E   0x1C92             ADDS     R2,R2,#+2
   \   000000A0   0x1E6D             SUBS     R5,R5,#+1
   \   000000A2   0xD1F1             BNE.N    ??AudioPlayerUpd_9
   \   000000A4   0x....             LDR.N    R5,??DataTable1_5  ;; 0xffff7f62
   \   000000A6   0x1869             ADDS     R1,R5,R1
   \   000000A8   0x1E64             SUBS     R4,R4,#+1
   \   000000AA   0xD1EC             BNE.N    ??AudioPlayerUpd_8
   \                     ??AudioPlayerUpd_5: (+1)
   \   000000AC   0xBCF0             POP      {R4-R7}
   \   000000AE   0x4770             BX       LR               ;; return
   \   000000B0                      REQUIRE PCM_Buffer1
   \   000000B0                      REQUIRE PCM_Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     swtBufUSBOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xC001C1E0         DC32     0xc001c1e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xC00181E0         DC32     0xc00181e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0xFFFF7F62         DC32     0xffff7f62

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     Buffer2
    441          
    442          
    443          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   AudioPlayerUpd
       0   AudioUSBSend
         0   -> Send_Audio_to_USB


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
     176  AudioPlayerUpd
      24  AudioUSBSend
   16384  PCM_Buffer1
   16384  PCM_Buffer2
   16384  PCM_Buffer3
       2  cntFrm
       1  swtBufUSBOut

 
      3 bytes in section .bss
 49 152 bytes in section .bss  (abs)
    232 bytes in section .text
 
    232 bytes of CODE memory
 49 155 bytes of DATA memory

Errors: none
Warnings: none
