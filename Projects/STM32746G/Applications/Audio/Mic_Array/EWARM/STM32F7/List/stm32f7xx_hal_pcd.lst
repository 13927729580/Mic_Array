###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       08/Mar/2016  16:10:18
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_pcd.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_pcd.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Oh --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\stm32f7xx_hal_pcd.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\stm32f7xx_hal_pcd.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_pcd.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f7xx_hal_pcd.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    25-June-2015
      7            * @brief   PCD HAL module driver.
      8            *          This file provides firmware functions to manage the following 
      9            *          functionalities of the USB Peripheral Controller:
     10            *           + Initialization and de-initialization functions
     11            *           + IO operation functions
     12            *           + Peripheral Control functions 
     13            *           + Peripheral State functions
     14            *         
     15            @verbatim
     16            ==============================================================================
     17                              ##### How to use this driver #####
     18            ==============================================================================
     19              [..]
     20                The PCD HAL driver can be used as follows:
     21          
     22               (#) Declare a PCD_HandleTypeDef handle structure, for example:
     23                   PCD_HandleTypeDef  hpcd;
     24                  
     25               (#) Fill parameters of Init structure in HCD handle
     26            
     27               (#) Call HAL_PCD_Init() API to initialize the HCD peripheral (Core, Device core, ...) 
     28          
     29               (#) Initialize the PCD low level resources through the HAL_PCD_MspInit() API:
     30                   (##) Enable the PCD/USB Low Level interface clock using 
     31                        (+++) __OTGFS-OTG_CLK_ENABLE()/__OTGHS-OTG_CLK_ENABLE();
     32                        (+++) __OTGHSULPI_CLK_ENABLE(); (For High Speed Mode)
     33                     
     34                   (##) Initialize the related GPIO clocks
     35                   (##) Configure PCD pin-out
     36                   (##) Configure PCD NVIC interrupt
     37              
     38               (#)Associate the Upper USB device stack to the HAL PCD Driver:
     39                   (##) hpcd.pData = pdev;
     40          
     41               (#)Enable HCD transmission and reception:
     42                   (##) HAL_PCD_Start();
     43          
     44            @endverbatim
     45            ******************************************************************************
     46            * @attention
     47            *
     48            * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
     49            *
     50            * Redistribution and use in source and binary forms, with or without modification,
     51            * are permitted provided that the following conditions are met:
     52            *   1. Redistributions of source code must retain the above copyright notice,
     53            *      this list of conditions and the following disclaimer.
     54            *   2. Redistributions in binary form must reproduce the above copyright notice,
     55            *      this list of conditions and the following disclaimer in the documentation
     56            *      and/or other materials provided with the distribution.
     57            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     58            *      may be used to endorse or promote products derived from this software
     59            *      without specific prior written permission.
     60            *
     61            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     62            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     63            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     64            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     65            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     66            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     67            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     68            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     69            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     70            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     71            *
     72            ******************************************************************************
     73            */ 
     74          
     75          /* Includes ------------------------------------------------------------------*/
     76          #include "stm32f7xx_hal.h"
     77          
     78          /** @addtogroup STM32F7xx_HAL_Driver
     79            * @{
     80            */
     81          
     82          /** @defgroup PCD PCD
     83            * @brief PCD HAL module driver
     84            * @{
     85            */
     86          
     87          #ifdef HAL_PCD_MODULE_ENABLED
     88          
     89          /* Private types -------------------------------------------------------------*/
     90          /* Private variables ---------------------------------------------------------*/
     91          /* Private constants ---------------------------------------------------------*/
     92          /* Private macros ------------------------------------------------------------*/
     93          /** @defgroup PCD_Private_Macros PCD Private Macros
     94            * @{
     95            */ 
     96          #define PCD_MIN(a, b)  (((a) < (b)) ? (a) : (b))
     97          #define PCD_MAX(a, b)  (((a) > (b)) ? (a) : (b))
     98          /**
     99            * @}
    100            */
    101          
    102          /* Private functions prototypes ----------------------------------------------*/
    103          /** @defgroup PCD_Private_Functions PCD Private Functions
    104            * @{
    105            */
    106          static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum);
    107          /**
    108            * @}
    109            */
    110          
    111          /* Exported functions --------------------------------------------------------*/
    112          /** @defgroup PCD_Exported_Functions PCD Exported Functions
    113            * @{
    114            */
    115          
    116          /** @defgroup PCD_Exported_Functions_Group1 Initialization and de-initialization functions 
    117           *  @brief    Initialization and Configuration functions 
    118           *
    119          @verbatim    
    120           ===============================================================================
    121                      ##### Initialization and de-initialization functions #####
    122           ===============================================================================
    123              [..]  This section provides functions allowing to:
    124           
    125          @endverbatim
    126            * @{
    127            */
    128          
    129          /**
    130            * @brief  Initializes the PCD according to the specified
    131            *         parameters in the PCD_InitTypeDef and create the associated handle.
    132            * @param  hpcd: PCD handle
    133            * @retval HAL status
    134            */

   \                                 In section .text, align 2, keep-with-next
    135          HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
    136          { 
   \                     HAL_PCD_Init: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0xB089             SUB      SP,SP,#+36
    137            uint32_t i = 0;
   \   00000006   0x2400             MOVS     R4,#+0
    138            
    139            /* Check the PCD handle allocation */
    140            if(hpcd == NULL)
   \   00000008   0xB915             CBNZ.N   R5,??HAL_PCD_Init_0
    141            {
    142              return HAL_ERROR;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xB009             ADD      SP,SP,#+36
   \   0000000E   0xBD30             POP      {R4,R5,PC}
    143            }
    144            
    145            /* Check the parameters */
    146            assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
    147          
    148            hpcd->State = HAL_PCD_STATE_BUSY;
   \                     ??HAL_PCD_Init_0: (+1)
   \   00000010   0x2003             MOVS     R0,#+3
   \   00000012   0xF885 0x037D      STRB     R0,[R5, #+893]
    149            
    150            /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    151            HAL_PCD_MspInit(hpcd);
   \   00000016   0x4628             MOV      R0,R5
   \   00000018   0x.... 0x....      BL       HAL_PCD_MspInit
    152          
    153            /* Disable the Interrupts */
    154           __HAL_PCD_DISABLE(hpcd);
   \   0000001C   0x6828             LDR      R0,[R5, #+0]
   \   0000001E   0x.... 0x....      BL       USB_DisableGlobalInt
    155           
    156           /*Init the Core (common init.) */
    157           USB_CoreInit(hpcd->Instance, hpcd->Init);
   \   00000022   0xB083             SUB      SP,SP,#+12
   \   00000024   0x1D29             ADDS     R1,R5,#+4
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x2230             MOVS     R2,#+48
   \   0000002A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002E   0x6828             LDR      R0,[R5, #+0]
   \   00000030   0xBC0E             POP      {R1-R3}
   \   00000032   0x.... 0x....      BL       USB_CoreInit
    158           
    159           /* Force Device Mode*/
    160           USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
   \   00000036   0x6828             LDR      R0,[R5, #+0]
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x.... 0x....      BL       USB_SetCurrentMode
    161           
    162           /* Init endpoints structures */
    163           for (i = 0; i < 15 ; i++)
   \   0000003E   0xF105 0x0034      ADD      R0,R5,#+52
    164           {
    165             /* Init ep structure */
    166             hpcd->IN_ep[i].is_in = 1;
   \                     ??HAL_PCD_Init_1: (+1)
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x7041             STRB     R1,[R0, #+1]
    167             hpcd->IN_ep[i].num = i;
    168             hpcd->IN_ep[i].tx_fifo_num = i;
    169             /* Control until ep is activated */
    170             hpcd->IN_ep[i].type = EP_TYPE_CTRL;
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0x7004             STRB     R4,[R0, #+0]
   \   0000004A   0x80C4             STRH     R4,[R0, #+6]
    171             hpcd->IN_ep[i].maxpacket =  0;
    172             hpcd->IN_ep[i].xfer_buff = 0;
    173             hpcd->IN_ep[i].xfer_len = 0;
    174           }
   \   0000004C   0x1C64             ADDS     R4,R4,#+1
   \   0000004E   0x70C1             STRB     R1,[R0, #+3]
   \   00000050   0x6081             STR      R1,[R0, #+8]
   \   00000052   0x60C1             STR      R1,[R0, #+12]
   \   00000054   0x6141             STR      R1,[R0, #+20]
   \   00000056   0x301C             ADDS     R0,R0,#+28
   \   00000058   0x2C0F             CMP      R4,#+15
   \   0000005A   0xD3F2             BCC.N    ??HAL_PCD_Init_1
    175           
    176           for (i = 0; i < 15 ; i++)
   \   0000005C   0x2400             MOVS     R4,#+0
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF505 0x71EC      ADD      R1,R5,#+472
    177           {
    178             hpcd->OUT_ep[i].is_in = 0;
   \                     ??HAL_PCD_Init_2: (+1)
   \   00000064   0x2200             MOVS     R2,#+0
   \   00000066   0x704A             STRB     R2,[R1, #+1]
    179             hpcd->OUT_ep[i].num = i;
    180             hpcd->IN_ep[i].tx_fifo_num = i;
   \   00000068   0xF5A1 0x72CF      SUB      R2,R1,#+414
   \   0000006C   0x700C             STRB     R4,[R1, #+0]
   \   0000006E   0x8014             STRH     R4,[R2, #+0]
    181             /* Control until ep is activated */
    182             hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   \   00000070   0x2200             MOVS     R2,#+0
   \   00000072   0x70CA             STRB     R2,[R1, #+3]
    183             hpcd->OUT_ep[i].maxpacket = 0;
    184             hpcd->OUT_ep[i].xfer_buff = 0;
    185             hpcd->OUT_ep[i].xfer_len = 0;
    186             
    187             hpcd->Instance->DIEPTXF[i] = 0;
    188           }
   \   00000074   0x1C64             ADDS     R4,R4,#+1
   \   00000076   0x608A             STR      R2,[R1, #+8]
   \   00000078   0x60CA             STR      R2,[R1, #+12]
   \   0000007A   0x614A             STR      R2,[R1, #+20]
   \   0000007C   0x682B             LDR      R3,[R5, #+0]
   \   0000007E   0x311C             ADDS     R1,R1,#+28
   \   00000080   0x18C3             ADDS     R3,R0,R3
   \   00000082   0x1D00             ADDS     R0,R0,#+4
   \   00000084   0x2C0F             CMP      R4,#+15
   \   00000086   0xF8C3 0x2104      STR      R2,[R3, #+260]
   \   0000008A   0xD3EB             BCC.N    ??HAL_PCD_Init_2
    189           
    190           /* Init Device */
    191           USB_DevInit(hpcd->Instance, hpcd->Init);
   \   0000008C   0xB083             SUB      SP,SP,#+12
   \   0000008E   0x1D29             ADDS     R1,R5,#+4
   \   00000090   0x4668             MOV      R0,SP
   \   00000092   0x2230             MOVS     R2,#+48
   \   00000094   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000098   0x6828             LDR      R0,[R5, #+0]
   \   0000009A   0xBC0E             POP      {R1-R3}
   \   0000009C   0x.... 0x....      BL       USB_DevInit
    192           
    193           hpcd->State= HAL_PCD_STATE_READY;
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0xF885 0x037D      STRB     R0,[R5, #+893]
    194           
    195           /* Activate LPM */
    196           if (hpcd->Init.lpm_enable == 1)
   \   000000A6   0x6A68             LDR      R0,[R5, #+36]
   \   000000A8   0x2801             CMP      R0,#+1
   \   000000AA   0xBF04             ITT      EQ 
    197           {
    198             HAL_PCDEx_ActivateLPM(hpcd);
   \   000000AC   0x4628             MOVEQ    R0,R5
   \   000000AE   0x.... 0x....      BLEQ     HAL_PCDEx_ActivateLPM
    199           }
    200           
    201           USB_DevDisconnect (hpcd->Instance);  
   \   000000B2   0x6828             LDR      R0,[R5, #+0]
   \   000000B4   0x.... 0x....      BL       USB_DevDisconnect
    202           return HAL_OK;
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0xB009             ADD      SP,SP,#+36
   \   000000BC   0xBD30             POP      {R4,R5,PC}       ;; return
    203          }
    204          
    205          /**
    206            * @brief  DeInitializes the PCD peripheral 
    207            * @param  hpcd: PCD handle
    208            * @retval HAL status
    209            */

   \                                 In section .text, align 2, keep-with-next
    210          HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
    211          {
   \                     HAL_PCD_DeInit: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    212            /* Check the PCD handle allocation */
    213            if(hpcd == NULL)
   \   00000004   0xD101             BNE.N    ??HAL_PCD_DeInit_0
    214            {
    215              return HAL_ERROR;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xBD32             POP      {R1,R4,R5,PC}
    216            }
    217          
    218            hpcd->State = HAL_PCD_STATE_BUSY;
   \                     ??HAL_PCD_DeInit_0: (+1)
   \   0000000A   0xF504 0x755F      ADD      R5,R4,#+892
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x7068             STRB     R0,[R5, #+1]
    219            
    220            /* Stop Device */
    221            HAL_PCD_Stop(hpcd);
   \   00000012   0x7828             LDRB     R0,[R5, #+0]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD00C             BEQ.N    ??HAL_PCD_DeInit_1
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x7028             STRB     R0,[R5, #+0]
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0x.... 0x....      BL       USB_DisableGlobalInt
   \   00000022   0x6820             LDR      R0,[R4, #+0]
   \   00000024   0x.... 0x....      BL       USB_StopDevice
   \   00000028   0x6820             LDR      R0,[R4, #+0]
   \   0000002A   0x.... 0x....      BL       USB_DevDisconnect
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x7028             STRB     R0,[R5, #+0]
    222              
    223            /* DeInit the low level hardware */
    224            HAL_PCD_MspDeInit(hpcd);
   \                     ??HAL_PCD_DeInit_1: (+1)
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       HAL_PCD_MspDeInit
    225            
    226            hpcd->State = HAL_PCD_STATE_RESET; 
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x7068             STRB     R0,[R5, #+1]
    227            
    228            return HAL_OK;
   \   0000003C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    229          }
    230          
    231          /**
    232            * @brief  Initializes the PCD MSP.
    233            * @param  hpcd: PCD handle
    234            * @retval None
    235            */

   \                                 In section .text, align 2, keep-with-next
    236          __weak void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
    237          {
    238            /* NOTE : This function Should not be modified, when the callback is needed,
    239                      the HAL_PCD_MspInit could be implemented in the user file
    240             */
    241          }
   \                     HAL_PCD_MspInit: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    242          
    243          /**
    244            * @brief  DeInitializes PCD MSP.
    245            * @param  hpcd: PCD handle
    246            * @retval None
    247            */

   \                                 In section .text, align 2, keep-with-next
    248          __weak void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
    249          {
    250            /* NOTE : This function Should not be modified, when the callback is needed,
    251                      the HAL_PCD_MspDeInit could be implemented in the user file
    252             */
    253          }
   \                     HAL_PCD_MspDeInit: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    254          
    255          /**
    256            * @}
    257            */
    258          
    259          /** @defgroup PCD_Exported_Functions_Group2 IO operation functions 
    260           *  @brief   Data transfers functions 
    261           *
    262          @verbatim   
    263           ===============================================================================
    264                                ##### IO operation functions #####
    265           ===============================================================================  
    266              [..]
    267              This subsection provides a set of functions allowing to manage the PCD data 
    268              transfers.
    269          
    270          @endverbatim
    271            * @{
    272            */
    273            
    274          /**
    275            * @brief  Start The USB OTG Device.
    276            * @param  hpcd: PCD handle
    277            * @retval HAL status
    278            */

   \                                 In section .text, align 2, keep-with-next
    279          HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
    280          { 
   \                     HAL_PCD_Start: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    281            __HAL_LOCK(hpcd); 
   \   00000004   0xF894 0x037C      LDRB     R0,[R4, #+892]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD101             BNE.N    ??HAL_PCD_Start_0
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0xBD10             POP      {R4,PC}
   \                     ??HAL_PCD_Start_0: (+1)
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF884 0x037C      STRB     R0,[R4, #+892]
    282            USB_DevConnect (hpcd->Instance);  
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x.... 0x....      BL       USB_DevConnect
    283            __HAL_PCD_ENABLE(hpcd);
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0x.... 0x....      BL       USB_EnableGlobalInt
    284            __HAL_UNLOCK(hpcd); 
   \   00000022   0x....             B.N      ??Subroutine2_0
    285            return HAL_OK;
    286          }

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine2_0: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xF884 0x037C      STRB     R0,[R4, #+892]
   \   00000006   0xBD10             POP      {R4,PC}          ;; return
    287          
    288          /**
    289            * @brief  Stop The USB OTG Device.
    290            * @param  hpcd: PCD handle
    291            * @retval HAL status
    292            */

   \                                 In section .text, align 2, keep-with-next
    293          HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
    294          { 
   \                     HAL_PCD_Stop: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    295            __HAL_LOCK(hpcd); 
   \   00000004   0xF894 0x037C      LDRB     R0,[R4, #+892]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD101             BNE.N    ??HAL_PCD_Stop_0
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0xBD10             POP      {R4,PC}
   \                     ??HAL_PCD_Stop_0: (+1)
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF884 0x037C      STRB     R0,[R4, #+892]
    296            __HAL_PCD_DISABLE(hpcd);
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x.... 0x....      BL       USB_DisableGlobalInt
    297            USB_StopDevice(hpcd->Instance);
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0x.... 0x....      BL       USB_StopDevice
    298            USB_DevDisconnect (hpcd->Instance);
   \   00000022   0x....             B.N      ?Subroutine1
    299            __HAL_UNLOCK(hpcd); 
    300            return HAL_OK;
    301          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x6820             LDR      R0,[R4, #+0]
   \   00000002   0x.... 0x....      BL       USB_DevDisconnect
   \   00000006                      REQUIRE ??Subroutine2_0
   \   00000006                      ;; // Fall through to label ??Subroutine2_0
    302          
    303          /**
    304            * @brief  This function handles PCD interrupt request.
    305            * @param  hpcd: PCD handle
    306            * @retval HAL status
    307            */

   \                                 In section .text, align 2, keep-with-next
    308          void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
    309          {
   \                     HAL_PCD_IRQHandler: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB083             SUB      SP,SP,#+12
    310            USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
    311            uint32_t i = 0, ep_intr = 0, epint = 0, epnum = 0;
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0xF04F 0x0A00      MOV      R10,#+0
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0x9001             STR      R0,[SP, #+4]
    312            uint32_t fifoemptymsk = 0, temp = 0;
    313            USB_OTG_EPTypeDef *ep;
    314              
    315            /* ensure that we are in device mode */
    316            if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
   \   00000012   0x.... 0x....      BL       USB_GetMode
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xF040 0x820B      BNE.W    ??HAL_PCD_IRQHandler_0
    317            {
    318              /* avoid spurious interrupt */
    319              if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0x.... 0x....      BL       USB_ReadInterrupts
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xF000 0x8205      BEQ.W    ??HAL_PCD_IRQHandler_0
    320              {
    321                return;
    322              }
    323              
    324              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
   \   00000028   0x6820             LDR      R0,[R4, #+0]
   \   0000002A   0x.... 0x....      BL       USB_ReadInterrupts
   \   0000002E   0x0780             LSLS     R0,R0,#+30
   \   00000030   0xD502             BPL.N    ??HAL_PCD_IRQHandler_1
    325              {
    326               /* incorrect mode, acknowledge the interrupt */
    327                __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
   \   00000032   0x6821             LDR      R1,[R4, #+0]
   \   00000034   0x2002             MOVS     R0,#+2
   \   00000036   0x6148             STR      R0,[R1, #+20]
   \                     ??HAL_PCD_IRQHandler_1: (+1)
   \   00000038   0x6820             LDR      R0,[R4, #+0]
    328              }
    329              
    330              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
   \   0000003A   0x.... 0x....      BL       USB_ReadInterrupts
   \   0000003E   0x0300             LSLS     R0,R0,#+12
   \   00000040   0xD54B             BPL.N    ??HAL_PCD_IRQHandler_2
    331              {
    332                epnum = 0;
    333                
    334                /* Read in the device interrupt bits */
    335                ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0xF504 0x78F0      ADD      R8,R4,#+480
   \   00000048   0x.... 0x....      BL       USB_ReadDevAllOutEpInterrupt
   \   0000004C   0x4607             MOV      R7,R0
   \   0000004E   0x9801             LDR      R0,[SP, #+4]
   \   00000050   0xF500 0x6630      ADD      R6,R0,#+2816
   \   00000054   0xE03F             B.N      ??HAL_PCD_IRQHandler_3
    336                
    337                while ( ep_intr )
    338                {
    339                  if (ep_intr & 0x1)
   \                     ??HAL_PCD_IRQHandler_4: (+1)
   \   00000056   0x07F8             LSLS     R0,R7,#+31
   \   00000058   0xD538             BPL.N    ??HAL_PCD_IRQHandler_5
    340                  {
    341                    epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
   \   0000005A   0x6820             LDR      R0,[R4, #+0]
   \   0000005C   0xB2E9             UXTB     R1,R5
   \   0000005E   0x.... 0x....      BL       USB_ReadDevOutEPInterrupt
   \   00000062   0x4681             MOV      R9,R0
    342                    
    343                    if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
   \   00000064   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   00000068   0xD523             BPL.N    ??HAL_PCD_IRQHandler_6
    344                    {
    345                      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
   \   0000006A   0x2101             MOVS     R1,#+1
   \   0000006C   0x60B1             STR      R1,[R6, #+8]
    346                      
    347                      if(hpcd->Init.dma_enable == 1)
   \   0000006E   0x6921             LDR      R1,[R4, #+16]
   \   00000070   0x2901             CMP      R1,#+1
   \   00000072   0xD10C             BNE.N    ??HAL_PCD_IRQHandler_7
    348                      {
    349                        hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
   \   00000074   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \   00000078   0x6930             LDR      R0,[R6, #+16]
   \   0000007A   0x0340             LSLS     R0,R0,#+13
   \   0000007C   0xEBB1 0x3050      SUBS     R0,R1,R0, LSR #+13
   \   00000080   0xF8C8 0x0010      STR      R0,[R8, #+16]
    350                        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
   \   00000084   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   00000088   0x1808             ADDS     R0,R1,R0
   \   0000008A   0xF8C8 0x0004      STR      R0,[R8, #+4]
    351                      }
    352                      
    353                      HAL_PCD_DataOutStageCallback(hpcd, epnum);
   \                     ??HAL_PCD_IRQHandler_7: (+1)
   \   0000008E   0xB2E9             UXTB     R1,R5
   \   00000090   0x4620             MOV      R0,R4
   \   00000092   0x.... 0x....      BL       HAL_PCD_DataOutStageCallback
    354                      if(hpcd->Init.dma_enable == 1)
   \   00000096   0x6920             LDR      R0,[R4, #+16]
   \   00000098   0x2801             CMP      R0,#+1
   \   0000009A   0xBF08             IT       EQ 
   \   0000009C   0x2D00             CMPEQ    R5,#+0
    355                      {
    356                        if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
   \   0000009E   0xD108             BNE.N    ??HAL_PCD_IRQHandler_6
   \   000000A0   0xF8D4 0x01EC      LDR      R0,[R4, #+492]
   \   000000A4   0xB928             CBNZ.N   R0,??HAL_PCD_IRQHandler_6
    357                        {
    358                           /* this is ZLP, so prepare EP0 for next setup */
    359                          USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
   \   000000A6   0x6820             LDR      R0,[R4, #+0]
   \   000000A8   0xF504 0x7260      ADD      R2,R4,#+896
   \   000000AC   0x2101             MOVS     R1,#+1
   \   000000AE   0x.... 0x....      BL       USB_EP0_OutStart
    360                        }              
    361                      }
    362                    }
    363                    
    364                    if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
   \                     ??HAL_PCD_IRQHandler_6: (+1)
   \   000000B2   0xEA5F 0x7009      LSLS     R0,R9,#+28
   \   000000B6   0xD504             BPL.N    ??HAL_PCD_IRQHandler_8
    365                    {
    366                      /* Inform the upper layer that a setup packet is available */
    367                      HAL_PCD_SetupStageCallback(hpcd);
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x.... 0x....      BL       HAL_PCD_SetupStageCallback
    368                      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
   \   000000BE   0x2008             MOVS     R0,#+8
   \   000000C0   0x60B0             STR      R0,[R6, #+8]
    369                    }
    370                    
    371                    if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
   \                     ??HAL_PCD_IRQHandler_8: (+1)
   \   000000C2   0xEA5F 0x60C9      LSLS     R0,R9,#+27
   \   000000C6   0xBF44             ITT      MI 
   \   000000C8   0x2010             MOVMI    R0,#+16
   \   000000CA   0x60B0             STRMI    R0,[R6, #+8]
    372                    {
    373                      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
    374                    }
    375                  }
    376                  epnum++;
   \                     ??HAL_PCD_IRQHandler_5: (+1)
   \   000000CC   0x1C6D             ADDS     R5,R5,#+1
    377                  ep_intr >>= 1;
   \   000000CE   0x087F             LSRS     R7,R7,#+1
   \   000000D0   0x3620             ADDS     R6,R6,#+32
   \   000000D2   0xF108 0x081C      ADD      R8,R8,#+28
    378                }
   \                     ??HAL_PCD_IRQHandler_3: (+1)
   \   000000D6   0x2F00             CMP      R7,#+0
   \   000000D8   0xD1BD             BNE.N    ??HAL_PCD_IRQHandler_4
    379              }
    380              
    381              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
   \                     ??HAL_PCD_IRQHandler_2: (+1)
   \   000000DA   0x9801             LDR      R0,[SP, #+4]
   \   000000DC   0xF500 0x6000      ADD      R0,R0,#+2048
   \   000000E0   0x9000             STR      R0,[SP, #+0]
   \   000000E2   0x6820             LDR      R0,[R4, #+0]
   \   000000E4   0x.... 0x....      BL       USB_ReadInterrupts
   \   000000E8   0x0340             LSLS     R0,R0,#+13
   \   000000EA   0xD564             BPL.N    ??HAL_PCD_IRQHandler_9
    382              {
    383                /* Read in the device interrupt bits */
    384                ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
   \   000000EC   0x6820             LDR      R0,[R4, #+0]
   \   000000EE   0x2500             MOVS     R5,#+0
   \   000000F0   0xF104 0x0840      ADD      R8,R4,#+64
   \   000000F4   0x.... 0x....      BL       USB_ReadDevAllInEpInterrupt
   \   000000F8   0x4607             MOV      R7,R0
    385                
    386                epnum = 0;
   \   000000FA   0x9801             LDR      R0,[SP, #+4]
   \   000000FC   0xF500 0x6010      ADD      R0,R0,#+2304
   \   00000100   0x9002             STR      R0,[SP, #+8]
   \   00000102   0x9800             LDR      R0,[SP, #+0]
   \   00000104   0x1D06             ADDS     R6,R0,#+4
   \   00000106   0xE054             B.N      ??HAL_PCD_IRQHandler_10
    387                
    388                while ( ep_intr )
    389                {
    390                  if (ep_intr & 0x1) /* In ITR */
   \                     ??HAL_PCD_IRQHandler_11: (+1)
   \   00000108   0x07F8             LSLS     R0,R7,#+31
   \   0000010A   0xD54B             BPL.N    ??HAL_PCD_IRQHandler_12
    391                  {
    392                    epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
   \   0000010C   0x6820             LDR      R0,[R4, #+0]
   \   0000010E   0xB2E9             UXTB     R1,R5
   \   00000110   0x.... 0x....      BL       USB_ReadDevInEPInterrupt
   \   00000114   0x4681             MOV      R9,R0
    393          
    394                     if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
   \   00000116   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   0000011A   0xF8DD 0xB008      LDR      R11,[SP, #+8]
   \   0000011E   0xD522             BPL.N    ??HAL_PCD_IRQHandler_13
    395                    {
    396                      fifoemptymsk = 0x1 << epnum;
    397                      USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
   \   00000120   0x6B30             LDR      R0,[R6, #+48]
   \   00000122   0x2101             MOVS     R1,#+1
   \   00000124   0x40A9             LSLS     R1,R1,R5
   \   00000126   0x4388             BICS     R0,R0,R1
   \   00000128   0x6330             STR      R0,[R6, #+48]
    398                      
    399                      CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
   \   0000012A   0x2001             MOVS     R0,#+1
   \   0000012C   0xF8CB 0x0008      STR      R0,[R11, #+8]
    400                      
    401                      if (hpcd->Init.dma_enable == 1)
   \   00000130   0x6920             LDR      R0,[R4, #+16]
   \   00000132   0x2801             CMP      R0,#+1
   \   00000134   0xD106             BNE.N    ??HAL_PCD_IRQHandler_14
    402                      {
    403                        hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
   \   00000136   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   0000013A   0xF858 0x1C04      LDR      R1,[R8, #-4]
   \   0000013E   0x1808             ADDS     R0,R1,R0
   \   00000140   0xF8C8 0x0000      STR      R0,[R8, #+0]
    404                      }
    405                                                
    406                      HAL_PCD_DataInStageCallback(hpcd, epnum);
   \                     ??HAL_PCD_IRQHandler_14: (+1)
   \   00000144   0xB2E9             UXTB     R1,R5
   \   00000146   0x4620             MOV      R0,R4
   \   00000148   0x.... 0x....      BL       HAL_PCD_DataInStageCallback
    407          
    408                      if (hpcd->Init.dma_enable == 1)
   \   0000014C   0x6920             LDR      R0,[R4, #+16]
   \   0000014E   0x2801             CMP      R0,#+1
   \   00000150   0xBF08             IT       EQ 
   \   00000152   0x2D00             CMPEQ    R5,#+0
    409                      {
    410                        /* this is ZLP, so prepare EP0 for next setup */
    411                        if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
   \   00000154   0xD107             BNE.N    ??HAL_PCD_IRQHandler_13
   \   00000156   0x6CA0             LDR      R0,[R4, #+72]
   \   00000158   0xB928             CBNZ.N   R0,??HAL_PCD_IRQHandler_13
    412                        {
    413                          /* prepare to rx more setup packets */
    414                          USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
   \   0000015A   0x6820             LDR      R0,[R4, #+0]
   \   0000015C   0xF504 0x7260      ADD      R2,R4,#+896
   \   00000160   0x2101             MOVS     R1,#+1
   \   00000162   0x.... 0x....      BL       USB_EP0_OutStart
    415                        }
    416                      }           
    417                    }
    418                     if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
   \                     ??HAL_PCD_IRQHandler_13: (+1)
   \   00000166   0xEA5F 0x7009      LSLS     R0,R9,#+28
   \   0000016A   0xBF44             ITT      MI 
   \   0000016C   0x2008             MOVMI    R0,#+8
   \   0000016E   0xF8CB 0x0008      STRMI    R0,[R11, #+8]
    419                    {
    420                      CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
    421                    }
    422                    if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
   \   00000172   0xEA5F 0x60C9      LSLS     R0,R9,#+27
   \   00000176   0xBF44             ITT      MI 
   \   00000178   0x2010             MOVMI    R0,#+16
   \   0000017A   0xF8CB 0x0008      STRMI    R0,[R11, #+8]
    423                    {
    424                      CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
    425                    }
    426                    if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
   \   0000017E   0xEA5F 0x6049      LSLS     R0,R9,#+25
   \   00000182   0xBF44             ITT      MI 
   \   00000184   0x2040             MOVMI    R0,#+64
   \   00000186   0xF8CB 0x0008      STRMI    R0,[R11, #+8]
    427                    {
    428                      CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
    429                    }
    430                    if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
   \   0000018A   0xEA5F 0x7089      LSLS     R0,R9,#+30
   \   0000018E   0xBF44             ITT      MI 
   \   00000190   0x2002             MOVMI    R0,#+2
   \   00000192   0xF8CB 0x0008      STRMI    R0,[R11, #+8]
    431                    {
    432                      CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
    433                    }       
    434                    if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
   \   00000196   0xEA5F 0x6009      LSLS     R0,R9,#+24
   \   0000019A   0xD503             BPL.N    ??HAL_PCD_IRQHandler_12
    435                    {
    436                      PCD_WriteEmptyTxFifo(hpcd , epnum);
   \   0000019C   0x4629             MOV      R1,R5
   \   0000019E   0x4620             MOV      R0,R4
   \   000001A0   0x.... 0x....      BL       PCD_WriteEmptyTxFifo
    437                    }
    438                  }
    439                  epnum++;
    440                  ep_intr >>= 1;
   \                     ??HAL_PCD_IRQHandler_12: (+1)
   \   000001A4   0x9802             LDR      R0,[SP, #+8]
   \   000001A6   0x1C6D             ADDS     R5,R5,#+1
   \   000001A8   0x087F             LSRS     R7,R7,#+1
   \   000001AA   0xF108 0x081C      ADD      R8,R8,#+28
   \   000001AE   0x3020             ADDS     R0,R0,#+32
   \   000001B0   0x9002             STR      R0,[SP, #+8]
    441                }
   \                     ??HAL_PCD_IRQHandler_10: (+1)
   \   000001B2   0x2F00             CMP      R7,#+0
   \   000001B4   0xD1A8             BNE.N    ??HAL_PCD_IRQHandler_11
    442              }
    443              
    444              /* Handle Resume Interrupt */
    445              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
   \                     ??HAL_PCD_IRQHandler_9: (+1)
   \   000001B6   0x6820             LDR      R0,[R4, #+0]
   \   000001B8   0x.... 0x....      BL       USB_ReadInterrupts
   \   000001BC   0x2800             CMP      R0,#+0
   \   000001BE   0xD517             BPL.N    ??HAL_PCD_IRQHandler_15
    446              {
    447                /* Clear the Remote Wake-up Signaling */
    448                USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
   \   000001C0   0x9800             LDR      R0,[SP, #+0]
   \   000001C2   0x1D06             ADDS     R6,R0,#+4
   \   000001C4   0x6830             LDR      R0,[R6, #+0]
   \   000001C6   0x0840             LSRS     R0,R0,#+1
   \   000001C8   0x0040             LSLS     R0,R0,#+1
   \   000001CA   0x6030             STR      R0,[R6, #+0]
    449                
    450                if(hpcd->LPM_State == LPM_L1)
   \   000001CC   0xF504 0x706C      ADD      R0,R4,#+944
   \   000001D0   0x7801             LDRB     R1,[R0, #+0]
   \   000001D2   0x2901             CMP      R1,#+1
   \   000001D4   0xD105             BNE.N    ??HAL_PCD_IRQHandler_16
    451                {
    452                  hpcd->LPM_State = LPM_L0;
   \   000001D6   0x2100             MOVS     R1,#+0
   \   000001D8   0x7001             STRB     R1,[R0, #+0]
    453                  HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
   \   000001DA   0x4620             MOV      R0,R4
   \   000001DC   0x.... 0x....      BL       HAL_PCDEx_LPM_Callback
   \   000001E0   0xE002             B.N      ??HAL_PCD_IRQHandler_17
    454                }
    455                else
    456                {
    457                  HAL_PCD_ResumeCallback(hpcd);
   \                     ??HAL_PCD_IRQHandler_16: (+1)
   \   000001E2   0x4620             MOV      R0,R4
   \   000001E4   0x.... 0x....      BL       HAL_PCD_ResumeCallback
    458                }
    459                __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
   \                     ??HAL_PCD_IRQHandler_17: (+1)
   \   000001E8   0x6821             LDR      R1,[R4, #+0]
   \   000001EA   0xF04F 0x4000      MOV      R0,#-2147483648
   \   000001EE   0x6148             STR      R0,[R1, #+20]
    460              }
    461              
    462              /* Handle Suspend Interrupt */
    463              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
   \                     ??HAL_PCD_IRQHandler_15: (+1)
   \   000001F0   0x6820             LDR      R0,[R4, #+0]
   \   000001F2   0x.... 0x....      BL       USB_ReadInterrupts
   \   000001F6   0x0500             LSLS     R0,R0,#+20
   \   000001F8   0xD50B             BPL.N    ??HAL_PCD_IRQHandler_18
    464              {
    465          
    466                if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
   \   000001FA   0x9800             LDR      R0,[SP, #+0]
   \   000001FC   0x1D00             ADDS     R0,R0,#+4
   \   000001FE   0x6840             LDR      R0,[R0, #+4]
   \   00000200   0x07C0             LSLS     R0,R0,#+31
   \   00000202   0xBF44             ITT      MI 
    467                {
    468                  
    469                  HAL_PCD_SuspendCallback(hpcd);
   \   00000204   0x4620             MOVMI    R0,R4
   \   00000206   0x.... 0x....      BLMI     HAL_PCD_SuspendCallback
    470                }
    471                __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
   \   0000020A   0x6821             LDR      R1,[R4, #+0]
   \   0000020C   0xF44F 0x6000      MOV      R0,#+2048
   \   00000210   0x6148             STR      R0,[R1, #+20]
    472              }
    473              
    474              /* Handle LPM Interrupt */ 
    475              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
   \                     ??HAL_PCD_IRQHandler_18: (+1)
   \   00000212   0x6820             LDR      R0,[R4, #+0]
   \   00000214   0x.... 0x....      BL       USB_ReadInterrupts
   \   00000218   0x0100             LSLS     R0,R0,#+4
   \   0000021A   0xD515             BPL.N    ??HAL_PCD_IRQHandler_19
    476              {
    477                __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
   \   0000021C   0x6821             LDR      R1,[R4, #+0]
   \   0000021E   0xF04F 0x6000      MOV      R0,#+134217728
   \   00000222   0x6148             STR      R0,[R1, #+20]
    478                if( hpcd->LPM_State == LPM_L0)
   \   00000224   0xF504 0x706C      ADD      R0,R4,#+944
   \   00000228   0x7802             LDRB     R2,[R0, #+0]
   \   0000022A   0xB952             CBNZ.N   R2,??HAL_PCD_IRQHandler_20
    479                {
    480                  hpcd->LPM_State = LPM_L1;
   \   0000022C   0x2201             MOVS     R2,#+1
   \   0000022E   0x7002             STRB     R2,[R0, #+0]
    481                  hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
   \   00000230   0x6D49             LDR      R1,[R1, #+84]
   \   00000232   0xF3C1 0x0183      UBFX     R1,R1,#+2,#+4
   \   00000236   0x6041             STR      R1,[R0, #+4]
    482                  HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
   \   00000238   0x2101             MOVS     R1,#+1
   \   0000023A   0x4620             MOV      R0,R4
   \   0000023C   0x.... 0x....      BL       HAL_PCDEx_LPM_Callback
   \   00000240   0xE002             B.N      ??HAL_PCD_IRQHandler_19
    483                }
    484                else
    485                {
    486                  HAL_PCD_SuspendCallback(hpcd);
   \                     ??HAL_PCD_IRQHandler_20: (+1)
   \   00000242   0x4620             MOV      R0,R4
   \   00000244   0x.... 0x....      BL       HAL_PCD_SuspendCallback
    487                }
    488              }
    489              
    490              /* Handle Reset Interrupt */
    491              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
   \                     ??HAL_PCD_IRQHandler_19: (+1)
   \   00000248   0x6820             LDR      R0,[R4, #+0]
   \   0000024A   0x.... 0x....      BL       USB_ReadInterrupts
   \   0000024E   0x04C0             LSLS     R0,R0,#+19
   \   00000250   0xD547             BPL.N    ??HAL_PCD_IRQHandler_21
    492              {
    493                USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
   \   00000252   0x9800             LDR      R0,[SP, #+0]
    494                USB_FlushTxFifo(hpcd->Instance ,  0 );
   \   00000254   0x2100             MOVS     R1,#+0
   \   00000256   0x1D06             ADDS     R6,R0,#+4
   \   00000258   0x6830             LDR      R0,[R6, #+0]
   \   0000025A   0x0840             LSRS     R0,R0,#+1
   \   0000025C   0x0040             LSLS     R0,R0,#+1
   \   0000025E   0x6030             STR      R0,[R6, #+0]
   \   00000260   0x6820             LDR      R0,[R4, #+0]
   \   00000262   0x.... 0x....      BL       USB_FlushTxFifo
    495                
    496                for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
   \   00000266   0x9801             LDR      R0,[SP, #+4]
   \   00000268   0x21FF             MOVS     R1,#+255
   \   0000026A   0xF500 0x6010      ADD      R0,R0,#+2304
   \   0000026E   0xE006             B.N      ??HAL_PCD_IRQHandler_22
    497                {
    498                  USBx_INEP(i)->DIEPINT = 0xFF;
   \                     ??HAL_PCD_IRQHandler_23: (+1)
   \   00000270   0x6081             STR      R1,[R0, #+8]
    499                  USBx_OUTEP(i)->DOEPINT = 0xFF;
   \   00000272   0xF500 0x7200      ADD      R2,R0,#+512
   \   00000276   0x6091             STR      R1,[R2, #+8]
    500                }
   \   00000278   0xF10A 0x0A01      ADD      R10,R10,#+1
   \   0000027C   0x3020             ADDS     R0,R0,#+32
   \                     ??HAL_PCD_IRQHandler_22: (+1)
   \   0000027E   0x6862             LDR      R2,[R4, #+4]
   \   00000280   0x4592             CMP      R10,R2
   \   00000282   0xD3F5             BCC.N    ??HAL_PCD_IRQHandler_23
    501                USBx_DEVICE->DAINT = 0xFFFFFFFF;
   \   00000284   0xF04F 0x30FF      MOV      R0,#-1
   \   00000288   0x6170             STR      R0,[R6, #+20]
    502                USBx_DEVICE->DAINTMSK |= 0x10001;
   \   0000028A   0x69B0             LDR      R0,[R6, #+24]
   \   0000028C   0xF040 0x1001      ORR      R0,R0,#0x10001
   \   00000290   0x61B0             STR      R0,[R6, #+24]
    503                
    504                if(hpcd->Init.use_dedicated_ep1)
   \   00000292   0x6AE0             LDR      R0,[R4, #+44]
   \   00000294   0xB160             CBZ.N    R0,??HAL_PCD_IRQHandler_24
    505                {
    506                  USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
   \   00000296   0x9800             LDR      R0,[SP, #+0]
   \   00000298   0xF8D0 0x0084      LDR      R0,[R0, #+132]
   \   0000029C   0x9900             LDR      R1,[SP, #+0]
   \   0000029E   0xF040 0x000B      ORR      R0,R0,#0xB
   \   000002A2   0xF8C1 0x0084      STR      R0,[R1, #+132]
    507                  USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
   \   000002A6   0x6C30             LDR      R0,[R6, #+64]
   \   000002A8   0xF040 0x000B      ORR      R0,R0,#0xB
   \   000002AC   0x6430             STR      R0,[R6, #+64]
   \   000002AE   0xE007             B.N      ??HAL_PCD_IRQHandler_25
    508                }
    509                else
    510                {
    511                  USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
   \                     ??HAL_PCD_IRQHandler_24: (+1)
   \   000002B0   0x6930             LDR      R0,[R6, #+16]
   \   000002B2   0xF040 0x000B      ORR      R0,R0,#0xB
   \   000002B6   0x6130             STR      R0,[R6, #+16]
    512                  USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
   \   000002B8   0x68F0             LDR      R0,[R6, #+12]
   \   000002BA   0xF040 0x000B      ORR      R0,R0,#0xB
   \   000002BE   0x60F0             STR      R0,[R6, #+12]
    513                }
    514                
    515                /* Set Default Address to 0 */
    516                USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
   \                     ??HAL_PCD_IRQHandler_25: (+1)
   \   000002C0   0x9800             LDR      R0,[SP, #+0]
    517                
    518                /* setup EP0 to receive SETUP packets */
    519                USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
   \   000002C2   0xF504 0x7260      ADD      R2,R4,#+896
   \   000002C6   0x6800             LDR      R0,[R0, #+0]
   \   000002C8   0x9900             LDR      R1,[SP, #+0]
   \   000002CA   0xF420 0x60FE      BIC      R0,R0,#0x7F0
   \   000002CE   0x6008             STR      R0,[R1, #+0]
   \   000002D0   0x6921             LDR      R1,[R4, #+16]
   \   000002D2   0x6820             LDR      R0,[R4, #+0]
   \   000002D4   0xB2C9             UXTB     R1,R1
   \   000002D6   0x.... 0x....      BL       USB_EP0_OutStart
    520                  
    521                __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
   \   000002DA   0x6821             LDR      R1,[R4, #+0]
   \   000002DC   0xF44F 0x5080      MOV      R0,#+4096
   \   000002E0   0x6148             STR      R0,[R1, #+20]
    522              }
    523              
    524              /* Handle Enumeration done Interrupt */
    525              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
   \                     ??HAL_PCD_IRQHandler_21: (+1)
   \   000002E2   0x6820             LDR      R0,[R4, #+0]
   \   000002E4   0x.... 0x....      BL       USB_ReadInterrupts
   \   000002E8   0x0480             LSLS     R0,R0,#+18
   \   000002EA   0xD523             BPL.N    ??HAL_PCD_IRQHandler_26
    526              {
    527                USB_ActivateSetup(hpcd->Instance);
   \   000002EC   0x6820             LDR      R0,[R4, #+0]
   \   000002EE   0x.... 0x....      BL       USB_ActivateSetup
    528                hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
   \   000002F2   0x6820             LDR      R0,[R4, #+0]
   \   000002F4   0x68C1             LDR      R1,[R0, #+12]
   \   000002F6   0xF421 0x5170      BIC      R1,R1,#0x3C00
   \   000002FA   0x60C1             STR      R1,[R0, #+12]
    529                
    530                if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
   \   000002FC   0x.... 0x....      BL       USB_GetDevSpeed
   \   00000300   0xB940             CBNZ.N   R0,??HAL_PCD_IRQHandler_27
    531                {
    532                  hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
   \   00000302   0x60E0             STR      R0,[R4, #+12]
    533                  hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
   \   00000304   0xF44F 0x7000      MOV      R0,#+512
   \   00000308   0x6160             STR      R0,[R4, #+20]
    534                  hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
   \   0000030A   0x6820             LDR      R0,[R4, #+0]
   \   0000030C   0x68C1             LDR      R1,[R0, #+12]
   \   0000030E   0xF441 0x5110      ORR      R1,R1,#0x2400
   \   00000312   0xE007             B.N      ??HAL_PCD_IRQHandler_28
    535                }
    536                else
    537                {
    538                  hpcd->Init.speed            = USB_OTG_SPEED_FULL;
   \                     ??HAL_PCD_IRQHandler_27: (+1)
   \   00000314   0x2003             MOVS     R0,#+3
   \   00000316   0x60E0             STR      R0,[R4, #+12]
    539                  hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
   \   00000318   0x2040             MOVS     R0,#+64
   \   0000031A   0x6160             STR      R0,[R4, #+20]
    540                  hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_FS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
   \   0000031C   0x6820             LDR      R0,[R4, #+0]
   \   0000031E   0x68C1             LDR      R1,[R0, #+12]
   \   00000320   0xF441 0x51A0      ORR      R1,R1,#0x1400
   \                     ??HAL_PCD_IRQHandler_28: (+1)
   \   00000324   0x60C1             STR      R1,[R0, #+12]
    541                }
    542                
    543                HAL_PCD_ResetCallback(hpcd);
   \   00000326   0x4620             MOV      R0,R4
   \   00000328   0x.... 0x....      BL       HAL_PCD_ResetCallback
    544                
    545                __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
   \   0000032C   0x6821             LDR      R1,[R4, #+0]
   \   0000032E   0xF44F 0x5000      MOV      R0,#+8192
   \   00000332   0x6148             STR      R0,[R1, #+20]
    546              }
    547              
    548              /* Handle RxQLevel Interrupt */
    549              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
   \                     ??HAL_PCD_IRQHandler_26: (+1)
   \   00000334   0x6820             LDR      R0,[R4, #+0]
   \   00000336   0x.... 0x....      BL       USB_ReadInterrupts
   \   0000033A   0x06C0             LSLS     R0,R0,#+27
   \   0000033C   0xD538             BPL.N    ??HAL_PCD_IRQHandler_29
    550              {
    551                USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
   \   0000033E   0x6820             LDR      R0,[R4, #+0]
   \   00000340   0x6981             LDR      R1,[R0, #+24]
   \   00000342   0xF021 0x0110      BIC      R1,R1,#0x10
   \   00000346   0x6181             STR      R1,[R0, #+24]
    552                temp = USBx->GRXSTSP;
   \   00000348   0x9801             LDR      R0,[SP, #+4]
   \   0000034A   0xF8D0 0xA020      LDR      R10,[R0, #+32]
    553                ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
   \   0000034E   0xF00A 0x000F      AND      R0,R10,#0xF
   \   00000352   0xEBC0 0x01C0      RSB      R1,R0,R0, LSL #+3
   \   00000356   0xEB04 0x0081      ADD      R0,R4,R1, LSL #+2
   \   0000035A   0xF500 0x77EC      ADD      R7,R0,#+472
    554                
    555                if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
   \   0000035E   0xF3CA 0x4043      UBFX     R0,R10,#+17,#+4
   \   00000362   0x2802             CMP      R0,#+2
   \   00000364   0xD112             BNE.N    ??HAL_PCD_IRQHandler_30
    556                {
    557                  if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
   \   00000366   0xF647 0x70F0      MOVW     R0,#+32752
   \   0000036A   0xEA1A 0x0F00      TST      R10,R0
   \   0000036E   0xD01A             BEQ.N    ??HAL_PCD_IRQHandler_31
    558                  {
    559                    USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
   \   00000370   0x68F9             LDR      R1,[R7, #+12]
   \   00000372   0x9801             LDR      R0,[SP, #+4]
   \   00000374   0xF3CA 0x120A      UBFX     R2,R10,#+4,#+11
   \   00000378   0x.... 0x....      BL       USB_ReadPacket
    560                    ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
   \   0000037C   0x68F9             LDR      R1,[R7, #+12]
   \   0000037E   0xF3CA 0x100A      UBFX     R0,R10,#+4,#+11
   \   00000382   0x1841             ADDS     R1,R0,R1
   \   00000384   0x60F9             STR      R1,[R7, #+12]
    561                    ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
   \   00000386   0x69B9             LDR      R1,[R7, #+24]
   \   00000388   0x1840             ADDS     R0,R0,R1
   \   0000038A   0xE00B             B.N      ??HAL_PCD_IRQHandler_32
    562                  }
    563                }
    564                else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
   \                     ??HAL_PCD_IRQHandler_30: (+1)
   \   0000038C   0x2806             CMP      R0,#+6
   \   0000038E   0xD10A             BNE.N    ??HAL_PCD_IRQHandler_31
    565                {
    566                  USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
   \   00000390   0x9801             LDR      R0,[SP, #+4]
   \   00000392   0x2208             MOVS     R2,#+8
   \   00000394   0xF504 0x7160      ADD      R1,R4,#+896
   \   00000398   0x.... 0x....      BL       USB_ReadPacket
    567                  ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
   \   0000039C   0x69B8             LDR      R0,[R7, #+24]
   \   0000039E   0xF3CA 0x110A      UBFX     R1,R10,#+4,#+11
   \   000003A2   0x1808             ADDS     R0,R1,R0
   \                     ??HAL_PCD_IRQHandler_32: (+1)
   \   000003A4   0x61B8             STR      R0,[R7, #+24]
    568                }
    569                USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
   \                     ??HAL_PCD_IRQHandler_31: (+1)
   \   000003A6   0x6820             LDR      R0,[R4, #+0]
   \   000003A8   0x6981             LDR      R1,[R0, #+24]
   \   000003AA   0xF041 0x0110      ORR      R1,R1,#0x10
   \   000003AE   0x6181             STR      R1,[R0, #+24]
    570              }
    571              
    572              /* Handle SOF Interrupt */
    573              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
   \                     ??HAL_PCD_IRQHandler_29: (+1)
   \   000003B0   0x6820             LDR      R0,[R4, #+0]
   \   000003B2   0x.... 0x....      BL       USB_ReadInterrupts
   \   000003B6   0x0700             LSLS     R0,R0,#+28
   \   000003B8   0xD505             BPL.N    ??HAL_PCD_IRQHandler_33
    574              {
    575                HAL_PCD_SOFCallback(hpcd);
   \   000003BA   0x4620             MOV      R0,R4
   \   000003BC   0x.... 0x....      BL       HAL_PCD_SOFCallback
    576                __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
   \   000003C0   0x6821             LDR      R1,[R4, #+0]
   \   000003C2   0x2008             MOVS     R0,#+8
   \   000003C4   0x6148             STR      R0,[R1, #+20]
    577              }
    578              
    579              /* Handle Incomplete ISO IN Interrupt */
    580              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
   \                     ??HAL_PCD_IRQHandler_33: (+1)
   \   000003C6   0x6820             LDR      R0,[R4, #+0]
   \   000003C8   0x.... 0x....      BL       USB_ReadInterrupts
   \   000003CC   0x02C0             LSLS     R0,R0,#+11
   \   000003CE   0xD507             BPL.N    ??HAL_PCD_IRQHandler_34
    581              {
    582                HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
   \   000003D0   0xB2E9             UXTB     R1,R5
   \   000003D2   0x4620             MOV      R0,R4
   \   000003D4   0x.... 0x....      BL       HAL_PCD_ISOINIncompleteCallback
    583                __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
   \   000003D8   0x6821             LDR      R1,[R4, #+0]
   \   000003DA   0xF44F 0x1080      MOV      R0,#+1048576
   \   000003DE   0x6148             STR      R0,[R1, #+20]
    584              } 
    585              
    586              /* Handle Incomplete ISO OUT Interrupt */
    587              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
   \                     ??HAL_PCD_IRQHandler_34: (+1)
   \   000003E0   0x6820             LDR      R0,[R4, #+0]
   \   000003E2   0x.... 0x....      BL       USB_ReadInterrupts
   \   000003E6   0x0280             LSLS     R0,R0,#+10
   \   000003E8   0xD507             BPL.N    ??HAL_PCD_IRQHandler_35
    588              {
    589                HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
   \   000003EA   0xB2E9             UXTB     R1,R5
   \   000003EC   0x4620             MOV      R0,R4
   \   000003EE   0x.... 0x....      BL       HAL_PCD_ISOOUTIncompleteCallback
    590                __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
   \   000003F2   0x6821             LDR      R1,[R4, #+0]
   \   000003F4   0xF44F 0x1000      MOV      R0,#+2097152
   \   000003F8   0x6148             STR      R0,[R1, #+20]
    591              } 
    592              
    593              /* Handle Connection event Interrupt */
    594              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
   \                     ??HAL_PCD_IRQHandler_35: (+1)
   \   000003FA   0x6820             LDR      R0,[R4, #+0]
   \   000003FC   0x.... 0x....      BL       USB_ReadInterrupts
   \   00000400   0x0040             LSLS     R0,R0,#+1
   \   00000402   0xD506             BPL.N    ??HAL_PCD_IRQHandler_36
    595              {
    596                HAL_PCD_ConnectCallback(hpcd);
   \   00000404   0x4620             MOV      R0,R4
   \   00000406   0x.... 0x....      BL       HAL_PCD_ConnectCallback
    597                __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
   \   0000040A   0x6821             LDR      R1,[R4, #+0]
   \   0000040C   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000410   0x6148             STR      R0,[R1, #+20]
    598              } 
    599              
    600              /* Handle Disconnection event Interrupt */
    601              if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
   \                     ??HAL_PCD_IRQHandler_36: (+1)
   \   00000412   0x6820             LDR      R0,[R4, #+0]
   \   00000414   0x.... 0x....      BL       USB_ReadInterrupts
   \   00000418   0x0740             LSLS     R0,R0,#+29
   \   0000041A   0xD50A             BPL.N    ??HAL_PCD_IRQHandler_0
    602              {
    603                temp = hpcd->Instance->GOTGINT;
   \   0000041C   0x6820             LDR      R0,[R4, #+0]
   \   0000041E   0x6845             LDR      R5,[R0, #+4]
    604                
    605                if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
   \   00000420   0x0768             LSLS     R0,R5,#+29
   \   00000422   0xBF44             ITT      MI 
    606                {
    607                  HAL_PCD_DisconnectCallback(hpcd);
   \   00000424   0x4620             MOVMI    R0,R4
   \   00000426   0x.... 0x....      BLMI     HAL_PCD_DisconnectCallback
    608                }
    609                hpcd->Instance->GOTGINT |= temp;
   \   0000042A   0x6820             LDR      R0,[R4, #+0]
   \   0000042C   0x6841             LDR      R1,[R0, #+4]
   \   0000042E   0x4329             ORRS     R1,R5,R1
   \   00000430   0x6041             STR      R1,[R0, #+4]
    610              }
    611            }
    612          }
   \                     ??HAL_PCD_IRQHandler_0: (+1)
   \   00000432   0xB003             ADD      SP,SP,#+12
   \   00000434   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    613          
    614          /**
    615            * @brief  Data out stage callbacks
    616            * @param  hpcd: PCD handle
    617            * @param  epnum: endpoint number  
    618            * @retval None
    619            */

   \                                 In section .text, align 2, keep-with-next
    620           __weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
    621          {
    622            /* NOTE : This function Should not be modified, when the callback is needed,
    623                      the HAL_PCD_DataOutStageCallback could be implemented in the user file
    624             */ 
    625          }
   \                     HAL_PCD_DataOutStageCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    626          
    627          /**
    628            * @brief  Data IN stage callbacks
    629            * @param  hpcd: PCD handle
    630            * @param  epnum: endpoint number  
    631            * @retval None
    632            */

   \                                 In section .text, align 2, keep-with-next
    633           __weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
    634          {
    635            /* NOTE : This function Should not be modified, when the callback is needed,
    636                      the HAL_PCD_DataInStageCallback could be implemented in the user file
    637             */ 
    638          }
   \                     HAL_PCD_DataInStageCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    639          /**
    640            * @brief  Setup stage callback
    641            * @param  hpcd: PCD handle
    642            * @retval None
    643            */

   \                                 In section .text, align 2, keep-with-next
    644           __weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
    645          {
    646            /* NOTE : This function Should not be modified, when the callback is needed,
    647                      the HAL_PCD_SetupStageCallback could be implemented in the user file
    648             */ 
    649          }
   \                     HAL_PCD_SetupStageCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    650          
    651          /**
    652            * @brief  USB Start Of Frame callbacks
    653            * @param  hpcd: PCD handle
    654            * @retval None
    655            */

   \                                 In section .text, align 2, keep-with-next
    656           __weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
    657          {
    658            /* NOTE : This function Should not be modified, when the callback is needed,
    659                      the HAL_PCD_SOFCallback could be implemented in the user file
    660             */ 
    661          }
   \                     HAL_PCD_SOFCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    662          
    663          /**
    664            * @brief  USB Reset callbacks
    665            * @param  hpcd: PCD handle
    666            * @retval None
    667            */

   \                                 In section .text, align 2, keep-with-next
    668           __weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
    669          {
    670            /* NOTE : This function Should not be modified, when the callback is needed,
    671                      the HAL_PCD_ResetCallback could be implemented in the user file
    672             */ 
    673          }
   \                     HAL_PCD_ResetCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    674          
    675          
    676          /**
    677            * @brief  Suspend event callbacks
    678            * @param  hpcd: PCD handle
    679            * @retval None
    680            */

   \                                 In section .text, align 2, keep-with-next
    681           __weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
    682          {
    683            /* NOTE : This function Should not be modified, when the callback is needed,
    684                      the HAL_PCD_SuspendCallback could be implemented in the user file
    685             */ 
    686          }
   \                     HAL_PCD_SuspendCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    687          
    688          /**
    689            * @brief  Resume event callbacks
    690            * @param  hpcd: PCD handle
    691            * @retval None
    692            */

   \                                 In section .text, align 2, keep-with-next
    693           __weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
    694          {
    695            /* NOTE : This function Should not be modified, when the callback is needed,
    696                      the HAL_PCD_ResumeCallback could be implemented in the user file
    697             */ 
    698          }
   \                     HAL_PCD_ResumeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    699          
    700          /**
    701            * @brief  Incomplete ISO OUT callbacks
    702            * @param  hpcd: PCD handle
    703            * @param  epnum: endpoint number
    704            * @retval None
    705            */

   \                                 In section .text, align 2, keep-with-next
    706           __weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
    707          {
    708            /* NOTE : This function Should not be modified, when the callback is needed,
    709                      the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
    710             */ 
    711          }
   \                     HAL_PCD_ISOOUTIncompleteCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    712          
    713          /**
    714            * @brief  Incomplete ISO IN  callbacks
    715            * @param  hpcd: PCD handle
    716            * @param  epnum: endpoint number  
    717            * @retval None
    718            */

   \                                 In section .text, align 2, keep-with-next
    719           __weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
    720          {
    721            /* NOTE : This function Should not be modified, when the callback is needed,
    722                      the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
    723             */ 
    724          }
   \                     HAL_PCD_ISOINIncompleteCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    725          
    726          /**
    727            * @brief  Connection event callbacks
    728            * @param  hpcd: PCD handle
    729            * @retval None
    730            */

   \                                 In section .text, align 2, keep-with-next
    731           __weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
    732          {
    733            /* NOTE : This function Should not be modified, when the callback is needed,
    734                      the HAL_PCD_ConnectCallback could be implemented in the user file
    735             */ 
    736          }
   \                     HAL_PCD_ConnectCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    737          
    738          /**
    739            * @brief  Disconnection event callbacks
    740            * @param  hpcd: PCD handle
    741            * @retval None
    742            */

   \                                 In section .text, align 2, keep-with-next
    743           __weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
    744          {
    745            /* NOTE : This function Should not be modified, when the callback is needed,
    746                      the HAL_PCD_DisconnectCallback could be implemented in the user file
    747             */ 
    748          }
   \                     HAL_PCD_DisconnectCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    749          
    750          /**
    751            * @}
    752            */
    753            
    754          /** @defgroup PCD_Exported_Functions_Group3 Peripheral Control functions
    755           *  @brief   management functions 
    756           *
    757          @verbatim   
    758           ===============================================================================
    759                                ##### Peripheral Control functions #####
    760           ===============================================================================  
    761              [..]
    762              This subsection provides a set of functions allowing to control the PCD data 
    763              transfers.
    764          
    765          @endverbatim
    766            * @{
    767            */
    768          
    769          /**
    770            * @brief  Connect the USB device
    771            * @param  hpcd: PCD handle
    772            * @retval HAL status
    773            */

   \                                 In section .text, align 2, keep-with-next
    774          HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)
    775          {
   \                     HAL_PCD_DevConnect: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    776            __HAL_LOCK(hpcd); 
   \   00000004   0xF894 0x037C      LDRB     R0,[R4, #+892]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD101             BNE.N    ??HAL_PCD_DevConnect_0
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0xBD10             POP      {R4,PC}
   \                     ??HAL_PCD_DevConnect_0: (+1)
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF884 0x037C      STRB     R0,[R4, #+892]
    777            USB_DevConnect(hpcd->Instance);
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x.... 0x....      BL       USB_DevConnect
    778            __HAL_UNLOCK(hpcd); 
   \   0000001C   0x....             B.N      ??Subroutine2_0
    779            return HAL_OK;
    780          }
    781          
    782          /**
    783            * @brief  Disconnect the USB device
    784            * @param  hpcd: PCD handle
    785            * @retval HAL status
    786            */

   \                                 In section .text, align 2, keep-with-next
    787          HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
    788          {
   \                     HAL_PCD_DevDisconnect: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    789            __HAL_LOCK(hpcd); 
   \   00000004   0xF894 0x037C      LDRB     R0,[R4, #+892]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD101             BNE.N    ??HAL_PCD_DevDisconnect_0
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0xBD10             POP      {R4,PC}
   \                     ??HAL_PCD_DevDisconnect_0: (+1)
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF884 0x037C      STRB     R0,[R4, #+892]
    790            USB_DevDisconnect(hpcd->Instance);
   \   00000016                      REQUIRE ?Subroutine1
   \   00000016                      ;; // Fall through to label ?Subroutine1
    791            __HAL_UNLOCK(hpcd); 
    792            return HAL_OK;
    793          }
    794          
    795          /**
    796            * @brief  Set the USB Device address 
    797            * @param  hpcd: PCD handle
    798            * @param  address: new device address
    799            * @retval HAL status
    800            */

   \                                 In section .text, align 2, keep-with-next
    801          HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
    802          {
   \                     HAL_PCD_SetAddress: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    803            __HAL_LOCK(hpcd); 
   \   00000004   0xF894 0x037C      LDRB     R0,[R4, #+892]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD101             BNE.N    ??HAL_PCD_SetAddress_0
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0xBD10             POP      {R4,PC}
   \                     ??HAL_PCD_SetAddress_0: (+1)
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF884 0x037C      STRB     R0,[R4, #+892]
    804            USB_SetDevAddress(hpcd->Instance, address);
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x.... 0x....      BL       USB_SetDevAddress
    805            __HAL_UNLOCK(hpcd);   
   \   0000001C   0x....             B.N      ??Subroutine2_0
    806            return HAL_OK;
    807          }
    808          /**
    809            * @brief  Open and configure an endpoint
    810            * @param  hpcd: PCD handle
    811            * @param  ep_addr: endpoint address
    812            * @param  ep_mps: endpoint max packet size
    813            * @param  ep_type: endpoint type   
    814            * @retval HAL status
    815            */

   \                                 In section .text, align 2, keep-with-next
    816          HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
    817          {
   \                     HAL_PCD_EP_Open: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    818            HAL_StatusTypeDef  ret = HAL_OK;
    819            USB_OTG_EPTypeDef *ep;
    820            
    821            if ((ep_addr & 0x80) == 0x80)
   \   00000004   0xF001 0x007F      AND      R0,R1,#0x7F
   \   00000008   0xEBC0 0x05C0      RSB      R5,R0,R0, LSL #+3
   \   0000000C   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   00000010   0x060D             LSLS     R5,R1,#+24
    822            {
    823              ep = &hpcd->IN_ep[ep_addr & 0x7F];
    824            }
    825            else
    826            {
    827              ep = &hpcd->OUT_ep[ep_addr & 0x7F];
    828            }
    829            ep->num   = ep_addr & 0x7F;
   \   00000012   0xF001 0x057F      AND      R5,R1,#0x7F
   \   00000016   0xBF4C             ITE      MI 
   \   00000018   0x3034             ADDMI    R0,R0,#+52
   \   0000001A   0xF500 0x70EC      ADDPL    R0,R0,#+472
   \   0000001E   0x7005             STRB     R5,[R0, #+0]
    830            
    831            ep->is_in = (0x80 & ep_addr) != 0;
   \   00000020   0x09C9             LSRS     R1,R1,#+7
   \   00000022   0x7041             STRB     R1,[R0, #+1]
    832            ep->maxpacket = ep_mps;
    833            ep->type = ep_type;
    834            if (ep->is_in)
   \   00000024   0x7841             LDRB     R1,[R0, #+1]
   \   00000026   0x6082             STR      R2,[R0, #+8]
   \   00000028   0x70C3             STRB     R3,[R0, #+3]
   \   0000002A   0xB109             CBZ.N    R1,??HAL_PCD_EP_Open_0
    835            {
    836              /* Assign a Tx FIFO */
    837              ep->tx_fifo_num = ep->num;
   \   0000002C   0x7801             LDRB     R1,[R0, #+0]
   \   0000002E   0x80C1             STRH     R1,[R0, #+6]
    838            }
    839            /* Set initial data PID. */
    840            if (ep_type == EP_TYPE_BULK )
   \                     ??HAL_PCD_EP_Open_0: (+1)
   \   00000030   0x2B02             CMP      R3,#+2
   \   00000032   0xBF04             ITT      EQ 
   \   00000034   0x2100             MOVEQ    R1,#+0
   \   00000036   0x7101             STRBEQ   R1,[R0, #+4]
    841            {
    842              ep->data_pid_start = 0;
    843            }
    844            
    845            __HAL_LOCK(hpcd); 
   \   00000038   0xF894 0x137C      LDRB     R1,[R4, #+892]
   \   0000003C   0x2901             CMP      R1,#+1
   \   0000003E   0xD101             BNE.N    ??HAL_PCD_EP_Open_1
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??HAL_PCD_EP_Open_1: (+1)
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0xF884 0x137C      STRB     R1,[R4, #+892]
    846            USB_ActivateEndpoint(hpcd->Instance , ep);
   \   0000004A   0x4601             MOV      R1,R0
   \   0000004C   0x6820             LDR      R0,[R4, #+0]
   \   0000004E   0x.... 0x....      BL       USB_ActivateEndpoint
    847            __HAL_UNLOCK(hpcd);   
   \   00000052   0x....             B.N      ??Subroutine0_0
    848            return ret;
    849          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x6922             LDR      R2,[R4, #+16]
   \   00000004   0x2B00             CMP      R3,#+0
   \   00000006   0xF884 0x037C      STRB     R0,[R4, #+892]
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0xB2D2             UXTB     R2,R2
   \   0000000E   0xD102             BNE.N    ??Subroutine0_1
   \   00000010   0x.... 0x....      BL       USB_EP0StartXfer
   \   00000014   0xE001             B.N      ??Subroutine0_0
   \                     ??Subroutine0_1: (+1)
   \   00000016   0x.... 0x....      BL       USB_EPStartXfer
   \                     ??Subroutine0_0: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF884 0x037C      STRB     R0,[R4, #+892]
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    850          
    851          
    852          /**
    853            * @brief  Deactivate an endpoint
    854            * @param  hpcd: PCD handle
    855            * @param  ep_addr: endpoint address
    856            * @retval HAL status
    857            */

   \                                 In section .text, align 2, keep-with-next
    858          HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
    859          {  
   \                     HAL_PCD_EP_Close: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    860            USB_OTG_EPTypeDef *ep;
    861            
    862            if ((ep_addr & 0x80) == 0x80)
   \   00000004   0xF001 0x007F      AND      R0,R1,#0x7F
   \   00000008   0xEBC0 0x02C0      RSB      R2,R0,R0, LSL #+3
   \   0000000C   0xEB04 0x0082      ADD      R0,R4,R2, LSL #+2
   \   00000010   0x060A             LSLS     R2,R1,#+24
    863            {
    864              ep = &hpcd->IN_ep[ep_addr & 0x7F];
    865            }
    866            else
    867            {
    868              ep = &hpcd->OUT_ep[ep_addr & 0x7F];
    869            }
    870            ep->num   = ep_addr & 0x7F;
   \   00000012   0xF001 0x027F      AND      R2,R1,#0x7F
   \   00000016   0xBF4C             ITE      MI 
   \   00000018   0x3034             ADDMI    R0,R0,#+52
   \   0000001A   0xF500 0x70EC      ADDPL    R0,R0,#+472
   \   0000001E   0x7002             STRB     R2,[R0, #+0]
    871            
    872            ep->is_in = (0x80 & ep_addr) != 0;
   \   00000020   0x09C9             LSRS     R1,R1,#+7
   \   00000022   0x7041             STRB     R1,[R0, #+1]
    873            
    874            __HAL_LOCK(hpcd); 
   \   00000024   0xF894 0x137C      LDRB     R1,[R4, #+892]
   \   00000028   0x2901             CMP      R1,#+1
   \   0000002A   0xD101             BNE.N    ??HAL_PCD_EP_Close_0
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0xBD10             POP      {R4,PC}
   \                     ??HAL_PCD_EP_Close_0: (+1)
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0xF884 0x137C      STRB     R1,[R4, #+892]
    875            USB_DeactivateEndpoint(hpcd->Instance , ep);
   \   00000036   0x4601             MOV      R1,R0
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0x.... 0x....      BL       USB_DeactivateEndpoint
    876            __HAL_UNLOCK(hpcd);   
   \   0000003E   0x....             B.N      ??Subroutine2_0
    877            return HAL_OK;
    878          }
    879          
    880          
    881          /**
    882            * @brief  Receive an amount of data  
    883            * @param  hpcd: PCD handle
    884            * @param  ep_addr: endpoint address
    885            * @param  pBuf: pointer to the reception buffer   
    886            * @param  len: amount of data to be received
    887            * @retval HAL status
    888            */

   \                                 In section .text, align 2, keep-with-next
    889          HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
    890          {
   \                     HAL_PCD_EP_Receive: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
    891            USB_OTG_EPTypeDef *ep;
    892            
    893            ep = &hpcd->OUT_ep[ep_addr & 0x7F];
   \   00000006   0xF000 0x017F      AND      R1,R0,#0x7F
   \   0000000A   0xEBC1 0x05C1      RSB      R5,R1,R1, LSL #+3
   \   0000000E   0xEB04 0x0185      ADD      R1,R4,R5, LSL #+2
   \   00000012   0xF501 0x71EC      ADD      R1,R1,#+472
    894            
    895            /*setup and start the Xfer */
    896            ep->xfer_buff = pBuf;  
    897            ep->xfer_len = len;
   \   00000016   0x614B             STR      R3,[R1, #+20]
    898            ep->xfer_count = 0;
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x618B             STR      R3,[R1, #+24]
    899            ep->is_in = 0;
   \   0000001C   0x704B             STRB     R3,[R1, #+1]
    900            ep->num = ep_addr & 0x7F;
   \   0000001E   0xF000 0x037F      AND      R3,R0,#0x7F
   \   00000022   0x60CA             STR      R2,[R1, #+12]
   \   00000024   0x700B             STRB     R3,[R1, #+0]
    901            
    902            if (hpcd->Init.dma_enable == 1)
   \   00000026   0x6920             LDR      R0,[R4, #+16]
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xBF08             IT       EQ 
   \   0000002C   0x610A             STREQ    R2,[R1, #+16]
    903            {
    904              ep->dma_addr = (uint32_t)pBuf;  
    905            }
    906            
    907            __HAL_LOCK(hpcd); 
   \   0000002E   0xF894 0x037C      LDRB     R0,[R4, #+892]
   \   00000032   0x2801             CMP      R0,#+1
   \   00000034   0xD101             BNE.N    ??HAL_PCD_EP_Receive_0
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??HAL_PCD_EP_Receive_0: (+1)
   \   0000003A   0x....             B.N      ?Subroutine0
    908            
    909            if ((ep_addr & 0x7F) == 0 )
    910            {
    911              USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
    912            }
    913            else
    914            {
    915              USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
    916            }
    917            __HAL_UNLOCK(hpcd); 
    918            
    919            return HAL_OK;
    920          }
    921          
    922          /**
    923            * @brief  Get Received Data Size
    924            * @param  hpcd: PCD handle
    925            * @param  ep_addr: endpoint address
    926            * @retval Data Size
    927            */

   \                                 In section .text, align 2, keep-with-next
    928          uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
    929          {
    930            return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
   \                     HAL_PCD_EP_GetRxCount: (+1)
   \   00000000   0xF001 0x017F      AND      R1,R1,#0x7F
   \   00000004   0xEBC1 0x02C1      RSB      R2,R1,R1, LSL #+3
   \   00000008   0xEB00 0x0082      ADD      R0,R0,R2, LSL #+2
   \   0000000C   0xF8D0 0x01F0      LDR      R0,[R0, #+496]
   \   00000010   0xB280             UXTH     R0,R0
   \   00000012   0x4770             BX       LR               ;; return
    931          }
    932          /**
    933            * @brief  Send an amount of data  
    934            * @param  hpcd: PCD handle
    935            * @param  ep_addr: endpoint address
    936            * @param  pBuf: pointer to the transmission buffer   
    937            * @param  len: amount of data to be sent
    938            * @retval HAL status
    939            */

   \                                 In section .text, align 2, keep-with-next
    940          HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
    941          {
   \                     HAL_PCD_EP_Transmit: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
    942            USB_OTG_EPTypeDef *ep;
    943            
    944            ep = &hpcd->IN_ep[ep_addr & 0x7F];
   \   00000006   0xF000 0x017F      AND      R1,R0,#0x7F
   \   0000000A   0xEBC1 0x05C1      RSB      R5,R1,R1, LSL #+3
   \   0000000E   0xEB04 0x0185      ADD      R1,R4,R5, LSL #+2
   \   00000012   0x3134             ADDS     R1,R1,#+52
    945            
    946            /*setup and start the Xfer */
    947            ep->xfer_buff = pBuf;  
    948            ep->xfer_len = len;
   \   00000014   0x614B             STR      R3,[R1, #+20]
    949            ep->xfer_count = 0;
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x618B             STR      R3,[R1, #+24]
    950            ep->is_in = 1;
   \   0000001A   0x2301             MOVS     R3,#+1
   \   0000001C   0x704B             STRB     R3,[R1, #+1]
    951            ep->num = ep_addr & 0x7F;
   \   0000001E   0xF000 0x037F      AND      R3,R0,#0x7F
   \   00000022   0x60CA             STR      R2,[R1, #+12]
   \   00000024   0x700B             STRB     R3,[R1, #+0]
    952            
    953            if (hpcd->Init.dma_enable == 1)
   \   00000026   0x6920             LDR      R0,[R4, #+16]
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xBF08             IT       EQ 
   \   0000002C   0x610A             STREQ    R2,[R1, #+16]
    954            {
    955              ep->dma_addr = (uint32_t)pBuf;  
    956            }
    957            
    958            __HAL_LOCK(hpcd); 
   \   0000002E   0xF894 0x037C      LDRB     R0,[R4, #+892]
   \   00000032   0x2801             CMP      R0,#+1
   \   00000034   0xD101             BNE.N    ??HAL_PCD_EP_Transmit_0
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??HAL_PCD_EP_Transmit_0: (+1)
   \   0000003A                      REQUIRE ?Subroutine0
   \   0000003A                      ;; // Fall through to label ?Subroutine0
    959            
    960            if ((ep_addr & 0x7F) == 0 )
    961            {
    962              USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
    963            }
    964            else
    965            {
    966              USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
    967            }
    968            
    969            __HAL_UNLOCK(hpcd);
    970               
    971            return HAL_OK;
    972          }
    973          
    974          /**
    975            * @brief  Set a STALL condition over an endpoint
    976            * @param  hpcd: PCD handle
    977            * @param  ep_addr: endpoint address
    978            * @retval HAL status
    979            */

   \                                 In section .text, align 2, keep-with-next
    980          HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
    981          {
    982            USB_OTG_EPTypeDef *ep;
    983            
    984            if ((0x80 & ep_addr) == 0x80)
   \                     HAL_PCD_EP_SetStall: (+1)
   \   00000000   0x060A             LSLS     R2,R1,#+24
   \   00000002   0xB538             PUSH     {R3-R5,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xD507             BPL.N    ??HAL_PCD_EP_SetStall_0
    985            {
    986              ep = &hpcd->IN_ep[ep_addr & 0x7F];
   \   00000008   0xF001 0x007F      AND      R0,R1,#0x7F
   \   0000000C   0xEBC0 0x02C0      RSB      R2,R0,R0, LSL #+3
   \   00000010   0xEB04 0x0082      ADD      R0,R4,R2, LSL #+2
   \   00000014   0x3034             ADDS     R0,R0,#+52
   \   00000016   0xE005             B.N      ??HAL_PCD_EP_SetStall_1
    987            }
    988            else
    989            {
    990              ep = &hpcd->OUT_ep[ep_addr];
   \                     ??HAL_PCD_EP_SetStall_0: (+1)
   \   00000018   0xEBC1 0x02C1      RSB      R2,R1,R1, LSL #+3
   \   0000001C   0xEB04 0x0082      ADD      R0,R4,R2, LSL #+2
   \   00000020   0xF500 0x70EC      ADD      R0,R0,#+472
    991            }
    992            
    993            ep->is_stall = 1;
   \                     ??HAL_PCD_EP_SetStall_1: (+1)
   \   00000024   0x2201             MOVS     R2,#+1
    994            ep->num   = ep_addr & 0x7F;
   \   00000026   0xF001 0x057F      AND      R5,R1,#0x7F
   \   0000002A   0x7082             STRB     R2,[R0, #+2]
    995            ep->is_in = ((ep_addr & 0x80) == 0x80);
   \   0000002C   0x09C9             LSRS     R1,R1,#+7
   \   0000002E   0x7005             STRB     R5,[R0, #+0]
   \   00000030   0x7041             STRB     R1,[R0, #+1]
    996            
    997            
    998            __HAL_LOCK(hpcd); 
   \   00000032   0xF894 0x137C      LDRB     R1,[R4, #+892]
   \   00000036   0x2901             CMP      R1,#+1
   \   00000038   0xD101             BNE.N    ??HAL_PCD_EP_SetStall_2
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??HAL_PCD_EP_SetStall_2: (+1)
   \   0000003E   0xF884 0x237C      STRB     R2,[R4, #+892]
    999            USB_EPSetStall(hpcd->Instance , ep);
   \   00000042   0x4601             MOV      R1,R0
   \   00000044   0x6820             LDR      R0,[R4, #+0]
   \   00000046   0x.... 0x....      BL       USB_EPSetStall
   1000            if((ep_addr & 0x7F) == 0)
   \   0000004A   0xB935             CBNZ.N   R5,??HAL_PCD_EP_SetStall_3
   1001            {
   1002              USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
   \   0000004C   0x6921             LDR      R1,[R4, #+16]
   \   0000004E   0x6820             LDR      R0,[R4, #+0]
   \   00000050   0xF504 0x7260      ADD      R2,R4,#+896
   \   00000054   0xB2C9             UXTB     R1,R1
   \   00000056   0x.... 0x....      BL       USB_EP0_OutStart
   1003            }
   1004            __HAL_UNLOCK(hpcd); 
   \                     ??HAL_PCD_EP_SetStall_3: (+1)
   \   0000005A   0x....             B.N      ??Subroutine0_0
   1005            
   1006            return HAL_OK;
   1007          }
   1008          
   1009          /**
   1010            * @brief  Clear a STALL condition over in an endpoint
   1011            * @param  hpcd: PCD handle
   1012            * @param  ep_addr: endpoint address
   1013            * @retval HAL status
   1014            */

   \                                 In section .text, align 2, keep-with-next
   1015          HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
   1016          {
   1017            USB_OTG_EPTypeDef *ep;
   1018            
   1019            if ((0x80 & ep_addr) == 0x80)
   \                     HAL_PCD_EP_ClrStall: (+1)
   \   00000000   0x060A             LSLS     R2,R1,#+24
   \   00000002   0xB510             PUSH     {R4,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xD507             BPL.N    ??HAL_PCD_EP_ClrStall_0
   1020            {
   1021              ep = &hpcd->IN_ep[ep_addr & 0x7F];
   \   00000008   0xF001 0x007F      AND      R0,R1,#0x7F
   \   0000000C   0xEBC0 0x02C0      RSB      R2,R0,R0, LSL #+3
   \   00000010   0xEB04 0x0082      ADD      R0,R4,R2, LSL #+2
   \   00000014   0x3034             ADDS     R0,R0,#+52
   \   00000016   0xE005             B.N      ??HAL_PCD_EP_ClrStall_1
   1022            }
   1023            else
   1024            {
   1025              ep = &hpcd->OUT_ep[ep_addr];
   \                     ??HAL_PCD_EP_ClrStall_0: (+1)
   \   00000018   0xEBC1 0x02C1      RSB      R2,R1,R1, LSL #+3
   \   0000001C   0xEB04 0x0082      ADD      R0,R4,R2, LSL #+2
   \   00000020   0xF500 0x70EC      ADD      R0,R0,#+472
   1026            }
   1027            
   1028            ep->is_stall = 0;
   \                     ??HAL_PCD_EP_ClrStall_1: (+1)
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0x7082             STRB     R2,[R0, #+2]
   1029            ep->num   = ep_addr & 0x7F;
   \   00000028   0xF001 0x027F      AND      R2,R1,#0x7F
   \   0000002C   0x7002             STRB     R2,[R0, #+0]
   1030            ep->is_in = ((ep_addr & 0x80) == 0x80);
   \   0000002E   0x09C9             LSRS     R1,R1,#+7
   \   00000030   0x7041             STRB     R1,[R0, #+1]
   1031            
   1032            __HAL_LOCK(hpcd); 
   \   00000032   0xF894 0x137C      LDRB     R1,[R4, #+892]
   \   00000036   0x2901             CMP      R1,#+1
   \   00000038   0xD101             BNE.N    ??HAL_PCD_EP_ClrStall_2
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0xBD10             POP      {R4,PC}
   \                     ??HAL_PCD_EP_ClrStall_2: (+1)
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0xF884 0x137C      STRB     R1,[R4, #+892]
   1033            USB_EPClearStall(hpcd->Instance , ep);
   \   00000044   0x4601             MOV      R1,R0
   \   00000046   0x6820             LDR      R0,[R4, #+0]
   \   00000048   0x.... 0x....      BL       USB_EPClearStall
   1034            __HAL_UNLOCK(hpcd); 
   \   0000004C   0x....             B.N      ??Subroutine2_0
   1035              
   1036            return HAL_OK;
   1037          }
   1038          
   1039          /**
   1040            * @brief  Flush an endpoint
   1041            * @param  hpcd: PCD handle
   1042            * @param  ep_addr: endpoint address
   1043            * @retval HAL status
   1044            */

   \                                 In section .text, align 2, keep-with-next
   1045          HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
   1046          {
   \                     HAL_PCD_EP_Flush: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1047            __HAL_LOCK(hpcd); 
   \   00000004   0xF894 0x037C      LDRB     R0,[R4, #+892]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD101             BNE.N    ??HAL_PCD_EP_Flush_0
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0xBD10             POP      {R4,PC}
   \                     ??HAL_PCD_EP_Flush_0: (+1)
   \   00000010   0x2001             MOVS     R0,#+1
   1048            
   1049            if ((ep_addr & 0x80) == 0x80)
   \   00000012   0x060A             LSLS     R2,R1,#+24
   \   00000014   0xF884 0x037C      STRB     R0,[R4, #+892]
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0xD504             BPL.N    ??HAL_PCD_EP_Flush_1
   1050            {
   1051              USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
   \   0000001C   0xF001 0x017F      AND      R1,R1,#0x7F
   \   00000020   0x.... 0x....      BL       USB_FlushTxFifo
   \   00000024   0xE001             B.N      ??HAL_PCD_EP_Flush_2
   1052            }
   1053            else
   1054            {
   1055              USB_FlushRxFifo(hpcd->Instance);
   \                     ??HAL_PCD_EP_Flush_1: (+1)
   \   00000026   0x.... 0x....      BL       USB_FlushRxFifo
   1056            }
   1057            
   1058            __HAL_UNLOCK(hpcd); 
   \                     ??HAL_PCD_EP_Flush_2: (+1)
   \   0000002A   0x....             B.N      ??Subroutine2_0
   1059              
   1060            return HAL_OK;
   1061          }
   1062          
   1063          /**
   1064            * @brief  HAL_PCD_ActivateRemoteWakeup : Active remote wake-up signalling
   1065            * @param  hpcd: PCD handle
   1066            * @retval HAL status
   1067            */

   \                                 In section .text, align 2, keep-with-next
   1068          HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
   1069          {
   1070            USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
   \                     HAL_PCD_ActivateRemoteWakeup: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   1071              
   1072            if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
   \   00000002   0xF500 0x6000      ADD      R0,R0,#+2048
   \   00000006   0x6881             LDR      R1,[R0, #+8]
   \   00000008   0x07C9             LSLS     R1,R1,#+31
   \   0000000A   0xD503             BPL.N    ??HAL_PCD_ActivateRemoteWakeup_0
   1073            {
   1074              /* Activate Remote wake-up signaling */
   1075              USBx_DEVICE->DCTL |= USB_OTG_DCTL_RWUSIG;
   \   0000000C   0x6841             LDR      R1,[R0, #+4]
   \   0000000E   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000012   0x6041             STR      R1,[R0, #+4]
   1076            }
   1077            return HAL_OK;  
   \                     ??HAL_PCD_ActivateRemoteWakeup_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x4770             BX       LR               ;; return
   1078          }
   1079          
   1080          /**
   1081            * @brief  HAL_PCD_DeActivateRemoteWakeup : de-active remote wake-up signalling
   1082            * @param  hpcd: PCD handle
   1083            * @retval HAL status
   1084            */

   \                                 In section .text, align 2, keep-with-next
   1085          HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
   1086          {
   1087            USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
   \                     HAL_PCD_DeActivateRemoteWakeup: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   1088            
   1089            /* De-activate Remote wake-up signaling */
   1090             USBx_DEVICE->DCTL &= ~(USB_OTG_DCTL_RWUSIG);
   \   00000002   0xF500 0x6000      ADD      R0,R0,#+2048
   \   00000006   0x6841             LDR      R1,[R0, #+4]
   \   00000008   0x0849             LSRS     R1,R1,#+1
   \   0000000A   0x0049             LSLS     R1,R1,#+1
   \   0000000C   0x6041             STR      R1,[R0, #+4]
   1091            return HAL_OK;  
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x4770             BX       LR               ;; return
   1092          }
   1093          /**
   1094            * @}
   1095            */
   1096            
   1097          /** @defgroup PCD_Exported_Functions_Group4 Peripheral State functions 
   1098           *  @brief   Peripheral State functions 
   1099           *
   1100          @verbatim   
   1101           ===============================================================================
   1102                                ##### Peripheral State functions #####
   1103           ===============================================================================  
   1104              [..]
   1105              This subsection permits to get in run-time the status of the peripheral 
   1106              and the data flow.
   1107          
   1108          @endverbatim
   1109            * @{
   1110            */
   1111          
   1112          /**
   1113            * @brief  Return the PCD state
   1114            * @param  hpcd: PCD handle
   1115            * @retval HAL state
   1116            */

   \                                 In section .text, align 2, keep-with-next
   1117          PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd)
   1118          {
   1119            return hpcd->State;
   \                     HAL_PCD_GetState: (+1)
   \   00000000   0xF890 0x037D      LDRB     R0,[R0, #+893]
   \   00000004   0x4770             BX       LR               ;; return
   1120          }
   1121          /**
   1122            * @}
   1123            */
   1124          
   1125          /**
   1126            * @}
   1127            */
   1128          
   1129          /* Private functions ---------------------------------------------------------*/
   1130          /** @addtogroup PCD_Private_Functions
   1131            * @{
   1132            */
   1133          
   1134          /**
   1135            * @brief  DCD_WriteEmptyTxFifo
   1136            *         check FIFO for the next packet to be loaded
   1137            * @param  hpcd: PCD handle
   1138            * @param  epnum : endpoint number   
   1139            * @retval HAL status
   1140            */

   \                                 In section .text, align 2, keep-with-next
   1141          static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
   1142          {
   \                     PCD_WriteEmptyTxFifo: (+1)
   \   00000000   0xE92D 0x4DF0      PUSH     {R4-R8,R10,R11,LR}
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4680             MOV      R8,R0
   1143            USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
   1144            USB_OTG_EPTypeDef *ep;
   1145            int32_t len = 0;
   1146            uint32_t len32b;
   1147            uint32_t fifoemptymsk = 0;
   1148          
   1149            ep = &hpcd->IN_ep[epnum];
   \   00000008   0xEBC5 0x00C5      RSB      R0,R5,R5, LSL #+3
   \   0000000C   0xB082             SUB      SP,SP,#+8
   \   0000000E   0xF8D8 0xB000      LDR      R11,[R8, #+0]
   \   00000012   0xEB08 0x0080      ADD      R0,R8,R0, LSL #+2
   \   00000016   0xF100 0x0734      ADD      R7,R0,#+52
   1150            len = ep->xfer_len - ep->xfer_count;
   \   0000001A   0x6978             LDR      R0,[R7, #+20]
   \   0000001C   0x69B9             LDR      R1,[R7, #+24]
   \   0000001E   0x1A44             SUBS     R4,R0,R1
   1151            
   1152            if (len > ep->maxpacket)
   \   00000020   0x68B8             LDR      R0,[R7, #+8]
   \   00000022   0x42A0             CMP      R0,R4
   \   00000024   0xBF38             IT       CC 
   \   00000026   0x4604             MOVCC    R4,R0
   1153            {
   1154              len = ep->maxpacket;
   1155            }
   1156            
   1157            
   1158            len32b = (len + 3) / 4;
   \   00000028   0x1CE0             ADDS     R0,R4,#+3
   \   0000002A   0x1041             ASRS     R1,R0,#+1
   \   0000002C   0xEB00 0x7091      ADD      R0,R0,R1, LSR #+30
   \   00000030   0x1086             ASRS     R6,R0,#+2
   \   00000032   0xEB0B 0x1045      ADD      R0,R11,R5, LSL #+5
   \   00000036   0xF500 0x6A10      ADD      R10,R0,#+2304
   \   0000003A   0xE019             B.N      ??PCD_WriteEmptyTxFifo_0
   1159           
   1160            while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
   1161                    ep->xfer_count < ep->xfer_len &&
   1162                      ep->xfer_len != 0)
   1163            {
   1164              /* Write the FIFO */
   1165              len = ep->xfer_len - ep->xfer_count;
   \                     ??PCD_WriteEmptyTxFifo_1: (+1)
   \   0000003C   0x1A44             SUBS     R4,R0,R1
   1166              
   1167              if (len > ep->maxpacket)
   \   0000003E   0x68B8             LDR      R0,[R7, #+8]
   1168              {
   1169                len = ep->maxpacket;
   1170              }
   1171              len32b = (len + 3) / 4;
   1172              
   1173              USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
   \   00000040   0xB2EA             UXTB     R2,R5
   \   00000042   0x42A0             CMP      R0,R4
   \   00000044   0xBF38             IT       CC 
   \   00000046   0x4604             MOVCC    R4,R0
   \   00000048   0x1CE0             ADDS     R0,R4,#+3
   \   0000004A   0x1041             ASRS     R1,R0,#+1
   \   0000004C   0xEB00 0x7091      ADD      R0,R0,R1, LSR #+30
   \   00000050   0xB2A3             UXTH     R3,R4
   \   00000052   0x1086             ASRS     R6,R0,#+2
   \   00000054   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   00000058   0xB2C0             UXTB     R0,R0
   \   0000005A   0x9000             STR      R0,[SP, #+0]
   \   0000005C   0x68F9             LDR      R1,[R7, #+12]
   \   0000005E   0x4658             MOV      R0,R11
   \   00000060   0x.... 0x....      BL       USB_WritePacket
   1174              
   1175              ep->xfer_buff  += len;
   \   00000064   0x68F8             LDR      R0,[R7, #+12]
   \   00000066   0x1820             ADDS     R0,R4,R0
   \   00000068   0x60F8             STR      R0,[R7, #+12]
   1176              ep->xfer_count += len;
   \   0000006A   0x69B8             LDR      R0,[R7, #+24]
   \   0000006C   0x1820             ADDS     R0,R4,R0
   \   0000006E   0x61B8             STR      R0,[R7, #+24]
   1177            }
   \                     ??PCD_WriteEmptyTxFifo_0: (+1)
   \   00000070   0xF8DA 0x0018      LDR      R0,[R10, #+24]
   \   00000074   0xB280             UXTH     R0,R0
   \   00000076   0x4286             CMP      R6,R0
   \   00000078   0xBF3E             ITTT     CC 
   \   0000007A   0x6978             LDRCC    R0,[R7, #+20]
   \   0000007C   0x69B9             LDRCC    R1,[R7, #+24]
   \   0000007E   0x4281             CMPCC    R1,R0
   \   00000080   0xD201             BCS.N    ??PCD_WriteEmptyTxFifo_2
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD1DA             BNE.N    ??PCD_WriteEmptyTxFifo_1
   1178            
   1179            if(len <= 0)
   \                     ??PCD_WriteEmptyTxFifo_2: (+1)
   \   00000086   0x2C01             CMP      R4,#+1
   \   00000088   0xDA06             BGE.N    ??PCD_WriteEmptyTxFifo_3
   1180            {
   1181              fifoemptymsk = 0x1 << epnum;
   1182              USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
   \   0000008A   0xF50B 0x6000      ADD      R0,R11,#+2048
   \   0000008E   0x2201             MOVS     R2,#+1
   \   00000090   0x40AA             LSLS     R2,R2,R5
   \   00000092   0x6B41             LDR      R1,[R0, #+52]
   \   00000094   0x4391             BICS     R1,R1,R2
   \   00000096   0x6341             STR      R1,[R0, #+52]
   1183              
   1184            }
   1185            
   1186            return HAL_OK;  
   \                     ??PCD_WriteEmptyTxFifo_3: (+1)
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0xE8BD 0x8DF6      POP      {R1,R2,R4-R8,R10,R11,PC}  ;; return
   1187          }
   1188          
   1189          /**
   1190            * @}
   1191            */
   1192          
   1193          #endif /* HAL_PCD_MODULE_ENABLED */
   1194          /**
   1195            * @}
   1196            */
   1197          
   1198          /**
   1199            * @}
   1200            */
   1201          
   1202          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_PCD_ActivateRemoteWakeup
       0   HAL_PCD_ConnectCallback
       0   HAL_PCD_DataInStageCallback
       0   HAL_PCD_DataOutStageCallback
       0   HAL_PCD_DeActivateRemoteWakeup
      16   HAL_PCD_DeInit
        16   -> HAL_PCD_MspDeInit
        16   -> USB_DevDisconnect
        16   -> USB_DisableGlobalInt
        16   -> USB_StopDevice
       8   HAL_PCD_DevConnect
         8   -> USB_DevConnect
       8   HAL_PCD_DevDisconnect
         8   -> USB_DevDisconnect
       0   HAL_PCD_DisconnectCallback
       8   HAL_PCD_EP_Close
         8   -> USB_DeactivateEndpoint
       8   HAL_PCD_EP_ClrStall
         8   -> USB_EPClearStall
       8   HAL_PCD_EP_Flush
         8   -> USB_FlushRxFifo
         8   -> USB_FlushTxFifo
       0   HAL_PCD_EP_GetRxCount
      16   HAL_PCD_EP_Open
        16   -> USB_ActivateEndpoint
      16   HAL_PCD_EP_Receive
        16   -> USB_EP0StartXfer
        16   -> USB_EPStartXfer
      16   HAL_PCD_EP_SetStall
        16   -> USB_EP0_OutStart
        16   -> USB_EPSetStall
      16   HAL_PCD_EP_Transmit
        16   -> USB_EP0StartXfer
        16   -> USB_EPStartXfer
       0   HAL_PCD_GetState
      48   HAL_PCD_IRQHandler
        48   -> HAL_PCDEx_LPM_Callback
        48   -> HAL_PCD_ConnectCallback
        48   -> HAL_PCD_DataInStageCallback
        48   -> HAL_PCD_DataOutStageCallback
        48   -> HAL_PCD_DisconnectCallback
        48   -> HAL_PCD_ISOINIncompleteCallback
        48   -> HAL_PCD_ISOOUTIncompleteCallback
        48   -> HAL_PCD_ResetCallback
        48   -> HAL_PCD_ResumeCallback
        48   -> HAL_PCD_SOFCallback
        48   -> HAL_PCD_SetupStageCallback
        48   -> HAL_PCD_SuspendCallback
        48   -> PCD_WriteEmptyTxFifo
        48   -> USB_ActivateSetup
        48   -> USB_EP0_OutStart
        48   -> USB_FlushTxFifo
        48   -> USB_GetDevSpeed
        48   -> USB_GetMode
        48   -> USB_ReadDevAllInEpInterrupt
        48   -> USB_ReadDevAllOutEpInterrupt
        48   -> USB_ReadDevInEPInterrupt
        48   -> USB_ReadDevOutEPInterrupt
        48   -> USB_ReadInterrupts
        48   -> USB_ReadPacket
       0   HAL_PCD_ISOINIncompleteCallback
       0   HAL_PCD_ISOOUTIncompleteCallback
      60   HAL_PCD_Init
        48   -> HAL_PCDEx_ActivateLPM
        48   -> HAL_PCD_MspInit
        48   -> USB_CoreInit
        48   -> USB_DevDisconnect
        48   -> USB_DevInit
        48   -> USB_DisableGlobalInt
        48   -> USB_SetCurrentMode
        60   -> __aeabi_memcpy4
       0   HAL_PCD_MspDeInit
       0   HAL_PCD_MspInit
       0   HAL_PCD_ResetCallback
       0   HAL_PCD_ResumeCallback
       0   HAL_PCD_SOFCallback
       8   HAL_PCD_SetAddress
         8   -> USB_SetDevAddress
       0   HAL_PCD_SetupStageCallback
       8   HAL_PCD_Start
         8   -> USB_DevConnect
         8   -> USB_EnableGlobalInt
       8   HAL_PCD_Stop
         8   -> USB_DevDisconnect
         8   -> USB_DisableGlobalInt
         8   -> USB_StopDevice
       0   HAL_PCD_SuspendCallback
      40   PCD_WriteEmptyTxFifo
        40   -> USB_WritePacket


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ??Subroutine2_0
      34  ?Subroutine0
       6  ?Subroutine1
      24  HAL_PCD_ActivateRemoteWakeup
       2  HAL_PCD_ConnectCallback
       2  HAL_PCD_DataInStageCallback
       2  HAL_PCD_DataOutStageCallback
      18  HAL_PCD_DeActivateRemoteWakeup
      62  HAL_PCD_DeInit
      30  HAL_PCD_DevConnect
      22  HAL_PCD_DevDisconnect
       2  HAL_PCD_DisconnectCallback
      64  HAL_PCD_EP_Close
      78  HAL_PCD_EP_ClrStall
      44  HAL_PCD_EP_Flush
      20  HAL_PCD_EP_GetRxCount
      84  HAL_PCD_EP_Open
      60  HAL_PCD_EP_Receive
      92  HAL_PCD_EP_SetStall
      58  HAL_PCD_EP_Transmit
       6  HAL_PCD_GetState
    1080  HAL_PCD_IRQHandler
       2  HAL_PCD_ISOINIncompleteCallback
       2  HAL_PCD_ISOOUTIncompleteCallback
     190  HAL_PCD_Init
       2  HAL_PCD_MspDeInit
       2  HAL_PCD_MspInit
       2  HAL_PCD_ResetCallback
       2  HAL_PCD_ResumeCallback
       2  HAL_PCD_SOFCallback
      30  HAL_PCD_SetAddress
       2  HAL_PCD_SetupStageCallback
      36  HAL_PCD_Start
      36  HAL_PCD_Stop
       2  HAL_PCD_SuspendCallback
     158  PCD_WriteEmptyTxFifo

 
 2 266 bytes in section .text
 
 2 266 bytes of CODE memory

Errors: none
Warnings: none
