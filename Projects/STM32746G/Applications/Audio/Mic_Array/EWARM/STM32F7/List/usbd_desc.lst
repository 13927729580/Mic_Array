###############################################################################
#
<<<<<<< HEAD
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       20/Feb/2016  22:27:46
=======
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       19/Feb/2016  17:44:16
>>>>>>> 057df7a95ed4be7451b7a4a457af92f9cb269b3e
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\usbd_desc.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\usbd_desc.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\usbd_desc.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\usbd_desc.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\usbd_desc.c
      1          /**
      2            ******************************************************************************
      3            * @file    USB_Device/AUDIO_Standalone/Src/usbd_desc.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    25-June-2015
      7            * @brief   This file provides the USBD descriptors and string formating method.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "usbd_core.h"
     30          #include "usbd_desc.h"
     31          #include "usbd_conf.h"
     32          
     33          /* Private typedef -----------------------------------------------------------*/
     34          /* Private define ------------------------------------------------------------*/
     35          #define USBD_VID                      0x0483
     36          #define USBD_PID                      0x5730
     37          #define USBD_LANGID_STRING            0x409
     38          #define USBD_MANUFACTURER_STRING      "STMicroelectronics"
     39          #define USBD_PRODUCT_HS_STRING        "STM32 AUDIO Streaming in HS Mode"
     40          #define USBD_PRODUCT_FS_STRING        "STM32 AUDIO Streaming in FS Mode"
     41          #define USBD_CONFIGURATION_HS_STRING  "AUDIO Config"
     42          #define USBD_INTERFACE_HS_STRING      "AUDIO Interface"
     43          #define USBD_CONFIGURATION_FS_STRING  "AUDIO Config"
     44          #define USBD_INTERFACE_FS_STRING      "AUDIO Interface"
     45          
     46          /* Private macro -------------------------------------------------------------*/
     47          /* Private function prototypes -----------------------------------------------*/
     48          uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     49          uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     50          uint8_t *USBD_AUDIO_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     51          uint8_t *USBD_AUDIO_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     52          uint8_t *USBD_AUDIO_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     53          uint8_t *USBD_AUDIO_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     54          uint8_t *USBD_AUDIO_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     55          #ifdef USB_SUPPORT_USER_STRING_DESC
     56          uint8_t *USBD_AUDIO_USRStringDesc(USBD_SpeedTypeDef speed, uint8_t idx, uint16_t *length);  
     57          #endif /* USB_SUPPORT_USER_STRING_DESC */  
     58          
     59          /* Private variables ---------------------------------------------------------*/

   \                                 In section .data, align 4
     60          USBD_DescriptorsTypeDef AUDIO_Desc = {
   \                     AUDIO_Desc:
   \   00000000   0x........         DC32 USBD_AUDIO_DeviceDescriptor, USBD_AUDIO_LangIDStrDescriptor
   \              0x........   
   \   00000008   0x........         DC32 USBD_AUDIO_ManufacturerStrDescriptor
   \   0000000C   0x........         DC32 USBD_AUDIO_ProductStrDescriptor, USBD_AUDIO_SerialStrDescriptor
   \              0x........   
   \   00000014   0x........         DC32 USBD_AUDIO_ConfigStrDescriptor, USBD_AUDIO_InterfaceStrDescriptor
   \              0x........   
     61            USBD_AUDIO_DeviceDescriptor,
     62            USBD_AUDIO_LangIDStrDescriptor, 
     63            USBD_AUDIO_ManufacturerStrDescriptor,
     64            USBD_AUDIO_ProductStrDescriptor,
     65            USBD_AUDIO_SerialStrDescriptor,
     66            USBD_AUDIO_ConfigStrDescriptor,
     67            USBD_AUDIO_InterfaceStrDescriptor, 
     68          };
     69          
     70          /* USB Standard Device Descriptor */
     71          #if defined ( __ICCARM__ ) /*!< IAR Compiler */
     72            #pragma data_alignment=4   
     73          #endif

   \                                 In section .data, align 4
     74          __ALIGN_BEGIN uint8_t USBD_DeviceDesc[USB_LEN_DEV_DESC] __ALIGN_END = {
   \                     USBD_DeviceDesc:
   \   00000000   0x12 0x01          DC8 18, 1, 0, 2, 0, 0, 0, 64, 131, 4, 48, 87, 0, 2, 1, 2, 3, 1, 0, 0
   \              0x00 0x02    
   \              0x00 0x00    
   \              0x00 0x40    
   \              0x83 0x04    
   \              0x30 0x57    
   \              0x00 0x02    
   \              0x01 0x02    
   \              0x03 0x01    
   \              0x00 0x00    
     75            0x12,                       /* bLength */
     76            USB_DESC_TYPE_DEVICE,       /* bDescriptorType */
     77            0x00,                       /* bcdUSB */
     78            0x02,
     79            0x00,                       /* bDeviceClass */
     80            0x00,                       /* bDeviceSubClass */
     81            0x00,                       /* bDeviceProtocol */
     82            USB_MAX_EP0_SIZE,           /* bMaxPacketSize*/
     83            LOBYTE(USBD_VID),           /* idVendor */
     84            HIBYTE(USBD_VID),           /* idVendor */
     85            LOBYTE(USBD_PID),           /* idVendor */
     86            HIBYTE(USBD_PID),           /* idVendor */
     87            0x00,                       /* bcdDevice rel. 2.00 */
     88            0x02,
     89            USBD_IDX_MFC_STR,           /* Index of manufacturer string */
     90            USBD_IDX_PRODUCT_STR,       /* Index of product string */
     91            USBD_IDX_SERIAL_STR,        /* Index of serial number string */
     92            USBD_MAX_NUM_CONFIGURATION  /* bNumConfigurations */
     93          }; /* USB_DeviceDescriptor */
     94          
     95          /* USB Standard Device Descriptor */
     96          #if defined ( __ICCARM__ ) /*!< IAR Compiler */
     97            #pragma data_alignment=4   
     98          #endif

   \                                 In section .data, align 4
     99          __ALIGN_BEGIN uint8_t USBD_LangIDDesc[USB_LEN_LANGID_STR_DESC] __ALIGN_END = {
   \                     USBD_LangIDDesc:
   \   00000000   0x04 0x03          DC8 4, 3, 9, 4
   \              0x09 0x04    
    100            USB_LEN_LANGID_STR_DESC,         
    101            USB_DESC_TYPE_STRING,       
    102            LOBYTE(USBD_LANGID_STRING),
    103            HIBYTE(USBD_LANGID_STRING), 
    104          };
    105          
    106          

   \                                 In section .data, align 4
    107          uint8_t USBD_StringSerial[USB_SIZ_STRING_SERIAL] =
   \                     USBD_StringSerial:
   \   00000000   0x1A 0x03          DC8 26, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000016   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
    108          {
    109            USB_SIZ_STRING_SERIAL,      
    110            USB_DESC_TYPE_STRING,    
    111          };
    112          
    113          #if defined ( __ICCARM__ ) /*!< IAR Compiler */
    114            #pragma data_alignment=4   
    115          #endif

   \                                 In section .bss, align 4
    116          __ALIGN_BEGIN uint8_t USBD_StrDesc[USBD_MAX_STR_DESC_SIZ] __ALIGN_END;
   \                     USBD_StrDesc:
   \   00000000                      DS8 200
    117          
    118          /* Private functions ---------------------------------------------------------*/
    119          static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len);
    120          static void Get_SerialNum(void);
    121          
    122          /**
    123            * @brief  Returns the device descriptor. 
    124            * @param  speed: Current device speed
    125            * @param  length: Pointer to data length variable
    126            * @retval Pointer to descriptor buffer
    127            */

   \                                 In section .text, align 2, keep-with-next
    128          uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    129          {
   \                     USBD_AUDIO_DeviceDescriptor: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    130            *length = sizeof(USBD_DeviceDesc);
   \   00000002   0x2012             MOVS     R0,#+18
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    131            return (uint8_t*)USBD_DeviceDesc;
   \   00000006   0x....             LDR.N    R0,??DataTable7
   \   00000008   0x4770             BX       LR               ;; return
    132          }
    133          
    134          /**
    135            * @brief  Returns the LangID string descriptor.        
    136            * @param  speed: Current device speed
    137            * @param  length: Pointer to data length variable
    138            * @retval Pointer to descriptor buffer
    139            */

   \                                 In section .text, align 2, keep-with-next
    140          uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    141          {
   \                     USBD_AUDIO_LangIDStrDescriptor: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    142            *length = sizeof(USBD_LangIDDesc);  
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    143            return (uint8_t*)USBD_LangIDDesc;
   \   00000006   0x....             LDR.N    R0,??DataTable7_1
   \   00000008   0x4770             BX       LR               ;; return
    144          }
    145          
    146          /**
    147            * @brief  Returns the product string descriptor. 
    148            * @param  speed: Current device speed
    149            * @param  length: Pointer to data length variable
    150            * @retval Pointer to descriptor buffer
    151            */

   \                                 In section .text, align 2, keep-with-next
    152          uint8_t *USBD_AUDIO_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    153          {
   \                     USBD_AUDIO_ProductStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    154            if(speed == USBD_SPEED_HIGH)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD105             BNE.N    ??USBD_AUDIO_ProductStrDescriptor_0
    155            {   
    156              USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable7_2
   \   00000010   0x....             LDR.N    R0,??DataTable7_3
   \   00000012   0x.... 0x....      BL       USBD_GetString
   \   00000016   0xE004             B.N      ??USBD_AUDIO_ProductStrDescriptor_1
    157            }
    158            else
    159            {
    160              USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
   \                     ??USBD_AUDIO_ProductStrDescriptor_0: (+1)
   \   00000018   0x002A             MOVS     R2,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable7_2
   \   0000001C   0x....             LDR.N    R0,??DataTable7_4
   \   0000001E   0x.... 0x....      BL       USBD_GetString
    161            }
    162            return USBD_StrDesc;
   \                     ??USBD_AUDIO_ProductStrDescriptor_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable7_2
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    163          }
    164          
    165          /**
    166            * @brief  Returns the manufacturer string descriptor. 
    167            * @param  speed: Current device speed
    168            * @param  length: Pointer to data length variable
    169            * @retval Pointer to descriptor buffer
    170            */

   \                                 In section .text, align 2, keep-with-next
    171          uint8_t *USBD_AUDIO_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    172          {
   \                     USBD_AUDIO_ManufacturerStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    173            USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
   \   00000006   0x002A             MOVS     R2,R5
   \   00000008   0x....             LDR.N    R1,??DataTable7_2
   \   0000000A   0x....             LDR.N    R0,??DataTable7_5
   \   0000000C   0x.... 0x....      BL       USBD_GetString
    174            return USBD_StrDesc;
   \   00000010   0x....             LDR.N    R0,??DataTable7_2
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    175          }
    176          
    177          /**
    178            * @brief  Returns the serial number string descriptor.        
    179            * @param  speed: Current device speed
    180            * @param  length: Pointer to data length variable
    181            * @retval Pointer to descriptor buffer
    182            */

   \                                 In section .text, align 2, keep-with-next
    183          uint8_t *USBD_AUDIO_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    184          {
   \                     USBD_AUDIO_SerialStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    185            *length = USB_SIZ_STRING_SERIAL;
   \   00000006   0x201A             MOVS     R0,#+26
   \   00000008   0x8028             STRH     R0,[R5, #+0]
    186            
    187            /* Update the serial number string descriptor with the data from the unique ID*/
    188            Get_SerialNum();
   \   0000000A   0x.... 0x....      BL       Get_SerialNum
    189            
    190            return (uint8_t*)USBD_StringSerial;
   \   0000000E   0x....             LDR.N    R0,??DataTable7_6
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    191          }
    192          
    193          /**
    194            * @brief  Returns the configuration string descriptor.    
    195            * @param  speed: Current device speed
    196            * @param  length: Pointer to data length variable
    197            * @retval Pointer to descriptor buffer
    198            */

   \                                 In section .text, align 2, keep-with-next
    199          uint8_t *USBD_AUDIO_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    200          {
   \                     USBD_AUDIO_ConfigStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    201            if(speed == USBD_SPEED_HIGH)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD105             BNE.N    ??USBD_AUDIO_ConfigStrDescriptor_0
    202            {  
    203              USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable7_2
   \   00000010   0x....             LDR.N    R0,??DataTable7_7
   \   00000012   0x.... 0x....      BL       USBD_GetString
   \   00000016   0xE004             B.N      ??USBD_AUDIO_ConfigStrDescriptor_1
    204            }
    205            else
    206            {
    207              USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
   \                     ??USBD_AUDIO_ConfigStrDescriptor_0: (+1)
   \   00000018   0x002A             MOVS     R2,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable7_2
   \   0000001C   0x....             LDR.N    R0,??DataTable7_7
   \   0000001E   0x.... 0x....      BL       USBD_GetString
    208            }
    209            return USBD_StrDesc;  
   \                     ??USBD_AUDIO_ConfigStrDescriptor_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable7_2
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    210          }
    211          
    212          /**
    213            * @brief  Returns the interface string descriptor.        
    214            * @param  speed: Current device speed
    215            * @param  length: Pointer to data length variable
    216            * @retval Pointer to descriptor buffer
    217            */

   \                                 In section .text, align 2, keep-with-next
    218          uint8_t *USBD_AUDIO_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    219          {
   \                     USBD_AUDIO_InterfaceStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    220            if(speed == USBD_SPEED_HIGH)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD105             BNE.N    ??USBD_AUDIO_InterfaceStrDescriptor_0
    221            {
    222              USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable7_2
   \   00000010   0x....             LDR.N    R0,??DataTable7_8
   \   00000012   0x.... 0x....      BL       USBD_GetString
   \   00000016   0xE004             B.N      ??USBD_AUDIO_InterfaceStrDescriptor_1
    223            }
    224            else
    225            {
    226              USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
   \                     ??USBD_AUDIO_InterfaceStrDescriptor_0: (+1)
   \   00000018   0x002A             MOVS     R2,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable7_2
   \   0000001C   0x....             LDR.N    R0,??DataTable7_8
   \   0000001E   0x.... 0x....      BL       USBD_GetString
    227            }
    228            return USBD_StrDesc;  
   \                     ??USBD_AUDIO_InterfaceStrDescriptor_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable7_2
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    229          }
    230          
    231          /**
    232            * @brief  Create the serial number string descriptor 
    233            * @param  None 
    234            * @retval None
    235            */

   \                                 In section .text, align 2, keep-with-next
    236          static void Get_SerialNum(void)
    237          {
   \                     Get_SerialNum: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    238            uint32_t deviceserial0, deviceserial1, deviceserial2;
    239            
    240            deviceserial0 = *(uint32_t*)DEVICE_ID1;
   \   00000002   0x....             LDR.N    R0,??DataTable7_9  ;; 0x1fff7a10
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0004             MOVS     R4,R0
    241            deviceserial1 = *(uint32_t*)DEVICE_ID2;
   \   00000008   0x....             LDR.N    R0,??DataTable7_10  ;; 0x1fff7a14
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x0005             MOVS     R5,R0
    242            deviceserial2 = *(uint32_t*)DEVICE_ID3;
   \   0000000E   0x....             LDR.N    R0,??DataTable7_11  ;; 0x1fff7a18
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x0006             MOVS     R6,R0
    243            
    244            deviceserial0 += deviceserial2;
   \   00000014   0x1934             ADDS     R4,R6,R4
    245            
    246            if (deviceserial0 != 0)
   \   00000016   0x2C00             CMP      R4,#+0
   \   00000018   0xD009             BEQ.N    ??Get_SerialNum_0
    247            {
    248              IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
   \   0000001A   0x2208             MOVS     R2,#+8
   \   0000001C   0x....             LDR.N    R1,??DataTable7_12
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       IntToUnicode
    249              IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
   \   00000024   0x2204             MOVS     R2,#+4
   \   00000026   0x....             LDR.N    R1,??DataTable7_13
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0x.... 0x....      BL       IntToUnicode
    250            }
    251          }
   \                     ??Get_SerialNum_0: (+1)
   \   0000002E   0xBD70             POP      {R4-R6,PC}       ;; return
    252          
    253          /**
    254            * @brief  Convert Hex 32Bits value into char 
    255            * @param  value: value to convert
    256            * @param  pbuf: pointer to the buffer 
    257            * @param  len: buffer length
    258            * @retval None
    259            */

   \                                 In section .text, align 2, keep-with-next
    260          static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
    261          {
   \                     IntToUnicode: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    262            uint8_t idx = 0;
   \   00000002   0x2300             MOVS     R3,#+0
    263            
    264            for( idx = 0; idx < len; idx ++)
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x0023             MOVS     R3,R4
   \                     ??IntToUnicode_0: (+1)
   \   00000008   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0x4293             CMP      R3,R2
   \   0000000E   0xD215             BCS.N    ??IntToUnicode_1
    265            {
    266              if( ((value >> 28)) < 0xA )
   \   00000010   0x0F04             LSRS     R4,R0,#+28
   \   00000012   0x2C0A             CMP      R4,#+10
   \   00000014   0xD205             BCS.N    ??IntToUnicode_2
    267              {
    268                pbuf[ 2* idx] = (value >> 28) + '0';
   \   00000016   0x0F04             LSRS     R4,R0,#+28
   \   00000018   0x3430             ADDS     R4,R4,#+48
   \   0000001A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001C   0xF801 0x4013      STRB     R4,[R1, R3, LSL #+1]
   \   00000020   0xE004             B.N      ??IntToUnicode_3
    269              }
    270              else
    271              {
    272                pbuf[2* idx] = (value >> 28) + 'A' - 10; 
   \                     ??IntToUnicode_2: (+1)
   \   00000022   0x0F04             LSRS     R4,R0,#+28
   \   00000024   0x3437             ADDS     R4,R4,#+55
   \   00000026   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000028   0xF801 0x4013      STRB     R4,[R1, R3, LSL #+1]
    273              }
    274              
    275              value = value << 4;
   \                     ??IntToUnicode_3: (+1)
   \   0000002C   0x0100             LSLS     R0,R0,#+4
    276              
    277              pbuf[ 2* idx + 1] = 0;
   \   0000002E   0x2400             MOVS     R4,#+0
   \   00000030   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000032   0xEB11 0x0543      ADDS     R5,R1,R3, LSL #+1
   \   00000036   0x706C             STRB     R4,[R5, #+1]
    278            }
   \   00000038   0x1C5B             ADDS     R3,R3,#+1
   \   0000003A   0xE7E5             B.N      ??IntToUnicode_0
    279          }
   \                     ??IntToUnicode_1: (+1)
   \   0000003C   0xBC30             POP      {R4,R5}
   \   0000003E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     USBD_DeviceDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     USBD_LangIDDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     USBD_StrDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     USBD_StringSerial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x1FFF7A10         DC32     0x1fff7a10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x1FFF7A14         DC32     0x1fff7a14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x1FFF7A18         DC32     0x1fff7a18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     USBD_StringSerial+0x2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     USBD_StringSerial+0x12

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x53 0x54          DC8 "STM32 AUDIO Streaming in HS Mode"
   \              0x4D 0x33    
   \              0x32 0x20    
   \              0x41 0x55    
   \              0x44 0x49    
   \              0x4F 0x20    
   \              0x53 0x74    
   \              0x72 0x65    
   \              0x61 0x6D    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x69 0x6E    
   \              0x20 0x48    
   \              0x53 0x20    
   \              0x4D 0x6F    
   \              0x64 0x65    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x53 0x54          DC8 "STM32 AUDIO Streaming in FS Mode"
   \              0x4D 0x33    
   \              0x32 0x20    
   \              0x41 0x55    
   \              0x44 0x49    
   \              0x4F 0x20    
   \              0x53 0x74    
   \              0x72 0x65    
   \              0x61 0x6D    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x69 0x6E    
   \              0x20 0x46    
   \              0x53 0x20    
   \              0x4D 0x6F    
   \              0x64 0x65    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x53 0x54          DC8 "STMicroelectronics"
   \              0x4D 0x69    
   \              0x63 0x72    
   \              0x6F 0x65    
   \              0x6C 0x65    
   \              0x63 0x74    
   \              0x72 0x6F    
   \              0x6E 0x69    
   \              0x63 0x73    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x41 0x55          DC8 "AUDIO Config"
   \              0x44 0x49    
   \              0x4F 0x20    
   \              0x43 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x41 0x55          DC8 "AUDIO Interface"
   \              0x44 0x49    
   \              0x4F 0x20    
   \              0x49 0x6E    
   \              0x74 0x65    
   \              0x72 0x66    
   \              0x61 0x63    
   \              0x65 0x00    
    280          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Get_SerialNum
        16   -> IntToUnicode
       8   IntToUnicode
      16   USBD_AUDIO_ConfigStrDescriptor
        16   -> USBD_GetString
       0   USBD_AUDIO_DeviceDescriptor
      16   USBD_AUDIO_InterfaceStrDescriptor
        16   -> USBD_GetString
       0   USBD_AUDIO_LangIDStrDescriptor
      16   USBD_AUDIO_ManufacturerStrDescriptor
        16   -> USBD_GetString
      16   USBD_AUDIO_ProductStrDescriptor
        16   -> USBD_GetString
      16   USBD_AUDIO_SerialStrDescriptor
        16   -> Get_SerialNum


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      36  ?_0
      36  ?_1
      20  ?_2
      16  ?_3
      16  ?_4
      28  AUDIO_Desc
      48  Get_SerialNum
      64  IntToUnicode
      38  USBD_AUDIO_ConfigStrDescriptor
      10  USBD_AUDIO_DeviceDescriptor
      38  USBD_AUDIO_InterfaceStrDescriptor
      10  USBD_AUDIO_LangIDStrDescriptor
      20  USBD_AUDIO_ManufacturerStrDescriptor
      38  USBD_AUDIO_ProductStrDescriptor
      18  USBD_AUDIO_SerialStrDescriptor
      20  USBD_DeviceDesc
       4  USBD_LangIDDesc
     200  USBD_StrDesc
      28  USBD_StringSerial

 
 200 bytes in section .bss
  80 bytes in section .data
 124 bytes in section .rodata
 340 bytes in section .text
 
 340 bytes of CODE  memory
 124 bytes of CONST memory
 280 bytes of DATA  memory

Errors: none
Warnings: none
