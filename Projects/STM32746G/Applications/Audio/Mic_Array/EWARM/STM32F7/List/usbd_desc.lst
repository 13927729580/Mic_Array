###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       25/Feb/2016  16:19:15
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\usbd_desc.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\usbd_desc.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\usbd_desc.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\usbd_desc.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\usbd_desc.c
      1          /**
      2            ******************************************************************************
      3            * @file    USB_Device/AUDIO_Standalone/Src/usbd_desc.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    26-February-2014
      7            * @brief   This file provides the USBD descriptors and string formating method.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "usbd_core.h"
     30          #include "usbd_desc.h"
     31          #include "usbd_conf.h"
     32          
     33          /* Private typedef -----------------------------------------------------------*/
     34          /* Private define ------------------------------------------------------------*/
     35          #define USBD_VID                      0x0483
     36          #define USBD_PID                      0x5730
     37          #define USBD_LANGID_STRING            0x409
     38          #define USBD_MANUFACTURER_STRING      "STMicroelectronics"
     39          #define USBD_PRODUCT_HS_STRING        "STM32 AUDIO Streaming in HS Mode"
     40          #define USBD_SERIALNUMBER_HS_STRING   "00000000034E"
     41          #define USBD_PRODUCT_FS_STRING        "STM32 AUDIO Streaming in FS Mode"
     42          #define USBD_SERIALNUMBER_FS_STRING   "00000000034F"
     43          #define USBD_CONFIGURATION_HS_STRING  "AUDIO Config"
     44          #define USBD_INTERFACE_HS_STRING      "AUDIO Interface"
     45          #define USBD_CONFIGURATION_FS_STRING  "AUDIO Config"
     46          #define USBD_INTERFACE_FS_STRING      "AUDIO Interface"
     47          
     48          /* Private macro -------------------------------------------------------------*/
     49          /* Private function prototypes -----------------------------------------------*/
     50          uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     51          uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     52          uint8_t *USBD_AUDIO_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     53          uint8_t *USBD_AUDIO_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     54          uint8_t *USBD_AUDIO_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     55          uint8_t *USBD_AUDIO_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     56          uint8_t *USBD_AUDIO_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
     57          #ifdef USB_SUPPORT_USER_STRING_DESC
     58          uint8_t *USBD_AUDIO_USRStringDesc(USBD_SpeedTypeDef speed, uint8_t idx, uint16_t *length);  
     59          #endif /* USB_SUPPORT_USER_STRING_DESC */  
     60          
     61          /* Private variables ---------------------------------------------------------*/

   \                                 In section .data, align 4
     62          USBD_DescriptorsTypeDef AUDIO_Desc = {
   \                     AUDIO_Desc:
   \   00000000   0x........         DC32 USBD_AUDIO_DeviceDescriptor, USBD_AUDIO_LangIDStrDescriptor
   \              0x........   
   \   00000008   0x........         DC32 USBD_AUDIO_ManufacturerStrDescriptor
   \   0000000C   0x........         DC32 USBD_AUDIO_ProductStrDescriptor, USBD_AUDIO_SerialStrDescriptor
   \              0x........   
   \   00000014   0x........         DC32 USBD_AUDIO_ConfigStrDescriptor, USBD_AUDIO_InterfaceStrDescriptor
   \              0x........   
     63            USBD_AUDIO_DeviceDescriptor,
     64            USBD_AUDIO_LangIDStrDescriptor, 
     65            USBD_AUDIO_ManufacturerStrDescriptor,
     66            USBD_AUDIO_ProductStrDescriptor,
     67            USBD_AUDIO_SerialStrDescriptor,
     68            USBD_AUDIO_ConfigStrDescriptor,
     69            USBD_AUDIO_InterfaceStrDescriptor, 
     70          };
     71          
     72          /* USB Standard Device Descriptor */
     73          #if defined ( __ICCARM__ ) /*!< IAR Compiler */
     74            #pragma data_alignment=4   
     75          #endif

   \                                 In section .data, align 4
     76          __ALIGN_BEGIN uint8_t hUSBDDeviceDesc[USB_LEN_DEV_DESC] __ALIGN_END = {
   \                     hUSBDDeviceDesc:
   \   00000000   0x12 0x01          DC8 18, 1, 0, 2, 0, 0, 0, 64, 131, 4, 48, 87, 0, 2, 1, 2, 3, 1, 0, 0
   \              0x00 0x02    
   \              0x00 0x00    
   \              0x00 0x40    
   \              0x83 0x04    
   \              0x30 0x57    
   \              0x00 0x02    
   \              0x01 0x02    
   \              0x03 0x01    
   \              0x00 0x00    
     77            0x12,                       /* bLength */
     78            USB_DESC_TYPE_DEVICE,       /* bDescriptorType */
     79            0x00,                       /* bcdUSB */
     80            0x02,
     81            0x00,                       /* bDeviceClass */
     82            0x00,                       /* bDeviceSubClass */
     83            0x00,                       /* bDeviceProtocol */
     84            USB_MAX_EP0_SIZE,           /* bMaxPacketSize*/
     85            LOBYTE(USBD_VID),           /* idVendor */
     86            HIBYTE(USBD_VID),           /* idVendor */
     87            LOBYTE(USBD_PID),           /* idVendor */
     88            HIBYTE(USBD_PID),           /* idVendor */
     89            0x00,                       /* bcdDevice rel. 2.00 */
     90            0x02,
     91            USBD_IDX_MFC_STR,           /* Index of manufacturer string */
     92            USBD_IDX_PRODUCT_STR,       /* Index of product string */
     93            USBD_IDX_SERIAL_STR,        /* Index of serial number string */
     94            USBD_MAX_NUM_CONFIGURATION  /* bNumConfigurations */
     95          }; /* USB_DeviceDescriptor */
     96          
     97          /* USB Standard Device Descriptor */
     98          #if defined ( __ICCARM__ ) /*!< IAR Compiler */
     99            #pragma data_alignment=4   
    100          #endif

   \                                 In section .data, align 4
    101          __ALIGN_BEGIN uint8_t USBD_LangIDDesc[USB_LEN_LANGID_STR_DESC] __ALIGN_END = {
   \                     USBD_LangIDDesc:
   \   00000000   0x04 0x03          DC8 4, 3, 9, 4
   \              0x09 0x04    
    102            USB_LEN_LANGID_STR_DESC,         
    103            USB_DESC_TYPE_STRING,       
    104            LOBYTE(USBD_LANGID_STRING),
    105            HIBYTE(USBD_LANGID_STRING), 
    106          };
    107          
    108          #if defined ( __ICCARM__ ) /*!< IAR Compiler */
    109            #pragma data_alignment=4   
    110          #endif

   \                                 In section .bss, align 4
    111          __ALIGN_BEGIN uint8_t USBD_StrDesc[USBD_MAX_STR_DESC_SIZ] __ALIGN_END;
   \                     USBD_StrDesc:
   \   00000000                      DS8 200
    112          
    113          /* Private functions ---------------------------------------------------------*/
    114          
    115          /**
    116            * @brief  Returns the device descriptor. 
    117            * @param  speed: Current device speed
    118            * @param  length: Pointer to data length variable
    119            * @retval Pointer to descriptor buffer
    120            */

   \                                 In section .text, align 2, keep-with-next
    121          uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    122          {
   \                     USBD_AUDIO_DeviceDescriptor: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    123            *length = sizeof(hUSBDDeviceDesc);
   \   00000002   0x2012             MOVS     R0,#+18
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    124            return hUSBDDeviceDesc;
   \   00000006   0x....             LDR.N    R0,??DataTable6
   \   00000008   0x4770             BX       LR               ;; return
    125          }
    126          
    127          /**
    128            * @brief  Returns the LangID string descriptor.        
    129            * @param  speed: Current device speed
    130            * @param  length: Pointer to data length variable
    131            * @retval Pointer to descriptor buffer
    132            */

   \                                 In section .text, align 2, keep-with-next
    133          uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    134          {
   \                     USBD_AUDIO_LangIDStrDescriptor: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    135            *length = sizeof(USBD_LangIDDesc);  
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    136            return USBD_LangIDDesc;
   \   00000006   0x....             LDR.N    R0,??DataTable6_1
   \   00000008   0x4770             BX       LR               ;; return
    137          }
    138          
    139          /**
    140            * @brief  Returns the product string descriptor. 
    141            * @param  speed: Current device speed
    142            * @param  length: Pointer to data length variable
    143            * @retval Pointer to descriptor buffer
    144            */

   \                                 In section .text, align 2, keep-with-next
    145          uint8_t *USBD_AUDIO_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    146          {
   \                     USBD_AUDIO_ProductStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    147            if(speed == 0)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD105             BNE.N    ??USBD_AUDIO_ProductStrDescriptor_0
    148            {   
    149              USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable6_2
   \   00000010   0x....             LDR.N    R0,??DataTable6_3
   \   00000012   0x.... 0x....      BL       USBD_GetString
   \   00000016   0xE004             B.N      ??USBD_AUDIO_ProductStrDescriptor_1
    150            }
    151            else
    152            {
    153              USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
   \                     ??USBD_AUDIO_ProductStrDescriptor_0: (+1)
   \   00000018   0x002A             MOVS     R2,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable6_2
   \   0000001C   0x....             LDR.N    R0,??DataTable6_4
   \   0000001E   0x.... 0x....      BL       USBD_GetString
    154            }
    155            return USBD_StrDesc;
   \                     ??USBD_AUDIO_ProductStrDescriptor_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable6_2
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    156          }
    157          
    158          /**
    159            * @brief  Returns the manufacturer string descriptor. 
    160            * @param  speed: Current device speed
    161            * @param  length: Pointer to data length variable
    162            * @retval Pointer to descriptor buffer
    163            */

   \                                 In section .text, align 2, keep-with-next
    164          uint8_t *USBD_AUDIO_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    165          {
   \                     USBD_AUDIO_ManufacturerStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    166            USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
   \   00000006   0x002A             MOVS     R2,R5
   \   00000008   0x....             LDR.N    R1,??DataTable6_2
   \   0000000A   0x....             LDR.N    R0,??DataTable6_5
   \   0000000C   0x.... 0x....      BL       USBD_GetString
    167            return USBD_StrDesc;
   \   00000010   0x....             LDR.N    R0,??DataTable6_2
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    168          }
    169          
    170          /**
    171            * @brief  Returns the serial number string descriptor.        
    172            * @param  speed: Current device speed
    173            * @param  length: Pointer to data length variable
    174            * @retval Pointer to descriptor buffer
    175            */

   \                                 In section .text, align 2, keep-with-next
    176          uint8_t *USBD_AUDIO_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    177          {
   \                     USBD_AUDIO_SerialStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    178            if(speed == USBD_SPEED_HIGH)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD105             BNE.N    ??USBD_AUDIO_SerialStrDescriptor_0
    179            {    
    180              USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable6_2
   \   00000010   0x....             LDR.N    R0,??DataTable6_6
   \   00000012   0x.... 0x....      BL       USBD_GetString
   \   00000016   0xE004             B.N      ??USBD_AUDIO_SerialStrDescriptor_1
    181            }
    182            else
    183            {
    184              USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
   \                     ??USBD_AUDIO_SerialStrDescriptor_0: (+1)
   \   00000018   0x002A             MOVS     R2,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable6_2
   \   0000001C   0x....             LDR.N    R0,??DataTable6_7
   \   0000001E   0x.... 0x....      BL       USBD_GetString
    185            }
    186            return USBD_StrDesc;
   \                     ??USBD_AUDIO_SerialStrDescriptor_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable6_2
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    187          }
    188          
    189          /**
    190            * @brief  Returns the configuration string descriptor.    
    191            * @param  speed: Current device speed
    192            * @param  length: Pointer to data length variable
    193            * @retval Pointer to descriptor buffer
    194            */

   \                                 In section .text, align 2, keep-with-next
    195          uint8_t *USBD_AUDIO_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    196          {
   \                     USBD_AUDIO_ConfigStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    197            if(speed == USBD_SPEED_HIGH)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD105             BNE.N    ??USBD_AUDIO_ConfigStrDescriptor_0
    198            {  
    199              USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable6_2
   \   00000010   0x....             LDR.N    R0,??DataTable6_8
   \   00000012   0x.... 0x....      BL       USBD_GetString
   \   00000016   0xE004             B.N      ??USBD_AUDIO_ConfigStrDescriptor_1
    200            }
    201            else
    202            {
    203              USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
   \                     ??USBD_AUDIO_ConfigStrDescriptor_0: (+1)
   \   00000018   0x002A             MOVS     R2,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable6_2
   \   0000001C   0x....             LDR.N    R0,??DataTable6_8
   \   0000001E   0x.... 0x....      BL       USBD_GetString
    204            }
    205            return USBD_StrDesc;  
   \                     ??USBD_AUDIO_ConfigStrDescriptor_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable6_2
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    206          }
    207          
    208          /**
    209            * @brief  Returns the interface string descriptor.        
    210            * @param  speed: Current device speed
    211            * @param  length: Pointer to data length variable
    212            * @retval Pointer to descriptor buffer
    213            */

   \                                 In section .text, align 2, keep-with-next
    214          uint8_t *USBD_AUDIO_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
    215          {
   \                     USBD_AUDIO_InterfaceStrDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    216            if(speed == 0)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD105             BNE.N    ??USBD_AUDIO_InterfaceStrDescriptor_0
    217            {
    218              USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x....             LDR.N    R1,??DataTable6_2
   \   00000010   0x....             LDR.N    R0,??DataTable6_9
   \   00000012   0x.... 0x....      BL       USBD_GetString
   \   00000016   0xE004             B.N      ??USBD_AUDIO_InterfaceStrDescriptor_1
    219            }
    220            else
    221            {
    222              USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
   \                     ??USBD_AUDIO_InterfaceStrDescriptor_0: (+1)
   \   00000018   0x002A             MOVS     R2,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable6_2
   \   0000001C   0x....             LDR.N    R0,??DataTable6_9
   \   0000001E   0x.... 0x....      BL       USBD_GetString
    223            }
    224            return USBD_StrDesc;  
   \                     ??USBD_AUDIO_InterfaceStrDescriptor_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable6_2
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    225          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     hUSBDDeviceDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     USBD_LangIDDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     USBD_StrDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x53 0x54          DC8 "STM32 AUDIO Streaming in HS Mode"
   \              0x4D 0x33    
   \              0x32 0x20    
   \              0x41 0x55    
   \              0x44 0x49    
   \              0x4F 0x20    
   \              0x53 0x74    
   \              0x72 0x65    
   \              0x61 0x6D    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x69 0x6E    
   \              0x20 0x48    
   \              0x53 0x20    
   \              0x4D 0x6F    
   \              0x64 0x65    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x53 0x54          DC8 "STM32 AUDIO Streaming in FS Mode"
   \              0x4D 0x33    
   \              0x32 0x20    
   \              0x41 0x55    
   \              0x44 0x49    
   \              0x4F 0x20    
   \              0x53 0x74    
   \              0x72 0x65    
   \              0x61 0x6D    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x69 0x6E    
   \              0x20 0x46    
   \              0x53 0x20    
   \              0x4D 0x6F    
   \              0x64 0x65    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x53 0x54          DC8 "STMicroelectronics"
   \              0x4D 0x69    
   \              0x63 0x72    
   \              0x6F 0x65    
   \              0x6C 0x65    
   \              0x63 0x74    
   \              0x72 0x6F    
   \              0x6E 0x69    
   \              0x63 0x73    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x30 0x30          DC8 "00000000034E"
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x33    
   \              0x34 0x45    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x30 0x30          DC8 "00000000034F"
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x33    
   \              0x34 0x46    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x41 0x55          DC8 "AUDIO Config"
   \              0x44 0x49    
   \              0x4F 0x20    
   \              0x43 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x41 0x55          DC8 "AUDIO Interface"
   \              0x44 0x49    
   \              0x4F 0x20    
   \              0x49 0x6E    
   \              0x74 0x65    
   \              0x72 0x66    
   \              0x61 0x63    
   \              0x65 0x00    
    226          
    227          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   USBD_AUDIO_ConfigStrDescriptor
        16   -> USBD_GetString
       0   USBD_AUDIO_DeviceDescriptor
      16   USBD_AUDIO_InterfaceStrDescriptor
        16   -> USBD_GetString
       0   USBD_AUDIO_LangIDStrDescriptor
      16   USBD_AUDIO_ManufacturerStrDescriptor
        16   -> USBD_GetString
      16   USBD_AUDIO_ProductStrDescriptor
        16   -> USBD_GetString
      16   USBD_AUDIO_SerialStrDescriptor
        16   -> USBD_GetString


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      36  ?_0
      36  ?_1
      20  ?_2
      16  ?_3
      16  ?_4
      16  ?_5
      16  ?_6
      28  AUDIO_Desc
      38  USBD_AUDIO_ConfigStrDescriptor
      10  USBD_AUDIO_DeviceDescriptor
      38  USBD_AUDIO_InterfaceStrDescriptor
      10  USBD_AUDIO_LangIDStrDescriptor
      20  USBD_AUDIO_ManufacturerStrDescriptor
      38  USBD_AUDIO_ProductStrDescriptor
      38  USBD_AUDIO_SerialStrDescriptor
       4  USBD_LangIDDesc
     200  USBD_StrDesc
      20  hUSBDDeviceDesc

 
 200 bytes in section .bss
  52 bytes in section .data
 156 bytes in section .rodata
 232 bytes in section .text
 
 232 bytes of CODE  memory
 156 bytes of CONST memory
 252 bytes of DATA  memory

Errors: none
Warnings: none
