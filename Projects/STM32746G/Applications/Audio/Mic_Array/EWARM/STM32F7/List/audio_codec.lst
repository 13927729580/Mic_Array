###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       16/Apr/2016  18:30:57
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\audio_codec.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\audio_codec.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Oh --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\audio_codec.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\audio_codec.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\audio_codec.c
      1          /**
      2            ******************************************************************************
      3            * @file    audio_codec.c
      4            * @author  Phan Le Son ( porting from "MCD Application Team")
      5            * @version V1.0.0
      6            * @date    12-December-2015
      7            * @brief   This file includes the low layer driver for CS43L22 Audio Codec 
      8            ******************************************************************************
      9                                                       User NOTES
     10          1. How To use this driver:
     11          --------------------------
     12             - Call the function AUDIO_Init(
     13                                              OutputDevice: physical output mode (OUTPUT_DEVICE_SPEAKER, 
     14                                                           OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_AUTO or 
     15                                                           OUTPUT_DEVICE_BOTH)
     16                                              Volume: initial volume to be set (0 is min (mute), 100 is max (100%)
     17                                              AudioFreq: Audio frequency in Hz (8000, 16000, 22500, 32000 ...)
     18                                              this parameter is relative to the audio file/stream type.
     19                                             )
     20                This function configures all the hardware required for the audio application (codec, I2C, I2S, 
     21                GPIOs, DMA and interrupt if needed). This function returns 0 if configuration is OK.
     22                if the returned value is different from 0 or the function is stuck then the communication with
     23                the codec (try to un-plug the power or reset device in this case).
     24                + OUTPUT_DEVICE_SPEAKER: only speaker will be set as output for the audio stream.
     25                + OUTPUT_DEVICE_HEADPHONE: only headphones will be set as output for the audio stream.
     26                + OUTPUT_DEVICE_AUTO: Selection of output device is made through external switch (implemented 
     27                   into the audio jack on the board). When the Headphone is connected it is used
     28                   as output. When the headphone is disconnected from the audio jack, the output is
     29                   automatically switched to Speaker.
     30                + OUTPUT_DEVICE_BOTH: both Speaker and Headphone are used as outputs for the audio stream
     31                   at the same time.
     32             - Call the function AUDIO_Play(
     33                                            pBuffer: pointer to the audio data file address
     34                                            Size: size of the buffer to be sent in Bytes
     35                                           )
     36                to start playing (for the first time) from the audio file/stream.
     37             - Call the function AUDIO_PauseResume(
     38                                                   Cmd: AUDIO_PAUSE (or 0) to pause playing or AUDIO_RESUME (or 
     39                                                         any value different from 0) to resume playing.
     40                                                   )
     41                 Note. After calling AUDIO_PauseResume() function for pause, only AUDIO_PauseResume() should be called
     42                    for resume (it is not allowed to call AUDIO_Play() in this case).
     43                 Note. This function should be called only when the audio file is played or paused (not stopped).
     44             - For each mode, you may need to implement the relative callback functions into your code.
     45                The Callback functions are named AUDIO_XXX_CallBack() and only their prototypes are declared in 
     46                the stm32f4_discovery_audio_codec.h file. (refer to the example for more details on the callbacks implementations)
     47             - To Stop playing, to modify the volume level or to mute, use the functions
     48                 AUDIO_Stop(), AUDIO_VolumeCtl() and AUDIO_Mute().
     49           
     50           Driver architecture:
     51           --------------------
     52           This driver is composed of three main layers:
     53             o High Audio Layer: consists of the function API exported in the audio_codec.h file
     54               (AUDIO_Init(), AUDIO_Play() ...)
     55             o Codec Control layer: consists of the functions API controlling the audio codec (CS43L22) and 
     56               included as local functions in file stm32f4_discovery_audio_codec.c (Codec_Init(), Codec_Play() ...)
     57             o Media Access Layer (MAL): which consists of functions allowing to access the media containing/
     58               providing the audio file/stream. These functions are also included as local functions into
     59               the stm32f4_discovery_audio_codec.c file (Audio_MAL_Init(), Audio_MAL_Play() ...)
     60            Each set of functions (layer) may be implemented independently of the others and customized when 
     61            needed.    
     62          2. Modes description:
     63          ---------------------
     64               + AUDIO_MAL_MODE_NORMAL : is suitable when the audio file is in a memory location.
     65               + AUDIO_MAL_MODE_CIRCULAR: is suitable when the audio data are read either from a 
     66                  memory location or from a device at real time (double buffer could be used).
     67          3. DMA interrupts description:
     68          ------------------------------
     69               + AUDIO_IT_TC_ENABLE: Enable this define to use the DMA end of transfer interrupt.
     70                  then, a callback should be implemented by user to perform specific actions
     71                  when the DMA has finished the transfer.
     72               + AUDIO_IT_HT_ENABLE: Enable this define to use the DMA end of half transfer interrupt.
     73                  then, a callback should be implemented by user to perform specific actions
     74                  when the DMA has reached the half of the buffer transfer (generally, it is useful 
     75                  to load the first half of buffer while DMA is loading from the second half).
     76               + AUDIO_IT_ER_ENABLE: Enable this define to manage the cases of error on DMA transfer.
     77          4. Known Limitations:
     78          ---------------------
     79             1- When using the Speaker, if the audio file quality is not high enough, the speaker output
     80                may produce high and uncomfortable noise level. To avoid this issue, to use speaker
     81                output properly, try to increase audio file sampling rate (typically higher than 48KHz).
     82                This operation will lead to larger file size.
     83             2- Communication with the audio codec (through I2C) may be corrupted if it is interrupted by some
     84                user interrupt routines (in this case, interrupts could be disabled just before the start of 
     85                communication then re-enabled when it is over). Note that this communication is only done at
     86                the configuration phase (AUDIO_Init() or AUDIO_Stop()) and when Volume control modification is 
     87                performed (AUDIO_VolumeCtl() or AUDIO_Mute()). When the audio data is played, no communication is 
     88                required with the audio codec.
     89            3- Parsing of audio file is not implemented (in order to determine audio file properties: Mono/Stereo, Data size, 
     90               File size, Audio Frequency, Audio Data header size ...). The configuration is fixed for the given audio file.
     91            4- Mono audio streaming is not supported (in order to play mono audio streams, each data should be sent twice 
     92               on the I2S or should be duplicated on the source buffer. Or convert the stream in stereo before playing).
     93            5- Supports only 16-bit audio data size.
     94          */
     95          
     96          
     97          /* Includes ------------------------------------------------------------------*/
     98          #include "audio_codec.h"
     99          #include "stm32746g_discovery.h"
    100          #include "stm32f7xx_hal_i2s.h"
    101          #include "audio.h"
    102          #include "main.h"
    103          
    104          
    105          /** 
    106            *      This file includes the low layer driver for CS43L22 Audio Codec
    107            */ 
    108          
    109          #define SPI_I2S_DMAReq_Tx               ((uint16_t)0x0002)
    110          #define SPI_I2S_DMAReq_Rx               ((uint16_t)0x0001)
    111          /* Mask for the bit EN of the I2S CFGR register */
    112          #define I2S_ENABLE_MASK                 0x0400
    113          /* Delay for the Codec to be correctly reset */
    114          #define CODEC_RESET_DELAY               0x4FFF
    115          /* The 7 bits Codec address (sent through I2C interface) */
    116          #define CODEC_ADDRESS                   0x94  
    117          #define CODEC_ADDRESS_R                   0x95
    118          
    119          
    120          
    121          /* This is an audio file stored in the Flash memory as a constant table of 16-bit data.
    122              The audio format should be WAV (raw / PCM) 16-bits, Stereo (sampling rate may be modified) */
    123          extern const uint16_t AUDIO_SAMPLE[];
    124          extern __IO uint8_t XferCplt;
    125          extern I2S_HandleTypeDef     hi2s3;
    126          
    127          #if DEBUG
    128              extern uint8_t pUARTBuf[128];
    129              extern UART_HandleTypeDef huart3;
    130          #endif 
    131          
    132          /* This structure is declared global because it is handled by two different functions */

   \                                 In section .bss, align 4
    133          DMA_InitTypeDef DMA_InitStructure; 
   \                     DMA_InitStructure:
   \   00000000                      DS8 48

   \                                 In section .bss, align 4
    134          DMA_InitTypeDef AUDIO_MAL_DMA_InitStructure;
   \                     AUDIO_MAL_DMA_InitStructure:
   \   00000000                      DS8 48

   \                                 In section .bss, align 4
    135          DMA_HandleTypeDef     DmaHandle;
   \                     DmaHandle:
   \   00000000                      DS8 88

   \                                 In section .bss, align 4
    136          I2C_HandleTypeDef     hi2c1,hi2c2;
   \                     hi2c2:
   \   00000000                      DS8 60

   \                                 In section .data, align 4
    137          
    138          uint32_t AudioTotalSize = 0xFFFF; /* This variable holds the total size of the audio file */
    139          uint32_t AudioRemSize   = 0xFFFF; /* This variable holds the remaining data in audio file */
    140          __IO uint32_t  CODECTimeout = CODEC_LONG_TIMEOUT;   
    141          __IO uint32_t CurrAudioInterface = AUDIO_INTERFACE_I2S; //AUDIO_INTERFACE_DAC
    142          __IO uint8_t OutputDev = 0;
   \                     OutputDev:
   \   00000000   0x00               DC8 0
    143          uint16_t *CurrentPos ;             /* This variable holds the current position of audio pointer */
    144          uint8_t Volume=80;
   \                     Volume:
   \   00000001   0x50               DC8 80
   \   00000002   0x00 0x00          DC8 0, 0
   \                     hi2c1:
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000034   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     AudioTotalSize:
   \   00000040   0x0000FFFF         DC32 65535
   \                     AudioRemSize:
   \   00000044   0x0000FFFF         DC32 65535
   \                     CurrentPos:
   \   00000048   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     CODECTimeout:
   \   00000000   0x0012C000         DC32 1228800

   \                                 In section .data, align 4
   \                     CurrAudioInterface:
   \   00000000   0x00000001         DC32 1
    145          
    146          
    147          /*-----------------------------------
    148                                     Audio Codec functions 
    149                                              ------------------------------------------*/
    150          static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq);
    151          static uint32_t Codec_DeInit(void);
    152          static uint32_t Codec_Play(void);
    153          static uint32_t Codec_PauseResume(uint32_t Cmd);
    154          static uint32_t Codec_Stop(uint32_t Cmd);
    155          static uint32_t Codec_VolumeCtrl(uint8_t Volume);
    156          static uint32_t Codec_Mute(uint32_t Cmd);
    157          static void     Codec_CtrlInterface_Init(void);
    158          static void     Codec_CtrlInterface_DeInit(void);
    159          static void     Codec_AudioInterface_Init(uint32_t AudioFreq);
    160          static void     Codec_AudioInterface_DeInit(void);
    161          static void     Codec_Reset(void);
    162          static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue);
    163          static uint32_t Codec_ReadRegister(uint8_t RegisterAddr);
    164          static void     Codec_GPIO_Init(void);
    165          static void     Codec_GPIO_DeInit(void);
    166          static void     Delay(__IO uint32_t nCount);
    167          static void     I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState);
    168          static void     SPI_I2S_DeInit(SPI_TypeDef* SPIx);
    169          static void     DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
    170          static void     SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
    171          static void     Audio_MAL_DeInit(void);
    172          static void     Audio_MAL_PauseResume(uint32_t Cmd, uint32_t Addr);
    173          
    174          /*----------------------------------------------------------------------------*/
    175          
    176          /**
    177            * @brief  Configure the audio peripherals.
    178            * @param  OutputDevice: OUTPUT_DEVICE_SPEAKER, OUTPUT_DEVICE_HEADPHONE,
    179            *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
    180            * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
    181            * @param  AudioFreq: Audio frequency used to play the audio stream.
    182            * @retval 0 if correct communication, else wrong communication
    183            */

   \                                 In section .text, align 2, keep-with-next
    184          uint32_t AUDIO_Init(uint16_t OutputDevice, uint8_t Vol, uint32_t AudioFreq)
    185          {    
   \                     AUDIO_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable18
   \   00000004   0xB580             PUSH     {R7,LR}
   \   00000006   0x7849             LDRB     R1,[R1, #+1]
   \   00000008   0x2965             CMP      R1,#+101
   \   0000000A   0xBFA8             IT       GE 
   \   0000000C   0x2164             MOVGE    R1,#+100
   \   0000000E   0xDA05             BGE.N    ??AUDIO_Init_0
   \   00000010   0xEBC1 0x2101      RSB      R1,R1,R1, LSL #+8
   \   00000014   0x2364             MOVS     R3,#+100
   \   00000016   0xB289             UXTH     R1,R1
   \   00000018   0xFB91 0xF1F3      SDIV     R1,R1,R3
   \                     ??AUDIO_Init_0: (+1)
   \   0000001C   0xB2C9             UXTB     R1,R1
    186          	/* Perform low layer Codec initialization */
    187          	if (Codec_Init(OutputDevice, VOLUME_CONVERT(Vol), AudioFreq)!=HAL_OK)
   \   0000001E   0x.... 0x....      BL       Codec_Init
    188          	{
    189                      //BSP_LED_Toggle(LED2);
    190          	}
    191          	
    192          	return 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBD02             POP      {R1,PC}          ;; return
    193          }
    194          
    195          /**
    196            * @brief  Deinitializes all the resources used by the codec (those initialized
    197            *         by AUDIO_Init() function). 
    198            * @param  None
    199            * @retval 0 if correct communication, else wrong communication
    200            */

   \                                 In section .text, align 2, keep-with-next
    201          uint32_t AUDIO_DeInit(void)
    202          { 
   \                     AUDIO_DeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    203            /* DeInitialize the Media layer */
    204            Audio_MAL_DeInit();
   \   00000004   0x2033             MOVS     R0,#+51
   \   00000006   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   0000000A   0x202F             MOVS     R0,#+47
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable16
   \   00000010   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   00000014   0x2033             MOVS     R0,#+51
   \   00000016   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    205            
    206            /* DeInitialize Codec */  
    207            Codec_DeInit();  
   \   0000001A   0x.... 0x....      BL       Codec_Reset
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??AUDIO_DeInit_0: (+1)
   \   0000002A   0xF44F 0x1096      MOV      R0,#+1228800
   \   0000002E   0x2302             MOVS     R3,#+2
   \   00000030   0x9000             STR      R0,[SP, #+0]
   \   00000032   0xAA01             ADD      R2,SP,#+4
   \   00000034   0x2194             MOVS     R1,#+148
   \   00000036   0x1D20             ADDS     R0,R4,#+4
   \   00000038   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   0000003C   0xB130             CBZ.N    R0,??AUDIO_DeInit_1
   \   0000003E   0x1D20             ADDS     R0,R4,#+4
   \   00000040   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000044   0x2804             CMP      R0,#+4
   \   00000046   0xD0F0             BEQ.N    ??AUDIO_DeInit_0
   \   00000048   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \                     ??AUDIO_DeInit_1: (+1)
   \   0000004C   0x200C             MOVS     R0,#+12
   \   0000004E   0x4669             MOV      R1,SP
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x9001             STR      R0,[SP, #+4]
   \   00000056   0x9003             STR      R0,[SP, #+12]
   \   00000058   0x9002             STR      R0,[SP, #+8]
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable18_1  ;; 0x40020400
   \   0000005E   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000062   0xF44F 0x4000      MOV      R0,#+32768
   \   00000066   0x4669             MOV      R1,SP
   \   00000068   0x9000             STR      R0,[SP, #+0]
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40020000
   \   0000006E   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000072   0x2080             MOVS     R0,#+128
   \   00000074   0x4669             MOV      R1,SP
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable18_2  ;; 0x40020800
   \   0000007C   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000080   0x1D20             ADDS     R0,R4,#+4
   \   00000082   0x.... 0x....      BL       HAL_I2C_MspDeInit
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0x69C1             LDR      R1,[R0, #+28]
   \   0000008E   0xF421 0x6180      BIC      R1,R1,#0x400
   \   00000092   0x61C1             STR      R1,[R0, #+28]
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x9000             STR      R0,[SP, #+0]
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable18_4  ;; 0x40023840
   \   0000009C   0x6801             LDR      R1,[R0, #+0]
   \   0000009E   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   000000A2   0x6001             STR      R1,[R0, #+0]
   \   000000A4   0x6801             LDR      R1,[R0, #+0]
   \   000000A6   0xF401 0x4100      AND      R1,R1,#0x8000
   \   000000AA   0x9100             STR      R1,[SP, #+0]
   \   000000AC   0x9900             LDR      R1,[SP, #+0]
   \   000000AE   0x6801             LDR      R1,[R0, #+0]
   \   000000B0   0xF421 0x4100      BIC      R1,R1,#0x8000
   \   000000B4   0x6001             STR      R1,[R0, #+0]
   \   000000B6   0x6801             LDR      R1,[R0, #+0]
   \   000000B8   0xF421 0x4100      BIC      R1,R1,#0x8000
   \   000000BC   0x6001             STR      R1,[R0, #+0]
    208            
    209            return 0;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0xB006             ADD      SP,SP,#+24
   \   000000C2   0xBD10             POP      {R4,PC}          ;; return
    210          }
    211          
    212          /**
    213            * @brief  Starts playing audio stream from a data buffer for a determined size. 
    214            * @param  pBuffer: Pointer to the buffer 
    215            * @param  Size: Number of audio data BYTES.
    216            * @retval 0 if correct communication, else wrong communication
    217            */

   \                                 In section .text, align 2, keep-with-next
    218          uint32_t AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
    219          {
   \                     AUDIO_Play: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460D             MOV      R5,R1
    220            /* Set the total number of data to be played (count in half-word) */
    221            AudioTotalSize = Size;
    222          
    223            /* Call the audio Codec Play function */
    224            Codec_Play();
    225            
    226            /* Update the Media layer and enable it for play */  
    227            Audio_MAL_Play((uint32_t)pBuffer, (uint16_t)(DMA_MAX(Size/4)));
   \   00000004   0x08A9             LSRS     R1,R5,#+2
   \   00000006   0xF5B1 0x3F80      CMP      R1,#+65536
   \   0000000A   0x.... 0x....      LDR.W    R6,??DataTable16
   \   0000000E   0x6435             STR      R5,[R6, #+64]
   \   00000010   0x4604             MOV      R4,R0
   \   00000012   0xBF28             IT       CS 
   \   00000014   0xF64F 0x71FF      MOVWCS   R1,#+65535
   \   00000018   0xB289             UXTH     R1,R1
   \   0000001A   0x.... 0x....      BL       Audio_MAL_Play
    228            
    229            /* Update the remaining number of data to be played */
    230            AudioRemSize = (Size/2) - DMA_MAX(AudioTotalSize)/2;//1 sop1hc: change "DMA_MAX(AudioTotalSize)" to "DMA_MAX(AudioTotalSize)/2"
   \   0000001E   0x6C30             LDR      R0,[R6, #+64]
   \   00000020   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000024   0xBF34             ITE      CC 
   \   00000026   0x0841             LSRCC    R1,R0,#+1
   \   00000028   0xF647 0x71FF      MOVWCS   R1,#+32767
   \   0000002C   0xEBC1 0x0155      RSB      R1,R1,R5, LSR #+1
    231            
    232            /* Update the current audio pointer position */
    233            CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
   \   00000030   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000034   0x6471             STR      R1,[R6, #+68]
   \   00000036   0xBF34             ITE      CC 
   \   00000038   0x0040             LSLCC    R0,R0,#+1
   \   0000003A   0x.... 0x....      LDRCS.W  R0,??DataTable18_5  ;; 0x1fffe
   \   0000003E   0x1900             ADDS     R0,R0,R4
   \   00000040   0x64B0             STR      R0,[R6, #+72]
    234            
    235            return 0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xBD70             POP      {R4-R6,PC}       ;; return
    236          }
    237          
    238          /**
    239            * @brief  This function Pauses or Resumes the audio file stream. In case
    240            *         of using DMA, the DMA Pause feature is used. In all cases the I2S 
    241            *         peripheral is disabled. 
    242            * 
    243            * @WARNING When calling AUDIO_PauseResume() function for pause, only
    244            *          this function should be called for resume (use of AUDIO_Play() 
    245            *          function for resume could lead to unexpected behavior).
    246            * 
    247            * @param  Cmd: AUDIO_PAUSE (or 0) to pause, AUDIO_RESUME (or any value different
    248            *         from 0) to resume. 
    249            * @retval 0 if correct communication, else wrong communication
    250            */

   \                                 In section .text, align 2, keep-with-next
    251          uint32_t AUDIO_PauseResume(uint32_t Cmd)
    252          {    
   \                     AUDIO_PauseResume: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0xB083             SUB      SP,SP,#+12
    253            /* Call the Audio Codec Pause/Resume function */
    254            if (Codec_PauseResume(Cmd) != 0)
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable16
   \   0000000A   0xD132             BNE.N    ??AUDIO_PauseResume_0
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000012   0x20FF             MOVS     R0,#+255
   \   00000014   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??AUDIO_PauseResume_1: (+1)
   \   00000018   0xF44F 0x1096      MOV      R0,#+1228800
   \   0000001C   0x2302             MOVS     R3,#+2
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0xAA01             ADD      R2,SP,#+4
   \   00000022   0x2194             MOVS     R1,#+148
   \   00000024   0x1D28             ADDS     R0,R5,#+4
   \   00000026   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   0000002A   0xB140             CBZ.N    R0,??AUDIO_PauseResume_2
   \   0000002C   0x1D28             ADDS     R0,R5,#+4
   \   0000002E   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000032   0x2804             CMP      R0,#+4
   \   00000034   0xD0F0             BEQ.N    ??AUDIO_PauseResume_1
   \   00000036   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \   0000003A   0x4606             MOV      R6,R0
   \   0000003C   0xE000             B.N      ??AUDIO_PauseResume_3
   \                     ??AUDIO_PauseResume_2: (+1)
   \   0000003E   0x2600             MOVS     R6,#+0
   \                     ??AUDIO_PauseResume_3: (+1)
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??AUDIO_PauseResume_4: (+1)
   \   0000004C   0xF44F 0x1096      MOV      R0,#+1228800
   \   00000050   0x2302             MOVS     R3,#+2
   \   00000052   0x9000             STR      R0,[SP, #+0]
   \   00000054   0xAA01             ADD      R2,SP,#+4
   \   00000056   0x2194             MOVS     R1,#+148
   \   00000058   0x1D28             ADDS     R0,R5,#+4
   \   0000005A   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   0000005E   0xB130             CBZ.N    R0,??AUDIO_PauseResume_5
   \   00000060   0x1D28             ADDS     R0,R5,#+4
   \   00000062   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000066   0x2804             CMP      R0,#+4
   \   00000068   0xD0F0             BEQ.N    ??AUDIO_PauseResume_4
   \   0000006A   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \                     ??AUDIO_PauseResume_5: (+1)
   \   0000006E   0x1980             ADDS     R0,R0,R6
   \   00000070   0xE04C             B.N      ??AUDIO_PauseResume_6
   \                     ??AUDIO_PauseResume_0: (+1)
   \   00000072   0x7828             LDRB     R0,[R5, #+0]
   \   00000074   0x2104             MOVS     R1,#+4
   \   00000076   0xF88D 0x1004      STRB     R1,[SP, #+4]
   \   0000007A   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??AUDIO_PauseResume_7: (+1)
   \   0000007E   0xF44F 0x1096      MOV      R0,#+1228800
   \   00000082   0x2302             MOVS     R3,#+2
   \   00000084   0x9000             STR      R0,[SP, #+0]
   \   00000086   0xAA01             ADD      R2,SP,#+4
   \   00000088   0x2194             MOVS     R1,#+148
   \   0000008A   0x1D28             ADDS     R0,R5,#+4
   \   0000008C   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000090   0xB140             CBZ.N    R0,??AUDIO_PauseResume_8
   \   00000092   0x1D28             ADDS     R0,R5,#+4
   \   00000094   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000098   0x2804             CMP      R0,#+4
   \   0000009A   0xD0F0             BEQ.N    ??AUDIO_PauseResume_7
   \   0000009C   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \   000000A0   0x4606             MOV      R6,R0
   \   000000A2   0xE000             B.N      ??AUDIO_PauseResume_9
   \                     ??AUDIO_PauseResume_8: (+1)
   \   000000A4   0x2600             MOVS     R6,#+0
   \                     ??AUDIO_PauseResume_9: (+1)
   \   000000A6   0x7828             LDRB     R0,[R5, #+0]
   \   000000A8   0x2104             MOVS     R1,#+4
   \   000000AA   0xF88D 0x1004      STRB     R1,[SP, #+4]
   \   000000AE   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??AUDIO_PauseResume_10: (+1)
   \   000000B2   0xF44F 0x1096      MOV      R0,#+1228800
   \   000000B6   0x2302             MOVS     R3,#+2
   \   000000B8   0x9000             STR      R0,[SP, #+0]
   \   000000BA   0xAA01             ADD      R2,SP,#+4
   \   000000BC   0x2194             MOVS     R1,#+148
   \   000000BE   0x1D28             ADDS     R0,R5,#+4
   \   000000C0   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   000000C4   0xB140             CBZ.N    R0,??AUDIO_PauseResume_11
   \   000000C6   0x1D28             ADDS     R0,R5,#+4
   \   000000C8   0x.... 0x....      BL       HAL_I2C_GetError
   \   000000CC   0x2804             CMP      R0,#+4
   \   000000CE   0xD0F0             BEQ.N    ??AUDIO_PauseResume_10
   \   000000D0   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \   000000D4   0x4607             MOV      R7,R0
   \   000000D6   0xE000             B.N      ??AUDIO_PauseResume_12
   \                     ??AUDIO_PauseResume_11: (+1)
   \   000000D8   0x2700             MOVS     R7,#+0
   \                     ??AUDIO_PauseResume_12: (+1)
   \   000000DA   0x2002             MOVS     R0,#+2
   \   000000DC   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   000000E0   0x209E             MOVS     R0,#+158
   \   000000E2   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??AUDIO_PauseResume_13: (+1)
   \   000000E6   0xF44F 0x1096      MOV      R0,#+1228800
   \   000000EA   0x2302             MOVS     R3,#+2
   \   000000EC   0x9000             STR      R0,[SP, #+0]
   \   000000EE   0xAA01             ADD      R2,SP,#+4
   \   000000F0   0x2194             MOVS     R1,#+148
   \   000000F2   0x1D28             ADDS     R0,R5,#+4
   \   000000F4   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   000000F8   0xB130             CBZ.N    R0,??AUDIO_PauseResume_14
   \   000000FA   0x1D28             ADDS     R0,R5,#+4
   \   000000FC   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000100   0x2804             CMP      R0,#+4
   \   00000102   0xD0F0             BEQ.N    ??AUDIO_PauseResume_13
   \   00000104   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \                     ??AUDIO_PauseResume_14: (+1)
   \   00000108   0x19B9             ADDS     R1,R7,R6
   \   0000010A   0x1840             ADDS     R0,R0,R1
   \                     ??AUDIO_PauseResume_6: (+1)
   \   0000010C   0xB110             CBZ.N    R0,??AUDIO_PauseResume_15
    255            {
    256              return 1;
   \   0000010E   0x2001             MOVS     R0,#+1
   \   00000110   0xB003             ADD      SP,SP,#+12
   \   00000112   0xBDF0             POP      {R4-R7,PC}
    257            }
    258            else
    259            {
    260              /* Call the Media layer pause/resume function */
    261              Audio_MAL_PauseResume(Cmd, 0);
   \                     ??AUDIO_PauseResume_15: (+1)
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40003c04
   \   00000118   0x2C00             CMP      R4,#+0
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable18_7  ;; 0x400260b8
   \   0000011E   0x680A             LDR      R2,[R1, #+0]
   \   00000120   0xD108             BNE.N    ??AUDIO_PauseResume_16
   \   00000122   0xF64F 0x73FD      MOVW     R3,#+65533
   \   00000126   0x401A             ANDS     R2,R3,R2
   \   00000128   0x600A             STR      R2,[R1, #+0]
   \   0000012A   0x6801             LDR      R1,[R0, #+0]
   \   0000012C   0x0849             LSRS     R1,R1,#+1
   \   0000012E   0x0049             LSLS     R1,R1,#+1
   \   00000130   0x6001             STR      R1,[R0, #+0]
   \   00000132   0xE00D             B.N      ??AUDIO_PauseResume_17
   \                     ??AUDIO_PauseResume_16: (+1)
   \   00000134   0xF042 0x0202      ORR      R2,R2,#0x2
   \   00000138   0x600A             STR      R2,[R1, #+0]
   \   0000013A   0x6802             LDR      R2,[R0, #+0]
   \   0000013C   0xF042 0x0201      ORR      R2,R2,#0x1
   \   00000140   0x6002             STR      R2,[R0, #+0]
   \   00000142   0x6988             LDR      R0,[R1, #+24]
   \   00000144   0x0540             LSLS     R0,R0,#+21
   \   00000146   0xD403             BMI.N    ??AUDIO_PauseResume_17
   \   00000148   0x6988             LDR      R0,[R1, #+24]
   \   0000014A   0xF440 0x6080      ORR      R0,R0,#0x400
   \   0000014E   0x6188             STR      R0,[R1, #+24]
    262              
    263              /* Return 0 if all operations are OK */
    264              return 0;
   \                     ??AUDIO_PauseResume_17: (+1)
   \   00000150   0x2000             MOVS     R0,#+0
   \   00000152   0xB003             ADD      SP,SP,#+12
   \   00000154   0xBDF0             POP      {R4-R7,PC}       ;; return
    265            }
    266          }
    267          
    268          /**
    269            * @brief  Stops audio playing and Power down the Audio Codec. 
    270            * @param  Option: could be one of the following parameters 
    271            *           - CODEC_PDWN_SW: for software power off (by writing registers). 
    272            *                            Then no need to reconfigure the Codec after power on.
    273            *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
    274            *                            Then need to reconfigure the Codec after power on.  
    275            * @retval 0 if correct communication, else wrong communication
    276            */

   \                                 In section .text, align 2, keep-with-next
    277          uint32_t AUDIO_Stop(uint32_t Option)
    278          {
   \                     AUDIO_Stop: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0xB083             SUB      SP,SP,#+12
    279            /* Call Audio Codec Stop function */
    280            if (Codec_Stop(Option) != 0)
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable16
   \   0000000C   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000010   0x20FF             MOVS     R0,#+255
   \   00000012   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??AUDIO_Stop_0: (+1)
   \   00000016   0xF44F 0x1096      MOV      R0,#+1228800
   \   0000001A   0x2302             MOVS     R3,#+2
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0xAA01             ADD      R2,SP,#+4
   \   00000020   0x2194             MOVS     R1,#+148
   \   00000022   0x1D20             ADDS     R0,R4,#+4
   \   00000024   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000028   0xB130             CBZ.N    R0,??AUDIO_Stop_1
   \   0000002A   0x1D20             ADDS     R0,R4,#+4
   \   0000002C   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000030   0x2804             CMP      R0,#+4
   \   00000032   0xD0F0             BEQ.N    ??AUDIO_Stop_0
   \   00000034   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \                     ??AUDIO_Stop_1: (+1)
   \   00000038   0x2D02             CMP      R5,#+2
   \   0000003A   0xD118             BNE.N    ??AUDIO_Stop_2
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000042   0x209F             MOVS     R0,#+159
   \   00000044   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??AUDIO_Stop_3: (+1)
   \   00000048   0xF44F 0x1096      MOV      R0,#+1228800
   \   0000004C   0x2302             MOVS     R3,#+2
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0xAA01             ADD      R2,SP,#+4
   \   00000052   0x2194             MOVS     R1,#+148
   \   00000054   0x1D20             ADDS     R0,R4,#+4
   \   00000056   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   0000005A   0xB3A8             CBZ.N    R0,??AUDIO_Stop_4
   \   0000005C   0x1D20             ADDS     R0,R4,#+4
   \   0000005E   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000062   0x2804             CMP      R0,#+4
   \   00000064   0xD0F0             BEQ.N    ??AUDIO_Stop_3
   \   00000066   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \   0000006A   0x4605             MOV      R5,R0
   \   0000006C   0xE028             B.N      ??AUDIO_Stop_5
   \                     ??AUDIO_Stop_2: (+1)
   \   0000006E   0x2002             MOVS     R0,#+2
   \   00000070   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000074   0x209F             MOVS     R0,#+159
   \   00000076   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??AUDIO_Stop_6: (+1)
   \   0000007A   0xF44F 0x1096      MOV      R0,#+1228800
   \   0000007E   0x2302             MOVS     R3,#+2
   \   00000080   0x9000             STR      R0,[SP, #+0]
   \   00000082   0xAA01             ADD      R2,SP,#+4
   \   00000084   0x2194             MOVS     R1,#+148
   \   00000086   0x1D20             ADDS     R0,R4,#+4
   \   00000088   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   0000008C   0xB140             CBZ.N    R0,??AUDIO_Stop_7
   \   0000008E   0x1D20             ADDS     R0,R4,#+4
   \   00000090   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000094   0x2804             CMP      R0,#+4
   \   00000096   0xD0F0             BEQ.N    ??AUDIO_Stop_6
   \   00000098   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \   0000009C   0x4605             MOV      R5,R0
   \   0000009E   0xE000             B.N      ??AUDIO_Stop_8
   \                     ??AUDIO_Stop_7: (+1)
   \   000000A0   0x2500             MOVS     R5,#+0
   \                     ??AUDIO_Stop_8: (+1)
   \   000000A2   0xF640 0x70FF      MOVW     R0,#+4095
   \   000000A6   0xE001             B.N      ??AUDIO_Stop_9
   \                     ??AUDIO_Stop_10: (+1)
   \   000000A8   0x9800             LDR      R0,[SP, #+0]
   \   000000AA   0x1E40             SUBS     R0,R0,#+1
   \                     ??AUDIO_Stop_9: (+1)
   \   000000AC   0x9000             STR      R0,[SP, #+0]
   \   000000AE   0x9800             LDR      R0,[SP, #+0]
   \   000000B0   0x2800             CMP      R0,#+0
   \   000000B2   0xD1F9             BNE.N    ??AUDIO_Stop_10
   \   000000B4   0x2200             MOVS     R2,#+0
   \   000000B6   0x2110             MOVS     R1,#+16
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable18_8  ;; 0x40020c00
   \   000000BC   0x.... 0x....      BL       HAL_GPIO_WritePin
   \                     ??AUDIO_Stop_5: (+1)
   \   000000C0   0xB115             CBZ.N    R5,??AUDIO_Stop_4
    281            {
    282              return 1;
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0xB003             ADD      SP,SP,#+12
   \   000000C6   0xBD30             POP      {R4,R5,PC}
    283            }
    284            else
    285            {
    286              /* Call Media layer Stop function */
    287              Audio_MAL_Stop();
   \                     ??AUDIO_Stop_4: (+1)
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \   000000CC   0x.... 0x....      BL       HAL_I2S_DMAStop
    288              
    289              /* Update the remaining data number */
    290              AudioRemSize = AudioTotalSize;    
   \   000000D0   0x6C20             LDR      R0,[R4, #+64]
   \   000000D2   0x6460             STR      R0,[R4, #+68]
    291              
    292              /* Return 0 when all operations are correctly done */
    293              return 0;
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0xB003             ADD      SP,SP,#+12
   \   000000D8   0xBD30             POP      {R4,R5,PC}       ;; return
    294            }
    295          }
    296          
    297          /**
    298            * @brief  Controls the current audio volume level. 
    299            * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
    300            *         Mute and 100 for Max volume level).
    301            * @retval 0 if correct communication, else wrong communication
    302            */

   \                                 In section .text, align 2, keep-with-next
    303          uint32_t AUDIO_VolumeCtl(uint8_t Vol)
   \                     AUDIO_VolumeCtl: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable18
   \   00000004   0x7840             LDRB     R0,[R0, #+1]
   \   00000006   0x2865             CMP      R0,#+101
   \   00000008   0xBFA8             IT       GE 
   \   0000000A   0x2064             MOVGE    R0,#+100
   \   0000000C   0xDA05             BGE.N    ??AUDIO_VolumeCtl_0
   \   0000000E   0xEBC0 0x2000      RSB      R0,R0,R0, LSL #+8
   \   00000012   0x2164             MOVS     R1,#+100
   \   00000014   0xB280             UXTH     R0,R0
   \   00000016   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \                     ??AUDIO_VolumeCtl_0: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x....             B.N      Codec_VolumeCtrl
    304          {
    305            /* Call the codec volume control function with converted volume value */
    306            return (Codec_VolumeCtrl(VOLUME_CONVERT(Vol)));
    307          }
    308          
    309          /**
    310            * @brief  Enables or disables the MUTE mode by software 
    311            * @param  Command: could be AUDIO_MUTE_ON to mute sound or AUDIO_MUTE_OFF to 
    312            *         unmute the codec and restore previous volume level.
    313            * @retval 0 if correct communication, else wrong communication
    314            */

   \                                 In section .text, align 2, keep-with-next
    315          uint32_t AUDIO_Mute(uint32_t Cmd)
    316          { 
    317            /* Call the Codec Mute function */
    318            return (Codec_Mute(Cmd));
   \                     AUDIO_Mute: (+1)
   \   00000000   0x....             B.N      Codec_Mute
    319          }
    320          
    321          
    322          /**
    323            * @brief  This function handles main I2S interrupt. 
    324            * @param  None
    325            * @retval 0 if correct communication, else wrong communication
    326            */

   \                                 In section .text, align 2, keep-with-next
    327          void DMA1_Stream7_IRQHandler(void)
    328          { 
    329          	/* Transfer Complete Interrupt management ***********************************/
    330          	  if(__HAL_DMA_GET_FLAG(hi2s3.hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(hi2s3.hdmatx)) != RESET)
   \                     DMA1_Stream7_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \   00000004   0xB538             PUSH     {R3-R5,LR}
   \   00000006   0x6B01             LDR      R1,[R0, #+48]
   \   00000008   0x.... 0x....      LDR.W    R3,??DataTable18_9  ;; 0x40026459
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x460A             MOV      R2,R1
   \   00000010   0x429A             CMP      R2,R3
   \   00000012   0xD318             BCC.N    ??DMA1_Stream7_IRQHandler_0
   \   00000014   0x.... 0x....      LDR.W    R5,??DataTable18_10  ;; 0x40026470
   \   00000018   0x.... 0x....      LDR.W    R4,??DataTable18_11  ;; 0x40026400
   \   0000001C   0x42AA             CMP      R2,R5
   \   0000001E   0x6864             LDR      R4,[R4, #+4]
   \   00000020   0xBF08             IT       EQ 
   \   00000022   0x2520             MOVEQ    R5,#+32
   \   00000024   0xD05F             BEQ.N    ??DMA1_Stream7_IRQHandler_1
   \   00000026   0x.... 0x....      LDR.W    R5,??DataTable18_12  ;; 0x40026488
   \   0000002A   0x42AA             CMP      R2,R5
   \   0000002C   0xBF08             IT       EQ 
   \   0000002E   0xF44F 0x6500      MOVEQ    R5,#+2048
   \   00000032   0xD058             BEQ.N    ??DMA1_Stream7_IRQHandler_1
   \   00000034   0x.... 0x....      LDR.W    R5,??DataTable18_13  ;; 0x400264a0
   \   00000038   0x42AA             CMP      R2,R5
   \   0000003A   0xBF14             ITE      NE 
   \   0000003C   0xF04F 0x6500      MOVNE    R5,#+134217728
   \   00000040   0xF44F 0x1500      MOVEQ    R5,#+2097152
   \   00000044   0xE04F             B.N      ??DMA1_Stream7_IRQHandler_1
   \                     ??DMA1_Stream7_IRQHandler_0: (+1)
   \   00000046   0x.... 0x....      LDR.W    R4,??DataTable18_14  ;; 0x400260b9
   \   0000004A   0x42A2             CMP      R2,R4
   \   0000004C   0xD318             BCC.N    ??DMA1_Stream7_IRQHandler_2
   \   0000004E   0x.... 0x....      LDR.W    R5,??DataTable18_15  ;; 0x40026410
   \   00000052   0x.... 0x....      LDR.W    R4,??DataTable18_11  ;; 0x40026400
   \   00000056   0x42AA             CMP      R2,R5
   \   00000058   0x6824             LDR      R4,[R4, #+0]
   \   0000005A   0xBF08             IT       EQ 
   \   0000005C   0x2520             MOVEQ    R5,#+32
   \   0000005E   0xD042             BEQ.N    ??DMA1_Stream7_IRQHandler_1
   \   00000060   0x.... 0x....      LDR.W    R5,??DataTable18_16  ;; 0x40026428
   \   00000064   0x42AA             CMP      R2,R5
   \   00000066   0xBF08             IT       EQ 
   \   00000068   0xF44F 0x6500      MOVEQ    R5,#+2048
   \   0000006C   0xD03B             BEQ.N    ??DMA1_Stream7_IRQHandler_1
   \   0000006E   0x.... 0x....      LDR.W    R5,??DataTable18_17  ;; 0x40026440
   \   00000072   0x42AA             CMP      R2,R5
   \   00000074   0xBF14             ITE      NE 
   \   00000076   0xF04F 0x6500      MOVNE    R5,#+134217728
   \   0000007A   0xF44F 0x1500      MOVEQ    R5,#+2097152
   \   0000007E   0xE032             B.N      ??DMA1_Stream7_IRQHandler_1
   \                     ??DMA1_Stream7_IRQHandler_2: (+1)
   \   00000080   0x.... 0x....      LDR.W    R5,??DataTable18_18  ;; 0x40026059
   \   00000084   0x.... 0x....      LDR.W    R4,??DataTable18_19  ;; 0x40026000
   \   00000088   0x42AA             CMP      R2,R5
   \   0000008A   0xD316             BCC.N    ??DMA1_Stream7_IRQHandler_3
   \   0000008C   0x.... 0x....      LDR.W    R5,??DataTable18_20  ;; 0x40026070
   \   00000090   0x6864             LDR      R4,[R4, #+4]
   \   00000092   0x42AA             CMP      R2,R5
   \   00000094   0xBF08             IT       EQ 
   \   00000096   0x2520             MOVEQ    R5,#+32
   \   00000098   0xD025             BEQ.N    ??DMA1_Stream7_IRQHandler_1
   \   0000009A   0x.... 0x....      LDR.W    R5,??DataTable18_21  ;; 0x40026088
   \   0000009E   0x42AA             CMP      R2,R5
   \   000000A0   0xBF08             IT       EQ 
   \   000000A2   0xF44F 0x6500      MOVEQ    R5,#+2048
   \   000000A6   0xD01E             BEQ.N    ??DMA1_Stream7_IRQHandler_1
   \   000000A8   0x.... 0x....      LDR.W    R5,??DataTable18_22  ;; 0x400260a0
   \   000000AC   0x42AA             CMP      R2,R5
   \   000000AE   0xBF14             ITE      NE 
   \   000000B0   0xF04F 0x6500      MOVNE    R5,#+134217728
   \   000000B4   0xF44F 0x1500      MOVEQ    R5,#+2097152
   \   000000B8   0xE015             B.N      ??DMA1_Stream7_IRQHandler_1
   \                     ??DMA1_Stream7_IRQHandler_3: (+1)
   \   000000BA   0x.... 0x....      LDR.W    R5,??DataTable18_23  ;; 0x40026010
   \   000000BE   0x6824             LDR      R4,[R4, #+0]
   \   000000C0   0x42AA             CMP      R2,R5
   \   000000C2   0xBF08             IT       EQ 
   \   000000C4   0x2520             MOVEQ    R5,#+32
   \   000000C6   0xD00E             BEQ.N    ??DMA1_Stream7_IRQHandler_1
   \   000000C8   0x.... 0x....      LDR.W    R5,??DataTable18_24  ;; 0x40026028
   \   000000CC   0x42AA             CMP      R2,R5
   \   000000CE   0xBF08             IT       EQ 
   \   000000D0   0xF44F 0x6500      MOVEQ    R5,#+2048
   \   000000D4   0xD007             BEQ.N    ??DMA1_Stream7_IRQHandler_1
   \   000000D6   0x.... 0x....      LDR.W    R5,??DataTable18_25  ;; 0x40026040
   \   000000DA   0x42AA             CMP      R2,R5
   \   000000DC   0xBF0C             ITE      EQ 
   \   000000DE   0xF44F 0x1500      MOVEQ    R5,#+2097152
   \   000000E2   0xF04F 0x6500      MOVNE    R5,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_1: (+1)
   \   000000E6   0x402C             ANDS     R4,R5,R4
   \   000000E8   0xD077             BEQ.N    ??DMA1_Stream7_IRQHandler_4
    331          	  {
    332                      if(__HAL_DMA_GET_IT_SOURCE(hi2s3.hdmatx, DMA_IT_TC) != RESET)
   \   000000EA   0x6809             LDR      R1,[R1, #+0]
   \   000000EC   0x06C9             LSLS     R1,R1,#+27
   \   000000EE   0xD574             BPL.N    ??DMA1_Stream7_IRQHandler_4
    333                      {
    334          
    335          			    //if((DmaHandle.Instance->CR & DMA_SxCR_CIRC) == 0)
    336          		        //{
    337          		        //  /* Disable the transfer complete interrupt */
    338          		        //  __HAL_DMA_DISABLE_IT(&DmaHandle, DMA_IT_TC);
    339          		        //}
    340                          //if(((hi2s3.hdmatx->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
    341                          {
    342                          
    343                              /* Clear the transfer complete flag */
    344                              __HAL_DMA_CLEAR_FLAG(hi2s3.hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(hi2s3.hdmatx));
   \   000000F0   0x429A             CMP      R2,R3
   \   000000F2   0xD317             BCC.N    ??DMA1_Stream7_IRQHandler_5
   \   000000F4   0x.... 0x....      LDR.W    R1,??DataTable18_10  ;; 0x40026470
   \   000000F8   0x428A             CMP      R2,R1
   \   000000FA   0xBF08             IT       EQ 
   \   000000FC   0x2120             MOVEQ    R1,#+32
   \   000000FE   0xD00E             BEQ.N    ??DMA1_Stream7_IRQHandler_6
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable18_12  ;; 0x40026488
   \   00000104   0x428A             CMP      R2,R1
   \   00000106   0xBF08             IT       EQ 
   \   00000108   0xF44F 0x6100      MOVEQ    R1,#+2048
   \   0000010C   0xD007             BEQ.N    ??DMA1_Stream7_IRQHandler_6
   \   0000010E   0x.... 0x....      LDR.W    R1,??DataTable18_13  ;; 0x400264a0
   \   00000112   0x428A             CMP      R2,R1
   \   00000114   0xBF0C             ITE      EQ 
   \   00000116   0xF44F 0x1100      MOVEQ    R1,#+2097152
   \   0000011A   0xF04F 0x6100      MOVNE    R1,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_6: (+1)
   \   0000011E   0x.... 0x....      LDR.W    R2,??DataTable18_11  ;; 0x40026400
   \   00000122   0xE036             B.N      ??DMA1_Stream7_IRQHandler_7
   \                     ??DMA1_Stream7_IRQHandler_5: (+1)
   \   00000124   0x.... 0x....      LDR.W    R1,??DataTable18_14  ;; 0x400260b9
   \   00000128   0x428A             CMP      R2,R1
   \   0000012A   0xD317             BCC.N    ??DMA1_Stream7_IRQHandler_8
   \   0000012C   0x.... 0x....      LDR.W    R1,??DataTable18_15  ;; 0x40026410
   \   00000130   0x428A             CMP      R2,R1
   \   00000132   0xBF08             IT       EQ 
   \   00000134   0x2120             MOVEQ    R1,#+32
   \   00000136   0xD00E             BEQ.N    ??DMA1_Stream7_IRQHandler_9
   \   00000138   0x.... 0x....      LDR.W    R1,??DataTable18_16  ;; 0x40026428
   \   0000013C   0x428A             CMP      R2,R1
   \   0000013E   0xBF08             IT       EQ 
   \   00000140   0xF44F 0x6100      MOVEQ    R1,#+2048
   \   00000144   0xD007             BEQ.N    ??DMA1_Stream7_IRQHandler_9
   \   00000146   0x.... 0x....      LDR.W    R1,??DataTable18_17  ;; 0x40026440
   \   0000014A   0x428A             CMP      R2,R1
   \   0000014C   0xBF0C             ITE      EQ 
   \   0000014E   0xF44F 0x1100      MOVEQ    R1,#+2097152
   \   00000152   0xF04F 0x6100      MOVNE    R1,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_9: (+1)
   \   00000156   0x.... 0x....      LDR.W    R2,??DataTable18_11  ;; 0x40026400
   \   0000015A   0xE033             B.N      ??DMA1_Stream7_IRQHandler_10
   \                     ??DMA1_Stream7_IRQHandler_8: (+1)
   \   0000015C   0x.... 0x....      LDR.W    R1,??DataTable18_18  ;; 0x40026059
   \   00000160   0x428A             CMP      R2,R1
   \   00000162   0xD318             BCC.N    ??DMA1_Stream7_IRQHandler_11
   \   00000164   0x.... 0x....      LDR.W    R1,??DataTable18_20  ;; 0x40026070
   \   00000168   0x428A             CMP      R2,R1
   \   0000016A   0xBF08             IT       EQ 
   \   0000016C   0x2120             MOVEQ    R1,#+32
   \   0000016E   0xD00E             BEQ.N    ??DMA1_Stream7_IRQHandler_12
   \   00000170   0x.... 0x....      LDR.W    R1,??DataTable18_21  ;; 0x40026088
   \   00000174   0x428A             CMP      R2,R1
   \   00000176   0xBF08             IT       EQ 
   \   00000178   0xF44F 0x6100      MOVEQ    R1,#+2048
   \   0000017C   0xD007             BEQ.N    ??DMA1_Stream7_IRQHandler_12
   \   0000017E   0x.... 0x....      LDR.W    R1,??DataTable18_22  ;; 0x400260a0
   \   00000182   0x428A             CMP      R2,R1
   \   00000184   0xBF0C             ITE      EQ 
   \   00000186   0xF44F 0x1100      MOVEQ    R1,#+2097152
   \   0000018A   0xF04F 0x6100      MOVNE    R1,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_12: (+1)
   \   0000018E   0x.... 0x....      LDR.W    R2,??DataTable18_19  ;; 0x40026000
   \                     ??DMA1_Stream7_IRQHandler_7: (+1)
   \   00000192   0x60D1             STR      R1,[R2, #+12]
   \   00000194   0xE017             B.N      ??DMA1_Stream7_IRQHandler_13
   \                     ??DMA1_Stream7_IRQHandler_11: (+1)
   \   00000196   0x.... 0x....      LDR.W    R1,??DataTable18_23  ;; 0x40026010
   \   0000019A   0x428A             CMP      R2,R1
   \   0000019C   0xBF08             IT       EQ 
   \   0000019E   0x2120             MOVEQ    R1,#+32
   \   000001A0   0xD00E             BEQ.N    ??DMA1_Stream7_IRQHandler_14
   \   000001A2   0x.... 0x....      LDR.W    R1,??DataTable18_24  ;; 0x40026028
   \   000001A6   0x428A             CMP      R2,R1
   \   000001A8   0xBF08             IT       EQ 
   \   000001AA   0xF44F 0x6100      MOVEQ    R1,#+2048
   \   000001AE   0xD007             BEQ.N    ??DMA1_Stream7_IRQHandler_14
   \   000001B0   0x.... 0x....      LDR.W    R1,??DataTable18_25  ;; 0x40026040
   \   000001B4   0x428A             CMP      R2,R1
   \   000001B6   0xBF0C             ITE      EQ 
   \   000001B8   0xF44F 0x1100      MOVEQ    R1,#+2097152
   \   000001BC   0xF04F 0x6100      MOVNE    R1,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_14: (+1)
   \   000001C0   0x.... 0x....      LDR.W    R2,??DataTable18_19  ;; 0x40026000
   \                     ??DMA1_Stream7_IRQHandler_10: (+1)
   \   000001C4   0x6091             STR      R1,[R2, #+8]
    345          
    346          					 /* Update error code */
    347          					 DmaHandle.ErrorCode |= HAL_DMA_ERROR_NONE;
   \                     ??DMA1_Stream7_IRQHandler_13: (+1)
   \   000001C6   0x.... 0x....      LDR.W    R4,??DataTable18_26
   \   000001CA   0x69A1             LDR      R1,[R4, #+24]
   \   000001CC   0x61A1             STR      R1,[R4, #+24]
    348          					 
    349          					 /* Change the DMA state */
    350          					 DmaHandle.State = HAL_DMA_STATE_READY_MEM0;
   \   000001CE   0x2111             MOVS     R1,#+17
   \   000001D0   0x7061             STRB     R1,[R4, #+1]
    351          
    352          					 HAL_I2S_TxCpltCallback(&hi2s3);
   \   000001D2   0x.... 0x....      BL       HAL_I2S_TxCpltCallback
    353          					 
    354                                   /* Process Unlocked */
    355                               __HAL_UNLOCK(&DmaHandle);  
   \   000001D6   0x2000             MOVS     R0,#+0
   \   000001D8   0x7020             STRB     R0,[R4, #+0]
    356                                
    357                          }
    358          
    359          
    360                      }
    361                    }
    362          		
    363                 //HAL_DMA_IRQHandler(hi2s3.hdmatx);
    364          }
   \                     ??DMA1_Stream7_IRQHandler_4: (+1)
   \   000001DA   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    365          
    366          /**
    367            * @brief  This function handles main DAC interrupt. 
    368            * @param  None
    369            * @retval None
    370            */

   \                                 In section .text, align 2, keep-with-next
    371          void DMA1_Stream0_IRQHandler(void)
    372          {
    373            //DAC is not used any more
    374            //Audio_MAL_IRQHandler();
    375          }
   \                     DMA1_Stream0_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    376          
    377          /**
    378            * @brief  I2S interrupt management
    379            * @param  None
    380            * @retval None
    381            */

   \                                 In section .text, align 2, keep-with-next
    382          void SPI3_IRQHandler(void)
    383          {
    384            /* Check on the I2S TXE flag */  
    385            if (__HAL_SPI_GET_FLAG(&hi2s3, SPI_IT_TXE) != RESET)
   \                     SPI3_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6880             LDR      R0,[R0, #+8]
    386            { 
    387             
    388              /* Send dummy data on I2S to avoid the underrun condition */
    389               //SPI_I2S_SendData(CODEC_I2S, AUDIO_GetSampleCallBack()); 
    390            }
    391          }
   \   00000008   0x4770             BX       LR               ;; return
    392          /*========================
    393                          CS43L22 Audio Codec Control Functions
    394                                                          ==============================*/
    395          /**
    396            * @brief  Initializes the audio codec and all related interfaces (control 
    397            *         interface: I2C and audio interface: I2S)
    398            * @param  OutputDevice: can be OUTPUT_DEVICE_SPEAKER, OUTPUT_DEVICE_HEADPHONE,
    399            *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
    400            * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
    401            * @param  AudioFreq: Audio frequency used to play the audio stream.
    402            * @retval 0 if correct communication, else wrong communication
    403            */

   \                                 In section .text, align 2, keep-with-next
    404          static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Vol, uint32_t AudioFreq)
    405          {
   \                     Codec_Init: (+1)
   \   00000000   0xE92D 0x4FF4      PUSH     {R2,R4-R11,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
    406            uint32_t counter = 0; 
    407            uint32_t stReadReg;
    408          
    409            /* Configure the Codec related IOs */
    410            Codec_GPIO_Init();   //only reset Pin configuration
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable18_27  ;; 0x40023830
   \   0000000E   0x468B             MOV      R11,R1
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable18
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0xF041 0x0108      ORR      R1,R1,#0x8
   \   0000001A   0x6001             STR      R1,[R0, #+0]
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xA901             ADD      R1,SP,#+4
   \   00000020   0xF000 0x0008      AND      R0,R0,#0x8
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x2010             MOVS     R0,#+16
   \   0000002A   0x9001             STR      R0,[SP, #+4]
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x9002             STR      R0,[SP, #+8]
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0x9004             STR      R0,[SP, #+16]
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x9003             STR      R0,[SP, #+12]
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable18_8  ;; 0x40020c00
   \   0000003C   0x.... 0x....      BL       HAL_GPIO_Init
    411            
    412            /* Reset the Codec Registers */
    413            Codec_Reset(); //  OFF ON the oin reset
   \   00000040   0x.... 0x....      BL       Codec_Reset
    414          
    415            /* Initialize the Control interface of the Audio Codec */
    416            Codec_CtrlInterface_Init();     // I2C1 pin configuration
   \   00000044   0x.... 0x....      BL       MX_I2C1_Init
    417          
    418            //HAL_I2C_IsDeviceReady(&hi2c1, CODEC_ADDRESS, 20, 1000);
    419            
    420            /* Keep Codec powered OFF */
    421            counter += Codec_WriteRegister(0x02, 0x01);  
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0x.... 0x....      BL       Codec_WriteRegister
   \   00000050   0x4681             MOV      R9,R0
    422          
    423            //1. Write 0x99 to register 0x00.
    424            counter += Codec_WriteRegister(0x00, 0x99); 
   \   00000052   0x2199             MOVS     R1,#+153
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      BL       Codec_WriteRegister
    425            //2. Write 0x80 to register 0x47.
    426            counter += Codec_WriteRegister(0x47, 0x08); 
   \   0000005A   0x4481             ADD      R9,R0,R9
   \   0000005C   0x2108             MOVS     R1,#+8
   \   0000005E   0x2047             MOVS     R0,#+71
   \   00000060   0x.... 0x....      BL       Codec_WriteRegister
   \   00000064   0x4481             ADD      R9,R0,R9
    427          
    428            //3. Write ?1?b to bit 7 in register 0x32. 
    429            stReadReg = Codec_ReadRegister(0x32);
   \   00000066   0x2032             MOVS     R0,#+50
   \   00000068   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \                     ??Codec_Init_0: (+1)
   \   00000072   0xF44F 0x1096      MOV      R0,#+1228800
   \   00000076   0x2301             MOVS     R3,#+1
   \   00000078   0x9000             STR      R0,[SP, #+0]
   \   0000007A   0xF10D 0x0205      ADD      R2,SP,#+5
   \   0000007E   0x2194             MOVS     R1,#+148
   \   00000080   0x1D28             ADDS     R0,R5,#+4
   \   00000082   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000086   0xB128             CBZ.N    R0,??Codec_Init_1
   \   00000088   0x1D28             ADDS     R0,R5,#+4
   \   0000008A   0x.... 0x....      BL       HAL_I2C_GetError
   \   0000008E   0x2804             CMP      R0,#+4
   \   00000090   0xD0EF             BEQ.N    ??Codec_Init_0
   \   00000092   0xE00E             B.N      ??Codec_Init_2
   \                     ??Codec_Init_1: (+1)
   \   00000094   0xF44F 0x1096      MOV      R0,#+1228800
   \   00000098   0x2301             MOVS     R3,#+1
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0xAA01             ADD      R2,SP,#+4
   \   0000009E   0x2194             MOVS     R1,#+148
   \   000000A0   0x1D28             ADDS     R0,R5,#+4
   \   000000A2   0x.... 0x....      BL       HAL_I2C_Master_Receive
   \   000000A6   0xB140             CBZ.N    R0,??Codec_Init_3
   \   000000A8   0x1D28             ADDS     R0,R5,#+4
   \   000000AA   0x.... 0x....      BL       HAL_I2C_GetError
   \   000000AE   0x2804             CMP      R0,#+4
   \   000000B0   0xD0F0             BEQ.N    ??Codec_Init_1
   \                     ??Codec_Init_2: (+1)
   \   000000B2   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \   000000B6   0x4682             MOV      R10,R0
   \   000000B8   0xE001             B.N      ??Codec_Init_4
   \                     ??Codec_Init_3: (+1)
   \   000000BA   0xF89D 0xA004      LDRB     R10,[SP, #+4]
    430            counter += Codec_WriteRegister(0x32, (uint8_t)(0x40|stReadReg)); 
   \                     ??Codec_Init_4: (+1)
   \   000000BE   0xF04A 0x0140      ORR      R1,R10,#0x40
   \   000000C2   0xB2C9             UXTB     R1,R1
   \   000000C4   0x2032             MOVS     R0,#+50
   \   000000C6   0x.... 0x....      BL       Codec_WriteRegister
   \   000000CA   0x9006             STR      R0,[SP, #+24]
    431            //4. Write ?0?b to bit 7 in register 0x32. 
    432              counter += Codec_WriteRegister(0x32, (uint8_t)(0xBF&stReadReg)); 
   \   000000CC   0xF00A 0x01BF      AND      R1,R10,#0xBF
   \   000000D0   0x2032             MOVS     R0,#+50
   \   000000D2   0x.... 0x....      BL       Codec_WriteRegister
   \   000000D6   0x9005             STR      R0,[SP, #+20]
    433            //5. Write 0x00 to register 0x00.
    434              counter += Codec_WriteRegister(0x00, 0x00); 
   \   000000D8   0x2100             MOVS     R1,#+0
   \   000000DA   0x2000             MOVS     R0,#+0
   \   000000DC   0x.... 0x....      BL       Codec_WriteRegister
   \   000000E0   0x9004             STR      R0,[SP, #+16]
    435            
    436            counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
   \   000000E2   0x21AF             MOVS     R1,#+175
   \   000000E4   0x2004             MOVS     R0,#+4
   \   000000E6   0x.... 0x....      BL       Codec_WriteRegister
   \   000000EA   0x9003             STR      R0,[SP, #+12]
    437            OutputDev = 0xAF;
   \   000000EC   0x20AF             MOVS     R0,#+175
   \   000000EE   0x7028             STRB     R0,[R5, #+0]
    438            
    439          
    440            
    441            /* Clock configuration: Auto detection */  
    442            counter += Codec_WriteRegister(0x05, 0x81);//0x81
   \   000000F0   0x2181             MOVS     R1,#+129
   \   000000F2   0x2005             MOVS     R0,#+5
   \   000000F4   0x.... 0x....      BL       Codec_WriteRegister
   \   000000F8   0x9002             STR      R0,[SP, #+8]
    443            //AUTO SPEED1 SPEED0 32k_GROUP VIDEOCLK RATIO1 RATIO0 MCLKDIV2
    444            //
    445            /* Set the Slave Mode and the audio Standard */  
    446            counter += Codec_WriteRegister(0x06, 0x0B);//CODEC_STANDARD 0x0B
   \   000000FA   0x210B             MOVS     R1,#+11
   \   000000FC   0x2006             MOVS     R0,#+6
   \   000000FE   0x.... 0x....      BL       Codec_WriteRegister
   \   00000102   0x4682             MOV      R10,R0
    447            //M/S INV_SCLK Reserved DSP DACDIF1 DACDIF0 AWL1 AWL0  
    448            //DACDIF[1:0]: 10 -> Right Justified
    449            //AWL[1:0]: 11      -> 16-bit data
    450                
    451            /* Set the Master volume */
    452            Codec_VolumeCtrl(Vol);
   \   00000104   0x4658             MOV      R0,R11
   \   00000106   0x.... 0x....      BL       Codec_VolumeCtrl
    453            
    454            /* Power on the Codec */
    455            counter += Codec_WriteRegister(0x02, 0x9E);  
   \   0000010A   0x219E             MOVS     R1,#+158
   \   0000010C   0x2002             MOVS     R0,#+2
   \   0000010E   0x.... 0x....      BL       Codec_WriteRegister
   \   00000112   0x4683             MOV      R11,R0
    456            
    457            /* Additional configuration for the CODEC. These configurations are done to reduce
    458                the time needed for the Codec to power off. If these configurations are removed, 
    459                then a long delay should be added between powering off the Codec and switching 
    460                off the I2S peripheral MCLK clock (which is the operating clock for Codec).
    461                If this delay is not inserted, then the codec will not shut down properly and
    462                it results in high noise after shut down. */
    463            
    464            /* Disable the analog soft ramp */
    465            counter += Codec_WriteRegister(0x0A, 0x00);
   \   00000114   0x2100             MOVS     R1,#+0
   \   00000116   0x200A             MOVS     R0,#+10
   \   00000118   0x.... 0x....      BL       Codec_WriteRegister
   \   0000011C   0x4680             MOV      R8,R0
    466          
    467          	/* Disable the digital soft ramp */
    468          	//counter += Codec_WriteRegister(0x0E, 0x04);
    469          
    470            /* Disable the limiter attack level */
    471            counter += Codec_WriteRegister(0x27, 0x00);
   \   0000011E   0x2027             MOVS     R0,#+39
   \   00000120   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??Codec_Init_5: (+1)
   \   0000012A   0xF44F 0x1096      MOV      R0,#+1228800
   \   0000012E   0x2302             MOVS     R3,#+2
   \   00000130   0x9000             STR      R0,[SP, #+0]
   \   00000132   0xAA01             ADD      R2,SP,#+4
   \   00000134   0x2194             MOVS     R1,#+148
   \   00000136   0x1D28             ADDS     R0,R5,#+4
   \   00000138   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   0000013C   0xB140             CBZ.N    R0,??Codec_Init_6
   \   0000013E   0x1D28             ADDS     R0,R5,#+4
   \   00000140   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000144   0x2804             CMP      R0,#+4
   \   00000146   0xD0F0             BEQ.N    ??Codec_Init_5
   \   00000148   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \   0000014C   0x4604             MOV      R4,R0
   \   0000014E   0xE000             B.N      ??Codec_Init_7
   \                     ??Codec_Init_6: (+1)
   \   00000150   0x2400             MOVS     R4,#+0
    472            /* Adjust Bass and Treble levels */
    473            counter += Codec_WriteRegister(0x1F, 0x0F);
   \                     ??Codec_Init_7: (+1)
   \   00000152   0x201F             MOVS     R0,#+31
   \   00000154   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000158   0x200F             MOVS     R0,#+15
   \   0000015A   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??Codec_Init_8: (+1)
   \   0000015E   0xF44F 0x1096      MOV      R0,#+1228800
   \   00000162   0x2302             MOVS     R3,#+2
   \   00000164   0x9000             STR      R0,[SP, #+0]
   \   00000166   0xAA01             ADD      R2,SP,#+4
   \   00000168   0x2194             MOVS     R1,#+148
   \   0000016A   0x1D28             ADDS     R0,R5,#+4
   \   0000016C   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000170   0xB140             CBZ.N    R0,??Codec_Init_9
   \   00000172   0x1D28             ADDS     R0,R5,#+4
   \   00000174   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000178   0x2804             CMP      R0,#+4
   \   0000017A   0xD0F0             BEQ.N    ??Codec_Init_8
   \   0000017C   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \   00000180   0x4606             MOV      R6,R0
   \   00000182   0xE000             B.N      ??Codec_Init_10
   \                     ??Codec_Init_9: (+1)
   \   00000184   0x2600             MOVS     R6,#+0
    474            /* Adjust PCM volume level */
    475            counter += Codec_WriteRegister(0x1A, 0x0A);
   \                     ??Codec_Init_10: (+1)
   \   00000186   0x201A             MOVS     R0,#+26
   \   00000188   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   0000018C   0x200A             MOVS     R0,#+10
   \   0000018E   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??Codec_Init_11: (+1)
   \   00000192   0xF44F 0x1096      MOV      R0,#+1228800
   \   00000196   0x2302             MOVS     R3,#+2
   \   00000198   0x9000             STR      R0,[SP, #+0]
   \   0000019A   0xAA01             ADD      R2,SP,#+4
   \   0000019C   0x2194             MOVS     R1,#+148
   \   0000019E   0x1D28             ADDS     R0,R5,#+4
   \   000001A0   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   000001A4   0xB140             CBZ.N    R0,??Codec_Init_12
   \   000001A6   0x1D28             ADDS     R0,R5,#+4
   \   000001A8   0x.... 0x....      BL       HAL_I2C_GetError
   \   000001AC   0x2804             CMP      R0,#+4
   \   000001AE   0xD0F0             BEQ.N    ??Codec_Init_11
   \   000001B0   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \   000001B4   0x4607             MOV      R7,R0
   \   000001B6   0xE000             B.N      ??Codec_Init_13
   \                     ??Codec_Init_12: (+1)
   \   000001B8   0x2700             MOVS     R7,#+0
    476            counter += Codec_WriteRegister(0x1B, 0x0A);
   \                     ??Codec_Init_13: (+1)
   \   000001BA   0x201B             MOVS     R0,#+27
   \   000001BC   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   000001C0   0x200A             MOVS     R0,#+10
   \   000001C2   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??Codec_Init_14: (+1)
   \   000001C6   0xF44F 0x1096      MOV      R0,#+1228800
   \   000001CA   0x2302             MOVS     R3,#+2
   \   000001CC   0x9000             STR      R0,[SP, #+0]
   \   000001CE   0xAA01             ADD      R2,SP,#+4
   \   000001D0   0x2194             MOVS     R1,#+148
   \   000001D2   0x1D28             ADDS     R0,R5,#+4
   \   000001D4   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   000001D8   0xB140             CBZ.N    R0,??Codec_Init_15
   \   000001DA   0x1D28             ADDS     R0,R5,#+4
   \   000001DC   0x.... 0x....      BL       HAL_I2C_GetError
   \   000001E0   0x2804             CMP      R0,#+4
   \   000001E2   0xD0F0             BEQ.N    ??Codec_Init_14
   \   000001E4   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \   000001E8   0x4605             MOV      R5,R0
   \   000001EA   0xE000             B.N      ??Codec_Init_16
   \                     ??Codec_Init_15: (+1)
   \   000001EC   0x2500             MOVS     R5,#+0
    477          
    478          #if 0
    479          	  for (uint8_t i=0x00;i<=0x34;i++)
    480          	  {
    481          		   uint8_t test;
    482          			test = Codec_ReadRegister(i);
    483          			sprintf((char *)pUARTBuf,"REG[%x]:VAL[%x]\r\n",i,test);
    484          			while(HAL_UART_Transmit(&huart3,pUARTBuf,30,1000));
    485          	  }
    486          #endif
    487          
    488            //codec_sendBeep();
    489            /* Configure the I2S peripheral */
    490            Codec_AudioInterface_Init(AudioFreq);  //I2S3 is using
   \                     ??Codec_Init_16: (+1)
   \   000001EE   0x9808             LDR      R0,[SP, #+32]
   \   000001F0   0x.... 0x....      BL       I2S3_Init
    491          
    492            /* Return communication control value */
    493            return counter;  
   \   000001F4   0x9806             LDR      R0,[SP, #+24]
   \   000001F6   0x9905             LDR      R1,[SP, #+20]
   \   000001F8   0x4448             ADD      R0,R0,R9
   \   000001FA   0x1808             ADDS     R0,R1,R0
   \   000001FC   0x9904             LDR      R1,[SP, #+16]
   \   000001FE   0x1808             ADDS     R0,R1,R0
   \   00000200   0x9903             LDR      R1,[SP, #+12]
   \   00000202   0x1808             ADDS     R0,R1,R0
   \   00000204   0x9902             LDR      R1,[SP, #+8]
   \   00000206   0xB009             ADD      SP,SP,#+36
   \   00000208   0x1808             ADDS     R0,R1,R0
   \   0000020A   0x4450             ADD      R0,R10,R0
   \   0000020C   0x4458             ADD      R0,R11,R0
   \   0000020E   0x4440             ADD      R0,R8,R0
   \   00000210   0x1820             ADDS     R0,R4,R0
   \   00000212   0x1830             ADDS     R0,R6,R0
   \   00000214   0x1838             ADDS     R0,R7,R0
   \   00000216   0x1828             ADDS     R0,R5,R0
   \   00000218   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    494          }
    495          
    496          

   \                                 In section .text, align 2, keep-with-next
    497          void codec_sendBeep(void)
    498          {
   \                     codec_sendBeep: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    499          	Codec_WriteRegister(0x1E, 0x00);
   \   00000002   0x201E             MOVS     R0,#+30
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable18
   \   00000008   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??codec_sendBeep_0: (+1)
   \   00000012   0xF44F 0x1096      MOV      R0,#+1228800
   \   00000016   0x2302             MOVS     R3,#+2
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0xAA01             ADD      R2,SP,#+4
   \   0000001C   0x2194             MOVS     R1,#+148
   \   0000001E   0x1D20             ADDS     R0,R4,#+4
   \   00000020   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000024   0xB130             CBZ.N    R0,??codec_sendBeep_1
   \   00000026   0x1D20             ADDS     R0,R4,#+4
   \   00000028   0x.... 0x....      BL       HAL_I2C_GetError
   \   0000002C   0x2804             CMP      R0,#+4
   \   0000002E   0xD0F0             BEQ.N    ??codec_sendBeep_0
   \   00000030   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
    500          	Codec_WriteRegister(0x1E, 0x40);
   \                     ??codec_sendBeep_1: (+1)
   \   00000034   0x201E             MOVS     R0,#+30
   \   00000036   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   0000003A   0x2040             MOVS     R0,#+64
   \   0000003C   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??codec_sendBeep_2: (+1)
   \   00000040   0xF44F 0x1096      MOV      R0,#+1228800
   \   00000044   0x2302             MOVS     R3,#+2
   \   00000046   0x9000             STR      R0,[SP, #+0]
   \   00000048   0xAA01             ADD      R2,SP,#+4
   \   0000004A   0x2194             MOVS     R1,#+148
   \   0000004C   0x1D20             ADDS     R0,R4,#+4
   \   0000004E   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000052   0xB130             CBZ.N    R0,??codec_sendBeep_3
   \   00000054   0x1D20             ADDS     R0,R4,#+4
   \   00000056   0x.... 0x....      BL       HAL_I2C_GetError
   \   0000005A   0x2804             CMP      R0,#+4
   \   0000005C   0xD0F0             BEQ.N    ??codec_sendBeep_2
   \   0000005E   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
    501          }
   \                     ??codec_sendBeep_3: (+1)
   \   00000062   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    502          
    503          /**
    504            * @brief  Restore the audio codec state to default state and free all used 
    505            *         resources.
    506            * @param  None
    507            * @retval 0 if correct communication, else wrong communication
    508            */
    509          static uint32_t Codec_DeInit(void)
    510          {
    511            uint32_t counter = 0; 
    512          
    513            /* Reset the Codec Registers */
    514            Codec_Reset();  
    515            
    516            /* Keep Codec powered OFF */
    517            counter += Codec_WriteRegister(0x02, 0x01);    
    518            
    519            /* Deinitialize all use GPIOs */
    520            Codec_GPIO_DeInit();
    521          
    522            /* Disable the Codec control interface */
    523            Codec_CtrlInterface_DeInit();
    524            
    525            /* Deinitialize the Codec audio interface (I2S) */
    526            Codec_AudioInterface_DeInit(); 
    527            
    528            /* Return communication control value */
    529            return counter;  
    530          }
    531          
    532          /**
    533            * @brief  Start the audio Codec play feature.
    534            * @note   For this codec no Play options are required.
    535            * @param  None
    536            * @retval 0 if correct communication, else wrong communication
    537            */
    538          static uint32_t Codec_Play(void)
    539          {
    540            /* 
    541               No actions required on Codec level for play command
    542               */  
    543          
    544            /* Return communication control value */
    545            return 0;  
    546          }
    547          
    548          /**
    549            * @brief  Pauses and resumes playing on the audio codec.
    550            * @param  Cmd: AUDIO_PAUSE (or 0) to pause, AUDIO_RESUME (or any value different
    551            *         from 0) to resume. 
    552            * @retval 0 if correct communication, else wrong communication
    553            */
    554          static uint32_t Codec_PauseResume(uint32_t Cmd)
    555          {
    556            uint32_t counter = 0;   
    557            
    558            /* Pause the audio file playing */
    559            if (Cmd == AUDIO_PAUSE)
    560            { 
    561              /* Mute the output first */
    562              counter += Codec_Mute(AUDIO_MUTE_ON);
    563          
    564              /* Put the Codec in Power save mode */    
    565              counter += Codec_WriteRegister(0x02, 0x01);    
    566            }
    567            else /* AUDIO_RESUME */
    568            {
    569              /* Unmute the output first */
    570              counter += Codec_Mute(AUDIO_MUTE_OFF);
    571              
    572              counter += Codec_WriteRegister(0x04, OutputDev);
    573              
    574              /* Exit the Power save mode */
    575              counter += Codec_WriteRegister(0x02, 0x9E); 
    576            }
    577          
    578            return counter;
    579          }
    580          
    581          /**
    582            * @brief  Stops audio Codec playing. It powers down the codec.
    583            * @param  CodecPdwnMode: selects the  power down mode.
    584            *          - CODEC_PDWN_SW: only mutes the audio codec. When resuming from this 
    585            *                           mode the codec keeps the previous initialization
    586            *                           (no need to re-Initialize the codec registers).
    587            *          - CODEC_PDWN_HW: Physically power down the codec. When resuming from this
    588            *                           mode, the codec is set to default configuration 
    589            *                           (user should re-Initialize the codec in order to 
    590            *                            play again the audio stream).
    591            * @retval 0 if correct communication, else wrong communication
    592            */
    593          static uint32_t Codec_Stop(uint32_t CodecPdwnMode)
    594          {
    595            uint32_t counter = 0;   
    596          
    597            /* Mute the output first */
    598            Codec_Mute(AUDIO_MUTE_ON);
    599            
    600            if (CodecPdwnMode == CODEC_PDWN_SW)
    601            {    
    602              /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
    603              counter += Codec_WriteRegister(0x02, 0x9F);
    604            }
    605            else /* CODEC_PDWN_HW */
    606            { 
    607              /* Power down the DAC components */
    608              counter += Codec_WriteRegister(0x02, 0x9F);
    609              
    610              /* Wait at least 100us */
    611              Delay(0xFFF);
    612              
    613              /* Reset The pin */
    614              HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
    615            }
    616            
    617            return counter;    
    618          }
    619          
    620          /**
    621            * @brief  Sets higher or lower the codec volume level.
    622            * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
    623            *         description for more details).
    624            * @retval 0 if correct communication, else wrong communication
    625            */

   \                                 In section .text, align 2, keep-with-next
    626          static uint32_t Codec_VolumeCtrl(uint8_t Vol)
    627          {
   \                     Codec_VolumeCtrl: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    628            uint32_t counter = 0;
    629            
    630            if (Volume > 0xE6)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable18
   \   00000006   0xB083             SUB      SP,SP,#+12
   \   00000008   0x7860             LDRB     R0,[R4, #+1]
   \   0000000A   0xF100 0x0119      ADD      R1,R0,#+25
    631            {
    632              /* Set the Master volume */
    633              counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
    634              counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
    635            }
    636            else
    637            {
    638              /* Set the Master volume */
    639              counter += Codec_WriteRegister(0x20, Volume + 0x19); 
   \   0000000E   0x2020             MOVS     R0,#+32
   \   00000010   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000014   0xF88D 0x1005      STRB     R1,[SP, #+5]
   \                     ??Codec_VolumeCtrl_0: (+1)
   \   00000018   0xF44F 0x1096      MOV      R0,#+1228800
   \   0000001C   0x2302             MOVS     R3,#+2
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0xAA01             ADD      R2,SP,#+4
   \   00000022   0x2194             MOVS     R1,#+148
   \   00000024   0x1D20             ADDS     R0,R4,#+4
   \   00000026   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   0000002A   0xB140             CBZ.N    R0,??Codec_VolumeCtrl_1
   \   0000002C   0x1D20             ADDS     R0,R4,#+4
   \   0000002E   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000032   0x2804             CMP      R0,#+4
   \   00000034   0xD0F0             BEQ.N    ??Codec_VolumeCtrl_0
   \   00000036   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \   0000003A   0x4605             MOV      R5,R0
   \   0000003C   0xE000             B.N      ??Codec_VolumeCtrl_2
   \                     ??Codec_VolumeCtrl_1: (+1)
   \   0000003E   0x2500             MOVS     R5,#+0
    640              counter += Codec_WriteRegister(0x21, Volume + 0x19); 
   \                     ??Codec_VolumeCtrl_2: (+1)
   \   00000040   0x2021             MOVS     R0,#+33
   \   00000042   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000046   0x7860             LDRB     R0,[R4, #+1]
   \   00000048   0x3019             ADDS     R0,R0,#+25
   \   0000004A   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \                     ??Codec_VolumeCtrl_3: (+1)
   \   0000004E   0xF44F 0x1096      MOV      R0,#+1228800
   \   00000052   0x2302             MOVS     R3,#+2
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0xAA01             ADD      R2,SP,#+4
   \   00000058   0x2194             MOVS     R1,#+148
   \   0000005A   0x1D20             ADDS     R0,R4,#+4
   \   0000005C   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000060   0xB130             CBZ.N    R0,??Codec_VolumeCtrl_4
   \   00000062   0x1D20             ADDS     R0,R4,#+4
   \   00000064   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000068   0x2804             CMP      R0,#+4
   \   0000006A   0xD0F0             BEQ.N    ??Codec_VolumeCtrl_3
   \   0000006C   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
    641            }
   \                     ??Codec_VolumeCtrl_4: (+1)
   \   00000070   0x1940             ADDS     R0,R0,R5
    642          
    643            return counter;  
   \   00000072   0xB003             ADD      SP,SP,#+12
   \   00000074   0xBD30             POP      {R4,R5,PC}       ;; return
    644          }
    645          
    646          /**
    647            * @brief  Enables or disables the mute feature on the audio codec.
    648            * @param  Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
    649            *             mute mode.
    650            * @retval 0 if correct communication, else wrong communication
    651            */

   \                                 In section .text, align 2, keep-with-next
    652          static uint32_t Codec_Mute(uint32_t Cmd)
    653          {
    654            uint32_t counter = 0;  
    655            
    656            /* Set the Mute mode */
    657            if (Cmd == AUDIO_MUTE_ON)
   \                     Codec_Mute: (+1)
   \   00000000   0x2801             CMP      R0,#+1
   \   00000002   0xB51C             PUSH     {R2-R4,LR}
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable18
   \   00000008   0xD104             BNE.N    ??Codec_Mute_0
    658            {
    659              counter += Codec_WriteRegister(0x04, 0xFF);
   \   0000000A   0x2004             MOVS     R0,#+4
   \   0000000C   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000010   0x20FF             MOVS     R0,#+255
   \   00000012   0xE003             B.N      ??Codec_Mute_1
    660            }
    661            else /* AUDIO_MUTE_OFF Disable the Mute */
    662            {
    663              counter += Codec_WriteRegister(0x04, OutputDev);
   \                     ??Codec_Mute_0: (+1)
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0x2104             MOVS     R1,#+4
   \   00000018   0xF88D 0x1004      STRB     R1,[SP, #+4]
   \                     ??Codec_Mute_1: (+1)
   \   0000001C   0xF88D 0x0005      STRB     R0,[SP, #+5]
    664            }
   \   00000020   0x....             B.N      ?Subroutine0
    665            
    666            return counter; 
    667          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xF44F 0x1096      MOV      R0,#+1228800
   \   00000004   0x2302             MOVS     R3,#+2
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0xAA01             ADD      R2,SP,#+4
   \   0000000A   0x2194             MOVS     R1,#+148
   \   0000000C   0x1D20             ADDS     R0,R4,#+4
   \   0000000E   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000012   0xB130             CBZ.N    R0,??Subroutine0_0
   \   00000014   0x1D20             ADDS     R0,R4,#+4
   \   00000016   0x.... 0x....      BL       HAL_I2C_GetError
   \   0000001A   0x2804             CMP      R0,#+4
   \   0000001C   0xD0F0             BEQ.N    ?Subroutine0
   \   0000001E   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \                     ??Subroutine0_0: (+1)
   \   00000022   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    668          
    669          /**
    670            * @brief  Resets the audio codec. It restores the default configuration of the 
    671            *         codec (this function shall be called before initializing the codec).
    672            * @note   This function calls an external driver function: The IO Expander driver.
    673            * @param  None
    674            * @retval None
    675            */

   \                                 In section .text, align 2, keep-with-next
    676          static void Codec_Reset(void)
    677          {
   \                     Codec_Reset: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    678            /* Power Down the codec */
    679            HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable18_8  ;; 0x40020c00
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2110             MOVS     R1,#+16
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       HAL_GPIO_WritePin
    680          
    681            /* wait for a delay to insure registers erasing */
    682            Delay(CODEC_RESET_DELAY);  //904ms CODEC_RESET_DELAY
   \   00000012   0xF644 0x70FF      MOVW     R0,#+20479
   \   00000016   0xE001             B.N      ??Codec_Reset_0
   \                     ??Codec_Reset_1: (+1)
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0x1E40             SUBS     R0,R0,#+1
   \                     ??Codec_Reset_0: (+1)
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD1F9             BNE.N    ??Codec_Reset_1
    683            
    684            /* Power on the codec */
    685            HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN,GPIO_PIN_SET);
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0xB002             ADD      SP,SP,#+8
   \   00000028   0x2201             MOVS     R2,#+1
   \   0000002A   0x2110             MOVS     R1,#+16
   \   0000002C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000030   0x.... 0x....      B.W      HAL_GPIO_WritePin
    686          }
    687          
    688          /**
    689            * @brief  Writes a Byte to a given register into the audio codec through the 
    690                      control interface (I2C)
    691            * @param  RegisterAddr: The address (location) of the register to be written.
    692            * @param  RegisterValue: the Byte value to be written into destination register.
    693            * @retval 0 if correct communication, else wrong communication
    694            */

   \                                 In section .text, align 2, keep-with-next
    695          static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
    696          {
   \                     Codec_WriteRegister: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    697            uint32_t result = 0;
    698            uint8_t bufI2C[2];
    699            bufI2C[0] = RegisterAddr;
   \   00000002   0xF88D 0x0004      STRB     R0,[SP, #+4]
    700            bufI2C[1] = RegisterValue;
   \   00000006   0x....             LDR.N    R4,??DataTable16
   \   00000008   0xF88D 0x1005      STRB     R1,[SP, #+5]
   \   0000000C                      REQUIRE ?Subroutine0
   \   0000000C                      ;; // Fall through to label ?Subroutine0
    701            /* Transmit the first address for write operation */
    702            while(HAL_I2C_Master_Transmit(&hi2c1, CODEC_ADDRESS, &bufI2C[0],2,CODEC_LONG_TIMEOUT)!= HAL_OK)//CODEC_LONG_TIMEOUT
    703            //while(HAL_I2C_Mem_Write(&hi2c1,CODEC_ADDRESS,RegisterAddr,1,&RegisterValue,1,10000)!= HAL_OK)
    704            {
    705          	/* Error_Handler() function is called when Timeout error occurs.
    706          	When Acknowledge failure occurs (Slave don't acknowledge its address)
    707          	Master restarts communication */
    708              if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
    709              {
    710                  return Codec_TIMEOUT_UserCallback();;
    711              }
    712          
    713            }
    714            
    715             
    716          #ifdef VERIFY_WRITTENDATA
    717            /* Verify that the data has been correctly written */ 
    718            uint8_t test;
    719            test = Codec_ReadRegister(RegisterAddr);
    720            result = (test == RegisterValue)? 0:1;
    721            #if DEBUG
    722                  sprintf((char *)pUARTBuf,"REG[%x]:VAL[%x]  \r\n",RegisterAddr,test);
    723                  while(HAL_UART_Transmit(&huart3,pUARTBuf,30,1000));
    724            #endif
    725          #endif /* VERIFY_WRITTENDATA */
    726          
    727            /* Return the verifying value: 0 (Passed) or 1 (Failed) */
    728          #if 0
    729            if(__HAL_I2C_GET_FLAG(&hi2c1, I2C_FLAG_BUSY) == SET)
    730            {
    731                return HAL_BUSY;
    732            }
    733            /* Start the config sequence */
    734            I2C_GENERATE_START(I2C_ADDRESSINGMODE_7BIT,CODEC_I2C);
    735            hi2c1.Instance->CR2 = I2C_GENERATE_START(hi2c1.Init.AddressingMode,DevAddress);
    736              /* Test on EV5 and clear it */
    737            CODECTimeout = CODEC_FLAG_TIMEOUT;
    738            while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
    739            {
    740              if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
    741            }
    742            
    743            
    744          #endif
    745            return result;  
    746          }
    747          
    748          /**
    749            * @brief  Reads and returns the value of an audio codec register through the
    750            *         control interface (I2C).
    751            * @param  RegisterAddr: Address of the register to be read.
    752            * @retval Value of the register to be read or dummy value if the communication
    753            *         fails.
    754            */
    755          static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
    756          {
    757            uint8_t result = 0;
    758          
    759            /* Transmit the register address to be read */
    760            /* Transmit the first address for write operation */
    761            while(HAL_I2C_Master_Transmit(&hi2c1, CODEC_ADDRESS, &RegisterAddr,1,CODEC_LONG_TIMEOUT)!= HAL_OK)
    762            {
    763          	/* Error_Handler() function is called when Timeout error occurs.
    764          	When Acknowledge failure occurs (Slave don't acknowledge its address)
    765          	Master restarts communication */
    766              if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
    767              {
    768                return Codec_TIMEOUT_UserCallback();
    769              }  
    770            }
    771            
    772            /*!< Read the byte received from the Codec */
    773            //result = I2C_ReceiveData(CODEC_I2C);
    774            while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)CODEC_ADDRESS, &result, 1, CODEC_LONG_TIMEOUT) != HAL_OK)
    775            {
    776              /* Error_Handler() function is called when Timeout error occurs.
    777                 When Acknowledge failure occurs (Slave don't acknowledge it's address)
    778                 Master restarts communication */
    779              if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
    780              {
    781                return Codec_TIMEOUT_UserCallback();
    782              }
    783            }
    784            
    785            /* Return the byte read from Codec */
    786            return (uint32_t)result;
    787          }
    788          
    789          /**
    790            * @brief  Initializes the Audio Codec control interface (I2C).
    791            * @param  None
    792            * @retval None
    793            */
    794          static void Codec_CtrlInterface_Init(void)
    795          {
    796              MX_I2C1_Init();   
    797          }
    798          
    799          /**
    800            * @brief  Restore the Audio Codec control interface to its default state.
    801            *         This function doesn't de-initialize the I2C because the I2C peripheral
    802            *         may be used by other modules.
    803            * @param  None
    804            * @retval None
    805            */
    806          static void Codec_CtrlInterface_DeInit(void)
    807          {
    808            /* Disable the I2C peripheral */ /* This step is not done here because 
    809               the I2C interface can be used by other modules */
    810            /* I2C_DeInit(CODEC_I2C); */
    811            HAL_I2C_MspDeInit(&hi2c1);
    812          }
    813          
    814          /**
    815            * @brief  Initializes the Audio Codec audio interface (I2S)
    816            * @note   This function assumes that the I2S input clock (through PLL_R in 
    817            *         Devices RevA/Z and through dedicated PLLI2S_R in Devices RevB/Y)
    818            *         is already configured and ready to be used.    
    819            * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
    820            * @retval None
    821            */
    822          static void Codec_AudioInterface_Init(uint32_t AudioFreq)
    823          {
    824            I2S3_Init(AudioFreq); 
    825            //SPI3_Init(AudioFreq); 
    826          }
    827          
    828          /**
    829            * @brief  Restores the Audio Codec audio interface to its default state.
    830            * @param  None
    831            * @retval None
    832            */
    833          static void Codec_AudioInterface_DeInit(void)
    834          {
    835            /* Disable the CODEC_I2S peripheral (in case it hasn't already been disabled) */
    836            //I2S_Cmd(CODEC_I2S, DISABLE);
    837            __HAL_I2S_DISABLE(&hi2s3);
    838            /* Deinitialize the CODEC_I2S peripheral */
    839            SPI_I2S_DeInit(CODEC_I2S);
    840            
    841            /* Disable the CODEC_I2S peripheral clock */
    842            //RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, DISABLE); 
    843            __HAL_RCC_SPI3_CLK_DISABLE();
    844          }
    845          
    846          /**
    847            * @brief Initializes IOs used by the Audio Codec (on the control and audio 
    848            *        interfaces).
    849            * @param  None
    850            * @retval None
    851            */
    852          static void Codec_GPIO_Init(void)
    853          {
    854            GPIO_InitTypeDef GPIO_InitStructure;
    855            
    856            __GPIOD_CLK_ENABLE();
    857            
    858            /* Audio reset pin configuration -------------------------------------------------*/
    859            GPIO_InitStructure.Pin = AUDIO_RESET_PIN; 
    860            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;//GPIO_Mode_OUT;
    861            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;//GPIO_Speed_50MHz;
    862            GPIO_InitStructure.Pull  = GPIO_NOPULL ;//GPIO_PuPd_NOPULL;
    863             
    864            HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
    865            
    866          }
    867          
    868          /**
    869            * @brief  Restores the IOs used by the Audio Codec interface to their default state.
    870            * @param  None
    871            * @retval None
    872            */
    873          static void Codec_GPIO_DeInit(void)
    874          {
    875            GPIO_InitTypeDef GPIO_InitStructure;
    876            
    877            GPIO_InitStructure.Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
    878            GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
    879            GPIO_InitStructure.Speed = GPIO_SPEED_LOW;
    880            GPIO_InitStructure.Pull = GPIO_NOPULL;
    881            HAL_GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
    882                
    883            GPIO_InitStructure.Pin = CODEC_I2S_WS_PIN ;
    884            HAL_GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
    885            
    886          #ifdef CODEC_MCLK_ENABLED
    887            GPIO_InitStructure.Pin = CODEC_I2S_MCK_PIN; 
    888            HAL_GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure); 
    889          #endif /* CODEC_MCLK_ENABLED */    
    890          }
    891          
    892          /**
    893            * @brief  Inserts a delay time (not accurate timing).
    894            * @param  nCount: specifies the delay time length.
    895            * @retval None
    896            */
    897          static void Delay( __IO uint32_t nCount)
    898          {
    899            for (; nCount != 0; nCount--);
    900          }
    901          
    902          #ifdef USE_DEFAULT_TIMEOUT_CALLBACK
    903          /**
    904            * @brief  Basic management of the timeout situation.
    905            * @param  None
    906            * @retval None
    907            */
    908          uint32_t Codec_TIMEOUT_UserCallback(void)
    909          {
    910            /* Block communication and all processes */
    911            
    912          }
    913          #endif /* USE_DEFAULT_TIMEOUT_CALLBACK */
    914          /*========================
    915                          Audio MAL Interface Control Functions
    916                                                          ==============================*/
    917          
    918          
    919          /**
    920            * @brief  Restore default state of the used Media.
    921            * @param  None
    922            * @retval None
    923            */
    924          static void Audio_MAL_DeInit(void)  
    925          {   
    926          #if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    927            //NVIC_InitTypeDef NVIC_InitStructure;  
    928            
    929            /* Deinitialize the NVIC interrupt for the I2S DMA Stream */
    930            //NVIC_InitStructure.NVIC_IRQChannel = AUDIO_I2S_DMA_IRQ;
    931            //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = AUDIO_IRQ_PREPRIO;
    932            //NVIC_InitStructure.NVIC_IRQChannelSubPriority = AUDIO_IRQ_SUBRIO;
    933            //NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    934            //NVIC_Init(&NVIC_InitStructure);  
    935             HAL_NVIC_DisableIRQ(SPI3_IRQn); 
    936          #endif 
    937            
    938            /* Disable the DMA stream before the deinit */
    939            HAL_NVIC_DisableIRQ(DMA1_Stream7_IRQn); 
    940            HAL_NVIC_DisableIRQ(SPI3_IRQn); 
    941            
    942          }
    943          
    944          /**
    945            * @brief  Starts playing audio stream from the audio Media.
    946            * @param  None
    947            * @retval None
    948            */

   \                                 In section .text, align 2, keep-with-next
    949          void Audio_MAL_Play(uint32_t Addr, uint16_t Size)
    950          {
    951             //HAL_I2S_Transmit_DMA(&hi2s3,Addr,(uint16_t)Size/2);  
    952             /* Configure the source, destination address and the data length */
    953              //DMA_SetConfig(&DmaHandle,(uint32_t)&SPI3->DR , (uint32_t)Addr, Size/2);
    954                /* Configure DMA Stream destination address */
    955             /* Clear DBM bit */
    956          
    957                /* Enable the Peripheral */
    958            __HAL_DMA_DISABLE(&DmaHandle);
   \                     Audio_MAL_Play: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable18_28
    959             DmaHandle.Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
    960          	 
    961             /* Configure DMA Stream data length */
    962             DmaHandle.Instance->NDTR = Size/2;
   \   00000004   0x0849             LSRS     R1,R1,#+1
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0x6813             LDR      R3,[R2, #+0]
   \   0000000A   0x085B             LSRS     R3,R3,#+1
   \   0000000C   0x005B             LSLS     R3,R3,#+1
   \   0000000E   0x6013             STR      R3,[R2, #+0]
   \   00000010   0x6813             LDR      R3,[R2, #+0]
   \   00000012   0xF423 0x2380      BIC      R3,R3,#0x40000
   \   00000016   0x6013             STR      R3,[R2, #+0]
   \   00000018   0x6051             STR      R1,[R2, #+4]
    963          
    964          
    965             DmaHandle.Instance->PAR = (uint32_t)&SPI3->DR;
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable18_29  ;; 0x40003c0c
   \   0000001E   0x6091             STR      R1,[R2, #+8]
    966              /* Configure DMA Stream source address */
    967              DmaHandle.Instance->M0AR = (uint32_t)Addr;
   \   00000020   0x60D0             STR      R0,[R2, #+12]
    968              DmaHandle.Instance->M1AR = (uint32_t)Addr;
   \   00000022   0x6110             STR      R0,[R2, #+16]
    969              /* Enable Tx DMA Request */  
    970              hi2s3.Instance->CR2 |= SPI_CR2_TXDMAEN;
   \   00000024   0x....             LDR.N    R0,??DataTable18_3
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0x684B             LDR      R3,[R1, #+4]
   \   0000002A   0xF043 0x0302      ORR      R3,R3,#0x2
   \   0000002E   0x604B             STR      R3,[R1, #+4]
    971            /* Enable the transfer complete interrupt */
    972             __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000030   0x6811             LDR      R1,[R2, #+0]
   \   00000032   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000036   0x6011             STR      R1,[R2, #+0]
    973           
    974           /* Enable the Peripheral */
    975            __HAL_DMA_ENABLE(&DmaHandle);
   \   00000038   0x6811             LDR      R1,[R2, #+0]
   \   0000003A   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000003E   0x6011             STR      R1,[R2, #+0]
    976          
    977             
    978             /* Check if the I2S is already enabled */ 
    979             if((hi2s3.Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
   \   00000040   0x6801             LDR      R1,[R0, #+0]
   \   00000042   0x69CA             LDR      R2,[R1, #+28]
   \   00000044   0x0552             LSLS     R2,R2,#+21
   \   00000046   0xD403             BMI.N    ??Audio_MAL_Play_0
    980             {
    981             	 /* Enable I2S peripheral */	
    982             	 __HAL_I2S_ENABLE(&hi2s3);
   \   00000048   0x69CA             LDR      R2,[R1, #+28]
   \   0000004A   0xF442 0x6280      ORR      R2,R2,#0x400
   \   0000004E   0x61CA             STR      R2,[R1, #+28]
    983             }
    984          	   
    985          
    986               /* Process Unlocked */
    987              __HAL_UNLOCK(&hi2s3);
   \                     ??Audio_MAL_Play_0: (+1)
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0xF880 0x1038      STRB     R1,[R0, #+56]
    988          
    989          
    990          }
   \   00000056   0x4770             BX       LR               ;; return
    991          
    992          /**
    993            * @brief  Pauses or Resumes the audio stream playing from the Media.
    994            * @param  Cmd: AUDIO_PAUSE (or 0) to pause, AUDIO_RESUME (or any value different
    995            *              from 0) to resume. 
    996            * @param  Addr: Address from/at which the audio stream should resume/pause.
    997            * @retval None
    998            */
    999          static void Audio_MAL_PauseResume(uint32_t Cmd, uint32_t Addr)
   1000          {
   1001            /* Pause the audio file playing */
   1002            if (Cmd == AUDIO_PAUSE)
   1003            {   
   1004              /* Disable the I2S DMA request */
   1005              SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, DISABLE);
   1006          
   1007              /* Pause the I2S DMA Stream 
   1008                  Note. For the STM32F40x devices, the DMA implements a pause feature, 
   1009                        by disabling the stream, all configuration is preserved and data 
   1010                        transfer is paused till the next enable of the stream.
   1011                        This feature is not available on STM32F40x devices. */
   1012              DMA_Cmd(AUDIO_I2S_DMA_STREAM, DISABLE);
   1013            }
   1014            else /* AUDIO_RESUME */
   1015            {
   1016              /* Enable the I2S DMA request */
   1017              SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);
   1018            
   1019              /* Resume the I2S DMA Stream 
   1020                  Note. For the STM32F40x devices, the DMA implements a pause feature, 
   1021                        by disabling the stream, all configuration is preserved and data 
   1022                        transfer is paused till the next enable of the stream.
   1023                        This feature is not available on STM32F40x devices. */
   1024              DMA_Cmd(AUDIO_I2S_DMA_STREAM, ENABLE);
   1025              
   1026              /* If the I2S peripheral is still not enabled, enable it */
   1027              if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
   1028              {
   1029                I2S_Cmd(CODEC_I2S, ENABLE);
   1030              }    
   1031            } 
   1032          }
   1033          
   1034          /**
   1035            * @brief  Stops audio stream playing on the used Media.
   1036            * @param  None
   1037            * @retval None
   1038            */

   \                                 In section .text, align 2, keep-with-next
   1039          void Audio_MAL_Stop(void)
   1040          {   
   1041            /* Stop the Transfer on the I2S side: Stop and disable the DMA stream */
   1042            //DMA_Cmd(AUDIO_I2S_DMA_STREAM, DISABLE);
   1043          
   1044            /* Clear all the DMA flags for the next transfer */
   1045            //DMA_ClearFlag(AUDIO_I2S_DMA_STREAM, AUDIO_I2S_DMA_FLAG_TC |AUDIO_I2S_DMA_FLAG_HT | \
   1046             //                               AUDIO_I2S_DMA_FLAG_FE | AUDIO_I2S_DMA_FLAG_TE);
   1047            
   1048            /*  
   1049                     The I2S DMA requests are not disabled here.
   1050                                                                      */
   1051            
   1052            /* In all modes, disable the I2S peripheral */
   1053            //I2S_Cmd(CODEC_I2S, DISABLE);
   1054          
   1055            //HAL_SPI_MspDeInit(&hi2s3);
   1056            HAL_I2S_DMAStop(&hi2s3);
   \                     Audio_MAL_Stop: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable18_3
   \   00000002   0x.... 0x....      B.W      HAL_I2S_DMAStop
   1057          }
   1058          
   1059          /**
   1060            * @brief  DAC  Channel1 Configuration
   1061            * @param  None
   1062            * @retval None
   1063            */

   \                                 In section .text, align 2, keep-with-next
   1064          void DAC_Config(void)
   1065          {
   1066          
   1067          }
   \                     DAC_Config: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1068          
   1069          
   1070          
   1071          
   1072          
   1073          
   1074          
   1075          /**
   1076            * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
   1077            * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
   1078            *         for full duplex mode).
   1079            * @param  NewState: new state of the SPIx peripheral. 
   1080            *         This parameter can be: ENABLE or DISABLE.
   1081            * @retval None
   1082            */
   1083          static void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
   1084          {  
   1085            if (NewState != DISABLE)
   1086            {
   1087              /* Enable the selected SPI peripheral (in I2S mode) */
   1088              SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
   1089            }
   1090            else
   1091            {
   1092              /* Disable the selected SPI peripheral in I2S mode */
   1093              SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
   1094            }
   1095          }
   1096          
   1097          /**
   1098            * @brief  Deinitialize the SPIx peripheral registers to their default reset values.
   1099            * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
   1100            *         in SPI mode or 2 or 3 in I2S mode.   
   1101            *         
   1102            * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are deinitialized
   1103            *         when the relative I2S peripheral is deinitialized (the extended block's clock
   1104            *         is managed by the I2S peripheral clock).
   1105            *             
   1106            * @retval None
   1107            */
   1108          static void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
   1109          {
   1110          
   1111            if (SPIx == SPI1)
   1112            {
   1113              /* Enable SPI1 reset state */
   1114              //RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
   1115              __HAL_RCC_SPI1_CLK_ENABLE();
   1116              /* Release SPI1 from reset state */
   1117              //RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
   1118              __HAL_RCC_SPI1_CLK_DISABLE();
   1119            }
   1120            else if (SPIx == SPI2)
   1121            {
   1122              /* Enable SPI2 reset state */
   1123              //RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
   1124              __HAL_RCC_SPI2_CLK_ENABLE();
   1125              /* Release SPI2 from reset state */
   1126              //RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
   1127              __HAL_RCC_SPI2_CLK_DISABLE();
   1128            }
   1129            else
   1130            {
   1131              if (SPIx == SPI3)
   1132              {
   1133                /* Enable SPI3 reset state */
   1134                //RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
   1135                __HAL_RCC_SPI3_CLK_ENABLE();
   1136                /* Release SPI3 from reset state */
   1137                //RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
   1138                __HAL_RCC_SPI3_CLK_DISABLE();
   1139              }
   1140            }
   1141          }
   1142          
   1143          /**
   1144            * @brief  Enables or disables the specified DMAy Streamx.
   1145            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
   1146            *         to 7 to select the DMA Stream.
   1147            * @param  NewState: new state of the DMAy Streamx. 
   1148            *          This parameter can be: ENABLE or DISABLE.
   1149            *
   1150            * @note  This function may be used to perform Pause-Resume operation. When a
   1151            *        transfer is ongoing, calling this function to disable the Stream will
   1152            *        cause the transfer to be paused. All configuration registers and the
   1153            *        number of remaining data will be preserved. When calling again this
   1154            *        function to re-enable the Stream, the transfer will be resumed from
   1155            *        the point where it was paused.          
   1156            *    
   1157            * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
   1158            *        stream, it is recommended to check (or wait until) the DMA Stream is
   1159            *        effectively enabled. A Stream may remain disabled if a configuration 
   1160            *        parameter is wrong.
   1161            *        After disabling a DMA Stream, it is also recommended to check (or wait
   1162            *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
   1163            *        while a data transfer is ongoing, the current data will be transferred
   1164            *        and the Stream will be effectively disabled only after the transfer of
   1165            *        this single data is finished.            
   1166            *    
   1167            * @retval None
   1168            */
   1169          static void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
   1170          {
   1171          
   1172          
   1173            if (NewState != DISABLE)
   1174            {
   1175              /* Enable the selected DMAy Streamx by setting EN bit */
   1176              DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
   1177            }
   1178            else
   1179            {
   1180              /* Disable the selected DMAy Streamx by clearing EN bit */
   1181              DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
   1182            }
   1183          }
   1184          
   1185          
   1186          /**
   1187            * @brief  Enables or disables the SPIx/I2Sx DMA interface.
   1188            * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
   1189            *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
   1190            * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
   1191            *          This parameter can be any combination of the following values:
   1192            *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
   1193            *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
   1194            * @param  NewState: new state of the selected SPI DMA transfer request.
   1195            *          This parameter can be: ENABLE or DISABLE.
   1196            * @retval None
   1197            */
   1198          static void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
   1199          {
   1200            /* Check the parameters */
   1201            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1202            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1203            assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
   1204          
   1205            if (NewState != DISABLE)
   1206            {
   1207              /* Enable the selected SPI DMA requests */
   1208              SPIx->CR2 |= SPI_I2S_DMAReq;
   1209            }
   1210            else
   1211            {
   1212              /* Disable the selected SPI DMA requests */
   1213              SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
   1214            }
   1215          }
   1216          

   \                                 In section .text, align 2, keep-with-next
   1217          void HAL_I2S_MspInit(I2S_HandleTypeDef *hi2s)
   1218          {
   \                     HAL_I2S_MspInit: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB08C             SUB      SP,SP,#+48
   1219             GPIO_InitTypeDef GPIO_InitStructure;
   1220          	
   1221             
   1222             GPIO_InitTypeDef GPIO_InitStruct;
   1223            if(hi2s->Instance==SPI1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable18_30  ;; 0x40013000
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD144             BNE.N    ??HAL_I2S_MspInit_0
   1224            {
   1225            /* USER CODE BEGIN SPI1_MspInit 0 */
   1226          
   1227            /* USER CODE END SPI1_MspInit 0 */
   1228            /* Peripheral clock enable */
   1229            __SPI1_CLK_ENABLE();
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R5,??DataTable18_27  ;; 0x40023830
   \   00000014   0x9000             STR      R0,[SP, #+0]
   1230            __GPIOA_CLK_ENABLE();
   1231            __GPIOC_CLK_ENABLE();
   1232          
   1233            /**I2S1 GPIO Configuration    
   1234              PA4     ------> I2S1_WS --> LRCKO
   1235              PA5     ------> I2S1_CK --> BICKO
   1236              PA7     ------> I2S1_SD --> SDO12
   1237              PC4     ------> I2S1_MCK
   1238              */
   1239          	GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
   1240          	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1241          	GPIO_InitStruct.Pull = GPIO_NOPULL;
   1242          	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1243          	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1244          	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000016   0xA901             ADD      R1,SP,#+4
   \   00000018   0x6968             LDR      R0,[R5, #+20]
   \   0000001A   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   0000001E   0x6168             STR      R0,[R5, #+20]
   \   00000020   0x6968             LDR      R0,[R5, #+20]
   \   00000022   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x9800             LDR      R0,[SP, #+0]
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x6828             LDR      R0,[R5, #+0]
   \   00000030   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000034   0x6028             STR      R0,[R5, #+0]
   \   00000036   0x6828             LDR      R0,[R5, #+0]
   \   00000038   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000003C   0x9000             STR      R0,[SP, #+0]
   \   0000003E   0x9800             LDR      R0,[SP, #+0]
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9000             STR      R0,[SP, #+0]
   \   00000044   0x6828             LDR      R0,[R5, #+0]
   \   00000046   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000004A   0x6028             STR      R0,[R5, #+0]
   \   0000004C   0x6828             LDR      R0,[R5, #+0]
   \   0000004E   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000052   0x9000             STR      R0,[SP, #+0]
   \   00000054   0x9800             LDR      R0,[SP, #+0]
   \   00000056   0x20B0             MOVS     R0,#+176
   \   00000058   0x9001             STR      R0,[SP, #+4]
   \   0000005A   0x2002             MOVS     R0,#+2
   \   0000005C   0x9002             STR      R0,[SP, #+8]
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x9003             STR      R0,[SP, #+12]
   \   00000062   0x2003             MOVS     R0,#+3
   \   00000064   0x9004             STR      R0,[SP, #+16]
   \   00000066   0x2005             MOVS     R0,#+5
   \   00000068   0x9005             STR      R0,[SP, #+20]
   \   0000006A   0x....             LDR.N    R0,??DataTable17  ;; 0x40020000
   \   0000006C   0x.... 0x....      BL       HAL_GPIO_Init
   1245          
   1246              GPIO_InitStruct.Pin = GPIO_PIN_4;
   \   00000070   0x2010             MOVS     R0,#+16
   1247              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1248              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1249              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1250              GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1251              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000072   0xA901             ADD      R1,SP,#+4
   \   00000074   0x9001             STR      R0,[SP, #+4]
   \   00000076   0x2002             MOVS     R0,#+2
   \   00000078   0x9002             STR      R0,[SP, #+8]
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x9003             STR      R0,[SP, #+12]
   \   0000007E   0x2003             MOVS     R0,#+3
   \   00000080   0x9004             STR      R0,[SP, #+16]
   \   00000082   0x2005             MOVS     R0,#+5
   \   00000084   0x9005             STR      R0,[SP, #+20]
   \   00000086   0x....             LDR.N    R0,??DataTable18_2  ;; 0x40020800
   \   00000088   0x.... 0x....      BL       HAL_GPIO_Init
   1252          	
   1253            /* Peripheral interrupt init*/
   1254              HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x2023             MOVS     R0,#+35
   \   00000092   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1255              HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000096   0x2023             MOVS     R0,#+35
   \   00000098   0xE051             B.N      ??HAL_I2S_MspInit_1
   1256            /* USER CODE BEGIN SPI1_MspInit 1 */
   1257          
   1258            /* USER CODE END SPI1_MspInit 1 */
   1259            }
   1260            else if(hi2s->Instance==SPI2)
   \                     ??HAL_I2S_MspInit_0: (+1)
   \   0000009A   0x....             LDR.N    R1,??DataTable18_31  ;; 0x40003800
   \   0000009C   0x4288             CMP      R0,R1
   \   0000009E   0xD152             BNE.N    ??HAL_I2S_MspInit_2
   1261            {
   1262          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1263          	  
   1264          	  /* USER CODE END SPI2_MspInit 0 */
   1265          		/* Peripheral clock enable */
   1266          		__SPI2_CLK_ENABLE();
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x....             LDR.N    R5,??DataTable18_27  ;; 0x40023830
   \   000000A4   0x9000             STR      R0,[SP, #+0]
   1267          		__GPIOI_CLK_ENABLE();
   1268          		__GPIOB_CLK_ENABLE();
   1269          		__GPIOC_CLK_ENABLE();
   1270          	  
   1271          		/**I2S2 GPIO Configuration	   
   1272          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1273          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1274          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1275          	  
   1276          	  
   1277          		*/
   1278          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   1279          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1280          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1281          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1282          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1283          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   000000A6   0xA901             ADD      R1,SP,#+4
   \   000000A8   0x6928             LDR      R0,[R5, #+16]
   \   000000AA   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   000000AE   0x6128             STR      R0,[R5, #+16]
   \   000000B0   0x6928             LDR      R0,[R5, #+16]
   \   000000B2   0xF400 0x4080      AND      R0,R0,#0x4000
   \   000000B6   0x9000             STR      R0,[SP, #+0]
   \   000000B8   0x9800             LDR      R0,[SP, #+0]
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0x9000             STR      R0,[SP, #+0]
   \   000000BE   0x6828             LDR      R0,[R5, #+0]
   \   000000C0   0xF440 0x7080      ORR      R0,R0,#0x100
   \   000000C4   0x6028             STR      R0,[R5, #+0]
   \   000000C6   0x6828             LDR      R0,[R5, #+0]
   \   000000C8   0xF400 0x7080      AND      R0,R0,#0x100
   \   000000CC   0x9000             STR      R0,[SP, #+0]
   \   000000CE   0x9800             LDR      R0,[SP, #+0]
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x9000             STR      R0,[SP, #+0]
   \   000000D4   0x6828             LDR      R0,[R5, #+0]
   \   000000D6   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000DA   0x6028             STR      R0,[R5, #+0]
   \   000000DC   0x6828             LDR      R0,[R5, #+0]
   \   000000DE   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000E2   0x9000             STR      R0,[SP, #+0]
   \   000000E4   0x9800             LDR      R0,[SP, #+0]
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x9000             STR      R0,[SP, #+0]
   \   000000EA   0x6828             LDR      R0,[R5, #+0]
   \   000000EC   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000F0   0x6028             STR      R0,[R5, #+0]
   \   000000F2   0x6828             LDR      R0,[R5, #+0]
   \   000000F4   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000F8   0x9000             STR      R0,[SP, #+0]
   \   000000FA   0x9800             LDR      R0,[SP, #+0]
   \   000000FC   0x2002             MOVS     R0,#+2
   \   000000FE   0x9001             STR      R0,[SP, #+4]
   \   00000100   0x9002             STR      R0,[SP, #+8]
   \   00000102   0x2000             MOVS     R0,#+0
   \   00000104   0x9003             STR      R0,[SP, #+12]
   \   00000106   0x2003             MOVS     R0,#+3
   \   00000108   0x9004             STR      R0,[SP, #+16]
   \   0000010A   0x2005             MOVS     R0,#+5
   \   0000010C   0x9005             STR      R0,[SP, #+20]
   \   0000010E   0x....             LDR.N    R0,??DataTable18_2  ;; 0x40020800
   \   00000110   0x.... 0x....      BL       HAL_GPIO_Init
   1284          	  
   1285          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   00000114   0xF44F 0x5040      MOV      R0,#+12288
   1286          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1287          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1288          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1289          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1290          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000118   0xA901             ADD      R1,SP,#+4
   \   0000011A   0x9001             STR      R0,[SP, #+4]
   \   0000011C   0x2002             MOVS     R0,#+2
   \   0000011E   0x9002             STR      R0,[SP, #+8]
   \   00000120   0x2000             MOVS     R0,#+0
   \   00000122   0x9003             STR      R0,[SP, #+12]
   \   00000124   0x2003             MOVS     R0,#+3
   \   00000126   0x9004             STR      R0,[SP, #+16]
   \   00000128   0x2005             MOVS     R0,#+5
   \   0000012A   0x9005             STR      R0,[SP, #+20]
   \   0000012C   0x....             LDR.N    R0,??DataTable18_1  ;; 0x40020400
   \   0000012E   0x.... 0x....      BL       HAL_GPIO_Init
   1291          	  
   1292          	  
   1293          		/* Peripheral interrupt init*/
   1294          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 1);
   \   00000132   0x2201             MOVS     R2,#+1
   \   00000134   0x2101             MOVS     R1,#+1
   \   00000136   0x2024             MOVS     R0,#+36
   \   00000138   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1295          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   0000013C   0x2024             MOVS     R0,#+36
   \                     ??HAL_I2S_MspInit_1: (+1)
   \   0000013E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1296          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1297          	  
   1298          	  /* USER CODE END SPI2_MspInit 1 */
   1299          
   1300            }
   1301            else if(hi2s->Instance==SPI3)
   1302            {
   1303          
   1304          
   1305            
   1306              /**I2S3 GPIO Configuration    
   1307                 PB2     ------> I2S3_SD
   1308                 PA15     ------> I2S3_WS (LRCK)
   1309                 PB3     ------> I2S3_CK 
   1310          	 PC7    ------> MCLK
   1311              */
   1312           
   1313            /* USER CODE BEGIN SPI3_MspInit 1 */
   1314            __SPI3_CLK_ENABLE();
   1315            __GPIOA_CLK_ENABLE();
   1316            __GPIOB_CLK_ENABLE();
   1317            __GPIOC_CLK_ENABLE();
   1318            GPIO_InitStructure.Pin = GPIO_PIN_3; 
   1319            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
   1320            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
   1321            GPIO_InitStructure.Pull = GPIO_NOPULL;
   1322            GPIO_InitStructure.Alternate = GPIO_AF6_SPI3;
   1323            HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
   1324          
   1325              GPIO_InitStructure.Pin = GPIO_PIN_2; 
   1326            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
   1327            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
   1328            GPIO_InitStructure.Pull = GPIO_NOPULL;
   1329            GPIO_InitStructure.Alternate = GPIO_AF7_SPI3;
   1330            HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
   1331          
   1332          
   1333            GPIO_InitStructure.Pin = GPIO_PIN_15;
   1334            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
   1335            GPIO_InitStructure.Alternate = GPIO_AF6_SPI3;
   1336            HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
   1337          
   1338          
   1339             
   1340          #ifdef CODEC_MCLK_ENABLED
   1341          
   1342            GPIO_InitStructure.Pin = GPIO_PIN_7; 
   1343            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
   1344            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
   1345            GPIO_InitStructure.Pull = GPIO_NOPULL;
   1346            GPIO_InitStructure.Alternate = GPIO_AF6_SPI3;
   1347            HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
   1348          
   1349          #endif /* CODEC_MCLK_ENABLED */ 
   1350          
   1351          #ifdef I2S_INTERRUPT   
   1352               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1353               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1354               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1355          
   1356               /* Enable the I2S DMA request */
   1357               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1358               //__HAL_I2S_ENABLE(&hi2s3);
   1359            	    /* Peripheral interrupt init*/
   1360          		HAL_NVIC_SetPriority(SPI3_IRQn, INTERRUPT_PRI_AUDIOOUT, 0);
   1361          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1362          #endif
   1363          
   1364                /* Enable the DMA clock */ 
   1365          	  __HAL_RCC_DMA1_CLK_ENABLE();
   1366          
   1367                /* Configure the DMA Stream */
   1368                //HAL_DMA_DeInit(&DmaHandle);
   1369          
   1370                /* Set the parameters to be configured */ 
   1371          	  DmaHandle.Instance = DMA1_Stream7;
   1372                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   1373          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   1374          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   1375          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   1376          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1377                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   1378          #if  (AUDIO_OUT_STREAM_NORMAL)
   1379          	  DmaHandle.Init.Mode = DMA_NORMAL;
   1380          #else
   1381                DmaHandle.Init.Mode = DMA_CIRCULAR;
   1382          #endif
   1383                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   1384          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   1385                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1386                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   1387                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   1388                DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1389                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1390                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1391                //DmaHandle.XferCpltCallback = &TC_Callback;
   1392           
   1393          
   1394                /* Associate the initialized DMA handle to the the SPI handle */
   1395                __HAL_LINKDMA(hi2s, hdmatx, DmaHandle);
   1396                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1397          
   1398          	   /* Deinitialize the Stream for new transfer */
   1399                 HAL_DMA_DeInit(&DmaHandle);
   1400                 /* Configure the DMA Stream */
   1401          	   HAL_DMA_Init(&DmaHandle);
   1402          
   1403                __HAL_I2S_ENABLE(&hi2s3);
   1404          
   1405                /* Set Interrupt Group Priority */
   1406                //HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_I2S_OUT, 1);
   1407                /* Enable the DMA STREAM global Interrupt */
   1408                //HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   1409          
   1410           }
   1411          
   1412          }
   \   00000142   0xB00C             ADD      SP,SP,#+48
   \   00000144   0xBD70             POP      {R4-R6,PC}
   \                     ??HAL_I2S_MspInit_2: (+1)
   \   00000146   0x....             LDR.N    R1,??DataTable18_32  ;; 0x40003c00
   \   00000148   0x4288             CMP      R0,R1
   \   0000014A   0xF040 0x809E      BNE.W    ??HAL_I2S_MspInit_3
   \   0000014E   0x2000             MOVS     R0,#+0
   \   00000150   0x....             LDR.N    R5,??DataTable18_27  ;; 0x40023830
   \   00000152   0x9000             STR      R0,[SP, #+0]
   \   00000154   0x....             LDR.N    R6,??DataTable18_1  ;; 0x40020400
   \   00000156   0x6928             LDR      R0,[R5, #+16]
   \   00000158   0xA906             ADD      R1,SP,#+24
   \   0000015A   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   0000015E   0x6128             STR      R0,[R5, #+16]
   \   00000160   0x6928             LDR      R0,[R5, #+16]
   \   00000162   0xF400 0x4000      AND      R0,R0,#0x8000
   \   00000166   0x9000             STR      R0,[SP, #+0]
   \   00000168   0x9800             LDR      R0,[SP, #+0]
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0x9000             STR      R0,[SP, #+0]
   \   0000016E   0x6828             LDR      R0,[R5, #+0]
   \   00000170   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000174   0x6028             STR      R0,[R5, #+0]
   \   00000176   0x6828             LDR      R0,[R5, #+0]
   \   00000178   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000017C   0x9000             STR      R0,[SP, #+0]
   \   0000017E   0x9800             LDR      R0,[SP, #+0]
   \   00000180   0x2000             MOVS     R0,#+0
   \   00000182   0x9000             STR      R0,[SP, #+0]
   \   00000184   0x6828             LDR      R0,[R5, #+0]
   \   00000186   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000018A   0x6028             STR      R0,[R5, #+0]
   \   0000018C   0x6828             LDR      R0,[R5, #+0]
   \   0000018E   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000192   0x9000             STR      R0,[SP, #+0]
   \   00000194   0x9800             LDR      R0,[SP, #+0]
   \   00000196   0x2000             MOVS     R0,#+0
   \   00000198   0x9000             STR      R0,[SP, #+0]
   \   0000019A   0x6828             LDR      R0,[R5, #+0]
   \   0000019C   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000001A0   0x6028             STR      R0,[R5, #+0]
   \   000001A2   0x6828             LDR      R0,[R5, #+0]
   \   000001A4   0xF000 0x0004      AND      R0,R0,#0x4
   \   000001A8   0x9000             STR      R0,[SP, #+0]
   \   000001AA   0x9800             LDR      R0,[SP, #+0]
   \   000001AC   0x2008             MOVS     R0,#+8
   \   000001AE   0x9006             STR      R0,[SP, #+24]
   \   000001B0   0x2002             MOVS     R0,#+2
   \   000001B2   0x9007             STR      R0,[SP, #+28]
   \   000001B4   0x2003             MOVS     R0,#+3
   \   000001B6   0x9009             STR      R0,[SP, #+36]
   \   000001B8   0x2000             MOVS     R0,#+0
   \   000001BA   0x9008             STR      R0,[SP, #+32]
   \   000001BC   0x2006             MOVS     R0,#+6
   \   000001BE   0x900A             STR      R0,[SP, #+40]
   \   000001C0   0x4630             MOV      R0,R6
   \   000001C2   0x.... 0x....      BL       HAL_GPIO_Init
   \   000001C6   0x2004             MOVS     R0,#+4
   \   000001C8   0xA906             ADD      R1,SP,#+24
   \   000001CA   0x9006             STR      R0,[SP, #+24]
   \   000001CC   0x2002             MOVS     R0,#+2
   \   000001CE   0x9007             STR      R0,[SP, #+28]
   \   000001D0   0x2003             MOVS     R0,#+3
   \   000001D2   0x9009             STR      R0,[SP, #+36]
   \   000001D4   0x2000             MOVS     R0,#+0
   \   000001D6   0x9008             STR      R0,[SP, #+32]
   \   000001D8   0x2007             MOVS     R0,#+7
   \   000001DA   0x900A             STR      R0,[SP, #+40]
   \   000001DC   0x4630             MOV      R0,R6
   \   000001DE   0x.... 0x....      BL       HAL_GPIO_Init
   \   000001E2   0xF44F 0x4000      MOV      R0,#+32768
   \   000001E6   0xA906             ADD      R1,SP,#+24
   \   000001E8   0x9006             STR      R0,[SP, #+24]
   \   000001EA   0x2002             MOVS     R0,#+2
   \   000001EC   0x9007             STR      R0,[SP, #+28]
   \   000001EE   0x2006             MOVS     R0,#+6
   \   000001F0   0x900A             STR      R0,[SP, #+40]
   \   000001F2   0x....             LDR.N    R0,??DataTable17  ;; 0x40020000
   \   000001F4   0x.... 0x....      BL       HAL_GPIO_Init
   \   000001F8   0x2080             MOVS     R0,#+128
   \   000001FA   0xA906             ADD      R1,SP,#+24
   \   000001FC   0x9006             STR      R0,[SP, #+24]
   \   000001FE   0x2002             MOVS     R0,#+2
   \   00000200   0x9007             STR      R0,[SP, #+28]
   \   00000202   0x2003             MOVS     R0,#+3
   \   00000204   0x9009             STR      R0,[SP, #+36]
   \   00000206   0x2000             MOVS     R0,#+0
   \   00000208   0x9008             STR      R0,[SP, #+32]
   \   0000020A   0x2006             MOVS     R0,#+6
   \   0000020C   0x900A             STR      R0,[SP, #+40]
   \   0000020E   0x....             LDR.N    R0,??DataTable18_2  ;; 0x40020800
   \   00000210   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000214   0x2000             MOVS     R0,#+0
   \   00000216   0x9000             STR      R0,[SP, #+0]
   \   00000218   0x6828             LDR      R0,[R5, #+0]
   \   0000021A   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   0000021E   0x6028             STR      R0,[R5, #+0]
   \   00000220   0x6828             LDR      R0,[R5, #+0]
   \   00000222   0x....             LDR.N    R5,??DataTable18_28
   \   00000224   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000228   0x9000             STR      R0,[SP, #+0]
   \   0000022A   0x9800             LDR      R0,[SP, #+0]
   \   0000022C   0x....             LDR.N    R0,??DataTable18_7  ;; 0x400260b8
   \   0000022E   0x6028             STR      R0,[R5, #+0]
   \   00000230   0x2000             MOVS     R0,#+0
   \   00000232   0x6068             STR      R0,[R5, #+4]
   \   00000234   0x2040             MOVS     R0,#+64
   \   00000236   0x60A8             STR      R0,[R5, #+8]
   \   00000238   0x2000             MOVS     R0,#+0
   \   0000023A   0x60E8             STR      R0,[R5, #+12]
   \   0000023C   0xF44F 0x6080      MOV      R0,#+1024
   \   00000240   0x6128             STR      R0,[R5, #+16]
   \   00000242   0xF44F 0x6000      MOV      R0,#+2048
   \   00000246   0x6168             STR      R0,[R5, #+20]
   \   00000248   0xF44F 0x5000      MOV      R0,#+8192
   \   0000024C   0x61A8             STR      R0,[R5, #+24]
   \   0000024E   0xF44F 0x7080      MOV      R0,#+256
   \   00000252   0x61E8             STR      R0,[R5, #+28]
   \   00000254   0xF44F 0x3000      MOV      R0,#+131072
   \   00000258   0x6228             STR      R0,[R5, #+32]
   \   0000025A   0x2004             MOVS     R0,#+4
   \   0000025C   0x6268             STR      R0,[R5, #+36]
   \   0000025E   0x2003             MOVS     R0,#+3
   \   00000260   0x62A8             STR      R0,[R5, #+40]
   \   00000262   0x2000             MOVS     R0,#+0
   \   00000264   0x62E8             STR      R0,[R5, #+44]
   \   00000266   0x6829             LDR      R1,[R5, #+0]
   \   00000268   0x6328             STR      R0,[R5, #+48]
   \   0000026A   0x....             LDR.N    R0,??DataTable18_29  ;; 0x40003c0c
   \   0000026C   0x6088             STR      R0,[R1, #+8]
   \   0000026E   0x4628             MOV      R0,R5
   \   00000270   0x6325             STR      R5,[R4, #+48]
   \   00000272   0x63AC             STR      R4,[R5, #+56]
   \   00000274   0x.... 0x....      BL       HAL_DMA_DeInit
   \   00000278   0x4628             MOV      R0,R5
   \   0000027A   0x.... 0x....      BL       HAL_DMA_Init
   \   0000027E   0x....             LDR.N    R0,??DataTable18_3
   \   00000280   0x6800             LDR      R0,[R0, #+0]
   \   00000282   0x69C1             LDR      R1,[R0, #+28]
   \   00000284   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000288   0x61C1             STR      R1,[R0, #+28]
   \                     ??HAL_I2S_MspInit_3: (+1)
   \   0000028A   0xB00C             ADD      SP,SP,#+48
   \   0000028C   0xBD70             POP      {R4-R6,PC}       ;; return
   1413          

   \                                 In section .text, align 2, keep-with-next
   1414          void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
   1415          {
   \                     HAL_SPI_MspDeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1416            if(hspi->Instance == SPI3)
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable18_32  ;; 0x40003c00
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD122             BNE.N    ??HAL_SPI_MspDeInit_0
   1417            {   
   1418              /*##-1- Reset peripherals ##################################################*/
   1419              __HAL_RCC_SPI3_FORCE_RESET();
   \   0000000A   0x....             LDR.N    R0,??DataTable18_33  ;; 0x40023820
   1420              __HAL_RCC_SPI3_RELEASE_RESET();
   1421          
   1422              /*##-2- Disable peripherals and GPIO Clocks ################################*/
   1423              HAL_GPIO_DeInit(CODEC_I2S_GPIO, CODEC_I2S_SCK_PIN);
   \   0000000C   0x....             LDR.N    R4,??DataTable18_1  ;; 0x40020400
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   00000014   0x6001             STR      R1,[R0, #+0]
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   \   00000018   0xF421 0x4100      BIC      R1,R1,#0x8000
   \   0000001C   0x6001             STR      R1,[R0, #+0]
   \   0000001E   0x2108             MOVS     R1,#+8
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       HAL_GPIO_DeInit
   1424              HAL_GPIO_DeInit(CODEC_I2S_GPIO, CODEC_I2S_SD_PIN);
   \   00000026   0x2104             MOVS     R1,#+4
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       HAL_GPIO_DeInit
   1425              HAL_GPIO_DeInit(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PIN);
   \   0000002E   0xF44F 0x4100      MOV      R1,#+32768
   \   00000032   0x....             LDR.N    R0,??DataTable17  ;; 0x40020000
   \   00000034   0x.... 0x....      BL       HAL_GPIO_DeInit
   1426          	HAL_GPIO_DeInit(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PIN);
   \   00000038   0x2180             MOVS     R1,#+128
   \   0000003A   0x....             LDR.N    R0,??DataTable18_2  ;; 0x40020800
   \   0000003C   0x.... 0x....      BL       HAL_GPIO_DeInit
   1427          
   1428              /*##-3- Disable the DMA ####################################################*/
   1429              /* De-Initialize the DMA associated to transmission process */
   1430              HAL_DMA_DeInit(&DmaHandle);
   \   00000040   0x....             LDR.N    R0,??DataTable18_28
   \   00000042   0x.... 0x....      BL       HAL_DMA_DeInit
   1431          
   1432          
   1433              /*##-4- Disable the NVIC for DMA ###########################################*/
   1434              HAL_NVIC_DisableIRQ(DMA1_Stream7_IRQn);
   \   00000046   0x202F             MOVS     R0,#+47
   \   00000048   0xE8BD 0x4010      POP      {R4,LR}
   \   0000004C   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
   1435            }
   1436          }
   \                     ??HAL_SPI_MspDeInit_0: (+1)
   \   00000050   0xBD10             POP      {R4,PC}          ;; return
   1437          
   1438          

   \                                 In section .text, align 2, keep-with-next
   1439          void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
   1440          {
   1441              /*##-1- Reset peripherals ##################################################*/
   1442              __HAL_RCC_I2C1_FORCE_RESET();
   \                     HAL_I2C_MspDeInit: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable18_33  ;; 0x40023820
   \   00000002   0xB510             PUSH     {R4,LR}
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   1443              __HAL_RCC_I2C1_RELEASE_RESET();
   1444          
   1445          
   1446            /*##-2- Disable peripherals and GPIO Clocks #################################*/
   1447            /* Configure I2C Tx as alternate function  */
   1448            HAL_GPIO_DeInit(CODEC_I2C_GPIO, CODEC_I2C_SCL_PIN);
   \   00000006   0x....             LDR.N    R4,??DataTable18_1  ;; 0x40020400
   \   00000008   0xF441 0x1100      ORR      R1,R1,#0x200000
   \   0000000C   0x6001             STR      R1,[R0, #+0]
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0xF421 0x1100      BIC      R1,R1,#0x200000
   \   00000014   0x6001             STR      R1,[R0, #+0]
   \   00000016   0x2140             MOVS     R1,#+64
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       HAL_GPIO_DeInit
   1449            /* Configure I2C Rx as alternate function  */
   1450            HAL_GPIO_DeInit(CODEC_I2C_GPIO, CODEC_I2C_SDA_PIN);
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x2180             MOVS     R1,#+128
   \   00000022   0xE8BD 0x4010      POP      {R4,LR}
   \   00000026   0x.... 0x....      B.W      HAL_GPIO_DeInit
   1451          }
   1452          
   1453          
   1454          
   1455           /* I2C1 init function */

   \                                 In section .text, align 2, keep-with-next
   1456          void MX_I2C1_Init(void)
   1457          {
   \                     MX_I2C1_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1458          
   1459          
   1460            hi2c1.Instance = I2C1;
   \   00000002   0x....             LDR.N    R4,??DataTable18
   \   00000004   0x....             LDR.N    R0,??DataTable18_34  ;; 0x40005400
   \   00000006   0x6060             STR      R0,[R4, #+4]
   1461            hi2c1.Init.Timing =0x00A0689A;           //I2C_SPEED DISCOVERY_I2Cx_TIMING; 0x00C0EFFF
   \   00000008   0x....             LDR.N    R0,??DataTable18_35  ;; 0xa0689a
   \   0000000A   0x60A0             STR      R0,[R4, #+8]
   1462                                                     //I2C_TIMING ;//I2C_TIMING  0x00303D5D
   1463                                                     //DISCOVERY_I2Cx_TIMING
   1464            hi2c1.Init.OwnAddress1 = 0x33;
   \   0000000C   0x2033             MOVS     R0,#+51
   \   0000000E   0x60E0             STR      R0,[R4, #+12]
   1465            hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x6120             STR      R0,[R4, #+16]
   1466            hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x6160             STR      R0,[R4, #+20]
   1467            hi2c1.Init.OwnAddress2 = 0;
   \   00000018   0x61A0             STR      R0,[R4, #+24]
   1468            hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   0000001A   0x61E0             STR      R0,[R4, #+28]
   1469            hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   0000001C   0x6220             STR      R0,[R4, #+32]
   1470            hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   0000001E   0x6260             STR      R0,[R4, #+36]
   1471            HAL_I2C_Init(&hi2c1);
   \   00000020   0x1D20             ADDS     R0,R4,#+4
   \   00000022   0x.... 0x....      BL       HAL_I2C_Init
   1472          
   1473             /*Configure Analogue filter */
   1474            HAL_I2CEx_AnalogFilter_Config(&hi2c1, I2C_ANALOGFILTER_ENABLE);
   \   00000026   0x1D20             ADDS     R0,R4,#+4
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002E   0x.... 0x....      B.W      HAL_I2CEx_ConfigAnalogFilter
   1475          
   1476          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     OutputDev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x........         DC32     OutputDev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x........         DC32     hi2s3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x0001FFFE         DC32     0x1fffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   0x40003C04         DC32     0x40003c04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_9:
   \   00000000   0x40026459         DC32     0x40026459

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_10:
   \   00000000   0x40026470         DC32     0x40026470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_11:
   \   00000000   0x40026400         DC32     0x40026400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_12:
   \   00000000   0x40026488         DC32     0x40026488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_13:
   \   00000000   0x400264A0         DC32     0x400264a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_14:
   \   00000000   0x400260B9         DC32     0x400260b9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_15:
   \   00000000   0x40026410         DC32     0x40026410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_16:
   \   00000000   0x40026428         DC32     0x40026428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_17:
   \   00000000   0x40026440         DC32     0x40026440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_18:
   \   00000000   0x40026059         DC32     0x40026059

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_19:
   \   00000000   0x40026000         DC32     0x40026000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_20:
   \   00000000   0x40026070         DC32     0x40026070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_21:
   \   00000000   0x40026088         DC32     0x40026088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_22:
   \   00000000   0x400260A0         DC32     0x400260a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_23:
   \   00000000   0x40026010         DC32     0x40026010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_24:
   \   00000000   0x40026028         DC32     0x40026028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_25:
   \   00000000   0x40026040         DC32     0x40026040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_26:
   \   00000000   0x........         DC32     DmaHandle+0x34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_27:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_28:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_29:
   \   00000000   0x40003C0C         DC32     0x40003c0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_30:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_31:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_32:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_33:
   \   00000000   0x40023820         DC32     0x40023820

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_34:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_35:
   \   00000000   0x00A0689A         DC32     0xa0689a
   1477          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   AUDIO_DeInit
        32   -> Codec_Reset
        32   -> Codec_TIMEOUT_UserCallback
        32   -> HAL_GPIO_Init
        32   -> HAL_I2C_GetError
        32   -> HAL_I2C_Master_Transmit
        32   -> HAL_I2C_MspDeInit
        32   -> HAL_NVIC_DisableIRQ
       8   AUDIO_Init
         8   -> Codec_Init
       0   AUDIO_Mute
         0   -> Codec_Mute
      32   AUDIO_PauseResume
        32   -> Codec_TIMEOUT_UserCallback
        32   -> HAL_I2C_GetError
        32   -> HAL_I2C_Master_Transmit
      16   AUDIO_Play
        16   -> Audio_MAL_Play
      24   AUDIO_Stop
        24   -> Codec_TIMEOUT_UserCallback
        24   -> HAL_GPIO_WritePin
        24   -> HAL_I2C_GetError
        24   -> HAL_I2C_Master_Transmit
        24   -> HAL_I2S_DMAStop
       0   AUDIO_VolumeCtl
         0   -> Codec_VolumeCtrl
       0   Audio_MAL_Play
       0   Audio_MAL_Stop
         0   -> HAL_I2S_DMAStop
      72   Codec_Init
        72   -> Codec_Reset
        72   -> Codec_TIMEOUT_UserCallback
        72   -> Codec_VolumeCtrl
        72   -> Codec_WriteRegister
        72   -> HAL_GPIO_Init
        72   -> HAL_I2C_GetError
        72   -> HAL_I2C_Master_Receive
        72   -> HAL_I2C_Master_Transmit
        72   -> I2S3_Init
        72   -> MX_I2C1_Init
      16   Codec_Mute
        16   -> Codec_TIMEOUT_UserCallback
        16   -> HAL_I2C_GetError
        16   -> HAL_I2C_Master_Transmit
      16   Codec_Reset
         0   -> HAL_GPIO_WritePin
        16   -> HAL_GPIO_WritePin
      24   Codec_VolumeCtrl
        24   -> Codec_TIMEOUT_UserCallback
        24   -> HAL_I2C_GetError
        24   -> HAL_I2C_Master_Transmit
      16   Codec_WriteRegister
        16   -> Codec_TIMEOUT_UserCallback
        16   -> HAL_I2C_GetError
        16   -> HAL_I2C_Master_Transmit
       0   DAC_Config
       0   DMA1_Stream0_IRQHandler
      16   DMA1_Stream7_IRQHandler
        16   -> HAL_I2S_TxCpltCallback
       8   HAL_I2C_MspDeInit
         0   -> HAL_GPIO_DeInit
         8   -> HAL_GPIO_DeInit
      64   HAL_I2S_MspInit
        64   -> HAL_DMA_DeInit
        64   -> HAL_DMA_Init
        64   -> HAL_GPIO_Init
        64   -> HAL_NVIC_EnableIRQ
        64   -> HAL_NVIC_SetPriority
       8   HAL_SPI_MspDeInit
         8   -> HAL_DMA_DeInit
         8   -> HAL_GPIO_DeInit
         0   -> HAL_NVIC_DisableIRQ
       8   MX_I2C1_Init
         0   -> HAL_I2CEx_ConfigAnalogFilter
         8   -> HAL_I2C_Init
       0   SPI3_IRQHandler
      16   codec_sendBeep
        16   -> Codec_TIMEOUT_UserCallback
        16   -> HAL_I2C_GetError
        16   -> HAL_I2C_Master_Transmit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable17
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_10
       4  ??DataTable18_11
       4  ??DataTable18_12
       4  ??DataTable18_13
       4  ??DataTable18_14
       4  ??DataTable18_15
       4  ??DataTable18_16
       4  ??DataTable18_17
       4  ??DataTable18_18
       4  ??DataTable18_19
       4  ??DataTable18_2
       4  ??DataTable18_20
       4  ??DataTable18_21
       4  ??DataTable18_22
       4  ??DataTable18_23
       4  ??DataTable18_24
       4  ??DataTable18_25
       4  ??DataTable18_26
       4  ??DataTable18_27
       4  ??DataTable18_28
       4  ??DataTable18_29
       4  ??DataTable18_3
       4  ??DataTable18_30
       4  ??DataTable18_31
       4  ??DataTable18_32
       4  ??DataTable18_33
       4  ??DataTable18_34
       4  ??DataTable18_35
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable18_8
       4  ??DataTable18_9
      36  ?Subroutine0
     196  AUDIO_DeInit
      38  AUDIO_Init
      48  AUDIO_MAL_DMA_InitStructure
       2  AUDIO_Mute
     342  AUDIO_PauseResume
      70  AUDIO_Play
     218  AUDIO_Stop
      30  AUDIO_VolumeCtl
      88  Audio_MAL_Play
       6  Audio_MAL_Stop
       4  CODECTimeout
     540  Codec_Init
      34  Codec_Mute
      52  Codec_Reset
     118  Codec_VolumeCtrl
      12  Codec_WriteRegister
       4  CurrAudioInterface
       2  DAC_Config
       2  DMA1_Stream0_IRQHandler
     476  DMA1_Stream7_IRQHandler
      48  DMA_InitStructure
      88  DmaHandle
      42  HAL_I2C_MspDeInit
     654  HAL_I2S_MspInit
      82  HAL_SPI_MspDeInit
      50  MX_I2C1_Init
      76  OutputDev
          Volume
          hi2c1
          AudioTotalSize
          AudioRemSize
          CurrentPos
      10  SPI3_IRQHandler
     100  codec_sendBeep
      60  hi2c2

 
   244 bytes in section .bss
    84 bytes in section .data
 3 352 bytes in section .text
 
 3 352 bytes of CODE memory
   328 bytes of DATA memory

Errors: none
Warnings: none
