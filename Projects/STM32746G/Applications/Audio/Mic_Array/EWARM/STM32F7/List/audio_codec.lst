###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       01/Feb/2016  11:10:24
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\audio_codec.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\audio_codec.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\audio_codec.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\audio_codec.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\audio_codec.c
      1          /**
      2            ******************************************************************************
      3            * @file    audio_codec.c
      4            * @author  Phan Le Son ( porting from "MCD Application Team")
      5            * @version V1.0.0
      6            * @date    12-December-2015
      7            * @brief   This file includes the low layer driver for CS43L22 Audio Codec 
      8            ******************************************************************************
      9                                                       User NOTES
     10          1. How To use this driver:
     11          --------------------------
     12             - Call the function AUDIO_Init(
     13                                              OutputDevice: physical output mode (OUTPUT_DEVICE_SPEAKER, 
     14                                                           OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_AUTO or 
     15                                                           OUTPUT_DEVICE_BOTH)
     16                                              Volume: initial volume to be set (0 is min (mute), 100 is max (100%)
     17                                              AudioFreq: Audio frequency in Hz (8000, 16000, 22500, 32000 ...)
     18                                              this parameter is relative to the audio file/stream type.
     19                                             )
     20                This function configures all the hardware required for the audio application (codec, I2C, I2S, 
     21                GPIOs, DMA and interrupt if needed). This function returns 0 if configuration is OK.
     22                if the returned value is different from 0 or the function is stuck then the communication with
     23                the codec (try to un-plug the power or reset device in this case).
     24                + OUTPUT_DEVICE_SPEAKER: only speaker will be set as output for the audio stream.
     25                + OUTPUT_DEVICE_HEADPHONE: only headphones will be set as output for the audio stream.
     26                + OUTPUT_DEVICE_AUTO: Selection of output device is made through external switch (implemented 
     27                   into the audio jack on the board). When the Headphone is connected it is used
     28                   as output. When the headphone is disconnected from the audio jack, the output is
     29                   automatically switched to Speaker.
     30                + OUTPUT_DEVICE_BOTH: both Speaker and Headphone are used as outputs for the audio stream
     31                   at the same time.
     32             - Call the function AUDIO_Play(
     33                                            pBuffer: pointer to the audio data file address
     34                                            Size: size of the buffer to be sent in Bytes
     35                                           )
     36                to start playing (for the first time) from the audio file/stream.
     37             - Call the function AUDIO_PauseResume(
     38                                                   Cmd: AUDIO_PAUSE (or 0) to pause playing or AUDIO_RESUME (or 
     39                                                         any value different from 0) to resume playing.
     40                                                   )
     41                 Note. After calling AUDIO_PauseResume() function for pause, only AUDIO_PauseResume() should be called
     42                    for resume (it is not allowed to call AUDIO_Play() in this case).
     43                 Note. This function should be called only when the audio file is played or paused (not stopped).
     44             - For each mode, you may need to implement the relative callback functions into your code.
     45                The Callback functions are named AUDIO_XXX_CallBack() and only their prototypes are declared in 
     46                the stm32f4_discovery_audio_codec.h file. (refer to the example for more details on the callbacks implementations)
     47             - To Stop playing, to modify the volume level or to mute, use the functions
     48                 AUDIO_Stop(), AUDIO_VolumeCtl() and AUDIO_Mute().
     49           
     50           Driver architecture:
     51           --------------------
     52           This driver is composed of three main layers:
     53             o High Audio Layer: consists of the function API exported in the audio_codec.h file
     54               (AUDIO_Init(), AUDIO_Play() ...)
     55             o Codec Control layer: consists of the functions API controlling the audio codec (CS43L22) and 
     56               included as local functions in file stm32f4_discovery_audio_codec.c (Codec_Init(), Codec_Play() ...)
     57             o Media Access Layer (MAL): which consists of functions allowing to access the media containing/
     58               providing the audio file/stream. These functions are also included as local functions into
     59               the stm32f4_discovery_audio_codec.c file (Audio_MAL_Init(), Audio_MAL_Play() ...)
     60            Each set of functions (layer) may be implemented independently of the others and customized when 
     61            needed.    
     62          2. Modes description:
     63          ---------------------
     64               + AUDIO_MAL_MODE_NORMAL : is suitable when the audio file is in a memory location.
     65               + AUDIO_MAL_MODE_CIRCULAR: is suitable when the audio data are read either from a 
     66                  memory location or from a device at real time (double buffer could be used).
     67          3. DMA interrupts description:
     68          ------------------------------
     69               + AUDIO_IT_TC_ENABLE: Enable this define to use the DMA end of transfer interrupt.
     70                  then, a callback should be implemented by user to perform specific actions
     71                  when the DMA has finished the transfer.
     72               + AUDIO_IT_HT_ENABLE: Enable this define to use the DMA end of half transfer interrupt.
     73                  then, a callback should be implemented by user to perform specific actions
     74                  when the DMA has reached the half of the buffer transfer (generally, it is useful 
     75                  to load the first half of buffer while DMA is loading from the second half).
     76               + AUDIO_IT_ER_ENABLE: Enable this define to manage the cases of error on DMA transfer.
     77          4. Known Limitations:
     78          ---------------------
     79             1- When using the Speaker, if the audio file quality is not high enough, the speaker output
     80                may produce high and uncomfortable noise level. To avoid this issue, to use speaker
     81                output properly, try to increase audio file sampling rate (typically higher than 48KHz).
     82                This operation will lead to larger file size.
     83             2- Communication with the audio codec (through I2C) may be corrupted if it is interrupted by some
     84                user interrupt routines (in this case, interrupts could be disabled just before the start of 
     85                communication then re-enabled when it is over). Note that this communication is only done at
     86                the configuration phase (AUDIO_Init() or AUDIO_Stop()) and when Volume control modification is 
     87                performed (AUDIO_VolumeCtl() or AUDIO_Mute()). When the audio data is played, no communication is 
     88                required with the audio codec.
     89            3- Parsing of audio file is not implemented (in order to determine audio file properties: Mono/Stereo, Data size, 
     90               File size, Audio Frequency, Audio Data header size ...). The configuration is fixed for the given audio file.
     91            4- Mono audio streaming is not supported (in order to play mono audio streams, each data should be sent twice 
     92               on the I2S or should be duplicated on the source buffer. Or convert the stream in stereo before playing).
     93            5- Supports only 16-bit audio data size.
     94          */
     95          
     96          
     97          /* Includes ------------------------------------------------------------------*/
     98          #include "audio_codec.h"
     99          #include "stm32746g_discovery.h"
    100          #include "stm32f7xx_hal_i2s.h"
    101          #include "audio.h"
    102          #include "main.h"
    103          
    104          
    105          /** 
    106            *      This file includes the low layer driver for CS43L22 Audio Codec
    107            */ 
    108          
    109          #define SPI_I2S_DMAReq_Tx               ((uint16_t)0x0002)
    110          #define SPI_I2S_DMAReq_Rx               ((uint16_t)0x0001)
    111          /* Mask for the bit EN of the I2S CFGR register */
    112          #define I2S_ENABLE_MASK                 0x0400
    113          /* Delay for the Codec to be correctly reset */
    114          #define CODEC_RESET_DELAY               0x4FFF
    115          /* The 7 bits Codec address (sent through I2C interface) */
    116          #define CODEC_ADDRESS                   0x94  
    117          #define CODEC_ADDRESS_R                   0x95
    118          
    119          
    120          
    121          /* This is an audio file stored in the Flash memory as a constant table of 16-bit data.
    122              The audio format should be WAV (raw / PCM) 16-bits, Stereo (sampling rate may be modified) */
    123          extern const uint16_t AUDIO_SAMPLE[];
    124          extern __IO uint8_t XferCplt;
    125          extern I2S_HandleTypeDef     hi2s3;
    126          
    127          #if DEBUG
    128              extern uint8_t pUARTBuf[128];
    129              extern UART_HandleTypeDef huart3;
    130          #endif 
    131          
    132          /* This structure is declared global because it is handled by two different functions */

   \                                 In section .bss, align 4
    133          DMA_InitTypeDef DMA_InitStructure; 
   \                     DMA_InitStructure:
   \   00000000                      DS8 48

   \                                 In section .bss, align 4
    134          DMA_InitTypeDef AUDIO_MAL_DMA_InitStructure;
   \                     AUDIO_MAL_DMA_InitStructure:
   \   00000000                      DS8 48

   \                                 In section .bss, align 4
    135          DMA_HandleTypeDef     DmaHandle;
   \                     DmaHandle:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
    136          I2C_HandleTypeDef     hi2c1,hi2c2;
   \                     hi2c1:
   \   00000000                      DS8 60

   \                                 In section .bss, align 4
   \                     hi2c2:
   \   00000000                      DS8 60
    137          

   \                                 In section .data, align 4
    138          uint32_t AudioTotalSize = 0xFFFF; /* This variable holds the total size of the audio file */
   \                     AudioTotalSize:
   \   00000000   0x0000FFFF         DC32 65535

   \                                 In section .data, align 4
    139          uint32_t AudioRemSize   = 0xFFFF; /* This variable holds the remaining data in audio file */
   \                     AudioRemSize:
   \   00000000   0x0000FFFF         DC32 65535

   \                                 In section .data, align 4
    140          __IO uint32_t  CODECTimeout = CODEC_LONG_TIMEOUT;   
   \                     CODECTimeout:
   \   00000000   0x0012C000         DC32 1228800

   \                                 In section .data, align 4
    141          __IO uint32_t CurrAudioInterface = AUDIO_INTERFACE_I2S; //AUDIO_INTERFACE_DAC
   \                     CurrAudioInterface:
   \   00000000   0x00000001         DC32 1

   \                                 In section .bss, align 1
    142          __IO uint8_t OutputDev = 0;
   \                     OutputDev:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    143          uint16_t *CurrentPos ;             /* This variable holds the current position of audio pointer */
   \                     CurrentPos:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
    144          uint8_t Volume=80;
   \                     Volume:
   \   00000000   0x50               DC8 80
    145          
    146          
    147          /*-----------------------------------
    148                                     Audio Codec functions 
    149                                              ------------------------------------------*/
    150          static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq);
    151          static uint32_t Codec_DeInit(void);
    152          static uint32_t Codec_Play(void);
    153          static uint32_t Codec_PauseResume(uint32_t Cmd);
    154          static uint32_t Codec_Stop(uint32_t Cmd);
    155          static uint32_t Codec_VolumeCtrl(uint8_t Volume);
    156          static uint32_t Codec_Mute(uint32_t Cmd);
    157          static void     Codec_CtrlInterface_Init(void);
    158          static void     Codec_CtrlInterface_DeInit(void);
    159          static void     Codec_AudioInterface_Init(uint32_t AudioFreq);
    160          static void     Codec_AudioInterface_DeInit(void);
    161          static void     Codec_Reset(void);
    162          static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue);
    163          static uint32_t Codec_ReadRegister(uint8_t RegisterAddr);
    164          static void     Codec_GPIO_Init(void);
    165          static void     Codec_GPIO_DeInit(void);
    166          static void     Delay(__IO uint32_t nCount);
    167          static void     I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState);
    168          static void     SPI_I2S_DeInit(SPI_TypeDef* SPIx);
    169          static void     DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
    170          static void     SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
    171          static void     Audio_MAL_DeInit(void);
    172          static void     Audio_MAL_PauseResume(uint32_t Cmd, uint32_t Addr);
    173          static void     Audio_MAL_Stop(void);
    174          /*----------------------------------------------------------------------------*/
    175          
    176          /**
    177            * @brief  Configure the audio peripherals.
    178            * @param  OutputDevice: OUTPUT_DEVICE_SPEAKER, OUTPUT_DEVICE_HEADPHONE,
    179            *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
    180            * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
    181            * @param  AudioFreq: Audio frequency used to play the audio stream.
    182            * @retval 0 if correct communication, else wrong communication
    183            */

   \                                 In section .text, align 2, keep-with-next
    184          uint32_t AUDIO_Init(uint16_t OutputDevice, uint8_t Vol, uint32_t AudioFreq)
    185          {    
   \                     AUDIO_Init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    186          	/* Perform low layer Codec initialization */
    187          	if (Codec_Init(OutputDevice, VOLUME_CONVERT(Vol), AudioFreq)!=HAL_OK)
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable15
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2865             CMP      R0,#+101
   \   00000010   0xDB01             BLT.N    ??AUDIO_Init_0
   \   00000012   0x2164             MOVS     R1,#+100
   \   00000014   0xE007             B.N      ??AUDIO_Init_1
   \                     ??AUDIO_Init_0: (+1)
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable15
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x21FF             MOVS     R1,#+255
   \   0000001E   0x4348             MULS     R0,R1,R0
   \   00000020   0x2164             MOVS     R1,#+100
   \   00000022   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \                     ??AUDIO_Init_1: (+1)
   \   00000026   0x0032             MOVS     R2,R6
   \   00000028   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002E   0x.... 0x....      BL       Codec_Init
    188          	{
    189                      //BSP_LED_Toggle(LED2);
    190          	}
    191          	
    192          	return 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
    193          }
    194          
    195          /**
    196            * @brief  Deinitializes all the resources used by the codec (those initialized
    197            *         by AUDIO_Init() function). 
    198            * @param  None
    199            * @retval 0 if correct communication, else wrong communication
    200            */

   \                                 In section .text, align 2, keep-with-next
    201          uint32_t AUDIO_DeInit(void)
    202          { 
   \                     AUDIO_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    203            /* DeInitialize the Media layer */
    204            Audio_MAL_DeInit();
   \   00000002   0x.... 0x....      BL       Audio_MAL_DeInit
    205            
    206            /* DeInitialize Codec */  
    207            Codec_DeInit();  
   \   00000006   0x.... 0x....      BL       Codec_DeInit
    208            
    209            return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
    210          }
    211          
    212          /**
    213            * @brief  Starts playing audio stream from a data buffer for a determined size. 
    214            * @param  pBuffer: Pointer to the buffer 
    215            * @param  Size: Number of audio data BYTES.
    216            * @retval 0 if correct communication, else wrong communication
    217            */

   \                                 In section .text, align 2, keep-with-next
    218          uint32_t AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
    219          {
   \                     AUDIO_Play: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    220            /* Set the total number of data to be played (count in half-word) */
    221            AudioTotalSize = Size;
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable13
   \   0000000A   0x6005             STR      R5,[R0, #+0]
    222          
    223            /* Call the audio Codec Play function */
    224            Codec_Play();
   \   0000000C   0x.... 0x....      BL       Codec_Play
    225            
    226            /* Update the Media layer and enable it for play */  
    227            Audio_MAL_Play((uint32_t)pBuffer, (uint16_t)(DMA_MAX(Size/4)));
   \   00000010   0x08A8             LSRS     R0,R5,#+2
   \   00000012   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000016   0xD201             BCS.N    ??AUDIO_Play_0
   \   00000018   0x08A9             LSRS     R1,R5,#+2
   \   0000001A   0xE001             B.N      ??AUDIO_Play_1
   \                     ??AUDIO_Play_0: (+1)
   \   0000001C   0xF64F 0x71FF      MOVW     R1,#+65535
   \                     ??AUDIO_Play_1: (+1)
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       Audio_MAL_Play
    228            
    229            /* Update the remaining number of data to be played */
    230            AudioRemSize = (Size/2) - DMA_MAX(AudioTotalSize)/2;//1 sop1hc: change "DMA_MAX(AudioTotalSize)" to "DMA_MAX(AudioTotalSize)/2"
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable13
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000032   0xD203             BCS.N    ??AUDIO_Play_2
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable13
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xE001             B.N      ??AUDIO_Play_3
   \                     ??AUDIO_Play_2: (+1)
   \   0000003C   0xF64F 0x70FF      MOVW     R0,#+65535
   \                     ??AUDIO_Play_3: (+1)
   \   00000040   0x0869             LSRS     R1,R5,#+1
   \   00000042   0xEBB1 0x0050      SUBS     R0,R1,R0, LSR #+1
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable14
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    231            
    232            /* Update the current audio pointer position */
    233            CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable13
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000056   0xD203             BCS.N    ??AUDIO_Play_4
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable13
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0xE001             B.N      ??AUDIO_Play_5
   \                     ??AUDIO_Play_4: (+1)
   \   00000060   0xF64F 0x70FF      MOVW     R0,#+65535
   \                     ??AUDIO_Play_5: (+1)
   \   00000064   0xEB14 0x0040      ADDS     R0,R4,R0, LSL #+1
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable16
   \   0000006C   0x6008             STR      R0,[R1, #+0]
    234            
    235            return 0;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    236          }
    237          
    238          /**
    239            * @brief  This function Pauses or Resumes the audio file stream. In case
    240            *         of using DMA, the DMA Pause feature is used. In all cases the I2S 
    241            *         peripheral is disabled. 
    242            * 
    243            * @WARNING When calling AUDIO_PauseResume() function for pause, only
    244            *          this function should be called for resume (use of AUDIO_Play() 
    245            *          function for resume could lead to unexpected behavior).
    246            * 
    247            * @param  Cmd: AUDIO_PAUSE (or 0) to pause, AUDIO_RESUME (or any value different
    248            *         from 0) to resume. 
    249            * @retval 0 if correct communication, else wrong communication
    250            */

   \                                 In section .text, align 2, keep-with-next
    251          uint32_t AUDIO_PauseResume(uint32_t Cmd)
    252          {    
   \                     AUDIO_PauseResume: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    253            /* Call the Audio Codec Pause/Resume function */
    254            if (Codec_PauseResume(Cmd) != 0)
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       Codec_PauseResume
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD001             BEQ.N    ??AUDIO_PauseResume_0
    255            {
    256              return 1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE004             B.N      ??AUDIO_PauseResume_1
    257            }
    258            else
    259            {
    260              /* Call the Media layer pause/resume function */
    261              Audio_MAL_PauseResume(Cmd, 0);
   \                     ??AUDIO_PauseResume_0: (+1)
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       Audio_MAL_PauseResume
    262              
    263              /* Return 0 if all operations are OK */
    264              return 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??AUDIO_PauseResume_1: (+1)
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    265            }
    266          }
    267          
    268          /**
    269            * @brief  Stops audio playing and Power down the Audio Codec. 
    270            * @param  Option: could be one of the following parameters 
    271            *           - CODEC_PDWN_SW: for software power off (by writing registers). 
    272            *                            Then no need to reconfigure the Codec after power on.
    273            *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
    274            *                            Then need to reconfigure the Codec after power on.  
    275            * @retval 0 if correct communication, else wrong communication
    276            */

   \                                 In section .text, align 2, keep-with-next
    277          uint32_t AUDIO_Stop(uint32_t Option)
    278          {
   \                     AUDIO_Stop: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    279            /* Call Audio Codec Stop function */
    280            if (Codec_Stop(Option) != 0)
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       Codec_Stop
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD001             BEQ.N    ??AUDIO_Stop_0
    281            {
    282              return 1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE008             B.N      ??AUDIO_Stop_1
    283            }
    284            else
    285            {
    286              /* Call Media layer Stop function */
    287              Audio_MAL_Stop();
   \                     ??AUDIO_Stop_0: (+1)
   \   00000012   0x.... 0x....      BL       Audio_MAL_Stop
    288              
    289              /* Update the remaining data number */
    290              AudioRemSize = AudioTotalSize;    
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable13
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable14
   \   00000020   0x6008             STR      R0,[R1, #+0]
    291              
    292              /* Return 0 when all operations are correctly done */
    293              return 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \                     ??AUDIO_Stop_1: (+1)
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    294            }
    295          }
    296          
    297          /**
    298            * @brief  Controls the current audio volume level. 
    299            * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
    300            *         Mute and 100 for Max volume level).
    301            * @retval 0 if correct communication, else wrong communication
    302            */

   \                                 In section .text, align 2, keep-with-next
    303          uint32_t AUDIO_VolumeCtl(uint8_t Vol)
    304          {
   \                     AUDIO_VolumeCtl: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    305            /* Call the codec volume control function with converted volume value */
    306            return (Codec_VolumeCtrl(VOLUME_CONVERT(Vol)));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable15
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2865             CMP      R0,#+101
   \   0000000C   0xDB01             BLT.N    ??AUDIO_VolumeCtl_0
   \   0000000E   0x2064             MOVS     R0,#+100
   \   00000010   0xE007             B.N      ??AUDIO_VolumeCtl_1
   \                     ??AUDIO_VolumeCtl_0: (+1)
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable15
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x21FF             MOVS     R1,#+255
   \   0000001A   0x4348             MULS     R0,R1,R0
   \   0000001C   0x2164             MOVS     R1,#+100
   \   0000001E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \                     ??AUDIO_VolumeCtl_1: (+1)
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x.... 0x....      BL       Codec_VolumeCtrl
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    307          }
    308          
    309          /**
    310            * @brief  Enables or disables the MUTE mode by software 
    311            * @param  Command: could be AUDIO_MUTE_ON to mute sound or AUDIO_MUTE_OFF to 
    312            *         unmute the codec and restore previous volume level.
    313            * @retval 0 if correct communication, else wrong communication
    314            */

   \                                 In section .text, align 2, keep-with-next
    315          uint32_t AUDIO_Mute(uint32_t Cmd)
    316          { 
   \                     AUDIO_Mute: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    317            /* Call the Codec Mute function */
    318            return (Codec_Mute(Cmd));
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       Codec_Mute
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    319          }
    320          
    321          
    322          /**
    323            * @brief  This function handles main I2S interrupt. 
    324            * @param  None
    325            * @retval 0 if correct communication, else wrong communication
    326            */

   \                                 In section .text, align 2, keep-with-next
    327          void DMA1_Stream7_IRQHandler(void)
    328          { 
   \                     DMA1_Stream7_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    329          	/* Transfer Complete Interrupt management ***********************************/
    330          	  if(__HAL_DMA_GET_FLAG(hi2s3.hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(hi2s3.hdmatx)) != RESET)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000006   0x6B00             LDR      R0,[R0, #+48]
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable16_2  ;; 0x40026459
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xF0C0 0x8087      BCC.W    ??DMA1_Stream7_IRQHandler_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable16_3  ;; 0x40026404
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000001E   0x6B09             LDR      R1,[R1, #+48]
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable16_4  ;; 0x40026010
   \   00000026   0x4291             CMP      R1,R2
   \   00000028   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_1
   \   0000002A   0x2120             MOVS     R1,#+32
   \   0000002C   0xE077             B.N      ??DMA1_Stream7_IRQHandler_2
   \                     ??DMA1_Stream7_IRQHandler_1: (+1)
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000032   0x6B09             LDR      R1,[R1, #+48]
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x.... 0x....      LDR.W    R2,??DataTable16_5  ;; 0x40026410
   \   0000003A   0x4291             CMP      R1,R2
   \   0000003C   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_3
   \   0000003E   0x2120             MOVS     R1,#+32
   \   00000040   0xE06D             B.N      ??DMA1_Stream7_IRQHandler_2
   \                     ??DMA1_Stream7_IRQHandler_3: (+1)
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000046   0x6B09             LDR      R1,[R1, #+48]
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x.... 0x....      LDR.W    R2,??DataTable17  ;; 0x40026070
   \   0000004E   0x4291             CMP      R1,R2
   \   00000050   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_4
   \   00000052   0x2120             MOVS     R1,#+32
   \   00000054   0xE063             B.N      ??DMA1_Stream7_IRQHandler_2
   \                     ??DMA1_Stream7_IRQHandler_4: (+1)
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000005A   0x6B09             LDR      R1,[R1, #+48]
   \   0000005C   0x6809             LDR      R1,[R1, #+0]
   \   0000005E   0x.... 0x....      LDR.W    R2,??DataTable17_1  ;; 0x40026470
   \   00000062   0x4291             CMP      R1,R2
   \   00000064   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_5
   \   00000066   0x2120             MOVS     R1,#+32
   \   00000068   0xE059             B.N      ??DMA1_Stream7_IRQHandler_2
   \                     ??DMA1_Stream7_IRQHandler_5: (+1)
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000006E   0x6B09             LDR      R1,[R1, #+48]
   \   00000070   0x6809             LDR      R1,[R1, #+0]
   \   00000072   0x.... 0x....      LDR.W    R2,??DataTable17_2  ;; 0x40026028
   \   00000076   0x4291             CMP      R1,R2
   \   00000078   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_6
   \   0000007A   0xF44F 0x6100      MOV      R1,#+2048
   \   0000007E   0xE04E             B.N      ??DMA1_Stream7_IRQHandler_2
   \                     ??DMA1_Stream7_IRQHandler_6: (+1)
   \   00000080   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000084   0x6B09             LDR      R1,[R1, #+48]
   \   00000086   0x6809             LDR      R1,[R1, #+0]
   \   00000088   0x.... 0x....      LDR.W    R2,??DataTable17_3  ;; 0x40026428
   \   0000008C   0x4291             CMP      R1,R2
   \   0000008E   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_7
   \   00000090   0xF44F 0x6100      MOV      R1,#+2048
   \   00000094   0xE043             B.N      ??DMA1_Stream7_IRQHandler_2
   \                     ??DMA1_Stream7_IRQHandler_7: (+1)
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000009A   0x6B09             LDR      R1,[R1, #+48]
   \   0000009C   0x6809             LDR      R1,[R1, #+0]
   \   0000009E   0x.... 0x....      LDR.W    R2,??DataTable17_4  ;; 0x40026088
   \   000000A2   0x4291             CMP      R1,R2
   \   000000A4   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_8
   \   000000A6   0xF44F 0x6100      MOV      R1,#+2048
   \   000000AA   0xE038             B.N      ??DMA1_Stream7_IRQHandler_2
   \                     ??DMA1_Stream7_IRQHandler_8: (+1)
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000000B0   0x6B09             LDR      R1,[R1, #+48]
   \   000000B2   0x6809             LDR      R1,[R1, #+0]
   \   000000B4   0x.... 0x....      LDR.W    R2,??DataTable18  ;; 0x40026488
   \   000000B8   0x4291             CMP      R1,R2
   \   000000BA   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_9
   \   000000BC   0xF44F 0x6100      MOV      R1,#+2048
   \   000000C0   0xE02D             B.N      ??DMA1_Stream7_IRQHandler_2
   \                     ??DMA1_Stream7_IRQHandler_9: (+1)
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000000C6   0x6B09             LDR      R1,[R1, #+48]
   \   000000C8   0x6809             LDR      R1,[R1, #+0]
   \   000000CA   0x.... 0x....      LDR.W    R2,??DataTable19  ;; 0x40026040
   \   000000CE   0x4291             CMP      R1,R2
   \   000000D0   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_10
   \   000000D2   0xF45F 0x1100      MOVS     R1,#+2097152
   \   000000D6   0xE022             B.N      ??DMA1_Stream7_IRQHandler_2
   \                     ??DMA1_Stream7_IRQHandler_10: (+1)
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000000DC   0x6B09             LDR      R1,[R1, #+48]
   \   000000DE   0x6809             LDR      R1,[R1, #+0]
   \   000000E0   0x.... 0x....      LDR.W    R2,??DataTable19_1  ;; 0x40026440
   \   000000E4   0x4291             CMP      R1,R2
   \   000000E6   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_11
   \   000000E8   0xF45F 0x1100      MOVS     R1,#+2097152
   \   000000EC   0xE017             B.N      ??DMA1_Stream7_IRQHandler_2
   \                     ??DMA1_Stream7_IRQHandler_11: (+1)
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000000F2   0x6B09             LDR      R1,[R1, #+48]
   \   000000F4   0x6809             LDR      R1,[R1, #+0]
   \   000000F6   0x.... 0x....      LDR.W    R2,??DataTable19_2  ;; 0x400260a0
   \   000000FA   0x4291             CMP      R1,R2
   \   000000FC   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_12
   \   000000FE   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000102   0xE00C             B.N      ??DMA1_Stream7_IRQHandler_2
   \                     ??DMA1_Stream7_IRQHandler_12: (+1)
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000108   0x6B09             LDR      R1,[R1, #+48]
   \   0000010A   0x6809             LDR      R1,[R1, #+0]
   \   0000010C   0x.... 0x....      LDR.W    R2,??DataTable19_3  ;; 0x400264a0
   \   00000110   0x4291             CMP      R1,R2
   \   00000112   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_13
   \   00000114   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000118   0xE001             B.N      ??DMA1_Stream7_IRQHandler_2
   \                     ??DMA1_Stream7_IRQHandler_13: (+1)
   \   0000011A   0xF05F 0x6100      MOVS     R1,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_2: (+1)
   \   0000011E   0x4008             ANDS     R0,R1,R0
   \   00000120   0xE1A5             B.N      ??DMA1_Stream7_IRQHandler_14
   \                     ??DMA1_Stream7_IRQHandler_0: (+1)
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000126   0x6B00             LDR      R0,[R0, #+48]
   \   00000128   0x6800             LDR      R0,[R0, #+0]
   \   0000012A   0x.... 0x....      LDR.W    R1,??DataTable19_4  ;; 0x400260b9
   \   0000012E   0x4288             CMP      R0,R1
   \   00000130   0xF0C0 0x8087      BCC.W    ??DMA1_Stream7_IRQHandler_15
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable19_5  ;; 0x40026400
   \   00000138   0x6800             LDR      R0,[R0, #+0]
   \   0000013A   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000013E   0x6B09             LDR      R1,[R1, #+48]
   \   00000140   0x6809             LDR      R1,[R1, #+0]
   \   00000142   0x.... 0x....      LDR.W    R2,??DataTable16_4  ;; 0x40026010
   \   00000146   0x4291             CMP      R1,R2
   \   00000148   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_16
   \   0000014A   0x2120             MOVS     R1,#+32
   \   0000014C   0xE077             B.N      ??DMA1_Stream7_IRQHandler_17
   \                     ??DMA1_Stream7_IRQHandler_16: (+1)
   \   0000014E   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000152   0x6B09             LDR      R1,[R1, #+48]
   \   00000154   0x6809             LDR      R1,[R1, #+0]
   \   00000156   0x.... 0x....      LDR.W    R2,??DataTable16_5  ;; 0x40026410
   \   0000015A   0x4291             CMP      R1,R2
   \   0000015C   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_18
   \   0000015E   0x2120             MOVS     R1,#+32
   \   00000160   0xE06D             B.N      ??DMA1_Stream7_IRQHandler_17
   \                     ??DMA1_Stream7_IRQHandler_18: (+1)
   \   00000162   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000166   0x6B09             LDR      R1,[R1, #+48]
   \   00000168   0x6809             LDR      R1,[R1, #+0]
   \   0000016A   0x.... 0x....      LDR.W    R2,??DataTable17  ;; 0x40026070
   \   0000016E   0x4291             CMP      R1,R2
   \   00000170   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_19
   \   00000172   0x2120             MOVS     R1,#+32
   \   00000174   0xE063             B.N      ??DMA1_Stream7_IRQHandler_17
   \                     ??DMA1_Stream7_IRQHandler_19: (+1)
   \   00000176   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000017A   0x6B09             LDR      R1,[R1, #+48]
   \   0000017C   0x6809             LDR      R1,[R1, #+0]
   \   0000017E   0x.... 0x....      LDR.W    R2,??DataTable17_1  ;; 0x40026470
   \   00000182   0x4291             CMP      R1,R2
   \   00000184   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_20
   \   00000186   0x2120             MOVS     R1,#+32
   \   00000188   0xE059             B.N      ??DMA1_Stream7_IRQHandler_17
   \                     ??DMA1_Stream7_IRQHandler_20: (+1)
   \   0000018A   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000018E   0x6B09             LDR      R1,[R1, #+48]
   \   00000190   0x6809             LDR      R1,[R1, #+0]
   \   00000192   0x.... 0x....      LDR.W    R2,??DataTable17_2  ;; 0x40026028
   \   00000196   0x4291             CMP      R1,R2
   \   00000198   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_21
   \   0000019A   0xF44F 0x6100      MOV      R1,#+2048
   \   0000019E   0xE04E             B.N      ??DMA1_Stream7_IRQHandler_17
   \                     ??DMA1_Stream7_IRQHandler_21: (+1)
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000001A4   0x6B09             LDR      R1,[R1, #+48]
   \   000001A6   0x6809             LDR      R1,[R1, #+0]
   \   000001A8   0x.... 0x....      LDR.W    R2,??DataTable17_3  ;; 0x40026428
   \   000001AC   0x4291             CMP      R1,R2
   \   000001AE   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_22
   \   000001B0   0xF44F 0x6100      MOV      R1,#+2048
   \   000001B4   0xE043             B.N      ??DMA1_Stream7_IRQHandler_17
   \                     ??DMA1_Stream7_IRQHandler_22: (+1)
   \   000001B6   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000001BA   0x6B09             LDR      R1,[R1, #+48]
   \   000001BC   0x6809             LDR      R1,[R1, #+0]
   \   000001BE   0x.... 0x....      LDR.W    R2,??DataTable17_4  ;; 0x40026088
   \   000001C2   0x4291             CMP      R1,R2
   \   000001C4   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_23
   \   000001C6   0xF44F 0x6100      MOV      R1,#+2048
   \   000001CA   0xE038             B.N      ??DMA1_Stream7_IRQHandler_17
   \                     ??DMA1_Stream7_IRQHandler_23: (+1)
   \   000001CC   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000001D0   0x6B09             LDR      R1,[R1, #+48]
   \   000001D2   0x6809             LDR      R1,[R1, #+0]
   \   000001D4   0x.... 0x....      LDR.W    R2,??DataTable18  ;; 0x40026488
   \   000001D8   0x4291             CMP      R1,R2
   \   000001DA   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_24
   \   000001DC   0xF44F 0x6100      MOV      R1,#+2048
   \   000001E0   0xE02D             B.N      ??DMA1_Stream7_IRQHandler_17
   \                     ??DMA1_Stream7_IRQHandler_24: (+1)
   \   000001E2   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000001E6   0x6B09             LDR      R1,[R1, #+48]
   \   000001E8   0x6809             LDR      R1,[R1, #+0]
   \   000001EA   0x.... 0x....      LDR.W    R2,??DataTable19  ;; 0x40026040
   \   000001EE   0x4291             CMP      R1,R2
   \   000001F0   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_25
   \   000001F2   0xF45F 0x1100      MOVS     R1,#+2097152
   \   000001F6   0xE022             B.N      ??DMA1_Stream7_IRQHandler_17
   \                     ??DMA1_Stream7_IRQHandler_25: (+1)
   \   000001F8   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000001FC   0x6B09             LDR      R1,[R1, #+48]
   \   000001FE   0x6809             LDR      R1,[R1, #+0]
   \   00000200   0x.... 0x....      LDR.W    R2,??DataTable19_1  ;; 0x40026440
   \   00000204   0x4291             CMP      R1,R2
   \   00000206   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_26
   \   00000208   0xF45F 0x1100      MOVS     R1,#+2097152
   \   0000020C   0xE017             B.N      ??DMA1_Stream7_IRQHandler_17
   \                     ??DMA1_Stream7_IRQHandler_26: (+1)
   \   0000020E   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000212   0x6B09             LDR      R1,[R1, #+48]
   \   00000214   0x6809             LDR      R1,[R1, #+0]
   \   00000216   0x.... 0x....      LDR.W    R2,??DataTable19_2  ;; 0x400260a0
   \   0000021A   0x4291             CMP      R1,R2
   \   0000021C   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_27
   \   0000021E   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000222   0xE00C             B.N      ??DMA1_Stream7_IRQHandler_17
   \                     ??DMA1_Stream7_IRQHandler_27: (+1)
   \   00000224   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000228   0x6B09             LDR      R1,[R1, #+48]
   \   0000022A   0x6809             LDR      R1,[R1, #+0]
   \   0000022C   0x.... 0x....      LDR.W    R2,??DataTable19_3  ;; 0x400264a0
   \   00000230   0x4291             CMP      R1,R2
   \   00000232   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_28
   \   00000234   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000238   0xE001             B.N      ??DMA1_Stream7_IRQHandler_17
   \                     ??DMA1_Stream7_IRQHandler_28: (+1)
   \   0000023A   0xF05F 0x6100      MOVS     R1,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_17: (+1)
   \   0000023E   0x4008             ANDS     R0,R1,R0
   \   00000240   0xE115             B.N      ??DMA1_Stream7_IRQHandler_14
   \                     ??DMA1_Stream7_IRQHandler_15: (+1)
   \   00000242   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000246   0x6B00             LDR      R0,[R0, #+48]
   \   00000248   0x6800             LDR      R0,[R0, #+0]
   \   0000024A   0x.... 0x....      LDR.W    R1,??DataTable20  ;; 0x40026059
   \   0000024E   0x4288             CMP      R0,R1
   \   00000250   0xF0C0 0x8087      BCC.W    ??DMA1_Stream7_IRQHandler_29
   \   00000254   0x.... 0x....      LDR.W    R0,??DataTable20_1  ;; 0x40026004
   \   00000258   0x6800             LDR      R0,[R0, #+0]
   \   0000025A   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000025E   0x6B09             LDR      R1,[R1, #+48]
   \   00000260   0x6809             LDR      R1,[R1, #+0]
   \   00000262   0x.... 0x....      LDR.W    R2,??DataTable16_4  ;; 0x40026010
   \   00000266   0x4291             CMP      R1,R2
   \   00000268   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_30
   \   0000026A   0x2120             MOVS     R1,#+32
   \   0000026C   0xE077             B.N      ??DMA1_Stream7_IRQHandler_31
   \                     ??DMA1_Stream7_IRQHandler_30: (+1)
   \   0000026E   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000272   0x6B09             LDR      R1,[R1, #+48]
   \   00000274   0x6809             LDR      R1,[R1, #+0]
   \   00000276   0x.... 0x....      LDR.W    R2,??DataTable16_5  ;; 0x40026410
   \   0000027A   0x4291             CMP      R1,R2
   \   0000027C   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_32
   \   0000027E   0x2120             MOVS     R1,#+32
   \   00000280   0xE06D             B.N      ??DMA1_Stream7_IRQHandler_31
   \                     ??DMA1_Stream7_IRQHandler_32: (+1)
   \   00000282   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000286   0x6B09             LDR      R1,[R1, #+48]
   \   00000288   0x6809             LDR      R1,[R1, #+0]
   \   0000028A   0x.... 0x....      LDR.W    R2,??DataTable17  ;; 0x40026070
   \   0000028E   0x4291             CMP      R1,R2
   \   00000290   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_33
   \   00000292   0x2120             MOVS     R1,#+32
   \   00000294   0xE063             B.N      ??DMA1_Stream7_IRQHandler_31
   \                     ??DMA1_Stream7_IRQHandler_33: (+1)
   \   00000296   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000029A   0x6B09             LDR      R1,[R1, #+48]
   \   0000029C   0x6809             LDR      R1,[R1, #+0]
   \   0000029E   0x.... 0x....      LDR.W    R2,??DataTable17_1  ;; 0x40026470
   \   000002A2   0x4291             CMP      R1,R2
   \   000002A4   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_34
   \   000002A6   0x2120             MOVS     R1,#+32
   \   000002A8   0xE059             B.N      ??DMA1_Stream7_IRQHandler_31
   \                     ??DMA1_Stream7_IRQHandler_34: (+1)
   \   000002AA   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000002AE   0x6B09             LDR      R1,[R1, #+48]
   \   000002B0   0x6809             LDR      R1,[R1, #+0]
   \   000002B2   0x.... 0x....      LDR.W    R2,??DataTable17_2  ;; 0x40026028
   \   000002B6   0x4291             CMP      R1,R2
   \   000002B8   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_35
   \   000002BA   0xF44F 0x6100      MOV      R1,#+2048
   \   000002BE   0xE04E             B.N      ??DMA1_Stream7_IRQHandler_31
   \                     ??DMA1_Stream7_IRQHandler_35: (+1)
   \   000002C0   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000002C4   0x6B09             LDR      R1,[R1, #+48]
   \   000002C6   0x6809             LDR      R1,[R1, #+0]
   \   000002C8   0x.... 0x....      LDR.W    R2,??DataTable17_3  ;; 0x40026428
   \   000002CC   0x4291             CMP      R1,R2
   \   000002CE   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_36
   \   000002D0   0xF44F 0x6100      MOV      R1,#+2048
   \   000002D4   0xE043             B.N      ??DMA1_Stream7_IRQHandler_31
   \                     ??DMA1_Stream7_IRQHandler_36: (+1)
   \   000002D6   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000002DA   0x6B09             LDR      R1,[R1, #+48]
   \   000002DC   0x6809             LDR      R1,[R1, #+0]
   \   000002DE   0x.... 0x....      LDR.W    R2,??DataTable17_4  ;; 0x40026088
   \   000002E2   0x4291             CMP      R1,R2
   \   000002E4   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_37
   \   000002E6   0xF44F 0x6100      MOV      R1,#+2048
   \   000002EA   0xE038             B.N      ??DMA1_Stream7_IRQHandler_31
   \                     ??DMA1_Stream7_IRQHandler_37: (+1)
   \   000002EC   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000002F0   0x6B09             LDR      R1,[R1, #+48]
   \   000002F2   0x6809             LDR      R1,[R1, #+0]
   \   000002F4   0x.... 0x....      LDR.W    R2,??DataTable18  ;; 0x40026488
   \   000002F8   0x4291             CMP      R1,R2
   \   000002FA   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_38
   \   000002FC   0xF44F 0x6100      MOV      R1,#+2048
   \   00000300   0xE02D             B.N      ??DMA1_Stream7_IRQHandler_31
   \                     ??DMA1_Stream7_IRQHandler_38: (+1)
   \   00000302   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000306   0x6B09             LDR      R1,[R1, #+48]
   \   00000308   0x6809             LDR      R1,[R1, #+0]
   \   0000030A   0x.... 0x....      LDR.W    R2,??DataTable19  ;; 0x40026040
   \   0000030E   0x4291             CMP      R1,R2
   \   00000310   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_39
   \   00000312   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000316   0xE022             B.N      ??DMA1_Stream7_IRQHandler_31
   \                     ??DMA1_Stream7_IRQHandler_39: (+1)
   \   00000318   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000031C   0x6B09             LDR      R1,[R1, #+48]
   \   0000031E   0x6809             LDR      R1,[R1, #+0]
   \   00000320   0x.... 0x....      LDR.W    R2,??DataTable19_1  ;; 0x40026440
   \   00000324   0x4291             CMP      R1,R2
   \   00000326   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_40
   \   00000328   0xF45F 0x1100      MOVS     R1,#+2097152
   \   0000032C   0xE017             B.N      ??DMA1_Stream7_IRQHandler_31
   \                     ??DMA1_Stream7_IRQHandler_40: (+1)
   \   0000032E   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000332   0x6B09             LDR      R1,[R1, #+48]
   \   00000334   0x6809             LDR      R1,[R1, #+0]
   \   00000336   0x.... 0x....      LDR.W    R2,??DataTable19_2  ;; 0x400260a0
   \   0000033A   0x4291             CMP      R1,R2
   \   0000033C   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_41
   \   0000033E   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000342   0xE00C             B.N      ??DMA1_Stream7_IRQHandler_31
   \                     ??DMA1_Stream7_IRQHandler_41: (+1)
   \   00000344   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000348   0x6B09             LDR      R1,[R1, #+48]
   \   0000034A   0x6809             LDR      R1,[R1, #+0]
   \   0000034C   0x.... 0x....      LDR.W    R2,??DataTable19_3  ;; 0x400264a0
   \   00000350   0x4291             CMP      R1,R2
   \   00000352   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_42
   \   00000354   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000358   0xE001             B.N      ??DMA1_Stream7_IRQHandler_31
   \                     ??DMA1_Stream7_IRQHandler_42: (+1)
   \   0000035A   0xF05F 0x6100      MOVS     R1,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_31: (+1)
   \   0000035E   0x4008             ANDS     R0,R1,R0
   \   00000360   0xE085             B.N      ??DMA1_Stream7_IRQHandler_14
   \                     ??DMA1_Stream7_IRQHandler_29: (+1)
   \   00000362   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x40026000
   \   00000366   0x6800             LDR      R0,[R0, #+0]
   \   00000368   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000036C   0x6B09             LDR      R1,[R1, #+48]
   \   0000036E   0x6809             LDR      R1,[R1, #+0]
   \   00000370   0x.... 0x....      LDR.W    R2,??DataTable16_4  ;; 0x40026010
   \   00000374   0x4291             CMP      R1,R2
   \   00000376   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_43
   \   00000378   0x2120             MOVS     R1,#+32
   \   0000037A   0xE077             B.N      ??DMA1_Stream7_IRQHandler_44
   \                     ??DMA1_Stream7_IRQHandler_43: (+1)
   \   0000037C   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000380   0x6B09             LDR      R1,[R1, #+48]
   \   00000382   0x6809             LDR      R1,[R1, #+0]
   \   00000384   0x.... 0x....      LDR.W    R2,??DataTable16_5  ;; 0x40026410
   \   00000388   0x4291             CMP      R1,R2
   \   0000038A   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_45
   \   0000038C   0x2120             MOVS     R1,#+32
   \   0000038E   0xE06D             B.N      ??DMA1_Stream7_IRQHandler_44
   \                     ??DMA1_Stream7_IRQHandler_45: (+1)
   \   00000390   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000394   0x6B09             LDR      R1,[R1, #+48]
   \   00000396   0x6809             LDR      R1,[R1, #+0]
   \   00000398   0x.... 0x....      LDR.W    R2,??DataTable17  ;; 0x40026070
   \   0000039C   0x4291             CMP      R1,R2
   \   0000039E   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_46
   \   000003A0   0x2120             MOVS     R1,#+32
   \   000003A2   0xE063             B.N      ??DMA1_Stream7_IRQHandler_44
   \                     ??DMA1_Stream7_IRQHandler_46: (+1)
   \   000003A4   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000003A8   0x6B09             LDR      R1,[R1, #+48]
   \   000003AA   0x6809             LDR      R1,[R1, #+0]
   \   000003AC   0x.... 0x....      LDR.W    R2,??DataTable17_1  ;; 0x40026470
   \   000003B0   0x4291             CMP      R1,R2
   \   000003B2   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_47
   \   000003B4   0x2120             MOVS     R1,#+32
   \   000003B6   0xE059             B.N      ??DMA1_Stream7_IRQHandler_44
   \                     ??DMA1_Stream7_IRQHandler_47: (+1)
   \   000003B8   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000003BC   0x6B09             LDR      R1,[R1, #+48]
   \   000003BE   0x6809             LDR      R1,[R1, #+0]
   \   000003C0   0x.... 0x....      LDR.W    R2,??DataTable17_2  ;; 0x40026028
   \   000003C4   0x4291             CMP      R1,R2
   \   000003C6   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_48
   \   000003C8   0xF44F 0x6100      MOV      R1,#+2048
   \   000003CC   0xE04E             B.N      ??DMA1_Stream7_IRQHandler_44
   \                     ??DMA1_Stream7_IRQHandler_48: (+1)
   \   000003CE   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000003D2   0x6B09             LDR      R1,[R1, #+48]
   \   000003D4   0x6809             LDR      R1,[R1, #+0]
   \   000003D6   0x.... 0x....      LDR.W    R2,??DataTable17_3  ;; 0x40026428
   \   000003DA   0x4291             CMP      R1,R2
   \   000003DC   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_49
   \   000003DE   0xF44F 0x6100      MOV      R1,#+2048
   \   000003E2   0xE043             B.N      ??DMA1_Stream7_IRQHandler_44
   \                     ??DMA1_Stream7_IRQHandler_49: (+1)
   \   000003E4   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000003E8   0x6B09             LDR      R1,[R1, #+48]
   \   000003EA   0x6809             LDR      R1,[R1, #+0]
   \   000003EC   0x.... 0x....      LDR.W    R2,??DataTable17_4  ;; 0x40026088
   \   000003F0   0x4291             CMP      R1,R2
   \   000003F2   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_50
   \   000003F4   0xF44F 0x6100      MOV      R1,#+2048
   \   000003F8   0xE038             B.N      ??DMA1_Stream7_IRQHandler_44
   \                     ??DMA1_Stream7_IRQHandler_50: (+1)
   \   000003FA   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000003FE   0x6B09             LDR      R1,[R1, #+48]
   \   00000400   0x6809             LDR      R1,[R1, #+0]
   \   00000402   0x.... 0x....      LDR.W    R2,??DataTable18  ;; 0x40026488
   \   00000406   0x4291             CMP      R1,R2
   \   00000408   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_51
   \   0000040A   0xF44F 0x6100      MOV      R1,#+2048
   \   0000040E   0xE02D             B.N      ??DMA1_Stream7_IRQHandler_44
   \                     ??DMA1_Stream7_IRQHandler_51: (+1)
   \   00000410   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000414   0x6B09             LDR      R1,[R1, #+48]
   \   00000416   0x6809             LDR      R1,[R1, #+0]
   \   00000418   0x.... 0x....      LDR.W    R2,??DataTable19  ;; 0x40026040
   \   0000041C   0x4291             CMP      R1,R2
   \   0000041E   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_52
   \   00000420   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000424   0xE022             B.N      ??DMA1_Stream7_IRQHandler_44
   \                     ??DMA1_Stream7_IRQHandler_52: (+1)
   \   00000426   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000042A   0x6B09             LDR      R1,[R1, #+48]
   \   0000042C   0x6809             LDR      R1,[R1, #+0]
   \   0000042E   0x.... 0x....      LDR.W    R2,??DataTable19_1  ;; 0x40026440
   \   00000432   0x4291             CMP      R1,R2
   \   00000434   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_53
   \   00000436   0xF45F 0x1100      MOVS     R1,#+2097152
   \   0000043A   0xE017             B.N      ??DMA1_Stream7_IRQHandler_44
   \                     ??DMA1_Stream7_IRQHandler_53: (+1)
   \   0000043C   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000440   0x6B09             LDR      R1,[R1, #+48]
   \   00000442   0x6809             LDR      R1,[R1, #+0]
   \   00000444   0x.... 0x....      LDR.W    R2,??DataTable19_2  ;; 0x400260a0
   \   00000448   0x4291             CMP      R1,R2
   \   0000044A   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_54
   \   0000044C   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000450   0xE00C             B.N      ??DMA1_Stream7_IRQHandler_44
   \                     ??DMA1_Stream7_IRQHandler_54: (+1)
   \   00000452   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000456   0x6B09             LDR      R1,[R1, #+48]
   \   00000458   0x6809             LDR      R1,[R1, #+0]
   \   0000045A   0x.... 0x....      LDR.W    R2,??DataTable19_3  ;; 0x400264a0
   \   0000045E   0x4291             CMP      R1,R2
   \   00000460   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_55
   \   00000462   0xF45F 0x1100      MOVS     R1,#+2097152
   \   00000466   0xE001             B.N      ??DMA1_Stream7_IRQHandler_44
   \                     ??DMA1_Stream7_IRQHandler_55: (+1)
   \   00000468   0xF05F 0x6100      MOVS     R1,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_44: (+1)
   \   0000046C   0x4008             ANDS     R0,R1,R0
   \                     ??DMA1_Stream7_IRQHandler_14: (+1)
   \   0000046E   0x2800             CMP      R0,#+0
   \   00000470   0xF000 0x824B      BEQ.W    ??DMA1_Stream7_IRQHandler_56
    331          	  {
    332                      if(__HAL_DMA_GET_IT_SOURCE(hi2s3.hdmatx, DMA_IT_TC) != RESET)
   \   00000474   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000478   0x6B00             LDR      R0,[R0, #+48]
   \   0000047A   0x6800             LDR      R0,[R0, #+0]
   \   0000047C   0x6800             LDR      R0,[R0, #+0]
   \   0000047E   0x06C0             LSLS     R0,R0,#+27
   \   00000480   0xF140 0x8243      BPL.W    ??DMA1_Stream7_IRQHandler_56
    333                      {
    334          
    335          			    //if((DmaHandle.Instance->CR & DMA_SxCR_CIRC) == 0)
    336          		        //{
    337          		        //  /* Disable the transfer complete interrupt */
    338          		        //  __HAL_DMA_DISABLE_IT(&DmaHandle, DMA_IT_TC);
    339          		        //}
    340                          //if(((hi2s3.hdmatx->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
    341                          {
    342                          
    343                              /* Clear the transfer complete flag */
    344                              __HAL_DMA_CLEAR_FLAG(hi2s3.hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(hi2s3.hdmatx));
   \   00000484   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000488   0x6B00             LDR      R0,[R0, #+48]
   \   0000048A   0x6800             LDR      R0,[R0, #+0]
   \   0000048C   0x.... 0x....      LDR.W    R1,??DataTable16_2  ;; 0x40026459
   \   00000490   0x4288             CMP      R0,R1
   \   00000492   0xF0C0 0x8086      BCC.W    ??DMA1_Stream7_IRQHandler_57
   \   00000496   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000049A   0x6B00             LDR      R0,[R0, #+48]
   \   0000049C   0x6800             LDR      R0,[R0, #+0]
   \   0000049E   0x.... 0x....      LDR.W    R1,??DataTable16_4  ;; 0x40026010
   \   000004A2   0x4288             CMP      R0,R1
   \   000004A4   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_58
   \   000004A6   0x2020             MOVS     R0,#+32
   \   000004A8   0xE077             B.N      ??DMA1_Stream7_IRQHandler_59
   \                     ??DMA1_Stream7_IRQHandler_58: (+1)
   \   000004AA   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000004AE   0x6B00             LDR      R0,[R0, #+48]
   \   000004B0   0x6800             LDR      R0,[R0, #+0]
   \   000004B2   0x.... 0x....      LDR.W    R1,??DataTable16_5  ;; 0x40026410
   \   000004B6   0x4288             CMP      R0,R1
   \   000004B8   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_60
   \   000004BA   0x2020             MOVS     R0,#+32
   \   000004BC   0xE06D             B.N      ??DMA1_Stream7_IRQHandler_59
   \                     ??DMA1_Stream7_IRQHandler_60: (+1)
   \   000004BE   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000004C2   0x6B00             LDR      R0,[R0, #+48]
   \   000004C4   0x6800             LDR      R0,[R0, #+0]
   \   000004C6   0x.... 0x....      LDR.W    R1,??DataTable17  ;; 0x40026070
   \   000004CA   0x4288             CMP      R0,R1
   \   000004CC   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_61
   \   000004CE   0x2020             MOVS     R0,#+32
   \   000004D0   0xE063             B.N      ??DMA1_Stream7_IRQHandler_59
   \                     ??DMA1_Stream7_IRQHandler_61: (+1)
   \   000004D2   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000004D6   0x6B00             LDR      R0,[R0, #+48]
   \   000004D8   0x6800             LDR      R0,[R0, #+0]
   \   000004DA   0x.... 0x....      LDR.W    R1,??DataTable17_1  ;; 0x40026470
   \   000004DE   0x4288             CMP      R0,R1
   \   000004E0   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_62
   \   000004E2   0x2020             MOVS     R0,#+32
   \   000004E4   0xE059             B.N      ??DMA1_Stream7_IRQHandler_59
   \                     ??DMA1_Stream7_IRQHandler_62: (+1)
   \   000004E6   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000004EA   0x6B00             LDR      R0,[R0, #+48]
   \   000004EC   0x6800             LDR      R0,[R0, #+0]
   \   000004EE   0x.... 0x....      LDR.W    R1,??DataTable17_2  ;; 0x40026028
   \   000004F2   0x4288             CMP      R0,R1
   \   000004F4   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_63
   \   000004F6   0xF44F 0x6000      MOV      R0,#+2048
   \   000004FA   0xE04E             B.N      ??DMA1_Stream7_IRQHandler_59
   \                     ??DMA1_Stream7_IRQHandler_63: (+1)
   \   000004FC   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000500   0x6B00             LDR      R0,[R0, #+48]
   \   00000502   0x6800             LDR      R0,[R0, #+0]
   \   00000504   0x.... 0x....      LDR.W    R1,??DataTable17_3  ;; 0x40026428
   \   00000508   0x4288             CMP      R0,R1
   \   0000050A   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_64
   \   0000050C   0xF44F 0x6000      MOV      R0,#+2048
   \   00000510   0xE043             B.N      ??DMA1_Stream7_IRQHandler_59
   \                     ??DMA1_Stream7_IRQHandler_64: (+1)
   \   00000512   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000516   0x6B00             LDR      R0,[R0, #+48]
   \   00000518   0x6800             LDR      R0,[R0, #+0]
   \   0000051A   0x.... 0x....      LDR.W    R1,??DataTable17_4  ;; 0x40026088
   \   0000051E   0x4288             CMP      R0,R1
   \   00000520   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_65
   \   00000522   0xF44F 0x6000      MOV      R0,#+2048
   \   00000526   0xE038             B.N      ??DMA1_Stream7_IRQHandler_59
   \                     ??DMA1_Stream7_IRQHandler_65: (+1)
   \   00000528   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000052C   0x6B00             LDR      R0,[R0, #+48]
   \   0000052E   0x6800             LDR      R0,[R0, #+0]
   \   00000530   0x.... 0x....      LDR.W    R1,??DataTable18  ;; 0x40026488
   \   00000534   0x4288             CMP      R0,R1
   \   00000536   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_66
   \   00000538   0xF44F 0x6000      MOV      R0,#+2048
   \   0000053C   0xE02D             B.N      ??DMA1_Stream7_IRQHandler_59
   \                     ??DMA1_Stream7_IRQHandler_66: (+1)
   \   0000053E   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000542   0x6B00             LDR      R0,[R0, #+48]
   \   00000544   0x6800             LDR      R0,[R0, #+0]
   \   00000546   0x.... 0x....      LDR.W    R1,??DataTable19  ;; 0x40026040
   \   0000054A   0x4288             CMP      R0,R1
   \   0000054C   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_67
   \   0000054E   0xF45F 0x1000      MOVS     R0,#+2097152
   \   00000552   0xE022             B.N      ??DMA1_Stream7_IRQHandler_59
   \                     ??DMA1_Stream7_IRQHandler_67: (+1)
   \   00000554   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000558   0x6B00             LDR      R0,[R0, #+48]
   \   0000055A   0x6800             LDR      R0,[R0, #+0]
   \   0000055C   0x.... 0x....      LDR.W    R1,??DataTable19_1  ;; 0x40026440
   \   00000560   0x4288             CMP      R0,R1
   \   00000562   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_68
   \   00000564   0xF45F 0x1000      MOVS     R0,#+2097152
   \   00000568   0xE017             B.N      ??DMA1_Stream7_IRQHandler_59
   \                     ??DMA1_Stream7_IRQHandler_68: (+1)
   \   0000056A   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000056E   0x6B00             LDR      R0,[R0, #+48]
   \   00000570   0x6800             LDR      R0,[R0, #+0]
   \   00000572   0x.... 0x....      LDR.W    R1,??DataTable19_2  ;; 0x400260a0
   \   00000576   0x4288             CMP      R0,R1
   \   00000578   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_69
   \   0000057A   0xF45F 0x1000      MOVS     R0,#+2097152
   \   0000057E   0xE00C             B.N      ??DMA1_Stream7_IRQHandler_59
   \                     ??DMA1_Stream7_IRQHandler_69: (+1)
   \   00000580   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000584   0x6B00             LDR      R0,[R0, #+48]
   \   00000586   0x6800             LDR      R0,[R0, #+0]
   \   00000588   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x400264a0
   \   0000058C   0x4288             CMP      R0,R1
   \   0000058E   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_70
   \   00000590   0xF45F 0x1000      MOVS     R0,#+2097152
   \   00000594   0xE001             B.N      ??DMA1_Stream7_IRQHandler_59
   \                     ??DMA1_Stream7_IRQHandler_70: (+1)
   \   00000596   0xF05F 0x6000      MOVS     R0,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_59: (+1)
   \   0000059A   0x.... 0x....      LDR.W    R1,??DataTable21  ;; 0x4002640c
   \   0000059E   0x6008             STR      R0,[R1, #+0]
   \   000005A0   0xE1A0             B.N      ??DMA1_Stream7_IRQHandler_71
   \                     ??DMA1_Stream7_IRQHandler_57: (+1)
   \   000005A2   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000005A6   0x6B00             LDR      R0,[R0, #+48]
   \   000005A8   0x6800             LDR      R0,[R0, #+0]
   \   000005AA   0x.... 0x....      LDR.W    R1,??DataTable19_4  ;; 0x400260b9
   \   000005AE   0x4288             CMP      R0,R1
   \   000005B0   0xF0C0 0x8086      BCC.W    ??DMA1_Stream7_IRQHandler_72
   \   000005B4   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000005B8   0x6B00             LDR      R0,[R0, #+48]
   \   000005BA   0x6800             LDR      R0,[R0, #+0]
   \   000005BC   0x.... 0x....      LDR.W    R1,??DataTable16_4  ;; 0x40026010
   \   000005C0   0x4288             CMP      R0,R1
   \   000005C2   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_73
   \   000005C4   0x2020             MOVS     R0,#+32
   \   000005C6   0xE077             B.N      ??DMA1_Stream7_IRQHandler_74
   \                     ??DMA1_Stream7_IRQHandler_73: (+1)
   \   000005C8   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000005CC   0x6B00             LDR      R0,[R0, #+48]
   \   000005CE   0x6800             LDR      R0,[R0, #+0]
   \   000005D0   0x.... 0x....      LDR.W    R1,??DataTable16_5  ;; 0x40026410
   \   000005D4   0x4288             CMP      R0,R1
   \   000005D6   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_75
   \   000005D8   0x2020             MOVS     R0,#+32
   \   000005DA   0xE06D             B.N      ??DMA1_Stream7_IRQHandler_74
   \                     ??DMA1_Stream7_IRQHandler_75: (+1)
   \   000005DC   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000005E0   0x6B00             LDR      R0,[R0, #+48]
   \   000005E2   0x6800             LDR      R0,[R0, #+0]
   \   000005E4   0x.... 0x....      LDR.W    R1,??DataTable17  ;; 0x40026070
   \   000005E8   0x4288             CMP      R0,R1
   \   000005EA   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_76
   \   000005EC   0x2020             MOVS     R0,#+32
   \   000005EE   0xE063             B.N      ??DMA1_Stream7_IRQHandler_74
   \                     ??DMA1_Stream7_IRQHandler_76: (+1)
   \   000005F0   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000005F4   0x6B00             LDR      R0,[R0, #+48]
   \   000005F6   0x6800             LDR      R0,[R0, #+0]
   \   000005F8   0x.... 0x....      LDR.W    R1,??DataTable17_1  ;; 0x40026470
   \   000005FC   0x4288             CMP      R0,R1
   \   000005FE   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_77
   \   00000600   0x2020             MOVS     R0,#+32
   \   00000602   0xE059             B.N      ??DMA1_Stream7_IRQHandler_74
   \                     ??DMA1_Stream7_IRQHandler_77: (+1)
   \   00000604   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000608   0x6B00             LDR      R0,[R0, #+48]
   \   0000060A   0x6800             LDR      R0,[R0, #+0]
   \   0000060C   0x.... 0x....      LDR.W    R1,??DataTable17_2  ;; 0x40026028
   \   00000610   0x4288             CMP      R0,R1
   \   00000612   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_78
   \   00000614   0xF44F 0x6000      MOV      R0,#+2048
   \   00000618   0xE04E             B.N      ??DMA1_Stream7_IRQHandler_74
   \                     ??DMA1_Stream7_IRQHandler_78: (+1)
   \   0000061A   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000061E   0x6B00             LDR      R0,[R0, #+48]
   \   00000620   0x6800             LDR      R0,[R0, #+0]
   \   00000622   0x.... 0x....      LDR.W    R1,??DataTable17_3  ;; 0x40026428
   \   00000626   0x4288             CMP      R0,R1
   \   00000628   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_79
   \   0000062A   0xF44F 0x6000      MOV      R0,#+2048
   \   0000062E   0xE043             B.N      ??DMA1_Stream7_IRQHandler_74
   \                     ??DMA1_Stream7_IRQHandler_79: (+1)
   \   00000630   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000634   0x6B00             LDR      R0,[R0, #+48]
   \   00000636   0x6800             LDR      R0,[R0, #+0]
   \   00000638   0x.... 0x....      LDR.W    R1,??DataTable17_4  ;; 0x40026088
   \   0000063C   0x4288             CMP      R0,R1
   \   0000063E   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_80
   \   00000640   0xF44F 0x6000      MOV      R0,#+2048
   \   00000644   0xE038             B.N      ??DMA1_Stream7_IRQHandler_74
   \                     ??DMA1_Stream7_IRQHandler_80: (+1)
   \   00000646   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000064A   0x6B00             LDR      R0,[R0, #+48]
   \   0000064C   0x6800             LDR      R0,[R0, #+0]
   \   0000064E   0x.... 0x....      LDR.W    R1,??DataTable18  ;; 0x40026488
   \   00000652   0x4288             CMP      R0,R1
   \   00000654   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_81
   \   00000656   0xF44F 0x6000      MOV      R0,#+2048
   \   0000065A   0xE02D             B.N      ??DMA1_Stream7_IRQHandler_74
   \                     ??DMA1_Stream7_IRQHandler_81: (+1)
   \   0000065C   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000660   0x6B00             LDR      R0,[R0, #+48]
   \   00000662   0x6800             LDR      R0,[R0, #+0]
   \   00000664   0x.... 0x....      LDR.W    R1,??DataTable19  ;; 0x40026040
   \   00000668   0x4288             CMP      R0,R1
   \   0000066A   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_82
   \   0000066C   0xF45F 0x1000      MOVS     R0,#+2097152
   \   00000670   0xE022             B.N      ??DMA1_Stream7_IRQHandler_74
   \                     ??DMA1_Stream7_IRQHandler_82: (+1)
   \   00000672   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000676   0x6B00             LDR      R0,[R0, #+48]
   \   00000678   0x6800             LDR      R0,[R0, #+0]
   \   0000067A   0x.... 0x....      LDR.W    R1,??DataTable19_1  ;; 0x40026440
   \   0000067E   0x4288             CMP      R0,R1
   \   00000680   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_83
   \   00000682   0xF45F 0x1000      MOVS     R0,#+2097152
   \   00000686   0xE017             B.N      ??DMA1_Stream7_IRQHandler_74
   \                     ??DMA1_Stream7_IRQHandler_83: (+1)
   \   00000688   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000068C   0x6B00             LDR      R0,[R0, #+48]
   \   0000068E   0x6800             LDR      R0,[R0, #+0]
   \   00000690   0x.... 0x....      LDR.W    R1,??DataTable19_2  ;; 0x400260a0
   \   00000694   0x4288             CMP      R0,R1
   \   00000696   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_84
   \   00000698   0xF45F 0x1000      MOVS     R0,#+2097152
   \   0000069C   0xE00C             B.N      ??DMA1_Stream7_IRQHandler_74
   \                     ??DMA1_Stream7_IRQHandler_84: (+1)
   \   0000069E   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000006A2   0x6B00             LDR      R0,[R0, #+48]
   \   000006A4   0x6800             LDR      R0,[R0, #+0]
   \   000006A6   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x400264a0
   \   000006AA   0x4288             CMP      R0,R1
   \   000006AC   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_85
   \   000006AE   0xF45F 0x1000      MOVS     R0,#+2097152
   \   000006B2   0xE001             B.N      ??DMA1_Stream7_IRQHandler_74
   \                     ??DMA1_Stream7_IRQHandler_85: (+1)
   \   000006B4   0xF05F 0x6000      MOVS     R0,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_74: (+1)
   \   000006B8   0x.... 0x....      LDR.W    R1,??DataTable24  ;; 0x40026408
   \   000006BC   0x6008             STR      R0,[R1, #+0]
   \   000006BE   0xE111             B.N      ??DMA1_Stream7_IRQHandler_71
   \                     ??DMA1_Stream7_IRQHandler_72: (+1)
   \   000006C0   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000006C4   0x6B00             LDR      R0,[R0, #+48]
   \   000006C6   0x6800             LDR      R0,[R0, #+0]
   \   000006C8   0x.... 0x....      LDR.W    R1,??DataTable20  ;; 0x40026059
   \   000006CC   0x4288             CMP      R0,R1
   \   000006CE   0xF0C0 0x8086      BCC.W    ??DMA1_Stream7_IRQHandler_86
   \   000006D2   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000006D6   0x6B00             LDR      R0,[R0, #+48]
   \   000006D8   0x6800             LDR      R0,[R0, #+0]
   \   000006DA   0x.... 0x....      LDR.W    R1,??DataTable16_4  ;; 0x40026010
   \   000006DE   0x4288             CMP      R0,R1
   \   000006E0   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_87
   \   000006E2   0x2020             MOVS     R0,#+32
   \   000006E4   0xE077             B.N      ??DMA1_Stream7_IRQHandler_88
   \                     ??DMA1_Stream7_IRQHandler_87: (+1)
   \   000006E6   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000006EA   0x6B00             LDR      R0,[R0, #+48]
   \   000006EC   0x6800             LDR      R0,[R0, #+0]
   \   000006EE   0x.... 0x....      LDR.W    R1,??DataTable16_5  ;; 0x40026410
   \   000006F2   0x4288             CMP      R0,R1
   \   000006F4   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_89
   \   000006F6   0x2020             MOVS     R0,#+32
   \   000006F8   0xE06D             B.N      ??DMA1_Stream7_IRQHandler_88
   \                     ??DMA1_Stream7_IRQHandler_89: (+1)
   \   000006FA   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000006FE   0x6B00             LDR      R0,[R0, #+48]
   \   00000700   0x6800             LDR      R0,[R0, #+0]
   \   00000702   0x.... 0x....      LDR.W    R1,??DataTable17  ;; 0x40026070
   \   00000706   0x4288             CMP      R0,R1
   \   00000708   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_90
   \   0000070A   0x2020             MOVS     R0,#+32
   \   0000070C   0xE063             B.N      ??DMA1_Stream7_IRQHandler_88
   \                     ??DMA1_Stream7_IRQHandler_90: (+1)
   \   0000070E   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000712   0x6B00             LDR      R0,[R0, #+48]
   \   00000714   0x6800             LDR      R0,[R0, #+0]
   \   00000716   0x.... 0x....      LDR.W    R1,??DataTable17_1  ;; 0x40026470
   \   0000071A   0x4288             CMP      R0,R1
   \   0000071C   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_91
   \   0000071E   0x2020             MOVS     R0,#+32
   \   00000720   0xE059             B.N      ??DMA1_Stream7_IRQHandler_88
   \                     ??DMA1_Stream7_IRQHandler_91: (+1)
   \   00000722   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000726   0x6B00             LDR      R0,[R0, #+48]
   \   00000728   0x6800             LDR      R0,[R0, #+0]
   \   0000072A   0x.... 0x....      LDR.W    R1,??DataTable17_2  ;; 0x40026028
   \   0000072E   0x4288             CMP      R0,R1
   \   00000730   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_92
   \   00000732   0xF44F 0x6000      MOV      R0,#+2048
   \   00000736   0xE04E             B.N      ??DMA1_Stream7_IRQHandler_88
   \                     ??DMA1_Stream7_IRQHandler_92: (+1)
   \   00000738   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000073C   0x6B00             LDR      R0,[R0, #+48]
   \   0000073E   0x6800             LDR      R0,[R0, #+0]
   \   00000740   0x.... 0x....      LDR.W    R1,??DataTable17_3  ;; 0x40026428
   \   00000744   0x4288             CMP      R0,R1
   \   00000746   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_93
   \   00000748   0xF44F 0x6000      MOV      R0,#+2048
   \   0000074C   0xE043             B.N      ??DMA1_Stream7_IRQHandler_88
   \                     ??DMA1_Stream7_IRQHandler_93: (+1)
   \   0000074E   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000752   0x6B00             LDR      R0,[R0, #+48]
   \   00000754   0x6800             LDR      R0,[R0, #+0]
   \   00000756   0x.... 0x....      LDR.W    R1,??DataTable17_4  ;; 0x40026088
   \   0000075A   0x4288             CMP      R0,R1
   \   0000075C   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_94
   \   0000075E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000762   0xE038             B.N      ??DMA1_Stream7_IRQHandler_88
   \                     ??DMA1_Stream7_IRQHandler_94: (+1)
   \   00000764   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000768   0x6B00             LDR      R0,[R0, #+48]
   \   0000076A   0x6800             LDR      R0,[R0, #+0]
   \   0000076C   0x.... 0x....      LDR.W    R1,??DataTable18  ;; 0x40026488
   \   00000770   0x4288             CMP      R0,R1
   \   00000772   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_95
   \   00000774   0xF44F 0x6000      MOV      R0,#+2048
   \   00000778   0xE02D             B.N      ??DMA1_Stream7_IRQHandler_88
   \                     ??DMA1_Stream7_IRQHandler_95: (+1)
   \   0000077A   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000077E   0x6B00             LDR      R0,[R0, #+48]
   \   00000780   0x6800             LDR      R0,[R0, #+0]
   \   00000782   0x.... 0x....      LDR.W    R1,??DataTable19  ;; 0x40026040
   \   00000786   0x4288             CMP      R0,R1
   \   00000788   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_96
   \   0000078A   0xF45F 0x1000      MOVS     R0,#+2097152
   \   0000078E   0xE022             B.N      ??DMA1_Stream7_IRQHandler_88
   \                     ??DMA1_Stream7_IRQHandler_96: (+1)
   \   00000790   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000794   0x6B00             LDR      R0,[R0, #+48]
   \   00000796   0x6800             LDR      R0,[R0, #+0]
   \   00000798   0x.... 0x....      LDR.W    R1,??DataTable19_1  ;; 0x40026440
   \   0000079C   0x4288             CMP      R0,R1
   \   0000079E   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_97
   \   000007A0   0xF45F 0x1000      MOVS     R0,#+2097152
   \   000007A4   0xE017             B.N      ??DMA1_Stream7_IRQHandler_88
   \                     ??DMA1_Stream7_IRQHandler_97: (+1)
   \   000007A6   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000007AA   0x6B00             LDR      R0,[R0, #+48]
   \   000007AC   0x6800             LDR      R0,[R0, #+0]
   \   000007AE   0x.... 0x....      LDR.W    R1,??DataTable19_2  ;; 0x400260a0
   \   000007B2   0x4288             CMP      R0,R1
   \   000007B4   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_98
   \   000007B6   0xF45F 0x1000      MOVS     R0,#+2097152
   \   000007BA   0xE00C             B.N      ??DMA1_Stream7_IRQHandler_88
   \                     ??DMA1_Stream7_IRQHandler_98: (+1)
   \   000007BC   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000007C0   0x6B00             LDR      R0,[R0, #+48]
   \   000007C2   0x6800             LDR      R0,[R0, #+0]
   \   000007C4   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x400264a0
   \   000007C8   0x4288             CMP      R0,R1
   \   000007CA   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_99
   \   000007CC   0xF45F 0x1000      MOVS     R0,#+2097152
   \   000007D0   0xE001             B.N      ??DMA1_Stream7_IRQHandler_88
   \                     ??DMA1_Stream7_IRQHandler_99: (+1)
   \   000007D2   0xF05F 0x6000      MOVS     R0,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_88: (+1)
   \   000007D6   0x.... 0x....      LDR.W    R1,??DataTable24_1  ;; 0x4002600c
   \   000007DA   0x6008             STR      R0,[R1, #+0]
   \   000007DC   0xE082             B.N      ??DMA1_Stream7_IRQHandler_71
   \                     ??DMA1_Stream7_IRQHandler_86: (+1)
   \   000007DE   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000007E2   0x6B00             LDR      R0,[R0, #+48]
   \   000007E4   0x6800             LDR      R0,[R0, #+0]
   \   000007E6   0x.... 0x....      LDR.W    R1,??DataTable16_4  ;; 0x40026010
   \   000007EA   0x4288             CMP      R0,R1
   \   000007EC   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_100
   \   000007EE   0x2020             MOVS     R0,#+32
   \   000007F0   0xE075             B.N      ??DMA1_Stream7_IRQHandler_101
   \                     ??DMA1_Stream7_IRQHandler_100: (+1)
   \   000007F2   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000007F6   0x6B00             LDR      R0,[R0, #+48]
   \   000007F8   0x6800             LDR      R0,[R0, #+0]
   \   000007FA   0x.... 0x....      LDR.W    R1,??DataTable16_5  ;; 0x40026410
   \   000007FE   0x4288             CMP      R0,R1
   \   00000800   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_102
   \   00000802   0x2020             MOVS     R0,#+32
   \   00000804   0xE06B             B.N      ??DMA1_Stream7_IRQHandler_101
   \                     ??DMA1_Stream7_IRQHandler_102: (+1)
   \   00000806   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000080A   0x6B00             LDR      R0,[R0, #+48]
   \   0000080C   0x6800             LDR      R0,[R0, #+0]
   \   0000080E   0x.... 0x....      LDR.W    R1,??DataTable17  ;; 0x40026070
   \   00000812   0x4288             CMP      R0,R1
   \   00000814   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_103
   \   00000816   0x2020             MOVS     R0,#+32
   \   00000818   0xE061             B.N      ??DMA1_Stream7_IRQHandler_101
   \                     ??DMA1_Stream7_IRQHandler_103: (+1)
   \   0000081A   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000081E   0x6B00             LDR      R0,[R0, #+48]
   \   00000820   0x6800             LDR      R0,[R0, #+0]
   \   00000822   0x.... 0x....      LDR.W    R1,??DataTable17_1  ;; 0x40026470
   \   00000826   0x4288             CMP      R0,R1
   \   00000828   0xD101             BNE.N    ??DMA1_Stream7_IRQHandler_104
   \   0000082A   0x2020             MOVS     R0,#+32
   \   0000082C   0xE057             B.N      ??DMA1_Stream7_IRQHandler_101
   \                     ??DMA1_Stream7_IRQHandler_104: (+1)
   \   0000082E   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000832   0x6B00             LDR      R0,[R0, #+48]
   \   00000834   0x6800             LDR      R0,[R0, #+0]
   \   00000836   0x.... 0x....      LDR.W    R1,??DataTable17_2  ;; 0x40026028
   \   0000083A   0x4288             CMP      R0,R1
   \   0000083C   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_105
   \   0000083E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000842   0xE04C             B.N      ??DMA1_Stream7_IRQHandler_101
   \                     ??DMA1_Stream7_IRQHandler_105: (+1)
   \   00000844   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000848   0x6B00             LDR      R0,[R0, #+48]
   \   0000084A   0x6800             LDR      R0,[R0, #+0]
   \   0000084C   0x.... 0x....      LDR.W    R1,??DataTable17_3  ;; 0x40026428
   \   00000850   0x4288             CMP      R0,R1
   \   00000852   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_106
   \   00000854   0xF44F 0x6000      MOV      R0,#+2048
   \   00000858   0xE041             B.N      ??DMA1_Stream7_IRQHandler_101
   \                     ??DMA1_Stream7_IRQHandler_106: (+1)
   \   0000085A   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000085E   0x6B00             LDR      R0,[R0, #+48]
   \   00000860   0x6800             LDR      R0,[R0, #+0]
   \   00000862   0x.... 0x....      LDR.W    R1,??DataTable17_4  ;; 0x40026088
   \   00000866   0x4288             CMP      R0,R1
   \   00000868   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_107
   \   0000086A   0xF44F 0x6000      MOV      R0,#+2048
   \   0000086E   0xE036             B.N      ??DMA1_Stream7_IRQHandler_101
   \                     ??DMA1_Stream7_IRQHandler_107: (+1)
   \   00000870   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000874   0x6B00             LDR      R0,[R0, #+48]
   \   00000876   0x6800             LDR      R0,[R0, #+0]
   \   00000878   0x.... 0x....      LDR.W    R1,??DataTable18  ;; 0x40026488
   \   0000087C   0x4288             CMP      R0,R1
   \   0000087E   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_108
   \   00000880   0xF44F 0x6000      MOV      R0,#+2048
   \   00000884   0xE02B             B.N      ??DMA1_Stream7_IRQHandler_101
   \                     ??DMA1_Stream7_IRQHandler_108: (+1)
   \   00000886   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000088A   0x6B00             LDR      R0,[R0, #+48]
   \   0000088C   0x6800             LDR      R0,[R0, #+0]
   \   0000088E   0x.... 0x....      LDR.W    R1,??DataTable19  ;; 0x40026040
   \   00000892   0x4288             CMP      R0,R1
   \   00000894   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_109
   \   00000896   0xF45F 0x1000      MOVS     R0,#+2097152
   \   0000089A   0xE020             B.N      ??DMA1_Stream7_IRQHandler_101
   \                     ??DMA1_Stream7_IRQHandler_109: (+1)
   \   0000089C   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000008A0   0x6B00             LDR      R0,[R0, #+48]
   \   000008A2   0x6800             LDR      R0,[R0, #+0]
   \   000008A4   0x.... 0x....      LDR.W    R1,??DataTable19_1  ;; 0x40026440
   \   000008A8   0x4288             CMP      R0,R1
   \   000008AA   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_110
   \   000008AC   0xF45F 0x1000      MOVS     R0,#+2097152
   \   000008B0   0xE015             B.N      ??DMA1_Stream7_IRQHandler_101
   \                     ??DMA1_Stream7_IRQHandler_110: (+1)
   \   000008B2   0x....             LDR.N    R0,??DataTable16_1
   \   000008B4   0x6B00             LDR      R0,[R0, #+48]
   \   000008B6   0x6800             LDR      R0,[R0, #+0]
   \   000008B8   0x.... 0x....      LDR.W    R1,??DataTable19_2  ;; 0x400260a0
   \   000008BC   0x4288             CMP      R0,R1
   \   000008BE   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_111
   \   000008C0   0xF45F 0x1000      MOVS     R0,#+2097152
   \   000008C4   0xE00B             B.N      ??DMA1_Stream7_IRQHandler_101
   \                     ??DMA1_Stream7_IRQHandler_111: (+1)
   \   000008C6   0x....             LDR.N    R0,??DataTable16_1
   \   000008C8   0x6B00             LDR      R0,[R0, #+48]
   \   000008CA   0x6800             LDR      R0,[R0, #+0]
   \   000008CC   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x400264a0
   \   000008D0   0x4288             CMP      R0,R1
   \   000008D2   0xD102             BNE.N    ??DMA1_Stream7_IRQHandler_112
   \   000008D4   0xF45F 0x1000      MOVS     R0,#+2097152
   \   000008D8   0xE001             B.N      ??DMA1_Stream7_IRQHandler_101
   \                     ??DMA1_Stream7_IRQHandler_112: (+1)
   \   000008DA   0xF05F 0x6000      MOVS     R0,#+134217728
   \                     ??DMA1_Stream7_IRQHandler_101: (+1)
   \   000008DE   0x.... 0x....      LDR.W    R1,??DataTable24_2  ;; 0x40026008
   \   000008E2   0x6008             STR      R0,[R1, #+0]
    345          
    346          					 /* Update error code */
    347          					 DmaHandle.ErrorCode |= HAL_DMA_ERROR_NONE;
   \                     ??DMA1_Stream7_IRQHandler_71: (+1)
   \   000008E4   0x.... 0x....      LDR.W    R0,??DataTable24_3
   \   000008E8   0x6CC0             LDR      R0,[R0, #+76]
   \   000008EA   0x.... 0x....      LDR.W    R1,??DataTable24_3
   \   000008EE   0x64C8             STR      R0,[R1, #+76]
    348          					 
    349          					 /* Change the DMA state */
    350          					 DmaHandle.State = HAL_DMA_STATE_READY_MEM0;
   \   000008F0   0x2011             MOVS     R0,#+17
   \   000008F2   0x.... 0x....      LDR.W    R1,??DataTable24_3
   \   000008F6   0xF881 0x0035      STRB     R0,[R1, #+53]
    351          
    352          					 HAL_I2S_TxCpltCallback(&hi2s3);
   \   000008FA   0x....             LDR.N    R0,??DataTable16_1
   \   000008FC   0x.... 0x....      BL       HAL_I2S_TxCpltCallback
    353          					 
    354                                   /* Process Unlocked */
    355                               __HAL_UNLOCK(&DmaHandle);  
   \   00000900   0x2000             MOVS     R0,#+0
   \   00000902   0x.... 0x....      LDR.W    R1,??DataTable24_3
   \   00000906   0xF881 0x0034      STRB     R0,[R1, #+52]
    356                                
    357                          }
    358          
    359          
    360                      }
    361                    }
    362          		
    363                 //HAL_DMA_IRQHandler(hi2s3.hdmatx);
    364          }
   \                     ??DMA1_Stream7_IRQHandler_56: (+1)
   \   0000090A   0xBD01             POP      {R0,PC}          ;; return
    365          
    366          /**
    367            * @brief  This function handles main DAC interrupt. 
    368            * @param  None
    369            * @retval None
    370            */

   \                                 In section .text, align 2, keep-with-next
    371          void DMA1_Stream0_IRQHandler(void)
    372          {
    373            //DAC is not used any more
    374            //Audio_MAL_IRQHandler();
    375          }
   \                     DMA1_Stream0_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    376          
    377          /**
    378            * @brief  I2S interrupt management
    379            * @param  None
    380            * @retval None
    381            */

   \                                 In section .text, align 2, keep-with-next
    382          void SPI3_IRQHandler(void)
    383          {
    384            /* Check on the I2S TXE flag */  
    385            if (__HAL_SPI_GET_FLAG(&hi2s3, SPI_IT_TXE) != RESET)
   \                     SPI3_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable16_1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6880             LDR      R0,[R0, #+8]
    386            { 
    387             
    388              /* Send dummy data on I2S to avoid the underrun condition */
    389               //SPI_I2S_SendData(CODEC_I2S, AUDIO_GetSampleCallBack()); 
    390            }
    391          }
   \   00000006   0x4770             BX       LR               ;; return
    392          /*========================
    393                          CS43L22 Audio Codec Control Functions
    394                                                          ==============================*/
    395          /**
    396            * @brief  Initializes the audio codec and all related interfaces (control 
    397            *         interface: I2C and audio interface: I2S)
    398            * @param  OutputDevice: can be OUTPUT_DEVICE_SPEAKER, OUTPUT_DEVICE_HEADPHONE,
    399            *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
    400            * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
    401            * @param  AudioFreq: Audio frequency used to play the audio stream.
    402            * @retval 0 if correct communication, else wrong communication
    403            */

   \                                 In section .text, align 2, keep-with-next
    404          static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Vol, uint32_t AudioFreq)
    405          {
   \                     Codec_Init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    406            uint32_t counter = 0; 
   \   00000008   0x2700             MOVS     R7,#+0
    407          
    408            /* Configure the Codec related IOs */
    409            Codec_GPIO_Init();   //only reset Pin configuration
   \   0000000A   0x.... 0x....      BL       Codec_GPIO_Init
    410            
    411            /* Reset the Codec Registers */
    412            Codec_Reset(); //  OFF ON the oin reset
   \   0000000E   0x.... 0x....      BL       Codec_Reset
    413          
    414            /* Initialize the Control interface of the Audio Codec */
    415            Codec_CtrlInterface_Init();     // I2C1 pin configuration
   \   00000012   0x.... 0x....      BL       Codec_CtrlInterface_Init
    416          
    417            //HAL_I2C_IsDeviceReady(&hi2c1, CODEC_ADDRESS, 20, 1000);
    418            
    419            /* Keep Codec powered OFF */
    420            counter += Codec_WriteRegister(0x02, 0x01);  
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0x.... 0x....      BL       Codec_WriteRegister
   \   0000001E   0x19C0             ADDS     R0,R0,R7
   \   00000020   0x0007             MOVS     R7,R0
    421                
    422            counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
   \   00000022   0x21AF             MOVS     R1,#+175
   \   00000024   0x2004             MOVS     R0,#+4
   \   00000026   0x.... 0x....      BL       Codec_WriteRegister
   \   0000002A   0x19C0             ADDS     R0,R0,R7
   \   0000002C   0x0007             MOVS     R7,R0
    423            OutputDev = 0xAF;
   \   0000002E   0x20AF             MOVS     R0,#+175
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable24_4
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    424            
    425            /* Clock configuration: Auto detection */  
    426            counter += Codec_WriteRegister(0x05, 0x81);
   \   00000036   0x2181             MOVS     R1,#+129
   \   00000038   0x2005             MOVS     R0,#+5
   \   0000003A   0x.... 0x....      BL       Codec_WriteRegister
   \   0000003E   0x19C0             ADDS     R0,R0,R7
   \   00000040   0x0007             MOVS     R7,R0
    427            
    428            /* Set the Slave Mode and the audio Standard */  
    429            counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
   \   00000042   0x2104             MOVS     R1,#+4
   \   00000044   0x2006             MOVS     R0,#+6
   \   00000046   0x.... 0x....      BL       Codec_WriteRegister
   \   0000004A   0x19C0             ADDS     R0,R0,R7
   \   0000004C   0x0007             MOVS     R7,R0
    430                
    431            /* Set the Master volume */
    432            Codec_VolumeCtrl(Vol);
   \   0000004E   0x0028             MOVS     R0,R5
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0x.... 0x....      BL       Codec_VolumeCtrl
    433            
    434          
    435            /* Power on the Codec */
    436            counter += Codec_WriteRegister(0x02, 0x9E);  
   \   00000056   0x219E             MOVS     R1,#+158
   \   00000058   0x2002             MOVS     R0,#+2
   \   0000005A   0x.... 0x....      BL       Codec_WriteRegister
   \   0000005E   0x19C0             ADDS     R0,R0,R7
   \   00000060   0x0007             MOVS     R7,R0
    437            
    438            /* Additional configuration for the CODEC. These configurations are done to reduce
    439                the time needed for the Codec to power off. If these configurations are removed, 
    440                then a long delay should be added between powering off the Codec and switching 
    441                off the I2S peripheral MCLK clock (which is the operating clock for Codec).
    442                If this delay is not inserted, then the codec will not shut down properly and
    443                it results in high noise after shut down. */
    444            
    445            /* Disable the analog soft ramp */
    446            counter += Codec_WriteRegister(0x0A, 0x00);
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x200A             MOVS     R0,#+10
   \   00000066   0x.... 0x....      BL       Codec_WriteRegister
   \   0000006A   0x19C0             ADDS     R0,R0,R7
   \   0000006C   0x0007             MOVS     R7,R0
    447          
    448          	/* Disable the digital soft ramp */
    449          	//counter += Codec_WriteRegister(0x0E, 0x04);
    450          
    451            /* Disable the limiter attack level */
    452            counter += Codec_WriteRegister(0x27, 0x00);
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x2027             MOVS     R0,#+39
   \   00000072   0x.... 0x....      BL       Codec_WriteRegister
   \   00000076   0x19C0             ADDS     R0,R0,R7
   \   00000078   0x0007             MOVS     R7,R0
    453            /* Adjust Bass and Treble levels */
    454            counter += Codec_WriteRegister(0x1F, 0x0F);
   \   0000007A   0x210F             MOVS     R1,#+15
   \   0000007C   0x201F             MOVS     R0,#+31
   \   0000007E   0x.... 0x....      BL       Codec_WriteRegister
   \   00000082   0x19C0             ADDS     R0,R0,R7
   \   00000084   0x0007             MOVS     R7,R0
    455            /* Adjust PCM volume level */
    456            counter += Codec_WriteRegister(0x1A, 0x0A);
   \   00000086   0x210A             MOVS     R1,#+10
   \   00000088   0x201A             MOVS     R0,#+26
   \   0000008A   0x.... 0x....      BL       Codec_WriteRegister
   \   0000008E   0x19C0             ADDS     R0,R0,R7
   \   00000090   0x0007             MOVS     R7,R0
    457            counter += Codec_WriteRegister(0x1B, 0x0A);
   \   00000092   0x210A             MOVS     R1,#+10
   \   00000094   0x201B             MOVS     R0,#+27
   \   00000096   0x.... 0x....      BL       Codec_WriteRegister
   \   0000009A   0x19C0             ADDS     R0,R0,R7
   \   0000009C   0x0007             MOVS     R7,R0
    458          
    459          
    460            codec_sendBeep();
   \   0000009E   0x.... 0x....      BL       codec_sendBeep
    461            /* Configure the I2S peripheral */
    462            Codec_AudioInterface_Init(AudioFreq);  //I2S3 is using
   \   000000A2   0x0030             MOVS     R0,R6
   \   000000A4   0x.... 0x....      BL       Codec_AudioInterface_Init
    463          
    464          #if 0
    465          	  for (uint8_t i=0x00;i<=0x34;i++)
    466          	  {
    467          		   uint8_t test;
    468          			test = Codec_ReadRegister(i);
    469          			sprintf((char *)pUARTBuf,"REG[%x]:VAL[%x]\r\n",i,test);
    470          			while(HAL_UART_Transmit(&huart3,pUARTBuf,30,1000));
    471          	  }
    472          #endif
    473          
    474          
    475            /* Return communication control value */
    476            return counter;  
   \   000000A8   0x0038             MOVS     R0,R7
   \   000000AA   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    477          }
    478          
    479          

   \                                 In section .text, align 2, keep-with-next
    480          void codec_sendBeep(void)
    481          {
   \                     codec_sendBeep: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    482          	Codec_WriteRegister(0x1E, 0x00);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x201E             MOVS     R0,#+30
   \   00000006   0x.... 0x....      BL       Codec_WriteRegister
    483          	Codec_WriteRegister(0x1E, 0x40);
   \   0000000A   0x2140             MOVS     R1,#+64
   \   0000000C   0x201E             MOVS     R0,#+30
   \   0000000E   0x.... 0x....      BL       Codec_WriteRegister
    484          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    485          
    486          /**
    487            * @brief  Restore the audio codec state to default state and free all used 
    488            *         resources.
    489            * @param  None
    490            * @retval 0 if correct communication, else wrong communication
    491            */

   \                                 In section .text, align 2, keep-with-next
    492          static uint32_t Codec_DeInit(void)
    493          {
   \                     Codec_DeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    494            uint32_t counter = 0; 
   \   00000002   0x2400             MOVS     R4,#+0
    495          
    496            /* Reset the Codec Registers */
    497            Codec_Reset();  
   \   00000004   0x.... 0x....      BL       Codec_Reset
    498            
    499            /* Keep Codec powered OFF */
    500            counter += Codec_WriteRegister(0x02, 0x01);    
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x.... 0x....      BL       Codec_WriteRegister
   \   00000010   0x1900             ADDS     R0,R0,R4
   \   00000012   0x0004             MOVS     R4,R0
    501            
    502            /* Deinitialize all use GPIOs */
    503            Codec_GPIO_DeInit();
   \   00000014   0x.... 0x....      BL       Codec_GPIO_DeInit
    504          
    505            /* Disable the Codec control interface */
    506            Codec_CtrlInterface_DeInit();
   \   00000018   0x.... 0x....      BL       Codec_CtrlInterface_DeInit
    507            
    508            /* Deinitialize the Codec audio interface (I2S) */
    509            Codec_AudioInterface_DeInit(); 
   \   0000001C   0x.... 0x....      BL       Codec_AudioInterface_DeInit
    510            
    511            /* Return communication control value */
    512            return counter;  
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    513          }
    514          
    515          /**
    516            * @brief  Start the audio Codec play feature.
    517            * @note   For this codec no Play options are required.
    518            * @param  None
    519            * @retval 0 if correct communication, else wrong communication
    520            */

   \                                 In section .text, align 2, keep-with-next
    521          static uint32_t Codec_Play(void)
    522          {
    523            /* 
    524               No actions required on Codec level for play command
    525               */  
    526          
    527            /* Return communication control value */
    528            return 0;  
   \                     Codec_Play: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    529          }
    530          
    531          /**
    532            * @brief  Pauses and resumes playing on the audio codec.
    533            * @param  Cmd: AUDIO_PAUSE (or 0) to pause, AUDIO_RESUME (or any value different
    534            *         from 0) to resume. 
    535            * @retval 0 if correct communication, else wrong communication
    536            */

   \                                 In section .text, align 2, keep-with-next
    537          static uint32_t Codec_PauseResume(uint32_t Cmd)
    538          {
   \                     Codec_PauseResume: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    539            uint32_t counter = 0;   
   \   00000004   0x2500             MOVS     R5,#+0
    540            
    541            /* Pause the audio file playing */
    542            if (Cmd == AUDIO_PAUSE)
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD10B             BNE.N    ??Codec_PauseResume_0
    543            { 
    544              /* Mute the output first */
    545              counter += Codec_Mute(AUDIO_MUTE_ON);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       Codec_Mute
   \   00000010   0x1940             ADDS     R0,R0,R5
   \   00000012   0x0005             MOVS     R5,R0
    546          
    547              /* Put the Codec in Power save mode */    
    548              counter += Codec_WriteRegister(0x02, 0x01);    
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       Codec_WriteRegister
   \   0000001C   0x1940             ADDS     R0,R0,R5
   \   0000001E   0x0005             MOVS     R5,R0
   \   00000020   0xE012             B.N      ??Codec_PauseResume_1
    549            }
    550            else /* AUDIO_RESUME */
    551            {
    552              /* Unmute the output first */
    553              counter += Codec_Mute(AUDIO_MUTE_OFF);
   \                     ??Codec_PauseResume_0: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       Codec_Mute
   \   00000028   0x1940             ADDS     R0,R0,R5
   \   0000002A   0x0005             MOVS     R5,R0
    554              
    555              counter += Codec_WriteRegister(0x04, OutputDev);
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable24_4
   \   00000030   0x7801             LDRB     R1,[R0, #+0]
   \   00000032   0x2004             MOVS     R0,#+4
   \   00000034   0x.... 0x....      BL       Codec_WriteRegister
   \   00000038   0x1940             ADDS     R0,R0,R5
   \   0000003A   0x0005             MOVS     R5,R0
    556              
    557              /* Exit the Power save mode */
    558              counter += Codec_WriteRegister(0x02, 0x9E); 
   \   0000003C   0x219E             MOVS     R1,#+158
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x.... 0x....      BL       Codec_WriteRegister
   \   00000044   0x1940             ADDS     R0,R0,R5
   \   00000046   0x0005             MOVS     R5,R0
    559            }
    560          
    561            return counter;
   \                     ??Codec_PauseResume_1: (+1)
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    562          }
    563          
    564          /**
    565            * @brief  Stops audio Codec playing. It powers down the codec.
    566            * @param  CodecPdwnMode: selects the  power down mode.
    567            *          - CODEC_PDWN_SW: only mutes the audio codec. When resuming from this 
    568            *                           mode the codec keeps the previous initialization
    569            *                           (no need to re-Initialize the codec registers).
    570            *          - CODEC_PDWN_HW: Physically power down the codec. When resuming from this
    571            *                           mode, the codec is set to default configuration 
    572            *                           (user should re-Initialize the codec in order to 
    573            *                            play again the audio stream).
    574            * @retval 0 if correct communication, else wrong communication
    575            */

   \                                 In section .text, align 2, keep-with-next
    576          static uint32_t Codec_Stop(uint32_t CodecPdwnMode)
    577          {
   \                     Codec_Stop: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    578            uint32_t counter = 0;   
   \   00000004   0x2500             MOVS     R5,#+0
    579          
    580            /* Mute the output first */
    581            Codec_Mute(AUDIO_MUTE_ON);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       Codec_Mute
    582            
    583            if (CodecPdwnMode == CODEC_PDWN_SW)
   \   0000000C   0x2C02             CMP      R4,#+2
   \   0000000E   0xD106             BNE.N    ??Codec_Stop_0
    584            {    
    585              /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
    586              counter += Codec_WriteRegister(0x02, 0x9F);
   \   00000010   0x219F             MOVS     R1,#+159
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0x.... 0x....      BL       Codec_WriteRegister
   \   00000018   0x1940             ADDS     R0,R0,R5
   \   0000001A   0x0005             MOVS     R5,R0
   \   0000001C   0xE00F             B.N      ??Codec_Stop_1
    587            }
    588            else /* CODEC_PDWN_HW */
    589            { 
    590              /* Power down the DAC components */
    591              counter += Codec_WriteRegister(0x02, 0x9F);
   \                     ??Codec_Stop_0: (+1)
   \   0000001E   0x219F             MOVS     R1,#+159
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0x.... 0x....      BL       Codec_WriteRegister
   \   00000026   0x1940             ADDS     R0,R0,R5
   \   00000028   0x0005             MOVS     R5,R0
    592              
    593              /* Wait at least 100us */
    594              Delay(0xFFF);
   \   0000002A   0xF640 0x70FF      MOVW     R0,#+4095
   \   0000002E   0x.... 0x....      BL       Delay
    595              
    596              /* Reset The pin */
    597              HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x2110             MOVS     R1,#+16
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable24_5  ;; 0x40020c00
   \   0000003A   0x.... 0x....      BL       HAL_GPIO_WritePin
    598            }
    599            
    600            return counter;    
   \                     ??Codec_Stop_1: (+1)
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    601          }
    602          
    603          /**
    604            * @brief  Sets higher or lower the codec volume level.
    605            * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
    606            *         description for more details).
    607            * @retval 0 if correct communication, else wrong communication
    608            */

   \                                 In section .text, align 2, keep-with-next
    609          static uint32_t Codec_VolumeCtrl(uint8_t Vol)
    610          {
   \                     Codec_VolumeCtrl: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    611            uint32_t counter = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    612            
    613            if (Volume > 0xE6)
   \   00000006   0x....             LDR.N    R0,??DataTable15
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x28E7             CMP      R0,#+231
   \   0000000C   0xDB14             BLT.N    ??Codec_VolumeCtrl_0
    614            {
    615              /* Set the Master volume */
    616              counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
   \   0000000E   0x....             LDR.N    R0,??DataTable15
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0xF110 0x0119      ADDS     R1,R0,#+25
   \   00000016   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0x.... 0x....      BL       Codec_WriteRegister
   \   0000001E   0x1940             ADDS     R0,R0,R5
   \   00000020   0x0005             MOVS     R5,R0
    617              counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
   \   00000022   0x....             LDR.N    R0,??DataTable15
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0xF110 0x0119      ADDS     R1,R0,#+25
   \   0000002A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   0x2021             MOVS     R0,#+33
   \   0000002E   0x.... 0x....      BL       Codec_WriteRegister
   \   00000032   0x1940             ADDS     R0,R0,R5
   \   00000034   0x0005             MOVS     R5,R0
   \   00000036   0xE013             B.N      ??Codec_VolumeCtrl_1
    618            }
    619            else
    620            {
    621              /* Set the Master volume */
    622              counter += Codec_WriteRegister(0x20, Volume + 0x19); 
   \                     ??Codec_VolumeCtrl_0: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable15
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0xF110 0x0119      ADDS     R1,R0,#+25
   \   00000040   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000042   0x2020             MOVS     R0,#+32
   \   00000044   0x.... 0x....      BL       Codec_WriteRegister
   \   00000048   0x1940             ADDS     R0,R0,R5
   \   0000004A   0x0005             MOVS     R5,R0
    623              counter += Codec_WriteRegister(0x21, Volume + 0x19); 
   \   0000004C   0x....             LDR.N    R0,??DataTable15
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0xF110 0x0119      ADDS     R1,R0,#+25
   \   00000054   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000056   0x2021             MOVS     R0,#+33
   \   00000058   0x.... 0x....      BL       Codec_WriteRegister
   \   0000005C   0x1940             ADDS     R0,R0,R5
   \   0000005E   0x0005             MOVS     R5,R0
    624            }
    625          
    626            return counter;  
   \                     ??Codec_VolumeCtrl_1: (+1)
   \   00000060   0x0028             MOVS     R0,R5
   \   00000062   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    627          }
    628          
    629          /**
    630            * @brief  Enables or disables the mute feature on the audio codec.
    631            * @param  Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
    632            *             mute mode.
    633            * @retval 0 if correct communication, else wrong communication
    634            */

   \                                 In section .text, align 2, keep-with-next
    635          static uint32_t Codec_Mute(uint32_t Cmd)
    636          {
   \                     Codec_Mute: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    637            uint32_t counter = 0;  
   \   00000004   0x2500             MOVS     R5,#+0
    638            
    639            /* Set the Mute mode */
    640            if (Cmd == AUDIO_MUTE_ON)
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD106             BNE.N    ??Codec_Mute_0
    641            {
    642              counter += Codec_WriteRegister(0x04, 0xFF);
   \   0000000A   0x21FF             MOVS     R1,#+255
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0x.... 0x....      BL       Codec_WriteRegister
   \   00000012   0x1940             ADDS     R0,R0,R5
   \   00000014   0x0005             MOVS     R5,R0
   \   00000016   0xE007             B.N      ??Codec_Mute_1
    643            }
    644            else /* AUDIO_MUTE_OFF Disable the Mute */
    645            {
    646              counter += Codec_WriteRegister(0x04, OutputDev);
   \                     ??Codec_Mute_0: (+1)
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable24_4
   \   0000001C   0x7801             LDRB     R1,[R0, #+0]
   \   0000001E   0x2004             MOVS     R0,#+4
   \   00000020   0x.... 0x....      BL       Codec_WriteRegister
   \   00000024   0x1940             ADDS     R0,R0,R5
   \   00000026   0x0005             MOVS     R5,R0
    647            }
    648            
    649            return counter; 
   \                     ??Codec_Mute_1: (+1)
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    650          }
    651          
    652          /**
    653            * @brief  Resets the audio codec. It restores the default configuration of the 
    654            *         codec (this function shall be called before initializing the codec).
    655            * @note   This function calls an external driver function: The IO Expander driver.
    656            * @param  None
    657            * @retval None
    658            */

   \                                 In section .text, align 2, keep-with-next
    659          static void Codec_Reset(void)
    660          {
   \                     Codec_Reset: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    661            /* Power Down the codec */
    662            HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x2110             MOVS     R1,#+16
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable24_5  ;; 0x40020c00
   \   0000000A   0x.... 0x....      BL       HAL_GPIO_WritePin
    663          
    664            /* wait for a delay to insure registers erasing */
    665            Delay(CODEC_RESET_DELAY);  //904ms
   \   0000000E   0xF644 0x70FF      MOVW     R0,#+20479
   \   00000012   0x.... 0x....      BL       Delay
    666            
    667            /* Power on the codec */
    668            HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN,GPIO_PIN_SET);
   \   00000016   0x2201             MOVS     R2,#+1
   \   00000018   0x2110             MOVS     R1,#+16
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable24_5  ;; 0x40020c00
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_WritePin
    669          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
    670          
    671          /**
    672            * @brief  Writes a Byte to a given register into the audio codec through the 
    673                      control interface (I2C)
    674            * @param  RegisterAddr: The address (location) of the register to be written.
    675            * @param  RegisterValue: the Byte value to be written into destination register.
    676            * @retval 0 if correct communication, else wrong communication
    677            */

   \                                 In section .text, align 2, keep-with-next
    678          static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
    679          {
   \                     Codec_WriteRegister: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    680            uint32_t result = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    681            uint8_t bufI2C[2];
    682            bufI2C[0] = RegisterAddr;
   \   00000008   0xF88D 0x4004      STRB     R4,[SP, #+4]
    683            bufI2C[1] = RegisterValue;
   \   0000000C   0xF88D 0x5005      STRB     R5,[SP, #+5]
    684            /* Transmit the first address for write operation */
    685            while(HAL_I2C_Master_Transmit(&hi2c1, CODEC_ADDRESS, &bufI2C[0],2,CODEC_LONG_TIMEOUT)!= HAL_OK)//CODEC_LONG_TIMEOUT
   \                     ??Codec_WriteRegister_0: (+1)
   \   00000010   0xF45F 0x1096      MOVS     R0,#+1228800
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x2302             MOVS     R3,#+2
   \   00000018   0xAA01             ADD      R2,SP,#+4
   \   0000001A   0x2194             MOVS     R1,#+148
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable24_6
   \   00000020   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD008             BEQ.N    ??Codec_WriteRegister_1
    686            //while(HAL_I2C_Mem_Write(&hi2c1,CODEC_ADDRESS,RegisterAddr,1,&RegisterValue,1,10000)!= HAL_OK)
    687            {
    688          	/* Error_Handler() function is called when Timeout error occurs.
    689          	When Acknowledge failure occurs (Slave don't acknowledge its address)
    690          	Master restarts communication */
    691              if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable24_6
   \   0000002C   0x.... 0x....      BL       HAL_I2C_GetError
   \   00000030   0x2804             CMP      R0,#+4
   \   00000032   0xD0ED             BEQ.N    ??Codec_WriteRegister_0
    692              {
    693                  return Codec_TIMEOUT_UserCallback();;
   \   00000034   0x.... 0x....      BL       Codec_TIMEOUT_UserCallback
   \   00000038   0xE000             B.N      ??Codec_WriteRegister_2
    694              }
    695          
    696            }
    697            
    698             
    699          #ifdef VERIFY_WRITTENDATA
    700            /* Verify that the data has been correctly written */ 
    701            uint8_t test;
    702            test = Codec_ReadRegister(RegisterAddr);
    703            result = (test == RegisterValue)? 0:1;
    704            #if DEBUG
    705                  sprintf((char *)pUARTBuf,"REG[%x]:VAL[%x]  \r\n",RegisterAddr,test);
    706                  while(HAL_UART_Transmit(&huart3,pUARTBuf,30,1000));
    707            #endif
    708          #endif /* VERIFY_WRITTENDATA */
    709          
    710            /* Return the verifying value: 0 (Passed) or 1 (Failed) */
    711          #if 0
    712            if(__HAL_I2C_GET_FLAG(&hi2c1, I2C_FLAG_BUSY) == SET)
    713            {
    714                return HAL_BUSY;
    715            }
    716            /* Start the config sequence */
    717            I2C_GENERATE_START(I2C_ADDRESSINGMODE_7BIT,CODEC_I2C);
    718            hi2c1.Instance->CR2 = I2C_GENERATE_START(hi2c1.Init.AddressingMode,DevAddress);
    719          
    720              /* Test on EV5 and clear it */
    721            CODECTimeout = CODEC_FLAG_TIMEOUT;
    722            while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
    723            {
    724              if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
    725            }
    726            
    727            
    728          #endif
    729            return result;  
   \                     ??Codec_WriteRegister_1: (+1)
   \   0000003A   0x0030             MOVS     R0,R6
   \                     ??Codec_WriteRegister_2: (+1)
   \   0000003C   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    730          }
    731          
    732          /**
    733            * @brief  Reads and returns the value of an audio codec register through the
    734            *         control interface (I2C).
    735            * @param  RegisterAddr: Address of the register to be read.
    736            * @retval Value of the register to be read or dummy value if the communication
    737            *         fails.
    738            */
    739          static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
                                 ^
Warning[Pe177]: function "Codec_ReadRegister" was declared but never referenced
    740          {
    741            uint8_t result = 0;
    742          
    743            /* Transmit the register address to be read */
    744            /* Transmit the first address for write operation */
    745            while(HAL_I2C_Master_Transmit(&hi2c1, CODEC_ADDRESS, &RegisterAddr,1,CODEC_LONG_TIMEOUT)!= HAL_OK)
    746            {
    747          	/* Error_Handler() function is called when Timeout error occurs.
    748          	When Acknowledge failure occurs (Slave don't acknowledge its address)
    749          	Master restarts communication */
    750              if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
    751              {
    752                return Codec_TIMEOUT_UserCallback();
    753              }  
    754            }
    755            
    756            /*!< Read the byte received from the Codec */
    757            //result = I2C_ReceiveData(CODEC_I2C);
    758            while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)CODEC_ADDRESS, &result, 1, CODEC_LONG_TIMEOUT) != HAL_OK)
    759            {
    760              /* Error_Handler() function is called when Timeout error occurs.
    761                 When Acknowledge failure occurs (Slave don't acknowledge it's address)
    762                 Master restarts communication */
    763              if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
    764              {
    765                return Codec_TIMEOUT_UserCallback();
    766              }
    767            }
    768            
    769            /* Return the byte read from Codec */
    770            return (uint32_t)result;
    771          }
    772          
    773          /**
    774            * @brief  Initializes the Audio Codec control interface (I2C).
    775            * @param  None
    776            * @retval None
    777            */

   \                                 In section .text, align 2, keep-with-next
    778          static void Codec_CtrlInterface_Init(void)
    779          {
   \                     Codec_CtrlInterface_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    780              MX_I2C1_Init();   
   \   00000002   0x.... 0x....      BL       MX_I2C1_Init
    781          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    782          
    783          /**
    784            * @brief  Restore the Audio Codec control interface to its default state.
    785            *         This function doesn't de-initialize the I2C because the I2C peripheral
    786            *         may be used by other modules.
    787            * @param  None
    788            * @retval None
    789            */

   \                                 In section .text, align 2, keep-with-next
    790          static void Codec_CtrlInterface_DeInit(void)
    791          {
   \                     Codec_CtrlInterface_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    792            /* Disable the I2C peripheral */ /* This step is not done here because 
    793               the I2C interface can be used by other modules */
    794            /* I2C_DeInit(CODEC_I2C); */
    795            HAL_I2C_MspDeInit(&hi2c1);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable24_6
   \   00000006   0x.... 0x....      BL       HAL_I2C_MspDeInit
    796          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    797          
    798          /**
    799            * @brief  Initializes the Audio Codec audio interface (I2S)
    800            * @note   This function assumes that the I2S input clock (through PLL_R in 
    801            *         Devices RevA/Z and through dedicated PLLI2S_R in Devices RevB/Y)
    802            *         is already configured and ready to be used.    
    803            * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
    804            * @retval None
    805            */

   \                                 In section .text, align 2, keep-with-next
    806          static void Codec_AudioInterface_Init(uint32_t AudioFreq)
    807          {
   \                     Codec_AudioInterface_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    808            I2S3_Init(AudioFreq); 
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       I2S3_Init
    809            //SPI3_Init(AudioFreq); 
    810          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    811          
    812          /**
    813            * @brief  Restores the Audio Codec audio interface to its default state.
    814            * @param  None
    815            * @retval None
    816            */

   \                                 In section .text, align 2, keep-with-next
    817          static void Codec_AudioInterface_DeInit(void)
    818          {
   \                     Codec_AudioInterface_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    819            /* Disable the CODEC_I2S peripheral (in case it hasn't already been disabled) */
    820            //I2S_Cmd(CODEC_I2S, DISABLE);
    821            __HAL_I2S_DISABLE(&hi2s3);
   \   00000002   0x....             LDR.N    R0,??DataTable16_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x69C0             LDR      R0,[R0, #+28]
   \   00000008   0xF430 0x6080      BICS     R0,R0,#0x400
   \   0000000C   0x....             LDR.N    R1,??DataTable16_1
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x61C8             STR      R0,[R1, #+28]
    822            /* Deinitialize the CODEC_I2S peripheral */
    823            SPI_I2S_DeInit(CODEC_I2S);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable24_7  ;; 0x40003c00
   \   00000016   0x.... 0x....      BL       SPI_I2S_DeInit
    824            
    825            /* Disable the CODEC_I2S peripheral clock */
    826            //RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, DISABLE); 
    827            __HAL_RCC_SPI3_CLK_DISABLE();
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable24_8  ;; 0x40023840
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF430 0x4000      BICS     R0,R0,#0x8000
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable24_8  ;; 0x40023840
   \   00000028   0x6008             STR      R0,[R1, #+0]
    828          }
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    829          
    830          /**
    831            * @brief Initializes IOs used by the Audio Codec (on the control and audio 
    832            *        interfaces).
    833            * @param  None
    834            * @retval None
    835            */

   \                                 In section .text, align 2, keep-with-next
    836          static void Codec_GPIO_Init(void)
    837          {
   \                     Codec_GPIO_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    838            GPIO_InitTypeDef GPIO_InitStructure;
    839            
    840            __GPIOD_CLK_ENABLE();
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable24_9  ;; 0x40023830
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable24_9  ;; 0x40023830
   \   00000012   0x6008             STR      R0,[R1, #+0]
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable24_9  ;; 0x40023830
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF010 0x0008      ANDS     R0,R0,#0x8
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x9800             LDR      R0,[SP, #+0]
    841            
    842            /* Audio reset pin configuration -------------------------------------------------*/
    843            GPIO_InitStructure.Pin = AUDIO_RESET_PIN; 
   \   00000022   0x2010             MOVS     R0,#+16
   \   00000024   0x9001             STR      R0,[SP, #+4]
    844            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;//GPIO_Mode_OUT;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x9002             STR      R0,[SP, #+8]
    845            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;//GPIO_Speed_50MHz;
   \   0000002A   0x2003             MOVS     R0,#+3
   \   0000002C   0x9004             STR      R0,[SP, #+16]
    846            GPIO_InitStructure.Pull  = GPIO_NOPULL ;//GPIO_PuPd_NOPULL;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9003             STR      R0,[SP, #+12]
    847             
    848            HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
   \   00000032   0xA901             ADD      R1,SP,#+4
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable24_5  ;; 0x40020c00
   \   00000038   0x.... 0x....      BL       HAL_GPIO_Init
    849            
    850          }
   \   0000003C   0xB007             ADD      SP,SP,#+28
   \   0000003E   0xBD00             POP      {PC}             ;; return
    851          
    852          /**
    853            * @brief  Restores the IOs used by the Audio Codec interface to their default state.
    854            * @param  None
    855            * @retval None
    856            */

   \                                 In section .text, align 2, keep-with-next
    857          static void Codec_GPIO_DeInit(void)
    858          {
   \                     Codec_GPIO_DeInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    859            GPIO_InitTypeDef GPIO_InitStructure;
    860            
    861            GPIO_InitStructure.Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
   \   00000004   0x200C             MOVS     R0,#+12
   \   00000006   0x9000             STR      R0,[SP, #+0]
    862            GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9001             STR      R0,[SP, #+4]
    863            GPIO_InitStructure.Speed = GPIO_SPEED_LOW;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9003             STR      R0,[SP, #+12]
    864            GPIO_InitStructure.Pull = GPIO_NOPULL;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9002             STR      R0,[SP, #+8]
    865            HAL_GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable24_10  ;; 0x40020400
   \   0000001A   0x.... 0x....      BL       HAL_GPIO_Init
    866                
    867            GPIO_InitStructure.Pin = CODEC_I2S_WS_PIN ;
   \   0000001E   0xF44F 0x4000      MOV      R0,#+32768
   \   00000022   0x9000             STR      R0,[SP, #+0]
    868            HAL_GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable24_11  ;; 0x40020000
   \   0000002A   0x.... 0x....      BL       HAL_GPIO_Init
    869            
    870          #ifdef CODEC_MCLK_ENABLED
    871            GPIO_InitStructure.Pin = CODEC_I2S_MCK_PIN; 
   \   0000002E   0x2080             MOVS     R0,#+128
   \   00000030   0x9000             STR      R0,[SP, #+0]
    872            HAL_GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure); 
   \   00000032   0x4669             MOV      R1,SP
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable24_12  ;; 0x40020800
   \   00000038   0x.... 0x....      BL       HAL_GPIO_Init
    873          #endif /* CODEC_MCLK_ENABLED */    
    874          }
   \   0000003C   0xB005             ADD      SP,SP,#+20
   \   0000003E   0xBD00             POP      {PC}             ;; return
    875          
    876          /**
    877            * @brief  Inserts a delay time (not accurate timing).
    878            * @param  nCount: specifies the delay time length.
    879            * @retval None
    880            */

   \                                 In section .text, align 2, keep-with-next
    881          static void Delay( __IO uint32_t nCount)
    882          {
   \                     Delay: (+1)
   \   00000000   0xB401             PUSH     {R0}
    883            for (; nCount != 0; nCount--);
   \                     ??Delay_0: (+1)
   \   00000002   0x9800             LDR      R0,[SP, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD003             BEQ.N    ??Delay_1
   \   00000008   0x9800             LDR      R0,[SP, #+0]
   \   0000000A   0x1E40             SUBS     R0,R0,#+1
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0xE7F8             B.N      ??Delay_0
    884          }
   \                     ??Delay_1: (+1)
   \   00000010   0xB001             ADD      SP,SP,#+4
   \   00000012   0x4770             BX       LR               ;; return
    885          
    886          #ifdef USE_DEFAULT_TIMEOUT_CALLBACK
    887          /**
    888            * @brief  Basic management of the timeout situation.
    889            * @param  None
    890            * @retval None
    891            */
    892          uint32_t Codec_TIMEOUT_UserCallback(void)
    893          {
    894            /* Block communication and all processes */
    895            
    896          }
    897          #endif /* USE_DEFAULT_TIMEOUT_CALLBACK */
    898          /*========================
    899                          Audio MAL Interface Control Functions
    900                                                          ==============================*/
    901          
    902          
    903          /**
    904            * @brief  Restore default state of the used Media.
    905            * @param  None
    906            * @retval None
    907            */

   \                                 In section .text, align 2, keep-with-next
    908          static void Audio_MAL_DeInit(void)  
    909          {   
   \                     Audio_MAL_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    910          #if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    911            //NVIC_InitTypeDef NVIC_InitStructure;  
    912            
    913            /* Deinitialize the NVIC interrupt for the I2S DMA Stream */
    914            //NVIC_InitStructure.NVIC_IRQChannel = AUDIO_I2S_DMA_IRQ;
    915            //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = AUDIO_IRQ_PREPRIO;
    916            //NVIC_InitStructure.NVIC_IRQChannelSubPriority = AUDIO_IRQ_SUBRIO;
    917            //NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    918            //NVIC_Init(&NVIC_InitStructure);  
    919             HAL_NVIC_DisableIRQ(SPI3_IRQn); 
   \   00000002   0x2033             MOVS     R0,#+51
   \   00000004   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    920          #endif 
    921            
    922            /* Disable the DMA stream before the deinit */
    923            HAL_NVIC_DisableIRQ(DMA1_Stream7_IRQn); 
   \   00000008   0x202F             MOVS     R0,#+47
   \   0000000A   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    924            HAL_NVIC_DisableIRQ(SPI3_IRQn); 
   \   0000000E   0x2033             MOVS     R0,#+51
   \   00000010   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    925            
    926          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    927          
    928          /**
    929            * @brief  Starts playing audio stream from the audio Media.
    930            * @param  None
    931            * @retval None
    932            */

   \                                 In section .text, align 2, keep-with-next
    933          void Audio_MAL_Play(uint32_t Addr, uint16_t Size)
    934          {
    935             //HAL_I2S_Transmit_DMA(&hi2s3,Addr,(uint16_t)Size/2);  
    936             /* Configure the source, destination address and the data length */
    937              //DMA_SetConfig(&DmaHandle,(uint32_t)&SPI3->DR , (uint32_t)Addr, Size/2);
    938                /* Configure DMA Stream destination address */
    939             /* Clear DBM bit */
    940          
    941                /* Enable the Peripheral */
    942            __HAL_DMA_DISABLE(&DmaHandle);
   \                     Audio_MAL_Play: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable24_3
   \   00000004   0x6812             LDR      R2,[R2, #+0]
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0x0852             LSRS     R2,R2,#+1
   \   0000000A   0x0052             LSLS     R2,R2,#+1
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable24_3
   \   00000010   0x681B             LDR      R3,[R3, #+0]
   \   00000012   0x601A             STR      R2,[R3, #+0]
    943             DmaHandle.Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
   \   00000014   0x.... 0x....      LDR.W    R2,??DataTable24_3
   \   00000018   0x6812             LDR      R2,[R2, #+0]
   \   0000001A   0x6812             LDR      R2,[R2, #+0]
   \   0000001C   0xF432 0x2280      BICS     R2,R2,#0x40000
   \   00000020   0x.... 0x....      LDR.W    R3,??DataTable24_3
   \   00000024   0x681B             LDR      R3,[R3, #+0]
   \   00000026   0x601A             STR      R2,[R3, #+0]
    944          	 
    945             /* Configure DMA Stream data length */
    946             DmaHandle.Instance->NDTR = Size/2;
   \   00000028   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002A   0x2202             MOVS     R2,#+2
   \   0000002C   0xFB91 0xF2F2      SDIV     R2,R1,R2
   \   00000030   0x.... 0x....      LDR.W    R3,??DataTable24_3
   \   00000034   0x681B             LDR      R3,[R3, #+0]
   \   00000036   0x605A             STR      R2,[R3, #+4]
    947          
    948          
    949             DmaHandle.Instance->PAR = (uint32_t)&SPI3->DR;
   \   00000038   0x.... 0x....      LDR.W    R2,??DataTable24_13  ;; 0x40003c0c
   \   0000003C   0x.... 0x....      LDR.W    R3,??DataTable24_3
   \   00000040   0x681B             LDR      R3,[R3, #+0]
   \   00000042   0x609A             STR      R2,[R3, #+8]
    950              /* Configure DMA Stream source address */
    951              DmaHandle.Instance->M0AR = (uint32_t)Addr;
   \   00000044   0x.... 0x....      LDR.W    R2,??DataTable24_3
   \   00000048   0x6812             LDR      R2,[R2, #+0]
   \   0000004A   0x60D0             STR      R0,[R2, #+12]
    952              
    953              /* Enable Tx DMA Request */  
    954              hi2s3.Instance->CR2 |= SPI_CR2_TXDMAEN;
   \   0000004C   0x.... 0x....      LDR.W    R2,??DataTable24_14
   \   00000050   0x6812             LDR      R2,[R2, #+0]
   \   00000052   0x6852             LDR      R2,[R2, #+4]
   \   00000054   0xF052 0x0202      ORRS     R2,R2,#0x2
   \   00000058   0x.... 0x....      LDR.W    R3,??DataTable24_14
   \   0000005C   0x681B             LDR      R3,[R3, #+0]
   \   0000005E   0x605A             STR      R2,[R3, #+4]
    955            /* Enable the transfer complete interrupt */
    956             __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000060   0x.... 0x....      LDR.W    R2,??DataTable24_3
   \   00000064   0x6812             LDR      R2,[R2, #+0]
   \   00000066   0x6812             LDR      R2,[R2, #+0]
   \   00000068   0xF052 0x0210      ORRS     R2,R2,#0x10
   \   0000006C   0x.... 0x....      LDR.W    R3,??DataTable24_3
   \   00000070   0x681B             LDR      R3,[R3, #+0]
   \   00000072   0x601A             STR      R2,[R3, #+0]
    957           
    958           /* Enable the Peripheral */
    959            __HAL_DMA_ENABLE(&DmaHandle);
   \   00000074   0x.... 0x....      LDR.W    R2,??DataTable24_3
   \   00000078   0x6812             LDR      R2,[R2, #+0]
   \   0000007A   0x6812             LDR      R2,[R2, #+0]
   \   0000007C   0xF052 0x0201      ORRS     R2,R2,#0x1
   \   00000080   0x.... 0x....      LDR.W    R3,??DataTable24_3
   \   00000084   0x681B             LDR      R3,[R3, #+0]
   \   00000086   0x601A             STR      R2,[R3, #+0]
    960          
    961             
    962             /* Check if the I2S is already enabled */ 
    963             if((hi2s3.Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
   \   00000088   0x.... 0x....      LDR.W    R2,??DataTable24_14
   \   0000008C   0x6812             LDR      R2,[R2, #+0]
   \   0000008E   0x69D2             LDR      R2,[R2, #+28]
   \   00000090   0x0552             LSLS     R2,R2,#+21
   \   00000092   0xD409             BMI.N    ??Audio_MAL_Play_0
    964             {
    965          	 /* Enable I2S peripheral */	
    966          	 __HAL_I2S_ENABLE(&hi2s3);
   \   00000094   0x.... 0x....      LDR.W    R2,??DataTable24_14
   \   00000098   0x6812             LDR      R2,[R2, #+0]
   \   0000009A   0x69D2             LDR      R2,[R2, #+28]
   \   0000009C   0xF452 0x6280      ORRS     R2,R2,#0x400
   \   000000A0   0x.... 0x....      LDR.W    R3,??DataTable24_14
   \   000000A4   0x681B             LDR      R3,[R3, #+0]
   \   000000A6   0x61DA             STR      R2,[R3, #+28]
    967             }
    968          	   
    969          
    970                /* Process Unlocked */
    971              __HAL_UNLOCK(&hi2s3);
   \                     ??Audio_MAL_Play_0: (+1)
   \   000000A8   0x2200             MOVS     R2,#+0
   \   000000AA   0x.... 0x....      LDR.W    R3,??DataTable24_14
   \   000000AE   0xF883 0x2038      STRB     R2,[R3, #+56]
    972          
    973          
    974          }
   \   000000B2   0x4770             BX       LR               ;; return
    975          
    976          /**
    977            * @brief  Pauses or Resumes the audio stream playing from the Media.
    978            * @param  Cmd: AUDIO_PAUSE (or 0) to pause, AUDIO_RESUME (or any value different
    979            *              from 0) to resume. 
    980            * @param  Addr: Address from/at which the audio stream should resume/pause.
    981            * @retval None
    982            */

   \                                 In section .text, align 2, keep-with-next
    983          static void Audio_MAL_PauseResume(uint32_t Cmd, uint32_t Addr)
    984          {
   \                     Audio_MAL_PauseResume: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    985            /* Pause the audio file playing */
    986            if (Cmd == AUDIO_PAUSE)
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD10B             BNE.N    ??Audio_MAL_PauseResume_0
    987            {   
    988              /* Disable the I2S DMA request */
    989              SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, DISABLE);
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable24_7  ;; 0x40003c00
   \   00000012   0x.... 0x....      BL       SPI_I2S_DMACmd
    990          
    991              /* Pause the I2S DMA Stream 
    992                  Note. For the STM32F40x devices, the DMA implements a pause feature, 
    993                        by disabling the stream, all configuration is preserved and data 
    994                        transfer is paused till the next enable of the stream.
    995                        This feature is not available on STM32F40x devices. */
    996              DMA_Cmd(AUDIO_I2S_DMA_STREAM, DISABLE);
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable24_15  ;; 0x400260b8
   \   0000001C   0x.... 0x....      BL       DMA_Cmd
   \   00000020   0xE014             B.N      ??Audio_MAL_PauseResume_1
    997            }
    998            else /* AUDIO_RESUME */
    999            {
   1000              /* Enable the I2S DMA request */
   1001              SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);
   \                     ??Audio_MAL_PauseResume_0: (+1)
   \   00000022   0x2201             MOVS     R2,#+1
   \   00000024   0x2102             MOVS     R1,#+2
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable24_7  ;; 0x40003c00
   \   0000002A   0x.... 0x....      BL       SPI_I2S_DMACmd
   1002            
   1003              /* Resume the I2S DMA Stream 
   1004                  Note. For the STM32F40x devices, the DMA implements a pause feature, 
   1005                        by disabling the stream, all configuration is preserved and data 
   1006                        transfer is paused till the next enable of the stream.
   1007                        This feature is not available on STM32F40x devices. */
   1008              DMA_Cmd(AUDIO_I2S_DMA_STREAM, ENABLE);
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable24_15  ;; 0x400260b8
   \   00000034   0x.... 0x....      BL       DMA_Cmd
   1009              
   1010              /* If the I2S peripheral is still not enabled, enable it */
   1011              if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable24_16  ;; 0x40003c1c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0540             LSLS     R0,R0,#+21
   \   00000040   0xD404             BMI.N    ??Audio_MAL_PauseResume_1
   1012              {
   1013                I2S_Cmd(CODEC_I2S, ENABLE);
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable24_7  ;; 0x40003c00
   \   00000048   0x.... 0x....      BL       I2S_Cmd
   1014              }    
   1015            } 
   1016          }
   \                     ??Audio_MAL_PauseResume_1: (+1)
   \   0000004C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1017          
   1018          /**
   1019            * @brief  Stops audio stream playing on the used Media.
   1020            * @param  None
   1021            * @retval None
   1022            */

   \                                 In section .text, align 2, keep-with-next
   1023          static void Audio_MAL_Stop(void)
   1024          {   
   \                     Audio_MAL_Stop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1025            /* Stop the Transfer on the I2S side: Stop and disable the DMA stream */
   1026            //DMA_Cmd(AUDIO_I2S_DMA_STREAM, DISABLE);
   1027          
   1028            /* Clear all the DMA flags for the next transfer */
   1029            //DMA_ClearFlag(AUDIO_I2S_DMA_STREAM, AUDIO_I2S_DMA_FLAG_TC |AUDIO_I2S_DMA_FLAG_HT | \
   1030             //                               AUDIO_I2S_DMA_FLAG_FE | AUDIO_I2S_DMA_FLAG_TE);
   1031            
   1032            /*  
   1033                     The I2S DMA requests are not disabled here.
   1034                                                                      */
   1035            
   1036            /* In all modes, disable the I2S peripheral */
   1037            //I2S_Cmd(CODEC_I2S, DISABLE);
   1038          
   1039            //HAL_SPI_MspDeInit(&hi2s3);
   1040            HAL_I2S_DMAStop(&hi2s3);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable24_14
   \   00000006   0x.... 0x....      BL       HAL_I2S_DMAStop
   1041          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
   1042          
   1043          /**
   1044            * @brief  DAC  Channel1 Configuration
   1045            * @param  None
   1046            * @retval None
   1047            */

   \                                 In section .text, align 2, keep-with-next
   1048          void DAC_Config(void)
   1049          {
   1050          
   1051          }
   \                     DAC_Config: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1052          
   1053          
   1054          
   1055          
   1056          
   1057          
   1058          
   1059          /**
   1060            * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
   1061            * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
   1062            *         for full duplex mode).
   1063            * @param  NewState: new state of the SPIx peripheral. 
   1064            *         This parameter can be: ENABLE or DISABLE.
   1065            * @retval None
   1066            */

   \                                 In section .text, align 2, keep-with-next
   1067          static void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
   1068          {  
   1069            if (NewState != DISABLE)
   \                     I2S_Cmd: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD004             BEQ.N    ??I2S_Cmd_0
   1070            {
   1071              /* Enable the selected SPI peripheral (in I2S mode) */
   1072              SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
   \   00000006   0x69C2             LDR      R2,[R0, #+28]
   \   00000008   0xF452 0x6280      ORRS     R2,R2,#0x400
   \   0000000C   0x61C2             STR      R2,[R0, #+28]
   \   0000000E   0xE004             B.N      ??I2S_Cmd_1
   1073            }
   1074            else
   1075            {
   1076              /* Disable the selected SPI peripheral in I2S mode */
   1077              SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
   \                     ??I2S_Cmd_0: (+1)
   \   00000010   0x69C2             LDR      R2,[R0, #+28]
   \   00000012   0xF64F 0x33FF      MOVW     R3,#+64511
   \   00000016   0x401A             ANDS     R2,R3,R2
   \   00000018   0x61C2             STR      R2,[R0, #+28]
   1078            }
   1079          }
   \                     ??I2S_Cmd_1: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
   1080          
   1081          /**
   1082            * @brief  Deinitialize the SPIx peripheral registers to their default reset values.
   1083            * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
   1084            *         in SPI mode or 2 or 3 in I2S mode.   
   1085            *         
   1086            * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are deinitialized
   1087            *         when the relative I2S peripheral is deinitialized (the extended block's clock
   1088            *         is managed by the I2S peripheral clock).
   1089            *             
   1090            * @retval None
   1091            */

   \                                 In section .text, align 2, keep-with-next
   1092          static void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
   1093          {
   \                     SPI_I2S_DeInit: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
   1094          
   1095            if (SPIx == SPI1)
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable24_17  ;; 0x40013000
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD117             BNE.N    ??SPI_I2S_DeInit_0
   1096            {
   1097              /* Enable SPI1 reset state */
   1098              //RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
   1099              __HAL_RCC_SPI1_CLK_ENABLE();
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable24_18  ;; 0x40023844
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0xF451 0x5180      ORRS     R1,R1,#0x1000
   \   00000014   0x.... 0x....      LDR.W    R2,??DataTable24_18  ;; 0x40023844
   \   00000018   0x6011             STR      R1,[R2, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable24_18  ;; 0x40023844
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0xF411 0x5180      ANDS     R1,R1,#0x1000
   \   00000024   0x9100             STR      R1,[SP, #+0]
   \   00000026   0x9900             LDR      R1,[SP, #+0]
   1100              /* Release SPI1 from reset state */
   1101              //RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
   1102              __HAL_RCC_SPI1_CLK_DISABLE();
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable24_18  ;; 0x40023844
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0xF431 0x5180      BICS     R1,R1,#0x1000
   \   00000032   0x.... 0x....      LDR.W    R2,??DataTable24_18  ;; 0x40023844
   \   00000036   0x6011             STR      R1,[R2, #+0]
   \   00000038   0xE036             B.N      ??SPI_I2S_DeInit_1
   1103            }
   1104            else if (SPIx == SPI2)
   \                     ??SPI_I2S_DeInit_0: (+1)
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable24_19  ;; 0x40003800
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD117             BNE.N    ??SPI_I2S_DeInit_2
   1105            {
   1106              /* Enable SPI2 reset state */
   1107              //RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
   1108              __HAL_RCC_SPI2_CLK_ENABLE();
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable24_8  ;; 0x40023840
   \   00000046   0x6809             LDR      R1,[R1, #+0]
   \   00000048   0xF451 0x4180      ORRS     R1,R1,#0x4000
   \   0000004C   0x.... 0x....      LDR.W    R2,??DataTable24_8  ;; 0x40023840
   \   00000050   0x6011             STR      R1,[R2, #+0]
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable24_8  ;; 0x40023840
   \   00000056   0x6809             LDR      R1,[R1, #+0]
   \   00000058   0xF411 0x4180      ANDS     R1,R1,#0x4000
   \   0000005C   0x9100             STR      R1,[SP, #+0]
   \   0000005E   0x9900             LDR      R1,[SP, #+0]
   1109              /* Release SPI2 from reset state */
   1110              //RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
   1111              __HAL_RCC_SPI2_CLK_DISABLE();
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable24_8  ;; 0x40023840
   \   00000064   0x6809             LDR      R1,[R1, #+0]
   \   00000066   0xF431 0x4180      BICS     R1,R1,#0x4000
   \   0000006A   0x.... 0x....      LDR.W    R2,??DataTable24_8  ;; 0x40023840
   \   0000006E   0x6011             STR      R1,[R2, #+0]
   \   00000070   0xE01A             B.N      ??SPI_I2S_DeInit_1
   1112            }
   1113            else
   1114            {
   1115              if (SPIx == SPI3)
   \                     ??SPI_I2S_DeInit_2: (+1)
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable24_7  ;; 0x40003c00
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xD116             BNE.N    ??SPI_I2S_DeInit_1
   1116              {
   1117                /* Enable SPI3 reset state */
   1118                //RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
   1119                __HAL_RCC_SPI3_CLK_ENABLE();
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable24_8  ;; 0x40023840
   \   0000007E   0x6809             LDR      R1,[R1, #+0]
   \   00000080   0xF451 0x4100      ORRS     R1,R1,#0x8000
   \   00000084   0x.... 0x....      LDR.W    R2,??DataTable24_8  ;; 0x40023840
   \   00000088   0x6011             STR      R1,[R2, #+0]
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable24_8  ;; 0x40023840
   \   0000008E   0x6809             LDR      R1,[R1, #+0]
   \   00000090   0xF411 0x4100      ANDS     R1,R1,#0x8000
   \   00000094   0x9100             STR      R1,[SP, #+0]
   \   00000096   0x9900             LDR      R1,[SP, #+0]
   1120                /* Release SPI3 from reset state */
   1121                //RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
   1122                __HAL_RCC_SPI3_CLK_DISABLE();
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable24_8  ;; 0x40023840
   \   0000009C   0x6809             LDR      R1,[R1, #+0]
   \   0000009E   0xF431 0x4100      BICS     R1,R1,#0x8000
   \   000000A2   0x.... 0x....      LDR.W    R2,??DataTable24_8  ;; 0x40023840
   \   000000A6   0x6011             STR      R1,[R2, #+0]
   1123              }
   1124            }
   1125          }
   \                     ??SPI_I2S_DeInit_1: (+1)
   \   000000A8   0xB001             ADD      SP,SP,#+4
   \   000000AA   0x4770             BX       LR               ;; return
   1126          
   1127          /**
   1128            * @brief  Enables or disables the specified DMAy Streamx.
   1129            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
   1130            *         to 7 to select the DMA Stream.
   1131            * @param  NewState: new state of the DMAy Streamx. 
   1132            *          This parameter can be: ENABLE or DISABLE.
   1133            *
   1134            * @note  This function may be used to perform Pause-Resume operation. When a
   1135            *        transfer is ongoing, calling this function to disable the Stream will
   1136            *        cause the transfer to be paused. All configuration registers and the
   1137            *        number of remaining data will be preserved. When calling again this
   1138            *        function to re-enable the Stream, the transfer will be resumed from
   1139            *        the point where it was paused.          
   1140            *    
   1141            * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
   1142            *        stream, it is recommended to check (or wait until) the DMA Stream is
   1143            *        effectively enabled. A Stream may remain disabled if a configuration 
   1144            *        parameter is wrong.
   1145            *        After disabling a DMA Stream, it is also recommended to check (or wait
   1146            *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
   1147            *        while a data transfer is ongoing, the current data will be transferred
   1148            *        and the Stream will be effectively disabled only after the transfer of
   1149            *        this single data is finished.            
   1150            *    
   1151            * @retval None
   1152            */

   \                                 In section .text, align 2, keep-with-next
   1153          static void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
   1154          {
   1155          
   1156          
   1157            if (NewState != DISABLE)
   \                     DMA_Cmd: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD004             BEQ.N    ??DMA_Cmd_0
   1158            {
   1159              /* Enable the selected DMAy Streamx by setting EN bit */
   1160              DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
   \   00000006   0x6802             LDR      R2,[R0, #+0]
   \   00000008   0xF052 0x0201      ORRS     R2,R2,#0x1
   \   0000000C   0x6002             STR      R2,[R0, #+0]
   \   0000000E   0xE003             B.N      ??DMA_Cmd_1
   1161            }
   1162            else
   1163            {
   1164              /* Disable the selected DMAy Streamx by clearing EN bit */
   1165              DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
   \                     ??DMA_Cmd_0: (+1)
   \   00000010   0x6802             LDR      R2,[R0, #+0]
   \   00000012   0x0852             LSRS     R2,R2,#+1
   \   00000014   0x0052             LSLS     R2,R2,#+1
   \   00000016   0x6002             STR      R2,[R0, #+0]
   1166            }
   1167          }
   \                     ??DMA_Cmd_1: (+1)
   \   00000018   0x4770             BX       LR               ;; return
   1168          
   1169          
   1170          /**
   1171            * @brief  Enables or disables the SPIx/I2Sx DMA interface.
   1172            * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
   1173            *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
   1174            * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
   1175            *          This parameter can be any combination of the following values:
   1176            *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
   1177            *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
   1178            * @param  NewState: new state of the selected SPI DMA transfer request.
   1179            *          This parameter can be: ENABLE or DISABLE.
   1180            * @retval None
   1181            */

   \                                 In section .text, align 2, keep-with-next
   1182          static void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
   1183          {
   \                     SPI_I2S_DMACmd: (+1)
   \   00000000   0xB410             PUSH     {R4}
   1184            /* Check the parameters */
   1185            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1186            assert_param(IS_FUNCTIONAL_STATE(NewState));
   1187            assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
   1188          
   1189            if (NewState != DISABLE)
   \   00000002   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD004             BEQ.N    ??SPI_I2S_DMACmd_0
   1190            {
   1191              /* Enable the selected SPI DMA requests */
   1192              SPIx->CR2 |= SPI_I2S_DMAReq;
   \   00000008   0x6843             LDR      R3,[R0, #+4]
   \   0000000A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000C   0x430B             ORRS     R3,R1,R3
   \   0000000E   0x6043             STR      R3,[R0, #+4]
   \   00000010   0xE004             B.N      ??SPI_I2S_DMACmd_1
   1193            }
   1194            else
   1195            {
   1196              /* Disable the selected SPI DMA requests */
   1197              SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
   \                     ??SPI_I2S_DMACmd_0: (+1)
   \   00000012   0x6843             LDR      R3,[R0, #+4]
   \   00000014   0x43CC             MVNS     R4,R1
   \   00000016   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000018   0x4023             ANDS     R3,R4,R3
   \   0000001A   0x6043             STR      R3,[R0, #+4]
   1198            }
   1199          }
   \                     ??SPI_I2S_DMACmd_1: (+1)
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return
   1200          

   \                                 In section .text, align 2, keep-with-next
   1201          void HAL_I2S_MspInit(I2S_HandleTypeDef *hi2s)
   1202          {
   \                     HAL_I2S_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x0004             MOVS     R4,R0
   1203             GPIO_InitTypeDef GPIO_InitStructure;
   1204          	
   1205             
   1206             GPIO_InitTypeDef GPIO_InitStruct;
   1207            if(hi2s->Instance==SPI1)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable24_17  ;; 0x40013000
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD144             BNE.N    ??HAL_I2S_MspInit_0
   1208            {
   1209            /* USER CODE BEGIN SPI1_MspInit 0 */
   1210          
   1211            /* USER CODE END SPI1_MspInit 0 */
   1212            /* Peripheral clock enable */
   1213            __SPI1_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable24_18  ;; 0x40023844
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable24_18  ;; 0x40023844
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable24_18  ;; 0x40023844
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF410 0x5080      ANDS     R0,R0,#0x1000
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
   1214            __GPIOA_CLK_ENABLE();
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable24_9  ;; 0x40023830
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable24_9  ;; 0x40023830
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable24_9  ;; 0x40023830
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   1215            __GPIOC_CLK_ENABLE();
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable24_9  ;; 0x40023830
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable24_9  ;; 0x40023830
   \   0000005A   0x6008             STR      R0,[R1, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable24_9  ;; 0x40023830
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0x9800             LDR      R0,[SP, #+0]
   1216          
   1217            /**I2S1 GPIO Configuration    
   1218              PA4     ------> I2S1_WS --> LRCKO
   1219              PA5     ------> I2S1_CK --> BICKO
   1220              PA7     ------> I2S1_SD --> SDO12
   1221              PC4     ------> I2S1_MCK
   1222              */
   1223          	GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
   \   0000006A   0x20B0             MOVS     R0,#+176
   \   0000006C   0x9006             STR      R0,[SP, #+24]
   1224          	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000006E   0x2002             MOVS     R0,#+2
   \   00000070   0x9007             STR      R0,[SP, #+28]
   1225          	GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x9008             STR      R0,[SP, #+32]
   1226          	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000076   0x2003             MOVS     R0,#+3
   \   00000078   0x9009             STR      R0,[SP, #+36]
   1227          	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   \   0000007A   0x2005             MOVS     R0,#+5
   \   0000007C   0x900A             STR      R0,[SP, #+40]
   1228          	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   0000007E   0xA906             ADD      R1,SP,#+24
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable24_11  ;; 0x40020000
   \   00000084   0x.... 0x....      BL       HAL_GPIO_Init
   1229          
   1230              //GPIO_InitStruct.Pin = GPIO_PIN_4;
   1231              //GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1232              //GPIO_InitStruct.Pull = GPIO_NOPULL;
   1233              //GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1234              //GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1235              //HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1236          	
   1237            /* Peripheral interrupt init*/
   1238              HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000088   0x2200             MOVS     R2,#+0
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x2023             MOVS     R0,#+35
   \   0000008E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1239              HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000092   0x2023             MOVS     R0,#+35
   \   00000094   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   00000098   0xE119             B.N      ??HAL_I2S_MspInit_1
   1240            /* USER CODE BEGIN SPI1_MspInit 1 */
   1241          
   1242            /* USER CODE END SPI1_MspInit 1 */
   1243            }
   1244            else if(hi2s->Instance==SPI2)
   \                     ??HAL_I2S_MspInit_0: (+1)
   \   0000009A   0x6820             LDR      R0,[R4, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable24_19  ;; 0x40003800
   \   000000A0   0x4288             CMP      R0,R1
   \   000000A2   0xD155             BNE.N    ??HAL_I2S_MspInit_2
   1245            {
   1246          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1247          	  
   1248          	  /* USER CODE END SPI2_MspInit 0 */
   1249          		/* Peripheral clock enable */
   1250          		__SPI2_CLK_ENABLE();
   \   000000A4   0x....             LDR.N    R0,??DataTable24_8  ;; 0x40023840
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   000000AC   0x....             LDR.N    R1,??DataTable24_8  ;; 0x40023840
   \   000000AE   0x6008             STR      R0,[R1, #+0]
   \   000000B0   0x....             LDR.N    R0,??DataTable24_8  ;; 0x40023840
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0xF410 0x4080      ANDS     R0,R0,#0x4000
   \   000000B8   0x9000             STR      R0,[SP, #+0]
   \   000000BA   0x9800             LDR      R0,[SP, #+0]
   1251          		__GPIOI_CLK_ENABLE();
   \   000000BC   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   000000C4   0x....             LDR.N    R1,??DataTable24_9  ;; 0x40023830
   \   000000C6   0x6008             STR      R0,[R1, #+0]
   \   000000C8   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0xF410 0x7080      ANDS     R0,R0,#0x100
   \   000000D0   0x9000             STR      R0,[SP, #+0]
   \   000000D2   0x9800             LDR      R0,[SP, #+0]
   1252          		__GPIOB_CLK_ENABLE();
   \   000000D4   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000DC   0x....             LDR.N    R1,??DataTable24_9  ;; 0x40023830
   \   000000DE   0x6008             STR      R0,[R1, #+0]
   \   000000E0   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   000000E2   0x6800             LDR      R0,[R0, #+0]
   \   000000E4   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   000000E8   0x9000             STR      R0,[SP, #+0]
   \   000000EA   0x9800             LDR      R0,[SP, #+0]
   1253          		__GPIOC_CLK_ENABLE();
   \   000000EC   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   000000EE   0x6800             LDR      R0,[R0, #+0]
   \   000000F0   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000F4   0x....             LDR.N    R1,??DataTable24_9  ;; 0x40023830
   \   000000F6   0x6008             STR      R0,[R1, #+0]
   \   000000F8   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   000000FA   0x6800             LDR      R0,[R0, #+0]
   \   000000FC   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000100   0x9000             STR      R0,[SP, #+0]
   \   00000102   0x9800             LDR      R0,[SP, #+0]
   1254          	  
   1255          		/**I2S2 GPIO Configuration	   
   1256          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1257          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1258          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1259          	  
   1260          	  
   1261          		*/
   1262          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   \   00000104   0x2002             MOVS     R0,#+2
   \   00000106   0x9006             STR      R0,[SP, #+24]
   1263          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000108   0x2002             MOVS     R0,#+2
   \   0000010A   0x9007             STR      R0,[SP, #+28]
   1264          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x9008             STR      R0,[SP, #+32]
   1265          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000110   0x2003             MOVS     R0,#+3
   \   00000112   0x9009             STR      R0,[SP, #+36]
   1266          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   \   00000114   0x2005             MOVS     R0,#+5
   \   00000116   0x900A             STR      R0,[SP, #+40]
   1267          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000118   0xA906             ADD      R1,SP,#+24
   \   0000011A   0x....             LDR.N    R0,??DataTable24_12  ;; 0x40020800
   \   0000011C   0x.... 0x....      BL       HAL_GPIO_Init
   1268          	  
   1269          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   00000120   0xF44F 0x5040      MOV      R0,#+12288
   \   00000124   0x9006             STR      R0,[SP, #+24]
   1270          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000126   0x2002             MOVS     R0,#+2
   \   00000128   0x9007             STR      R0,[SP, #+28]
   1271          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   0000012A   0x2000             MOVS     R0,#+0
   \   0000012C   0x9008             STR      R0,[SP, #+32]
   1272          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   0000012E   0x2003             MOVS     R0,#+3
   \   00000130   0x9009             STR      R0,[SP, #+36]
   1273          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   \   00000132   0x2005             MOVS     R0,#+5
   \   00000134   0x900A             STR      R0,[SP, #+40]
   1274          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000136   0xA906             ADD      R1,SP,#+24
   \   00000138   0x....             LDR.N    R0,??DataTable24_10  ;; 0x40020400
   \   0000013A   0x.... 0x....      BL       HAL_GPIO_Init
   1275          	  
   1276          	  
   1277          		/* Peripheral interrupt init*/
   1278          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   0000013E   0x2200             MOVS     R2,#+0
   \   00000140   0x2101             MOVS     R1,#+1
   \   00000142   0x2024             MOVS     R0,#+36
   \   00000144   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1279          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   00000148   0x2024             MOVS     R0,#+36
   \   0000014A   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   0000014E   0xE0BE             B.N      ??HAL_I2S_MspInit_1
   1280          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1281          	  
   1282          	  /* USER CODE END SPI2_MspInit 1 */
   1283          
   1284            }
   1285            else if(hi2s->Instance==SPI3)
   \                     ??HAL_I2S_MspInit_2: (+1)
   \   00000150   0x6820             LDR      R0,[R4, #+0]
   \   00000152   0x....             LDR.N    R1,??DataTable24_7  ;; 0x40003c00
   \   00000154   0x4288             CMP      R0,R1
   \   00000156   0xF040 0x80BA      BNE.W    ??HAL_I2S_MspInit_1
   1286            {
   1287          
   1288          
   1289            
   1290              /**I2S3 GPIO Configuration    
   1291                 PB2     ------> I2S3_SD
   1292                 PA15     ------> I2S3_WS (LRCK)
   1293                 PB3     ------> I2S3_CK 
   1294          	 PC7    ------> MCLK
   1295              */
   1296           
   1297            /* USER CODE BEGIN SPI3_MspInit 1 */
   1298            __SPI3_CLK_ENABLE();
   \   0000015A   0x....             LDR.N    R0,??DataTable24_8  ;; 0x40023840
   \   0000015C   0x6800             LDR      R0,[R0, #+0]
   \   0000015E   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   00000162   0x....             LDR.N    R1,??DataTable24_8  ;; 0x40023840
   \   00000164   0x6008             STR      R0,[R1, #+0]
   \   00000166   0x....             LDR.N    R0,??DataTable24_8  ;; 0x40023840
   \   00000168   0x6800             LDR      R0,[R0, #+0]
   \   0000016A   0xF410 0x4000      ANDS     R0,R0,#0x8000
   \   0000016E   0x9000             STR      R0,[SP, #+0]
   \   00000170   0x9800             LDR      R0,[SP, #+0]
   1299            __GPIOA_CLK_ENABLE();
   \   00000172   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   00000174   0x6800             LDR      R0,[R0, #+0]
   \   00000176   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000017A   0x....             LDR.N    R1,??DataTable24_9  ;; 0x40023830
   \   0000017C   0x6008             STR      R0,[R1, #+0]
   \   0000017E   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   00000180   0x6800             LDR      R0,[R0, #+0]
   \   00000182   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000186   0x9000             STR      R0,[SP, #+0]
   \   00000188   0x9800             LDR      R0,[SP, #+0]
   1300            __GPIOB_CLK_ENABLE();
   \   0000018A   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   0000018C   0x6800             LDR      R0,[R0, #+0]
   \   0000018E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000192   0x....             LDR.N    R1,??DataTable24_9  ;; 0x40023830
   \   00000194   0x6008             STR      R0,[R1, #+0]
   \   00000196   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   00000198   0x6800             LDR      R0,[R0, #+0]
   \   0000019A   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   0000019E   0x9000             STR      R0,[SP, #+0]
   \   000001A0   0x9800             LDR      R0,[SP, #+0]
   1301            __GPIOC_CLK_ENABLE();
   \   000001A2   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   000001A4   0x6800             LDR      R0,[R0, #+0]
   \   000001A6   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000001AA   0x....             LDR.N    R1,??DataTable24_9  ;; 0x40023830
   \   000001AC   0x6008             STR      R0,[R1, #+0]
   \   000001AE   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   000001B0   0x6800             LDR      R0,[R0, #+0]
   \   000001B2   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   000001B6   0x9000             STR      R0,[SP, #+0]
   \   000001B8   0x9800             LDR      R0,[SP, #+0]
   1302            GPIO_InitStructure.Pin = GPIO_PIN_3; 
   \   000001BA   0x2008             MOVS     R0,#+8
   \   000001BC   0x9001             STR      R0,[SP, #+4]
   1303            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
   \   000001BE   0x2002             MOVS     R0,#+2
   \   000001C0   0x9002             STR      R0,[SP, #+8]
   1304            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
   \   000001C2   0x2003             MOVS     R0,#+3
   \   000001C4   0x9004             STR      R0,[SP, #+16]
   1305            GPIO_InitStructure.Pull = GPIO_NOPULL;
   \   000001C6   0x2000             MOVS     R0,#+0
   \   000001C8   0x9003             STR      R0,[SP, #+12]
   1306            GPIO_InitStructure.Alternate = GPIO_AF6_SPI3;
   \   000001CA   0x2006             MOVS     R0,#+6
   \   000001CC   0x9005             STR      R0,[SP, #+20]
   1307            HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   000001CE   0xA901             ADD      R1,SP,#+4
   \   000001D0   0x....             LDR.N    R0,??DataTable24_10  ;; 0x40020400
   \   000001D2   0x.... 0x....      BL       HAL_GPIO_Init
   1308          
   1309              GPIO_InitStructure.Pin = GPIO_PIN_2; 
   \   000001D6   0x2004             MOVS     R0,#+4
   \   000001D8   0x9001             STR      R0,[SP, #+4]
   1310            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
   \   000001DA   0x2002             MOVS     R0,#+2
   \   000001DC   0x9002             STR      R0,[SP, #+8]
   1311            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
   \   000001DE   0x2003             MOVS     R0,#+3
   \   000001E0   0x9004             STR      R0,[SP, #+16]
   1312            GPIO_InitStructure.Pull = GPIO_NOPULL;
   \   000001E2   0x2000             MOVS     R0,#+0
   \   000001E4   0x9003             STR      R0,[SP, #+12]
   1313            GPIO_InitStructure.Alternate = GPIO_AF7_SPI3;
   \   000001E6   0x2007             MOVS     R0,#+7
   \   000001E8   0x9005             STR      R0,[SP, #+20]
   1314            HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   000001EA   0xA901             ADD      R1,SP,#+4
   \   000001EC   0x....             LDR.N    R0,??DataTable24_10  ;; 0x40020400
   \   000001EE   0x.... 0x....      BL       HAL_GPIO_Init
   1315          
   1316          
   1317            GPIO_InitStructure.Pin = GPIO_PIN_15;
   \   000001F2   0xF44F 0x4000      MOV      R0,#+32768
   \   000001F6   0x9001             STR      R0,[SP, #+4]
   1318            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
   \   000001F8   0x2002             MOVS     R0,#+2
   \   000001FA   0x9002             STR      R0,[SP, #+8]
   1319            GPIO_InitStructure.Alternate = GPIO_AF6_SPI3;
   \   000001FC   0x2006             MOVS     R0,#+6
   \   000001FE   0x9005             STR      R0,[SP, #+20]
   1320            HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000200   0xA901             ADD      R1,SP,#+4
   \   00000202   0x....             LDR.N    R0,??DataTable24_11  ;; 0x40020000
   \   00000204   0x.... 0x....      BL       HAL_GPIO_Init
   1321          
   1322          
   1323             
   1324          #ifdef CODEC_MCLK_ENABLED
   1325          
   1326            GPIO_InitStructure.Pin = GPIO_PIN_7; 
   \   00000208   0x2080             MOVS     R0,#+128
   \   0000020A   0x9001             STR      R0,[SP, #+4]
   1327            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
   \   0000020C   0x2002             MOVS     R0,#+2
   \   0000020E   0x9002             STR      R0,[SP, #+8]
   1328            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
   \   00000210   0x2003             MOVS     R0,#+3
   \   00000212   0x9004             STR      R0,[SP, #+16]
   1329            GPIO_InitStructure.Pull = GPIO_NOPULL;
   \   00000214   0x2000             MOVS     R0,#+0
   \   00000216   0x9003             STR      R0,[SP, #+12]
   1330            GPIO_InitStructure.Alternate = GPIO_AF6_SPI3;
   \   00000218   0x2006             MOVS     R0,#+6
   \   0000021A   0x9005             STR      R0,[SP, #+20]
   1331            HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   0000021C   0xA901             ADD      R1,SP,#+4
   \   0000021E   0x....             LDR.N    R0,??DataTable24_12  ;; 0x40020800
   \   00000220   0x.... 0x....      BL       HAL_GPIO_Init
   1332          
   1333          #endif /* CODEC_MCLK_ENABLED */ 
   1334          
   1335          #ifdef I2S_INTERRUPT   
   1336               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1337               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1338               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1339          
   1340               /* Enable the I2S DMA request */
   1341               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1342               //__HAL_I2S_ENABLE(&hi2s3);
   1343            	    /* Peripheral interrupt init*/
   1344          		HAL_NVIC_SetPriority(SPI3_IRQn, INTERRUPT_PRI_AUDIOOUT, 0);
   1345          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1346          #endif
   1347          
   1348                /* Enable the DMA clock */ 
   1349          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   00000224   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   00000226   0x6800             LDR      R0,[R0, #+0]
   \   00000228   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   0000022C   0x....             LDR.N    R1,??DataTable24_9  ;; 0x40023830
   \   0000022E   0x6008             STR      R0,[R1, #+0]
   \   00000230   0x....             LDR.N    R0,??DataTable24_9  ;; 0x40023830
   \   00000232   0x6800             LDR      R0,[R0, #+0]
   \   00000234   0xF410 0x1000      ANDS     R0,R0,#0x200000
   \   00000238   0x9000             STR      R0,[SP, #+0]
   \   0000023A   0x9800             LDR      R0,[SP, #+0]
   1350          
   1351                /* Configure the DMA Stream */
   1352                //HAL_DMA_DeInit(&DmaHandle);
   1353          
   1354                /* Set the parameters to be configured */ 
   1355          	  DmaHandle.Instance = DMA1_Stream7;
   \   0000023C   0x....             LDR.N    R0,??DataTable24_15  ;; 0x400260b8
   \   0000023E   0x....             LDR.N    R1,??DataTable24_3
   \   00000240   0x6008             STR      R0,[R1, #+0]
   1356                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   00000242   0x2000             MOVS     R0,#+0
   \   00000244   0x....             LDR.N    R1,??DataTable24_3
   \   00000246   0x6048             STR      R0,[R1, #+4]
   1357          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   00000248   0x2040             MOVS     R0,#+64
   \   0000024A   0x....             LDR.N    R1,??DataTable24_3
   \   0000024C   0x6088             STR      R0,[R1, #+8]
   1358          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   0000024E   0x2000             MOVS     R0,#+0
   \   00000250   0x....             LDR.N    R1,??DataTable24_3
   \   00000252   0x60C8             STR      R0,[R1, #+12]
   1359          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   00000254   0xF44F 0x6080      MOV      R0,#+1024
   \   00000258   0x....             LDR.N    R1,??DataTable24_3
   \   0000025A   0x6108             STR      R0,[R1, #+16]
   1360          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   0000025C   0xF44F 0x6000      MOV      R0,#+2048
   \   00000260   0x....             LDR.N    R1,??DataTable24_3
   \   00000262   0x6148             STR      R0,[R1, #+20]
   1361                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   00000264   0xF44F 0x5000      MOV      R0,#+8192
   \   00000268   0x....             LDR.N    R1,??DataTable24_3
   \   0000026A   0x6188             STR      R0,[R1, #+24]
   1362          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   0000026C   0x2000             MOVS     R0,#+0
   \   0000026E   0x....             LDR.N    R1,??DataTable24_3
   \   00000270   0x61C8             STR      R0,[R1, #+28]
   1363                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   00000272   0xF45F 0x3000      MOVS     R0,#+131072
   \   00000276   0x....             LDR.N    R1,??DataTable24_3
   \   00000278   0x6208             STR      R0,[R1, #+32]
   1364          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   0000027A   0x2004             MOVS     R0,#+4
   \   0000027C   0x....             LDR.N    R1,??DataTable24_3
   \   0000027E   0x6248             STR      R0,[R1, #+36]
   1365                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   00000280   0x2003             MOVS     R0,#+3
   \   00000282   0x....             LDR.N    R1,??DataTable24_3
   \   00000284   0x6288             STR      R0,[R1, #+40]
   1366                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   00000286   0x2000             MOVS     R0,#+0
   \   00000288   0x....             LDR.N    R1,??DataTable24_3
   \   0000028A   0x62C8             STR      R0,[R1, #+44]
   1367                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   0000028C   0x2000             MOVS     R0,#+0
   \   0000028E   0x....             LDR.N    R1,??DataTable24_3
   \   00000290   0x6308             STR      R0,[R1, #+48]
   1368                DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   \   00000292   0x....             LDR.N    R0,??DataTable24_13  ;; 0x40003c0c
   \   00000294   0x....             LDR.N    R1,??DataTable24_3
   \   00000296   0x6809             LDR      R1,[R1, #+0]
   \   00000298   0x6088             STR      R0,[R1, #+8]
   1369                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1370                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1371                //DmaHandle.XferCpltCallback = &TC_Callback;
   1372           
   1373          
   1374                /* Associate the initialized DMA handle to the the SPI handle */
   1375                __HAL_LINKDMA(hi2s, hdmatx, DmaHandle);
   \   0000029A   0x....             LDR.N    R0,??DataTable24_3
   \   0000029C   0x6320             STR      R0,[R4, #+48]
   \   0000029E   0x....             LDR.N    R0,??DataTable24_3
   \   000002A0   0x6384             STR      R4,[R0, #+56]
   1376                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1377          
   1378          	   /* Deinitialize the Stream for new transfer */
   1379                 HAL_DMA_DeInit(&DmaHandle);
   \   000002A2   0x....             LDR.N    R0,??DataTable24_3
   \   000002A4   0x.... 0x....      BL       HAL_DMA_DeInit
   1380                 /* Configure the DMA Stream */
   1381          	   HAL_DMA_Init(&DmaHandle);
   \   000002A8   0x....             LDR.N    R0,??DataTable24_3
   \   000002AA   0x.... 0x....      BL       HAL_DMA_Init
   1382          
   1383                __HAL_I2S_ENABLE(&hi2s3);
   \   000002AE   0x....             LDR.N    R0,??DataTable24_14
   \   000002B0   0x6800             LDR      R0,[R0, #+0]
   \   000002B2   0x69C0             LDR      R0,[R0, #+28]
   \   000002B4   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000002B8   0x....             LDR.N    R1,??DataTable24_14
   \   000002BA   0x6809             LDR      R1,[R1, #+0]
   \   000002BC   0x61C8             STR      R0,[R1, #+28]
   1384          
   1385                /* Set Interrupt Group Priority */
   1386                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 2, 1);
   \   000002BE   0x2201             MOVS     R2,#+1
   \   000002C0   0x2102             MOVS     R1,#+2
   \   000002C2   0x202F             MOVS     R0,#+47
   \   000002C4   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1387                /* Enable the DMA STREAM global Interrupt */
   1388                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   000002C8   0x202F             MOVS     R0,#+47
   \   000002CA   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1389          
   1390           }
   1391          
   1392          }
   \                     ??HAL_I2S_MspInit_1: (+1)
   \   000002CE   0xB00C             ADD      SP,SP,#+48
   \   000002D0   0xBD10             POP      {R4,PC}          ;; return
   1393          

   \                                 In section .text, align 2, keep-with-next
   1394          void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
   1395          {
   \                     HAL_SPI_MspDeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1396            if(hspi->Instance == SPI3)
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable24_7  ;; 0x40003c00
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD122             BNE.N    ??HAL_SPI_MspDeInit_0
   1397            {   
   1398              /*##-1- Reset peripherals ##################################################*/
   1399              __HAL_RCC_SPI3_FORCE_RESET();
   \   0000000C   0x....             LDR.N    R0,??DataTable24_20  ;; 0x40023820
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   00000014   0x....             LDR.N    R1,??DataTable24_20  ;; 0x40023820
   \   00000016   0x6008             STR      R0,[R1, #+0]
   1400              __HAL_RCC_SPI3_RELEASE_RESET();
   \   00000018   0x....             LDR.N    R0,??DataTable24_20  ;; 0x40023820
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF430 0x4000      BICS     R0,R0,#0x8000
   \   00000020   0x....             LDR.N    R1,??DataTable24_20  ;; 0x40023820
   \   00000022   0x6008             STR      R0,[R1, #+0]
   1401          
   1402              /*##-2- Disable peripherals and GPIO Clocks ################################*/
   1403              HAL_GPIO_DeInit(CODEC_I2S_GPIO, CODEC_I2S_SCK_PIN);
   \   00000024   0x2108             MOVS     R1,#+8
   \   00000026   0x....             LDR.N    R0,??DataTable24_10  ;; 0x40020400
   \   00000028   0x.... 0x....      BL       HAL_GPIO_DeInit
   1404              HAL_GPIO_DeInit(CODEC_I2S_GPIO, CODEC_I2S_SD_PIN);
   \   0000002C   0x2104             MOVS     R1,#+4
   \   0000002E   0x....             LDR.N    R0,??DataTable24_10  ;; 0x40020400
   \   00000030   0x.... 0x....      BL       HAL_GPIO_DeInit
   1405              HAL_GPIO_DeInit(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PIN);
   \   00000034   0xF44F 0x4100      MOV      R1,#+32768
   \   00000038   0x....             LDR.N    R0,??DataTable24_11  ;; 0x40020000
   \   0000003A   0x.... 0x....      BL       HAL_GPIO_DeInit
   1406          	HAL_GPIO_DeInit(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PIN);
   \   0000003E   0x2180             MOVS     R1,#+128
   \   00000040   0x....             LDR.N    R0,??DataTable24_12  ;; 0x40020800
   \   00000042   0x.... 0x....      BL       HAL_GPIO_DeInit
   1407          
   1408              /*##-3- Disable the DMA ####################################################*/
   1409              /* De-Initialize the DMA associated to transmission process */
   1410              HAL_DMA_DeInit(&DmaHandle);
   \   00000046   0x....             LDR.N    R0,??DataTable24_3
   \   00000048   0x.... 0x....      BL       HAL_DMA_DeInit
   1411          
   1412          
   1413              /*##-4- Disable the NVIC for DMA ###########################################*/
   1414              HAL_NVIC_DisableIRQ(DMA1_Stream7_IRQn);
   \   0000004C   0x202F             MOVS     R0,#+47
   \   0000004E   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   1415            }
   1416          }
   \                     ??HAL_SPI_MspDeInit_0: (+1)
   \   00000052   0xBD10             POP      {R4,PC}          ;; return
   1417          
   1418          

   \                                 In section .text, align 2, keep-with-next
   1419          void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
   1420          {
   \                     HAL_I2C_MspDeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1421              /*##-1- Reset peripherals ##################################################*/
   1422              __HAL_RCC_I2C1_FORCE_RESET();
   \   00000004   0x....             LDR.N    R0,??DataTable24_20  ;; 0x40023820
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   0000000C   0x....             LDR.N    R1,??DataTable24_20  ;; 0x40023820
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   1423              __HAL_RCC_I2C1_RELEASE_RESET();
   \   00000010   0x....             LDR.N    R0,??DataTable24_20  ;; 0x40023820
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF430 0x1000      BICS     R0,R0,#0x200000
   \   00000018   0x....             LDR.N    R1,??DataTable24_20  ;; 0x40023820
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   1424          
   1425          
   1426            /*##-2- Disable peripherals and GPIO Clocks #################################*/
   1427            /* Configure I2C Tx as alternate function  */
   1428            HAL_GPIO_DeInit(CODEC_I2C_GPIO, CODEC_I2C_SCL_PIN);
   \   0000001C   0x2140             MOVS     R1,#+64
   \   0000001E   0x....             LDR.N    R0,??DataTable24_10  ;; 0x40020400
   \   00000020   0x.... 0x....      BL       HAL_GPIO_DeInit
   1429            /* Configure I2C Rx as alternate function  */
   1430            HAL_GPIO_DeInit(CODEC_I2C_GPIO, CODEC_I2C_SDA_PIN);
   \   00000024   0x2180             MOVS     R1,#+128
   \   00000026   0x....             LDR.N    R0,??DataTable24_10  ;; 0x40020400
   \   00000028   0x.... 0x....      BL       HAL_GPIO_DeInit
   1431          }
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
   1432          
   1433          
   1434          
   1435           /* I2C1 init function */

   \                                 In section .text, align 2, keep-with-next
   1436          void MX_I2C1_Init(void)
   1437          {
   \                     MX_I2C1_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1438          
   1439          
   1440            hi2c1.Instance = I2C1;
   \   00000002   0x....             LDR.N    R0,??DataTable24_21  ;; 0x40005400
   \   00000004   0x....             LDR.N    R1,??DataTable24_6
   \   00000006   0x6008             STR      R0,[R1, #+0]
   1441            hi2c1.Init.Timing =0x00A0689A;           //I2C_SPEED DISCOVERY_I2Cx_TIMING; 0x00C0EFFF
   \   00000008   0x....             LDR.N    R0,??DataTable24_22  ;; 0xa0689a
   \   0000000A   0x....             LDR.N    R1,??DataTable24_6
   \   0000000C   0x6048             STR      R0,[R1, #+4]
   1442                                                     //I2C_TIMING ;//I2C_TIMING  0x00303D5D
   1443                                                     //DISCOVERY_I2Cx_TIMING
   1444            hi2c1.Init.OwnAddress1 = 0x33;
   \   0000000E   0x2033             MOVS     R0,#+51
   \   00000010   0x....             LDR.N    R1,??DataTable24_6
   \   00000012   0x6088             STR      R0,[R1, #+8]
   1445            hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x....             LDR.N    R1,??DataTable24_6
   \   00000018   0x60C8             STR      R0,[R1, #+12]
   1446            hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x....             LDR.N    R1,??DataTable24_6
   \   0000001E   0x6108             STR      R0,[R1, #+16]
   1447            hi2c1.Init.OwnAddress2 = 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x....             LDR.N    R1,??DataTable24_6
   \   00000024   0x6148             STR      R0,[R1, #+20]
   1448            hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x....             LDR.N    R1,??DataTable24_6
   \   0000002A   0x6188             STR      R0,[R1, #+24]
   1449            hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR.N    R1,??DataTable24_6
   \   00000030   0x61C8             STR      R0,[R1, #+28]
   1450            hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR.N    R1,??DataTable24_6
   \   00000036   0x6208             STR      R0,[R1, #+32]
   1451            HAL_I2C_Init(&hi2c1);
   \   00000038   0x....             LDR.N    R0,??DataTable24_6
   \   0000003A   0x.... 0x....      BL       HAL_I2C_Init
   1452          
   1453             /*Configure Analogue filter */
   1454            HAL_I2CEx_AnalogFilter_Config(&hi2c1, I2C_ANALOGFILTER_ENABLE);
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x....             LDR.N    R0,??DataTable24_6
   \   00000042   0x.... 0x....      BL       HAL_I2CEx_ConfigAnalogFilter
   1455          
   1456          }
   \   00000046   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     AudioTotalSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     AudioRemSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x........         DC32     Volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     CurrentPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     hi2s3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x40026459         DC32     0x40026459

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x40026404         DC32     0x40026404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x40026010         DC32     0x40026010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   0x40026410         DC32     0x40026410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x40026070         DC32     0x40026070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x40026470         DC32     0x40026470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x40026028         DC32     0x40026028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x40026428         DC32     0x40026428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x40026088         DC32     0x40026088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x40026488         DC32     0x40026488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x40026040         DC32     0x40026040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0x40026440         DC32     0x40026440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x400260A0         DC32     0x400260a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x400264A0         DC32     0x400264a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \   00000000   0x400260B9         DC32     0x400260b9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \   00000000   0x40026400         DC32     0x40026400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x40026059         DC32     0x40026059

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x40026004         DC32     0x40026004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x40026000         DC32     0x40026000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x4002640C         DC32     0x4002640c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x40026408         DC32     0x40026408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   0x4002600C         DC32     0x4002600c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   0x40026008         DC32     0x40026008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \   00000000   0x........         DC32     OutputDev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_6:
   \   00000000   0x........         DC32     hi2c1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_7:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_8:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_9:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_10:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_11:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_12:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_13:
   \   00000000   0x40003C0C         DC32     0x40003c0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_14:
   \   00000000   0x........         DC32     hi2s3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_15:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_16:
   \   00000000   0x40003C1C         DC32     0x40003c1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_17:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_18:
   \   00000000   0x40023844         DC32     0x40023844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_19:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_20:
   \   00000000   0x40023820         DC32     0x40023820

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_21:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_22:
   \   00000000   0x00A0689A         DC32     0xa0689a
   1457          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   AUDIO_DeInit
         8   -> Audio_MAL_DeInit
         8   -> Codec_DeInit
      16   AUDIO_Init
        16   -> Codec_Init
       8   AUDIO_Mute
         8   -> Codec_Mute
       8   AUDIO_PauseResume
         8   -> Audio_MAL_PauseResume
         8   -> Codec_PauseResume
      16   AUDIO_Play
        16   -> Audio_MAL_Play
        16   -> Codec_Play
       8   AUDIO_Stop
         8   -> Audio_MAL_Stop
         8   -> Codec_Stop
       8   AUDIO_VolumeCtl
         8   -> Codec_VolumeCtrl
       8   Audio_MAL_DeInit
         8   -> HAL_NVIC_DisableIRQ
      16   Audio_MAL_PauseResume
        16   -> DMA_Cmd
        16   -> I2S_Cmd
        16   -> SPI_I2S_DMACmd
       0   Audio_MAL_Play
       8   Audio_MAL_Stop
         8   -> HAL_I2S_DMAStop
       8   Codec_AudioInterface_DeInit
         8   -> SPI_I2S_DeInit
       8   Codec_AudioInterface_Init
         8   -> I2S3_Init
       8   Codec_CtrlInterface_DeInit
         8   -> HAL_I2C_MspDeInit
       8   Codec_CtrlInterface_Init
         8   -> MX_I2C1_Init
       8   Codec_DeInit
         8   -> Codec_AudioInterface_DeInit
         8   -> Codec_CtrlInterface_DeInit
         8   -> Codec_GPIO_DeInit
         8   -> Codec_Reset
         8   -> Codec_WriteRegister
      24   Codec_GPIO_DeInit
        24   -> HAL_GPIO_Init
      32   Codec_GPIO_Init
        32   -> HAL_GPIO_Init
      24   Codec_Init
        24   -> Codec_AudioInterface_Init
        24   -> Codec_CtrlInterface_Init
        24   -> Codec_GPIO_Init
        24   -> Codec_Reset
        24   -> Codec_VolumeCtrl
        24   -> Codec_WriteRegister
        24   -> codec_sendBeep
      16   Codec_Mute
        16   -> Codec_WriteRegister
      16   Codec_PauseResume
        16   -> Codec_Mute
        16   -> Codec_WriteRegister
       0   Codec_Play
       8   Codec_Reset
         8   -> Delay
         8   -> HAL_GPIO_WritePin
      16   Codec_Stop
        16   -> Codec_Mute
        16   -> Codec_WriteRegister
        16   -> Delay
        16   -> HAL_GPIO_WritePin
      16   Codec_VolumeCtrl
        16   -> Codec_WriteRegister
      24   Codec_WriteRegister
        24   -> Codec_TIMEOUT_UserCallback
        24   -> HAL_I2C_GetError
        24   -> HAL_I2C_Master_Transmit
       0   DAC_Config
       0   DMA1_Stream0_IRQHandler
       8   DMA1_Stream7_IRQHandler
         8   -> HAL_I2S_TxCpltCallback
       0   DMA_Cmd
       4   Delay
       8   HAL_I2C_MspDeInit
         8   -> HAL_GPIO_DeInit
      56   HAL_I2S_MspInit
        56   -> HAL_DMA_DeInit
        56   -> HAL_DMA_Init
        56   -> HAL_GPIO_Init
        56   -> HAL_NVIC_EnableIRQ
        56   -> HAL_NVIC_SetPriority
       8   HAL_SPI_MspDeInit
         8   -> HAL_DMA_DeInit
         8   -> HAL_GPIO_DeInit
         8   -> HAL_NVIC_DisableIRQ
       0   I2S_Cmd
       8   MX_I2C1_Init
         8   -> HAL_I2CEx_ConfigAnalogFilter
         8   -> HAL_I2C_Init
       0   SPI3_IRQHandler
       4   SPI_I2S_DMACmd
       4   SPI_I2S_DeInit
       8   codec_sendBeep
         8   -> Codec_WriteRegister


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable14
       4  ??DataTable15
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable18
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_2
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_2
       4  ??DataTable21
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_10
       4  ??DataTable24_11
       4  ??DataTable24_12
       4  ??DataTable24_13
       4  ??DataTable24_14
       4  ??DataTable24_15
       4  ??DataTable24_16
       4  ??DataTable24_17
       4  ??DataTable24_18
       4  ??DataTable24_19
       4  ??DataTable24_2
       4  ??DataTable24_20
       4  ??DataTable24_21
       4  ??DataTable24_22
       4  ??DataTable24_3
       4  ??DataTable24_4
       4  ??DataTable24_5
       4  ??DataTable24_6
       4  ??DataTable24_7
       4  ??DataTable24_8
       4  ??DataTable24_9
      14  AUDIO_DeInit
      54  AUDIO_Init
      48  AUDIO_MAL_DMA_InitStructure
      12  AUDIO_Mute
      30  AUDIO_PauseResume
     114  AUDIO_Play
      38  AUDIO_Stop
      42  AUDIO_VolumeCtl
       4  AudioRemSize
       4  AudioTotalSize
      22  Audio_MAL_DeInit
      78  Audio_MAL_PauseResume
     180  Audio_MAL_Play
      12  Audio_MAL_Stop
       4  CODECTimeout
      44  Codec_AudioInterface_DeInit
      12  Codec_AudioInterface_Init
      12  Codec_CtrlInterface_DeInit
       8  Codec_CtrlInterface_Init
      36  Codec_DeInit
      64  Codec_GPIO_DeInit
      64  Codec_GPIO_Init
     172  Codec_Init
      44  Codec_Mute
      76  Codec_PauseResume
       4  Codec_Play
      36  Codec_Reset
      66  Codec_Stop
     100  Codec_VolumeCtrl
      62  Codec_WriteRegister
       4  CurrAudioInterface
       4  CurrentPos
       2  DAC_Config
       2  DMA1_Stream0_IRQHandler
    2316  DMA1_Stream7_IRQHandler
      26  DMA_Cmd
      48  DMA_InitStructure
      20  Delay
      80  DmaHandle
      46  HAL_I2C_MspDeInit
     722  HAL_I2S_MspInit
      84  HAL_SPI_MspDeInit
      28  I2S_Cmd
      72  MX_I2C1_Init
       1  OutputDev
       8  SPI3_IRQHandler
      32  SPI_I2S_DMACmd
     172  SPI_I2S_DeInit
       1  Volume
      20  codec_sendBeep
      60  hi2c1
      60  hi2c2

 
   301 bytes in section .bss
    17 bytes in section .data
 5 138 bytes in section .text
 
 5 138 bytes of CODE memory
   318 bytes of DATA memory

Errors: none
Warnings: 1
