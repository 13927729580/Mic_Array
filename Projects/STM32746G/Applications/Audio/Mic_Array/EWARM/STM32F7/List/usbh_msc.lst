###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       04/Mar/2016  17:12:04
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Middlewares\ST\STM32_USB_Host_Library\Class\MSC\Src\usbh_msc.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Middlewares\ST\STM32_USB_Host_Library\Class\MSC\Src\usbh_msc.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\usbh_msc.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\usbh_msc.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Middlewares\ST\STM32_USB_Host_Library\Class\MSC\Src\usbh_msc.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbh_msc.c
      4            * @author  MCD Application Team
      5            * @version V3.2.1
      6            * @date    26-June-2015
      7            * @brief   This file implements the MSC class driver functions
      8            *          ===================================================================      
      9            *                                MSC Class  Description
     10            *          =================================================================== 
     11            *           This module manages the MSC class V1.0 following the "Universal 
     12            *           Serial Bus Mass Storage Class (MSC) Bulk-Only Transport (BOT) Version 1.0
     13            *           Sep. 31, 1999".
     14            *           This driver implements the following aspects of the specification:
     15            *             - Bulk-Only Transport protocol
     16            *             - Subclass : SCSI transparent command set (ref. SCSI Primary Commands - 3 (SPC-3))
     17            *      
     18            *  @endverbatim
     19            *
     20            ******************************************************************************
     21            * @attention
     22            *
     23            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     24            *
     25            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     26            * You may not use this file except in compliance with the License.
     27            * You may obtain a copy of the License at:
     28            *
     29            *        http://www.st.com/software_license_agreement_liberty_v2
     30            *
     31            * Unless required by applicable law or agreed to in writing, software 
     32            * distributed under the License is distributed on an "AS IS" BASIS, 
     33            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     34            * See the License for the specific language governing permissions and
     35            * limitations under the License.
     36            *
     37            ******************************************************************************
     38            */
     39          
     40          /* Includes ------------------------------------------------------------------*/
     41          
     42          #include "usbh_msc.h"
     43          #include "usbh_msc_bot.h"    
     44          #include "usbh_msc_scsi.h"
     45          
     46          
     47          /** @addtogroup USBH_LIB
     48            * @{
     49            */
     50          
     51          /** @addtogroup USBH_CLASS
     52            * @{
     53            */
     54          
     55          /** @addtogroup USBH_MSC_CLASS
     56            * @{
     57            */
     58            
     59          /** @defgroup USBH_MSC_CORE 
     60            * @brief    This file includes the mass storage related functions
     61            * @{
     62            */ 
     63          
     64          
     65          /** @defgroup USBH_MSC_CORE_Private_TypesDefinitions
     66            * @{
     67            */ 
     68          /**
     69            * @}
     70            */ 
     71          
     72          /** @defgroup USBH_MSC_CORE_Private_Defines
     73            * @{
     74            */ 
     75          /**
     76            * @}
     77            */ 
     78          
     79          /** @defgroup USBH_MSC_CORE_Private_Macros
     80            * @{
     81            */ 
     82          /**
     83            * @}
     84            */ 
     85          
     86          
     87          /** @defgroup USBH_MSC_CORE_Private_Variables
     88            * @{
     89            */ 
     90          /**
     91            * @}
     92            */ 
     93          
     94          
     95          /** @defgroup USBH_MSC_CORE_Private_FunctionPrototypes
     96            * @{
     97            */ 
     98          
     99          static USBH_StatusTypeDef USBH_MSC_InterfaceInit  (USBH_HandleTypeDef *phost);
    100          
    101          static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit  (USBH_HandleTypeDef *phost);
    102          
    103          static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost);
    104          
    105          static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost);
    106          
    107          static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost);
    108          
    109          static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun);
    110          

   \                                 In section .data, align 4
    111          USBH_ClassTypeDef  USBH_msc = 
   \                     USBH_msc:
   \   00000000   0x........         DC32 ?_0
   \   00000004   0x08 0x00          DC8 8, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0x........         DC32 USBH_MSC_InterfaceInit, USBH_MSC_InterfaceDeInit
   \              0x........   
   \   00000010   0x........         DC32 USBH_MSC_ClassRequest, USBH_MSC_Process, USBH_MSC_SOFProcess, 0H
   \              0x........   
   \              0x........   
   \              0x00000000   
    112          {
    113            "MSC",
    114            USB_MSC_CLASS,
    115            USBH_MSC_InterfaceInit,
    116            USBH_MSC_InterfaceDeInit,
    117            USBH_MSC_ClassRequest,
    118            USBH_MSC_Process,
    119            USBH_MSC_SOFProcess,
    120            NULL,
    121          };
    122          
    123          
    124          /**
    125            * @}
    126            */ 
    127          
    128          
    129          /** @defgroup USBH_MSC_CORE_Exported_Variables
    130            * @{
    131            */ 
    132          
    133          /**
    134            * @}
    135            */ 
    136          
    137          
    138          /** @defgroup USBH_MSC_CORE_Private_Functions
    139            * @{
    140            */ 
    141          
    142          
    143          /**
    144            * @brief  USBH_MSC_InterfaceInit 
    145            *         The function init the MSC class.
    146            * @param  phost: Host handle
    147            * @retval USBH Status
    148            */

   \                                 In section .text, align 2, keep-with-next
    149          static USBH_StatusTypeDef USBH_MSC_InterfaceInit (USBH_HandleTypeDef *phost)
    150          {	 
   \                     USBH_MSC_InterfaceInit: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0004             MOVS     R4,R0
    151            uint8_t interface = 0; 
   \   00000008   0x2500             MOVS     R5,#+0
    152            USBH_StatusTypeDef status = USBH_FAIL ;
   \   0000000A   0x2602             MOVS     R6,#+2
    153            MSC_HandleTypeDef *MSC_Handle;
    154            
    155            interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
   \   0000000C   0x2350             MOVS     R3,#+80
   \   0000000E   0x2206             MOVS     R2,#+6
   \   00000010   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   00000014   0x7901             LDRB     R1,[R0, #+4]
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       USBH_FindInterface
   \   0000001C   0x0005             MOVS     R5,R0
    156            
    157            if(interface == 0xFF) /* Not Valid Interface */
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x2DFF             CMP      R5,#+255
   \   00000022   0xD102             BNE.N    ??USBH_MSC_InterfaceInit_0
    158            {
    159              USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    160              status = USBH_FAIL;      
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x0006             MOVS     R6,R0
   \   00000028   0xE0AF             B.N      ??USBH_MSC_InterfaceInit_1
    161            }
    162            else
    163            {
    164              USBH_SelectInterface (phost, interface);
   \                     ??USBH_MSC_InterfaceInit_0: (+1)
   \   0000002A   0x0029             MOVS     R1,R5
   \   0000002C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       USBH_SelectInterface
    165              
    166              phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
   \   00000034   0xF44F 0x7080      MOV      R0,#+256
   \   00000038   0x.... 0x....      BL       malloc
   \   0000003C   0xF8D4 0x1264      LDR      R1,[R4, #+612]
   \   00000040   0x61C8             STR      R0,[R1, #+28]
    167              MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
   \   00000042   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   00000046   0x69C0             LDR      R0,[R0, #+28]
   \   00000048   0x0007             MOVS     R7,R0
    168              
    169              if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
   \   0000004A   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   0000004E   0x2122             MOVS     R1,#+34
   \   00000050   0xFB01 0x4000      MLA      R0,R1,R0,R4
   \   00000054   0xF890 0x0248      LDRB     R0,[R0, #+584]
   \   00000058   0x0600             LSLS     R0,R0,#+24
   \   0000005A   0xD510             BPL.N    ??USBH_MSC_InterfaceInit_2
    170              {
    171                MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
   \   0000005C   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   00000060   0x2122             MOVS     R1,#+34
   \   00000062   0xFB01 0x4000      MLA      R0,R1,R0,R4
   \   00000066   0xF890 0x0248      LDRB     R0,[R0, #+584]
   \   0000006A   0x71F8             STRB     R0,[R7, #+7]
    172                MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
   \   0000006C   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   00000070   0x2122             MOVS     R1,#+34
   \   00000072   0xFB01 0x4000      MLA      R0,R1,R0,R4
   \   00000076   0xF8B0 0x024A      LDRH     R0,[R0, #+586]
   \   0000007A   0x8178             STRH     R0,[R7, #+10]
   \   0000007C   0xE00F             B.N      ??USBH_MSC_InterfaceInit_3
    173              }
    174              else
    175              {
    176                MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
   \                     ??USBH_MSC_InterfaceInit_2: (+1)
   \   0000007E   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   00000082   0x2122             MOVS     R1,#+34
   \   00000084   0xFB01 0x4000      MLA      R0,R1,R0,R4
   \   00000088   0xF890 0x0248      LDRB     R0,[R0, #+584]
   \   0000008C   0x71B8             STRB     R0,[R7, #+6]
    177                MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
   \   0000008E   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   00000092   0x2122             MOVS     R1,#+34
   \   00000094   0xFB01 0x4000      MLA      R0,R1,R0,R4
   \   00000098   0xF8B0 0x024A      LDRH     R0,[R0, #+586]
   \   0000009C   0x8138             STRH     R0,[R7, #+8]
    178              }
    179              
    180              if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
   \                     ??USBH_MSC_InterfaceInit_3: (+1)
   \   0000009E   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   000000A2   0x2122             MOVS     R1,#+34
   \   000000A4   0xFB01 0x4000      MLA      R0,R1,R0,R4
   \   000000A8   0xF890 0x0250      LDRB     R0,[R0, #+592]
   \   000000AC   0x0600             LSLS     R0,R0,#+24
   \   000000AE   0xD510             BPL.N    ??USBH_MSC_InterfaceInit_4
    181              {
    182                MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
   \   000000B0   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   000000B4   0x2122             MOVS     R1,#+34
   \   000000B6   0xFB01 0x4000      MLA      R0,R1,R0,R4
   \   000000BA   0xF890 0x0250      LDRB     R0,[R0, #+592]
   \   000000BE   0x71F8             STRB     R0,[R7, #+7]
    183                MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
   \   000000C0   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   000000C4   0x2122             MOVS     R1,#+34
   \   000000C6   0xFB01 0x4000      MLA      R0,R1,R0,R4
   \   000000CA   0xF8B0 0x0252      LDRH     R0,[R0, #+594]
   \   000000CE   0x8178             STRH     R0,[R7, #+10]
   \   000000D0   0xE00F             B.N      ??USBH_MSC_InterfaceInit_5
    184              }
    185              else
    186              {
    187                MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
   \                     ??USBH_MSC_InterfaceInit_4: (+1)
   \   000000D2   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   000000D6   0x2122             MOVS     R1,#+34
   \   000000D8   0xFB01 0x4000      MLA      R0,R1,R0,R4
   \   000000DC   0xF890 0x0250      LDRB     R0,[R0, #+592]
   \   000000E0   0x71B8             STRB     R0,[R7, #+6]
    188                MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
   \   000000E2   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   000000E6   0x2122             MOVS     R1,#+34
   \   000000E8   0xFB01 0x4000      MLA      R0,R1,R0,R4
   \   000000EC   0xF8B0 0x0252      LDRH     R0,[R0, #+594]
   \   000000F0   0x8138             STRH     R0,[R7, #+8]
    189              }
    190              
    191              MSC_Handle->current_lun = 0;
   \                     ??USBH_MSC_InterfaceInit_5: (+1)
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0xF8A7 0x00F8      STRH     R0,[R7, #+248]
    192              MSC_Handle->rw_lun = 0;
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0xF8A7 0x00FA      STRH     R0,[R7, #+250]
    193              MSC_Handle->state = MSC_INIT;
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x7338             STRB     R0,[R7, #+12]
    194              MSC_Handle->error = MSC_OK;
   \   00000102   0x2000             MOVS     R0,#+0
   \   00000104   0x7378             STRB     R0,[R7, #+13]
    195              MSC_Handle->req_state = MSC_REQ_IDLE;
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0x73B8             STRB     R0,[R7, #+14]
    196              MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
   \   0000010A   0x79B9             LDRB     R1,[R7, #+6]
   \   0000010C   0x0020             MOVS     R0,R4
   \   0000010E   0x.... 0x....      BL       USBH_AllocPipe
   \   00000112   0x7178             STRB     R0,[R7, #+5]
    197              MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
   \   00000114   0x79F9             LDRB     R1,[R7, #+7]
   \   00000116   0x0020             MOVS     R0,R4
   \   00000118   0x.... 0x....      BL       USBH_AllocPipe
   \   0000011C   0x7138             STRB     R0,[R7, #+4]
    198          
    199              USBH_MSC_BOT_Init(phost);
   \   0000011E   0x0020             MOVS     R0,R4
   \   00000120   0x.... 0x....      BL       USBH_MSC_BOT_Init
    200              
    201              /* De-Initialize LUNs information */
    202              USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
   \   00000124   0xF05F 0x0868      MOVS     R8,#+104
   \   00000128   0xF05F 0x0900      MOVS     R9,#+0
   \   0000012C   0xF117 0x0A90      ADDS     R10,R7,#+144
   \   00000130   0x464A             MOV      R2,R9
   \   00000132   0x4641             MOV      R1,R8
   \   00000134   0x4650             MOV      R0,R10
   \   00000136   0x.... 0x....      BL       __aeabi_memset
    203              
    204              /* Open the new channels */
    205              USBH_OpenPipe  (phost,
    206                              MSC_Handle->OutPipe,
    207                              MSC_Handle->OutEp,
    208                              phost->device.address,
    209                              phost->device.speed,
    210                              USB_EP_TYPE_BULK,
    211                              MSC_Handle->OutEpSize);  
   \   0000013A   0x8938             LDRH     R0,[R7, #+8]
   \   0000013C   0x9002             STR      R0,[SP, #+8]
   \   0000013E   0x2002             MOVS     R0,#+2
   \   00000140   0x9001             STR      R0,[SP, #+4]
   \   00000142   0xF894 0x021D      LDRB     R0,[R4, #+541]
   \   00000146   0x9000             STR      R0,[SP, #+0]
   \   00000148   0xF894 0x321C      LDRB     R3,[R4, #+540]
   \   0000014C   0x79BA             LDRB     R2,[R7, #+6]
   \   0000014E   0x7979             LDRB     R1,[R7, #+5]
   \   00000150   0x0020             MOVS     R0,R4
   \   00000152   0x.... 0x....      BL       USBH_OpenPipe
    212              
    213              USBH_OpenPipe  (phost,
    214                              MSC_Handle->InPipe,
    215                              MSC_Handle->InEp,
    216                              phost->device.address,
    217                              phost->device.speed,
    218                              USB_EP_TYPE_BULK,
    219                              MSC_Handle->InEpSize);     
   \   00000156   0x8978             LDRH     R0,[R7, #+10]
   \   00000158   0x9002             STR      R0,[SP, #+8]
   \   0000015A   0x2002             MOVS     R0,#+2
   \   0000015C   0x9001             STR      R0,[SP, #+4]
   \   0000015E   0xF894 0x021D      LDRB     R0,[R4, #+541]
   \   00000162   0x9000             STR      R0,[SP, #+0]
   \   00000164   0xF894 0x321C      LDRB     R3,[R4, #+540]
   \   00000168   0x79FA             LDRB     R2,[R7, #+7]
   \   0000016A   0x7939             LDRB     R1,[R7, #+4]
   \   0000016C   0x0020             MOVS     R0,R4
   \   0000016E   0x.... 0x....      BL       USBH_OpenPipe
    220              
    221              
    222              USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
   \   00000172   0x2200             MOVS     R2,#+0
   \   00000174   0x7939             LDRB     R1,[R7, #+4]
   \   00000176   0x0020             MOVS     R0,R4
   \   00000178   0x.... 0x....      BL       USBH_LL_SetToggle
    223              USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
   \   0000017C   0x2200             MOVS     R2,#+0
   \   0000017E   0x7979             LDRB     R1,[R7, #+5]
   \   00000180   0x0020             MOVS     R0,R4
   \   00000182   0x.... 0x....      BL       USBH_LL_SetToggle
    224              status = USBH_OK; 
   \   00000186   0x2000             MOVS     R0,#+0
   \   00000188   0x0006             MOVS     R6,R0
    225            }
    226            return status;
   \                     ??USBH_MSC_InterfaceInit_1: (+1)
   \   0000018A   0x0030             MOVS     R0,R6
   \   0000018C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000018E   0xB004             ADD      SP,SP,#+16
   \   00000190   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    227          }
    228          
    229          /**
    230            * @brief  USBH_MSC_InterfaceDeInit 
    231            *         The function DeInit the Pipes used for the MSC class.
    232            * @param  phost: Host handle
    233            * @retval USBH Status
    234            */

   \                                 In section .text, align 2, keep-with-next
    235          USBH_StatusTypeDef USBH_MSC_InterfaceDeInit (USBH_HandleTypeDef *phost)
    236          {
   \                     USBH_MSC_InterfaceDeInit: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    237            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
   \   00000004   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   00000008   0x69C5             LDR      R5,[R0, #+28]
    238          
    239            if ( MSC_Handle->OutPipe)
   \   0000000A   0x7968             LDRB     R0,[R5, #+5]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD009             BEQ.N    ??USBH_MSC_InterfaceDeInit_0
    240            {
    241              USBH_ClosePipe(phost, MSC_Handle->OutPipe);
   \   00000010   0x7969             LDRB     R1,[R5, #+5]
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       USBH_ClosePipe
    242              USBH_FreePipe  (phost, MSC_Handle->OutPipe);
   \   00000018   0x7969             LDRB     R1,[R5, #+5]
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       USBH_FreePipe
    243              MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x7168             STRB     R0,[R5, #+5]
    244            }
    245            
    246            if ( MSC_Handle->InPipe)
   \                     ??USBH_MSC_InterfaceDeInit_0: (+1)
   \   00000024   0x7928             LDRB     R0,[R5, #+4]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD009             BEQ.N    ??USBH_MSC_InterfaceDeInit_1
    247            {
    248              USBH_ClosePipe(phost, MSC_Handle->InPipe);
   \   0000002A   0x7929             LDRB     R1,[R5, #+4]
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       USBH_ClosePipe
    249              USBH_FreePipe  (phost, MSC_Handle->InPipe);
   \   00000032   0x7929             LDRB     R1,[R5, #+4]
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       USBH_FreePipe
    250              MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x7128             STRB     R0,[R5, #+4]
    251            } 
    252          
    253            if(phost->pActiveClass->pData)
   \                     ??USBH_MSC_InterfaceDeInit_1: (+1)
   \   0000003E   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   00000042   0x69C0             LDR      R0,[R0, #+28]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD008             BEQ.N    ??USBH_MSC_InterfaceDeInit_2
    254            {
    255              USBH_free (phost->pActiveClass->pData);
   \   00000048   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   0000004C   0x69C0             LDR      R0,[R0, #+28]
   \   0000004E   0x.... 0x....      BL       free
    256              phost->pActiveClass->pData = 0;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xF8D4 0x1264      LDR      R1,[R4, #+612]
   \   00000058   0x61C8             STR      R0,[R1, #+28]
    257            }
    258            
    259            return USBH_OK;
   \                     ??USBH_MSC_InterfaceDeInit_2: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    260          }
    261          
    262          /**
    263            * @brief  USBH_MSC_ClassRequest 
    264            *         The function is responsible for handling Standard requests
    265            *         for MSC class.
    266            * @param  phost: Host handle
    267            * @retval USBH Status
    268            */

   \                                 In section .text, align 2, keep-with-next
    269          static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
    270          {   
   \                     USBH_MSC_ClassRequest: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    271            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
   \   00000004   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   00000008   0x69C5             LDR      R5,[R0, #+28]
    272            USBH_StatusTypeDef status = USBH_BUSY;
   \   0000000A   0x2601             MOVS     R6,#+1
    273            uint8_t i;
    274            
    275            /* Switch MSC REQ state machine */
    276            switch (MSC_Handle->req_state)
   \   0000000C   0x7BA8             LDRB     R0,[R5, #+14]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD004             BEQ.N    ??USBH_MSC_ClassRequest_0
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD002             BEQ.N    ??USBH_MSC_ClassRequest_0
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xD031             BEQ.N    ??USBH_MSC_ClassRequest_1
   \   0000001A   0xE039             B.N      ??USBH_MSC_ClassRequest_2
    277            {
    278            case MSC_REQ_IDLE:
    279            case MSC_REQ_GET_MAX_LUN:   
    280              /* Issue GetMaxLUN request */
    281              status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
   \                     ??USBH_MSC_ClassRequest_0: (+1)
   \   0000001C   0x0029             MOVS     R1,R5
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       USBH_MSC_BOT_REQ_GetMaxLUN
   \   00000024   0x0006             MOVS     R6,R0
    282              
    283              /* When devices do not support the GetMaxLun request, this should
    284                 be considred as only one logical unit is supported */
    285              if(status == USBH_NOT_SUPPORTED)
   \   00000026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   0x2E03             CMP      R6,#+3
   \   0000002A   0xD103             BNE.N    ??USBH_MSC_ClassRequest_3
    286              {
    287                MSC_Handle->max_lun = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x6028             STR      R0,[R5, #+0]
    288                status = USBH_OK;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0006             MOVS     R6,R0
    289              }
    290              
    291              if(status == USBH_OK)
   \                     ??USBH_MSC_ClassRequest_3: (+1)
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x2E00             CMP      R6,#+0
   \   00000038   0xD120             BNE.N    ??USBH_MSC_ClassRequest_4
    292              {
    293                MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
   \   0000003A   0x7828             LDRB     R0,[R5, #+0]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0x6028             STR      R0,[R5, #+0]
    294                USBH_UsrLog ("Number of supported LUN: %lu", (int32_t)(MSC_Handle->max_lun));
   \   00000040   0x6829             LDR      R1,[R5, #+0]
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable2_1
   \   00000046   0x.... 0x....      BL       printf
   \   0000004A   0x....             ADR.N    R0,??DataTable0  ;; "\n"
   \   0000004C   0x.... 0x....      BL       printf
    295                
    296                for(i = 0; i < MSC_Handle->max_lun; i++)
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x0007             MOVS     R7,R0
   \                     ??USBH_MSC_ClassRequest_5: (+1)
   \   00000054   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000056   0x6828             LDR      R0,[R5, #+0]
   \   00000058   0x4287             CMP      R7,R0
   \   0000005A   0xD20F             BCS.N    ??USBH_MSC_ClassRequest_4
    297                {
    298                  MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000060   0x2134             MOVS     R1,#+52
   \   00000062   0xFB01 0x5107      MLA      R1,R1,R7,R5
   \   00000066   0xF881 0x0092      STRB     R0,[R1, #+146]
    299                  MSC_Handle->unit[i].state_changed = 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000006E   0x2134             MOVS     R1,#+52
   \   00000070   0xFB01 0x5107      MLA      R1,R1,R7,R5
   \   00000074   0xF881 0x00C1      STRB     R0,[R1, #+193]
    300                }
   \   00000078   0x1C7F             ADDS     R7,R7,#+1
   \   0000007A   0xE7EB             B.N      ??USBH_MSC_ClassRequest_5
    301              }
    302              break;
   \                     ??USBH_MSC_ClassRequest_4: (+1)
   \   0000007C   0xE008             B.N      ??USBH_MSC_ClassRequest_6
    303              
    304            case MSC_REQ_ERROR :
    305              /* a Clear Feature should be issued here */
    306              if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
   \                     ??USBH_MSC_ClassRequest_1: (+1)
   \   0000007E   0x2100             MOVS     R1,#+0
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x.... 0x....      BL       USBH_ClrFeature
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD101             BNE.N    ??USBH_MSC_ClassRequest_7
    307              {
    308                MSC_Handle->req_state = MSC_Handle->prev_req_state; 
   \   0000008A   0x7BE8             LDRB     R0,[R5, #+15]
   \   0000008C   0x73A8             STRB     R0,[R5, #+14]
    309              }    
    310              break;
   \                     ??USBH_MSC_ClassRequest_7: (+1)
   \   0000008E   0xE7FF             B.N      ??USBH_MSC_ClassRequest_6
    311              
    312            default:
    313              break;
    314            }
    315            
    316            return status; 
   \                     ??USBH_MSC_ClassRequest_2: (+1)
   \                     ??USBH_MSC_ClassRequest_6: (+1)
   \   00000090   0x0030             MOVS     R0,R6
   \   00000092   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    317          }
    318          
    319          /**
    320            * @brief  USBH_MSC_Process 
    321            *         The function is for managing state machine for MSC data transfers 
    322            * @param  phost: Host handle
    323            * @retval USBH Status
    324            */

   \                                 In section .text, align 4, keep-with-next
    325          static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
    326          {
   \                     USBH_MSC_Process: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
    327            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
   \   00000006   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   0000000A   0x69C5             LDR      R5,[R0, #+28]
    328            USBH_StatusTypeDef error = USBH_BUSY ;
   \   0000000C   0x2601             MOVS     R6,#+1
    329            USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
   \   0000000E   0x2701             MOVS     R7,#+1
    330            USBH_StatusTypeDef ready_status = USBH_BUSY ;
   \   00000010   0xF05F 0x0801      MOVS     R8,#+1
    331            
    332            switch (MSC_Handle->state)
   \   00000014   0x7B28             LDRB     R0,[R5, #+12]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD003             BEQ.N    ??USBH_MSC_Process_0
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xF000 0x825F      BEQ.W    ??USBH_MSC_Process_1
   \   00000020   0xE260             B.N      ??USBH_MSC_Process_2
    333            {
    334            case MSC_INIT:
    335              
    336              if(MSC_Handle->current_lun < MSC_Handle->max_lun)
   \                     ??USBH_MSC_Process_0: (+1)
   \   00000022   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000026   0x6829             LDR      R1,[R5, #+0]
   \   00000028   0x4288             CMP      R0,R1
   \   0000002A   0xF080 0x824D      BCS.W    ??USBH_MSC_Process_3
    337              {
    338          
    339                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
   \   0000002E   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000032   0x2134             MOVS     R1,#+52
   \   00000034   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0xF880 0x1091      STRB     R1,[R0, #+145]
    340                /* Switch MSC REQ state machine */
    341                switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
   \   0000003E   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000042   0x2134             MOVS     R1,#+52
   \   00000044   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000048   0xF890 0x0090      LDRB     R0,[R0, #+144]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD00E             BEQ.N    ??USBH_MSC_Process_4
   \   00000050   0x2802             CMP      R0,#+2
   \   00000052   0xF000 0x8084      BEQ.W    ??USBH_MSC_Process_5
   \   00000056   0x2803             CMP      R0,#+3
   \   00000058   0xF000 0x811B      BEQ.W    ??USBH_MSC_Process_6
   \   0000005C   0x2804             CMP      R0,#+4
   \   0000005E   0xD01B             BEQ.N    ??USBH_MSC_Process_7
   \   00000060   0x2805             CMP      R0,#+5
   \   00000062   0xF000 0x819B      BEQ.W    ??USBH_MSC_Process_8
   \   00000066   0x2808             CMP      R0,#+8
   \   00000068   0xF000 0x8227      BEQ.W    ??USBH_MSC_Process_9
   \   0000006C   0xE22B             B.N      ??USBH_MSC_Process_10
    342                {
    343                case MSC_INIT:
    344                  USBH_UsrLog ("LUN #%d: ", MSC_Handle->current_lun);
   \                     ??USBH_MSC_Process_4: (+1)
   \   0000006E   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable2_2
   \   00000076   0x.... 0x....      BL       printf
   \   0000007A   0xA0B7             ADR.N    R0,??USBH_MSC_Process_11  ;; "\n"
   \   0000007C   0x.... 0x....      BL       printf
    345                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
   \   00000080   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000084   0x2134             MOVS     R1,#+52
   \   00000086   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000008A   0x2104             MOVS     R1,#+4
   \   0000008C   0xF880 0x1090      STRB     R1,[R0, #+144]
    346                  MSC_Handle->timer = phost->Timer;
   \   00000090   0xF8D4 0x02A8      LDR      R0,[R4, #+680]
   \   00000094   0xF8C5 0x00FC      STR      R0,[R5, #+252]
    347                  
    348                case MSC_READ_INQUIRY:
    349                  scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
   \                     ??USBH_MSC_Process_7: (+1)
   \   00000098   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000009C   0x2134             MOVS     R1,#+52
   \   0000009E   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000000A2   0xF110 0x029F      ADDS     R2,R0,#+159
   \   000000A6   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   000000AA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000AC   0x0020             MOVS     R0,R4
   \   000000AE   0x.... 0x....      BL       USBH_MSC_SCSI_Inquiry
   \   000000B2   0x0007             MOVS     R7,R0
    350                  
    351                  if( scsi_status == USBH_OK)
   \   000000B4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000B6   0x2F00             CMP      R7,#+0
   \   000000B8   0xD131             BNE.N    ??USBH_MSC_Process_12
    352                  {
    353                    USBH_UsrLog ("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
   \   000000BA   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000000BE   0x2134             MOVS     R1,#+52
   \   000000C0   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000000C4   0xF110 0x01A2      ADDS     R1,R0,#+162
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable2_3
   \   000000CC   0x.... 0x....      BL       printf
   \   000000D0   0xA0A1             ADR.N    R0,??USBH_MSC_Process_11  ;; "\n"
   \   000000D2   0x.... 0x....      BL       printf
    354                    USBH_UsrLog ("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
   \   000000D6   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000000DA   0x2134             MOVS     R1,#+52
   \   000000DC   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000000E0   0xF110 0x01AB      ADDS     R1,R0,#+171
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable2_4
   \   000000E8   0x.... 0x....      BL       printf
   \   000000EC   0xA09A             ADR.N    R0,??USBH_MSC_Process_11  ;; "\n"
   \   000000EE   0x.... 0x....      BL       printf
    355                    USBH_UsrLog ("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
   \   000000F2   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000000F6   0x2134             MOVS     R1,#+52
   \   000000F8   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000000FC   0xF110 0x01BC      ADDS     R1,R0,#+188
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable2_5
   \   00000104   0x.... 0x....      BL       printf
   \   00000108   0xA093             ADR.N    R0,??USBH_MSC_Process_11  ;; "\n"
   \   0000010A   0x.... 0x....      BL       printf
    356                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
   \   0000010E   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000112   0x2134             MOVS     R1,#+52
   \   00000114   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000118   0x2102             MOVS     R1,#+2
   \   0000011A   0xF880 0x1090      STRB     R1,[R0, #+144]
    357                  }
    358                  if( scsi_status == USBH_FAIL)
   \                     ??USBH_MSC_Process_12: (+1)
   \   0000011E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000120   0x2F02             CMP      R7,#+2
   \   00000122   0xD108             BNE.N    ??USBH_MSC_Process_13
    359                  {
    360                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;         
   \   00000124   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000128   0x2134             MOVS     R1,#+52
   \   0000012A   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000012E   0x2105             MOVS     R1,#+5
   \   00000130   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   00000134   0xE012             B.N      ??USBH_MSC_Process_14
    361                  }
    362                  else if(scsi_status == USBH_UNRECOVERED_ERROR)
   \                     ??USBH_MSC_Process_13: (+1)
   \   00000136   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000138   0x2F04             CMP      R7,#+4
   \   0000013A   0xD10F             BNE.N    ??USBH_MSC_Process_14
    363                  {
    364                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
   \   0000013C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000140   0x2134             MOVS     R1,#+52
   \   00000142   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000146   0x2101             MOVS     R1,#+1
   \   00000148   0xF880 0x1090      STRB     R1,[R0, #+144]
    365                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
   \   0000014C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000150   0x2134             MOVS     R1,#+52
   \   00000152   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000156   0x2102             MOVS     R1,#+2
   \   00000158   0xF880 0x1091      STRB     R1,[R0, #+145]
    366                  }
    367                  break;    
   \                     ??USBH_MSC_Process_14: (+1)
   \   0000015C   0xE1BE             B.N      ??USBH_MSC_Process_15
    368                  
    369                case MSC_TEST_UNIT_READY:
    370                  ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
   \                     ??USBH_MSC_Process_5: (+1)
   \   0000015E   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   00000162   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000164   0x0020             MOVS     R0,R4
   \   00000166   0x.... 0x....      BL       USBH_MSC_SCSI_TestUnitReady
   \   0000016A   0x4680             MOV      R8,R0
    371                  
    372                  if( ready_status == USBH_OK)
   \   0000016C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000170   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000174   0xD138             BNE.N    ??USBH_MSC_Process_16
    373                  {
    374                    if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
   \   00000176   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000017A   0x2134             MOVS     R1,#+52
   \   0000017C   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000180   0xF890 0x0092      LDRB     R0,[R0, #+146]
   \   00000184   0x2800             CMP      R0,#+0
   \   00000186   0xD00F             BEQ.N    ??USBH_MSC_Process_17
    375                    {
    376                      MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
   \   00000188   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000018C   0x2134             MOVS     R1,#+52
   \   0000018E   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000192   0x2101             MOVS     R1,#+1
   \   00000194   0xF880 0x10C1      STRB     R1,[R0, #+193]
    377                      USBH_UsrLog ("MSC Device ready");
   \   00000198   0x.... 0x....      LDR.W    R0,??DataTable2_6
   \   0000019C   0x.... 0x....      BL       printf
   \   000001A0   0xA06D             ADR.N    R0,??USBH_MSC_Process_11  ;; "\n"
   \   000001A2   0x.... 0x....      BL       printf
   \   000001A6   0xE007             B.N      ??USBH_MSC_Process_18
    378                    }
    379                    else
    380                    {
    381                      MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
   \                     ??USBH_MSC_Process_17: (+1)
   \   000001A8   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000001AC   0x2134             MOVS     R1,#+52
   \   000001AE   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000001B2   0x2100             MOVS     R1,#+0
   \   000001B4   0xF880 0x10C1      STRB     R1,[R0, #+193]
    382                    }
    383                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
   \                     ??USBH_MSC_Process_18: (+1)
   \   000001B8   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000001BC   0x2134             MOVS     R1,#+52
   \   000001BE   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000001C2   0x2103             MOVS     R1,#+3
   \   000001C4   0xF880 0x1090      STRB     R1,[R0, #+144]
    384                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
   \   000001C8   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000001CC   0x2134             MOVS     R1,#+52
   \   000001CE   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000001D2   0x2100             MOVS     R1,#+0
   \   000001D4   0xF880 0x1091      STRB     R1,[R0, #+145]
    385                    MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
   \   000001D8   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000001DC   0x2134             MOVS     R1,#+52
   \   000001DE   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000001E2   0x2100             MOVS     R1,#+0
   \   000001E4   0xF880 0x1092      STRB     R1,[R0, #+146]
    386                  }
    387                  if( ready_status == USBH_FAIL)
   \                     ??USBH_MSC_Process_16: (+1)
   \   000001E8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001EC   0xF1B8 0x0F02      CMP      R8,#+2
   \   000001F0   0xD139             BNE.N    ??USBH_MSC_Process_19
    388                  {
    389                    /* Media not ready, so try to check again during 10s */
    390                    if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
   \   000001F2   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000001F6   0x2134             MOVS     R1,#+52
   \   000001F8   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000001FC   0xF890 0x0092      LDRB     R0,[R0, #+146]
   \   00000200   0x2802             CMP      R0,#+2
   \   00000202   0xD00F             BEQ.N    ??USBH_MSC_Process_20
    391                    {
    392                      MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
   \   00000204   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000208   0x2134             MOVS     R1,#+52
   \   0000020A   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000020E   0x2101             MOVS     R1,#+1
   \   00000210   0xF880 0x10C1      STRB     R1,[R0, #+193]
    393                      USBH_UsrLog ("MSC Device NOT ready");
   \   00000214   0x.... 0x....      LDR.W    R0,??DataTable2_7
   \   00000218   0x.... 0x....      BL       printf
   \   0000021C   0xA04E             ADR.N    R0,??USBH_MSC_Process_11  ;; "\n"
   \   0000021E   0x.... 0x....      BL       printf
   \   00000222   0xE007             B.N      ??USBH_MSC_Process_21
    394                    }
    395                    else
    396                    {
    397                      MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
   \                     ??USBH_MSC_Process_20: (+1)
   \   00000224   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000228   0x2134             MOVS     R1,#+52
   \   0000022A   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000022E   0x2100             MOVS     R1,#+0
   \   00000230   0xF880 0x10C1      STRB     R1,[R0, #+193]
    398                    }         
    399                      MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
   \                     ??USBH_MSC_Process_21: (+1)
   \   00000234   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000238   0x2134             MOVS     R1,#+52
   \   0000023A   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000023E   0x2105             MOVS     R1,#+5
   \   00000240   0xF880 0x1090      STRB     R1,[R0, #+144]
    400                      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
   \   00000244   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000248   0x2134             MOVS     R1,#+52
   \   0000024A   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000024E   0x2101             MOVS     R1,#+1
   \   00000250   0xF880 0x1091      STRB     R1,[R0, #+145]
    401                      MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
   \   00000254   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000258   0x2134             MOVS     R1,#+52
   \   0000025A   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000025E   0x2102             MOVS     R1,#+2
   \   00000260   0xF880 0x1092      STRB     R1,[R0, #+146]
   \   00000264   0xE014             B.N      ??USBH_MSC_Process_22
    402                  }
    403                  else if(ready_status == USBH_UNRECOVERED_ERROR)
   \                     ??USBH_MSC_Process_19: (+1)
   \   00000266   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000026A   0xF1B8 0x0F04      CMP      R8,#+4
   \   0000026E   0xD10F             BNE.N    ??USBH_MSC_Process_22
    404                  {
    405                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
   \   00000270   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000274   0x2134             MOVS     R1,#+52
   \   00000276   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000027A   0x2101             MOVS     R1,#+1
   \   0000027C   0xF880 0x1090      STRB     R1,[R0, #+144]
    406                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
   \   00000280   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000284   0x2134             MOVS     R1,#+52
   \   00000286   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000028A   0x2102             MOVS     R1,#+2
   \   0000028C   0xF880 0x1091      STRB     R1,[R0, #+145]
    407                  }
    408                  break;
   \                     ??USBH_MSC_Process_22: (+1)
   \   00000290   0xE124             B.N      ??USBH_MSC_Process_15
    409                  
    410                case MSC_READ_CAPACITY10:   
    411                  scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
   \                     ??USBH_MSC_Process_6: (+1)
   \   00000292   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000296   0x2134             MOVS     R1,#+52
   \   00000298   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000029C   0xF110 0x0294      ADDS     R2,R0,#+148
   \   000002A0   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   000002A4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002A6   0x0020             MOVS     R0,R4
   \   000002A8   0x.... 0x....      BL       USBH_MSC_SCSI_ReadCapacity
   \   000002AC   0x0007             MOVS     R7,R0
    412                  
    413                  if(scsi_status == USBH_OK)
   \   000002AE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002B0   0x2F00             CMP      R7,#+0
   \   000002B2   0xD153             BNE.N    ??USBH_MSC_Process_23
    414                  {
    415                    if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1)
   \   000002B4   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000002B8   0x2134             MOVS     R1,#+52
   \   000002BA   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000002BE   0xF890 0x00C1      LDRB     R0,[R0, #+193]
   \   000002C2   0x2801             CMP      R0,#+1
   \   000002C4   0xD132             BNE.N    ??USBH_MSC_Process_24
    416                    {
    417                      USBH_UsrLog ("MSC Device capacity : %lu Bytes", \
    418                        (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr * MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
   \   000002C6   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000002CA   0x2134             MOVS     R1,#+52
   \   000002CC   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000002D0   0xF8D0 0x0094      LDR      R0,[R0, #+148]
   \   000002D4   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   000002D8   0x2234             MOVS     R2,#+52
   \   000002DA   0xFB02 0x5101      MLA      R1,R2,R1,R5
   \   000002DE   0xF8B1 0x1098      LDRH     R1,[R1, #+152]
   \   000002E2   0xFB01 0xF100      MUL      R1,R1,R0
   \   000002E6   0x.... 0x....      LDR.W    R0,??DataTable2_8
   \   000002EA   0x.... 0x....      BL       printf
   \   000002EE   0xA01A             ADR.N    R0,??USBH_MSC_Process_11  ;; "\n"
   \   000002F0   0x.... 0x....      BL       printf
    419                      USBH_UsrLog ("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
   \   000002F4   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000002F8   0x2134             MOVS     R1,#+52
   \   000002FA   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000002FE   0xF8D0 0x1094      LDR      R1,[R0, #+148]
   \   00000302   0x.... 0x....      LDR.W    R0,??DataTable2_9
   \   00000306   0x.... 0x....      BL       printf
   \   0000030A   0xA013             ADR.N    R0,??USBH_MSC_Process_11  ;; "\n"
   \   0000030C   0x.... 0x....      BL       printf
    420                      USBH_UsrLog ("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
   \   00000310   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000314   0x2134             MOVS     R1,#+52
   \   00000316   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000031A   0xF8B0 0x1098      LDRH     R1,[R0, #+152]
   \   0000031E   0x.... 0x....      LDR.W    R0,??DataTable2_10
   \   00000322   0x.... 0x....      BL       printf
   \   00000326   0xA00C             ADR.N    R0,??USBH_MSC_Process_11  ;; "\n"
   \   00000328   0x.... 0x....      BL       printf
    421                    }
    422                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
   \                     ??USBH_MSC_Process_24: (+1)
   \   0000032C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000330   0x2134             MOVS     R1,#+52
   \   00000332   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000336   0x2101             MOVS     R1,#+1
   \   00000338   0xF880 0x1090      STRB     R1,[R0, #+144]
    423                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
   \   0000033C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000340   0x2134             MOVS     R1,#+52
   \   00000342   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000346   0x2100             MOVS     R1,#+0
   \   00000348   0xF880 0x1091      STRB     R1,[R0, #+145]
    424                    MSC_Handle->current_lun++;
   \   0000034C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000350   0x1C40             ADDS     R0,R0,#+1
   \   00000352   0xF8A5 0x00F8      STRH     R0,[R5, #+248]
   \   00000356   0xE020             B.N      ??USBH_MSC_Process_25
   \                     ??USBH_MSC_Process_11:
   \   00000358   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    
    425                  }
    426                  else if( scsi_status == USBH_FAIL)
   \                     ??USBH_MSC_Process_23: (+1)
   \   0000035C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000035E   0x2F02             CMP      R7,#+2
   \   00000360   0xD108             BNE.N    ??USBH_MSC_Process_26
    427                  {
    428                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
   \   00000362   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000366   0x2134             MOVS     R1,#+52
   \   00000368   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000036C   0x2105             MOVS     R1,#+5
   \   0000036E   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   00000372   0xE012             B.N      ??USBH_MSC_Process_25
    429                  }
    430                  else if(scsi_status == USBH_UNRECOVERED_ERROR)
   \                     ??USBH_MSC_Process_26: (+1)
   \   00000374   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000376   0x2F04             CMP      R7,#+4
   \   00000378   0xD10F             BNE.N    ??USBH_MSC_Process_25
    431                  {
    432                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
   \   0000037A   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000037E   0x2134             MOVS     R1,#+52
   \   00000380   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000384   0x2101             MOVS     R1,#+1
   \   00000386   0xF880 0x1090      STRB     R1,[R0, #+144]
    433                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
   \   0000038A   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000038E   0x2134             MOVS     R1,#+52
   \   00000390   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000394   0x2102             MOVS     R1,#+2
   \   00000396   0xF880 0x1091      STRB     R1,[R0, #+145]
    434                  }
    435                  break;
   \                     ??USBH_MSC_Process_25: (+1)
   \   0000039A   0xE09F             B.N      ??USBH_MSC_Process_15
    436                  
    437                case MSC_REQUEST_SENSE:
    438                  scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
   \                     ??USBH_MSC_Process_8: (+1)
   \   0000039C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000003A0   0x2134             MOVS     R1,#+52
   \   000003A2   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000003A6   0xF110 0x029C      ADDS     R2,R0,#+156
   \   000003AA   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   000003AE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000003B0   0x0020             MOVS     R0,R4
   \   000003B2   0x.... 0x....      BL       USBH_MSC_SCSI_RequestSense
   \   000003B6   0x0007             MOVS     R7,R0
    439                  
    440                  if( scsi_status == USBH_OK)
   \   000003B8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000003BA   0x2F00             CMP      R7,#+0
   \   000003BC   0xD157             BNE.N    ??USBH_MSC_Process_27
    441                  {
    442                    if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
    443                       (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY) )   
   \   000003BE   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000003C2   0x2134             MOVS     R1,#+52
   \   000003C4   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000003C8   0xF890 0x009C      LDRB     R0,[R0, #+156]
   \   000003CC   0x2806             CMP      R0,#+6
   \   000003CE   0xD008             BEQ.N    ??USBH_MSC_Process_28
   \   000003D0   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000003D4   0x2134             MOVS     R1,#+52
   \   000003D6   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000003DA   0xF890 0x009C      LDRB     R0,[R0, #+156]
   \   000003DE   0x2802             CMP      R0,#+2
   \   000003E0   0xD111             BNE.N    ??USBH_MSC_Process_29
    444                    {
    445                      
    446                      if((phost->Timer - MSC_Handle->timer) > 10000)
   \                     ??USBH_MSC_Process_28: (+1)
   \   000003E2   0xF8D4 0x02A8      LDR      R0,[R4, #+680]
   \   000003E6   0xF8D5 0x10FC      LDR      R1,[R5, #+252]
   \   000003EA   0x1A40             SUBS     R0,R0,R1
   \   000003EC   0xF242 0x7111      MOVW     R1,#+10001
   \   000003F0   0x4288             CMP      R0,R1
   \   000003F2   0xD308             BCC.N    ??USBH_MSC_Process_29
    447                      {
    448                        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
   \   000003F4   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000003F8   0x2134             MOVS     R1,#+52
   \   000003FA   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000003FE   0x2102             MOVS     R1,#+2
   \   00000400   0xF880 0x1090      STRB     R1,[R0, #+144]
    449                        break;
   \   00000404   0xE06A             B.N      ??USBH_MSC_Process_15
    450                      }        
    451                    }
    452                    
    453                    USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
   \                     ??USBH_MSC_Process_29: (+1)
   \   00000406   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000040A   0x2134             MOVS     R1,#+52
   \   0000040C   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000410   0xF890 0x109C      LDRB     R1,[R0, #+156]
   \   00000414   0x....             LDR.N    R0,??DataTable2_11
   \   00000416   0x.... 0x....      BL       printf
   \   0000041A   0x....             ADR.N    R0,??DataTable2  ;; "\n"
   \   0000041C   0x.... 0x....      BL       printf
    454                    USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
   \   00000420   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000424   0x2134             MOVS     R1,#+52
   \   00000426   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000042A   0xF890 0x109D      LDRB     R1,[R0, #+157]
   \   0000042E   0x....             LDR.N    R0,??DataTable2_12
   \   00000430   0x.... 0x....      BL       printf
   \   00000434   0x....             ADR.N    R0,??DataTable2  ;; "\n"
   \   00000436   0x.... 0x....      BL       printf
    455                    USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
   \   0000043A   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000043E   0x2134             MOVS     R1,#+52
   \   00000440   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   00000444   0xF890 0x109E      LDRB     R1,[R0, #+158]
   \   00000448   0x....             LDR.N    R0,??DataTable2_13
   \   0000044A   0x.... 0x....      BL       printf
   \   0000044E   0x....             ADR.N    R0,??DataTable2  ;; "\n"
   \   00000450   0x.... 0x....      BL       printf
    456                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
   \   00000454   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000458   0x2134             MOVS     R1,#+52
   \   0000045A   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000045E   0x2101             MOVS     R1,#+1
   \   00000460   0xF880 0x1090      STRB     R1,[R0, #+144]
    457                    MSC_Handle->current_lun++;
   \   00000464   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000468   0x1C40             ADDS     R0,R0,#+1
   \   0000046A   0xF8A5 0x00F8      STRH     R0,[R5, #+248]
    458                  }
    459                  if( scsi_status == USBH_FAIL)
   \                     ??USBH_MSC_Process_27: (+1)
   \   0000046E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000470   0x2F02             CMP      R7,#+2
   \   00000472   0xD10E             BNE.N    ??USBH_MSC_Process_30
    460                  {
    461                    USBH_UsrLog ("MSC Device NOT ready");
   \   00000474   0x....             LDR.N    R0,??DataTable2_7
   \   00000476   0x.... 0x....      BL       printf
   \   0000047A   0x....             ADR.N    R0,??DataTable2  ;; "\n"
   \   0000047C   0x.... 0x....      BL       printf
    462                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
   \   00000480   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000484   0x2134             MOVS     R1,#+52
   \   00000486   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000048A   0x2108             MOVS     R1,#+8
   \   0000048C   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   00000490   0xE012             B.N      ??USBH_MSC_Process_31
    463                  }
    464                  else if(scsi_status == USBH_UNRECOVERED_ERROR)
   \                     ??USBH_MSC_Process_30: (+1)
   \   00000492   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000494   0x2F04             CMP      R7,#+4
   \   00000496   0xD10F             BNE.N    ??USBH_MSC_Process_31
    465                  {
    466                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
   \   00000498   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000049C   0x2134             MOVS     R1,#+52
   \   0000049E   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000004A2   0x2101             MOVS     R1,#+1
   \   000004A4   0xF880 0x1090      STRB     R1,[R0, #+144]
    467                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;   
   \   000004A8   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000004AC   0x2134             MOVS     R1,#+52
   \   000004AE   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   000004B2   0x2102             MOVS     R1,#+2
   \   000004B4   0xF880 0x1091      STRB     R1,[R0, #+145]
    468                  }
    469                  break;  
   \                     ??USBH_MSC_Process_31: (+1)
   \   000004B8   0xE010             B.N      ??USBH_MSC_Process_15
    470              
    471                case MSC_UNRECOVERED_ERROR: 
    472                  MSC_Handle->current_lun++;
   \                     ??USBH_MSC_Process_9: (+1)
   \   000004BA   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000004BE   0x1C40             ADDS     R0,R0,#+1
   \   000004C0   0xF8A5 0x00F8      STRH     R0,[R5, #+248]
    473                  break;  
   \   000004C4   0xE00A             B.N      ??USBH_MSC_Process_15
    474                  
    475                default:
    476                  break;
   \                     ??USBH_MSC_Process_10: (+1)
   \   000004C6   0xE009             B.N      ??USBH_MSC_Process_15
    477                }
    478                
    479          #if (USBH_USE_OS == 1)
    480              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    481          #endif       
    482              }
    483              else
    484              {
    485                MSC_Handle->current_lun = 0;
   \                     ??USBH_MSC_Process_3: (+1)
   \   000004C8   0x2000             MOVS     R0,#+0
   \   000004CA   0xF8A5 0x00F8      STRH     R0,[R5, #+248]
    486              MSC_Handle->state = MSC_IDLE;
   \   000004CE   0x2001             MOVS     R0,#+1
   \   000004D0   0x7328             STRB     R0,[R5, #+12]
    487          #if (USBH_USE_OS == 1)
    488              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    489          #endif 
    490              phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
   \   000004D2   0x2102             MOVS     R1,#+2
   \   000004D4   0x0020             MOVS     R0,R4
   \   000004D6   0xF8D4 0x22B4      LDR      R2,[R4, #+692]
   \   000004DA   0x4790             BLX      R2
    491              }
    492              break;
   \                     ??USBH_MSC_Process_15: (+1)
   \   000004DC   0xE002             B.N      ??USBH_MSC_Process_32
    493          
    494            case MSC_IDLE:
    495              error = USBH_OK;  
   \                     ??USBH_MSC_Process_1: (+1)
   \   000004DE   0x2000             MOVS     R0,#+0
   \   000004E0   0x0006             MOVS     R6,R0
    496              break;
   \   000004E2   0xE7FF             B.N      ??USBH_MSC_Process_32
    497              
    498            default:
    499              break; 
    500            }
    501            return error;
   \                     ??USBH_MSC_Process_2: (+1)
   \                     ??USBH_MSC_Process_32: (+1)
   \   000004E4   0x0030             MOVS     R0,R6
   \   000004E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004E8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    502          }
    503          
    504          
    505          /**
    506            * @brief  USBH_MSC_SOFProcess 
    507            *         The function is for SOF state
    508            * @param  phost: Host handle
    509            * @retval USBH Status
    510            */

   \                                 In section .text, align 2, keep-with-next
    511          static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
    512          {
   \                     USBH_MSC_SOFProcess: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    513          
    514            return USBH_OK;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x4770             BX       LR               ;; return
    515          }
    516          /**
    517            * @brief  USBH_MSC_RdWrProcess 
    518            *         The function is for managing state machine for MSC I/O Process
    519            * @param  phost: Host handle
    520            * @param  lun: logical Unit Number
    521            * @retval USBH Status
    522            */

   \                                 In section .text, align 2, keep-with-next
    523          static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
    524          {
   \                     USBH_MSC_RdWrProcess: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    525            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
   \   0000000A   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   0000000E   0x69C6             LDR      R6,[R0, #+28]
    526            USBH_StatusTypeDef error = USBH_BUSY ;
   \   00000010   0x2701             MOVS     R7,#+1
    527            USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
   \   00000012   0xF05F 0x0801      MOVS     R8,#+1
    528            
    529            /* Switch MSC REQ state machine */
    530            switch (MSC_Handle->unit[lun].state)
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2034             MOVS     R0,#+52
   \   0000001A   0xFB00 0x6005      MLA      R0,R0,R5,R6
   \   0000001E   0xF890 0x0090      LDRB     R0,[R0, #+144]
   \   00000022   0x2805             CMP      R0,#+5
   \   00000024   0xD06F             BEQ.N    ??USBH_MSC_RdWrProcess_0
   \   00000026   0xF0C0 0x80CE      BCC.W    ??USBH_MSC_RdWrProcess_1
   \   0000002A   0x2807             CMP      R0,#+7
   \   0000002C   0xD036             BEQ.N    ??USBH_MSC_RdWrProcess_2
   \   0000002E   0xF080 0x80CA      BCS.W    ??USBH_MSC_RdWrProcess_1
    531            {
    532           
    533            case MSC_READ: 
    534              scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0, NULL, 0) ;
   \                     ??USBH_MSC_RdWrProcess_3: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0x2300             MOVS     R3,#+0
   \   00000038   0x2200             MOVS     R2,#+0
   \   0000003A   0x0029             MOVS     R1,R5
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       USBH_MSC_SCSI_Read
   \   00000044   0x4680             MOV      R8,R0
    535              
    536              if(scsi_status == USBH_OK)
   \   00000046   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000004E   0xD109             BNE.N    ??USBH_MSC_RdWrProcess_4
    537              {
    538                MSC_Handle->unit[lun].state = MSC_IDLE;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000054   0x2134             MOVS     R1,#+52
   \   00000056   0xFB01 0x6105      MLA      R1,R1,R5,R6
   \   0000005A   0xF881 0x0090      STRB     R0,[R1, #+144]
    539                error = USBH_OK;     
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x0007             MOVS     R7,R0
   \   00000062   0xE01A             B.N      ??USBH_MSC_RdWrProcess_5
    540              }
    541              else if( scsi_status == USBH_FAIL)
   \                     ??USBH_MSC_RdWrProcess_4: (+1)
   \   00000064   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000068   0xF1B8 0x0F02      CMP      R8,#+2
   \   0000006C   0xD107             BNE.N    ??USBH_MSC_RdWrProcess_6
    542              {
    543                MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
   \   0000006E   0x2005             MOVS     R0,#+5
   \   00000070   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000072   0x2134             MOVS     R1,#+52
   \   00000074   0xFB01 0x6105      MLA      R1,R1,R5,R6
   \   00000078   0xF881 0x0090      STRB     R0,[R1, #+144]
   \   0000007C   0xE00D             B.N      ??USBH_MSC_RdWrProcess_5
    544              }
    545              else if(scsi_status == USBH_UNRECOVERED_ERROR)
   \                     ??USBH_MSC_RdWrProcess_6: (+1)
   \   0000007E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000082   0xF1B8 0x0F04      CMP      R8,#+4
   \   00000086   0xD108             BNE.N    ??USBH_MSC_RdWrProcess_5
    546              {
    547                MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
   \   00000088   0x2008             MOVS     R0,#+8
   \   0000008A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008C   0x2134             MOVS     R1,#+52
   \   0000008E   0xFB01 0x6105      MLA      R1,R1,R5,R6
   \   00000092   0xF881 0x0090      STRB     R0,[R1, #+144]
    548                    error = USBH_FAIL;
   \   00000096   0x2002             MOVS     R0,#+2
   \   00000098   0x0007             MOVS     R7,R0
    549              }
    550          #if (USBH_USE_OS == 1)
    551              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    552          #endif   
    553              break;     
   \                     ??USBH_MSC_RdWrProcess_5: (+1)
   \   0000009A   0xE094             B.N      ??USBH_MSC_RdWrProcess_7
    554              
    555            case MSC_WRITE: 
    556              scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0, NULL, 0) ;
   \                     ??USBH_MSC_RdWrProcess_2: (+1)
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x9000             STR      R0,[SP, #+0]
   \   000000A0   0x2300             MOVS     R3,#+0
   \   000000A2   0x2200             MOVS     R2,#+0
   \   000000A4   0x0029             MOVS     R1,R5
   \   000000A6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A8   0x0020             MOVS     R0,R4
   \   000000AA   0x.... 0x....      BL       USBH_MSC_SCSI_Write
   \   000000AE   0x4680             MOV      R8,R0
    557              
    558              if(scsi_status == USBH_OK)
   \   000000B0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000B4   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000B8   0xD109             BNE.N    ??USBH_MSC_RdWrProcess_8
    559              {
    560                  MSC_Handle->unit[lun].state = MSC_IDLE;
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BE   0x2134             MOVS     R1,#+52
   \   000000C0   0xFB01 0x6105      MLA      R1,R1,R5,R6
   \   000000C4   0xF881 0x0090      STRB     R0,[R1, #+144]
    561                  error = USBH_OK;             
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x0007             MOVS     R7,R0
   \   000000CC   0xE01A             B.N      ??USBH_MSC_RdWrProcess_9
    562              }
    563              else if( scsi_status == USBH_FAIL)
   \                     ??USBH_MSC_RdWrProcess_8: (+1)
   \   000000CE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000D2   0xF1B8 0x0F02      CMP      R8,#+2
   \   000000D6   0xD107             BNE.N    ??USBH_MSC_RdWrProcess_10
    564              {
    565                MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
   \   000000D8   0x2005             MOVS     R0,#+5
   \   000000DA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000DC   0x2134             MOVS     R1,#+52
   \   000000DE   0xFB01 0x6105      MLA      R1,R1,R5,R6
   \   000000E2   0xF881 0x0090      STRB     R0,[R1, #+144]
   \   000000E6   0xE00D             B.N      ??USBH_MSC_RdWrProcess_9
    566              }
    567              else if(scsi_status == USBH_UNRECOVERED_ERROR)
   \                     ??USBH_MSC_RdWrProcess_10: (+1)
   \   000000E8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000EC   0xF1B8 0x0F04      CMP      R8,#+4
   \   000000F0   0xD108             BNE.N    ??USBH_MSC_RdWrProcess_9
    568              {
    569                MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
   \   000000F2   0x2008             MOVS     R0,#+8
   \   000000F4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000F6   0x2134             MOVS     R1,#+52
   \   000000F8   0xFB01 0x6105      MLA      R1,R1,R5,R6
   \   000000FC   0xF881 0x0090      STRB     R0,[R1, #+144]
    570                    error = USBH_FAIL;
   \   00000100   0x2002             MOVS     R0,#+2
   \   00000102   0x0007             MOVS     R7,R0
    571              }
    572          #if (USBH_USE_OS == 1)
    573              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    574          #endif       
    575              break; 
   \                     ??USBH_MSC_RdWrProcess_9: (+1)
   \   00000104   0xE05F             B.N      ??USBH_MSC_RdWrProcess_7
    576            
    577            case MSC_REQUEST_SENSE:
    578              scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
   \                     ??USBH_MSC_RdWrProcess_0: (+1)
   \   00000106   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000108   0x2034             MOVS     R0,#+52
   \   0000010A   0xFB00 0x6005      MLA      R0,R0,R5,R6
   \   0000010E   0xF110 0x029C      ADDS     R2,R0,#+156
   \   00000112   0x0029             MOVS     R1,R5
   \   00000114   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000116   0x0020             MOVS     R0,R4
   \   00000118   0x.... 0x....      BL       USBH_MSC_SCSI_RequestSense
   \   0000011C   0x4680             MOV      R8,R0
    579              
    580              if( scsi_status == USBH_OK)
   \   0000011E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000122   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000126   0xD133             BNE.N    ??USBH_MSC_RdWrProcess_11
    581              {
    582                USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
   \   00000128   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000012A   0x2034             MOVS     R0,#+52
   \   0000012C   0xFB00 0x6005      MLA      R0,R0,R5,R6
   \   00000130   0xF890 0x109C      LDRB     R1,[R0, #+156]
   \   00000134   0x....             LDR.N    R0,??DataTable2_11
   \   00000136   0x.... 0x....      BL       printf
   \   0000013A   0x....             ADR.N    R0,??DataTable2  ;; "\n"
   \   0000013C   0x.... 0x....      BL       printf
    583                USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
   \   00000140   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000142   0x2034             MOVS     R0,#+52
   \   00000144   0xFB00 0x6005      MLA      R0,R0,R5,R6
   \   00000148   0xF890 0x109D      LDRB     R1,[R0, #+157]
   \   0000014C   0x....             LDR.N    R0,??DataTable2_12
   \   0000014E   0x.... 0x....      BL       printf
   \   00000152   0x....             ADR.N    R0,??DataTable2  ;; "\n"
   \   00000154   0x.... 0x....      BL       printf
    584                USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
   \   00000158   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000015A   0x2034             MOVS     R0,#+52
   \   0000015C   0xFB00 0x6005      MLA      R0,R0,R5,R6
   \   00000160   0xF890 0x109E      LDRB     R1,[R0, #+158]
   \   00000164   0x....             LDR.N    R0,??DataTable2_13
   \   00000166   0x.... 0x....      BL       printf
   \   0000016A   0x....             ADR.N    R0,??DataTable2  ;; "\n"
   \   0000016C   0x.... 0x....      BL       printf
    585                MSC_Handle->unit[lun].state = MSC_IDLE;
   \   00000170   0x2001             MOVS     R0,#+1
   \   00000172   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000174   0x2134             MOVS     R1,#+52
   \   00000176   0xFB01 0x6105      MLA      R1,R1,R5,R6
   \   0000017A   0xF881 0x0090      STRB     R0,[R1, #+144]
    586                MSC_Handle->unit[lun].error = MSC_ERROR;
   \   0000017E   0x2002             MOVS     R0,#+2
   \   00000180   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000182   0x2134             MOVS     R1,#+52
   \   00000184   0xFB01 0x6105      MLA      R1,R1,R5,R6
   \   00000188   0xF881 0x0091      STRB     R0,[R1, #+145]
    587                
    588                error = USBH_FAIL;
   \   0000018C   0x2002             MOVS     R0,#+2
   \   0000018E   0x0007             MOVS     R7,R0
    589              }
    590              if( scsi_status == USBH_FAIL)
   \                     ??USBH_MSC_RdWrProcess_11: (+1)
   \   00000190   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000194   0xF1B8 0x0F02      CMP      R8,#+2
   \   00000198   0xD106             BNE.N    ??USBH_MSC_RdWrProcess_12
    591              {
    592                USBH_UsrLog ("MSC Device NOT ready");
   \   0000019A   0x....             LDR.N    R0,??DataTable2_7
   \   0000019C   0x.... 0x....      BL       printf
   \   000001A0   0x....             ADR.N    R0,??DataTable2  ;; "\n"
   \   000001A2   0x.... 0x....      BL       printf
   \   000001A6   0xE00D             B.N      ??USBH_MSC_RdWrProcess_13
    593              }
    594              else if(scsi_status == USBH_UNRECOVERED_ERROR)
   \                     ??USBH_MSC_RdWrProcess_12: (+1)
   \   000001A8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001AC   0xF1B8 0x0F04      CMP      R8,#+4
   \   000001B0   0xD108             BNE.N    ??USBH_MSC_RdWrProcess_13
    595              {
    596                MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;  
   \   000001B2   0x2008             MOVS     R0,#+8
   \   000001B4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001B6   0x2134             MOVS     R1,#+52
   \   000001B8   0xFB01 0x6105      MLA      R1,R1,R5,R6
   \   000001BC   0xF881 0x0090      STRB     R0,[R1, #+144]
    597                    error = USBH_FAIL;
   \   000001C0   0x2002             MOVS     R0,#+2
   \   000001C2   0x0007             MOVS     R7,R0
    598              }
    599          #if (USBH_USE_OS == 1)
    600              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    601          #endif       
    602              break;  
   \                     ??USBH_MSC_RdWrProcess_13: (+1)
   \   000001C4   0xE7FF             B.N      ??USBH_MSC_RdWrProcess_7
    603              
    604            default:
    605              break;  
    606              
    607            }
    608            return error;
   \                     ??USBH_MSC_RdWrProcess_1: (+1)
   \                     ??USBH_MSC_RdWrProcess_7: (+1)
   \   000001C6   0x0038             MOVS     R0,R7
   \   000001C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001CA   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    609          }
    610          
    611          /**
    612            * @brief  USBH_MSC_IsReady 
    613            *         The function check if the MSC function is ready
    614            * @param  phost: Host handle
    615            * @retval USBH Status
    616            */

   \                                 In section .text, align 2, keep-with-next
    617          uint8_t  USBH_MSC_IsReady (USBH_HandleTypeDef *phost)
    618          {
   \                     USBH_MSC_IsReady: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    619              MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
   \   00000002   0xF8D1 0x0264      LDR      R0,[R1, #+612]
   \   00000006   0x69C2             LDR      R2,[R0, #+28]
    620              
    621            if(phost->gState == HOST_CLASS)
   \   00000008   0x7808             LDRB     R0,[R1, #+0]
   \   0000000A   0x280A             CMP      R0,#+10
   \   0000000C   0xD107             BNE.N    ??USBH_MSC_IsReady_0
    622            {
    623              return (MSC_Handle->state == MSC_IDLE);
   \   0000000E   0x7B10             LDRB     R0,[R2, #+12]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD101             BNE.N    ??USBH_MSC_IsReady_1
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE000             B.N      ??USBH_MSC_IsReady_2
   \                     ??USBH_MSC_IsReady_1: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \                     ??USBH_MSC_IsReady_2: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xE000             B.N      ??USBH_MSC_IsReady_3
    624            }
    625            else
    626            {
    627              return 0;
   \                     ??USBH_MSC_IsReady_0: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \                     ??USBH_MSC_IsReady_3: (+1)
   \   00000020   0x4770             BX       LR               ;; return
    628            }
    629          }
    630          
    631          /**
    632            * @brief  USBH_MSC_GetMaxLUN 
    633            *         The function return the Max LUN supported
    634            * @param  phost: Host handle
    635            * @retval logical Unit Number supported
    636            */

   \                                 In section .text, align 2, keep-with-next
    637          int8_t  USBH_MSC_GetMaxLUN (USBH_HandleTypeDef *phost)
    638          {
   \                     USBH_MSC_GetMaxLUN: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    639            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
   \   00000002   0xF8D1 0x0264      LDR      R0,[R1, #+612]
   \   00000006   0x69C2             LDR      R2,[R0, #+28]
    640            
    641            if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
   \   00000008   0x7808             LDRB     R0,[R1, #+0]
   \   0000000A   0x280A             CMP      R0,#+10
   \   0000000C   0xD105             BNE.N    ??USBH_MSC_GetMaxLUN_0
   \   0000000E   0x7B10             LDRB     R0,[R2, #+12]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD102             BNE.N    ??USBH_MSC_GetMaxLUN_0
    642            {
    643              return  MSC_Handle->max_lun;
   \   00000014   0x6810             LDR      R0,[R2, #+0]
   \   00000016   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000018   0xE001             B.N      ??USBH_MSC_GetMaxLUN_1
    644            }  
    645            return 0xFF;
   \                     ??USBH_MSC_GetMaxLUN_0: (+1)
   \   0000001A   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??USBH_MSC_GetMaxLUN_1: (+1)
   \   0000001E   0x4770             BX       LR               ;; return
    646          }
    647          
    648          /**
    649            * @brief  USBH_MSC_UnitIsReady 
    650            *         The function check whether a LUN is ready
    651            * @param  phost: Host handle
    652            * @param  lun: logical Unit Number
    653            * @retval Lun status (0: not ready / 1: ready)
    654            */

   \                                 In section .text, align 2, keep-with-next
    655          uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
    656          {
   \                     USBH_MSC_UnitIsReady: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    657            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
   \   00000002   0xF8D2 0x0264      LDR      R0,[R2, #+612]
   \   00000006   0x69C3             LDR      R3,[R0, #+28]
    658            
    659            if(phost->gState == HOST_CLASS)
   \   00000008   0x7810             LDRB     R0,[R2, #+0]
   \   0000000A   0x280A             CMP      R0,#+10
   \   0000000C   0xD10C             BNE.N    ??USBH_MSC_UnitIsReady_0
    660            {
    661              return (MSC_Handle->unit[lun].error == MSC_OK);
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x2034             MOVS     R0,#+52
   \   00000012   0xFB00 0x3001      MLA      R0,R0,R1,R3
   \   00000016   0xF890 0x0091      LDRB     R0,[R0, #+145]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD101             BNE.N    ??USBH_MSC_UnitIsReady_1
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xE000             B.N      ??USBH_MSC_UnitIsReady_2
   \                     ??USBH_MSC_UnitIsReady_1: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \                     ??USBH_MSC_UnitIsReady_2: (+1)
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xE000             B.N      ??USBH_MSC_UnitIsReady_3
    662            }
    663            else
    664            {
    665              return 0;
   \                     ??USBH_MSC_UnitIsReady_0: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \                     ??USBH_MSC_UnitIsReady_3: (+1)
   \   0000002A   0x4770             BX       LR               ;; return
    666            }
    667          }
    668                
    669          /**
    670            * @brief  USBH_MSC_GetLUNInfo 
    671            *         The function return a LUN information
    672            * @param  phost: Host handle
    673            * @param  lun: logical Unit Number
    674            * @retval USBH Status
    675            */

   \                                 In section .text, align 2, keep-with-next
    676          USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
    677          {
   \                     USBH_MSC_GetLUNInfo: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    678            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
   \   0000000A   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   0000000E   0x69C7             LDR      R7,[R0, #+28]
    679            if(phost->gState == HOST_CLASS)
   \   00000010   0x7820             LDRB     R0,[R4, #+0]
   \   00000012   0x280A             CMP      R0,#+10
   \   00000014   0xD10E             BNE.N    ??USBH_MSC_GetLUNInfo_0
    680            {
    681              USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
   \   00000016   0xF05F 0x0834      MOVS     R8,#+52
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2034             MOVS     R0,#+52
   \   0000001E   0xFB00 0x7005      MLA      R0,R0,R5,R7
   \   00000022   0xF110 0x0990      ADDS     R9,R0,#+144
   \   00000026   0x4642             MOV      R2,R8
   \   00000028   0x4649             MOV      R1,R9
   \   0000002A   0x0030             MOVS     R0,R6
   \   0000002C   0x.... 0x....      BL       __aeabi_memcpy
    682              return USBH_OK;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xE000             B.N      ??USBH_MSC_GetLUNInfo_1
    683            }
    684            else
    685            {
    686              return USBH_FAIL;
   \                     ??USBH_MSC_GetLUNInfo_0: (+1)
   \   00000034   0x2002             MOVS     R0,#+2
   \                     ??USBH_MSC_GetLUNInfo_1: (+1)
   \   00000036   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    687            }
    688          }
    689          
    690          /**
    691            * @brief  USBH_MSC_Read 
    692            *         The function performs a Read operation 
    693            * @param  phost: Host handle
    694            * @param  lun: logical Unit Number
    695            * @param  address: sector address
    696            * @param  pbuf: pointer to data
    697            * @param  length: number of sector to read
    698            * @retval USBH Status
    699            */

   \                                 In section .text, align 2, keep-with-next
    700          USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
    701                                               uint8_t lun,
    702                                               uint32_t address,
    703                                               uint8_t *pbuf,
    704                                               uint32_t length)
    705          {
   \                     USBH_MSC_Read: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8028      LDR      R8,[SP, #+40]
    706            uint32_t timeout;
    707            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
   \   00000012   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   00000016   0xF8D0 0xA01C      LDR      R10,[R0, #+28]
    708            
    709            if ((phost->device.is_connected == 0) || 
    710                (phost->gState != HOST_CLASS) || 
    711                (MSC_Handle->unit[lun].state != MSC_IDLE))
   \   0000001A   0xF894 0x021E      LDRB     R0,[R4, #+542]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD00A             BEQ.N    ??USBH_MSC_Read_0
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x280A             CMP      R0,#+10
   \   00000026   0xD107             BNE.N    ??USBH_MSC_Read_0
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2034             MOVS     R0,#+52
   \   0000002C   0xFB00 0xA005      MLA      R0,R0,R5,R10
   \   00000030   0xF890 0x0090      LDRB     R0,[R0, #+144]
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD001             BEQ.N    ??USBH_MSC_Read_1
    712            {
    713              return  USBH_FAIL;
   \                     ??USBH_MSC_Read_0: (+1)
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0xE036             B.N      ??USBH_MSC_Read_2
    714            }
    715            MSC_Handle->state = MSC_READ;
   \                     ??USBH_MSC_Read_1: (+1)
   \   0000003C   0x2006             MOVS     R0,#+6
   \   0000003E   0xF88A 0x000C      STRB     R0,[R10, #+12]
    716            MSC_Handle->unit[lun].state = MSC_READ;
   \   00000042   0x2006             MOVS     R0,#+6
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2134             MOVS     R1,#+52
   \   00000048   0xFB01 0xA105      MLA      R1,R1,R5,R10
   \   0000004C   0xF881 0x0090      STRB     R0,[R1, #+144]
    717            MSC_Handle->rw_lun = lun;
   \   00000050   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000052   0xF8AA 0x50FA      STRH     R5,[R10, #+250]
    718            USBH_MSC_SCSI_Read(phost,
    719                               lun,
    720                               address,
    721                               pbuf,
    722                               length);
   \   00000056   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   0000005A   0x003B             MOVS     R3,R7
   \   0000005C   0x0032             MOVS     R2,R6
   \   0000005E   0x0029             MOVS     R1,R5
   \   00000060   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0x.... 0x....      BL       USBH_MSC_SCSI_Read
    723            
    724            timeout = phost->Timer;
   \   00000068   0xF8D4 0x02A8      LDR      R0,[R4, #+680]
   \   0000006C   0x4681             MOV      R9,R0
    725            
    726            while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
   \                     ??USBH_MSC_Read_3: (+1)
   \   0000006E   0x0029             MOVS     R1,R5
   \   00000070   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x.... 0x....      BL       USBH_MSC_RdWrProcess
   \   00000078   0x2801             CMP      R0,#+1
   \   0000007A   0xD112             BNE.N    ??USBH_MSC_Read_4
    727            {
    728              if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
   \   0000007C   0xF242 0x7010      MOVW     R0,#+10000
   \   00000080   0xFB00 0xF008      MUL      R0,R0,R8
   \   00000084   0xF8D4 0x12A8      LDR      R1,[R4, #+680]
   \   00000088   0xEBB1 0x0109      SUBS     R1,R1,R9
   \   0000008C   0x4288             CMP      R0,R1
   \   0000008E   0xD303             BCC.N    ??USBH_MSC_Read_5
   \   00000090   0xF894 0x021E      LDRB     R0,[R4, #+542]
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD1EA             BNE.N    ??USBH_MSC_Read_3
    729              {
    730                MSC_Handle->state = MSC_IDLE;
   \                     ??USBH_MSC_Read_5: (+1)
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0xF88A 0x000C      STRB     R0,[R10, #+12]
    731                return USBH_FAIL;
   \   0000009E   0x2002             MOVS     R0,#+2
   \   000000A0   0xE003             B.N      ??USBH_MSC_Read_2
    732              }
    733            }
    734            MSC_Handle->state = MSC_IDLE;
   \                     ??USBH_MSC_Read_4: (+1)
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0xF88A 0x000C      STRB     R0,[R10, #+12]
    735            return USBH_OK;
   \   000000A8   0x2000             MOVS     R0,#+0
   \                     ??USBH_MSC_Read_2: (+1)
   \   000000AA   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
    736          }
    737          
    738          /**
    739            * @brief  USBH_MSC_Write 
    740            *         The function performs a Write operation 
    741            * @param  phost: Host handle
    742            * @param  lun: logical Unit Number
    743            * @param  address: sector address
    744            * @param  pbuf: pointer to data
    745            * @param  length: number of sector to write
    746            * @retval USBH Status
    747            */

   \                                 In section .text, align 2, keep-with-next
    748          USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
    749                                               uint8_t lun,
    750                                               uint32_t address,
    751                                               uint8_t *pbuf,
    752                                               uint32_t length)
    753          {
   \                     USBH_MSC_Write: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8028      LDR      R8,[SP, #+40]
    754            uint32_t timeout;
    755            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
   \   00000012   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   00000016   0xF8D0 0xA01C      LDR      R10,[R0, #+28]
    756            
    757            if ((phost->device.is_connected == 0) || 
    758                (phost->gState != HOST_CLASS) || 
    759                (MSC_Handle->unit[lun].state != MSC_IDLE))
   \   0000001A   0xF894 0x021E      LDRB     R0,[R4, #+542]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD00A             BEQ.N    ??USBH_MSC_Write_0
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x280A             CMP      R0,#+10
   \   00000026   0xD107             BNE.N    ??USBH_MSC_Write_0
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2034             MOVS     R0,#+52
   \   0000002C   0xFB00 0xA005      MLA      R0,R0,R5,R10
   \   00000030   0xF890 0x0090      LDRB     R0,[R0, #+144]
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD001             BEQ.N    ??USBH_MSC_Write_1
    760            {
    761              return  USBH_FAIL;
   \                     ??USBH_MSC_Write_0: (+1)
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0xE036             B.N      ??USBH_MSC_Write_2
    762            }
    763            MSC_Handle->state = MSC_WRITE;
   \                     ??USBH_MSC_Write_1: (+1)
   \   0000003C   0x2007             MOVS     R0,#+7
   \   0000003E   0xF88A 0x000C      STRB     R0,[R10, #+12]
    764            MSC_Handle->unit[lun].state = MSC_WRITE;
   \   00000042   0x2007             MOVS     R0,#+7
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2134             MOVS     R1,#+52
   \   00000048   0xFB01 0xA105      MLA      R1,R1,R5,R10
   \   0000004C   0xF881 0x0090      STRB     R0,[R1, #+144]
    765            MSC_Handle->rw_lun = lun;
   \   00000050   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000052   0xF8AA 0x50FA      STRH     R5,[R10, #+250]
    766            USBH_MSC_SCSI_Write(phost,
    767                               lun,
    768                               address,
    769                               pbuf,
    770                               length);
   \   00000056   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   0000005A   0x003B             MOVS     R3,R7
   \   0000005C   0x0032             MOVS     R2,R6
   \   0000005E   0x0029             MOVS     R1,R5
   \   00000060   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0x.... 0x....      BL       USBH_MSC_SCSI_Write
    771            
    772            timeout = phost->Timer;
   \   00000068   0xF8D4 0x02A8      LDR      R0,[R4, #+680]
   \   0000006C   0x4681             MOV      R9,R0
    773            while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
   \                     ??USBH_MSC_Write_3: (+1)
   \   0000006E   0x0029             MOVS     R1,R5
   \   00000070   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x.... 0x....      BL       USBH_MSC_RdWrProcess
   \   00000078   0x2801             CMP      R0,#+1
   \   0000007A   0xD112             BNE.N    ??USBH_MSC_Write_4
    774            {
    775              if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
   \   0000007C   0xF242 0x7010      MOVW     R0,#+10000
   \   00000080   0xFB00 0xF008      MUL      R0,R0,R8
   \   00000084   0xF8D4 0x12A8      LDR      R1,[R4, #+680]
   \   00000088   0xEBB1 0x0109      SUBS     R1,R1,R9
   \   0000008C   0x4288             CMP      R0,R1
   \   0000008E   0xD303             BCC.N    ??USBH_MSC_Write_5
   \   00000090   0xF894 0x021E      LDRB     R0,[R4, #+542]
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD1EA             BNE.N    ??USBH_MSC_Write_3
    776              {
    777                MSC_Handle->state = MSC_IDLE;
   \                     ??USBH_MSC_Write_5: (+1)
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0xF88A 0x000C      STRB     R0,[R10, #+12]
    778                return USBH_FAIL;
   \   0000009E   0x2002             MOVS     R0,#+2
   \   000000A0   0xE003             B.N      ??USBH_MSC_Write_2
    779              }
    780            }
    781            MSC_Handle->state = MSC_IDLE;
   \                     ??USBH_MSC_Write_4: (+1)
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0xF88A 0x000C      STRB     R0,[R10, #+12]
    782            return USBH_OK;
   \   000000A8   0x2000             MOVS     R0,#+0
   \                     ??USBH_MSC_Write_2: (+1)
   \   000000AA   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
    783          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x4D 0x53          DC8 "MSC"
   \              0x43 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x4E 0x75          DC8 "Number of supported LUN: %lu"
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x4C 0x55    
   \              0x4E 0x3A    
   \              0x20 0x25    
   \              0x6C 0x75    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 2
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x4C 0x55          DC8 "LUN #%d: "
   \              0x4E 0x20    
   \              0x23 0x25    
   \              0x64 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x49 0x6E          DC8 "Inquiry Vendor  : %s"
   \              0x71 0x75    
   \              0x69 0x72    
   \              0x79 0x20    
   \              0x56 0x65    
   \              0x6E 0x64    
   \              0x6F 0x72    
   \              0x20 0x20    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x49 0x6E          DC8 "Inquiry Product : %s"
   \              0x71 0x75    
   \              0x69 0x72    
   \              0x79 0x20    
   \              0x50 0x72    
   \              0x6F 0x64    
   \              0x75 0x63    
   \              0x74 0x20    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x49 0x6E          DC8 "Inquiry Version : %s"
   \              0x71 0x75    
   \              0x69 0x72    
   \              0x79 0x20    
   \              0x56 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x4D 0x53          DC8 "MSC Device ready"
   \              0x43 0x20    
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x4D 0x53          DC8 "MSC Device NOT ready"
   \              0x43 0x20    
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x4E    
   \              0x4F 0x54    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x4D 0x53          DC8 "MSC Device capacity : %lu Bytes"
   \              0x43 0x20    
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x63    
   \              0x61 0x70    
   \              0x61 0x63    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x3A 0x20    
   \              0x25 0x6C    
   \              0x75 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x42 0x6C          DC8 "Block number : %lu"
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x6E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x6C 0x75    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x42 0x6C          DC8 "Block Size   : %lu"
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x53 0x69    
   \              0x7A 0x65    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x6C 0x75    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x53 0x65          DC8 "Sense Key  : %x"
   \              0x6E 0x73    
   \              0x65 0x20    
   \              0x4B 0x65    
   \              0x79 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x78 0x00    

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x41 0x64          DC8 "Additional Sense Code : %x"
   \              0x64 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x61 0x6C    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x65    
   \              0x20 0x43    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x3A 0x20    
   \              0x25 0x78    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x41 0x64          DC8 "Additional Sense Code Qualifier: %x"
   \              0x64 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x61 0x6C    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x65    
   \              0x20 0x43    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x51 0x75    
   \              0x61 0x6C    
   \              0x69 0x66    
   \              0x69 0x65    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x78 0x00    
    784          
    785          /**
    786            * @}
    787            */ 
    788          
    789          /**
    790            * @}
    791            */ 
    792          
    793          /**
    794            * @}
    795            */
    796          
    797          /**
    798            * @}
    799            */ 
    800          
    801          /**
    802            * @}
    803            */
    804          
    805          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   USBH_MSC_ClassRequest
        24   -> USBH_ClrFeature
        24   -> USBH_MSC_BOT_REQ_GetMaxLUN
        24   -> printf
      32   USBH_MSC_GetLUNInfo
        32   -> __aeabi_memcpy
       0   USBH_MSC_GetMaxLUN
      16   USBH_MSC_InterfaceDeInit
        16   -> USBH_ClosePipe
        16   -> USBH_FreePipe
        16   -> free
      48   USBH_MSC_InterfaceInit
        48   -> USBH_AllocPipe
        48   -> USBH_FindInterface
        48   -> USBH_LL_SetToggle
        48   -> USBH_MSC_BOT_Init
        48   -> USBH_OpenPipe
        48   -> USBH_SelectInterface
        48   -> __aeabi_memset
        48   -> malloc
       0   USBH_MSC_IsReady
      24   USBH_MSC_Process
        24   -- Indirect call
        24   -> USBH_MSC_SCSI_Inquiry
        24   -> USBH_MSC_SCSI_ReadCapacity
        24   -> USBH_MSC_SCSI_RequestSense
        24   -> USBH_MSC_SCSI_TestUnitReady
        24   -> printf
      32   USBH_MSC_RdWrProcess
        32   -> USBH_MSC_SCSI_Read
        32   -> USBH_MSC_SCSI_RequestSense
        32   -> USBH_MSC_SCSI_Write
        32   -> printf
      40   USBH_MSC_Read
        40   -> USBH_MSC_RdWrProcess
        40   -> USBH_MSC_SCSI_Read
       0   USBH_MSC_SOFProcess
       0   USBH_MSC_UnitIsReady
      40   USBH_MSC_Write
        40   -> USBH_MSC_RdWrProcess
        40   -> USBH_MSC_SCSI_Write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       4  ?_0
      32  ?_1
      20  ?_10
      20  ?_11
      16  ?_12
      28  ?_13
      36  ?_14
       2  ?_2
      12  ?_3
      24  ?_4
      24  ?_5
      24  ?_6
      20  ?_7
      24  ?_8
      32  ?_9
     150  USBH_MSC_ClassRequest
      58  USBH_MSC_GetLUNInfo
      32  USBH_MSC_GetMaxLUN
      94  USBH_MSC_InterfaceDeInit
     404  USBH_MSC_InterfaceInit
      34  USBH_MSC_IsReady
    1260  USBH_MSC_Process
     462  USBH_MSC_RdWrProcess
     174  USBH_MSC_Read
       6  USBH_MSC_SOFProcess
      44  USBH_MSC_UnitIsReady
     174  USBH_MSC_Write
      32  USBH_msc

 
    32 bytes in section .data
   318 bytes in section .rodata
 2 952 bytes in section .text
 
 2 952 bytes of CODE  memory
   318 bytes of CONST memory
    32 bytes of DATA  memory

Errors: none
Warnings: none
