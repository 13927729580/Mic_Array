###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       16/Mar/2016  13:41:23
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Middlewares\ST\STM32_USB_Host_Library\Class\MSC\Src\usbh_msc.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Middlewares\ST\STM32_USB_Host_Library\Class\MSC\Src\usbh_msc.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\usbh_msc.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\usbh_msc.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Middlewares\ST\STM32_USB_Host_Library\Class\MSC\Src\usbh_msc.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbh_msc.c
      4            * @author  MCD Application Team
      5            * @version V3.2.1
      6            * @date    26-June-2015
      7            * @brief   This file implements the MSC class driver functions
      8            *          ===================================================================      
      9            *                                MSC Class  Description
     10            *          =================================================================== 
     11            *           This module manages the MSC class V1.0 following the "Universal 
     12            *           Serial Bus Mass Storage Class (MSC) Bulk-Only Transport (BOT) Version 1.0
     13            *           Sep. 31, 1999".
     14            *           This driver implements the following aspects of the specification:
     15            *             - Bulk-Only Transport protocol
     16            *             - Subclass : SCSI transparent command set (ref. SCSI Primary Commands - 3 (SPC-3))
     17            *      
     18            *  @endverbatim
     19            *
     20            ******************************************************************************
     21            * @attention
     22            *
     23            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     24            *
     25            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     26            * You may not use this file except in compliance with the License.
     27            * You may obtain a copy of the License at:
     28            *
     29            *        http://www.st.com/software_license_agreement_liberty_v2
     30            *
     31            * Unless required by applicable law or agreed to in writing, software 
     32            * distributed under the License is distributed on an "AS IS" BASIS, 
     33            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     34            * See the License for the specific language governing permissions and
     35            * limitations under the License.
     36            *
     37            ******************************************************************************
     38            */
     39          
     40          /* Includes ------------------------------------------------------------------*/
     41          
     42          #include "usbh_msc.h"
     43          #include "usbh_msc_bot.h"    
     44          #include "usbh_msc_scsi.h"
     45          
     46          
     47          /** @addtogroup USBH_LIB
     48            * @{
     49            */
     50          
     51          /** @addtogroup USBH_CLASS
     52            * @{
     53            */
     54          
     55          /** @addtogroup USBH_MSC_CLASS
     56            * @{
     57            */
     58            
     59          /** @defgroup USBH_MSC_CORE 
     60            * @brief    This file includes the mass storage related functions
     61            * @{
     62            */ 
     63          
     64          
     65          /** @defgroup USBH_MSC_CORE_Private_TypesDefinitions
     66            * @{
     67            */ 
     68          /**
     69            * @}
     70            */ 
     71          
     72          /** @defgroup USBH_MSC_CORE_Private_Defines
     73            * @{
     74            */ 
     75          /**
     76            * @}
     77            */ 
     78          
     79          /** @defgroup USBH_MSC_CORE_Private_Macros
     80            * @{
     81            */ 
     82          /**
     83            * @}
     84            */ 
     85          
     86          
     87          /** @defgroup USBH_MSC_CORE_Private_Variables
     88            * @{
     89            */ 
     90          /**
     91            * @}
     92            */ 
     93          
     94          
     95          /** @defgroup USBH_MSC_CORE_Private_FunctionPrototypes
     96            * @{
     97            */ 
     98          
     99          static USBH_StatusTypeDef USBH_MSC_InterfaceInit  (USBH_HandleTypeDef *phost);
    100          
    101          static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit  (USBH_HandleTypeDef *phost);
    102          
    103          static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost);
    104          
    105          static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost);
    106          
    107          static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost);
    108          
    109          static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun);
    110          

   \                                 In section .data, align 4
    111          USBH_ClassTypeDef  USBH_msc = 
   \                     USBH_msc:
   \   00000000   0x........         DC32 ?_0
   \   00000004   0x08 0x00          DC8 8, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0x........         DC32 USBH_MSC_InterfaceInit, USBH_MSC_InterfaceDeInit
   \              0x........   
   \   00000010   0x........         DC32 USBH_MSC_ClassRequest, USBH_MSC_Process, USBH_MSC_SOFProcess, 0H
   \              0x........   
   \              0x........   
   \              0x00000000   
    112          {
    113            "MSC",
    114            USB_MSC_CLASS,
    115            USBH_MSC_InterfaceInit,
    116            USBH_MSC_InterfaceDeInit,
    117            USBH_MSC_ClassRequest,
    118            USBH_MSC_Process,
    119            USBH_MSC_SOFProcess,
    120            NULL,
    121          };
    122          
    123          
    124          /**
    125            * @}
    126            */ 
    127          
    128          
    129          /** @defgroup USBH_MSC_CORE_Exported_Variables
    130            * @{
    131            */ 
    132          
    133          /**
    134            * @}
    135            */ 
    136          
    137          
    138          /** @defgroup USBH_MSC_CORE_Private_Functions
    139            * @{
    140            */ 
    141          
    142          
    143          /**
    144            * @brief  USBH_MSC_InterfaceInit 
    145            *         The function init the MSC class.
    146            * @param  phost: Host handle
    147            * @retval USBH Status
    148            */

   \                                 In section .text, align 2, keep-with-next
    149          static USBH_StatusTypeDef USBH_MSC_InterfaceInit (USBH_HandleTypeDef *phost)
    150          {	 
   \                     USBH_MSC_InterfaceInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB083             SUB      SP,SP,#+12
    151            uint8_t interface = 0; 
    152            USBH_StatusTypeDef status = USBH_FAIL ;
    153            MSC_HandleTypeDef *MSC_Handle;
    154            
    155            interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
   \   00000006   0x2350             MOVS     R3,#+80
   \   00000008   0x2206             MOVS     R2,#+6
   \   0000000A   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   0000000E   0x2502             MOVS     R5,#+2
   \   00000010   0x7901             LDRB     R1,[R0, #+4]
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       USBH_FindInterface
    156            
    157            if(interface == 0xFF) /* Not Valid Interface */
   \   00000018   0x28FF             CMP      R0,#+255
   \   0000001A   0xF000 0x808D      BEQ.W    ??USBH_MSC_InterfaceInit_0
    158            {
    159              USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    160              status = USBH_FAIL;      
    161            }
    162            else
    163            {
    164              USBH_SelectInterface (phost, interface);
   \   0000001E   0x4601             MOV      R1,R0
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       USBH_SelectInterface
    165              
    166              phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
   \   00000026   0xF44F 0x7080      MOV      R0,#+256
   \   0000002A   0x.... 0x....      BL       malloc
   \   0000002E   0xF8D4 0x1264      LDR      R1,[R4, #+612]
   \   00000032   0x61C8             STR      R0,[R1, #+28]
    167              MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
   \   00000034   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   00000038   0x69C5             LDR      R5,[R0, #+28]
   \   0000003A   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   0000003E   0xEB00 0x1100      ADD      R1,R0,R0, LSL #+4
   \   00000042   0xEB04 0x0041      ADD      R0,R4,R1, LSL #+1
   \   00000046   0xF890 0x0248      LDRB     R0,[R0, #+584]
   \   0000004A   0x0601             LSLS     R1,R0,#+24
   \   0000004C   0xD50A             BPL.N    ??USBH_MSC_InterfaceInit_1
    168              
    169              if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
    170              {
    171                MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
   \   0000004E   0x71E8             STRB     R0,[R5, #+7]
    172                MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
   \   00000050   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   00000054   0xEB00 0x1100      ADD      R1,R0,R0, LSL #+4
   \   00000058   0xEB04 0x0041      ADD      R0,R4,R1, LSL #+1
   \   0000005C   0xF8B0 0x024A      LDRH     R0,[R0, #+586]
   \   00000060   0x8168             STRH     R0,[R5, #+10]
   \   00000062   0xE009             B.N      ??USBH_MSC_InterfaceInit_2
    173              }
    174              else
    175              {
    176                MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
   \                     ??USBH_MSC_InterfaceInit_1: (+1)
   \   00000064   0x71A8             STRB     R0,[R5, #+6]
    177                MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
   \   00000066   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   0000006A   0xEB00 0x1100      ADD      R1,R0,R0, LSL #+4
   \   0000006E   0xEB04 0x0041      ADD      R0,R4,R1, LSL #+1
   \   00000072   0xF8B0 0x024A      LDRH     R0,[R0, #+586]
   \   00000076   0x8128             STRH     R0,[R5, #+8]
   \                     ??USBH_MSC_InterfaceInit_2: (+1)
   \   00000078   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   0000007C   0xEB00 0x1100      ADD      R1,R0,R0, LSL #+4
   \   00000080   0xEB04 0x0041      ADD      R0,R4,R1, LSL #+1
   \   00000084   0xF890 0x0250      LDRB     R0,[R0, #+592]
   \   00000088   0x0601             LSLS     R1,R0,#+24
   \   0000008A   0xD50A             BPL.N    ??USBH_MSC_InterfaceInit_3
    178              }
    179              
    180              if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
    181              {
    182                MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
   \   0000008C   0x71E8             STRB     R0,[R5, #+7]
    183                MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
   \   0000008E   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   00000092   0xEB00 0x1100      ADD      R1,R0,R0, LSL #+4
   \   00000096   0xEB04 0x0041      ADD      R0,R4,R1, LSL #+1
   \   0000009A   0xF8B0 0x0252      LDRH     R0,[R0, #+594]
   \   0000009E   0x8168             STRH     R0,[R5, #+10]
   \   000000A0   0xE009             B.N      ??USBH_MSC_InterfaceInit_4
    184              }
    185              else
    186              {
    187                MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
   \                     ??USBH_MSC_InterfaceInit_3: (+1)
   \   000000A2   0x71A8             STRB     R0,[R5, #+6]
    188                MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
   \   000000A4   0xF894 0x021F      LDRB     R0,[R4, #+543]
   \   000000A8   0xEB00 0x1100      ADD      R1,R0,R0, LSL #+4
   \   000000AC   0xEB04 0x0041      ADD      R0,R4,R1, LSL #+1
   \   000000B0   0xF8B0 0x0252      LDRH     R0,[R0, #+594]
   \   000000B4   0x8128             STRH     R0,[R5, #+8]
    189              }
    190              
    191              MSC_Handle->current_lun = 0;
   \                     ??USBH_MSC_InterfaceInit_4: (+1)
   \   000000B6   0x2000             MOVS     R0,#+0
    192              MSC_Handle->rw_lun = 0;
    193              MSC_Handle->state = MSC_INIT;
    194              MSC_Handle->error = MSC_OK;
    195              MSC_Handle->req_state = MSC_REQ_IDLE;
    196              MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
   \   000000B8   0x79A9             LDRB     R1,[R5, #+6]
   \   000000BA   0xF8A5 0x00F8      STRH     R0,[R5, #+248]
   \   000000BE   0xF8A5 0x00FA      STRH     R0,[R5, #+250]
   \   000000C2   0x7328             STRB     R0,[R5, #+12]
   \   000000C4   0x7368             STRB     R0,[R5, #+13]
   \   000000C6   0x73A8             STRB     R0,[R5, #+14]
   \   000000C8   0x4620             MOV      R0,R4
   \   000000CA   0x.... 0x....      BL       USBH_AllocPipe
    197              MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
   \   000000CE   0x79E9             LDRB     R1,[R5, #+7]
   \   000000D0   0x7168             STRB     R0,[R5, #+5]
   \   000000D2   0x4620             MOV      R0,R4
   \   000000D4   0x.... 0x....      BL       USBH_AllocPipe
   \   000000D8   0x7128             STRB     R0,[R5, #+4]
    198          
    199              USBH_MSC_BOT_Init(phost);
   \   000000DA   0x4620             MOV      R0,R4
   \   000000DC   0x.... 0x....      BL       USBH_MSC_BOT_Init
    200              
    201              /* De-Initialize LUNs information */
    202              USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
   \   000000E0   0x2168             MOVS     R1,#+104
   \   000000E2   0xF105 0x0090      ADD      R0,R5,#+144
   \   000000E6   0x.... 0x....      BL       __aeabi_memclr4
    203              
    204              /* Open the new channels */
    205              USBH_OpenPipe  (phost,
    206                              MSC_Handle->OutPipe,
    207                              MSC_Handle->OutEp,
    208                              phost->device.address,
    209                              phost->device.speed,
    210                              USB_EP_TYPE_BULK,
    211                              MSC_Handle->OutEpSize);  
   \   000000EA   0x8928             LDRH     R0,[R5, #+8]
   \   000000EC   0x9002             STR      R0,[SP, #+8]
   \   000000EE   0x2002             MOVS     R0,#+2
   \   000000F0   0x9001             STR      R0,[SP, #+4]
   \   000000F2   0xF894 0x021D      LDRB     R0,[R4, #+541]
   \   000000F6   0x9000             STR      R0,[SP, #+0]
   \   000000F8   0xF894 0x321C      LDRB     R3,[R4, #+540]
   \   000000FC   0x79AA             LDRB     R2,[R5, #+6]
   \   000000FE   0x7969             LDRB     R1,[R5, #+5]
   \   00000100   0x4620             MOV      R0,R4
   \   00000102   0x.... 0x....      BL       USBH_OpenPipe
    212              
    213              USBH_OpenPipe  (phost,
    214                              MSC_Handle->InPipe,
    215                              MSC_Handle->InEp,
    216                              phost->device.address,
    217                              phost->device.speed,
    218                              USB_EP_TYPE_BULK,
    219                              MSC_Handle->InEpSize);     
   \   00000106   0x8968             LDRH     R0,[R5, #+10]
   \   00000108   0x9002             STR      R0,[SP, #+8]
   \   0000010A   0x2002             MOVS     R0,#+2
   \   0000010C   0x9001             STR      R0,[SP, #+4]
   \   0000010E   0xF894 0x021D      LDRB     R0,[R4, #+541]
   \   00000112   0x9000             STR      R0,[SP, #+0]
   \   00000114   0xF894 0x321C      LDRB     R3,[R4, #+540]
   \   00000118   0x79EA             LDRB     R2,[R5, #+7]
   \   0000011A   0x7929             LDRB     R1,[R5, #+4]
   \   0000011C   0x4620             MOV      R0,R4
   \   0000011E   0x.... 0x....      BL       USBH_OpenPipe
    220              
    221              
    222              USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
   \   00000122   0x7929             LDRB     R1,[R5, #+4]
   \   00000124   0x2200             MOVS     R2,#+0
   \   00000126   0x4620             MOV      R0,R4
   \   00000128   0x.... 0x....      BL       USBH_LL_SetToggle
    223              USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
   \   0000012C   0x7969             LDRB     R1,[R5, #+5]
   \   0000012E   0x2200             MOVS     R2,#+0
   \   00000130   0x4620             MOV      R0,R4
   \   00000132   0x2500             MOVS     R5,#+0
   \   00000134   0x.... 0x....      BL       USBH_LL_SetToggle
    224              status = USBH_OK; 
    225            }
    226            return status;
   \                     ??USBH_MSC_InterfaceInit_0: (+1)
   \   00000138   0x4628             MOV      R0,R5
   \   0000013A   0xB003             ADD      SP,SP,#+12
   \   0000013C   0xBD30             POP      {R4,R5,PC}       ;; return
    227          }
    228          
    229          /**
    230            * @brief  USBH_MSC_InterfaceDeInit 
    231            *         The function DeInit the Pipes used for the MSC class.
    232            * @param  phost: Host handle
    233            * @retval USBH Status
    234            */

   \                                 In section .text, align 2, keep-with-next
    235          USBH_StatusTypeDef USBH_MSC_InterfaceDeInit (USBH_HandleTypeDef *phost)
    236          {
   \                     USBH_MSC_InterfaceDeInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB081             SUB      SP,SP,#+4
    237            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
   \   00000006   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   0000000A   0x69C5             LDR      R5,[R0, #+28]
    238          
    239            if ( MSC_Handle->OutPipe)
   \   0000000C   0x7969             LDRB     R1,[R5, #+5]
   \   0000000E   0xB141             CBZ.N    R1,??USBH_MSC_InterfaceDeInit_0
    240            {
    241              USBH_ClosePipe(phost, MSC_Handle->OutPipe);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       USBH_ClosePipe
    242              USBH_FreePipe  (phost, MSC_Handle->OutPipe);
   \   00000016   0x7969             LDRB     R1,[R5, #+5]
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       USBH_FreePipe
    243              MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x7168             STRB     R0,[R5, #+5]
    244            }
    245            
    246            if ( MSC_Handle->InPipe)
   \                     ??USBH_MSC_InterfaceDeInit_0: (+1)
   \   00000022   0x7929             LDRB     R1,[R5, #+4]
   \   00000024   0xB141             CBZ.N    R1,??USBH_MSC_InterfaceDeInit_1
    247            {
    248              USBH_ClosePipe(phost, MSC_Handle->InPipe);
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       USBH_ClosePipe
    249              USBH_FreePipe  (phost, MSC_Handle->InPipe);
   \   0000002C   0x7929             LDRB     R1,[R5, #+4]
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       USBH_FreePipe
    250              MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x7128             STRB     R0,[R5, #+4]
   \                     ??USBH_MSC_InterfaceDeInit_1: (+1)
   \   00000038   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   0000003C   0x69C0             LDR      R0,[R0, #+28]
   \   0000003E   0xB128             CBZ.N    R0,??USBH_MSC_InterfaceDeInit_2
    251            } 
    252          
    253            if(phost->pActiveClass->pData)
    254            {
    255              USBH_free (phost->pActiveClass->pData);
   \   00000040   0x.... 0x....      BL       free
    256              phost->pActiveClass->pData = 0;
   \   00000044   0xF8D4 0x1264      LDR      R1,[R4, #+612]
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x61C8             STR      R0,[R1, #+28]
    257            }
    258            
    259            return USBH_OK;
   \                     ??USBH_MSC_InterfaceDeInit_2: (+1)
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xB001             ADD      SP,SP,#+4
   \   00000050   0xBD30             POP      {R4,R5,PC}       ;; return
    260          }
    261          
    262          /**
    263            * @brief  USBH_MSC_ClassRequest 
    264            *         The function is responsible for handling Standard requests
    265            *         for MSC class.
    266            * @param  phost: Host handle
    267            * @retval USBH Status
    268            */

   \                                 In section .text, align 4, keep-with-next
    269          static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
    270          {   
   \                     USBH_MSC_ClassRequest: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    271            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
   \   00000004   0xF8D0 0x1264      LDR      R1,[R0, #+612]
    272            USBH_StatusTypeDef status = USBH_BUSY;
   \   00000008   0x2501             MOVS     R5,#+1
   \   0000000A   0x69CC             LDR      R4,[R1, #+28]
    273            uint8_t i;
    274            
    275            /* Switch MSC REQ state machine */
    276            switch (MSC_Handle->req_state)
   \   0000000C   0x7BA1             LDRB     R1,[R4, #+14]
   \   0000000E   0x2903             CMP      R1,#+3
   \   00000010   0xD833             BHI.N    ??USBH_MSC_ClassRequest_1
   \   00000012   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??USBH_MSC_ClassRequest_0:
   \   00000016   0x02 0x32          DC8      0x2,0x32,0x2,0x2C
   \              0x02 0x2C    
    277            {
    278            case MSC_REQ_IDLE:
    279            case MSC_REQ_GET_MAX_LUN:   
    280              /* Issue GetMaxLUN request */
    281              status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
   \                     ??USBH_MSC_ClassRequest_2: (+1)
   \   0000001A   0x4621             MOV      R1,R4
   \   0000001C   0x.... 0x....      BL       USBH_MSC_BOT_REQ_GetMaxLUN
   \   00000020   0x4605             MOV      R5,R0
    282              
    283              /* When devices do not support the GetMaxLun request, this should
    284                 be considred as only one logical unit is supported */
    285              if(status == USBH_NOT_SUPPORTED)
   \   00000022   0x2D03             CMP      R5,#+3
   \   00000024   0xD103             BNE.N    ??USBH_MSC_ClassRequest_3
    286              {
    287                MSC_Handle->max_lun = 0;
   \   00000026   0x2000             MOVS     R0,#+0
    288                status = USBH_OK;
   \   00000028   0x2500             MOVS     R5,#+0
   \   0000002A   0x6020             STR      R0,[R4, #+0]
   \   0000002C   0xE000             B.N      ??USBH_MSC_ClassRequest_4
    289              }
    290              
    291              if(status == USBH_OK)
   \                     ??USBH_MSC_ClassRequest_3: (+1)
   \   0000002E   0xBB25             CBNZ.N   R5,??USBH_MSC_ClassRequest_1
    292              {
    293                MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
   \                     ??USBH_MSC_ClassRequest_4: (+1)
   \   00000030   0x7820             LDRB     R0,[R4, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
    294                USBH_UsrLog ("Number of supported LUN: %lu", (int32_t)(MSC_Handle->max_lun));
   \   00000034   0x4601             MOV      R1,R0
   \   00000036   0x6020             STR      R0,[R4, #+0]
   \   00000038   0x.... 0x....      ADR.W    R0,?_1
   \   0000003C   0x.... 0x....      BL       printf
   \   00000040   0x....             ADR.N    R0,??DataTable15  ;; "\n"
   \   00000042   0x.... 0x....      BL       printf
    295                
    296                for(i = 0; i < MSC_Handle->max_lun; i++)
   \   00000046   0x6821             LDR      R1,[R4, #+0]
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xB1B1             CBZ.N    R1,??USBH_MSC_ClassRequest_1
    297                {
    298                  MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
   \                     ??USBH_MSC_ClassRequest_5: (+1)
   \   0000004C   0x2134             MOVS     R1,#+52
   \   0000004E   0x2202             MOVS     R2,#+2
   \   00000050   0xFB11 0x4100      SMLABB   R1,R1,R0,R4
    299                  MSC_Handle->unit[i].state_changed = 0;
    300                }
   \   00000054   0x1C40             ADDS     R0,R0,#+1
   \   00000056   0xB2C0             UXTB     R0,R0
   \   00000058   0xF881 0x2092      STRB     R2,[R1, #+146]
   \   0000005C   0x2200             MOVS     R2,#+0
   \   0000005E   0xF881 0x20C1      STRB     R2,[R1, #+193]
   \   00000062   0x6821             LDR      R1,[R4, #+0]
   \   00000064   0x4288             CMP      R0,R1
   \   00000066   0xD3F1             BCC.N    ??USBH_MSC_ClassRequest_5
    301              }
    302              break;
    303              
    304            case MSC_REQ_ERROR :
    305              /* a Clear Feature should be issued here */
    306              if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
    307              {
    308                MSC_Handle->req_state = MSC_Handle->prev_req_state; 
    309              }    
    310              break;
    311              
    312            default:
    313              break;
    314            }
    315            
    316            return status; 
   \   00000068   0x4628             MOV      R0,R5
   \   0000006A   0xB001             ADD      SP,SP,#+4
   \   0000006C   0xBD30             POP      {R4,R5,PC}
   \                     ??USBH_MSC_ClassRequest_6: (+1)
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x.... 0x....      BL       USBH_ClrFeature
   \   00000074   0xB908             CBNZ.N   R0,??USBH_MSC_ClassRequest_1
   \   00000076   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000078   0x73A0             STRB     R0,[R4, #+14]
   \                     ??USBH_MSC_ClassRequest_1: (+1)
   \   0000007A   0x4628             MOV      R0,R5
   \   0000007C   0xB001             ADD      SP,SP,#+4
   \   0000007E   0xBD30             POP      {R4,R5,PC}       ;; return
    317          }
    318          
    319          /**
    320            * @brief  USBH_MSC_Process 
    321            *         The function is for managing state machine for MSC data transfers 
    322            * @param  phost: Host handle
    323            * @retval USBH Status
    324            */

   \                                 In section .text, align 4, keep-with-next
    325          static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
    326          {
   \                     USBH_MSC_Process: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4607             MOV      R7,R0
    327            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
    328            USBH_StatusTypeDef error = USBH_BUSY ;
   \   00000006   0x2401             MOVS     R4,#+1
   \   00000008   0xF8D7 0x0264      LDR      R0,[R7, #+612]
   \   0000000C   0x69C5             LDR      R5,[R0, #+28]
    329            USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
    330            USBH_StatusTypeDef ready_status = USBH_BUSY ;
    331            
    332            switch (MSC_Handle->state)
   \   0000000E   0x7B28             LDRB     R0,[R5, #+12]
   \   00000010   0xB128             CBZ.N    R0,??USBH_MSC_Process_1
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xBF08             IT       EQ 
   \   00000016   0x2400             MOVEQ    R4,#+0
    333            {
    334            case MSC_INIT:
    335              
    336              if(MSC_Handle->current_lun < MSC_Handle->max_lun)
    337              {
    338          
    339                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
    340                /* Switch MSC REQ state machine */
    341                switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
    342                {
    343                case MSC_INIT:
    344                  USBH_UsrLog ("LUN #%d: ", MSC_Handle->current_lun);
    345                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
    346                  MSC_Handle->timer = phost->Timer;
    347                  
    348                case MSC_READ_INQUIRY:
    349                  scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
    350                  
    351                  if( scsi_status == USBH_OK)
    352                  {
    353                    USBH_UsrLog ("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
    354                    USBH_UsrLog ("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
    355                    USBH_UsrLog ("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
    356                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
    357                  }
    358                  if( scsi_status == USBH_FAIL)
    359                  {
    360                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;         
    361                  }
    362                  else if(scsi_status == USBH_UNRECOVERED_ERROR)
    363                  {
    364                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
    365                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
    366                  }
    367                  break;    
    368                  
    369                case MSC_TEST_UNIT_READY:
    370                  ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
    371                  
    372                  if( ready_status == USBH_OK)
    373                  {
    374                    if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
    375                    {
    376                      MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
    377                      USBH_UsrLog ("MSC Device ready");
    378                    }
    379                    else
    380                    {
    381                      MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
    382                    }
    383                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
    384                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
    385                    MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
    386                  }
    387                  if( ready_status == USBH_FAIL)
    388                  {
    389                    /* Media not ready, so try to check again during 10s */
    390                    if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
    391                    {
    392                      MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
    393                      USBH_UsrLog ("MSC Device NOT ready");
    394                    }
    395                    else
    396                    {
    397                      MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
    398                    }         
    399                      MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
    400                      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
    401                      MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
    402                  }
    403                  else if(ready_status == USBH_UNRECOVERED_ERROR)
    404                  {
    405                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
    406                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
    407                  }
    408                  break;
    409                  
    410                case MSC_READ_CAPACITY10:   
    411                  scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
    412                  
    413                  if(scsi_status == USBH_OK)
    414                  {
    415                    if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1)
    416                    {
    417                      USBH_UsrLog ("MSC Device capacity : %lu Bytes", \
    418                        (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr * MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
    419                      USBH_UsrLog ("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
    420                      USBH_UsrLog ("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
    421                    }
    422                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
    423                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
    424                    MSC_Handle->current_lun++;
    425                  }
    426                  else if( scsi_status == USBH_FAIL)
    427                  {
    428                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
    429                  }
    430                  else if(scsi_status == USBH_UNRECOVERED_ERROR)
    431                  {
    432                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
    433                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
    434                  }
    435                  break;
    436                  
    437                case MSC_REQUEST_SENSE:
    438                  scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
    439                  
    440                  if( scsi_status == USBH_OK)
    441                  {
    442                    if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
    443                       (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY) )   
    444                    {
    445                      
    446                      if((phost->Timer - MSC_Handle->timer) > 10000)
    447                      {
    448                        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
    449                        break;
    450                      }        
    451                    }
    452                    
    453                    USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
    454                    USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
    455                    USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
    456                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
    457                    MSC_Handle->current_lun++;
    458                  }
    459                  if( scsi_status == USBH_FAIL)
    460                  {
    461                    USBH_UsrLog ("MSC Device NOT ready");
    462                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
    463                  }
    464                  else if(scsi_status == USBH_UNRECOVERED_ERROR)
    465                  {
    466                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
    467                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;   
    468                  }
    469                  break;  
    470              
    471                case MSC_UNRECOVERED_ERROR: 
    472                  MSC_Handle->current_lun++;
    473                  break;  
    474                  
    475                default:
    476                  break;
    477                }
    478                
    479          #if (USBH_USE_OS == 1)
    480              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    481          #endif       
    482              }
    483              else
    484              {
    485                MSC_Handle->current_lun = 0;
    486              MSC_Handle->state = MSC_IDLE;
    487          #if (USBH_USE_OS == 1)
    488              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    489          #endif 
    490              phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
    491              }
    492              break;
    493          
    494            case MSC_IDLE:
    495              error = USBH_OK;  
    496              break;
    497              
    498            default:
    499              break; 
    500            }
    501            return error;
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??USBH_MSC_Process_1: (+1)
   \   0000001E   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000022   0x6829             LDR      R1,[R5, #+0]
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xF080 0x8197      BCS.W    ??USBH_MSC_Process_2
   \   0000002A   0xF04F 0x0834      MOV      R8,#+52
   \   0000002E   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000032   0xF880 0x4091      STRB     R4,[R0, #+145]
   \   00000036   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   0000003A   0xFB08 0x5001      MLA      R0,R8,R1,R5
   \   0000003E   0xF890 0x2090      LDRB     R2,[R0, #+144]
   \   00000042   0x2A08             CMP      R2,#+8
   \   00000044   0xF200 0x8191      BHI.W    ??USBH_MSC_Process_3
   \   00000048   0xE8DF 0xF012      TBH      [PC, R2, LSL #+1]
   \                     ??USBH_MSC_Process_0:
   \   0000004C   0x0009 0x018F      DC16     0x9,0x18F,0x5A,0xB9
   \              0x005A 0x00B9
   \   00000054   0x001B 0x0111      DC16     0x1B,0x111,0x18F,0x18F
   \              0x018F 0x018F
   \   0000005C   0x0180             DC16     0x180
   \                     ??USBH_MSC_Process_4: (+1)
   \   0000005E   0x.... 0x....      ADR.W    R0,?_3
   \   00000062   0x.... 0x....      BL       printf
   \   00000066   0x....             ADR.N    R0,??DataTable16  ;; "\n"
   \   00000068   0x.... 0x....      BL       printf
   \   0000006C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000070   0x2104             MOVS     R1,#+4
   \   00000072   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000076   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   0000007A   0xF8D7 0x02A8      LDR      R0,[R7, #+680]
   \   0000007E   0xF8C5 0x00FC      STR      R0,[R5, #+252]
   \                     ??USBH_MSC_Process_5: (+1)
   \   00000082   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   00000086   0xFB08 0x5001      MLA      R0,R8,R1,R5
   \   0000008A   0xB2C9             UXTB     R1,R1
   \   0000008C   0xF100 0x029F      ADD      R2,R0,#+159
   \   00000090   0x4638             MOV      R0,R7
   \   00000092   0x.... 0x....      BL       USBH_MSC_SCSI_Inquiry
   \   00000096   0x0006             MOVS     R6,R0
   \   00000098   0xF040 0x80DD      BNE.W    ??USBH_MSC_Process_6
   \   0000009C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000000A0   0x....             ADR.N    R7,??DataTable16  ;; "\n"
   \   000000A2   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   000000A6   0xF100 0x01A2      ADD      R1,R0,#+162
   \   000000AA   0x.... 0x....      ADR.W    R0,?_4
   \   000000AE   0x.... 0x....      BL       printf
   \   000000B2   0x4638             MOV      R0,R7
   \   000000B4   0x.... 0x....      BL       printf
   \   000000B8   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000000BC   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   000000C0   0xF100 0x01AB      ADD      R1,R0,#+171
   \   000000C4   0x.... 0x....      ADR.W    R0,?_5
   \   000000C8   0x.... 0x....      BL       printf
   \   000000CC   0x4638             MOV      R0,R7
   \   000000CE   0x.... 0x....      BL       printf
   \   000000D2   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000000D6   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   000000DA   0xF100 0x01BC      ADD      R1,R0,#+188
   \   000000DE   0x.... 0x....      ADR.W    R0,?_6
   \   000000E2   0x.... 0x....      BL       printf
   \   000000E6   0x4638             MOV      R0,R7
   \   000000E8   0x.... 0x....      BL       printf
   \   000000EC   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000000F0   0x2102             MOVS     R1,#+2
   \   000000F2   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   000000F6   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   000000FA   0x4620             MOV      R0,R4
   \   000000FC   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??USBH_MSC_Process_7: (+1)
   \   00000100   0xB2C9             UXTB     R1,R1
   \   00000102   0x4638             MOV      R0,R7
   \   00000104   0x.... 0x....      BL       USBH_MSC_SCSI_TestUnitReady
   \   00000108   0x0007             MOVS     R7,R0
   \   0000010A   0xD126             BNE.N    ??USBH_MSC_Process_8
   \   0000010C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000110   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000114   0xF890 0x1092      LDRB     R1,[R0, #+146]
   \   00000118   0xB149             CBZ.N    R1,??USBH_MSC_Process_9
   \   0000011A   0xF880 0x40C1      STRB     R4,[R0, #+193]
   \   0000011E   0x.... 0x....      ADR.W    R0,?_7
   \   00000122   0x.... 0x....      BL       printf
   \   00000126   0x....             ADR.N    R0,??DataTable16  ;; "\n"
   \   00000128   0x.... 0x....      BL       printf
   \   0000012C   0xE001             B.N      ??USBH_MSC_Process_10
   \                     ??USBH_MSC_Process_9: (+1)
   \   0000012E   0xF880 0x10C1      STRB     R1,[R0, #+193]
   \                     ??USBH_MSC_Process_10: (+1)
   \   00000132   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000136   0x2103             MOVS     R1,#+3
   \   00000138   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   0000013C   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   00000140   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000144   0x2100             MOVS     R1,#+0
   \   00000146   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   0000014A   0xF880 0x1091      STRB     R1,[R0, #+145]
   \   0000014E   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000152   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000156   0xF880 0x1092      STRB     R1,[R0, #+146]
   \                     ??USBH_MSC_Process_8: (+1)
   \   0000015A   0x2F02             CMP      R7,#+2
   \   0000015C   0xD12B             BNE.N    ??USBH_MSC_Process_11
   \   0000015E   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000162   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000166   0xF890 0x1092      LDRB     R1,[R0, #+146]
   \   0000016A   0x2902             CMP      R1,#+2
   \   0000016C   0xD009             BEQ.N    ??USBH_MSC_Process_12
   \   0000016E   0xF880 0x40C1      STRB     R4,[R0, #+193]
   \   00000172   0x.... 0x....      ADR.W    R0,?_8
   \   00000176   0x.... 0x....      BL       printf
   \   0000017A   0x....             ADR.N    R0,??DataTable16  ;; "\n"
   \   0000017C   0x.... 0x....      BL       printf
   \   00000180   0xE002             B.N      ??USBH_MSC_Process_13
   \                     ??USBH_MSC_Process_12: (+1)
   \   00000182   0x2100             MOVS     R1,#+0
   \   00000184   0xF880 0x10C1      STRB     R1,[R0, #+193]
   \                     ??USBH_MSC_Process_13: (+1)
   \   00000188   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000018C   0x2105             MOVS     R1,#+5
   \   0000018E   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000192   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   00000196   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000019A   0x2102             MOVS     R1,#+2
   \   0000019C   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   000001A0   0xF880 0x4091      STRB     R4,[R0, #+145]
   \   000001A4   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000001A8   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   000001AC   0xF880 0x1092      STRB     R1,[R0, #+146]
   \   000001B0   0x4620             MOV      R0,R4
   \   000001B2   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??USBH_MSC_Process_11: (+1)
   \   000001B6   0x2F04             CMP      R7,#+4
   \   000001B8   0xF040 0x80D7      BNE.W    ??USBH_MSC_Process_3
   \   000001BC   0xE0B6             B.N      ??USBH_MSC_Process_14
   \                     ??USBH_MSC_Process_15: (+1)
   \   000001BE   0xF100 0x0294      ADD      R2,R0,#+148
   \   000001C2   0xB2C9             UXTB     R1,R1
   \   000001C4   0x4638             MOV      R0,R7
   \   000001C6   0x.... 0x....      BL       USBH_MSC_SCSI_ReadCapacity
   \   000001CA   0x0006             MOVS     R6,R0
   \   000001CC   0xD143             BNE.N    ??USBH_MSC_Process_6
   \   000001CE   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000001D2   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   000001D6   0xF890 0x10C1      LDRB     R1,[R0, #+193]
   \   000001DA   0x2901             CMP      R1,#+1
   \   000001DC   0xD126             BNE.N    ??USBH_MSC_Process_16
   \   000001DE   0xF8D0 0x1094      LDR      R1,[R0, #+148]
   \   000001E2   0xF8B0 0x0098      LDRH     R0,[R0, #+152]
   \   000001E6   0x....             ADR.N    R7,??DataTable16  ;; "\n"
   \   000001E8   0x4341             MULS     R1,R1,R0
   \   000001EA   0x.... 0x....      ADR.W    R0,?_9
   \   000001EE   0x.... 0x....      BL       printf
   \   000001F2   0x4638             MOV      R0,R7
   \   000001F4   0x.... 0x....      BL       printf
   \   000001F8   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000001FC   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000200   0xF8D0 0x1094      LDR      R1,[R0, #+148]
   \   00000204   0x.... 0x....      ADR.W    R0,?_10
   \   00000208   0x.... 0x....      BL       printf
   \   0000020C   0x4638             MOV      R0,R7
   \   0000020E   0x.... 0x....      BL       printf
   \   00000212   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000216   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   0000021A   0xF8B0 0x1098      LDRH     R1,[R0, #+152]
   \   0000021E   0x.... 0x....      ADR.W    R0,?_11
   \   00000222   0x.... 0x....      BL       printf
   \   00000226   0x4638             MOV      R0,R7
   \   00000228   0x.... 0x....      BL       printf
   \                     ??USBH_MSC_Process_16: (+1)
   \   0000022C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000230   0x2100             MOVS     R1,#+0
   \   00000232   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000236   0xF880 0x4090      STRB     R4,[R0, #+144]
   \   0000023A   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000023E   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000242   0xF880 0x1091      STRB     R1,[R0, #+145]
   \   00000246   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000024A   0x1C40             ADDS     R0,R0,#+1
   \   0000024C   0xF8A5 0x00F8      STRH     R0,[R5, #+248]
   \   00000250   0x4620             MOV      R0,R4
   \   00000252   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??USBH_MSC_Process_6: (+1)
   \   00000256   0x2E02             CMP      R6,#+2
   \   00000258   0xD166             BNE.N    ??USBH_MSC_Process_17
   \   0000025A   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000025E   0x2105             MOVS     R1,#+5
   \   00000260   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000264   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   00000268   0x4620             MOV      R0,R4
   \   0000026A   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??USBH_MSC_Process_18: (+1)
   \   0000026E   0xF100 0x029C      ADD      R2,R0,#+156
   \   00000272   0xB2C9             UXTB     R1,R1
   \   00000274   0x4638             MOV      R0,R7
   \   00000276   0x.... 0x....      BL       USBH_MSC_SCSI_RequestSense
   \   0000027A   0x0006             MOVS     R6,R0
   \   0000027C   0xD141             BNE.N    ??USBH_MSC_Process_19
   \   0000027E   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000282   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000286   0xF890 0x109C      LDRB     R1,[R0, #+156]
   \   0000028A   0x2906             CMP      R1,#+6
   \   0000028C   0xBF18             IT       NE 
   \   0000028E   0x2902             CMPNE    R1,#+2
   \   00000290   0xD10A             BNE.N    ??USBH_MSC_Process_20
   \   00000292   0xF8D7 0x22A8      LDR      R2,[R7, #+680]
   \   00000296   0xF8D5 0x30FC      LDR      R3,[R5, #+252]
   \   0000029A   0x1AD2             SUBS     R2,R2,R3
   \   0000029C   0xF242 0x7311      MOVW     R3,#+10001
   \   000002A0   0x429A             CMP      R2,R3
   \   000002A2   0xBF28             IT       CS 
   \   000002A4   0x2102             MOVCS    R1,#+2
   \   000002A6   0xD23A             BCS.N    ??USBH_MSC_Process_21
   \                     ??USBH_MSC_Process_20: (+1)
   \   000002A8   0x.... 0x....      ADR.W    R0,?_12
   \   000002AC   0x.... 0x....      BL       printf
   \   000002B0   0x....             ADR.N    R7,??DataTable16  ;; "\n"
   \   000002B2   0x4638             MOV      R0,R7
   \   000002B4   0x.... 0x....      BL       printf
   \   000002B8   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000002BC   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   000002C0   0xF890 0x109D      LDRB     R1,[R0, #+157]
   \   000002C4   0x.... 0x....      ADR.W    R0,?_13
   \   000002C8   0x.... 0x....      BL       printf
   \   000002CC   0x4638             MOV      R0,R7
   \   000002CE   0x.... 0x....      BL       printf
   \   000002D2   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000002D6   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   000002DA   0xF890 0x109E      LDRB     R1,[R0, #+158]
   \   000002DE   0x.... 0x....      ADR.W    R0,?_14
   \   000002E2   0x.... 0x....      BL       printf
   \   000002E6   0x4638             MOV      R0,R7
   \   000002E8   0x.... 0x....      BL       printf
   \   000002EC   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000002F0   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   000002F4   0xF880 0x4090      STRB     R4,[R0, #+144]
   \   000002F8   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000002FC   0x1C40             ADDS     R0,R0,#+1
   \   000002FE   0xF8A5 0x00F8      STRH     R0,[R5, #+248]
   \                     ??USBH_MSC_Process_19: (+1)
   \   00000302   0x2E02             CMP      R6,#+2
   \   00000304   0xD110             BNE.N    ??USBH_MSC_Process_17
   \   00000306   0x.... 0x....      ADR.W    R0,?_8
   \   0000030A   0x.... 0x....      BL       printf
   \   0000030E   0x....             ADR.N    R0,??DataTable16  ;; "\n"
   \   00000310   0x.... 0x....      BL       printf
   \   00000314   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000318   0x2108             MOVS     R1,#+8
   \   0000031A   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \                     ??USBH_MSC_Process_21: (+1)
   \   0000031E   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   00000322   0x4620             MOV      R0,R4
   \   00000324   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??USBH_MSC_Process_17: (+1)
   \   00000328   0x2E04             CMP      R6,#+4
   \   0000032A   0xD11E             BNE.N    ??USBH_MSC_Process_3
   \                     ??USBH_MSC_Process_14: (+1)
   \   0000032C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000330   0x2102             MOVS     R1,#+2
   \   00000332   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000336   0xF880 0x4090      STRB     R4,[R0, #+144]
   \   0000033A   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000033E   0xFB08 0x5000      MLA      R0,R8,R0,R5
   \   00000342   0xF880 0x1091      STRB     R1,[R0, #+145]
   \   00000346   0x4620             MOV      R0,R4
   \   00000348   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??USBH_MSC_Process_22: (+1)
   \   0000034C   0x1C48             ADDS     R0,R1,#+1
   \   0000034E   0xF8A5 0x00F8      STRH     R0,[R5, #+248]
   \   00000352   0x4620             MOV      R0,R4
   \   00000354   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??USBH_MSC_Process_2: (+1)
   \   00000358   0x2000             MOVS     R0,#+0
   \   0000035A   0x732C             STRB     R4,[R5, #+12]
   \   0000035C   0xF8A5 0x00F8      STRH     R0,[R5, #+248]
   \   00000360   0xF8D7 0x22B4      LDR      R2,[R7, #+692]
   \   00000364   0x2102             MOVS     R1,#+2
   \   00000366   0x4638             MOV      R0,R7
   \   00000368   0x4790             BLX      R2
   \                     ??USBH_MSC_Process_3: (+1)
   \   0000036A   0x4620             MOV      R0,R4
   \   0000036C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    502          }
    503          
    504          
    505          /**
    506            * @brief  USBH_MSC_SOFProcess 
    507            *         The function is for SOF state
    508            * @param  phost: Host handle
    509            * @retval USBH Status
    510            */

   \                                 In section .text, align 2, keep-with-next
    511          static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
    512          {
    513          
    514            return USBH_OK;
   \                     USBH_MSC_SOFProcess: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    515          }
    516          /**
    517            * @brief  USBH_MSC_RdWrProcess 
    518            *         The function is for managing state machine for MSC I/O Process
    519            * @param  phost: Host handle
    520            * @param  lun: logical Unit Number
    521            * @retval USBH Status
    522            */

   \                                 In section .text, align 2, keep-with-next
    523          static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
    524          {
   \                     USBH_MSC_RdWrProcess: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    525            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
   \   00000004   0xF8D0 0x2264      LDR      R2,[R0, #+612]
    526            USBH_StatusTypeDef error = USBH_BUSY ;
    527            USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
    528            
    529            /* Switch MSC REQ state machine */
    530            switch (MSC_Handle->unit[lun].state)
   \   00000008   0x2334             MOVS     R3,#+52
   \   0000000A   0x2401             MOVS     R4,#+1
   \   0000000C   0x69D2             LDR      R2,[R2, #+28]
   \   0000000E   0xFB13 0x2501      SMLABB   R5,R3,R1,R2
   \   00000012   0xF895 0x2090      LDRB     R2,[R5, #+144]
   \   00000016   0x2A05             CMP      R2,#+5
   \   00000018   0xD01F             BEQ.N    ??USBH_MSC_RdWrProcess_0
   \   0000001A   0xD359             BCC.N    ??USBH_MSC_RdWrProcess_1
   \   0000001C   0x2A07             CMP      R2,#+7
   \   0000001E   0xD00F             BEQ.N    ??USBH_MSC_RdWrProcess_2
   \   00000020   0xD256             BCS.N    ??USBH_MSC_RdWrProcess_1
    531            {
    532           
    533            case MSC_READ: 
    534              scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0, NULL, 0) ;
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x2300             MOVS     R3,#+0
   \   00000026   0x9200             STR      R2,[SP, #+0]
   \   00000028   0x.... 0x....      BL       USBH_MSC_SCSI_Read
   \   0000002C   0x0006             MOVS     R6,R0
    535              
    536              if(scsi_status == USBH_OK)
   \   0000002E   0xD00E             BEQ.N    ??USBH_MSC_RdWrProcess_3
    537              {
    538                MSC_Handle->unit[lun].state = MSC_IDLE;
    539                error = USBH_OK;     
    540              }
    541              else if( scsi_status == USBH_FAIL)
    542              {
    543                MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
    544              }
    545              else if(scsi_status == USBH_UNRECOVERED_ERROR)
    546              {
    547                MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
    548                    error = USBH_FAIL;
    549              }
    550          #if (USBH_USE_OS == 1)
    551              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    552          #endif   
    553              break;     
    554              
    555            case MSC_WRITE: 
    556              scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0, NULL, 0) ;
    557              
    558              if(scsi_status == USBH_OK)
    559              {
    560                  MSC_Handle->unit[lun].state = MSC_IDLE;
    561                  error = USBH_OK;             
    562              }
    563              else if( scsi_status == USBH_FAIL)
   \                     ??USBH_MSC_RdWrProcess_4: (+1)
   \   00000030   0x2E02             CMP      R6,#+2
   \   00000032   0xD147             BNE.N    ??USBH_MSC_RdWrProcess_5
    564              {
    565                MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
   \   00000034   0x2005             MOVS     R0,#+5
   \   00000036   0xF885 0x0090      STRB     R0,[R5, #+144]
    566              }
    567              else if(scsi_status == USBH_UNRECOVERED_ERROR)
    568              {
    569                MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
    570                    error = USBH_FAIL;
    571              }
    572          #if (USBH_USE_OS == 1)
    573              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    574          #endif       
    575              break; 
    576            
    577            case MSC_REQUEST_SENSE:
    578              scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
    579              
    580              if( scsi_status == USBH_OK)
    581              {
    582                USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
    583                USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
    584                USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
    585                MSC_Handle->unit[lun].state = MSC_IDLE;
    586                MSC_Handle->unit[lun].error = MSC_ERROR;
    587                
    588                error = USBH_FAIL;
    589              }
    590              if( scsi_status == USBH_FAIL)
    591              {
    592                USBH_UsrLog ("MSC Device NOT ready");
    593              }
    594              else if(scsi_status == USBH_UNRECOVERED_ERROR)
    595              {
    596                MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;  
    597                    error = USBH_FAIL;
    598              }
    599          #if (USBH_USE_OS == 1)
    600              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    601          #endif       
    602              break;  
    603              
    604            default:
    605              break;  
    606              
    607            }
    608            return error;
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0xB002             ADD      SP,SP,#+8
   \   0000003E   0xBD70             POP      {R4-R6,PC}
   \                     ??USBH_MSC_RdWrProcess_2: (+1)
   \   00000040   0x2200             MOVS     R2,#+0
   \   00000042   0x2300             MOVS     R3,#+0
   \   00000044   0x9200             STR      R2,[SP, #+0]
   \   00000046   0x.... 0x....      BL       USBH_MSC_SCSI_Write
   \   0000004A   0x0006             MOVS     R6,R0
   \   0000004C   0xD1F0             BNE.N    ??USBH_MSC_RdWrProcess_4
   \                     ??USBH_MSC_RdWrProcess_3: (+1)
   \   0000004E   0xF885 0x4090      STRB     R4,[R5, #+144]
   \   00000052   0x2400             MOVS     R4,#+0
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0xB002             ADD      SP,SP,#+8
   \   00000058   0xBD70             POP      {R4-R6,PC}
   \                     ??USBH_MSC_RdWrProcess_0: (+1)
   \   0000005A   0xF105 0x029C      ADD      R2,R5,#+156
   \   0000005E   0x.... 0x....      BL       USBH_MSC_SCSI_RequestSense
   \   00000062   0x0006             MOVS     R6,R0
   \   00000064   0xD122             BNE.N    ??USBH_MSC_RdWrProcess_6
   \   00000066   0xF895 0x109C      LDRB     R1,[R5, #+156]
   \   0000006A   0x.... 0x....      ADR.W    R0,?_12
   \   0000006E   0x....             ADR.N    R4,??DataTable17  ;; "\n"
   \   00000070   0x.... 0x....      BL       printf
   \   00000074   0x4620             MOV      R0,R4
   \   00000076   0x.... 0x....      BL       printf
   \   0000007A   0xF895 0x109D      LDRB     R1,[R5, #+157]
   \   0000007E   0x.... 0x....      ADR.W    R0,?_13
   \   00000082   0x.... 0x....      BL       printf
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0x.... 0x....      BL       printf
   \   0000008C   0xF895 0x109E      LDRB     R1,[R5, #+158]
   \   00000090   0x.... 0x....      ADR.W    R0,?_14
   \   00000094   0x.... 0x....      BL       printf
   \   00000098   0x4620             MOV      R0,R4
   \   0000009A   0x2402             MOVS     R4,#+2
   \   0000009C   0x.... 0x....      BL       printf
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0xF885 0x0090      STRB     R0,[R5, #+144]
   \   000000A6   0x2002             MOVS     R0,#+2
   \   000000A8   0xF885 0x0091      STRB     R0,[R5, #+145]
   \                     ??USBH_MSC_RdWrProcess_6: (+1)
   \   000000AC   0x2E02             CMP      R6,#+2
   \   000000AE   0xD109             BNE.N    ??USBH_MSC_RdWrProcess_5
   \   000000B0   0x.... 0x....      ADR.W    R0,?_8
   \   000000B4   0x.... 0x....      BL       printf
   \   000000B8   0x....             ADR.N    R0,??DataTable17  ;; "\n"
   \   000000BA   0x.... 0x....      BL       printf
   \   000000BE   0x4620             MOV      R0,R4
   \   000000C0   0xB002             ADD      SP,SP,#+8
   \   000000C2   0xBD70             POP      {R4-R6,PC}
   \                     ??USBH_MSC_RdWrProcess_5: (+1)
   \   000000C4   0x2E04             CMP      R6,#+4
   \   000000C6   0xD103             BNE.N    ??USBH_MSC_RdWrProcess_1
   \   000000C8   0x2008             MOVS     R0,#+8
   \   000000CA   0x2402             MOVS     R4,#+2
   \   000000CC   0xF885 0x0090      STRB     R0,[R5, #+144]
   \                     ??USBH_MSC_RdWrProcess_1: (+1)
   \   000000D0   0x4620             MOV      R0,R4
   \   000000D2   0xB002             ADD      SP,SP,#+8
   \   000000D4   0xBD70             POP      {R4-R6,PC}       ;; return
    609          }
    610          
    611          /**
    612            * @brief  USBH_MSC_IsReady 
    613            *         The function check if the MSC function is ready
    614            * @param  phost: Host handle
    615            * @retval USBH Status
    616            */

   \                                 In section .text, align 2, keep-with-next
    617          uint8_t  USBH_MSC_IsReady (USBH_HandleTypeDef *phost)
    618          {
    619              MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
    620              
    621            if(phost->gState == HOST_CLASS)
   \                     USBH_MSC_IsReady: (+1)
   \   00000000   0x7801             LDRB     R1,[R0, #+0]
   \   00000002   0x290A             CMP      R1,#+10
   \   00000004   0xBF01             ITTTT    EQ 
   \   00000006   0xF8D0 0x0264      LDREQ    R0,[R0, #+612]
   \   0000000A   0x69C0             LDREQ    R0,[R0, #+28]
   \   0000000C   0x7B00             LDRBEQ   R0,[R0, #+12]
   \   0000000E   0x2801             CMPEQ    R0,#+1
    622            {
    623              return (MSC_Handle->state == MSC_IDLE);
   \   00000010   0xBF18             IT       NE 
   \   00000012   0x2000             MOVNE    R0,#+0
    624            }
    625            else
    626            {
    627              return 0;
   \   00000014   0x4770             BX       LR               ;; return
    628            }
    629          }
    630          
    631          /**
    632            * @brief  USBH_MSC_GetMaxLUN 
    633            *         The function return the Max LUN supported
    634            * @param  phost: Host handle
    635            * @retval logical Unit Number supported
    636            */

   \                                 In section .text, align 2, keep-with-next
    637          int8_t  USBH_MSC_GetMaxLUN (USBH_HandleTypeDef *phost)
    638          {
    639            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
   \                     USBH_MSC_GetMaxLUN: (+1)
   \   00000000   0xF8D0 0x1264      LDR      R1,[R0, #+612]
   \   00000004   0x69C9             LDR      R1,[R1, #+28]
    640            
    641            if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x280A             CMP      R0,#+10
   \   0000000A   0xBF04             ITT      EQ 
   \   0000000C   0x7B08             LDRBEQ   R0,[R1, #+12]
   \   0000000E   0x2801             CMPEQ    R0,#+1
   \   00000010   0xBF06             ITTE     EQ 
   \   00000012   0x6808             LDREQ    R0,[R1, #+0]
   \   00000014   0xB240             SXTBEQ   R0,R0
   \   00000016   0xF04F 0x30FF      MOVNE    R0,#-1
    642            {
    643              return  MSC_Handle->max_lun;
    644            }  
    645            return 0xFF;
   \   0000001A   0x4770             BX       LR
    646          }
    647          
    648          /**
    649            * @brief  USBH_MSC_UnitIsReady 
    650            *         The function check whether a LUN is ready
    651            * @param  phost: Host handle
    652            * @param  lun: logical Unit Number
    653            * @retval Lun status (0: not ready / 1: ready)
    654            */

   \                                 In section .text, align 2, keep-with-next
    655          uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
    656          {
    657            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
    658            
    659            if(phost->gState == HOST_CLASS)
   \                     USBH_MSC_UnitIsReady: (+1)
   \   00000000   0x7802             LDRB     R2,[R0, #+0]
   \   00000002   0x2A0A             CMP      R2,#+10
   \   00000004   0xD10B             BNE.N    ??USBH_MSC_UnitIsReady_0
    660            {
    661              return (MSC_Handle->unit[lun].error == MSC_OK);
   \   00000006   0xF8D0 0x0264      LDR      R0,[R0, #+612]
   \   0000000A   0x2234             MOVS     R2,#+52
   \   0000000C   0x69C0             LDR      R0,[R0, #+28]
   \   0000000E   0xFB12 0x0001      SMLABB   R0,R2,R1,R0
   \   00000012   0xF890 0x1091      LDRB     R1,[R0, #+145]
   \   00000016   0x1E48             SUBS     R0,R1,#+1
   \   00000018   0x4180             SBCS     R0,R0,R0
   \   0000001A   0x0FC0             LSRS     R0,R0,#+31
   \   0000001C   0x4770             BX       LR
    662            }
    663            else
    664            {
    665              return 0;
   \                     ??USBH_MSC_UnitIsReady_0: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x4770             BX       LR               ;; return
    666            }
    667          }
    668                
    669          /**
    670            * @brief  USBH_MSC_GetLUNInfo 
    671            *         The function return a LUN information
    672            * @param  phost: Host handle
    673            * @param  lun: logical Unit Number
    674            * @retval USBH Status
    675            */

   \                                 In section .text, align 2, keep-with-next
    676          USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
    677          {
   \                     USBH_MSC_GetLUNInfo: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x4603             MOV      R3,R0
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x4610             MOV      R0,R2
    678            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
    679            if(phost->gState == HOST_CLASS)
   \   00000008   0x781A             LDRB     R2,[R3, #+0]
   \   0000000A   0x2A0A             CMP      R2,#+10
   \   0000000C   0xD10B             BNE.N    ??USBH_MSC_GetLUNInfo_0
    680            {
    681              USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
   \   0000000E   0xF8D3 0x3264      LDR      R3,[R3, #+612]
   \   00000012   0x2234             MOVS     R2,#+52
   \   00000014   0x69DB             LDR      R3,[R3, #+28]
   \   00000016   0xFB12 0x3101      SMLABB   R1,R2,R1,R3
   \   0000001A   0x3190             ADDS     R1,R1,#+144
   \   0000001C   0x.... 0x....      BL       __aeabi_memcpy
    682              return USBH_OK;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xB001             ADD      SP,SP,#+4
   \   00000024   0xBD00             POP      {PC}
    683            }
    684            else
    685            {
    686              return USBH_FAIL;
   \                     ??USBH_MSC_GetLUNInfo_0: (+1)
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0xB001             ADD      SP,SP,#+4
   \   0000002A   0xBD00             POP      {PC}             ;; return
    687            }
    688          }
    689          
    690          /**
    691            * @brief  USBH_MSC_Read 
    692            *         The function performs a Read operation 
    693            * @param  phost: Host handle
    694            * @param  lun: logical Unit Number
    695            * @param  address: sector address
    696            * @param  pbuf: pointer to data
    697            * @param  length: number of sector to read
    698            * @retval USBH Status
    699            */

   \                                 In section .text, align 2, keep-with-next
    700          USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
    701                                               uint8_t lun,
    702                                               uint32_t address,
    703                                               uint8_t *pbuf,
    704                                               uint32_t length)
    705          {
   \                     USBH_MSC_Read: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0x4688             MOV      R8,R1
    706            uint32_t timeout;
    707            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
   \   0000000A   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   0000000E   0x69C6             LDR      R6,[R0, #+28]
    708            
    709            if ((phost->device.is_connected == 0) || 
    710                (phost->gState != HOST_CLASS) || 
    711                (MSC_Handle->unit[lun].state != MSC_IDLE))
   \   00000010   0xF894 0x021E      LDRB     R0,[R4, #+542]
   \   00000014   0xB358             CBZ.N    R0,??USBH_MSC_Read_0
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x280A             CMP      R0,#+10
   \   0000001A   0xBF01             ITTTT    EQ 
   \   0000001C   0x2034             MOVEQ    R0,#+52
   \   0000001E   0xFB10 0x6008      SMLABBEQ R0,R0,R8,R6
   \   00000022   0xF890 0x1090      LDRBEQ   R1,[R0, #+144]
   \   00000026   0x2901             CMPEQ    R1,#+1
   \   00000028   0xD121             BNE.N    ??USBH_MSC_Read_0
    712            {
    713              return  USBH_FAIL;
    714            }
    715            MSC_Handle->state = MSC_READ;
   \   0000002A   0x2106             MOVS     R1,#+6
   \   0000002C   0x7331             STRB     R1,[R6, #+12]
    716            MSC_Handle->unit[lun].state = MSC_READ;
   \   0000002E   0xF880 0x1090      STRB     R1,[R0, #+144]
    717            MSC_Handle->rw_lun = lun;
    718            USBH_MSC_SCSI_Read(phost,
    719                               lun,
    720                               address,
    721                               pbuf,
    722                               length);
   \   00000032   0x4641             MOV      R1,R8
   \   00000034   0xF8A6 0x80FA      STRH     R8,[R6, #+250]
   \   00000038   0x9D08             LDR      R5,[SP, #+32]
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x9500             STR      R5,[SP, #+0]
   \   0000003E   0x.... 0x....      BL       USBH_MSC_SCSI_Read
    723            
    724            timeout = phost->Timer;
   \   00000042   0xF242 0x7010      MOVW     R0,#+10000
   \   00000046   0xF8D4 0x72A8      LDR      R7,[R4, #+680]
   \   0000004A   0x4345             MULS     R5,R5,R0
    725            
    726            while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
   \                     ??USBH_MSC_Read_1: (+1)
   \   0000004C   0x4641             MOV      R1,R8
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       USBH_MSC_RdWrProcess
   \   00000054   0x2801             CMP      R0,#+1
   \   00000056   0xD10E             BNE.N    ??USBH_MSC_Read_2
    727            {
    728              if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
   \   00000058   0xF8D4 0x02A8      LDR      R0,[R4, #+680]
   \   0000005C   0x1BC0             SUBS     R0,R0,R7
   \   0000005E   0x4285             CMP      R5,R0
   \   00000060   0xD303             BCC.N    ??USBH_MSC_Read_3
   \   00000062   0xF894 0x021E      LDRB     R0,[R4, #+542]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD1F0             BNE.N    ??USBH_MSC_Read_1
    729              {
    730                MSC_Handle->state = MSC_IDLE;
   \                     ??USBH_MSC_Read_3: (+1)
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x7330             STRB     R0,[R6, #+12]
    731                return USBH_FAIL;
   \                     ??USBH_MSC_Read_0: (+1)
   \   0000006E   0x2002             MOVS     R0,#+2
   \   00000070   0xB002             ADD      SP,SP,#+8
   \   00000072   0xE8BD 0x81F0      POP      {R4-R8,PC}
    732              }
    733            }
    734            MSC_Handle->state = MSC_IDLE;
   \                     ??USBH_MSC_Read_2: (+1)
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0x7330             STRB     R0,[R6, #+12]
    735            return USBH_OK;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0xB002             ADD      SP,SP,#+8
   \   0000007E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    736          }
    737          
    738          /**
    739            * @brief  USBH_MSC_Write 
    740            *         The function performs a Write operation 
    741            * @param  phost: Host handle
    742            * @param  lun: logical Unit Number
    743            * @param  address: sector address
    744            * @param  pbuf: pointer to data
    745            * @param  length: number of sector to write
    746            * @retval USBH Status
    747            */

   \                                 In section .text, align 2, keep-with-next
    748          USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
    749                                               uint8_t lun,
    750                                               uint32_t address,
    751                                               uint8_t *pbuf,
    752                                               uint32_t length)
    753          {
   \                     USBH_MSC_Write: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0x4688             MOV      R8,R1
    754            uint32_t timeout;
    755            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
   \   0000000A   0xF8D4 0x0264      LDR      R0,[R4, #+612]
   \   0000000E   0x69C6             LDR      R6,[R0, #+28]
    756            
    757            if ((phost->device.is_connected == 0) || 
    758                (phost->gState != HOST_CLASS) || 
    759                (MSC_Handle->unit[lun].state != MSC_IDLE))
   \   00000010   0xF894 0x021E      LDRB     R0,[R4, #+542]
   \   00000014   0xB358             CBZ.N    R0,??USBH_MSC_Write_0
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x280A             CMP      R0,#+10
   \   0000001A   0xBF01             ITTTT    EQ 
   \   0000001C   0x2034             MOVEQ    R0,#+52
   \   0000001E   0xFB10 0x6008      SMLABBEQ R0,R0,R8,R6
   \   00000022   0xF890 0x1090      LDRBEQ   R1,[R0, #+144]
   \   00000026   0x2901             CMPEQ    R1,#+1
   \   00000028   0xD121             BNE.N    ??USBH_MSC_Write_0
    760            {
    761              return  USBH_FAIL;
    762            }
    763            MSC_Handle->state = MSC_WRITE;
   \   0000002A   0x2107             MOVS     R1,#+7
   \   0000002C   0x7331             STRB     R1,[R6, #+12]
    764            MSC_Handle->unit[lun].state = MSC_WRITE;
   \   0000002E   0xF880 0x1090      STRB     R1,[R0, #+144]
    765            MSC_Handle->rw_lun = lun;
    766            USBH_MSC_SCSI_Write(phost,
    767                               lun,
    768                               address,
    769                               pbuf,
    770                               length);
   \   00000032   0x4641             MOV      R1,R8
   \   00000034   0xF8A6 0x80FA      STRH     R8,[R6, #+250]
   \   00000038   0x9D08             LDR      R5,[SP, #+32]
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x9500             STR      R5,[SP, #+0]
   \   0000003E   0x.... 0x....      BL       USBH_MSC_SCSI_Write
    771            
    772            timeout = phost->Timer;
   \   00000042   0xF242 0x7010      MOVW     R0,#+10000
   \   00000046   0xF8D4 0x72A8      LDR      R7,[R4, #+680]
   \   0000004A   0x4345             MULS     R5,R5,R0
    773            while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
   \                     ??USBH_MSC_Write_1: (+1)
   \   0000004C   0x4641             MOV      R1,R8
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       USBH_MSC_RdWrProcess
   \   00000054   0x2801             CMP      R0,#+1
   \   00000056   0xD10E             BNE.N    ??USBH_MSC_Write_2
    774            {
    775              if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
   \   00000058   0xF8D4 0x02A8      LDR      R0,[R4, #+680]
   \   0000005C   0x1BC0             SUBS     R0,R0,R7
   \   0000005E   0x4285             CMP      R5,R0
   \   00000060   0xD303             BCC.N    ??USBH_MSC_Write_3
   \   00000062   0xF894 0x021E      LDRB     R0,[R4, #+542]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD1F0             BNE.N    ??USBH_MSC_Write_1
    776              {
    777                MSC_Handle->state = MSC_IDLE;
   \                     ??USBH_MSC_Write_3: (+1)
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x7330             STRB     R0,[R6, #+12]
    778                return USBH_FAIL;
   \                     ??USBH_MSC_Write_0: (+1)
   \   0000006E   0x2002             MOVS     R0,#+2
   \   00000070   0xB002             ADD      SP,SP,#+8
   \   00000072   0xE8BD 0x81F0      POP      {R4-R8,PC}
    779              }
    780            }
    781            MSC_Handle->state = MSC_IDLE;
   \                     ??USBH_MSC_Write_2: (+1)
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0x7330             STRB     R0,[R6, #+12]
    782            return USBH_OK;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0xB002             ADD      SP,SP,#+8
   \   0000007E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    783          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x4D 0x53          DC8 "MSC"
   \              0x43 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x4E 0x75          DC8 "Number of supported LUN: %lu"
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x4C 0x55    
   \              0x4E 0x3A    
   \              0x20 0x25    
   \              0x6C 0x75    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x4C 0x55          DC8 "LUN #%d: "
   \              0x4E 0x20    
   \              0x23 0x25    
   \              0x64 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x49 0x6E          DC8 "Inquiry Vendor  : %s"
   \              0x71 0x75    
   \              0x69 0x72    
   \              0x79 0x20    
   \              0x56 0x65    
   \              0x6E 0x64    
   \              0x6F 0x72    
   \              0x20 0x20    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x49 0x6E          DC8 "Inquiry Product : %s"
   \              0x71 0x75    
   \              0x69 0x72    
   \              0x79 0x20    
   \              0x50 0x72    
   \              0x6F 0x64    
   \              0x75 0x63    
   \              0x74 0x20    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x49 0x6E          DC8 "Inquiry Version : %s"
   \              0x71 0x75    
   \              0x69 0x72    
   \              0x79 0x20    
   \              0x56 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x4D 0x53          DC8 "MSC Device ready"
   \              0x43 0x20    
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x4D 0x53          DC8 "MSC Device NOT ready"
   \              0x43 0x20    
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x4E    
   \              0x4F 0x54    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x4D 0x53          DC8 "MSC Device capacity : %lu Bytes"
   \              0x43 0x20    
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x63    
   \              0x61 0x70    
   \              0x61 0x63    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x3A 0x20    
   \              0x25 0x6C    
   \              0x75 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x42 0x6C          DC8 "Block number : %lu"
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x6E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x6C 0x75    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x42 0x6C          DC8 "Block Size   : %lu"
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x53 0x69    
   \              0x7A 0x65    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x6C 0x75    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x53 0x65          DC8 "Sense Key  : %x"
   \              0x6E 0x73    
   \              0x65 0x20    
   \              0x4B 0x65    
   \              0x79 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x41 0x64          DC8 "Additional Sense Code : %x"
   \              0x64 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x61 0x6C    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x65    
   \              0x20 0x43    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x3A 0x20    
   \              0x25 0x78    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x41 0x64          DC8 "Additional Sense Code Qualifier: %x"
   \              0x64 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x61 0x6C    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x65    
   \              0x20 0x43    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x51 0x75    
   \              0x61 0x6C    
   \              0x69 0x66    
   \              0x69 0x65    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x78 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_2:
   \   00000000   0x0A 0x00          DC8 "\012"
    784          
    785          /**
    786            * @}
    787            */ 
    788          
    789          /**
    790            * @}
    791            */ 
    792          
    793          /**
    794            * @}
    795            */
    796          
    797          /**
    798            * @}
    799            */ 
    800          
    801          /**
    802            * @}
    803            */
    804          
    805          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   USBH_MSC_ClassRequest
        16   -> USBH_ClrFeature
        16   -> USBH_MSC_BOT_REQ_GetMaxLUN
        16   -> printf
       8   USBH_MSC_GetLUNInfo
         8   -> __aeabi_memcpy
       0   USBH_MSC_GetMaxLUN
      16   USBH_MSC_InterfaceDeInit
        16   -> USBH_ClosePipe
        16   -> USBH_FreePipe
        16   -> free
      24   USBH_MSC_InterfaceInit
        24   -> USBH_AllocPipe
        24   -> USBH_FindInterface
        24   -> USBH_LL_SetToggle
        24   -> USBH_MSC_BOT_Init
        24   -> USBH_OpenPipe
        24   -> USBH_SelectInterface
        24   -> __aeabi_memclr4
        24   -> malloc
       0   USBH_MSC_IsReady
      24   USBH_MSC_Process
        24   -- Indirect call
        24   -> USBH_MSC_SCSI_Inquiry
        24   -> USBH_MSC_SCSI_ReadCapacity
        24   -> USBH_MSC_SCSI_RequestSense
        24   -> USBH_MSC_SCSI_TestUnitReady
        24   -> printf
      24   USBH_MSC_RdWrProcess
        24   -> USBH_MSC_SCSI_Read
        24   -> USBH_MSC_SCSI_RequestSense
        24   -> USBH_MSC_SCSI_Write
        24   -> printf
      32   USBH_MSC_Read
        32   -> USBH_MSC_RdWrProcess
        32   -> USBH_MSC_SCSI_Read
       0   USBH_MSC_SOFProcess
       0   USBH_MSC_UnitIsReady
      32   USBH_MSC_Write
        32   -> USBH_MSC_RdWrProcess
        32   -> USBH_MSC_SCSI_Write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable16
       4  ??DataTable17
       4  ?_0
      32  ?_1
      20  ?_10
      20  ?_11
      16  ?_12
      28  ?_13
      36  ?_14
       2  ?_2
      12  ?_3
      24  ?_4
      24  ?_5
      24  ?_6
      20  ?_7
      24  ?_8
      32  ?_9
     128  USBH_MSC_ClassRequest
      44  USBH_MSC_GetLUNInfo
      28  USBH_MSC_GetMaxLUN
      82  USBH_MSC_InterfaceDeInit
     318  USBH_MSC_InterfaceInit
      22  USBH_MSC_IsReady
     880  USBH_MSC_Process
     214  USBH_MSC_RdWrProcess
     130  USBH_MSC_Read
       4  USBH_MSC_SOFProcess
      34  USBH_MSC_UnitIsReady
     130  USBH_MSC_Write
      32  USBH_msc

 
    32 bytes in section .data
     6 bytes in section .rodata
 2 338 bytes in section .text
 
 2 338 bytes of CODE  memory
     6 bytes of CONST memory
    32 bytes of DATA  memory

Errors: none
Warnings: none
