###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       13/Feb/2016  11:44:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\usbd_audio_if.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\usbd_audio_if.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\usbd_audio_if.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\usbd_audio_if.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\usbd_audio_if.c
      1          /**
      2          ******************************************************************************
      3          * @file    /Src/usbd_audio_if.c
      4          * @author  Central Labs
      5          * @version V1.1.0
      6          * @date    11-Jan-2016
      7          * @brief   USB Device Audio interface file.
      8          ******************************************************************************
      9          @attention
     10          *
     11          * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
     12          *
     13          * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14          * You may not use this file except in compliance with the License.
     15          * You may obtain a copy of the License at:
     16          *
     17          *        http://www.st.com/software_license_agreement_liberty_v2
     18          *
     19          * Redistribution and use in source and binary forms, with or without modification,
     20          * are permitted provided that the following conditions are met:
     21          *   1. Redistributions of source code must retain the above copyright notice,
     22          *      this list of conditions and the following disclaimer.
     23          *   2. Redistributions in binary form must reproduce the above copyright notice,
     24          *      this list of conditions and the following disclaimer in the documentation
     25          *      and/or other materials provided with the distribution.
     26          *   3. Neither the name of STMicroelectronics nor the names of its contributors
     27          *      may be used to endorse or promote products derived from this software
     28          *      without specific prior written permission.
     29          *
     30          * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     31          * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     32          * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     33          * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     34          * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     35          * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     36          * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     37          * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     38          * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     39          * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     40          *
     41          ******************************************************************************
     42          */
     43          
     44          /* Includes ------------------------------------------------------------------*/
     45          #include "usbd_audio_if.h"

  #define MAX(X,Y)                                   ((X)>(Y)?(X):(Y))
          ^
"H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Inc\main.h",100  Warning[Pe047]: 
          incompatible redefinition of macro "MAX" (declared at line 266 of
          "H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Mi
          ddlewares\ST\STM32_USB_Device_Library\Core\Inc\usbd_def.h")
     46          
     47          #ifdef USE_STM32L4XX_NUCLEO
     48          extern uint16_t PCM_Buffer[];
     49          #else
     50          extern uint16_t PDM_Buffer[];
     51          #endif
     52          
     53          /* Private typedef -----------------------------------------------------------*/
     54          /* Private define ------------------------------------------------------------*/
     55          /* Private macro -------------------------------------------------------------*/
     56          /* Private function prototypes -----------------------------------------------*/
     57          static int8_t Audio_Init(uint32_t  AudioFreq, uint32_t BitRes, uint32_t ChnlNbr);
     58          static int8_t Audio_DeInit(uint32_t options);
     59          static int8_t Audio_Record(void);
     60          static int8_t Audio_VolumeCtl(int16_t Volume);
     61          static int8_t Audio_MuteCtl(uint8_t cmd);
     62          static int8_t Audio_Stop(void);
     63          static int8_t Audio_Pause(void);
     64          static int8_t Audio_Resume(void);
     65          static int8_t Audio_CommandMgr(uint8_t cmd);
     66          
     67          /* Private variables ---------------------------------------------------------*/
     68          extern USBD_HandleTypeDef hUSBDDevice;

   \                                 In section .data, align 4
     69          USBD_AUDIO_ItfTypeDef USBD_AUDIO_fops = {
   \                     USBD_AUDIO_fops:
   \   00000000   0x........         DC32 Audio_Init, Audio_DeInit, Audio_Record, Audio_VolumeCtl
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 Audio_MuteCtl, Audio_Stop, Audio_Pause, Audio_Resume
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000020   0x........         DC32 Audio_CommandMgr
     70            Audio_Init,
     71            Audio_DeInit,
     72            Audio_Record,
     73            Audio_VolumeCtl,
     74            Audio_MuteCtl,
     75            Audio_Stop,
     76            Audio_Pause,
     77            Audio_Resume,
     78            Audio_CommandMgr,
     79          };
     80          
     81          
     82          /* Private functions ---------------------------------------------------------*/
     83          /* This table maps the audio device class setting in 1/256 dB to a
     84          * linear 0-64 scaling used in pdm_filter.c. It is computed as
     85          * 256*20*log10(index/64). */

   \                                 In section .rodata, align 4
     86          const int16_t vol_table[65] =
   \                     vol_table:
   \   00000000   0x8000 0xDBE0      DC16 -32768, -9248, -7706, -6805, -6165, -5669, -5264, -4921, -4624
   \              0xE1E6 0xE56B
   \              0xE7EB 0xE9DB
   \              0xEB70 0xECC7
   \              0xEDF0       
   \   00000012   0xEEF6 0xEFE0      DC16 -4362, -4128, -3916, -3722, -3544, -3379, -3226, -3083, -2948
   \              0xF0B4 0xF176
   \              0xF228 0xF2CD
   \              0xF366 0xF3F5
   \              0xF47C       
   \   00000024   0xF4FB 0xF574      DC16 -2821, -2700, -2586, -2478, -2374, -2276, -2184, -2090, -2003
   \              0xF5E6 0xF652
   \              0xF6BA 0xF71C
   \              0xF778 0xF7D6
   \              0xF82D       
   \   00000036   0xF881 0xF8D2      DC16 -1919, -1838, -1760, -1685, -1612, -1541, -1473, -1406, -1342
   \              0xF920 0xF96B
   \              0xF9B4 0xF9FB
   \              0xFA3F 0xFA82
   \              0xFAC2       
   \   00000048   0xFB01 0xFB3E      DC16 -1279, -1218, -1159, -1101, -1045, -990, -937, -884, -833, -783
   \              0xFB79 0xFBB3
   \              0xFBEB 0xFC22
   \              0xFC57 0xFC8C
   \              0xFCBF 0xFCF1
   \   0000005C   0xFD22 0xFD51      DC16 -734, -687, -640, -594, -549, -505, -462, -419, -378, -337, -297
   \              0xFD80 0xFDAE
   \              0xFDDB 0xFE07
   \              0xFE32 0xFE5D
   \              0xFE86 0xFEAF
   \              0xFED7       
   \   00000072   0xFF00 0xFF25      DC16 -256, -219, -181, -144, -107, -71, -48, 0
   \              0xFF4B 0xFF70
   \              0xFF95 0xFFB9
   \              0xFFD0 0x0000
   \   00000082   0x00 0x00          DC8 0, 0
     87          { 0x8000, 0xDBE0, 0xE1E6, 0xE56B, 0xE7EB, 0xE9DB, 0xEB70, 0xECC7,
     88          0xEDF0, 0xEEF6, 0xEFE0, 0xF0B4, 0xF176, 0xF228, 0xF2CD, 0xF366,
     89          0xF3F5, 0xF47C, 0xF4FB, 0xF574, 0xF5E6, 0xF652, 0xF6BA, 0xF71C,
     90          0xF778, 0xF7D6, 0xF82D, 0xF881, 0xF8D2, 0xF920, 0xF96B, 0xF9B4,
     91          0xF9FB, 0xFA3F, 0xFA82, 0xFAC2, 0xFB01, 0xFB3E, 0xFB79, 0xFBB3,
     92          0xFBEB, 0xFC22, 0xFC57, 0xFC8C, 0xFCBF, 0xFCF1, 0xFD22, 0xFD51,
     93          0xFD80, 0xFDAE, 0xFDDB, 0xFE07, 0xFE32, 0xFE5D, 0xFE86, 0xFEAF,
     94          0xFED7, 0xFF00, 0xFF25, 0xFF4B, 0xFF70, 0xFF95, 0xFFB9, 0xFFD0,
     95          0x0000 };
     96          
     97          //volatile uint8_t VolumeSetting=64;
     98          
     99          /**
    100          * @brief  Initializes the AUDIO media low layer.
    101          * @param  AudioFreq: Audio frequency used to play the audio stream.
    102          * @param  BitRes: desired bit resolution
    103          * @param  ChnlNbr: number of channel to be configured
    104          * @retval AUDIO_OK in case of success, AUDIO_ERROR otherwise
    105          */

   \                                 In section .text, align 2, keep-with-next
    106          static int8_t Audio_Init(uint32_t  AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
    107          {
   \                     Audio_Init: (+1)
   \   00000000   0x0003             MOVS     R3,R0
    108          #ifndef DISABLE_USB_DRIVEN_ACQUISITION 
    109            //return BSP_AUDIO_IN_Init(AudioFreq, BitRes, ChnlNbr);
    110          	return 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x4770             BX       LR               ;; return
    111          #endif
    112          }
    113          
    114          /**
    115          * @brief  De-Initializes the AUDIO media low layer.      
    116          * @param  options: Reserved for future use
    117          * @retval AUDIO_OK in case of success, AUDIO_ERROR otherwise
    118          */

   \                                 In section .text, align 2, keep-with-next
    119          static int8_t Audio_DeInit(uint32_t options)
    120          {
   \                     Audio_DeInit: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    121            return AUDIO_OK;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x4770             BX       LR               ;; return
    122          }
    123          
    124          /**
    125          * @brief  Start audio recording engine
    126          * @retval AUDIO_OK in case of success, AUDIO_ERROR otherwise
    127          */

   \                                 In section .text, align 2, keep-with-next
    128          static int8_t Audio_Record(void)
    129          {
    130          #ifndef DISABLE_USB_DRIVEN_ACQUISITION  
    131          #ifdef USE_STM32L4XX_NUCLEO
    132            //return BSP_AUDIO_IN_Record(PCM_Buffer, 0);
    133            return 0;
    134          #else
    135            //return BSP_AUDIO_IN_Record(PDM_Buffer, 0);
    136            return 0;
   \                     Audio_Record: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    137          #endif
    138            
    139          #endif
    140          }
    141          
    142          /**
    143          * @brief  Controls AUDIO Volume.             
    144          * @param  vol: Volume level
    145          * @retval AUDIO_OK in case of success, AUDIO_ERROR otherwise
    146          */

   \                                 In section .text, align 2, keep-with-next
    147          static int8_t Audio_VolumeCtl(int16_t Volume)
    148          {
   \                     Audio_VolumeCtl: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    149            /* Call low layer volume setting function */
    150            int j;
    151            
    152            j = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
    153            /* Find the setting nearest to the desired setting */
    154            while(j<64 &&
    155                  abs(Volume-vol_table[j]) > abs(Volume-vol_table[j+1])) {
   \                     ??Audio_VolumeCtl_0: (+1)
   \   00000008   0x2D40             CMP      R5,#+64
   \   0000000A   0xDA14             BGE.N    ??Audio_VolumeCtl_1
   \   0000000C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000000E   0x....             LDR.N    R0,??DataTable1
   \   00000010   0xEB10 0x0045      ADDS     R0,R0,R5, LSL #+1
   \   00000014   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   00000018   0x1A20             SUBS     R0,R4,R0
   \   0000001A   0x.... 0x....      BL       abs
   \   0000001E   0x0006             MOVS     R6,R0
   \   00000020   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000022   0x....             LDR.N    R0,??DataTable1
   \   00000024   0xF930 0x0015      LDRSH    R0,[R0, R5, LSL #+1]
   \   00000028   0x1A20             SUBS     R0,R4,R0
   \   0000002A   0x.... 0x....      BL       abs
   \   0000002E   0x4286             CMP      R6,R0
   \   00000030   0xDA01             BGE.N    ??Audio_VolumeCtl_1
    156                    j++;
   \   00000032   0x1C6D             ADDS     R5,R5,#+1
   \   00000034   0xE7E8             B.N      ??Audio_VolumeCtl_0
    157                  }
    158            /* Now do the volume adjustment */
    159            //return BSP_AUDIO_IN_SetVolume((uint8_t)j);
    160            return 0;
   \                     ??Audio_VolumeCtl_1: (+1)
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    161            
    162            
    163          }
    164          
    165          /**
    166          * @brief  Controls AUDIO Mute.              
    167          * @param  cmd: Command opcode
    168          * @retval AUDIO_OK in case of success, AUDIO_ERROR otherwise
    169          */

   \                                 In section .text, align 2, keep-with-next
    170          static int8_t Audio_MuteCtl(uint8_t cmd)
    171          {
   \                     Audio_MuteCtl: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    172            return AUDIO_OK;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x4770             BX       LR               ;; return
    173          }
    174          
    175          
    176          /**
    177          * @brief  Stops audio acquisition
    178          * @param  none
    179          * @retval AUDIO_OK in case of success, AUDIO_ERROR otherwise
    180          */

   \                                 In section .text, align 2, keep-with-next
    181          static int8_t Audio_Stop(void)
    182          {  
    183          #ifndef DISABLE_USB_DRIVEN_ACQUISITION  
    184            //return BSP_AUDIO_IN_Stop();  
    185            return 0;
   \                     Audio_Stop: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    186          #endif
    187          }
    188          
    189          /**
    190          * @brief  Pauses audio acquisition
    191          * @param  none
    192          * @retval AUDIO_OK in case of success, AUDIO_ERROR otherwise
    193          */
    194          

   \                                 In section .text, align 2, keep-with-next
    195          static int8_t Audio_Pause(void)
    196          {
    197            return 0;
   \                     Audio_Pause: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    198          }
    199          
    200          
    201          /**
    202          * @brief  Resumes audio acquisition
    203          * @param  none
    204          * @retval AUDIO_OK in case of success, AUDIO_ERROR otherwise
    205          */

   \                                 In section .text, align 2, keep-with-next
    206          static int8_t Audio_Resume(void)
    207          {  
    208            return AUDIO_OK;
   \                     Audio_Resume: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    209          }
    210          
    211          /**
    212          * @brief  Manages command from usb
    213          * @param  None
    214          * @retval AUDIO_OK in case of success, AUDIO_ERROR otherwise
    215          */
    216          

   \                                 In section .text, align 2, keep-with-next
    217          static int8_t Audio_CommandMgr(uint8_t cmd)
    218          {
   \                     Audio_CommandMgr: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    219            return AUDIO_OK;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x4770             BX       LR               ;; return
    220          }
    221          /**
    222          * @brief  Fills USB audio buffer with the right amount of data, depending on the
    223          *			channel/frequency configuration
    224          * @param  audioData: pointer to the PCM audio data
    225          * @param  PCMSamples: number of PCM samples to be passed to USB engine
    226          * @note Depending on the calling frequency, a coherent amount of samples must be passed to
    227          *       the function. E.g.: assuming a Sampling frequency of 16 KHz and 1 channel,
    228          *       you can pass 16 PCM samples if the function is called each millisecond,
    229          *       32 samples if called every 2 milliseconds and so on.
    230          */

   \                                 In section .text, align 2, keep-with-next
    231          void Send_Audio_to_USB(int16_t * audioData, uint16_t PCMSamples){
   \                     Send_Audio_to_USB: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    232            
    233            USBD_AUDIO_Data_Transfer(&hUSBDDevice, (int16_t *)audioData, PCMSamples);
   \   00000006   0x002A             MOVS     R2,R5
   \   00000008   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000A   0x0021             MOVS     R1,R4
   \   0000000C   0x....             LDR.N    R0,??DataTable1_1
   \   0000000E   0x.... 0x....      BL       USBD_AUDIO_Data_Transfer
    234          }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     vol_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     hUSBDDevice
    235          
    236          
    237          
    238          
    239          
    240          
    241          
    242          
    243          
    244          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Audio_CommandMgr
       0   Audio_DeInit
       0   Audio_Init
       0   Audio_MuteCtl
       0   Audio_Pause
       0   Audio_Record
       0   Audio_Resume
       0   Audio_Stop
      16   Audio_VolumeCtl
        16   -> abs
      16   Send_Audio_to_USB
        16   -> USBD_AUDIO_Data_Transfer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       6  Audio_CommandMgr
       6  Audio_DeInit
       6  Audio_Init
       6  Audio_MuteCtl
       4  Audio_Pause
       4  Audio_Record
       4  Audio_Resume
       4  Audio_Stop
      58  Audio_VolumeCtl
      20  Send_Audio_to_USB
      36  USBD_AUDIO_fops
     132  vol_table

 
  36 bytes in section .data
 132 bytes in section .rodata
 126 bytes in section .text
 
 126 bytes of CODE  memory
 132 bytes of CONST memory
  36 bytes of DATA  memory

Errors: none
Warnings: 1
