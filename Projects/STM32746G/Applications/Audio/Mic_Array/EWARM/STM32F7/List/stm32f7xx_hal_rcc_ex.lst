###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       25/Feb/2016  16:19:14
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_rcc_ex.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_rcc_ex.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\stm32f7xx_hal_rcc_ex.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\stm32f7xx_hal_rcc_ex.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_rcc_ex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f7xx_hal_rcc_ex.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    25-June-2015
      7            * @brief   Extension RCC HAL module driver.
      8            *          This file provides firmware functions to manage the following 
      9            *          functionalities RCC extension peripheral:
     10            *           + Extended Peripheral Control functions
     11            *  
     12            ******************************************************************************
     13            * @attention
     14            *
     15            * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
     16            *
     17            * Redistribution and use in source and binary forms, with or without modification,
     18            * are permitted provided that the following conditions are met:
     19            *   1. Redistributions of source code must retain the above copyright notice,
     20            *      this list of conditions and the following disclaimer.
     21            *   2. Redistributions in binary form must reproduce the above copyright notice,
     22            *      this list of conditions and the following disclaimer in the documentation
     23            *      and/or other materials provided with the distribution.
     24            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     25            *      may be used to endorse or promote products derived from this software
     26            *      without specific prior written permission.
     27            *
     28            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     29            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     30            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     31            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     32            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     33            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     34            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     35            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     36            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     37            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     38            *
     39            ******************************************************************************
     40            */ 
     41          
     42          /* Includes ------------------------------------------------------------------*/
     43          #include "stm32f7xx_hal.h"
     44          
     45          /** @addtogroup STM32F7xx_HAL_Driver
     46            * @{
     47            */
     48          
     49          /** @defgroup RCCEx RCCEx
     50            * @brief RCCEx HAL module driver
     51            * @{
     52            */
     53          
     54          #ifdef HAL_RCC_MODULE_ENABLED
     55          
     56          /* Private typedef -----------------------------------------------------------*/
     57          /* Private define ------------------------------------------------------------*/
     58          /** @defgroup RCCEx_Private_Defines RCCEx Private Defines
     59            * @{
     60            */
     61            
     62          #define PLLI2S_TIMEOUT_VALUE    100 /* Timeout value fixed to 100 ms  */
     63          #define PLLSAI_TIMEOUT_VALUE    100 /* Timeout value fixed to 100 ms  */
     64          
     65          /**
     66            * @}
     67            */
     68          /* Private macro -------------------------------------------------------------*/
     69          /** @defgroup RCCEx_Private_Macros RCCEx Private Macros
     70           * @{
     71           */
     72          /**
     73            * @}
     74            */
     75          
     76          /** @defgroup RCCEx_Private_Macros RCCEx Private Macros
     77           * @{
     78           */
     79          
     80          /**
     81            * @}
     82            */
     83          
     84          
     85          /* Private variables ---------------------------------------------------------*/
     86          /* Private function prototypes -----------------------------------------------*/
     87          /* Private functions ---------------------------------------------------------*/
     88          
     89          /** @defgroup RCCEx_Exported_Functions RCCEx Exported Functions
     90            * @{
     91            */
     92          
     93          /** @defgroup RCCEx_Exported_Functions_Group1 Extended Peripheral Control functions 
     94           *  @brief  Extended Peripheral Control functions  
     95           *
     96          @verbatim   
     97           ===============================================================================
     98                          ##### Extended Peripheral Control functions  #####
     99           ===============================================================================  
    100              [..]
    101              This subsection provides a set of functions allowing to control the RCC Clocks 
    102              frequencies.
    103              [..] 
    104              (@) Important note: Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to
    105                  select the RTC clock source; in this case the Backup domain will be reset in  
    106                  order to modify the RTC Clock source, as consequence RTC registers (including 
    107                  the backup registers) and RCC_BDCR register will be set to their reset values.
    108                
    109          @endverbatim
    110            * @{
    111            */
    112          /**
    113            * @brief  Initializes the RCC extended peripherals clocks according to the specified
    114            *         parameters in the RCC_PeriphCLKInitTypeDef.
    115            * @param  PeriphClkInit: pointer to an RCC_PeriphCLKInitTypeDef structure that
    116            *         contains the configuration information for the Extended Peripherals
    117            *         clocks(I2S, SAI, LTDC RTC, TIM, UARTs, USARTs, LTPIM, SDMMC...).
    118            *         
    119            * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select 
    120            *         the RTC clock source; in this case the Backup domain will be reset in  
    121            *         order to modify the RTC Clock source, as consequence RTC registers (including 
    122            *         the backup registers) and RCC_BDCR register are set to their reset values.
    123            *
    124            * @retval HAL status
    125            */

   \                                 In section .text, align 2, keep-with-next
    126          HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
    127          {
   \                     HAL_RCCEx_PeriphCLKConfig: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
    128            uint32_t tickstart = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    129            uint32_t tmpreg0 = 0;
   \   00000008   0x2600             MOVS     R6,#+0
    130            uint32_t tmpreg1 = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
    131            uint32_t plli2sused = 0;
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    132            uint32_t pllsaiused = 0;
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
    133              
    134            /* Check the parameters */
    135            assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
    136            
    137            /*----------------------------------- I2S configuration ----------------------------------*/
    138            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0x07C0             LSLS     R0,R0,#+31
   \   00000018   0xD514             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_0
    139            {
    140              /* Check the parameters */
    141              assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    142              
    143              /* Configure I2S Clock source */
    144              __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable2  ;; 0x40023808
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF430 0x0000      BICS     R0,R0,#0x800000
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable2  ;; 0x40023808
   \   00000028   0x6008             STR      R0,[R1, #+0]
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable2  ;; 0x40023808
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x6B61             LDR      R1,[R4, #+52]
   \   00000032   0x4308             ORRS     R0,R1,R0
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable2  ;; 0x40023808
   \   00000038   0x6008             STR      R0,[R1, #+0]
    145              
    146              /* Enable the PLLI2S when it's used as clock source for I2S */
    147              if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
   \   0000003A   0x6B60             LDR      R0,[R4, #+52]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD101             BNE.N    ??HAL_RCCEx_PeriphCLKConfig_0
    148              {
    149                plli2sused = 1; 
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x4680             MOV      R8,R0
    150              }
    151            }
    152            
    153            /*------------------------------------ SAI1 configuration --------------------------------------*/
    154            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
   \                     ??HAL_RCCEx_PeriphCLKConfig_0: (+1)
   \   00000044   0x6820             LDR      R0,[R4, #+0]
   \   00000046   0x0300             LSLS     R0,R0,#+12
   \   00000048   0xD514             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_1
    155            {
    156              /* Check the parameters */
    157              assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    158              
    159              /* Configure SAI1 Clock source */
    160              __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable2_1  ;; 0x4002388c
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF430 0x1040      BICS     R0,R0,#0x300000
   \   00000054   0x6BE1             LDR      R1,[R4, #+60]
   \   00000056   0x4308             ORRS     R0,R1,R0
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable2_1  ;; 0x4002388c
   \   0000005C   0x6008             STR      R0,[R1, #+0]
    161              /* Enable the PLLI2S when it's used as clock source for SAI */
    162              if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
   \   0000005E   0x6BE0             LDR      R0,[R4, #+60]
   \   00000060   0xF5B0 0x1F80      CMP      R0,#+1048576
   \   00000064   0xD101             BNE.N    ??HAL_RCCEx_PeriphCLKConfig_2
    163              {
    164                plli2sused = 1; 
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x4680             MOV      R8,R0
    165              }
    166              /* Enable the PLLSAI when it's used as clock source for SAI */
    167              if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
   \                     ??HAL_RCCEx_PeriphCLKConfig_2: (+1)
   \   0000006A   0x6BE0             LDR      R0,[R4, #+60]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD101             BNE.N    ??HAL_RCCEx_PeriphCLKConfig_1
    168              {
    169                pllsaiused = 1; 
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x4681             MOV      R9,R0
    170              }
    171            }
    172            
    173            /*------------------------------------ SAI2 configuration --------------------------------------*/
    174            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
   \                     ??HAL_RCCEx_PeriphCLKConfig_1: (+1)
   \   00000074   0x6820             LDR      R0,[R4, #+0]
   \   00000076   0x02C0             LSLS     R0,R0,#+11
   \   00000078   0xD514             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_3
    175            {
    176              /* Check the parameters */
    177              assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    178              
    179              /* Configure SAI2 Clock source */
    180              __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable2_1  ;; 0x4002388c
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xF430 0x0040      BICS     R0,R0,#0xC00000
   \   00000084   0x6C21             LDR      R1,[R4, #+64]
   \   00000086   0x4308             ORRS     R0,R1,R0
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable2_1  ;; 0x4002388c
   \   0000008C   0x6008             STR      R0,[R1, #+0]
    181              
    182              /* Enable the PLLI2S when it's used as clock source for SAI */
    183              if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
   \   0000008E   0x6C20             LDR      R0,[R4, #+64]
   \   00000090   0xF5B0 0x0F80      CMP      R0,#+4194304
   \   00000094   0xD101             BNE.N    ??HAL_RCCEx_PeriphCLKConfig_4
    184              {
    185                plli2sused = 1; 
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x4680             MOV      R8,R0
    186              }
    187              /* Enable the PLLSAI when it's used as clock source for SAI */
    188              if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
   \                     ??HAL_RCCEx_PeriphCLKConfig_4: (+1)
   \   0000009A   0x6C20             LDR      R0,[R4, #+64]
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD101             BNE.N    ??HAL_RCCEx_PeriphCLKConfig_3
    189              {
    190                pllsaiused = 1; 
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0x4681             MOV      R9,R0
    191              }
    192            }
    193            
    194            /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
    195            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
   \                     ??HAL_RCCEx_PeriphCLKConfig_3: (+1)
   \   000000A4   0x6820             LDR      R0,[R4, #+0]
   \   000000A6   0x01C0             LSLS     R0,R0,#+7
   \   000000A8   0xD501             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_5
    196            {    
    197                plli2sused = 1; 
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0x4680             MOV      R8,R0
    198            }  
    199            
    200            /*------------------------------------ RTC configuration --------------------------------------*/
    201            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
   \                     ??HAL_RCCEx_PeriphCLKConfig_5: (+1)
   \   000000AE   0x7820             LDRB     R0,[R4, #+0]
   \   000000B0   0x0680             LSLS     R0,R0,#+26
   \   000000B2   0xF140 0x8082      BPL.W    ??HAL_RCCEx_PeriphCLKConfig_6
    202            {
    203              /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    204              if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable2_2  ;; 0x40023870
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0xF410 0x7040      ANDS     R0,R0,#0x300
   \   000000C0   0x6B21             LDR      R1,[R4, #+48]
   \   000000C2   0xF411 0x7140      ANDS     R1,R1,#0x300
   \   000000C6   0x4288             CMP      R0,R1
   \   000000C8   0xD077             BEQ.N    ??HAL_RCCEx_PeriphCLKConfig_6
    205              {
    206                /* Enable Power Clock*/
    207                __HAL_RCC_PWR_CLK_ENABLE();
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable2_3  ;; 0x40023840
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable2_3  ;; 0x40023840
   \   000000D8   0x6008             STR      R0,[R1, #+0]
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable2_3  ;; 0x40023840
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0xF010 0x5080      ANDS     R0,R0,#0x10000000
   \   000000E4   0x9000             STR      R0,[SP, #+0]
   \   000000E6   0x9800             LDR      R0,[SP, #+0]
    208                
    209                /* Enable write access to Backup domain */
    210                PWR->CR1 |= PWR_CR1_DBP;
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable2_4  ;; 0x40007000
   \   000000EC   0x6800             LDR      R0,[R0, #+0]
   \   000000EE   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable2_4  ;; 0x40007000
   \   000000F6   0x6008             STR      R0,[R1, #+0]
    211                
    212                /* Get Start Tick*/
    213                tickstart = HAL_GetTick();
   \   000000F8   0x.... 0x....      BL       HAL_GetTick
   \   000000FC   0x0005             MOVS     R5,R0
    214                
    215                /* Wait for Backup domain Write protection disable */
    216                while((PWR->CR1 & PWR_CR1_DBP) == RESET)
   \                     ??HAL_RCCEx_PeriphCLKConfig_7: (+1)
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable2_4  ;; 0x40007000
   \   00000102   0x6800             LDR      R0,[R0, #+0]
   \   00000104   0x05C0             LSLS     R0,R0,#+23
   \   00000106   0xD406             BMI.N    ??HAL_RCCEx_PeriphCLKConfig_8
    217                {
    218                  if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
   \   00000108   0x.... 0x....      BL       HAL_GetTick
   \   0000010C   0x1B40             SUBS     R0,R0,R5
   \   0000010E   0x2865             CMP      R0,#+101
   \   00000110   0xD3F5             BCC.N    ??HAL_RCCEx_PeriphCLKConfig_7
    219                  {
    220                    return HAL_TIMEOUT;
   \   00000112   0x2003             MOVS     R0,#+3
   \   00000114   0xE2C6             B.N      ??HAL_RCCEx_PeriphCLKConfig_9
    221                  }      
    222                }
    223          
    224                /* Store the content of BDCR register before the reset of Backup Domain */
    225                tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
   \                     ??HAL_RCCEx_PeriphCLKConfig_8: (+1)
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable2_2  ;; 0x40023870
   \   0000011A   0x6800             LDR      R0,[R0, #+0]
   \   0000011C   0xF430 0x7040      BICS     R0,R0,#0x300
   \   00000120   0x0006             MOVS     R6,R0
    226                
    227                /* RTC Clock selection can be changed only if the Backup Domain is reset */
    228                __HAL_RCC_BACKUPRESET_FORCE();
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable2_2  ;; 0x40023870
   \   00000126   0x6800             LDR      R0,[R0, #+0]
   \   00000128   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   0000012C   0x.... 0x....      LDR.W    R1,??DataTable2_2  ;; 0x40023870
   \   00000130   0x6008             STR      R0,[R1, #+0]
    229                __HAL_RCC_BACKUPRESET_RELEASE();
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable2_2  ;; 0x40023870
   \   00000136   0x6800             LDR      R0,[R0, #+0]
   \   00000138   0xF430 0x3080      BICS     R0,R0,#0x10000
   \   0000013C   0x.... 0x....      LDR.W    R1,??DataTable2_2  ;; 0x40023870
   \   00000140   0x6008             STR      R0,[R1, #+0]
    230                
    231                /* Restore the Content of BDCR register */
    232                RCC->BDCR = tmpreg0;
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable2_2  ;; 0x40023870
   \   00000146   0x6006             STR      R6,[R0, #+0]
    233                
    234                /* If LSE is selected as RTC clock source, wait for LSE reactivation */
    235                if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
   \   00000148   0x07B0             LSLS     R0,R6,#+30
   \   0000014A   0xD510             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_10
    236                {
    237                  /* Get Start Tick*/
    238                  tickstart = HAL_GetTick();
   \   0000014C   0x.... 0x....      BL       HAL_GetTick
   \   00000150   0x0005             MOVS     R5,R0
    239                  
    240                  /* Wait till LSE is ready */  
    241                  while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
   \                     ??HAL_RCCEx_PeriphCLKConfig_11: (+1)
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable2_2  ;; 0x40023870
   \   00000156   0x6800             LDR      R0,[R0, #+0]
   \   00000158   0x0780             LSLS     R0,R0,#+30
   \   0000015A   0xD408             BMI.N    ??HAL_RCCEx_PeriphCLKConfig_10
    242                  {
    243                    if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
   \   0000015C   0x.... 0x....      BL       HAL_GetTick
   \   00000160   0x1B40             SUBS     R0,R0,R5
   \   00000162   0xF241 0x3189      MOVW     R1,#+5001
   \   00000166   0x4288             CMP      R0,R1
   \   00000168   0xD3F3             BCC.N    ??HAL_RCCEx_PeriphCLKConfig_11
    244                    {
    245                      return HAL_TIMEOUT;
   \   0000016A   0x2003             MOVS     R0,#+3
   \   0000016C   0xE29A             B.N      ??HAL_RCCEx_PeriphCLKConfig_9
    246                    }
    247                  }
    248                }
    249                __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
   \                     ??HAL_RCCEx_PeriphCLKConfig_10: (+1)
   \   0000016E   0x6B20             LDR      R0,[R4, #+48]
   \   00000170   0xF410 0x7040      ANDS     R0,R0,#0x300
   \   00000174   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000178   0xD10D             BNE.N    ??HAL_RCCEx_PeriphCLKConfig_12
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable2  ;; 0x40023808
   \   0000017E   0x6800             LDR      R0,[R0, #+0]
   \   00000180   0xF430 0x10F8      BICS     R0,R0,#0x1F0000
   \   00000184   0x6B21             LDR      R1,[R4, #+48]
   \   00000186   0x.... 0x....      LDR.W    R2,??DataTable2_5  ;; 0xffffcff
   \   0000018A   0x4011             ANDS     R1,R2,R1
   \   0000018C   0x4308             ORRS     R0,R1,R0
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable2  ;; 0x40023808
   \   00000192   0x6008             STR      R0,[R1, #+0]
   \   00000194   0xE007             B.N      ??HAL_RCCEx_PeriphCLKConfig_13
   \                     ??HAL_RCCEx_PeriphCLKConfig_12: (+1)
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable2  ;; 0x40023808
   \   0000019A   0x6800             LDR      R0,[R0, #+0]
   \   0000019C   0xF430 0x10F8      BICS     R0,R0,#0x1F0000
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable2  ;; 0x40023808
   \   000001A4   0x6008             STR      R0,[R1, #+0]
   \                     ??HAL_RCCEx_PeriphCLKConfig_13: (+1)
   \   000001A6   0x.... 0x....      LDR.W    R0,??DataTable2_2  ;; 0x40023870
   \   000001AA   0x6800             LDR      R0,[R0, #+0]
   \   000001AC   0x6B21             LDR      R1,[R4, #+48]
   \   000001AE   0x0509             LSLS     R1,R1,#+20       ;; ZeroExtS R1,R1,#+20,#+20
   \   000001B0   0x0D09             LSRS     R1,R1,#+20
   \   000001B2   0x4308             ORRS     R0,R1,R0
   \   000001B4   0x.... 0x....      LDR.W    R1,??DataTable2_2  ;; 0x40023870
   \   000001B8   0x6008             STR      R0,[R1, #+0]
    250              }
    251            }
    252          
    253            /*------------------------------------ TIM configuration --------------------------------------*/
    254            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
   \                     ??HAL_RCCEx_PeriphCLKConfig_6: (+1)
   \   000001BA   0x7820             LDRB     R0,[R4, #+0]
   \   000001BC   0x06C0             LSLS     R0,R0,#+27
   \   000001BE   0xD50F             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_14
    255            {
    256              /* Check the parameters */
    257              assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    258              
    259              /* Configure Timer Prescaler */
    260              __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
   \   000001C0   0x.... 0x....      LDR.W    R0,??DataTable2_1  ;; 0x4002388c
   \   000001C4   0x6800             LDR      R0,[R0, #+0]
   \   000001C6   0xF030 0x7080      BICS     R0,R0,#0x1000000
   \   000001CA   0x.... 0x....      LDR.W    R1,??DataTable2_1  ;; 0x4002388c
   \   000001CE   0x6008             STR      R0,[R1, #+0]
   \   000001D0   0x.... 0x....      LDR.W    R0,??DataTable2_1  ;; 0x4002388c
   \   000001D4   0x6800             LDR      R0,[R0, #+0]
   \   000001D6   0x6BA1             LDR      R1,[R4, #+56]
   \   000001D8   0x4308             ORRS     R0,R1,R0
   \   000001DA   0x.... 0x....      LDR.W    R1,??DataTable2_1  ;; 0x4002388c
   \   000001DE   0x6008             STR      R0,[R1, #+0]
    261            }
    262            
    263            /*-------------------------------------- I2C1 Configuration -----------------------------------*/
    264            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
   \                     ??HAL_RCCEx_PeriphCLKConfig_14: (+1)
   \   000001E0   0x6820             LDR      R0,[R4, #+0]
   \   000001E2   0x0440             LSLS     R0,R0,#+17
   \   000001E4   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_15
    265            {
    266              /* Check the parameters */
    267              assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    268              
    269              /* Configure the I2C1 clock source */
    270              __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
   \   000001E6   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   000001EA   0x6800             LDR      R0,[R0, #+0]
   \   000001EC   0xF430 0x3040      BICS     R0,R0,#0x30000
   \   000001F0   0x6E61             LDR      R1,[R4, #+100]
   \   000001F2   0x4308             ORRS     R0,R1,R0
   \   000001F4   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   000001F8   0x6008             STR      R0,[R1, #+0]
    271            }
    272            
    273            /*-------------------------------------- I2C2 Configuration -----------------------------------*/
    274            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
   \                     ??HAL_RCCEx_PeriphCLKConfig_15: (+1)
   \   000001FA   0x6820             LDR      R0,[R4, #+0]
   \   000001FC   0x0400             LSLS     R0,R0,#+16
   \   000001FE   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_16
    275            {
    276              /* Check the parameters */
    277              assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    278              
    279              /* Configure the I2C2 clock source */
    280              __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   00000204   0x6800             LDR      R0,[R0, #+0]
   \   00000206   0xF430 0x2040      BICS     R0,R0,#0xC0000
   \   0000020A   0x6EA1             LDR      R1,[R4, #+104]
   \   0000020C   0x4308             ORRS     R0,R1,R0
   \   0000020E   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   00000212   0x6008             STR      R0,[R1, #+0]
    281            }
    282            
    283            /*-------------------------------------- I2C3 Configuration -----------------------------------*/
    284            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
   \                     ??HAL_RCCEx_PeriphCLKConfig_16: (+1)
   \   00000214   0x6820             LDR      R0,[R4, #+0]
   \   00000216   0x03C0             LSLS     R0,R0,#+15
   \   00000218   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_17
    285            {
    286              /* Check the parameters */
    287              assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    288              
    289              /* Configure the I2C3 clock source */
    290              __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
   \   0000021A   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   0000021E   0x6800             LDR      R0,[R0, #+0]
   \   00000220   0xF430 0x1040      BICS     R0,R0,#0x300000
   \   00000224   0x6EE1             LDR      R1,[R4, #+108]
   \   00000226   0x4308             ORRS     R0,R1,R0
   \   00000228   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   0000022C   0x6008             STR      R0,[R1, #+0]
    291            }
    292              
    293            /*-------------------------------------- I2C4 Configuration -----------------------------------*/
    294            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
   \                     ??HAL_RCCEx_PeriphCLKConfig_17: (+1)
   \   0000022E   0x6820             LDR      R0,[R4, #+0]
   \   00000230   0x0380             LSLS     R0,R0,#+14
   \   00000232   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_18
    295            {
    296              /* Check the parameters */
    297              assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    298              
    299              /* Configure the I2C4 clock source */
    300              __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
   \   00000234   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   00000238   0x6800             LDR      R0,[R0, #+0]
   \   0000023A   0xF430 0x0040      BICS     R0,R0,#0xC00000
   \   0000023E   0x6F21             LDR      R1,[R4, #+112]
   \   00000240   0x4308             ORRS     R0,R1,R0
   \   00000242   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   00000246   0x6008             STR      R0,[R1, #+0]
    301            }
    302          
    303            /*-------------------------------------- USART1 Configuration -----------------------------------*/
    304            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
   \                     ??HAL_RCCEx_PeriphCLKConfig_18: (+1)
   \   00000248   0x7820             LDRB     R0,[R4, #+0]
   \   0000024A   0x0640             LSLS     R0,R0,#+25
   \   0000024C   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_19
    305            {
    306              /* Check the parameters */
    307              assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    308              
    309              /* Configure the USART1 clock source */
    310              __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
   \   0000024E   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   00000252   0x6800             LDR      R0,[R0, #+0]
   \   00000254   0x0880             LSRS     R0,R0,#+2
   \   00000256   0x0080             LSLS     R0,R0,#+2
   \   00000258   0x6C61             LDR      R1,[R4, #+68]
   \   0000025A   0x4308             ORRS     R0,R1,R0
   \   0000025C   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   00000260   0x6008             STR      R0,[R1, #+0]
    311            }
    312          
    313            /*-------------------------------------- USART2 Configuration -----------------------------------*/
    314            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
   \                     ??HAL_RCCEx_PeriphCLKConfig_19: (+1)
   \   00000262   0x7820             LDRB     R0,[R4, #+0]
   \   00000264   0x0600             LSLS     R0,R0,#+24
   \   00000266   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_20
    315            {
    316              /* Check the parameters */
    317              assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    318              
    319              /* Configure the USART2 clock source */
    320              __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
   \   00000268   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   0000026C   0x6800             LDR      R0,[R0, #+0]
   \   0000026E   0xF030 0x000C      BICS     R0,R0,#0xC
   \   00000272   0x6CA1             LDR      R1,[R4, #+72]
   \   00000274   0x4308             ORRS     R0,R1,R0
   \   00000276   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   0000027A   0x6008             STR      R0,[R1, #+0]
    321            }
    322          
    323            /*-------------------------------------- USART3 Configuration -----------------------------------*/
    324            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
   \                     ??HAL_RCCEx_PeriphCLKConfig_20: (+1)
   \   0000027C   0x6820             LDR      R0,[R4, #+0]
   \   0000027E   0x05C0             LSLS     R0,R0,#+23
   \   00000280   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_21
    325            {
    326              /* Check the parameters */
    327              assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    328              
    329              /* Configure the USART3 clock source */
    330              __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
   \   00000282   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   00000286   0x6800             LDR      R0,[R0, #+0]
   \   00000288   0xF030 0x0030      BICS     R0,R0,#0x30
   \   0000028C   0x6CE1             LDR      R1,[R4, #+76]
   \   0000028E   0x4308             ORRS     R0,R1,R0
   \   00000290   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   00000294   0x6008             STR      R0,[R1, #+0]
    331            }
    332          
    333            /*-------------------------------------- UART4 Configuration -----------------------------------*/
    334            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
   \                     ??HAL_RCCEx_PeriphCLKConfig_21: (+1)
   \   00000296   0x6820             LDR      R0,[R4, #+0]
   \   00000298   0x0580             LSLS     R0,R0,#+22
   \   0000029A   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_22
    335            {
    336              /* Check the parameters */
    337              assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    338              
    339              /* Configure the UART4 clock source */
    340              __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
   \   0000029C   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   000002A0   0x6800             LDR      R0,[R0, #+0]
   \   000002A2   0xF030 0x00C0      BICS     R0,R0,#0xC0
   \   000002A6   0x6D21             LDR      R1,[R4, #+80]
   \   000002A8   0x4308             ORRS     R0,R1,R0
   \   000002AA   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   000002AE   0x6008             STR      R0,[R1, #+0]
    341            }
    342          
    343            /*-------------------------------------- UART5 Configuration -----------------------------------*/
    344            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
   \                     ??HAL_RCCEx_PeriphCLKConfig_22: (+1)
   \   000002B0   0x6820             LDR      R0,[R4, #+0]
   \   000002B2   0x0540             LSLS     R0,R0,#+21
   \   000002B4   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_23
    345            {
    346              /* Check the parameters */
    347              assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    348              
    349              /* Configure the UART5 clock source */
    350              __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
   \   000002B6   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   000002BA   0x6800             LDR      R0,[R0, #+0]
   \   000002BC   0xF430 0x7040      BICS     R0,R0,#0x300
   \   000002C0   0x6D61             LDR      R1,[R4, #+84]
   \   000002C2   0x4308             ORRS     R0,R1,R0
   \   000002C4   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   000002C8   0x6008             STR      R0,[R1, #+0]
    351            }
    352          
    353            /*-------------------------------------- USART6 Configuration -----------------------------------*/
    354            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
   \                     ??HAL_RCCEx_PeriphCLKConfig_23: (+1)
   \   000002CA   0x6820             LDR      R0,[R4, #+0]
   \   000002CC   0x0500             LSLS     R0,R0,#+20
   \   000002CE   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_24
    355            {
    356              /* Check the parameters */
    357              assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    358              
    359              /* Configure the USART6 clock source */
    360              __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
   \   000002D0   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   000002D4   0x6800             LDR      R0,[R0, #+0]
   \   000002D6   0xF430 0x6040      BICS     R0,R0,#0xC00
   \   000002DA   0x6DA1             LDR      R1,[R4, #+88]
   \   000002DC   0x4308             ORRS     R0,R1,R0
   \   000002DE   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   000002E2   0x6008             STR      R0,[R1, #+0]
    361            }
    362          
    363            /*-------------------------------------- UART7 Configuration -----------------------------------*/
    364            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
   \                     ??HAL_RCCEx_PeriphCLKConfig_24: (+1)
   \   000002E4   0x6820             LDR      R0,[R4, #+0]
   \   000002E6   0x04C0             LSLS     R0,R0,#+19
   \   000002E8   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_25
    365            {
    366              /* Check the parameters */
    367              assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    368              
    369              /* Configure the UART7 clock source */
    370              __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
   \   000002EA   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   000002EE   0x6800             LDR      R0,[R0, #+0]
   \   000002F0   0xF430 0x5040      BICS     R0,R0,#0x3000
   \   000002F4   0x6DE1             LDR      R1,[R4, #+92]
   \   000002F6   0x4308             ORRS     R0,R1,R0
   \   000002F8   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   000002FC   0x6008             STR      R0,[R1, #+0]
    371            }
    372          
    373            /*-------------------------------------- UART8 Configuration -----------------------------------*/
    374            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
   \                     ??HAL_RCCEx_PeriphCLKConfig_25: (+1)
   \   000002FE   0x6820             LDR      R0,[R4, #+0]
   \   00000300   0x0480             LSLS     R0,R0,#+18
   \   00000302   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_26
    375            {
    376              /* Check the parameters */
    377              assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    378              
    379              /* Configure the UART8 clock source */
    380              __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
   \   00000304   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   00000308   0x6800             LDR      R0,[R0, #+0]
   \   0000030A   0xF430 0x4040      BICS     R0,R0,#0xC000
   \   0000030E   0x6E21             LDR      R1,[R4, #+96]
   \   00000310   0x4308             ORRS     R0,R1,R0
   \   00000312   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   00000316   0x6008             STR      R0,[R1, #+0]
    381            }
    382            
    383            /*--------------------------------------- CEC Configuration -----------------------------------*/
    384            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
   \                     ??HAL_RCCEx_PeriphCLKConfig_26: (+1)
   \   00000318   0x6820             LDR      R0,[R4, #+0]
   \   0000031A   0x0240             LSLS     R0,R0,#+9
   \   0000031C   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_27
    385            {
    386              /* Check the parameters */
    387              assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    388              
    389              /* Configure the CEC clock source */
    390              __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
   \   0000031E   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   00000322   0x6800             LDR      R0,[R0, #+0]
   \   00000324   0xF030 0x6080      BICS     R0,R0,#0x4000000
   \   00000328   0x6FA1             LDR      R1,[R4, #+120]
   \   0000032A   0x4308             ORRS     R0,R1,R0
   \   0000032C   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   00000330   0x6008             STR      R0,[R1, #+0]
    391            }
    392            
    393            /*-------------------------------------- CK48 Configuration -----------------------------------*/
    394            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
   \                     ??HAL_RCCEx_PeriphCLKConfig_27: (+1)
   \   00000332   0x6820             LDR      R0,[R4, #+0]
   \   00000334   0x0280             LSLS     R0,R0,#+10
   \   00000336   0xD50F             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_28
    395            {
    396              /* Check the parameters */
    397              assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    398              
    399              /* Configure the CLK48 source */
    400              __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
   \   00000338   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   0000033C   0x6800             LDR      R0,[R0, #+0]
   \   0000033E   0xF030 0x6000      BICS     R0,R0,#0x8000000
   \   00000342   0x6FE1             LDR      R1,[R4, #+124]
   \   00000344   0x4308             ORRS     R0,R1,R0
   \   00000346   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   0000034A   0x6008             STR      R0,[R1, #+0]
    401          
    402              /* Enable the PLLSAI when it's used as clock source for CK48 */
    403              if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
   \   0000034C   0x6FE0             LDR      R0,[R4, #+124]
   \   0000034E   0xF1B0 0x6F00      CMP      R0,#+134217728
   \   00000352   0xD101             BNE.N    ??HAL_RCCEx_PeriphCLKConfig_28
    404              {
    405                pllsaiused = 1; 
   \   00000354   0x2001             MOVS     R0,#+1
   \   00000356   0x4681             MOV      R9,R0
    406              }
    407            }
    408          
    409            /*-------------------------------------- LTDC Configuration -----------------------------------*/
    410          #if defined(STM32F756xx) || defined(STM32F746xx)
    411            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
   \                     ??HAL_RCCEx_PeriphCLKConfig_28: (+1)
   \   00000358   0x7820             LDRB     R0,[R4, #+0]
   \   0000035A   0x0700             LSLS     R0,R0,#+28
   \   0000035C   0xD501             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_29
    412            {
    413              pllsaiused = 1; 
   \   0000035E   0x2001             MOVS     R0,#+1
   \   00000360   0x4681             MOV      R9,R0
    414            }
    415          #endif /* STM32F756xx || STM32F746xx */
    416            /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
    417            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
   \                     ??HAL_RCCEx_PeriphCLKConfig_29: (+1)
   \   00000362   0x6820             LDR      R0,[R4, #+0]
   \   00000364   0x0340             LSLS     R0,R0,#+13
   \   00000366   0xD509             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_30
    418            {
    419              /* Check the parameters */
    420              assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    421              
    422              /* Configure the LTPIM1 clock source */
    423              __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
   \   00000368   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   0000036C   0x6800             LDR      R0,[R0, #+0]
   \   0000036E   0xF030 0x7040      BICS     R0,R0,#0x3000000
   \   00000372   0x6F61             LDR      R1,[R4, #+116]
   \   00000374   0x4308             ORRS     R0,R1,R0
   \   00000376   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   0000037A   0x6008             STR      R0,[R1, #+0]
    424             }
    425            
    426            /*------------------------------------- SDMMC Configuration ------------------------------------*/
    427            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
   \                     ??HAL_RCCEx_PeriphCLKConfig_30: (+1)
   \   0000037C   0x6820             LDR      R0,[R4, #+0]
   \   0000037E   0x0200             LSLS     R0,R0,#+8
   \   00000380   0xD50A             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_31
    428            {
    429              /* Check the parameters */
    430              assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    431              
    432              /* Configure the SDMMC1 clock source */
    433              __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
   \   00000382   0x.... 0x....      LDR.W    R0,??DataTable2_6  ;; 0x40023890
   \   00000386   0x6800             LDR      R0,[R0, #+0]
   \   00000388   0xF030 0x5080      BICS     R0,R0,#0x10000000
   \   0000038C   0xF8D4 0x1080      LDR      R1,[R4, #+128]
   \   00000390   0x4308             ORRS     R0,R1,R0
   \   00000392   0x.... 0x....      LDR.W    R1,??DataTable2_6  ;; 0x40023890
   \   00000396   0x6008             STR      R0,[R1, #+0]
    434            }
    435          
    436            /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
    437            /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
    438            if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
   \                     ??HAL_RCCEx_PeriphCLKConfig_31: (+1)
   \   00000398   0xF1B8 0x0F01      CMP      R8,#+1
   \   0000039C   0xD004             BEQ.N    ??HAL_RCCEx_PeriphCLKConfig_32
   \   0000039E   0x6820             LDR      R0,[R4, #+0]
   \   000003A0   0xF1B0 0x7F00      CMP      R0,#+33554432
   \   000003A4   0xF040 0x80C3      BNE.W    ??HAL_RCCEx_PeriphCLKConfig_33
    439            {
    440              /* Disable the PLLI2S */
    441              __HAL_RCC_PLLI2S_DISABLE();  
   \                     ??HAL_RCCEx_PeriphCLKConfig_32: (+1)
   \   000003A8   0x.... 0x....      LDR.W    R0,??DataTable2_7  ;; 0x40023800
   \   000003AC   0x6800             LDR      R0,[R0, #+0]
   \   000003AE   0xF030 0x6080      BICS     R0,R0,#0x4000000
   \   000003B2   0x.... 0x....      LDR.W    R1,??DataTable2_7  ;; 0x40023800
   \   000003B6   0x6008             STR      R0,[R1, #+0]
    442              
    443              /* Get Start Tick*/
    444              tickstart = HAL_GetTick();
   \   000003B8   0x.... 0x....      BL       HAL_GetTick
   \   000003BC   0x0005             MOVS     R5,R0
    445              
    446              /* Wait till PLLI2S is disabled */
    447              while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
   \                     ??HAL_RCCEx_PeriphCLKConfig_34: (+1)
   \   000003BE   0x.... 0x....      LDR.W    R0,??DataTable2_7  ;; 0x40023800
   \   000003C2   0x6800             LDR      R0,[R0, #+0]
   \   000003C4   0x0100             LSLS     R0,R0,#+4
   \   000003C6   0xD506             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_35
    448              {
    449                if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
   \   000003C8   0x.... 0x....      BL       HAL_GetTick
   \   000003CC   0x1B40             SUBS     R0,R0,R5
   \   000003CE   0x2865             CMP      R0,#+101
   \   000003D0   0xD3F5             BCC.N    ??HAL_RCCEx_PeriphCLKConfig_34
    450                {
    451                  /* return in case of Timeout detected */         
    452                  return HAL_TIMEOUT;
   \   000003D2   0x2003             MOVS     R0,#+3
   \   000003D4   0xE166             B.N      ??HAL_RCCEx_PeriphCLKConfig_9
    453                }
    454              }
    455              
    456              /* check for common PLLI2S Parameters */
    457              assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    458                
    459              /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    460              if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
   \                     ??HAL_RCCEx_PeriphCLKConfig_35: (+1)
   \   000003D6   0x7820             LDRB     R0,[R4, #+0]
   \   000003D8   0x07C0             LSLS     R0,R0,#+31
   \   000003DA   0xD523             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_36
   \   000003DC   0x6B60             LDR      R0,[R4, #+52]
   \   000003DE   0x2800             CMP      R0,#+0
   \   000003E0   0xD120             BNE.N    ??HAL_RCCEx_PeriphCLKConfig_36
    461              {
    462                /* check for Parameters */
    463                assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    464              
    465                /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
    466                tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
   \   000003E2   0x.... 0x....      LDR.W    R0,??DataTable2_8  ;; 0x40023884
   \   000003E6   0x6800             LDR      R0,[R0, #+0]
   \   000003E8   0xF410 0x3040      ANDS     R0,R0,#0x30000
   \   000003EC   0xF44F 0x4140      MOV      R1,#+49152
   \   000003F0   0xFAB1 0xF181      CLZ      R1,R1
   \   000003F4   0x40C8             LSRS     R0,R0,R1
   \   000003F6   0x0006             MOVS     R6,R0
    467                tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
   \   000003F8   0x.... 0x....      LDR.W    R0,??DataTable2_8  ;; 0x40023884
   \   000003FC   0x6800             LDR      R0,[R0, #+0]
   \   000003FE   0xF010 0x6070      ANDS     R0,R0,#0xF000000
   \   00000402   0x21F0             MOVS     R1,#+240
   \   00000404   0xFAB1 0xF181      CLZ      R1,R1
   \   00000408   0x40C8             LSRS     R0,R0,R1
   \   0000040A   0x0007             MOVS     R7,R0
    468                /* Configure the PLLI2S division factors */
    469                /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
    470                /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    471                __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
   \   0000040C   0x6860             LDR      R0,[R4, #+4]
   \   0000040E   0x0431             LSLS     R1,R6,#+16
   \   00000410   0xEA51 0x1080      ORRS     R0,R1,R0, LSL #+6
   \   00000414   0xEA50 0x6007      ORRS     R0,R0,R7, LSL #+24
   \   00000418   0x68A1             LDR      R1,[R4, #+8]
   \   0000041A   0xEA50 0x7001      ORRS     R0,R0,R1, LSL #+28
   \   0000041E   0x.... 0x....      LDR.W    R1,??DataTable2_8  ;; 0x40023884
   \   00000422   0x6008             STR      R0,[R1, #+0]
    472              }
    473                  
    474              /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    475              if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
    476                 ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
   \                     ??HAL_RCCEx_PeriphCLKConfig_36: (+1)
   \   00000424   0x6820             LDR      R0,[R4, #+0]
   \   00000426   0x0300             LSLS     R0,R0,#+12
   \   00000428   0xD503             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_37
   \   0000042A   0x6BE0             LDR      R0,[R4, #+60]
   \   0000042C   0xF5B0 0x1F80      CMP      R0,#+1048576
   \   00000430   0xD006             BEQ.N    ??HAL_RCCEx_PeriphCLKConfig_38
   \                     ??HAL_RCCEx_PeriphCLKConfig_37: (+1)
   \   00000432   0x6820             LDR      R0,[R4, #+0]
   \   00000434   0x02C0             LSLS     R0,R0,#+11
   \   00000436   0xD52F             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_39
   \   00000438   0x6C20             LDR      R0,[R4, #+64]
   \   0000043A   0xF5B0 0x0F80      CMP      R0,#+4194304
   \   0000043E   0xD12B             BNE.N    ??HAL_RCCEx_PeriphCLKConfig_39
    477              {
    478                /* Check for PLLI2S Parameters */
    479                assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
    480                /* Check for PLLI2S/DIVQ parameters */
    481                assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
    482                      
    483                /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
    484                tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
   \                     ??HAL_RCCEx_PeriphCLKConfig_38: (+1)
   \   00000440   0x.... 0x....      LDR.W    R0,??DataTable2_8  ;; 0x40023884
   \   00000444   0x6800             LDR      R0,[R0, #+0]
   \   00000446   0xF410 0x3040      ANDS     R0,R0,#0x30000
   \   0000044A   0xF44F 0x4140      MOV      R1,#+49152
   \   0000044E   0xFAB1 0xF181      CLZ      R1,R1
   \   00000452   0x40C8             LSRS     R0,R0,R1
   \   00000454   0x0006             MOVS     R6,R0
    485                tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
   \   00000456   0x.... 0x....      LDR.W    R0,??DataTable2_8  ;; 0x40023884
   \   0000045A   0x6800             LDR      R0,[R0, #+0]
   \   0000045C   0xF010 0x40E0      ANDS     R0,R0,#0x70000000
   \   00000460   0x210E             MOVS     R1,#+14
   \   00000462   0xFAB1 0xF181      CLZ      R1,R1
   \   00000466   0x40C8             LSRS     R0,R0,R1
   \   00000468   0x0007             MOVS     R7,R0
    486                /* Configure the PLLI2S division factors */      
    487                /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    488                /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    489                /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    490                __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
   \   0000046A   0x6860             LDR      R0,[R4, #+4]
   \   0000046C   0x0431             LSLS     R1,R6,#+16
   \   0000046E   0xEA51 0x1080      ORRS     R0,R1,R0, LSL #+6
   \   00000472   0x68E1             LDR      R1,[R4, #+12]
   \   00000474   0xEA50 0x6001      ORRS     R0,R0,R1, LSL #+24
   \   00000478   0xEA50 0x7007      ORRS     R0,R0,R7, LSL #+28
   \   0000047C   0x.... 0x....      LDR.W    R1,??DataTable2_8  ;; 0x40023884
   \   00000480   0x6008             STR      R0,[R1, #+0]
    491             
    492                /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
    493                __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
   \   00000482   0x.... 0x....      LDR.W    R0,??DataTable2_1  ;; 0x4002388c
   \   00000486   0x6800             LDR      R0,[R0, #+0]
   \   00000488   0x0940             LSRS     R0,R0,#+5
   \   0000048A   0x0140             LSLS     R0,R0,#+5
   \   0000048C   0x6A61             LDR      R1,[R4, #+36]
   \   0000048E   0x1E49             SUBS     R1,R1,#+1
   \   00000490   0x4308             ORRS     R0,R1,R0
   \   00000492   0x.... 0x....      LDR.W    R1,??DataTable2_1  ;; 0x4002388c
   \   00000496   0x6008             STR      R0,[R1, #+0]
    494              }          
    495          
    496              /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    497              if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
   \                     ??HAL_RCCEx_PeriphCLKConfig_39: (+1)
   \   00000498   0x6820             LDR      R0,[R4, #+0]
   \   0000049A   0x01C0             LSLS     R0,R0,#+7
   \   0000049C   0xD51F             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_40
    498              {
    499                /* check for Parameters */
    500                assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
    501               
    502               /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
    503                tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
   \   0000049E   0x.... 0x....      LDR.W    R0,??DataTable2_8  ;; 0x40023884
   \   000004A2   0x6800             LDR      R0,[R0, #+0]
   \   000004A4   0xF010 0x6070      ANDS     R0,R0,#0xF000000
   \   000004A8   0x21F0             MOVS     R1,#+240
   \   000004AA   0xFAB1 0xF181      CLZ      R1,R1
   \   000004AE   0x40C8             LSRS     R0,R0,R1
   \   000004B0   0x0006             MOVS     R6,R0
    504                tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
   \   000004B2   0x.... 0x....      LDR.W    R0,??DataTable2_8  ;; 0x40023884
   \   000004B6   0x6800             LDR      R0,[R0, #+0]
   \   000004B8   0xF010 0x40E0      ANDS     R0,R0,#0x70000000
   \   000004BC   0x210E             MOVS     R1,#+14
   \   000004BE   0xFAB1 0xF181      CLZ      R1,R1
   \   000004C2   0x40C8             LSRS     R0,R0,R1
   \   000004C4   0x0007             MOVS     R7,R0
    505                /* Configure the PLLI2S division factors */
    506                /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
    507                /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
    508                __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
   \   000004C6   0x6860             LDR      R0,[R4, #+4]
   \   000004C8   0x6921             LDR      R1,[R4, #+16]
   \   000004CA   0x0409             LSLS     R1,R1,#+16
   \   000004CC   0xEA51 0x1080      ORRS     R0,R1,R0, LSL #+6
   \   000004D0   0xEA50 0x6006      ORRS     R0,R0,R6, LSL #+24
   \   000004D4   0xEA50 0x7007      ORRS     R0,R0,R7, LSL #+28
   \   000004D8   0x.... 0x....      LDR.W    R1,??DataTable2_8  ;; 0x40023884
   \   000004DC   0x6008             STR      R0,[R1, #+0]
    509              }  
    510                   
    511              /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    512              if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
   \                     ??HAL_RCCEx_PeriphCLKConfig_40: (+1)
   \   000004DE   0x6820             LDR      R0,[R4, #+0]
   \   000004E0   0x0180             LSLS     R0,R0,#+6
   \   000004E2   0xD50D             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_41
    513              {
    514                /* Check for Parameters */
    515                assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    516                assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
    517                assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    518                assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
    519          
    520                /* Configure the PLLI2S division factors */
    521                /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
    522                /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
    523                __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
   \   000004E4   0x6860             LDR      R0,[R4, #+4]
   \   000004E6   0x6921             LDR      R1,[R4, #+16]
   \   000004E8   0x0409             LSLS     R1,R1,#+16
   \   000004EA   0xEA51 0x1080      ORRS     R0,R1,R0, LSL #+6
   \   000004EE   0x68E1             LDR      R1,[R4, #+12]
   \   000004F0   0xEA50 0x6001      ORRS     R0,R0,R1, LSL #+24
   \   000004F4   0x68A1             LDR      R1,[R4, #+8]
   \   000004F6   0xEA50 0x7001      ORRS     R0,R0,R1, LSL #+28
   \   000004FA   0x.... 0x....      LDR.W    R1,??DataTable2_8  ;; 0x40023884
   \   000004FE   0x6008             STR      R0,[R1, #+0]
    524              } 
    525              
    526              /* Enable the PLLI2S */
    527              __HAL_RCC_PLLI2S_ENABLE();
   \                     ??HAL_RCCEx_PeriphCLKConfig_41: (+1)
   \   00000500   0x.... 0x....      LDR.W    R0,??DataTable2_7  ;; 0x40023800
   \   00000504   0x6800             LDR      R0,[R0, #+0]
   \   00000506   0xF050 0x6080      ORRS     R0,R0,#0x4000000
   \   0000050A   0x.... 0x....      LDR.W    R1,??DataTable2_7  ;; 0x40023800
   \   0000050E   0x6008             STR      R0,[R1, #+0]
    528              
    529              /* Get Start Tick*/
    530              tickstart = HAL_GetTick();
   \   00000510   0x.... 0x....      BL       HAL_GetTick
   \   00000514   0x0005             MOVS     R5,R0
    531          
    532              /* Wait till PLLI2S is ready */
    533              while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
   \                     ??HAL_RCCEx_PeriphCLKConfig_42: (+1)
   \   00000516   0x.... 0x....      LDR.W    R0,??DataTable2_7  ;; 0x40023800
   \   0000051A   0x6800             LDR      R0,[R0, #+0]
   \   0000051C   0x0100             LSLS     R0,R0,#+4
   \   0000051E   0xD406             BMI.N    ??HAL_RCCEx_PeriphCLKConfig_33
    534              {
    535                if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
   \   00000520   0x.... 0x....      BL       HAL_GetTick
   \   00000524   0x1B40             SUBS     R0,R0,R5
   \   00000526   0x2865             CMP      R0,#+101
   \   00000528   0xD3F5             BCC.N    ??HAL_RCCEx_PeriphCLKConfig_42
    536                {
    537                  /* return in case of Timeout detected */                
    538                  return HAL_TIMEOUT;
   \   0000052A   0x2003             MOVS     R0,#+3
   \   0000052C   0xE0BA             B.N      ??HAL_RCCEx_PeriphCLKConfig_9
    539                }
    540              }
    541            } 
    542            
    543            /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
    544            /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
    545            if(pllsaiused == 1)
   \                     ??HAL_RCCEx_PeriphCLKConfig_33: (+1)
   \   0000052E   0xF1B9 0x0F01      CMP      R9,#+1
   \   00000532   0xF040 0x80B6      BNE.W    ??HAL_RCCEx_PeriphCLKConfig_43
    546            {
    547              /* Disable PLLSAI Clock */
    548              __HAL_RCC_PLLSAI_DISABLE(); 
   \   00000536   0x.... 0x....      LDR.W    R0,??DataTable2_7  ;; 0x40023800
   \   0000053A   0x6800             LDR      R0,[R0, #+0]
   \   0000053C   0xF030 0x5080      BICS     R0,R0,#0x10000000
   \   00000540   0x.... 0x....      LDR.W    R1,??DataTable2_7  ;; 0x40023800
   \   00000544   0x6008             STR      R0,[R1, #+0]
    549              
    550              /* Get Start Tick*/
    551              tickstart = HAL_GetTick();
   \   00000546   0x.... 0x....      BL       HAL_GetTick
   \   0000054A   0x0005             MOVS     R5,R0
    552          
    553              /* Wait till PLLSAI is disabled */
    554              while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
   \                     ??HAL_RCCEx_PeriphCLKConfig_44: (+1)
   \   0000054C   0x.... 0x....      LDR.W    R0,??DataTable2_7  ;; 0x40023800
   \   00000550   0x6800             LDR      R0,[R0, #+0]
   \   00000552   0x0080             LSLS     R0,R0,#+2
   \   00000554   0xD506             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_45
    555              {
    556                if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
   \   00000556   0x.... 0x....      BL       HAL_GetTick
   \   0000055A   0x1B40             SUBS     R0,R0,R5
   \   0000055C   0x2865             CMP      R0,#+101
   \   0000055E   0xD3F5             BCC.N    ??HAL_RCCEx_PeriphCLKConfig_44
    557                { 
    558                  /* return in case of Timeout detected */        
    559                  return HAL_TIMEOUT;
   \   00000560   0x2003             MOVS     R0,#+3
   \   00000562   0xE09F             B.N      ??HAL_RCCEx_PeriphCLKConfig_9
    560                }
    561              } 
    562              
    563              /* Check the PLLSAI division factors */
    564              assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    565              
    566              /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    567              if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
    568                 ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
   \                     ??HAL_RCCEx_PeriphCLKConfig_45: (+1)
   \   00000564   0x6820             LDR      R0,[R4, #+0]
   \   00000566   0x0300             LSLS     R0,R0,#+12
   \   00000568   0xD502             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_46
   \   0000056A   0x6BE0             LDR      R0,[R4, #+60]
   \   0000056C   0x2800             CMP      R0,#+0
   \   0000056E   0xD005             BEQ.N    ??HAL_RCCEx_PeriphCLKConfig_47
   \                     ??HAL_RCCEx_PeriphCLKConfig_46: (+1)
   \   00000570   0x6820             LDR      R0,[R4, #+0]
   \   00000572   0x02C0             LSLS     R0,R0,#+11
   \   00000574   0xD52F             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_48
   \   00000576   0x6C20             LDR      R0,[R4, #+64]
   \   00000578   0x2800             CMP      R0,#+0
   \   0000057A   0xD12C             BNE.N    ??HAL_RCCEx_PeriphCLKConfig_48
    569              {
    570                /* check for PLLSAIQ Parameter */
    571                assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
    572                /* check for PLLSAI/DIVQ Parameter */
    573                assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    574              
    575                /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
    576                tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
   \                     ??HAL_RCCEx_PeriphCLKConfig_47: (+1)
   \   0000057C   0x.... 0x....      LDR.W    R0,??DataTable2_9  ;; 0x40023888
   \   00000580   0x6800             LDR      R0,[R0, #+0]
   \   00000582   0xF410 0x3040      ANDS     R0,R0,#0x30000
   \   00000586   0xF44F 0x4140      MOV      R1,#+49152
   \   0000058A   0xFAB1 0xF181      CLZ      R1,R1
   \   0000058E   0x40C8             LSRS     R0,R0,R1
   \   00000590   0x0006             MOVS     R6,R0
    577                tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
   \   00000592   0x.... 0x....      LDR.W    R0,??DataTable2_9  ;; 0x40023888
   \   00000596   0x6800             LDR      R0,[R0, #+0]
   \   00000598   0xF010 0x40E0      ANDS     R0,R0,#0x70000000
   \   0000059C   0x210E             MOVS     R1,#+14
   \   0000059E   0xFAB1 0xF181      CLZ      R1,R1
   \   000005A2   0x40C8             LSRS     R0,R0,R1
   \   000005A4   0x0007             MOVS     R7,R0
    578                /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    579                /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    580                /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    581                __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
   \   000005A6   0x6960             LDR      R0,[R4, #+20]
   \   000005A8   0x0431             LSLS     R1,R6,#+16
   \   000005AA   0xEA51 0x1080      ORRS     R0,R1,R0, LSL #+6
   \   000005AE   0x69A1             LDR      R1,[R4, #+24]
   \   000005B0   0xEA50 0x6001      ORRS     R0,R0,R1, LSL #+24
   \   000005B4   0xEA50 0x7007      ORRS     R0,R0,R7, LSL #+28
   \   000005B8   0x.... 0x....      LDR.W    R1,??DataTable2_9  ;; 0x40023888
   \   000005BC   0x6008             STR      R0,[R1, #+0]
    582                
    583                /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
    584                __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
   \   000005BE   0x.... 0x....      LDR.W    R0,??DataTable2_1  ;; 0x4002388c
   \   000005C2   0x6800             LDR      R0,[R0, #+0]
   \   000005C4   0xF430 0x50F8      BICS     R0,R0,#0x1F00
   \   000005C8   0x6AA1             LDR      R1,[R4, #+40]
   \   000005CA   0x1E49             SUBS     R1,R1,#+1
   \   000005CC   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   000005D0   0x.... 0x....      LDR.W    R1,??DataTable2_1  ;; 0x4002388c
   \   000005D4   0x6008             STR      R0,[R1, #+0]
    585              }           
    586          
    587              /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    588              /* In Case of PLLI2S is selected as source clock for CK48 */ 
    589              if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
   \                     ??HAL_RCCEx_PeriphCLKConfig_48: (+1)
   \   000005D6   0x6820             LDR      R0,[R4, #+0]
   \   000005D8   0x0280             LSLS     R0,R0,#+10
   \   000005DA   0xD523             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_49
   \   000005DC   0x6FE0             LDR      R0,[R4, #+124]
   \   000005DE   0xF1B0 0x6F00      CMP      R0,#+134217728
   \   000005E2   0xD11F             BNE.N    ??HAL_RCCEx_PeriphCLKConfig_49
    590              {
    591                /* check for Parameters */
    592                assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
    593                /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
    594                tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
   \   000005E4   0x.... 0x....      LDR.W    R0,??DataTable2_9  ;; 0x40023888
   \   000005E8   0x6800             LDR      R0,[R0, #+0]
   \   000005EA   0xF010 0x6070      ANDS     R0,R0,#0xF000000
   \   000005EE   0x21F0             MOVS     R1,#+240
   \   000005F0   0xFAB1 0xF181      CLZ      R1,R1
   \   000005F4   0x40C8             LSRS     R0,R0,R1
   \   000005F6   0x0006             MOVS     R6,R0
    595                tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
   \   000005F8   0x.... 0x....      LDR.W    R0,??DataTable2_9  ;; 0x40023888
   \   000005FC   0x6800             LDR      R0,[R0, #+0]
   \   000005FE   0xF010 0x40E0      ANDS     R0,R0,#0x70000000
   \   00000602   0x210E             MOVS     R1,#+14
   \   00000604   0xFAB1 0xF181      CLZ      R1,R1
   \   00000608   0x40C8             LSRS     R0,R0,R1
   \   0000060A   0x0007             MOVS     R7,R0
    596                
    597                /* Configure the PLLSAI division factors */
    598                /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
    599                /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
    600                __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
   \   0000060C   0x6960             LDR      R0,[R4, #+20]
   \   0000060E   0x6A21             LDR      R1,[R4, #+32]
   \   00000610   0x0409             LSLS     R1,R1,#+16
   \   00000612   0xEA51 0x1080      ORRS     R0,R1,R0, LSL #+6
   \   00000616   0xEA50 0x6006      ORRS     R0,R0,R6, LSL #+24
   \   0000061A   0xEA50 0x7007      ORRS     R0,R0,R7, LSL #+28
   \   0000061E   0x.... 0x....      LDR.W    R1,??DataTable2_9  ;; 0x40023888
   \   00000622   0x6008             STR      R0,[R1, #+0]
    601              }        
    602          
    603          #if defined(STM32F756xx) || defined(STM32F746xx)
    604              /*---------------------------- LTDC configuration -------------------------------*/
    605              if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
   \                     ??HAL_RCCEx_PeriphCLKConfig_49: (+1)
   \   00000624   0x7820             LDRB     R0,[R4, #+0]
   \   00000626   0x0700             LSLS     R0,R0,#+28
   \   00000628   0xD527             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_50
    606              {
    607                assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
    608                assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
    609                
    610                /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
    611                tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
   \   0000062A   0x.... 0x....      LDR.W    R0,??DataTable2_9  ;; 0x40023888
   \   0000062E   0x6800             LDR      R0,[R0, #+0]
   \   00000630   0xF010 0x6070      ANDS     R0,R0,#0xF000000
   \   00000634   0x21F0             MOVS     R1,#+240
   \   00000636   0xFAB1 0xF181      CLZ      R1,R1
   \   0000063A   0x40C8             LSRS     R0,R0,R1
   \   0000063C   0x0006             MOVS     R6,R0
    612                tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
   \   0000063E   0x.... 0x....      LDR.W    R0,??DataTable2_9  ;; 0x40023888
   \   00000642   0x6800             LDR      R0,[R0, #+0]
   \   00000644   0xF410 0x3040      ANDS     R0,R0,#0x30000
   \   00000648   0xF44F 0x4140      MOV      R1,#+49152
   \   0000064C   0xFAB1 0xF181      CLZ      R1,R1
   \   00000650   0x40C8             LSRS     R0,R0,R1
   \   00000652   0x0007             MOVS     R7,R0
    613                
    614                /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    615                /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    616                /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
    617                __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
   \   00000654   0x6960             LDR      R0,[R4, #+20]
   \   00000656   0x0439             LSLS     R1,R7,#+16
   \   00000658   0xEA51 0x1080      ORRS     R0,R1,R0, LSL #+6
   \   0000065C   0xEA50 0x6006      ORRS     R0,R0,R6, LSL #+24
   \   00000660   0x69E1             LDR      R1,[R4, #+28]
   \   00000662   0xEA50 0x7001      ORRS     R0,R0,R1, LSL #+28
   \   00000666   0x....             LDR.N    R1,??DataTable2_9  ;; 0x40023888
   \   00000668   0x6008             STR      R0,[R1, #+0]
    618                
    619                /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
    620                __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
   \   0000066A   0x....             LDR.N    R0,??DataTable2_1  ;; 0x4002388c
   \   0000066C   0x6800             LDR      R0,[R0, #+0]
   \   0000066E   0xF430 0x3040      BICS     R0,R0,#0x30000
   \   00000672   0x6AE1             LDR      R1,[R4, #+44]
   \   00000674   0x4308             ORRS     R0,R1,R0
   \   00000676   0x....             LDR.N    R1,??DataTable2_1  ;; 0x4002388c
   \   00000678   0x6008             STR      R0,[R1, #+0]
    621              }    
    622          #endif /* STM32F756xx || STM32F746xx */  
    623          
    624              /* Enable PLLSAI Clock */
    625              __HAL_RCC_PLLSAI_ENABLE();
   \                     ??HAL_RCCEx_PeriphCLKConfig_50: (+1)
   \   0000067A   0x....             LDR.N    R0,??DataTable2_7  ;; 0x40023800
   \   0000067C   0x6800             LDR      R0,[R0, #+0]
   \   0000067E   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000682   0x....             LDR.N    R1,??DataTable2_7  ;; 0x40023800
   \   00000684   0x6008             STR      R0,[R1, #+0]
    626              
    627              /* Get Start Tick*/
    628              tickstart = HAL_GetTick();
   \   00000686   0x.... 0x....      BL       HAL_GetTick
   \   0000068A   0x0005             MOVS     R5,R0
    629          
    630              /* Wait till PLLSAI is ready */
    631              while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
   \                     ??HAL_RCCEx_PeriphCLKConfig_51: (+1)
   \   0000068C   0x....             LDR.N    R0,??DataTable2_7  ;; 0x40023800
   \   0000068E   0x6800             LDR      R0,[R0, #+0]
   \   00000690   0x0080             LSLS     R0,R0,#+2
   \   00000692   0xD406             BMI.N    ??HAL_RCCEx_PeriphCLKConfig_43
    632              {
    633                if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
   \   00000694   0x.... 0x....      BL       HAL_GetTick
   \   00000698   0x1B40             SUBS     R0,R0,R5
   \   0000069A   0x2865             CMP      R0,#+101
   \   0000069C   0xD3F6             BCC.N    ??HAL_RCCEx_PeriphCLKConfig_51
    634                { 
    635                  /* return in case of Timeout detected */        
    636                  return HAL_TIMEOUT;
   \   0000069E   0x2003             MOVS     R0,#+3
   \   000006A0   0xE000             B.N      ??HAL_RCCEx_PeriphCLKConfig_9
    637                }
    638              }
    639            }
    640            return HAL_OK;
   \                     ??HAL_RCCEx_PeriphCLKConfig_43: (+1)
   \   000006A2   0x2000             MOVS     R0,#+0
   \                     ??HAL_RCCEx_PeriphCLKConfig_9: (+1)
   \   000006A4   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    641          }
    642          
    643          /**
    644            * @brief  Get the RCC_PeriphCLKInitTypeDef according to the internal
    645            *         RCC configuration registers.
    646            * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
    647            * @retval None
    648            */

   \                                 In section .text, align 2, keep-with-next
    649          void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
    650          {
    651            uint32_t tempreg = 0;
   \                     HAL_RCCEx_GetPeriphCLKConfig: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
    652            
    653            /* Set all possible values for the extended clock type parameter------------*/
    654            PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1 |\
    655                                                  RCC_PERIPHCLK_SAI1     | RCC_PERIPHCLK_SAI2     |\
    656                                                  RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      |\
    657                                                  RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_I2C4     |\
    658                                                  RCC_PERIPHCLK_I2C1     | RCC_PERIPHCLK_I2C2     |\
    659                                                  RCC_PERIPHCLK_I2C3     | RCC_PERIPHCLK_USART1   |\
    660                                                  RCC_PERIPHCLK_USART2   | RCC_PERIPHCLK_USART3   |\
    661                                                  RCC_PERIPHCLK_UART4    | RCC_PERIPHCLK_UART5    |\
    662                                                  RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
    663                                                  RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1    |\
    664                                                  RCC_PERIPHCLK_CLK48;          
   \   00000002   0x....             LDR.N    R2,??DataTable2_10  ;; 0xfffff1
   \   00000004   0x6002             STR      R2,[R0, #+0]
    665            
    666            /* Get the PLLI2S Clock configuration -----------------------------------------------*/
    667            PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
   \   00000006   0x....             LDR.N    R2,??DataTable2_8  ;; 0x40023884
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0xF647 0x73C0      MOVW     R3,#+32704
   \   0000000E   0x401A             ANDS     R2,R3,R2
   \   00000010   0x....             LDR.N    R3,??DataTable2_11  ;; 0x3fe0000
   \   00000012   0xFAB3 0xF383      CLZ      R3,R3
   \   00000016   0x40DA             LSRS     R2,R2,R3
   \   00000018   0x6042             STR      R2,[R0, #+4]
    668            PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
   \   0000001A   0x....             LDR.N    R2,??DataTable2_8  ;; 0x40023884
   \   0000001C   0x6812             LDR      R2,[R2, #+0]
   \   0000001E   0xF412 0x3240      ANDS     R2,R2,#0x30000
   \   00000022   0xF44F 0x4340      MOV      R3,#+49152
   \   00000026   0xFAB3 0xF383      CLZ      R3,R3
   \   0000002A   0x40DA             LSRS     R2,R2,R3
   \   0000002C   0x6102             STR      R2,[R0, #+16]
    669            PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
   \   0000002E   0x....             LDR.N    R2,??DataTable2_8  ;; 0x40023884
   \   00000030   0x6812             LDR      R2,[R2, #+0]
   \   00000032   0xF012 0x6270      ANDS     R2,R2,#0xF000000
   \   00000036   0x23F0             MOVS     R3,#+240
   \   00000038   0xFAB3 0xF383      CLZ      R3,R3
   \   0000003C   0x40DA             LSRS     R2,R2,R3
   \   0000003E   0x60C2             STR      R2,[R0, #+12]
    670            PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
   \   00000040   0x....             LDR.N    R2,??DataTable2_8  ;; 0x40023884
   \   00000042   0x6812             LDR      R2,[R2, #+0]
   \   00000044   0xF012 0x42E0      ANDS     R2,R2,#0x70000000
   \   00000048   0x230E             MOVS     R3,#+14
   \   0000004A   0xFAB3 0xF383      CLZ      R3,R3
   \   0000004E   0x40DA             LSRS     R2,R2,R3
   \   00000050   0x6082             STR      R2,[R0, #+8]
    671            
    672            /* Get the PLLSAI Clock configuration -----------------------------------------------*/
    673            PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
   \   00000052   0x....             LDR.N    R2,??DataTable2_9  ;; 0x40023888
   \   00000054   0x6812             LDR      R2,[R2, #+0]
   \   00000056   0xF647 0x73C0      MOVW     R3,#+32704
   \   0000005A   0x401A             ANDS     R2,R3,R2
   \   0000005C   0x....             LDR.N    R3,??DataTable2_11  ;; 0x3fe0000
   \   0000005E   0xFAB3 0xF383      CLZ      R3,R3
   \   00000062   0x40DA             LSRS     R2,R2,R3
   \   00000064   0x6142             STR      R2,[R0, #+20]
    674            PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
   \   00000066   0x....             LDR.N    R2,??DataTable2_9  ;; 0x40023888
   \   00000068   0x6812             LDR      R2,[R2, #+0]
   \   0000006A   0xF412 0x3240      ANDS     R2,R2,#0x30000
   \   0000006E   0xF44F 0x4340      MOV      R3,#+49152
   \   00000072   0xFAB3 0xF383      CLZ      R3,R3
   \   00000076   0x40DA             LSRS     R2,R2,R3
   \   00000078   0x6202             STR      R2,[R0, #+32]
    675            PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
   \   0000007A   0x....             LDR.N    R2,??DataTable2_9  ;; 0x40023888
   \   0000007C   0x6812             LDR      R2,[R2, #+0]
   \   0000007E   0xF012 0x6270      ANDS     R2,R2,#0xF000000
   \   00000082   0x23F0             MOVS     R3,#+240
   \   00000084   0xFAB3 0xF383      CLZ      R3,R3
   \   00000088   0x40DA             LSRS     R2,R2,R3
   \   0000008A   0x6182             STR      R2,[R0, #+24]
    676            PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
   \   0000008C   0x....             LDR.N    R2,??DataTable2_9  ;; 0x40023888
   \   0000008E   0x6812             LDR      R2,[R2, #+0]
   \   00000090   0xF012 0x42E0      ANDS     R2,R2,#0x70000000
   \   00000094   0x230E             MOVS     R3,#+14
   \   00000096   0xFAB3 0xF383      CLZ      R3,R3
   \   0000009A   0x40DA             LSRS     R2,R2,R3
   \   0000009C   0x61C2             STR      R2,[R0, #+28]
    677            
    678            /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
    679            PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
   \   0000009E   0x....             LDR.N    R2,??DataTable2_1  ;; 0x4002388c
   \   000000A0   0x6812             LDR      R2,[R2, #+0]
   \   000000A2   0xF012 0x021F      ANDS     R2,R2,#0x1F
   \   000000A6   0xF05F 0x4378      MOVS     R3,#-134217728
   \   000000AA   0xFAB3 0xF383      CLZ      R3,R3
   \   000000AE   0x40DA             LSRS     R2,R2,R3
   \   000000B0   0x6242             STR      R2,[R0, #+36]
    680            PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
   \   000000B2   0x....             LDR.N    R2,??DataTable2_1  ;; 0x4002388c
   \   000000B4   0x6812             LDR      R2,[R2, #+0]
   \   000000B6   0xF412 0x52F8      ANDS     R2,R2,#0x1F00
   \   000000BA   0xF45F 0x0378      MOVS     R3,#+16252928
   \   000000BE   0xFAB3 0xF383      CLZ      R3,R3
   \   000000C2   0x40DA             LSRS     R2,R2,R3
   \   000000C4   0x6282             STR      R2,[R0, #+40]
    681            PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
   \   000000C6   0x....             LDR.N    R2,??DataTable2_1  ;; 0x4002388c
   \   000000C8   0x6812             LDR      R2,[R2, #+0]
   \   000000CA   0xF412 0x3240      ANDS     R2,R2,#0x30000
   \   000000CE   0xF44F 0x4340      MOV      R3,#+49152
   \   000000D2   0xFAB3 0xF383      CLZ      R3,R3
   \   000000D6   0x40DA             LSRS     R2,R2,R3
   \   000000D8   0x62C2             STR      R2,[R0, #+44]
    682          
    683            /* Get the SAI1 clock configuration ----------------------------------------------*/
    684            PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
   \   000000DA   0x....             LDR.N    R2,??DataTable2_1  ;; 0x4002388c
   \   000000DC   0x6812             LDR      R2,[R2, #+0]
   \   000000DE   0xF412 0x1240      ANDS     R2,R2,#0x300000
   \   000000E2   0x63C2             STR      R2,[R0, #+60]
    685            
    686            /* Get the SAI2 clock configuration ----------------------------------------------*/
    687            PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
   \   000000E4   0x....             LDR.N    R2,??DataTable2_1  ;; 0x4002388c
   \   000000E6   0x6812             LDR      R2,[R2, #+0]
   \   000000E8   0xF412 0x0240      ANDS     R2,R2,#0xC00000
   \   000000EC   0x6402             STR      R2,[R0, #+64]
    688            
    689            /* Get the I2S clock configuration ------------------------------------------*/
    690            PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
   \   000000EE   0x....             LDR.N    R2,??DataTable2  ;; 0x40023808
   \   000000F0   0x6812             LDR      R2,[R2, #+0]
   \   000000F2   0xF412 0x0200      ANDS     R2,R2,#0x800000
   \   000000F6   0x6342             STR      R2,[R0, #+52]
    691            
    692            /* Get the I2C1 clock configuration ------------------------------------------*/
    693            PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
   \   000000F8   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   000000FA   0x6812             LDR      R2,[R2, #+0]
   \   000000FC   0xF412 0x3240      ANDS     R2,R2,#0x30000
   \   00000100   0x6642             STR      R2,[R0, #+100]
    694            
    695            /* Get the I2C2 clock configuration ------------------------------------------*/
    696            PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
   \   00000102   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   00000104   0x6812             LDR      R2,[R2, #+0]
   \   00000106   0xF412 0x2240      ANDS     R2,R2,#0xC0000
   \   0000010A   0x6682             STR      R2,[R0, #+104]
    697            
    698            /* Get the I2C3 clock configuration ------------------------------------------*/
    699            PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
   \   0000010C   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   0000010E   0x6812             LDR      R2,[R2, #+0]
   \   00000110   0xF412 0x1240      ANDS     R2,R2,#0x300000
   \   00000114   0x66C2             STR      R2,[R0, #+108]
    700            
    701            /* Get the I2C4 clock configuration ------------------------------------------*/
    702            PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
   \   00000116   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   00000118   0x6812             LDR      R2,[R2, #+0]
   \   0000011A   0xF412 0x0240      ANDS     R2,R2,#0xC00000
   \   0000011E   0x6702             STR      R2,[R0, #+112]
    703            
    704            /* Get the USART1 clock configuration ------------------------------------------*/
    705            PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
   \   00000120   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   00000122   0x6812             LDR      R2,[R2, #+0]
   \   00000124   0xF012 0x0203      ANDS     R2,R2,#0x3
   \   00000128   0x6442             STR      R2,[R0, #+68]
    706            
    707            /* Get the USART2 clock configuration ------------------------------------------*/
    708            PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
   \   0000012A   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   0000012C   0x6812             LDR      R2,[R2, #+0]
   \   0000012E   0xF012 0x020C      ANDS     R2,R2,#0xC
   \   00000132   0x6482             STR      R2,[R0, #+72]
    709            
    710            /* Get the USART3 clock configuration ------------------------------------------*/
    711            PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
   \   00000134   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   00000136   0x6812             LDR      R2,[R2, #+0]
   \   00000138   0xF012 0x0230      ANDS     R2,R2,#0x30
   \   0000013C   0x64C2             STR      R2,[R0, #+76]
    712            
    713            /* Get the UART4 clock configuration ------------------------------------------*/
    714            PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
   \   0000013E   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   00000140   0x6812             LDR      R2,[R2, #+0]
   \   00000142   0xF012 0x02C0      ANDS     R2,R2,#0xC0
   \   00000146   0x6502             STR      R2,[R0, #+80]
    715            
    716            /* Get the UART5 clock configuration ------------------------------------------*/
    717            PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
   \   00000148   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   0000014A   0x6812             LDR      R2,[R2, #+0]
   \   0000014C   0xF412 0x7240      ANDS     R2,R2,#0x300
   \   00000150   0x6542             STR      R2,[R0, #+84]
    718            
    719            /* Get the USART6 clock configuration ------------------------------------------*/
    720            PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
   \   00000152   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   00000154   0x6812             LDR      R2,[R2, #+0]
   \   00000156   0xF412 0x6240      ANDS     R2,R2,#0xC00
   \   0000015A   0x6582             STR      R2,[R0, #+88]
    721            
    722            /* Get the UART7 clock configuration ------------------------------------------*/
    723            PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
   \   0000015C   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   0000015E   0x6812             LDR      R2,[R2, #+0]
   \   00000160   0xF412 0x5240      ANDS     R2,R2,#0x3000
   \   00000164   0x65C2             STR      R2,[R0, #+92]
    724            
    725            /* Get the UART8 clock configuration ------------------------------------------*/
    726            PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
   \   00000166   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   00000168   0x6812             LDR      R2,[R2, #+0]
   \   0000016A   0xF412 0x4240      ANDS     R2,R2,#0xC000
   \   0000016E   0x6602             STR      R2,[R0, #+96]
    727            
    728            /* Get the LPTIM1 clock configuration ------------------------------------------*/
    729            PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
   \   00000170   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   00000172   0x6812             LDR      R2,[R2, #+0]
   \   00000174   0xF012 0x7240      ANDS     R2,R2,#0x3000000
   \   00000178   0x6742             STR      R2,[R0, #+116]
    730            
    731            /* Get the CEC clock configuration -----------------------------------------------*/
    732            PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
   \   0000017A   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   0000017C   0x6812             LDR      R2,[R2, #+0]
   \   0000017E   0xF012 0x6280      ANDS     R2,R2,#0x4000000
   \   00000182   0x6782             STR      R2,[R0, #+120]
    733            
    734            /* Get the CK48 clock configuration -----------------------------------------------*/
    735            PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
   \   00000184   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   00000186   0x6812             LDR      R2,[R2, #+0]
   \   00000188   0xF012 0x6200      ANDS     R2,R2,#0x8000000
   \   0000018C   0x67C2             STR      R2,[R0, #+124]
    736          
    737            /* Get the SDMMC clock configuration -----------------------------------------------*/
    738            PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
   \   0000018E   0x....             LDR.N    R2,??DataTable2_6  ;; 0x40023890
   \   00000190   0x6812             LDR      R2,[R2, #+0]
   \   00000192   0xF012 0x5280      ANDS     R2,R2,#0x10000000
   \   00000196   0xF8C0 0x2080      STR      R2,[R0, #+128]
    739            
    740            /* Get the RTC Clock configuration -----------------------------------------------*/
    741            tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
   \   0000019A   0x....             LDR.N    R2,??DataTable2  ;; 0x40023808
   \   0000019C   0x6812             LDR      R2,[R2, #+0]
   \   0000019E   0xF412 0x12F8      ANDS     R2,R2,#0x1F0000
   \   000001A2   0x0011             MOVS     R1,R2
    742            PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
   \   000001A4   0x....             LDR.N    R2,??DataTable2_2  ;; 0x40023870
   \   000001A6   0x6812             LDR      R2,[R2, #+0]
   \   000001A8   0xF412 0x7240      ANDS     R2,R2,#0x300
   \   000001AC   0x430A             ORRS     R2,R2,R1
   \   000001AE   0x6302             STR      R2,[R0, #+48]
    743            
    744            /* Get the TIM Prescaler configuration --------------------------------------------*/
    745            if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
   \   000001B0   0x....             LDR.N    R2,??DataTable2_1  ;; 0x4002388c
   \   000001B2   0x6812             LDR      R2,[R2, #+0]
   \   000001B4   0x01D2             LSLS     R2,R2,#+7
   \   000001B6   0xD402             BMI.N    ??HAL_RCCEx_GetPeriphCLKConfig_0
    746            {
    747              PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
   \   000001B8   0x2200             MOVS     R2,#+0
   \   000001BA   0x6382             STR      R2,[R0, #+56]
   \   000001BC   0xE002             B.N      ??HAL_RCCEx_GetPeriphCLKConfig_1
    748            }
    749            else
    750            {
    751              PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
   \                     ??HAL_RCCEx_GetPeriphCLKConfig_0: (+1)
   \   000001BE   0xF05F 0x7280      MOVS     R2,#+16777216
   \   000001C2   0x6382             STR      R2,[R0, #+56]
    752            }
    753          }
   \                     ??HAL_RCCEx_GetPeriphCLKConfig_1: (+1)
   \   000001C4   0x4770             BX       LR               ;; return
    754          
    755          /**
    756            * @brief  Return the peripheral clock frequency for a given peripheral(SAI..) 
    757            * @note   Return 0 if peripheral clock identifier not managed by this API
    758            * @param  PeriphClk: Peripheral clock identifier
    759            *         This parameter can be one of the following values:
    760            *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
    761            *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
    762            * @retval Frequency in KHz
    763            */

   \                                 In section .text, align 2, keep-with-next
    764          uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
    765          {
   \                     HAL_RCCEx_GetPeriphCLKFreq: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0001             MOVS     R1,R0
    766            uint32_t tmpreg = 0;
   \   00000004   0x2200             MOVS     R2,#+0
    767            /* This variable used to store the SAI clock frequency (value in Hz) */
    768            uint32_t frequency = 0;
   \   00000006   0x2000             MOVS     R0,#+0
    769            /* This variable used to store the VCO Input (value in Hz) */
    770            uint32_t vcoinput = 0;
   \   00000008   0x2300             MOVS     R3,#+0
    771            /* This variable used to store the SAI clock source */
    772            uint32_t saiclocksource = 0;
   \   0000000A   0x2400             MOVS     R4,#+0
    773            if ((PeriphClk == RCC_PERIPHCLK_SAI1) || (PeriphClk == RCC_PERIPHCLK_SAI2))
   \   0000000C   0xF5B1 0x2F00      CMP      R1,#+524288
   \   00000010   0xD002             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_0
   \   00000012   0xF5B1 0x1F80      CMP      R1,#+1048576
   \   00000016   0xD16F             BNE.N    ??HAL_RCCEx_GetPeriphCLKFreq_1
    774            {
    775              saiclocksource = RCC->DCKCFGR1;   
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_0: (+1)
   \   00000018   0x....             LDR.N    R5,??DataTable2_1  ;; 0x4002388c
   \   0000001A   0x682D             LDR      R5,[R5, #+0]
   \   0000001C   0x002C             MOVS     R4,R5
    776              saiclocksource &= (RCC_DCKCFGR1_SAI1SEL | RCC_DCKCFGR1_SAI2SEL);
   \   0000001E   0xF414 0x0470      ANDS     R4,R4,#0xF00000
    777              switch (saiclocksource)
   \   00000022   0x0025             MOVS     R5,R4
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD00C             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_2
   \   00000028   0xF5B5 0x1F80      CMP      R5,#+1048576
   \   0000002C   0xD035             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_3
   \   0000002E   0xF5B5 0x1F00      CMP      R5,#+2097152
   \   00000032   0xD05E             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_4
   \   00000034   0xF5B5 0x0F80      CMP      R5,#+4194304
   \   00000038   0xD02F             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_3
   \   0000003A   0xF5B5 0x0F00      CMP      R5,#+8388608
   \   0000003E   0xD058             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_4
   \   00000040   0xE05A             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_5
    778              {
    779              case 0: /* PLLSAI is the clock source for SAI*/ 
    780                {
    781                  /* Configure the PLLSAI division factor */
    782                  /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
    783                  if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_2: (+1)
   \   00000042   0x....             LDR.N    R5,??DataTable2_12  ;; 0x40023804
   \   00000044   0x682D             LDR      R5,[R5, #+0]
   \   00000046   0x026D             LSLS     R5,R5,#+9
   \   00000048   0xD408             BMI.N    ??HAL_RCCEx_GetPeriphCLKFreq_6
    784                  {
    785                    /* In Case the PLL Source is HSI (Internal Clock) */
    786                    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
   \   0000004A   0x....             LDR.N    R5,??DataTable2_13  ;; 0xf42400
   \   0000004C   0x....             LDR.N    R6,??DataTable2_12  ;; 0x40023804
   \   0000004E   0x6836             LDR      R6,[R6, #+0]
   \   00000050   0xF016 0x063F      ANDS     R6,R6,#0x3F
   \   00000054   0xFBB5 0xF5F6      UDIV     R5,R5,R6
   \   00000058   0x002B             MOVS     R3,R5
   \   0000005A   0xE007             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_7
    787                  }
    788                  else
    789                  {
    790                    /* In Case the PLL Source is HSE (External Clock) */
    791                    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_6: (+1)
   \   0000005C   0x....             LDR.N    R5,??DataTable2_14  ;; 0x17d7840
   \   0000005E   0x....             LDR.N    R6,??DataTable2_12  ;; 0x40023804
   \   00000060   0x6836             LDR      R6,[R6, #+0]
   \   00000062   0xF016 0x063F      ANDS     R6,R6,#0x3F
   \   00000066   0xFBB5 0xF5F6      UDIV     R5,R5,R6
   \   0000006A   0x002B             MOVS     R3,R5
    792                  }   
    793                  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    794                  /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    795                  tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_7: (+1)
   \   0000006C   0x....             LDR.N    R5,??DataTable2_9  ;; 0x40023888
   \   0000006E   0x682D             LDR      R5,[R5, #+0]
   \   00000070   0xF3C5 0x6503      UBFX     R5,R5,#+24,#+4
   \   00000074   0x002A             MOVS     R2,R5
    796                  frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
   \   00000076   0x....             LDR.N    R5,??DataTable2_9  ;; 0x40023888
   \   00000078   0x682D             LDR      R5,[R5, #+0]
   \   0000007A   0xF3C5 0x1588      UBFX     R5,R5,#+6,#+9
   \   0000007E   0xFB05 0xF503      MUL      R5,R5,R3
   \   00000082   0xFBB5 0xF5F2      UDIV     R5,R5,R2
   \   00000086   0x0028             MOVS     R0,R5
    797                  
    798                  /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    799                  tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
   \   00000088   0x....             LDR.N    R5,??DataTable2_1  ;; 0x4002388c
   \   0000008A   0x682D             LDR      R5,[R5, #+0]
   \   0000008C   0xF3C5 0x2504      UBFX     R5,R5,#+8,#+5
   \   00000090   0x1C6D             ADDS     R5,R5,#+1
   \   00000092   0x002A             MOVS     R2,R5
    800                  frequency = frequency/(tmpreg); 
   \   00000094   0xFBB0 0xF0F2      UDIV     R0,R0,R2
    801                  break;       
   \   00000098   0xE02E             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_1
    802                }
    803              case RCC_DCKCFGR1_SAI1SEL_0: /* PLLI2S is the clock source for SAI*/
    804              case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI*/
    805                {  
    806                  /* Configure the PLLI2S division factor */
    807                  /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
    808                  if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_3: (+1)
   \   0000009A   0x....             LDR.N    R5,??DataTable2_12  ;; 0x40023804
   \   0000009C   0x682D             LDR      R5,[R5, #+0]
   \   0000009E   0x026D             LSLS     R5,R5,#+9
   \   000000A0   0xD408             BMI.N    ??HAL_RCCEx_GetPeriphCLKFreq_8
    809                  {
    810                    /* In Case the PLL Source is HSI (Internal Clock) */
    811                    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
   \   000000A2   0x....             LDR.N    R5,??DataTable2_13  ;; 0xf42400
   \   000000A4   0x....             LDR.N    R6,??DataTable2_12  ;; 0x40023804
   \   000000A6   0x6836             LDR      R6,[R6, #+0]
   \   000000A8   0xF016 0x063F      ANDS     R6,R6,#0x3F
   \   000000AC   0xFBB5 0xF5F6      UDIV     R5,R5,R6
   \   000000B0   0x002B             MOVS     R3,R5
   \   000000B2   0xE007             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_9
    812                  }
    813                  else
    814                  {
    815                    /* In Case the PLL Source is HSE (External Clock) */
    816                    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_8: (+1)
   \   000000B4   0x....             LDR.N    R5,??DataTable2_14  ;; 0x17d7840
   \   000000B6   0x....             LDR.N    R6,??DataTable2_12  ;; 0x40023804
   \   000000B8   0x6836             LDR      R6,[R6, #+0]
   \   000000BA   0xF016 0x063F      ANDS     R6,R6,#0x3F
   \   000000BE   0xFBB5 0xF5F6      UDIV     R5,R5,R6
   \   000000C2   0x002B             MOVS     R3,R5
    817                  }
    818                  
    819                  /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    820                  /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    821                  tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_9: (+1)
   \   000000C4   0x....             LDR.N    R5,??DataTable2_8  ;; 0x40023884
   \   000000C6   0x682D             LDR      R5,[R5, #+0]
   \   000000C8   0xF3C5 0x6503      UBFX     R5,R5,#+24,#+4
   \   000000CC   0x002A             MOVS     R2,R5
    822                  frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
   \   000000CE   0x....             LDR.N    R5,??DataTable2_8  ;; 0x40023884
   \   000000D0   0x682D             LDR      R5,[R5, #+0]
   \   000000D2   0xF3C5 0x1588      UBFX     R5,R5,#+6,#+9
   \   000000D6   0xFB05 0xF503      MUL      R5,R5,R3
   \   000000DA   0xFBB5 0xF5F2      UDIV     R5,R5,R2
   \   000000DE   0x0028             MOVS     R0,R5
    823                  
    824                  /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    825                  tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
   \   000000E0   0x....             LDR.N    R5,??DataTable2_1  ;; 0x4002388c
   \   000000E2   0x682D             LDR      R5,[R5, #+0]
   \   000000E4   0xF015 0x051F      ANDS     R5,R5,#0x1F
   \   000000E8   0x1C6D             ADDS     R5,R5,#+1
   \   000000EA   0x002A             MOVS     R2,R5
    826                  frequency = frequency/(tmpreg);
   \   000000EC   0xFBB0 0xF0F2      UDIV     R0,R0,R2
    827                  break;
   \   000000F0   0xE002             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_1
    828                }
    829              case RCC_DCKCFGR1_SAI1SEL_1: /* External clock is the clock source for SAI*/
    830              case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI*/
    831                {
    832                  frequency = EXTERNAL_CLOCK_VALUE;
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_4: (+1)
   \   000000F2   0x....             LDR.N    R5,??DataTable2_15  ;; 0xbb8000
   \   000000F4   0x0028             MOVS     R0,R5
    833                  break;       
   \   000000F6   0xE7FF             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_1
    834                }
    835              default :
    836                {
    837                  break;
    838                }
    839              }
    840            }
    841            return frequency;
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_5: (+1)
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_1: (+1)
   \   000000F8   0xBC70             POP      {R4-R6}
   \   000000FA   0x4770             BX       LR               ;; return
    842          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40023808         DC32     0x40023808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4002388C         DC32     0x4002388c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40023870         DC32     0x40023870

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x40007000         DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x0FFFFCFF         DC32     0xffffcff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40023890         DC32     0x40023890

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x40023800         DC32     0x40023800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x40023884         DC32     0x40023884

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x40023888         DC32     0x40023888

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x00FFFFF1         DC32     0xfffff1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x03FE0000         DC32     0x3fe0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x40023804         DC32     0x40023804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x00F42400         DC32     0xf42400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x017D7840         DC32     0x17d7840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x00BB8000         DC32     0xbb8000
    843          
    844          /**
    845            * @}
    846            */
    847          
    848          /**
    849            * @}
    850            */
    851          
    852          #endif /* HAL_RCC_MODULE_ENABLED */
    853          /**
    854            * @}
    855            */
    856          
    857          /**
    858            * @}
    859            */
    860          
    861          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_RCCEx_GetPeriphCLKConfig
      12   HAL_RCCEx_GetPeriphCLKFreq
      32   HAL_RCCEx_PeriphCLKConfig
        32   -> HAL_GetTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
     454  HAL_RCCEx_GetPeriphCLKConfig
     252  HAL_RCCEx_GetPeriphCLKFreq
    1704  HAL_RCCEx_PeriphCLKConfig

 
 2 474 bytes in section .text
 
 2 474 bytes of CODE memory

Errors: none
Warnings: none
