###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       20/Feb/2016  20:48:46
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\main.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\main.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
      1          /* Includes ------------------------------------------------------------------*/
      2          #include "main.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void SCB_EnableICache(void)
   \                     SCB_EnableICache: (+1)
   \   00000000   0xF3BF 0x8F4F      DSB      
   \   00000004   0xF3BF 0x8F6F      ISB      
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable14  ;; 0xe000ef50
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0xe000ed14
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable16  ;; 0xe000ed14
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0xF3BF 0x8F4F      DSB      
   \   00000024   0xF3BF 0x8F6F      ISB      
   \   00000028   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void SCB_EnableDCache(void)
   \                     SCB_EnableDCache: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable15  ;; 0xe000ed84
   \   00000008   0x6023             STR      R3,[R4, #+0]
   \   0000000A   0xF3BF 0x8F4F      DSB      
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable15_1  ;; 0xe000ed80
   \   00000012   0x681B             LDR      R3,[R3, #+0]
   \   00000014   0x0018             MOVS     R0,R3
   \   00000016   0xF3C0 0x334E      UBFX     R3,R0,#+13,#+15
   \   0000001A   0x0019             MOVS     R1,R3
   \                     ??SCB_EnableDCache_0: (+1)
   \   0000001C   0xF3C0 0x03C9      UBFX     R3,R0,#+3,#+10
   \   00000020   0x001A             MOVS     R2,R3
   \                     ??SCB_EnableDCache_1: (+1)
   \   00000022   0xF643 0x73E0      MOVW     R3,#+16352
   \   00000026   0xEA13 0x1341      ANDS     R3,R3,R1, LSL #+5
   \   0000002A   0xEA53 0x7382      ORRS     R3,R3,R2, LSL #+30
   \   0000002E   0x.... 0x....      LDR.W    R4,??DataTable16_1  ;; 0xe000ef60
   \   00000032   0x6023             STR      R3,[R4, #+0]
   \   00000034   0x0013             MOVS     R3,R2
   \   00000036   0x1E5A             SUBS     R2,R3,#+1
   \   00000038   0x2B00             CMP      R3,#+0
   \   0000003A   0xD1F2             BNE.N    ??SCB_EnableDCache_1
   \   0000003C   0x000B             MOVS     R3,R1
   \   0000003E   0x1E59             SUBS     R1,R3,#+1
   \   00000040   0x2B00             CMP      R3,#+0
   \   00000042   0xD1EB             BNE.N    ??SCB_EnableDCache_0
   \   00000044   0xF3BF 0x8F4F      DSB      
   \   00000048   0x.... 0x....      LDR.W    R3,??DataTable16  ;; 0xe000ed14
   \   0000004C   0x681B             LDR      R3,[R3, #+0]
   \   0000004E   0xF453 0x3380      ORRS     R3,R3,#0x10000
   \   00000052   0x.... 0x....      LDR.W    R4,??DataTable16  ;; 0xe000ed14
   \   00000056   0x6023             STR      R3,[R4, #+0]
   \   00000058   0xF3BF 0x8F4F      DSB      
   \   0000005C   0xF3BF 0x8F6F      ISB      
   \   00000060   0xBC10             POP      {R4}
   \   00000062   0x4770             BX       LR               ;; return
      3          #include "DSP.h"
      4          //#include "waveplayer.h"
      5          #include "waverecorder.h"
      6          #include "stm32f7xx_hal_usart.h"
      7          #include "pdm_filter.h"
      8          #include "arm_math.h"
      9          #include <stdio.h>
     10          
     11          
     12          /* Private typedef -----------------------------------------------------------*/
     13          /* Private define ------------------------------------------------------------*/
     14          /* Private macro -------------------------------------------------------------*/
     15          
     16          
     17          /* EXTERN VARIABLES ----------------------------------------------------------*/
     18          //extern __IO AUDIO_IN_BufferTypeDef Buffer1, Buffer2, BufferCtlRecIn;
     19          //AUDIO_IN_BufferTypeDef Buffer3;
     20          
     21          
     22          
     23          
     24          extern Mic_Array_Data Buffer1,Buffer2,Buffer3;
     25          
     26          extern __IO uint8_t XferCplt;
     27          extern __IO AUDIO_IN_BufferTypeDef BufferCtlRecIn;
     28          extern DMA_HandleTypeDef     DmaHandle;
     29          
     30          extern SAI_HandleTypeDef         haudio_out_sai;
     31          extern uint8_t WaveRecord_flgIni;
     32          extern uint32_t EnergySound;
     33          extern I2C_HandleTypeDef hi2c2;
     34          extern __IO uint16_t cntStrt;
     35          extern __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple;
     36          extern __IO   uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
     37          extern USBD_AUDIO_ItfTypeDef  USBD_AUDIO_fops;
     38          /* GLOBAL VARIABLE -----------------------------------------------------------*/

   \                                 In section .bss, align 4
     39          USBH_HandleTypeDef hUSBHost;
   \                     hUSBHost:
   \   00000000                      DS8 696

   \                                 In section .bss, align 4
     40          USBD_HandleTypeDef hUSBDDevice;
   \                     hUSBDDevice:
   \   00000000                      DS8 548

   \                                 In section .bss, align 1
     41          AUDIO_ApplicationTypeDef appli_state = APPLICATION_IDLE;//APPLICATION_IDLE
   \                     appli_state:
   \   00000000                      DS8 1
     42          

   \                                 In section .bss, align 4
     43          UART_HandleTypeDef huart3;
   \                     huart3:
   \   00000000                      DS8 112

   \                                 In section .bss, align 4
     44          SPI_HandleTypeDef hspi4;
   \                     hspi4:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
     45          GPIO_InitTypeDef GPIO_INS;
   \                     GPIO_INS:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     46          Mic_Array_Coef_f FacMic;
   \                     FacMic:
   \   00000000                      DS8 24
     47          	  

   \                                 In section .data, align 4
     48          uint8_t  pI2CData[20]= {0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190};
   \                     pI2CData:
   \   00000000   0x00 0x0A          DC8 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150
   \              0x14 0x1E    
   \              0x28 0x32    
   \              0x3C 0x46    
   \              0x50 0x5A    
   \              0x64 0x6E    
   \              0x78 0x82    
   \              0x8C 0x96    
   \   00000010   0xA0 0xAA          DC8 160, 170, 180, 190
   \              0xB4 0xBE    

   \                                 In section .bss, align 4
     49          uint8_t  pI2CRx[10];
   \                     pI2CRx:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     50          uint16_t BufferTest[2*AUDIO_OUT_BUFFER_SIZE];
   \                     BufferTest:
   \   00000000                      DS8 4096

   \                                 In section .bss, align 4
     51          uint16_t bufferSum[AUDIO_OUT_BUFFER_SIZE];
   \                     bufferSum:
   \   00000000                      DS8 2048
     52          

   \                                 In section .bss, align 2
     53          __IO uint16_t  WaveRec_idxSens4,WaveRec_idxSens3,I2S2_idxTmp;
   \                     WaveRec_idxSens4:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     WaveRec_idxSens3:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S2_idxTmp:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     54          __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
   \                     WaveRec_idxSens1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     WaveRec_idxSens2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     55          __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
   \                     WaveRec_idxSens5:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     WaveRec_idxSens6:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     56          __IO uint16_t  idxSPI5DataBuf3;
   \                     idxSPI5DataBuf3:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     57          __IO uint16_t  cntRisingEXTI;
   \                     cntRisingEXTI:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     58          __IO uint8_t   btnSW1,btnSW2;
   \                     btnSW1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     btnSW2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     59          __IO uint8_t flgDlyUpd; 
   \                     flgDlyUpd:
   \   00000000                      DS8 1
     60          
     61          /* Buffer used for reception */

   \                                 In section .bss, align 4
     62          uint8_t aRxBuffer[1024];
   \                     aRxBuffer:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 1
     63          uint8_t idxDec,stFrstFrmStore;
   \                     idxDec:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     stFrstFrmStore:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     64          int16_t DeltaBuf1,DeltaBuf1Old;
   \                     DeltaBuf1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     DeltaBuf1Old:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     65          int16_t idxLatency13,idxLatency12,idxLatency14,idxLatency25,idxLatency63,idxLatency78;
   \                     idxLatency13:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency14:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency25:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency63:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency78:
   \   00000000                      DS8 2
     66          

   \                                 In section .bss, align 1
     67          __IO char flg10ms;
   \                     flg10ms:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     68          uint8_t flgSTAIni;
   \                     flgSTAIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     69          uint16_t cntTime200;
   \                     cntTime200:
   \   00000000                      DS8 2
     70          

   \                                 In section .data, align 1
     71          uint8_t buffer_switch = 1;
   \                     buffer_switch:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
     72          uint8_t Command_index=1;
   \                     Command_index:
   \   00000000   0x01               DC8 1
     73          
     74          #if MAIN_CRSCORR
     75          arm_rfft_instance_q15 RealFFT_Ins, RealIFFT_Ins;
     76          #endif
     77          

   \                                 In section .bss, align 4
     78          arm_cfft_radix4_instance_f32 SS1,SS2,SS3,SS4,ISS; 
   \                     SS1:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     SS2:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     SS3:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     SS4:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     ISS:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     79          arm_rfft_instance_f32 S1,S2,S3,S4,IS;
   \                     `S1`:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     `S2`:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     `S3`:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     `S4`:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     IS:
   \   00000000                      DS8 24
     80          
     81          //arm_rfft_fast_instance_f32 S1,S2,S3,S4,IS;
     82          
     83          
     84          #if (DEBUG)
     85          uint8_t  pUARTBuf[128];
     86          uint32_t Main_CoefMor;
     87          uint8_t stDir,flgS2,flgS3,flgS4,flgS2Flt,flgS3Flt,flgS4Flt;
     88          uint8_t flgS2Ins,flgS3Ins,flgS4Ins;
     89          #endif
     90          
     91          /* Private function prototypes -----------------------------------------------*/
     92          static void SystemClock_Config(void);
     93          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id);
     94          static void CPU_CACHE_Enable(void);
     95          
     96          
     97          
     98          
     99          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c);
    100          void MX_I2C2_Init(void);
    101          void USART3_Init(void);
    102          void ReadSTASeq(uint8_t Addr, uint8_t *pBufOut,uint8_t Len );
    103          void WriteSTAByte(uint8_t Addr, uint8_t *pBufIn, uint8_t len);
    104          void SPI5_CallBack(SPI_HandleTypeDef *hspi);
    105          
    106          
    107          
    108          /*--------------INLINE FUNCTION-----------------------------------------------*/
    109          

   \                                 In section .text, align 2, keep-with-next
    110          inline static void FFT_Update(void)
    111          {
   \                     FFT_Update: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    112          
    113                PDM2PCMSDO78();
   \   00000002   0x.... 0x....      BL       PDM2PCMSDO78
    114                /* Hafl buffer is filled in by I2S data stream in */
    115                if((flgDlyUpd==0))
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable16_2
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xF040 0x80A6      BNE.W    ??FFT_Update_0
    116                {
    117                      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
    118                      FactorUpd(&FacMic); 
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable16_3
   \   00000016   0x.... 0x....      BL       FactorUpd
    119                      //STM_EVAL_LEDOn(LED3);
    120                      flgDlyUpd = 1; 
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    121          /*-------------------------------------------------------------------------------------------------------------
    122          			  
    123          	Sequence  Record Data                     Processing Data                 Player Data
    124          			  
    125          	1-------  Buffer1                         Buffer2                         Buffer3
    126          			  
    127          	2-------  Buffer3                         Buffer1                         Buffer2		  
    128          			  
    129          	3-------  Buffer2                         Buffer3                         Buffer1 
    130           ---------------------------------------------------------------------------------------------------------------*/
    131                      /* Processing Data */
    132          			switch (buffer_switch)
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable16_4
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD003             BEQ.N    ??FFT_Update_1
   \   0000002C   0x2802             CMP      R0,#+2
   \   0000002E   0xD063             BEQ.N    ??FFT_Update_2
   \   00000030   0xD331             BCC.N    ??FFT_Update_3
   \   00000032   0xE092             B.N      ??FFT_Update_4
    133          			{             
    134          			    case BUF1_PLAY:
    135          #if MAIN_CRSCORR
    136          					for (uint16_t i=0; i<(_MAX_SS/_MAX_SS);i++)
    137          					{
    138          					    //uint16_t i=0;
    139          						arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3[i*128],    (q15_t *)&bufferFFT[i*256]);
    140          						arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3_1[i*128],   (q15_t *)&bufferFFT_1[i*256]);
    141          					
    142          						arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],2*128);
    143          					
    144          						//for (uint16_t j=0; j<256;j++)
    145          						//{
    146          						//	  bufferFFTSum[i*256+j]<<=6;
    147          						//}
    148          						
    149          						arm_rfft_q15(&RealIFFT_Ins,    (q15_t *)&bufferFFTSum[i*256],    (q15_t *)&bufferSum[i*128]);
    150          					}
    151          #elif MAIN_FFT
    152                              /* Summing in Buffer3 */
    153                              Delay_Sum_FFT(&Buffer3,&FacMic,(int16_t *)bufferSum, 512);
    154          			 	   //FFT_SUM((int16_t *)buffer3, (int16_t * )buffer3_1,fbuffer, 1024);	
    155          			 	   
    156          
    157          #else
    158          
    159                              //idxLatency13 = CrssCor(Buffer3.bufMIC1, Buffer3.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2);
    160                              //idxLatency12 = CrssCor(Buffer3.bufMIC1, Buffer3.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    161          
    162          					idxLatency78 = CrssCor(Buffer3.bufMIC7, Buffer3.bufMIC8, AUDIO_OUT_BUFFER_SIZE);
   \                     ??FFT_Update_1: (+1)
   \   00000034   0xF44F 0x6280      MOV      R2,#+1024
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable16_5
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000040   0x.... 0x....      BL       CrssCor
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable16_7
   \   00000048   0x8008             STRH     R0,[R1, #+0]
    163                              idxLatency14 = CrssCor(Buffer3.bufMIC1, Buffer3.bufMIC4, AUDIO_OUT_BUFFER_SIZE);
   \   0000004A   0xF44F 0x6280      MOV      R2,#+1024
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable16_8
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   00000056   0x.... 0x....      BL       CrssCor
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   0000005E   0x8008             STRH     R0,[R1, #+0]
    164          					idxLatency25 = CrssCor(Buffer3.bufMIC2, Buffer3.bufMIC5, AUDIO_OUT_BUFFER_SIZE);
   \   00000060   0xF44F 0x6280      MOV      R2,#+1024
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable16_11
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable16_12
   \   0000006C   0x.... 0x....      BL       CrssCor
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable16_13
   \   00000074   0x8008             STRH     R0,[R1, #+0]
    165          					idxLatency63 = CrssCor(Buffer3.bufMIC6, Buffer3.bufMIC3, AUDIO_OUT_BUFFER_SIZE);
   \   00000076   0xF44F 0x6280      MOV      R2,#+1024
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable16_14
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable16_15
   \   00000082   0x.... 0x....      BL       CrssCor
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   0000008A   0x8008             STRH     R0,[R1, #+0]
    166          
    167          
    168                              SumDelay(&Buffer3);
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   00000090   0x.... 0x....      BL       SumDelay
    169          #endif
    170          					
    171          					break;
   \   00000094   0xE061             B.N      ??FFT_Update_5
    172          				case BUF2_PLAY:
    173          
    174          #if MAIN_CRSCORR
    175                               for (uint16_t i=0; i<(_MAX_SS/128);i++)
    176                               { 
    177                                   //uint16_t i=0;
    178          				         arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1[i*128],(q15_t *)&bufferFFT[i*256]);
    179          	           		     arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    180          
    181          						 arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],
    182          						 	          2*128);
    183          
    184          						 //for (uint16_t j=0; j<256;j++)
    185          						 //{
    186          						//	   bufferFFTSum[i*256+j]<<=6;
    187          						 //}
    188          
    189          						 
    190          	                     arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    191                               }
    192          #elif MAIN_FFT
    193          					/* Summing in Buffer1 */	 
    194          					Delay_Sum_FFT(&Buffer1, &FacMic,(int16_t * )bufferSum,512);
    195          					//FFT_SUM((int16_t *)buffer1, (int16_t * )buffer1_1,fbuffer, 1024);
    196          
    197          #else
    198                          
    199                            //idxLatency13 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    200                            //idxLatency12 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    201          		
    202                            idxLatency78 = CrssCor(Buffer1.bufMIC7, Buffer1.bufMIC8, AUDIO_OUT_BUFFER_SIZE);	
   \                     ??FFT_Update_3: (+1)
   \   00000096   0xF44F 0x6280      MOV      R2,#+1024
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable16_17
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable16_18
   \   000000A2   0x.... 0x....      BL       CrssCor
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable16_7
   \   000000AA   0x8008             STRH     R0,[R1, #+0]
    203                            idxLatency14 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC4, AUDIO_OUT_BUFFER_SIZE);
   \   000000AC   0xF44F 0x6280      MOV      R2,#+1024
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable16_19
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable16_20
   \   000000B8   0x.... 0x....      BL       CrssCor
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   000000C0   0x8008             STRH     R0,[R1, #+0]
    204                            idxLatency25 = CrssCor(Buffer1.bufMIC2, Buffer1.bufMIC5, AUDIO_OUT_BUFFER_SIZE);
   \   000000C2   0xF44F 0x6280      MOV      R2,#+1024
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable16_21
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable16_22
   \   000000CE   0x.... 0x....      BL       CrssCor
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable16_13
   \   000000D6   0x8008             STRH     R0,[R1, #+0]
    205                            idxLatency63 = CrssCor(Buffer1.bufMIC6, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE);
   \   000000D8   0xF44F 0x6280      MOV      R2,#+1024
   \   000000DC   0x.... 0x....      LDR.W    R1,??DataTable16_23
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable16_24
   \   000000E4   0x.... 0x....      BL       CrssCor
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   000000EC   0x8008             STRH     R0,[R1, #+0]
    206          
    207          
    208          
    209                            SumDelay(&Buffer1);
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable16_20
   \   000000F2   0x.... 0x....      BL       SumDelay
    210          #endif
    211          					break;
   \   000000F6   0xE030             B.N      ??FFT_Update_5
    212          					
    213          				case BUF3_PLAY:
    214          #if MAIN_CRSCORR
    215          					for (uint16_t i=0; i<(_MAX_SS/128);i++)
    216          					{
    217          						
    218          						arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2[i*128],(q15_t *)&bufferFFT[i*256]);
    219          						arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    220          					
    221          						arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],	(q15_t *)&bufferFFTSum[i*256],
    222          									 2*128);
    223          					
    224          						//for (uint16_t j=0; j<256;j++)
    225          						//{
    226          					    //   bufferFFTSum[i*256+j]<<=6;
    227          					    //}
    228          					
    229          						
    230          						arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    231          					}
    232          
    233          #elif MAIN_FFT
    234          					/* Summing in Buffer2 */
    235                                                  Delay_Sum_FFT(&Buffer2,&FacMic, (int16_t * )bufferSum, 512);
    236                                                 //FFT_SUM((int16_t *)buffer2, (int16_t * )buffer2_1,fbuffer, 1024);
    237          
    238          					
    239          #else
    240          
    241          					//idxLatency13 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    242                              //idxLatency12 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    243          
    244          					idxLatency78 = CrssCor(Buffer2.bufMIC7, Buffer2.bufMIC8, AUDIO_OUT_BUFFER_SIZE);
   \                     ??FFT_Update_2: (+1)
   \   000000F8   0xF44F 0x6280      MOV      R2,#+1024
   \   000000FC   0x.... 0x....      LDR.W    R1,??DataTable16_25
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable16_26
   \   00000104   0x.... 0x....      BL       CrssCor
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable16_7
   \   0000010C   0x8008             STRH     R0,[R1, #+0]
    245          					idxLatency14 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC4, AUDIO_OUT_BUFFER_SIZE);
   \   0000010E   0xF44F 0x6280      MOV      R2,#+1024
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable16_27
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable16_28
   \   0000011A   0x.... 0x....      BL       CrssCor
   \   0000011E   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   00000122   0x8008             STRH     R0,[R1, #+0]
    246          					idxLatency25 = CrssCor(Buffer2.bufMIC2, Buffer2.bufMIC5, AUDIO_OUT_BUFFER_SIZE);
   \   00000124   0xF44F 0x6280      MOV      R2,#+1024
   \   00000128   0x.... 0x....      LDR.W    R1,??DataTable16_29
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable16_30
   \   00000130   0x.... 0x....      BL       CrssCor
   \   00000134   0x.... 0x....      LDR.W    R1,??DataTable16_13
   \   00000138   0x8008             STRH     R0,[R1, #+0]
    247          					idxLatency63 = CrssCor(Buffer2.bufMIC6, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE);
   \   0000013A   0xF44F 0x6280      MOV      R2,#+1024
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable16_31
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable16_32
   \   00000146   0x.... 0x....      BL       CrssCor
   \   0000014A   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   0000014E   0x8008             STRH     R0,[R1, #+0]
    248          
    249                               SumDelay(&Buffer2);
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable16_28
   \   00000154   0x.... 0x....      BL       SumDelay
    250          #endif
    251          					break;
   \   00000158   0xE7FF             B.N      ??FFT_Update_5
    252          					
    253          				default:
    254          					break;
    255                         
    256          			}
    257          #if USB_STREAMING
    258             AudioMerging();
   \                     ??FFT_Update_4: (+1)
   \                     ??FFT_Update_5: (+1)
   \   0000015A   0x.... 0x....      BL       AudioMerging
    259          #endif
    260          	       //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
    261          	  }
    262          	  
    263          
    264          }
   \                     ??FFT_Update_0: (+1)
   \   0000015E   0xBD01             POP      {R0,PC}          ;; return
    265          
    266          

   \                                 In section .text, align 2, keep-with-next
    267          inline static void Audio_Play_Out(void)
    268          {
   \                     Audio_Play_Out: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    269            /* wait for DMA transfert complete									*/
    270            /* This flag is set to 1 in callback function of DMA interrupt  */
    271            /* if player is finished for curent buffer */ 
    272            if (XferCplt == 1)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable16_33
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD169             BNE.N    ??Audio_Play_Out_0
    273            {
    274                 RESET_IDX
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable16_34
   \   00000012   0x8008             STRH     R0,[R1, #+0]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable16_35
   \   0000001A   0x8008             STRH     R0,[R1, #+0]
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable16_36
   \   00000022   0x8008             STRH     R0,[R1, #+0]
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable16_37
   \   0000002A   0x8008             STRH     R0,[R1, #+0]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable16_38
   \   00000032   0x8008             STRH     R0,[R1, #+0]
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable16_39
   \   0000003A   0x8008             STRH     R0,[R1, #+0]
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable16_40
   \   00000042   0x8008             STRH     R0,[R1, #+0]
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable16_41
   \   0000004A   0x8008             STRH     R0,[R1, #+0]
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   00000052   0x7008             STRB     R0,[R1, #+0]
    275                 XferCplt = 0; // clear DMA interrupt flag
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable16_33
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    276          #if USB_STREAMING
    277          	  //AudioProcess();
    278          #endif
    279          /*-------------------------------------------------------------------------------------------------------------
    280          			  
    281          	Sequence  Record Data                     Processing Data                 Player Data
    282          			  
    283          	1-------  Buffer1                         Buffer2                          Buffer3
    284          			  
    285          	2-------  Buffer3                         Buffer1                           Buffer2		  
    286          			  
    287          	3-------  Buffer2                         Buffer3                           Buffer1 
    288           ---------------------------------------------------------------------------------------------------------------*/
    289              switch (buffer_switch)
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable16_4
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD003             BEQ.N    ??Audio_Play_Out_1
   \   00000066   0x2802             CMP      R0,#+2
   \   00000068   0xD027             BEQ.N    ??Audio_Play_Out_2
   \   0000006A   0xD313             BCC.N    ??Audio_Play_Out_3
   \   0000006C   0xE038             B.N      ??Audio_Play_Out_4
    290              {
    291                case BUF1_PLAY:
    292                  /* Play data from buffer1 */
    293          	    Audio_MAL_Play(Command_index? (uint32_t)Buffer3.bufMIC1:(uint32_t)Buffer3.bufMIC2 , 4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??Audio_Play_Out_1: (+1)
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable16_42
   \   00000072   0x7800             LDRB     R0,[R0, #+0]
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD002             BEQ.N    ??Audio_Play_Out_5
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable16_9
   \   0000007C   0xE001             B.N      ??Audio_Play_Out_6
   \                     ??Audio_Play_Out_5: (+1)
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable16_12
   \                     ??Audio_Play_Out_6: (+1)
   \   00000082   0xF44F 0x5180      MOV      R1,#+4096
   \   00000086   0x.... 0x....      BL       Audio_MAL_Play
    294          		/* set flag for switch buffer */		  
    295                  buffer_switch = BUF3_PLAY;
   \   0000008A   0x2002             MOVS     R0,#+2
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable16_4
   \   00000090   0x7008             STRB     R0,[R1, #+0]
    296          
    297                  break;
   \   00000092   0xE025             B.N      ??Audio_Play_Out_0
    298                case BUF2_PLAY:
    299                  /* Play data from buffer2 */
    300          	    Audio_MAL_Play(Command_index? (uint32_t)Buffer1.bufMIC1:(uint32_t)Buffer1.bufMIC2, 4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??Audio_Play_Out_3: (+1)
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable16_42
   \   00000098   0x7800             LDRB     R0,[R0, #+0]
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD002             BEQ.N    ??Audio_Play_Out_7
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable16_20
   \   000000A2   0xE001             B.N      ??Audio_Play_Out_8
   \                     ??Audio_Play_Out_7: (+1)
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable16_22
   \                     ??Audio_Play_Out_8: (+1)
   \   000000A8   0xF44F 0x5180      MOV      R1,#+4096
   \   000000AC   0x.... 0x....      BL       Audio_MAL_Play
    301          		/* set flag for switch buffer */
    302                  buffer_switch = BUF1_PLAY;
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable16_4
   \   000000B6   0x7008             STRB     R0,[R1, #+0]
    303                  
    304                  break;
   \   000000B8   0xE012             B.N      ??Audio_Play_Out_0
    305                case BUF3_PLAY:
    306                  /* Play data from buffer1 */
    307                 Audio_MAL_Play(Command_index? (uint32_t)Buffer2.bufMIC1:(uint32_t)Buffer2.bufMIC2 ,4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??Audio_Play_Out_2: (+1)
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable16_42
   \   000000BE   0x7800             LDRB     R0,[R0, #+0]
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD002             BEQ.N    ??Audio_Play_Out_9
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable16_28
   \   000000C8   0xE001             B.N      ??Audio_Play_Out_10
   \                     ??Audio_Play_Out_9: (+1)
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable16_30
   \                     ??Audio_Play_Out_10: (+1)
   \   000000CE   0xF44F 0x5180      MOV      R1,#+4096
   \   000000D2   0x.... 0x....      BL       Audio_MAL_Play
    308                  /* set flag for switch buffer */		  
    309                  buffer_switch = BUF2_PLAY;
   \   000000D6   0x2001             MOVS     R0,#+1
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable16_4
   \   000000DC   0x7008             STRB     R0,[R1, #+0]
    310          
    311                  break;
   \   000000DE   0xE7FF             B.N      ??Audio_Play_Out_0
    312                default:
    313                  break;
    314              }
    315          			   
    316            }
    317          }
   \                     ??Audio_Play_Out_4: (+1)
   \                     ??Audio_Play_Out_0: (+1)
   \   000000E0   0xBD01             POP      {R0,PC}          ;; return
    318          
    319          
    320          /* Private functions ---------------------------------------------------------*/
    321          
    322          /**
    323            * @brief  Main program
    324            * @param  None
    325            * @retval None
    326            */

   \                                 In section .text, align 2, keep-with-next
    327          int main(void)
    328          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    329            /* Enable the CPU Cache */
    330            CPU_CACHE_Enable();
   \   00000002   0x.... 0x....      BL       CPU_CACHE_Enable
    331            
    332            /* STM32F7xx HAL library initialization:
    333                 - Configure the Flash ART accelerator on ITCM interface
    334                 - Configure the Systick to generate an interrupt each 1 msec
    335                 - Set NVIC Group Priority to 4
    336                 - Global MSP (MCU Support Package) initialization
    337               */   
    338            HAL_Init();
   \   00000006   0x.... 0x....      BL       HAL_Init
    339            
    340            /* Configure the system clock to 216 MHz */
    341            //Test_SystemClock_Config(); 
    342            SystemClock_Config();
   \   0000000A   0x.... 0x....      BL       SystemClock_Config
    343            BSP_AUDIO_OUT_ClockConfig(AUDIO_FREQ, NULL);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xF44F 0x507A      MOV      R0,#+16000
   \   00000014   0x.... 0x....      BL       BSP_AUDIO_OUT_ClockConfig
    344            
    345            /* Initialize the SDRAM */
    346            BSP_SDRAM_Init();
   \   00000018   0x.... 0x....      BL       BSP_SDRAM_Init
    347          
    348          
    349            BSP_LED_Init(LED1);
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       BSP_LED_Init
    350            BSP_LED_Init(LED2);
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       BSP_LED_Init
    351          
    352            /* Button Initialization */
    353            ButtonInit();
   \   00000028   0x.... 0x....      BL       ButtonInit
    354            //BSP_PB_Init(BUTTON_KEY,BUTTON_MODE_EXTI);
    355          
    356            
    357            /* Init TS module */
    358            //BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
    359             DFT_Init();	
   \   0000002C   0x.... 0x....      BL       DFT_Init
    360          
    361              /* ---------PA4: LCCKO-------------*/
    362              __GPIOA_CLK_ENABLE();
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable16_43  ;; 0x40023830
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable16_43  ;; 0x40023830
   \   0000003E   0x6008             STR      R0,[R1, #+0]
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable16_43  ;; 0x40023830
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0x9800             LDR      R0,[SP, #+0]
    363              GPIO_INS.Pin = GPIO_PIN_4;
   \   0000004E   0x2010             MOVS     R0,#+16
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable16_44
   \   00000054   0x6008             STR      R0,[R1, #+0]
    364              GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable16_45  ;; 0x10110000
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable16_44
   \   0000005E   0x6048             STR      R0,[R1, #+4]
    365              GPIO_INS.Pull =GPIO_NOPULL;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable16_44
   \   00000066   0x6088             STR      R0,[R1, #+8]
    366              GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   00000068   0x2003             MOVS     R0,#+3
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable16_44
   \   0000006E   0x60C8             STR      R0,[R1, #+12]
    367              HAL_GPIO_Init(GPIOA,&GPIO_INS);
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable16_44
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable16_46  ;; 0x40020000
   \   00000078   0x.... 0x....      BL       HAL_GPIO_Init
    368          
    369              /* Enable and set Button EXTI Interrupt to the lowest priority */
    370              HAL_NVIC_SetPriority((IRQn_Type)EXTI4_IRQn, INTERRUPT_PRI_EXT_LRCK, 0);
   \   0000007C   0x2200             MOVS     R2,#+0
   \   0000007E   0x2106             MOVS     R1,#+6
   \   00000080   0x200A             MOVS     R0,#+10
   \   00000082   0x.... 0x....      BL       HAL_NVIC_SetPriority
    371              HAL_NVIC_EnableIRQ((IRQn_Type)EXTI4_IRQn);
   \   00000086   0x200A             MOVS     R0,#+10
   \   00000088   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    372              /*-----------------------*/
    373          
    374              /*---------PE3: POWER DOWN-----------------*/
    375              __GPIOE_CLK_ENABLE();
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable16_43  ;; 0x40023830
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable16_43  ;; 0x40023830
   \   0000009A   0x6008             STR      R0,[R1, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable16_43  ;; 0x40023830
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0xF010 0x0010      ANDS     R0,R0,#0x10
   \   000000A6   0x9000             STR      R0,[SP, #+0]
   \   000000A8   0x9800             LDR      R0,[SP, #+0]
    376              GPIO_INS.Pin = GPIO_PIN_3;
   \   000000AA   0x2008             MOVS     R0,#+8
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable16_44
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    377              GPIO_INS.Mode = GPIO_MODE_OUTPUT_PP;
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable16_44
   \   000000B8   0x6048             STR      R0,[R1, #+4]
    378              GPIO_INS.Pull = GPIO_PULLUP;
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable16_44
   \   000000C0   0x6088             STR      R0,[R1, #+8]
    379              GPIO_INS.Speed = GPIO_SPEED_HIGH;
   \   000000C2   0x2003             MOVS     R0,#+3
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable16_44
   \   000000C8   0x60C8             STR      R0,[R1, #+12]
    380          
    381              HAL_GPIO_Init(GPIOE, &GPIO_INS);
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable16_44
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable16_47  ;; 0x40021000
   \   000000D2   0x.... 0x....      BL       HAL_GPIO_Init
    382            
    383              HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
   \   000000D6   0x2200             MOVS     R2,#+0
   \   000000D8   0x2108             MOVS     R1,#+8
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable16_47  ;; 0x40021000
   \   000000DE   0x.... 0x....      BL       HAL_GPIO_WritePin
    384          
    385              /*----------------------------------------*/
    386          
    387          #if (DEBUG)  
    388          		/* UART for debug */
    389          		USART3_Init();
    390          #endif
    391          
    392          #if (USB_STREAMING)
    393          						  
    394          		/* Initialize USB descriptor basing on channels number and sampling frequency */
    395          		USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, AUDIO_SAMPLING_FREQUENCY, AUDIO_CHANNELS);
   \   000000E2   0x2202             MOVS     R2,#+2
   \   000000E4   0xF44F 0x517A      MOV      R1,#+16000
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable16_48
   \   000000EC   0x.... 0x....      BL       USBD_AUDIO_Init_Microphone_Descriptor
    396          		/* Init Device Library */
    397          		USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
   \   000000F0   0x2200             MOVS     R2,#+0
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable16_49
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable16_48
   \   000000FA   0x.... 0x....      BL       USBD_Init
    398          		/* Add Supported Class */
    399          		USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable16_50
   \   00000102   0x.... 0x....      LDR.W    R0,??DataTable16_48
   \   00000106   0x.... 0x....      BL       USBD_RegisterClass
    400          		/* Add Interface callbacks for AUDIO Class */  
    401          		USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable16_51
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable16_48
   \   00000112   0x.... 0x....      BL       USBD_AUDIO_RegisterInterface
    402          		/* Start Device Process */
    403          		USBD_Start(&hUSBDDevice);
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable16_48
   \   0000011A   0x.... 0x....      BL       USBD_Start
    404          	  
    405          	  
    406          		/* Init Host Library */
    407          		//test GIT //USBH_Init(&hUSBHost, USBH_UserProcess, 0);
    408          	  
    409          		/* Add Supported Class */
    410          		//test GIT //USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
    411          		
    412          		/* Start Host Process */
    413          		//test GIT //USBH_Start(&hUSBHost);
    414          						  
    415          #endif 
    416          
    417          
    418              /*----------------------------------------*/
    419              MX_I2C2_Init(); //for STA321MP
   \   0000011E   0x.... 0x....      BL       MX_I2C2_Init
    420              STA321MP_Ini();
   \   00000122   0x.... 0x....      BL       STA321MP_Ini
    421          	BSP_LED_Toggle(LED1);
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x.... 0x....      BL       BSP_LED_Toggle
    422              /* Init Audio Application */
    423              AUDIO_InitApplication();
   \   0000012C   0x.... 0x....      BL       AUDIO_InitApplication
    424          	BSP_LED_Toggle(LED2);
   \   00000130   0x2001             MOVS     R0,#+1
   \   00000132   0x.... 0x....      BL       BSP_LED_Toggle
    425             
    426          
    427          	
    428          	buffer_switch = BUF3_PLAY;		 /* record data to buffer1 */
   \   00000136   0x2002             MOVS     R0,#+2
   \   00000138   0x.... 0x....      LDR.W    R1,??DataTable16_4
   \   0000013C   0x7008             STRB     R0,[R1, #+0]
    429          	MIC1TO6_Init();
   \   0000013E   0x.... 0x....      BL       MIC1TO6_Init
    430          	                  
    431          					  
    432          
    433          
    434          	while (1)
    435              {
    436          		/* there is data in the buffer */  
    437          		if((WaveRec_idxSens1>=(2*AUDIO_OUT_BUFFER_SIZE-1))&&(stFrstFrmStore<3))
   \                     ??main_0: (+1)
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable16_34
   \   00000146   0x8800             LDRH     R0,[R0, #+0]
   \   00000148   0xF240 0x71FF      MOVW     R1,#+2047
   \   0000014C   0x4288             CMP      R0,R1
   \   0000014E   0xDB27             BLT.N    ??main_1
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable16_52
   \   00000154   0x7800             LDRB     R0,[R0, #+0]
   \   00000156   0x2803             CMP      R0,#+3
   \   00000158   0xDA22             BGE.N    ??main_1
    438          		{
    439          			/* this is just run 1 time after 1st frame of I2S data full */
    440          			if ((stFrstFrmStore<3))
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable16_52
   \   0000015E   0x7800             LDRB     R0,[R0, #+0]
   \   00000160   0x2803             CMP      R0,#+3
   \   00000162   0xDA1D             BGE.N    ??main_1
    441          			{
    442          				stFrstFrmStore++;
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable16_52
   \   00000168   0x7800             LDRB     R0,[R0, #+0]
   \   0000016A   0x1C40             ADDS     R0,R0,#+1
   \   0000016C   0x.... 0x....      LDR.W    R1,??DataTable16_52
   \   00000170   0x7008             STRB     R0,[R1, #+0]
    443          				buffer_switch = BUF2_PLAY; /* record data to buffer3 */
   \   00000172   0x2001             MOVS     R0,#+1
   \   00000174   0x.... 0x....      LDR.W    R1,??DataTable16_4
   \   00000178   0x7008             STRB     R0,[R1, #+0]
    444          				if (stFrstFrmStore==2)
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable16_52
   \   0000017E   0x7800             LDRB     R0,[R0, #+0]
   \   00000180   0x2802             CMP      R0,#+2
   \   00000182   0xD10D             BNE.N    ??main_1
    445          				{
    446          					
    447          					/*------------------------PLAYER------------------------------------------*/
    448          					Audio_MAL_Play((uint32_t)Buffer1.bufMIC1,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000184   0xF44F 0x5180      MOV      R1,#+4096
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable16_20
   \   0000018C   0x.... 0x....      BL       Audio_MAL_Play
    449          					/*------------------------------------------------------------------------*/
    450          					buffer_switch = BUF1_PLAY;
   \   00000190   0x2000             MOVS     R0,#+0
   \   00000192   0x.... 0x....      LDR.W    R1,??DataTable16_4
   \   00000196   0x7008             STRB     R0,[R1, #+0]
    451          					flgDlyUpd = 0;
   \   00000198   0x2000             MOVS     R0,#+0
   \   0000019A   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   0000019E   0x7008             STRB     R0,[R1, #+0]
    452          				}
    453          			
    454          			}
    455          		
    456          		}
    457          
    458          
    459                   if (cntStrt==5)
   \                     ??main_1: (+1)
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable16_53
   \   000001A4   0x8800             LDRH     R0,[R0, #+0]
   \   000001A6   0x2805             CMP      R0,#+5
   \   000001A8   0xD12C             BNE.N    ??main_2
    460          		 {
    461          			   if ((WaveRecord_flgIni<200))
   \   000001AA   0x.... 0x....      LDR.W    R0,??DataTable16_54
   \   000001AE   0x7800             LDRB     R0,[R0, #+0]
   \   000001B0   0x28C8             CMP      R0,#+200
   \   000001B2   0xDA1B             BGE.N    ??main_3
    462          			   {
    463          				  for(char i=0;i<16;i++)
   \   000001B4   0x2000             MOVS     R0,#+0
   \                     ??main_4: (+1)
   \   000001B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001B8   0x2810             CMP      R0,#+16
   \   000001BA   0xDA23             BGE.N    ??main_2
    464          				  {
    465          					  //if (ValBit(SPI1_stNipple,i)!=0) 
    466          					  //{
    467          					//	 I2S1_stPosShft = 0;//MAX(I2S1_stPosShft,i+1);
    468          					 // }
    469          
    470          					  //if (ValBit(I2S2_stNipple,i)!=0) 
    471          		              //{
    472          		              //   I2S2_stPosShft = 0;//MAX(I2S2_stPosShft,i+1);
    473          		              //}
    474          
    475          					  if (ValBit(I2S1_stNipple,i)!=0) 
   \   000001BC   0x.... 0x....      LDR.W    R1,??DataTable16_55
   \   000001C0   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001C4   0x4101             ASRS     R1,R1,R0
   \   000001C6   0x07C9             LSLS     R1,R1,#+31
   \   000001C8   0xD50E             BPL.N    ??main_5
    476          					 {
    477          						 SPI4_stPosShft = MAX(SPI4_stPosShft,i+1);
   \   000001CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001CC   0x1C41             ADDS     R1,R0,#+1
   \   000001CE   0x.... 0x....      LDR.W    R2,??DataTable16_56
   \   000001D2   0x7812             LDRB     R2,[R2, #+0]
   \   000001D4   0x4291             CMP      R1,R2
   \   000001D6   0xDA03             BGE.N    ??main_6
   \   000001D8   0x.... 0x....      LDR.W    R1,??DataTable16_56
   \   000001DC   0x7809             LDRB     R1,[R1, #+0]
   \   000001DE   0xE000             B.N      ??main_7
   \                     ??main_6: (+1)
   \   000001E0   0x1C41             ADDS     R1,R0,#+1
   \                     ??main_7: (+1)
   \   000001E2   0x.... 0x....      LDR.W    R2,??DataTable16_56
   \   000001E6   0x7011             STRB     R1,[R2, #+0]
    478          					 }
    479          				  }
   \                     ??main_5: (+1)
   \   000001E8   0x1C40             ADDS     R0,R0,#+1
   \   000001EA   0xE7E4             B.N      ??main_4
    480          					
    481          			   }
    482          		       else if (WaveRecord_flgIni<255)
   \                     ??main_3: (+1)
   \   000001EC   0x.... 0x....      LDR.W    R0,??DataTable16_54
   \   000001F0   0x7800             LDRB     R0,[R0, #+0]
   \   000001F2   0x28FF             CMP      R0,#+255
   \   000001F4   0xD006             BEQ.N    ??main_2
    483          		       {
    484          		           WaveRecord_flgIni++;
   \   000001F6   0x.... 0x....      LDR.W    R0,??DataTable16_54
   \   000001FA   0x7800             LDRB     R0,[R0, #+0]
   \   000001FC   0x1C40             ADDS     R0,R0,#+1
   \   000001FE   0x.... 0x....      LDR.W    R1,??DataTable16_54
   \   00000202   0x7008             STRB     R0,[R1, #+0]
    485          		       }
    486          			   else
    487          			   {
    488          
    489          			   }
    490          					   
    491          		 }
    492          	
    493          
    494          		if (cntStrt==6)
   \                     ??main_2: (+1)
   \   00000204   0x.... 0x....      LDR.W    R0,??DataTable16_53
   \   00000208   0x8800             LDRH     R0,[R0, #+0]
   \   0000020A   0x2806             CMP      R0,#+6
   \   0000020C   0xD10A             BNE.N    ??main_8
    495          		{
    496          					  if ((WaveRecord_flgIni<200))
   \   0000020E   0x.... 0x....      LDR.W    R0,??DataTable16_54
   \   00000212   0x7800             LDRB     R0,[R0, #+0]
   \   00000214   0x28C8             CMP      R0,#+200
   \   00000216   0xDA05             BGE.N    ??main_8
    497          					  {
    498          						 for(char i=0;i<16;i++)
   \   00000218   0x2000             MOVS     R0,#+0
   \                     ??main_9: (+1)
   \   0000021A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000021C   0x2810             CMP      R0,#+16
   \   0000021E   0xDA01             BGE.N    ??main_8
   \   00000220   0x1C40             ADDS     R0,R0,#+1
   \   00000222   0xE7FA             B.N      ??main_9
    499          						 {
    500          
    501          						 }
    502          						   
    503          					  }
    504          		}
    505          		else
    506          		{
    507          					 
    508          		} 
    509          
    510          		/* USB Host Background task */
    511          		//USBH_Process(&hUSBHost);
    512          
    513          		/* AUDIO Menu Process */
    514          		//AUDIO_MenuProcess();
    515          		FFT_Update(); 
   \                     ??main_8: (+1)
   \   00000224   0x.... 0x....      BL       FFT_Update
    516          
    517          		if (flg10ms==1)
   \   00000228   0x.... 0x....      LDR.W    R0,??DataTable16_57
   \   0000022C   0x7800             LDRB     R0,[R0, #+0]
   \   0000022E   0x2801             CMP      R0,#+1
   \   00000230   0xD187             BNE.N    ??main_0
    518          		{
    519          		    flg10ms=0;		   		      
   \   00000232   0x2000             MOVS     R0,#+0
   \   00000234   0x.... 0x....      LDR.W    R1,??DataTable16_57
   \   00000238   0x7008             STRB     R0,[R1, #+0]
    520          	         cntTime200++;
   \   0000023A   0x.... 0x....      LDR.W    R0,??DataTable16_58
   \   0000023E   0x8800             LDRH     R0,[R0, #+0]
   \   00000240   0x1C40             ADDS     R0,R0,#+1
   \   00000242   0x.... 0x....      LDR.W    R1,??DataTable16_58
   \   00000246   0x8008             STRH     R0,[R1, #+0]
    521          	         if (cntTime200==40)
   \   00000248   0x.... 0x....      LDR.W    R0,??DataTable16_58
   \   0000024C   0x8800             LDRH     R0,[R0, #+0]
   \   0000024E   0x2828             CMP      R0,#+40
   \   00000250   0xF47F 0xAF77      BNE.W    ??main_0
    522          	          {
    523          	 
    524          #if (DEBUG)
    525          
    526                              //if ((idxLatency14!=0)||(idxLatency25!=0)||(idxLatency36!=0))
    527                              {
    528                                  int16_t test[5];
    529                                  static uint8_t flagNotMin;
    530                                  test[0] = 0;
    531                                  test[1]= idxLatency63;
    532                                  test[2]= idxLatency14;
    533                                  test[3]= idxLatency25;
    534          						test[4]= idxLatency78;
    535          
    536          
    537                                  if (EnergySound<2)
    538                                  {
    539                                          //sprintf((char *)pUARTBuf,"No Speech:%d  \r\n",EnergySound);
    540                                          //HAL_UART_Transmit_IT(&huart3,pUARTBuf,30); 
    541                                  }
    542                                  else
    543                                  {
    544                                       sprintf((char *)pUARTBuf,"%d:%d:%d:%d ",idxLatency63,idxLatency14,idxLatency25,idxLatency78);
    545          							 flagNotMin=0 ;
    546          
    547          							if (test[3]>0)
    548          							{
    549          							   if((test[1]<=0)&&(test[4]<=0))
    550          							   {
    551          								flagNotMin=1 ;
    552          								sprintf((char *)(pUARTBuf+15),"Close Mic 2\r\n");
    553          							   }
    554          							}
    555          							else if (test[3]<-2)
    556          							{
    557          							    if((test[1]>1)&&(test[4]>1))
    558          							    {
    559          									flagNotMin=1 ;
    560          									sprintf((char *)(pUARTBuf+15),"Clsoe Mic 5\r\n");
    561          							    }
    562          
    563          							}
    564          							else
    565          							{
    566          									}	
    567          
    568          							
    569          
    570          							if (test[2]>2)
    571                                	    {
    572                                	       if((test[1]>=-1)&&(test[3]<=-3))
    573                                	       {
    574          								 flagNotMin=1 ;
    575          								 sprintf((char *)(pUARTBuf+15),"Clsoe Mic 4\r\n");
    576                                	       }
    577                                	    }
    578          							else if (test[2]<=-1)
    579          							{
    580          							   if((test[1]<=-2)&&(test[3]>=0))
    581                                	       {
    582          								 flagNotMin=1 ;
    583          								 sprintf((char *)(pUARTBuf+15),"Clsoe Mic 1\r\n");
    584          							   }
    585          							}
    586          							else
    587          							{
    588          
    589          							}
    590          
    591          						   
    592                                      if (test[1]>=0)
    593                                	    {
    594                                	       if((test[2]>1)&&(test[4]<= 0))
    595                                	       {
    596          								 flagNotMin=1 ;
    597          								 sprintf((char *)(pUARTBuf+15),"Clsoe Mic 3\r\n");
    598                                	       }
    599          
    600                                	    }
    601          							else if (test[1]<=-3)
    602          							{
    603          							   if((test[2]<=0)&&(test[4]>=2))
    604                                	       {
    605          								 flagNotMin=1 ;
    606          								 sprintf((char *)(pUARTBuf+15),"Clsoe Mic 6\r\n");
    607          							   }
    608          
    609          							}
    610          							else
    611          							{
    612          
    613          							}
    614          
    615          
    616          							if ((test[4]<=-1))
    617          							{
    618          
    619                                          if ((test[1]>=-1)&&(test[3]>-0))
    620                                          {
    621          									sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    622          									flagNotMin=1 ;
    623          
    624                                         	}
    625          
    626          								;
    627          							}
    628          							else if (test[4]>=3)
    629          							{
    630          							    if ((test[1]<-1)&&(test[3]<-2))
    631          							   {
    632          								sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    633          								flagNotMin=1 ;
    634          							   }
    635          
    636          							}
    637          							else
    638          							{
    639          
    640          							}
    641          
    642          
    643          							if (flagNotMin==0) sprintf((char *)(pUARTBuf+15),"----------- \r\n");
    644          									
    645                     
    646                                    //HAL_UART_Transmit_IT(&huart3,pUARTBuf,15);
    647                                    SrvB_Debound(&flgS2Ins,&flgS2Flt, flgS2,2);
    648                                    SrvB_Debound(&flgS3Ins,&flgS3Flt, flgS3,2);
    649                                    SrvB_Debound(&flgS4Ins,&flgS4Flt, flgS4,2);
    650          
    651                                    stDir = (flgS2Flt<<2)|(flgS3Flt<<1)|(flgS4Flt); 
    652                                     switch (8)
    653                                     {
    654                                         case 0:
    655                                                  sprintf((char *)(pUARTBuf+15),"Direction 0 \r\n");
    656                                                           
    657                                              break;
    658                                         case 1:
    659                                                  sprintf((char *)(pUARTBuf+15),"Direction 1 \r\n");
    660                                                  
    661                                              break;
    662                                         case 2:
    663                                                  sprintf((char *)(pUARTBuf+15),"Direction 2 \r\n");
    664                                                   
    665                                              break;
    666                                                  
    667                                         case 3:
    668                                                  sprintf((char *)(pUARTBuf+15),"Direction 3 \r\n");
    669                                           
    670                                              break;
    671                                         case 4:
    672                                                  sprintf((char *)(pUARTBuf+15),"Direction 4 \r\n");
    673                                                           
    674                                              break;
    675                                          case 5:
    676                                                  sprintf((char *)(pUARTBuf+15),"Direction 5 \r\n");
    677                                                   
    678                                              break;
    679                                          case 6:
    680                                                  sprintf((char *)(pUARTBuf+15),"Direction 6 \r\n");
    681                                           
    682                                              break;
    683                                          case 7:
    684                                                  sprintf((char *)(pUARTBuf+15),"Direction 7 \r\n");
    685                                                   
    686                                              break;
    687                                           default:
    688                                              break;
    689                                     }
    690          
    691                                     HAL_UART_Transmit_IT(&huart3,pUARTBuf,15+15);		
    692                                   }
    693                              }
    694          
    695          #endif
    696          	   	            cntTime200=0;
   \   00000254   0x2000             MOVS     R0,#+0
   \   00000256   0x.... 0x....      LDR.W    R1,??DataTable16_58
   \   0000025A   0x8008             STRH     R0,[R1, #+0]
   \   0000025C   0xE771             B.N      ??main_0
    697                                   }
    698          
    699          
    700                              }
    701          
    702          
    703          	
    704            }
    705            
    706          }
    707          
    708          /**
    709            * @brief  Toggle Leds.
    710            * @param  None
    711            * @retval None
    712            */

   \                                 In section .text, align 2, keep-with-next
    713          void Toggle_Leds(void)
    714          {
    715            static uint32_t ticks = 0;
    716          
    717            if (ticks++ > 200)
   \                     Toggle_Leds: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable16_59
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x1C41             ADDS     R1,R0,#+1
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable16_59
   \   0000000C   0x6011             STR      R1,[R2, #+0]
   \   0000000E   0x28C9             CMP      R0,#+201
   \   00000010   0xD303             BCC.N    ??Toggle_Leds_0
    718            {
    719              //BSP_LED_Toggle(LED1);
    720              ticks = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable16_59
   \   00000018   0x6008             STR      R0,[R1, #+0]
    721            }
    722          }
   \                     ??Toggle_Leds_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??ticks:
   \   00000000                      DS8 4
    723          
    724          
    725          /**
    726            * @brief  User Process
    727            * @param  phost: Host Handle
    728            * @param  id: Host Library user message ID
    729            * @retval None
    730            */
    731          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
                             ^
Warning[Pe177]: function "USBH_UserProcess" was declared but never referenced
    732          {
    733            switch(id)
    734            { 
    735            case HOST_USER_SELECT_CONFIGURATION:
    736              break;
    737              
    738            case HOST_USER_DISCONNECTION:
    739              appli_state = APPLICATION_DISCONNECT;
    740              break;
    741          
    742            case HOST_USER_CLASS_ACTIVE:
    743              appli_state = APPLICATION_READY;
    744              break;
    745           
    746            case HOST_USER_CONNECTION:
    747              appli_state = APPLICATION_START;
    748              break;
    749             
    750            default:
    751              break; 
    752            }
    753          }
    754          
    755          /**
    756            * @brief  System Clock Configuration
    757            *         The system Clock is configured as follow : 
    758            *            System Clock source            = PLL (HSE)
    759            *            SYSCLK(Hz)                     = 216000000
    760            *            HCLK(Hz)                       = 216000000
    761            *            AHB Prescaler                  = 1
    762            *            APB1 Prescaler                 = 4
    763            *            APB2 Prescaler                 = 2
    764            *            HSE Frequency(Hz)              = 25000000
    765            *            PLL_M                          = 25
    766            *            PLL_N                          = 432
    767            *            PLL_P                          = 2
    768            *            PLL_Q                          = 9
    769            *            VDD(V)                         = 3.3
    770            *            Main regulator output voltage  = Scale1 mode
    771            *            Flash Latency(WS)              = 7
    772            * @param  None
    773            * @retval None
    774            */

   \                                 In section .text, align 2, keep-with-next
    775          static void SystemClock_Config(void)
    776          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B2             SUB      SP,SP,#+200
    777            RCC_ClkInitTypeDef RCC_ClkInitStruct;
    778            RCC_OscInitTypeDef RCC_OscInitStruct;
    779            RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    780            HAL_StatusTypeDef ret = HAL_OK;
   \   00000004   0x2400             MOVS     R4,#+0
    781          
    782            /* Enable HSE Oscillator and activate PLL with HSE as source */
    783            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x9026             STR      R0,[SP, #+152]
    784            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   0000000A   0xF45F 0x3080      MOVS     R0,#+65536
   \   0000000E   0x9027             STR      R0,[SP, #+156]
    785            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x902C             STR      R0,[SP, #+176]
    786            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
   \   00000014   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000018   0x902D             STR      R0,[SP, #+180]
    787            RCC_OscInitStruct.PLL.PLLM = 25;
   \   0000001A   0x2019             MOVS     R0,#+25
   \   0000001C   0x902E             STR      R0,[SP, #+184]
    788            RCC_OscInitStruct.PLL.PLLN = 432;  
   \   0000001E   0xF44F 0x70D8      MOV      R0,#+432
   \   00000022   0x902F             STR      R0,[SP, #+188]
    789            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x9030             STR      R0,[SP, #+192]
    790            RCC_OscInitStruct.PLL.PLLQ = 9;
   \   00000028   0x2009             MOVS     R0,#+9
   \   0000002A   0x9031             STR      R0,[SP, #+196]
    791          
    792            ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
   \   0000002C   0xA826             ADD      R0,SP,#+152
   \   0000002E   0x.... 0x....      BL       HAL_RCC_OscConfig
   \   00000032   0x0004             MOVS     R4,R0
    793            if(ret != HAL_OK)
    794            {
    795              //while(1) { ; }
    796            }
    797          
    798            /* Activate the OverDrive to reach the 216 MHz Frequency */
    799            ret = HAL_PWREx_EnableOverDrive();
   \   00000034   0x.... 0x....      BL       HAL_PWREx_EnableOverDrive
   \   00000038   0x0004             MOVS     R4,R0
    800            if(ret != HAL_OK)
    801            {
    802              //while(1) { ; }
    803            }
    804          
    805            /* Select PLLSAI output as USB clock source */
    806            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48 ;
   \   0000003A   0xF45F 0x1000      MOVS     R0,#+2097152
   \   0000003E   0x9005             STR      R0,[SP, #+20]
    807            PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
   \   00000040   0xF05F 0x6000      MOVS     R0,#+134217728
   \   00000044   0x9024             STR      R0,[SP, #+144]
    808          
    809            
    810            PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
   \   00000046   0x20C0             MOVS     R0,#+192
   \   00000048   0x900A             STR      R0,[SP, #+40]
    811            PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
   \   0000004A   0x2004             MOVS     R0,#+4
   \   0000004C   0x900B             STR      R0,[SP, #+44]
    812            PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x900D             STR      R0,[SP, #+52]
    813            PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x900C             STR      R0,[SP, #+48]
    814          
    815          
    816            ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
   \   00000056   0xA805             ADD      R0,SP,#+20
   \   00000058   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
   \   0000005C   0x0004             MOVS     R4,R0
    817            
    818            if(ret != HAL_OK)
    819            {
    820              //while(1) { ; }
    821            }
    822            
    823            /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
    824            RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
   \   0000005E   0x200F             MOVS     R0,#+15
   \   00000060   0x9000             STR      R0,[SP, #+0]
    825            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \   00000062   0x2002             MOVS     R0,#+2
   \   00000064   0x9001             STR      R0,[SP, #+4]
    826            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
   \   00000066   0x2080             MOVS     R0,#+128
   \   00000068   0x9002             STR      R0,[SP, #+8]
    827            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
   \   0000006A   0xF44F 0x50A0      MOV      R0,#+5120
   \   0000006E   0x9003             STR      R0,[SP, #+12]
    828            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \   00000070   0xF44F 0x5080      MOV      R0,#+4096
   \   00000074   0x9004             STR      R0,[SP, #+16]
    829          
    830            ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
   \   00000076   0x2107             MOVS     R1,#+7
   \   00000078   0x4668             MOV      R0,SP
   \   0000007A   0x.... 0x....      BL       HAL_RCC_ClockConfig
   \   0000007E   0x0004             MOVS     R4,R0
    831            if(ret != HAL_OK)
    832            {
    833              //while(1) { ; }
    834            }
    835            
    836           //sop1hc 344/7 = 49.142 MHz
    837            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable16_60  ;; 0x100001
   \   00000084   0x9005             STR      R0,[SP, #+20]
    838            PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000086   0xF45F 0x0080      MOVS     R0,#+4194304
   \   0000008A   0x9015             STR      R0,[SP, #+84]
    839            PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x9012             STR      R0,[SP, #+72]
    840            PeriphClkInitStruct.PLLI2S.PLLI2SP = 8;
   \   00000090   0x2008             MOVS     R0,#+8
   \   00000092   0x9009             STR      R0,[SP, #+36]
    841            PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   00000094   0xF44F 0x70AC      MOV      R0,#+344
   \   00000098   0x9006             STR      R0,[SP, #+24]
    842            PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
   \   0000009A   0x2007             MOVS     R0,#+7
   \   0000009C   0x9008             STR      R0,[SP, #+32]
    843            PeriphClkInitStruct.PLLI2S.PLLI2SR = 7;
   \   0000009E   0x2007             MOVS     R0,#+7
   \   000000A0   0x9007             STR      R0,[SP, #+28]
    844            PeriphClkInitStruct.PLLI2SDivQ = 1;
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0x900E             STR      R0,[SP, #+56]
    845            HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);	
   \   000000A6   0xA805             ADD      R0,SP,#+20
   \   000000A8   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    846          }
   \   000000AC   0xB032             ADD      SP,SP,#+200
   \   000000AE   0xBD10             POP      {R4,PC}          ;; return
    847          
    848          /**
    849            * @brief  Clock Config.
    850            * @param  hsai: might be required to set audio peripheral predivider if any.
    851            * @param  AudioFreq: Audio frequency used to play the audio stream.
    852            * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
    853            *         Being __weak it can be overwritten by the application     
    854            * @retval None
    855            */

   \                                 In section .text, align 2, keep-with-next
    856          void BSP_AUDIO_OUT_ClockConfig(uint32_t AudioFreq, void *Params)
    857          {
   \                     BSP_AUDIO_OUT_ClockConfig: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0A1             SUB      SP,SP,#+132
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    858            RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;
    859          
    860            HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
    861            
    862            /* Set the PLL configuration according to the audio frequency */
    863            if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
   \   0000000E   0xF642 0x3011      MOVW     R0,#+11025
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD007             BEQ.N    ??BSP_AUDIO_OUT_ClockConfig_0
   \   00000016   0xF245 0x6022      MOVW     R0,#+22050
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD003             BEQ.N    ??BSP_AUDIO_OUT_ClockConfig_0
   \   0000001E   0xF64A 0x4044      MOVW     R0,#+44100
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD112             BNE.N    ??BSP_AUDIO_OUT_ClockConfig_1
    864            {
    865              /* Configure PLLSAI prescalers */
    866              /* PLLI2S_VCO: VCO_429M
    867              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    868              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    869              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \                     ??BSP_AUDIO_OUT_ClockConfig_0: (+1)
   \   00000026   0xF45F 0x1080      MOVS     R0,#+1048576
   \   0000002A   0x9000             STR      R0,[SP, #+0]
    870              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   0000002C   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000030   0x9010             STR      R0,[SP, #+64]
    871              RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
   \   00000032   0x2008             MOVS     R0,#+8
   \   00000034   0x9004             STR      R0,[SP, #+16]
    872              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
   \   00000036   0xF240 0x10AD      MOVW     R0,#+429
   \   0000003A   0x9001             STR      R0,[SP, #+4]
    873              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x9003             STR      R0,[SP, #+12]
    874              RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
   \   00000040   0x2013             MOVS     R0,#+19
   \   00000042   0x9009             STR      R0,[SP, #+36]
    875              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000044   0x4668             MOV      R0,SP
   \   00000046   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
   \   0000004A   0xE00F             B.N      ??BSP_AUDIO_OUT_ClockConfig_2
    876            }
    877            else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K), AUDIO_FREQUENCY_96K */
    878            {
    879              /* SAI clock config
    880              PLLI2S_VCO: VCO_344M
    881              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
    882              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 49.142/1 = 49.142 Mhz */
    883              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \                     ??BSP_AUDIO_OUT_ClockConfig_1: (+1)
   \   0000004C   0xF45F 0x1080      MOVS     R0,#+1048576
   \   00000050   0x9000             STR      R0,[SP, #+0]
    884              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000052   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000056   0x9010             STR      R0,[SP, #+64]
    885          	//RCC_ExCLKInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
    886          //    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    887              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   00000058   0xF44F 0x70AC      MOV      R0,#+344
   \   0000005C   0x9001             STR      R0,[SP, #+4]
    888              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
   \   0000005E   0x2007             MOVS     R0,#+7
   \   00000060   0x9003             STR      R0,[SP, #+12]
    889          	//RCC_ExCLKInitStruct.PLLI2S.PLLI2SR = 1;
    890              RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x9009             STR      R0,[SP, #+36]
    891              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000066   0x4668             MOV      R0,SP
   \   00000068   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    892            }
    893            
    894          }
   \                     ??BSP_AUDIO_OUT_ClockConfig_2: (+1)
   \   0000006C   0xB021             ADD      SP,SP,#+132
   \   0000006E   0xBD30             POP      {R4,R5,PC}       ;; return
    895          
    896          
    897          
    898          #ifdef  USE_FULL_ASSERT
    899          /**
    900            * @brief  Reports the name of the source file and the source line number
    901            *         where the assert_param error has occurred.
    902            * @param  file: pointer to the source file name
    903            * @param  line: assert_param error line source number
    904            * @retval None
    905            */
    906          void assert_failed(uint8_t* file, uint32_t line)
    907          { 
    908            /* User can add his own implementation to report the file name and line number,
    909               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    910          
    911            /* Infinite loop */
    912            while (1)
    913            {
    914            }
    915          }
    916          #endif
    917          
    918          /**
    919            * @brief  CPU L1-Cache enable.
    920            * @param  None
    921            * @retval None
    922            */

   \                                 In section .text, align 2, keep-with-next
    923          static void CPU_CACHE_Enable(void)
    924          {
   \                     CPU_CACHE_Enable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    925            /* Enable I-Cache */
    926            SCB_EnableICache();
   \   00000002   0x.... 0x....      BL       SCB_EnableICache
    927          
    928            /* Enable D-Cache */
    929            SCB_EnableDCache();
   \   00000006   0x.... 0x....      BL       SCB_EnableDCache
    930          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    931          
    932          

   \                                 In section .text, align 2, keep-with-next
    933          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
    934          {
   \                     HAL_I2C_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    935          
    936            GPIO_InitTypeDef GPIO_InitStruct;
    937              
    938            if(hi2c->Instance==I2C1)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable16_61  ;; 0x40005400
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD135             BNE.N    ??HAL_I2C_MspInit_0
    939            {
    940          	/* USER CODE BEGIN I2C1_MspInit 0 */
    941          
    942          	/*##-1- Configure the I2C clock source. The clock is derived from the SYSCLK #*/
    943          	//RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
    944          	//RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    945          	//HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
    946          
    947          	/*##-2- Enable peripherals and GPIO Clocks #################################*/
    948          	/* Enable GPIO TX/RX clock */
    949          	__HAL_RCC_GPIOB_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable16_43  ;; 0x40023830
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable16_43  ;; 0x40023830
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable16_43  ;; 0x40023830
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
    950          
    951          	/**I2C1 GPIO Configuration	
    952          	PB6	  ------> I2C1_SCL (PB6)
    953          	PB7	  ------> I2C1_SDA (PB7) 
    954          	*/
    955          	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
   \   0000002E   0x20C0             MOVS     R0,#+192
   \   00000030   0x9001             STR      R0,[SP, #+4]
    956          	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \   00000032   0x2012             MOVS     R0,#+18
   \   00000034   0x9002             STR      R0,[SP, #+8]
    957          	GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x9003             STR      R0,[SP, #+12]
    958          	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   0000003A   0x2003             MOVS     R0,#+3
   \   0000003C   0x9004             STR      R0,[SP, #+16]
    959          	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
   \   0000003E   0x2004             MOVS     R0,#+4
   \   00000040   0x9005             STR      R0,[SP, #+20]
    960          	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000042   0xA901             ADD      R1,SP,#+4
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable16_62  ;; 0x40020400
   \   00000048   0x.... 0x....      BL       HAL_GPIO_Init
    961          
    962          	/* Peripheral clock enable */
    963          	__HAL_RCC_I2C1_CLK_ENABLE();
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable16_63  ;; 0x40023840
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable16_63  ;; 0x40023840
   \   0000005A   0x6008             STR      R0,[R1, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable16_63  ;; 0x40023840
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF410 0x1000      ANDS     R0,R0,#0x200000
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0x9800             LDR      R0,[SP, #+0]
    964          	/* Peripheral interrupt init*/
    965          	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
   \   0000006A   0x2200             MOVS     R2,#+0
   \   0000006C   0x2103             MOVS     R1,#+3
   \   0000006E   0x201F             MOVS     R0,#+31
   \   00000070   0x.... 0x....      BL       HAL_NVIC_SetPriority
    966          	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \   00000074   0x201F             MOVS     R0,#+31
   \   00000076   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   0000007A   0xE032             B.N      ??HAL_I2C_MspInit_1
    967          
    968            }
    969            else if(hi2c->Instance==I2C2)
   \                     ??HAL_I2C_MspInit_0: (+1)
   \   0000007C   0x6820             LDR      R0,[R4, #+0]
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable16_64  ;; 0x40005800
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xD12D             BNE.N    ??HAL_I2C_MspInit_1
    970            {
    971            /* USER CODE BEGIN I2C2_MspInit 0 */
    972          
    973            /* USER CODE END I2C2_MspInit 0 */
    974            
    975              /**I2C2 GPIO Configuration    
    976              PB10     ------> I2C2_SCL
    977              PB11     ------> I2C2_SDA 
    978              */
    979              __HAL_RCC_GPIOB_CLK_ENABLE();
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable16_43  ;; 0x40023830
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable16_43  ;; 0x40023830
   \   00000094   0x6008             STR      R0,[R1, #+0]
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable16_43  ;; 0x40023830
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   000000A0   0x9000             STR      R0,[SP, #+0]
   \   000000A2   0x9800             LDR      R0,[SP, #+0]
    980              
    981              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
   \   000000A4   0xF44F 0x6040      MOV      R0,#+3072
   \   000000A8   0x9001             STR      R0,[SP, #+4]
    982              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \   000000AA   0x2012             MOVS     R0,#+18
   \   000000AC   0x9002             STR      R0,[SP, #+8]
    983              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x9003             STR      R0,[SP, #+12]
    984              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000000B2   0x2003             MOVS     R0,#+3
   \   000000B4   0x9004             STR      R0,[SP, #+16]
    985              GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
   \   000000B6   0x2004             MOVS     R0,#+4
   \   000000B8   0x9005             STR      R0,[SP, #+20]
    986              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   000000BA   0xA901             ADD      R1,SP,#+4
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable16_62  ;; 0x40020400
   \   000000C0   0x.... 0x....      BL       HAL_GPIO_Init
    987          
    988              /* Peripheral clock enable */
    989              __HAL_RCC_I2C2_CLK_ENABLE();
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable16_63  ;; 0x40023840
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable16_63  ;; 0x40023840
   \   000000D2   0x6008             STR      R0,[R1, #+0]
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable16_63  ;; 0x40023840
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0xF410 0x0080      ANDS     R0,R0,#0x400000
   \   000000DE   0x9000             STR      R0,[SP, #+0]
   \   000000E0   0x9800             LDR      R0,[SP, #+0]
    990              /* Peripheral interrupt init*/
    991              //HAL_NVIC_SetPriority(I2C2_EV_IRQn, 3, 1);
    992              //HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    993            }
    994          
    995          }
   \                     ??HAL_I2C_MspInit_1: (+1)
   \   000000E2   0xB006             ADD      SP,SP,#+24
   \   000000E4   0xBD10             POP      {R4,PC}          ;; return
    996          
    997          /*---------------------------------------------------*/
    998          /*   UART                                            */
    999          /* UART4 init function */

   \                                 In section .text, align 2, keep-with-next
   1000          void USART3_Init(void)
   1001          {
   \                     USART3_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1002          
   1003            huart3.Instance = USART3;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable16_65  ;; 0x40004800
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable16_66
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   1004            huart3.Init.BaudRate = 115200;
   \   0000000C   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable16_66
   \   00000014   0x6048             STR      R0,[R1, #+4]
   1005            huart3.Init.WordLength = UART_WORDLENGTH_8B;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable16_66
   \   0000001C   0x6088             STR      R0,[R1, #+8]
   1006            huart3.Init.StopBits = UART_STOPBITS_1;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable16_66
   \   00000024   0x60C8             STR      R0,[R1, #+12]
   1007            huart3.Init.Parity = UART_PARITY_NONE;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable16_66
   \   0000002C   0x6108             STR      R0,[R1, #+16]
   1008            huart3.Init.Mode = UART_MODE_TX_RX;
   \   0000002E   0x200C             MOVS     R0,#+12
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable16_66
   \   00000034   0x6148             STR      R0,[R1, #+20]
   1009            huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable16_66
   \   0000003C   0x6188             STR      R0,[R1, #+24]
   1010            huart3.Init.OverSampling = UART_OVERSAMPLING_16;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable16_66
   \   00000044   0x61C8             STR      R0,[R1, #+28]
   1011            huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED ;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable16_66
   \   0000004C   0x6208             STR      R0,[R1, #+32]
   1012            huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable16_66
   \   00000054   0x6248             STR      R0,[R1, #+36]
   1013            HAL_UART_Init(&huart3);
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable16_66
   \   0000005A   0x.... 0x....      BL       HAL_UART_Init
   1014          
   1015            //HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
   1016            //HAL_NVIC_EnableIRQ(USART3_IRQn);
   1017          
   1018          }
   \   0000005E   0xBD01             POP      {R0,PC}          ;; return
   1019          
   1020          

   \                                 In section .text, align 2, keep-with-next
   1021          void HAL_UART_MspInit(UART_HandleTypeDef *huart)
   1022          {
   \                     HAL_UART_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   1023          
   1024            GPIO_InitTypeDef GPIO_InitStruct;
   1025            if(huart->Instance==USART3)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable16_65  ;; 0x40004800
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD135             BNE.N    ??HAL_UART_MspInit_0
   1026            {
   1027          
   1028          
   1029            /* USER CODE END UART4_MspInit 0 */
   1030              /* Peripheral clock enable */
   1031              __USART3_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable16_63  ;; 0x40023840
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable16_63  ;; 0x40023840
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable16_63  ;; 0x40023840
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF410 0x2080      ANDS     R0,R0,#0x40000
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
   1032              __GPIOC_CLK_ENABLE();
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable16_43  ;; 0x40023830
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable16_43  ;; 0x40023830
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable16_43  ;; 0x40023830
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   1033            
   1034              /**UART4 GPIO Configuration    
   1035              PC10     ------> USART3_TX
   1036              PC11     ------> USART3_RX
   1037              */
   1038              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
   \   0000004C   0xF44F 0x6040      MOV      R0,#+3072
   \   00000050   0x9001             STR      R0,[SP, #+4]
   1039              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x9002             STR      R0,[SP, #+8]
   1040              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x9003             STR      R0,[SP, #+12]
   1041              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   0000005A   0x2003             MOVS     R0,#+3
   \   0000005C   0x9004             STR      R0,[SP, #+16]
   1042              GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
   \   0000005E   0x2007             MOVS     R0,#+7
   \   00000060   0x9005             STR      R0,[SP, #+20]
   1043              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000062   0xA901             ADD      R1,SP,#+4
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable16_67  ;; 0x40020800
   \   00000068   0x.... 0x....      BL       HAL_GPIO_Init
   1044          
   1045              /* NVIC for USART */
   1046              HAL_NVIC_SetPriority(USART3_IRQn, 7, 1);
   \   0000006C   0x2201             MOVS     R2,#+1
   \   0000006E   0x2107             MOVS     R1,#+7
   \   00000070   0x2027             MOVS     R0,#+39
   \   00000072   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1047              HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   00000076   0x2027             MOVS     R0,#+39
   \   00000078   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1048          
   1049            }
   1050          
   1051          }
   \                     ??HAL_UART_MspInit_0: (+1)
   \   0000007C   0xB006             ADD      SP,SP,#+24
   \   0000007E   0xBD10             POP      {R4,PC}          ;; return
   1052          
   1053          
   1054          

   \                                 In section .text, align 2, keep-with-next
   1055          void EXTI4_IRQHandler(void)
   1056          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1057              /* EXTI line interrupt detected */
   1058            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable16_68  ;; 0x40013c14
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x06C0             LSLS     R0,R0,#+27
   \   0000000A   0xD517             BPL.N    ??EXTI4_IRQHandler_0
   1059            {
   1060              
   1061               if (cntRisingEXTI==20)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable16_69
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0x2814             CMP      R0,#+20
   \   00000014   0xD107             BNE.N    ??EXTI4_IRQHandler_1
   1062               {
   1063              	/*--------------Enable read PCM data --------------------*/   
   1064                  //flgDlyUpd = 1;  
   1065                  //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1066          		//__HAL_UNLOCK(&hspi5);
   1067                  //__HAL_SPI_ENABLE(&hspi5);
   1068          		cntRisingEXTI=0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable16_69
   \   0000001C   0x8008             STRH     R0,[R1, #+0]
   1069          
   1070          		/*Disable external interrupt */
   1071          		HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI4_IRQn));
   \   0000001E   0x200A             MOVS     R0,#+10
   \   00000020   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   00000024   0xE006             B.N      ??EXTI4_IRQHandler_2
   1072          		//HAL_GPIO_DeInit(GPIOB,GPIO_PIN_4);
   1073               }
   1074               else
   1075               {
   1076                   cntRisingEXTI++;
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable16_69
   \   0000002A   0x8800             LDRH     R0,[R0, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable16_69
   \   00000032   0x8008             STRH     R0,[R1, #+0]
   1077          		 //__HAL_SPI_DISABLE(&hspi5);
   1078               }
   1079               
   1080                __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
   \                     ??EXTI4_IRQHandler_2: (+1)
   \   00000034   0x2010             MOVS     R0,#+16
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable16_68  ;; 0x40013c14
   \   0000003A   0x6008             STR      R0,[R1, #+0]
   1081          
   1082            }
   1083          }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return
   1084                        

   \                                 In section .text, align 2, keep-with-next
   1085          void EXTI15_10_IRQHandler(void)
   1086          {
   1087          
   1088          }
   \                     EXTI15_10_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1089          
   1090          /* Events for Button Press */

   \                                 In section .text, align 2, keep-with-next
   1091          void EXTI9_5_IRQHandler(void)
   1092          {
   \                     EXTI9_5_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1093          
   1094            /* EXTI line interrupt detected */
   1095            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable16_68  ;; 0x40013c14
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x05C0             LSLS     R0,R0,#+23
   \   0000000A   0xD50B             BPL.N    ??EXTI9_5_IRQHandler_0
   1096            {
   1097          	  btnSW2 = 1;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable16_70
   \   00000012   0x7008             STRB     R0,[R1, #+0]
   1098          	  BSP_LED_Toggle(LED2);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       BSP_LED_Toggle
   1099          	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
   \   0000001A   0xF44F 0x7080      MOV      R0,#+256
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable16_68  ;; 0x40013c14
   \   00000022   0x6008             STR      R0,[R1, #+0]
   1100          
   1101            }
   1102          
   1103          
   1104            /* EXTI line interrupt detected */
   1105            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET)
   \                     ??EXTI9_5_IRQHandler_0: (+1)
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable16_68  ;; 0x40013c14
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x0580             LSLS     R0,R0,#+22
   \   0000002C   0xD510             BPL.N    ??EXTI9_5_IRQHandler_1
   1106            {
   1107          		btnSW1 = 1;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable16_71
   \   00000034   0x7008             STRB     R0,[R1, #+0]
   1108          		Command_index^=0x01;
   \   00000036   0x....             LDR.N    R0,??DataTable16_42
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0xF090 0x0001      EORS     R0,R0,#0x1
   \   0000003E   0x....             LDR.N    R1,??DataTable16_42
   \   00000040   0x7008             STRB     R0,[R1, #+0]
   1109          		BSP_LED_Toggle(LED1);
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      BL       BSP_LED_Toggle
   1110          
   1111          	   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
   \   00000048   0xF44F 0x7000      MOV      R0,#+512
   \   0000004C   0x....             LDR.N    R1,??DataTable16_68  ;; 0x40013c14
   \   0000004E   0x6008             STR      R0,[R1, #+0]
   1112            }
   1113          
   1114          }
   \                     ??EXTI9_5_IRQHandler_1: (+1)
   \   00000050   0xBD01             POP      {R0,PC}          ;; return
   1115          
   1116          

   \                                 In section .text, align 2, keep-with-next
   1117          void DFT_Init(void)
   1118          {
   \                     DFT_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1119          #if MAIN_CRSCORR
   1120          		arm_rfft_init_q15(&RealFFT_Ins,(uint32_t)128,(uint32_t)0,(uint32_t)1);
   1121          		arm_rfft_init_q15(&RealIFFT_Ins,(uint32_t)128,(uint32_t)1,(uint32_t)1);
   1122          #endif  
   1123          		/* Initialize the CFFT/CIFFT module */	
   1124          		arm_rfft_init_f32(&S1,&SS1, 512,  0, 1); 
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0xF44F 0x7200      MOV      R2,#+512
   \   0000000C   0x....             LDR.N    R1,??DataTable16_72
   \   0000000E   0x....             LDR.N    R0,??DataTable16_73
   \   00000010   0x.... 0x....      BL       arm_rfft_init_f32
   1125          		arm_rfft_init_f32(&S2,&SS2, 512,  0, 1); 
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0xF44F 0x7200      MOV      R2,#+512
   \   0000001E   0x....             LDR.N    R1,??DataTable16_74
   \   00000020   0x....             LDR.N    R0,??DataTable16_75
   \   00000022   0x.... 0x....      BL       arm_rfft_init_f32
   1126          		arm_rfft_init_f32(&S3,&SS3, 512,  0, 1); 
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0xF44F 0x7200      MOV      R2,#+512
   \   00000030   0x....             LDR.N    R1,??DataTable16_76
   \   00000032   0x....             LDR.N    R0,??DataTable16_77
   \   00000034   0x.... 0x....      BL       arm_rfft_init_f32
   1127          		arm_rfft_init_f32(&S4,&SS4, 512,  0, 1);
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x2300             MOVS     R3,#+0
   \   0000003E   0xF44F 0x7200      MOV      R2,#+512
   \   00000042   0x....             LDR.N    R1,??DataTable16_78
   \   00000044   0x....             LDR.N    R0,??DataTable16_79
   \   00000046   0x.... 0x....      BL       arm_rfft_init_f32
   1128          		arm_rfft_init_f32(&IS,&ISS, 512,  1, 1);
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x9000             STR      R0,[SP, #+0]
   \   0000004E   0x2301             MOVS     R3,#+1
   \   00000050   0xF44F 0x7200      MOV      R2,#+512
   \   00000054   0x....             LDR.N    R1,??DataTable16_80
   \   00000056   0x....             LDR.N    R0,??DataTable16_81
   \   00000058   0x.... 0x....      BL       arm_rfft_init_f32
   1129          
   1130          		//arm_rfft_fast_init_f32(&S1, 512);
   1131                          //arm_rfft_fast_init_f32(&S2, 512);
   1132          		//arm_rfft_fast_init_f32(&S3, 512);
   1133          		//arm_rfft_fast_init_f32(&S4, 512);
   1134          		//arm_rfft_fast_init_f32(&IS, 512);
   1135          }
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return
   1136          
   1137          

   \                                 In section .text, align 2, keep-with-next
   1138          void SumDelay(Mic_Array_Data *BufferIn)
   1139          {
   \                     SumDelay: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   1140                     //if (idxLatency12>idxLatency13)
   1141                     // {
   1142                     //     if (idxLatency13 > idxLatency14)
   1143                     //     {
   1144                     //         /* MIC2 --> MIC3 --> MIC4 */
   1145                     //     }
   1146                     //             else if (idxLatency14 > idxLatency12)
   1147                     //             {
   1148                     //        /* MIC4-->MIC2-->MIC3  */
   1149                     //            }
   1150                     //             else
   1151                     //             {
   1152                     //       /* MIC2-->MIC4-->MIC3  */
   1153                     //             }
   1154                     // }
   1155                     //else // idxLatency13>idxLatency12
   1156                     //     {
   1157                     //    if (idxLatency12 > idxLatency14)
   1158                     //    {
   1159                     //        //MIC3 --> MIC2 --> MIC4 
   1160                     //    }
   1161                     //        else if (idxLatency14 > idxLatency13)
   1162                     //        {
   1163                     //        //MIC4 --> MIC3 --> MIC2
   1164                     //        }
   1165                     //        else
   1166                     //        {
   1167                     //        //MIC3 --> MIC4 --> MIC2
   1168          	   //	   }
   1169          	   //}
   1170          
   1171          	
   1172          	for(uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000002   0x2100             MOVS     R1,#+0
   \                     ??SumDelay_0: (+1)
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0xF5B1 0x6F80      CMP      R1,#+1024
   \   0000000A   0xDA7C             BGE.N    ??SumDelay_1
   1173          	{
   1174          
   1175          		 if (i%2==0)
   \   0000000C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000E   0x2202             MOVS     R2,#+2
   \   00000010   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   00000014   0xFB03 0x1312      MLS      R3,R3,R2,R1
   \   00000018   0x2B00             CMP      R3,#+0
   \   0000001A   0xD168             BNE.N    ??SumDelay_2
   1176          		 {
   1177                              bufferSum[i] = (uint16_t)(BufferIn->bufMIC1[i]*FacMic.facMIC1 + 
   1178                              BufferIn->bufMIC2[(((i-idxLatency12)>0)?(i-idxLatency12):0)]*FacMic.facMIC2 + 
   1179                              BufferIn->bufMIC3[(((i-idxLatency13)>0)?(i-idxLatency13):0)]*FacMic.facMIC3 + 
   1180                              BufferIn->bufMIC4[(((i-idxLatency14)>0)?(i-idxLatency14):0)]*FacMic.facMIC4); 		
   \   0000001C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   0x....             LDR.N    R2,??DataTable16_82
   \   00000020   0xF9B2 0x2000      LDRSH    R2,[R2, #+0]
   \   00000024   0x1A8A             SUBS     R2,R1,R2
   \   00000026   0x2A01             CMP      R2,#+1
   \   00000028   0xDB05             BLT.N    ??SumDelay_3
   \   0000002A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002C   0x....             LDR.N    R2,??DataTable16_82
   \   0000002E   0xF9B2 0x2000      LDRSH    R2,[R2, #+0]
   \   00000032   0x1A8A             SUBS     R2,R1,R2
   \   00000034   0xE000             B.N      ??SumDelay_4
   \                     ??SumDelay_3: (+1)
   \   00000036   0x2200             MOVS     R2,#+0
   \                     ??SumDelay_4: (+1)
   \   00000038   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003A   0x....             LDR.N    R3,??DataTable16_83
   \   0000003C   0xF9B3 0x3000      LDRSH    R3,[R3, #+0]
   \   00000040   0x1ACB             SUBS     R3,R1,R3
   \   00000042   0x2B01             CMP      R3,#+1
   \   00000044   0xDB05             BLT.N    ??SumDelay_5
   \   00000046   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000048   0x....             LDR.N    R3,??DataTable16_83
   \   0000004A   0xF9B3 0x3000      LDRSH    R3,[R3, #+0]
   \   0000004E   0x1ACB             SUBS     R3,R1,R3
   \   00000050   0xE000             B.N      ??SumDelay_6
   \                     ??SumDelay_5: (+1)
   \   00000052   0x2300             MOVS     R3,#+0
   \                     ??SumDelay_6: (+1)
   \   00000054   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000056   0x....             LDR.N    R4,??DataTable16_10
   \   00000058   0xF9B4 0x4000      LDRSH    R4,[R4, #+0]
   \   0000005C   0x1B0C             SUBS     R4,R1,R4
   \   0000005E   0x2C01             CMP      R4,#+1
   \   00000060   0xDB05             BLT.N    ??SumDelay_7
   \   00000062   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000064   0x....             LDR.N    R4,??DataTable16_10
   \   00000066   0xF9B4 0x4000      LDRSH    R4,[R4, #+0]
   \   0000006A   0x1B0C             SUBS     R4,R1,R4
   \   0000006C   0xE000             B.N      ??SumDelay_8
   \                     ??SumDelay_7: (+1)
   \   0000006E   0x2400             MOVS     R4,#+0
   \                     ??SumDelay_8: (+1)
   \   00000070   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000072   0xF930 0x5011      LDRSH    R5,[R0, R1, LSL #+1]
   \   00000076   0xEE00 0x5A10      VMOV     S0,R5
   \   0000007A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000007E   0x....             LDR.N    R5,??DataTable16_3
   \   00000080   0xEDD5 0x0A00      VLDR     S1,[R5, #0]
   \   00000084   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000088   0xEB10 0x0242      ADDS     R2,R0,R2, LSL #+1
   \   0000008C   0xF241 0x0514      MOVW     R5,#+4116
   \   00000090   0x5EAA             LDRSH    R2,[R5, R2]
   \   00000092   0xEE00 0x2A90      VMOV     S1,R2
   \   00000096   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   0000009A   0x....             LDR.N    R2,??DataTable16_3
   \   0000009C   0xED92 0x1A01      VLDR     S2,[R2, #+4]
   \   000000A0   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000A4   0xEB10 0x0243      ADDS     R2,R0,R3, LSL #+1
   \   000000A8   0xF242 0x0328      MOVW     R3,#+8232
   \   000000AC   0x5E9A             LDRSH    R2,[R3, R2]
   \   000000AE   0xEE00 0x2A90      VMOV     S1,R2
   \   000000B2   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000000B6   0x....             LDR.N    R2,??DataTable16_3
   \   000000B8   0xED92 0x1A02      VLDR     S2,[R2, #+8]
   \   000000BC   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000C0   0xEB10 0x0244      ADDS     R2,R0,R4, LSL #+1
   \   000000C4   0xF243 0x033C      MOVW     R3,#+12348
   \   000000C8   0x5E9A             LDRSH    R2,[R3, R2]
   \   000000CA   0xEE00 0x2A90      VMOV     S1,R2
   \   000000CE   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000000D2   0x....             LDR.N    R2,??DataTable16_3
   \   000000D4   0xED92 0x1A03      VLDR     S2,[R2, #+12]
   \   000000D8   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000DC   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000E0   0xEE10 0x2A10      VMOV     R2,S0
   \   000000E4   0x....             LDR.N    R3,??DataTable16_84
   \   000000E6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000E8   0xF823 0x2011      STRH     R2,[R3, R1, LSL #+1]
   \   000000EC   0xE009             B.N      ??SumDelay_9
   1181          		 }
   1182          		 else
   1183          		 {
   1184                               bufferSum[i] = (uint16_t)(BufferIn->bufMIC3[i]);
   \                     ??SumDelay_2: (+1)
   \   000000EE   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000F0   0xEB10 0x0241      ADDS     R2,R0,R1, LSL #+1
   \   000000F4   0xF242 0x0328      MOVW     R3,#+8232
   \   000000F8   0x5A9A             LDRH     R2,[R3, R2]
   \   000000FA   0x....             LDR.N    R3,??DataTable16_84
   \   000000FC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000FE   0xF823 0x2011      STRH     R2,[R3, R1, LSL #+1]
   1185          		 }
   1186          	}
   \                     ??SumDelay_9: (+1)
   \   00000102   0x1C49             ADDS     R1,R1,#+1
   \   00000104   0xE77E             B.N      ??SumDelay_0
   1187          }
   \                     ??SumDelay_1: (+1)
   \   00000106   0xBC30             POP      {R4,R5}
   \   00000108   0x4770             BX       LR               ;; return
   1188          
   1189          

   \                                 In section .text, align 2, keep-with-next
   1190          void ButtonInit(void)
   1191          {
   \                     ButtonInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1192              /* PI8: SW2 */
   1193          	/* PI9: SW1 */
   1194          	 /* ----------------------*/
   1195          	 __GPIOB_CLK_ENABLE();
   \   00000002   0x....             LDR.N    R0,??DataTable16_43  ;; 0x40023830
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000000A   0x....             LDR.N    R1,??DataTable16_43  ;; 0x40023830
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x....             LDR.N    R0,??DataTable16_43  ;; 0x40023830
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   1196          	GPIO_INS.Pin = GPIO_PIN_8|GPIO_PIN_9;
   \   0000001A   0xF44F 0x7040      MOV      R0,#+768
   \   0000001E   0x....             LDR.N    R1,??DataTable16_44
   \   00000020   0x6008             STR      R0,[R1, #+0]
   1197          	GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   00000022   0x....             LDR.N    R0,??DataTable16_45  ;; 0x10110000
   \   00000024   0x....             LDR.N    R1,??DataTable16_44
   \   00000026   0x6048             STR      R0,[R1, #+4]
   1198          	GPIO_INS.Pull =GPIO_NOPULL;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR.N    R1,??DataTable16_44
   \   0000002C   0x6088             STR      R0,[R1, #+8]
   1199          	GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   0000002E   0x2003             MOVS     R0,#+3
   \   00000030   0x....             LDR.N    R1,??DataTable16_44
   \   00000032   0x60C8             STR      R0,[R1, #+12]
   1200          	HAL_GPIO_Init(GPIOI,&GPIO_INS);
   \   00000034   0x....             LDR.N    R1,??DataTable16_44
   \   00000036   0x....             LDR.N    R0,??DataTable16_85  ;; 0x40022000
   \   00000038   0x.... 0x....      BL       HAL_GPIO_Init
   1201          	
   1202          	/* Enable and set Button EXTI Interrupt to the lowest priority */
   1203          	HAL_NVIC_SetPriority((IRQn_Type)EXTI9_5_IRQn, 0x0F, 0x00);
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x210F             MOVS     R1,#+15
   \   00000040   0x2017             MOVS     R0,#+23
   \   00000042   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1204          	HAL_NVIC_EnableIRQ((IRQn_Type)EXTI9_5_IRQn);
   \   00000046   0x2017             MOVS     R0,#+23
   \   00000048   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1205          	/*-----------------------*/
   1206          
   1207          }
   \   0000004C   0xBD01             POP      {R0,PC}          ;; return
   1208          
   1209          
   1210          /* I2C2 init function */

   \                                 In section .text, align 2, keep-with-next
   1211          void MX_I2C2_Init(void)
   1212          {
   \                     MX_I2C2_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1213             __HAL_I2C_DISABLE(&hi2c2);
   \   00000002   0x....             LDR.N    R0,??DataTable16_86
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0840             LSRS     R0,R0,#+1
   \   0000000A   0x0040             LSLS     R0,R0,#+1
   \   0000000C   0x....             LDR.N    R1,??DataTable16_86
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x6008             STR      R0,[R1, #+0]
   1214            hi2c2.Instance = I2C2;
   \   00000012   0x....             LDR.N    R0,??DataTable16_64  ;; 0x40005800
   \   00000014   0x....             LDR.N    R1,??DataTable16_86
   \   00000016   0x6008             STR      R0,[R1, #+0]
   1215            hi2c2.Init.Timing =0x00A0689A ;//I2C_TIMING  0x00303D5D 0x00A0689A
   \   00000018   0x....             LDR.N    R0,??DataTable16_87  ;; 0xa0689a
   \   0000001A   0x....             LDR.N    R1,??DataTable16_86
   \   0000001C   0x6048             STR      R0,[R1, #+4]
   1216            hi2c2.Init.OwnAddress1 = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR.N    R1,??DataTable16_86
   \   00000022   0x6088             STR      R0,[R1, #+8]
   1217            hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable16_86
   \   00000028   0x60C8             STR      R0,[R1, #+12]
   1218            hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR.N    R1,??DataTable16_86
   \   0000002E   0x6108             STR      R0,[R1, #+16]
   1219            hi2c2.Init.OwnAddress2 = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x....             LDR.N    R1,??DataTable16_86
   \   00000034   0x6148             STR      R0,[R1, #+20]
   1220            hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x....             LDR.N    R1,??DataTable16_86
   \   0000003A   0x6188             STR      R0,[R1, #+24]
   1221            hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x....             LDR.N    R1,??DataTable16_86
   \   00000040   0x61C8             STR      R0,[R1, #+28]
   1222            hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable16_86
   \   00000046   0x6208             STR      R0,[R1, #+32]
   1223            HAL_I2C_Init(&hi2c2);
   \   00000048   0x....             LDR.N    R0,??DataTable16_86
   \   0000004A   0x.... 0x....      BL       HAL_I2C_Init
   1224          
   1225              /**Configure Analogue filter 
   1226              */
   1227            //HAL_I2CEx_AnalogFilter_Config(&hi2c2, I2C_ANALOGFILTER_ENABLE);
   1228          
   1229          }
   \   0000004E   0xBD01             POP      {R0,PC}          ;; return
   1230          

   \                                 In section .text, align 2, keep-with-next
   1231           void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
   1232          {
   \                     HAL_I2S_TxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1233          	 //sop1hc if(AudioState == AUDIO_STATE_PLAY)
   1234          	 //if (BufferCtlPlayOut.state == BUFFER_OFFSET_HALF)
   1235          	 {
   1236          	   //BufferCtlPlayOut.state = BUFFER_OFFSET_FULL;
   1237          	   XferCplt=1;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable16_33
   \   00000008   0x7008             STRB     R0,[R1, #+0]
   1238          	   Audio_Play_Out(); 
   \   0000000A   0x.... 0x....      BL       Audio_Play_Out
   1239          
   1240          	   if (cntStrt<100) cntStrt++;
   \   0000000E   0x....             LDR.N    R0,??DataTable16_53
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0x2864             CMP      R0,#+100
   \   00000014   0xDA04             BGE.N    ??HAL_I2S_TxCpltCallback_0
   \   00000016   0x....             LDR.N    R0,??DataTable16_53
   \   00000018   0x8800             LDRH     R0,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable16_53
   \   0000001E   0x8008             STRH     R0,[R1, #+0]
   1241          	 }
   1242          	 
   1243          
   1244          }
   \                     ??HAL_I2S_TxCpltCallback_0: (+1)
   \   00000020   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0xE000EF50         DC32     0xe000ef50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0xE000ED84         DC32     0xe000ed84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0xE000ED80         DC32     0xe000ed80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0xE000ED14         DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0xE000EF60         DC32     0xe000ef60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x........         DC32     flgDlyUpd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x........         DC32     FacMic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   0x........         DC32     Buffer3+0x708C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   0x........         DC32     Buffer3+0x6078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   0x........         DC32     idxLatency78

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   0x........         DC32     Buffer3+0x303C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   0x........         DC32     idxLatency14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   0x........         DC32     Buffer3+0x4050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   0x........         DC32     Buffer3+0x1014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   0x........         DC32     idxLatency25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   0x........         DC32     Buffer3+0x2028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   0x........         DC32     Buffer3+0x5064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \   00000000   0x........         DC32     idxLatency63

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_17:
   \   00000000   0x........         DC32     Buffer1+0x708C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_18:
   \   00000000   0x........         DC32     Buffer1+0x6078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_19:
   \   00000000   0x........         DC32     Buffer1+0x303C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_20:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_21:
   \   00000000   0x........         DC32     Buffer1+0x4050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_22:
   \   00000000   0x........         DC32     Buffer1+0x1014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_23:
   \   00000000   0x........         DC32     Buffer1+0x2028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_24:
   \   00000000   0x........         DC32     Buffer1+0x5064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_25:
   \   00000000   0x........         DC32     Buffer2+0x708C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_26:
   \   00000000   0x........         DC32     Buffer2+0x6078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_27:
   \   00000000   0x........         DC32     Buffer2+0x303C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_28:
   \   00000000   0x........         DC32     Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_29:
   \   00000000   0x........         DC32     Buffer2+0x4050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_30:
   \   00000000   0x........         DC32     Buffer2+0x1014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_31:
   \   00000000   0x........         DC32     Buffer2+0x2028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_32:
   \   00000000   0x........         DC32     Buffer2+0x5064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_33:
   \   00000000   0x........         DC32     XferCplt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_34:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_35:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_36:
   \   00000000   0x........         DC32     idxSPI5DataBuf3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_37:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_38:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_39:
   \   00000000   0x........         DC32     I2S2_idxTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_40:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_41:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_42:
   \   00000000   0x........         DC32     Command_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_43:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_44:
   \   00000000   0x........         DC32     GPIO_INS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_45:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_46:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_47:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_48:
   \   00000000   0x........         DC32     hUSBDDevice

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_49:
   \   00000000   0x........         DC32     AUDIO_Desc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_50:
   \   00000000   0x........         DC32     USBD_AUDIO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_51:
   \   00000000   0x........         DC32     USBD_AUDIO_fops

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_52:
   \   00000000   0x........         DC32     stFrstFrmStore

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_53:
   \   00000000   0x........         DC32     cntStrt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_54:
   \   00000000   0x........         DC32     WaveRecord_flgIni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_55:
   \   00000000   0x........         DC32     I2S1_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_56:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_57:
   \   00000000   0x........         DC32     flg10ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_58:
   \   00000000   0x........         DC32     cntTime200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_59:
   \   00000000   0x........         DC32     ??ticks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_60:
   \   00000000   0x00100001         DC32     0x100001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_61:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_62:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_63:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_64:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_65:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_66:
   \   00000000   0x........         DC32     huart3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_67:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_68:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_69:
   \   00000000   0x........         DC32     cntRisingEXTI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_70:
   \   00000000   0x........         DC32     btnSW2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_71:
   \   00000000   0x........         DC32     btnSW1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_72:
   \   00000000   0x........         DC32     SS1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_73:
   \   00000000   0x........         DC32     `S1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_74:
   \   00000000   0x........         DC32     SS2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_75:
   \   00000000   0x........         DC32     `S2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_76:
   \   00000000   0x........         DC32     SS3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_77:
   \   00000000   0x........         DC32     `S3`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_78:
   \   00000000   0x........         DC32     SS4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_79:
   \   00000000   0x........         DC32     `S4`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_80:
   \   00000000   0x........         DC32     ISS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_81:
   \   00000000   0x........         DC32     IS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_82:
   \   00000000   0x........         DC32     idxLatency12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_83:
   \   00000000   0x........         DC32     idxLatency13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_84:
   \   00000000   0x........         DC32     bufferSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_85:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_86:
   \   00000000   0x........         DC32     hi2c2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_87:
   \   00000000   0x00A0689A         DC32     0xa0689a
   1245          
   1246          /*****************************END OF FILE**************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Audio_Play_Out
         8   -> Audio_MAL_Play
     144   BSP_AUDIO_OUT_ClockConfig
       144   -> HAL_RCCEx_GetPeriphCLKConfig
       144   -> HAL_RCCEx_PeriphCLKConfig
       8   ButtonInit
         8   -> HAL_GPIO_Init
         8   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
       8   CPU_CACHE_Enable
         8   -> SCB_EnableDCache
         8   -> SCB_EnableICache
       8   DFT_Init
         8   -> arm_rfft_init_f32
       0   EXTI15_10_IRQHandler
       8   EXTI4_IRQHandler
         8   -> HAL_NVIC_DisableIRQ
       8   EXTI9_5_IRQHandler
         8   -> BSP_LED_Toggle
       8   FFT_Update
         8   -> AudioMerging
         8   -> CrssCor
         8   -> FactorUpd
         8   -> PDM2PCMSDO78
         8   -> SumDelay
      32   HAL_I2C_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       8   HAL_I2S_TxCpltCallback
         8   -> Audio_Play_Out
      32   HAL_UART_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       8   MX_I2C2_Init
         8   -> HAL_I2C_Init
       4   SCB_EnableDCache
       0   SCB_EnableICache
       8   SumDelay
     208   SystemClock_Config
       208   -> HAL_PWREx_EnableOverDrive
       208   -> HAL_RCCEx_PeriphCLKConfig
       208   -> HAL_RCC_ClockConfig
       208   -> HAL_RCC_OscConfig
       0   Toggle_Leds
       8   USART3_Init
         8   -> HAL_UART_Init
       8   main
         8   -> AUDIO_InitApplication
         8   -> Audio_MAL_Play
         8   -> BSP_AUDIO_OUT_ClockConfig
         8   -> BSP_LED_Init
         8   -> BSP_LED_Toggle
         8   -> BSP_SDRAM_Init
         8   -> ButtonInit
         8   -> CPU_CACHE_Enable
         8   -> DFT_Init
         8   -> FFT_Update
         8   -> HAL_GPIO_Init
         8   -> HAL_GPIO_WritePin
         8   -> HAL_Init
         8   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
         8   -> MIC1TO6_Init
         8   -> MX_I2C2_Init
         8   -> STA321MP_Ini
         8   -> SystemClock_Config
         8   -> USBD_AUDIO_Init_Microphone_Descriptor
         8   -> USBD_AUDIO_RegisterInterface
         8   -> USBD_Init
         8   -> USBD_RegisterClass
         8   -> USBD_Start


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_10
       4  ??DataTable16_11
       4  ??DataTable16_12
       4  ??DataTable16_13
       4  ??DataTable16_14
       4  ??DataTable16_15
       4  ??DataTable16_16
       4  ??DataTable16_17
       4  ??DataTable16_18
       4  ??DataTable16_19
       4  ??DataTable16_2
       4  ??DataTable16_20
       4  ??DataTable16_21
       4  ??DataTable16_22
       4  ??DataTable16_23
       4  ??DataTable16_24
       4  ??DataTable16_25
       4  ??DataTable16_26
       4  ??DataTable16_27
       4  ??DataTable16_28
       4  ??DataTable16_29
       4  ??DataTable16_3
       4  ??DataTable16_30
       4  ??DataTable16_31
       4  ??DataTable16_32
       4  ??DataTable16_33
       4  ??DataTable16_34
       4  ??DataTable16_35
       4  ??DataTable16_36
       4  ??DataTable16_37
       4  ??DataTable16_38
       4  ??DataTable16_39
       4  ??DataTable16_4
       4  ??DataTable16_40
       4  ??DataTable16_41
       4  ??DataTable16_42
       4  ??DataTable16_43
       4  ??DataTable16_44
       4  ??DataTable16_45
       4  ??DataTable16_46
       4  ??DataTable16_47
       4  ??DataTable16_48
       4  ??DataTable16_49
       4  ??DataTable16_5
       4  ??DataTable16_50
       4  ??DataTable16_51
       4  ??DataTable16_52
       4  ??DataTable16_53
       4  ??DataTable16_54
       4  ??DataTable16_55
       4  ??DataTable16_56
       4  ??DataTable16_57
       4  ??DataTable16_58
       4  ??DataTable16_59
       4  ??DataTable16_6
       4  ??DataTable16_60
       4  ??DataTable16_61
       4  ??DataTable16_62
       4  ??DataTable16_63
       4  ??DataTable16_64
       4  ??DataTable16_65
       4  ??DataTable16_66
       4  ??DataTable16_67
       4  ??DataTable16_68
       4  ??DataTable16_69
       4  ??DataTable16_7
       4  ??DataTable16_70
       4  ??DataTable16_71
       4  ??DataTable16_72
       4  ??DataTable16_73
       4  ??DataTable16_74
       4  ??DataTable16_75
       4  ??DataTable16_76
       4  ??DataTable16_77
       4  ??DataTable16_78
       4  ??DataTable16_79
       4  ??DataTable16_8
       4  ??DataTable16_80
       4  ??DataTable16_81
       4  ??DataTable16_82
       4  ??DataTable16_83
       4  ??DataTable16_84
       4  ??DataTable16_85
       4  ??DataTable16_86
       4  ??DataTable16_87
       4  ??DataTable16_9
     226  Audio_Play_Out
     112  BSP_AUDIO_OUT_ClockConfig
    4096  BufferTest
      78  ButtonInit
      12  CPU_CACHE_Enable
       1  Command_index
      94  DFT_Init
       2  DeltaBuf1
       2  DeltaBuf1Old
       2  EXTI15_10_IRQHandler
      62  EXTI4_IRQHandler
      82  EXTI9_5_IRQHandler
     352  FFT_Update
      24  FacMic
      20  GPIO_INS
     230  HAL_I2C_MspInit
      34  HAL_I2S_TxCpltCallback
     128  HAL_UART_MspInit
       2  I2S2_idxTmp
      24  IS
      20  ISS
      80  MX_I2C2_Init
      24  S1
      24  S2
      24  S3
      24  S4
     100  SCB_EnableDCache
      42  SCB_EnableICache
      20  SS1
      20  SS2
      20  SS3
      20  SS4
     266  SumDelay
     176  SystemClock_Config
      28  Toggle_Leds
      96  USART3_Init
       2  WaveRec_idxSens1
       2  WaveRec_idxSens2
       2  WaveRec_idxSens3
       2  WaveRec_idxSens4
       2  WaveRec_idxSens5
       2  WaveRec_idxSens6
    1024  aRxBuffer
       1  appli_state
       1  btnSW1
       1  btnSW2
    2048  bufferSum
       1  buffer_switch
       2  cntRisingEXTI
       2  cntTime200
       1  flg10ms
       1  flgDlyUpd
       1  flgSTAIni
     548  hUSBDDevice
     696  hUSBHost
     100  hspi4
     112  huart3
       1  idxDec
       2  idxLatency12
       2  idxLatency13
       2  idxLatency14
       2  idxLatency25
       2  idxLatency63
       2  idxLatency78
       2  idxSPI5DataBuf3
     606  main
      20  pI2CData
      12  pI2CRx
       1  stFrstFrmStore
       4  ticks

 
 8 948 bytes in section .bss
    22 bytes in section .data
 3 170 bytes in section .text
 
 3 170 bytes of CODE memory
 8 970 bytes of DATA memory

Errors: none
Warnings: 1
