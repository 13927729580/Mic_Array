###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       22/Dec/2015  23:09:51
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -Ohz --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\main.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\main.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
      1          /**
      2            ******************************************************************************
      3            * @file    Audio/Mic_Array/Src/main.c
      4            * @author  Phan Le Son
      5            * @version V1.0.0
      6            * @date    12-Dec-2015 
      7            * @brief   Microphone Array
      8            ******************************************************************************
      9          
     10            */
     11          
     12          /* Includes ------------------------------------------------------------------*/
     13          
     14          #include "pdm_filter.h"
     15          #include "main.h"
     16          #include <stdio.h>
     17          
     18          
     19          /* Private typedef -----------------------------------------------------------*/
     20          /* Private define ------------------------------------------------------------*/
     21          /* Private macro -------------------------------------------------------------*/
     22          
     23          
     24          /* I2C TIMING Register define when I2C clock source is APB1 (SYSCLK/4) */
     25          /* I2C TIMING is calculated in case of the I2C Clock source is the APB1CLK = 50 MHz */
     26          /* This example use TIMING to 0x40912732 to reach 100 kHz speed (Rise time = 700 ns, Fall time = 100 ns) */
     27          
     28          
     29          
     30          #define DEBUG           0
     31          
     32          /* Extern Variable */
     33          //extern const uint16_t AUDIO_SAMPLE[];
     34          extern I2C_HandleTypeDef hi2c1;
     35          extern __IO uint8_t XferCplt;
     36          extern __IO uint8_t buffer_switch;
     37          extern uint8_t  pcSTAComnd[19];
     38          extern __IO uint8_t volume;
     39          extern __IO uint16_t cntPos;
     40          extern PDMFilter_InitStruct Filter[2];
     41          /* Globble variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     42          USBH_HandleTypeDef hUSBHost;
   \                     hUSBHost:
   \   00000000                      DS8 696

   \                                 In section .bss, align 1
     43          AUDIO_ApplicationTypeDef appli_state = APPLICATION_IDLE;//APPLICATION_IDLE
   \                     appli_state:
   \   00000000                      DS8 1
     44          
     45          

   \                                 In section .bss, align 4
     46          UART_HandleTypeDef huart6;
   \                     huart6:
   \   00000000                      DS8 112

   \                                 In section .bss, align 4
     47          SPI_HandleTypeDef hspi5;
   \                     hspi5:
   \   00000000                      DS8 100
     48          GPIO_InitTypeDef GPIO_INS;
     49          
     50          AUDIO_IN_BufferTypeDef Buffer1, Buffer2;
     51          AUDIO_IN_BufferTypeDef Buffer3;
     52          
     53          

   \                                 In section .data, align 4
     54          uint8_t  pI2CData[20]= {0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190};
   \                     pI2CData:
   \   00000000   0x00 0x0A          DC8 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150
   \              0x14 0x1E    
   \              0x28 0x32    
   \              0x3C 0x46    
   \              0x50 0x5A    
   \              0x64 0x6E    
   \              0x78 0x82    
   \              0x8C 0x96    
   \   00000010   0xA0 0xAA          DC8 160, 170, 180, 190
   \              0xB4 0xBE    

   \                                 In section .bss, align 4
     55          uint8_t  pI2CRx[10];
     56          
     57          
     58          uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     59          uint16_t __IO cntRisingEXTI;
     60          
     61          /* Buffer used for reception */
     62          uint8_t aRxBuffer[1024];
     63          
     64          uint16_t pDataMic8[64];//INTERNAL_BUFF_SIZE
     65          uint16_t idxMic8=0;
     66          
     67          #if (DEBUG)
     68          uint8_t  pUARTBuf[128];
     69          #endif
     70          
     71          /* Private function prototypes -----------------------------------------------*/
     72          static void SystemClock_Config(void);
     73          
     74          static void CPU_CACHE_Enable(void);
     75          
     76          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
     77          
     78          void UART6_Init(void);
     79          void MX_SPI5_Init(void);
     80          void ReadSTASeq(uint8_t Addr, uint8_t *pBufOut,uint8_t Len );
     81          void WriteSTAByte(uint8_t Addr, uint8_t *pBufIn, uint8_t len);
     82          void SPI5_CallBack(SPI_HandleTypeDef *hspi);
     83          
     84          
     85          char __IO flg10ms;
   \                     flg10ms:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \                     GPIO_INS:
   \   00000004                      DS8 20

   \                                 In section .bss, align 4
   \                     Buffer1:
   \   00000000                      DS8 18448
   \                     Buffer2:
   \   00004810                      DS8 18448

   \                                 In section .bss, align 4
   \                     Buffer3:
   \   00000000                      DS8 18448

   \                                 In section .bss, align 4
   \                     pI2CRx:
   \   00000000                      DS8 12

   \                                 In section .bss, align 2
   \                     idxSPI5DataBuf1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxSPI5DataBuf2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     cntRisingEXTI:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     aRxBuffer:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 4
     86          uint8_t flgSTAIni;
   \                     flgSTAIni:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \                     idxMic8:
   \   00000002                      DS8 2
   \                     pDataMic8:
   \   00000004                      DS8 128
     87          
     88          
     89          /* Private functions ---------------------------------------------------------*/
     90          
     91          /**
     92            * @brief  Main program
     93            * @param  None
     94            * @retval None
     95            */

   \                                 In section .text, align 2, keep-with-next
     96          int main(void)
     97          {
   \                     main: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
     98          
     99             uint8_t j;
    100             j=0;
   \   00000006   0x2400             MOVS     R4,#+0
    101            /* Enable the CPU Cache */
    102            CPU_CACHE_Enable();
   \   00000008   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0xe000ef50
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable10_1  ;; 0xe000ed14
   \   00000014   0x6004             STR      R4,[R0, #+0]
   \   00000016   0x680A             LDR      R2,[R1, #+0]
   \   00000018   0xF442 0x3200      ORR      R2,R2,#0x20000
   \   0000001C   0x600A             STR      R2,[R1, #+0]
   \   0000001E   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000022   0x670C             STR      R4,[R1, #+112]
   \   00000024   0xF3BF 0x8F4F      DSB      
   \   00000028   0x6ECA             LDR      R2,[R1, #+108]
   \   0000002A   0xF3C2 0x334E      UBFX     R3,R2,#+13,#+15
   \                     ??main_0: (+1)
   \   0000002E   0xF3C2 0x05C9      UBFX     R5,R2,#+3,#+10
   \                     ??main_1: (+1)
   \   00000032   0xF643 0x76E0      MOVW     R6,#+16352
   \   00000036   0xEA06 0x1643      AND      R6,R6,R3, LSL #+5
   \   0000003A   0xEA46 0x7685      ORR      R6,R6,R5, LSL #+30
   \   0000003E   0x6106             STR      R6,[R0, #+16]
   \   00000040   0x462E             MOV      R6,R5
   \   00000042   0x1E75             SUBS     R5,R6,#+1
   \   00000044   0x2E00             CMP      R6,#+0
   \   00000046   0xD1F4             BNE.N    ??main_1
   \   00000048   0x461D             MOV      R5,R3
   \   0000004A   0x1E6B             SUBS     R3,R5,#+1
   \   0000004C   0x2D00             CMP      R5,#+0
   \   0000004E   0xD1EE             BNE.N    ??main_0
   \   00000050   0xF3BF 0x8F4F      DSB      
   \   00000054   0x6808             LDR      R0,[R1, #+0]
   \   00000056   0xF440 0x3080      ORR      R0,R0,#0x10000
   \   0000005A   0x6008             STR      R0,[R1, #+0]
   \   0000005C   0x.... 0x....      BL       ?Subroutine0
    103            
    104            /* STM32F7xx HAL library initialization:
    105                 - Configure the Flash ART accelerator on ITCM interface
    106                 - Configure the Systick to generate an interrupt each 1 msec
    107                 - Set NVIC Group Priority to 4
    108                 - Global MSP (MCU Support Package) initialization
    109               */   
    110            HAL_Init();
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000060   0x.... 0x....      BL       HAL_Init
    111            
    112            /* Configure the system clock to 216 MHz */
    113            SystemClock_Config(); 
   \   00000064   0x.... 0x....      BL       SystemClock_Config
    114            //SystemClock_Config1();
    115          
    116            /* Init Audio Application */
    117            //AUDIO_InitApplication();
    118              /* Configure LED1 */
    119            BSP_LED_Init(LED1);
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      LDR.W    R5,??DataTable10_2
   \   0000006E   0x.... 0x....      BL       BSP_LED_Init
    120            BSP_LED_Init(LED2);
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x.... 0x....      LDR.W    R6,??DataTable10_3
   \   00000078   0x.... 0x....      BL       BSP_LED_Init
    121            
    122            /* Initialize for Audio player with CS43L22 */
    123           //WavePlayerInit(48000);
    124          
    125              /* Play on */
    126            //AudioFlashPlay((uint16_t*)(AUDIO_SAMPLE + AUIDO_START_ADDRESS),AUDIO_FILE_SZE,AUIDO_START_ADDRESS);
    127            //while(1);
    128            
    129            /* Init TS module */
    130            //BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
    131          
    132            /* Init Host Library */
    133            //USBH_Init(&hUSBHost, USBH_UserProcess, 0);
    134          
    135            /* Add Supported Class */
    136            //USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
    137            
    138            /* Start Host Process */
    139            //USBH_Start(&hUSBHost);
    140          
    141           
    142            
    143           
    144          
    145             /* ----------------------*/
    146             __GPIOB_CLK_ENABLE();
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x40023830
    147            GPIO_INS.Pin = GPIO_PIN_4;
    148            GPIO_INS.Mode =GPIO_MODE_IT_RISING;
    149            GPIO_INS.Pull =GPIO_NOPULL;
    150            GPIO_INS.Speed =GPIO_SPEED_HIGH;
    151            HAL_GPIO_Init(GPIOB,&GPIO_INS);
   \   00000080   0x.... 0x....      LDR.W    R7,??DataTable10_5
   \   00000084   0x.... 0x....      LDR.W    R8,??DataTable10_6
   \   00000088   0x6801             LDR      R1,[R0, #+0]
   \   0000008A   0xF041 0x0102      ORR      R1,R1,#0x2
   \   0000008E   0x6001             STR      R1,[R0, #+0]
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x1D29             ADDS     R1,R5,#+4
   \   00000094   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000098   0x9000             STR      R0,[SP, #+0]
   \   0000009A   0x9800             LDR      R0,[SP, #+0]
   \   0000009C   0x2010             MOVS     R0,#+16
   \   0000009E   0x60EC             STR      R4,[R5, #+12]
   \   000000A0   0x6068             STR      R0,[R5, #+4]
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x10110000
   \   000000A6   0x60A8             STR      R0,[R5, #+8]
   \   000000A8   0x2003             MOVS     R0,#+3
   \   000000AA   0x6128             STR      R0,[R5, #+16]
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable10_8  ;; 0x40020400
   \   000000B0   0x.... 0x....      BL       HAL_GPIO_Init
    152          
    153            /* Enable and set Button EXTI Interrupt to the lowest priority */
    154            HAL_NVIC_SetPriority((IRQn_Type)EXTI4_IRQn, 0x0F, 0x00);
   \   000000B4   0x2200             MOVS     R2,#+0
   \   000000B6   0x210F             MOVS     R1,#+15
   \   000000B8   0x200A             MOVS     R0,#+10
   \   000000BA   0x.... 0x....      BL       HAL_NVIC_SetPriority
    155            HAL_NVIC_EnableIRQ((IRQn_Type)EXTI4_IRQn);
   \   000000BE   0x200A             MOVS     R0,#+10
   \   000000C0   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    156            /*-----------------------*/
    157          	
    158          
    159            //sop1hc
    160            ///////Audio_Streaming_Ini();
    161            /* control the STA321 */
    162            ///////MX_I2C1_Init(); 
    163            MX_SPI5_Init();
   \   000000C4   0x.... 0x....      BL       MX_SPI5_Init
    164            //HAL_Delay(10000);
    165            //__HAL_SPI_DISABLE(&hspi5);
    166            
    167            I2S_Init();
   \   000000C8   0x.... 0x....      BL       I2S_Init
   \   000000CC   0xE005             B.N      ??main_2
    168          
    169            ////////STA321MP_Ini();	
    170          #if (DEBUG)  
    171            /* UART for debug */
    172            UART6_Init();
    173          #endif
    174            
    175          
    176          
    177           
    178            /* Run Application (Blocking mode) */
    179            while (1)
    180            {
    181          
    182          
    183          	/* USB Host Background task */
    184              //USBH_Process(&hUSBHost);
    185              
    186              /* AUDIO Menu Process */
    187              //AUDIO_MenuProcess();
    188          
    189          
    190          
    191              	  //if(HAL_SPI_TransmitReceive_IT(&hspi5, (uint8_t*)&Buffer1.pcm_buff[0], (uint8_t *)aRxBuffer, 1024) != HAL_OK)
    192                   {
    193                      /* Transfer error in transmission process */
    194                     //Error_Handler();
    195                    }
    196              if (flg10ms==1)
    197              {
    198                  flg10ms=0;
    199          		
    200                  //BSP_LED_Toggle(LED1);
    201          
    202          
    203                  //HAL_SPI_Receive_IT(&hspi5,(uint8_t *)&Buffer1.pcm_buff[0],124);
    204          	    //HAL_SPI_Receive(&hspi5,(uint8_t *)aRxBuffer,124,1000);
    205          
    206          	    //ReadSTASeq(pI2CData[j], pI2CRx, 10);
    207          		 
    208          
    209          #if (DEBUG)
    210          	     for(uint8_t i=0;i<10;i++)
    211          	     {
    212          		    sprintf(pUARTBuf,"Reg[ 0x%.2X ]: 0x%.2X \r\n",(pI2CData[j]+i),pI2CRx[i]);
    213          
    214          	        while(HAL_UART_Transmit(&huart6,pUARTBuf,20,1000)!= HAL_OK)
    215          	        {
    216          	          ;
    217          	        }
    218          	     }		   
    219          #endif
    220          
    221               
    222                 j++;
    223          
    224                 if (j==100) //50*10ms = 500 ms
    225                 {
    226           
    227          
    228          #if (DEBUG)
    229          		 sprintf(pUARTBuf,"------------------");
    230          		 while(HAL_UART_Transmit(&huart6,pUARTBuf,30,1000)!= HAL_OK)
    231          	     {
    232          	          ;
    233          	      }
    234          #endif
    235                   BSP_LED_Toggle(LED1);
    236          		 BSP_LED_Toggle(LED2);
    237          	   	 j=0;
    238                           
    239                 }
    240          
    241          
    242              }
    243          
    244          	if (XferCplt == 1)
    245          	{
    246          	    XferCplt = 0; // clear DMA interrupt flag
    247          
    248          		if (buffer_switch == 1)
    249          		{
    250                     Audio_MAL_Play(Buffer1.pcm_buff, 2*_MAX_SS);
    251          		}
    252          		else
    253          		{
    254                     Audio_MAL_Play(Buffer2.pcm_buff, 2*_MAX_SS);
   \                     ??main_3: (+1)
   \   000000CE   0x.... 0x....      BL       Audio_MAL_Play
    255          		}
    256          		buffer_switch ^=0x01;
   \   000000D2   0x7838             LDRB     R0,[R7, #+0]
   \   000000D4   0xF080 0x0001      EOR      R0,R0,#0x1
   \   000000D8   0x7038             STRB     R0,[R7, #+0]
   \                     ??main_2: (+1)
   \   000000DA   0x7828             LDRB     R0,[R5, #+0]
   \   000000DC   0x2801             CMP      R0,#+1
   \   000000DE   0xD10B             BNE.N    ??main_4
   \   000000E0   0x1C64             ADDS     R4,R4,#+1
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0xB2E4             UXTB     R4,R4
   \   000000E6   0x2C64             CMP      R4,#+100
   \   000000E8   0x7028             STRB     R0,[R5, #+0]
   \   000000EA   0xD105             BNE.N    ??main_4
   \   000000EC   0x.... 0x....      BL       BSP_LED_Toggle
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x2400             MOVS     R4,#+0
   \   000000F4   0x.... 0x....      BL       BSP_LED_Toggle
   \                     ??main_4: (+1)
   \   000000F8   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000000FC   0x2801             CMP      R0,#+1
   \   000000FE   0xD1EC             BNE.N    ??main_2
   \   00000100   0x2000             MOVS     R0,#+0
   \   00000102   0xF44F 0x6180      MOV      R1,#+1024
   \   00000106   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   0000010A   0x7838             LDRB     R0,[R7, #+0]
   \   0000010C   0x2801             CMP      R0,#+1
   \   0000010E   0xBF0E             ITEE     EQ 
   \   00000110   0x4630             MOVEQ    R0,R6
   \   00000112   0xF506 0x4090      ADDNE    R0,R6,#+18432
   \   00000116   0x3010             ADDNE    R0,R0,#+16
   \   00000118   0xE7D9             B.N      ??main_3
    257          	}
    258            }
    259            
    260          }
    261          
    262          /**
    263            * @brief  Toggle Leds.
    264            * @param  None
    265            * @retval None
    266            */

   \                                 In section .text, align 2, keep-with-next
    267          void Toggle_Leds(void)
    268          {
    269            static uint32_t ticks = 0;
    270          
    271            if (ticks++ > 200)
   \                     Toggle_Leds: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable10_9
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x1C4A             ADDS     R2,R1,#+1
   \   00000008   0x29C9             CMP      R1,#+201
   \   0000000A   0xBF28             IT       CS 
   \   0000000C   0x2200             MOVCS    R2,#+0
    272            {
    273              //BSP_LED_Toggle(LED1);
    274              ticks = 0;
   \   0000000E   0x6002             STR      R2,[R0, #+0]
    275            }
    276          }
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??ticks:
   \   00000000                      DS8 4
    277          
    278          
    279          /**
    280            * @brief  System Clock Configuration
    281            *         The system Clock is configured as follow : 
    282            *            System Clock source            = PLL (HSE)
    283            *            SYSCLK(Hz)                     = 216000000
    284            *            HCLK(Hz)                       = 216000000
    285            *            AHB Prescaler                  = 1
    286            *            APB1 Prescaler                 = 4
    287            *            APB2 Prescaler                 = 2
    288            *            HSE Frequency(Hz)              = 25000000
    289            *            PLL_M                          = 25
    290            *            PLL_N                          = 432
    291            *            PLL_P                          = 2
    292            *            PLL_Q                          = 9
    293            *            VDD(V)                         = 3.3
    294            *            Main regulator output voltage  = Scale1 mode
    295            *            Flash Latency(WS)              = 7
    296            * @param  None
    297            * @retval None
    298            */

   \                                 In section .text, align 2, keep-with-next
    299          static void SystemClock_Config(void)
    300          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
    301          
    302             RCC_OscInitTypeDef RCC_OscInitStruct;
    303            RCC_ClkInitTypeDef RCC_ClkInitStruct;
    304            RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    305          
    306            __PWR_CLK_ENABLE();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable10_10  ;; 0x40023840
   \   00000006   0xB0B3             SUB      SP,SP,#+204
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \   0000000E   0x6001             STR      R1,[R0, #+0]
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF000 0x5080      AND      R0,R0,#0x10000000
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x9800             LDR      R0,[SP, #+0]
    307          
    308            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable10_11  ;; 0x40007000
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0xF421 0x4140      BIC      R1,R1,#0xC000
   \   00000024   0xF441 0x4180      ORR      R1,R1,#0x4000
   \   00000028   0x6001             STR      R1,[R0, #+0]
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF400 0x4040      AND      R0,R0,#0xC000
   \   00000030   0x9000             STR      R0,[SP, #+0]
   \   00000032   0x9800             LDR      R0,[SP, #+0]
    309          
    310            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
   \   00000034   0x2002             MOVS     R0,#+2
   \   00000036   0x9006             STR      R0,[SP, #+24]
    311            RCC_OscInitStruct.HSIState = RCC_HSI_ON;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x9009             STR      R0,[SP, #+36]
    312            RCC_OscInitStruct.HSICalibrationValue = 16;
   \   0000003C   0x2010             MOVS     R0,#+16
   \   0000003E   0x900A             STR      R0,[SP, #+40]
    313            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x900C             STR      R0,[SP, #+48]
    314            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x900D             STR      R0,[SP, #+52]
    315            RCC_OscInitStruct.PLL.PLLM = 16;
   \   00000048   0x2010             MOVS     R0,#+16
   \   0000004A   0x900E             STR      R0,[SP, #+56]
    316            RCC_OscInitStruct.PLL.PLLN = 200;
   \   0000004C   0x20C8             MOVS     R0,#+200
   \   0000004E   0x900F             STR      R0,[SP, #+60]
    317            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x9010             STR      R0,[SP, #+64]
    318            RCC_OscInitStruct.PLL.PLLQ = 2;
   \   00000054   0x9011             STR      R0,[SP, #+68]
    319            HAL_RCC_OscConfig(&RCC_OscInitStruct);
   \   00000056   0xA806             ADD      R0,SP,#+24
   \   00000058   0x.... 0x....      BL       HAL_RCC_OscConfig
    320          
    321            HAL_PWREx_ActivateOverDrive();
   \   0000005C   0x.... 0x....      BL       HAL_PWREx_EnableOverDrive
    322          
    323            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    324                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   \   00000060   0x200F             MOVS     R0,#+15
    325            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    326            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
    327            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    328            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    329            HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x9001             STR      R0,[SP, #+4]
   \   00000066   0x2002             MOVS     R0,#+2
   \   00000068   0x9002             STR      R0,[SP, #+8]
   \   0000006A   0x2080             MOVS     R0,#+128
   \   0000006C   0x9003             STR      R0,[SP, #+12]
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x9004             STR      R0,[SP, #+16]
   \   00000072   0x9005             STR      R0,[SP, #+20]
   \   00000074   0xA801             ADD      R0,SP,#+4
   \   00000076   0x.... 0x....      BL       HAL_RCC_ClockConfig
    330          
    331            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
    332                                        |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2S;
   \   0000007A   0xF24C 0x2001      MOVW     R0,#+49665
   \   0000007E   0x9012             STR      R0,[SP, #+72]
    333            PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
   \   00000080   0x20C0             MOVS     R0,#+192
   \   00000082   0x9013             STR      R0,[SP, #+76]
    334            PeriphClkInitStruct.PLLI2S.PLLI2SP = 0;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x9016             STR      R0,[SP, #+88]
    335            PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
   \   00000088   0x2002             MOVS     R0,#+2
   \   0000008A   0x9014             STR      R0,[SP, #+80]
    336            PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
   \   0000008C   0x9015             STR      R0,[SP, #+84]
    337            PeriphClkInitStruct.PLLI2SDivQ = 1;
   \   0000008E   0x2001             MOVS     R0,#+1
   \   00000090   0x901B             STR      R0,[SP, #+108]
    338            PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x901F             STR      R0,[SP, #+124]
    339            PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
   \   00000096   0x9026             STR      R0,[SP, #+152]
    340            PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
   \   00000098   0x902B             STR      R0,[SP, #+172]
    341            PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
   \   0000009A   0x902C             STR      R0,[SP, #+176]
    342            HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
   \   0000009C   0xA812             ADD      R0,SP,#+72
   \   0000009E   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    343          
    344            HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
   \   000000A2   0x.... 0x....      BL       HAL_RCC_GetHCLKFreq
   \   000000A6   0xF44F 0x717A      MOV      R1,#+1000
   \   000000AA   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000AE   0x.... 0x....      BL       HAL_SYSTICK_Config
    345          
    346            HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
   \   000000B2   0x2004             MOVS     R0,#+4
   \   000000B4   0x.... 0x....      BL       HAL_SYSTICK_CLKSourceConfig
    347          }
   \   000000B8   0xB033             ADD      SP,SP,#+204
   \   000000BA   0xBD00             POP      {PC}             ;; return
    348          
    349          
    350          
    351          #ifdef  USE_FULL_ASSERT
    352          /**
    353            * @brief  Reports the name of the source file and the source line number
    354            *         where the assert_param error has occurred.
    355            * @param  file: pointer to the source file name
    356            * @param  line: assert_param error line source number
    357            * @retval None
    358            */
    359          void assert_failed(uint8_t* file, uint32_t line)
    360          { 
    361            /* User can add his own implementation to report the file name and line number,
    362               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    363          
    364            /* Infinite loop */
    365            while (1)
    366            {
    367            }
    368          }
    369          #endif
    370          
    371          /**
    372            * @brief  CPU L1-Cache enable.
    373            * @param  None
    374            * @retval None
    375            */
    376          static void CPU_CACHE_Enable(void)
    377          {
    378            /* Enable I-Cache */
    379            SCB_EnableICache();
    380          
    381            /* Enable D-Cache */
    382            SCB_EnableDCache();
    383          }
    384          
    385          
    386          /* I2C1 init function */

   \                                 In section .text, align 2, keep-with-next
    387          void MX_I2C1_Init(void)
    388          {
   \                     MX_I2C1_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    389          
    390          
    391            hi2c1.Instance = I2C1;
   \   00000002   0x....             LDR.N    R4,??DataTable10_12
   \   00000004   0x....             LDR.N    R0,??DataTable10_13  ;; 0x40005400
   \   00000006   0x6020             STR      R0,[R4, #+0]
    392            hi2c1.Init.Timing =0x00C0EFFF; //I2C_SPEED DISCOVERY_I2Cx_TIMING;
   \   00000008   0x....             LDR.N    R0,??DataTable10_14  ;; 0xc0efff
   \   0000000A   0x6060             STR      R0,[R4, #+4]
    393                                                     //I2C_TIMING ;//I2C_TIMING  0x00303D5D
    394                                                     //DISCOVERY_I2Cx_TIMING
    395            hi2c1.Init.OwnAddress1 = 0x33;
   \   0000000C   0x2033             MOVS     R0,#+51
   \   0000000E   0x60A0             STR      R0,[R4, #+8]
    396            hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x60E0             STR      R0,[R4, #+12]
    397            hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x6120             STR      R0,[R4, #+16]
    398            hi2c1.Init.OwnAddress2 = 0;
   \   00000018   0x6160             STR      R0,[R4, #+20]
    399            hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   0000001A   0x61A0             STR      R0,[R4, #+24]
    400            hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   0000001C   0x61E0             STR      R0,[R4, #+28]
    401            hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   0000001E   0x6220             STR      R0,[R4, #+32]
    402            HAL_I2C_Init(&hi2c1);
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       HAL_I2C_Init
    403          
    404             /*Configure Analogue filter */
    405            HAL_I2CEx_AnalogFilter_Config(&hi2c1, I2C_ANALOGFILTER_ENABLE);
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002E   0x.... 0x....      B.W      HAL_I2CEx_ConfigAnalogFilter
    406          
    407          }
    408          
    409          
    410          

   \                                 In section .text, align 2, keep-with-next
    411          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
    412          {
   \                     HAL_I2C_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    413          
    414            GPIO_InitTypeDef GPIO_InitStruct;
    415              
    416            if(hi2c->Instance==I2C1)
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable10_13  ;; 0x40005400
   \   00000008   0x....             LDR.N    R4,??DataTable10_4  ;; 0x40023830
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD121             BNE.N    ??HAL_I2C_MspInit_0
    417            {
    418            /* USER CODE BEGIN I2C1_MspInit 0 */
    419          
    420              /*##-1- Configure the I2C clock source. The clock is derived from the SYSCLK #*/
    421              //RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
    422              //RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    423              //HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
    424          
    425              /*##-2- Enable peripherals and GPIO Clocks #################################*/
    426              /* Enable GPIO TX/RX clock */
    427              __HAL_RCC_GPIOB_CLK_ENABLE();
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
    428          
    429            
    430            
    431              /**I2C1 GPIO Configuration    
    432              PB6     ------> I2C1_SCL (PB6)
    433              PB7     ------> I2C1_SDA (PB7) 
    434              */
    435              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    436              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    437              GPIO_InitStruct.Pull = GPIO_PULLUP;
    438              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    439              GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    440              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000010   0xA901             ADD      R1,SP,#+4
   \   00000012   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000016   0x6020             STR      R0,[R4, #+0]
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0xF000 0x0002      AND      R0,R0,#0x2
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x20C0             MOVS     R0,#+192
   \   00000024   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40020400
   \   0000002A   0x.... 0x....      BL       HAL_GPIO_Init
    441          
    442              /* Peripheral clock enable */
    443              __HAL_RCC_I2C1_CLK_ENABLE();
   \   0000002E   0x6920             LDR      R0,[R4, #+16]
    444          	  /* Peripheral interrupt init*/
    445              HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x2103             MOVS     R1,#+3
   \   00000034   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   00000038   0x6120             STR      R0,[R4, #+16]
   \   0000003A   0x6920             LDR      R0,[R4, #+16]
   \   0000003C   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000040   0x9000             STR      R0,[SP, #+0]
   \   00000042   0x9800             LDR      R0,[SP, #+0]
   \   00000044   0x201F             MOVS     R0,#+31
   \   00000046   0x.... 0x....      BL       HAL_NVIC_SetPriority
    446              HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \   0000004A   0x201F             MOVS     R0,#+31
   \   0000004C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   00000050   0xE012             B.N      ??HAL_I2C_MspInit_1
    447            /* USER CODE BEGIN I2C1_MspInit 1 */
    448          
    449          
    450            /* USER CODE END I2C1_MspInit 1 */
    451            }
    452            else if(hi2c->Instance==I2C2)
   \                     ??HAL_I2C_MspInit_0: (+1)
   \   00000052   0x....             LDR.N    R1,??DataTable10_15  ;; 0x40005800
   \   00000054   0x4288             CMP      R0,R1
   \   00000056   0xD10F             BNE.N    ??HAL_I2C_MspInit_1
    453            {
    454            /* USER CODE BEGIN I2C2_MspInit 0 */
    455          
    456            /* USER CODE END I2C2_MspInit 0 */
    457            
    458              /**I2C2 GPIO Configuration    
    459              PF0     ------> I2C2_SDA
    460              PF1     ------> I2C2_SCL 
    461              */
    462              GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
   \   00000058   0x2003             MOVS     R0,#+3
    463              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    464              GPIO_InitStruct.Pull = GPIO_PULLUP;
    465              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    466              GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    467              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   \   0000005A   0xA901             ADD      R1,SP,#+4
   \   0000005C   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000060   0x....             LDR.N    R0,??DataTable10_16  ;; 0x40021400
   \   00000062   0x.... 0x....      BL       HAL_GPIO_Init
    468          
    469              /* Peripheral clock enable */
    470              __HAL_RCC_I2C2_CLK_ENABLE();
   \   00000066   0x6920             LDR      R0,[R4, #+16]
   \   00000068   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   0000006C   0x6120             STR      R0,[R4, #+16]
   \   0000006E   0x6920             LDR      R0,[R4, #+16]
   \   00000070   0xF400 0x0080      AND      R0,R0,#0x400000
   \   00000074   0x9000             STR      R0,[SP, #+0]
   \   00000076   0x9800             LDR      R0,[SP, #+0]
    471            /* USER CODE BEGIN I2C2_MspInit 1 */
    472          
    473            /* USER CODE END I2C2_MspInit 1 */
    474            }
    475          
    476          }
   \                     ??HAL_I2C_MspInit_1: (+1)
   \   00000078   0xB006             ADD      SP,SP,#+24
   \   0000007A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x9001             STR      R0,[SP, #+4]
   \   00000002   0x2012             MOVS     R0,#+18
   \   00000004   0x9002             STR      R0,[SP, #+8]
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x9003             STR      R0,[SP, #+12]
   \   0000000A   0x2003             MOVS     R0,#+3
   \   0000000C   0x9004             STR      R0,[SP, #+16]
   \   0000000E   0x2004             MOVS     R0,#+4
   \   00000010   0x9005             STR      R0,[SP, #+20]
   \   00000012   0x4770             BX       LR
    477          
    478          /*---------------------------------------------------*/
    479          /*   UART                                            */
    480          /* UART4 init function */

   \                                 In section .text, align 2, keep-with-next
    481          void UART6_Init(void)
    482          {
    483          
    484            huart6.Instance = USART6;
   \                     UART6_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_17
   \   00000002   0x....             LDR.N    R1,??DataTable10_18  ;; 0x40011400
   \   00000004   0x6001             STR      R1,[R0, #+0]
    485            huart6.Init.BaudRate = 115200;
   \   00000006   0xF44F 0x31E1      MOV      R1,#+115200
   \   0000000A   0x6041             STR      R1,[R0, #+4]
    486            huart6.Init.WordLength = UART_WORDLENGTH_8B;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6081             STR      R1,[R0, #+8]
    487            huart6.Init.StopBits = UART_STOPBITS_1;
   \   00000010   0x60C1             STR      R1,[R0, #+12]
    488            huart6.Init.Parity = UART_PARITY_NONE;
   \   00000012   0x6101             STR      R1,[R0, #+16]
    489            huart6.Init.Mode = UART_MODE_TX_RX;
   \   00000014   0x210C             MOVS     R1,#+12
   \   00000016   0x6141             STR      R1,[R0, #+20]
    490            huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6181             STR      R1,[R0, #+24]
    491            huart6.Init.OverSampling = UART_OVERSAMPLING_16;
   \   0000001C   0x61C1             STR      R1,[R0, #+28]
    492            huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED ;
   \   0000001E   0x6201             STR      R1,[R0, #+32]
    493            huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
   \   00000020   0x6241             STR      R1,[R0, #+36]
    494            HAL_UART_Init(&huart6);
   \   00000022   0x.... 0x....      B.W      HAL_UART_Init
    495          
    496          }
    497          

   \                                 In section .text, align 2, keep-with-next
    498          void HAL_UART_MspInit(UART_HandleTypeDef* huart)
    499          {
    500          
    501            GPIO_InitTypeDef GPIO_InitStruct;
    502            if(huart->Instance==USART6)
   \                     HAL_UART_MspInit: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x....             LDR.N    R1,??DataTable10_18  ;; 0x40011400
   \   00000004   0x4288             CMP      R0,R1
   \   00000006   0xD000             BEQ.N    ??HAL_UART_MspInit_0
   \   00000008   0x4770             BX       LR
    503            {
    504            /* USER CODE BEGIN UART6_MspInit 0 */
    505          
    506            /* USER CODE END UART4_MspInit 0 */
    507              /* Peripheral clock enable */
    508              __USART6_CLK_ENABLE();
   \                     ??HAL_UART_MspInit_0: (+1)
   \   0000000A   0xB500             PUSH     {LR}
   \   0000000C   0x....             LDR.N    R0,??DataTable10_4  ;; 0x40023830
   \   0000000E   0xB087             SUB      SP,SP,#+28
   \   00000010   0x6941             LDR      R1,[R0, #+20]
   \   00000012   0xF041 0x0120      ORR      R1,R1,#0x20
   \   00000016   0x6141             STR      R1,[R0, #+20]
   \   00000018   0x6941             LDR      R1,[R0, #+20]
   \   0000001A   0xF001 0x0120      AND      R1,R1,#0x20
   \   0000001E   0x9100             STR      R1,[SP, #+0]
   \   00000020   0x9900             LDR      R1,[SP, #+0]
    509              __GPIOC_CLK_ENABLE();
   \   00000022   0x6801             LDR      R1,[R0, #+0]
   \   00000024   0xF041 0x0104      ORR      R1,R1,#0x4
   \   00000028   0x6001             STR      R1,[R0, #+0]
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
    510            
    511              /**UART4 GPIO Configuration    
    512              PC10     ------> UART4_TX (PC6)
    513              PC11     ------> UART4_RX (PC7)
    514              */
    515              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_6;
    516              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    517              GPIO_InitStruct.Pull = GPIO_PULLUP;
    518              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    519              GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    520              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000032   0x9000             STR      R0,[SP, #+0]
   \   00000034   0x9800             LDR      R0,[SP, #+0]
   \   00000036   0x2040             MOVS     R0,#+64
   \   00000038   0x9001             STR      R0,[SP, #+4]
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0x9002             STR      R0,[SP, #+8]
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x9003             STR      R0,[SP, #+12]
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0x9004             STR      R0,[SP, #+16]
   \   00000046   0x2008             MOVS     R0,#+8
   \   00000048   0x9005             STR      R0,[SP, #+20]
   \   0000004A   0x....             LDR.N    R0,??DataTable10_19  ;; 0x40020800
   \   0000004C   0x.... 0x....      BL       HAL_GPIO_Init
    521          
    522          	  /* NVIC for USART */
    523            HAL_NVIC_SetPriority(USART6_IRQn, 0, 1);
   \   00000050   0x2201             MOVS     R2,#+1
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x2047             MOVS     R0,#+71
   \   00000056   0x.... 0x....      BL       HAL_NVIC_SetPriority
    524            HAL_NVIC_EnableIRQ(USART6_IRQn);
   \   0000005A   0x2047             MOVS     R0,#+71
   \   0000005C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    525          
    526            /* USER CODE BEGIN UART4_MspInit 1 */
    527          
    528            /* USER CODE END UART4_MspInit 1 */
    529            }
    530          
    531          }
   \   00000060   0xB007             ADD      SP,SP,#+28
   \   00000062   0xBD00             POP      {PC}             ;; return
    532          
    533          
    534          

   \                                 In section .text, align 2, keep-with-next
    535          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
    536          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
    537          
    538            GPIO_InitTypeDef GPIO_InitStruct;
    539            if(hspi->Instance==SPI4)
   \   00000002   0x....             LDR.N    R2,??DataTable10_20  ;; 0x40013400
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x....             LDR.N    R0,??DataTable10_4  ;; 0x40023830
   \   0000000A   0x4291             CMP      R1,R2
   \   0000000C   0xD10E             BNE.N    ??HAL_SPI_MspInit_0
    540            {
    541            /* USER CODE BEGIN SPI4_MspInit 0 */
    542          
    543            /* USER CODE END SPI4_MspInit 0 */
    544              /* Peripheral clock enable */
    545              __SPI4_CLK_ENABLE();
   \   0000000E   0x6941             LDR      R1,[R0, #+20]
   \   00000010   0xF441 0x5100      ORR      R1,R1,#0x2000
   \   00000014   0x6141             STR      R1,[R0, #+20]
   \   00000016   0x6940             LDR      R0,[R0, #+20]
    546            
    547            
    548              /**SPI4 GPIO Configuration    
    549              PE2     ------> SPI4_SCK
    550              PE4     ------> SPI4_NSS
    551              PE5     ------> SPI4_MISO
    552              PE6     ------> SPI4_MOSI 
    553              */
    554              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    555              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    556              GPIO_InitStruct.Pull = GPIO_NOPULL;
    557              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    558              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
    559              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   \   00000018   0xA901             ADD      R1,SP,#+4
   \   0000001A   0xF400 0x5000      AND      R0,R0,#0x2000
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x2074             MOVS     R0,#+116
   \   00000024   0x.... 0x....      BL       ?Subroutine1
    560          
    561            /* USER CODE BEGIN SPI4_MspInit 1 */
    562          
    563            /* USER CODE END SPI4_MspInit 1 */
    564            }
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable10_21  ;; 0x40021000
   \   0000002A   0xE03D             B.N      ??HAL_SPI_MspInit_1
    565            else if(hspi->Instance==SPI5)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   0000002C   0x....             LDR.N    R2,??DataTable10_22  ;; 0x40015000
   \   0000002E   0x4291             CMP      R1,R2
   \   00000030   0xD128             BNE.N    ??HAL_SPI_MspInit_2
    566            {
    567            /* USER CODE BEGIN SPI5_MspInit 0 */
    568          
    569            /* USER CODE END SPI5_MspInit 0 */
    570              /* Peripheral clock enable */
    571              __HAL_RCC_SPI5_CLK_ENABLE();
   \   00000032   0x6941             LDR      R1,[R0, #+20]
   \   00000034   0xF441 0x1180      ORR      R1,R1,#0x100000
   \   00000038   0x6141             STR      R1,[R0, #+20]
   \   0000003A   0x6941             LDR      R1,[R0, #+20]
   \   0000003C   0xF401 0x1180      AND      R1,R1,#0x100000
   \   00000040   0x9100             STR      R1,[SP, #+0]
   \   00000042   0x9900             LDR      R1,[SP, #+0]
    572              __HAL_RCC_GPIOF_CLK_ENABLE();
   \   00000044   0x6801             LDR      R1,[R0, #+0]
   \   00000046   0xF041 0x0120      ORR      R1,R1,#0x20
   \   0000004A   0x6001             STR      R1,[R0, #+0]
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
    573            
    574              /**SPI5 GPIO Configuration    
    575              PF7     ------> SPI5_SCK  --> PF7
    576              PF11     ------> SPI5_MOSI --> PF9
    577                               SPI5_MISO --> PF8
    578                                    NSS   -->  PF6
    579              */
    580              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
    581              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    582              GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    583              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    584              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    585              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   \   0000004E   0xA901             ADD      R1,SP,#+4
   \   00000050   0xF000 0x0020      AND      R0,R0,#0x20
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0xF44F 0x7070      MOV      R0,#+960
   \   0000005C   0x9001             STR      R0,[SP, #+4]
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0x9002             STR      R0,[SP, #+8]
   \   00000062   0x9003             STR      R0,[SP, #+12]
   \   00000064   0x2003             MOVS     R0,#+3
   \   00000066   0x9004             STR      R0,[SP, #+16]
   \   00000068   0x2005             MOVS     R0,#+5
   \   0000006A   0x9005             STR      R0,[SP, #+20]
   \   0000006C   0x....             LDR.N    R0,??DataTable10_16  ;; 0x40021400
   \   0000006E   0x.... 0x....      BL       HAL_GPIO_Init
    586          
    587            /* Peripheral interrupt init*/
    588              HAL_NVIC_SetPriority(SPI5_IRQn, 2, 2);
   \   00000072   0x2202             MOVS     R2,#+2
   \   00000074   0x2102             MOVS     R1,#+2
   \   00000076   0x2055             MOVS     R0,#+85
   \   00000078   0x.... 0x....      BL       HAL_NVIC_SetPriority
    589              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   \   0000007C   0x2055             MOVS     R0,#+85
   \   0000007E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   00000082   0xE013             B.N      ??HAL_SPI_MspInit_3
    590            /* USER CODE BEGIN SPI5_MspInit 1 */
    591          
    592            /* USER CODE END SPI5_MspInit 1 */
    593            }
    594            else if(hspi->Instance==SPI6)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   00000084   0x....             LDR.N    R2,??DataTable10_23  ;; 0x40015400
   \   00000086   0x4291             CMP      R1,R2
   \   00000088   0xD110             BNE.N    ??HAL_SPI_MspInit_3
    595            {
    596            /* USER CODE BEGIN SPI6_MspInit 0 */
    597          
    598            /* USER CODE END SPI6_MspInit 0 */
    599              /* Peripheral clock enable */
    600              __SPI6_CLK_ENABLE();
   \   0000008A   0x6941             LDR      R1,[R0, #+20]
   \   0000008C   0xF441 0x1100      ORR      R1,R1,#0x200000
   \   00000090   0x6141             STR      R1,[R0, #+20]
   \   00000092   0x6940             LDR      R0,[R0, #+20]
    601            
    602              /**SPI6 GPIO Configuration    
    603              PG13     ------> SPI6_SCK
    604              PG14     ------> SPI6_MOSI 
    605              */
    606              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
    607              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    608              GPIO_InitStruct.Pull = GPIO_NOPULL;
    609              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    610              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
    611              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   \   00000094   0xA901             ADD      R1,SP,#+4
   \   00000096   0xF400 0x1000      AND      R0,R0,#0x200000
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0x9800             LDR      R0,[SP, #+0]
   \   0000009E   0xF44F 0x40C0      MOV      R0,#+24576
   \   000000A2   0x.... 0x....      BL       ?Subroutine1
    612          
    613            /* USER CODE BEGIN SPI6_MspInit 1 */
    614          
    615            /* USER CODE END SPI6_MspInit 1 */
    616            }
   \                     ??CrossCallReturnLabel_4: (+1)
   \   000000A6   0x....             LDR.N    R0,??DataTable10_24  ;; 0x40021800
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   000000A8   0x.... 0x....      BL       HAL_GPIO_Init
    617          
    618          }
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   000000AC   0xB007             ADD      SP,SP,#+28
   \   000000AE   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x9001             STR      R0,[SP, #+4]
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x9002             STR      R0,[SP, #+8]
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9003             STR      R0,[SP, #+12]
   \   0000000A   0x2003             MOVS     R0,#+3
   \   0000000C   0x9004             STR      R0,[SP, #+16]
   \   0000000E   0x2005             MOVS     R0,#+5
   \   00000010   0x9005             STR      R0,[SP, #+20]
   \   00000012   0x4770             BX       LR
    619          
    620          
    621          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    622          void MX_SPI5_Init(void)
    623          {
   \                     MX_SPI5_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    624          
    625            hspi5.Instance = SPI5;
   \   00000002   0x....             LDR.N    R4,??DataTable10_25
   \   00000004   0x....             LDR.N    R0,??DataTable10_22  ;; 0x40015000
   \   00000006   0x6020             STR      R0,[R4, #+0]
    626            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x6060             STR      R0,[R4, #+4]
    627            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000C   0xF44F 0x6080      MOV      R0,#+1024
   \   00000010   0x60A0             STR      R0,[R4, #+8]
    628            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000012   0xF44F 0x6070      MOV      R0,#+3840
   \   00000016   0x60E0             STR      R0,[R4, #+12]
    629            hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x6120             STR      R0,[R4, #+16]
    630            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001C   0x6160             STR      R0,[R4, #+20]
    631            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   0000001E   0xF44F 0x7000      MOV      R0,#+512
   \   00000022   0x61A0             STR      R0,[R4, #+24]
    632            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x6220             STR      R0,[R4, #+32]
    633            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   00000028   0x6260             STR      R0,[R4, #+36]
    634            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000002A   0x62A0             STR      R0,[R4, #+40]
    635            hspi5.Init.CRCPolynomial = 7;
   \   0000002C   0x2007             MOVS     R0,#+7
   \   0000002E   0x62E0             STR      R0,[R4, #+44]
    636            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x6320             STR      R0,[R4, #+48]
    637            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000034   0x6360             STR      R0,[R4, #+52]
    638            //hspi5.RxISR = SPI5_CallBack;
    639            HAL_SPI_Init(&hspi5);
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0x.... 0x....      BL       HAL_SPI_Init
    640          
    641          
    642            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    643            /* Enable TXE, RXNE and ERR interrupt */
    644           __HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   \   0000003C   0x6820             LDR      R0,[R4, #+0]
   \   0000003E   0x6841             LDR      R1,[R0, #+4]
   \   00000040   0xF041 0x0160      ORR      R1,R1,#0x60
   \   00000044   0x6041             STR      R1,[R0, #+4]
    645          
    646           __HAL_SPI_ENABLE(&hspi5);
   \   00000046   0x6801             LDR      R1,[R0, #+0]
   \   00000048   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000004C   0x6001             STR      R1,[R0, #+0]
    647          
    648          }
   \   0000004E   0xBD10             POP      {R4,PC}          ;; return
    649          
    650          
    651          

   \                                 In section .text, align 2, keep-with-next
    652          void SPI5_IRQHandler(void)
    653          {
    654            //static uint16_t stNipple;
    655            //static uint8_t stLR, stOder;
    656          
    657            /* USER CODE BEGIN SPI5_IRQn 0 */
    658          
    659            /* USER CODE END SPI5_IRQn 0 */
    660            //HAL_SPI_IRQHandler(&hspi5);
    661            /* USER CODE BEGIN SPI5_IRQn 1 */
    662          
    663            /* USER CODE END SPI5_IRQn 1 */
    664              /* Check if data are available in SPI Data register */
    665            /* SPI in mode Receiver ----------------------------------------------------*/
    666            if(
    667               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    668               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    669               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_25
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6881             LDR      R1,[R0, #+8]
   \   00000006   0x0649             LSLS     R1,R1,#+25
   \   00000008   0xD500             BPL.N    ??SPI5_IRQHandler_0
   \   0000000A   0x4770             BX       LR
   \                     ??SPI5_IRQHandler_0: (+1)
   \   0000000C   0xB538             PUSH     {R3-R5,LR}
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD543             BPL.N    ??SPI5_IRQHandler_1
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD540             BPL.N    ??SPI5_IRQHandler_1
    670            {
    671          
    672          
    673             uint16_t test;
    674             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x....             LDR.N    R0,??DataTable10_26  ;; 0x4001500c
    675             SPI5->DR = 3333;
   \   0000001C   0xF640 0x5205      MOVW     R2,#+3333
    676             //SPI_I2S_SendData(SPI5,0);
    677             //BSP_LED_Toggle(LED1);
    678             //if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==GPIO_PIN_SET)
    679          #if 0
    680                stOder^=0x01;
    681                if(stOder==0x00)
    682                {
    683          
    684                    //BSP_LED_On(LED1);  
    685          
    686          		  stLR^=0x01;
    687          		  if (stLR==0x01)
    688          		  {
    689          		    if (Buffer1.offset + idxSPI5DataBuf1 < AUDIO_OUT_BUFFER_SIZE-2) 
    690          		    {
    691          	               Buffer1.pcm_buff[Buffer1.offset + idxSPI5DataBuf1++] =((test>>4)|(stNipple<<12));
    692          				   Buffer1.pcm_buff[Buffer1.offset + idxSPI5DataBuf1++] =((test>>4)|(stNipple<<12));
    693          		    }
    694          		  }
    695          		  else
    696          		  {
    697          		     if (Buffer2.offset + idxSPI5DataBuf2 < AUDIO_OUT_BUFFER_SIZE-2)
    698          		     {
    699          	               Buffer2.pcm_buff[Buffer2.offset + idxSPI5DataBuf2++] = ((test>>4)|(stNipple<<12));
    700          				   Buffer2.pcm_buff[Buffer2.offset + idxSPI5DataBuf2++] = ((test>>4)|(stNipple<<12));
    701          		     }
    702          
    703          		  }
    704          			  
    705                }
    706          	  else
    707          	  {
    708          	      //Buffer1.pcm_buff[idxSPI5DataBuf++] = 0;
    709          	      //BSP_LED_Off(LED1);  
    710                     stNipple = (test);
    711          		  Buffer3.pcm_buff[Buffer2.offset + idxSPI5DataBuf2] = stNipple;
    712          	  }
    713          
    714          
    715          	  
    716             	}
    717              //else
    718              {
    719               // BSP_LED_Off(LED1);
    720              }
    721          #endif 
    722            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000020   0x....             LDR.N    R4,??DataTable10_27
   \   00000022   0x6801             LDR      R1,[R0, #+0]
   \   00000024   0x6002             STR      R2,[R0, #+0]
   \   00000026   0x8860             LDRH     R0,[R4, #+2]
   \   00000028   0xB28A             UXTH     R2,R1
   \   0000002A   0x0209             LSLS     R1,R1,#+8
   \   0000002C   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   00000030   0xEB04 0x0240      ADD      R2,R4,R0, LSL #+1
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0x8091             STRH     R1,[R2, #+4]
   \   00000038   0x8060             STRH     R0,[R4, #+2]
    723            
    724            //volume = 64;
    725            
    726            if (idxMic8>=64)
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0x2840             CMP      R0,#+64
   \   0000003E   0xDB29             BLT.N    ??SPI5_IRQHandler_2
    727            {
    728          	if (buffer_switch != 1)
   \   00000040   0x....             LDR.N    R2,??DataTable10_5
   \   00000042   0x....             LDR.N    R1,??DataTable10_28
   \   00000044   0x....             LDR.N    R0,??DataTable10_3
   \   00000046   0x....             LDR.N    R3,??DataTable10_29
   \   00000048   0x7812             LDRB     R2,[R2, #+0]
   \   0000004A   0x....             LDR.N    R5,??DataTable10_30
   \   0000004C   0x2A01             CMP      R2,#+1
   \   0000004E   0x780A             LDRB     R2,[R1, #+0]
   \   00000050   0xD008             BEQ.N    ??SPI5_IRQHandler_3
    729          	{
    730          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.pcm_buff + Buffer1.offset + cntPos*16), volume , (PDMFilter_InitStruct *)&Filter[0]);
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000052   0xF644 0x0108      MOVW     R1,#+18440
   \   00000056   0x5809             LDR      R1,[R1, R0]
   \   00000058   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \   0000005C   0x8829             LDRH     R1,[R5, #+0]
   \   0000005E   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   00000062   0xE00A             B.N      ??SPI5_IRQHandler_4
    731          	}
    732          	else
    733          	{
    734          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.pcm_buff + Buffer2.offset + cntPos*16), volume , (PDMFilter_InitStruct *)&Filter[0]);   
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI5_IRQHandler_3: (+1)
   \   00000064   0xF249 0x0118      MOVW     R1,#+36888
   \   00000068   0x5809             LDR      R1,[R1, R0]
   \   0000006A   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \   0000006E   0x8829             LDRH     R1,[R5, #+0]
   \   00000070   0xEB00 0x1041      ADD      R0,R0,R1, LSL #+5
   \   00000074   0xF500 0x4190      ADD      R1,R0,#+18432
   \   00000078   0x3110             ADDS     R1,R1,#+16
   \                     ??SPI5_IRQHandler_4: (+1)
   \   0000007A   0x1D20             ADDS     R0,R4,#+4
   \   0000007C   0x.... 0x....      BL       PDM_Filter_64_LSB
    735          	}
    736          	idxMic8=0;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x8060             STRH     R0,[R4, #+2]
    737          	cntPos++;
   \   00000084   0x8828             LDRH     R0,[R5, #+0]
   \   00000086   0x1C40             ADDS     R0,R0,#+1
   \   00000088   0x8028             STRH     R0,[R5, #+0]
    738          	if (cntPos>=256) cntPos=0;
   \   0000008A   0x8828             LDRH     R0,[R5, #+0]
   \   0000008C   0x28FF             CMP      R0,#+255
   \   0000008E   0xBFC4             ITT      GT 
   \   00000090   0x2000             MOVGT    R0,#+0
   \   00000092   0x8028             STRHGT   R0,[R5, #+0]
    739            }
    740          
    741          	if(flgSTAIni==0)
   \                     ??SPI5_IRQHandler_2: (+1)
   \   00000094   0x7820             LDRB     R0,[R4, #+0]
   \   00000096   0xB908             CBNZ.N   R0,??SPI5_IRQHandler_1
    742          	{
    743          		flgSTAIni=1;
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x7020             STRB     R0,[R4, #+0]
    744          		//__HAL_SPI_DISABLE(&hspi5);						 
    745          	}
    746                
    747            }
    748            
    749          }
   \                     ??SPI5_IRQHandler_1: (+1)
   \   0000009C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    750          
    751          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
    752          {
    753            /* Check the parameters */
    754            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
    755            
    756            /* Return the data in the DR register */
    757            return SPIx->DR;
    758          }
    759          
    760          

   \                                 In section .text, align 2, keep-with-next
    761          void EXTI4_IRQHandler(void)
    762          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    763              /* EXTI line interrupt detected */
    764            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable10_31  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x06C0             LSLS     R0,R0,#+27
   \   00000008   0xD510             BPL.N    ??EXTI4_IRQHandler_0
    765            {
    766              
    767               if (cntRisingEXTI==10)
   \   0000000A   0x....             LDR.N    R5,??DataTable10_32
   \   0000000C   0x8828             LDRH     R0,[R5, #+0]
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD107             BNE.N    ??EXTI4_IRQHandler_1
    768               {
    769              	/*--------------Enable read PCM data --------------------*/
    770                  MX_SPI5_Init(); 
   \   00000012   0x.... 0x....      BL       MX_SPI5_Init
    771                  //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
    772          		//__HAL_UNLOCK(&hspi5);
    773                  //__HAL_SPI_ENABLE(&hspi5);
    774          		cntRisingEXTI=0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x8028             STRH     R0,[R5, #+0]
    775          
    776          		/*Disable external interrupt */
    777          		HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI4_IRQn));
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   00000020   0xE002             B.N      ??EXTI4_IRQHandler_2
    778          		//HAL_GPIO_DeInit(GPIOB,GPIO_PIN_4);
    779               }
    780               else
    781               {
    782                   cntRisingEXTI++;
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   00000022   0x8828             LDRH     R0,[R5, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x8028             STRH     R0,[R5, #+0]
    783          		 //__HAL_SPI_DISABLE(&hspi5);
    784               }
    785          	 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
   \                     ??EXTI4_IRQHandler_2: (+1)
   \   00000028   0x2010             MOVS     R0,#+16
   \   0000002A   0x6020             STR      R0,[R4, #+0]
    786          
    787            }
    788          }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   0000002C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xF3BF 0x8F4F      DSB      
   \   00000004   0xF3BF 0x8F6F      ISB      
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0xE000EF50         DC32     0xe000ef50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0xE000ED14         DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     flg10ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x........         DC32     XferCplt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x........         DC32     ??ticks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x40007000         DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x........         DC32     hi2c1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x00C0EFFF         DC32     0xc0efff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_17:
   \   00000000   0x........         DC32     huart6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_18:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_19:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_20:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_21:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_22:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_23:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_24:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_25:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_26:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_27:
   \   00000000   0x........         DC32     flgSTAIni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_28:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_29:
   \   00000000   0x........         DC32     Filter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_30:
   \   00000000   0x........         DC32     cntPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_31:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_32:
   \   00000000   0x........         DC32     cntRisingEXTI
    789          
    790          
    791          
    792          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   EXTI4_IRQHandler
        16   -> HAL_NVIC_DisableIRQ
        16   -> MX_SPI5_Init
      32   HAL_I2C_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
      32   HAL_SPI_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
      32   HAL_UART_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       8   MX_I2C1_Init
         0   -> HAL_I2CEx_ConfigAnalogFilter
         8   -> HAL_I2C_Init
       8   MX_SPI5_Init
         8   -> HAL_SPI_Init
      16   SPI5_IRQHandler
        16   -> PDM_Filter_64_LSB
     208   SystemClock_Config
       208   -> HAL_PWREx_EnableOverDrive
       208   -> HAL_RCCEx_PeriphCLKConfig
       208   -> HAL_RCC_ClockConfig
       208   -> HAL_RCC_GetHCLKFreq
       208   -> HAL_RCC_OscConfig
       208   -> HAL_SYSTICK_CLKSourceConfig
       208   -> HAL_SYSTICK_Config
       0   Toggle_Leds
       0   UART6_Init
         0   -> HAL_UART_Init
      32   main
        32   -> Audio_MAL_Play
        32   -> BSP_LED_Init
        32   -> BSP_LED_Toggle
        32   -> HAL_GPIO_Init
        32   -> HAL_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> I2S_Init
        32   -> MX_SPI5_Init
        32   -> SystemClock_Config


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_17
       4  ??DataTable10_18
       4  ??DataTable10_19
       4  ??DataTable10_2
       4  ??DataTable10_20
       4  ??DataTable10_21
       4  ??DataTable10_22
       4  ??DataTable10_23
       4  ??DataTable10_24
       4  ??DataTable10_25
       4  ??DataTable10_26
       4  ??DataTable10_27
       4  ??DataTable10_28
       4  ??DataTable10_29
       4  ??DataTable10_3
       4  ??DataTable10_30
       4  ??DataTable10_31
       4  ??DataTable10_32
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
      10  ?Subroutine0
      20  ?Subroutine1
      20  ?Subroutine2
   36896  Buffer1
          Buffer2
   18448  Buffer3
      46  EXTI4_IRQHandler
     124  HAL_I2C_MspInit
     176  HAL_SPI_MspInit
     100  HAL_UART_MspInit
      50  MX_I2C1_Init
      80  MX_SPI5_Init
     158  SPI5_IRQHandler
     188  SystemClock_Config
      18  Toggle_Leds
      38  UART6_Init
    1024  aRxBuffer
       1  appli_state
       2  cntRisingEXTI
      24  flg10ms
          GPIO_INS
     132  flgSTAIni
          idxMic8
          pDataMic8
     696  hUSBHost
     100  hspi5
     112  huart6
       2  idxSPI5DataBuf1
       2  idxSPI5DataBuf2
     282  main
      20  pI2CData
      12  pI2CRx
       4  ticks

 
 57 455 bytes in section .bss
     20 bytes in section .data
  1 442 bytes in section .text
 
  1 442 bytes of CODE memory
 57 475 bytes of DATA memory

Errors: none
Warnings: 2
