###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       12/Feb/2016  13:21:44
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\main.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\main.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
      1          /* Includes ------------------------------------------------------------------*/
      2          #include "main.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void SCB_EnableICache(void)
   \                     SCB_EnableICache: (+1)
   \   00000000   0xF3BF 0x8F4F      DSB      
   \   00000004   0xF3BF 0x8F6F      ISB      
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable10  ;; 0xe000ef50
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0xe000ed14
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable15  ;; 0xe000ed14
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0xF3BF 0x8F4F      DSB      
   \   00000024   0xF3BF 0x8F6F      ISB      
   \   00000028   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void SCB_EnableDCache(void)
   \                     SCB_EnableDCache: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable10_1  ;; 0xe000ed84
   \   00000008   0x6023             STR      R3,[R4, #+0]
   \   0000000A   0xF3BF 0x8F4F      DSB      
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable10_2  ;; 0xe000ed80
   \   00000012   0x681B             LDR      R3,[R3, #+0]
   \   00000014   0x0018             MOVS     R0,R3
   \   00000016   0xF3C0 0x334E      UBFX     R3,R0,#+13,#+15
   \   0000001A   0x0019             MOVS     R1,R3
   \                     ??SCB_EnableDCache_0: (+1)
   \   0000001C   0xF3C0 0x03C9      UBFX     R3,R0,#+3,#+10
   \   00000020   0x001A             MOVS     R2,R3
   \                     ??SCB_EnableDCache_1: (+1)
   \   00000022   0xF643 0x73E0      MOVW     R3,#+16352
   \   00000026   0xEA13 0x1341      ANDS     R3,R3,R1, LSL #+5
   \   0000002A   0xEA53 0x7382      ORRS     R3,R3,R2, LSL #+30
   \   0000002E   0x.... 0x....      LDR.W    R4,??DataTable11  ;; 0xe000ef60
   \   00000032   0x6023             STR      R3,[R4, #+0]
   \   00000034   0x0013             MOVS     R3,R2
   \   00000036   0x1E5A             SUBS     R2,R3,#+1
   \   00000038   0x2B00             CMP      R3,#+0
   \   0000003A   0xD1F2             BNE.N    ??SCB_EnableDCache_1
   \   0000003C   0x000B             MOVS     R3,R1
   \   0000003E   0x1E59             SUBS     R1,R3,#+1
   \   00000040   0x2B00             CMP      R3,#+0
   \   00000042   0xD1EB             BNE.N    ??SCB_EnableDCache_0
   \   00000044   0xF3BF 0x8F4F      DSB      
   \   00000048   0x.... 0x....      LDR.W    R3,??DataTable15  ;; 0xe000ed14
   \   0000004C   0x681B             LDR      R3,[R3, #+0]
   \   0000004E   0xF453 0x3380      ORRS     R3,R3,#0x10000
   \   00000052   0x.... 0x....      LDR.W    R4,??DataTable15  ;; 0xe000ed14
   \   00000056   0x6023             STR      R3,[R4, #+0]
   \   00000058   0xF3BF 0x8F4F      DSB      
   \   0000005C   0xF3BF 0x8F6F      ISB      
   \   00000060   0xBC10             POP      {R4}
   \   00000062   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp uint8_t ADD_U8(uint8_t, uint8_t)
   \                     ADD_U8: (+1)
   \   00000000   0x0002             MOVS     R2,R0
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0xF1D1 0x00FF      RSBS     R0,R1,#+255
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x4290             CMP      R0,R2
   \   0000000C   0xDA01             BGE.N    ??ADD_U8_0
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0xE001             B.N      ??ADD_U8_1
   \                     ??ADD_U8_0: (+1)
   \   00000012   0x1888             ADDS     R0,R1,R2
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??ADD_U8_1: (+1)
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp uint8_t SrvB_Debound(uint8_t *, uint8_t *, uint8_t, uint16_t)
   \                     SrvB_Debound: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
   \   0000000A   0x7828             LDRB     R0,[R5, #+0]
   \   0000000C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000E   0x4286             CMP      R6,R0
   \   00000010   0xD005             BEQ.N    ??SrvB_Debound_0
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0x.... 0x....      BL       ADD_U8
   \   0000001A   0x7020             STRB     R0,[R4, #+0]
   \   0000001C   0xE001             B.N      ??SrvB_Debound_1
   \                     ??SrvB_Debound_0: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x7020             STRB     R0,[R4, #+0]
   \                     ??SrvB_Debound_1: (+1)
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   0x4287             CMP      R7,R0
   \   0000002A   0xD200             BCS.N    ??SrvB_Debound_2
   \   0000002C   0x702E             STRB     R6,[R5, #+0]
   \                     ??SrvB_Debound_2: (+1)
   \   0000002E   0x7828             LDRB     R0,[R5, #+0]
   \   00000030   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
      3          #include "DSP.h"
      4          //#include "waveplayer.h"
      5          #include "waverecorder.h"
      6          #include "stm32f7xx_hal_usart.h"
      7          #include "pdm_filter.h"
      8          #include "arm_math.h"
      9          #include <stdio.h>
     10          
     11          
     12          /* Private typedef -----------------------------------------------------------*/
     13          /* Private define ------------------------------------------------------------*/
     14          /* Private macro -------------------------------------------------------------*/
     15          
     16          
     17          /* EXTERN VARIABLES ----------------------------------------------------------*/
     18          //extern __IO AUDIO_IN_BufferTypeDef Buffer1, Buffer2, BufferCtlRecIn;
     19          //AUDIO_IN_BufferTypeDef Buffer3;
     20          
     21          
     22          
     23          
     24          extern Mic_Array_Data Buffer1,Buffer2,Buffer3;
     25          
     26          extern __IO uint8_t XferCplt;
     27          extern __IO AUDIO_IN_BufferTypeDef BufferCtlRecIn;
     28          extern DMA_HandleTypeDef     DmaHandle;
     29          
     30          extern SAI_HandleTypeDef         haudio_out_sai;
     31          extern uint8_t WaveRecord_flgIni;
     32          extern uint32_t EnergySound;
     33          extern I2C_HandleTypeDef hi2c2;
     34          extern __IO uint16_t cntStrt;
     35          extern __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple;
     36          extern __IO   uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
     37          /* GLOBAL VARIABLE -----------------------------------------------------------*/

   \                                 In section .bss, align 4
     38          USBH_HandleTypeDef hUSBHost;
   \                     hUSBHost:
   \   00000000                      DS8 696

   \                                 In section .bss, align 1
     39          AUDIO_ApplicationTypeDef appli_state = APPLICATION_IDLE;//APPLICATION_IDLE
   \                     appli_state:
   \   00000000                      DS8 1
     40          

   \                                 In section .bss, align 4
     41          UART_HandleTypeDef huart3;
   \                     huart3:
   \   00000000                      DS8 112

   \                                 In section .bss, align 4
     42          SPI_HandleTypeDef hspi4;
   \                     hspi4:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
     43          GPIO_InitTypeDef GPIO_INS;
   \                     GPIO_INS:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     44          Mic_Array_Coef_f FacMic;
   \                     FacMic:
   \   00000000                      DS8 24
     45          	  

   \                                 In section .data, align 4
     46          uint8_t  pI2CData[20]= {0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190};
   \                     pI2CData:
   \   00000000   0x00 0x0A          DC8 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150
   \              0x14 0x1E    
   \              0x28 0x32    
   \              0x3C 0x46    
   \              0x50 0x5A    
   \              0x64 0x6E    
   \              0x78 0x82    
   \              0x8C 0x96    
   \   00000010   0xA0 0xAA          DC8 160, 170, 180, 190
   \              0xB4 0xBE    

   \                                 In section .bss, align 4
     47          uint8_t  pI2CRx[10];
   \                     pI2CRx:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     48          uint16_t BufferTest[2*AUDIO_OUT_BUFFER_SIZE];
   \                     BufferTest:
   \   00000000                      DS8 4096

   \                                 In section .bss, align 4
     49          uint16_t bufferSum[AUDIO_OUT_BUFFER_SIZE];
   \                     bufferSum:
   \   00000000                      DS8 2048
     50          

   \                                 In section .bss, align 2
     51          __IO uint16_t  WaveRec_idxSens4,WaveRec_idxSens3,I2S2_idxTmp;
   \                     WaveRec_idxSens4:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     WaveRec_idxSens3:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S2_idxTmp:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     52          __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
   \                     WaveRec_idxSens1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     WaveRec_idxSens2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     53          __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
   \                     WaveRec_idxSens5:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     WaveRec_idxSens6:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     54          __IO uint16_t  idxSPI5DataBuf3;
   \                     idxSPI5DataBuf3:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     55          __IO uint16_t  cntRisingEXTI;
   \                     cntRisingEXTI:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     56          __IO uint8_t   btnSW1,btnSW2;
   \                     btnSW1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     btnSW2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     57          __IO uint8_t flgDlyUpd; 
   \                     flgDlyUpd:
   \   00000000                      DS8 1
     58          
     59          /* Buffer used for reception */

   \                                 In section .bss, align 4
     60          uint8_t aRxBuffer[1024];
   \                     aRxBuffer:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 1
     61          uint8_t idxDec,stFrstFrmStore;
   \                     idxDec:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     stFrstFrmStore:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     62          int16_t DeltaBuf1,DeltaBuf1Old;
   \                     DeltaBuf1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     DeltaBuf1Old:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     63          int16_t idxLatency13,idxLatency12,idxLatency14,idxLatency25,idxLatency63,idxLatency78;
   \                     idxLatency13:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency14:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency25:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency63:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency78:
   \   00000000                      DS8 2
     64          

   \                                 In section .bss, align 1
     65          __IO char flg10ms;
   \                     flg10ms:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     66          uint8_t flgSTAIni;
   \                     flgSTAIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     67          uint16_t cntTime200;
   \                     cntTime200:
   \   00000000                      DS8 2
     68          

   \                                 In section .data, align 1
     69          uint8_t buffer_switch = 1;
   \                     buffer_switch:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
     70          uint8_t Command_index=1;
   \                     Command_index:
   \   00000000   0x01               DC8 1
     71          
     72          #if MAIN_CRSCORR
     73          arm_rfft_instance_q15 RealFFT_Ins, RealIFFT_Ins;
     74          #endif
     75          

   \                                 In section .bss, align 4
     76          arm_cfft_radix4_instance_f32 SS1,SS2,SS3,SS4,ISS; 
   \                     SS1:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     SS2:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     SS3:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     SS4:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     ISS:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     77          arm_rfft_instance_f32 S1,S2,S3,S4,IS;
   \                     `S1`:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     `S2`:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     `S3`:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     `S4`:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     IS:
   \   00000000                      DS8 24
     78          
     79          //arm_rfft_fast_instance_f32 S1,S2,S3,S4,IS;
     80          
     81          
     82          #if (DEBUG)

   \                                 In section .bss, align 4
     83          uint8_t  pUARTBuf[128];
   \                     pUARTBuf:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
     84          uint32_t Main_CoefMor;
   \                     Main_CoefMor:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     85          uint8_t stDir,flgS2,flgS3,flgS4,flgS2Flt,flgS3Flt,flgS4Flt;
   \                     stDir:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     flgS2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     flgS3:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     flgS4:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     flgS2Flt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     flgS3Flt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     flgS4Flt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     86          uint8_t flgS2Ins,flgS3Ins,flgS4Ins;
   \                     flgS2Ins:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     flgS3Ins:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     flgS4Ins:
   \   00000000                      DS8 1
     87          #endif
     88          
     89          /* Private function prototypes -----------------------------------------------*/
     90          static void SystemClock_Config(void);
     91          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id);
     92          static void CPU_CACHE_Enable(void);
     93          
     94          
     95          
     96          
     97          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c);
     98          void MX_I2C2_Init(void);
     99          void USART3_Init(void);
    100          void ReadSTASeq(uint8_t Addr, uint8_t *pBufOut,uint8_t Len );
    101          void WriteSTAByte(uint8_t Addr, uint8_t *pBufIn, uint8_t len);
    102          void SPI5_CallBack(SPI_HandleTypeDef *hspi);
    103          
    104          
    105          
    106          /*--------------INLINE FUNCTION-----------------------------------------------*/
    107          

   \                                 In section .text, align 2, keep-with-next
    108          inline static void FFT_Update(void)
    109          {
   \                     FFT_Update: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    110          
    111                PDM2PCMSDO78();
   \   00000002   0x.... 0x....      BL       PDM2PCMSDO78
    112                /* Hafl buffer is filled in by I2S data stream in */
    113                if((flgDlyUpd==0))
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable12
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xF040 0x80A4      BNE.W    ??FFT_Update_0
    114                {
    115                      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
    116                      FactorUpd(&FacMic); 
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000016   0x.... 0x....      BL       FactorUpd
    117                      //STM_EVAL_LEDOn(LED3);
    118                      flgDlyUpd = 1; 
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    119          /*-------------------------------------------------------------------------------------------------------------
    120          			  
    121          	Sequence  Record Data                     Processing Data                 Player Data
    122          			  
    123          	1-------  Buffer1                         Buffer2                         Buffer3
    124          			  
    125          	2-------  Buffer3                         Buffer1                         Buffer2		  
    126          			  
    127          	3-------  Buffer2                         Buffer3                         Buffer1 
    128           ---------------------------------------------------------------------------------------------------------------*/
    129                      /* Processing Data */
    130          			switch (buffer_switch)
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD003             BEQ.N    ??FFT_Update_1
   \   0000002C   0x2802             CMP      R0,#+2
   \   0000002E   0xD063             BEQ.N    ??FFT_Update_2
   \   00000030   0xD331             BCC.N    ??FFT_Update_3
   \   00000032   0xE092             B.N      ??FFT_Update_4
    131          			{             
    132          			    case BUF1_PLAY:
    133          #if MAIN_CRSCORR
    134          					for (uint16_t i=0; i<(_MAX_SS/_MAX_SS);i++)
    135          					{
    136          					    //uint16_t i=0;
    137          						arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3[i*128],    (q15_t *)&bufferFFT[i*256]);
    138          						arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3_1[i*128],   (q15_t *)&bufferFFT_1[i*256]);
    139          					
    140          						arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],2*128);
    141          					
    142          						//for (uint16_t j=0; j<256;j++)
    143          						//{
    144          						//	  bufferFFTSum[i*256+j]<<=6;
    145          						//}
    146          						
    147          						arm_rfft_q15(&RealIFFT_Ins,    (q15_t *)&bufferFFTSum[i*256],    (q15_t *)&bufferSum[i*128]);
    148          					}
    149          #elif MAIN_FFT
    150                              /* Summing in Buffer3 */
    151                              Delay_Sum_FFT(&Buffer3,&FacMic,(int16_t *)bufferSum, 512);
    152          			 	   //FFT_SUM((int16_t *)buffer3, (int16_t * )buffer3_1,fbuffer, 1024);	
    153          			 	   
    154          
    155          #else
    156          
    157                              //idxLatency13 = CrssCor(Buffer3.bufMIC1, Buffer3.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2);
    158                              //idxLatency12 = CrssCor(Buffer3.bufMIC1, Buffer3.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    159          
    160          					idxLatency78 = CrssCor(Buffer3.bufMIC7, Buffer3.bufMIC8, AUDIO_OUT_BUFFER_SIZE);
   \                     ??FFT_Update_1: (+1)
   \   00000034   0xF44F 0x6280      MOV      R2,#+1024
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable11_4
   \   00000040   0x.... 0x....      BL       CrssCor
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable13
   \   00000048   0x8008             STRH     R0,[R1, #+0]
    161                              idxLatency14 = CrssCor(Buffer3.bufMIC1, Buffer3.bufMIC4, AUDIO_OUT_BUFFER_SIZE);
   \   0000004A   0xF44F 0x6280      MOV      R2,#+1024
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable12_1
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000056   0x.... 0x....      BL       CrssCor
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable15_1
   \   0000005E   0x8008             STRH     R0,[R1, #+0]
    162          					idxLatency25 = CrssCor(Buffer3.bufMIC2, Buffer3.bufMIC5, AUDIO_OUT_BUFFER_SIZE);
   \   00000060   0xF44F 0x6280      MOV      R2,#+1024
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \   0000006C   0x.... 0x....      BL       CrssCor
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000074   0x8008             STRH     R0,[R1, #+0]
    163          					idxLatency63 = CrssCor(Buffer3.bufMIC6, Buffer3.bufMIC3, AUDIO_OUT_BUFFER_SIZE);
   \   00000076   0xF44F 0x6280      MOV      R2,#+1024
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable12_5
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable12_6
   \   00000082   0x.... 0x....      BL       CrssCor
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable13_2
   \   0000008A   0x8008             STRH     R0,[R1, #+0]
    164          
    165          
    166                              SumDelay(&Buffer3);
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   00000090   0x.... 0x....      BL       SumDelay
    167          #endif
    168          					
    169          					break;
   \   00000094   0xE061             B.N      ??FFT_Update_0
    170          				case BUF2_PLAY:
    171          
    172          #if MAIN_CRSCORR
    173                               for (uint16_t i=0; i<(_MAX_SS/128);i++)
    174                               { 
    175                                   //uint16_t i=0;
    176          				         arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1[i*128],(q15_t *)&bufferFFT[i*256]);
    177          	           		     arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    178          
    179          						 arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],
    180          						 	          2*128);
    181          
    182          						 //for (uint16_t j=0; j<256;j++)
    183          						 //{
    184          						//	   bufferFFTSum[i*256+j]<<=6;
    185          						 //}
    186          
    187          						 
    188          	                     arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    189                               }
    190          #elif MAIN_FFT
    191          					/* Summing in Buffer1 */	 
    192          					Delay_Sum_FFT(&Buffer1, &FacMic,(int16_t * )bufferSum,512);
    193          					//FFT_SUM((int16_t *)buffer1, (int16_t * )buffer1_1,fbuffer, 1024);
    194          
    195          #else
    196                          
    197                            //idxLatency13 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    198                            //idxLatency12 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    199          		
    200                            idxLatency78 = CrssCor(Buffer1.bufMIC7, Buffer1.bufMIC8, AUDIO_OUT_BUFFER_SIZE);	
   \                     ??FFT_Update_3: (+1)
   \   00000096   0xF44F 0x6280      MOV      R2,#+1024
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable12_7
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable12_8
   \   000000A2   0x.... 0x....      BL       CrssCor
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable13
   \   000000AA   0x8008             STRH     R0,[R1, #+0]
    201                            idxLatency14 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC4, AUDIO_OUT_BUFFER_SIZE);
   \   000000AC   0xF44F 0x6280      MOV      R2,#+1024
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable12_9
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   000000B8   0x.... 0x....      BL       CrssCor
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable15_1
   \   000000C0   0x8008             STRH     R0,[R1, #+0]
    202                            idxLatency25 = CrssCor(Buffer1.bufMIC2, Buffer1.bufMIC5, AUDIO_OUT_BUFFER_SIZE);
   \   000000C2   0xF44F 0x6280      MOV      R2,#+1024
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable12_11
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   000000CE   0x.... 0x....      BL       CrssCor
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000D6   0x8008             STRH     R0,[R1, #+0]
    203                            idxLatency63 = CrssCor(Buffer1.bufMIC6, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE);
   \   000000D8   0xF44F 0x6280      MOV      R2,#+1024
   \   000000DC   0x.... 0x....      LDR.W    R1,??DataTable12_13
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable12_14
   \   000000E4   0x.... 0x....      BL       CrssCor
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable13_2
   \   000000EC   0x8008             STRH     R0,[R1, #+0]
    204          
    205          
    206          
    207                            SumDelay(&Buffer1);
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   000000F2   0x.... 0x....      BL       SumDelay
    208          #endif
    209          					break;
   \   000000F6   0xE030             B.N      ??FFT_Update_0
    210          					
    211          				case BUF3_PLAY:
    212          #if MAIN_CRSCORR
    213          					for (uint16_t i=0; i<(_MAX_SS/128);i++)
    214          					{
    215          						
    216          						arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2[i*128],(q15_t *)&bufferFFT[i*256]);
    217          						arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    218          					
    219          						arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],	(q15_t *)&bufferFFTSum[i*256],
    220          									 2*128);
    221          					
    222          						//for (uint16_t j=0; j<256;j++)
    223          						//{
    224          					    //   bufferFFTSum[i*256+j]<<=6;
    225          					    //}
    226          					
    227          						
    228          						arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    229          					}
    230          
    231          #elif MAIN_FFT
    232          					/* Summing in Buffer2 */
    233                                                  Delay_Sum_FFT(&Buffer2,&FacMic, (int16_t * )bufferSum, 512);
    234                                                 //FFT_SUM((int16_t *)buffer2, (int16_t * )buffer2_1,fbuffer, 1024);
    235          
    236          					
    237          #else
    238          
    239          					//idxLatency13 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    240                              //idxLatency12 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    241          
    242          					idxLatency78 = CrssCor(Buffer2.bufMIC7, Buffer2.bufMIC8, AUDIO_OUT_BUFFER_SIZE);
   \                     ??FFT_Update_2: (+1)
   \   000000F8   0xF44F 0x6280      MOV      R2,#+1024
   \   000000FC   0x.... 0x....      LDR.W    R1,??DataTable12_15
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable12_16
   \   00000104   0x.... 0x....      BL       CrssCor
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable13
   \   0000010C   0x8008             STRH     R0,[R1, #+0]
    243          					idxLatency14 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC4, AUDIO_OUT_BUFFER_SIZE);
   \   0000010E   0xF44F 0x6280      MOV      R2,#+1024
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable12_17
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable16
   \   0000011A   0x.... 0x....      BL       CrssCor
   \   0000011E   0x.... 0x....      LDR.W    R1,??DataTable15_1
   \   00000122   0x8008             STRH     R0,[R1, #+0]
    244          					idxLatency25 = CrssCor(Buffer2.bufMIC2, Buffer2.bufMIC5, AUDIO_OUT_BUFFER_SIZE);
   \   00000124   0xF44F 0x6280      MOV      R2,#+1024
   \   00000128   0x.... 0x....      LDR.W    R1,??DataTable12_18
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable12_19
   \   00000130   0x.... 0x....      BL       CrssCor
   \   00000134   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000138   0x8008             STRH     R0,[R1, #+0]
    245          					idxLatency63 = CrssCor(Buffer2.bufMIC6, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE);
   \   0000013A   0xF44F 0x6280      MOV      R2,#+1024
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable13_4
   \   00000146   0x.... 0x....      BL       CrssCor
   \   0000014A   0x.... 0x....      LDR.W    R1,??DataTable13_2
   \   0000014E   0x8008             STRH     R0,[R1, #+0]
    246          
    247                               SumDelay(&Buffer2);
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable16
   \   00000154   0x.... 0x....      BL       SumDelay
    248          #endif
    249          					break;
   \   00000158   0xE7FF             B.N      ??FFT_Update_0
    250          					
    251          				default:
    252          					break;
    253                         
    254          			}
    255          
    256          	       //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
    257          	  }
    258          	  
    259          
    260          }
   \                     ??FFT_Update_4: (+1)
   \                     ??FFT_Update_0: (+1)
   \   0000015A   0xBD01             POP      {R0,PC}          ;; return
    261          
    262          

   \                                 In section .text, align 2, keep-with-next
    263          inline static void Audio_Play_Out(void)
    264          {
   \                     Audio_Play_Out: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    265            /* wait for DMA transfert complete									*/
    266            /* This flag is set to 1 in callback function of DMA interrupt  */
    267            /* if player is finished for curent buffer */ 
    268            if (XferCplt == 1)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD169             BNE.N    ??Audio_Play_Out_0
    269            {
    270                 RESET_IDX
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable13_6
   \   00000012   0x8008             STRH     R0,[R1, #+0]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable13_7
   \   0000001A   0x8008             STRH     R0,[R1, #+0]
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable13_8
   \   00000022   0x8008             STRH     R0,[R1, #+0]
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable13_9
   \   0000002A   0x8008             STRH     R0,[R1, #+0]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   00000032   0x8008             STRH     R0,[R1, #+0]
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable14
   \   0000003A   0x8008             STRH     R0,[R1, #+0]
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable14_1
   \   00000042   0x8008             STRH     R0,[R1, #+0]
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable14_2
   \   0000004A   0x8008             STRH     R0,[R1, #+0]
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000052   0x7008             STRB     R0,[R1, #+0]
    271                 XferCplt = 0; // clear DMA interrupt flag
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable13_5
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    272          /*-------------------------------------------------------------------------------------------------------------
    273          			  
    274          	Sequence  Record Data                     Processing Data                 Player Data
    275          			  
    276          	1-------  Buffer1                         Buffer2                          Buffer3
    277          			  
    278          	2-------  Buffer3                         Buffer1                           Buffer2		  
    279          			  
    280          	3-------  Buffer2                         Buffer3                           Buffer1 
    281           ---------------------------------------------------------------------------------------------------------------*/
    282              switch (buffer_switch)
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD003             BEQ.N    ??Audio_Play_Out_1
   \   00000066   0x2802             CMP      R0,#+2
   \   00000068   0xD027             BEQ.N    ??Audio_Play_Out_2
   \   0000006A   0xD313             BCC.N    ??Audio_Play_Out_3
   \   0000006C   0xE038             B.N      ??Audio_Play_Out_4
    283              {
    284                case BUF1_PLAY:
    285                  /* Play data from buffer1 */
    286          	    Audio_MAL_Play(Command_index? (uint32_t)Buffer3.bufMIC1:(uint32_t)Buffer3.bufMIC2 , 4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??Audio_Play_Out_1: (+1)
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   00000072   0x7800             LDRB     R0,[R0, #+0]
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD002             BEQ.N    ??Audio_Play_Out_5
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000007C   0xE001             B.N      ??Audio_Play_Out_6
   \                     ??Audio_Play_Out_5: (+1)
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable12_4
   \                     ??Audio_Play_Out_6: (+1)
   \   00000082   0xF44F 0x5180      MOV      R1,#+4096
   \   00000086   0x.... 0x....      BL       Audio_MAL_Play
    287          		/* set flag for switch buffer */		  
    288                  buffer_switch = BUF3_PLAY;
   \   0000008A   0x2002             MOVS     R0,#+2
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000090   0x7008             STRB     R0,[R1, #+0]
    289          
    290                  break;
   \   00000092   0xE025             B.N      ??Audio_Play_Out_0
    291                case BUF2_PLAY:
    292                  /* Play data from buffer2 */
    293          	    Audio_MAL_Play(Command_index? (uint32_t)Buffer1.bufMIC1:(uint32_t)Buffer1.bufMIC2, 4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??Audio_Play_Out_3: (+1)
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   00000098   0x7800             LDRB     R0,[R0, #+0]
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD002             BEQ.N    ??Audio_Play_Out_7
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   000000A2   0xE001             B.N      ??Audio_Play_Out_8
   \                     ??Audio_Play_Out_7: (+1)
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \                     ??Audio_Play_Out_8: (+1)
   \   000000A8   0xF44F 0x5180      MOV      R1,#+4096
   \   000000AC   0x.... 0x....      BL       Audio_MAL_Play
    294          		/* set flag for switch buffer */
    295                  buffer_switch = BUF1_PLAY;
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000B6   0x7008             STRB     R0,[R1, #+0]
    296                  
    297                  break;
   \   000000B8   0xE012             B.N      ??Audio_Play_Out_0
    298                case BUF3_PLAY:
    299                  /* Play data from buffer1 */
    300                 Audio_MAL_Play(Command_index? (uint32_t)Buffer2.bufMIC1:(uint32_t)Buffer2.bufMIC2 ,4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??Audio_Play_Out_2: (+1)
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   000000BE   0x7800             LDRB     R0,[R0, #+0]
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD002             BEQ.N    ??Audio_Play_Out_9
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable16
   \   000000C8   0xE001             B.N      ??Audio_Play_Out_10
   \                     ??Audio_Play_Out_9: (+1)
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable12_19
   \                     ??Audio_Play_Out_10: (+1)
   \   000000CE   0xF44F 0x5180      MOV      R1,#+4096
   \   000000D2   0x.... 0x....      BL       Audio_MAL_Play
    301                  /* set flag for switch buffer */		  
    302                  buffer_switch = BUF2_PLAY;
   \   000000D6   0x2001             MOVS     R0,#+1
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000DC   0x7008             STRB     R0,[R1, #+0]
    303          
    304                  break;
   \   000000DE   0xE7FF             B.N      ??Audio_Play_Out_0
    305                default:
    306                  break;
    307              }
    308          			   
    309            }
    310          }
   \                     ??Audio_Play_Out_4: (+1)
   \                     ??Audio_Play_Out_0: (+1)
   \   000000E0   0xBD01             POP      {R0,PC}          ;; return
    311          
    312          
    313          /* Private functions ---------------------------------------------------------*/
    314          
    315          /**
    316            * @brief  Main program
    317            * @param  None
    318            * @retval None
    319            */

   \                                 In section .text, align 2, keep-with-next
    320          int main(void)
    321          {
   \                     main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    322            /* Enable the CPU Cache */
    323            CPU_CACHE_Enable();
   \   00000004   0x.... 0x....      BL       CPU_CACHE_Enable
    324            
    325            /* STM32F7xx HAL library initialization:
    326                 - Configure the Flash ART accelerator on ITCM interface
    327                 - Configure the Systick to generate an interrupt each 1 msec
    328                 - Set NVIC Group Priority to 4
    329                 - Global MSP (MCU Support Package) initialization
    330               */   
    331            HAL_Init();
   \   00000008   0x.... 0x....      BL       HAL_Init
    332            
    333            /* Configure the system clock to 216 MHz */
    334            //Test_SystemClock_Config(); 
    335            SystemClock_Config();
   \   0000000C   0x.... 0x....      BL       SystemClock_Config
    336            BSP_AUDIO_OUT_ClockConfig(AUDIO_FREQ, NULL);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0xF44F 0x507A      MOV      R0,#+16000
   \   00000016   0x.... 0x....      BL       BSP_AUDIO_OUT_ClockConfig
    337            
    338            /* Initialize the SDRAM */
    339            BSP_SDRAM_Init();
   \   0000001A   0x.... 0x....      BL       BSP_SDRAM_Init
    340          
    341          
    342            BSP_LED_Init(LED1);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       BSP_LED_Init
    343            BSP_LED_Init(LED2);
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       BSP_LED_Init
    344          
    345            /* Button Initialization */
    346            ButtonInit();
   \   0000002A   0x.... 0x....      BL       ButtonInit
    347            //BSP_PB_Init(BUTTON_KEY,BUTTON_MODE_EXTI);
    348          
    349          
    350            /* Initialize for Audio player with CS43L22 */
    351            
    352            /* Init TS module */
    353            //BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
    354          
    355            /* Init Host Library */
    356            //USBH_Init(&hUSBHost, USBH_UserProcess, 0);
    357          
    358            /* Add Supported Class */
    359            //USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
    360            
    361            /* Start Host Process */
    362            //USBH_Start(&hUSBHost);
    363          
    364             DFT_Init();	
   \   0000002E   0x.... 0x....      BL       DFT_Init
    365          
    366              /* ---------PA4: LCCKO-------------*/
    367              __GPIOA_CLK_ENABLE();
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023830
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable16_1  ;; 0x40023830
   \   00000040   0x6008             STR      R0,[R1, #+0]
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023830
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000004C   0x9000             STR      R0,[SP, #+0]
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
    368              GPIO_INS.Pin = GPIO_PIN_4;
   \   00000050   0x2010             MOVS     R0,#+16
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   00000056   0x6008             STR      R0,[R1, #+0]
    369              GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable16_3  ;; 0x10110000
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   00000060   0x6048             STR      R0,[R1, #+4]
    370              GPIO_INS.Pull =GPIO_NOPULL;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   00000068   0x6088             STR      R0,[R1, #+8]
    371              GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   0000006A   0x2003             MOVS     R0,#+3
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   00000070   0x60C8             STR      R0,[R1, #+12]
    372              HAL_GPIO_Init(GPIOA,&GPIO_INS);
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable16_4  ;; 0x40020000
   \   0000007A   0x.... 0x....      BL       HAL_GPIO_Init
    373          
    374              /* Enable and set Button EXTI Interrupt to the lowest priority */
    375              HAL_NVIC_SetPriority((IRQn_Type)EXTI4_IRQn, INTERRUPT_PRI_EXT_LRCK, 0);
   \   0000007E   0x2200             MOVS     R2,#+0
   \   00000080   0x2106             MOVS     R1,#+6
   \   00000082   0x200A             MOVS     R0,#+10
   \   00000084   0x.... 0x....      BL       HAL_NVIC_SetPriority
    376              HAL_NVIC_EnableIRQ((IRQn_Type)EXTI4_IRQn);
   \   00000088   0x200A             MOVS     R0,#+10
   \   0000008A   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    377              /*-----------------------*/
    378          
    379              /*---------PE3: POWER DOWN-----------------*/
    380              __GPIOE_CLK_ENABLE();
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023830
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable16_1  ;; 0x40023830
   \   0000009C   0x6008             STR      R0,[R1, #+0]
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023830
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0xF010 0x0010      ANDS     R0,R0,#0x10
   \   000000A8   0x9000             STR      R0,[SP, #+0]
   \   000000AA   0x9800             LDR      R0,[SP, #+0]
    381              GPIO_INS.Pin = GPIO_PIN_3;
   \   000000AC   0x2008             MOVS     R0,#+8
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   000000B2   0x6008             STR      R0,[R1, #+0]
    382              GPIO_INS.Mode = GPIO_MODE_OUTPUT_PP;
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   000000BA   0x6048             STR      R0,[R1, #+4]
    383              GPIO_INS.Pull = GPIO_PULLUP;
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   000000C2   0x6088             STR      R0,[R1, #+8]
    384              GPIO_INS.Speed = GPIO_SPEED_HIGH;
   \   000000C4   0x2003             MOVS     R0,#+3
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   000000CA   0x60C8             STR      R0,[R1, #+12]
    385          
    386              HAL_GPIO_Init(GPIOE, &GPIO_INS);
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable16_5  ;; 0x40021000
   \   000000D4   0x.... 0x....      BL       HAL_GPIO_Init
    387            
    388              HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
   \   000000D8   0x2200             MOVS     R2,#+0
   \   000000DA   0x2108             MOVS     R1,#+8
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable16_5  ;; 0x40021000
   \   000000E0   0x.... 0x....      BL       HAL_GPIO_WritePin
    389          
    390              /*----------------------------------------*/
    391          
    392          #if (DEBUG)  
    393          		/* UART for debug */
    394          		USART3_Init();
   \   000000E4   0x.... 0x....      BL       USART3_Init
    395          #endif
    396          
    397          
    398          
    399              /*----------------------------------------*/
    400              MX_I2C2_Init(); //for STA321MP
   \   000000E8   0x.... 0x....      BL       MX_I2C2_Init
    401              STA321MP_Ini();
   \   000000EC   0x.... 0x....      BL       STA321MP_Ini
    402          	BSP_LED_Toggle(LED1);
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0x.... 0x....      BL       BSP_LED_Toggle
    403              /* Init Audio Application */
    404              AUDIO_InitApplication();
   \   000000F6   0x.... 0x....      BL       AUDIO_InitApplication
    405          	BSP_LED_Toggle(LED2);
   \   000000FA   0x2001             MOVS     R0,#+1
   \   000000FC   0x.... 0x....      BL       BSP_LED_Toggle
    406             
    407          
    408          	
    409          	buffer_switch = BUF3_PLAY;		 /* record data to buffer1 */
   \   00000100   0x2002             MOVS     R0,#+2
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000106   0x7008             STRB     R0,[R1, #+0]
    410          	MIC1TO6_Init();
   \   00000108   0x.... 0x....      BL       MIC1TO6_Init
    411          	                  
    412          
    413          	while (1)
    414              {
    415          		/* there is data in the buffer */  
    416          		if((WaveRec_idxSens1>=(2*AUDIO_OUT_BUFFER_SIZE-1))&&(stFrstFrmStore<3))
   \                     ??main_0: (+1)
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable13_6
   \   00000110   0x8800             LDRH     R0,[R0, #+0]
   \   00000112   0xF240 0x71FF      MOVW     R1,#+2047
   \   00000116   0x4288             CMP      R0,R1
   \   00000118   0xDB27             BLT.N    ??main_1
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   0000011E   0x7800             LDRB     R0,[R0, #+0]
   \   00000120   0x2803             CMP      R0,#+3
   \   00000122   0xDA22             BGE.N    ??main_1
    417          		{
    418          			/* this is just run 1 time after 1st frame of I2S data full */
    419          			if ((stFrstFrmStore<3))
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000128   0x7800             LDRB     R0,[R0, #+0]
   \   0000012A   0x2803             CMP      R0,#+3
   \   0000012C   0xDA1D             BGE.N    ??main_1
    420          			{
    421          				stFrstFrmStore++;
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000132   0x7800             LDRB     R0,[R0, #+0]
   \   00000134   0x1C40             ADDS     R0,R0,#+1
   \   00000136   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   0000013A   0x7008             STRB     R0,[R1, #+0]
    422          				buffer_switch = BUF2_PLAY; /* record data to buffer3 */
   \   0000013C   0x2001             MOVS     R0,#+1
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000142   0x7008             STRB     R0,[R1, #+0]
    423          				if (stFrstFrmStore==2)
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000148   0x7800             LDRB     R0,[R0, #+0]
   \   0000014A   0x2802             CMP      R0,#+2
   \   0000014C   0xD10D             BNE.N    ??main_1
    424          				{
    425          					
    426          					/*------------------------PLAYER------------------------------------------*/
    427          					Audio_MAL_Play((uint32_t)Buffer1.bufMIC1,4*AUDIO_OUT_BUFFER_SIZE);
   \   0000014E   0xF44F 0x5180      MOV      R1,#+4096
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   00000156   0x.... 0x....      BL       Audio_MAL_Play
    428          					/*------------------------------------------------------------------------*/
    429          					buffer_switch = BUF1_PLAY;
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000160   0x7008             STRB     R0,[R1, #+0]
    430          					flgDlyUpd = 0;
   \   00000162   0x2000             MOVS     R0,#+0
   \   00000164   0x.... 0x....      LDR.W    R1,??DataTable12
   \   00000168   0x7008             STRB     R0,[R1, #+0]
    431          				}
    432          			
    433          			}
    434          		
    435          		}
    436          
    437          
    438                   if (cntStrt==5)
   \                     ??main_1: (+1)
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable16_7
   \   0000016E   0x8800             LDRH     R0,[R0, #+0]
   \   00000170   0x2805             CMP      R0,#+5
   \   00000172   0xD12C             BNE.N    ??main_2
    439          		 {
    440          			   if ((WaveRecord_flgIni<200))
   \   00000174   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   00000178   0x7800             LDRB     R0,[R0, #+0]
   \   0000017A   0x28C8             CMP      R0,#+200
   \   0000017C   0xDA1B             BGE.N    ??main_3
    441          			   {
    442          				  for(char i=0;i<16;i++)
   \   0000017E   0x2000             MOVS     R0,#+0
   \                     ??main_4: (+1)
   \   00000180   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000182   0x2810             CMP      R0,#+16
   \   00000184   0xDA23             BGE.N    ??main_2
    443          				  {
    444          					  //if (ValBit(SPI1_stNipple,i)!=0) 
    445          					  //{
    446          					//	 I2S1_stPosShft = 0;//MAX(I2S1_stPosShft,i+1);
    447          					 // }
    448          
    449          					  //if (ValBit(I2S2_stNipple,i)!=0) 
    450          		              //{
    451          		              //   I2S2_stPosShft = 0;//MAX(I2S2_stPosShft,i+1);
    452          		              //}
    453          
    454          					  if (ValBit(I2S1_stNipple,i)!=0) 
   \   00000186   0x.... 0x....      LDR.W    R1,??DataTable16_9
   \   0000018A   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000018E   0x4101             ASRS     R1,R1,R0
   \   00000190   0x07C9             LSLS     R1,R1,#+31
   \   00000192   0xD50E             BPL.N    ??main_5
    455          					 {
    456          						 SPI4_stPosShft = MAX(SPI4_stPosShft,i+1);
   \   00000194   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000196   0x1C41             ADDS     R1,R0,#+1
   \   00000198   0x.... 0x....      LDR.W    R2,??DataTable16_10
   \   0000019C   0x7812             LDRB     R2,[R2, #+0]
   \   0000019E   0x4291             CMP      R1,R2
   \   000001A0   0xDA03             BGE.N    ??main_6
   \   000001A2   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   000001A6   0x7809             LDRB     R1,[R1, #+0]
   \   000001A8   0xE000             B.N      ??main_7
   \                     ??main_6: (+1)
   \   000001AA   0x1C41             ADDS     R1,R0,#+1
   \                     ??main_7: (+1)
   \   000001AC   0x.... 0x....      LDR.W    R2,??DataTable16_10
   \   000001B0   0x7011             STRB     R1,[R2, #+0]
    457          					 }
    458          				  }
   \                     ??main_5: (+1)
   \   000001B2   0x1C40             ADDS     R0,R0,#+1
   \   000001B4   0xE7E4             B.N      ??main_4
    459          					
    460          			   }
    461          		       else if (WaveRecord_flgIni<255)
   \                     ??main_3: (+1)
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   000001BA   0x7800             LDRB     R0,[R0, #+0]
   \   000001BC   0x28FF             CMP      R0,#+255
   \   000001BE   0xD006             BEQ.N    ??main_2
    462          		       {
    463          		           WaveRecord_flgIni++;
   \   000001C0   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   000001C4   0x7800             LDRB     R0,[R0, #+0]
   \   000001C6   0x1C40             ADDS     R0,R0,#+1
   \   000001C8   0x.... 0x....      LDR.W    R1,??DataTable16_8
   \   000001CC   0x7008             STRB     R0,[R1, #+0]
    464          		       }
    465          			   else
    466          			   {
    467          
    468          			   }
    469          					   
    470          		 }
    471          	
    472          
    473          		if (cntStrt==6)
   \                     ??main_2: (+1)
   \   000001CE   0x.... 0x....      LDR.W    R0,??DataTable16_7
   \   000001D2   0x8800             LDRH     R0,[R0, #+0]
   \   000001D4   0x2806             CMP      R0,#+6
   \   000001D6   0xD10A             BNE.N    ??main_8
    474          		{
    475          					  if ((WaveRecord_flgIni<200))
   \   000001D8   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   000001DC   0x7800             LDRB     R0,[R0, #+0]
   \   000001DE   0x28C8             CMP      R0,#+200
   \   000001E0   0xDA05             BGE.N    ??main_8
    476          					  {
    477          						 for(char i=0;i<16;i++)
   \   000001E2   0x2000             MOVS     R0,#+0
   \                     ??main_9: (+1)
   \   000001E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001E6   0x2810             CMP      R0,#+16
   \   000001E8   0xDA01             BGE.N    ??main_8
   \   000001EA   0x1C40             ADDS     R0,R0,#+1
   \   000001EC   0xE7FA             B.N      ??main_9
    478          						 {
    479          
    480          						 }
    481          						   
    482          					  }
    483          		}
    484          		else
    485          		{
    486          					 
    487          		} 
    488          
    489          		/* USB Host Background task */
    490          		//USBH_Process(&hUSBHost);
    491          
    492          		/* AUDIO Menu Process */
    493          		//AUDIO_MenuProcess();
    494          		FFT_Update(); 
   \                     ??main_8: (+1)
   \   000001EE   0x.... 0x....      BL       FFT_Update
    495          
    496          		if (flg10ms==1)
   \   000001F2   0x.... 0x....      LDR.W    R0,??DataTable16_11
   \   000001F6   0x7800             LDRB     R0,[R0, #+0]
   \   000001F8   0x2801             CMP      R0,#+1
   \   000001FA   0xD187             BNE.N    ??main_0
    497          		{
    498          		    flg10ms=0;		   		      
   \   000001FC   0x2000             MOVS     R0,#+0
   \   000001FE   0x.... 0x....      LDR.W    R1,??DataTable16_11
   \   00000202   0x7008             STRB     R0,[R1, #+0]
    499          	         cntTime200++;
   \   00000204   0x.... 0x....      LDR.W    R0,??DataTable16_12
   \   00000208   0x8800             LDRH     R0,[R0, #+0]
   \   0000020A   0x1C40             ADDS     R0,R0,#+1
   \   0000020C   0x.... 0x....      LDR.W    R1,??DataTable16_12
   \   00000210   0x8008             STRH     R0,[R1, #+0]
    500          	         if (cntTime200==40)
   \   00000212   0x.... 0x....      LDR.W    R0,??DataTable16_12
   \   00000216   0x8800             LDRH     R0,[R0, #+0]
   \   00000218   0x2828             CMP      R0,#+40
   \   0000021A   0xF47F 0xAF77      BNE.W    ??main_0
    501          	          {
    502          	 
    503          #if (DEBUG)
    504          
    505                              //if ((idxLatency14!=0)||(idxLatency25!=0)||(idxLatency36!=0))
    506                              {
    507                                  int16_t test[5];
    508                                  static uint8_t flagNotMin;
    509                                  test[0] = 0;
   \   0000021E   0x2000             MOVS     R0,#+0
   \   00000220   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    510                                  test[1]= idxLatency63;
   \   00000224   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   00000228   0x8800             LDRH     R0,[R0, #+0]
   \   0000022A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    511                                  test[2]= idxLatency14;
   \   0000022E   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000232   0x8800             LDRH     R0,[R0, #+0]
   \   00000234   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    512                                  test[3]= idxLatency25;
   \   00000238   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   0000023C   0x8800             LDRH     R0,[R0, #+0]
   \   0000023E   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    513          						test[4]= idxLatency78;
   \   00000242   0x.... 0x....      LDR.W    R0,??DataTable13
   \   00000246   0x8800             LDRH     R0,[R0, #+0]
   \   00000248   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    514          
    515          
    516                                  if (EnergySound<2)
   \   0000024C   0x.... 0x....      LDR.W    R0,??DataTable16_13
   \   00000250   0x6800             LDR      R0,[R0, #+0]
   \   00000252   0x2802             CMP      R0,#+2
   \   00000254   0xF0C0 0x8118      BCC.W    ??main_10
    517                                  {
    518                                          //sprintf((char *)pUARTBuf,"No Speech:%d  \r\n",EnergySound);
    519                                          //HAL_UART_Transmit_IT(&huart3,pUARTBuf,30); 
    520                                  }
    521                                  else
    522                                  {
    523                                       sprintf((char *)pUARTBuf,"%d:%d:%d:%d ",idxLatency63,idxLatency14,idxLatency25,idxLatency78);
   \   00000258   0x.... 0x....      LDR.W    R0,??DataTable13
   \   0000025C   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000260   0x9001             STR      R0,[SP, #+4]
   \   00000262   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   00000266   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000026A   0x9000             STR      R0,[SP, #+0]
   \   0000026C   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000270   0xF9B0 0x3000      LDRSH    R3,[R0, #+0]
   \   00000274   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   00000278   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   0000027C   0x.... 0x....      LDR.W    R1,??DataTable16_14
   \   00000280   0x.... 0x....      LDR.W    R0,??DataTable16_15
   \   00000284   0x.... 0x....      BL       sprintf
    524          							 flagNotMin=0 ;
   \   00000288   0x2000             MOVS     R0,#+0
   \   0000028A   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   0000028E   0x7008             STRB     R0,[R1, #+0]
    525          
    526          							if (test[3]>0)
   \   00000290   0xF9BD 0x000E      LDRSH    R0,[SP, #+14]
   \   00000294   0x2801             CMP      R0,#+1
   \   00000296   0xDB12             BLT.N    ??main_11
    527          							{
    528          							   if((test[1]<=0)&&(test[4]<=0))
   \   00000298   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   0000029C   0x2801             CMP      R0,#+1
   \   0000029E   0xDA25             BGE.N    ??main_12
   \   000002A0   0xF9BD 0x0010      LDRSH    R0,[SP, #+16]
   \   000002A4   0x2801             CMP      R0,#+1
   \   000002A6   0xDA21             BGE.N    ??main_12
    529          							   {
    530          								flagNotMin=1 ;
   \   000002A8   0x2001             MOVS     R0,#+1
   \   000002AA   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   000002AE   0x7008             STRB     R0,[R1, #+0]
    531          								sprintf((char *)(pUARTBuf+15),"Close Mic 2\r\n");
   \   000002B0   0x.... 0x....      LDR.W    R1,??DataTable16_17
   \   000002B4   0x.... 0x....      LDR.W    R0,??DataTable16_18
   \   000002B8   0x.... 0x....      BL       sprintf
   \   000002BC   0xE016             B.N      ??main_12
    532          							   }
    533          							}
    534          							else if (test[3]<-2)
   \                     ??main_11: (+1)
   \   000002BE   0xF9BD 0x000E      LDRSH    R0,[SP, #+14]
   \   000002C2   0xF110 0x0F02      CMN      R0,#+2
   \   000002C6   0xDA11             BGE.N    ??main_12
    535          							{
    536          							    if((test[1]>1)&&(test[4]>1))
   \   000002C8   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   000002CC   0x2802             CMP      R0,#+2
   \   000002CE   0xDB0D             BLT.N    ??main_12
   \   000002D0   0xF9BD 0x0010      LDRSH    R0,[SP, #+16]
   \   000002D4   0x2802             CMP      R0,#+2
   \   000002D6   0xDB09             BLT.N    ??main_12
    537          							    {
    538          									flagNotMin=1 ;
   \   000002D8   0x2001             MOVS     R0,#+1
   \   000002DA   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   000002DE   0x7008             STRB     R0,[R1, #+0]
    539          									sprintf((char *)(pUARTBuf+15),"Clsoe Mic 5\r\n");
   \   000002E0   0x.... 0x....      LDR.W    R1,??DataTable16_19
   \   000002E4   0x.... 0x....      LDR.W    R0,??DataTable16_18
   \   000002E8   0x.... 0x....      BL       sprintf
    540          							    }
    541          
    542          							}
    543          							else
    544          							{
    545          									}	
    546          
    547          							
    548          
    549          							if (test[2]>2)
   \                     ??main_12: (+1)
   \   000002EC   0xF9BD 0x000C      LDRSH    R0,[SP, #+12]
   \   000002F0   0x2803             CMP      R0,#+3
   \   000002F2   0xDB14             BLT.N    ??main_13
    550                                	    {
    551                                	       if((test[1]>=-1)&&(test[3]<=-3))
   \   000002F4   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   000002F8   0xF110 0x0F01      CMN      R0,#+1
   \   000002FC   0xDB26             BLT.N    ??main_14
   \   000002FE   0xF9BD 0x000E      LDRSH    R0,[SP, #+14]
   \   00000302   0xF110 0x0F02      CMN      R0,#+2
   \   00000306   0xDA21             BGE.N    ??main_14
    552                                	       {
    553          								 flagNotMin=1 ;
   \   00000308   0x2001             MOVS     R0,#+1
   \   0000030A   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   0000030E   0x7008             STRB     R0,[R1, #+0]
    554          								 sprintf((char *)(pUARTBuf+15),"Clsoe Mic 4\r\n");
   \   00000310   0x.... 0x....      LDR.W    R1,??DataTable16_20
   \   00000314   0x.... 0x....      LDR.W    R0,??DataTable16_18
   \   00000318   0x.... 0x....      BL       sprintf
   \   0000031C   0xE016             B.N      ??main_14
    555                                	       }
    556                                	    }
    557          							else if (test[2]<=-1)
   \                     ??main_13: (+1)
   \   0000031E   0xF9BD 0x000C      LDRSH    R0,[SP, #+12]
   \   00000322   0x2800             CMP      R0,#+0
   \   00000324   0xD512             BPL.N    ??main_14
    558          							{
    559          							   if((test[1]<=-2)&&(test[3]>=0))
   \   00000326   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   0000032A   0xF110 0x0F01      CMN      R0,#+1
   \   0000032E   0xDA0D             BGE.N    ??main_14
   \   00000330   0xF9BD 0x000E      LDRSH    R0,[SP, #+14]
   \   00000334   0x2800             CMP      R0,#+0
   \   00000336   0xD409             BMI.N    ??main_14
    560                                	       {
    561          								 flagNotMin=1 ;
   \   00000338   0x2001             MOVS     R0,#+1
   \   0000033A   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   0000033E   0x7008             STRB     R0,[R1, #+0]
    562          								 sprintf((char *)(pUARTBuf+15),"Clsoe Mic 1\r\n");
   \   00000340   0x.... 0x....      LDR.W    R1,??DataTable16_21
   \   00000344   0x.... 0x....      LDR.W    R0,??DataTable16_18
   \   00000348   0x.... 0x....      BL       sprintf
    563          							   }
    564          							}
    565          							else
    566          							{
    567          
    568          							}
    569          
    570          						   
    571                                      if (test[1]>=0)
   \                     ??main_14: (+1)
   \   0000034C   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   00000350   0x2800             CMP      R0,#+0
   \   00000352   0xD412             BMI.N    ??main_15
    572                                	    {
    573                                	       if((test[2]>1)&&(test[4]<= 0))
   \   00000354   0xF9BD 0x000C      LDRSH    R0,[SP, #+12]
   \   00000358   0x2802             CMP      R0,#+2
   \   0000035A   0xDB25             BLT.N    ??main_16
   \   0000035C   0xF9BD 0x0010      LDRSH    R0,[SP, #+16]
   \   00000360   0x2801             CMP      R0,#+1
   \   00000362   0xDA21             BGE.N    ??main_16
    574                                	       {
    575          								 flagNotMin=1 ;
   \   00000364   0x2001             MOVS     R0,#+1
   \   00000366   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   0000036A   0x7008             STRB     R0,[R1, #+0]
    576          								 sprintf((char *)(pUARTBuf+15),"Clsoe Mic 3\r\n");
   \   0000036C   0x.... 0x....      LDR.W    R1,??DataTable16_22
   \   00000370   0x.... 0x....      LDR.W    R0,??DataTable16_18
   \   00000374   0x.... 0x....      BL       sprintf
   \   00000378   0xE016             B.N      ??main_16
    577                                	       }
    578          
    579                                	    }
    580          							else if (test[1]<=-3)
   \                     ??main_15: (+1)
   \   0000037A   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   0000037E   0xF110 0x0F02      CMN      R0,#+2
   \   00000382   0xDA11             BGE.N    ??main_16
    581          							{
    582          							   if((test[2]<=0)&&(test[4]>=2))
   \   00000384   0xF9BD 0x000C      LDRSH    R0,[SP, #+12]
   \   00000388   0x2801             CMP      R0,#+1
   \   0000038A   0xDA0D             BGE.N    ??main_16
   \   0000038C   0xF9BD 0x0010      LDRSH    R0,[SP, #+16]
   \   00000390   0x2802             CMP      R0,#+2
   \   00000392   0xDB09             BLT.N    ??main_16
    583                                	       {
    584          								 flagNotMin=1 ;
   \   00000394   0x2001             MOVS     R0,#+1
   \   00000396   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   0000039A   0x7008             STRB     R0,[R1, #+0]
    585          								 sprintf((char *)(pUARTBuf+15),"Clsoe Mic 6\r\n");
   \   0000039C   0x.... 0x....      LDR.W    R1,??DataTable16_23
   \   000003A0   0x.... 0x....      LDR.W    R0,??DataTable16_18
   \   000003A4   0x.... 0x....      BL       sprintf
    586          							   }
    587          
    588          							}
    589          							else
    590          							{
    591          
    592          							}
    593          
    594          
    595          							if ((test[4]<=-1))
   \                     ??main_16: (+1)
   \   000003A8   0xF9BD 0x0010      LDRSH    R0,[SP, #+16]
   \   000003AC   0x2800             CMP      R0,#+0
   \   000003AE   0xD513             BPL.N    ??main_17
    596          							{
    597          
    598                                          if ((test[1]>=-1)&&(test[3]>-0))
   \   000003B0   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   000003B4   0xF110 0x0F01      CMN      R0,#+1
   \   000003B8   0xDB26             BLT.N    ??main_18
   \   000003BA   0xF9BD 0x000E      LDRSH    R0,[SP, #+14]
   \   000003BE   0x2801             CMP      R0,#+1
   \   000003C0   0xDB22             BLT.N    ??main_18
    599                                          {
    600          									sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
   \   000003C2   0x.... 0x....      LDR.W    R1,??DataTable16_24
   \   000003C6   0x.... 0x....      LDR.W    R0,??DataTable16_18
   \   000003CA   0x.... 0x....      BL       sprintf
    601          									flagNotMin=1 ;
   \   000003CE   0x2001             MOVS     R0,#+1
   \   000003D0   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   000003D4   0x7008             STRB     R0,[R1, #+0]
   \   000003D6   0xE017             B.N      ??main_18
    602          
    603                                         	}
    604          
    605          								;
    606          							}
    607          							else if (test[4]>=3)
   \                     ??main_17: (+1)
   \   000003D8   0xF9BD 0x0010      LDRSH    R0,[SP, #+16]
   \   000003DC   0x2803             CMP      R0,#+3
   \   000003DE   0xDB13             BLT.N    ??main_18
    608          							{
    609          							    if ((test[1]<-1)&&(test[3]<-2))
   \   000003E0   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   000003E4   0xF110 0x0F01      CMN      R0,#+1
   \   000003E8   0xDA0E             BGE.N    ??main_18
   \   000003EA   0xF9BD 0x000E      LDRSH    R0,[SP, #+14]
   \   000003EE   0xF110 0x0F02      CMN      R0,#+2
   \   000003F2   0xDA09             BGE.N    ??main_18
    610          							   {
    611          								sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
   \   000003F4   0x.... 0x....      LDR.W    R1,??DataTable16_25
   \   000003F8   0x.... 0x....      LDR.W    R0,??DataTable16_18
   \   000003FC   0x.... 0x....      BL       sprintf
    612          								flagNotMin=1 ;
   \   00000400   0x2001             MOVS     R0,#+1
   \   00000402   0x.... 0x....      LDR.W    R1,??DataTable16_16
   \   00000406   0x7008             STRB     R0,[R1, #+0]
    613          							   }
    614          
    615          							}
    616          							else
    617          							{
    618          
    619          							}
    620          
    621          
    622          							if (flagNotMin==0) sprintf((char *)(pUARTBuf+15),"----------- \r\n");
   \                     ??main_18: (+1)
   \   00000408   0x.... 0x....      LDR.W    R0,??DataTable16_16
   \   0000040C   0x7800             LDRB     R0,[R0, #+0]
   \   0000040E   0x2800             CMP      R0,#+0
   \   00000410   0xD105             BNE.N    ??main_19
   \   00000412   0x.... 0x....      LDR.W    R1,??DataTable16_26
   \   00000416   0x.... 0x....      LDR.W    R0,??DataTable16_18
   \   0000041A   0x.... 0x....      BL       sprintf
    623          									
    624                     
    625                                    //HAL_UART_Transmit_IT(&huart3,pUARTBuf,15);
    626                                    SrvB_Debound(&flgS2Ins,&flgS2Flt, flgS2,2);
   \                     ??main_19: (+1)
   \   0000041E   0x2302             MOVS     R3,#+2
   \   00000420   0x.... 0x....      LDR.W    R0,??DataTable16_27
   \   00000424   0x7802             LDRB     R2,[R0, #+0]
   \   00000426   0x.... 0x....      LDR.W    R1,??DataTable16_28
   \   0000042A   0x.... 0x....      LDR.W    R0,??DataTable16_29
   \   0000042E   0x.... 0x....      BL       SrvB_Debound
    627                                    SrvB_Debound(&flgS3Ins,&flgS3Flt, flgS3,2);
   \   00000432   0x2302             MOVS     R3,#+2
   \   00000434   0x.... 0x....      LDR.W    R0,??DataTable16_30
   \   00000438   0x7802             LDRB     R2,[R0, #+0]
   \   0000043A   0x.... 0x....      LDR.W    R1,??DataTable16_31
   \   0000043E   0x.... 0x....      LDR.W    R0,??DataTable16_32
   \   00000442   0x.... 0x....      BL       SrvB_Debound
    628                                    SrvB_Debound(&flgS4Ins,&flgS4Flt, flgS4,2);
   \   00000446   0x2302             MOVS     R3,#+2
   \   00000448   0x.... 0x....      LDR.W    R0,??DataTable16_33
   \   0000044C   0x7802             LDRB     R2,[R0, #+0]
   \   0000044E   0x.... 0x....      LDR.W    R1,??DataTable16_34
   \   00000452   0x.... 0x....      LDR.W    R0,??DataTable16_35
   \   00000456   0x.... 0x....      BL       SrvB_Debound
    629          
    630                                    stDir = (flgS2Flt<<2)|(flgS3Flt<<1)|(flgS4Flt); 
   \   0000045A   0x.... 0x....      LDR.W    R0,??DataTable16_28
   \   0000045E   0x7800             LDRB     R0,[R0, #+0]
   \   00000460   0x.... 0x....      LDR.W    R1,??DataTable16_31
   \   00000464   0x7809             LDRB     R1,[R1, #+0]
   \   00000466   0x0049             LSLS     R1,R1,#+1
   \   00000468   0xEA51 0x0080      ORRS     R0,R1,R0, LSL #+2
   \   0000046C   0x.... 0x....      LDR.W    R1,??DataTable16_34
   \   00000470   0x7809             LDRB     R1,[R1, #+0]
   \   00000472   0x4308             ORRS     R0,R1,R0
   \   00000474   0x.... 0x....      LDR.W    R1,??DataTable16_36
   \   00000478   0x7008             STRB     R0,[R1, #+0]
    631                                     switch (8)
    632                                     {
    633                                         case 0:
    634                                                  sprintf((char *)(pUARTBuf+15),"Direction 0 \r\n");
    635                                                           
    636                                              break;
    637                                         case 1:
    638                                                  sprintf((char *)(pUARTBuf+15),"Direction 1 \r\n");
    639                                                  
    640                                              break;
    641                                         case 2:
    642                                                  sprintf((char *)(pUARTBuf+15),"Direction 2 \r\n");
    643                                                   
    644                                              break;
    645                                                  
    646                                         case 3:
    647                                                  sprintf((char *)(pUARTBuf+15),"Direction 3 \r\n");
    648                                           
    649                                              break;
    650                                         case 4:
    651                                                  sprintf((char *)(pUARTBuf+15),"Direction 4 \r\n");
    652                                                           
    653                                              break;
    654                                          case 5:
    655                                                  sprintf((char *)(pUARTBuf+15),"Direction 5 \r\n");
    656                                                   
    657                                              break;
    658                                          case 6:
    659                                                  sprintf((char *)(pUARTBuf+15),"Direction 6 \r\n");
    660                                           
    661                                              break;
    662                                          case 7:
    663                                                  sprintf((char *)(pUARTBuf+15),"Direction 7 \r\n");
    664                                                   
    665                                              break;
    666                                           default:
    667                                              break;
    668                                     }
    669          
    670                                     HAL_UART_Transmit_IT(&huart3,pUARTBuf,15+15);		
   \   0000047A   0x221E             MOVS     R2,#+30
   \   0000047C   0x.... 0x....      LDR.W    R1,??DataTable16_15
   \   00000480   0x.... 0x....      LDR.W    R0,??DataTable16_37
   \   00000484   0x.... 0x....      BL       HAL_UART_Transmit_IT
    671                                   }
    672                              }
    673          
    674          #endif
    675          	   	            cntTime200=0;
   \                     ??main_10: (+1)
   \   00000488   0x2000             MOVS     R0,#+0
   \   0000048A   0x.... 0x....      LDR.W    R1,??DataTable16_12
   \   0000048E   0x8008             STRH     R0,[R1, #+0]
   \   00000490   0xE63C             B.N      ??main_0
    676                                   }
    677          
    678          
    679                              }
    680          
    681          
    682          	
    683            }
    684            
    685          }

   \                                 In section .bss, align 1
   \                     ??flagNotMin:
   \   00000000                      DS8 1
    686          
    687          /**
    688            * @brief  Toggle Leds.
    689            * @param  None
    690            * @retval None
    691            */

   \                                 In section .text, align 2, keep-with-next
    692          void Toggle_Leds(void)
    693          {
    694            static uint32_t ticks = 0;
    695          
    696            if (ticks++ > 200)
   \                     Toggle_Leds: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable16_38
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x1C41             ADDS     R1,R0,#+1
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable16_38
   \   0000000C   0x6011             STR      R1,[R2, #+0]
   \   0000000E   0x28C9             CMP      R0,#+201
   \   00000010   0xD303             BCC.N    ??Toggle_Leds_0
    697            {
    698              //BSP_LED_Toggle(LED1);
    699              ticks = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable16_38
   \   00000018   0x6008             STR      R0,[R1, #+0]
    700            }
    701          }
   \                     ??Toggle_Leds_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??ticks:
   \   00000000                      DS8 4
    702          
    703          
    704          /**
    705            * @brief  User Process
    706            * @param  phost: Host Handle
    707            * @param  id: Host Library user message ID
    708            * @retval None
    709            */
    710          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
                             ^
Warning[Pe177]: function "USBH_UserProcess" was declared but never referenced
    711          {
    712            switch(id)
    713            { 
    714            case HOST_USER_SELECT_CONFIGURATION:
    715              break;
    716              
    717            case HOST_USER_DISCONNECTION:
    718              appli_state = APPLICATION_DISCONNECT;
    719              break;
    720          
    721            case HOST_USER_CLASS_ACTIVE:
    722              appli_state = APPLICATION_READY;
    723              break;
    724           
    725            case HOST_USER_CONNECTION:
    726              appli_state = APPLICATION_START;
    727              break;
    728             
    729            default:
    730              break; 
    731            }
    732          }
    733          
    734          /**
    735            * @brief  System Clock Configuration
    736            *         The system Clock is configured as follow : 
    737            *            System Clock source            = PLL (HSE)
    738            *            SYSCLK(Hz)                     = 216000000
    739            *            HCLK(Hz)                       = 216000000
    740            *            AHB Prescaler                  = 1
    741            *            APB1 Prescaler                 = 4
    742            *            APB2 Prescaler                 = 2
    743            *            HSE Frequency(Hz)              = 25000000
    744            *            PLL_M                          = 25
    745            *            PLL_N                          = 432
    746            *            PLL_P                          = 2
    747            *            PLL_Q                          = 9
    748            *            VDD(V)                         = 3.3
    749            *            Main regulator output voltage  = Scale1 mode
    750            *            Flash Latency(WS)              = 7
    751            * @param  None
    752            * @retval None
    753            */

   \                                 In section .text, align 2, keep-with-next
    754          static void SystemClock_Config(void)
    755          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B2             SUB      SP,SP,#+200
    756            RCC_ClkInitTypeDef RCC_ClkInitStruct;
    757            RCC_OscInitTypeDef RCC_OscInitStruct;
    758            RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    759            HAL_StatusTypeDef ret = HAL_OK;
   \   00000004   0x2400             MOVS     R4,#+0
    760          
    761            /* Enable HSE Oscillator and activate PLL with HSE as source */
    762            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x9026             STR      R0,[SP, #+152]
    763            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   0000000A   0xF45F 0x3080      MOVS     R0,#+65536
   \   0000000E   0x9027             STR      R0,[SP, #+156]
    764            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x902C             STR      R0,[SP, #+176]
    765            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
   \   00000014   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000018   0x902D             STR      R0,[SP, #+180]
    766            RCC_OscInitStruct.PLL.PLLM = 25;
   \   0000001A   0x2019             MOVS     R0,#+25
   \   0000001C   0x902E             STR      R0,[SP, #+184]
    767            RCC_OscInitStruct.PLL.PLLN = 432;  
   \   0000001E   0xF44F 0x70D8      MOV      R0,#+432
   \   00000022   0x902F             STR      R0,[SP, #+188]
    768            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x9030             STR      R0,[SP, #+192]
    769            RCC_OscInitStruct.PLL.PLLQ = 9;
   \   00000028   0x2009             MOVS     R0,#+9
   \   0000002A   0x9031             STR      R0,[SP, #+196]
    770          
    771            ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
   \   0000002C   0xA826             ADD      R0,SP,#+152
   \   0000002E   0x.... 0x....      BL       HAL_RCC_OscConfig
   \   00000032   0x0004             MOVS     R4,R0
    772            if(ret != HAL_OK)
    773            {
    774              //while(1) { ; }
    775            }
    776          
    777            /* Activate the OverDrive to reach the 216 MHz Frequency */
    778            ret = HAL_PWREx_EnableOverDrive();
   \   00000034   0x.... 0x....      BL       HAL_PWREx_EnableOverDrive
   \   00000038   0x0004             MOVS     R4,R0
    779            if(ret != HAL_OK)
    780            {
    781              //while(1) { ; }
    782            }
    783          
    784            /* Select PLLSAI output as USB clock source */
    785            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48 ;
   \   0000003A   0xF45F 0x1000      MOVS     R0,#+2097152
   \   0000003E   0x9005             STR      R0,[SP, #+20]
    786            PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
   \   00000040   0xF05F 0x6000      MOVS     R0,#+134217728
   \   00000044   0x9024             STR      R0,[SP, #+144]
    787          
    788            
    789            PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
   \   00000046   0x20C0             MOVS     R0,#+192
   \   00000048   0x900A             STR      R0,[SP, #+40]
    790            PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
   \   0000004A   0x2004             MOVS     R0,#+4
   \   0000004C   0x900B             STR      R0,[SP, #+44]
    791            PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x900D             STR      R0,[SP, #+52]
    792            PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x900C             STR      R0,[SP, #+48]
    793          
    794          
    795            ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
   \   00000056   0xA805             ADD      R0,SP,#+20
   \   00000058   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
   \   0000005C   0x0004             MOVS     R4,R0
    796            
    797            if(ret != HAL_OK)
    798            {
    799              //while(1) { ; }
    800            }
    801            
    802            /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
    803            RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
   \   0000005E   0x200F             MOVS     R0,#+15
   \   00000060   0x9000             STR      R0,[SP, #+0]
    804            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \   00000062   0x2002             MOVS     R0,#+2
   \   00000064   0x9001             STR      R0,[SP, #+4]
    805            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
   \   00000066   0x2080             MOVS     R0,#+128
   \   00000068   0x9002             STR      R0,[SP, #+8]
    806            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
   \   0000006A   0xF44F 0x50A0      MOV      R0,#+5120
   \   0000006E   0x9003             STR      R0,[SP, #+12]
    807            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \   00000070   0xF44F 0x5080      MOV      R0,#+4096
   \   00000074   0x9004             STR      R0,[SP, #+16]
    808          
    809            ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
   \   00000076   0x2107             MOVS     R1,#+7
   \   00000078   0x4668             MOV      R0,SP
   \   0000007A   0x.... 0x....      BL       HAL_RCC_ClockConfig
   \   0000007E   0x0004             MOVS     R4,R0
    810            if(ret != HAL_OK)
    811            {
    812              //while(1) { ; }
    813            }
    814            
    815           //sop1hc 344/7 = 49.142 MHz
    816            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable16_39  ;; 0x100001
   \   00000084   0x9005             STR      R0,[SP, #+20]
    817            PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000086   0xF45F 0x0080      MOVS     R0,#+4194304
   \   0000008A   0x9015             STR      R0,[SP, #+84]
    818            PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x9012             STR      R0,[SP, #+72]
    819            PeriphClkInitStruct.PLLI2S.PLLI2SP = 8;
   \   00000090   0x2008             MOVS     R0,#+8
   \   00000092   0x9009             STR      R0,[SP, #+36]
    820            PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   00000094   0xF44F 0x70AC      MOV      R0,#+344
   \   00000098   0x9006             STR      R0,[SP, #+24]
    821            PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
   \   0000009A   0x2007             MOVS     R0,#+7
   \   0000009C   0x9008             STR      R0,[SP, #+32]
    822            PeriphClkInitStruct.PLLI2S.PLLI2SR = 7;
   \   0000009E   0x2007             MOVS     R0,#+7
   \   000000A0   0x9007             STR      R0,[SP, #+28]
    823            PeriphClkInitStruct.PLLI2SDivQ = 1;
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0x900E             STR      R0,[SP, #+56]
    824            HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);	
   \   000000A6   0xA805             ADD      R0,SP,#+20
   \   000000A8   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    825          }
   \   000000AC   0xB032             ADD      SP,SP,#+200
   \   000000AE   0xBD10             POP      {R4,PC}          ;; return
    826          
    827          /**
    828            * @brief  Clock Config.
    829            * @param  hsai: might be required to set audio peripheral predivider if any.
    830            * @param  AudioFreq: Audio frequency used to play the audio stream.
    831            * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
    832            *         Being __weak it can be overwritten by the application     
    833            * @retval None
    834            */

   \                                 In section .text, align 2, keep-with-next
    835          void BSP_AUDIO_OUT_ClockConfig(uint32_t AudioFreq, void *Params)
    836          {
   \                     BSP_AUDIO_OUT_ClockConfig: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0A1             SUB      SP,SP,#+132
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    837            RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;
    838          
    839            HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
    840            
    841            /* Set the PLL configuration according to the audio frequency */
    842            if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
   \   0000000E   0xF642 0x3011      MOVW     R0,#+11025
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD007             BEQ.N    ??BSP_AUDIO_OUT_ClockConfig_0
   \   00000016   0xF245 0x6022      MOVW     R0,#+22050
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD003             BEQ.N    ??BSP_AUDIO_OUT_ClockConfig_0
   \   0000001E   0xF64A 0x4044      MOVW     R0,#+44100
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD112             BNE.N    ??BSP_AUDIO_OUT_ClockConfig_1
    843            {
    844              /* Configure PLLSAI prescalers */
    845              /* PLLI2S_VCO: VCO_429M
    846              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    847              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    848              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \                     ??BSP_AUDIO_OUT_ClockConfig_0: (+1)
   \   00000026   0xF45F 0x1080      MOVS     R0,#+1048576
   \   0000002A   0x9000             STR      R0,[SP, #+0]
    849              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   0000002C   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000030   0x9010             STR      R0,[SP, #+64]
    850              RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
   \   00000032   0x2008             MOVS     R0,#+8
   \   00000034   0x9004             STR      R0,[SP, #+16]
    851              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
   \   00000036   0xF240 0x10AD      MOVW     R0,#+429
   \   0000003A   0x9001             STR      R0,[SP, #+4]
    852              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x9003             STR      R0,[SP, #+12]
    853              RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
   \   00000040   0x2013             MOVS     R0,#+19
   \   00000042   0x9009             STR      R0,[SP, #+36]
    854              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000044   0x4668             MOV      R0,SP
   \   00000046   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
   \   0000004A   0xE00F             B.N      ??BSP_AUDIO_OUT_ClockConfig_2
    855            }
    856            else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K), AUDIO_FREQUENCY_96K */
    857            {
    858              /* SAI clock config
    859              PLLI2S_VCO: VCO_344M
    860              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
    861              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 49.142/1 = 49.142 Mhz */
    862              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \                     ??BSP_AUDIO_OUT_ClockConfig_1: (+1)
   \   0000004C   0xF45F 0x1080      MOVS     R0,#+1048576
   \   00000050   0x9000             STR      R0,[SP, #+0]
    863              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000052   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000056   0x9010             STR      R0,[SP, #+64]
    864          	//RCC_ExCLKInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
    865          //    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    866              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   00000058   0xF44F 0x70AC      MOV      R0,#+344
   \   0000005C   0x9001             STR      R0,[SP, #+4]
    867              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
   \   0000005E   0x2007             MOVS     R0,#+7
   \   00000060   0x9003             STR      R0,[SP, #+12]
    868          	//RCC_ExCLKInitStruct.PLLI2S.PLLI2SR = 1;
    869              RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x9009             STR      R0,[SP, #+36]
    870              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000066   0x4668             MOV      R0,SP
   \   00000068   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    871            }
    872            
    873          }
   \                     ??BSP_AUDIO_OUT_ClockConfig_2: (+1)
   \   0000006C   0xB021             ADD      SP,SP,#+132
   \   0000006E   0xBD30             POP      {R4,R5,PC}       ;; return
    874          
    875          
    876          
    877          #ifdef  USE_FULL_ASSERT
    878          /**
    879            * @brief  Reports the name of the source file and the source line number
    880            *         where the assert_param error has occurred.
    881            * @param  file: pointer to the source file name
    882            * @param  line: assert_param error line source number
    883            * @retval None
    884            */
    885          void assert_failed(uint8_t* file, uint32_t line)
    886          { 
    887            /* User can add his own implementation to report the file name and line number,
    888               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    889          
    890            /* Infinite loop */
    891            while (1)
    892            {
    893            }
    894          }
    895          #endif
    896          
    897          /**
    898            * @brief  CPU L1-Cache enable.
    899            * @param  None
    900            * @retval None
    901            */

   \                                 In section .text, align 2, keep-with-next
    902          static void CPU_CACHE_Enable(void)
    903          {
   \                     CPU_CACHE_Enable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    904            /* Enable I-Cache */
    905            SCB_EnableICache();
   \   00000002   0x.... 0x....      BL       SCB_EnableICache
    906          
    907            /* Enable D-Cache */
    908            SCB_EnableDCache();
   \   00000006   0x.... 0x....      BL       SCB_EnableDCache
    909          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    910          
    911          

   \                                 In section .text, align 2, keep-with-next
    912          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
    913          {
   \                     HAL_I2C_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    914          
    915            GPIO_InitTypeDef GPIO_InitStruct;
    916              
    917            if(hi2c->Instance==I2C1)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable16_40  ;; 0x40005400
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD135             BNE.N    ??HAL_I2C_MspInit_0
    918            {
    919          	/* USER CODE BEGIN I2C1_MspInit 0 */
    920          
    921          	/*##-1- Configure the I2C clock source. The clock is derived from the SYSCLK #*/
    922          	//RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
    923          	//RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    924          	//HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
    925          
    926          	/*##-2- Enable peripherals and GPIO Clocks #################################*/
    927          	/* Enable GPIO TX/RX clock */
    928          	__HAL_RCC_GPIOB_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023830
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable16_1  ;; 0x40023830
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023830
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
    929          
    930          	/**I2C1 GPIO Configuration	
    931          	PB6	  ------> I2C1_SCL (PB6)
    932          	PB7	  ------> I2C1_SDA (PB7) 
    933          	*/
    934          	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
   \   0000002E   0x20C0             MOVS     R0,#+192
   \   00000030   0x9001             STR      R0,[SP, #+4]
    935          	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \   00000032   0x2012             MOVS     R0,#+18
   \   00000034   0x9002             STR      R0,[SP, #+8]
    936          	GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x9003             STR      R0,[SP, #+12]
    937          	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   0000003A   0x2003             MOVS     R0,#+3
   \   0000003C   0x9004             STR      R0,[SP, #+16]
    938          	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
   \   0000003E   0x2004             MOVS     R0,#+4
   \   00000040   0x9005             STR      R0,[SP, #+20]
    939          	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000042   0xA901             ADD      R1,SP,#+4
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable16_41  ;; 0x40020400
   \   00000048   0x.... 0x....      BL       HAL_GPIO_Init
    940          
    941          	/* Peripheral clock enable */
    942          	__HAL_RCC_I2C1_CLK_ENABLE();
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable16_42  ;; 0x40023840
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable16_42  ;; 0x40023840
   \   0000005A   0x6008             STR      R0,[R1, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable16_42  ;; 0x40023840
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF410 0x1000      ANDS     R0,R0,#0x200000
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0x9800             LDR      R0,[SP, #+0]
    943          	/* Peripheral interrupt init*/
    944          	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
   \   0000006A   0x2200             MOVS     R2,#+0
   \   0000006C   0x2103             MOVS     R1,#+3
   \   0000006E   0x201F             MOVS     R0,#+31
   \   00000070   0x.... 0x....      BL       HAL_NVIC_SetPriority
    945          	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \   00000074   0x201F             MOVS     R0,#+31
   \   00000076   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   0000007A   0xE032             B.N      ??HAL_I2C_MspInit_1
    946          
    947            }
    948            else if(hi2c->Instance==I2C2)
   \                     ??HAL_I2C_MspInit_0: (+1)
   \   0000007C   0x6820             LDR      R0,[R4, #+0]
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable16_43  ;; 0x40005800
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xD12D             BNE.N    ??HAL_I2C_MspInit_1
    949            {
    950            /* USER CODE BEGIN I2C2_MspInit 0 */
    951          
    952            /* USER CODE END I2C2_MspInit 0 */
    953            
    954              /**I2C2 GPIO Configuration    
    955              PB10     ------> I2C2_SCL
    956              PB11     ------> I2C2_SDA 
    957              */
    958              __HAL_RCC_GPIOB_CLK_ENABLE();
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023830
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable16_1  ;; 0x40023830
   \   00000094   0x6008             STR      R0,[R1, #+0]
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023830
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   000000A0   0x9000             STR      R0,[SP, #+0]
   \   000000A2   0x9800             LDR      R0,[SP, #+0]
    959              
    960              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
   \   000000A4   0xF44F 0x6040      MOV      R0,#+3072
   \   000000A8   0x9001             STR      R0,[SP, #+4]
    961              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \   000000AA   0x2012             MOVS     R0,#+18
   \   000000AC   0x9002             STR      R0,[SP, #+8]
    962              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x9003             STR      R0,[SP, #+12]
    963              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000000B2   0x2003             MOVS     R0,#+3
   \   000000B4   0x9004             STR      R0,[SP, #+16]
    964              GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
   \   000000B6   0x2004             MOVS     R0,#+4
   \   000000B8   0x9005             STR      R0,[SP, #+20]
    965              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   000000BA   0xA901             ADD      R1,SP,#+4
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable16_41  ;; 0x40020400
   \   000000C0   0x.... 0x....      BL       HAL_GPIO_Init
    966          
    967              /* Peripheral clock enable */
    968              __HAL_RCC_I2C2_CLK_ENABLE();
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable16_42  ;; 0x40023840
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable16_42  ;; 0x40023840
   \   000000D2   0x6008             STR      R0,[R1, #+0]
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable16_42  ;; 0x40023840
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0xF410 0x0080      ANDS     R0,R0,#0x400000
   \   000000DE   0x9000             STR      R0,[SP, #+0]
   \   000000E0   0x9800             LDR      R0,[SP, #+0]
    969              /* Peripheral interrupt init*/
    970              //HAL_NVIC_SetPriority(I2C2_EV_IRQn, 3, 1);
    971              //HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    972            }
    973          
    974          }
   \                     ??HAL_I2C_MspInit_1: (+1)
   \   000000E2   0xB006             ADD      SP,SP,#+24
   \   000000E4   0xBD10             POP      {R4,PC}          ;; return
    975          
    976          /*---------------------------------------------------*/
    977          /*   UART                                            */
    978          /* UART4 init function */

   \                                 In section .text, align 2, keep-with-next
    979          void USART3_Init(void)
    980          {
   \                     USART3_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    981          
    982            huart3.Instance = USART3;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable16_44  ;; 0x40004800
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable16_37
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    983            huart3.Init.BaudRate = 115200;
   \   0000000C   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable16_37
   \   00000014   0x6048             STR      R0,[R1, #+4]
    984            huart3.Init.WordLength = UART_WORDLENGTH_8B;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable16_37
   \   0000001C   0x6088             STR      R0,[R1, #+8]
    985            huart3.Init.StopBits = UART_STOPBITS_1;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable16_37
   \   00000024   0x60C8             STR      R0,[R1, #+12]
    986            huart3.Init.Parity = UART_PARITY_NONE;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable16_37
   \   0000002C   0x6108             STR      R0,[R1, #+16]
    987            huart3.Init.Mode = UART_MODE_TX_RX;
   \   0000002E   0x200C             MOVS     R0,#+12
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable16_37
   \   00000034   0x6148             STR      R0,[R1, #+20]
    988            huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable16_37
   \   0000003C   0x6188             STR      R0,[R1, #+24]
    989            huart3.Init.OverSampling = UART_OVERSAMPLING_16;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable16_37
   \   00000044   0x61C8             STR      R0,[R1, #+28]
    990            huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED ;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable16_37
   \   0000004C   0x6208             STR      R0,[R1, #+32]
    991            huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable16_37
   \   00000054   0x6248             STR      R0,[R1, #+36]
    992            HAL_UART_Init(&huart3);
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable16_37
   \   0000005A   0x.... 0x....      BL       HAL_UART_Init
    993          
    994            //HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
    995            //HAL_NVIC_EnableIRQ(USART3_IRQn);
    996          
    997          }
   \   0000005E   0xBD01             POP      {R0,PC}          ;; return
    998          
    999          

   \                                 In section .text, align 2, keep-with-next
   1000          void HAL_UART_MspInit(UART_HandleTypeDef *huart)
   1001          {
   \                     HAL_UART_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   1002          
   1003            GPIO_InitTypeDef GPIO_InitStruct;
   1004            if(huart->Instance==USART3)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable16_44  ;; 0x40004800
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD135             BNE.N    ??HAL_UART_MspInit_0
   1005            {
   1006          
   1007          
   1008            /* USER CODE END UART4_MspInit 0 */
   1009              /* Peripheral clock enable */
   1010              __USART3_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable16_42  ;; 0x40023840
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable16_42  ;; 0x40023840
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable16_42  ;; 0x40023840
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF410 0x2080      ANDS     R0,R0,#0x40000
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
   1011              __GPIOC_CLK_ENABLE();
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023830
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable16_1  ;; 0x40023830
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023830
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   1012            
   1013              /**UART4 GPIO Configuration    
   1014              PC10     ------> USART3_TX
   1015              PC11     ------> USART3_RX
   1016              */
   1017              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
   \   0000004C   0xF44F 0x6040      MOV      R0,#+3072
   \   00000050   0x9001             STR      R0,[SP, #+4]
   1018              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x9002             STR      R0,[SP, #+8]
   1019              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x9003             STR      R0,[SP, #+12]
   1020              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   0000005A   0x2003             MOVS     R0,#+3
   \   0000005C   0x9004             STR      R0,[SP, #+16]
   1021              GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
   \   0000005E   0x2007             MOVS     R0,#+7
   \   00000060   0x9005             STR      R0,[SP, #+20]
   1022              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000062   0xA901             ADD      R1,SP,#+4
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable16_45  ;; 0x40020800
   \   00000068   0x.... 0x....      BL       HAL_GPIO_Init
   1023          
   1024              /* NVIC for USART */
   1025              HAL_NVIC_SetPriority(USART3_IRQn, 7, 1);
   \   0000006C   0x2201             MOVS     R2,#+1
   \   0000006E   0x2107             MOVS     R1,#+7
   \   00000070   0x2027             MOVS     R0,#+39
   \   00000072   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1026              HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   00000076   0x2027             MOVS     R0,#+39
   \   00000078   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1027          
   1028            }
   1029          
   1030          }
   \                     ??HAL_UART_MspInit_0: (+1)
   \   0000007C   0xB006             ADD      SP,SP,#+24
   \   0000007E   0xBD10             POP      {R4,PC}          ;; return
   1031          
   1032          
   1033          

   \                                 In section .text, align 2, keep-with-next
   1034          void EXTI4_IRQHandler(void)
   1035          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1036              /* EXTI line interrupt detected */
   1037            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable16_46  ;; 0x40013c14
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x06C0             LSLS     R0,R0,#+27
   \   0000000A   0xD517             BPL.N    ??EXTI4_IRQHandler_0
   1038            {
   1039              
   1040               if (cntRisingEXTI==20)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable16_47
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0x2814             CMP      R0,#+20
   \   00000014   0xD107             BNE.N    ??EXTI4_IRQHandler_1
   1041               {
   1042              	/*--------------Enable read PCM data --------------------*/   
   1043                  //flgDlyUpd = 1;  
   1044                  //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1045          		//__HAL_UNLOCK(&hspi5);
   1046                  //__HAL_SPI_ENABLE(&hspi5);
   1047          		cntRisingEXTI=0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable16_47
   \   0000001C   0x8008             STRH     R0,[R1, #+0]
   1048          
   1049          		/*Disable external interrupt */
   1050          		HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI4_IRQn));
   \   0000001E   0x200A             MOVS     R0,#+10
   \   00000020   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   00000024   0xE006             B.N      ??EXTI4_IRQHandler_2
   1051          		//HAL_GPIO_DeInit(GPIOB,GPIO_PIN_4);
   1052               }
   1053               else
   1054               {
   1055                   cntRisingEXTI++;
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable16_47
   \   0000002A   0x8800             LDRH     R0,[R0, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable16_47
   \   00000032   0x8008             STRH     R0,[R1, #+0]
   1056          		 //__HAL_SPI_DISABLE(&hspi5);
   1057               }
   1058               
   1059                __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
   \                     ??EXTI4_IRQHandler_2: (+1)
   \   00000034   0x2010             MOVS     R0,#+16
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable16_46  ;; 0x40013c14
   \   0000003A   0x6008             STR      R0,[R1, #+0]
   1060          
   1061            }
   1062          }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return
   1063                        

   \                                 In section .text, align 2, keep-with-next
   1064          void EXTI15_10_IRQHandler(void)
   1065          {
   1066          
   1067          }
   \                     EXTI15_10_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1068          
   1069          /* Events for Button Press */

   \                                 In section .text, align 2, keep-with-next
   1070          void EXTI9_5_IRQHandler(void)
   1071          {
   \                     EXTI9_5_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1072          
   1073            /* EXTI line interrupt detected */
   1074            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable16_46  ;; 0x40013c14
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x05C0             LSLS     R0,R0,#+23
   \   0000000A   0xD50B             BPL.N    ??EXTI9_5_IRQHandler_0
   1075            {
   1076          	  btnSW2 = 1;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable16_48
   \   00000012   0x7008             STRB     R0,[R1, #+0]
   1077          	  BSP_LED_Toggle(LED2);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       BSP_LED_Toggle
   1078          	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
   \   0000001A   0xF44F 0x7080      MOV      R0,#+256
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable16_46  ;; 0x40013c14
   \   00000022   0x6008             STR      R0,[R1, #+0]
   1079          
   1080            }
   1081          
   1082          
   1083            /* EXTI line interrupt detected */
   1084            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET)
   \                     ??EXTI9_5_IRQHandler_0: (+1)
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable16_46  ;; 0x40013c14
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x0580             LSLS     R0,R0,#+22
   \   0000002C   0xD511             BPL.N    ??EXTI9_5_IRQHandler_1
   1085            {
   1086          		btnSW1 = 1;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable16_49
   \   00000034   0x7008             STRB     R0,[R1, #+0]
   1087          		Command_index^=0x01;
   \   00000036   0x....             LDR.N    R0,??DataTable14_3
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0xF090 0x0001      EORS     R0,R0,#0x1
   \   0000003E   0x....             LDR.N    R1,??DataTable14_3
   \   00000040   0x7008             STRB     R0,[R1, #+0]
   1088          		BSP_LED_Toggle(LED1);
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      BL       BSP_LED_Toggle
   1089          
   1090          	   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
   \   00000048   0xF44F 0x7000      MOV      R0,#+512
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable16_46  ;; 0x40013c14
   \   00000050   0x6008             STR      R0,[R1, #+0]
   1091            }
   1092          
   1093          }
   \                     ??EXTI9_5_IRQHandler_1: (+1)
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
   1094          
   1095          

   \                                 In section .text, align 2, keep-with-next
   1096          void DFT_Init(void)
   1097          {
   \                     DFT_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1098          #if MAIN_CRSCORR
   1099          		arm_rfft_init_q15(&RealFFT_Ins,(uint32_t)128,(uint32_t)0,(uint32_t)1);
   1100          		arm_rfft_init_q15(&RealIFFT_Ins,(uint32_t)128,(uint32_t)1,(uint32_t)1);
   1101          #endif  
   1102          		/* Initialize the CFFT/CIFFT module */	
   1103          		arm_rfft_init_f32(&S1,&SS1, 512,  0, 1); 
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0xF44F 0x7200      MOV      R2,#+512
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable16_50
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable16_51
   \   00000014   0x.... 0x....      BL       arm_rfft_init_f32
   1104          		arm_rfft_init_f32(&S2,&SS2, 512,  0, 1); 
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0xF44F 0x7200      MOV      R2,#+512
   \   00000022   0x....             LDR.N    R1,??DataTable16_52
   \   00000024   0x....             LDR.N    R0,??DataTable16_53
   \   00000026   0x.... 0x....      BL       arm_rfft_init_f32
   1105          		arm_rfft_init_f32(&S3,&SS3, 512,  0, 1); 
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0xF44F 0x7200      MOV      R2,#+512
   \   00000034   0x....             LDR.N    R1,??DataTable16_54
   \   00000036   0x....             LDR.N    R0,??DataTable16_55
   \   00000038   0x.... 0x....      BL       arm_rfft_init_f32
   1106          		arm_rfft_init_f32(&S4,&SS4, 512,  0, 1);
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x2300             MOVS     R3,#+0
   \   00000042   0xF44F 0x7200      MOV      R2,#+512
   \   00000046   0x....             LDR.N    R1,??DataTable16_56
   \   00000048   0x....             LDR.N    R0,??DataTable16_57
   \   0000004A   0x.... 0x....      BL       arm_rfft_init_f32
   1107          		arm_rfft_init_f32(&IS,&ISS, 512,  1, 1);
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0x2301             MOVS     R3,#+1
   \   00000054   0xF44F 0x7200      MOV      R2,#+512
   \   00000058   0x....             LDR.N    R1,??DataTable16_58
   \   0000005A   0x....             LDR.N    R0,??DataTable16_59
   \   0000005C   0x.... 0x....      BL       arm_rfft_init_f32
   1108          
   1109          		//arm_rfft_fast_init_f32(&S1, 512);
   1110                          //arm_rfft_fast_init_f32(&S2, 512);
   1111          		//arm_rfft_fast_init_f32(&S3, 512);
   1112          		//arm_rfft_fast_init_f32(&S4, 512);
   1113          		//arm_rfft_fast_init_f32(&IS, 512);
   1114          }
   \   00000060   0xBD01             POP      {R0,PC}          ;; return
   1115          
   1116          

   \                                 In section .text, align 2, keep-with-next
   1117          void SumDelay(Mic_Array_Data *BufferIn)
   1118          {
   \                     SumDelay: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   1119                     //if (idxLatency12>idxLatency13)
   1120                     // {
   1121                     //     if (idxLatency13 > idxLatency14)
   1122                     //     {
   1123                     //         /* MIC2 --> MIC3 --> MIC4 */
   1124                     //     }
   1125                     //             else if (idxLatency14 > idxLatency12)
   1126                     //             {
   1127                     //        /* MIC4-->MIC2-->MIC3  */
   1128                     //            }
   1129                     //             else
   1130                     //             {
   1131                     //       /* MIC2-->MIC4-->MIC3  */
   1132                     //             }
   1133                     // }
   1134                     //else // idxLatency13>idxLatency12
   1135                     //     {
   1136                     //    if (idxLatency12 > idxLatency14)
   1137                     //    {
   1138                     //        //MIC3 --> MIC2 --> MIC4 
   1139                     //    }
   1140                     //        else if (idxLatency14 > idxLatency13)
   1141                     //        {
   1142                     //        //MIC4 --> MIC3 --> MIC2
   1143                     //        }
   1144                     //        else
   1145                     //        {
   1146                     //        //MIC3 --> MIC4 --> MIC2
   1147          	   //	   }
   1148          	   //}
   1149          
   1150          	
   1151          	for(uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000002   0x2100             MOVS     R1,#+0
   \                     ??SumDelay_0: (+1)
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0xF5B1 0x6F80      CMP      R1,#+1024
   \   0000000A   0xDA7C             BGE.N    ??SumDelay_1
   1152          	{
   1153          
   1154          		 if (i%2==0)
   \   0000000C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000E   0x2202             MOVS     R2,#+2
   \   00000010   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   00000014   0xFB03 0x1312      MLS      R3,R3,R2,R1
   \   00000018   0x2B00             CMP      R3,#+0
   \   0000001A   0xD168             BNE.N    ??SumDelay_2
   1155          		 {
   1156                              bufferSum[i] = (uint16_t)(BufferIn->bufMIC1[i]*FacMic.facMIC1 + 
   1157                              BufferIn->bufMIC2[(((i-idxLatency12)>0)?(i-idxLatency12):0)]*FacMic.facMIC2 + 
   1158                              BufferIn->bufMIC3[(((i-idxLatency13)>0)?(i-idxLatency13):0)]*FacMic.facMIC3 + 
   1159                              BufferIn->bufMIC4[(((i-idxLatency14)>0)?(i-idxLatency14):0)]*FacMic.facMIC4); 		
   \   0000001C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   0x....             LDR.N    R2,??DataTable16_60
   \   00000020   0xF9B2 0x2000      LDRSH    R2,[R2, #+0]
   \   00000024   0x1A8A             SUBS     R2,R1,R2
   \   00000026   0x2A01             CMP      R2,#+1
   \   00000028   0xDB05             BLT.N    ??SumDelay_3
   \   0000002A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002C   0x....             LDR.N    R2,??DataTable16_60
   \   0000002E   0xF9B2 0x2000      LDRSH    R2,[R2, #+0]
   \   00000032   0x1A8A             SUBS     R2,R1,R2
   \   00000034   0xE000             B.N      ??SumDelay_4
   \                     ??SumDelay_3: (+1)
   \   00000036   0x2200             MOVS     R2,#+0
   \                     ??SumDelay_4: (+1)
   \   00000038   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003A   0x....             LDR.N    R3,??DataTable16_61
   \   0000003C   0xF9B3 0x3000      LDRSH    R3,[R3, #+0]
   \   00000040   0x1ACB             SUBS     R3,R1,R3
   \   00000042   0x2B01             CMP      R3,#+1
   \   00000044   0xDB05             BLT.N    ??SumDelay_5
   \   00000046   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000048   0x....             LDR.N    R3,??DataTable16_61
   \   0000004A   0xF9B3 0x3000      LDRSH    R3,[R3, #+0]
   \   0000004E   0x1ACB             SUBS     R3,R1,R3
   \   00000050   0xE000             B.N      ??SumDelay_6
   \                     ??SumDelay_5: (+1)
   \   00000052   0x2300             MOVS     R3,#+0
   \                     ??SumDelay_6: (+1)
   \   00000054   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000056   0x....             LDR.N    R4,??DataTable15_1
   \   00000058   0xF9B4 0x4000      LDRSH    R4,[R4, #+0]
   \   0000005C   0x1B0C             SUBS     R4,R1,R4
   \   0000005E   0x2C01             CMP      R4,#+1
   \   00000060   0xDB05             BLT.N    ??SumDelay_7
   \   00000062   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000064   0x....             LDR.N    R4,??DataTable15_1
   \   00000066   0xF9B4 0x4000      LDRSH    R4,[R4, #+0]
   \   0000006A   0x1B0C             SUBS     R4,R1,R4
   \   0000006C   0xE000             B.N      ??SumDelay_8
   \                     ??SumDelay_7: (+1)
   \   0000006E   0x2400             MOVS     R4,#+0
   \                     ??SumDelay_8: (+1)
   \   00000070   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000072   0xF930 0x5011      LDRSH    R5,[R0, R1, LSL #+1]
   \   00000076   0xEE00 0x5A10      VMOV     S0,R5
   \   0000007A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000007E   0x....             LDR.N    R5,??DataTable16_62
   \   00000080   0xEDD5 0x0A00      VLDR     S1,[R5, #0]
   \   00000084   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000088   0xEB10 0x0242      ADDS     R2,R0,R2, LSL #+1
   \   0000008C   0xF241 0x0514      MOVW     R5,#+4116
   \   00000090   0x5EAA             LDRSH    R2,[R5, R2]
   \   00000092   0xEE00 0x2A90      VMOV     S1,R2
   \   00000096   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   0000009A   0x....             LDR.N    R2,??DataTable16_62
   \   0000009C   0xED92 0x1A01      VLDR     S2,[R2, #+4]
   \   000000A0   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000A4   0xEB10 0x0243      ADDS     R2,R0,R3, LSL #+1
   \   000000A8   0xF242 0x0328      MOVW     R3,#+8232
   \   000000AC   0x5E9A             LDRSH    R2,[R3, R2]
   \   000000AE   0xEE00 0x2A90      VMOV     S1,R2
   \   000000B2   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000000B6   0x....             LDR.N    R2,??DataTable16_62
   \   000000B8   0xED92 0x1A02      VLDR     S2,[R2, #+8]
   \   000000BC   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000C0   0xEB10 0x0244      ADDS     R2,R0,R4, LSL #+1
   \   000000C4   0xF243 0x033C      MOVW     R3,#+12348
   \   000000C8   0x5E9A             LDRSH    R2,[R3, R2]
   \   000000CA   0xEE00 0x2A90      VMOV     S1,R2
   \   000000CE   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000000D2   0x....             LDR.N    R2,??DataTable16_62
   \   000000D4   0xED92 0x1A03      VLDR     S2,[R2, #+12]
   \   000000D8   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000DC   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000E0   0xEE10 0x2A10      VMOV     R2,S0
   \   000000E4   0x....             LDR.N    R3,??DataTable16_63
   \   000000E6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000E8   0xF823 0x2011      STRH     R2,[R3, R1, LSL #+1]
   \   000000EC   0xE009             B.N      ??SumDelay_9
   1160          		 }
   1161          		 else
   1162          		 {
   1163                               bufferSum[i] = (uint16_t)(BufferIn->bufMIC3[i]);
   \                     ??SumDelay_2: (+1)
   \   000000EE   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000F0   0xEB10 0x0241      ADDS     R2,R0,R1, LSL #+1
   \   000000F4   0xF242 0x0328      MOVW     R3,#+8232
   \   000000F8   0x5A9A             LDRH     R2,[R3, R2]
   \   000000FA   0x....             LDR.N    R3,??DataTable16_63
   \   000000FC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000FE   0xF823 0x2011      STRH     R2,[R3, R1, LSL #+1]
   1164          		 }
   1165          	}
   \                     ??SumDelay_9: (+1)
   \   00000102   0x1C49             ADDS     R1,R1,#+1
   \   00000104   0xE77E             B.N      ??SumDelay_0
   1166          }
   \                     ??SumDelay_1: (+1)
   \   00000106   0xBC30             POP      {R4,R5}
   \   00000108   0x4770             BX       LR               ;; return
   1167          
   1168          

   \                                 In section .text, align 2, keep-with-next
   1169          void ButtonInit(void)
   1170          {
   \                     ButtonInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1171              /* PI8: SW2 */
   1172          	/* PI9: SW1 */
   1173          	 /* ----------------------*/
   1174          	 __GPIOB_CLK_ENABLE();
   \   00000002   0x....             LDR.N    R0,??DataTable16_1  ;; 0x40023830
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000000A   0x....             LDR.N    R1,??DataTable16_1  ;; 0x40023830
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x....             LDR.N    R0,??DataTable16_1  ;; 0x40023830
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   1175          	GPIO_INS.Pin = GPIO_PIN_8|GPIO_PIN_9;
   \   0000001A   0xF44F 0x7040      MOV      R0,#+768
   \   0000001E   0x....             LDR.N    R1,??DataTable16_2
   \   00000020   0x6008             STR      R0,[R1, #+0]
   1176          	GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   00000022   0x....             LDR.N    R0,??DataTable16_3  ;; 0x10110000
   \   00000024   0x....             LDR.N    R1,??DataTable16_2
   \   00000026   0x6048             STR      R0,[R1, #+4]
   1177          	GPIO_INS.Pull =GPIO_NOPULL;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR.N    R1,??DataTable16_2
   \   0000002C   0x6088             STR      R0,[R1, #+8]
   1178          	GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   0000002E   0x2003             MOVS     R0,#+3
   \   00000030   0x....             LDR.N    R1,??DataTable16_2
   \   00000032   0x60C8             STR      R0,[R1, #+12]
   1179          	HAL_GPIO_Init(GPIOI,&GPIO_INS);
   \   00000034   0x....             LDR.N    R1,??DataTable16_2
   \   00000036   0x....             LDR.N    R0,??DataTable16_64  ;; 0x40022000
   \   00000038   0x.... 0x....      BL       HAL_GPIO_Init
   1180          	
   1181          	/* Enable and set Button EXTI Interrupt to the lowest priority */
   1182          	HAL_NVIC_SetPriority((IRQn_Type)EXTI9_5_IRQn, 0x0F, 0x00);
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x210F             MOVS     R1,#+15
   \   00000040   0x2017             MOVS     R0,#+23
   \   00000042   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1183          	HAL_NVIC_EnableIRQ((IRQn_Type)EXTI9_5_IRQn);
   \   00000046   0x2017             MOVS     R0,#+23
   \   00000048   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1184          	/*-----------------------*/
   1185          
   1186          }
   \   0000004C   0xBD01             POP      {R0,PC}          ;; return
   1187          
   1188          
   1189          /* I2C2 init function */

   \                                 In section .text, align 2, keep-with-next
   1190          void MX_I2C2_Init(void)
   1191          {
   \                     MX_I2C2_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1192             __HAL_I2C_DISABLE(&hi2c2);
   \   00000002   0x....             LDR.N    R0,??DataTable16_65
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0840             LSRS     R0,R0,#+1
   \   0000000A   0x0040             LSLS     R0,R0,#+1
   \   0000000C   0x....             LDR.N    R1,??DataTable16_65
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x6008             STR      R0,[R1, #+0]
   1193            hi2c2.Instance = I2C2;
   \   00000012   0x....             LDR.N    R0,??DataTable16_43  ;; 0x40005800
   \   00000014   0x....             LDR.N    R1,??DataTable16_65
   \   00000016   0x6008             STR      R0,[R1, #+0]
   1194            hi2c2.Init.Timing =0x00A0689A ;//I2C_TIMING  0x00303D5D 0x00A0689A
   \   00000018   0x....             LDR.N    R0,??DataTable16_66  ;; 0xa0689a
   \   0000001A   0x....             LDR.N    R1,??DataTable16_65
   \   0000001C   0x6048             STR      R0,[R1, #+4]
   1195            hi2c2.Init.OwnAddress1 = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR.N    R1,??DataTable16_65
   \   00000022   0x6088             STR      R0,[R1, #+8]
   1196            hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable16_65
   \   00000028   0x60C8             STR      R0,[R1, #+12]
   1197            hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR.N    R1,??DataTable16_65
   \   0000002E   0x6108             STR      R0,[R1, #+16]
   1198            hi2c2.Init.OwnAddress2 = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x....             LDR.N    R1,??DataTable16_65
   \   00000034   0x6148             STR      R0,[R1, #+20]
   1199            hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x....             LDR.N    R1,??DataTable16_65
   \   0000003A   0x6188             STR      R0,[R1, #+24]
   1200            hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x....             LDR.N    R1,??DataTable16_65
   \   00000040   0x61C8             STR      R0,[R1, #+28]
   1201            hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable16_65
   \   00000046   0x6208             STR      R0,[R1, #+32]
   1202            HAL_I2C_Init(&hi2c2);
   \   00000048   0x....             LDR.N    R0,??DataTable16_65
   \   0000004A   0x.... 0x....      BL       HAL_I2C_Init
   1203          
   1204              /**Configure Analogue filter 
   1205              */
   1206            //HAL_I2CEx_AnalogFilter_Config(&hi2c2, I2C_ANALOGFILTER_ENABLE);
   1207          
   1208          }
   \   0000004E   0xBD01             POP      {R0,PC}          ;; return
   1209          

   \                                 In section .text, align 2, keep-with-next
   1210           void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
   1211          {
   \                     HAL_I2S_TxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1212          	 //sop1hc if(AudioState == AUDIO_STATE_PLAY)
   1213          	 //if (BufferCtlPlayOut.state == BUFFER_OFFSET_HALF)
   1214          	 {
   1215          	   //BufferCtlPlayOut.state = BUFFER_OFFSET_FULL;
   1216          	   XferCplt=1;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable16_67
   \   00000008   0x7008             STRB     R0,[R1, #+0]
   1217          	   Audio_Play_Out(); 
   \   0000000A   0x.... 0x....      BL       Audio_Play_Out
   1218          
   1219          	   if (cntStrt<100) cntStrt++;
   \   0000000E   0x....             LDR.N    R0,??DataTable16_7
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0x2864             CMP      R0,#+100
   \   00000014   0xDA04             BGE.N    ??HAL_I2S_TxCpltCallback_0
   \   00000016   0x....             LDR.N    R0,??DataTable16_7
   \   00000018   0x8800             LDRH     R0,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable16_7
   \   0000001E   0x8008             STRH     R0,[R1, #+0]
   1220          	 }
   1221          	 
   1222          
   1223          }
   \                     ??HAL_I2S_TxCpltCallback_0: (+1)
   \   00000020   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0xE000EF50         DC32     0xe000ef50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0xE000ED84         DC32     0xe000ed84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0xE000ED80         DC32     0xe000ed80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0xE000EF60         DC32     0xe000ef60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     FacMic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     Buffer3+0x708C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     Buffer3+0x6078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     flgDlyUpd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     Buffer3+0x303C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     Buffer3+0x4050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x........         DC32     Buffer3+0x1014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x........         DC32     Buffer3+0x2028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x........         DC32     Buffer3+0x5064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x........         DC32     Buffer1+0x708C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x........         DC32     Buffer1+0x6078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x........         DC32     Buffer1+0x303C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x........         DC32     Buffer1+0x4050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x........         DC32     Buffer1+0x1014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x........         DC32     Buffer1+0x2028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x........         DC32     Buffer1+0x5064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x........         DC32     Buffer2+0x708C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x........         DC32     Buffer2+0x6078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x........         DC32     Buffer2+0x303C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x........         DC32     Buffer2+0x4050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \   00000000   0x........         DC32     Buffer2+0x1014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     idxLatency78

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     idxLatency25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     idxLatency63

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x........         DC32     Buffer2+0x2028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x........         DC32     Buffer2+0x5064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x........         DC32     XferCplt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x........         DC32     idxSPI5DataBuf3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     I2S2_idxTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x........         DC32     Command_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0xE000ED14         DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     idxLatency14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x........         DC32     GPIO_INS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   0x........         DC32     stFrstFrmStore

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   0x........         DC32     cntStrt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   0x........         DC32     WaveRecord_flgIni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   0x........         DC32     I2S1_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   0x........         DC32     flg10ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   0x........         DC32     cntTime200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   0x........         DC32     EnergySound

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   0x........         DC32     pUARTBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \   00000000   0x........         DC32     ??flagNotMin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_17:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_18:
   \   00000000   0x........         DC32     pUARTBuf+0xF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_19:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_20:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_21:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_22:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_23:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_24:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_25:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_26:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_27:
   \   00000000   0x........         DC32     flgS2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_28:
   \   00000000   0x........         DC32     flgS2Flt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_29:
   \   00000000   0x........         DC32     flgS2Ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_30:
   \   00000000   0x........         DC32     flgS3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_31:
   \   00000000   0x........         DC32     flgS3Flt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_32:
   \   00000000   0x........         DC32     flgS3Ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_33:
   \   00000000   0x........         DC32     flgS4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_34:
   \   00000000   0x........         DC32     flgS4Flt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_35:
   \   00000000   0x........         DC32     flgS4Ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_36:
   \   00000000   0x........         DC32     stDir

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_37:
   \   00000000   0x........         DC32     huart3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_38:
   \   00000000   0x........         DC32     ??ticks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_39:
   \   00000000   0x00100001         DC32     0x100001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_40:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_41:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_42:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_43:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_44:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_45:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_46:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_47:
   \   00000000   0x........         DC32     cntRisingEXTI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_48:
   \   00000000   0x........         DC32     btnSW2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_49:
   \   00000000   0x........         DC32     btnSW1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_50:
   \   00000000   0x........         DC32     SS1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_51:
   \   00000000   0x........         DC32     `S1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_52:
   \   00000000   0x........         DC32     SS2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_53:
   \   00000000   0x........         DC32     `S2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_54:
   \   00000000   0x........         DC32     SS3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_55:
   \   00000000   0x........         DC32     `S3`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_56:
   \   00000000   0x........         DC32     SS4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_57:
   \   00000000   0x........         DC32     `S4`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_58:
   \   00000000   0x........         DC32     ISS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_59:
   \   00000000   0x........         DC32     IS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_60:
   \   00000000   0x........         DC32     idxLatency12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_61:
   \   00000000   0x........         DC32     idxLatency13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_62:
   \   00000000   0x........         DC32     FacMic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_63:
   \   00000000   0x........         DC32     bufferSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_64:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_65:
   \   00000000   0x........         DC32     hi2c2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_66:
   \   00000000   0x00A0689A         DC32     0xa0689a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_67:
   \   00000000   0x........         DC32     XferCplt

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x25 0x64          DC8 "%d:%d:%d:%d "
   \              0x3A 0x25    
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x3A 0x25    
   \              0x64 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x43 0x6C          DC8 "Close Mic 2\015\012"
   \              0x6F 0x73    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x32 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 5\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x35 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 4\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x34 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 1\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x31 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 3\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x33 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 6\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x36 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 7\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x37 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 8\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x38 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x2D 0x2D          DC8 "----------- \015\012"
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x20    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0
   1224          
   1225          /*****************************END OF FILE**************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ADD_U8
       8   Audio_Play_Out
         8   -> Audio_MAL_Play
     144   BSP_AUDIO_OUT_ClockConfig
       144   -> HAL_RCCEx_GetPeriphCLKConfig
       144   -> HAL_RCCEx_PeriphCLKConfig
       8   ButtonInit
         8   -> HAL_GPIO_Init
         8   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
       8   CPU_CACHE_Enable
         8   -> SCB_EnableDCache
         8   -> SCB_EnableICache
       8   DFT_Init
         8   -> arm_rfft_init_f32
       0   EXTI15_10_IRQHandler
       8   EXTI4_IRQHandler
         8   -> HAL_NVIC_DisableIRQ
       8   EXTI9_5_IRQHandler
         8   -> BSP_LED_Toggle
       8   FFT_Update
         8   -> CrssCor
         8   -> FactorUpd
         8   -> PDM2PCMSDO78
         8   -> SumDelay
      32   HAL_I2C_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       8   HAL_I2S_TxCpltCallback
         8   -> Audio_Play_Out
      32   HAL_UART_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       8   MX_I2C2_Init
         8   -> HAL_I2C_Init
       4   SCB_EnableDCache
       0   SCB_EnableICache
      24   SrvB_Debound
        24   -> ADD_U8
       8   SumDelay
     208   SystemClock_Config
       208   -> HAL_PWREx_EnableOverDrive
       208   -> HAL_RCCEx_PeriphCLKConfig
       208   -> HAL_RCC_ClockConfig
       208   -> HAL_RCC_OscConfig
       0   Toggle_Leds
       8   USART3_Init
         8   -> HAL_UART_Init
      24   main
        24   -> AUDIO_InitApplication
        24   -> Audio_MAL_Play
        24   -> BSP_AUDIO_OUT_ClockConfig
        24   -> BSP_LED_Init
        24   -> BSP_LED_Toggle
        24   -> BSP_SDRAM_Init
        24   -> ButtonInit
        24   -> CPU_CACHE_Enable
        24   -> DFT_Init
        24   -> FFT_Update
        24   -> HAL_GPIO_Init
        24   -> HAL_GPIO_WritePin
        24   -> HAL_Init
        24   -> HAL_NVIC_EnableIRQ
        24   -> HAL_NVIC_SetPriority
        24   -> HAL_UART_Transmit_IT
        24   -> MIC1TO6_Init
        24   -> MX_I2C2_Init
        24   -> STA321MP_Ini
        24   -> SrvB_Debound
        24   -> SystemClock_Config
        24   -> USART3_Init
        24   -> sprintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_10
       4  ??DataTable16_11
       4  ??DataTable16_12
       4  ??DataTable16_13
       4  ??DataTable16_14
       4  ??DataTable16_15
       4  ??DataTable16_16
       4  ??DataTable16_17
       4  ??DataTable16_18
       4  ??DataTable16_19
       4  ??DataTable16_2
       4  ??DataTable16_20
       4  ??DataTable16_21
       4  ??DataTable16_22
       4  ??DataTable16_23
       4  ??DataTable16_24
       4  ??DataTable16_25
       4  ??DataTable16_26
       4  ??DataTable16_27
       4  ??DataTable16_28
       4  ??DataTable16_29
       4  ??DataTable16_3
       4  ??DataTable16_30
       4  ??DataTable16_31
       4  ??DataTable16_32
       4  ??DataTable16_33
       4  ??DataTable16_34
       4  ??DataTable16_35
       4  ??DataTable16_36
       4  ??DataTable16_37
       4  ??DataTable16_38
       4  ??DataTable16_39
       4  ??DataTable16_4
       4  ??DataTable16_40
       4  ??DataTable16_41
       4  ??DataTable16_42
       4  ??DataTable16_43
       4  ??DataTable16_44
       4  ??DataTable16_45
       4  ??DataTable16_46
       4  ??DataTable16_47
       4  ??DataTable16_48
       4  ??DataTable16_49
       4  ??DataTable16_5
       4  ??DataTable16_50
       4  ??DataTable16_51
       4  ??DataTable16_52
       4  ??DataTable16_53
       4  ??DataTable16_54
       4  ??DataTable16_55
       4  ??DataTable16_56
       4  ??DataTable16_57
       4  ??DataTable16_58
       4  ??DataTable16_59
       4  ??DataTable16_6
       4  ??DataTable16_60
       4  ??DataTable16_61
       4  ??DataTable16_62
       4  ??DataTable16_63
       4  ??DataTable16_64
       4  ??DataTable16_65
       4  ??DataTable16_66
       4  ??DataTable16_67
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
      16  ?_0
      16  ?_1
      16  ?_2
      16  ?_3
      16  ?_4
      16  ?_5
      16  ?_6
      16  ?_7
      16  ?_8
      16  ?_9
      24  ADD_U8
     226  Audio_Play_Out
     112  BSP_AUDIO_OUT_ClockConfig
    4096  BufferTest
      78  ButtonInit
      12  CPU_CACHE_Enable
       1  Command_index
      98  DFT_Init
       2  DeltaBuf1
       2  DeltaBuf1Old
       2  EXTI15_10_IRQHandler
      62  EXTI4_IRQHandler
      84  EXTI9_5_IRQHandler
     348  FFT_Update
      24  FacMic
      20  GPIO_INS
     230  HAL_I2C_MspInit
      34  HAL_I2S_TxCpltCallback
     128  HAL_UART_MspInit
       2  I2S2_idxTmp
      24  IS
      20  ISS
      80  MX_I2C2_Init
       4  Main_CoefMor
      24  S1
      24  S2
      24  S3
      24  S4
     100  SCB_EnableDCache
      42  SCB_EnableICache
      20  SS1
      20  SS2
      20  SS3
      20  SS4
      50  SrvB_Debound
     266  SumDelay
     176  SystemClock_Config
      28  Toggle_Leds
      96  USART3_Init
       2  WaveRec_idxSens1
       2  WaveRec_idxSens2
       2  WaveRec_idxSens3
       2  WaveRec_idxSens4
       2  WaveRec_idxSens5
       2  WaveRec_idxSens6
    1024  aRxBuffer
       1  appli_state
       1  btnSW1
       1  btnSW2
    2048  bufferSum
       1  buffer_switch
       2  cntRisingEXTI
       2  cntTime200
       1  flagNotMin
       1  flg10ms
       1  flgDlyUpd
       1  flgS2
       1  flgS2Flt
       1  flgS2Ins
       1  flgS3
       1  flgS3Flt
       1  flgS3Ins
       1  flgS4
       1  flgS4Flt
       1  flgS4Ins
       1  flgSTAIni
     696  hUSBHost
     100  hspi4
     112  huart3
       1  idxDec
       2  idxLatency12
       2  idxLatency13
       2  idxLatency14
       2  idxLatency25
       2  idxLatency63
       2  idxLatency78
       2  idxSPI5DataBuf3
    1170  main
      20  pI2CData
      12  pI2CRx
     128  pUARTBuf
       1  stDir
       1  stFrstFrmStore
       4  ticks

 
 8 543 bytes in section .bss
    22 bytes in section .data
   160 bytes in section .rodata
 3 898 bytes in section .text
 
 3 824 bytes of CODE  memory (+ 74 bytes shared)
   160 bytes of CONST memory
 8 565 bytes of DATA  memory

Errors: none
Warnings: 1
