###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       05/Mar/2016  17:13:23
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Oh --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\main.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\main.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
      1          /* Includes ------------------------------------------------------------------*/
      2          #include "main.h"
      3          #include "DSP.h"
      4          //#include "waveplayer.h"
      5          #include "waverecorder.h"
      6          #include "stm32f7xx_hal_usart.h"
      7          #include "pdm_filter.h"
      8          #include "arm_math.h"
      9          #include <stdio.h>
     10          
     11          
     12          /* Private typedef -----------------------------------------------------------*/
     13          /* Private define ------------------------------------------------------------*/
     14          /* Private macro -------------------------------------------------------------*/
     15          
     16          
     17          /* EXTERN VARIABLES ----------------------------------------------------------*/
     18          //extern __IO AUDIO_IN_BufferTypeDef Buffer1, Buffer2, BufferCtlRecIn;
     19          //AUDIO_IN_BufferTypeDef Buffer3;
     20          
     21          
     22          
     23          
     24          extern Mic_Array_Data Buffer1,Buffer2,Buffer3;
     25          
     26          extern __IO uint8_t XferCplt;
     27          extern __IO AUDIO_IN_BufferTypeDef BufferCtlRecIn;
     28          extern DMA_HandleTypeDef     DmaHandle;
     29          
     30          extern SAI_HandleTypeDef         haudio_out_sai;
     31          extern uint8_t WaveRecord_flgIni;
     32          extern uint32_t EnergySound,EnergyError;
     33          extern I2C_HandleTypeDef hi2c2;
     34          extern __IO uint16_t cntStrt;
     35          extern __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
     36          extern __IO   uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
     37          extern USBD_AUDIO_ItfTypeDef  USBD_AUDIO_fops;
     38          /* GLOBAL VARIABLE -----------------------------------------------------------*/

   \                                 In section .bss, align 4
     39          USBH_HandleTypeDef hUSBHost;
   \                     hUSBHost:
   \   00000000                      DS8 696
     40          USBD_HandleTypeDef hUSBDDevice;

   \                                 In section .bss, align 1
     41          AUDIO_ApplicationTypeDef appli_state = APPLICATION_IDLE;//APPLICATION_IDLE
   \                     appli_state:
   \   00000000                      DS8 1
     42          

   \                                 In section .bss, align 4
     43          UART_HandleTypeDef huart3;
   \                     huart3:
   \   00000000                      DS8 112

   \                                 In section .bss, align 4
     44          SPI_HandleTypeDef hspi4;
   \                     hspi4:
   \   00000000                      DS8 100
     45          GPIO_InitTypeDef GPIO_INS;
     46          Mic_Array_Coef_f FacMic;
     47          	  
     48          uint8_t  pI2CData[20]= {0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190};

   \                                 In section .bss, align 4
     49          uint8_t  pI2CRx[10];
   \                     pI2CRx:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     50          uint16_t BufferTest[2*AUDIO_OUT_BUFFER_SIZE];
   \                     BufferTest:
   \   00000000                      DS8 4096

   \                                 In section .bss, align 4
     51          uint16_t bufferSum[AUDIO_OUT_BUFFER_SIZE];
   \                     bufferSum:
   \   00000000                      DS8 2048
     52          uint32_t CrssCorVal78,CrssCorVal14,CrssCorVal25,CrssCorVal63;
     53          
     54          __IO uint16_t  WaveRec_idxSens4,WaveRec_idxSens3,I2S2_idxTmp;
     55          __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     56          __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     57          __IO uint16_t  idxSPI5DataBuf3;
     58          __IO uint16_t  cntRisingEXTI;
     59          __IO uint8_t   btnSW1,btnSW2;
     60          __IO uint8_t   flgDlyUpd; 
     61          __IO uint8_t   cntBtnPress;
     62          
     63          extern __IO uint16_t  WaveRec_idxTest;
     64          extern __IO uint8_t  swtBufUSBOut;
     65          
     66          /* Buffer used for reception */
     67          uint8_t aRxBuffer[1024];
     68          uint8_t idxDec,stFrstFrmStore;
     69          int16_t DeltaBuf1,DeltaBuf1Old;
     70          int16_t idxLatency13,idxLatency12,idxLatency14,idxLatency25,idxLatency63,idxLatency78;
   \                     idxLatency13:
   \   00000800                      DS8 2
   \                     idxLatency12:
   \   00000802                      DS8 2

   \                                 In section .bss, align 2
   \                     cntRisingEXTI:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     aRxBuffer:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 1
   \                     idxDec:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     DeltaBuf1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     DeltaBuf1Old:
   \   00000000                      DS8 2
     71          
     72          __IO char flg10ms;

   \                                 In section .bss, align 1
     73          uint8_t flgSTAIni;
   \                     flgSTAIni:
   \   00000000                      DS8 1
     74          uint16_t cntTime200;
     75          
     76          uint8_t buffer_switch = 1;
     77          uint8_t Command_index=1;
     78          
     79          float fir256Coff[DSP_NUMCOFFHANNIING];
     80          //int16_t PreCalcBuff[129][256];
     81          
     82          
     83          #if MAIN_CRSCORR
     84          arm_rfft_instance_q15 RealFFT_Ins, RealIFFT_Ins;
     85          #endif
     86          

   \                                 In section .bss, align 4
     87          arm_cfft_radix4_instance_f32 SS1,SS2,SS3,SS4,ISS; 
   \                     SS1:
   \   00000000                      DS8 20
   \                     SS2:
   \   00000014                      DS8 20
   \                     SS3:
   \   00000028                      DS8 20
   \                     SS4:
   \   0000003C                      DS8 20
   \                     ISS:
   \   00000050                      DS8 20
     88          arm_rfft_instance_f32 S1,S2,S3,S4,IS;
   \                     `S1`:
   \   00000064                      DS8 24
   \                     `S2`:
   \   0000007C                      DS8 24
   \                     `S3`:
   \   00000094                      DS8 24
   \                     `S4`:
   \   000000AC                      DS8 24
   \                     IS:
   \   000000C4                      DS8 24
     89          
     90          //arm_rfft_fast_instance_f32 S1,S2,S3,S4,IS;
     91          
     92          
     93          #if (DEBUG)
     94          uint8_t  pUARTBuf[128];

   \                                 In section .bss, align 4
     95          uint32_t Main_CoefMor;
   \                     Main_CoefMor:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     flgDlyUpd:
   \   00000000   0x00               DC8 0
   \                     stFrstFrmStore:
   \   00000001   0x00               DC8 0
   \                     flg10ms:
   \   00000002   0x00               DC8 0
   \                     buffer_switch:
   \   00000003   0x01               DC8 1
     96          uint8_t stDir,flgS2,flgS3,flgS4,flgS2Flt,flgS3Flt,flgS4Flt;
   \                     stDir:
   \   00000004   0x00               DC8 0
   \                     flgS2:
   \   00000005   0x00               DC8 0
   \                     flgS3:
   \   00000006   0x00               DC8 0
   \                     flgS4:
   \   00000007   0x00               DC8 0
   \                     flgS2Flt:
   \   00000008   0x00               DC8 0
   \                     flgS3Flt:
   \   00000009   0x00               DC8 0
   \                     flgS4Flt:
   \   0000000A   0x00               DC8 0
     97          uint8_t flgS2Ins,flgS3Ins,flgS4Ins;
   \                     flgS2Ins:
   \   0000000B   0x00               DC8 0
   \                     flgS3Ins:
   \   0000000C   0x00               DC8 0
   \                     flgS4Ins:
   \   0000000D   0x00               DC8 0
   \                     WaveRec_idxSens4:
   \   0000000E   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens3:
   \   00000010   0x00 0x00          DC8 0, 0
   \                     I2S2_idxTmp:
   \   00000012   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens1:
   \   00000014   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens2:
   \   00000016   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens5:
   \   00000018   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens6:
   \   0000001A   0x00 0x00          DC8 0, 0
   \                     idxSPI5DataBuf3:
   \   0000001C   0x00 0x00          DC8 0, 0
   \                     idxLatency14:
   \   0000001E   0x00 0x00          DC8 0, 0
   \                     idxLatency25:
   \   00000020   0x00 0x00          DC8 0, 0
   \                     idxLatency63:
   \   00000022   0x00 0x00          DC8 0, 0
   \                     idxLatency78:
   \   00000024   0x00 0x00          DC8 0, 0
   \                     cntTime200:
   \   00000026   0x00 0x00          DC8 0, 0
   \                     GPIO_INS:
   \   00000028   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     FacMic:
   \   0000003C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     CrssCorVal78:
   \   00000054   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     CrssCorVal14:
   \   00000058   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     CrssCorVal25:
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     CrssCorVal63:
   \   00000060   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     hUSBDDevice:
   \   00000064   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000074   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000084   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000094   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000104   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000114   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000124   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000134   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000144   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000154   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000164   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000174   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000184   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000194   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000204   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000214   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000224   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000234   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000244   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000254   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000264   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000274   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     fir256Coff:
   \   00000288   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000298   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000308   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000318   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000328   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000338   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000348   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000358   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000368   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000378   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000388   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000398   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000408   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000418   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000428   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000438   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000448   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000458   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000468   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000478   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000488   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000498   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000508   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000518   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000528   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000538   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000548   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000558   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000568   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000578   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000588   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000598   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000608   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000618   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000628   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000638   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000648   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000658   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000668   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000678   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000688   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000698   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000708   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000718   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000728   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000738   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000748   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000758   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000768   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000778   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000788   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000798   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000808   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000818   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000828   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000838   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000848   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000858   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000868   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000878   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000888   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000898   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000908   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000918   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000928   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000938   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000948   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000958   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000968   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000978   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000988   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000998   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A08   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A18   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A28   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A38   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A48   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A58   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A68   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A78   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     pUARTBuf:
   \   00000A88   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A98   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000AA8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000AB8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000AC8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000AD8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000AE8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000AF8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     pI2CData:
   \   00000000   0x00 0x0A          DC8 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150
   \              0x14 0x1E    
   \              0x28 0x32    
   \              0x3C 0x46    
   \              0x50 0x5A    
   \              0x64 0x6E    
   \              0x78 0x82    
   \              0x8C 0x96    
   \   00000010   0xA0 0xAA          DC8 160, 170, 180, 190
   \              0xB4 0xBE    

   \                                 In section .data, align 1
   \                     btnSW1:
   \   00000000   0x00               DC8 0
   \                     btnSW2:
   \   00000001   0x00               DC8 0
   \                     cntBtnPress:
   \   00000002   0x00               DC8 0
   \                     Command_index:
   \   00000003   0x01               DC8 1
     98          #endif
     99          
    100          #if USB_STREAMING
    101          extern __IO uint16_t idxFrmPDMMic8;
    102          #endif
    103          
    104          
    105          /* Private function prototypes -----------------------------------------------*/
    106          static void SystemClock_Config(void);
    107          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id);
    108          static void CPU_CACHE_Enable(void);
    109          
    110          
    111          
    112          
    113          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c);
    114          void MX_I2C2_Init(void);
    115          void USART3_Init(void);
    116          void ReadSTASeq(uint8_t Addr, uint8_t *pBufOut,uint8_t Len );
    117          void WriteSTAByte(uint8_t Addr, uint8_t *pBufIn, uint8_t len);
    118          void SPI5_CallBack(SPI_HandleTypeDef *hspi);
    119          uint8_t StartPlay(void);
    120          
    121          
    122          /*--------------INLINE FUNCTION-----------------------------------------------*/
    123          

   \                                 In section .text, align 2, keep-with-next
    124          inline static void FFT_Update(void)
    125          {
   \                     FFT_Update: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable23
    126          
    127                PDM2PCMSDO78();      
   \   00000006   0x.... 0x....      BL       PDM2PCMSDO78
    128                /* Hafl buffer is filled in by I2S data stream in */
    129                if((flgDlyUpd==0))
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD14D             BNE.N    ??FFT_Update_0
    130                {
    131                      
    132                      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15); 
    133                      FactorUpd(&FacMic); 
   \   00000010   0xF104 0x003C      ADD      R0,R4,#+60
   \   00000014   0x.... 0x....      BL       FactorUpd
    134                      //STM_EVAL_LEDOn(LED3);
    135                      flgDlyUpd = 1; 
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x7020             STRB     R0,[R4, #+0]
    136          /*-------------------------------------------------------------------------------------------------------------
    137          			  
    138          	Sequence  Record Data                     Processing Data                 Player Data
    139          			  
    140          	1-------  Buffer1                         Buffer2                         Buffer3
    141          			  
    142          	2-------  Buffer3                         Buffer1                         Buffer2		  
    143          			  
    144          	3-------  Buffer2                         Buffer3                         Buffer1 
    145           ---------------------------------------------------------------------------------------------------------------*/
    146                      /* Processing Data */
    147          			switch (buffer_switch)
   \   0000001C   0x78E0             LDRB     R0,[R4, #+3]
   \   0000001E   0xB118             CBZ.N    R0,??FFT_Update_1
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD007             BEQ.N    ??FFT_Update_2
   \   00000024   0xD303             BCC.N    ??FFT_Update_3
   \   00000026   0xE03D             B.N      ??FFT_Update_4
    148          			{             
    149          			    case BUF1_PLAY:
    150          #if MAIN_CRSCORR
    151                                      for (uint16_t i=0; i<(_MAX_SS/_MAX_SS);i++)
    152                                      {
    153                                          //uint16_t i=0;
    154                                              arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3[i*128],    (q15_t *)&bufferFFT[i*256]);
    155                                              arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3_1[i*128],   (q15_t *)&bufferFFT_1[i*256]);
    156                                      
    157                                              arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],2*128);
    158                                      
    159                                              //for (uint16_t j=0; j<256;j++)
    160                                              //{
    161                                              //	  bufferFFTSum[i*256+j]<<=6;
    162                                              //}
    163                                              
    164                                              arm_rfft_q15(&RealIFFT_Ins,    (q15_t *)&bufferFFTSum[i*256],    (q15_t *)&bufferSum[i*128]);
    165                                      }
    166          #elif MAIN_FFT
    167                              /* Summing in Buffer3 */
    168                              Delay_Sum_FFT(&Buffer3,&FacMic,(int16_t *)bufferSum, 512);
    169                              //FFT_SUM((int16_t *)buffer3, (int16_t * )buffer3_1,fbuffer, 1024);				 	   
    170          #else
    171                              idxLatency78 = CrssCor(Buffer3.bufMIC7+AUDIO_OUT_BUFFER_SIZE/4, Buffer3.bufMIC8+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal78);
   \                     ??FFT_Update_1: (+1)
   \   00000028   0x.... 0x....      LDR.W    R5,??DataTable23_1
   \   0000002C   0xE004             B.N      ??FFT_Update_5
    172                              idxLatency14 = CrssCor(Buffer3.bufMIC1+AUDIO_OUT_BUFFER_SIZE/4, Buffer3.bufMIC4+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal14);
    173                              idxLatency25 = CrssCor(Buffer3.bufMIC5+AUDIO_OUT_BUFFER_SIZE/4, Buffer3.bufMIC2+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal25);
    174                              idxLatency63 = CrssCor(Buffer3.bufMIC6+AUDIO_OUT_BUFFER_SIZE/4, Buffer3.bufMIC3+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal63);
    175                             
    176          
    177                              SumDelay(&Buffer3);
    178          #endif
    179          					
    180          					break;
    181          				case BUF2_PLAY:
    182          
    183          #if MAIN_CRSCORR
    184                               for (uint16_t i=0; i<(_MAX_SS/128);i++)
    185                               { 
    186                                  //uint16_t i=0;
    187                                  arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1[i*128],(q15_t *)&bufferFFT[i*256]);
    188                                  arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    189          
    190                                  arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],
    191                                                  2*128);
    192          
    193                                  //for (uint16_t j=0; j<256;j++)
    194                                  //{
    195                                  //	   bufferFFTSum[i*256+j]<<=6;
    196                                  //}
    197          
    198          
    199                                  arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    200                               }
    201          #elif MAIN_FFT
    202                              /* Summing in Buffer1 */	 
    203                              Delay_Sum_FFT(&Buffer1, &FacMic,(int16_t * )bufferSum,512);
    204                              //FFT_SUM((int16_t *)buffer1, (int16_t * )buffer1_1,fbuffer, 1024);
    205          
    206          #else
    207                          
    208                            //idxLatency13 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    209                            //idxLatency12 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    210          		
    211                            idxLatency78 = CrssCor(Buffer1.bufMIC7+AUDIO_OUT_BUFFER_SIZE/4, Buffer1.bufMIC8+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal78);	
   \                     ??FFT_Update_3: (+1)
   \   0000002E   0x.... 0x....      LDR.W    R5,??DataTable23_2
   \   00000032   0xE001             B.N      ??FFT_Update_5
    212                            idxLatency14 = CrssCor(Buffer1.bufMIC1+AUDIO_OUT_BUFFER_SIZE/4, Buffer1.bufMIC4+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal14);
    213                            idxLatency25 = CrssCor(Buffer1.bufMIC5+AUDIO_OUT_BUFFER_SIZE/4, Buffer1.bufMIC2+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal25);
    214                            idxLatency63 = CrssCor(Buffer1.bufMIC6+AUDIO_OUT_BUFFER_SIZE/4, Buffer1.bufMIC3+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal63);
    215          
    216          
    217          
    218                            SumDelay(&Buffer1);
    219          #endif
    220          	    break;
    221          					
    222          	   case BUF3_PLAY:
    223          #if MAIN_CRSCORR
    224                    for (uint16_t i=0; i<(_MAX_SS/128);i++)
    225                    {
    226                        arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2[i*128],(q15_t *)&bufferFFT[i*256]);
    227                        arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    228          
    229                        arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],	(q15_t *)&bufferFFTSum[i*256],
    230                                           2*128);
    231          
    232                        //for (uint16_t j=0; j<256;j++)
    233                        //{
    234                        //   bufferFFTSum[i*256+j]<<=6;
    235                        //}
    236          
    237          
    238                        arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    239                    }
    240          #elif MAIN_FFT
    241                  /* Summing in Buffer2 */
    242                  Delay_Sum_FFT(&Buffer2,&FacMic, (int16_t * )bufferSum, 512);
    243                  //FFT_SUM((int16_t *)buffer2, (int16_t * )buffer2_1,fbuffer, 1024);				
    244          #else
    245          
    246                    //idxLatency13 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    247                    //idxLatency12 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    248          
    249                    idxLatency78 = CrssCor(Buffer2.bufMIC7+AUDIO_OUT_BUFFER_SIZE/4, Buffer2.bufMIC8+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal78);
   \                     ??FFT_Update_2: (+1)
   \   00000034   0x.... 0x....      LDR.W    R5,??DataTable23_3
   \                     ??FFT_Update_5: (+1)
   \   00000038   0xF505 0x41E4      ADD      R1,R5,#+29184
   \   0000003C   0xF505 0x40C4      ADD      R0,R5,#+25088
   \   00000040   0xF104 0x0354      ADD      R3,R4,#+84
   \   00000044   0xF44F 0x7200      MOV      R2,#+512
   \   00000048   0x318C             ADDS     R1,R1,#+140
   \   0000004A   0x3078             ADDS     R0,R0,#+120
   \   0000004C   0x.... 0x....      BL       CrssCor
   \   00000050   0x84A0             STRH     R0,[R4, #+36]
    250                    idxLatency14 = CrssCor(Buffer2.bufMIC1+AUDIO_OUT_BUFFER_SIZE/4, Buffer2.bufMIC4+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal14);
   \   00000052   0xF505 0x5148      ADD      R1,R5,#+12800
   \   00000056   0xF104 0x0358      ADD      R3,R4,#+88
   \   0000005A   0xF44F 0x7200      MOV      R2,#+512
   \   0000005E   0x313C             ADDS     R1,R1,#+60
   \   00000060   0xF505 0x7000      ADD      R0,R5,#+512
   \   00000064   0x.... 0x....      BL       CrssCor
   \   00000068   0x83E0             STRH     R0,[R4, #+30]
    251                    idxLatency25 = CrssCor(Buffer2.bufMIC5+AUDIO_OUT_BUFFER_SIZE/4, Buffer2.bufMIC2+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal25);
   \   0000006A   0xF505 0x5190      ADD      R1,R5,#+4608
   \   0000006E   0xF505 0x4084      ADD      R0,R5,#+16896
   \   00000072   0xF104 0x035C      ADD      R3,R4,#+92
   \   00000076   0xF44F 0x7200      MOV      R2,#+512
   \   0000007A   0x3114             ADDS     R1,R1,#+20
   \   0000007C   0x3050             ADDS     R0,R0,#+80
   \   0000007E   0x.... 0x....      BL       CrssCor
   \   00000082   0x8420             STRH     R0,[R4, #+32]
    252                    idxLatency63 = CrssCor(Buffer2.bufMIC6+AUDIO_OUT_BUFFER_SIZE/4, Buffer2.bufMIC3+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal63);
   \   00000084   0xF505 0x5108      ADD      R1,R5,#+8704
   \   00000088   0xF505 0x40A4      ADD      R0,R5,#+20992
   \   0000008C   0xF104 0x0360      ADD      R3,R4,#+96
   \   00000090   0xF44F 0x7200      MOV      R2,#+512
   \   00000094   0x3128             ADDS     R1,R1,#+40
   \   00000096   0x3064             ADDS     R0,R0,#+100
   \   00000098   0x.... 0x....      BL       CrssCor
   \   0000009C   0x8460             STRH     R0,[R4, #+34]
    253          
    254                    SumDelay(&Buffer2);
   \   0000009E   0x4628             MOV      R0,R5
   \   000000A0   0x.... 0x....      BL       SumDelay
    255          #endif
    256          					break;
    257          					
    258          				default:
    259          					break;
    260                         
    261          			}
    262          			AudioPlayerUpd();
   \                     ??FFT_Update_4: (+1)
   \   000000A4   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   000000A8   0x.... 0x....      B.W      AudioPlayerUpd
    263          	       //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
    264          	  }
    265          	  
    266          
    267          }
   \                     ??FFT_Update_0: (+1)
   \   000000AC   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    268          
    269          
    270          inline static void Audio_Play_Out(void)
    271          {
    272          
    273          /*-------------------------------------------------------------------------------------------------------------
    274          			  
    275          	Sequence  Record Data                     Processing Data                 Player Data
    276          			  
    277          	1-------  Buffer1                         Buffer2                          Buffer3
    278          			  
    279          	2-------  Buffer3                         Buffer1                           Buffer2		  
    280          			  
    281          	3-------  Buffer2                         Buffer3                           Buffer1 
    282           ---------------------------------------------------------------------------------------------------------------*/
    283              switch (buffer_switch)
    284              {
    285                case BUF1_PLAY:
    286                  /* Play data from buffer1 */
    287          	    Audio_MAL_Play((uint32_t)&Buffer3.bufMIC3[idxFrmPDMMic8*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000)] , 2*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
    288          
    289                  break;
    290                case BUF2_PLAY:
    291                  /* Play data from buffer2 */
    292          	    Audio_MAL_Play((uint32_t)&Buffer1.bufMIC3[idxFrmPDMMic8*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000)], 2*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
    293                  
    294                  break;
    295                case BUF3_PLAY:
    296                  /* Play data from buffer1 */
    297                  Audio_MAL_Play((uint32_t)&Buffer2.bufMIC3[idxFrmPDMMic8*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000)] ,2*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
    298          
    299                  break;
    300                default:
    301                  break;
    302              }
    303              
    304          #if USB_STREAMING
    305              AudioUSBSend(idxFrmPDMMic8);
    306          #endif
    307          
    308          	/* if player is finished for curent buffer                                  */ 
    309          	if (++idxFrmPDMMic8 == AUDIO_OUT_BUFFER_SIZE/(AUDIO_SAMPLING_FREQUENCY/1000))
    310          	{
    311          	       RESET_IDX
    312          		   //MIC7Rec();
    313          		   //MIC8Rec();
    314                     WaveRec_idxTest=0;
    315                     idxFrmPDMMic8=0;
    316                      switch (buffer_switch)
    317                      {
    318                          case BUF1_PLAY:
    319                                /* set flag for switch buffer */		  
    320                            buffer_switch = BUF3_PLAY;
    321                            break;
    322                          case BUF2_PLAY:
    323                            /* set flag for switch buffer */
    324                            buffer_switch = BUF1_PLAY;        
    325                            break;
    326                          case BUF3_PLAY:
    327                            /* set flag for switch buffer */		  
    328                            buffer_switch = BUF2_PLAY;
    329                            break;
    330                          default:
    331                            break;
    332                      }
    333                    if (cntStrt<100) cntStrt++;
    334          
    335          		 /* Tongle status to switch the USB audio buffer out */
    336          
    337          	}			   
    338          }
    339          
    340          
    341          /* Private functions ---------------------------------------------------------*/
    342          
    343          /**
    344            * @brief  Main program
    345            * @param  None
    346            * @retval None
    347            */

   \                                 In section .text, align 2, keep-with-next
    348          int main(void)
    349          {
   \                     main: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0A1             SUB      SP,SP,#+132
    350            /* Enable the CPU Cache */
    351            CPU_CACHE_Enable();
   \   00000006   0xF3BF 0x8F4F      DSB      
   \   0000000A   0xF3BF 0x8F6F      ISB      
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable23_4  ;; 0xe000ef50
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x6008             STR      R0,[R1, #+0]
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable23_5  ;; 0xe000ed14
   \   0000001A   0x6802             LDR      R2,[R0, #+0]
   \   0000001C   0xF442 0x3200      ORR      R2,R2,#0x20000
   \   00000020   0x6002             STR      R2,[R0, #+0]
   \   00000022   0xF3BF 0x8F4F      DSB      
   \   00000026   0xF3BF 0x8F6F      ISB      
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x6702             STR      R2,[R0, #+112]
   \   0000002E   0xF3BF 0x8F4F      DSB      
   \   00000032   0x6EC2             LDR      R2,[R0, #+108]
   \   00000034   0xF3C2 0x334E      UBFX     R3,R2,#+13,#+15
   \                     ??main_0: (+1)
   \   00000038   0xF643 0x75E0      MOVW     R5,#+16352
   \   0000003C   0xF3C2 0x04C9      UBFX     R4,R2,#+3,#+10
   \   00000040   0xEA05 0x1543      AND      R5,R5,R3, LSL #+5
   \                     ??main_1: (+1)
   \   00000044   0xEA45 0x7684      ORR      R6,R5,R4, LSL #+30
   \   00000048   0x610E             STR      R6,[R1, #+16]
   \   0000004A   0x4626             MOV      R6,R4
   \   0000004C   0x1E74             SUBS     R4,R6,#+1
   \   0000004E   0x2E00             CMP      R6,#+0
   \   00000050   0xD1F8             BNE.N    ??main_1
   \   00000052   0x461C             MOV      R4,R3
   \   00000054   0x1E63             SUBS     R3,R4,#+1
   \   00000056   0x2C00             CMP      R4,#+0
   \   00000058   0xD1EE             BNE.N    ??main_0
   \   0000005A   0xF3BF 0x8F4F      DSB      
   \   0000005E   0x6801             LDR      R1,[R0, #+0]
   \   00000060   0xF441 0x3180      ORR      R1,R1,#0x10000
   \   00000064   0x6001             STR      R1,[R0, #+0]
   \   00000066   0xF3BF 0x8F4F      DSB      
   \   0000006A   0xF3BF 0x8F6F      ISB      
    352            
    353            /* STM32F7xx HAL library initialization:
    354                 - Configure the Flash ART accelerator on ITCM interface
    355                 - Configure the Systick to generate an interrupt each 1 msec
    356                 - Set NVIC Group Priority to 4
    357                 - Global MSP (MCU Support Package) initialization
    358               */   
    359            HAL_Init();
   \   0000006E   0x.... 0x....      BL       HAL_Init
    360            
    361            /* Configure the system clock to 216 MHz */
    362            //Test_SystemClock_Config(); 
    363            SystemClock_Config();
   \   00000072   0x.... 0x....      BL       SystemClock_Config
    364            BSP_AUDIO_OUT_ClockConfig(AUDIO_FREQ, NULL);
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x.... 0x....      LDR.W    R5,??DataTable23_6  ;; 0x40023830
   \   0000007C   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
   \   00000080   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000084   0x.... 0x....      LDR.W    R4,??DataTable23
   \   00000088   0x9000             STR      R0,[SP, #+0]
   \   0000008A   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000008E   0x9010             STR      R0,[SP, #+64]
   \   00000090   0xF44F 0x70AC      MOV      R0,#+344
   \   00000094   0x9001             STR      R0,[SP, #+4]
   \   00000096   0x2007             MOVS     R0,#+7
   \   00000098   0x9003             STR      R0,[SP, #+12]
   \   0000009A   0x2001             MOVS     R0,#+1
   \   0000009C   0x9009             STR      R0,[SP, #+36]
   \   0000009E   0x4668             MOV      R0,SP
   \   000000A0   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    365            
    366            /* Initialize the SDRAM */
    367            BSP_SDRAM_Init();
   \   000000A4   0x.... 0x....      BL       BSP_SDRAM_Init
    368          
    369            BSP_LED_Init(LED1);
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x.... 0x....      LDR.W    R6,??DataTable23_7
   \   000000AE   0x.... 0x....      BL       BSP_LED_Init
    370            BSP_LED_Init(LED2);
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0xF604 0x2B97      ADDW     R11,R4,#+2711
   \   000000B8   0x.... 0x....      BL       BSP_LED_Init
    371          
    372            /* Button Initialization */
    373            ButtonInit();
   \   000000BC   0x.... 0x....      BL       ButtonInit
    374            //BSP_PB_Init(BUTTON_KEY,BUTTON_MODE_EXTI);
    375          
    376            
    377            /* Init TS module */
    378            //BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
    379             DFT_Init();	
   \   000000C0   0x.... 0x....      BL       DFT_Init
    380          
    381              /* ---------PA4: LCCKO-------------*/
    382              __GPIOA_CLK_ENABLE();
   \   000000C4   0x6828             LDR      R0,[R5, #+0]
    383              GPIO_INS.Pin = GPIO_PIN_4;
    384              GPIO_INS.Mode =GPIO_MODE_IT_RISING;
    385              GPIO_INS.Pull =GPIO_NOPULL;
    386              GPIO_INS.Speed =GPIO_SPEED_HIGH;
    387              HAL_GPIO_Init(GPIOA,&GPIO_INS);
   \   000000C6   0xF104 0x0128      ADD      R1,R4,#+40
   \   000000CA   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000000CE   0x6028             STR      R0,[R5, #+0]
   \   000000D0   0x6828             LDR      R0,[R5, #+0]
   \   000000D2   0xF000 0x0001      AND      R0,R0,#0x1
   \   000000D6   0x9000             STR      R0,[SP, #+0]
   \   000000D8   0x9800             LDR      R0,[SP, #+0]
   \   000000DA   0x2010             MOVS     R0,#+16
   \   000000DC   0x62A0             STR      R0,[R4, #+40]
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable23_8  ;; 0x10110000
   \   000000E2   0x62E0             STR      R0,[R4, #+44]
   \   000000E4   0x2000             MOVS     R0,#+0
   \   000000E6   0x6320             STR      R0,[R4, #+48]
   \   000000E8   0x2003             MOVS     R0,#+3
   \   000000EA   0x6360             STR      R0,[R4, #+52]
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable23_9  ;; 0x40020000
   \   000000F0   0x.... 0x....      BL       HAL_GPIO_Init
    388          
    389              /* Enable and set Button EXTI Interrupt to the lowest priority */
    390              HAL_NVIC_SetPriority((IRQn_Type)EXTI4_IRQn, INTERRUPT_PRI_EXT_LRCK, 0);
   \   000000F4   0x2200             MOVS     R2,#+0
   \   000000F6   0x2106             MOVS     R1,#+6
   \   000000F8   0x200A             MOVS     R0,#+10
   \   000000FA   0x.... 0x....      BL       HAL_NVIC_SetPriority
    391              HAL_NVIC_EnableIRQ((IRQn_Type)EXTI4_IRQn);
   \   000000FE   0x200A             MOVS     R0,#+10
   \   00000100   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    392              /*-----------------------*/
    393          
    394              /*---------PE3: POWER DOWN-----------------*/
    395              __GPIOE_CLK_ENABLE();
   \   00000104   0x6828             LDR      R0,[R5, #+0]
    396              GPIO_INS.Pin = GPIO_PIN_3;
    397              GPIO_INS.Mode = GPIO_MODE_OUTPUT_PP;
    398              GPIO_INS.Pull = GPIO_PULLUP;
    399              GPIO_INS.Speed = GPIO_SPEED_HIGH;
    400          
    401              HAL_GPIO_Init(GPIOE, &GPIO_INS);
   \   00000106   0xF104 0x0128      ADD      R1,R4,#+40
   \   0000010A   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000010E   0x6028             STR      R0,[R5, #+0]
   \   00000110   0x6828             LDR      R0,[R5, #+0]
   \   00000112   0x.... 0x....      LDR.W    R5,??DataTable23_10  ;; 0x40021000
   \   00000116   0xF000 0x0010      AND      R0,R0,#0x10
   \   0000011A   0x9000             STR      R0,[SP, #+0]
   \   0000011C   0x9800             LDR      R0,[SP, #+0]
   \   0000011E   0x2008             MOVS     R0,#+8
   \   00000120   0x62A0             STR      R0,[R4, #+40]
   \   00000122   0x2001             MOVS     R0,#+1
   \   00000124   0x62E0             STR      R0,[R4, #+44]
   \   00000126   0x6320             STR      R0,[R4, #+48]
   \   00000128   0x2003             MOVS     R0,#+3
   \   0000012A   0x6360             STR      R0,[R4, #+52]
   \   0000012C   0x4628             MOV      R0,R5
   \   0000012E   0x.... 0x....      BL       HAL_GPIO_Init
    402            
    403              HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
   \   00000132   0x2200             MOVS     R2,#+0
   \   00000134   0x2108             MOVS     R1,#+8
   \   00000136   0x4628             MOV      R0,R5
   \   00000138   0xAD04             ADD      R5,SP,#+16
   \   0000013A   0x.... 0x....      BL       HAL_GPIO_WritePin
    404          
    405              /*----------------------------------------*/
    406          
    407          #if (DEBUG)  
    408              /* UART for debug */
    409              USART3_Init();
   \   0000013E   0x.... 0x....      BL       USART3_Init
    410          #endif
    411          
    412          					  
    413          
    414              /*----------------------------------------*/
    415              MX_I2C2_Init(); //for STA321MP
   \   00000142   0x.... 0x....      BL       MX_I2C2_Init
    416              STA321MP_Ini();
   \   00000146   0x.... 0x....      BL       STA321MP_Ini
    417              BSP_LED_Toggle(LED1);
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0x.... 0x....      BL       BSP_LED_Toggle
    418              /* Init Audio Application */
    419          #ifdef CS43L22_PLAY
    420              AUDIO_InitApplication();
    421          #endif
    422              AUDIO_InitApplication();
   \   00000150   0x.... 0x....      BL       AUDIO_InitApplication
    423              BSP_LED_Toggle(LED2);
   \   00000154   0x2001             MOVS     R0,#+1
   \   00000156   0x.... 0x....      BL       BSP_LED_Toggle
    424          
    425              buffer_switch = BUF3_PLAY;		 /* record data to buffer1 */
   \   0000015A   0x2002             MOVS     R0,#+2
   \   0000015C   0x70E0             STRB     R0,[R4, #+3]
    426              MIC1TO6_Init();
   \   0000015E   0x.... 0x....      BL       MIC1TO6_Init
    427          
    428          #if (USB_STREAMING)	
    429          	/* Initialize USB descriptor basing on channels number and sampling frequency */
    430          	USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, 2*AUDIO_SAMPLING_FREQUENCY, AUDIO_CHANNELS);
   \   00000162   0x2202             MOVS     R2,#+2
   \   00000164   0xF44F 0x41FA      MOV      R1,#+32000
   \   00000168   0xF104 0x0064      ADD      R0,R4,#+100
   \   0000016C   0x.... 0x....      BL       USBD_AUDIO_Init_Microphone_Descriptor
    431          	/* Init Device Library */
    432          	USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
   \   00000170   0x2200             MOVS     R2,#+0
   \   00000172   0x.... 0x....      LDR.W    R1,??DataTable23_11
   \   00000176   0xF104 0x0064      ADD      R0,R4,#+100
   \   0000017A   0x.... 0x....      BL       USBD_Init
    433          	/* Add Supported Class */
    434          	USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
   \   0000017E   0x.... 0x....      LDR.W    R1,??DataTable23_12
   \   00000182   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000186   0x.... 0x....      BL       USBD_RegisterClass
    435          	/* Add Interface callbacks for AUDIO Class */  
    436          	USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
   \   0000018A   0x.... 0x....      LDR.W    R1,??DataTable23_13
   \   0000018E   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000192   0x.... 0x....      BL       USBD_AUDIO_RegisterInterface
    437          	/* Start Device Process */
    438          	USBD_Start(&hUSBDDevice);
   \   00000196   0xF104 0x0064      ADD      R0,R4,#+100
   \   0000019A   0x.... 0x....      BL       USBD_Start
    439          
    440          	/* Init Host Library */
    441          	//test GIT //USBH_Init(&hUSBHost, USBH_UserProcess, 0);
    442          
    443          	/* Add Supported Class */
    444          	//test GIT //USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
    445          	
    446          	/* Start Host Process */
    447          	//test GIT //USBH_Start(&hUSBHost); 					  
    448          #endif 
    449          
    450              Window(fir256Coff);
   \   0000019E   0xF504 0x7022      ADD      R0,R4,#+648
   \   000001A2   0x.... 0x....      BL       Window
    451          	EnergyNoiseCalc(AUDIO_OUT_BUFFER_SIZE/2);
   \   000001A6   0xF44F 0x7000      MOV      R0,#+512
   \   000001AA   0x.... 0x....      BL       EnergyNoiseCalc
    452          
    453              //Precalculation(Coef,PreCalcBuff);
    454              StartPlay();
   \   000001AE   0x.... 0x....      BL       StartPlay
   \   000001B2   0xA804             ADD      R0,SP,#+16
   \   000001B4   0x9003             STR      R0,[SP, #+12]
   \   000001B6   0xF604 0x2088      ADDW     R0,R4,#+2696
   \   000001BA   0x9002             STR      R0,[SP, #+8]
   \   000001BC   0xE01F             B.N      ??main_2
    455              while (1)
    456              {
    457          
    458          
    459                              /* This calculation happens once time in power cycles */
    460                              /* After 5 times of full frame recieved interrupt */
    461                         if ((cntStrt>=5))
    462                         {
    463          		      if ((WaveRecord_flgIni<200))
    464          		      {
    465                                    for(char i=0;i<16;i++)
    466                                    {
    467                                        if (ValBit(SPI4_stNipple,i)!=0) 
    468                                        {
    469                                            SPI4_stPosShft = MAX(SPI4_stPosShft,i+1);
    470                                       }
    471                                    }
    472          		          WaveRecord_flgIni++;			
    473          		      }   
    474          		 }
    475          	
    476          		/* USB Host Background task */
    477          		//USBH_Process(&hUSBHost);
    478          
    479          		/* AUDIO Menu Process */
    480          		//AUDIO_MenuProcess();
    481          		
    482          		FFT_Update(); 
    483          
    484          		if (flg10ms==1)
    485          		{
    486          		    flg10ms=0;		   		      
    487          	         cntTime200++;
    488          	         if (cntTime200==40)
    489          	         {
    490          	 
    491          #if (DEBUG)
    492                             uint32_t tmpSNR63,tmpSNR14,tmpSNR78,tmpSNR25;
    493                             tmpSNR78 = (uint32_t)(CrssCorVal78/EnergyError);
    494                             tmpSNR25 = (uint32_t)(CrssCorVal25/EnergyError);
    495          				   tmpSNR14 = (uint32_t)(CrssCorVal14/EnergyError);
    496          				   tmpSNR63 = (uint32_t)(CrssCorVal63/EnergyError);
    497                              //if (tmpSNR>10)
    498                              {
    499                                  int16_t test[5];
    500                                  static uint8_t flagNotMin;
    501                                  test[0] = 0;
    502          						if (CrssCorVal63/EnergyError>10)						
    503                                      test[1]= idxLatency63;
    504          						else
    505          							test[1] = 0;
    506          
    507          						if (CrssCorVal14/EnergyError>10)
    508                                      test[2]= idxLatency14;
    509          						else
    510          							test[2] =0;
    511          
    512          						if (CrssCorVal25/EnergyError > 10)
    513                                      test[3]= idxLatency25;
    514          						else
    515          							test[3] = 0;
    516          
    517                                  if (CrssCorVal78/EnergyError>10)
    518          						    test[4]= idxLatency78;                        
    519          						else
    520          							test[4]= 2;
    521          
    522          						if (((tmpSNR63>10))||((tmpSNR14>10))||((tmpSNR25>10))||((tmpSNR78>10)))
    523                                  {
   \                     ??main_3: (+1)
   \   000001BE   0x2000             MOVS     R0,#+0
   \                     ??main_4: (+1)
   \   000001C0   0x7360             STRB     R0,[R4, #+13]
   \   000001C2   0x7B60             LDRB     R0,[R4, #+13]
    524                                       sprintf((char *)pUARTBuf,"%d:%d:%d:%d",idxLatency63,idxLatency14,idxLatency25,idxLatency78);
    525                                       flagNotMin=0 ;
    526                                       
    527                                        if (test[3]>0)
    528                                        {
    529                                                sprintf((char *)(pUARTBuf+15),"Close Mic 5\r\n"); 
    530          									  flagNotMin=1;
    531                                        }
    532                                        else if (test[3]<0)
    533                                        {
    534                                              sprintf((char *)(pUARTBuf+15),"Clsoe Mic 2\r\n");
    535          									flagNotMin=1;
    536          
    537                                        }
    538                                        else
    539                                        {
    540                                             
    541                                        }	
    542          
    543          						
    544          				                if (test[2]>0)
    545          		                  	    {
    546          		                  	       if((CrssCorVal14>CrssCorVal25)||(flagNotMin==0))
    547          		                  	       {
    548          		                             sprintf((char *)(pUARTBuf+15),"Clsoe Mic 4\r\n");
    549          									 flagNotMin=2;
    550          		                  	       }
    551          		                  	    }
    552          		                        else if (test[2]<0)
    553          		                        {
    554          		                            if((CrssCorVal14>CrssCorVal25)||(flagNotMin==0))
    555          		                            {
    556          		                              sprintf((char *)(pUARTBuf+15),"Clsoe Mic 1\r\n");                             
    557          									  flagNotMin=2;
    558          		                            }
    559          		                        }
    560          		                        else
    561          		                        {
    562          
    563          		                        }
    564          
    565          						   
    566          		                        if (test[1]>0)
    567          		                  	    {
    568          		                  	       if((((CrssCorVal63>CrssCorVal25)&&(flagNotMin==1))||(flagNotMin==0))||((CrssCorVal63>CrssCorVal14)&&(flagNotMin==2)))
    569          		                  	       {
    570          								     sprintf((char *)(pUARTBuf+15),"Clsoe Mic 3\r\n");
    571          								     flagNotMin=3;
    572          		                  	       }
    573          		                  	    }
    574          		                        else if (test[1]<0)
    575          		                        {
    576          		                             if((((CrssCorVal63>CrssCorVal25)&&(flagNotMin==1))||(flagNotMin==0))||((CrssCorVal63>CrssCorVal14)&&(flagNotMin==2)))
    577          		                             {
    578          		                               sprintf((char *)(pUARTBuf+15),"Clsoe Mic 6\r\n"); 
    579          									   flagNotMin=3;
    580          		                             }
    581          		                        }
    582          		                        else
    583          		                        {
    584          
    585          		                        }
    586          
    587          
    588          	                            if ((test[4]>3))
    589          	                            {
    590          	                                if ((flagNotMin==0))                                     
    591          	                                    sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    592          								    else if ((flagNotMin==1))
    593          										if (CrssCorVal78>CrssCorVal25)
    594          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    595          								    else if ((flagNotMin==2))
    596          										if (CrssCorVal78>CrssCorVal14)
    597          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");	
    598          								    else if ((flagNotMin==3))
    599          										if (CrssCorVal78>CrssCorVal63)
    600          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    601          									else
    602          										;
    603          									
    604          	                            }
    605          	                            else if (test<=0)
    606          	                            {
    607          	                                if ((flagNotMin==0))                                     
    608          	                                    sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    609          								    else if ((flagNotMin==1))
    610          										if (CrssCorVal78>CrssCorVal25)
    611          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    612          								    else if ((flagNotMin==2))
    613          										if (CrssCorVal78>CrssCorVal14)
    614          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");	
    615          								    else if ((flagNotMin==3))
    616          										if (CrssCorVal78>CrssCorVal63)
    617          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    618          									else
    619          										;
    620          									
    621          	                            }                          
    622          	                            else
    623          	                            {
    624          	                            }
    625          
    626          
    627          			  //if (flagNotMin==0) sprintf((char *)(pUARTBuf+15),"----------- \r\n");
    628          									
    629                                    //HAL_UART_Transmit_IT(&huart3,pUARTBuf,15);
    630                                    SrvB_Debound(&flgS2Ins,&flgS2Flt, flgS2,2);
    631                                    SrvB_Debound(&flgS3Ins,&flgS3Flt, flgS3,2);
    632                                    SrvB_Debound(&flgS4Ins,&flgS4Flt, flgS4,2);
    633          
    634                                    stDir = (flgS2Flt<<2)|(flgS3Flt<<1)|(flgS4Flt); 
    635                                   
    636                                     sprintf((char *)pUARTBuf,"%d:%d:%d:%d",tmpSNR63,tmpSNR14,tmpSNR25,tmpSNR78);
   \   000001C4   0x464B             MOV      R3,R9
   \   000001C6   0x4652             MOV      R2,R10
   \   000001C8   0x2803             CMP      R0,#+3
   \   000001CA   0xBF28             IT       CS 
   \   000001CC   0x72A1             STRBCS   R1,[R4, #+10]
   \   000001CE   0x7A61             LDRB     R1,[R4, #+9]
   \   000001D0   0x7A20             LDRB     R0,[R4, #+8]
   \   000001D2   0x9701             STR      R7,[SP, #+4]
   \   000001D4   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   000001D8   0x0049             LSLS     R1,R1,#+1
   \   000001DA   0xEA41 0x0080      ORR      R0,R1,R0, LSL #+2
   \   000001DE   0x7AA1             LDRB     R1,[R4, #+10]
   \   000001E0   0x4308             ORRS     R0,R1,R0
   \   000001E2   0x.... 0x....      ADR.W    R1,?_0
   \   000001E6   0x7120             STRB     R0,[R4, #+4]
   \   000001E8   0x9802             LDR      R0,[SP, #+8]
   \   000001EA   0x.... 0x....      BL       sprintf
    637                                     HAL_UART_Transmit_IT(&huart3,pUARTBuf,15+15+15);		
   \   000001EE   0x9902             LDR      R1,[SP, #+8]
   \   000001F0   0x222D             MOVS     R2,#+45
   \   000001F2   0x.... 0x....      LDR.W    R0,??DataTable23_14
   \   000001F6   0x.... 0x....      BL       HAL_UART_Transmit_IT
    638                                   }
    639                              }//if(SNR)
    640          
    641          #endif
    642          	   	            cntTime200=0;
   \                     ??main_5: (+1)
   \   000001FA   0x2000             MOVS     R0,#+0
   \   000001FC   0x84E0             STRH     R0,[R4, #+38]
   \                     ??main_2: (+1)
   \   000001FE   0x.... 0x....      LDR.W    R0,??DataTable23_15
   \   00000202   0x8800             LDRH     R0,[R0, #+0]
   \   00000204   0x2805             CMP      R0,#+5
   \   00000206   0xDB19             BLT.N    ??main_6
   \   00000208   0x.... 0x....      LDR.W    R0,??DataTable23_16
   \   0000020C   0x7800             LDRB     R0,[R0, #+0]
   \   0000020E   0x28C8             CMP      R0,#+200
   \   00000210   0xDA14             BGE.N    ??main_6
   \   00000212   0x2100             MOVS     R1,#+0
   \                     ??main_7: (+1)
   \   00000214   0x.... 0x....      LDR.W    R2,??DataTable23_17
   \   00000218   0xF9B2 0x2000      LDRSH    R2,[R2, #+0]
   \   0000021C   0x410A             ASRS     R2,R2,R1
   \   0000021E   0x07D2             LSLS     R2,R2,#+31
   \   00000220   0xD505             BPL.N    ??main_8
   \   00000222   0x7833             LDRB     R3,[R6, #+0]
   \   00000224   0x1C4A             ADDS     R2,R1,#+1
   \   00000226   0x429A             CMP      R2,R3
   \   00000228   0xBFB8             IT       LT 
   \   0000022A   0x7832             LDRBLT   R2,[R6, #+0]
   \   0000022C   0x7032             STRB     R2,[R6, #+0]
   \                     ??main_8: (+1)
   \   0000022E   0x1C49             ADDS     R1,R1,#+1
   \   00000230   0x2910             CMP      R1,#+16
   \   00000232   0xDBEF             BLT.N    ??main_7
   \   00000234   0x1C40             ADDS     R0,R0,#+1
   \   00000236   0x.... 0x....      LDR.W    R1,??DataTable23_16
   \   0000023A   0x7008             STRB     R0,[R1, #+0]
   \                     ??main_6: (+1)
   \   0000023C   0x.... 0x....      BL       FFT_Update
   \   00000240   0x78A0             LDRB     R0,[R4, #+2]
   \   00000242   0x2801             CMP      R0,#+1
   \   00000244   0xD1DB             BNE.N    ??main_2
   \   00000246   0x2000             MOVS     R0,#+0
   \   00000248   0x70A0             STRB     R0,[R4, #+2]
   \   0000024A   0x8CE0             LDRH     R0,[R4, #+38]
   \   0000024C   0x1C40             ADDS     R0,R0,#+1
   \   0000024E   0x84E0             STRH     R0,[R4, #+38]
   \   00000250   0xB280             UXTH     R0,R0
   \   00000252   0x2828             CMP      R0,#+40
   \   00000254   0xD1D3             BNE.N    ??main_2
   \   00000256   0xF8D4 0xC060      LDR      R12,[R4, #+96]
   \   0000025A   0x6DA2             LDR      R2,[R4, #+88]
   \   0000025C   0x.... 0x....      LDR.W    R0,??DataTable23_18
   \   00000260   0x6DE1             LDR      R1,[R4, #+92]
   \   00000262   0x6803             LDR      R3,[R0, #+0]
   \   00000264   0x6D60             LDR      R0,[R4, #+84]
   \   00000266   0xFBBC 0xFAF3      UDIV     R10,R12,R3
   \   0000026A   0xFBB2 0xF2F3      UDIV     R2,R2,R3
   \   0000026E   0x4691             MOV      R9,R2
   \   00000270   0xFBB1 0xF1F3      UDIV     R1,R1,R3
   \   00000274   0x4688             MOV      R8,R1
   \   00000276   0xFBB0 0xF0F3      UDIV     R0,R0,R3
   \   0000027A   0x2300             MOVS     R3,#+0
   \   0000027C   0xF1BA 0x0F0B      CMP      R10,#+11
   \   00000280   0xF8AD 0x3010      STRH     R3,[SP, #+16]
   \   00000284   0x4607             MOV      R7,R0
   \   00000286   0xBF28             IT       CS 
   \   00000288   0x8C63             LDRHCS   R3,[R4, #+34]
   \   0000028A   0x2A0B             CMP      R2,#+11
   \   0000028C   0x806B             STRH     R3,[R5, #+2]
   \   0000028E   0xBF2C             ITE      CS 
   \   00000290   0x8BE2             LDRHCS   R2,[R4, #+30]
   \   00000292   0x2200             MOVCC    R2,#+0
   \   00000294   0x290B             CMP      R1,#+11
   \   00000296   0x80AA             STRH     R2,[R5, #+4]
   \   00000298   0xBF2C             ITE      CS 
   \   0000029A   0x8C21             LDRHCS   R1,[R4, #+32]
   \   0000029C   0x2100             MOVCC    R1,#+0
   \   0000029E   0x280B             CMP      R0,#+11
   \   000002A0   0x80E9             STRH     R1,[R5, #+6]
   \   000002A2   0xBF2C             ITE      CS 
   \   000002A4   0x8CA0             LDRHCS   R0,[R4, #+36]
   \   000002A6   0x2002             MOVCC    R0,#+2
   \   000002A8   0xF1BA 0x0F0B      CMP      R10,#+11
   \   000002AC   0x8128             STRH     R0,[R5, #+8]
   \   000002AE   0xBF38             IT       CC 
   \   000002B0   0xF1B9 0x0F0B      CMPCC    R9,#+11
   \   000002B4   0xD204             BCS.N    ??main_9
   \   000002B6   0xF1B8 0x0F0B      CMP      R8,#+11
   \   000002BA   0xBF38             IT       CC 
   \   000002BC   0x2F0B             CMPCC    R7,#+11
   \   000002BE   0xD39C             BCC.N    ??main_5
   \                     ??main_9: (+1)
   \   000002C0   0xF9B4 0x0024      LDRSH    R0,[R4, #+36]
   \   000002C4   0xF9B4 0x301E      LDRSH    R3,[R4, #+30]
   \   000002C8   0xF9B4 0x2022      LDRSH    R2,[R4, #+34]
   \   000002CC   0x.... 0x....      ADR.W    R1,?_0
   \   000002D0   0x9001             STR      R0,[SP, #+4]
   \   000002D2   0xF9B4 0x0020      LDRSH    R0,[R4, #+32]
   \   000002D6   0x9000             STR      R0,[SP, #+0]
   \   000002D8   0x9802             LDR      R0,[SP, #+8]
   \   000002DA   0x.... 0x....      BL       sprintf
   \   000002DE   0xF9B5 0x1006      LDRSH    R1,[R5, #+6]
   \   000002E2   0x2000             MOVS     R0,#+0
   \   000002E4   0x2901             CMP      R1,#+1
   \   000002E6   0xBFA8             IT       GE 
   \   000002E8   0x.... 0x....      ADRGE.W  R1,?_1
   \   000002EC   0xDA03             BGE.N    ??main_10
   \   000002EE   0x2900             CMP      R1,#+0
   \   000002F0   0xD505             BPL.N    ??main_11
   \   000002F2   0x.... 0x....      ADR.W    R1,?_2
   \                     ??main_10: (+1)
   \   000002F6   0x4658             MOV      R0,R11
   \   000002F8   0x.... 0x....      BL       sprintf
   \   000002FC   0x2001             MOVS     R0,#+1
   \                     ??main_11: (+1)
   \   000002FE   0xF9B5 0x1004      LDRSH    R1,[R5, #+4]
   \   00000302   0x2901             CMP      R1,#+1
   \   00000304   0xDB07             BLT.N    ??main_12
   \   00000306   0x6DE1             LDR      R1,[R4, #+92]
   \   00000308   0x6DA2             LDR      R2,[R4, #+88]
   \   0000030A   0x4291             CMP      R1,R2
   \   0000030C   0xD300             BCC.N    ??main_13
   \   0000030E   0xB978             CBNZ.N   R0,??main_14
   \                     ??main_13: (+1)
   \   00000310   0x.... 0x....      ADR.W    R1,?_3
   \   00000314   0xE008             B.N      ??main_15
   \                     ??main_12: (+1)
   \   00000316   0x2900             CMP      R1,#+0
   \   00000318   0xD50A             BPL.N    ??main_14
   \   0000031A   0x6DE1             LDR      R1,[R4, #+92]
   \   0000031C   0x6DA2             LDR      R2,[R4, #+88]
   \   0000031E   0x4291             CMP      R1,R2
   \   00000320   0xD300             BCC.N    ??main_16
   \   00000322   0xB928             CBNZ.N   R0,??main_14
   \                     ??main_16: (+1)
   \   00000324   0x.... 0x....      ADR.W    R1,?_4
   \                     ??main_15: (+1)
   \   00000328   0x4658             MOV      R0,R11
   \   0000032A   0x.... 0x....      BL       sprintf
   \   0000032E   0x2002             MOVS     R0,#+2
   \                     ??main_14: (+1)
   \   00000330   0xF9B5 0x1002      LDRSH    R1,[R5, #+2]
   \   00000334   0x2901             CMP      R1,#+1
   \   00000336   0xDB0E             BLT.N    ??main_17
   \   00000338   0x6E21             LDR      R1,[R4, #+96]
   \   0000033A   0x6DE2             LDR      R2,[R4, #+92]
   \   0000033C   0x428A             CMP      R2,R1
   \   0000033E   0xD201             BCS.N    ??main_18
   \   00000340   0x2801             CMP      R0,#+1
   \   00000342   0xD005             BEQ.N    ??main_19
   \                     ??main_18: (+1)
   \   00000344   0xB120             CBZ.N    R0,??main_19
   \   00000346   0x6DA2             LDR      R2,[R4, #+88]
   \   00000348   0x428A             CMP      R2,R1
   \   0000034A   0xD218             BCS.N    ??main_20
   \   0000034C   0x2802             CMP      R0,#+2
   \   0000034E   0xD116             BNE.N    ??main_20
   \                     ??main_19: (+1)
   \   00000350   0x.... 0x....      ADR.W    R1,?_5
   \   00000354   0xE00F             B.N      ??main_21
   \                     ??main_17: (+1)
   \   00000356   0x2900             CMP      R1,#+0
   \   00000358   0xD511             BPL.N    ??main_20
   \   0000035A   0x6E21             LDR      R1,[R4, #+96]
   \   0000035C   0x6DE2             LDR      R2,[R4, #+92]
   \   0000035E   0x428A             CMP      R2,R1
   \   00000360   0xD201             BCS.N    ??main_22
   \   00000362   0x2801             CMP      R0,#+1
   \   00000364   0xD005             BEQ.N    ??main_23
   \                     ??main_22: (+1)
   \   00000366   0xB120             CBZ.N    R0,??main_23
   \   00000368   0x6DA2             LDR      R2,[R4, #+88]
   \   0000036A   0x428A             CMP      R2,R1
   \   0000036C   0xD207             BCS.N    ??main_20
   \   0000036E   0x2802             CMP      R0,#+2
   \   00000370   0xD105             BNE.N    ??main_20
   \                     ??main_23: (+1)
   \   00000372   0x.... 0x....      ADR.W    R1,?_6
   \                     ??main_21: (+1)
   \   00000376   0x4658             MOV      R0,R11
   \   00000378   0x.... 0x....      BL       sprintf
   \   0000037C   0x2003             MOVS     R0,#+3
   \                     ??main_20: (+1)
   \   0000037E   0xF9B5 0x1008      LDRSH    R1,[R5, #+8]
   \   00000382   0x2904             CMP      R1,#+4
   \   00000384   0xDB0C             BLT.N    ??main_24
   \   00000386   0xB910             CBNZ.N   R0,??main_25
   \   00000388   0x.... 0x....      ADR.W    R1,?_7
   \   0000038C   0xE013             B.N      ??main_26
   \                     ??main_25: (+1)
   \   0000038E   0x2801             CMP      R0,#+1
   \   00000390   0xD114             BNE.N    ??main_27
   \   00000392   0x6DE0             LDR      R0,[R4, #+92]
   \   00000394   0x6D61             LDR      R1,[R4, #+84]
   \   00000396   0x4288             CMP      R0,R1
   \   00000398   0xD210             BCS.N    ??main_27
   \   0000039A   0x.... 0x....      ADR.W    R1,?_7
   \   0000039E   0xE00A             B.N      ??main_26
   \                     ??main_24: (+1)
   \   000003A0   0x9903             LDR      R1,[SP, #+12]
   \   000003A2   0xB959             CBNZ.N   R1,??main_27
   \   000003A4   0xB128             CBZ.N    R0,??main_28
   \   000003A6   0x2801             CMP      R0,#+1
   \   000003A8   0xD108             BNE.N    ??main_27
   \   000003AA   0x6DE0             LDR      R0,[R4, #+92]
   \   000003AC   0x6D61             LDR      R1,[R4, #+84]
   \   000003AE   0x4288             CMP      R0,R1
   \   000003B0   0xD204             BCS.N    ??main_27
   \                     ??main_28: (+1)
   \   000003B2   0x.... 0x....      ADR.W    R1,?_8
   \                     ??main_26: (+1)
   \   000003B6   0x4658             MOV      R0,R11
   \   000003B8   0x.... 0x....      BL       sprintf
   \                     ??main_27: (+1)
   \   000003BC   0x7960             LDRB     R0,[R4, #+5]
   \   000003BE   0x7A21             LDRB     R1,[R4, #+8]
   \   000003C0   0x4288             CMP      R0,R1
   \   000003C2   0xD004             BEQ.N    ??main_29
   \   000003C4   0x7AE1             LDRB     R1,[R4, #+11]
   \   000003C6   0x29FF             CMP      R1,#+255
   \   000003C8   0xD002             BEQ.N    ??main_30
   \   000003CA   0x1C49             ADDS     R1,R1,#+1
   \   000003CC   0xE000             B.N      ??main_30
   \                     ??main_29: (+1)
   \   000003CE   0x2100             MOVS     R1,#+0
   \                     ??main_30: (+1)
   \   000003D0   0x72E1             STRB     R1,[R4, #+11]
   \   000003D2   0x7AE1             LDRB     R1,[R4, #+11]
   \   000003D4   0x2903             CMP      R1,#+3
   \   000003D6   0xBF28             IT       CS 
   \   000003D8   0x7220             STRBCS   R0,[R4, #+8]
   \   000003DA   0x79A0             LDRB     R0,[R4, #+6]
   \   000003DC   0x7A61             LDRB     R1,[R4, #+9]
   \   000003DE   0x4288             CMP      R0,R1
   \   000003E0   0xD004             BEQ.N    ??main_31
   \   000003E2   0x7B21             LDRB     R1,[R4, #+12]
   \   000003E4   0x29FF             CMP      R1,#+255
   \   000003E6   0xD002             BEQ.N    ??main_32
   \   000003E8   0x1C49             ADDS     R1,R1,#+1
   \   000003EA   0xE000             B.N      ??main_32
   \                     ??main_31: (+1)
   \   000003EC   0x2100             MOVS     R1,#+0
   \                     ??main_32: (+1)
   \   000003EE   0x7321             STRB     R1,[R4, #+12]
   \   000003F0   0x7B21             LDRB     R1,[R4, #+12]
   \   000003F2   0x2903             CMP      R1,#+3
   \   000003F4   0xBF28             IT       CS 
   \   000003F6   0x7260             STRBCS   R0,[R4, #+9]
   \   000003F8   0x79E1             LDRB     R1,[R4, #+7]
   \   000003FA   0x7AA0             LDRB     R0,[R4, #+10]
   \   000003FC   0x4281             CMP      R1,R0
   \   000003FE   0xF43F 0xAEDE      BEQ.W    ??main_3
   \   00000402   0x7B60             LDRB     R0,[R4, #+13]
   \   00000404   0x28FF             CMP      R0,#+255
   \   00000406   0xF43F 0xAEDB      BEQ.W    ??main_4
   \   0000040A   0x1C40             ADDS     R0,R0,#+1
   \   0000040C   0xE6D8             B.N      ??main_4
    643                  } //(cntTime200==40)
    644                }//if (flg10ms==1)	
    645            }
    646          }

   \                                 In section .bss, align 1
   \   00000000                      DS8 1
    647          
    648          /**
    649            * @brief  Toggle Leds.
    650            * @param  None
    651            * @retval None
    652            */

   \                                 In section .text, align 2, keep-with-next
    653          void Toggle_Leds(void)
    654          {
    655            static uint32_t ticks = 0;
    656          
    657            if (ticks++ > 200)
   \                     Toggle_Leds: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable23_19
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x1C4A             ADDS     R2,R1,#+1
   \   00000008   0x29C9             CMP      R1,#+201
   \   0000000A   0xBF28             IT       CS 
   \   0000000C   0x2200             MOVCS    R2,#+0
    658            {
    659              //BSP_LED_Toggle(LED1);
    660              ticks = 0;
   \   0000000E   0x6002             STR      R2,[R0, #+0]
    661            }
    662          }
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??ticks:
   \   00000000                      DS8 4
    663          
    664          
    665          /**
    666            * @brief  User Process
    667            * @param  phost: Host Handle
    668            * @param  id: Host Library user message ID
    669            * @retval None
    670            */
    671          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
                             ^
Warning[Pe177]: function "USBH_UserProcess" was declared but never referenced
    672          {
    673            switch(id)
    674            { 
    675            case HOST_USER_SELECT_CONFIGURATION:
    676              break;
    677              
    678            case HOST_USER_DISCONNECTION:
    679              appli_state = APPLICATION_DISCONNECT;
    680              break;
    681          
    682            case HOST_USER_CLASS_ACTIVE:
    683              appli_state = APPLICATION_READY;
    684              break;
    685           
    686            case HOST_USER_CONNECTION:
    687              appli_state = APPLICATION_START;
    688              break;
    689             
    690            default:
    691              break; 
    692            }
    693          }
    694          
    695          /**
    696            * @brief  System Clock Configuration
    697            *         The system Clock is configured as follow : 
    698            *            System Clock source            = PLL (HSE)
    699            *            SYSCLK(Hz)                     = 216000000
    700            *            HCLK(Hz)                       = 216000000
    701            *            AHB Prescaler                  = 1
    702            *            APB1 Prescaler                 = 4
    703            *            APB2 Prescaler                 = 2
    704            *            HSE Frequency(Hz)              = 25000000
    705            *            PLL_M                          = 25
    706            *            PLL_N                          = 432
    707            *            PLL_P                          = 2
    708            *            PLL_Q                          = 9
    709            *            VDD(V)                         = 3.3
    710            *            Main regulator output voltage  = Scale1 mode
    711            *            Flash Latency(WS)              = 7
    712            * @param  None
    713            * @retval None
    714            */

   \                                 In section .text, align 2, keep-with-next
    715          static void SystemClock_Config(void)
    716          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B2             SUB      SP,SP,#+200
    717            RCC_ClkInitTypeDef RCC_ClkInitStruct;
    718            RCC_OscInitTypeDef RCC_OscInitStruct;
    719            RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    720            HAL_StatusTypeDef ret = HAL_OK;
    721          
    722            /* Enable HSE Oscillator and activate PLL with HSE as source */
    723            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x9026             STR      R0,[SP, #+152]
    724            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   00000008   0xF44F 0x3080      MOV      R0,#+65536
   \   0000000C   0x9027             STR      R0,[SP, #+156]
    725            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x902C             STR      R0,[SP, #+176]
    726            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    727            RCC_OscInitStruct.PLL.PLLM = 25;
   \   00000012   0x2019             MOVS     R0,#+25
   \   00000014   0x902E             STR      R0,[SP, #+184]
    728            RCC_OscInitStruct.PLL.PLLN = 432;  
   \   00000016   0xF44F 0x70D8      MOV      R0,#+432
   \   0000001A   0x902F             STR      R0,[SP, #+188]
    729            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x9030             STR      R0,[SP, #+192]
    730            RCC_OscInitStruct.PLL.PLLQ = 9;
   \   00000020   0x2009             MOVS     R0,#+9
   \   00000022   0xF44F 0x0480      MOV      R4,#+4194304
   \   00000026   0x9031             STR      R0,[SP, #+196]
   \   00000028   0x942D             STR      R4,[SP, #+180]
    731          
    732            ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
   \   0000002A   0xA826             ADD      R0,SP,#+152
   \   0000002C   0x.... 0x....      BL       HAL_RCC_OscConfig
    733            if(ret != HAL_OK)
    734            {
    735              //while(1) { ; }
    736            }
    737          
    738            /* Activate the OverDrive to reach the 216 MHz Frequency */
    739            ret = HAL_PWREx_EnableOverDrive();
   \   00000030   0x.... 0x....      BL       HAL_PWREx_EnableOverDrive
    740            if(ret != HAL_OK)
    741            {
    742              //while(1) { ; }
    743            }
    744          
    745            /* Select PLLSAI output as USB clock source */
    746            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48 ;
   \   00000034   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000038   0x9005             STR      R0,[SP, #+20]
    747            PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
   \   0000003A   0xF04F 0x6000      MOV      R0,#+134217728
   \   0000003E   0x9024             STR      R0,[SP, #+144]
    748          
    749            
    750            PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
   \   00000040   0x20C0             MOVS     R0,#+192
   \   00000042   0x900A             STR      R0,[SP, #+40]
    751            PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0x900B             STR      R0,[SP, #+44]
    752            PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x900D             STR      R0,[SP, #+52]
    753            PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0x900C             STR      R0,[SP, #+48]
    754          
    755          
    756            ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
   \   00000050   0xA805             ADD      R0,SP,#+20
   \   00000052   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    757            
    758            if(ret != HAL_OK)
    759            {
    760              //while(1) { ; }
    761            }
    762            
    763            /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
    764            RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
   \   00000056   0x200F             MOVS     R0,#+15
    765            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    766            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
    767            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
    768            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
    769          
    770            ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
   \   00000058   0x2107             MOVS     R1,#+7
   \   0000005A   0x9000             STR      R0,[SP, #+0]
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x9001             STR      R0,[SP, #+4]
   \   00000060   0x2080             MOVS     R0,#+128
   \   00000062   0x9002             STR      R0,[SP, #+8]
   \   00000064   0xF44F 0x50A0      MOV      R0,#+5120
   \   00000068   0x9003             STR      R0,[SP, #+12]
   \   0000006A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000006E   0x9004             STR      R0,[SP, #+16]
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x.... 0x....      BL       HAL_RCC_ClockConfig
    771            if(ret != HAL_OK)
    772            {
    773              //while(1) { ; }
    774            }
    775            
    776           //sop1hc 344/7 = 49.142 MHz
    777            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable23_20  ;; 0x100001
    778            PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   0000007A   0x9415             STR      R4,[SP, #+84]
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    779            PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x9012             STR      R0,[SP, #+72]
    780            PeriphClkInitStruct.PLLI2S.PLLI2SP = 8;
   \   00000082   0x2008             MOVS     R0,#+8
   \   00000084   0x9009             STR      R0,[SP, #+36]
    781            PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   00000086   0xF44F 0x70AC      MOV      R0,#+344
   \   0000008A   0x9006             STR      R0,[SP, #+24]
    782            PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
   \   0000008C   0x2007             MOVS     R0,#+7
   \   0000008E   0x9008             STR      R0,[SP, #+32]
    783            PeriphClkInitStruct.PLLI2S.PLLI2SR = 7;
   \   00000090   0x9007             STR      R0,[SP, #+28]
    784            PeriphClkInitStruct.PLLI2SDivQ = 1;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x900E             STR      R0,[SP, #+56]
    785            HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);	
   \   00000096   0xA805             ADD      R0,SP,#+20
   \   00000098   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    786          }
   \   0000009C   0xB032             ADD      SP,SP,#+200
   \   0000009E   0xBD10             POP      {R4,PC}          ;; return
    787          
    788          /**
    789            * @brief  Clock Config.
    790            * @param  hsai: might be required to set audio peripheral predivider if any.
    791            * @param  AudioFreq: Audio frequency used to play the audio stream.
    792            * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
    793            *         Being __weak it can be overwritten by the application     
    794            * @retval None
    795            */

   \                                 In section .text, align 2, keep-with-next
    796          void BSP_AUDIO_OUT_ClockConfig(uint32_t AudioFreq, void *Params)
    797          {
   \                     BSP_AUDIO_OUT_ClockConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0A2             SUB      SP,SP,#+136
   \   00000004   0x4604             MOV      R4,R0
    798            RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;
    799          
    800            HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
    801            
    802            /* Set the PLL configuration according to the audio frequency */
    803            if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
   \   0000000C   0xF642 0x3011      MOVW     R0,#+11025
   \   00000010   0x4284             CMP      R4,R0
   \   00000012   0xBF1F             ITTTT    NE 
   \   00000014   0xF245 0x6022      MOVWNE   R0,#+22050
   \   00000018   0x4284             CMPNE    R4,R0
   \   0000001A   0xF64A 0x4044      MOVWNE   R0,#+44100
   \   0000001E   0x4284             CMPNE    R4,R0
   \   00000020   0xD10E             BNE.N    ??BSP_AUDIO_OUT_ClockConfig_0
    804            {
    805              /* Configure PLLSAI prescalers */
    806              /* PLLI2S_VCO: VCO_429M
    807              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    808              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    809              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \   00000022   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000026   0x9000             STR      R0,[SP, #+0]
    810              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000028   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000002C   0x9010             STR      R0,[SP, #+64]
    811              RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
   \   0000002E   0x2008             MOVS     R0,#+8
   \   00000030   0x9004             STR      R0,[SP, #+16]
    812              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
   \   00000032   0xF240 0x10AD      MOVW     R0,#+429
   \   00000036   0x9001             STR      R0,[SP, #+4]
    813              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x9003             STR      R0,[SP, #+12]
    814              RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
   \   0000003C   0x2013             MOVS     R0,#+19
   \   0000003E   0xE00B             B.N      ??BSP_AUDIO_OUT_ClockConfig_1
    815              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
    816            }
    817            else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K), AUDIO_FREQUENCY_96K */
    818            {
    819              /* SAI clock config
    820              PLLI2S_VCO: VCO_344M
    821              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
    822              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 49.142/1 = 49.142 Mhz */
    823              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \                     ??BSP_AUDIO_OUT_ClockConfig_0: (+1)
   \   00000040   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000044   0x9000             STR      R0,[SP, #+0]
    824              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000046   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000004A   0x9010             STR      R0,[SP, #+64]
    825          	//RCC_ExCLKInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
    826          //    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    827              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   0000004C   0xF44F 0x70AC      MOV      R0,#+344
   \   00000050   0x9001             STR      R0,[SP, #+4]
    828              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
   \   00000052   0x2007             MOVS     R0,#+7
   \   00000054   0x9003             STR      R0,[SP, #+12]
    829          	//RCC_ExCLKInitStruct.PLLI2S.PLLI2SR = 1;
    830              RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \                     ??BSP_AUDIO_OUT_ClockConfig_1: (+1)
   \   00000058   0x9009             STR      R0,[SP, #+36]
    831              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    832            }
    833            
    834          }
   \   00000060   0xB022             ADD      SP,SP,#+136
   \   00000062   0xBD10             POP      {R4,PC}          ;; return
    835          
    836          
    837          
    838          #ifdef  USE_FULL_ASSERT
    839          /**
    840            * @brief  Reports the name of the source file and the source line number
    841            *         where the assert_param error has occurred.
    842            * @param  file: pointer to the source file name
    843            * @param  line: assert_param error line source number
    844            * @retval None
    845            */
    846          void assert_failed(uint8_t* file, uint32_t line)
    847          { 
    848            /* User can add his own implementation to report the file name and line number,
    849               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    850          
    851            /* Infinite loop */
    852            while (1)
    853            {
    854            }
    855          }
    856          #endif
    857          
    858          /**
    859            * @brief  CPU L1-Cache enable.
    860            * @param  None
    861            * @retval None
    862            */
    863          static void CPU_CACHE_Enable(void)
    864          {
    865            /* Enable I-Cache */
    866            SCB_EnableICache();
    867          
    868            /* Enable D-Cache */
    869            SCB_EnableDCache();
    870          }
    871          
    872          

   \                                 In section .text, align 2, keep-with-next
    873          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
    874          {
   \                     HAL_I2C_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    875          
    876            GPIO_InitTypeDef GPIO_InitStruct;
    877              
    878            if(hi2c->Instance==I2C1)
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable23_21  ;; 0x40005400
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD12C             BNE.N    ??HAL_I2C_MspInit_0
    879            {
    880          	/* USER CODE BEGIN I2C1_MspInit 0 */
    881          
    882          	/*##-1- Configure the I2C clock source. The clock is derived from the SYSCLK #*/
    883          	//RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
    884          	//RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    885          	//HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
    886          
    887          	/*##-2- Enable peripherals and GPIO Clocks #################################*/
    888          	/* Enable GPIO TX/RX clock */
    889          	__HAL_RCC_GPIOB_CLK_ENABLE();
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable23_6  ;; 0x40023830
    890          
    891          	/**I2C1 GPIO Configuration	
    892          	PB6	  ------> I2C1_SCL (PB6)
    893          	PB7	  ------> I2C1_SDA (PB7) 
    894          	*/
    895          	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    896          	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    897          	GPIO_InitStruct.Pull = GPIO_PULLUP;
    898          	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    899          	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    900          	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000012   0xA901             ADD      R1,SP,#+4
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000001A   0x6020             STR      R0,[R4, #+0]
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0x20C0             MOVS     R0,#+192
   \   00000028   0x9001             STR      R0,[SP, #+4]
   \   0000002A   0x2012             MOVS     R0,#+18
   \   0000002C   0x9002             STR      R0,[SP, #+8]
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x9003             STR      R0,[SP, #+12]
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x9004             STR      R0,[SP, #+16]
   \   00000036   0x2004             MOVS     R0,#+4
   \   00000038   0x9005             STR      R0,[SP, #+20]
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable23_22  ;; 0x40020400
   \   0000003E   0x.... 0x....      BL       HAL_GPIO_Init
    901          
    902          	/* Peripheral clock enable */
    903          	__HAL_RCC_I2C1_CLK_ENABLE();
   \   00000042   0x6920             LDR      R0,[R4, #+16]
    904          	/* Peripheral interrupt init*/
    905          	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x2103             MOVS     R1,#+3
   \   00000048   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   0000004C   0x6120             STR      R0,[R4, #+16]
   \   0000004E   0x6920             LDR      R0,[R4, #+16]
   \   00000050   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x201F             MOVS     R0,#+31
   \   0000005A   0x.... 0x....      BL       HAL_NVIC_SetPriority
    906          	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \   0000005E   0x201F             MOVS     R0,#+31
   \   00000060   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    907          
    908            }
    909            else if(hi2c->Instance==I2C2)
    910            {
    911            /* USER CODE BEGIN I2C2_MspInit 0 */
    912          
    913            /* USER CODE END I2C2_MspInit 0 */
    914            
    915              /**I2C2 GPIO Configuration    
    916              PB10     ------> I2C2_SCL
    917              PB11     ------> I2C2_SDA 
    918              */
    919              __HAL_RCC_GPIOB_CLK_ENABLE();
    920              
    921              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    922              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    923              GPIO_InitStruct.Pull = GPIO_NOPULL;
    924              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    925              GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    926              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    927          
    928              /* Peripheral clock enable */
    929              __HAL_RCC_I2C2_CLK_ENABLE();
    930              /* Peripheral interrupt init*/
    931              //HAL_NVIC_SetPriority(I2C2_EV_IRQn, 3, 1);
    932              //HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    933            }
    934          
    935          }
   \   00000064   0xB006             ADD      SP,SP,#+24
   \   00000066   0xBD10             POP      {R4,PC}
   \                     ??HAL_I2C_MspInit_0: (+1)
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable23_23  ;; 0x40005800
   \   0000006C   0x4288             CMP      R0,R1
   \   0000006E   0xD123             BNE.N    ??HAL_I2C_MspInit_1
   \   00000070   0x.... 0x....      LDR.W    R4,??DataTable23_6  ;; 0x40023830
   \   00000074   0xA901             ADD      R1,SP,#+4
   \   00000076   0x6820             LDR      R0,[R4, #+0]
   \   00000078   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000007C   0x6020             STR      R0,[R4, #+0]
   \   0000007E   0x6820             LDR      R0,[R4, #+0]
   \   00000080   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000084   0x9000             STR      R0,[SP, #+0]
   \   00000086   0x9800             LDR      R0,[SP, #+0]
   \   00000088   0xF44F 0x6040      MOV      R0,#+3072
   \   0000008C   0x9001             STR      R0,[SP, #+4]
   \   0000008E   0x2012             MOVS     R0,#+18
   \   00000090   0x9002             STR      R0,[SP, #+8]
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x9003             STR      R0,[SP, #+12]
   \   00000096   0x2003             MOVS     R0,#+3
   \   00000098   0x9004             STR      R0,[SP, #+16]
   \   0000009A   0x2004             MOVS     R0,#+4
   \   0000009C   0x9005             STR      R0,[SP, #+20]
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable23_22  ;; 0x40020400
   \   000000A2   0x.... 0x....      BL       HAL_GPIO_Init
   \   000000A6   0x6920             LDR      R0,[R4, #+16]
   \   000000A8   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000000AC   0x6120             STR      R0,[R4, #+16]
   \   000000AE   0x6920             LDR      R0,[R4, #+16]
   \   000000B0   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000000B4   0x9000             STR      R0,[SP, #+0]
   \   000000B6   0x9800             LDR      R0,[SP, #+0]
   \                     ??HAL_I2C_MspInit_1: (+1)
   \   000000B8   0xB006             ADD      SP,SP,#+24
   \   000000BA   0xBD10             POP      {R4,PC}          ;; return
    936          
    937          /*---------------------------------------------------*/
    938          /*   UART                                            */
    939          /* UART4 init function */

   \                                 In section .text, align 2, keep-with-next
    940          void USART3_Init(void)
    941          {
    942          
    943            huart3.Instance = USART3;
   \                     USART3_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable23_14
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable23_24  ;; 0x40004800
   \   00000008   0x6001             STR      R1,[R0, #+0]
    944            huart3.Init.BaudRate = 115200;
   \   0000000A   0xF44F 0x31E1      MOV      R1,#+115200
   \   0000000E   0x6041             STR      R1,[R0, #+4]
    945            huart3.Init.WordLength = UART_WORDLENGTH_8B;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6081             STR      R1,[R0, #+8]
    946            huart3.Init.StopBits = UART_STOPBITS_1;
   \   00000014   0x60C1             STR      R1,[R0, #+12]
    947            huart3.Init.Parity = UART_PARITY_NONE;
   \   00000016   0x6101             STR      R1,[R0, #+16]
    948            huart3.Init.Mode = UART_MODE_TX_RX;
   \   00000018   0x210C             MOVS     R1,#+12
   \   0000001A   0x6141             STR      R1,[R0, #+20]
    949            huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6181             STR      R1,[R0, #+24]
    950            huart3.Init.OverSampling = UART_OVERSAMPLING_16;
   \   00000020   0x61C1             STR      R1,[R0, #+28]
    951            huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED ;
   \   00000022   0x6201             STR      R1,[R0, #+32]
    952            huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
   \   00000024   0x6241             STR      R1,[R0, #+36]
    953            HAL_UART_Init(&huart3);
   \   00000026   0x.... 0x....      B.W      HAL_UART_Init
    954          
    955            //HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
    956            //HAL_NVIC_EnableIRQ(USART3_IRQn);
    957          
    958          }
    959          
    960          

   \                                 In section .text, align 2, keep-with-next
    961          void HAL_UART_MspInit(UART_HandleTypeDef *huart)
    962          {
    963          
    964            GPIO_InitTypeDef GPIO_InitStruct;
    965            if(huart->Instance==USART3)
   \                     HAL_UART_MspInit: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable23_24  ;; 0x40004800
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD000             BEQ.N    ??HAL_UART_MspInit_0
   \   0000000A   0x4770             BX       LR
    966            {
    967          
    968          
    969            /* USER CODE END UART4_MspInit 0 */
    970              /* Peripheral clock enable */
    971              __USART3_CLK_ENABLE();
   \                     ??HAL_UART_MspInit_0: (+1)
   \   0000000C   0xB500             PUSH     {LR}
   \   0000000E   0x....             LDR.N    R0,??DataTable23_6  ;; 0x40023830
   \   00000010   0xB087             SUB      SP,SP,#+28
   \   00000012   0x6901             LDR      R1,[R0, #+16]
   \   00000014   0xF441 0x2180      ORR      R1,R1,#0x40000
   \   00000018   0x6101             STR      R1,[R0, #+16]
   \   0000001A   0x6901             LDR      R1,[R0, #+16]
   \   0000001C   0xF401 0x2180      AND      R1,R1,#0x40000
   \   00000020   0x9100             STR      R1,[SP, #+0]
   \   00000022   0x9900             LDR      R1,[SP, #+0]
    972              __GPIOC_CLK_ENABLE();
   \   00000024   0x6801             LDR      R1,[R0, #+0]
   \   00000026   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000002A   0x6001             STR      R1,[R0, #+0]
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
    973            
    974              /**UART4 GPIO Configuration    
    975              PC10     ------> USART3_TX
    976              PC11     ------> USART3_RX
    977              */
    978              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    979              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    980              GPIO_InitStruct.Pull = GPIO_PULLUP;
    981              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    982              GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    983              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   0000002E   0xA901             ADD      R1,SP,#+4
   \   00000030   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0x9800             LDR      R0,[SP, #+0]
   \   00000038   0xF44F 0x6040      MOV      R0,#+3072
   \   0000003C   0x9001             STR      R0,[SP, #+4]
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x9002             STR      R0,[SP, #+8]
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x9003             STR      R0,[SP, #+12]
   \   00000046   0x2003             MOVS     R0,#+3
   \   00000048   0x9004             STR      R0,[SP, #+16]
   \   0000004A   0x2007             MOVS     R0,#+7
   \   0000004C   0x9005             STR      R0,[SP, #+20]
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable23_25  ;; 0x40020800
   \   00000052   0x.... 0x....      BL       HAL_GPIO_Init
    984          
    985              /* NVIC for USART */
    986              HAL_NVIC_SetPriority(USART3_IRQn, 7, 1);
   \   00000056   0x2201             MOVS     R2,#+1
   \   00000058   0x2107             MOVS     R1,#+7
   \   0000005A   0x2027             MOVS     R0,#+39
   \   0000005C   0x.... 0x....      BL       HAL_NVIC_SetPriority
    987              HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   00000060   0x2027             MOVS     R0,#+39
   \   00000062   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    988          
    989            }
    990          
    991          }
   \   00000066   0xB007             ADD      SP,SP,#+28
   \   00000068   0xBD00             POP      {PC}             ;; return
    992          
    993          
    994          

   \                                 In section .text, align 2, keep-with-next
    995          void EXTI4_IRQHandler(void)
    996          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    997              /* EXTI line interrupt detected */
    998            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable23_26  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x06C0             LSLS     R0,R0,#+27
   \   00000008   0xD50E             BPL.N    ??EXTI4_IRQHandler_0
    999            {
   1000              
   1001               if (cntRisingEXTI==20)
   \   0000000A   0x....             LDR.N    R0,??DataTable23_27
   \   0000000C   0x8801             LDRH     R1,[R0, #+0]
   \   0000000E   0x2914             CMP      R1,#+20
   \   00000010   0xD105             BNE.N    ??EXTI4_IRQHandler_1
   1002               {
   1003              	/*--------------Enable read PCM data --------------------*/   
   1004                  //flgDlyUpd = 1;  
   1005                  //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1006          		//__HAL_UNLOCK(&hspi5);
   1007                  //__HAL_SPI_ENABLE(&hspi5);
   1008                  cntRisingEXTI=0;
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x8001             STRH     R1,[R0, #+0]
   1009          
   1010                  /*Disable external interrupt */
   1011                  HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI4_IRQn));
   \   00000016   0x200A             MOVS     R0,#+10
   \   00000018   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   0000001C   0xE002             B.N      ??EXTI4_IRQHandler_2
   1012                  //HAL_GPIO_DeInit(GPIOB,GPIO_PIN_4);
   1013               }
   1014               else
   1015               {
   1016                  cntRisingEXTI++;
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   0000001E   0x8801             LDRH     R1,[R0, #+0]
   \   00000020   0x1C49             ADDS     R1,R1,#+1
   \   00000022   0x8001             STRH     R1,[R0, #+0]
   1017                  //__HAL_SPI_DISABLE(&hspi5);
   1018               }
   1019               
   1020                __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
   \                     ??EXTI4_IRQHandler_2: (+1)
   \   00000024   0x2010             MOVS     R0,#+16
   \   00000026   0x6020             STR      R0,[R4, #+0]
   1021          
   1022            }
   1023          }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
   1024                        

   \                                 In section .text, align 2, keep-with-next
   1025          void EXTI15_10_IRQHandler(void)
   1026          {
   1027          
   1028          }
   \                     EXTI15_10_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1029          
   1030          /* Events for Button Press */

   \                                 In section .text, align 2, keep-with-next
   1031          void EXTI9_5_IRQHandler(void)
   1032          {
   \                     EXTI9_5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1033          
   1034            /* EXTI line interrupt detected */
   1035            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable23_26  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0xD510             BPL.N    ??EXTI9_5_IRQHandler_0
   1036            {
   1037          	  btnSW2 = 1;
   \   0000000A   0x....             LDR.N    R0,??DataTable23_28
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x7041             STRB     R1,[R0, #+1]
   1038          	  if ((++cntBtnPress)==8) cntBtnPress=0;
   \   00000010   0x7881             LDRB     R1,[R0, #+2]
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0x7081             STRB     R1,[R0, #+2]
   \   00000016   0xB2C9             UXTB     R1,R1
   \   00000018   0x2908             CMP      R1,#+8
   \   0000001A   0xBF04             ITT      EQ 
   \   0000001C   0x2100             MOVEQ    R1,#+0
   \   0000001E   0x7081             STRBEQ   R1,[R0, #+2]
   1039          	  BSP_LED_Toggle(LED2);
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       BSP_LED_Toggle
   1040          	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
   \   00000026   0xF44F 0x7080      MOV      R0,#+256
   \   0000002A   0x6020             STR      R0,[R4, #+0]
   1041          
   1042            }
   1043          
   1044          
   1045            /* EXTI line interrupt detected */
   1046            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET)
   \                     ??EXTI9_5_IRQHandler_0: (+1)
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x0580             LSLS     R0,R0,#+22
   \   00000030   0xD50C             BPL.N    ??EXTI9_5_IRQHandler_1
   1047            {
   1048          		btnSW1 = 1;
   \   00000032   0x....             LDR.N    R0,??DataTable23_28
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x7001             STRB     R1,[R0, #+0]
   1049          		Command_index^=0x01;
   \   00000038   0x78C1             LDRB     R1,[R0, #+3]
   \   0000003A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000003E   0x70C1             STRB     R1,[R0, #+3]
   1050          		BSP_LED_Toggle(LED1);
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       BSP_LED_Toggle
   1051          
   1052          	   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
   \   00000046   0xF44F 0x7000      MOV      R0,#+512
   \   0000004A   0x6020             STR      R0,[R4, #+0]
   1053            }
   1054          
   1055          }
   \                     ??EXTI9_5_IRQHandler_1: (+1)
   \   0000004C   0xBD10             POP      {R4,PC}          ;; return
   1056          
   1057          

   \                                 In section .text, align 2, keep-with-next
   1058          void DFT_Init(void)
   1059          {
   \                     DFT_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1060          #if MAIN_CRSCORR
   1061          		arm_rfft_init_q15(&RealFFT_Ins,(uint32_t)128,(uint32_t)0,(uint32_t)1);
   1062          		arm_rfft_init_q15(&RealIFFT_Ins,(uint32_t)128,(uint32_t)1,(uint32_t)1);
   1063          #endif  
   1064          		/* Initialize the CFFT/CIFFT module */	
   1065          		arm_rfft_init_f32(&S1,&SS1, 512,  0, 1); 
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x....             LDR.N    R4,??DataTable23_29
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0xF44F 0x7200      MOV      R2,#+512
   \   00000010   0x4621             MOV      R1,R4
   \   00000012   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000016   0x.... 0x....      BL       arm_rfft_init_f32
   1066          		arm_rfft_init_f32(&S2,&SS2, 512,  0, 1); 
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0xF44F 0x7200      MOV      R2,#+512
   \   00000024   0xF104 0x0114      ADD      R1,R4,#+20
   \   00000028   0xF104 0x007C      ADD      R0,R4,#+124
   \   0000002C   0x.... 0x....      BL       arm_rfft_init_f32
   1067          		arm_rfft_init_f32(&S3,&SS3, 512,  0, 1); 
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x2300             MOVS     R3,#+0
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0xF44F 0x7200      MOV      R2,#+512
   \   0000003A   0xF104 0x0128      ADD      R1,R4,#+40
   \   0000003E   0xF104 0x0094      ADD      R0,R4,#+148
   \   00000042   0x.... 0x....      BL       arm_rfft_init_f32
   1068          		arm_rfft_init_f32(&S4,&SS4, 512,  0, 1);
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x2300             MOVS     R3,#+0
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0xF44F 0x7200      MOV      R2,#+512
   \   00000050   0xF104 0x013C      ADD      R1,R4,#+60
   \   00000054   0xF104 0x00AC      ADD      R0,R4,#+172
   \   00000058   0x.... 0x....      BL       arm_rfft_init_f32
   1069          		arm_rfft_init_f32(&IS,&ISS, 512,  1, 1);
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x2301             MOVS     R3,#+1
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0xF44F 0x7200      MOV      R2,#+512
   \   00000066   0xF104 0x0150      ADD      R1,R4,#+80
   \   0000006A   0xF104 0x00C4      ADD      R0,R4,#+196
   \   0000006E   0x.... 0x....      BL       arm_rfft_init_f32
   1070          
   1071          		//arm_rfft_fast_init_f32(&S1, 512);
   1072                          //arm_rfft_fast_init_f32(&S2, 512);
   1073          		//arm_rfft_fast_init_f32(&S3, 512);
   1074          		//arm_rfft_fast_init_f32(&S4, 512);
   1075          		//arm_rfft_fast_init_f32(&IS, 512);
   1076          }
   \   00000072   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   1077          
   1078          

   \                                 In section .text, align 2, keep-with-next
   1079          void SumDelay(Mic_Array_Data *BufferIn)
   1080          {
   \                     SumDelay: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   1081                     //if (idxLatency12>idxLatency13)
   1082                     // {
   1083                     //     if (idxLatency13 > idxLatency14)
   1084                     //     {
   1085                     //         /* MIC2 --> MIC3 --> MIC4 */
   1086                     //     }
   1087                     //             else if (idxLatency14 > idxLatency12)
   1088                     //             {
   1089                     //        /* MIC4-->MIC2-->MIC3  */
   1090                     //            }
   1091                     //             else
   1092                     //             {
   1093                     //       /* MIC2-->MIC4-->MIC3  */
   1094                     //             }
   1095                     // }
   1096                     //else // idxLatency13>idxLatency12
   1097                     //     {
   1098                     //    if (idxLatency12 > idxLatency14)
   1099                     //    {
   1100                     //        //MIC3 --> MIC2 --> MIC4 
   1101                     //    }
   1102                     //        else if (idxLatency14 > idxLatency13)
   1103                     //        {
   1104                     //        //MIC4 --> MIC3 --> MIC2
   1105                     //        }
   1106                     //        else
   1107                     //        {
   1108                     //        //MIC3 --> MIC4 --> MIC2
   1109          	   //	   }
   1110          	   //}
   1111          
   1112          	
   1113          	for(uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R3,??DataTable23_30
   \   00000008   0xF503 0x6400      ADD      R4,R3,#+2048
   \   0000000C   0x.... 0x....      LDR.W    R8,??DataTable23
   \   00000010   0xF9B4 0x2002      LDRSH    R2,[R4, #+2]
   \   00000014   0x4681             MOV      R9,R0
   \   00000016   0x5E64             LDRSH    R4,[R4, R1]
   \   00000018   0xF9B8 0x601E      LDRSH    R6,[R8, #+30]
   \   0000001C   0xF242 0x0C28      MOVW     R12,#+8232
   \   00000020   0xF241 0x0E14      MOVW     LR,#+4116
   \   00000024   0x4252             RSBS     R2,R2,#+0
   \   00000026   0x4264             RSBS     R4,R4,#+0
   \   00000028   0x4276             RSBS     R6,R6,#+0
   1114          	{
   1115          
   1116          		 if (i%2==0)
   \                     ??SumDelay_0: (+1)
   \   0000002A   0xEB01 0x75D1      ADD      R5,R1,R1, LSR #+31
   \   0000002E   0x106D             ASRS     R5,R5,#+1
   \   00000030   0xEBB1 0x0545      SUBS     R5,R1,R5, LSL #+1
   \   00000034   0xD13F             BNE.N    ??SumDelay_1
   1117          		 {
   1118                              bufferSum[i] = (uint16_t)(BufferIn->bufMIC1[i]*FacMic.facMIC1 + 
   1119                              BufferIn->bufMIC2[(((i-idxLatency12)>0)?(i-idxLatency12):0)]*FacMic.facMIC2 + 
   1120                              BufferIn->bufMIC3[(((i-idxLatency13)>0)?(i-idxLatency13):0)]*FacMic.facMIC3 + 
   1121                              BufferIn->bufMIC4[(((i-idxLatency14)>0)?(i-idxLatency14):0)]*FacMic.facMIC4); 		
   \   00000036   0x2A01             CMP      R2,#+1
   \   00000038   0xBFAC             ITE      GE 
   \   0000003A   0x4692             MOVGE    R10,R2
   \   0000003C   0xF04F 0x0A00      MOVLT    R10,#+0
   \   00000040   0x2C01             CMP      R4,#+1
   \   00000042   0xEB00 0x0A4A      ADD      R10,R0,R10, LSL #+1
   \   00000046   0xBFA8             IT       GE 
   \   00000048   0x4625             MOVGE    R5,R4
   \   0000004A   0x2E01             CMP      R6,#+1
   \   0000004C   0xEB00 0x0545      ADD      R5,R0,R5, LSL #+1
   \   00000050   0xBFAC             ITE      GE 
   \   00000052   0x4637             MOVGE    R7,R6
   \   00000054   0x2700             MOVLT    R7,#+0
   \   00000056   0xF9B9 0xB000      LDRSH    R11,[R9, #+0]
   \   0000005A   0xF93E 0xA00A      LDRSH    R10,[LR, R10]
   \   0000005E   0xEDD8 0x0A0F      VLDR     S1,[R8, #+60]
   \   00000062   0xF93C 0x5005      LDRSH    R5,[R12, R5]
   \   00000066   0xED98 0x1A10      VLDR     S2,[R8, #+64]
   \   0000006A   0xEE00 0xBA10      VMOV     S0,R11
   \   0000006E   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000072   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000076   0xEE00 0xAA90      VMOV     S1,R10
   \   0000007A   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   0000007E   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000082   0xEE00 0x5A90      VMOV     S1,R5
   \   00000086   0xEB00 0x0547      ADD      R5,R0,R7, LSL #+1
   \   0000008A   0xF243 0x073C      MOVW     R7,#+12348
   \   0000008E   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000092   0xED98 0x1A11      VLDR     S2,[R8, #+68]
   \   00000096   0x5F7D             LDRSH    R5,[R7, R5]
   \   00000098   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000009C   0xED98 0x1A12      VLDR     S2,[R8, #+72]
   \   000000A0   0xEE00 0x5A90      VMOV     S1,R5
   \   000000A4   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000000A8   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000AC   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000B0   0xEE10 0x5A10      VMOV     R5,S0
   \   000000B4   0xE001             B.N      ??SumDelay_2
   1122          		 }
   1123          		 else
   1124          		 {
   1125                               bufferSum[i] = (uint16_t)(BufferIn->bufMIC3[i]);
   \                     ??SumDelay_1: (+1)
   \   000000B6   0xF83C 0x5009      LDRH     R5,[R12, R9]
   1126          		 }
   1127          	}
   \                     ??SumDelay_2: (+1)
   \   000000BA   0x1C49             ADDS     R1,R1,#+1
   \   000000BC   0x1C76             ADDS     R6,R6,#+1
   \   000000BE   0x1C64             ADDS     R4,R4,#+1
   \   000000C0   0x1C52             ADDS     R2,R2,#+1
   \   000000C2   0xF5B1 0x6F80      CMP      R1,#+1024
   \   000000C6   0xF823 0x5B02      STRH     R5,[R3], #+2
   \   000000CA   0xF109 0x0902      ADD      R9,R9,#+2
   \   000000CE   0xDBAC             BLT.N    ??SumDelay_0
   1128          }
   \   000000D0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1129          
   1130          

   \                                 In section .text, align 2, keep-with-next
   1131          void ButtonInit(void)
   1132          {
   1133              /* PI8: SW2 */
   1134          	/* PI9: SW1 */
   1135          	 /* ----------------------*/
   1136          	 __GPIOB_CLK_ENABLE();
   \                     ButtonInit: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable23_6  ;; 0x40023830
   \   00000002   0xB580             PUSH     {R7,LR}
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0xF041 0x0102      ORR      R1,R1,#0x2
   \   0000000A   0x6001             STR      R1,[R0, #+0]
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   1137          	GPIO_INS.Pin = GPIO_PIN_8|GPIO_PIN_9;
   \   0000000E   0xF44F 0x7140      MOV      R1,#+768
   \   00000012   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0x....             LDR.N    R0,??DataTable23
   \   0000001C   0x6281             STR      R1,[R0, #+40]
   1138          	GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   0000001E   0x....             LDR.N    R1,??DataTable23_8  ;; 0x10110000
   \   00000020   0x62C1             STR      R1,[R0, #+44]
   1139          	GPIO_INS.Pull =GPIO_NOPULL;
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x6301             STR      R1,[R0, #+48]
   1140          	GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   00000026   0x2103             MOVS     R1,#+3
   \   00000028   0x6341             STR      R1,[R0, #+52]
   1141          	HAL_GPIO_Init(GPIOI,&GPIO_INS);
   \   0000002A   0xF100 0x0128      ADD      R1,R0,#+40
   \   0000002E   0x....             LDR.N    R0,??DataTable23_31  ;; 0x40022000
   \   00000030   0x.... 0x....      BL       HAL_GPIO_Init
   1142          	
   1143          	/* Enable and set Button EXTI Interrupt to the lowest priority */
   1144          	HAL_NVIC_SetPriority((IRQn_Type)EXTI9_5_IRQn, 0x0F, 0x00);
   \   00000034   0x2200             MOVS     R2,#+0
   \   00000036   0x210F             MOVS     R1,#+15
   \   00000038   0x2017             MOVS     R0,#+23
   \   0000003A   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1145          	HAL_NVIC_EnableIRQ((IRQn_Type)EXTI9_5_IRQn);
   \   0000003E   0x2017             MOVS     R0,#+23
   \   00000040   0xE8BD 0x4002      POP      {R1,LR}
   \   00000044   0x.... 0x....      B.W      HAL_NVIC_EnableIRQ
   1146          	/*-----------------------*/
   1147          
   1148          }
   1149          
   1150          
   1151          /* I2C2 init function */

   \                                 In section .text, align 2, keep-with-next
   1152          void MX_I2C2_Init(void)
   1153          {
   1154             __HAL_I2C_DISABLE(&hi2c2);
   \                     MX_I2C2_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable23_32
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x680A             LDR      R2,[R1, #+0]
   \   00000006   0x0852             LSRS     R2,R2,#+1
   \   00000008   0x0052             LSLS     R2,R2,#+1
   \   0000000A   0x600A             STR      R2,[R1, #+0]
   1155            hi2c2.Instance = I2C2;
   \   0000000C   0x....             LDR.N    R1,??DataTable23_23  ;; 0x40005800
   \   0000000E   0x6001             STR      R1,[R0, #+0]
   1156            hi2c2.Init.Timing =0x00A0689A ;//I2C_TIMING  0x00303D5D 0x00A0689A
   \   00000010   0x....             LDR.N    R1,??DataTable23_33  ;; 0xa0689a
   \   00000012   0x6041             STR      R1,[R0, #+4]
   1157            hi2c2.Init.OwnAddress1 = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6081             STR      R1,[R0, #+8]
   1158            hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x60C1             STR      R1,[R0, #+12]
   1159            hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6101             STR      R1,[R0, #+16]
   1160            hi2c2.Init.OwnAddress2 = 0;
   \   00000020   0x6141             STR      R1,[R0, #+20]
   1161            hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   00000022   0x6181             STR      R1,[R0, #+24]
   1162            hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   00000024   0x61C1             STR      R1,[R0, #+28]
   1163            hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   00000026   0x6201             STR      R1,[R0, #+32]
   1164            HAL_I2C_Init(&hi2c2);
   \   00000028   0x.... 0x....      B.W      HAL_I2C_Init
   1165          
   1166              /**Configure Analogue filter 
   1167              */
   1168            //HAL_I2CEx_AnalogFilter_Config(&hi2c2, I2C_ANALOGFILTER_ENABLE);
   1169          
   1170          }
   1171          

   \                                 In section .text, align 2, keep-with-next
   1172           void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
   1173          {  
   \                     HAL_I2S_TxCpltCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1174            Audio_Play_Out();  
   \   00000002   0x....             LDR.N    R5,??DataTable23
   \   00000004   0x....             LDR.N    R4,??DataTable23_34
   \   00000006   0x78E8             LDRB     R0,[R5, #+3]
   \   00000008   0xB148             CBZ.N    R0,??HAL_I2S_TxCpltCallback_0
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD001             BEQ.N    ??HAL_I2S_TxCpltCallback_1
   \   0000000E   0xD303             BCC.N    ??HAL_I2S_TxCpltCallback_2
   \   00000010   0xE00F             B.N      ??HAL_I2S_TxCpltCallback_3
   \                     ??HAL_I2S_TxCpltCallback_1: (+1)
   \   00000012   0x2140             MOVS     R1,#+64
   \   00000014   0x....             LDR.N    R0,??DataTable23_3
   \   00000016   0xE004             B.N      ??HAL_I2S_TxCpltCallback_4
   \                     ??HAL_I2S_TxCpltCallback_2: (+1)
   \   00000018   0x2140             MOVS     R1,#+64
   \   0000001A   0x....             LDR.N    R0,??DataTable23_2
   \   0000001C   0xE001             B.N      ??HAL_I2S_TxCpltCallback_4
   \                     ??HAL_I2S_TxCpltCallback_0: (+1)
   \   0000001E   0x2140             MOVS     R1,#+64
   \   00000020   0x....             LDR.N    R0,??DataTable23_1
   \                     ??HAL_I2S_TxCpltCallback_4: (+1)
   \   00000022   0x8822             LDRH     R2,[R4, #+0]
   \   00000024   0xEB00 0x1082      ADD      R0,R0,R2, LSL #+6
   \   00000028   0xF500 0x5000      ADD      R0,R0,#+8192
   \   0000002C   0x3028             ADDS     R0,R0,#+40
   \   0000002E   0x.... 0x....      BL       Audio_MAL_Play
   \                     ??HAL_I2S_TxCpltCallback_3: (+1)
   \   00000032   0x8820             LDRH     R0,[R4, #+0]
   \   00000034   0x.... 0x....      BL       AudioUSBSend
   \   00000038   0x8820             LDRH     R0,[R4, #+0]
   \   0000003A   0x1C40             ADDS     R0,R0,#+1
   \   0000003C   0x8020             STRH     R0,[R4, #+0]
   \   0000003E   0xB280             UXTH     R0,R0
   \   00000040   0x2840             CMP      R0,#+64
   \   00000042   0xD11F             BNE.N    ??HAL_I2S_TxCpltCallback_5
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable23_35
   \   00000048   0x82A8             STRH     R0,[R5, #+20]
   \   0000004A   0x82E8             STRH     R0,[R5, #+22]
   \   0000004C   0x83A8             STRH     R0,[R5, #+28]
   \   0000004E   0x8228             STRH     R0,[R5, #+16]
   \   00000050   0x81E8             STRH     R0,[R5, #+14]
   \   00000052   0x8268             STRH     R0,[R5, #+18]
   \   00000054   0x8328             STRH     R0,[R5, #+24]
   \   00000056   0x8368             STRH     R0,[R5, #+26]
   \   00000058   0x7028             STRB     R0,[R5, #+0]
   \   0000005A   0x8008             STRH     R0,[R1, #+0]
   \   0000005C   0x8020             STRH     R0,[R4, #+0]
   \   0000005E   0x78E8             LDRB     R0,[R5, #+3]
   \   00000060   0xB138             CBZ.N    R0,??HAL_I2S_TxCpltCallback_6
   \   00000062   0x2802             CMP      R0,#+2
   \   00000064   0xD001             BEQ.N    ??HAL_I2S_TxCpltCallback_7
   \   00000066   0xD302             BCC.N    ??HAL_I2S_TxCpltCallback_8
   \   00000068   0xE005             B.N      ??HAL_I2S_TxCpltCallback_9
   \                     ??HAL_I2S_TxCpltCallback_7: (+1)
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE002             B.N      ??HAL_I2S_TxCpltCallback_10
   \                     ??HAL_I2S_TxCpltCallback_8: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE000             B.N      ??HAL_I2S_TxCpltCallback_10
   \                     ??HAL_I2S_TxCpltCallback_6: (+1)
   \   00000072   0x2002             MOVS     R0,#+2
   \                     ??HAL_I2S_TxCpltCallback_10: (+1)
   \   00000074   0x70E8             STRB     R0,[R5, #+3]
   \                     ??HAL_I2S_TxCpltCallback_9: (+1)
   \   00000076   0x....             LDR.N    R0,??DataTable23_15
   \   00000078   0x8801             LDRH     R1,[R0, #+0]
   \   0000007A   0x2964             CMP      R1,#+100
   \   0000007C   0xDA02             BGE.N    ??HAL_I2S_TxCpltCallback_5
   \   0000007E   0x8801             LDRH     R1,[R0, #+0]
   \   00000080   0x1C49             ADDS     R1,R1,#+1
   \   00000082   0x8001             STRH     R1,[R0, #+0]
   1175          }
   \                     ??HAL_I2S_TxCpltCallback_5: (+1)
   \   00000084   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1176          

   \                                 In section .text, align 2, keep-with-next
   1177           uint8_t StartPlay(void)
   1178           {
   \                     StartPlay: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xF240 0x30FF      MOVW     R0,#+1023
   \   00000006   0x....             LDR.N    R4,??DataTable23
   1179          	while (1)
   1180          	{
   1181          		 /* there is data in the buffer */	
   1182          		 if((WaveRec_idxSens1>=(AUDIO_OUT_BUFFER_SIZE-1))&&(stFrstFrmStore<3))
   \                     ??StartPlay_0: (+1)
   \   00000008   0x8AA1             LDRH     R1,[R4, #+20]
   \   0000000A   0x4281             CMP      R1,R0
   \   0000000C   0xDBFC             BLT.N    ??StartPlay_0
   \   0000000E   0x7861             LDRB     R1,[R4, #+1]
   \   00000010   0x2903             CMP      R1,#+3
   \   00000012   0xDAF9             BGE.N    ??StartPlay_0
   1183          		 {
   1184          			 RESET_IDX
   \   00000014   0x2200             MOVS     R2,#+0
   1185          			 /* this is just run 1 time after 1st frame of I2S data full */
   1186          			 if ((stFrstFrmStore<3))
   1187          			 {
   1188                                       stFrstFrmStore++;
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0x82A2             STRH     R2,[R4, #+20]
   \   0000001A   0x82E2             STRH     R2,[R4, #+22]
   \   0000001C   0x83A2             STRH     R2,[R4, #+28]
   \   0000001E   0x8222             STRH     R2,[R4, #+16]
   \   00000020   0x81E2             STRH     R2,[R4, #+14]
   \   00000022   0x8262             STRH     R2,[R4, #+18]
   \   00000024   0x8322             STRH     R2,[R4, #+24]
   \   00000026   0x8362             STRH     R2,[R4, #+26]
   \   00000028   0x7022             STRB     R2,[R4, #+0]
   1189                       
   1190                                       buffer_switch = BUF2_PLAY; /* record data to buffer3 */
   \   0000002A   0x2201             MOVS     R2,#+1
   \   0000002C   0x7061             STRB     R1,[R4, #+1]
   1191                       
   1192                                       if (stFrstFrmStore==2)
   \   0000002E   0xB2C9             UXTB     R1,R1
   \   00000030   0x2902             CMP      R1,#+2
   \   00000032   0x70E2             STRB     R2,[R4, #+3]
   \   00000034   0xD1E8             BNE.N    ??StartPlay_0
   1193                                       {
   1194                                           
   1195                   
   1196                                           /*------------------------PLAYER------------------------------------------*/
   1197                                           Audio_MAL_Play((uint32_t)Buffer1.bufMIC1,2*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
   \   00000036   0x2140             MOVS     R1,#+64
   \   00000038   0x....             LDR.N    R0,??DataTable23_2
   \   0000003A   0x.... 0x....      BL       Audio_MAL_Play
   1198                                           /*------------------------------------------------------------------------*/				 
   1199                                           buffer_switch = BUF1_PLAY;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x70E0             STRB     R0,[R4, #+3]
   1200          								 uint16_t tdelay=100;
   1201          								 while(tdelay--);
   1202                                           //StartRecMic7_8();
   1203                                           return 0;		 
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
   1204                                       }				 
   1205                               
   1206          			 }
   1207          		 
   1208          		 }
   1209          	}
   1210           }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x........         DC32     flgDlyUpd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \   00000000   0x........         DC32     Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_4:
   \   00000000   0xE000EF50         DC32     0xe000ef50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_5:
   \   00000000   0xE000ED14         DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_6:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_7:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_8:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_9:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_10:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_11:
   \   00000000   0x........         DC32     AUDIO_Desc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_12:
   \   00000000   0x........         DC32     USBD_AUDIO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_13:
   \   00000000   0x........         DC32     USBD_AUDIO_fops

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_14:
   \   00000000   0x........         DC32     huart3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_15:
   \   00000000   0x........         DC32     cntStrt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_16:
   \   00000000   0x........         DC32     WaveRecord_flgIni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_17:
   \   00000000   0x........         DC32     SPI4_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_18:
   \   00000000   0x........         DC32     EnergyError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_19:
   \   00000000   0x........         DC32     ??ticks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_20:
   \   00000000   0x00100001         DC32     0x100001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_21:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_22:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_23:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_24:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_25:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_26:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_27:
   \   00000000   0x........         DC32     cntRisingEXTI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_28:
   \   00000000   0x........         DC32     btnSW1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_29:
   \   00000000   0x........         DC32     SS1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_30:
   \   00000000   0x........         DC32     bufferSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_31:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_32:
   \   00000000   0x........         DC32     hi2c2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_33:
   \   00000000   0x00A0689A         DC32     0xa0689a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_34:
   \   00000000   0x........         DC32     idxFrmPDMMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_35:
   \   00000000   0x........         DC32     WaveRec_idxTest

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x25 0x64          DC8 "%d:%d:%d:%d"
   \              0x3A 0x25    
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x3A 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x43 0x6C          DC8 "Close Mic 5\015\012"
   \              0x6F 0x73    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x35 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 2\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x32 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 4\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x34 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 1\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x31 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 3\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x33 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 6\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x36 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 7\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x37 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 8\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x38 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0
   1211          /*****************************END OF FILE**************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     144   BSP_AUDIO_OUT_ClockConfig
       144   -> HAL_RCCEx_GetPeriphCLKConfig
       144   -> HAL_RCCEx_PeriphCLKConfig
       8   ButtonInit
         8   -> HAL_GPIO_Init
         0   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
      16   DFT_Init
        16   -> arm_rfft_init_f32
       0   EXTI15_10_IRQHandler
       8   EXTI4_IRQHandler
         8   -> HAL_NVIC_DisableIRQ
       8   EXTI9_5_IRQHandler
         8   -> BSP_LED_Toggle
      16   FFT_Update
         0   -> AudioPlayerUpd
        16   -> CrssCor
        16   -> FactorUpd
        16   -> PDM2PCMSDO78
        16   -> SumDelay
      32   HAL_I2C_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
      16   HAL_I2S_TxCpltCallback
        16   -> AudioUSBSend
        16   -> Audio_MAL_Play
      32   HAL_UART_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       0   MX_I2C2_Init
         0   -> HAL_I2C_Init
       8   StartPlay
         8   -> Audio_MAL_Play
      36   SumDelay
     208   SystemClock_Config
       208   -> HAL_PWREx_EnableOverDrive
       208   -> HAL_RCCEx_PeriphCLKConfig
       208   -> HAL_RCC_ClockConfig
       208   -> HAL_RCC_OscConfig
       0   Toggle_Leds
       0   USART3_Init
         0   -> HAL_UART_Init
     168   main
       168   -> AUDIO_InitApplication
       168   -> BSP_LED_Init
       168   -> BSP_LED_Toggle
       168   -> BSP_SDRAM_Init
       168   -> ButtonInit
       168   -> DFT_Init
       168   -> EnergyNoiseCalc
       168   -> FFT_Update
       168   -> HAL_GPIO_Init
       168   -> HAL_GPIO_WritePin
       168   -> HAL_Init
       168   -> HAL_NVIC_EnableIRQ
       168   -> HAL_NVIC_SetPriority
       168   -> HAL_RCCEx_GetPeriphCLKConfig
       168   -> HAL_RCCEx_PeriphCLKConfig
       168   -> HAL_UART_Transmit_IT
       168   -> MIC1TO6_Init
       168   -> MX_I2C2_Init
       168   -> STA321MP_Ini
       168   -> StartPlay
       168   -> SystemClock_Config
       168   -> USART3_Init
       168   -> USBD_AUDIO_Init_Microphone_Descriptor
       168   -> USBD_AUDIO_RegisterInterface
       168   -> USBD_Init
       168   -> USBD_RegisterClass
       168   -> USBD_Start
       168   -> Window
       168   -> sprintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_10
       4  ??DataTable23_11
       4  ??DataTable23_12
       4  ??DataTable23_13
       4  ??DataTable23_14
       4  ??DataTable23_15
       4  ??DataTable23_16
       4  ??DataTable23_17
       4  ??DataTable23_18
       4  ??DataTable23_19
       4  ??DataTable23_2
       4  ??DataTable23_20
       4  ??DataTable23_21
       4  ??DataTable23_22
       4  ??DataTable23_23
       4  ??DataTable23_24
       4  ??DataTable23_25
       4  ??DataTable23_26
       4  ??DataTable23_27
       4  ??DataTable23_28
       4  ??DataTable23_29
       4  ??DataTable23_3
       4  ??DataTable23_30
       4  ??DataTable23_31
       4  ??DataTable23_32
       4  ??DataTable23_33
       4  ??DataTable23_34
       4  ??DataTable23_35
       4  ??DataTable23_4
       4  ??DataTable23_5
       4  ??DataTable23_6
       4  ??DataTable23_7
       4  ??DataTable23_8
       4  ??DataTable23_9
      12  ?_0
      16  ?_1
      16  ?_2
      16  ?_3
      16  ?_4
      16  ?_5
      16  ?_6
      16  ?_7
      16  ?_8
     100  BSP_AUDIO_OUT_ClockConfig
    4096  BufferTest
      72  ButtonInit
     116  DFT_Init
       2  DeltaBuf1
       2  DeltaBuf1Old
       2  EXTI15_10_IRQHandler
      42  EXTI4_IRQHandler
      78  EXTI9_5_IRQHandler
     174  FFT_Update
     188  HAL_I2C_MspInit
     134  HAL_I2S_TxCpltCallback
     106  HAL_UART_MspInit
      44  MX_I2C2_Init
       4  Main_CoefMor
     220  SS1
          SS2
          SS3
          SS4
          ISS
          S1
          S2
          S3
          S4
          IS
      68  StartPlay
     212  SumDelay
     160  SystemClock_Config
      18  Toggle_Leds
      42  USART3_Init
    1024  aRxBuffer
       1  appli_state
       4  btnSW1
          btnSW2
          cntBtnPress
          Command_index
    2052  bufferSum
          idxLatency13
          idxLatency12
       2  cntRisingEXTI
       1  flagNotMin
    2824  flgDlyUpd
          stFrstFrmStore
          flg10ms
          buffer_switch
          stDir
          flgS2
          flgS3
          flgS4
          flgS2Flt
          flgS3Flt
          flgS4Flt
          flgS2Ins
          flgS3Ins
          flgS4Ins
          WaveRec_idxSens4
          WaveRec_idxSens3
          I2S2_idxTmp
          WaveRec_idxSens1
          WaveRec_idxSens2
          WaveRec_idxSens5
          WaveRec_idxSens6
          idxSPI5DataBuf3
          idxLatency14
          idxLatency25
          idxLatency63
          idxLatency78
          cntTime200
          GPIO_INS
          FacMic
          CrssCorVal78
          CrssCorVal14
          CrssCorVal25
          CrssCorVal63
          hUSBDDevice
          fir256Coff
          pUARTBuf
       1  flgSTAIni
     696  hUSBHost
     100  hspi4
     112  huart3
       1  idxDec
    1038  main
      20  pI2CData
      12  pI2CRx
       4  ticks

 
 8 330 bytes in section .bss
 2 848 bytes in section .data
 2 878 bytes in section .text
 
  2 878 bytes of CODE memory
 11 178 bytes of DATA memory

Errors: none
Warnings: 1
