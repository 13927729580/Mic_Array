###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       25/Feb/2016  12:02:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\main.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\main.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
      1          /* Includes ------------------------------------------------------------------*/
      2          #include "main.h"
      3          #include "DSP.h"
      4          //#include "waveplayer.h"
      5          #include "waverecorder.h"
      6          #include "stm32f7xx_hal_usart.h"
      7          #include "pdm_filter.h"
      8          #include "arm_math.h"
      9          #include <stdio.h>
     10          
     11          
     12          /* Private typedef -----------------------------------------------------------*/
     13          /* Private define ------------------------------------------------------------*/
     14          /* Private macro -------------------------------------------------------------*/
     15          
     16          
     17          /* EXTERN VARIABLES ----------------------------------------------------------*/
     18          //extern __IO AUDIO_IN_BufferTypeDef Buffer1, Buffer2, BufferCtlRecIn;
     19          //AUDIO_IN_BufferTypeDef Buffer3;
     20          
     21          
     22          
     23          
     24          extern Mic_Array_Data Buffer1,Buffer2,Buffer3;
     25          
     26          extern __IO uint8_t XferCplt;
     27          extern __IO AUDIO_IN_BufferTypeDef BufferCtlRecIn;
     28          extern DMA_HandleTypeDef     DmaHandle;
     29          
     30          extern SAI_HandleTypeDef         haudio_out_sai;
     31          extern uint8_t WaveRecord_flgIni;
     32          extern uint32_t EnergySound;
     33          extern I2C_HandleTypeDef hi2c2;
     34          extern __IO uint16_t cntStrt;
     35          extern __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
     36          extern __IO   uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
     37          extern USBD_AUDIO_ItfTypeDef  USBD_AUDIO_fops;
     38          /* GLOBAL VARIABLE -----------------------------------------------------------*/

   \                                 In section .bss, align 4
     39          USBH_HandleTypeDef hUSBHost;
   \                     hUSBHost:
   \   00000000                      DS8 696
     40          USBD_HandleTypeDef hUSBDDevice;

   \                                 In section .bss, align 1
     41          AUDIO_ApplicationTypeDef appli_state = APPLICATION_IDLE;//APPLICATION_IDLE
   \                     appli_state:
   \   00000000                      DS8 1
     42          

   \                                 In section .bss, align 4
     43          UART_HandleTypeDef huart3;
   \                     huart3:
   \   00000000                      DS8 112

   \                                 In section .bss, align 4
     44          SPI_HandleTypeDef hspi4;
   \                     hspi4:
   \   00000000                      DS8 100
     45          GPIO_InitTypeDef GPIO_INS;
     46          Mic_Array_Coef_f FacMic;
     47          	  
     48          uint8_t  pI2CData[20]= {0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190};

   \                                 In section .bss, align 4
     49          uint8_t  pI2CRx[10];
   \                     pI2CRx:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     50          uint16_t BufferTest[2*AUDIO_OUT_BUFFER_SIZE];
   \                     BufferTest:
   \   00000000                      DS8 4096
     51          uint16_t bufferSum[AUDIO_OUT_BUFFER_SIZE];
     52          
     53          __IO uint16_t  WaveRec_idxSens4,WaveRec_idxSens3,I2S2_idxTmp;
     54          __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     55          __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     56          __IO uint16_t  idxSPI5DataBuf3;

   \                                 In section .bss, align 2
     57          __IO uint16_t  cntRisingEXTI;
   \                     cntRisingEXTI:
   \   00000000                      DS8 2
     58          __IO uint8_t   btnSW1,btnSW2;
     59          __IO uint8_t   flgDlyUpd; 
     60          __IO uint8_t   cntBtnPress;
     61          
     62          extern __IO uint16_t  WaveRec_idxTest;
     63          
     64          
     65          /* Buffer used for reception */

   \                                 In section .bss, align 4
     66          uint8_t aRxBuffer[1024];
   \                     aRxBuffer:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 1
     67          uint8_t idxDec,stFrstFrmStore;
   \                     idxDec:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     68          int16_t DeltaBuf1,DeltaBuf1Old;
   \                     DeltaBuf1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     DeltaBuf1Old:
   \   00000000                      DS8 2
     69          int16_t idxLatency13,idxLatency12,idxLatency14,idxLatency25,idxLatency63,idxLatency78;
     70          
     71          __IO char flg10ms;

   \                                 In section .bss, align 1
     72          uint8_t flgSTAIni;
   \                     flgSTAIni:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     GPIO_INS:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     FacMic:
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     flgDlyUpd:
   \   0000002C   0x00               DC8 0
   \                     stFrstFrmStore:
   \   0000002D   0x00               DC8 0
   \                     flg10ms:
   \   0000002E   0x00               DC8 0
     73          uint16_t cntTime200;
     74          
     75          uint8_t buffer_switch = 1;
   \                     buffer_switch:
   \   0000002F   0x01               DC8 1
   \                     WaveRec_idxSens4:
   \   00000030   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens3:
   \   00000032   0x00 0x00          DC8 0, 0
   \                     I2S2_idxTmp:
   \   00000034   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens1:
   \   00000036   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens2:
   \   00000038   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens5:
   \   0000003A   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens6:
   \   0000003C   0x00 0x00          DC8 0, 0
   \                     idxSPI5DataBuf3:
   \   0000003E   0x00 0x00          DC8 0, 0
   \                     idxLatency13:
   \   00000040   0x00 0x00          DC8 0, 0
   \                     idxLatency12:
   \   00000042   0x00 0x00          DC8 0, 0
   \                     idxLatency14:
   \   00000044   0x00 0x00          DC8 0, 0
   \                     idxLatency25:
   \   00000046   0x00 0x00          DC8 0, 0
   \                     idxLatency63:
   \   00000048   0x00 0x00          DC8 0, 0
   \                     idxLatency78:
   \   0000004A   0x00 0x00          DC8 0, 0
   \                     cntTime200:
   \   0000004C   0x00 0x00          DC8 0, 0
   \   0000004E   0x00 0x00          DC8 0, 0
   \                     bufferSum:
   \   00000050   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000060   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000070   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000080   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000090   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000E0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000100   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000110   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000120   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000130   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000140   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000150   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000160   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000170   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000180   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000190   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001A0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001B0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001C0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001D0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001E0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000200   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000210   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000220   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000230   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000240   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000250   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000260   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000270   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000280   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000290   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002A0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002B0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002C0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002D0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002E0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000300   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000310   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000320   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000330   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000340   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000350   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000360   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000370   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000380   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000390   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003A0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003B0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003C0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003D0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003E0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000400   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000410   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000420   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000430   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000440   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000450   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000460   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000470   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000480   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000490   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004A0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004B0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004C0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004D0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004E0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000500   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000510   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000520   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000530   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000540   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000550   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000560   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000570   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000580   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000590   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005A0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005B0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005C0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005D0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005E0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000600   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000610   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000620   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000630   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000640   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000650   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000660   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000670   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000680   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000690   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006A0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006B0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006C0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006D0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006E0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000700   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000710   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000720   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000730   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000740   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000750   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000760   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000770   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000780   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000790   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007A0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007B0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007C0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007D0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007E0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000800   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000810   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000820   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000830   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000840   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     hUSBDDevice:
   \   00000850   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000860   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000870   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000880   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000890   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008A0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008B0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008C0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008D0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008E0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000900   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000910   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000920   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000930   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000940   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000950   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000960   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000970   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000980   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000990   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009A0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009B0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009C0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009D0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009E0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A00   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A10   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A20   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A30   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A40   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A50   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A60   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     pI2CData:
   \   00000000   0x00 0x0A          DC8 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150
   \              0x14 0x1E    
   \              0x28 0x32    
   \              0x3C 0x46    
   \              0x50 0x5A    
   \              0x64 0x6E    
   \              0x78 0x82    
   \              0x8C 0x96    
   \   00000010   0xA0 0xAA          DC8 160, 170, 180, 190
   \              0xB4 0xBE    

   \                                 In section .data, align 1
   \                     btnSW1:
   \   00000000   0x00               DC8 0
   \                     btnSW2:
   \   00000001   0x00               DC8 0
   \                     cntBtnPress:
   \   00000002   0x00               DC8 0
     76          uint8_t Command_index=1;
   \                     Command_index:
   \   00000003   0x01               DC8 1
     77          
     78          #if MAIN_CRSCORR
     79          arm_rfft_instance_q15 RealFFT_Ins, RealIFFT_Ins;
     80          #endif
     81          

   \                                 In section .bss, align 4
     82          arm_cfft_radix4_instance_f32 SS1,SS2,SS3,SS4,ISS; 
   \                     SS1:
   \   00000000                      DS8 20
   \                     SS2:
   \   00000014                      DS8 20
   \                     SS3:
   \   00000028                      DS8 20
   \                     SS4:
   \   0000003C                      DS8 20
   \                     ISS:
   \   00000050                      DS8 20
     83          arm_rfft_instance_f32 S1,S2,S3,S4,IS;
   \                     `S1`:
   \   00000064                      DS8 24
   \                     `S2`:
   \   0000007C                      DS8 24
   \                     `S3`:
   \   00000094                      DS8 24
   \                     `S4`:
   \   000000AC                      DS8 24
   \                     IS:
   \   000000C4                      DS8 24
     84          
     85          //arm_rfft_fast_instance_f32 S1,S2,S3,S4,IS;
     86          
     87          
     88          #if (DEBUG)
     89          uint8_t  pUARTBuf[128];
     90          uint32_t Main_CoefMor;
     91          uint8_t stDir,flgS2,flgS3,flgS4,flgS2Flt,flgS3Flt,flgS4Flt;
     92          uint8_t flgS2Ins,flgS3Ins,flgS4Ins;
     93          #endif
     94          
     95          #if USB_STREAMING
     96          extern __IO uint16_t idxFrmPDMMic8;
     97          #endif
     98          
     99          
    100          /* Private function prototypes -----------------------------------------------*/
    101          static void SystemClock_Config(void);
    102          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id);
    103          static void CPU_CACHE_Enable(void);
    104          
    105          
    106          
    107          
    108          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c);
    109          void MX_I2C2_Init(void);
    110          void USART3_Init(void);
    111          void ReadSTASeq(uint8_t Addr, uint8_t *pBufOut,uint8_t Len );
    112          void WriteSTAByte(uint8_t Addr, uint8_t *pBufIn, uint8_t len);
    113          void SPI5_CallBack(SPI_HandleTypeDef *hspi);
    114          uint8_t StartPlay(void);
    115          
    116          
    117          /*--------------INLINE FUNCTION-----------------------------------------------*/
    118          

   \                                 In section .text, align 2, keep-with-next
    119          inline static void FFT_Update(void)
    120          {
   \                     FFT_Update: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable14
    121          
    122                PDM2PCMSDO78();
   \   00000008   0x.... 0x....      BL       PDM2PCMSDO78
    123                /* Hafl buffer is filled in by I2S data stream in */
    124                if((flgDlyUpd==0))
   \   0000000C   0xF894 0x002C      LDRB     R0,[R4, #+44]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD14B             BNE.N    ??FFT_Update_0
    125                {
    126                      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15); 
    127                      FactorUpd(&FacMic); 
   \   00000014   0xF104 0x0014      ADD      R0,R4,#+20
   \   00000018   0x.... 0x....      BL       FactorUpd
    128                      //STM_EVAL_LEDOn(LED3);
    129                      flgDlyUpd = 1; 
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xF884 0x002C      STRB     R0,[R4, #+44]
    130          /*-------------------------------------------------------------------------------------------------------------
    131          			  
    132          	Sequence  Record Data                     Processing Data                 Player Data
    133          			  
    134          	1-------  Buffer1                         Buffer2                         Buffer3
    135          			  
    136          	2-------  Buffer3                         Buffer1                         Buffer2		  
    137          			  
    138          	3-------  Buffer2                         Buffer3                         Buffer1 
    139           ---------------------------------------------------------------------------------------------------------------*/
    140                      /* Processing Data */
    141          			switch (buffer_switch)
   \   00000022   0xF894 0x002F      LDRB     R0,[R4, #+47]
   \   00000026   0xB118             CBZ.N    R0,??FFT_Update_1
   \   00000028   0x2802             CMP      R0,#+2
   \   0000002A   0xD007             BEQ.N    ??FFT_Update_2
   \   0000002C   0xD303             BCC.N    ??FFT_Update_3
   \   0000002E   0xE038             B.N      ??FFT_Update_4
    142          			{             
    143          			    case BUF1_PLAY:
    144          #if MAIN_CRSCORR
    145          					for (uint16_t i=0; i<(_MAX_SS/_MAX_SS);i++)
    146          					{
    147          					    //uint16_t i=0;
    148          						arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3[i*128],    (q15_t *)&bufferFFT[i*256]);
    149          						arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3_1[i*128],   (q15_t *)&bufferFFT_1[i*256]);
    150          					
    151          						arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],2*128);
    152          					
    153          						//for (uint16_t j=0; j<256;j++)
    154          						//{
    155          						//	  bufferFFTSum[i*256+j]<<=6;
    156          						//}
    157          						
    158          						arm_rfft_q15(&RealIFFT_Ins,    (q15_t *)&bufferFFTSum[i*256],    (q15_t *)&bufferSum[i*128]);
    159          					}
    160          #elif MAIN_FFT
    161                              /* Summing in Buffer3 */
    162                              Delay_Sum_FFT(&Buffer3,&FacMic,(int16_t *)bufferSum, 512);
    163          			 	   //FFT_SUM((int16_t *)buffer3, (int16_t * )buffer3_1,fbuffer, 1024);	
    164          			 	   
    165          
    166          #else
    167          
    168                              //idxLatency13 = CrssCor(Buffer3.bufMIC1, Buffer3.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2);
    169                              //idxLatency12 = CrssCor(Buffer3.bufMIC1, Buffer3.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    170          
    171          					idxLatency78 = CrssCor(Buffer3.bufMIC7, Buffer3.bufMIC8, AUDIO_OUT_BUFFER_SIZE);
   \                     ??FFT_Update_1: (+1)
   \   00000030   0x.... 0x....      LDR.W    R5,??DataTable14_1
   \   00000034   0xE004             B.N      ??FFT_Update_5
    172                              idxLatency14 = CrssCor(Buffer3.bufMIC1, Buffer3.bufMIC4, AUDIO_OUT_BUFFER_SIZE);
    173          					idxLatency25 = CrssCor(Buffer3.bufMIC2, Buffer3.bufMIC5, AUDIO_OUT_BUFFER_SIZE);
    174          					idxLatency63 = CrssCor(Buffer3.bufMIC6, Buffer3.bufMIC3, AUDIO_OUT_BUFFER_SIZE);
    175          
    176          
    177                              SumDelay(&Buffer3);
    178          #endif
    179          					
    180          					break;
    181          				case BUF2_PLAY:
    182          
    183          #if MAIN_CRSCORR
    184                               for (uint16_t i=0; i<(_MAX_SS/128);i++)
    185                               { 
    186                                   //uint16_t i=0;
    187          				         arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1[i*128],(q15_t *)&bufferFFT[i*256]);
    188          	           		     arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    189          
    190          						 arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],
    191          						 	          2*128);
    192          
    193          						 //for (uint16_t j=0; j<256;j++)
    194          						 //{
    195          						//	   bufferFFTSum[i*256+j]<<=6;
    196          						 //}
    197          
    198          						 
    199          	                     arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    200                               }
    201          #elif MAIN_FFT
    202          					/* Summing in Buffer1 */	 
    203          					Delay_Sum_FFT(&Buffer1, &FacMic,(int16_t * )bufferSum,512);
    204          					//FFT_SUM((int16_t *)buffer1, (int16_t * )buffer1_1,fbuffer, 1024);
    205          
    206          #else
    207                          
    208                            //idxLatency13 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    209                            //idxLatency12 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    210          		
    211                            idxLatency78 = CrssCor(Buffer1.bufMIC7, Buffer1.bufMIC8, AUDIO_OUT_BUFFER_SIZE);	
   \                     ??FFT_Update_3: (+1)
   \   00000036   0x.... 0x....      LDR.W    R5,??DataTable14_2
   \   0000003A   0xE001             B.N      ??FFT_Update_5
    212                            idxLatency14 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC4, AUDIO_OUT_BUFFER_SIZE);
    213                            idxLatency25 = CrssCor(Buffer1.bufMIC2, Buffer1.bufMIC5, AUDIO_OUT_BUFFER_SIZE);
    214                            idxLatency63 = CrssCor(Buffer1.bufMIC6, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE);
    215          
    216          
    217          
    218                            SumDelay(&Buffer1);
    219          #endif
    220          					break;
    221          					
    222          				case BUF3_PLAY:
    223          #if MAIN_CRSCORR
    224          					for (uint16_t i=0; i<(_MAX_SS/128);i++)
    225          					{
    226          						
    227          						arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2[i*128],(q15_t *)&bufferFFT[i*256]);
    228          						arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    229          					
    230          						arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],	(q15_t *)&bufferFFTSum[i*256],
    231          									 2*128);
    232          					
    233          						//for (uint16_t j=0; j<256;j++)
    234          						//{
    235          					    //   bufferFFTSum[i*256+j]<<=6;
    236          					    //}
    237          					
    238          						
    239          						arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    240          					}
    241          
    242          #elif MAIN_FFT
    243          					/* Summing in Buffer2 */
    244                                                  Delay_Sum_FFT(&Buffer2,&FacMic, (int16_t * )bufferSum, 512);
    245                                                 //FFT_SUM((int16_t *)buffer2, (int16_t * )buffer2_1,fbuffer, 1024);
    246          
    247          					
    248          #else
    249          
    250          					//idxLatency13 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    251                              //idxLatency12 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    252          
    253          					idxLatency78 = CrssCor(Buffer2.bufMIC7, Buffer2.bufMIC8, AUDIO_OUT_BUFFER_SIZE);
   \                     ??FFT_Update_2: (+1)
   \   0000003C   0x.... 0x....      LDR.W    R5,??DataTable14_3
   \                     ??FFT_Update_5: (+1)
   \   00000040   0xF505 0x41E0      ADD      R1,R5,#+28672
   \   00000044   0xF505 0x40C0      ADD      R0,R5,#+24576
   \   00000048   0xF44F 0x6280      MOV      R2,#+1024
   \   0000004C   0x318C             ADDS     R1,R1,#+140
   \   0000004E   0x3078             ADDS     R0,R0,#+120
   \   00000050   0x.... 0x....      BL       CrssCor
   \   00000054   0xF8A4 0x004A      STRH     R0,[R4, #+74]
    254          					idxLatency14 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC4, AUDIO_OUT_BUFFER_SIZE);
   \   00000058   0xF505 0x5140      ADD      R1,R5,#+12288
   \   0000005C   0xF44F 0x6280      MOV      R2,#+1024
   \   00000060   0x313C             ADDS     R1,R1,#+60
   \   00000062   0x4628             MOV      R0,R5
   \   00000064   0x.... 0x....      BL       CrssCor
   \   00000068   0xF8A4 0x0044      STRH     R0,[R4, #+68]
    255          					idxLatency25 = CrssCor(Buffer2.bufMIC2, Buffer2.bufMIC5, AUDIO_OUT_BUFFER_SIZE);
   \   0000006C   0xF505 0x4180      ADD      R1,R5,#+16384
   \   00000070   0xF505 0x5080      ADD      R0,R5,#+4096
   \   00000074   0xF44F 0x6280      MOV      R2,#+1024
   \   00000078   0x3150             ADDS     R1,R1,#+80
   \   0000007A   0x3014             ADDS     R0,R0,#+20
   \   0000007C   0x.... 0x....      BL       CrssCor
   \   00000080   0xF8A4 0x0046      STRH     R0,[R4, #+70]
    256          					idxLatency63 = CrssCor(Buffer2.bufMIC6, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE);
   \   00000084   0xF505 0x5100      ADD      R1,R5,#+8192
   \   00000088   0xF505 0x40A0      ADD      R0,R5,#+20480
   \   0000008C   0xF44F 0x6280      MOV      R2,#+1024
   \   00000090   0x3128             ADDS     R1,R1,#+40
   \   00000092   0x3064             ADDS     R0,R0,#+100
   \   00000094   0x.... 0x....      BL       CrssCor
   \   00000098   0xF8A4 0x0048      STRH     R0,[R4, #+72]
    257          
    258                               SumDelay(&Buffer2);
   \   0000009C   0x4628             MOV      R0,R5
   \   0000009E   0x.... 0x....      BL       SumDelay
    259          #endif
    260          					break;
    261          					
    262          				default:
    263          					break;
    264                         
    265          			}
    266          			AudioPlayerUpd();
   \                     ??FFT_Update_4: (+1)
   \   000000A2   0xB001             ADD      SP,SP,#+4
   \   000000A4   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   000000A8   0x.... 0x....      B.W      AudioPlayerUpd
    267          	       //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
    268          	  }
    269          	  
    270          
    271          }
   \                     ??FFT_Update_0: (+1)
   \   000000AC   0xB001             ADD      SP,SP,#+4
   \   000000AE   0xBD30             POP      {R4,R5,PC}       ;; return
    272          
    273          
    274          inline static void Audio_Play_Out(void)
    275          {
    276          
    277          /*-------------------------------------------------------------------------------------------------------------
    278          			  
    279          	Sequence  Record Data                     Processing Data                 Player Data
    280          			  
    281          	1-------  Buffer1                         Buffer2                          Buffer3
    282          			  
    283          	2-------  Buffer3                         Buffer1                           Buffer2		  
    284          			  
    285          	3-------  Buffer2                         Buffer3                           Buffer1 
    286           ---------------------------------------------------------------------------------------------------------------*/
    287              switch (buffer_switch)
    288              {
    289                case BUF1_PLAY:
    290                  /* Play data from buffer1 */
    291          	    Audio_MAL_Play((uint32_t)&Buffer3.bufMIC3[idxFrmPDMMic8*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000)] , 2*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
    292          
    293                  break;
    294                case BUF2_PLAY:
    295                  /* Play data from buffer2 */
    296          	    Audio_MAL_Play((uint32_t)&Buffer1.bufMIC3[idxFrmPDMMic8*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000)], 2*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
    297                  
    298                  break;
    299                case BUF3_PLAY:
    300                  /* Play data from buffer1 */
    301                  Audio_MAL_Play((uint32_t)&Buffer2.bufMIC3[idxFrmPDMMic8*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000)] ,2*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
    302          
    303                  break;
    304                default:
    305                  break;
    306              }
    307              
    308          #if USB_STREAMING
    309              AudioUSBSend(idxFrmPDMMic8);
    310          #endif
    311          
    312          	/* if player is finished for curent buffer                                  */ 
    313          	if (++idxFrmPDMMic8 == AUDIO_OUT_BUFFER_SIZE/(AUDIO_SAMPLING_FREQUENCY/1000))
    314          	{
    315          	   RESET_IDX
    316                 WaveRec_idxTest=0;
    317                 idxFrmPDMMic8=0;
    318                      switch (buffer_switch)
    319                      {
    320                          case BUF1_PLAY:
    321                                /* set flag for switch buffer */		  
    322                            buffer_switch = BUF3_PLAY;
    323                            break;
    324                          case BUF2_PLAY:
    325                            /* set flag for switch buffer */
    326                            buffer_switch = BUF1_PLAY;        
    327                            break;
    328                          case BUF3_PLAY:
    329                            /* set flag for switch buffer */		  
    330                            buffer_switch = BUF2_PLAY;
    331                            break;
    332                          default:
    333                            break;
    334                      }
    335                    if (cntStrt<100) cntStrt++;
    336          	}			   
    337          }
    338          
    339          
    340          /* Private functions ---------------------------------------------------------*/
    341          
    342          /**
    343            * @brief  Main program
    344            * @param  None
    345            * @retval None
    346            */

   \                                 In section .text, align 4, keep-with-next
    347          int main(void)
    348          {
   \                     main: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0A2             SUB      SP,SP,#+136
    349            /* Enable the CPU Cache */
    350            CPU_CACHE_Enable();
   \   00000006   0xF3BF 0x8F4F      DSB      
   \   0000000A   0xF3BF 0x8F6F      ISB      
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_4  ;; 0xe000ed14
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xF8C0 0x123C      STR      R1,[R0, #+572]
   \   00000018   0x6801             LDR      R1,[R0, #+0]
   \   0000001A   0xF441 0x3100      ORR      R1,R1,#0x20000
   \   0000001E   0x6001             STR      R1,[R0, #+0]
   \   00000020   0xF3BF 0x8F4F      DSB      
   \   00000024   0xF3BF 0x8F6F      ISB      
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x6701             STR      R1,[R0, #+112]
   \   0000002C   0xF3BF 0x8F4F      DSB      
   \   00000030   0xF8D0 0x106C      LDR.W    R1,[R0, #+108]
   \   00000034   0xF3C1 0x324E      UBFX     R2,R1,#+13,#+15
   \                     ??main_0: (+1)
   \   00000038   0xF643 0x74E0      MOVW     R4,#+16352
   \   0000003C   0xF3C1 0x03C9      UBFX     R3,R1,#+3,#+10
   \   00000040   0xEA04 0x1442      AND      R4,R4,R2, LSL #+5
   \                     ??main_1: (+1)
   \   00000044   0xEA44 0x7583      ORR      R5,R4,R3, LSL #+30
   \   00000048   0xF8C0 0x524C      STR      R5,[R0, #+588]
   \   0000004C   0x461D             MOV      R5,R3
   \   0000004E   0x1E6B             SUBS     R3,R5,#+1
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xD1F7             BNE.N    ??main_1
   \   00000054   0x4613             MOV      R3,R2
   \   00000056   0x1E5A             SUBS     R2,R3,#+1
   \   00000058   0x2B00             CMP      R3,#+0
   \   0000005A   0xD1ED             BNE.N    ??main_0
   \   0000005C   0xF3BF 0x8F4F      DSB      
   \   00000060   0x6801             LDR      R1,[R0, #+0]
   \   00000062   0xF441 0x3180      ORR      R1,R1,#0x10000
   \   00000066   0x6001             STR      R1,[R0, #+0]
   \   00000068   0xF3BF 0x8F4F      DSB      
   \   0000006C   0xF3BF 0x8F6F      ISB      
    351            
    352            /* STM32F7xx HAL library initialization:
    353                 - Configure the Flash ART accelerator on ITCM interface
    354                 - Configure the Systick to generate an interrupt each 1 msec
    355                 - Set NVIC Group Priority to 4
    356                 - Global MSP (MCU Support Package) initialization
    357               */   
    358            HAL_Init();
   \   00000070   0x.... 0x....      BL       HAL_Init
    359            
    360            /* Configure the system clock to 216 MHz */
    361            //Test_SystemClock_Config(); 
    362            SystemClock_Config();
   \   00000074   0x.... 0x....      BL       SystemClock_Config
    363            BSP_AUDIO_OUT_ClockConfig(AUDIO_FREQ, NULL);
   \   00000078   0xA801             ADD      R0,SP,#+4
   \   0000007A   0x.... 0x....      LDR.W    R5,??DataTable14_5  ;; 0x40023830
   \   0000007E   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
   \   00000082   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000086   0x.... 0x....      LDR.W    R4,??DataTable14
   \   0000008A   0x9001             STR      R0,[SP, #+4]
   \   0000008C   0xF44F 0x0080      MOV      R0,#+4194304
   \   00000090   0x9011             STR      R0,[SP, #+68]
   \   00000092   0xF44F 0x70AC      MOV      R0,#+344
   \   00000096   0x9002             STR      R0,[SP, #+8]
   \   00000098   0x2007             MOVS     R0,#+7
   \   0000009A   0x9004             STR      R0,[SP, #+16]
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x900A             STR      R0,[SP, #+40]
   \   000000A0   0xA801             ADD      R0,SP,#+4
   \   000000A2   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    364            
    365            /* Initialize the SDRAM */
    366            BSP_SDRAM_Init();
   \   000000A6   0x.... 0x....      BL       BSP_SDRAM_Init
    367          
    368            BSP_LED_Init(LED1);
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x.... 0x....      LDR.W    R8,??DataTable14_6
   \   000000B0   0x.... 0x....      BL       BSP_LED_Init
    369            BSP_LED_Init(LED2);
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0x.... 0x....      LDR.W    R7,??DataTable14_7
   \   000000BA   0x.... 0x....      BL       BSP_LED_Init
    370          
    371            /* Button Initialization */
    372            ButtonInit();
   \   000000BE   0x.... 0x....      BL       ButtonInit
    373            //BSP_PB_Init(BUTTON_KEY,BUTTON_MODE_EXTI);
    374          
    375            
    376            /* Init TS module */
    377            //BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
    378             DFT_Init();	
   \   000000C2   0x.... 0x....      BL       DFT_Init
    379          
    380              /* ---------PA4: LCCKO-------------*/
    381              __GPIOA_CLK_ENABLE();
   \   000000C6   0x6828             LDR      R0,[R5, #+0]
    382              GPIO_INS.Pin = GPIO_PIN_4;
    383              GPIO_INS.Mode =GPIO_MODE_IT_RISING;
    384              GPIO_INS.Pull =GPIO_NOPULL;
    385              GPIO_INS.Speed =GPIO_SPEED_HIGH;
    386              HAL_GPIO_Init(GPIOA,&GPIO_INS);
   \   000000C8   0x4621             MOV      R1,R4
   \   000000CA   0x.... 0x....      LDR.W    R6,??DataTable14_8
   \   000000CE   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000000D2   0x6028             STR      R0,[R5, #+0]
   \   000000D4   0x6828             LDR      R0,[R5, #+0]
   \   000000D6   0xF000 0x0001      AND      R0,R0,#0x1
   \   000000DA   0x9000             STR      R0,[SP, #+0]
   \   000000DC   0x9800             LDR      R0,[SP, #+0]
   \   000000DE   0x2010             MOVS     R0,#+16
   \   000000E0   0x6020             STR      R0,[R4, #+0]
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable14_9  ;; 0x10110000
   \   000000E6   0x6060             STR      R0,[R4, #+4]
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0x60A0             STR      R0,[R4, #+8]
   \   000000EC   0x2003             MOVS     R0,#+3
   \   000000EE   0x60E0             STR      R0,[R4, #+12]
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable14_10  ;; 0x40020000
   \   000000F4   0x.... 0x....      BL       HAL_GPIO_Init
    387          
    388              /* Enable and set Button EXTI Interrupt to the lowest priority */
    389              HAL_NVIC_SetPriority((IRQn_Type)EXTI4_IRQn, INTERRUPT_PRI_EXT_LRCK, 0);
   \   000000F8   0x2200             MOVS     R2,#+0
   \   000000FA   0x2106             MOVS     R1,#+6
   \   000000FC   0x200A             MOVS     R0,#+10
   \   000000FE   0x.... 0x....      BL       HAL_NVIC_SetPriority
    390              HAL_NVIC_EnableIRQ((IRQn_Type)EXTI4_IRQn);
   \   00000102   0x200A             MOVS     R0,#+10
   \   00000104   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    391              /*-----------------------*/
    392          
    393              /*---------PE3: POWER DOWN-----------------*/
    394              __GPIOE_CLK_ENABLE();
   \   00000108   0x6828             LDR      R0,[R5, #+0]
    395              GPIO_INS.Pin = GPIO_PIN_3;
    396              GPIO_INS.Mode = GPIO_MODE_OUTPUT_PP;
    397              GPIO_INS.Pull = GPIO_PULLUP;
    398              GPIO_INS.Speed = GPIO_SPEED_HIGH;
    399          
    400              HAL_GPIO_Init(GPIOE, &GPIO_INS);
   \   0000010A   0x4621             MOV      R1,R4
   \   0000010C   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000110   0x6028             STR      R0,[R5, #+0]
   \   00000112   0x6828             LDR      R0,[R5, #+0]
   \   00000114   0x.... 0x....      LDR.W    R5,??DataTable14_11  ;; 0x40021000
   \   00000118   0xF000 0x0010      AND      R0,R0,#0x10
   \   0000011C   0x9000             STR      R0,[SP, #+0]
   \   0000011E   0x9800             LDR      R0,[SP, #+0]
   \   00000120   0x2008             MOVS     R0,#+8
   \   00000122   0x6020             STR      R0,[R4, #+0]
   \   00000124   0x2001             MOVS     R0,#+1
   \   00000126   0x6060             STR      R0,[R4, #+4]
   \   00000128   0x60A0             STR      R0,[R4, #+8]
   \   0000012A   0x2003             MOVS     R0,#+3
   \   0000012C   0x60E0             STR      R0,[R4, #+12]
   \   0000012E   0x4628             MOV      R0,R5
   \   00000130   0x.... 0x....      BL       HAL_GPIO_Init
    401            
    402              HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
   \   00000134   0x2200             MOVS     R2,#+0
   \   00000136   0x2108             MOVS     R1,#+8
   \   00000138   0x4628             MOV      R0,R5
   \   0000013A   0x.... 0x....      LDR.W    R5,??DataTable14_12
   \   0000013E   0x.... 0x....      BL       HAL_GPIO_WritePin
    403          
    404              /*----------------------------------------*/
    405          
    406          #if (DEBUG)  
    407              /* UART for debug */
    408              USART3_Init();
    409          #endif
    410          
    411          					  
    412          
    413              /*----------------------------------------*/
    414              MX_I2C2_Init(); //for STA321MP
   \   00000142   0x.... 0x....      BL       MX_I2C2_Init
    415              STA321MP_Ini();
   \   00000146   0x.... 0x....      BL       STA321MP_Ini
    416              BSP_LED_Toggle(LED1);
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0x.... 0x....      BL       BSP_LED_Toggle
    417              /* Init Audio Application */
    418          #ifdef CS43L22_PLAY
    419              AUDIO_InitApplication();
    420          #endif
    421              AUDIO_InitApplication();
   \   00000150   0x.... 0x....      BL       AUDIO_InitApplication
    422              BSP_LED_Toggle(LED2);
   \   00000154   0x2001             MOVS     R0,#+1
   \   00000156   0x.... 0x....      BL       BSP_LED_Toggle
    423          
    424              buffer_switch = BUF3_PLAY;		 /* record data to buffer1 */
   \   0000015A   0x2002             MOVS     R0,#+2
   \   0000015C   0xF884 0x002F      STRB     R0,[R4, #+47]
    425              MIC1TO6_Init();
   \   00000160   0x.... 0x....      BL       MIC1TO6_Init
    426          
    427          #if (USB_STREAMING)	
    428          	/* Initialize USB descriptor basing on channels number and sampling frequency */
    429          	USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, AUDIO_SAMPLING_FREQUENCY, AUDIO_CHANNELS);
   \   00000164   0x2202             MOVS     R2,#+2
   \   00000166   0xF44F 0x517A      MOV      R1,#+16000
   \   0000016A   0xF504 0x6005      ADD      R0,R4,#+2128
   \   0000016E   0x.... 0x....      BL       USBD_AUDIO_Init_Microphone_Descriptor
    430          	/* Init Device Library */
    431          	USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
   \   00000172   0x2200             MOVS     R2,#+0
   \   00000174   0x.... 0x....      LDR.W    R1,??DataTable14_13
   \   00000178   0xF504 0x6005      ADD      R0,R4,#+2128
   \   0000017C   0x.... 0x....      BL       USBD_Init
    432          	/* Add Supported Class */
    433          	USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
   \   00000180   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   00000184   0xF504 0x6005      ADD      R0,R4,#+2128
   \   00000188   0x.... 0x....      BL       USBD_RegisterClass
    434          	/* Add Interface callbacks for AUDIO Class */  
    435          	USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
   \   0000018C   0x.... 0x....      LDR.W    R1,??DataTable14_15
   \   00000190   0xF504 0x6005      ADD      R0,R4,#+2128
   \   00000194   0x.... 0x....      BL       USBD_AUDIO_RegisterInterface
    436          	/* Start Device Process */
    437          	USBD_Start(&hUSBDDevice);
   \   00000198   0xF504 0x6005      ADD      R0,R4,#+2128
   \   0000019C   0x.... 0x....      BL       USBD_Start
    438          
    439          	/* Init Host Library */
    440          	//test GIT //USBH_Init(&hUSBHost, USBH_UserProcess, 0);
    441          
    442          	/* Add Supported Class */
    443          	//test GIT //USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
    444          	
    445          	/* Start Host Process */
    446          	//test GIT //USBH_Start(&hUSBHost); 					  
    447          #endif 
    448          
    449              StartPlay();
   \   000001A0   0x.... 0x....      BL       StartPlay
   \   000001A4   0xE017             B.N      ??main_2
    450              while (1)
    451              {
    452          
    453          
    454                              /* This calculation happens once time in power cycles */
    455                              /* After 5 times of full frame recieved interrupt */
    456                              if (cntStrt==5)
    457                              {
    458          			   if ((WaveRecord_flgIni<200))
    459          			   {
    460                                        for(char i=0;i<16;i++)
    461                                        {
    462                                          if (ValBit(SPI4_stNipple,i)!=0) 
    463                                          {
    464                                             SPI4_stPosShft = MAX(SPI4_stPosShft,i+1);
    465                                          }
    466                                        }
    467          					
    468          			   }
    469                                     else if (WaveRecord_flgIni<255)
   \                     ??main_3: (+1)
   \   000001A6   0x29FF             CMP      R1,#+255
   \   000001A8   0xBF1C             ITT      NE 
   \   000001AA   0x1C48             ADDNE    R0,R1,#+1
   \   000001AC   0x7038             STRBNE   R0,[R7, #+0]
    470                                     {
    471                                         WaveRecord_flgIni++;
    472                                     }
    473          			   else
    474          			   {
    475          
    476          			   }
    477          					   
    478          		 }
    479          	
    480          		/* USB Host Background task */
    481          		//USBH_Process(&hUSBHost);
    482          
    483          		/* AUDIO Menu Process */
    484          		//AUDIO_MenuProcess();
    485          		
    486          		FFT_Update(); 
   \                     ??main_4: (+1)
   \   000001AE   0x.... 0x....      BL       FFT_Update
    487          
    488          		if (flg10ms==1)
   \   000001B2   0xF894 0x002E      LDRB     R0,[R4, #+46]
   \   000001B6   0x2801             CMP      R0,#+1
   \   000001B8   0xD10D             BNE.N    ??main_2
    489          		{
    490          		    flg10ms=0;		   		      
   \   000001BA   0x2000             MOVS     R0,#+0
   \   000001BC   0xF884 0x002E      STRB     R0,[R4, #+46]
    491          	         cntTime200++;
   \   000001C0   0xF8B4 0x004C      LDRH     R0,[R4, #+76]
   \   000001C4   0x1C40             ADDS     R0,R0,#+1
   \   000001C6   0xF8A4 0x004C      STRH     R0,[R4, #+76]
    492          	         if (cntTime200==40)
   \   000001CA   0xB280             UXTH     R0,R0
   \   000001CC   0x2828             CMP      R0,#+40
   \   000001CE   0xBF04             ITT      EQ 
   \   000001D0   0x2000             MOVEQ    R0,#+0
   \   000001D2   0xF8A4 0x004C      STRHEQ   R0,[R4, #+76]
    493          	         {
    494          	 
    495          #if (DEBUG)
    496          
    497                              //if ((idxLatency14!=0)||(idxLatency25!=0)||(idxLatency36!=0))
    498                              {
    499                                  int16_t test[5];
    500                                  static uint8_t flagNotMin;
    501                                  test[0] = 0;
    502                                  test[1]= idxLatency63;
    503                                  test[2]= idxLatency14;
    504                                  test[3]= idxLatency25;
    505          						test[4]= idxLatency78;
    506          
    507          
    508                                  if (EnergySound<2)
    509                                  {
    510                                          //sprintf((char *)pUARTBuf,"No Speech:%d  \r\n",EnergySound);
    511                                          //HAL_UART_Transmit_IT(&huart3,pUARTBuf,30); 
    512                                  }
    513                                  else
    514                                  {
    515                                       sprintf((char *)pUARTBuf,"%d:%d:%d:%d ",idxLatency63,idxLatency14,idxLatency25,idxLatency78);
    516                                       flagNotMin=0 ;
    517          
    518                                        if (test[3]>0)
    519                                        {
    520                                           if((test[1]<=0)&&(test[4]<=0))
    521                                           {
    522                                                flagNotMin=1 ;
    523                                                sprintf((char *)(pUARTBuf+15),"Close Mic 2\r\n");
    524                                           }
    525                                        }
    526                                        else if (test[3]<-2)
    527                                        {
    528                                            if((test[1]>1)&&(test[4]>1))
    529                                            {
    530                                              flagNotMin=1 ;
    531                                              sprintf((char *)(pUARTBuf+15),"Clsoe Mic 5\r\n");
    532                                            }
    533          
    534                                        }
    535                                        else
    536                                        {
    537                                        }	
    538          							
    539          			    if (test[2]>2)
    540                                	    {
    541                                	       if((test[1]>=-1)&&(test[3]<=-3))
    542                                	       {
    543                                           flagNotMin=1 ;
    544                                           sprintf((char *)(pUARTBuf+15),"Clsoe Mic 4\r\n");
    545                                	       }
    546                                	    }
    547                                      else if (test[2]<=-1)
    548                                      {
    549                                         if((test[1]<=-2)&&(test[3]>=0))
    550                                	       {
    551                                               flagNotMin=1 ;
    552                                               sprintf((char *)(pUARTBuf+15),"Clsoe Mic 1\r\n");
    553                                         }
    554                                      }
    555                                      else
    556                                      {
    557          
    558                                      }
    559          
    560          						   
    561                                      if (test[1]>=0)
    562                                	    {
    563                                	       if((test[2]>1)&&(test[4]<= 0))
    564                                	       {
    565          								 flagNotMin=1 ;
    566          								 sprintf((char *)(pUARTBuf+15),"Clsoe Mic 3\r\n");
    567                                	       }
    568          
    569                                	    }
    570                                      else if (test[1]<=-3)
    571                                      {
    572                                         if((test[2]<=0)&&(test[4]>=2))
    573                                	       {
    574                                             flagNotMin=1 ;
    575                                             sprintf((char *)(pUARTBuf+15),"Clsoe Mic 6\r\n");
    576                                         }
    577          
    578                                      }
    579                                      else
    580                                      {
    581          
    582                                      }
    583          
    584          
    585                                      if ((test[4]<=-1))
    586                                      {
    587                                          if ((test[1]>=-1)&&(test[3]>-0))
    588                                          {
    589                                            sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    590                                            flagNotMin=1 ;
    591                                         	}
    592                                      }
    593                                    else if (test[4]>=3)
    594                                    {
    595                                        if ((test[1]<-1)&&(test[3]<-2))
    596                                       {
    597                                            sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    598                                            flagNotMin=1 ;
    599                                       }
    600          
    601                                    }
    602                                    else
    603                                    {
    604          
    605                                    }
    606          
    607          
    608          			  if (flagNotMin==0) sprintf((char *)(pUARTBuf+15),"----------- \r\n");
    609          									
    610                                    //HAL_UART_Transmit_IT(&huart3,pUARTBuf,15);
    611                                    SrvB_Debound(&flgS2Ins,&flgS2Flt, flgS2,2);
    612                                    SrvB_Debound(&flgS3Ins,&flgS3Flt, flgS3,2);
    613                                    SrvB_Debound(&flgS4Ins,&flgS4Flt, flgS4,2);
    614          
    615                                    stDir = (flgS2Flt<<2)|(flgS3Flt<<1)|(flgS4Flt); 
    616                                     switch (8)
    617                                     {
    618                                         case 0:
    619                                                  sprintf((char *)(pUARTBuf+15),"Direction 0 \r\n");
    620                                                           
    621                                              break;
    622                                         case 1:
    623                                                  sprintf((char *)(pUARTBuf+15),"Direction 1 \r\n");
    624                                                  
    625                                              break;
    626                                         case 2:
    627                                                  sprintf((char *)(pUARTBuf+15),"Direction 2 \r\n");
    628                                                   
    629                                              break;
    630                                                  
    631                                         case 3:
    632                                                  sprintf((char *)(pUARTBuf+15),"Direction 3 \r\n");
    633                                           
    634                                              break;
    635                                         case 4:
    636                                                  sprintf((char *)(pUARTBuf+15),"Direction 4 \r\n");
    637                                                           
    638                                              break;
    639                                          case 5:
    640                                                  sprintf((char *)(pUARTBuf+15),"Direction 5 \r\n");
    641                                                   
    642                                              break;
    643                                          case 6:
    644                                                  sprintf((char *)(pUARTBuf+15),"Direction 6 \r\n");
    645                                           
    646                                              break;
    647                                          case 7:
    648                                                  sprintf((char *)(pUARTBuf+15),"Direction 7 \r\n");
    649                                                   
    650                                              break;
    651                                           default:
    652                                              break;
    653                                     }
    654          
    655                                     HAL_UART_Transmit_IT(&huart3,pUARTBuf,15+15);		
    656                                   }
    657                              }
    658          
    659          #endif
    660          	   	            cntTime200=0;
    661                  } //(cntTime200==40)
    662                }//if (flg10ms==1)	
   \                     ??main_2: (+1)
   \   000001D6   0x8830             LDRH     R0,[R6, #+0]
   \   000001D8   0x2805             CMP      R0,#+5
   \   000001DA   0xD1E8             BNE.N    ??main_4
   \   000001DC   0x7839             LDRB     R1,[R7, #+0]
   \   000001DE   0x29C8             CMP      R1,#+200
   \   000001E0   0xDAE1             BGE.N    ??main_3
   \   000001E2   0x2000             MOVS     R0,#+0
   \                     ??main_5: (+1)
   \   000001E4   0xF9B8 0x1000      LDRSH    R1,[R8, #+0]
   \   000001E8   0x4101             ASRS     R1,R1,R0
   \   000001EA   0x07C9             LSLS     R1,R1,#+31
   \   000001EC   0xD505             BPL.N    ??main_6
   \   000001EE   0x782A             LDRB     R2,[R5, #+0]
   \   000001F0   0x1C41             ADDS     R1,R0,#+1
   \   000001F2   0x4291             CMP      R1,R2
   \   000001F4   0xBFB8             IT       LT 
   \   000001F6   0x7829             LDRBLT   R1,[R5, #+0]
   \   000001F8   0x7029             STRB     R1,[R5, #+0]
   \                     ??main_6: (+1)
   \   000001FA   0x1C40             ADDS     R0,R0,#+1
   \   000001FC   0x2810             CMP      R0,#+16
   \   000001FE   0xDBF1             BLT.N    ??main_5
   \   00000200   0xE7D5             B.N      ??main_4
    663            }
    664          }
    665          
    666          /**
    667            * @brief  Toggle Leds.
    668            * @param  None
    669            * @retval None
    670            */

   \                                 In section .text, align 2, keep-with-next
    671          void Toggle_Leds(void)
    672          {
    673            static uint32_t ticks = 0;
    674          
    675            if (ticks++ > 200)
   \                     Toggle_Leds: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable14_16
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x1C4A             ADDS     R2,R1,#+1
   \   00000008   0x29C9             CMP      R1,#+201
   \   0000000A   0xBF28             IT       CS 
   \   0000000C   0x2200             MOVCS    R2,#+0
    676            {
    677              //BSP_LED_Toggle(LED1);
    678              ticks = 0;
   \   0000000E   0x6002             STR      R2,[R0, #+0]
    679            }
    680          }
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??ticks:
   \   00000000                      DS8 4
    681          
    682          
    683          /**
    684            * @brief  User Process
    685            * @param  phost: Host Handle
    686            * @param  id: Host Library user message ID
    687            * @retval None
    688            */
    689          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
                             ^
Warning[Pe177]: function "USBH_UserProcess" was declared but never referenced
    690          {
    691            switch(id)
    692            { 
    693            case HOST_USER_SELECT_CONFIGURATION:
    694              break;
    695              
    696            case HOST_USER_DISCONNECTION:
    697              appli_state = APPLICATION_DISCONNECT;
    698              break;
    699          
    700            case HOST_USER_CLASS_ACTIVE:
    701              appli_state = APPLICATION_READY;
    702              break;
    703           
    704            case HOST_USER_CONNECTION:
    705              appli_state = APPLICATION_START;
    706              break;
    707             
    708            default:
    709              break; 
    710            }
    711          }
    712          
    713          /**
    714            * @brief  System Clock Configuration
    715            *         The system Clock is configured as follow : 
    716            *            System Clock source            = PLL (HSE)
    717            *            SYSCLK(Hz)                     = 216000000
    718            *            HCLK(Hz)                       = 216000000
    719            *            AHB Prescaler                  = 1
    720            *            APB1 Prescaler                 = 4
    721            *            APB2 Prescaler                 = 2
    722            *            HSE Frequency(Hz)              = 25000000
    723            *            PLL_M                          = 25
    724            *            PLL_N                          = 432
    725            *            PLL_P                          = 2
    726            *            PLL_Q                          = 9
    727            *            VDD(V)                         = 3.3
    728            *            Main regulator output voltage  = Scale1 mode
    729            *            Flash Latency(WS)              = 7
    730            * @param  None
    731            * @retval None
    732            */

   \                                 In section .text, align 2, keep-with-next
    733          static void SystemClock_Config(void)
    734          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B2             SUB      SP,SP,#+200
    735            RCC_ClkInitTypeDef RCC_ClkInitStruct;
    736            RCC_OscInitTypeDef RCC_OscInitStruct;
    737            RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    738            HAL_StatusTypeDef ret = HAL_OK;
    739          
    740            /* Enable HSE Oscillator and activate PLL with HSE as source */
    741            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x9026             STR      R0,[SP, #+152]
    742            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   00000008   0xF44F 0x3080      MOV      R0,#+65536
   \   0000000C   0x9027             STR      R0,[SP, #+156]
    743            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x902C             STR      R0,[SP, #+176]
    744            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    745            RCC_OscInitStruct.PLL.PLLM = 25;
   \   00000012   0x2019             MOVS     R0,#+25
   \   00000014   0x902E             STR      R0,[SP, #+184]
    746            RCC_OscInitStruct.PLL.PLLN = 432;  
   \   00000016   0xF44F 0x70D8      MOV      R0,#+432
   \   0000001A   0x902F             STR      R0,[SP, #+188]
    747            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x9030             STR      R0,[SP, #+192]
    748            RCC_OscInitStruct.PLL.PLLQ = 9;
   \   00000020   0x2009             MOVS     R0,#+9
   \   00000022   0xF44F 0x0480      MOV      R4,#+4194304
   \   00000026   0x9031             STR      R0,[SP, #+196]
   \   00000028   0x942D             STR      R4,[SP, #+180]
    749          
    750            ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
   \   0000002A   0xA826             ADD      R0,SP,#+152
   \   0000002C   0x.... 0x....      BL       HAL_RCC_OscConfig
    751            if(ret != HAL_OK)
    752            {
    753              //while(1) { ; }
    754            }
    755          
    756            /* Activate the OverDrive to reach the 216 MHz Frequency */
    757            ret = HAL_PWREx_EnableOverDrive();
   \   00000030   0x.... 0x....      BL       HAL_PWREx_EnableOverDrive
    758            if(ret != HAL_OK)
    759            {
    760              //while(1) { ; }
    761            }
    762          
    763            /* Select PLLSAI output as USB clock source */
    764            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48 ;
   \   00000034   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000038   0x9005             STR      R0,[SP, #+20]
    765            PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
   \   0000003A   0xF04F 0x6000      MOV      R0,#+134217728
   \   0000003E   0x9024             STR      R0,[SP, #+144]
    766          
    767            
    768            PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
   \   00000040   0x20C0             MOVS     R0,#+192
   \   00000042   0x900A             STR      R0,[SP, #+40]
    769            PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0x900B             STR      R0,[SP, #+44]
    770            PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x900D             STR      R0,[SP, #+52]
    771            PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0x900C             STR      R0,[SP, #+48]
    772          
    773          
    774            ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
   \   00000050   0xA805             ADD      R0,SP,#+20
   \   00000052   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    775            
    776            if(ret != HAL_OK)
    777            {
    778              //while(1) { ; }
    779            }
    780            
    781            /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
    782            RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
   \   00000056   0x200F             MOVS     R0,#+15
    783            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    784            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
    785            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
    786            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
    787          
    788            ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
   \   00000058   0x2107             MOVS     R1,#+7
   \   0000005A   0x9000             STR      R0,[SP, #+0]
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x9001             STR      R0,[SP, #+4]
   \   00000060   0x2080             MOVS     R0,#+128
   \   00000062   0x9002             STR      R0,[SP, #+8]
   \   00000064   0xF44F 0x50A0      MOV      R0,#+5120
   \   00000068   0x9003             STR      R0,[SP, #+12]
   \   0000006A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000006E   0x9004             STR      R0,[SP, #+16]
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x.... 0x....      BL       HAL_RCC_ClockConfig
    789            if(ret != HAL_OK)
    790            {
    791              //while(1) { ; }
    792            }
    793            
    794           //sop1hc 344/7 = 49.142 MHz
    795            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable14_17  ;; 0x100001
    796            PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   0000007A   0x9415             STR      R4,[SP, #+84]
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    797            PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x9012             STR      R0,[SP, #+72]
    798            PeriphClkInitStruct.PLLI2S.PLLI2SP = 8;
   \   00000082   0x2008             MOVS     R0,#+8
   \   00000084   0x9009             STR      R0,[SP, #+36]
    799            PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   00000086   0xF44F 0x70AC      MOV      R0,#+344
   \   0000008A   0x9006             STR      R0,[SP, #+24]
    800            PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
   \   0000008C   0x2007             MOVS     R0,#+7
   \   0000008E   0x9008             STR      R0,[SP, #+32]
    801            PeriphClkInitStruct.PLLI2S.PLLI2SR = 7;
   \   00000090   0x9007             STR      R0,[SP, #+28]
    802            PeriphClkInitStruct.PLLI2SDivQ = 1;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x900E             STR      R0,[SP, #+56]
    803            HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);	
   \   00000096   0xA805             ADD      R0,SP,#+20
   \   00000098   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    804          }
   \   0000009C   0xB032             ADD      SP,SP,#+200
   \   0000009E   0xBD10             POP      {R4,PC}          ;; return
    805          
    806          /**
    807            * @brief  Clock Config.
    808            * @param  hsai: might be required to set audio peripheral predivider if any.
    809            * @param  AudioFreq: Audio frequency used to play the audio stream.
    810            * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
    811            *         Being __weak it can be overwritten by the application     
    812            * @retval None
    813            */

   \                                 In section .text, align 2, keep-with-next
    814          void BSP_AUDIO_OUT_ClockConfig(uint32_t AudioFreq, void *Params)
    815          {
   \                     BSP_AUDIO_OUT_ClockConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0A2             SUB      SP,SP,#+136
   \   00000004   0x4604             MOV      R4,R0
    816            RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;
    817          
    818            HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
    819            
    820            /* Set the PLL configuration according to the audio frequency */
    821            if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
   \   0000000C   0xF642 0x3011      MOVW     R0,#+11025
   \   00000010   0x4284             CMP      R4,R0
   \   00000012   0xBF1F             ITTTT    NE 
   \   00000014   0xF245 0x6022      MOVWNE   R0,#+22050
   \   00000018   0x4284             CMPNE    R4,R0
   \   0000001A   0xF64A 0x4044      MOVWNE   R0,#+44100
   \   0000001E   0x4284             CMPNE    R4,R0
   \   00000020   0xD10E             BNE.N    ??BSP_AUDIO_OUT_ClockConfig_0
    822            {
    823              /* Configure PLLSAI prescalers */
    824              /* PLLI2S_VCO: VCO_429M
    825              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    826              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    827              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \   00000022   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000026   0x9000             STR      R0,[SP, #+0]
    828              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000028   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000002C   0x9010             STR      R0,[SP, #+64]
    829              RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
   \   0000002E   0x2008             MOVS     R0,#+8
   \   00000030   0x9004             STR      R0,[SP, #+16]
    830              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
   \   00000032   0xF240 0x10AD      MOVW     R0,#+429
   \   00000036   0x9001             STR      R0,[SP, #+4]
    831              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x9003             STR      R0,[SP, #+12]
    832              RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
   \   0000003C   0x2013             MOVS     R0,#+19
   \   0000003E   0xE00B             B.N      ??BSP_AUDIO_OUT_ClockConfig_1
    833              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
    834            }
    835            else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K), AUDIO_FREQUENCY_96K */
    836            {
    837              /* SAI clock config
    838              PLLI2S_VCO: VCO_344M
    839              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
    840              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 49.142/1 = 49.142 Mhz */
    841              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \                     ??BSP_AUDIO_OUT_ClockConfig_0: (+1)
   \   00000040   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000044   0x9000             STR      R0,[SP, #+0]
    842              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000046   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000004A   0x9010             STR      R0,[SP, #+64]
    843          	//RCC_ExCLKInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
    844          //    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    845              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   0000004C   0xF44F 0x70AC      MOV      R0,#+344
   \   00000050   0x9001             STR      R0,[SP, #+4]
    846              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
   \   00000052   0x2007             MOVS     R0,#+7
   \   00000054   0x9003             STR      R0,[SP, #+12]
    847          	//RCC_ExCLKInitStruct.PLLI2S.PLLI2SR = 1;
    848              RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \                     ??BSP_AUDIO_OUT_ClockConfig_1: (+1)
   \   00000058   0x9009             STR      R0,[SP, #+36]
    849              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    850            }
    851            
    852          }
   \   00000060   0xB022             ADD      SP,SP,#+136
   \   00000062   0xBD10             POP      {R4,PC}          ;; return
    853          
    854          
    855          
    856          #ifdef  USE_FULL_ASSERT
    857          /**
    858            * @brief  Reports the name of the source file and the source line number
    859            *         where the assert_param error has occurred.
    860            * @param  file: pointer to the source file name
    861            * @param  line: assert_param error line source number
    862            * @retval None
    863            */
    864          void assert_failed(uint8_t* file, uint32_t line)
    865          { 
    866            /* User can add his own implementation to report the file name and line number,
    867               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    868          
    869            /* Infinite loop */
    870            while (1)
    871            {
    872            }
    873          }
    874          #endif
    875          
    876          /**
    877            * @brief  CPU L1-Cache enable.
    878            * @param  None
    879            * @retval None
    880            */
    881          static void CPU_CACHE_Enable(void)
    882          {
    883            /* Enable I-Cache */
    884            SCB_EnableICache();
    885          
    886            /* Enable D-Cache */
    887            SCB_EnableDCache();
    888          }
    889          
    890          

   \                                 In section .text, align 2, keep-with-next
    891          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
    892          {
   \                     HAL_I2C_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    893          
    894            GPIO_InitTypeDef GPIO_InitStruct;
    895              
    896            if(hi2c->Instance==I2C1)
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable14_18  ;; 0x40005400
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD12C             BNE.N    ??HAL_I2C_MspInit_0
    897            {
    898          	/* USER CODE BEGIN I2C1_MspInit 0 */
    899          
    900          	/*##-1- Configure the I2C clock source. The clock is derived from the SYSCLK #*/
    901          	//RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
    902          	//RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    903          	//HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
    904          
    905          	/*##-2- Enable peripherals and GPIO Clocks #################################*/
    906          	/* Enable GPIO TX/RX clock */
    907          	__HAL_RCC_GPIOB_CLK_ENABLE();
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable14_5  ;; 0x40023830
    908          
    909          	/**I2C1 GPIO Configuration	
    910          	PB6	  ------> I2C1_SCL (PB6)
    911          	PB7	  ------> I2C1_SDA (PB7) 
    912          	*/
    913          	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    914          	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    915          	GPIO_InitStruct.Pull = GPIO_PULLUP;
    916          	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    917          	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    918          	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000012   0xA901             ADD      R1,SP,#+4
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000001A   0x6020             STR      R0,[R4, #+0]
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0x20C0             MOVS     R0,#+192
   \   00000028   0x9001             STR      R0,[SP, #+4]
   \   0000002A   0x2012             MOVS     R0,#+18
   \   0000002C   0x9002             STR      R0,[SP, #+8]
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x9003             STR      R0,[SP, #+12]
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x9004             STR      R0,[SP, #+16]
   \   00000036   0x2004             MOVS     R0,#+4
   \   00000038   0x9005             STR      R0,[SP, #+20]
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable14_19  ;; 0x40020400
   \   0000003E   0x.... 0x....      BL       HAL_GPIO_Init
    919          
    920          	/* Peripheral clock enable */
    921          	__HAL_RCC_I2C1_CLK_ENABLE();
   \   00000042   0x6920             LDR      R0,[R4, #+16]
    922          	/* Peripheral interrupt init*/
    923          	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x2103             MOVS     R1,#+3
   \   00000048   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   0000004C   0x6120             STR      R0,[R4, #+16]
   \   0000004E   0x6920             LDR      R0,[R4, #+16]
   \   00000050   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x201F             MOVS     R0,#+31
   \   0000005A   0x.... 0x....      BL       HAL_NVIC_SetPriority
    924          	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \   0000005E   0x201F             MOVS     R0,#+31
   \   00000060   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    925          
    926            }
    927            else if(hi2c->Instance==I2C2)
    928            {
    929            /* USER CODE BEGIN I2C2_MspInit 0 */
    930          
    931            /* USER CODE END I2C2_MspInit 0 */
    932            
    933              /**I2C2 GPIO Configuration    
    934              PB10     ------> I2C2_SCL
    935              PB11     ------> I2C2_SDA 
    936              */
    937              __HAL_RCC_GPIOB_CLK_ENABLE();
    938              
    939              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    940              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    941              GPIO_InitStruct.Pull = GPIO_NOPULL;
    942              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    943              GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    944              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    945          
    946              /* Peripheral clock enable */
    947              __HAL_RCC_I2C2_CLK_ENABLE();
    948              /* Peripheral interrupt init*/
    949              //HAL_NVIC_SetPriority(I2C2_EV_IRQn, 3, 1);
    950              //HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    951            }
    952          
    953          }
   \   00000064   0xB006             ADD      SP,SP,#+24
   \   00000066   0xBD10             POP      {R4,PC}
   \                     ??HAL_I2C_MspInit_0: (+1)
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable14_20  ;; 0x40005800
   \   0000006C   0x4288             CMP      R0,R1
   \   0000006E   0xD123             BNE.N    ??HAL_I2C_MspInit_1
   \   00000070   0x.... 0x....      LDR.W    R4,??DataTable14_5  ;; 0x40023830
   \   00000074   0xA901             ADD      R1,SP,#+4
   \   00000076   0x6820             LDR      R0,[R4, #+0]
   \   00000078   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000007C   0x6020             STR      R0,[R4, #+0]
   \   0000007E   0x6820             LDR      R0,[R4, #+0]
   \   00000080   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000084   0x9000             STR      R0,[SP, #+0]
   \   00000086   0x9800             LDR      R0,[SP, #+0]
   \   00000088   0xF44F 0x6040      MOV      R0,#+3072
   \   0000008C   0x9001             STR      R0,[SP, #+4]
   \   0000008E   0x2012             MOVS     R0,#+18
   \   00000090   0x9002             STR      R0,[SP, #+8]
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x9003             STR      R0,[SP, #+12]
   \   00000096   0x2003             MOVS     R0,#+3
   \   00000098   0x9004             STR      R0,[SP, #+16]
   \   0000009A   0x2004             MOVS     R0,#+4
   \   0000009C   0x9005             STR      R0,[SP, #+20]
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable14_19  ;; 0x40020400
   \   000000A2   0x.... 0x....      BL       HAL_GPIO_Init
   \   000000A6   0x6920             LDR      R0,[R4, #+16]
   \   000000A8   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000000AC   0x6120             STR      R0,[R4, #+16]
   \   000000AE   0x6920             LDR      R0,[R4, #+16]
   \   000000B0   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000000B4   0x9000             STR      R0,[SP, #+0]
   \   000000B6   0x9800             LDR      R0,[SP, #+0]
   \                     ??HAL_I2C_MspInit_1: (+1)
   \   000000B8   0xB006             ADD      SP,SP,#+24
   \   000000BA   0xBD10             POP      {R4,PC}          ;; return
    954          
    955          /*---------------------------------------------------*/
    956          /*   UART                                            */
    957          /* UART4 init function */

   \                                 In section .text, align 2, keep-with-next
    958          void USART3_Init(void)
    959          {
    960          
    961            huart3.Instance = USART3;
   \                     USART3_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable14_21
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable14_22  ;; 0x40004800
   \   00000008   0x6001             STR      R1,[R0, #+0]
    962            huart3.Init.BaudRate = 115200;
   \   0000000A   0xF44F 0x31E1      MOV      R1,#+115200
   \   0000000E   0x6041             STR      R1,[R0, #+4]
    963            huart3.Init.WordLength = UART_WORDLENGTH_8B;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6081             STR      R1,[R0, #+8]
    964            huart3.Init.StopBits = UART_STOPBITS_1;
   \   00000014   0x60C1             STR      R1,[R0, #+12]
    965            huart3.Init.Parity = UART_PARITY_NONE;
   \   00000016   0x6101             STR      R1,[R0, #+16]
    966            huart3.Init.Mode = UART_MODE_TX_RX;
   \   00000018   0x210C             MOVS     R1,#+12
   \   0000001A   0x6141             STR      R1,[R0, #+20]
    967            huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6181             STR      R1,[R0, #+24]
    968            huart3.Init.OverSampling = UART_OVERSAMPLING_16;
   \   00000020   0x61C1             STR      R1,[R0, #+28]
    969            huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED ;
   \   00000022   0x6201             STR      R1,[R0, #+32]
    970            huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
   \   00000024   0x6241             STR      R1,[R0, #+36]
    971            HAL_UART_Init(&huart3);
   \   00000026   0x.... 0x....      B.W      HAL_UART_Init
    972          
    973            //HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
    974            //HAL_NVIC_EnableIRQ(USART3_IRQn);
    975          
    976          }
    977          
    978          

   \                                 In section .text, align 2, keep-with-next
    979          void HAL_UART_MspInit(UART_HandleTypeDef *huart)
    980          {
    981          
    982            GPIO_InitTypeDef GPIO_InitStruct;
    983            if(huart->Instance==USART3)
   \                     HAL_UART_MspInit: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable14_22  ;; 0x40004800
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD000             BEQ.N    ??HAL_UART_MspInit_0
   \   0000000A   0x4770             BX       LR
    984            {
    985          
    986          
    987            /* USER CODE END UART4_MspInit 0 */
    988              /* Peripheral clock enable */
    989              __USART3_CLK_ENABLE();
   \                     ??HAL_UART_MspInit_0: (+1)
   \   0000000C   0xB500             PUSH     {LR}
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_5  ;; 0x40023830
   \   00000012   0xB087             SUB      SP,SP,#+28
   \   00000014   0x6901             LDR      R1,[R0, #+16]
   \   00000016   0xF441 0x2180      ORR      R1,R1,#0x40000
   \   0000001A   0x6101             STR      R1,[R0, #+16]
   \   0000001C   0x6901             LDR      R1,[R0, #+16]
   \   0000001E   0xF401 0x2180      AND      R1,R1,#0x40000
   \   00000022   0x9100             STR      R1,[SP, #+0]
   \   00000024   0x9900             LDR      R1,[SP, #+0]
    990              __GPIOC_CLK_ENABLE();
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000002C   0x6001             STR      R1,[R0, #+0]
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
    991            
    992              /**UART4 GPIO Configuration    
    993              PC10     ------> USART3_TX
    994              PC11     ------> USART3_RX
    995              */
    996              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    997              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    998              GPIO_InitStruct.Pull = GPIO_PULLUP;
    999              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1000              GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
   1001              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000030   0xA901             ADD      R1,SP,#+4
   \   00000032   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0xF44F 0x6040      MOV      R0,#+3072
   \   0000003E   0x9001             STR      R0,[SP, #+4]
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x9002             STR      R0,[SP, #+8]
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x9003             STR      R0,[SP, #+12]
   \   00000048   0x2003             MOVS     R0,#+3
   \   0000004A   0x9004             STR      R0,[SP, #+16]
   \   0000004C   0x2007             MOVS     R0,#+7
   \   0000004E   0x9005             STR      R0,[SP, #+20]
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable14_23  ;; 0x40020800
   \   00000054   0x.... 0x....      BL       HAL_GPIO_Init
   1002          
   1003              /* NVIC for USART */
   1004              HAL_NVIC_SetPriority(USART3_IRQn, 7, 1);
   \   00000058   0x2201             MOVS     R2,#+1
   \   0000005A   0x2107             MOVS     R1,#+7
   \   0000005C   0x2027             MOVS     R0,#+39
   \   0000005E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1005              HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   00000062   0x2027             MOVS     R0,#+39
   \   00000064   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1006          
   1007            }
   1008          
   1009          }
   \   00000068   0xB007             ADD      SP,SP,#+28
   \   0000006A   0xBD00             POP      {PC}             ;; return
   1010          
   1011          
   1012          

   \                                 In section .text, align 2, keep-with-next
   1013          void EXTI4_IRQHandler(void)
   1014          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1015              /* EXTI line interrupt detected */
   1016            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable14_24  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x06C0             LSLS     R0,R0,#+27
   \   00000008   0xD50E             BPL.N    ??EXTI4_IRQHandler_0
   1017            {
   1018              
   1019               if (cntRisingEXTI==20)
   \   0000000A   0x....             LDR.N    R0,??DataTable14_25
   \   0000000C   0x8801             LDRH     R1,[R0, #+0]
   \   0000000E   0x2914             CMP      R1,#+20
   \   00000010   0xD105             BNE.N    ??EXTI4_IRQHandler_1
   1020               {
   1021              	/*--------------Enable read PCM data --------------------*/   
   1022                  //flgDlyUpd = 1;  
   1023                  //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1024          		//__HAL_UNLOCK(&hspi5);
   1025                  //__HAL_SPI_ENABLE(&hspi5);
   1026                  cntRisingEXTI=0;
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x8001             STRH     R1,[R0, #+0]
   1027          
   1028                  /*Disable external interrupt */
   1029                  HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI4_IRQn));
   \   00000016   0x200A             MOVS     R0,#+10
   \   00000018   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   0000001C   0xE002             B.N      ??EXTI4_IRQHandler_2
   1030                  //HAL_GPIO_DeInit(GPIOB,GPIO_PIN_4);
   1031               }
   1032               else
   1033               {
   1034                  cntRisingEXTI++;
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   0000001E   0x8801             LDRH     R1,[R0, #+0]
   \   00000020   0x1C49             ADDS     R1,R1,#+1
   \   00000022   0x8001             STRH     R1,[R0, #+0]
   1035                  //__HAL_SPI_DISABLE(&hspi5);
   1036               }
   1037               
   1038                __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
   \                     ??EXTI4_IRQHandler_2: (+1)
   \   00000024   0x2010             MOVS     R0,#+16
   \   00000026   0x6020             STR      R0,[R4, #+0]
   1039          
   1040            }
   1041          }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
   1042                        

   \                                 In section .text, align 2, keep-with-next
   1043          void EXTI15_10_IRQHandler(void)
   1044          {
   1045          
   1046          }
   \                     EXTI15_10_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1047          
   1048          /* Events for Button Press */

   \                                 In section .text, align 2, keep-with-next
   1049          void EXTI9_5_IRQHandler(void)
   1050          {
   \                     EXTI9_5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1051          
   1052            /* EXTI line interrupt detected */
   1053            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable14_24  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0xD510             BPL.N    ??EXTI9_5_IRQHandler_0
   1054            {
   1055          	  btnSW2 = 1;
   \   0000000A   0x....             LDR.N    R0,??DataTable14_26
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x7041             STRB     R1,[R0, #+1]
   1056          	  if ((++cntBtnPress)==8) cntBtnPress=0;
   \   00000010   0x7881             LDRB     R1,[R0, #+2]
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0x7081             STRB     R1,[R0, #+2]
   \   00000016   0xB2C9             UXTB     R1,R1
   \   00000018   0x2908             CMP      R1,#+8
   \   0000001A   0xBF04             ITT      EQ 
   \   0000001C   0x2100             MOVEQ    R1,#+0
   \   0000001E   0x7081             STRBEQ   R1,[R0, #+2]
   1057          	  BSP_LED_Toggle(LED2);
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       BSP_LED_Toggle
   1058          	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
   \   00000026   0xF44F 0x7080      MOV      R0,#+256
   \   0000002A   0x6020             STR      R0,[R4, #+0]
   1059          
   1060            }
   1061          
   1062          
   1063            /* EXTI line interrupt detected */
   1064            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET)
   \                     ??EXTI9_5_IRQHandler_0: (+1)
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x0580             LSLS     R0,R0,#+22
   \   00000030   0xD50C             BPL.N    ??EXTI9_5_IRQHandler_1
   1065            {
   1066          		btnSW1 = 1;
   \   00000032   0x....             LDR.N    R0,??DataTable14_26
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x7001             STRB     R1,[R0, #+0]
   1067          		Command_index^=0x01;
   \   00000038   0x78C1             LDRB     R1,[R0, #+3]
   \   0000003A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000003E   0x70C1             STRB     R1,[R0, #+3]
   1068          		BSP_LED_Toggle(LED1);
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       BSP_LED_Toggle
   1069          
   1070          	   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
   \   00000046   0xF44F 0x7000      MOV      R0,#+512
   \   0000004A   0x6020             STR      R0,[R4, #+0]
   1071            }
   1072          
   1073          }
   \                     ??EXTI9_5_IRQHandler_1: (+1)
   \   0000004C   0xBD10             POP      {R4,PC}          ;; return
   1074          
   1075          

   \                                 In section .text, align 2, keep-with-next
   1076          void DFT_Init(void)
   1077          {
   \                     DFT_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1078          #if MAIN_CRSCORR
   1079          		arm_rfft_init_q15(&RealFFT_Ins,(uint32_t)128,(uint32_t)0,(uint32_t)1);
   1080          		arm_rfft_init_q15(&RealIFFT_Ins,(uint32_t)128,(uint32_t)1,(uint32_t)1);
   1081          #endif  
   1082          		/* Initialize the CFFT/CIFFT module */	
   1083          		arm_rfft_init_f32(&S1,&SS1, 512,  0, 1); 
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x....             LDR.N    R4,??DataTable14_27
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0xF44F 0x7200      MOV      R2,#+512
   \   00000010   0x4621             MOV      R1,R4
   \   00000012   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000016   0x.... 0x....      BL       arm_rfft_init_f32
   1084          		arm_rfft_init_f32(&S2,&SS2, 512,  0, 1); 
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0xF44F 0x7200      MOV      R2,#+512
   \   00000024   0xF104 0x0114      ADD      R1,R4,#+20
   \   00000028   0xF104 0x007C      ADD      R0,R4,#+124
   \   0000002C   0x.... 0x....      BL       arm_rfft_init_f32
   1085          		arm_rfft_init_f32(&S3,&SS3, 512,  0, 1); 
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x2300             MOVS     R3,#+0
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0xF44F 0x7200      MOV      R2,#+512
   \   0000003A   0xF104 0x0128      ADD      R1,R4,#+40
   \   0000003E   0xF104 0x0094      ADD      R0,R4,#+148
   \   00000042   0x.... 0x....      BL       arm_rfft_init_f32
   1086          		arm_rfft_init_f32(&S4,&SS4, 512,  0, 1);
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x2300             MOVS     R3,#+0
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0xF44F 0x7200      MOV      R2,#+512
   \   00000050   0xF104 0x013C      ADD      R1,R4,#+60
   \   00000054   0xF104 0x00AC      ADD      R0,R4,#+172
   \   00000058   0x.... 0x....      BL       arm_rfft_init_f32
   1087          		arm_rfft_init_f32(&IS,&ISS, 512,  1, 1);
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x2301             MOVS     R3,#+1
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0xF44F 0x7200      MOV      R2,#+512
   \   00000066   0xF104 0x0150      ADD      R1,R4,#+80
   \   0000006A   0xF104 0x00C4      ADD      R0,R4,#+196
   \   0000006E   0x.... 0x....      BL       arm_rfft_init_f32
   1088          
   1089          		//arm_rfft_fast_init_f32(&S1, 512);
   1090                          //arm_rfft_fast_init_f32(&S2, 512);
   1091          		//arm_rfft_fast_init_f32(&S3, 512);
   1092          		//arm_rfft_fast_init_f32(&S4, 512);
   1093          		//arm_rfft_fast_init_f32(&IS, 512);
   1094          }
   \   00000072   0xB002             ADD      SP,SP,#+8
   \   00000074   0xBD10             POP      {R4,PC}          ;; return
   1095          
   1096          

   \                                 In section .text, align 4, keep-with-next
   1097          void SumDelay(Mic_Array_Data *BufferIn)
   1098          {
   1099                     //if (idxLatency12>idxLatency13)
   1100                     // {
   1101                     //     if (idxLatency13 > idxLatency14)
   1102                     //     {
   1103                     //         /* MIC2 --> MIC3 --> MIC4 */
   1104                     //     }
   1105                     //             else if (idxLatency14 > idxLatency12)
   1106                     //             {
   1107                     //        /* MIC4-->MIC2-->MIC3  */
   1108                     //            }
   1109                     //             else
   1110                     //             {
   1111                     //       /* MIC2-->MIC4-->MIC3  */
   1112                     //             }
   1113                     // }
   1114                     //else // idxLatency13>idxLatency12
   1115                     //     {
   1116                     //    if (idxLatency12 > idxLatency14)
   1117                     //    {
   1118                     //        //MIC3 --> MIC2 --> MIC4 
   1119                     //    }
   1120                     //        else if (idxLatency14 > idxLatency13)
   1121                     //        {
   1122                     //        //MIC4 --> MIC3 --> MIC2
   1123                     //        }
   1124                     //        else
   1125                     //        {
   1126                     //        //MIC3 --> MIC4 --> MIC2
   1127          	   //	   }
   1128          	   //}
   1129          
   1130          	
   1131          	for(uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
   \                     SumDelay: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable14
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000008   0xF9B2 0x3042      LDRSH    R3,[R2, #+66]
   \   0000000C   0xF9B2 0x4040      LDRSH    R4,[R2, #+64]
   \   00000010   0xF9B2 0x5044      LDRSH    R5,[R2, #+68]
   \   00000014   0xF102 0x0850      ADD      R8,R2,#+80
   \   00000018   0x4681             MOV      R9,R0
   \   0000001A   0xF242 0x0C28      MOVW     R12,#+8232
   \   0000001E   0x425B             RSBS     R3,R3,#+0
   \   00000020   0x4264             RSBS     R4,R4,#+0
   \   00000022   0x426D             RSBS     R5,R5,#+0
   \   00000024   0xF241 0x0E14      MOVW     LR,#+4116
   1132          	{
   1133          
   1134          		 if (i%2==0)
   \                     ??SumDelay_0: (+1)
   \   00000028   0xEB01 0x76D1      ADD      R6,R1,R1, LSR #+31
   \   0000002C   0x1076             ASRS     R6,R6,#+1
   \   0000002E   0xEBB1 0x0646      SUBS     R6,R1,R6, LSL #+1
   \   00000032   0xD13F             BNE.N    ??SumDelay_1
   1135          		 {
   1136                              bufferSum[i] = (uint16_t)(BufferIn->bufMIC1[i]*FacMic.facMIC1 + 
   1137                              BufferIn->bufMIC2[(((i-idxLatency12)>0)?(i-idxLatency12):0)]*FacMic.facMIC2 + 
   1138                              BufferIn->bufMIC3[(((i-idxLatency13)>0)?(i-idxLatency13):0)]*FacMic.facMIC3 + 
   1139                              BufferIn->bufMIC4[(((i-idxLatency14)>0)?(i-idxLatency14):0)]*FacMic.facMIC4); 		
   \   00000034   0x2B01             CMP      R3,#+1
   \   00000036   0xBFAC             ITE      GE 
   \   00000038   0x469A             MOVGE    R10,R3
   \   0000003A   0xF04F 0x0A00      MOVLT    R10,#+0
   \   0000003E   0x2C01             CMP      R4,#+1
   \   00000040   0xEB00 0x0A4A      ADD      R10,R0,R10, LSL #+1
   \   00000044   0xBFA8             IT       GE 
   \   00000046   0x4626             MOVGE    R6,R4
   \   00000048   0x2D01             CMP      R5,#+1
   \   0000004A   0xEB00 0x0646      ADD      R6,R0,R6, LSL #+1
   \   0000004E   0xBFAC             ITE      GE 
   \   00000050   0x462F             MOVGE    R7,R5
   \   00000052   0x2700             MOVLT    R7,#+0
   \   00000054   0xF9B9 0xB000      LDRSH    R11,[R9, #+0]
   \   00000058   0xF93E 0xA00A      LDRSH    R10,[LR, R10]
   \   0000005C   0xEDD2 0x0A05      VLDR     S1,[R2, #+20]
   \   00000060   0xF93C 0x6006      LDRSH    R6,[R12, R6]
   \   00000064   0xED92 0x1A06      VLDR     S2,[R2, #+24]
   \   00000068   0xEE00 0xBA10      VMOV     S0,R11
   \   0000006C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000070   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000074   0xEE00 0xAA90      VMOV     S1,R10
   \   00000078   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   0000007C   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000080   0xEE00 0x6A90      VMOV     S1,R6
   \   00000084   0xEB00 0x0647      ADD      R6,R0,R7, LSL #+1
   \   00000088   0xF243 0x073C      MOVW     R7,#+12348
   \   0000008C   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000090   0xED92 0x1A07      VLDR     S2,[R2, #+28]
   \   00000094   0x5FBE             LDRSH    R6,[R7, R6]
   \   00000096   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000009A   0xED92 0x1A08      VLDR     S2,[R2, #+32]
   \   0000009E   0xEE00 0x6A90      VMOV     S1,R6
   \   000000A2   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000000A6   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000AA   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000AE   0xEE10 0x6A10      VMOV     R6,S0
   \   000000B2   0xE001             B.N      ??SumDelay_2
   1140          		 }
   1141          		 else
   1142          		 {
   1143                               bufferSum[i] = (uint16_t)(BufferIn->bufMIC3[i]);
   \                     ??SumDelay_1: (+1)
   \   000000B4   0xF83C 0x6009      LDRH     R6,[R12, R9]
   1144          		 }
   1145          	}
   \                     ??SumDelay_2: (+1)
   \   000000B8   0x1C49             ADDS     R1,R1,#+1
   \   000000BA   0x1C6D             ADDS     R5,R5,#+1
   \   000000BC   0x1C64             ADDS     R4,R4,#+1
   \   000000BE   0x1C5B             ADDS     R3,R3,#+1
   \   000000C0   0xF5B1 0x6F80      CMP      R1,#+1024
   \   000000C4   0xF828 0x6B02      STRH     R6,[R8], #+2
   \   000000C8   0xF109 0x0902      ADD      R9,R9,#+2
   \   000000CC   0xDBAC             BLT.N    ??SumDelay_0
   1146          }
   \   000000CE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1147          
   1148          

   \                                 In section .text, align 2, keep-with-next
   1149          void ButtonInit(void)
   1150          {
   \                     ButtonInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   1151              /* PI8: SW2 */
   1152          	/* PI9: SW1 */
   1153          	 /* ----------------------*/
   1154          	 __GPIOB_CLK_ENABLE();
   \   00000002   0x....             LDR.N    R0,??DataTable14_5  ;; 0x40023830
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0xF041 0x0102      ORR      R1,R1,#0x2
   \   0000000C   0x6001             STR      R1,[R0, #+0]
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   1155          	GPIO_INS.Pin = GPIO_PIN_8|GPIO_PIN_9;
   \   00000010   0x....             LDR.N    R1,??DataTable14
   \   00000012   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0xF44F 0x7040      MOV      R0,#+768
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   1156          	GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   00000020   0x....             LDR.N    R0,??DataTable14_9  ;; 0x10110000
   \   00000022   0x6048             STR      R0,[R1, #+4]
   1157          	GPIO_INS.Pull =GPIO_NOPULL;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x6088             STR      R0,[R1, #+8]
   1158          	GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   00000028   0x2003             MOVS     R0,#+3
   \   0000002A   0x60C8             STR      R0,[R1, #+12]
   1159          	HAL_GPIO_Init(GPIOI,&GPIO_INS);
   \   0000002C   0x....             LDR.N    R0,??DataTable14_28  ;; 0x40022000
   \   0000002E   0x.... 0x....      BL       HAL_GPIO_Init
   1160          	
   1161          	/* Enable and set Button EXTI Interrupt to the lowest priority */
   1162          	HAL_NVIC_SetPriority((IRQn_Type)EXTI9_5_IRQn, 0x0F, 0x00);
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x210F             MOVS     R1,#+15
   \   00000036   0x2017             MOVS     R0,#+23
   \   00000038   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1163          	HAL_NVIC_EnableIRQ((IRQn_Type)EXTI9_5_IRQn);
   \   0000003C   0xB001             ADD      SP,SP,#+4
   \   0000003E   0x2017             MOVS     R0,#+23
   \   00000040   0xF85D 0xEB04      POP      {LR}
   \   00000044   0x.... 0x....      B.W      HAL_NVIC_EnableIRQ
   1164          	/*-----------------------*/
   1165          
   1166          }
   1167          
   1168          
   1169          /* I2C2 init function */

   \                                 In section .text, align 2, keep-with-next
   1170          void MX_I2C2_Init(void)
   1171          {
   1172             __HAL_I2C_DISABLE(&hi2c2);
   \                     MX_I2C2_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable14_29
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x680A             LDR      R2,[R1, #+0]
   \   00000006   0x0852             LSRS     R2,R2,#+1
   \   00000008   0x0052             LSLS     R2,R2,#+1
   \   0000000A   0x600A             STR      R2,[R1, #+0]
   1173            hi2c2.Instance = I2C2;
   \   0000000C   0x....             LDR.N    R1,??DataTable14_20  ;; 0x40005800
   \   0000000E   0x6001             STR      R1,[R0, #+0]
   1174            hi2c2.Init.Timing =0x00A0689A ;//I2C_TIMING  0x00303D5D 0x00A0689A
   \   00000010   0x....             LDR.N    R1,??DataTable14_30  ;; 0xa0689a
   \   00000012   0x6041             STR      R1,[R0, #+4]
   1175            hi2c2.Init.OwnAddress1 = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6081             STR      R1,[R0, #+8]
   1176            hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x60C1             STR      R1,[R0, #+12]
   1177            hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6101             STR      R1,[R0, #+16]
   1178            hi2c2.Init.OwnAddress2 = 0;
   \   00000020   0x6141             STR      R1,[R0, #+20]
   1179            hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   00000022   0x6181             STR      R1,[R0, #+24]
   1180            hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   00000024   0x61C1             STR      R1,[R0, #+28]
   1181            hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   00000026   0x6201             STR      R1,[R0, #+32]
   1182            HAL_I2C_Init(&hi2c2);
   \   00000028   0x.... 0x....      B.W      HAL_I2C_Init
   1183          
   1184              /**Configure Analogue filter 
   1185              */
   1186            //HAL_I2CEx_AnalogFilter_Config(&hi2c2, I2C_ANALOGFILTER_ENABLE);
   1187          
   1188          }
   1189          

   \                                 In section .text, align 2, keep-with-next
   1190           void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
   1191          {  
   \                     HAL_I2S_TxCpltCallback: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   1192            Audio_Play_Out();  
   \   00000002   0x....             LDR.N    R5,??DataTable14
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x....             LDR.N    R4,??DataTable14_31
   \   00000008   0xF895 0x002F      LDRB     R0,[R5, #+47]
   \   0000000C   0xB148             CBZ.N    R0,??HAL_I2S_TxCpltCallback_0
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD001             BEQ.N    ??HAL_I2S_TxCpltCallback_1
   \   00000012   0xD303             BCC.N    ??HAL_I2S_TxCpltCallback_2
   \   00000014   0xE00F             B.N      ??HAL_I2S_TxCpltCallback_3
   \                     ??HAL_I2S_TxCpltCallback_1: (+1)
   \   00000016   0x2140             MOVS     R1,#+64
   \   00000018   0x....             LDR.N    R0,??DataTable14_3
   \   0000001A   0xE004             B.N      ??HAL_I2S_TxCpltCallback_4
   \                     ??HAL_I2S_TxCpltCallback_2: (+1)
   \   0000001C   0x2140             MOVS     R1,#+64
   \   0000001E   0x....             LDR.N    R0,??DataTable14_2
   \   00000020   0xE001             B.N      ??HAL_I2S_TxCpltCallback_4
   \                     ??HAL_I2S_TxCpltCallback_0: (+1)
   \   00000022   0x2140             MOVS     R1,#+64
   \   00000024   0x....             LDR.N    R0,??DataTable14_1
   \                     ??HAL_I2S_TxCpltCallback_4: (+1)
   \   00000026   0x8822             LDRH     R2,[R4, #+0]
   \   00000028   0xEB00 0x1082      ADD      R0,R0,R2, LSL #+6
   \   0000002C   0xF500 0x5000      ADD      R0,R0,#+8192
   \   00000030   0x3028             ADDS     R0,R0,#+40
   \   00000032   0x.... 0x....      BL       Audio_MAL_Play
   \                     ??HAL_I2S_TxCpltCallback_3: (+1)
   \   00000036   0x8820             LDRH     R0,[R4, #+0]
   \   00000038   0x.... 0x....      BL       AudioUSBSend
   \   0000003C   0x8820             LDRH     R0,[R4, #+0]
   \   0000003E   0x1C40             ADDS     R0,R0,#+1
   \   00000040   0x8020             STRH     R0,[R4, #+0]
   \   00000042   0xB280             UXTH     R0,R0
   \   00000044   0x2840             CMP      R0,#+64
   \   00000046   0xD122             BNE.N    ??HAL_I2S_TxCpltCallback_5
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x....             LDR.N    R1,??DataTable14_32
   \   0000004C   0x86E8             STRH     R0,[R5, #+54]
   \   0000004E   0x8728             STRH     R0,[R5, #+56]
   \   00000050   0x87E8             STRH     R0,[R5, #+62]
   \   00000052   0x8668             STRH     R0,[R5, #+50]
   \   00000054   0x8628             STRH     R0,[R5, #+48]
   \   00000056   0x86A8             STRH     R0,[R5, #+52]
   \   00000058   0x8768             STRH     R0,[R5, #+58]
   \   0000005A   0x87A8             STRH     R0,[R5, #+60]
   \   0000005C   0xF885 0x002C      STRB     R0,[R5, #+44]
   \   00000060   0x8008             STRH     R0,[R1, #+0]
   \   00000062   0x8020             STRH     R0,[R4, #+0]
   \   00000064   0xF895 0x002F      LDRB     R0,[R5, #+47]
   \   00000068   0xB138             CBZ.N    R0,??HAL_I2S_TxCpltCallback_6
   \   0000006A   0x2802             CMP      R0,#+2
   \   0000006C   0xD001             BEQ.N    ??HAL_I2S_TxCpltCallback_7
   \   0000006E   0xD302             BCC.N    ??HAL_I2S_TxCpltCallback_8
   \   00000070   0xE006             B.N      ??HAL_I2S_TxCpltCallback_9
   \                     ??HAL_I2S_TxCpltCallback_7: (+1)
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0xE002             B.N      ??HAL_I2S_TxCpltCallback_10
   \                     ??HAL_I2S_TxCpltCallback_8: (+1)
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xE000             B.N      ??HAL_I2S_TxCpltCallback_10
   \                     ??HAL_I2S_TxCpltCallback_6: (+1)
   \   0000007A   0x2002             MOVS     R0,#+2
   \                     ??HAL_I2S_TxCpltCallback_10: (+1)
   \   0000007C   0xF885 0x002F      STRB     R0,[R5, #+47]
   \                     ??HAL_I2S_TxCpltCallback_9: (+1)
   \   00000080   0x....             LDR.N    R0,??DataTable14_8
   \   00000082   0x8801             LDRH     R1,[R0, #+0]
   \   00000084   0x2964             CMP      R1,#+100
   \   00000086   0xDA02             BGE.N    ??HAL_I2S_TxCpltCallback_5
   \   00000088   0x8801             LDRH     R1,[R0, #+0]
   \   0000008A   0x1C49             ADDS     R1,R1,#+1
   \   0000008C   0x8001             STRH     R1,[R0, #+0]
   1193          }
   \                     ??HAL_I2S_TxCpltCallback_5: (+1)
   \   0000008E   0xB001             ADD      SP,SP,#+4
   \   00000090   0xBD30             POP      {R4,R5,PC}       ;; return
   1194          

   \                                 In section .text, align 2, keep-with-next
   1195           uint8_t StartPlay(void)
   1196           {
   \                     StartPlay: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xF240 0x70FF      MOVW     R0,#+2047
   \   00000006   0x....             LDR.N    R4,??DataTable14
   1197          	while (1)
   1198          	{
   1199          		 /* there is data in the buffer */	
   1200          		 if((WaveRec_idxSens1>=(2*AUDIO_OUT_BUFFER_SIZE-1))&&(stFrstFrmStore<3))
   \                     ??StartPlay_0: (+1)
   \   00000008   0x8EE1             LDRH     R1,[R4, #+54]
   \   0000000A   0x4281             CMP      R1,R0
   \   0000000C   0xDBFC             BLT.N    ??StartPlay_0
   \   0000000E   0xF894 0x102D      LDRB     R1,[R4, #+45]
   \   00000012   0x2903             CMP      R1,#+3
   \   00000014   0xDAF8             BGE.N    ??StartPlay_0
   1201          		 {
   1202          			 RESET_IDX
   \   00000016   0x2200             MOVS     R2,#+0
   1203          			 /* this is just run 1 time after 1st frame of I2S data full */
   1204          			 if ((stFrstFrmStore<3))
   1205          			 {
   1206                                       stFrstFrmStore++;
   \   00000018   0x1C49             ADDS     R1,R1,#+1
   \   0000001A   0x86E2             STRH     R2,[R4, #+54]
   \   0000001C   0x8722             STRH     R2,[R4, #+56]
   \   0000001E   0x87E2             STRH     R2,[R4, #+62]
   \   00000020   0x8662             STRH     R2,[R4, #+50]
   \   00000022   0x8622             STRH     R2,[R4, #+48]
   \   00000024   0x86A2             STRH     R2,[R4, #+52]
   \   00000026   0x8762             STRH     R2,[R4, #+58]
   \   00000028   0x87A2             STRH     R2,[R4, #+60]
   \   0000002A   0xF884 0x202C      STRB     R2,[R4, #+44]
   1207                       
   1208                                       buffer_switch = BUF2_PLAY; /* record data to buffer3 */
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0xF884 0x102D      STRB     R1,[R4, #+45]
   1209                       
   1210                                       if (stFrstFrmStore==2)
   \   00000034   0xB2C9             UXTB     R1,R1
   \   00000036   0x2902             CMP      R1,#+2
   \   00000038   0xF884 0x202F      STRB     R2,[R4, #+47]
   \   0000003C   0xD1E4             BNE.N    ??StartPlay_0
   1211                                       {
   1212                                           StartRecMic7_8();
   \   0000003E   0x.... 0x....      BL       StartRecMic7_8
   1213                   
   1214                                           /*------------------------PLAYER------------------------------------------*/
   1215                                           Audio_MAL_Play((uint32_t)Buffer1.bufMIC1,2*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
   \   00000042   0x2140             MOVS     R1,#+64
   \   00000044   0x....             LDR.N    R0,??DataTable14_2
   \   00000046   0x.... 0x....      BL       Audio_MAL_Play
   1216                                           /*------------------------------------------------------------------------*/				 
   1217                                           buffer_switch = BUF1_PLAY;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xF884 0x002F      STRB     R0,[R4, #+47]
   1218          
   1219                                           return 0;		 
   \   00000050   0xBD10             POP      {R4,PC}          ;; return
   1220                                       }				 
   1221                               
   1222          			 }
   1223          		 
   1224          		 }
   1225          	}
   1226           }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     GPIO_INS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x........         DC32     Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0xE000ED14         DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     SPI4_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x........         DC32     WaveRecord_flgIni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x........         DC32     cntStrt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \   00000000   0x........         DC32     AUDIO_Desc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \   00000000   0x........         DC32     USBD_AUDIO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \   00000000   0x........         DC32     USBD_AUDIO_fops

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \   00000000   0x........         DC32     ??ticks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \   00000000   0x00100001         DC32     0x100001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_18:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_19:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_20:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_21:
   \   00000000   0x........         DC32     huart3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_22:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_23:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_24:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_25:
   \   00000000   0x........         DC32     cntRisingEXTI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_26:
   \   00000000   0x........         DC32     btnSW1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_27:
   \   00000000   0x........         DC32     SS1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_28:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_29:
   \   00000000   0x........         DC32     hi2c2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_30:
   \   00000000   0x00A0689A         DC32     0xa0689a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_31:
   \   00000000   0x........         DC32     idxFrmPDMMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_32:
   \   00000000   0x........         DC32     WaveRec_idxTest
   1227          /*****************************END OF FILE**************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     144   BSP_AUDIO_OUT_ClockConfig
       144   -> HAL_RCCEx_GetPeriphCLKConfig
       144   -> HAL_RCCEx_PeriphCLKConfig
       8   ButtonInit
         8   -> HAL_GPIO_Init
         0   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
      16   DFT_Init
        16   -> arm_rfft_init_f32
       0   EXTI15_10_IRQHandler
       8   EXTI4_IRQHandler
         8   -> HAL_NVIC_DisableIRQ
       8   EXTI9_5_IRQHandler
         8   -> BSP_LED_Toggle
      16   FFT_Update
         0   -> AudioPlayerUpd
        16   -> CrssCor
        16   -> FactorUpd
        16   -> PDM2PCMSDO78
        16   -> SumDelay
      32   HAL_I2C_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
      16   HAL_I2S_TxCpltCallback
        16   -> AudioUSBSend
        16   -> Audio_MAL_Play
      32   HAL_UART_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       0   MX_I2C2_Init
         0   -> HAL_I2C_Init
       8   StartPlay
         8   -> Audio_MAL_Play
         8   -> StartRecMic7_8
      36   SumDelay
     208   SystemClock_Config
       208   -> HAL_PWREx_EnableOverDrive
       208   -> HAL_RCCEx_PeriphCLKConfig
       208   -> HAL_RCC_ClockConfig
       208   -> HAL_RCC_OscConfig
       0   Toggle_Leds
       0   USART3_Init
         0   -> HAL_UART_Init
     160   main
       160   -> AUDIO_InitApplication
       160   -> BSP_LED_Init
       160   -> BSP_LED_Toggle
       160   -> BSP_SDRAM_Init
       160   -> ButtonInit
       160   -> DFT_Init
       160   -> FFT_Update
       160   -> HAL_GPIO_Init
       160   -> HAL_GPIO_WritePin
       160   -> HAL_Init
       160   -> HAL_NVIC_EnableIRQ
       160   -> HAL_NVIC_SetPriority
       160   -> HAL_RCCEx_GetPeriphCLKConfig
       160   -> HAL_RCCEx_PeriphCLKConfig
       160   -> MIC1TO6_Init
       160   -> MX_I2C2_Init
       160   -> STA321MP_Ini
       160   -> StartPlay
       160   -> SystemClock_Config
       160   -> USBD_AUDIO_Init_Microphone_Descriptor
       160   -> USBD_AUDIO_RegisterInterface
       160   -> USBD_Init
       160   -> USBD_RegisterClass
       160   -> USBD_Start


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_20
       4  ??DataTable14_21
       4  ??DataTable14_22
       4  ??DataTable14_23
       4  ??DataTable14_24
       4  ??DataTable14_25
       4  ??DataTable14_26
       4  ??DataTable14_27
       4  ??DataTable14_28
       4  ??DataTable14_29
       4  ??DataTable14_3
       4  ??DataTable14_30
       4  ??DataTable14_31
       4  ??DataTable14_32
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
     100  BSP_AUDIO_OUT_ClockConfig
    4096  BufferTest
      72  ButtonInit
     118  DFT_Init
       2  DeltaBuf1
       2  DeltaBuf1Old
       2  EXTI15_10_IRQHandler
      42  EXTI4_IRQHandler
      78  EXTI9_5_IRQHandler
     176  FFT_Update
    2676  GPIO_INS
          FacMic
          flgDlyUpd
          stFrstFrmStore
          flg10ms
          buffer_switch
          WaveRec_idxSens4
          WaveRec_idxSens3
          I2S2_idxTmp
          WaveRec_idxSens1
          WaveRec_idxSens2
          WaveRec_idxSens5
          WaveRec_idxSens6
          idxSPI5DataBuf3
          idxLatency13
          idxLatency12
          idxLatency14
          idxLatency25
          idxLatency63
          idxLatency78
          cntTime200
          bufferSum
          hUSBDDevice
     188  HAL_I2C_MspInit
     146  HAL_I2S_TxCpltCallback
     108  HAL_UART_MspInit
      44  MX_I2C2_Init
     220  SS1
          SS2
          SS3
          SS4
          ISS
          S1
          S2
          S3
          S4
          IS
      82  StartPlay
     210  SumDelay
     160  SystemClock_Config
      18  Toggle_Leds
      42  USART3_Init
    1024  aRxBuffer
       1  appli_state
       4  btnSW1
          btnSW2
          cntBtnPress
          Command_index
       2  cntRisingEXTI
       1  flgSTAIni
     696  hUSBHost
     100  hspi4
     112  huart3
       1  idxDec
     514  main
      20  pI2CData
      12  pI2CRx
       4  ticks

 
 6 273 bytes in section .bss
 2 700 bytes in section .data
 2 232 bytes in section .text
 
 2 232 bytes of CODE memory
 8 973 bytes of DATA memory

Errors: none
Warnings: 1
