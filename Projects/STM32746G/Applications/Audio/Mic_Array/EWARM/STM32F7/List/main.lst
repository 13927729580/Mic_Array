###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       29/Mar/2016  20:10:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\main.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\main.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          
      8          
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "main.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void SCB_EnableICache(void)
   \                     SCB_EnableICache: (+1)
   \   00000000   0xF3BF 0x8F4F      DSB      
   \   00000004   0xF3BF 0x8F6F      ISB      
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable17  ;; 0xe000ef50
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0xe000ed14
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable17_1  ;; 0xe000ed14
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0xF3BF 0x8F4F      DSB      
   \   00000024   0xF3BF 0x8F6F      ISB      
   \   00000028   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void SCB_EnableDCache(void)
   \                     SCB_EnableDCache: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable17_2  ;; 0xe000ed84
   \   00000008   0x6023             STR      R3,[R4, #+0]
   \   0000000A   0xF3BF 0x8F4F      DSB      
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable17_3  ;; 0xe000ed80
   \   00000012   0x681B             LDR      R3,[R3, #+0]
   \   00000014   0x0018             MOVS     R0,R3
   \   00000016   0xF3C0 0x334E      UBFX     R3,R0,#+13,#+15
   \   0000001A   0x0019             MOVS     R1,R3
   \                     ??SCB_EnableDCache_0: (+1)
   \   0000001C   0xF3C0 0x03C9      UBFX     R3,R0,#+3,#+10
   \   00000020   0x001A             MOVS     R2,R3
   \                     ??SCB_EnableDCache_1: (+1)
   \   00000022   0xF643 0x73E0      MOVW     R3,#+16352
   \   00000026   0xEA13 0x1341      ANDS     R3,R3,R1, LSL #+5
   \   0000002A   0xEA53 0x7382      ORRS     R3,R3,R2, LSL #+30
   \   0000002E   0x.... 0x....      LDR.W    R4,??DataTable17_4  ;; 0xe000ef60
   \   00000032   0x6023             STR      R3,[R4, #+0]
   \   00000034   0x0013             MOVS     R3,R2
   \   00000036   0x1E5A             SUBS     R2,R3,#+1
   \   00000038   0x2B00             CMP      R3,#+0
   \   0000003A   0xD1F2             BNE.N    ??SCB_EnableDCache_1
   \   0000003C   0x000B             MOVS     R3,R1
   \   0000003E   0x1E59             SUBS     R1,R3,#+1
   \   00000040   0x2B00             CMP      R3,#+0
   \   00000042   0xD1EB             BNE.N    ??SCB_EnableDCache_0
   \   00000044   0xF3BF 0x8F4F      DSB      
   \   00000048   0x.... 0x....      LDR.W    R3,??DataTable17_1  ;; 0xe000ed14
   \   0000004C   0x681B             LDR      R3,[R3, #+0]
   \   0000004E   0xF453 0x3380      ORRS     R3,R3,#0x10000
   \   00000052   0x.... 0x....      LDR.W    R4,??DataTable17_1  ;; 0xe000ed14
   \   00000056   0x6023             STR      R3,[R4, #+0]
   \   00000058   0xF3BF 0x8F4F      DSB      
   \   0000005C   0xF3BF 0x8F6F      ISB      
   \   00000060   0xBC10             POP      {R4}
   \   00000062   0x4770             BX       LR               ;; return
     11          #include "DSP.h"
     12          //#include "waveplayer.h"
     13          #include "waverecorder.h"
     14          #include "stm32f7xx_hal_usart.h"
     15          #include "pdm_filter.h"
     16          #include "arm_math.h"
     17          #include <stdio.h>
     18          
     19          
     20          /* Private typedef -----------------------------------------------------------*/
     21          /* Private define ------------------------------------------------------------*/
     22          /* Private macro -------------------------------------------------------------*/
     23          
     24          
     25          /* EXTERN VARIABLES ----------------------------------------------------------*/
     26          //extern __IO AUDIO_IN_BufferTypeDef Buffer1, Buffer2, BufferCtlRecIn;
     27          //AUDIO_IN_BufferTypeDef Buffer3;
     28          
     29          
     30          
     31          
     32          extern Mic_Array_Data Buffer1,Buffer2,Buffer3;
     33          
     34          extern __IO uint8_t XferCplt;
     35          extern __IO AUDIO_IN_BufferTypeDef BufferCtlRecIn;
     36          extern DMA_HandleTypeDef     DmaHandle;
     37          
     38          extern SAI_HandleTypeDef         haudio_out_sai;
     39          extern uint8_t WaveRecord_flgIni;
     40          extern uint32_t EnergySound,EnergyError;
     41          extern I2C_HandleTypeDef hi2c2;
     42          extern __IO uint16_t cntStrt;
     43          extern __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
     44          extern __IO   uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
     45          extern USBD_AUDIO_ItfTypeDef  USBD_AUDIO_fops;
     46          /* GLOBAL VARIABLE -----------------------------------------------------------*/

   \                                 In section .bss, align 4
     47          USBH_HandleTypeDef hUSBHost;
   \                     hUSBHost:
   \   00000000                      DS8 696

   \                                 In section .bss, align 4
     48          USBD_HandleTypeDef hUSBDDevice;
   \                     hUSBDDevice:
   \   00000000                      DS8 548

   \                                 In section .bss, align 1
     49          AUDIO_ApplicationTypeDef appli_state = APPLICATION_IDLE;//APPLICATION_IDLE
   \                     appli_state:
   \   00000000                      DS8 1
     50          

   \                                 In section .bss, align 4
     51          UART_HandleTypeDef huart3;
   \                     huart3:
   \   00000000                      DS8 112

   \                                 In section .bss, align 4
     52          SPI_HandleTypeDef hspi4;
   \                     hspi4:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
     53          GPIO_InitTypeDef GPIO_INS;
   \                     GPIO_INS:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     54          Mic_Array_Coef_f FacMic;
   \                     FacMic:
   \   00000000                      DS8 24
     55          	  

   \                                 In section .bss, align 4
     56          uint16_t bufferSum[6*AUDIO_OUT_BUFFER_SIZE+10];
   \                     bufferSum:
   \   00000000                      DS8 12308

   \                                 In section .bss, align 4
     57          float CrssCorVal78,CrssCorVal14,CrssCorVal25,CrssCorVal63;
   \                     CrssCorVal78:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     CrssCorVal14:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     CrssCorVal25:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     CrssCorVal63:
   \   00000000                      DS8 4
     58          

   \                                 In section .bss, align 2
     59          __IO uint16_t  WaveRec_idxSens4,WaveRec_idxSens3,I2S2_idxTmp;
   \                     WaveRec_idxSens4:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     WaveRec_idxSens3:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S2_idxTmp:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     60          __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
   \                     WaveRec_idxSens1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     WaveRec_idxSens2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     61          __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
   \                     WaveRec_idxSens5:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     WaveRec_idxSens6:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     62          __IO uint16_t  idxSPI5DataBuf3;
   \                     idxSPI5DataBuf3:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     63          __IO uint16_t  cntRisingEXTI;
   \                     cntRisingEXTI:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     64          __IO uint8_t   btnSW1,btnSW2;
   \                     btnSW1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     btnSW2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     65          __IO uint8_t   flgDlyUpd; 
   \                     flgDlyUpd:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     66          __IO uint8_t   cntBtnPress;
   \                     cntBtnPress:
   \   00000000                      DS8 1
     67          
     68          extern __IO uint16_t  WaveRec_idxTest;
     69          extern __IO uint8_t  swtBufUSBOut;
     70          
     71          /* Buffer used for reception */

   \                                 In section .bss, align 4
     72          uint8_t aRxBuffer[1024];
   \                     aRxBuffer:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 1
     73          uint8_t idxDec,stFrstFrmStore;
   \                     idxDec:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     stFrstFrmStore:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     74          int16_t DeltaBuf1,DeltaBuf1Old;
   \                     DeltaBuf1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     DeltaBuf1Old:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     75          int16_t idxLatency13,idxLatency12,idxLatency14,idxLatency25,idxLatency63,idxLatency78;
   \                     idxLatency13:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency14:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency25:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency63:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency78:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     76          int16_t * LowPass_Mic1Old;
   \                     LowPass_Mic1Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     77          int16_t *LowPass_Mic2Old;
   \                     LowPass_Mic2Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     78          int16_t *LowPass_Mic3Old; 
   \                     LowPass_Mic3Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     79          int16_t *LowPass_Mic4Old;
   \                     LowPass_Mic4Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     80          int16_t *LowPass_Mic5Old;
   \                     LowPass_Mic5Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     81          int16_t *LowPass_Mic6Old;
   \                     LowPass_Mic6Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     82          int16_t *LowPass_Mic7Old;
   \                     LowPass_Mic7Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     83          int16_t *LowPass_Mic8Old;
   \                     LowPass_Mic8Old:
   \   00000000                      DS8 4
     84          

   \                                 In section .bss, align 1
     85          __IO char flg10ms;
   \                     flg10ms:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     86          uint8_t flgSTAIni;
   \                     flgSTAIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     87          uint16_t cntTime200;
   \                     cntTime200:
   \   00000000                      DS8 2
     88          

   \                                 In section .data, align 1
     89          uint8_t buffer_switch = 1;
   \                     buffer_switch:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
     90          uint8_t Command_index=1;
   \                     Command_index:
   \   00000000   0x01               DC8 1
     91          

   \                                 In section .bss, align 4
     92          float fir256Coff[DSP_NUMCOFFHANNIING];
   \                     fir256Coff:
   \   00000000                      DS8 4096
     93          //int16_t PreCalcBuff[129][256];
     94          
     95          
     96          #if MAIN_CRSCORR
     97          arm_rfft_instance_q15 RealFFT_Ins, RealIFFT_Ins;
     98          #endif
     99          
    100          //arm_cfft_radix4_instance_f32 SS,SS1,SS2,SS3,SS4,ISS; 
    101          //arm_rfft_instance_f32 S,S1,S2,S3,S4,IS;
    102          

   \                                 In section .bss, align 4
    103          arm_rfft_fast_instance_f32 S,S1,S2,S3,S4,IS;
   \                     S:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     `S1`:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     `S2`:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     `S3`:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     `S4`:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \                     IS:
   \   00000000                      DS8 24
    104          
    105          
    106          #if (DEBUG)
    107          uint8_t  pUARTBuf[128];
    108          uint32_t Main_CoefMor;
    109          uint8_t stDir,flgS2,flgS3,flgS4,flgS2Flt,flgS3Flt,flgS4Flt;
    110          uint8_t flgS2Ins,flgS3Ins,flgS4Ins;
    111          #endif
    112          
    113          #if USB_STREAMING
    114          extern __IO uint16_t idxFrmPDMMic8;
    115          #endif
    116          
    117          
    118          /* Private function prototypes -----------------------------------------------*/
    119          static void SystemClock_Config(void);
    120          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id);
    121          static void CPU_CACHE_Enable(void);
    122          
    123          
    124          
    125          
    126          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c);
    127          void MX_I2C2_Init(void);
    128          void USART3_Init(void);
    129          void ReadSTASeq(uint8_t Addr, uint8_t *pBufOut,uint8_t Len );
    130          void WriteSTAByte(uint8_t Addr, uint8_t *pBufIn, uint8_t len);
    131          void SPI5_CallBack(SPI_HandleTypeDef *hspi);
    132          uint8_t StartPlay(void);
    133          
    134          
    135          /*--------------INLINE FUNCTION-----------------------------------------------*/
    136          

   \                                 In section .text, align 2, keep-with-next
    137          inline static void FFT_Update(void)
    138          {
   \                     FFT_Update: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    139          
    140                PDM2PCMSDO78();      
   \   00000002   0x.... 0x....      BL       PDM2PCMSDO78
    141                /* Hafl buffer is filled in by I2S data stream in */
    142                if((flgDlyUpd==0))
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xF040 0x80BE      BNE.W    ??FFT_Update_0
    143                {
    144                      
    145                      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15); 
    146                      FactorUpd(&FacMic); 
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable17_6
   \   00000016   0x.... 0x....      BL       FactorUpd
    147                      //STM_EVAL_LEDOn(LED3);
    148                      flgDlyUpd = 1; 
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable17_5
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    149          /*-------------------------------------------------------------------------------------------------------------
    150          			  
    151          	Sequence  Record Data                     Processing Data                 Player Data
    152          			  
    153          	1-------  Buffer1                         Buffer2                         Buffer3
    154          			  
    155          	2-------  Buffer3                         Buffer1                         Buffer2		  
    156          			  
    157          	3-------  Buffer2                         Buffer3                         Buffer1 
    158           ---------------------------------------------------------------------------------------------------------------*/
    159                      /* Processing Data */
    160          			switch (buffer_switch)  //buffer_switch
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable17_7
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD003             BEQ.N    ??FFT_Update_1
   \   0000002C   0x2802             CMP      R0,#+2
   \   0000002E   0xD073             BEQ.N    ??FFT_Update_2
   \   00000030   0xD339             BCC.N    ??FFT_Update_3
   \   00000032   0xE0AA             B.N      ??FFT_Update_4
    161          			{             
    162          			    case BUF1_PLAY:
    163          #if MAIN_CRSCORR
    164                                      for (uint16_t i=0; i<(_MAX_SS/_MAX_SS);i++)
    165                                      {
    166                                          //uint16_t i=0;
    167                                              arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3[i*128],    (q15_t *)&bufferFFT[i*256]);
    168                                              arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3_1[i*128],   (q15_t *)&bufferFFT_1[i*256]);
    169                                      
    170                                              arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],2*128);
    171                                      
    172                                              //for (uint16_t j=0; j<256;j++)
    173                                              //{
    174                                              //	  bufferFFTSum[i*256+j]<<=6;
    175                                              //}
    176                                              
    177                                              arm_rfft_q15(&RealIFFT_Ins,    (q15_t *)&bufferFFTSum[i*256],    (q15_t *)&bufferSum[i*128]);
    178                                      }
    179          #elif MAIN_FFT
    180                              /* Summing in Buffer3 */
    181                              Delay_Sum_FFT(&Buffer3,&FacMic,(int16_t *)bufferSum, 512);
    182                              //FFT_SUM((int16_t *)buffer3, (int16_t * )buffer3_1,fbuffer, 1024);				 	   
    183          #else
    184                              //LowPassIIR(Buffer3.bufMIC1,Buffer3.bufMIC1,LowPass_Mic1Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    185                              //LowPassIIR(Buffer3.bufMIC2,Buffer3.bufMIC2,LowPass_Mic2Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    186                              //LowPassIIR(Buffer3.bufMIC3,Buffer3.bufMIC3,LowPass_Mic3Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    187                              //LowPassIIR(Buffer3.bufMIC4,Buffer3.bufMIC4,LowPass_Mic4Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    188                              //LowPassIIR(Buffer3.bufMIC5,Buffer3.bufMIC5,LowPass_Mic5Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    189                              //LowPassIIR(Buffer3.bufMIC6,Buffer3.bufMIC6,LowPass_Mic6Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    190                              //LowPassIIR(Buffer3.bufMIC7,Buffer3.bufMIC7,LowPass_Mic7Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    191                              //LowPassIIR(Buffer3.bufMIC8,Buffer3.bufMIC8,LowPass_Mic8Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    192          
    193                              idxLatency78 = GCC_PHAT(Buffer3.bufMIC7, Buffer3.bufMIC8, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal78);
   \                     ??FFT_Update_1: (+1)
   \   00000034   0x.... 0x....      LDR.W    R3,??DataTable17_8
   \   00000038   0xF44F 0x6280      MOV      R2,#+1024
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable17_9
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable17_10
   \   00000044   0x.... 0x....      BL       GCC_PHAT
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable17_11
   \   0000004C   0x8008             STRH     R0,[R1, #+0]
    194                              idxLatency14 = GCC_PHAT(Buffer3.bufMIC1, Buffer3.bufMIC4, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal14);
   \   0000004E   0x.... 0x....      LDR.W    R3,??DataTable17_12
   \   00000052   0xF44F 0x6280      MOV      R2,#+1024
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable17_13
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable17_14
   \   0000005E   0x.... 0x....      BL       GCC_PHAT
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable17_15
   \   00000066   0x8008             STRH     R0,[R1, #+0]
    195                              idxLatency25 = GCC_PHAT(Buffer3.bufMIC5, Buffer3.bufMIC2, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal25);
   \   00000068   0x.... 0x....      LDR.W    R3,??DataTable17_16
   \   0000006C   0xF44F 0x6280      MOV      R2,#+1024
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable17_17
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable17_18
   \   00000078   0x.... 0x....      BL       GCC_PHAT
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable17_19
   \   00000080   0x8008             STRH     R0,[R1, #+0]
    196                              idxLatency63 = GCC_PHAT(Buffer3.bufMIC6, Buffer3.bufMIC3, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal63);
   \   00000082   0x.... 0x....      LDR.W    R3,??DataTable17_20
   \   00000086   0xF44F 0x6280      MOV      R2,#+1024
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable17_21
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable17_22
   \   00000092   0x.... 0x....      BL       GCC_PHAT
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable17_23
   \   0000009A   0x8008             STRH     R0,[R1, #+0]
    197                             
    198          
    199                              SumDelay(&Buffer3);
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable17_14
   \   000000A0   0x.... 0x....      BL       SumDelay
    200          #endif
    201          					
    202          					break;
   \   000000A4   0xE071             B.N      ??FFT_Update_5
    203          				case BUF2_PLAY:
    204          
    205          #if MAIN_CRSCORR
    206                               for (uint16_t i=0; i<(_MAX_SS/128);i++)
    207                               { 
    208                                  //uint16_t i=0;
    209                                  arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1[i*128],(q15_t *)&bufferFFT[i*256]);
    210                                  arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    211          
    212                                  arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],
    213                                                  2*128);
    214          
    215                                  //for (uint16_t j=0; j<256;j++)
    216                                  //{
    217                                  //	   bufferFFTSum[i*256+j]<<=6;
    218                                  //}
    219          
    220          
    221                                  arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    222                               }
    223          #elif MAIN_FFT
    224                              /* Summing in Buffer1 */	 
    225                              Delay_Sum_FFT(&Buffer1, &FacMic,(int16_t * )bufferSum,512);
    226                              //FFT_SUM((int16_t *)buffer1, (int16_t * )buffer1_1,fbuffer, 1024);
    227          
    228          #else
    229                          
    230                            //idxLatency13 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    231                            //idxLatency12 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    232          					//LowPassIIR(Buffer1.bufMIC1,Buffer1.bufMIC1,LowPass_Mic1Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    233          					//LowPassIIR(Buffer1.bufMIC2,Buffer1.bufMIC2,LowPass_Mic2Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    234          					//LowPassIIR(Buffer1.bufMIC3,Buffer1.bufMIC3,LowPass_Mic3Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    235          					//LowPassIIR(Buffer1.bufMIC4,Buffer1.bufMIC4,LowPass_Mic4Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    236          					//LowPassIIR(Buffer1.bufMIC5,Buffer1.bufMIC5,LowPass_Mic5Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    237          					//LowPassIIR(Buffer1.bufMIC6,Buffer1.bufMIC6,LowPass_Mic6Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    238          					//LowPassIIR(Buffer1.bufMIC7,Buffer1.bufMIC7,LowPass_Mic7Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    239          					//LowPassIIR(Buffer1.bufMIC8,Buffer1.bufMIC8,LowPass_Mic8Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    240          					
    241                            idxLatency78 = GCC_PHAT(Buffer1.bufMIC7, Buffer1.bufMIC8, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal78);	
   \                     ??FFT_Update_3: (+1)
   \   000000A6   0x.... 0x....      LDR.W    R3,??DataTable17_8
   \   000000AA   0xF44F 0x6280      MOV      R2,#+1024
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable17_24
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable17_25
   \   000000B6   0x.... 0x....      BL       GCC_PHAT
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable17_11
   \   000000BE   0x8008             STRH     R0,[R1, #+0]
    242                            idxLatency14 = GCC_PHAT(Buffer1.bufMIC1, Buffer1.bufMIC4, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal14);
   \   000000C0   0x.... 0x....      LDR.W    R3,??DataTable17_12
   \   000000C4   0xF44F 0x6280      MOV      R2,#+1024
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable17_26
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable17_27
   \   000000D0   0x.... 0x....      BL       GCC_PHAT
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable17_15
   \   000000D8   0x8008             STRH     R0,[R1, #+0]
    243                            idxLatency25 = GCC_PHAT(Buffer1.bufMIC5, Buffer1.bufMIC2, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal25);
   \   000000DA   0x.... 0x....      LDR.W    R3,??DataTable17_16
   \   000000DE   0xF44F 0x6280      MOV      R2,#+1024
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable17_28
   \   000000E6   0x.... 0x....      LDR.W    R0,??DataTable17_29
   \   000000EA   0x.... 0x....      BL       GCC_PHAT
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable17_19
   \   000000F2   0x8008             STRH     R0,[R1, #+0]
    244                            idxLatency63 = GCC_PHAT(Buffer1.bufMIC6, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal63);
   \   000000F4   0x.... 0x....      LDR.W    R3,??DataTable17_20
   \   000000F8   0xF44F 0x6280      MOV      R2,#+1024
   \   000000FC   0x.... 0x....      LDR.W    R1,??DataTable17_30
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable17_31
   \   00000104   0x.... 0x....      BL       GCC_PHAT
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable17_23
   \   0000010C   0x8008             STRH     R0,[R1, #+0]
    245          
    246          
    247          
    248                            SumDelay(&Buffer1);
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable17_27
   \   00000112   0x.... 0x....      BL       SumDelay
    249          #endif
    250          	    break;
   \   00000116   0xE038             B.N      ??FFT_Update_5
    251          					
    252          	   case BUF3_PLAY:
    253          #if MAIN_CRSCORR
    254                    for (uint16_t i=0; i<(_MAX_SS/128);i++)
    255                    {
    256                        arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2[i*128],(q15_t *)&bufferFFT[i*256]);
    257                        arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    258          
    259                        arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],	(q15_t *)&bufferFFTSum[i*256],
    260                                           2*128);
    261          
    262                        //for (uint16_t j=0; j<256;j++)
    263                        //{
    264                        //   bufferFFTSum[i*256+j]<<=6;
    265                        //}
    266          
    267          
    268                        arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    269                    }
    270          #elif MAIN_FFT
    271                  /* Summing in Buffer2 */
    272                  Delay_Sum_FFT(&Buffer2,&FacMic, (int16_t * )bufferSum, 512);
    273                  //FFT_SUM((int16_t *)buffer2, (int16_t * )buffer2_1,fbuffer, 1024);				
    274          #else
    275          
    276                    //idxLatency13 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    277                    //idxLatency12 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    278          
    279          		  //LowPassIIR(Buffer2.bufMIC1,Buffer2.bufMIC1,LowPass_Mic1Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    280          		  //LowPassIIR(Buffer2.bufMIC2,Buffer2.bufMIC2,LowPass_Mic2Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    281          		  //LowPassIIR(Buffer2.bufMIC3,Buffer2.bufMIC3,LowPass_Mic3Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    282          		  //LowPassIIR(Buffer2.bufMIC4,Buffer2.bufMIC4,LowPass_Mic4Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    283          		  //LowPassIIR(Buffer2.bufMIC5,Buffer2.bufMIC5,LowPass_Mic5Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    284          		  //LowPassIIR(Buffer2.bufMIC6,Buffer2.bufMIC6,LowPass_Mic6Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    285          		  //LowPassIIR(Buffer2.bufMIC7,Buffer2.bufMIC7,LowPass_Mic7Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    286          		  //LowPassIIR(Buffer2.bufMIC8,Buffer2.bufMIC8,LowPass_Mic8Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    287          
    288                    idxLatency78 = GCC_PHAT(Buffer2.bufMIC7, Buffer2.bufMIC8, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal78);
   \                     ??FFT_Update_2: (+1)
   \   00000118   0x.... 0x....      LDR.W    R3,??DataTable17_8
   \   0000011C   0xF44F 0x6280      MOV      R2,#+1024
   \   00000120   0x.... 0x....      LDR.W    R1,??DataTable17_32
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable17_33
   \   00000128   0x.... 0x....      BL       GCC_PHAT
   \   0000012C   0x.... 0x....      LDR.W    R1,??DataTable17_11
   \   00000130   0x8008             STRH     R0,[R1, #+0]
    289                    idxLatency14 = GCC_PHAT(Buffer2.bufMIC1, Buffer2.bufMIC4, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal14);
   \   00000132   0x.... 0x....      LDR.W    R3,??DataTable17_12
   \   00000136   0xF44F 0x6280      MOV      R2,#+1024
   \   0000013A   0x.... 0x....      LDR.W    R1,??DataTable17_34
   \   0000013E   0x.... 0x....      LDR.W    R0,??DataTable17_35
   \   00000142   0x.... 0x....      BL       GCC_PHAT
   \   00000146   0x.... 0x....      LDR.W    R1,??DataTable17_15
   \   0000014A   0x8008             STRH     R0,[R1, #+0]
    290                    idxLatency25 = GCC_PHAT(Buffer2.bufMIC5, Buffer2.bufMIC2, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal25);
   \   0000014C   0x.... 0x....      LDR.W    R3,??DataTable17_16
   \   00000150   0xF44F 0x6280      MOV      R2,#+1024
   \   00000154   0x.... 0x....      LDR.W    R1,??DataTable17_36
   \   00000158   0x.... 0x....      LDR.W    R0,??DataTable17_37
   \   0000015C   0x.... 0x....      BL       GCC_PHAT
   \   00000160   0x.... 0x....      LDR.W    R1,??DataTable17_19
   \   00000164   0x8008             STRH     R0,[R1, #+0]
    291                    idxLatency63 = GCC_PHAT(Buffer2.bufMIC6, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal63);
   \   00000166   0x.... 0x....      LDR.W    R3,??DataTable17_20
   \   0000016A   0xF44F 0x6280      MOV      R2,#+1024
   \   0000016E   0x.... 0x....      LDR.W    R1,??DataTable17_38
   \   00000172   0x.... 0x....      LDR.W    R0,??DataTable17_39
   \   00000176   0x.... 0x....      BL       GCC_PHAT
   \   0000017A   0x.... 0x....      LDR.W    R1,??DataTable17_23
   \   0000017E   0x8008             STRH     R0,[R1, #+0]
    292          
    293                    SumDelay(&Buffer2);
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable17_35
   \   00000184   0x.... 0x....      BL       SumDelay
    294          #endif
    295          					break;
   \   00000188   0xE7FF             B.N      ??FFT_Update_5
    296          					
    297          				default:
    298          					break;
    299                         
    300          			}
    301          			AudioPlayerUpd();
   \                     ??FFT_Update_4: (+1)
   \                     ??FFT_Update_5: (+1)
   \   0000018A   0x.... 0x....      BL       AudioPlayerUpd
    302          	       //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
    303          	  }
    304          	  
    305          
    306          }
   \                     ??FFT_Update_0: (+1)
   \   0000018E   0xBD01             POP      {R0,PC}          ;; return
    307          
    308          

   \                                 In section .text, align 2, keep-with-next
    309          inline static void Audio_Play_Out(void)
    310          {
   \                     Audio_Play_Out: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    311          
    312          /*-------------------------------------------------------------------------------------------------------------
    313          			  
    314          	Sequence  Record Data                     Processing Data                 Player Data
    315          			  
    316          	1-------  Buffer1                         Buffer2                          Buffer3
    317          			  
    318          	2-------  Buffer3                         Buffer1                           Buffer2		  
    319          			  
    320          	3-------  Buffer2                         Buffer3                           Buffer1 
    321           ---------------------------------------------------------------------------------------------------------------*/
    322              //Audio_MAL_Play((uint32_t)&bufferSum[idxFrmPDMMic8*AUDIO_CHANNELS*(6*AUDIO_SAMPLING_FREQUENCY/1000)], 2*6*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
    323              //Audio_MAL_Play((uint32_t)&bufferSum, 2*3*AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE);
    324          
    325          #if USB_STREAMING
    326              AudioUSBSend(idxFrmPDMMic8);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable17_40
   \   00000006   0x8800             LDRH     R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       AudioUSBSend
    327          #endif
    328          
    329          	/* if player is finished for curent buffer                                  */ 
    330          	if (++idxFrmPDMMic8 == AUDIO_OUT_BUFFER_SIZE/(2*AUDIO_SAMPLING_FREQUENCY/1000))
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable17_40
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable17_40
   \   00000018   0x8008             STRH     R0,[R1, #+0]
   \   0000001A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001C   0x2820             CMP      R0,#+32
   \   0000001E   0xD14F             BNE.N    ??Audio_Play_Out_0
    331          	{
    332          	       RESET_IDX
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable17_41
   \   00000026   0x8008             STRH     R0,[R1, #+0]
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable17_42
   \   0000002E   0x8008             STRH     R0,[R1, #+0]
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable17_43
   \   00000036   0x8008             STRH     R0,[R1, #+0]
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable17_44
   \   0000003E   0x8008             STRH     R0,[R1, #+0]
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable17_45
   \   00000046   0x8008             STRH     R0,[R1, #+0]
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable17_46
   \   0000004E   0x8008             STRH     R0,[R1, #+0]
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable17_47
   \   00000056   0x8008             STRH     R0,[R1, #+0]
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable17_48
   \   0000005E   0x8008             STRH     R0,[R1, #+0]
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable17_5
   \   00000066   0x7008             STRB     R0,[R1, #+0]
    333          		   //MIC7Rec();
    334          		   //MIC8Rec();
    335                     WaveRec_idxTest=0;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable17_49
   \   0000006E   0x8008             STRH     R0,[R1, #+0]
    336                     idxFrmPDMMic8=0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable17_40
   \   00000076   0x8008             STRH     R0,[R1, #+0]
    337                      switch (buffer_switch)
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable17_7
   \   0000007C   0x7800             LDRB     R0,[R0, #+0]
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD003             BEQ.N    ??Audio_Play_Out_1
   \   00000082   0x2802             CMP      R0,#+2
   \   00000084   0xD00B             BEQ.N    ??Audio_Play_Out_2
   \   00000086   0xD305             BCC.N    ??Audio_Play_Out_3
   \   00000088   0xE00E             B.N      ??Audio_Play_Out_4
    338                      {
    339                          case BUF1_PLAY:
    340                                /* set flag for switch buffer */		  
    341                            buffer_switch = BUF3_PLAY;
   \                     ??Audio_Play_Out_1: (+1)
   \   0000008A   0x2002             MOVS     R0,#+2
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable17_7
   \   00000090   0x7008             STRB     R0,[R1, #+0]
    342                            break;
   \   00000092   0xE009             B.N      ??Audio_Play_Out_5
    343                          case BUF2_PLAY:
    344                            /* set flag for switch buffer */
    345                            buffer_switch = BUF1_PLAY;        
   \                     ??Audio_Play_Out_3: (+1)
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable17_7
   \   0000009A   0x7008             STRB     R0,[R1, #+0]
    346                            break;
   \   0000009C   0xE004             B.N      ??Audio_Play_Out_5
    347                          case BUF3_PLAY:
    348                            /* set flag for switch buffer */		  
    349                            buffer_switch = BUF2_PLAY;
   \                     ??Audio_Play_Out_2: (+1)
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable17_7
   \   000000A4   0x7008             STRB     R0,[R1, #+0]
    350                            break;
   \   000000A6   0xE7FF             B.N      ??Audio_Play_Out_5
    351                          default:
    352                            break;
    353                      }
    354                    if (cntStrt<100) cntStrt++;
   \                     ??Audio_Play_Out_4: (+1)
   \                     ??Audio_Play_Out_5: (+1)
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable17_50
   \   000000AC   0x8800             LDRH     R0,[R0, #+0]
   \   000000AE   0x2864             CMP      R0,#+100
   \   000000B0   0xDA06             BGE.N    ??Audio_Play_Out_0
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable17_50
   \   000000B6   0x8800             LDRH     R0,[R0, #+0]
   \   000000B8   0x1C40             ADDS     R0,R0,#+1
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable17_50
   \   000000BE   0x8008             STRH     R0,[R1, #+0]
    355          
    356          		 /* Tongle status to switch the USB audio buffer out */
    357          
    358          	}			   
    359          }
   \                     ??Audio_Play_Out_0: (+1)
   \   000000C0   0xBD01             POP      {R0,PC}          ;; return
    360          
    361          
    362          /* Private functions ---------------------------------------------------------*/
    363          
    364          /**
    365            * @brief  Main program
    366            * @param  None
    367            * @retval None
    368            */

   \                                 In section .text, align 2, keep-with-next
    369          int main(void)
    370          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    371            /* Enable the CPU Cache */
    372            CPU_CACHE_Enable();
   \   00000002   0x.... 0x....      BL       CPU_CACHE_Enable
    373            
    374            /* STM32F7xx HAL library initialization:
    375                 - Configure the Flash ART accelerator on ITCM interface
    376                 - Configure the Systick to generate an interrupt each 1 msec
    377                 - Set NVIC Group Priority to 4
    378                 - Global MSP (MCU Support Package) initialization
    379               */   
    380            HAL_Init();
   \   00000006   0x.... 0x....      BL       HAL_Init
    381            /* Configure the system clock to 216 MHz */
    382            //Test_SystemClock_Config(); 
    383            SystemClock_Config();
   \   0000000A   0x.... 0x....      BL       SystemClock_Config
    384            BSP_AUDIO_OUT_ClockConfig(3*AUDIO_FREQ, NULL);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xF64B 0x3080      MOVW     R0,#+48000
   \   00000014   0x.... 0x....      BL       BSP_AUDIO_OUT_ClockConfig
    385          #if EXT_RAM  
    386            /* Initialize the SDRAM */
    387            BSP_SDRAM_Init();
   \   00000018   0x.... 0x....      BL       BSP_SDRAM_Init
    388          #endif
    389            BSP_LED_Init(LED1);
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       BSP_LED_Init
    390            BSP_LED_Init(LED2);
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       BSP_LED_Init
    391          
    392            /* Button Initialization */
    393            ButtonInit();
   \   00000028   0x.... 0x....      BL       ButtonInit
    394            //BSP_PB_Init(BUTTON_KEY,BUTTON_MODE_EXTI);
    395          
    396            
    397            /* Init TS module */
    398             DFT_Init();	
   \   0000002C   0x.... 0x....      BL       DFT_Init
    399          
    400              /* ---------PA4: LCCKO(I2S2)-------------*/
    401              __GPIOA_CLK_ENABLE();
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable17_51  ;; 0x40023830
   \   0000003E   0x6008             STR      R0,[R1, #+0]
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0x9800             LDR      R0,[SP, #+0]
    402              GPIO_INS.Pin = GPIO_PIN_4;
   \   0000004E   0x2010             MOVS     R0,#+16
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   00000054   0x6008             STR      R0,[R1, #+0]
    403              GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable17_53  ;; 0x10110000
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   0000005E   0x6048             STR      R0,[R1, #+4]
    404              GPIO_INS.Pull =GPIO_PULLUP;
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   00000066   0x6088             STR      R0,[R1, #+8]
    405              GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   00000068   0x2003             MOVS     R0,#+3
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   0000006E   0x60C8             STR      R0,[R1, #+12]
    406              HAL_GPIO_Init(GPIOA,&GPIO_INS);
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable17_54  ;; 0x40020000
   \   00000078   0x.... 0x....      BL       HAL_GPIO_Init
    407          
    408              /* Enable and set Button EXTI Interrupt to the lowest priority */
    409              HAL_NVIC_SetPriority((IRQn_Type)EXTI4_IRQn, INTERRUPT_PRI_EXT_LRCK, 0);
   \   0000007C   0x2200             MOVS     R2,#+0
   \   0000007E   0x2106             MOVS     R1,#+6
   \   00000080   0x200A             MOVS     R0,#+10
   \   00000082   0x.... 0x....      BL       HAL_NVIC_SetPriority
    410              HAL_NVIC_EnableIRQ((IRQn_Type)EXTI4_IRQn);
   \   00000086   0x200A             MOVS     R0,#+10
   \   00000088   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    411              /*-----------------------*/
    412          
    413               /* ---------PB12: LCCKO (I2S2)-------------*/
    414              __GPIOB_CLK_ENABLE();
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable17_51  ;; 0x40023830
   \   0000009A   0x6008             STR      R0,[R1, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   000000A6   0x9000             STR      R0,[SP, #+0]
   \   000000A8   0x9800             LDR      R0,[SP, #+0]
    415              GPIO_INS.Pin = GPIO_PIN_12;
   \   000000AA   0xF44F 0x5080      MOV      R0,#+4096
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   000000B2   0x6008             STR      R0,[R1, #+0]
    416              GPIO_INS.Mode =GPIO_MODE_INPUT;
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   000000BA   0x6048             STR      R0,[R1, #+4]
    417              GPIO_INS.Pull =GPIO_PULLUP;
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   000000C2   0x6088             STR      R0,[R1, #+8]
    418              GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   000000C4   0x2003             MOVS     R0,#+3
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   000000CA   0x60C8             STR      R0,[R1, #+12]
    419              HAL_GPIO_Init(GPIOB,&GPIO_INS);
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable17_55  ;; 0x40020400
   \   000000D4   0x.... 0x....      BL       HAL_GPIO_Init
    420              /*-----------------------------------------*/
    421          
    422              /* ---------PE4: LCCKO --------------------*/
    423              __GPIOE_CLK_ENABLE();
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable17_51  ;; 0x40023830
   \   000000E6   0x6008             STR      R0,[R1, #+0]
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   000000EC   0x6800             LDR      R0,[R0, #+0]
   \   000000EE   0xF010 0x0010      ANDS     R0,R0,#0x10
   \   000000F2   0x9000             STR      R0,[SP, #+0]
   \   000000F4   0x9800             LDR      R0,[SP, #+0]
    424              GPIO_INS.Pin = GPIO_PIN_4;
   \   000000F6   0x2010             MOVS     R0,#+16
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   000000FC   0x6008             STR      R0,[R1, #+0]
    425              GPIO_INS.Mode =GPIO_MODE_INPUT;
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   00000104   0x6048             STR      R0,[R1, #+4]
    426              GPIO_INS.Pull =GPIO_PULLUP;
   \   00000106   0x2001             MOVS     R0,#+1
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   0000010C   0x6088             STR      R0,[R1, #+8]
    427              GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   0000010E   0x2003             MOVS     R0,#+3
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   00000114   0x60C8             STR      R0,[R1, #+12]
    428              HAL_GPIO_Init(GPIOE,&GPIO_INS);
   \   00000116   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable17_56  ;; 0x40021000
   \   0000011E   0x.... 0x....      BL       HAL_GPIO_Init
    429              /*-----------------------------------------*/
    430          
    431              /*---------PE3: POWER DOWN-----------------*/
    432              __GPIOE_CLK_ENABLE();
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   00000126   0x6800             LDR      R0,[R0, #+0]
   \   00000128   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000012C   0x.... 0x....      LDR.W    R1,??DataTable17_51  ;; 0x40023830
   \   00000130   0x6008             STR      R0,[R1, #+0]
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   00000136   0x6800             LDR      R0,[R0, #+0]
   \   00000138   0xF010 0x0010      ANDS     R0,R0,#0x10
   \   0000013C   0x9000             STR      R0,[SP, #+0]
   \   0000013E   0x9800             LDR      R0,[SP, #+0]
    433              GPIO_INS.Pin = GPIO_PIN_3;
   \   00000140   0x2008             MOVS     R0,#+8
   \   00000142   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   00000146   0x6008             STR      R0,[R1, #+0]
    434              GPIO_INS.Mode = GPIO_MODE_OUTPUT_PP;
   \   00000148   0x2001             MOVS     R0,#+1
   \   0000014A   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   0000014E   0x6048             STR      R0,[R1, #+4]
    435              GPIO_INS.Pull = GPIO_PULLUP;
   \   00000150   0x2001             MOVS     R0,#+1
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   00000156   0x6088             STR      R0,[R1, #+8]
    436              GPIO_INS.Speed = GPIO_SPEED_HIGH;
   \   00000158   0x2003             MOVS     R0,#+3
   \   0000015A   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   0000015E   0x60C8             STR      R0,[R1, #+12]
    437          
    438              HAL_GPIO_Init(GPIOE, &GPIO_INS);
   \   00000160   0x.... 0x....      LDR.W    R1,??DataTable17_52
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable17_56  ;; 0x40021000
   \   00000168   0x.... 0x....      BL       HAL_GPIO_Init
    439          
    440              HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
   \   0000016C   0x2200             MOVS     R2,#+0
   \   0000016E   0x2108             MOVS     R1,#+8
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable17_56  ;; 0x40021000
   \   00000174   0x.... 0x....      BL       HAL_GPIO_WritePin
    441              //HAL_Delay(300);
    442              /*----------------------------------------*/
    443          
    444          #if (DEBUG)  
    445              /* UART for debug */
    446              USART3_Init();
    447          #endif
    448          
    449          #if (USB_STREAMING)	
    450          		/* Initialize USB descriptor basing on channels number and sampling frequency */
    451          		USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, 4*AUDIO_SAMPLING_FREQUENCY, AUDIO_CHANNELS);
   \   00000178   0x2202             MOVS     R2,#+2
   \   0000017A   0xF44F 0x417A      MOV      R1,#+64000
   \   0000017E   0x.... 0x....      LDR.W    R0,??DataTable17_57
   \   00000182   0x.... 0x....      BL       USBD_AUDIO_Init_Microphone_Descriptor
    452          		/* Init Device Library */
    453          		USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
   \   00000186   0x2200             MOVS     R2,#+0
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable17_58
   \   0000018C   0x.... 0x....      LDR.W    R0,??DataTable17_57
   \   00000190   0x.... 0x....      BL       USBD_Init
    454          		/* Add Supported Class */
    455          		USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
   \   00000194   0x.... 0x....      LDR.W    R1,??DataTable17_59
   \   00000198   0x.... 0x....      LDR.W    R0,??DataTable17_57
   \   0000019C   0x.... 0x....      BL       USBD_RegisterClass
    456          		/* Add Interface callbacks for AUDIO Class */  
    457          		USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable17_60
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable17_57
   \   000001A8   0x.... 0x....      BL       USBD_AUDIO_RegisterInterface
    458          		/* Start Device Process */
    459          		USBD_Start(&hUSBDDevice);
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable17_57
   \   000001B0   0x.... 0x....      BL       USBD_Start
    460          	
    461          		/* Init Host Library */
    462          		//test GIT //USBH_Init(&hUSBHost, USBH_UserProcess, 0);
    463          	
    464          		/* Add Supported Class */
    465          		//test GIT //USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
    466          		
    467          		/* Start Host Process */
    468          		//test GIT //USBH_Start(&hUSBHost); 					  
    469          #endif 
    470          
    471          					  
    472          
    473              /*----------------------------------------*/
    474              MX_I2C2_Init(); //for STA321MP
   \   000001B4   0x.... 0x....      BL       MX_I2C2_Init
    475              STA321MP_Ini();
   \   000001B8   0x.... 0x....      BL       STA321MP_Ini
    476              BSP_LED_Toggle(LED1);
   \   000001BC   0x2000             MOVS     R0,#+0
   \   000001BE   0x.... 0x....      BL       BSP_LED_Toggle
    477              /* Init Audio Application */
    478          #ifdef CS43L22_PLAY
    479              AUDIO_InitApplication();
    480          #endif
    481              AUDIO_InitApplication();
   \   000001C2   0x.... 0x....      BL       AUDIO_InitApplication
    482              BSP_LED_Toggle(LED2);
   \   000001C6   0x2001             MOVS     R0,#+1
   \   000001C8   0x.... 0x....      BL       BSP_LED_Toggle
    483          
    484              buffer_switch = BUF3_PLAY;		 /* record data to buffer1 */
   \   000001CC   0x2002             MOVS     R0,#+2
   \   000001CE   0x.... 0x....      LDR.W    R1,??DataTable17_7
   \   000001D2   0x7008             STRB     R0,[R1, #+0]
    485              MIC1TO8_Init();
   \   000001D4   0x.... 0x....      BL       MIC1TO8_Init
    486              BSP_LED_Toggle(LED1);
   \   000001D8   0x2000             MOVS     R0,#+0
   \   000001DA   0x.... 0x....      BL       BSP_LED_Toggle
    487          
    488              Window(fir256Coff);
   \   000001DE   0x.... 0x....      LDR.W    R0,??DataTable17_61
   \   000001E2   0x.... 0x....      BL       Window
    489          	EnergyNoiseCalc(AUDIO_OUT_BUFFER_SIZE/2);
   \   000001E6   0xF44F 0x7000      MOV      R0,#+512
   \   000001EA   0x.... 0x....      BL       EnergyNoiseCalc
    490          
    491              //Precalculation(Coef,PreCalcBuff);
    492              StartPlay();
   \   000001EE   0x.... 0x....      BL       StartPlay
    493              while (1)
    494              {
    495          
    496          
    497                          /* This calculation happens once time in power cycles */
    498                          /* After 5 times of full frame recieved interrupt */
    499                         if ((cntStrt>=5))
   \                     ??main_0: (+1)
   \   000001F2   0x.... 0x....      LDR.W    R0,??DataTable17_50
   \   000001F6   0x8800             LDRH     R0,[R0, #+0]
   \   000001F8   0x2805             CMP      R0,#+5
   \   000001FA   0xDB27             BLT.N    ??main_1
    500                         {
    501          		      if ((WaveRecord_flgIni<200))
   \   000001FC   0x.... 0x....      LDR.W    R0,??DataTable17_62
   \   00000200   0x7800             LDRB     R0,[R0, #+0]
   \   00000202   0x28C8             CMP      R0,#+200
   \   00000204   0xDA22             BGE.N    ??main_1
    502          		      {
    503                            for(char i=0;i<16;i++)
   \   00000206   0x2000             MOVS     R0,#+0
   \                     ??main_2: (+1)
   \   00000208   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000020A   0x2810             CMP      R0,#+16
   \   0000020C   0xDA17             BGE.N    ??main_3
    504                            {
    505                               if (ValBit(SPI4_stNipple,i)!=0) 
   \   0000020E   0x.... 0x....      LDR.W    R1,??DataTable17_63
   \   00000212   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000216   0x4101             ASRS     R1,R1,R0
   \   00000218   0x07C9             LSLS     R1,R1,#+31
   \   0000021A   0xD50E             BPL.N    ??main_4
    506                               {
    507                                    SPI4_stPosShft = MAX(SPI4_stPosShft,i+1);
   \   0000021C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000021E   0x1C41             ADDS     R1,R0,#+1
   \   00000220   0x.... 0x....      LDR.W    R2,??DataTable17_64
   \   00000224   0x7812             LDRB     R2,[R2, #+0]
   \   00000226   0x4291             CMP      R1,R2
   \   00000228   0xDA03             BGE.N    ??main_5
   \   0000022A   0x.... 0x....      LDR.W    R1,??DataTable17_64
   \   0000022E   0x7809             LDRB     R1,[R1, #+0]
   \   00000230   0xE000             B.N      ??main_6
   \                     ??main_5: (+1)
   \   00000232   0x1C41             ADDS     R1,R0,#+1
   \                     ??main_6: (+1)
   \   00000234   0x.... 0x....      LDR.W    R2,??DataTable17_64
   \   00000238   0x7011             STRB     R1,[R2, #+0]
    508                               }
    509                            }
   \                     ??main_4: (+1)
   \   0000023A   0x1C40             ADDS     R0,R0,#+1
   \   0000023C   0xE7E4             B.N      ??main_2
    510          		          WaveRecord_flgIni++;			
   \                     ??main_3: (+1)
   \   0000023E   0x.... 0x....      LDR.W    R0,??DataTable17_62
   \   00000242   0x7800             LDRB     R0,[R0, #+0]
   \   00000244   0x1C40             ADDS     R0,R0,#+1
   \   00000246   0x.... 0x....      LDR.W    R1,??DataTable17_62
   \   0000024A   0x7008             STRB     R0,[R1, #+0]
    511          		      }   
    512          		 }
    513          	
    514          		/* USB Host Background task */
    515          		//USBH_Process(&hUSBHost);
    516          
    517          		/* AUDIO Menu Process */
    518          		//AUDIO_MenuProcess();
    519          		
    520          		FFT_Update(); 
   \                     ??main_1: (+1)
   \   0000024C   0x.... 0x....      BL       FFT_Update
    521          
    522          		if (flg10ms==1)
   \   00000250   0x.... 0x....      LDR.W    R0,??DataTable17_65
   \   00000254   0x7800             LDRB     R0,[R0, #+0]
   \   00000256   0x2801             CMP      R0,#+1
   \   00000258   0xD1CB             BNE.N    ??main_0
    523          		{
    524          		    flg10ms=0;		   		      
   \   0000025A   0x2000             MOVS     R0,#+0
   \   0000025C   0x.... 0x....      LDR.W    R1,??DataTable17_65
   \   00000260   0x7008             STRB     R0,[R1, #+0]
    525          	         cntTime200++;
   \   00000262   0x.... 0x....      LDR.W    R0,??DataTable17_66
   \   00000266   0x8800             LDRH     R0,[R0, #+0]
   \   00000268   0x1C40             ADDS     R0,R0,#+1
   \   0000026A   0x.... 0x....      LDR.W    R1,??DataTable17_66
   \   0000026E   0x8008             STRH     R0,[R1, #+0]
    526          	         if (cntTime200==40)
   \   00000270   0x.... 0x....      LDR.W    R0,??DataTable17_66
   \   00000274   0x8800             LDRH     R0,[R0, #+0]
   \   00000276   0x2828             CMP      R0,#+40
   \   00000278   0xD1BB             BNE.N    ??main_0
    527          	         {
    528          	 
    529          #if (DEBUG)
    530                             uint32_t tmpSNR63,tmpSNR14,tmpSNR78,tmpSNR25;
    531                             tmpSNR78 = (uint32_t)(CrssCorVal78/EnergyError);
    532                             tmpSNR25 = (uint32_t)(CrssCorVal25/EnergyError);
    533          				   tmpSNR14 = (uint32_t)(CrssCorVal14/EnergyError);
    534          				   tmpSNR63 = (uint32_t)(CrssCorVal63/EnergyError);
    535                              //if (tmpSNR>10)
    536                              {
    537                                  int16_t test[5];
    538                                  static uint8_t flagNotMin;
    539                                  test[0] = 0;
    540          						if (CrssCorVal63>10)						
    541                                      test[1]= idxLatency63;
    542          						else
    543          							test[1] = 0;
    544          
    545          						if (CrssCorVal14>10)
    546                                      test[2]= idxLatency14;
    547          						else
    548          							test[2] =0;
    549          
    550          						if (CrssCorVal25 > 10)
    551                                      test[3]= idxLatency25;
    552          						else
    553          							test[3] = 0;
    554          
    555                                  if (CrssCorVal78>10)
    556          						    test[4]= idxLatency78;                        
    557          						else
    558          							test[4]= 2;
    559          
    560          						if (((CrssCorVal63>10))||((CrssCorVal14>10))||((CrssCorVal25>10))||((CrssCorVal78>10)))
    561                                  {
    562                                       sprintf((char *)pUARTBuf,"%d:%d:%d:%d  ",idxLatency63,idxLatency14,idxLatency25,idxLatency78);
    563                                       flagNotMin=0 ;
    564                                        sprintf((char *)(pUARTBuf+15),"----------\r\n");
    565                                        if (test[3]>0)
    566                                        {
    567                                                sprintf((char *)(pUARTBuf+15),"Close Mic 5\r\n"); 
    568          									  flagNotMin=1;
    569                                        }
    570                                        else if (test[3]<0)
    571                                        {
    572                                              sprintf((char *)(pUARTBuf+15),"Clsoe Mic 2\r\n");
    573          									flagNotMin=1;
    574          
    575                                        }
    576                                        else
    577                                        {
    578                                             
    579                                        }	
    580          
    581          						
    582          				                if (test[2]>0)
    583          		                  	    {
    584          		                  	       if((CrssCorVal14>CrssCorVal25)||(flagNotMin==0))
    585          		                  	       {
    586          		                             sprintf((char *)(pUARTBuf+15),"Clsoe Mic 4\r\n");
    587          									 flagNotMin=2;
    588          		                  	       }
    589          		                  	    }
    590          		                        else if (test[2]<0)
    591          		                        {
    592          		                            if((CrssCorVal14>CrssCorVal25)||(flagNotMin==0))
    593          		                            {
    594          		                              sprintf((char *)(pUARTBuf+15),"Clsoe Mic 1\r\n");                             
    595          									  flagNotMin=2;
    596          		                            }
    597          		                        }
    598          		                        else
    599          		                        {
    600          
    601          		                        }
    602          
    603          						   
    604          		                        if (test[1]>0)
    605          		                  	    {
    606          		                  	       if((((CrssCorVal63>CrssCorVal25)&&(flagNotMin==1))||(flagNotMin==0))||((CrssCorVal63>CrssCorVal14)&&(flagNotMin==2)))
    607          		                  	       {
    608          								     sprintf((char *)(pUARTBuf+15),"Clsoe Mic 3\r\n");
    609          								     flagNotMin=3;
    610          		                  	       }
    611          		                  	    }
    612          		                        else if (test[1]<0)
    613          		                        {
    614          		                             if((((CrssCorVal63>CrssCorVal25)&&(flagNotMin==1))||(flagNotMin==0))||((CrssCorVal63>CrssCorVal14)&&(flagNotMin==2)))
    615          		                             {
    616          		                               sprintf((char *)(pUARTBuf+15),"Clsoe Mic 6\r\n"); 
    617          									   flagNotMin=3;
    618          		                             }
    619          		                        }
    620          		                        else
    621          		                        {
    622          
    623          		                        }
    624          
    625          
    626          	                            if ((test[4]>3))
    627          	                            {
    628          	                                if ((flagNotMin==0))                                     
    629          	                                    sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    630          								    else if ((flagNotMin==1))
    631          										if ((CrssCorVal78>CrssCorVal25))
    632          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    633          								    else if ((flagNotMin==2))
    634          										if ((CrssCorVal78>CrssCorVal14))
    635          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");	
    636          								    else if ((flagNotMin==3))
    637          										if ((CrssCorVal78>CrssCorVal63))
    638          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    639          									else
    640          										;
    641          									
    642          	                            }
    643          	                            else if (test<=0)
    644          	                            {
    645          	                                if ((flagNotMin==0))                                     
    646          	                                    sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    647          								    else if ((flagNotMin==1))
    648          										if ((CrssCorVal78>CrssCorVal25))
    649          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    650          								    else if ((flagNotMin==2))
    651          										if ((CrssCorVal78>CrssCorVal14))
    652          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");	
    653          								    else if ((flagNotMin==3))
    654          										if ((CrssCorVal78>CrssCorVal63))
    655          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    656          									else
    657          										;
    658          									
    659          	                            }                          
    660          	                            else
    661          	                            {
    662          	                            }
    663          
    664          
    665          			  //if (flagNotMin==0) sprintf((char *)(pUARTBuf+15),"----------- \r\n");
    666          									
    667                                    //HAL_UART_Transmit_IT(&huart3,pUARTBuf,15);
    668                                    SrvB_Debound(&flgS2Ins,&flgS2Flt, flgS2,2);
    669                                    SrvB_Debound(&flgS3Ins,&flgS3Flt, flgS3,2);
    670                                    SrvB_Debound(&flgS4Ins,&flgS4Flt, flgS4,2);
    671          
    672                                    stDir = (flgS2Flt<<2)|(flgS3Flt<<1)|(flgS4Flt); 
    673                                   
    674                                     sprintf((char *)(pUARTBuf+30),"%d:%d:%d:%d\n\r\n\r",CrssCorVal63,CrssCorVal14,CrssCorVal25,CrssCorVal78);
    675                                     HAL_UART_Transmit_IT(&huart3,pUARTBuf,15+15+15);		
    676                                   }
    677                              }//if(SNR)
    678          
    679          #endif
    680          	   	            cntTime200=0;
   \   0000027A   0x2000             MOVS     R0,#+0
   \   0000027C   0x.... 0x....      LDR.W    R1,??DataTable17_66
   \   00000280   0x8008             STRH     R0,[R1, #+0]
   \   00000282   0xE7B6             B.N      ??main_0
    681                  } //(cntTime200==40)
    682                }//if (flg10ms==1)	
    683            }
    684          }
    685          
    686          /**
    687            * @brief  Toggle Leds.
    688            * @param  None
    689            * @retval None
    690            */

   \                                 In section .text, align 2, keep-with-next
    691          void Toggle_Leds(void)
    692          {
    693            static uint32_t ticks = 0;
    694          
    695            if (ticks++ > 200)
   \                     Toggle_Leds: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_67
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x1C41             ADDS     R1,R0,#+1
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable17_67
   \   0000000C   0x6011             STR      R1,[R2, #+0]
   \   0000000E   0x28C9             CMP      R0,#+201
   \   00000010   0xD303             BCC.N    ??Toggle_Leds_0
    696            {
    697              //BSP_LED_Toggle(LED1);
    698              ticks = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable17_67
   \   00000018   0x6008             STR      R0,[R1, #+0]
    699            }
    700          }
   \                     ??Toggle_Leds_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??ticks:
   \   00000000                      DS8 4
    701          
    702          
    703          /**
    704            * @brief  User Process
    705            * @param  phost: Host Handle
    706            * @param  id: Host Library user message ID
    707            * @retval None
    708            */
    709          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
    710          {
    711            switch(id)
    712            { 
    713            case HOST_USER_SELECT_CONFIGURATION:
    714              break;
    715              
    716            case HOST_USER_DISCONNECTION:
    717              appli_state = APPLICATION_DISCONNECT;
    718              break;
    719          
    720            case HOST_USER_CLASS_ACTIVE:
    721              appli_state = APPLICATION_READY;
    722              break;
    723           
    724            case HOST_USER_CONNECTION:
    725              appli_state = APPLICATION_START;
    726              break;
    727             
    728            default:
    729              break; 
    730            }
    731          }
    732          
    733          /**
    734            * @brief  System Clock Configuration
    735            *         The system Clock is configured as follow : 
    736            *            System Clock source            = PLL (HSE)
    737            *            SYSCLK(Hz)                     = 216000000
    738            *            HCLK(Hz)                       = 216000000
    739            *            AHB Prescaler                  = 1
    740            *            APB1 Prescaler                 = 4
    741            *            APB2 Prescaler                 = 2
    742            *            HSE Frequency(Hz)              = 25000000
    743            *            PLL_M                          = 25
    744            *            PLL_N                          = 432
    745            *            PLL_P                          = 2
    746            *            PLL_Q                          = 9
    747            *            VDD(V)                         = 3.3
    748            *            Main regulator output voltage  = Scale1 mode
    749            *            Flash Latency(WS)              = 7
    750            * @param  None
    751            * @retval None
    752            */

   \                                 In section .text, align 2, keep-with-next
    753          static void SystemClock_Config(void)
    754          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B2             SUB      SP,SP,#+200
    755            RCC_ClkInitTypeDef RCC_ClkInitStruct;
    756            RCC_OscInitTypeDef RCC_OscInitStruct;
    757            RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    758            HAL_StatusTypeDef ret = HAL_OK;
   \   00000004   0x2400             MOVS     R4,#+0
    759          
    760            /* Enable HSE Oscillator and activate PLL with HSE as source */
    761            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x9026             STR      R0,[SP, #+152]
    762            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   0000000A   0xF45F 0x3080      MOVS     R0,#+65536
   \   0000000E   0x9027             STR      R0,[SP, #+156]
    763            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x902C             STR      R0,[SP, #+176]
    764            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
   \   00000014   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000018   0x902D             STR      R0,[SP, #+180]
    765            RCC_OscInitStruct.PLL.PLLM = 25;
   \   0000001A   0x2019             MOVS     R0,#+25
   \   0000001C   0x902E             STR      R0,[SP, #+184]
    766            RCC_OscInitStruct.PLL.PLLN = 432;  // 432
   \   0000001E   0xF44F 0x70D8      MOV      R0,#+432
   \   00000022   0x902F             STR      R0,[SP, #+188]
    767            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x9030             STR      R0,[SP, #+192]
    768            RCC_OscInitStruct.PLL.PLLQ = 9;
   \   00000028   0x2009             MOVS     R0,#+9
   \   0000002A   0x9031             STR      R0,[SP, #+196]
    769          
    770            ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
   \   0000002C   0xA826             ADD      R0,SP,#+152
   \   0000002E   0x.... 0x....      BL       HAL_RCC_OscConfig
   \   00000032   0x0004             MOVS     R4,R0
    771            if(ret != HAL_OK)
    772            {
    773              //while(1) { ; }
    774            }
    775          
    776            /* Activate the OverDrive to reach the 216 MHz Frequency */
    777            ret = HAL_PWREx_EnableOverDrive();
   \   00000034   0x.... 0x....      BL       HAL_PWREx_EnableOverDrive
   \   00000038   0x0004             MOVS     R4,R0
    778            if(ret != HAL_OK)
    779            {
    780              //while(1) { ; }
    781            }
    782          
    783            /* Select PLLSAI output as USB clock source */
    784            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48 ;
   \   0000003A   0xF45F 0x1000      MOVS     R0,#+2097152
   \   0000003E   0x9005             STR      R0,[SP, #+20]
    785            PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
   \   00000040   0xF05F 0x6000      MOVS     R0,#+134217728
   \   00000044   0x9024             STR      R0,[SP, #+144]
    786          
    787            
    788            PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
   \   00000046   0x20C0             MOVS     R0,#+192
   \   00000048   0x900A             STR      R0,[SP, #+40]
    789            PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
   \   0000004A   0x2004             MOVS     R0,#+4
   \   0000004C   0x900B             STR      R0,[SP, #+44]
    790            PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x900D             STR      R0,[SP, #+52]
    791            PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x900C             STR      R0,[SP, #+48]
    792          
    793          
    794            ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
   \   00000056   0xA805             ADD      R0,SP,#+20
   \   00000058   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
   \   0000005C   0x0004             MOVS     R4,R0
    795            
    796            if(ret != HAL_OK)
    797            {
    798              //while(1) { ; }
    799            }
    800            
    801            /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
    802            RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
   \   0000005E   0x200F             MOVS     R0,#+15
   \   00000060   0x9000             STR      R0,[SP, #+0]
    803            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \   00000062   0x2002             MOVS     R0,#+2
   \   00000064   0x9001             STR      R0,[SP, #+4]
    804            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
   \   00000066   0x2080             MOVS     R0,#+128
   \   00000068   0x9002             STR      R0,[SP, #+8]
    805            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
   \   0000006A   0xF44F 0x50A0      MOV      R0,#+5120
   \   0000006E   0x9003             STR      R0,[SP, #+12]
    806            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \   00000070   0xF44F 0x5080      MOV      R0,#+4096
   \   00000074   0x9004             STR      R0,[SP, #+16]
    807          
    808            ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
   \   00000076   0x2107             MOVS     R1,#+7
   \   00000078   0x4668             MOV      R0,SP
   \   0000007A   0x.... 0x....      BL       HAL_RCC_ClockConfig
   \   0000007E   0x0004             MOVS     R4,R0
    809            if(ret != HAL_OK)
    810            {
    811              //while(1) { ; }
    812            }
    813            
    814           //sop1hc 344/7 = 49.142 MHz
    815            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable17_68  ;; 0x100001
   \   00000084   0x9005             STR      R0,[SP, #+20]
    816            PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000086   0xF45F 0x0080      MOVS     R0,#+4194304
   \   0000008A   0x9015             STR      R0,[SP, #+84]
    817            PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x9012             STR      R0,[SP, #+72]
    818            PeriphClkInitStruct.PLLI2S.PLLI2SP = 8;
   \   00000090   0x2008             MOVS     R0,#+8
   \   00000092   0x9009             STR      R0,[SP, #+36]
    819            PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   00000094   0xF44F 0x70AC      MOV      R0,#+344
   \   00000098   0x9006             STR      R0,[SP, #+24]
    820            PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
   \   0000009A   0x2007             MOVS     R0,#+7
   \   0000009C   0x9008             STR      R0,[SP, #+32]
    821            PeriphClkInitStruct.PLLI2S.PLLI2SR = 7;
   \   0000009E   0x2007             MOVS     R0,#+7
   \   000000A0   0x9007             STR      R0,[SP, #+28]
    822            PeriphClkInitStruct.PLLI2SDivQ = 1;
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0x900E             STR      R0,[SP, #+56]
    823            HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);	
   \   000000A6   0xA805             ADD      R0,SP,#+20
   \   000000A8   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    824          }
   \   000000AC   0xB032             ADD      SP,SP,#+200
   \   000000AE   0xBD10             POP      {R4,PC}          ;; return
    825          
    826          /**
    827            * @brief  Clock Config.
    828            * @param  hsai: might be required to set audio peripheral predivider if any.
    829            * @param  AudioFreq: Audio frequency used to play the audio stream.
    830            * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
    831            *         Being __weak it can be overwritten by the application     
    832            * @retval None
    833            */

   \                                 In section .text, align 2, keep-with-next
    834          void BSP_AUDIO_OUT_ClockConfig(uint32_t AudioFreq, void *Params)
    835          {
   \                     BSP_AUDIO_OUT_ClockConfig: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0A1             SUB      SP,SP,#+132
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    836            RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;
    837          
    838            HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
    839            
    840            /* Set the PLL configuration according to the audio frequency */
    841            if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
   \   0000000E   0xF642 0x3011      MOVW     R0,#+11025
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD007             BEQ.N    ??BSP_AUDIO_OUT_ClockConfig_0
   \   00000016   0xF245 0x6022      MOVW     R0,#+22050
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD003             BEQ.N    ??BSP_AUDIO_OUT_ClockConfig_0
   \   0000001E   0xF64A 0x4044      MOVW     R0,#+44100
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD112             BNE.N    ??BSP_AUDIO_OUT_ClockConfig_1
    842            {
    843              /* Configure PLLSAI prescalers */
    844              /* PLLI2S_VCO: VCO_429M
    845              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    846              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    847              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \                     ??BSP_AUDIO_OUT_ClockConfig_0: (+1)
   \   00000026   0xF45F 0x1080      MOVS     R0,#+1048576
   \   0000002A   0x9000             STR      R0,[SP, #+0]
    848              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   0000002C   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000030   0x9010             STR      R0,[SP, #+64]
    849              RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
   \   00000032   0x2008             MOVS     R0,#+8
   \   00000034   0x9004             STR      R0,[SP, #+16]
    850              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
   \   00000036   0xF240 0x10AD      MOVW     R0,#+429
   \   0000003A   0x9001             STR      R0,[SP, #+4]
    851              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x9003             STR      R0,[SP, #+12]
    852              RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
   \   00000040   0x2013             MOVS     R0,#+19
   \   00000042   0x9009             STR      R0,[SP, #+36]
    853              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000044   0x4668             MOV      R0,SP
   \   00000046   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
   \   0000004A   0xE00F             B.N      ??BSP_AUDIO_OUT_ClockConfig_2
    854            }
    855            else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K), AUDIO_FREQUENCY_96K */
    856            {
    857              /* SAI clock config
    858              PLLI2S_VCO: VCO_344M
    859              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
    860              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 49.142/1 = 49.142 Mhz */
    861              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \                     ??BSP_AUDIO_OUT_ClockConfig_1: (+1)
   \   0000004C   0xF45F 0x1080      MOVS     R0,#+1048576
   \   00000050   0x9000             STR      R0,[SP, #+0]
    862              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000052   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000056   0x9010             STR      R0,[SP, #+64]
    863          	//RCC_ExCLKInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
    864          //    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    865              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   00000058   0xF44F 0x70AC      MOV      R0,#+344
   \   0000005C   0x9001             STR      R0,[SP, #+4]
    866              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
   \   0000005E   0x2007             MOVS     R0,#+7
   \   00000060   0x9003             STR      R0,[SP, #+12]
    867          	//RCC_ExCLKInitStruct.PLLI2S.PLLI2SR = 1;
    868              RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x9009             STR      R0,[SP, #+36]
    869              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000066   0x4668             MOV      R0,SP
   \   00000068   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    870            }
    871            
    872          }
   \                     ??BSP_AUDIO_OUT_ClockConfig_2: (+1)
   \   0000006C   0xB021             ADD      SP,SP,#+132
   \   0000006E   0xBD30             POP      {R4,R5,PC}       ;; return
    873          
    874          
    875          
    876          #ifdef  USE_FULL_ASSERT
    877          /**
    878            * @brief  Reports the name of the source file and the source line number
    879            *         where the assert_param error has occurred.
    880            * @param  file: pointer to the source file name
    881            * @param  line: assert_param error line source number
    882            * @retval None
    883            */
    884          void assert_failed(uint8_t* file, uint32_t line)
    885          { 
    886            /* User can add his own implementation to report the file name and line number,
    887               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    888          
    889            /* Infinite loop */
    890            while (1)
    891            {
    892            }
    893          }
    894          #endif
    895          
    896          /**
    897            * @brief  CPU L1-Cache enable.
    898            * @param  None
    899            * @retval None
    900            */

   \                                 In section .text, align 2, keep-with-next
    901          static void CPU_CACHE_Enable(void)
    902          {
   \                     CPU_CACHE_Enable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    903            /* Enable I-Cache */
    904            SCB_EnableICache();
   \   00000002   0x.... 0x....      BL       SCB_EnableICache
    905          
    906            /* Enable D-Cache */
    907            SCB_EnableDCache();
   \   00000006   0x.... 0x....      BL       SCB_EnableDCache
    908          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    909          
    910          

   \                                 In section .text, align 2, keep-with-next
    911          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
    912          {
   \                     HAL_I2C_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    913          
    914            GPIO_InitTypeDef GPIO_InitStruct;
    915              
    916            if(hi2c->Instance==I2C1)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable17_69  ;; 0x40005400
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD135             BNE.N    ??HAL_I2C_MspInit_0
    917            {
    918          	/* USER CODE BEGIN I2C1_MspInit 0 */
    919          
    920          	/*##-1- Configure the I2C clock source. The clock is derived from the SYSCLK #*/
    921          	//RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
    922          	//RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    923          	//HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
    924          
    925          	/*##-2- Enable peripherals and GPIO Clocks #################################*/
    926          	/* Enable GPIO TX/RX clock */
    927          	__HAL_RCC_GPIOB_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable17_51  ;; 0x40023830
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
    928          
    929          	/**I2C1 GPIO Configuration	
    930          	PB6	  ------> I2C1_SCL (PB6)
    931          	PB7	  ------> I2C1_SDA (PB7) 
    932          	*/
    933          	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
   \   0000002E   0x20C0             MOVS     R0,#+192
   \   00000030   0x9001             STR      R0,[SP, #+4]
    934          	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \   00000032   0x2012             MOVS     R0,#+18
   \   00000034   0x9002             STR      R0,[SP, #+8]
    935          	GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x9003             STR      R0,[SP, #+12]
    936          	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   0000003A   0x2003             MOVS     R0,#+3
   \   0000003C   0x9004             STR      R0,[SP, #+16]
    937          	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
   \   0000003E   0x2004             MOVS     R0,#+4
   \   00000040   0x9005             STR      R0,[SP, #+20]
    938          	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000042   0xA901             ADD      R1,SP,#+4
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable17_55  ;; 0x40020400
   \   00000048   0x.... 0x....      BL       HAL_GPIO_Init
    939          
    940          	/* Peripheral clock enable */
    941          	__HAL_RCC_I2C1_CLK_ENABLE();
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable17_70  ;; 0x40023840
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable17_70  ;; 0x40023840
   \   0000005A   0x6008             STR      R0,[R1, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable17_70  ;; 0x40023840
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF410 0x1000      ANDS     R0,R0,#0x200000
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0x9800             LDR      R0,[SP, #+0]
    942          	/* Peripheral interrupt init*/
    943          	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
   \   0000006A   0x2200             MOVS     R2,#+0
   \   0000006C   0x2103             MOVS     R1,#+3
   \   0000006E   0x201F             MOVS     R0,#+31
   \   00000070   0x.... 0x....      BL       HAL_NVIC_SetPriority
    944          	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \   00000074   0x201F             MOVS     R0,#+31
   \   00000076   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   0000007A   0xE032             B.N      ??HAL_I2C_MspInit_1
    945          
    946            }
    947            else if(hi2c->Instance==I2C2)
   \                     ??HAL_I2C_MspInit_0: (+1)
   \   0000007C   0x6820             LDR      R0,[R4, #+0]
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable17_71  ;; 0x40005800
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xD12D             BNE.N    ??HAL_I2C_MspInit_1
    948            {
    949            /* USER CODE BEGIN I2C2_MspInit 0 */
    950          
    951            /* USER CODE END I2C2_MspInit 0 */
    952            
    953              /**I2C2 GPIO Configuration    
    954              PB10     ------> I2C2_SCL
    955              PB11     ------> I2C2_SDA 
    956              */
    957              __HAL_RCC_GPIOB_CLK_ENABLE();
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable17_51  ;; 0x40023830
   \   00000094   0x6008             STR      R0,[R1, #+0]
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   000000A0   0x9000             STR      R0,[SP, #+0]
   \   000000A2   0x9800             LDR      R0,[SP, #+0]
    958              
    959              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
   \   000000A4   0xF44F 0x6040      MOV      R0,#+3072
   \   000000A8   0x9001             STR      R0,[SP, #+4]
    960              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \   000000AA   0x2012             MOVS     R0,#+18
   \   000000AC   0x9002             STR      R0,[SP, #+8]
    961              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x9003             STR      R0,[SP, #+12]
    962              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000000B2   0x2003             MOVS     R0,#+3
   \   000000B4   0x9004             STR      R0,[SP, #+16]
    963              GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
   \   000000B6   0x2004             MOVS     R0,#+4
   \   000000B8   0x9005             STR      R0,[SP, #+20]
    964              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   000000BA   0xA901             ADD      R1,SP,#+4
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable17_55  ;; 0x40020400
   \   000000C0   0x.... 0x....      BL       HAL_GPIO_Init
    965          
    966              /* Peripheral clock enable */
    967              __HAL_RCC_I2C2_CLK_ENABLE();
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable17_70  ;; 0x40023840
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable17_70  ;; 0x40023840
   \   000000D2   0x6008             STR      R0,[R1, #+0]
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable17_70  ;; 0x40023840
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0xF410 0x0080      ANDS     R0,R0,#0x400000
   \   000000DE   0x9000             STR      R0,[SP, #+0]
   \   000000E0   0x9800             LDR      R0,[SP, #+0]
    968              /* Peripheral interrupt init*/
    969              //HAL_NVIC_SetPriority(I2C2_EV_IRQn, 3, 1);
    970              //HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    971            }
    972          
    973          }
   \                     ??HAL_I2C_MspInit_1: (+1)
   \   000000E2   0xB006             ADD      SP,SP,#+24
   \   000000E4   0xBD10             POP      {R4,PC}          ;; return
    974          
    975          /*---------------------------------------------------*/
    976          /*   UART                                            */
    977          /* UART4 init function */

   \                                 In section .text, align 2, keep-with-next
    978          void USART3_Init(void)
    979          {
   \                     USART3_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    980          
    981            huart3.Instance = USART3;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable17_72  ;; 0x40004800
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable17_73
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    982            huart3.Init.BaudRate = 115200;
   \   0000000C   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable17_73
   \   00000014   0x6048             STR      R0,[R1, #+4]
    983            huart3.Init.WordLength = UART_WORDLENGTH_8B;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable17_73
   \   0000001C   0x6088             STR      R0,[R1, #+8]
    984            huart3.Init.StopBits = UART_STOPBITS_1;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable17_73
   \   00000024   0x60C8             STR      R0,[R1, #+12]
    985            huart3.Init.Parity = UART_PARITY_NONE;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable17_73
   \   0000002C   0x6108             STR      R0,[R1, #+16]
    986            huart3.Init.Mode = UART_MODE_TX_RX;
   \   0000002E   0x200C             MOVS     R0,#+12
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable17_73
   \   00000034   0x6148             STR      R0,[R1, #+20]
    987            huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable17_73
   \   0000003C   0x6188             STR      R0,[R1, #+24]
    988            huart3.Init.OverSampling = UART_OVERSAMPLING_16;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable17_73
   \   00000044   0x61C8             STR      R0,[R1, #+28]
    989            huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED ;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable17_73
   \   0000004C   0x6208             STR      R0,[R1, #+32]
    990            huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable17_73
   \   00000054   0x6248             STR      R0,[R1, #+36]
    991            HAL_UART_Init(&huart3);
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable17_73
   \   0000005A   0x.... 0x....      BL       HAL_UART_Init
    992          
    993            //HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
    994            //HAL_NVIC_EnableIRQ(USART3_IRQn);
    995          
    996          }
   \   0000005E   0xBD01             POP      {R0,PC}          ;; return
    997          
    998          

   \                                 In section .text, align 2, keep-with-next
    999          void HAL_UART_MspInit(UART_HandleTypeDef *huart)
   1000          {
   \                     HAL_UART_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   1001          
   1002            GPIO_InitTypeDef GPIO_InitStruct;
   1003            if(huart->Instance==USART3)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable17_72  ;; 0x40004800
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD135             BNE.N    ??HAL_UART_MspInit_0
   1004            {
   1005          
   1006          
   1007            /* USER CODE END UART4_MspInit 0 */
   1008              /* Peripheral clock enable */
   1009              __USART3_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable17_70  ;; 0x40023840
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable17_70  ;; 0x40023840
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable17_70  ;; 0x40023840
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF410 0x2080      ANDS     R0,R0,#0x40000
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
   1010              __GPIOC_CLK_ENABLE();
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable17_51  ;; 0x40023830
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x40023830
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   1011            
   1012              /**UART4 GPIO Configuration    
   1013              PC10     ------> USART3_TX
   1014              PC11     ------> USART3_RX
   1015              */
   1016              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
   \   0000004C   0xF44F 0x6040      MOV      R0,#+3072
   \   00000050   0x9001             STR      R0,[SP, #+4]
   1017              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x9002             STR      R0,[SP, #+8]
   1018              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x9003             STR      R0,[SP, #+12]
   1019              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   0000005A   0x2003             MOVS     R0,#+3
   \   0000005C   0x9004             STR      R0,[SP, #+16]
   1020              GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
   \   0000005E   0x2007             MOVS     R0,#+7
   \   00000060   0x9005             STR      R0,[SP, #+20]
   1021              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000062   0xA901             ADD      R1,SP,#+4
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable17_74  ;; 0x40020800
   \   00000068   0x.... 0x....      BL       HAL_GPIO_Init
   1022          
   1023              /* NVIC for USART */
   1024              HAL_NVIC_SetPriority(USART3_IRQn, 7, 1);
   \   0000006C   0x2201             MOVS     R2,#+1
   \   0000006E   0x2107             MOVS     R1,#+7
   \   00000070   0x2027             MOVS     R0,#+39
   \   00000072   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1025              HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   00000076   0x2027             MOVS     R0,#+39
   \   00000078   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1026          
   1027            }
   1028          
   1029          }
   \                     ??HAL_UART_MspInit_0: (+1)
   \   0000007C   0xB006             ADD      SP,SP,#+24
   \   0000007E   0xBD10             POP      {R4,PC}          ;; return
   1030          
   1031          
   1032          

   \                                 In section .text, align 2, keep-with-next
   1033          void EXTI4_IRQHandler(void)
   1034          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1035              /* EXTI line interrupt detected */
   1036            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable17_75  ;; 0x40013c14
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x06C0             LSLS     R0,R0,#+27
   \   0000000A   0xD517             BPL.N    ??EXTI4_IRQHandler_0
   1037            {
   1038              
   1039               if (cntRisingEXTI==20)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable17_76
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0x2814             CMP      R0,#+20
   \   00000014   0xD107             BNE.N    ??EXTI4_IRQHandler_1
   1040               {
   1041              	/*--------------Enable read PCM data --------------------*/   
   1042                  //flgDlyUpd = 1;  
   1043                  //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1044          		//__HAL_UNLOCK(&hspi5);
   1045                  //__HAL_SPI_ENABLE(&hspi5);
   1046                  cntRisingEXTI=0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable17_76
   \   0000001C   0x8008             STRH     R0,[R1, #+0]
   1047          
   1048                  /*Disable external interrupt */
   1049                  HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI4_IRQn));
   \   0000001E   0x200A             MOVS     R0,#+10
   \   00000020   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   00000024   0xE006             B.N      ??EXTI4_IRQHandler_2
   1050                  //HAL_GPIO_DeInit(GPIOB,GPIO_PIN_4);
   1051               }
   1052               else
   1053               {
   1054                  cntRisingEXTI++;
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable17_76
   \   0000002A   0x8800             LDRH     R0,[R0, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable17_76
   \   00000032   0x8008             STRH     R0,[R1, #+0]
   1055                  //__HAL_SPI_DISABLE(&hspi5);
   1056               }
   1057               
   1058                __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
   \                     ??EXTI4_IRQHandler_2: (+1)
   \   00000034   0x2010             MOVS     R0,#+16
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable17_75  ;; 0x40013c14
   \   0000003A   0x6008             STR      R0,[R1, #+0]
   1059          
   1060            }
   1061          }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return
   1062                        

   \                                 In section .text, align 2, keep-with-next
   1063          void EXTI15_10_IRQHandler(void)
   1064          {
   1065          
   1066          }
   \                     EXTI15_10_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1067          
   1068          /* Events for Button Press */

   \                                 In section .text, align 2, keep-with-next
   1069          void EXTI9_5_IRQHandler(void)
   1070          {
   \                     EXTI9_5_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1071          
   1072            /* EXTI line interrupt detected */
   1073            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable17_75  ;; 0x40013c14
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x05C0             LSLS     R0,R0,#+23
   \   0000000A   0xD514             BPL.N    ??EXTI9_5_IRQHandler_0
   1074            {
   1075          	  btnSW2 = 1;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x....             LDR.N    R1,??DataTable17_77
   \   00000010   0x7008             STRB     R0,[R1, #+0]
   1076          	  if ((++cntBtnPress)==8) cntBtnPress=0;
   \   00000012   0x....             LDR.N    R0,??DataTable17_78
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable17_78
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x2808             CMP      R0,#+8
   \   00000020   0xD102             BNE.N    ??EXTI9_5_IRQHandler_1
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR.N    R1,??DataTable17_78
   \   00000026   0x7008             STRB     R0,[R1, #+0]
   1077          	  BSP_LED_Toggle(LED2);
   \                     ??EXTI9_5_IRQHandler_1: (+1)
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       BSP_LED_Toggle
   1078          	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
   \   0000002E   0xF44F 0x7080      MOV      R0,#+256
   \   00000032   0x....             LDR.N    R1,??DataTable17_75  ;; 0x40013c14
   \   00000034   0x6008             STR      R0,[R1, #+0]
   1079          
   1080            }
   1081          
   1082          
   1083            /* EXTI line interrupt detected */
   1084            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET)
   \                     ??EXTI9_5_IRQHandler_0: (+1)
   \   00000036   0x....             LDR.N    R0,??DataTable17_75  ;; 0x40013c14
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x0580             LSLS     R0,R0,#+22
   \   0000003C   0xD50F             BPL.N    ??EXTI9_5_IRQHandler_2
   1085            {
   1086          		btnSW1 = 1;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x....             LDR.N    R1,??DataTable17_79
   \   00000042   0x7008             STRB     R0,[R1, #+0]
   1087          		Command_index^=0x01;
   \   00000044   0x....             LDR.N    R0,??DataTable17_80
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0xF090 0x0001      EORS     R0,R0,#0x1
   \   0000004C   0x....             LDR.N    R1,??DataTable17_80
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
   1088          		BSP_LED_Toggle(LED1);
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      BL       BSP_LED_Toggle
   1089          
   1090          	   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
   \   00000056   0xF44F 0x7000      MOV      R0,#+512
   \   0000005A   0x....             LDR.N    R1,??DataTable17_75  ;; 0x40013c14
   \   0000005C   0x6008             STR      R0,[R1, #+0]
   1091            }
   1092          
   1093          }
   \                     ??EXTI9_5_IRQHandler_2: (+1)
   \   0000005E   0xBD01             POP      {R0,PC}          ;; return
   1094          
   1095          

   \                                 In section .text, align 2, keep-with-next
   1096          void DFT_Init(void)
   1097          {
   \                     DFT_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1098          #if MAIN_CRSCORR
   1099          		arm_rfft_init_q15(&RealFFT_Ins,(uint32_t)128,(uint32_t)0,(uint32_t)1);
   1100          		arm_rfft_init_q15(&RealIFFT_Ins,(uint32_t)128,(uint32_t)1,(uint32_t)1);
   1101          #endif  
   1102          		/* Initialize the CFFT/CIFFT module */
   1103          		//arm_rfft_init_f32(&S,&SS, 512,  0, 1);
   1104          		//arm_rfft_init_f32(&S1,&SS1, 512,  0, 1); 
   1105          		//arm_rfft_init_f32(&S2,&SS2, 512,  0, 1); 
   1106          		//arm_rfft_init_f32(&S3,&SS3, 512,  0, 1); 
   1107          		//arm_rfft_init_f32(&S4,&SS4, 512,  0, 1);
   1108          		//arm_rfft_init_f32(&IS,&ISS, 512,  1, 1);
   1109          		
   1110          
   1111          		//arm_rfft_fast_init_f32(&S1, 512);
   1112                  //arm_rfft_fast_init_f32(&S2, 512);
   1113          		//arm_rfft_fast_init_f32(&S3, 512);
   1114          		//arm_rfft_fast_init_f32(&S4, 512);
   1115          		//arm_rfft_fast_init_f32(&IS, 512);
   1116          		arm_rfft_fast_init_f32(&S, 1024);
   \   00000002   0xF44F 0x6180      MOV      R1,#+1024
   \   00000006   0x....             LDR.N    R0,??DataTable17_81
   \   00000008   0x.... 0x....      BL       arm_rfft_fast_init_f32
   1117          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
   1118          
   1119          

   \                                 In section .text, align 2, keep-with-next
   1120          void SumDelay(Mic_Array_Data *BufferIn)
   1121          {
   \                     SumDelay: (+1)
   \   00000000   0xB410             PUSH     {R4}
   1122              //if (idxLatency12>idxLatency13)
   1123              // {
   1124              //     if (idxLatency13 > idxLatency14)
   1125              //     {
   1126              //         /* MIC2 --> MIC3 --> MIC4 */
   1127              //     }
   1128              //             else if (idxLatency14 > idxLatency12)
   1129              //             {
   1130              //        /* MIC4-->MIC2-->MIC3  */
   1131              //            }
   1132              //             else
   1133              //             {
   1134              //       /* MIC2-->MIC4-->MIC3  */
   1135              //             }
   1136              // }
   1137              //else // idxLatency13>idxLatency12
   1138              //     {
   1139              //    if (idxLatency12 > idxLatency14)
   1140              //    {
   1141              //        //MIC3 --> MIC2 --> MIC4 
   1142              //    }
   1143              //        else if (idxLatency14 > idxLatency13)
   1144              //        {
   1145              //        //MIC4 --> MIC3 --> MIC2
   1146              //        }
   1147              //        else
   1148              //        {
   1149              //        //MIC3 --> MIC4 --> MIC2
   1150              //	   }
   1151              //}
   1152          	
   1153              for(uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000002   0x2100             MOVS     R1,#+0
   \                     ??SumDelay_0: (+1)
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0xF5B1 0x6F80      CMP      R1,#+1024
   \   0000000A   0xF280 0x808B      BGE.W    ??SumDelay_1
   1154              {
   1155                bufferSum[6*i] = (uint16_t)(BufferIn->bufMIC1[i]*FacMic.facMIC1 + 
   1156                BufferIn->bufMIC2[i]*FacMic.facMIC2 + 
   1157                BufferIn->bufMIC3[i]*FacMic.facMIC3 + 
   1158                BufferIn->bufMIC4[i]*FacMic.facMIC4); 		
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0xF930 0x2011      LDRSH    R2,[R0, R1, LSL #+1]
   \   00000014   0xEE00 0x2A10      VMOV     S0,R2
   \   00000018   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000001C   0x....             LDR.N    R2,??DataTable17_6
   \   0000001E   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   00000022   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000026   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000028   0xEB10 0x0241      ADDS     R2,R0,R1, LSL #+1
   \   0000002C   0xF241 0x0314      MOVW     R3,#+4116
   \   00000030   0x5E9A             LDRSH    R2,[R3, R2]
   \   00000032   0xEE00 0x2A90      VMOV     S1,R2
   \   00000036   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   0000003A   0x....             LDR.N    R2,??DataTable17_6
   \   0000003C   0xED92 0x1A01      VLDR     S2,[R2, #+4]
   \   00000040   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000044   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000046   0xEB10 0x0241      ADDS     R2,R0,R1, LSL #+1
   \   0000004A   0xF242 0x0328      MOVW     R3,#+8232
   \   0000004E   0x5E9A             LDRSH    R2,[R3, R2]
   \   00000050   0xEE00 0x2A90      VMOV     S1,R2
   \   00000054   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000058   0x....             LDR.N    R2,??DataTable17_6
   \   0000005A   0xED92 0x1A02      VLDR     S2,[R2, #+8]
   \   0000005E   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000062   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000064   0xEB10 0x0241      ADDS     R2,R0,R1, LSL #+1
   \   00000068   0xF243 0x033C      MOVW     R3,#+12348
   \   0000006C   0x5E9A             LDRSH    R2,[R3, R2]
   \   0000006E   0xEE00 0x2A90      VMOV     S1,R2
   \   00000072   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000076   0x....             LDR.N    R2,??DataTable17_6
   \   00000078   0xED92 0x1A03      VLDR     S2,[R2, #+12]
   \   0000007C   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000080   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000084   0xEE10 0x2A10      VMOV     R2,S0
   \   00000088   0x....             LDR.N    R3,??DataTable17_82
   \   0000008A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000008C   0x240C             MOVS     R4,#+12
   \   0000008E   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   00000092   0x801A             STRH     R2,[R3, #+0]
   1159                bufferSum[6*i+1] = bufferSum[6*i];
   \   00000094   0x....             LDR.N    R2,??DataTable17_82
   \   00000096   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000098   0x2306             MOVS     R3,#+6
   \   0000009A   0xFB03 0xF301      MUL      R3,R3,R1
   \   0000009E   0xEB12 0x0243      ADDS     R2,R2,R3, LSL #+1
   \   000000A2   0x....             LDR.N    R3,??DataTable17_82
   \   000000A4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000A6   0x240C             MOVS     R4,#+12
   \   000000A8   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   000000AC   0x881B             LDRH     R3,[R3, #+0]
   \   000000AE   0x8053             STRH     R3,[R2, #+2]
   1160          	  bufferSum[6*i+2] = bufferSum[6*i];
   \   000000B0   0x....             LDR.N    R2,??DataTable17_82
   \   000000B2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000B4   0x2306             MOVS     R3,#+6
   \   000000B6   0xFB03 0xF301      MUL      R3,R3,R1
   \   000000BA   0xEB12 0x0243      ADDS     R2,R2,R3, LSL #+1
   \   000000BE   0x....             LDR.N    R3,??DataTable17_82
   \   000000C0   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000C2   0x240C             MOVS     R4,#+12
   \   000000C4   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   000000C8   0x881B             LDRH     R3,[R3, #+0]
   \   000000CA   0x8093             STRH     R3,[R2, #+4]
   1161          	  bufferSum[6*i+3] = bufferSum[6*i];
   \   000000CC   0x....             LDR.N    R2,??DataTable17_82
   \   000000CE   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000D0   0x2306             MOVS     R3,#+6
   \   000000D2   0xFB03 0xF301      MUL      R3,R3,R1
   \   000000D6   0xEB12 0x0243      ADDS     R2,R2,R3, LSL #+1
   \   000000DA   0x....             LDR.N    R3,??DataTable17_82
   \   000000DC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000DE   0x240C             MOVS     R4,#+12
   \   000000E0   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   000000E4   0x881B             LDRH     R3,[R3, #+0]
   \   000000E6   0x80D3             STRH     R3,[R2, #+6]
   1162          	  bufferSum[6*i+4] = bufferSum[6*i];
   \   000000E8   0x....             LDR.N    R2,??DataTable17_82
   \   000000EA   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000EC   0x2306             MOVS     R3,#+6
   \   000000EE   0xFB03 0xF301      MUL      R3,R3,R1
   \   000000F2   0xEB12 0x0243      ADDS     R2,R2,R3, LSL #+1
   \   000000F6   0x....             LDR.N    R3,??DataTable17_82
   \   000000F8   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000FA   0x240C             MOVS     R4,#+12
   \   000000FC   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   00000100   0x881B             LDRH     R3,[R3, #+0]
   \   00000102   0x8113             STRH     R3,[R2, #+8]
   1163          	  bufferSum[6*i+5] = bufferSum[6*i];
   \   00000104   0x....             LDR.N    R2,??DataTable17_82
   \   00000106   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000108   0x2306             MOVS     R3,#+6
   \   0000010A   0xFB03 0xF301      MUL      R3,R3,R1
   \   0000010E   0xEB12 0x0243      ADDS     R2,R2,R3, LSL #+1
   \   00000112   0x....             LDR.N    R3,??DataTable17_82
   \   00000114   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000116   0x240C             MOVS     R4,#+12
   \   00000118   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   0000011C   0x881B             LDRH     R3,[R3, #+0]
   \   0000011E   0x8153             STRH     R3,[R2, #+10]
   1164              }
   \   00000120   0x1C49             ADDS     R1,R1,#+1
   \   00000122   0xE76F             B.N      ??SumDelay_0
   1165            
   1166              
   1167          }
   \                     ??SumDelay_1: (+1)
   \   00000124   0xBC10             POP      {R4}
   \   00000126   0x4770             BX       LR               ;; return
   1168          
   1169          

   \                                 In section .text, align 2, keep-with-next
   1170          void ButtonInit(void)
   1171          {
   \                     ButtonInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1172            /* PI8: SW2 */
   1173            /* PI9: SW1 */
   1174            /* ----------------------*/
   1175            __GPIOB_CLK_ENABLE();
   \   00000002   0x....             LDR.N    R0,??DataTable17_51  ;; 0x40023830
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000000A   0x....             LDR.N    R1,??DataTable17_51  ;; 0x40023830
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x....             LDR.N    R0,??DataTable17_51  ;; 0x40023830
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   1176            GPIO_INS.Pin = GPIO_PIN_8|GPIO_PIN_9;
   \   0000001A   0xF44F 0x7040      MOV      R0,#+768
   \   0000001E   0x....             LDR.N    R1,??DataTable17_52
   \   00000020   0x6008             STR      R0,[R1, #+0]
   1177            GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   00000022   0x....             LDR.N    R0,??DataTable17_53  ;; 0x10110000
   \   00000024   0x....             LDR.N    R1,??DataTable17_52
   \   00000026   0x6048             STR      R0,[R1, #+4]
   1178            GPIO_INS.Pull =GPIO_NOPULL;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR.N    R1,??DataTable17_52
   \   0000002C   0x6088             STR      R0,[R1, #+8]
   1179            GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   0000002E   0x2003             MOVS     R0,#+3
   \   00000030   0x....             LDR.N    R1,??DataTable17_52
   \   00000032   0x60C8             STR      R0,[R1, #+12]
   1180            HAL_GPIO_Init(GPIOI,&GPIO_INS);
   \   00000034   0x....             LDR.N    R1,??DataTable17_52
   \   00000036   0x....             LDR.N    R0,??DataTable17_83  ;; 0x40022000
   \   00000038   0x.... 0x....      BL       HAL_GPIO_Init
   1181          
   1182            /* Enable and set Button EXTI Interrupt to the lowest priority */
   1183            HAL_NVIC_SetPriority((IRQn_Type)EXTI9_5_IRQn, 0x0F, 0x00);
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x210F             MOVS     R1,#+15
   \   00000040   0x2017             MOVS     R0,#+23
   \   00000042   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1184            HAL_NVIC_EnableIRQ((IRQn_Type)EXTI9_5_IRQn);
   \   00000046   0x2017             MOVS     R0,#+23
   \   00000048   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1185            /*-----------------------*/
   1186          }
   \   0000004C   0xBD01             POP      {R0,PC}          ;; return
   1187          
   1188          
   1189          /* I2C2 init function */

   \                                 In section .text, align 2, keep-with-next
   1190          void MX_I2C2_Init(void)
   1191          {
   \                     MX_I2C2_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1192            __HAL_I2C_DISABLE(&hi2c2);
   \   00000002   0x....             LDR.N    R0,??DataTable17_84
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0840             LSRS     R0,R0,#+1
   \   0000000A   0x0040             LSLS     R0,R0,#+1
   \   0000000C   0x....             LDR.N    R1,??DataTable17_84
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x6008             STR      R0,[R1, #+0]
   1193            hi2c2.Instance = I2C2;
   \   00000012   0x....             LDR.N    R0,??DataTable17_71  ;; 0x40005800
   \   00000014   0x....             LDR.N    R1,??DataTable17_84
   \   00000016   0x6008             STR      R0,[R1, #+0]
   1194            hi2c2.Init.Timing =0x00A0689A ;//I2C_TIMING  0x00303D5D 0x00A0689A
   \   00000018   0x....             LDR.N    R0,??DataTable17_85  ;; 0xa0689a
   \   0000001A   0x....             LDR.N    R1,??DataTable17_84
   \   0000001C   0x6048             STR      R0,[R1, #+4]
   1195            hi2c2.Init.OwnAddress1 = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR.N    R1,??DataTable17_84
   \   00000022   0x6088             STR      R0,[R1, #+8]
   1196            hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable17_84
   \   00000028   0x60C8             STR      R0,[R1, #+12]
   1197            hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR.N    R1,??DataTable17_84
   \   0000002E   0x6108             STR      R0,[R1, #+16]
   1198            hi2c2.Init.OwnAddress2 = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x....             LDR.N    R1,??DataTable17_84
   \   00000034   0x6148             STR      R0,[R1, #+20]
   1199            hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x....             LDR.N    R1,??DataTable17_84
   \   0000003A   0x6188             STR      R0,[R1, #+24]
   1200            hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x....             LDR.N    R1,??DataTable17_84
   \   00000040   0x61C8             STR      R0,[R1, #+28]
   1201            hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable17_84
   \   00000046   0x6208             STR      R0,[R1, #+32]
   1202            HAL_I2C_Init(&hi2c2);
   \   00000048   0x....             LDR.N    R0,??DataTable17_84
   \   0000004A   0x.... 0x....      BL       HAL_I2C_Init
   1203          
   1204            /**Configure Analogue filter 
   1205            */
   1206            //HAL_I2CEx_AnalogFilter_Config(&hi2c2, I2C_ANALOGFILTER_ENABLE);
   1207          
   1208          }
   \   0000004E   0xBD01             POP      {R0,PC}          ;; return
   1209          

   \                                 In section .text, align 2, keep-with-next
   1210           void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
   1211          {  
   \                     HAL_I2S_TxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1212            //Audio_Play_Out();  
   1213            Audio_MAL_Play((uint32_t)&bufferSum[AUDIO_CHANNELS*(6*AUDIO_SAMPLING_FREQUENCY/1000)], 2*6*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
   \   00000004   0xF44F 0x71C0      MOV      R1,#+384
   \   00000008   0x....             LDR.N    R0,??DataTable17_86
   \   0000000A   0x.... 0x....      BL       Audio_MAL_Play
   1214          }
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
   1215          

   \                                 In section .text, align 2, keep-with-next
   1216           uint8_t StartPlay(void)
   1217           {
   \                     StartPlay: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1218           #if 0
   1219          	while (1)
   1220          	{
   1221          		 /* there is data in the buffer */	
   1222          		 if((WaveRec_idxSens1>=(AUDIO_OUT_BUFFER_SIZE-1))&&(stFrstFrmStore<3))
   1223          		 {
   1224          			 RESET_IDX
   1225          			 /* this is just run 1 time after 1st frame of I2S data full */
   1226          			 if ((stFrstFrmStore<3))
   1227          			 {
   1228                                       stFrstFrmStore++;
   1229                       
   1230                                       buffer_switch = BUF2_PLAY; /* record data to buffer3 */
   1231                       
   1232                                       if (stFrstFrmStore==2)
   1233                                       {
   1234                                           
   1235                   
   1236                                           /*------------------------PLAYER------------------------------------------*/
   1237                                           Audio_MAL_Play((uint32_t)bufferSum,2*6*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
   1238                                           /*------------------------------------------------------------------------*/				 
   1239                                           buffer_switch = BUF1_PLAY;
   1240          								 uint16_t tdelay=100;
   1241          								 while(tdelay--);
   1242                                           //StartRecMic7_8();
   1243                                           return 0;		 
   1244                                       }				 
   1245                               
   1246          			 }
   1247          		 
   1248          		 }
   1249          	}
   1250          #endif	
   1251          	         
   1252          	 /*------------------------PLAYER------------------------------------------*/
   1253          	 Audio_MAL_Play((uint32_t)bufferSum,2*6*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
   \   00000002   0xF44F 0x71C0      MOV      R1,#+384
   \   00000006   0x....             LDR.N    R0,??DataTable17_82
   \   00000008   0x.... 0x....      BL       Audio_MAL_Play
   1254          	 /*------------------------------------------------------------------------*/	
   1255           }
                  ^
Warning[Pe940]: missing return statement at end of non-void function
          "StartPlay"

  static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
              ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c",709  Warning[Pe177]: 
          function "USBH_UserProcess" was declared but never referenced
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
   1256          

   \                                 In section .text, align 2, keep-with-next
   1257          void SubFrameFinished(void)
   1258          {
   \                     SubFrameFinished: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1259              Audio_Play_Out();
   \   00000002   0x.... 0x....      BL       Audio_Play_Out
   1260          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0xE000EF50         DC32     0xe000ef50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0xE000ED14         DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0xE000ED84         DC32     0xe000ed84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0xE000ED80         DC32     0xe000ed80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0xE000EF60         DC32     0xe000ef60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x........         DC32     flgDlyUpd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x........         DC32     FacMic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   0x........         DC32     CrssCorVal78

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_9:
   \   00000000   0x........         DC32     Buffer3+0x708C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_10:
   \   00000000   0x........         DC32     Buffer3+0x6078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_11:
   \   00000000   0x........         DC32     idxLatency78

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_12:
   \   00000000   0x........         DC32     CrssCorVal14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_13:
   \   00000000   0x........         DC32     Buffer3+0x303C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_14:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_15:
   \   00000000   0x........         DC32     idxLatency14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_16:
   \   00000000   0x........         DC32     CrssCorVal25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_17:
   \   00000000   0x........         DC32     Buffer3+0x1014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_18:
   \   00000000   0x........         DC32     Buffer3+0x4050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_19:
   \   00000000   0x........         DC32     idxLatency25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_20:
   \   00000000   0x........         DC32     CrssCorVal63

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_21:
   \   00000000   0x........         DC32     Buffer3+0x2028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_22:
   \   00000000   0x........         DC32     Buffer3+0x5064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_23:
   \   00000000   0x........         DC32     idxLatency63

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_24:
   \   00000000   0x........         DC32     Buffer1+0x708C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_25:
   \   00000000   0x........         DC32     Buffer1+0x6078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_26:
   \   00000000   0x........         DC32     Buffer1+0x303C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_27:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_28:
   \   00000000   0x........         DC32     Buffer1+0x1014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_29:
   \   00000000   0x........         DC32     Buffer1+0x4050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_30:
   \   00000000   0x........         DC32     Buffer1+0x2028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_31:
   \   00000000   0x........         DC32     Buffer1+0x5064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_32:
   \   00000000   0x........         DC32     Buffer2+0x708C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_33:
   \   00000000   0x........         DC32     Buffer2+0x6078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_34:
   \   00000000   0x........         DC32     Buffer2+0x303C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_35:
   \   00000000   0x........         DC32     Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_36:
   \   00000000   0x........         DC32     Buffer2+0x1014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_37:
   \   00000000   0x........         DC32     Buffer2+0x4050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_38:
   \   00000000   0x........         DC32     Buffer2+0x2028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_39:
   \   00000000   0x........         DC32     Buffer2+0x5064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_40:
   \   00000000   0x........         DC32     idxFrmPDMMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_41:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_42:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_43:
   \   00000000   0x........         DC32     idxSPI5DataBuf3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_44:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_45:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_46:
   \   00000000   0x........         DC32     I2S2_idxTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_47:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_48:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_49:
   \   00000000   0x........         DC32     WaveRec_idxTest

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_50:
   \   00000000   0x........         DC32     cntStrt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_51:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_52:
   \   00000000   0x........         DC32     GPIO_INS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_53:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_54:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_55:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_56:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_57:
   \   00000000   0x........         DC32     hUSBDDevice

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_58:
   \   00000000   0x........         DC32     AUDIO_Desc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_59:
   \   00000000   0x........         DC32     USBD_AUDIO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_60:
   \   00000000   0x........         DC32     USBD_AUDIO_fops

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_61:
   \   00000000   0x........         DC32     fir256Coff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_62:
   \   00000000   0x........         DC32     WaveRecord_flgIni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_63:
   \   00000000   0x........         DC32     SPI4_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_64:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_65:
   \   00000000   0x........         DC32     flg10ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_66:
   \   00000000   0x........         DC32     cntTime200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_67:
   \   00000000   0x........         DC32     ??ticks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_68:
   \   00000000   0x00100001         DC32     0x100001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_69:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_70:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_71:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_72:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_73:
   \   00000000   0x........         DC32     huart3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_74:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_75:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_76:
   \   00000000   0x........         DC32     cntRisingEXTI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_77:
   \   00000000   0x........         DC32     btnSW2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_78:
   \   00000000   0x........         DC32     cntBtnPress

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_79:
   \   00000000   0x........         DC32     btnSW1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_80:
   \   00000000   0x........         DC32     Command_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_81:
   \   00000000   0x........         DC32     S

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_82:
   \   00000000   0x........         DC32     bufferSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_83:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_84:
   \   00000000   0x........         DC32     hi2c2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_85:
   \   00000000   0x00A0689A         DC32     0xa0689a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_86:
   \   00000000   0x........         DC32     bufferSum+0x180
   1261          /*****************************END OF FILE**************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Audio_Play_Out
         8   -> AudioUSBSend
     144   BSP_AUDIO_OUT_ClockConfig
       144   -> HAL_RCCEx_GetPeriphCLKConfig
       144   -> HAL_RCCEx_PeriphCLKConfig
       8   ButtonInit
         8   -> HAL_GPIO_Init
         8   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
       8   CPU_CACHE_Enable
         8   -> SCB_EnableDCache
         8   -> SCB_EnableICache
       8   DFT_Init
         8   -> arm_rfft_fast_init_f32
       0   EXTI15_10_IRQHandler
       8   EXTI4_IRQHandler
         8   -> HAL_NVIC_DisableIRQ
       8   EXTI9_5_IRQHandler
         8   -> BSP_LED_Toggle
       8   FFT_Update
         8   -> AudioPlayerUpd
         8   -> FactorUpd
         8   -> GCC_PHAT
         8   -> PDM2PCMSDO78
         8   -> SumDelay
      32   HAL_I2C_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       8   HAL_I2S_TxCpltCallback
         8   -> Audio_MAL_Play
      32   HAL_UART_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       8   MX_I2C2_Init
         8   -> HAL_I2C_Init
       4   SCB_EnableDCache
       0   SCB_EnableICache
       8   StartPlay
         8   -> Audio_MAL_Play
       8   SubFrameFinished
         8   -> Audio_Play_Out
       4   SumDelay
     208   SystemClock_Config
       208   -> HAL_PWREx_EnableOverDrive
       208   -> HAL_RCCEx_PeriphCLKConfig
       208   -> HAL_RCC_ClockConfig
       208   -> HAL_RCC_OscConfig
       0   Toggle_Leds
       8   USART3_Init
         8   -> HAL_UART_Init
       8   main
         8   -> AUDIO_InitApplication
         8   -> BSP_AUDIO_OUT_ClockConfig
         8   -> BSP_LED_Init
         8   -> BSP_LED_Toggle
         8   -> BSP_SDRAM_Init
         8   -> ButtonInit
         8   -> CPU_CACHE_Enable
         8   -> DFT_Init
         8   -> EnergyNoiseCalc
         8   -> FFT_Update
         8   -> HAL_GPIO_Init
         8   -> HAL_GPIO_WritePin
         8   -> HAL_Init
         8   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
         8   -> MIC1TO8_Init
         8   -> MX_I2C2_Init
         8   -> STA321MP_Ini
         8   -> StartPlay
         8   -> SystemClock_Config
         8   -> USBD_AUDIO_Init_Microphone_Descriptor
         8   -> USBD_AUDIO_RegisterInterface
         8   -> USBD_Init
         8   -> USBD_RegisterClass
         8   -> USBD_Start
         8   -> Window


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_11
       4  ??DataTable17_12
       4  ??DataTable17_13
       4  ??DataTable17_14
       4  ??DataTable17_15
       4  ??DataTable17_16
       4  ??DataTable17_17
       4  ??DataTable17_18
       4  ??DataTable17_19
       4  ??DataTable17_2
       4  ??DataTable17_20
       4  ??DataTable17_21
       4  ??DataTable17_22
       4  ??DataTable17_23
       4  ??DataTable17_24
       4  ??DataTable17_25
       4  ??DataTable17_26
       4  ??DataTable17_27
       4  ??DataTable17_28
       4  ??DataTable17_29
       4  ??DataTable17_3
       4  ??DataTable17_30
       4  ??DataTable17_31
       4  ??DataTable17_32
       4  ??DataTable17_33
       4  ??DataTable17_34
       4  ??DataTable17_35
       4  ??DataTable17_36
       4  ??DataTable17_37
       4  ??DataTable17_38
       4  ??DataTable17_39
       4  ??DataTable17_4
       4  ??DataTable17_40
       4  ??DataTable17_41
       4  ??DataTable17_42
       4  ??DataTable17_43
       4  ??DataTable17_44
       4  ??DataTable17_45
       4  ??DataTable17_46
       4  ??DataTable17_47
       4  ??DataTable17_48
       4  ??DataTable17_49
       4  ??DataTable17_5
       4  ??DataTable17_50
       4  ??DataTable17_51
       4  ??DataTable17_52
       4  ??DataTable17_53
       4  ??DataTable17_54
       4  ??DataTable17_55
       4  ??DataTable17_56
       4  ??DataTable17_57
       4  ??DataTable17_58
       4  ??DataTable17_59
       4  ??DataTable17_6
       4  ??DataTable17_60
       4  ??DataTable17_61
       4  ??DataTable17_62
       4  ??DataTable17_63
       4  ??DataTable17_64
       4  ??DataTable17_65
       4  ??DataTable17_66
       4  ??DataTable17_67
       4  ??DataTable17_68
       4  ??DataTable17_69
       4  ??DataTable17_7
       4  ??DataTable17_70
       4  ??DataTable17_71
       4  ??DataTable17_72
       4  ??DataTable17_73
       4  ??DataTable17_74
       4  ??DataTable17_75
       4  ??DataTable17_76
       4  ??DataTable17_77
       4  ??DataTable17_78
       4  ??DataTable17_79
       4  ??DataTable17_8
       4  ??DataTable17_80
       4  ??DataTable17_81
       4  ??DataTable17_82
       4  ??DataTable17_83
       4  ??DataTable17_84
       4  ??DataTable17_85
       4  ??DataTable17_86
       4  ??DataTable17_9
     194  Audio_Play_Out
     112  BSP_AUDIO_OUT_ClockConfig
      78  ButtonInit
      12  CPU_CACHE_Enable
       1  Command_index
       4  CrssCorVal14
       4  CrssCorVal25
       4  CrssCorVal63
       4  CrssCorVal78
      14  DFT_Init
       2  DeltaBuf1
       2  DeltaBuf1Old
       2  EXTI15_10_IRQHandler
      62  EXTI4_IRQHandler
      96  EXTI9_5_IRQHandler
     400  FFT_Update
      24  FacMic
      20  GPIO_INS
     230  HAL_I2C_MspInit
      16  HAL_I2S_TxCpltCallback
     128  HAL_UART_MspInit
       2  I2S2_idxTmp
      24  IS
       4  LowPass_Mic1Old
       4  LowPass_Mic2Old
       4  LowPass_Mic3Old
       4  LowPass_Mic4Old
       4  LowPass_Mic5Old
       4  LowPass_Mic6Old
       4  LowPass_Mic7Old
       4  LowPass_Mic8Old
      80  MX_I2C2_Init
      24  S
      24  S1
      24  S2
      24  S3
      24  S4
     100  SCB_EnableDCache
      42  SCB_EnableICache
      14  StartPlay
       8  SubFrameFinished
     296  SumDelay
     176  SystemClock_Config
      28  Toggle_Leds
      96  USART3_Init
       2  WaveRec_idxSens1
       2  WaveRec_idxSens2
       2  WaveRec_idxSens3
       2  WaveRec_idxSens4
       2  WaveRec_idxSens5
       2  WaveRec_idxSens6
    1024  aRxBuffer
       1  appli_state
       1  btnSW1
       1  btnSW2
   12308  bufferSum
       1  buffer_switch
       1  cntBtnPress
       2  cntRisingEXTI
       2  cntTime200
    4096  fir256Coff
       1  flg10ms
       1  flgDlyUpd
       1  flgSTAIni
     548  hUSBDDevice
     696  hUSBHost
     100  hspi4
     112  huart3
       1  idxDec
       2  idxLatency12
       2  idxLatency13
       2  idxLatency14
       2  idxLatency25
       2  idxLatency63
       2  idxLatency78
       2  idxSPI5DataBuf3
     644  main
       1  stFrstFrmStore
       4  ticks

 
 19 169 bytes in section .bss
      2 bytes in section .data
  3 176 bytes in section .text
 
  3 176 bytes of CODE memory
 19 171 bytes of DATA memory

Errors: none
Warnings: 2
