###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       23/Feb/2016  19:41:46
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\main.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\main.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
      1          /* Includes ------------------------------------------------------------------*/
      2          #include "main.h"

  /**
    ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\usbh_core.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
      3          #include "DSP.h"
      4          //#include "waveplayer.h"
      5          #include "waverecorder.h"
      6          #include "stm32f7xx_hal_usart.h"
      7          #include "pdm_filter.h"
      8          #include "arm_math.h"
      9          #include <stdio.h>
     10          
     11          
     12          /* Private typedef -----------------------------------------------------------*/
     13          /* Private define ------------------------------------------------------------*/
     14          /* Private macro -------------------------------------------------------------*/
     15          
     16          
     17          /* EXTERN VARIABLES ----------------------------------------------------------*/
     18          //extern __IO AUDIO_IN_BufferTypeDef Buffer1, Buffer2, BufferCtlRecIn;
     19          //AUDIO_IN_BufferTypeDef Buffer3;
     20          
     21          
     22          
     23          
     24          extern Mic_Array_Data Buffer1,Buffer2,Buffer3;
     25          
     26          extern __IO uint8_t XferCplt;
     27          extern __IO AUDIO_IN_BufferTypeDef BufferCtlRecIn;
     28          extern DMA_HandleTypeDef     DmaHandle;
     29          
     30          extern SAI_HandleTypeDef         haudio_out_sai;
     31          extern uint8_t WaveRecord_flgIni;
     32          extern uint32_t EnergySound;
     33          extern I2C_HandleTypeDef hi2c2;
     34          extern __IO uint16_t cntStrt;
     35          extern __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
     36          extern __IO   uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
     37          extern USBD_AUDIO_ItfTypeDef  USBD_AUDIO_fops;
     38          /* GLOBAL VARIABLE -----------------------------------------------------------*/

   \                                 In section .bss, align 4
     39          USBH_HandleTypeDef hUSBHost;
   \                     hUSBHost:
   \   00000000                      DS8 696
     40          USBD_HandleTypeDef hUSBDDevice;

   \                                 In section .bss, align 1
     41          AUDIO_ApplicationTypeDef appli_state = APPLICATION_IDLE;//APPLICATION_IDLE
   \                     appli_state:
   \   00000000                      DS8 1
     42          

   \                                 In section .bss, align 4
     43          UART_HandleTypeDef huart3;
   \                     huart3:
   \   00000000                      DS8 112

   \                                 In section .bss, align 4
     44          SPI_HandleTypeDef hspi4;
   \                     hspi4:
   \   00000000                      DS8 100
     45          GPIO_InitTypeDef GPIO_INS;
     46          Mic_Array_Coef_f FacMic;
     47          	  
     48          uint8_t  pI2CData[20]= {0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190};

   \                                 In section .bss, align 4
     49          uint8_t  pI2CRx[10];
   \                     pI2CRx:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     50          uint16_t BufferTest[2*AUDIO_OUT_BUFFER_SIZE];
   \                     BufferTest:
   \   00000000                      DS8 4096
     51          uint16_t bufferSum[AUDIO_OUT_BUFFER_SIZE];
     52          
     53          __IO uint16_t  WaveRec_idxSens4,WaveRec_idxSens3,I2S2_idxTmp;
     54          __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     55          __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     56          __IO uint16_t  idxSPI5DataBuf3;

   \                                 In section .bss, align 2
     57          __IO uint16_t  cntRisingEXTI;
   \                     cntRisingEXTI:
   \   00000000                      DS8 2
     58          __IO uint8_t   btnSW1,btnSW2;
     59          __IO uint8_t   flgDlyUpd; 
     60          __IO uint8_t   cntBtnPress;
     61          
     62          /* Buffer used for reception */

   \                                 In section .bss, align 4
     63          uint8_t aRxBuffer[1024];
   \                     aRxBuffer:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 1
     64          uint8_t idxDec,stFrstFrmStore;
   \                     idxDec:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     65          int16_t DeltaBuf1,DeltaBuf1Old;
   \                     DeltaBuf1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     DeltaBuf1Old:
   \   00000000                      DS8 2
     66          int16_t idxLatency13,idxLatency12,idxLatency14,idxLatency25,idxLatency63,idxLatency78;
     67          
     68          __IO char flg10ms;

   \                                 In section .bss, align 1
     69          uint8_t flgSTAIni;
   \                     flgSTAIni:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     GPIO_INS:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     FacMic:
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     btnSW1:
   \   0000002C   0x00               DC8 0
   \                     btnSW2:
   \   0000002D   0x00               DC8 0
   \                     flgDlyUpd:
   \   0000002E   0x00               DC8 0
   \                     cntBtnPress:
   \   0000002F   0x00               DC8 0
   \                     stFrstFrmStore:
   \   00000030   0x00               DC8 0
   \                     flg10ms:
   \   00000031   0x00               DC8 0
     70          uint16_t cntTime200;
     71          
     72          uint8_t buffer_switch = 1;
   \                     buffer_switch:
   \   00000032   0x01               DC8 1
     73          uint8_t Command_index=1;
   \                     Command_index:
   \   00000033   0x01               DC8 1
   \                     WaveRec_idxSens4:
   \   00000034   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens3:
   \   00000036   0x00 0x00          DC8 0, 0
   \                     I2S2_idxTmp:
   \   00000038   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens1:
   \   0000003A   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens2:
   \   0000003C   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens5:
   \   0000003E   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens6:
   \   00000040   0x00 0x00          DC8 0, 0
   \                     idxSPI5DataBuf3:
   \   00000042   0x00 0x00          DC8 0, 0
   \                     idxLatency13:
   \   00000044   0x00 0x00          DC8 0, 0
   \                     idxLatency12:
   \   00000046   0x00 0x00          DC8 0, 0
   \                     idxLatency14:
   \   00000048   0x00 0x00          DC8 0, 0
   \                     idxLatency25:
   \   0000004A   0x00 0x00          DC8 0, 0
   \                     idxLatency63:
   \   0000004C   0x00 0x00          DC8 0, 0
   \                     idxLatency78:
   \   0000004E   0x00 0x00          DC8 0, 0
   \                     cntTime200:
   \   00000050   0x00 0x00          DC8 0, 0
   \   00000052   0x00 0x00          DC8 0, 0
   \                     bufferSum:
   \   00000054   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000064   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000074   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000084   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000094   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000104   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000114   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000124   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000134   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000144   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000154   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000164   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000174   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000184   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000194   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000204   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000214   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000224   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000234   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000244   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000254   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000264   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000274   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000284   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000294   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000304   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000314   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000324   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000334   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000344   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000354   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000364   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000374   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000384   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000394   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000404   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000414   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000424   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000434   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000444   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000454   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000464   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000474   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000484   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000494   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000504   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000514   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000524   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000534   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000544   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000554   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000564   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000574   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000584   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000594   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000604   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000614   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000624   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000634   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000644   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000654   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000664   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000674   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000684   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000694   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000704   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000714   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000724   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000734   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000744   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000754   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000764   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000774   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000784   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000794   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000804   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000814   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000824   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000834   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000844   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     hUSBDDevice:
   \   00000854   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000864   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000874   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000884   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000894   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000904   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000914   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000924   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000934   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000944   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000954   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000964   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000974   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000984   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000994   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A04   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A14   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A24   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A34   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A44   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A54   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A64   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     pI2CData:
   \   00000000   0x00 0x0A          DC8 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150
   \              0x14 0x1E    
   \              0x28 0x32    
   \              0x3C 0x46    
   \              0x50 0x5A    
   \              0x64 0x6E    
   \              0x78 0x82    
   \              0x8C 0x96    
   \   00000010   0xA0 0xAA          DC8 160, 170, 180, 190
   \              0xB4 0xBE    
     74          
     75          #if MAIN_CRSCORR
     76          arm_rfft_instance_q15 RealFFT_Ins, RealIFFT_Ins;
     77          #endif
     78          

   \                                 In section .bss, align 4
     79          arm_cfft_radix4_instance_f32 SS1,SS2,SS3,SS4,ISS; 
   \                     SS1:
   \   00000000                      DS8 20
   \                     SS2:
   \   00000014                      DS8 20
   \                     SS3:
   \   00000028                      DS8 20
   \                     SS4:
   \   0000003C                      DS8 20
   \                     ISS:
   \   00000050                      DS8 20
     80          arm_rfft_instance_f32 S1,S2,S3,S4,IS;
   \                     `S1`:
   \   00000064                      DS8 24
   \                     `S2`:
   \   0000007C                      DS8 24
   \                     `S3`:
   \   00000094                      DS8 24
   \                     `S4`:
   \   000000AC                      DS8 24
   \                     IS:
   \   000000C4                      DS8 24
     81          
     82          //arm_rfft_fast_instance_f32 S1,S2,S3,S4,IS;
     83          
     84          
     85          #if (DEBUG)
     86          uint8_t  pUARTBuf[128];
     87          uint32_t Main_CoefMor;
     88          uint8_t stDir,flgS2,flgS3,flgS4,flgS2Flt,flgS3Flt,flgS4Flt;
     89          uint8_t flgS2Ins,flgS3Ins,flgS4Ins;
     90          #endif
     91          
     92          /* Private function prototypes -----------------------------------------------*/
     93          static void SystemClock_Config(void);
     94          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id);
     95          static void CPU_CACHE_Enable(void);
     96          
     97          
     98          
     99          
    100          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c);
    101          void MX_I2C2_Init(void);
    102          void USART3_Init(void);
    103          void ReadSTASeq(uint8_t Addr, uint8_t *pBufOut,uint8_t Len );
    104          void WriteSTAByte(uint8_t Addr, uint8_t *pBufIn, uint8_t len);
    105          void SPI5_CallBack(SPI_HandleTypeDef *hspi);
    106          
    107          
    108          
    109          /*--------------INLINE FUNCTION-----------------------------------------------*/
    110          

   \                                 In section .text, align 2, keep-with-next
    111          inline static void FFT_Update(void)
    112          {
   \                     FFT_Update: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable13
    113          
    114                PDM2PCMSDO78();
   \   00000008   0x.... 0x....      BL       PDM2PCMSDO78
    115                /* Hafl buffer is filled in by I2S data stream in */
    116                if((flgDlyUpd==0))
   \   0000000C   0xF894 0x002E      LDRB     R0,[R4, #+46]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD149             BNE.N    ??FFT_Update_0
    117                {
    118                      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15); 
    119                      FactorUpd(&FacMic); 
   \   00000014   0xF104 0x0014      ADD      R0,R4,#+20
   \   00000018   0x.... 0x....      BL       FactorUpd
    120                      //STM_EVAL_LEDOn(LED3);
    121                      flgDlyUpd = 1; 
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xF884 0x002E      STRB     R0,[R4, #+46]
    122          /*-------------------------------------------------------------------------------------------------------------
    123          			  
    124          	Sequence  Record Data                     Processing Data                 Player Data
    125          			  
    126          	1-------  Buffer1                         Buffer2                         Buffer3
    127          			  
    128          	2-------  Buffer3                         Buffer1                         Buffer2		  
    129          			  
    130          	3-------  Buffer2                         Buffer3                         Buffer1 
    131           ---------------------------------------------------------------------------------------------------------------*/
    132                      /* Processing Data */
    133          			switch (buffer_switch)
   \   00000022   0xF894 0x0032      LDRB     R0,[R4, #+50]
   \   00000026   0xB120             CBZ.N    R0,??FFT_Update_1
   \   00000028   0x2802             CMP      R0,#+2
   \   0000002A   0xD008             BEQ.N    ??FFT_Update_2
   \   0000002C   0xD304             BCC.N    ??FFT_Update_3
    134          			{             
    135          			    case BUF1_PLAY:
    136          #if MAIN_CRSCORR
    137          					for (uint16_t i=0; i<(_MAX_SS/_MAX_SS);i++)
    138          					{
    139          					    //uint16_t i=0;
    140          						arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3[i*128],    (q15_t *)&bufferFFT[i*256]);
    141          						arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3_1[i*128],   (q15_t *)&bufferFFT_1[i*256]);
    142          					
    143          						arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],2*128);
    144          					
    145          						//for (uint16_t j=0; j<256;j++)
    146          						//{
    147          						//	  bufferFFTSum[i*256+j]<<=6;
    148          						//}
    149          						
    150          						arm_rfft_q15(&RealIFFT_Ins,    (q15_t *)&bufferFFTSum[i*256],    (q15_t *)&bufferSum[i*128]);
    151          					}
    152          #elif MAIN_FFT
    153                              /* Summing in Buffer3 */
    154                              Delay_Sum_FFT(&Buffer3,&FacMic,(int16_t *)bufferSum, 512);
    155          			 	   //FFT_SUM((int16_t *)buffer3, (int16_t * )buffer3_1,fbuffer, 1024);	
    156          			 	   
    157          
    158          #else
    159          
    160                              //idxLatency13 = CrssCor(Buffer3.bufMIC1, Buffer3.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2);
    161                              //idxLatency12 = CrssCor(Buffer3.bufMIC1, Buffer3.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    162          
    163          					idxLatency78 = CrssCor(Buffer3.bufMIC7, Buffer3.bufMIC8, AUDIO_OUT_BUFFER_SIZE);
    164                              idxLatency14 = CrssCor(Buffer3.bufMIC1, Buffer3.bufMIC4, AUDIO_OUT_BUFFER_SIZE);
    165          					idxLatency25 = CrssCor(Buffer3.bufMIC2, Buffer3.bufMIC5, AUDIO_OUT_BUFFER_SIZE);
    166          					idxLatency63 = CrssCor(Buffer3.bufMIC6, Buffer3.bufMIC3, AUDIO_OUT_BUFFER_SIZE);
    167          
    168          
    169                              SumDelay(&Buffer3);
    170          #endif
    171          					
    172          					break;
    173          				case BUF2_PLAY:
    174          
    175          #if MAIN_CRSCORR
    176                               for (uint16_t i=0; i<(_MAX_SS/128);i++)
    177                               { 
    178                                   //uint16_t i=0;
    179          				         arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1[i*128],(q15_t *)&bufferFFT[i*256]);
    180          	           		     arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    181          
    182          						 arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],
    183          						 	          2*128);
    184          
    185          						 //for (uint16_t j=0; j<256;j++)
    186          						 //{
    187          						//	   bufferFFTSum[i*256+j]<<=6;
    188          						 //}
    189          
    190          						 
    191          	                     arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    192                               }
    193          #elif MAIN_FFT
    194          					/* Summing in Buffer1 */	 
    195          					Delay_Sum_FFT(&Buffer1, &FacMic,(int16_t * )bufferSum,512);
    196          					//FFT_SUM((int16_t *)buffer1, (int16_t * )buffer1_1,fbuffer, 1024);
    197          
    198          #else
    199                          
    200                            //idxLatency13 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    201                            //idxLatency12 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    202          		
    203                            idxLatency78 = CrssCor(Buffer1.bufMIC7, Buffer1.bufMIC8, AUDIO_OUT_BUFFER_SIZE);	
    204                            idxLatency14 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC4, AUDIO_OUT_BUFFER_SIZE);
    205                            idxLatency25 = CrssCor(Buffer1.bufMIC2, Buffer1.bufMIC5, AUDIO_OUT_BUFFER_SIZE);
    206                            idxLatency63 = CrssCor(Buffer1.bufMIC6, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE);
    207          
    208          
    209          
    210                            SumDelay(&Buffer1);
    211          #endif
    212          					break;
    213          					
    214          				case BUF3_PLAY:
    215          #if MAIN_CRSCORR
    216          					for (uint16_t i=0; i<(_MAX_SS/128);i++)
    217          					{
    218          						
    219          						arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2[i*128],(q15_t *)&bufferFFT[i*256]);
    220          						arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    221          					
    222          						arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],	(q15_t *)&bufferFFTSum[i*256],
    223          									 2*128);
    224          					
    225          						//for (uint16_t j=0; j<256;j++)
    226          						//{
    227          					    //   bufferFFTSum[i*256+j]<<=6;
    228          					    //}
    229          					
    230          						
    231          						arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    232          					}
    233          
    234          #elif MAIN_FFT
    235          					/* Summing in Buffer2 */
    236                                                  Delay_Sum_FFT(&Buffer2,&FacMic, (int16_t * )bufferSum, 512);
    237                                                 //FFT_SUM((int16_t *)buffer2, (int16_t * )buffer2_1,fbuffer, 1024);
    238          
    239          					
    240          #else
    241          
    242          					//idxLatency13 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    243                              //idxLatency12 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    244          
    245          					idxLatency78 = CrssCor(Buffer2.bufMIC7, Buffer2.bufMIC8, AUDIO_OUT_BUFFER_SIZE);
    246          					idxLatency14 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC4, AUDIO_OUT_BUFFER_SIZE);
    247          					idxLatency25 = CrssCor(Buffer2.bufMIC2, Buffer2.bufMIC5, AUDIO_OUT_BUFFER_SIZE);
    248          					idxLatency63 = CrssCor(Buffer2.bufMIC6, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE);
    249          
    250                               SumDelay(&Buffer2);
    251          #endif
    252          					break;
    253          					
    254          				default:
    255          					break;
    256                         
    257          			}
    258          	       //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
    259          	  }
    260          	  
    261          
    262          }
   \   0000002E   0xB001             ADD      SP,SP,#+4
   \   00000030   0xBD30             POP      {R4,R5,PC}
   \                     ??FFT_Update_1: (+1)
   \   00000032   0x.... 0x....      LDR.W    R5,??DataTable13_1
   \   00000036   0xE004             B.N      ??FFT_Update_4
   \                     ??FFT_Update_3: (+1)
   \   00000038   0x.... 0x....      LDR.W    R5,??DataTable13_2
   \   0000003C   0xE001             B.N      ??FFT_Update_4
   \                     ??FFT_Update_2: (+1)
   \   0000003E   0x.... 0x....      LDR.W    R5,??DataTable13_3
   \                     ??FFT_Update_4: (+1)
   \   00000042   0xF505 0x41E0      ADD      R1,R5,#+28672
   \   00000046   0xF505 0x40C0      ADD      R0,R5,#+24576
   \   0000004A   0xF44F 0x6280      MOV      R2,#+1024
   \   0000004E   0x318C             ADDS     R1,R1,#+140
   \   00000050   0x3078             ADDS     R0,R0,#+120
   \   00000052   0x.... 0x....      BL       CrssCor
   \   00000056   0xF8A4 0x004E      STRH     R0,[R4, #+78]
   \   0000005A   0xF505 0x5140      ADD      R1,R5,#+12288
   \   0000005E   0xF44F 0x6280      MOV      R2,#+1024
   \   00000062   0x313C             ADDS     R1,R1,#+60
   \   00000064   0x4628             MOV      R0,R5
   \   00000066   0x.... 0x....      BL       CrssCor
   \   0000006A   0xF8A4 0x0048      STRH     R0,[R4, #+72]
   \   0000006E   0xF505 0x4180      ADD      R1,R5,#+16384
   \   00000072   0xF505 0x5080      ADD      R0,R5,#+4096
   \   00000076   0xF44F 0x6280      MOV      R2,#+1024
   \   0000007A   0x3150             ADDS     R1,R1,#+80
   \   0000007C   0x3014             ADDS     R0,R0,#+20
   \   0000007E   0x.... 0x....      BL       CrssCor
   \   00000082   0xF8A4 0x004A      STRH     R0,[R4, #+74]
   \   00000086   0xF505 0x5100      ADD      R1,R5,#+8192
   \   0000008A   0xF505 0x40A0      ADD      R0,R5,#+20480
   \   0000008E   0xF44F 0x6280      MOV      R2,#+1024
   \   00000092   0x3128             ADDS     R1,R1,#+40
   \   00000094   0x3064             ADDS     R0,R0,#+100
   \   00000096   0x.... 0x....      BL       CrssCor
   \   0000009A   0xF8A4 0x004C      STRH     R0,[R4, #+76]
   \   0000009E   0x4628             MOV      R0,R5
   \   000000A0   0xB001             ADD      SP,SP,#+4
   \   000000A2   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   000000A6   0x....             B.N      SumDelay
   \                     ??FFT_Update_0: (+1)
   \   000000A8   0xB001             ADD      SP,SP,#+4
   \   000000AA   0xBD30             POP      {R4,R5,PC}       ;; return
    263          
    264          
    265          inline static void Audio_Play_Out(void)
    266          {
    267            /* wait for DMA transfert complete	                                      */
    268            /* This flag is set to 1 in callback function of DMA interrupt              */
    269            /* if player is finished for curent buffer */ 
    270            if (XferCplt == 1)
    271            {
    272                 RESET_IDX
    273                 XferCplt = 0; // clear DMA interrupt flag
    274          #if USB_STREAMING
    275                 //AudioProcess();
    276          #endif
    277          /*-------------------------------------------------------------------------------------------------------------
    278          			  
    279          	Sequence  Record Data                     Processing Data                 Player Data
    280          			  
    281          	1-------  Buffer1                         Buffer2                          Buffer3
    282          			  
    283          	2-------  Buffer3                         Buffer1                           Buffer2		  
    284          			  
    285          	3-------  Buffer2                         Buffer3                           Buffer1 
    286           ---------------------------------------------------------------------------------------------------------------*/
    287              switch (buffer_switch)
    288              {
    289                case BUF1_PLAY:
    290                  /* Play data from buffer1 */
    291          	 Audio_MAL_Play(Command_index? (uint32_t)Buffer3.bufMIC1:(uint32_t)Buffer3.bufMIC2 , 4*AUDIO_OUT_BUFFER_SIZE);
    292          		/* set flag for switch buffer */		  
    293                  buffer_switch = BUF3_PLAY;
    294          
    295                  break;
    296                case BUF2_PLAY:
    297                  /* Play data from buffer2 */
    298          	Audio_MAL_Play(Command_index? (uint32_t)Buffer1.bufMIC1:(uint32_t)Buffer1.bufMIC2, 4*AUDIO_OUT_BUFFER_SIZE);
    299          	/* set flag for switch buffer */
    300                  buffer_switch = BUF1_PLAY;
    301                  
    302                  break;
    303                case BUF3_PLAY:
    304                  /* Play data from buffer1 */
    305                  Audio_MAL_Play(Command_index? (uint32_t)Buffer2.bufMIC1:(uint32_t)Buffer2.bufMIC2 ,4*AUDIO_OUT_BUFFER_SIZE);
    306                  /* set flag for switch buffer */		  
    307                  buffer_switch = BUF2_PLAY;
    308          
    309                  break;
    310                default:
    311                  break;
    312              }
    313          			   
    314            }
    315          }
    316          
    317          
    318          /* Private functions ---------------------------------------------------------*/
    319          
    320          /**
    321            * @brief  Main program
    322            * @param  None
    323            * @retval None
    324            */

   \                                 In section .text, align 4, keep-with-next
    325          int main(void)
    326          {
   \                     main: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB0A3             SUB      SP,SP,#+140
    327            /* Enable the CPU Cache */
    328            CPU_CACHE_Enable();
   \   00000006   0xF3BF 0x8F4F      DSB      
   \   0000000A   0xF3BF 0x8F6F      ISB      
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable13_4  ;; 0xe000ed14
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xF8C0 0x123C      STR      R1,[R0, #+572]
   \   00000018   0x6801             LDR      R1,[R0, #+0]
   \   0000001A   0xF441 0x3100      ORR      R1,R1,#0x20000
   \   0000001E   0x6001             STR      R1,[R0, #+0]
   \   00000020   0xF3BF 0x8F4F      DSB      
   \   00000024   0xF3BF 0x8F6F      ISB      
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x6701             STR      R1,[R0, #+112]
   \   0000002C   0xF3BF 0x8F4F      DSB      
   \   00000030   0xF8D0 0x106C      LDR.W    R1,[R0, #+108]
   \   00000034   0xF3C1 0x324E      UBFX     R2,R1,#+13,#+15
   \                     ??main_0: (+1)
   \   00000038   0xF643 0x74E0      MOVW     R4,#+16352
   \   0000003C   0xF3C1 0x03C9      UBFX     R3,R1,#+3,#+10
   \   00000040   0xEA04 0x1442      AND      R4,R4,R2, LSL #+5
   \                     ??main_1: (+1)
   \   00000044   0xEA44 0x7583      ORR      R5,R4,R3, LSL #+30
   \   00000048   0xF8C0 0x524C      STR      R5,[R0, #+588]
   \   0000004C   0x461D             MOV      R5,R3
   \   0000004E   0x1E6B             SUBS     R3,R5,#+1
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xD1F7             BNE.N    ??main_1
   \   00000054   0x4613             MOV      R3,R2
   \   00000056   0x1E5A             SUBS     R2,R3,#+1
   \   00000058   0x2B00             CMP      R3,#+0
   \   0000005A   0xD1ED             BNE.N    ??main_0
   \   0000005C   0xF3BF 0x8F4F      DSB      
   \   00000060   0x6801             LDR      R1,[R0, #+0]
   \   00000062   0xF441 0x3180      ORR      R1,R1,#0x10000
   \   00000066   0x6001             STR      R1,[R0, #+0]
   \   00000068   0xF3BF 0x8F4F      DSB      
   \   0000006C   0xF3BF 0x8F6F      ISB      
    329            
    330            /* STM32F7xx HAL library initialization:
    331                 - Configure the Flash ART accelerator on ITCM interface
    332                 - Configure the Systick to generate an interrupt each 1 msec
    333                 - Set NVIC Group Priority to 4
    334                 - Global MSP (MCU Support Package) initialization
    335               */   
    336            HAL_Init();
   \   00000070   0x.... 0x....      BL       HAL_Init
    337            
    338            /* Configure the system clock to 216 MHz */
    339            //Test_SystemClock_Config(); 
    340            SystemClock_Config();
   \   00000074   0x.... 0x....      BL       SystemClock_Config
    341            BSP_AUDIO_OUT_ClockConfig(AUDIO_FREQ, NULL);
   \   00000078   0xA801             ADD      R0,SP,#+4
   \   0000007A   0x.... 0x....      LDR.W    R5,??DataTable13_5  ;; 0x40023830
   \   0000007E   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
   \   00000082   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000086   0x.... 0x....      LDR.W    R4,??DataTable13
   \   0000008A   0x9001             STR      R0,[SP, #+4]
   \   0000008C   0xF44F 0x0080      MOV      R0,#+4194304
   \   00000090   0x9011             STR      R0,[SP, #+68]
   \   00000092   0xF44F 0x70AC      MOV      R0,#+344
   \   00000096   0x9002             STR      R0,[SP, #+8]
   \   00000098   0x2007             MOVS     R0,#+7
   \   0000009A   0x9004             STR      R0,[SP, #+16]
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x900A             STR      R0,[SP, #+40]
   \   000000A0   0xA801             ADD      R0,SP,#+4
   \   000000A2   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    342            
    343            /* Initialize the SDRAM */
    344            BSP_SDRAM_Init();
   \   000000A6   0x.... 0x....      BL       BSP_SDRAM_Init
    345          
    346            BSP_LED_Init(LED1);
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x.... 0x....      LDR.W    R8,??DataTable13_6
   \   000000B0   0x.... 0x....      BL       BSP_LED_Init
    347            BSP_LED_Init(LED2);
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0x.... 0x....      LDR.W    R7,??DataTable13_7
   \   000000BA   0x.... 0x....      BL       BSP_LED_Init
    348          
    349            /* Button Initialization */
    350            ButtonInit();
   \   000000BE   0x.... 0x....      BL       ButtonInit
    351            //BSP_PB_Init(BUTTON_KEY,BUTTON_MODE_EXTI);
    352          
    353            
    354            /* Init TS module */
    355            //BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
    356             DFT_Init();	
   \   000000C2   0x.... 0x....      BL       DFT_Init
    357          
    358              /* ---------PA4: LCCKO-------------*/
    359              __GPIOA_CLK_ENABLE();
   \   000000C6   0x6828             LDR      R0,[R5, #+0]
    360              GPIO_INS.Pin = GPIO_PIN_4;
    361              GPIO_INS.Mode =GPIO_MODE_IT_RISING;
    362              GPIO_INS.Pull =GPIO_NOPULL;
    363              GPIO_INS.Speed =GPIO_SPEED_HIGH;
    364              HAL_GPIO_Init(GPIOA,&GPIO_INS);
   \   000000C8   0x4621             MOV      R1,R4
   \   000000CA   0x.... 0x....      LDR.W    R6,??DataTable13_8
   \   000000CE   0xF240 0x79FF      MOVW     R9,#+2047
   \   000000D2   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000000D6   0x6028             STR      R0,[R5, #+0]
   \   000000D8   0x6828             LDR      R0,[R5, #+0]
   \   000000DA   0xF000 0x0001      AND      R0,R0,#0x1
   \   000000DE   0x9000             STR      R0,[SP, #+0]
   \   000000E0   0x9800             LDR      R0,[SP, #+0]
   \   000000E2   0x2010             MOVS     R0,#+16
   \   000000E4   0x6020             STR      R0,[R4, #+0]
   \   000000E6   0x.... 0x....      LDR.W    R0,??DataTable13_9  ;; 0x10110000
   \   000000EA   0x6060             STR      R0,[R4, #+4]
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0x60A0             STR      R0,[R4, #+8]
   \   000000F0   0x2003             MOVS     R0,#+3
   \   000000F2   0x60E0             STR      R0,[R4, #+12]
   \   000000F4   0x.... 0x....      LDR.W    R0,??DataTable13_10  ;; 0x40020000
   \   000000F8   0x.... 0x....      BL       HAL_GPIO_Init
    365          
    366              /* Enable and set Button EXTI Interrupt to the lowest priority */
    367              HAL_NVIC_SetPriority((IRQn_Type)EXTI4_IRQn, INTERRUPT_PRI_EXT_LRCK, 0);
   \   000000FC   0x2200             MOVS     R2,#+0
   \   000000FE   0x2106             MOVS     R1,#+6
   \   00000100   0x200A             MOVS     R0,#+10
   \   00000102   0x.... 0x....      BL       HAL_NVIC_SetPriority
    368              HAL_NVIC_EnableIRQ((IRQn_Type)EXTI4_IRQn);
   \   00000106   0x200A             MOVS     R0,#+10
   \   00000108   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    369              /*-----------------------*/
    370          
    371              /*---------PE3: POWER DOWN-----------------*/
    372              __GPIOE_CLK_ENABLE();
   \   0000010C   0x6828             LDR      R0,[R5, #+0]
    373              GPIO_INS.Pin = GPIO_PIN_3;
    374              GPIO_INS.Mode = GPIO_MODE_OUTPUT_PP;
    375              GPIO_INS.Pull = GPIO_PULLUP;
    376              GPIO_INS.Speed = GPIO_SPEED_HIGH;
    377          
    378              HAL_GPIO_Init(GPIOE, &GPIO_INS);
   \   0000010E   0x4621             MOV      R1,R4
   \   00000110   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000114   0x6028             STR      R0,[R5, #+0]
   \   00000116   0x6828             LDR      R0,[R5, #+0]
   \   00000118   0x.... 0x....      LDR.W    R5,??DataTable13_11  ;; 0x40021000
   \   0000011C   0xF000 0x0010      AND      R0,R0,#0x10
   \   00000120   0x9000             STR      R0,[SP, #+0]
   \   00000122   0x9800             LDR      R0,[SP, #+0]
   \   00000124   0x2008             MOVS     R0,#+8
   \   00000126   0x6020             STR      R0,[R4, #+0]
   \   00000128   0x2001             MOVS     R0,#+1
   \   0000012A   0x6060             STR      R0,[R4, #+4]
   \   0000012C   0x60A0             STR      R0,[R4, #+8]
   \   0000012E   0x2003             MOVS     R0,#+3
   \   00000130   0x60E0             STR      R0,[R4, #+12]
   \   00000132   0x4628             MOV      R0,R5
   \   00000134   0x.... 0x....      BL       HAL_GPIO_Init
    379            
    380              HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
   \   00000138   0x2200             MOVS     R2,#+0
   \   0000013A   0x2108             MOVS     R1,#+8
   \   0000013C   0x4628             MOV      R0,R5
   \   0000013E   0x.... 0x....      LDR.W    R5,??DataTable13_12
   \   00000142   0x.... 0x....      BL       HAL_GPIO_WritePin
    381          
    382              /*----------------------------------------*/
    383          
    384          #if (DEBUG)  
    385              /* UART for debug */
    386              USART3_Init();
    387          #endif
    388          
    389          					  
    390          
    391              /*----------------------------------------*/
    392              MX_I2C2_Init(); //for STA321MP
   \   00000146   0x.... 0x....      BL       MX_I2C2_Init
    393              STA321MP_Ini();
   \   0000014A   0x.... 0x....      BL       STA321MP_Ini
    394              BSP_LED_Toggle(LED1);
   \   0000014E   0x2000             MOVS     R0,#+0
   \   00000150   0x.... 0x....      BL       BSP_LED_Toggle
    395              /* Init Audio Application */
    396          #ifdef CS43L22_PLAY
    397              AUDIO_InitApplication();
    398          #endif
    399              BSP_LED_Toggle(LED2);
   \   00000154   0x2001             MOVS     R0,#+1
   \   00000156   0x.... 0x....      BL       BSP_LED_Toggle
    400          
    401              buffer_switch = BUF3_PLAY;		 /* record data to buffer1 */
   \   0000015A   0x2002             MOVS     R0,#+2
   \   0000015C   0xF884 0x0032      STRB     R0,[R4, #+50]
    402              MIC1TO6_Init();
   \   00000160   0x.... 0x....      BL       MIC1TO6_Init
    403          	                  
    404          
    405          #if (USB_STREAMING)	
    406          	/* Initialize USB descriptor basing on channels number and sampling frequency */
    407          	USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, AUDIO_SAMPLING_FREQUENCY, AUDIO_CHANNELS);
   \   00000164   0x2202             MOVS     R2,#+2
   \   00000166   0xF44F 0x517A      MOV      R1,#+16000
   \   0000016A   0xF604 0x0054      ADDW     R0,R4,#+2132
   \   0000016E   0x.... 0x....      BL       USBD_AUDIO_Init_Microphone_Descriptor
    408          	/* Init Device Library */
    409          	USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
   \   00000172   0x2200             MOVS     R2,#+0
   \   00000174   0x.... 0x....      LDR.W    R1,??DataTable13_13
   \   00000178   0xF604 0x0054      ADDW     R0,R4,#+2132
   \   0000017C   0x.... 0x....      BL       USBD_Init
    410          	/* Add Supported Class */
    411          	USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
   \   00000180   0x.... 0x....      LDR.W    R1,??DataTable13_14
   \   00000184   0xF604 0x0054      ADDW     R0,R4,#+2132
   \   00000188   0x.... 0x....      BL       USBD_RegisterClass
    412          	/* Add Interface callbacks for AUDIO Class */  
    413          	USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
   \   0000018C   0x.... 0x....      LDR.W    R1,??DataTable13_15
   \   00000190   0xF604 0x0054      ADDW     R0,R4,#+2132
   \   00000194   0x.... 0x....      BL       USBD_AUDIO_RegisterInterface
    414          	/* Start Device Process */
    415          	USBD_Start(&hUSBDDevice);
   \   00000198   0xF604 0x0054      ADDW     R0,R4,#+2132
   \   0000019C   0x.... 0x....      BL       USBD_Start
   \   000001A0   0xE017             B.N      ??main_2
    416          
    417          	/* Init Host Library */
    418          	//test GIT //USBH_Init(&hUSBHost, USBH_UserProcess, 0);
    419          
    420          	/* Add Supported Class */
    421          	//test GIT //USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
    422          	
    423          	/* Start Host Process */
    424          	//test GIT //USBH_Start(&hUSBHost); 					  
    425          #endif 
    426          
    427              while (1)
    428              {
    429          		/* there is data in the buffer */  
    430          		if((WaveRec_idxSens1>=(2*AUDIO_OUT_BUFFER_SIZE-1))&&(stFrstFrmStore<3))
    431          		{
    432          		    RESET_IDX
    433          			/* this is just run 1 time after 1st frame of I2S data full */
    434          			if ((stFrstFrmStore<3))
    435          			{
    436          				stFrstFrmStore++;
    437          			#ifdef CS43L22_PLAY
    438          			    buffer_switch = BUF2_PLAY; /* record data to buffer3 */
    439          			#endif
    440          				if (stFrstFrmStore==2)
    441          				{
    442          				    StartRecMic7_8();
    443          			#ifdef CS43L22_PLAY
    444          					/*------------------------PLAYER------------------------------------------*/
    445          					Audio_MAL_Play((uint32_t)Buffer1.bufMIC1,4*AUDIO_OUT_BUFFER_SIZE);
    446          					/*------------------------------------------------------------------------*/				
    447          					buffer_switch = BUF1_PLAY;
    448          			#endif
    449          			}				
    450          			
    451          			}
    452          		
    453          		}
    454          
    455                           /* This calculation happens once time in power cycles */
    456                           /* After 5 times of full frame recieved interrupt */
    457                           if (cntStrt==10)
    458          		       {
    459          			   if ((WaveRecord_flgIni<200))
    460          			   {
    461          				  for(char i=0;i<16;i++)
    462          				  {
    463                                                //if (ValBit(SPI1_stNipple,i)!=0) 
    464                                                //{
    465                                                //	 I2S1_stPosShft = 0;//MAX(I2S1_stPosShft,i+1);
    466                                                // }
    467          
    468                                                //if (ValBit(I2S2_stNipple,i)!=0) 
    469                                                //{
    470                                                //   I2S2_stPosShft = 0;//MAX(I2S2_stPosShft,i+1);
    471                                                //}
    472          
    473                                                if (ValBit(SPI4_stNipple,i)!=0) 
    474                                                {
    475                                                   SPI4_stPosShft = MAX(SPI4_stPosShft,i+1);
    476                                                }
    477          				  }
    478          					
    479          			   }
    480                                     else if (WaveRecord_flgIni<255)
   \                     ??main_3: (+1)
   \   000001A2   0x29FF             CMP      R1,#+255
   \   000001A4   0xBF1C             ITT      NE 
   \   000001A6   0x1C48             ADDNE    R0,R1,#+1
   \   000001A8   0x7038             STRBNE   R0,[R7, #+0]
    481                                     {
    482                                         WaveRecord_flgIni++;
    483                                     }
    484          			   else
    485          			   {
    486          
    487          			   }
    488          					   
    489          		 }
    490          	
    491          		/* USB Host Background task */
    492          		//USBH_Process(&hUSBHost);
    493          
    494          		/* AUDIO Menu Process */
    495          		//AUDIO_MenuProcess();
    496          		
    497          		FFT_Update(); 
   \                     ??main_4: (+1)
   \   000001AA   0x.... 0x....      BL       FFT_Update
    498          
    499          		if (flg10ms==1)
   \   000001AE   0xF894 0x0031      LDRB     R0,[R4, #+49]
   \   000001B2   0x2801             CMP      R0,#+1
   \   000001B4   0xD10D             BNE.N    ??main_2
    500          		{
    501          		    flg10ms=0;		   		      
   \   000001B6   0x2000             MOVS     R0,#+0
   \   000001B8   0xF884 0x0031      STRB     R0,[R4, #+49]
    502          	         cntTime200++;
   \   000001BC   0xF8B4 0x0050      LDRH     R0,[R4, #+80]
   \   000001C0   0x1C40             ADDS     R0,R0,#+1
   \   000001C2   0xF8A4 0x0050      STRH     R0,[R4, #+80]
    503          	         if (cntTime200==40)
   \   000001C6   0xB280             UXTH     R0,R0
   \   000001C8   0x2828             CMP      R0,#+40
   \   000001CA   0xBF04             ITT      EQ 
   \   000001CC   0x2000             MOVEQ    R0,#+0
   \   000001CE   0xF8A4 0x0050      STRHEQ   R0,[R4, #+80]
    504          	         {
    505          	 
    506          #if (DEBUG)
    507          
    508                              //if ((idxLatency14!=0)||(idxLatency25!=0)||(idxLatency36!=0))
    509                              {
    510                                  int16_t test[5];
    511                                  static uint8_t flagNotMin;
    512                                  test[0] = 0;
    513                                  test[1]= idxLatency63;
    514                                  test[2]= idxLatency14;
    515                                  test[3]= idxLatency25;
    516          						test[4]= idxLatency78;
    517          
    518          
    519                                  if (EnergySound<2)
    520                                  {
    521                                          //sprintf((char *)pUARTBuf,"No Speech:%d  \r\n",EnergySound);
    522                                          //HAL_UART_Transmit_IT(&huart3,pUARTBuf,30); 
    523                                  }
    524                                  else
    525                                  {
    526                                       sprintf((char *)pUARTBuf,"%d:%d:%d:%d ",idxLatency63,idxLatency14,idxLatency25,idxLatency78);
    527                                       flagNotMin=0 ;
    528          
    529                                        if (test[3]>0)
    530                                        {
    531                                           if((test[1]<=0)&&(test[4]<=0))
    532                                           {
    533                                                flagNotMin=1 ;
    534                                                sprintf((char *)(pUARTBuf+15),"Close Mic 2\r\n");
    535                                           }
    536                                        }
    537                                        else if (test[3]<-2)
    538                                        {
    539                                            if((test[1]>1)&&(test[4]>1))
    540                                            {
    541                                              flagNotMin=1 ;
    542                                              sprintf((char *)(pUARTBuf+15),"Clsoe Mic 5\r\n");
    543                                            }
    544          
    545                                        }
    546                                        else
    547                                        {
    548                                        }	
    549          							
    550          			    if (test[2]>2)
    551                                	    {
    552                                	       if((test[1]>=-1)&&(test[3]<=-3))
    553                                	       {
    554                                           flagNotMin=1 ;
    555                                           sprintf((char *)(pUARTBuf+15),"Clsoe Mic 4\r\n");
    556                                	       }
    557                                	    }
    558                                      else if (test[2]<=-1)
    559                                      {
    560                                         if((test[1]<=-2)&&(test[3]>=0))
    561                                	       {
    562                                               flagNotMin=1 ;
    563                                               sprintf((char *)(pUARTBuf+15),"Clsoe Mic 1\r\n");
    564                                         }
    565                                      }
    566                                      else
    567                                      {
    568          
    569                                      }
    570          
    571          						   
    572                                      if (test[1]>=0)
    573                                	    {
    574                                	       if((test[2]>1)&&(test[4]<= 0))
    575                                	       {
    576          								 flagNotMin=1 ;
    577          								 sprintf((char *)(pUARTBuf+15),"Clsoe Mic 3\r\n");
    578                                	       }
    579          
    580                                	    }
    581                                      else if (test[1]<=-3)
    582                                      {
    583                                         if((test[2]<=0)&&(test[4]>=2))
    584                                	       {
    585                                             flagNotMin=1 ;
    586                                             sprintf((char *)(pUARTBuf+15),"Clsoe Mic 6\r\n");
    587                                         }
    588          
    589                                      }
    590                                      else
    591                                      {
    592          
    593                                      }
    594          
    595          
    596                                      if ((test[4]<=-1))
    597                                      {
    598                                          if ((test[1]>=-1)&&(test[3]>-0))
    599                                          {
    600                                            sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    601                                            flagNotMin=1 ;
    602                                         	}
    603                                      }
    604                                    else if (test[4]>=3)
    605                                    {
    606                                        if ((test[1]<-1)&&(test[3]<-2))
    607                                       {
    608                                            sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    609                                            flagNotMin=1 ;
    610                                       }
    611          
    612                                    }
    613                                    else
    614                                    {
    615          
    616                                    }
    617          
    618          
    619          			  if (flagNotMin==0) sprintf((char *)(pUARTBuf+15),"----------- \r\n");
    620          									
    621                                    //HAL_UART_Transmit_IT(&huart3,pUARTBuf,15);
    622                                    SrvB_Debound(&flgS2Ins,&flgS2Flt, flgS2,2);
    623                                    SrvB_Debound(&flgS3Ins,&flgS3Flt, flgS3,2);
    624                                    SrvB_Debound(&flgS4Ins,&flgS4Flt, flgS4,2);
    625          
    626                                    stDir = (flgS2Flt<<2)|(flgS3Flt<<1)|(flgS4Flt); 
    627                                     switch (8)
    628                                     {
    629                                         case 0:
    630                                                  sprintf((char *)(pUARTBuf+15),"Direction 0 \r\n");
    631                                                           
    632                                              break;
    633                                         case 1:
    634                                                  sprintf((char *)(pUARTBuf+15),"Direction 1 \r\n");
    635                                                  
    636                                              break;
    637                                         case 2:
    638                                                  sprintf((char *)(pUARTBuf+15),"Direction 2 \r\n");
    639                                                   
    640                                              break;
    641                                                  
    642                                         case 3:
    643                                                  sprintf((char *)(pUARTBuf+15),"Direction 3 \r\n");
    644                                           
    645                                              break;
    646                                         case 4:
    647                                                  sprintf((char *)(pUARTBuf+15),"Direction 4 \r\n");
    648                                                           
    649                                              break;
    650                                          case 5:
    651                                                  sprintf((char *)(pUARTBuf+15),"Direction 5 \r\n");
    652                                                   
    653                                              break;
    654                                          case 6:
    655                                                  sprintf((char *)(pUARTBuf+15),"Direction 6 \r\n");
    656                                           
    657                                              break;
    658                                          case 7:
    659                                                  sprintf((char *)(pUARTBuf+15),"Direction 7 \r\n");
    660                                                   
    661                                              break;
    662                                           default:
    663                                              break;
    664                                     }
    665          
    666                                     HAL_UART_Transmit_IT(&huart3,pUARTBuf,15+15);		
    667                                   }
    668                              }
    669          
    670          #endif
    671          	   	            cntTime200=0;
    672                  } //(cntTime200==40)
    673                }//if (flg10ms==1)	
   \                     ??main_2: (+1)
   \   000001D2   0x8F60             LDRH     R0,[R4, #+58]
   \   000001D4   0x4548             CMP      R0,R9
   \   000001D6   0xDB18             BLT.N    ??main_5
   \   000001D8   0xF894 0x0030      LDRB     R0,[R4, #+48]
   \   000001DC   0x2803             CMP      R0,#+3
   \   000001DE   0xDA14             BGE.N    ??main_5
   \   000001E0   0x2100             MOVS     R1,#+0
   \   000001E2   0x1C40             ADDS     R0,R0,#+1
   \   000001E4   0x8761             STRH     R1,[R4, #+58]
   \   000001E6   0x87A1             STRH     R1,[R4, #+60]
   \   000001E8   0xF8A4 0x1042      STRH     R1,[R4, #+66]
   \   000001EC   0x86E1             STRH     R1,[R4, #+54]
   \   000001EE   0x86A1             STRH     R1,[R4, #+52]
   \   000001F0   0x8721             STRH     R1,[R4, #+56]
   \   000001F2   0x87E1             STRH     R1,[R4, #+62]
   \   000001F4   0xF8A4 0x1040      STRH     R1,[R4, #+64]
   \   000001F8   0xF884 0x102E      STRB     R1,[R4, #+46]
   \   000001FC   0xF884 0x0030      STRB     R0,[R4, #+48]
   \   00000200   0xB2C0             UXTB     R0,R0
   \   00000202   0x2802             CMP      R0,#+2
   \   00000204   0xBF08             IT       EQ 
   \   00000206   0x.... 0x....      BLEQ     StartRecMic7_8
   \                     ??main_5: (+1)
   \   0000020A   0x8830             LDRH     R0,[R6, #+0]
   \   0000020C   0x280A             CMP      R0,#+10
   \   0000020E   0xD1CC             BNE.N    ??main_4
   \   00000210   0x7839             LDRB     R1,[R7, #+0]
   \   00000212   0x29C8             CMP      R1,#+200
   \   00000214   0xDAC5             BGE.N    ??main_3
   \   00000216   0x2000             MOVS     R0,#+0
   \                     ??main_6: (+1)
   \   00000218   0xF9B8 0x1000      LDRSH    R1,[R8, #+0]
   \   0000021C   0x4101             ASRS     R1,R1,R0
   \   0000021E   0x07C9             LSLS     R1,R1,#+31
   \   00000220   0xD505             BPL.N    ??main_7
   \   00000222   0x782A             LDRB     R2,[R5, #+0]
   \   00000224   0x1C41             ADDS     R1,R0,#+1
   \   00000226   0x4291             CMP      R1,R2
   \   00000228   0xBFB8             IT       LT 
   \   0000022A   0x7829             LDRBLT   R1,[R5, #+0]
   \   0000022C   0x7029             STRB     R1,[R5, #+0]
   \                     ??main_7: (+1)
   \   0000022E   0x1C40             ADDS     R0,R0,#+1
   \   00000230   0x2810             CMP      R0,#+16
   \   00000232   0xDBF1             BLT.N    ??main_6
   \   00000234   0xE7B9             B.N      ??main_4
    674            }
    675          }
    676          
    677          /**
    678            * @brief  Toggle Leds.
    679            * @param  None
    680            * @retval None
    681            */

   \                                 In section .text, align 2, keep-with-next
    682          void Toggle_Leds(void)
    683          {
    684            static uint32_t ticks = 0;
    685          
    686            if (ticks++ > 200)
   \                     Toggle_Leds: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable13_16
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x1C4A             ADDS     R2,R1,#+1
   \   00000008   0x29C9             CMP      R1,#+201
   \   0000000A   0xBF28             IT       CS 
   \   0000000C   0x2200             MOVCS    R2,#+0
    687            {
    688              //BSP_LED_Toggle(LED1);
    689              ticks = 0;
   \   0000000E   0x6002             STR      R2,[R0, #+0]
    690            }
    691          }
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??ticks:
   \   00000000                      DS8 4
    692          
    693          
    694          /**
    695            * @brief  User Process
    696            * @param  phost: Host Handle
    697            * @param  id: Host Library user message ID
    698            * @retval None
    699            */
    700          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
                             ^
Warning[Pe177]: function "USBH_UserProcess" was declared but never referenced
    701          {
    702            switch(id)
    703            { 
    704            case HOST_USER_SELECT_CONFIGURATION:
    705              break;
    706              
    707            case HOST_USER_DISCONNECTION:
    708              appli_state = APPLICATION_DISCONNECT;
    709              break;
    710          
    711            case HOST_USER_CLASS_ACTIVE:
    712              appli_state = APPLICATION_READY;
    713              break;
    714           
    715            case HOST_USER_CONNECTION:
    716              appli_state = APPLICATION_START;
    717              break;
    718             
    719            default:
    720              break; 
    721            }
    722          }
    723          
    724          /**
    725            * @brief  System Clock Configuration
    726            *         The system Clock is configured as follow : 
    727            *            System Clock source            = PLL (HSE)
    728            *            SYSCLK(Hz)                     = 216000000
    729            *            HCLK(Hz)                       = 216000000
    730            *            AHB Prescaler                  = 1
    731            *            APB1 Prescaler                 = 4
    732            *            APB2 Prescaler                 = 2
    733            *            HSE Frequency(Hz)              = 25000000
    734            *            PLL_M                          = 25
    735            *            PLL_N                          = 432
    736            *            PLL_P                          = 2
    737            *            PLL_Q                          = 9
    738            *            VDD(V)                         = 3.3
    739            *            Main regulator output voltage  = Scale1 mode
    740            *            Flash Latency(WS)              = 7
    741            * @param  None
    742            * @retval None
    743            */

   \                                 In section .text, align 2, keep-with-next
    744          static void SystemClock_Config(void)
    745          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B2             SUB      SP,SP,#+200
    746            RCC_ClkInitTypeDef RCC_ClkInitStruct;
    747            RCC_OscInitTypeDef RCC_OscInitStruct;
    748            RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    749            HAL_StatusTypeDef ret = HAL_OK;
    750          
    751            /* Enable HSE Oscillator and activate PLL with HSE as source */
    752            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x9026             STR      R0,[SP, #+152]
    753            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   00000008   0xF44F 0x3080      MOV      R0,#+65536
   \   0000000C   0x9027             STR      R0,[SP, #+156]
    754            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x902C             STR      R0,[SP, #+176]
    755            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    756            RCC_OscInitStruct.PLL.PLLM = 25;
   \   00000012   0x2019             MOVS     R0,#+25
   \   00000014   0x902E             STR      R0,[SP, #+184]
    757            RCC_OscInitStruct.PLL.PLLN = 432;  
   \   00000016   0xF44F 0x70D8      MOV      R0,#+432
   \   0000001A   0x902F             STR      R0,[SP, #+188]
    758            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x9030             STR      R0,[SP, #+192]
    759            RCC_OscInitStruct.PLL.PLLQ = 9;
   \   00000020   0x2009             MOVS     R0,#+9
   \   00000022   0xF44F 0x0480      MOV      R4,#+4194304
   \   00000026   0x9031             STR      R0,[SP, #+196]
   \   00000028   0x942D             STR      R4,[SP, #+180]
    760          
    761            ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
   \   0000002A   0xA826             ADD      R0,SP,#+152
   \   0000002C   0x.... 0x....      BL       HAL_RCC_OscConfig
    762            if(ret != HAL_OK)
    763            {
    764              //while(1) { ; }
    765            }
    766          
    767            /* Activate the OverDrive to reach the 216 MHz Frequency */
    768            ret = HAL_PWREx_EnableOverDrive();
   \   00000030   0x.... 0x....      BL       HAL_PWREx_EnableOverDrive
    769            if(ret != HAL_OK)
    770            {
    771              //while(1) { ; }
    772            }
    773          
    774            /* Select PLLSAI output as USB clock source */
    775            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48 ;
   \   00000034   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000038   0x9005             STR      R0,[SP, #+20]
    776            PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
   \   0000003A   0xF04F 0x6000      MOV      R0,#+134217728
   \   0000003E   0x9024             STR      R0,[SP, #+144]
    777          
    778            
    779            PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
   \   00000040   0x20C0             MOVS     R0,#+192
   \   00000042   0x900A             STR      R0,[SP, #+40]
    780            PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0x900B             STR      R0,[SP, #+44]
    781            PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x900D             STR      R0,[SP, #+52]
    782            PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0x900C             STR      R0,[SP, #+48]
    783          
    784          
    785            ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
   \   00000050   0xA805             ADD      R0,SP,#+20
   \   00000052   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    786            
    787            if(ret != HAL_OK)
    788            {
    789              //while(1) { ; }
    790            }
    791            
    792            /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
    793            RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
   \   00000056   0x200F             MOVS     R0,#+15
    794            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    795            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
    796            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
    797            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
    798          
    799            ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
   \   00000058   0x2107             MOVS     R1,#+7
   \   0000005A   0x9000             STR      R0,[SP, #+0]
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x9001             STR      R0,[SP, #+4]
   \   00000060   0x2080             MOVS     R0,#+128
   \   00000062   0x9002             STR      R0,[SP, #+8]
   \   00000064   0xF44F 0x50A0      MOV      R0,#+5120
   \   00000068   0x9003             STR      R0,[SP, #+12]
   \   0000006A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000006E   0x9004             STR      R0,[SP, #+16]
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x.... 0x....      BL       HAL_RCC_ClockConfig
    800            if(ret != HAL_OK)
    801            {
    802              //while(1) { ; }
    803            }
    804            
    805           //sop1hc 344/7 = 49.142 MHz
    806            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable13_17  ;; 0x100001
    807            PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   0000007A   0x9415             STR      R4,[SP, #+84]
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    808            PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x9012             STR      R0,[SP, #+72]
    809            PeriphClkInitStruct.PLLI2S.PLLI2SP = 8;
   \   00000082   0x2008             MOVS     R0,#+8
   \   00000084   0x9009             STR      R0,[SP, #+36]
    810            PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   00000086   0xF44F 0x70AC      MOV      R0,#+344
   \   0000008A   0x9006             STR      R0,[SP, #+24]
    811            PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
   \   0000008C   0x2007             MOVS     R0,#+7
   \   0000008E   0x9008             STR      R0,[SP, #+32]
    812            PeriphClkInitStruct.PLLI2S.PLLI2SR = 7;
   \   00000090   0x9007             STR      R0,[SP, #+28]
    813            PeriphClkInitStruct.PLLI2SDivQ = 1;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x900E             STR      R0,[SP, #+56]
    814            HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);	
   \   00000096   0xA805             ADD      R0,SP,#+20
   \   00000098   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    815          }
   \   0000009C   0xB032             ADD      SP,SP,#+200
   \   0000009E   0xBD10             POP      {R4,PC}          ;; return
    816          
    817          /**
    818            * @brief  Clock Config.
    819            * @param  hsai: might be required to set audio peripheral predivider if any.
    820            * @param  AudioFreq: Audio frequency used to play the audio stream.
    821            * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
    822            *         Being __weak it can be overwritten by the application     
    823            * @retval None
    824            */

   \                                 In section .text, align 2, keep-with-next
    825          void BSP_AUDIO_OUT_ClockConfig(uint32_t AudioFreq, void *Params)
    826          {
   \                     BSP_AUDIO_OUT_ClockConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0A2             SUB      SP,SP,#+136
   \   00000004   0x4604             MOV      R4,R0
    827            RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;
    828          
    829            HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
    830            
    831            /* Set the PLL configuration according to the audio frequency */
    832            if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
   \   0000000C   0xF642 0x3011      MOVW     R0,#+11025
   \   00000010   0x4284             CMP      R4,R0
   \   00000012   0xBF1F             ITTTT    NE 
   \   00000014   0xF245 0x6022      MOVWNE   R0,#+22050
   \   00000018   0x4284             CMPNE    R4,R0
   \   0000001A   0xF64A 0x4044      MOVWNE   R0,#+44100
   \   0000001E   0x4284             CMPNE    R4,R0
   \   00000020   0xD10E             BNE.N    ??BSP_AUDIO_OUT_ClockConfig_0
    833            {
    834              /* Configure PLLSAI prescalers */
    835              /* PLLI2S_VCO: VCO_429M
    836              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    837              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    838              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \   00000022   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000026   0x9000             STR      R0,[SP, #+0]
    839              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000028   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000002C   0x9010             STR      R0,[SP, #+64]
    840              RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
   \   0000002E   0x2008             MOVS     R0,#+8
   \   00000030   0x9004             STR      R0,[SP, #+16]
    841              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
   \   00000032   0xF240 0x10AD      MOVW     R0,#+429
   \   00000036   0x9001             STR      R0,[SP, #+4]
    842              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x9003             STR      R0,[SP, #+12]
    843              RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
   \   0000003C   0x2013             MOVS     R0,#+19
   \   0000003E   0xE00B             B.N      ??BSP_AUDIO_OUT_ClockConfig_1
    844              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
    845            }
    846            else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K), AUDIO_FREQUENCY_96K */
    847            {
    848              /* SAI clock config
    849              PLLI2S_VCO: VCO_344M
    850              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
    851              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 49.142/1 = 49.142 Mhz */
    852              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \                     ??BSP_AUDIO_OUT_ClockConfig_0: (+1)
   \   00000040   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000044   0x9000             STR      R0,[SP, #+0]
    853              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000046   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000004A   0x9010             STR      R0,[SP, #+64]
    854          	//RCC_ExCLKInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
    855          //    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    856              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   0000004C   0xF44F 0x70AC      MOV      R0,#+344
   \   00000050   0x9001             STR      R0,[SP, #+4]
    857              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
   \   00000052   0x2007             MOVS     R0,#+7
   \   00000054   0x9003             STR      R0,[SP, #+12]
    858          	//RCC_ExCLKInitStruct.PLLI2S.PLLI2SR = 1;
    859              RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \                     ??BSP_AUDIO_OUT_ClockConfig_1: (+1)
   \   00000058   0x9009             STR      R0,[SP, #+36]
    860              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    861            }
    862            
    863          }
   \   00000060   0xB022             ADD      SP,SP,#+136
   \   00000062   0xBD10             POP      {R4,PC}          ;; return
    864          
    865          
    866          
    867          #ifdef  USE_FULL_ASSERT
    868          /**
    869            * @brief  Reports the name of the source file and the source line number
    870            *         where the assert_param error has occurred.
    871            * @param  file: pointer to the source file name
    872            * @param  line: assert_param error line source number
    873            * @retval None
    874            */
    875          void assert_failed(uint8_t* file, uint32_t line)
    876          { 
    877            /* User can add his own implementation to report the file name and line number,
    878               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    879          
    880            /* Infinite loop */
    881            while (1)
    882            {
    883            }
    884          }
    885          #endif
    886          
    887          /**
    888            * @brief  CPU L1-Cache enable.
    889            * @param  None
    890            * @retval None
    891            */
    892          static void CPU_CACHE_Enable(void)
    893          {
    894            /* Enable I-Cache */
    895            SCB_EnableICache();
    896          
    897            /* Enable D-Cache */
    898            SCB_EnableDCache();
    899          }
    900          
    901          

   \                                 In section .text, align 2, keep-with-next
    902          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
    903          {
   \                     HAL_I2C_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    904          
    905            GPIO_InitTypeDef GPIO_InitStruct;
    906              
    907            if(hi2c->Instance==I2C1)
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable13_18  ;; 0x40005400
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD12C             BNE.N    ??HAL_I2C_MspInit_0
    908            {
    909          	/* USER CODE BEGIN I2C1_MspInit 0 */
    910          
    911          	/*##-1- Configure the I2C clock source. The clock is derived from the SYSCLK #*/
    912          	//RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
    913          	//RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    914          	//HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
    915          
    916          	/*##-2- Enable peripherals and GPIO Clocks #################################*/
    917          	/* Enable GPIO TX/RX clock */
    918          	__HAL_RCC_GPIOB_CLK_ENABLE();
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable13_5  ;; 0x40023830
    919          
    920          	/**I2C1 GPIO Configuration	
    921          	PB6	  ------> I2C1_SCL (PB6)
    922          	PB7	  ------> I2C1_SDA (PB7) 
    923          	*/
    924          	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    925          	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    926          	GPIO_InitStruct.Pull = GPIO_PULLUP;
    927          	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    928          	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    929          	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000012   0xA901             ADD      R1,SP,#+4
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000001A   0x6020             STR      R0,[R4, #+0]
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0x20C0             MOVS     R0,#+192
   \   00000028   0x9001             STR      R0,[SP, #+4]
   \   0000002A   0x2012             MOVS     R0,#+18
   \   0000002C   0x9002             STR      R0,[SP, #+8]
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x9003             STR      R0,[SP, #+12]
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x9004             STR      R0,[SP, #+16]
   \   00000036   0x2004             MOVS     R0,#+4
   \   00000038   0x9005             STR      R0,[SP, #+20]
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable13_19  ;; 0x40020400
   \   0000003E   0x.... 0x....      BL       HAL_GPIO_Init
    930          
    931          	/* Peripheral clock enable */
    932          	__HAL_RCC_I2C1_CLK_ENABLE();
   \   00000042   0x6920             LDR      R0,[R4, #+16]
    933          	/* Peripheral interrupt init*/
    934          	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x2103             MOVS     R1,#+3
   \   00000048   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   0000004C   0x6120             STR      R0,[R4, #+16]
   \   0000004E   0x6920             LDR      R0,[R4, #+16]
   \   00000050   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x201F             MOVS     R0,#+31
   \   0000005A   0x.... 0x....      BL       HAL_NVIC_SetPriority
    935          	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \   0000005E   0x201F             MOVS     R0,#+31
   \   00000060   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    936          
    937            }
    938            else if(hi2c->Instance==I2C2)
    939            {
    940            /* USER CODE BEGIN I2C2_MspInit 0 */
    941          
    942            /* USER CODE END I2C2_MspInit 0 */
    943            
    944              /**I2C2 GPIO Configuration    
    945              PB10     ------> I2C2_SCL
    946              PB11     ------> I2C2_SDA 
    947              */
    948              __HAL_RCC_GPIOB_CLK_ENABLE();
    949              
    950              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    951              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    952              GPIO_InitStruct.Pull = GPIO_NOPULL;
    953              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    954              GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    955              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    956          
    957              /* Peripheral clock enable */
    958              __HAL_RCC_I2C2_CLK_ENABLE();
    959              /* Peripheral interrupt init*/
    960              //HAL_NVIC_SetPriority(I2C2_EV_IRQn, 3, 1);
    961              //HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    962            }
    963          
    964          }
   \   00000064   0xB006             ADD      SP,SP,#+24
   \   00000066   0xBD10             POP      {R4,PC}
   \                     ??HAL_I2C_MspInit_0: (+1)
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable13_20  ;; 0x40005800
   \   0000006C   0x4288             CMP      R0,R1
   \   0000006E   0xD123             BNE.N    ??HAL_I2C_MspInit_1
   \   00000070   0x.... 0x....      LDR.W    R4,??DataTable13_5  ;; 0x40023830
   \   00000074   0xA901             ADD      R1,SP,#+4
   \   00000076   0x6820             LDR      R0,[R4, #+0]
   \   00000078   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000007C   0x6020             STR      R0,[R4, #+0]
   \   0000007E   0x6820             LDR      R0,[R4, #+0]
   \   00000080   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000084   0x9000             STR      R0,[SP, #+0]
   \   00000086   0x9800             LDR      R0,[SP, #+0]
   \   00000088   0xF44F 0x6040      MOV      R0,#+3072
   \   0000008C   0x9001             STR      R0,[SP, #+4]
   \   0000008E   0x2012             MOVS     R0,#+18
   \   00000090   0x9002             STR      R0,[SP, #+8]
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x9003             STR      R0,[SP, #+12]
   \   00000096   0x2003             MOVS     R0,#+3
   \   00000098   0x9004             STR      R0,[SP, #+16]
   \   0000009A   0x2004             MOVS     R0,#+4
   \   0000009C   0x9005             STR      R0,[SP, #+20]
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable13_19  ;; 0x40020400
   \   000000A2   0x.... 0x....      BL       HAL_GPIO_Init
   \   000000A6   0x6920             LDR      R0,[R4, #+16]
   \   000000A8   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000000AC   0x6120             STR      R0,[R4, #+16]
   \   000000AE   0x6920             LDR      R0,[R4, #+16]
   \   000000B0   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000000B4   0x9000             STR      R0,[SP, #+0]
   \   000000B6   0x9800             LDR      R0,[SP, #+0]
   \                     ??HAL_I2C_MspInit_1: (+1)
   \   000000B8   0xB006             ADD      SP,SP,#+24
   \   000000BA   0xBD10             POP      {R4,PC}          ;; return
    965          
    966          /*---------------------------------------------------*/
    967          /*   UART                                            */
    968          /* UART4 init function */

   \                                 In section .text, align 2, keep-with-next
    969          void USART3_Init(void)
    970          {
    971          
    972            huart3.Instance = USART3;
   \                     USART3_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable13_21
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable13_22  ;; 0x40004800
   \   00000008   0x6001             STR      R1,[R0, #+0]
    973            huart3.Init.BaudRate = 115200;
   \   0000000A   0xF44F 0x31E1      MOV      R1,#+115200
   \   0000000E   0x6041             STR      R1,[R0, #+4]
    974            huart3.Init.WordLength = UART_WORDLENGTH_8B;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6081             STR      R1,[R0, #+8]
    975            huart3.Init.StopBits = UART_STOPBITS_1;
   \   00000014   0x60C1             STR      R1,[R0, #+12]
    976            huart3.Init.Parity = UART_PARITY_NONE;
   \   00000016   0x6101             STR      R1,[R0, #+16]
    977            huart3.Init.Mode = UART_MODE_TX_RX;
   \   00000018   0x210C             MOVS     R1,#+12
   \   0000001A   0x6141             STR      R1,[R0, #+20]
    978            huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6181             STR      R1,[R0, #+24]
    979            huart3.Init.OverSampling = UART_OVERSAMPLING_16;
   \   00000020   0x61C1             STR      R1,[R0, #+28]
    980            huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED ;
   \   00000022   0x6201             STR      R1,[R0, #+32]
    981            huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
   \   00000024   0x6241             STR      R1,[R0, #+36]
    982            HAL_UART_Init(&huart3);
   \   00000026   0x.... 0x....      B.W      HAL_UART_Init
    983          
    984            //HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
    985            //HAL_NVIC_EnableIRQ(USART3_IRQn);
    986          
    987          }
    988          
    989          

   \                                 In section .text, align 2, keep-with-next
    990          void HAL_UART_MspInit(UART_HandleTypeDef *huart)
    991          {
    992          
    993            GPIO_InitTypeDef GPIO_InitStruct;
    994            if(huart->Instance==USART3)
   \                     HAL_UART_MspInit: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable13_22  ;; 0x40004800
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD000             BEQ.N    ??HAL_UART_MspInit_0
   \   0000000A   0x4770             BX       LR
    995            {
    996          
    997          
    998            /* USER CODE END UART4_MspInit 0 */
    999              /* Peripheral clock enable */
   1000              __USART3_CLK_ENABLE();
   \                     ??HAL_UART_MspInit_0: (+1)
   \   0000000C   0xB500             PUSH     {LR}
   \   0000000E   0x....             LDR.N    R0,??DataTable13_5  ;; 0x40023830
   \   00000010   0xB087             SUB      SP,SP,#+28
   \   00000012   0x6901             LDR      R1,[R0, #+16]
   \   00000014   0xF441 0x2180      ORR      R1,R1,#0x40000
   \   00000018   0x6101             STR      R1,[R0, #+16]
   \   0000001A   0x6901             LDR      R1,[R0, #+16]
   \   0000001C   0xF401 0x2180      AND      R1,R1,#0x40000
   \   00000020   0x9100             STR      R1,[SP, #+0]
   \   00000022   0x9900             LDR      R1,[SP, #+0]
   1001              __GPIOC_CLK_ENABLE();
   \   00000024   0x6801             LDR      R1,[R0, #+0]
   \   00000026   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000002A   0x6001             STR      R1,[R0, #+0]
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   1002            
   1003              /**UART4 GPIO Configuration    
   1004              PC10     ------> USART3_TX
   1005              PC11     ------> USART3_RX
   1006              */
   1007              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
   1008              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1009              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1010              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1011              GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
   1012              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   0000002E   0xA901             ADD      R1,SP,#+4
   \   00000030   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0x9800             LDR      R0,[SP, #+0]
   \   00000038   0xF44F 0x6040      MOV      R0,#+3072
   \   0000003C   0x9001             STR      R0,[SP, #+4]
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x9002             STR      R0,[SP, #+8]
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x9003             STR      R0,[SP, #+12]
   \   00000046   0x2003             MOVS     R0,#+3
   \   00000048   0x9004             STR      R0,[SP, #+16]
   \   0000004A   0x2007             MOVS     R0,#+7
   \   0000004C   0x9005             STR      R0,[SP, #+20]
   \   0000004E   0x....             LDR.N    R0,??DataTable13_23  ;; 0x40020800
   \   00000050   0x.... 0x....      BL       HAL_GPIO_Init
   1013          
   1014              /* NVIC for USART */
   1015              HAL_NVIC_SetPriority(USART3_IRQn, 7, 1);
   \   00000054   0x2201             MOVS     R2,#+1
   \   00000056   0x2107             MOVS     R1,#+7
   \   00000058   0x2027             MOVS     R0,#+39
   \   0000005A   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1016              HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   0000005E   0x2027             MOVS     R0,#+39
   \   00000060   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1017          
   1018            }
   1019          
   1020          }
   \   00000064   0xB007             ADD      SP,SP,#+28
   \   00000066   0xBD00             POP      {PC}             ;; return
   1021          
   1022          
   1023          

   \                                 In section .text, align 2, keep-with-next
   1024          void EXTI4_IRQHandler(void)
   1025          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1026              /* EXTI line interrupt detected */
   1027            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable13_24  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x06C0             LSLS     R0,R0,#+27
   \   00000008   0xD50E             BPL.N    ??EXTI4_IRQHandler_0
   1028            {
   1029              
   1030               if (cntRisingEXTI==20)
   \   0000000A   0x....             LDR.N    R0,??DataTable13_25
   \   0000000C   0x8801             LDRH     R1,[R0, #+0]
   \   0000000E   0x2914             CMP      R1,#+20
   \   00000010   0xD105             BNE.N    ??EXTI4_IRQHandler_1
   1031               {
   1032              	/*--------------Enable read PCM data --------------------*/   
   1033                  //flgDlyUpd = 1;  
   1034                  //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1035          		//__HAL_UNLOCK(&hspi5);
   1036                  //__HAL_SPI_ENABLE(&hspi5);
   1037                  cntRisingEXTI=0;
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x8001             STRH     R1,[R0, #+0]
   1038          
   1039                  /*Disable external interrupt */
   1040                  HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI4_IRQn));
   \   00000016   0x200A             MOVS     R0,#+10
   \   00000018   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   0000001C   0xE002             B.N      ??EXTI4_IRQHandler_2
   1041                  //HAL_GPIO_DeInit(GPIOB,GPIO_PIN_4);
   1042               }
   1043               else
   1044               {
   1045                  cntRisingEXTI++;
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   0000001E   0x8801             LDRH     R1,[R0, #+0]
   \   00000020   0x1C49             ADDS     R1,R1,#+1
   \   00000022   0x8001             STRH     R1,[R0, #+0]
   1046                  //__HAL_SPI_DISABLE(&hspi5);
   1047               }
   1048               
   1049                __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
   \                     ??EXTI4_IRQHandler_2: (+1)
   \   00000024   0x2010             MOVS     R0,#+16
   \   00000026   0x6020             STR      R0,[R4, #+0]
   1050          
   1051            }
   1052          }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
   1053                        

   \                                 In section .text, align 2, keep-with-next
   1054          void EXTI15_10_IRQHandler(void)
   1055          {
   1056          
   1057          }
   \                     EXTI15_10_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1058          
   1059          /* Events for Button Press */

   \                                 In section .text, align 2, keep-with-next
   1060          void EXTI9_5_IRQHandler(void)
   1061          {
   \                     EXTI9_5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1062          
   1063            /* EXTI line interrupt detected */
   1064            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable13_24  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0xD514             BPL.N    ??EXTI9_5_IRQHandler_0
   1065            {
   1066          	  btnSW2 = 1;
   \   0000000A   0x....             LDR.N    R0,??DataTable13
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0xF880 0x102D      STRB     R1,[R0, #+45]
   1067          	  if ((++cntBtnPress)==8) cntBtnPress=0;
   \   00000012   0xF890 0x102F      LDRB     R1,[R0, #+47]
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0xF880 0x102F      STRB     R1,[R0, #+47]
   \   0000001C   0xB2C9             UXTB     R1,R1
   \   0000001E   0x2908             CMP      R1,#+8
   \   00000020   0xBF04             ITT      EQ 
   \   00000022   0x2100             MOVEQ    R1,#+0
   \   00000024   0xF880 0x102F      STRBEQ   R1,[R0, #+47]
   1068          	  BSP_LED_Toggle(LED2);
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       BSP_LED_Toggle
   1069          	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
   \   0000002E   0xF44F 0x7080      MOV      R0,#+256
   \   00000032   0x6020             STR      R0,[R4, #+0]
   1070          
   1071            }
   1072          
   1073          
   1074            /* EXTI line interrupt detected */
   1075            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET)
   \                     ??EXTI9_5_IRQHandler_0: (+1)
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0x0580             LSLS     R0,R0,#+22
   \   00000038   0xD50F             BPL.N    ??EXTI9_5_IRQHandler_1
   1076            {
   1077          		btnSW1 = 1;
   \   0000003A   0x....             LDR.N    R0,??DataTable13
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0xF880 0x102C      STRB     R1,[R0, #+44]
   1078          		Command_index^=0x01;
   \   00000042   0xF890 0x1033      LDRB     R1,[R0, #+51]
   \   00000046   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000004A   0xF880 0x1033      STRB     R1,[R0, #+51]
   1079          		BSP_LED_Toggle(LED1);
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      BL       BSP_LED_Toggle
   1080          
   1081          	   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
   \   00000054   0xF44F 0x7000      MOV      R0,#+512
   \   00000058   0x6020             STR      R0,[R4, #+0]
   1082            }
   1083          
   1084          }
   \                     ??EXTI9_5_IRQHandler_1: (+1)
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
   1085          
   1086          

   \                                 In section .text, align 2, keep-with-next
   1087          void DFT_Init(void)
   1088          {
   \                     DFT_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1089          #if MAIN_CRSCORR
   1090          		arm_rfft_init_q15(&RealFFT_Ins,(uint32_t)128,(uint32_t)0,(uint32_t)1);
   1091          		arm_rfft_init_q15(&RealIFFT_Ins,(uint32_t)128,(uint32_t)1,(uint32_t)1);
   1092          #endif  
   1093          		/* Initialize the CFFT/CIFFT module */	
   1094          		arm_rfft_init_f32(&S1,&SS1, 512,  0, 1); 
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x....             LDR.N    R4,??DataTable13_26
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0xF44F 0x7200      MOV      R2,#+512
   \   00000010   0x4621             MOV      R1,R4
   \   00000012   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000016   0x.... 0x....      BL       arm_rfft_init_f32
   1095          		arm_rfft_init_f32(&S2,&SS2, 512,  0, 1); 
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0xF44F 0x7200      MOV      R2,#+512
   \   00000024   0xF104 0x0114      ADD      R1,R4,#+20
   \   00000028   0xF104 0x007C      ADD      R0,R4,#+124
   \   0000002C   0x.... 0x....      BL       arm_rfft_init_f32
   1096          		arm_rfft_init_f32(&S3,&SS3, 512,  0, 1); 
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x2300             MOVS     R3,#+0
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0xF44F 0x7200      MOV      R2,#+512
   \   0000003A   0xF104 0x0128      ADD      R1,R4,#+40
   \   0000003E   0xF104 0x0094      ADD      R0,R4,#+148
   \   00000042   0x.... 0x....      BL       arm_rfft_init_f32
   1097          		arm_rfft_init_f32(&S4,&SS4, 512,  0, 1);
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x2300             MOVS     R3,#+0
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0xF44F 0x7200      MOV      R2,#+512
   \   00000050   0xF104 0x013C      ADD      R1,R4,#+60
   \   00000054   0xF104 0x00AC      ADD      R0,R4,#+172
   \   00000058   0x.... 0x....      BL       arm_rfft_init_f32
   1098          		arm_rfft_init_f32(&IS,&ISS, 512,  1, 1);
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x2301             MOVS     R3,#+1
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0xF44F 0x7200      MOV      R2,#+512
   \   00000066   0xF104 0x0150      ADD      R1,R4,#+80
   \   0000006A   0xF104 0x00C4      ADD      R0,R4,#+196
   \   0000006E   0x.... 0x....      BL       arm_rfft_init_f32
   1099          
   1100          		//arm_rfft_fast_init_f32(&S1, 512);
   1101                          //arm_rfft_fast_init_f32(&S2, 512);
   1102          		//arm_rfft_fast_init_f32(&S3, 512);
   1103          		//arm_rfft_fast_init_f32(&S4, 512);
   1104          		//arm_rfft_fast_init_f32(&IS, 512);
   1105          }
   \   00000072   0xB002             ADD      SP,SP,#+8
   \   00000074   0xBD10             POP      {R4,PC}          ;; return
   1106          
   1107          

   \                                 In section .text, align 4, keep-with-next
   1108          void SumDelay(Mic_Array_Data *BufferIn)
   1109          {
   1110                     //if (idxLatency12>idxLatency13)
   1111                     // {
   1112                     //     if (idxLatency13 > idxLatency14)
   1113                     //     {
   1114                     //         /* MIC2 --> MIC3 --> MIC4 */
   1115                     //     }
   1116                     //             else if (idxLatency14 > idxLatency12)
   1117                     //             {
   1118                     //        /* MIC4-->MIC2-->MIC3  */
   1119                     //            }
   1120                     //             else
   1121                     //             {
   1122                     //       /* MIC2-->MIC4-->MIC3  */
   1123                     //             }
   1124                     // }
   1125                     //else // idxLatency13>idxLatency12
   1126                     //     {
   1127                     //    if (idxLatency12 > idxLatency14)
   1128                     //    {
   1129                     //        //MIC3 --> MIC2 --> MIC4 
   1130                     //    }
   1131                     //        else if (idxLatency14 > idxLatency13)
   1132                     //        {
   1133                     //        //MIC4 --> MIC3 --> MIC2
   1134                     //        }
   1135                     //        else
   1136                     //        {
   1137                     //        //MIC3 --> MIC4 --> MIC2
   1138          	   //	   }
   1139          	   //}
   1140          
   1141          	
   1142          	for(uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
   \                     SumDelay: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable13
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000008   0xF9B2 0x3046      LDRSH    R3,[R2, #+70]
   \   0000000C   0xF9B2 0x4044      LDRSH    R4,[R2, #+68]
   \   00000010   0xF9B2 0x5048      LDRSH    R5,[R2, #+72]
   \   00000014   0xF102 0x0854      ADD      R8,R2,#+84
   \   00000018   0x4681             MOV      R9,R0
   \   0000001A   0xF242 0x0C28      MOVW     R12,#+8232
   \   0000001E   0x425B             RSBS     R3,R3,#+0
   \   00000020   0x4264             RSBS     R4,R4,#+0
   \   00000022   0x426D             RSBS     R5,R5,#+0
   \   00000024   0xF241 0x0E14      MOVW     LR,#+4116
   1143          	{
   1144          
   1145          		 if (i%2==0)
   \                     ??SumDelay_0: (+1)
   \   00000028   0xEB01 0x76D1      ADD      R6,R1,R1, LSR #+31
   \   0000002C   0x1076             ASRS     R6,R6,#+1
   \   0000002E   0xEBB1 0x0646      SUBS     R6,R1,R6, LSL #+1
   \   00000032   0xD13F             BNE.N    ??SumDelay_1
   1146          		 {
   1147                              bufferSum[i] = (uint16_t)(BufferIn->bufMIC1[i]*FacMic.facMIC1 + 
   1148                              BufferIn->bufMIC2[(((i-idxLatency12)>0)?(i-idxLatency12):0)]*FacMic.facMIC2 + 
   1149                              BufferIn->bufMIC3[(((i-idxLatency13)>0)?(i-idxLatency13):0)]*FacMic.facMIC3 + 
   1150                              BufferIn->bufMIC4[(((i-idxLatency14)>0)?(i-idxLatency14):0)]*FacMic.facMIC4); 		
   \   00000034   0x2B01             CMP      R3,#+1
   \   00000036   0xBFAC             ITE      GE 
   \   00000038   0x469A             MOVGE    R10,R3
   \   0000003A   0xF04F 0x0A00      MOVLT    R10,#+0
   \   0000003E   0x2C01             CMP      R4,#+1
   \   00000040   0xEB00 0x0A4A      ADD      R10,R0,R10, LSL #+1
   \   00000044   0xBFA8             IT       GE 
   \   00000046   0x4626             MOVGE    R6,R4
   \   00000048   0x2D01             CMP      R5,#+1
   \   0000004A   0xEB00 0x0646      ADD      R6,R0,R6, LSL #+1
   \   0000004E   0xBFAC             ITE      GE 
   \   00000050   0x462F             MOVGE    R7,R5
   \   00000052   0x2700             MOVLT    R7,#+0
   \   00000054   0xF9B9 0xB000      LDRSH    R11,[R9, #+0]
   \   00000058   0xF93E 0xA00A      LDRSH    R10,[LR, R10]
   \   0000005C   0xEDD2 0x0A05      VLDR     S1,[R2, #+20]
   \   00000060   0xF93C 0x6006      LDRSH    R6,[R12, R6]
   \   00000064   0xED92 0x1A06      VLDR     S2,[R2, #+24]
   \   00000068   0xEE00 0xBA10      VMOV     S0,R11
   \   0000006C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000070   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000074   0xEE00 0xAA90      VMOV     S1,R10
   \   00000078   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   0000007C   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000080   0xEE00 0x6A90      VMOV     S1,R6
   \   00000084   0xEB00 0x0647      ADD      R6,R0,R7, LSL #+1
   \   00000088   0xF243 0x073C      MOVW     R7,#+12348
   \   0000008C   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000090   0xED92 0x1A07      VLDR     S2,[R2, #+28]
   \   00000094   0x5FBE             LDRSH    R6,[R7, R6]
   \   00000096   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000009A   0xED92 0x1A08      VLDR     S2,[R2, #+32]
   \   0000009E   0xEE00 0x6A90      VMOV     S1,R6
   \   000000A2   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000000A6   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000AA   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000AE   0xEE10 0x6A10      VMOV     R6,S0
   \   000000B2   0xE001             B.N      ??SumDelay_2
   1151          		 }
   1152          		 else
   1153          		 {
   1154                               bufferSum[i] = (uint16_t)(BufferIn->bufMIC3[i]);
   \                     ??SumDelay_1: (+1)
   \   000000B4   0xF83C 0x6009      LDRH     R6,[R12, R9]
   1155          		 }
   1156          	}
   \                     ??SumDelay_2: (+1)
   \   000000B8   0x1C49             ADDS     R1,R1,#+1
   \   000000BA   0x1C6D             ADDS     R5,R5,#+1
   \   000000BC   0x1C64             ADDS     R4,R4,#+1
   \   000000BE   0x1C5B             ADDS     R3,R3,#+1
   \   000000C0   0xF5B1 0x6F80      CMP      R1,#+1024
   \   000000C4   0xF828 0x6B02      STRH     R6,[R8], #+2
   \   000000C8   0xF109 0x0902      ADD      R9,R9,#+2
   \   000000CC   0xDBAC             BLT.N    ??SumDelay_0
   1157          }
   \   000000CE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1158          
   1159          

   \                                 In section .text, align 2, keep-with-next
   1160          void ButtonInit(void)
   1161          {
   \                     ButtonInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   1162              /* PI8: SW2 */
   1163          	/* PI9: SW1 */
   1164          	 /* ----------------------*/
   1165          	 __GPIOB_CLK_ENABLE();
   \   00000002   0x....             LDR.N    R0,??DataTable13_5  ;; 0x40023830
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0xF041 0x0102      ORR      R1,R1,#0x2
   \   0000000C   0x6001             STR      R1,[R0, #+0]
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   1166          	GPIO_INS.Pin = GPIO_PIN_8|GPIO_PIN_9;
   \   00000010   0x....             LDR.N    R1,??DataTable13
   \   00000012   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0xF44F 0x7040      MOV      R0,#+768
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   1167          	GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   00000020   0x....             LDR.N    R0,??DataTable13_9  ;; 0x10110000
   \   00000022   0x6048             STR      R0,[R1, #+4]
   1168          	GPIO_INS.Pull =GPIO_NOPULL;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x6088             STR      R0,[R1, #+8]
   1169          	GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   00000028   0x2003             MOVS     R0,#+3
   \   0000002A   0x60C8             STR      R0,[R1, #+12]
   1170          	HAL_GPIO_Init(GPIOI,&GPIO_INS);
   \   0000002C   0x....             LDR.N    R0,??DataTable13_27  ;; 0x40022000
   \   0000002E   0x.... 0x....      BL       HAL_GPIO_Init
   1171          	
   1172          	/* Enable and set Button EXTI Interrupt to the lowest priority */
   1173          	HAL_NVIC_SetPriority((IRQn_Type)EXTI9_5_IRQn, 0x0F, 0x00);
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x210F             MOVS     R1,#+15
   \   00000036   0x2017             MOVS     R0,#+23
   \   00000038   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1174          	HAL_NVIC_EnableIRQ((IRQn_Type)EXTI9_5_IRQn);
   \   0000003C   0xB001             ADD      SP,SP,#+4
   \   0000003E   0x2017             MOVS     R0,#+23
   \   00000040   0xF85D 0xEB04      POP      {LR}
   \   00000044   0x.... 0x....      B.W      HAL_NVIC_EnableIRQ
   1175          	/*-----------------------*/
   1176          
   1177          }
   1178          
   1179          
   1180          /* I2C2 init function */

   \                                 In section .text, align 2, keep-with-next
   1181          void MX_I2C2_Init(void)
   1182          {
   1183             __HAL_I2C_DISABLE(&hi2c2);
   \                     MX_I2C2_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable13_28
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x680A             LDR      R2,[R1, #+0]
   \   00000006   0x0852             LSRS     R2,R2,#+1
   \   00000008   0x0052             LSLS     R2,R2,#+1
   \   0000000A   0x600A             STR      R2,[R1, #+0]
   1184            hi2c2.Instance = I2C2;
   \   0000000C   0x....             LDR.N    R1,??DataTable13_20  ;; 0x40005800
   \   0000000E   0x6001             STR      R1,[R0, #+0]
   1185            hi2c2.Init.Timing =0x00A0689A ;//I2C_TIMING  0x00303D5D 0x00A0689A
   \   00000010   0x....             LDR.N    R1,??DataTable13_29  ;; 0xa0689a
   \   00000012   0x6041             STR      R1,[R0, #+4]
   1186            hi2c2.Init.OwnAddress1 = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6081             STR      R1,[R0, #+8]
   1187            hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x60C1             STR      R1,[R0, #+12]
   1188            hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6101             STR      R1,[R0, #+16]
   1189            hi2c2.Init.OwnAddress2 = 0;
   \   00000020   0x6141             STR      R1,[R0, #+20]
   1190            hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   00000022   0x6181             STR      R1,[R0, #+24]
   1191            hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   00000024   0x61C1             STR      R1,[R0, #+28]
   1192            hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   00000026   0x6201             STR      R1,[R0, #+32]
   1193            HAL_I2C_Init(&hi2c2);
   \   00000028   0x.... 0x....      B.W      HAL_I2C_Init
   1194          
   1195              /**Configure Analogue filter 
   1196              */
   1197            //HAL_I2CEx_AnalogFilter_Config(&hi2c2, I2C_ANALOGFILTER_ENABLE);
   1198          
   1199          }
   1200          

   \                                 In section .text, align 2, keep-with-next
   1201           void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
   1202          {
   \                     HAL_I2S_TxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1203            //sop1hc if(AudioState == AUDIO_STATE_PLAY)
   1204            //if (BufferCtlPlayOut.state == BUFFER_OFFSET_HALF)
   1205            {
   1206            //BufferCtlPlayOut.state = BUFFER_OFFSET_FULL;
   1207            XferCplt=1;
   \   00000002   0x....             LDR.N    R0,??DataTable13_30
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x7001             STRB     R1,[R0, #+0]
   1208            Audio_Play_Out(); 
   \   00000008   0x7801             LDRB     R1,[R0, #+0]
   \   0000000A   0x2901             CMP      R1,#+1
   \   0000000C   0xD13D             BNE.N    ??HAL_I2S_TxCpltCallback_0
   \   0000000E   0x....             LDR.N    R4,??DataTable13
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x8761             STRH     R1,[R4, #+58]
   \   00000014   0x87A1             STRH     R1,[R4, #+60]
   \   00000016   0xF8A4 0x1042      STRH     R1,[R4, #+66]
   \   0000001A   0x86E1             STRH     R1,[R4, #+54]
   \   0000001C   0x86A1             STRH     R1,[R4, #+52]
   \   0000001E   0x8721             STRH     R1,[R4, #+56]
   \   00000020   0x87E1             STRH     R1,[R4, #+62]
   \   00000022   0xF8A4 0x1040      STRH     R1,[R4, #+64]
   \   00000026   0xF884 0x102E      STRB     R1,[R4, #+46]
   \   0000002A   0x7001             STRB     R1,[R0, #+0]
   \   0000002C   0xF894 0x0032      LDRB     R0,[R4, #+50]
   \   00000030   0xB1E8             CBZ.N    R0,??HAL_I2S_TxCpltCallback_1
   \   00000032   0x2802             CMP      R0,#+2
   \   00000034   0xD001             BEQ.N    ??HAL_I2S_TxCpltCallback_2
   \   00000036   0xD30D             BCC.N    ??HAL_I2S_TxCpltCallback_3
   \   00000038   0xE027             B.N      ??HAL_I2S_TxCpltCallback_0
   \                     ??HAL_I2S_TxCpltCallback_2: (+1)
   \   0000003A   0xF894 0x1033      LDRB     R1,[R4, #+51]
   \   0000003E   0x....             LDR.N    R0,??DataTable13_3
   \   00000040   0xB911             CBNZ.N   R1,??HAL_I2S_TxCpltCallback_4
   \   00000042   0xF500 0x5080      ADD      R0,R0,#+4096
   \   00000046   0x3014             ADDS     R0,R0,#+20
   \                     ??HAL_I2S_TxCpltCallback_4: (+1)
   \   00000048   0xF44F 0x5180      MOV      R1,#+4096
   \   0000004C   0x.... 0x....      BL       Audio_MAL_Play
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0xE018             B.N      ??HAL_I2S_TxCpltCallback_5
   \                     ??HAL_I2S_TxCpltCallback_3: (+1)
   \   00000054   0xF894 0x1033      LDRB     R1,[R4, #+51]
   \   00000058   0x....             LDR.N    R0,??DataTable13_2
   \   0000005A   0xB911             CBNZ.N   R1,??HAL_I2S_TxCpltCallback_6
   \   0000005C   0xF500 0x5080      ADD      R0,R0,#+4096
   \   00000060   0x3014             ADDS     R0,R0,#+20
   \                     ??HAL_I2S_TxCpltCallback_6: (+1)
   \   00000062   0xF44F 0x5180      MOV      R1,#+4096
   \   00000066   0x.... 0x....      BL       Audio_MAL_Play
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE00B             B.N      ??HAL_I2S_TxCpltCallback_5
   \                     ??HAL_I2S_TxCpltCallback_1: (+1)
   \   0000006E   0xF894 0x1033      LDRB     R1,[R4, #+51]
   \   00000072   0x....             LDR.N    R0,??DataTable13_1
   \   00000074   0xB911             CBNZ.N   R1,??HAL_I2S_TxCpltCallback_7
   \   00000076   0xF500 0x5080      ADD      R0,R0,#+4096
   \   0000007A   0x3014             ADDS     R0,R0,#+20
   \                     ??HAL_I2S_TxCpltCallback_7: (+1)
   \   0000007C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000080   0x.... 0x....      BL       Audio_MAL_Play
   \   00000084   0x2002             MOVS     R0,#+2
   \                     ??HAL_I2S_TxCpltCallback_5: (+1)
   \   00000086   0xF884 0x0032      STRB     R0,[R4, #+50]
   1209          
   1210            if (cntStrt<100) cntStrt++;
   \                     ??HAL_I2S_TxCpltCallback_0: (+1)
   \   0000008A   0x....             LDR.N    R0,??DataTable13_8
   \   0000008C   0x8801             LDRH     R1,[R0, #+0]
   \   0000008E   0x2964             CMP      R1,#+100
   \   00000090   0xDA02             BGE.N    ??HAL_I2S_TxCpltCallback_8
   \   00000092   0x8801             LDRH     R1,[R0, #+0]
   \   00000094   0x1C49             ADDS     R1,R1,#+1
   \   00000096   0x8001             STRH     R1,[R0, #+0]
   1211            }	 
   1212          }
   \                     ??HAL_I2S_TxCpltCallback_8: (+1)
   \   00000098   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     GPIO_INS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x........         DC32     Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0xE000ED14         DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     SPI4_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x........         DC32     WaveRecord_flgIni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x........         DC32     cntStrt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \   00000000   0x........         DC32     AUDIO_Desc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \   00000000   0x........         DC32     USBD_AUDIO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \   00000000   0x........         DC32     USBD_AUDIO_fops

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_16:
   \   00000000   0x........         DC32     ??ticks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_17:
   \   00000000   0x00100001         DC32     0x100001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_18:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_19:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_20:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_21:
   \   00000000   0x........         DC32     huart3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_22:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_23:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_24:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_25:
   \   00000000   0x........         DC32     cntRisingEXTI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_26:
   \   00000000   0x........         DC32     SS1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_27:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_28:
   \   00000000   0x........         DC32     hi2c2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_29:
   \   00000000   0x00A0689A         DC32     0xa0689a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_30:
   \   00000000   0x........         DC32     XferCplt
   1213          
   1214          /*****************************END OF FILE**************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     144   BSP_AUDIO_OUT_ClockConfig
       144   -> HAL_RCCEx_GetPeriphCLKConfig
       144   -> HAL_RCCEx_PeriphCLKConfig
       8   ButtonInit
         8   -> HAL_GPIO_Init
         0   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
      16   DFT_Init
        16   -> arm_rfft_init_f32
       0   EXTI15_10_IRQHandler
       8   EXTI4_IRQHandler
         8   -> HAL_NVIC_DisableIRQ
       8   EXTI9_5_IRQHandler
         8   -> BSP_LED_Toggle
      16   FFT_Update
        16   -> CrssCor
        16   -> FactorUpd
        16   -> PDM2PCMSDO78
         0   -> SumDelay
      32   HAL_I2C_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       8   HAL_I2S_TxCpltCallback
         8   -> Audio_MAL_Play
      32   HAL_UART_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       0   MX_I2C2_Init
         0   -> HAL_I2C_Init
      36   SumDelay
     208   SystemClock_Config
       208   -> HAL_PWREx_EnableOverDrive
       208   -> HAL_RCCEx_PeriphCLKConfig
       208   -> HAL_RCC_ClockConfig
       208   -> HAL_RCC_OscConfig
       0   Toggle_Leds
       0   USART3_Init
         0   -> HAL_UART_Init
     168   main
       168   -> BSP_LED_Init
       168   -> BSP_LED_Toggle
       168   -> BSP_SDRAM_Init
       168   -> ButtonInit
       168   -> DFT_Init
       168   -> FFT_Update
       168   -> HAL_GPIO_Init
       168   -> HAL_GPIO_WritePin
       168   -> HAL_Init
       168   -> HAL_NVIC_EnableIRQ
       168   -> HAL_NVIC_SetPriority
       168   -> HAL_RCCEx_GetPeriphCLKConfig
       168   -> HAL_RCCEx_PeriphCLKConfig
       168   -> MIC1TO6_Init
       168   -> MX_I2C2_Init
       168   -> STA321MP_Ini
       168   -> StartRecMic7_8
       168   -> SystemClock_Config
       168   -> USBD_AUDIO_Init_Microphone_Descriptor
       168   -> USBD_AUDIO_RegisterInterface
       168   -> USBD_Init
       168   -> USBD_RegisterClass
       168   -> USBD_Start


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_15
       4  ??DataTable13_16
       4  ??DataTable13_17
       4  ??DataTable13_18
       4  ??DataTable13_19
       4  ??DataTable13_2
       4  ??DataTable13_20
       4  ??DataTable13_21
       4  ??DataTable13_22
       4  ??DataTable13_23
       4  ??DataTable13_24
       4  ??DataTable13_25
       4  ??DataTable13_26
       4  ??DataTable13_27
       4  ??DataTable13_28
       4  ??DataTable13_29
       4  ??DataTable13_3
       4  ??DataTable13_30
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
     100  BSP_AUDIO_OUT_ClockConfig
    4096  BufferTest
      72  ButtonInit
     118  DFT_Init
       2  DeltaBuf1
       2  DeltaBuf1Old
       2  EXTI15_10_IRQHandler
      42  EXTI4_IRQHandler
      92  EXTI9_5_IRQHandler
     172  FFT_Update
    2680  GPIO_INS
          FacMic
          btnSW1
          btnSW2
          flgDlyUpd
          cntBtnPress
          stFrstFrmStore
          flg10ms
          buffer_switch
          Command_index
          WaveRec_idxSens4
          WaveRec_idxSens3
          I2S2_idxTmp
          WaveRec_idxSens1
          WaveRec_idxSens2
          WaveRec_idxSens5
          WaveRec_idxSens6
          idxSPI5DataBuf3
          idxLatency13
          idxLatency12
          idxLatency14
          idxLatency25
          idxLatency63
          idxLatency78
          cntTime200
          bufferSum
          hUSBDDevice
     188  HAL_I2C_MspInit
     154  HAL_I2S_TxCpltCallback
     104  HAL_UART_MspInit
      44  MX_I2C2_Init
     220  SS1
          SS2
          SS3
          SS4
          ISS
          S1
          S2
          S3
          S4
          IS
     210  SumDelay
     160  SystemClock_Config
      18  Toggle_Leds
      42  USART3_Init
    1024  aRxBuffer
       1  appli_state
       2  cntRisingEXTI
       1  flgSTAIni
     696  hUSBHost
     100  hspi4
     112  huart3
       1  idxDec
     566  main
      20  pI2CData
      12  pI2CRx
       4  ticks

 
 6 273 bytes in section .bss
 2 700 bytes in section .data
 2 208 bytes in section .text
 
 2 208 bytes of CODE memory
 8 973 bytes of DATA memory

Errors: none
Warnings: 2
