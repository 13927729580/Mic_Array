###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       21/Dec/2015  01:05:13
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\main.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\main.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
      1          /**
      2            ******************************************************************************
      3            * @file    Audio/Mic_Array/Src/main.c
      4            * @author  Phan Le Son
      5            * @version V1.0.0
      6            * @date    12-Dec-2015 
      7            * @brief   Microphone Array
      8            ******************************************************************************
      9          
     10            */
     11          
     12          /* Includes ------------------------------------------------------------------*/
     13          
     14          #include "pdm_filter.h"
     15          #include "main.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void SCB_EnableICache(void)
   \                     SCB_EnableICache: (+1)
   \   00000000   0xF3BF 0x8F4F      DSB      
   \   00000004   0xF3BF 0x8F6F      ISB      
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable12  ;; 0xe000ef50
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0xe000ed14
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable12_1  ;; 0xe000ed14
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0xF3BF 0x8F4F      DSB      
   \   00000024   0xF3BF 0x8F6F      ISB      
   \   00000028   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void SCB_EnableDCache(void)
   \                     SCB_EnableDCache: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable12_2  ;; 0xe000ed84
   \   00000008   0x6023             STR      R3,[R4, #+0]
   \   0000000A   0xF3BF 0x8F4F      DSB      
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable12_3  ;; 0xe000ed80
   \   00000012   0x681B             LDR      R3,[R3, #+0]
   \   00000014   0x0018             MOVS     R0,R3
   \   00000016   0xF3C0 0x334E      UBFX     R3,R0,#+13,#+15
   \   0000001A   0x0019             MOVS     R1,R3
   \                     ??SCB_EnableDCache_0: (+1)
   \   0000001C   0xF3C0 0x03C9      UBFX     R3,R0,#+3,#+10
   \   00000020   0x001A             MOVS     R2,R3
   \                     ??SCB_EnableDCache_1: (+1)
   \   00000022   0xF643 0x73E0      MOVW     R3,#+16352
   \   00000026   0xEA13 0x1341      ANDS     R3,R3,R1, LSL #+5
   \   0000002A   0xEA53 0x7382      ORRS     R3,R3,R2, LSL #+30
   \   0000002E   0x.... 0x....      LDR.W    R4,??DataTable12_4  ;; 0xe000ef60
   \   00000032   0x6023             STR      R3,[R4, #+0]
   \   00000034   0x0013             MOVS     R3,R2
   \   00000036   0x1E5A             SUBS     R2,R3,#+1
   \   00000038   0x2B00             CMP      R3,#+0
   \   0000003A   0xD1F2             BNE.N    ??SCB_EnableDCache_1
   \   0000003C   0x000B             MOVS     R3,R1
   \   0000003E   0x1E59             SUBS     R1,R3,#+1
   \   00000040   0x2B00             CMP      R3,#+0
   \   00000042   0xD1EB             BNE.N    ??SCB_EnableDCache_0
   \   00000044   0xF3BF 0x8F4F      DSB      
   \   00000048   0x.... 0x....      LDR.W    R3,??DataTable12_1  ;; 0xe000ed14
   \   0000004C   0x681B             LDR      R3,[R3, #+0]
   \   0000004E   0xF453 0x3380      ORRS     R3,R3,#0x10000
   \   00000052   0x.... 0x....      LDR.W    R4,??DataTable12_1  ;; 0xe000ed14
   \   00000056   0x6023             STR      R3,[R4, #+0]
   \   00000058   0xF3BF 0x8F4F      DSB      
   \   0000005C   0xF3BF 0x8F6F      ISB      
   \   00000060   0xBC10             POP      {R4}
   \   00000062   0x4770             BX       LR               ;; return
     16          #include <stdio.h>
     17          
     18          
     19          /* Private typedef -----------------------------------------------------------*/
     20          /* Private define ------------------------------------------------------------*/
     21          /* Private macro -------------------------------------------------------------*/
     22          
     23          
     24          /* I2C TIMING Register define when I2C clock source is APB1 (SYSCLK/4) */
     25          /* I2C TIMING is calculated in case of the I2C Clock source is the APB1CLK = 50 MHz */
     26          /* This example use TIMING to 0x40912732 to reach 100 kHz speed (Rise time = 700 ns, Fall time = 100 ns) */
     27          
     28          #define AUDIO_FILE_SZE          990000
     29          #define AUIDO_START_ADDRESS     58 /* Offset relative to audio file header size */
     30          
     31          #define DEBUG           0
     32          
     33          
     34          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     35          USBH_HandleTypeDef hUSBHost;
   \                     hUSBHost:
   \   00000000                      DS8 696

   \                                 In section .bss, align 1
     36          AUDIO_ApplicationTypeDef appli_state = APPLICATION_IDLE;//APPLICATION_IDLE
   \                     appli_state:
   \   00000000                      DS8 1
     37          
     38          extern I2C_HandleTypeDef hi2c1;

   \                                 In section .bss, align 4
     39          UART_HandleTypeDef huart6;
   \                     huart6:
   \   00000000                      DS8 112

   \                                 In section .bss, align 4
     40          SPI_HandleTypeDef hspi5;
   \                     hspi5:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
     41          GPIO_InitTypeDef GPIO_INS;
   \                     GPIO_INS:
   \   00000000                      DS8 20
     42          

   \                                 In section .bss, align 4
     43          AUDIO_IN_BufferTypeDef Buffer1, Buffer2;
   \                     Buffer1:
   \   00000000                      DS8 18448

   \                                 In section .bss, align 4
   \                     Buffer2:
   \   00000000                      DS8 18448

   \                                 In section .bss, align 4
     44          AUDIO_IN_BufferTypeDef Buffer3;
   \                     Buffer3:
   \   00000000                      DS8 18448
     45          
     46          

   \                                 In section .data, align 4
     47          uint8_t  pI2CData[20]= {0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190};
   \                     pI2CData:
   \   00000000   0x00 0x0A          DC8 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150
   \              0x14 0x1E    
   \              0x28 0x32    
   \              0x3C 0x46    
   \              0x50 0x5A    
   \              0x64 0x6E    
   \              0x78 0x82    
   \              0x8C 0x96    
   \   00000010   0xA0 0xAA          DC8 160, 170, 180, 190
   \              0xB4 0xBE    

   \                                 In section .bss, align 4
     48          uint8_t  pI2CRx[10];
   \                     pI2CRx:
   \   00000000                      DS8 12
     49          extern uint8_t  pcSTAComnd[19];
     50          extern const uint16_t AUDIO_SAMPLE[];
     51          
     52          

   \                                 In section .bss, align 2
     53          uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
   \                     idxSPI5DataBuf1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxSPI5DataBuf2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     54          uint16_t __IO cntRisingEXTI;
   \                     cntRisingEXTI:
   \   00000000                      DS8 2
     55          
     56          /* Buffer used for reception */

   \                                 In section .bss, align 4
     57          uint8_t aRxBuffer[1024];
   \                     aRxBuffer:
   \   00000000                      DS8 1024
     58          
     59          
     60          #if (DEBUG)
     61          uint8_t  pUARTBuf[128];
     62          #endif
     63          
     64          /* Private function prototypes -----------------------------------------------*/
     65          static void SystemClock_Config(void);
     66          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id);
                             ^
Warning[Pe177]: function "USBH_UserProcess" was declared but never referenced
     67          static void AUDIO_InitApplication(void);
                             ^
Warning[Pe177]: function "AUDIO_InitApplication" was declared but never
          referenced
     68          static void CPU_CACHE_Enable(void);
     69          static void SystemClock_Config1(void);
                             ^
Warning[Pe177]: function "SystemClock_Config1" was declared but never
          referenced
     70          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
     71          
     72          void UART6_Init(void);
     73          void MX_SPI5_Init(void);
     74          void ReadSTASeq(uint8_t Addr, uint8_t *pBufOut,uint8_t Len );
     75          void WriteSTAByte(uint8_t Addr, uint8_t *pBufIn, uint8_t len);
     76          void SPI5_CallBack(SPI_HandleTypeDef *hspi);
     77          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
     78          
     79          

   \                                 In section .bss, align 1
     80          char __IO flg10ms;
   \                     flg10ms:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     81          uint8_t flgSTAIni;
   \                     flgSTAIni:
   \   00000000                      DS8 1
     82          
     83          
     84          /* Private functions ---------------------------------------------------------*/
     85          
     86          /**
     87            * @brief  Main program
     88            * @param  None
     89            * @retval None
     90            */

   \                                 In section .text, align 2, keep-with-next
     91          int main(void)
     92          {
   \                     main: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     93          
     94             uint8_t j;
     95             j=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0004             MOVS     R4,R0
     96            /* Enable the CPU Cache */
     97            CPU_CACHE_Enable();
   \   00000008   0x.... 0x....      BL       CPU_CACHE_Enable
     98            
     99            /* STM32F7xx HAL library initialization:
    100                 - Configure the Flash ART accelerator on ITCM interface
    101                 - Configure the Systick to generate an interrupt each 1 msec
    102                 - Set NVIC Group Priority to 4
    103                 - Global MSP (MCU Support Package) initialization
    104               */   
    105            HAL_Init();
   \   0000000C   0x.... 0x....      BL       HAL_Init
    106            
    107            /* Configure the system clock to 216 MHz */
    108            SystemClock_Config(); 
   \   00000010   0x.... 0x....      BL       SystemClock_Config
    109            //SystemClock_Config1();
    110          
    111            /* Init Audio Application */
    112            //AUDIO_InitApplication();
    113              /* Configure LED1 */
    114            BSP_LED_Init(LED1);
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       BSP_LED_Init
    115            BSP_LED_Init(LED2);
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       BSP_LED_Init
    116            
    117            /* Initialize for Audio player with CS43L22 */
    118             WavePlayerInit(48000);
   \   00000020   0xF64B 0x3080      MOVW     R0,#+48000
   \   00000024   0x.... 0x....      BL       WavePlayerInit
    119          
    120              /* Play on */
    121            AudioFlashPlay((uint16_t*)(AUDIO_SAMPLE + AUIDO_START_ADDRESS),AUDIO_FILE_SZE,AUIDO_START_ADDRESS);
   \   00000028   0x223A             MOVS     R2,#+58
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable12_5  ;; 0xf1b30
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable12_6
   \   00000032   0x.... 0x....      BL       AudioFlashPlay
    122            //while(1);
    123            
    124            /* Init TS module */
    125            //BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
    126          
    127            /* Init Host Library */
    128            //USBH_Init(&hUSBHost, USBH_UserProcess, 0);
    129          
    130            /* Add Supported Class */
    131            //USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
    132            
    133            /* Start Host Process */
    134            //USBH_Start(&hUSBHost);
    135          
    136           
    137            
    138           
    139          
    140             /* ----------------------*/
    141             __GPIOB_CLK_ENABLE();
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable12_7  ;; 0x40023830
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable12_7  ;; 0x40023830
   \   00000044   0x6008             STR      R0,[R1, #+0]
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable12_7  ;; 0x40023830
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0x9800             LDR      R0,[SP, #+0]
    142            GPIO_INS.Pin = GPIO_PIN_4;
   \   00000054   0x2010             MOVS     R0,#+16
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable12_8
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    143            GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable12_9  ;; 0x10110000
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable12_8
   \   00000064   0x6048             STR      R0,[R1, #+4]
    144            GPIO_INS.Pull =GPIO_NOPULL;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable12_8
   \   0000006C   0x6088             STR      R0,[R1, #+8]
    145            GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   0000006E   0x2003             MOVS     R0,#+3
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable12_8
   \   00000074   0x60C8             STR      R0,[R1, #+12]
    146            HAL_GPIO_Init(GPIOB,&GPIO_INS);
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable12_8
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable12_10  ;; 0x40020400
   \   0000007E   0x.... 0x....      BL       HAL_GPIO_Init
    147          
    148            /* Enable and set Button EXTI Interrupt to the lowest priority */
    149            HAL_NVIC_SetPriority((IRQn_Type)EXTI4_IRQn, 0x0F, 0x00);
   \   00000082   0x2200             MOVS     R2,#+0
   \   00000084   0x210F             MOVS     R1,#+15
   \   00000086   0x200A             MOVS     R0,#+10
   \   00000088   0x.... 0x....      BL       HAL_NVIC_SetPriority
    150            HAL_NVIC_EnableIRQ((IRQn_Type)EXTI4_IRQn);
   \   0000008C   0x200A             MOVS     R0,#+10
   \   0000008E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    151            /*-----------------------*/
    152          	
    153          
    154            //sop1hc
    155            ///////Audio_Streaming_Ini();
    156            /* control the STA321 */
    157            ///////MX_I2C1_Init(); 
    158            //MX_SPI5_Init();
    159            //HAL_Delay(10000);
    160            //__HAL_SPI_DISABLE(&hspi5);
    161            
    162            ////////I2S_Init();
    163          
    164            ////////STA321MP_Ini();	
    165          #if (DEBUG)  
    166            /* UART for debug */
    167            UART6_Init();
    168          #endif
    169            
    170          
    171          
    172           
    173            /* Run Application (Blocking mode) */
    174            while (1)
    175            {
    176          
    177          
    178          	/* USB Host Background task */
    179              //USBH_Process(&hUSBHost);
    180              
    181              /* AUDIO Menu Process */
    182              //AUDIO_MenuProcess();
    183          
    184          
    185          
    186              	  //if(HAL_SPI_TransmitReceive_IT(&hspi5, (uint8_t*)&Buffer1.pcm_buff[0], (uint8_t *)aRxBuffer, 1024) != HAL_OK)
    187                   {
    188                      /* Transfer error in transmission process */
    189                     //Error_Handler();
    190                    }
    191              if (flg10ms==1)
   \                     ??main_0: (+1)
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x2801             CMP      R0,#+1
   \   0000009A   0xD1FA             BNE.N    ??main_0
    192              {
    193                  flg10ms=0;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable12_11
   \   000000A2   0x7008             STRB     R0,[R1, #+0]
    194          		
    195                  //BSP_LED_Toggle(LED1);
    196          
    197          
    198                  //HAL_SPI_Receive_IT(&hspi5,(uint8_t *)&Buffer1.pcm_buff[0],124);
    199          	    //HAL_SPI_Receive(&hspi5,(uint8_t *)aRxBuffer,124,1000);
    200          
    201          	    //ReadSTASeq(pI2CData[j], pI2CRx, 10);
    202          		 
    203          
    204          #if (DEBUG)
    205          	     for(uint8_t i=0;i<10;i++)
    206          	     {
    207          		    sprintf(pUARTBuf,"Reg[ 0x%.2X ]: 0x%.2X \r\n",(pI2CData[j]+i),pI2CRx[i]);
    208          
    209          	        while(HAL_UART_Transmit(&huart6,pUARTBuf,20,1000)!= HAL_OK)
    210          	        {
    211          	          ;
    212          	        }
    213          	     }		   
    214          #endif
    215          
    216               
    217                 j++;
   \   000000A4   0x1C64             ADDS     R4,R4,#+1
    218          
    219                 if (j==100) //50*10ms = 500 ms
   \   000000A6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A8   0x2C64             CMP      R4,#+100
   \   000000AA   0xD1F2             BNE.N    ??main_0
    220                 {
    221           
    222          
    223          #if (DEBUG)
    224          		 sprintf(pUARTBuf,"------------------");
    225          		 while(HAL_UART_Transmit(&huart6,pUARTBuf,30,1000)!= HAL_OK)
    226          	     {
    227          	          ;
    228          	      }
    229          #endif
    230                   BSP_LED_Toggle(LED1);
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x.... 0x....      BL       BSP_LED_Toggle
    231          		 //BSP_LED_Toggle(LED2);
    232          	   	 j=0;
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x0004             MOVS     R4,R0
   \   000000B6   0xE7EC             B.N      ??main_0
    233                           
    234                 }
    235          
    236          
    237              }
    238            }
    239            
    240          }
    241          
    242          /**
    243            * @brief  Toggle Leds.
    244            * @param  None
    245            * @retval None
    246            */

   \                                 In section .text, align 2, keep-with-next
    247          void Toggle_Leds(void)
    248          {
    249            static uint32_t ticks = 0;
    250          
    251            if (ticks++ > 200)
   \                     Toggle_Leds: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x1C41             ADDS     R1,R0,#+1
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable12_12
   \   0000000C   0x6011             STR      R1,[R2, #+0]
   \   0000000E   0x28C9             CMP      R0,#+201
   \   00000010   0xD303             BCC.N    ??Toggle_Leds_0
    252            {
    253              //BSP_LED_Toggle(LED1);
    254              ticks = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable12_12
   \   00000018   0x6008             STR      R0,[R1, #+0]
    255            }
    256          }
   \                     ??Toggle_Leds_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??ticks:
   \   00000000                      DS8 4
    257          
    258          
    259          /**
    260            * @brief  System Clock Configuration
    261            *         The system Clock is configured as follow : 
    262            *            System Clock source            = PLL (HSE)
    263            *            SYSCLK(Hz)                     = 216000000
    264            *            HCLK(Hz)                       = 216000000
    265            *            AHB Prescaler                  = 1
    266            *            APB1 Prescaler                 = 4
    267            *            APB2 Prescaler                 = 2
    268            *            HSE Frequency(Hz)              = 25000000
    269            *            PLL_M                          = 25
    270            *            PLL_N                          = 432
    271            *            PLL_P                          = 2
    272            *            PLL_Q                          = 9
    273            *            VDD(V)                         = 3.3
    274            *            Main regulator output voltage  = Scale1 mode
    275            *            Flash Latency(WS)              = 7
    276            * @param  None
    277            * @retval None
    278            */

   \                                 In section .text, align 2, keep-with-next
    279          static void SystemClock_Config(void)
    280          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB0B3             SUB      SP,SP,#+204
    281          
    282             RCC_OscInitTypeDef RCC_OscInitStruct;
    283            RCC_ClkInitTypeDef RCC_ClkInitStruct;
    284            RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    285          
    286            __PWR_CLK_ENABLE();
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable12_13  ;; 0x40023840
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable12_13  ;; 0x40023840
   \   00000012   0x6008             STR      R0,[R1, #+0]
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable12_13  ;; 0x40023840
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF010 0x5080      ANDS     R0,R0,#0x10000000
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x9800             LDR      R0,[SP, #+0]
    287          
    288            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable12_14  ;; 0x40007000
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF430 0x4040      BICS     R0,R0,#0xC000
   \   0000002C   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable12_14  ;; 0x40007000
   \   00000034   0x6008             STR      R0,[R1, #+0]
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable12_14  ;; 0x40007000
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF410 0x4040      ANDS     R0,R0,#0xC000
   \   00000040   0x9000             STR      R0,[SP, #+0]
   \   00000042   0x9800             LDR      R0,[SP, #+0]
    289          
    290            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0x9006             STR      R0,[SP, #+24]
    291            RCC_OscInitStruct.HSIState = RCC_HSI_ON;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x9009             STR      R0,[SP, #+36]
    292            RCC_OscInitStruct.HSICalibrationValue = 16;
   \   0000004C   0x2010             MOVS     R0,#+16
   \   0000004E   0x900A             STR      R0,[SP, #+40]
    293            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x900C             STR      R0,[SP, #+48]
    294            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x900D             STR      R0,[SP, #+52]
    295            RCC_OscInitStruct.PLL.PLLM = 16;
   \   00000058   0x2010             MOVS     R0,#+16
   \   0000005A   0x900E             STR      R0,[SP, #+56]
    296            RCC_OscInitStruct.PLL.PLLN = 200;
   \   0000005C   0x20C8             MOVS     R0,#+200
   \   0000005E   0x900F             STR      R0,[SP, #+60]
    297            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0x9010             STR      R0,[SP, #+64]
    298            RCC_OscInitStruct.PLL.PLLQ = 2;
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0x9011             STR      R0,[SP, #+68]
    299            HAL_RCC_OscConfig(&RCC_OscInitStruct);
   \   00000068   0xA806             ADD      R0,SP,#+24
   \   0000006A   0x.... 0x....      BL       HAL_RCC_OscConfig
    300          
    301            HAL_PWREx_ActivateOverDrive();
   \   0000006E   0x.... 0x....      BL       HAL_PWREx_EnableOverDrive
    302          
    303            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    304                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   \   00000072   0x200F             MOVS     R0,#+15
   \   00000074   0x9001             STR      R0,[SP, #+4]
    305            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \   00000076   0x2002             MOVS     R0,#+2
   \   00000078   0x9002             STR      R0,[SP, #+8]
    306            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
   \   0000007A   0x2080             MOVS     R0,#+128
   \   0000007C   0x9003             STR      R0,[SP, #+12]
    307            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x9004             STR      R0,[SP, #+16]
    308            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x9005             STR      R0,[SP, #+20]
    309            HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
   \   00000086   0x2101             MOVS     R1,#+1
   \   00000088   0xA801             ADD      R0,SP,#+4
   \   0000008A   0x.... 0x....      BL       HAL_RCC_ClockConfig
    310          
    311            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
    312                                        |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2S;
   \   0000008E   0xF24C 0x2001      MOVW     R0,#+49665
   \   00000092   0x9012             STR      R0,[SP, #+72]
    313            PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
   \   00000094   0x20C0             MOVS     R0,#+192
   \   00000096   0x9013             STR      R0,[SP, #+76]
    314            PeriphClkInitStruct.PLLI2S.PLLI2SP = 0;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x9016             STR      R0,[SP, #+88]
    315            PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
   \   0000009C   0x2002             MOVS     R0,#+2
   \   0000009E   0x9014             STR      R0,[SP, #+80]
    316            PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
   \   000000A0   0x2002             MOVS     R0,#+2
   \   000000A2   0x9015             STR      R0,[SP, #+84]
    317            PeriphClkInitStruct.PLLI2SDivQ = 1;
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x901B             STR      R0,[SP, #+108]
    318            PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x901F             STR      R0,[SP, #+124]
    319            PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x9026             STR      R0,[SP, #+152]
    320            PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x902B             STR      R0,[SP, #+172]
    321            PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x902C             STR      R0,[SP, #+176]
    322            HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
   \   000000B8   0xA812             ADD      R0,SP,#+72
   \   000000BA   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    323          
    324            HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
   \   000000BE   0x.... 0x....      BL       HAL_RCC_GetHCLKFreq
   \   000000C2   0xF44F 0x717A      MOV      R1,#+1000
   \   000000C6   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000CA   0x.... 0x....      BL       HAL_SYSTICK_Config
    325          
    326            HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
   \   000000CE   0x2004             MOVS     R0,#+4
   \   000000D0   0x.... 0x....      BL       HAL_SYSTICK_CLKSourceConfig
    327          }
   \   000000D4   0xB033             ADD      SP,SP,#+204
   \   000000D6   0xBD00             POP      {PC}             ;; return
    328          
    329          
    330          
    331          #ifdef  USE_FULL_ASSERT
    332          /**
    333            * @brief  Reports the name of the source file and the source line number
    334            *         where the assert_param error has occurred.
    335            * @param  file: pointer to the source file name
    336            * @param  line: assert_param error line source number
    337            * @retval None
    338            */
    339          void assert_failed(uint8_t* file, uint32_t line)
    340          { 
    341            /* User can add his own implementation to report the file name and line number,
    342               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    343          
    344            /* Infinite loop */
    345            while (1)
    346            {
    347            }
    348          }
    349          #endif
    350          
    351          /**
    352            * @brief  CPU L1-Cache enable.
    353            * @param  None
    354            * @retval None
    355            */

   \                                 In section .text, align 2, keep-with-next
    356          static void CPU_CACHE_Enable(void)
    357          {
   \                     CPU_CACHE_Enable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    358            /* Enable I-Cache */
    359            SCB_EnableICache();
   \   00000002   0x.... 0x....      BL       SCB_EnableICache
    360          
    361            /* Enable D-Cache */
    362            SCB_EnableDCache();
   \   00000006   0x.... 0x....      BL       SCB_EnableDCache
    363          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    364          
    365          
    366          /* I2C1 init function */

   \                                 In section .text, align 2, keep-with-next
    367          void MX_I2C1_Init(void)
    368          {
   \                     MX_I2C1_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    369          
    370          
    371            hi2c1.Instance = I2C1;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12_15  ;; 0x40005400
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable12_16
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    372            hi2c1.Init.Timing =0x00C0EFFF; //I2C_SPEED DISCOVERY_I2Cx_TIMING;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable12_17  ;; 0xc0efff
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable12_16
   \   00000014   0x6048             STR      R0,[R1, #+4]
    373                                                     //I2C_TIMING ;//I2C_TIMING  0x00303D5D
    374                                                     //DISCOVERY_I2Cx_TIMING
    375            hi2c1.Init.OwnAddress1 = 0x33;
   \   00000016   0x2033             MOVS     R0,#+51
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable12_16
   \   0000001C   0x6088             STR      R0,[R1, #+8]
    376            hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable12_16
   \   00000024   0x60C8             STR      R0,[R1, #+12]
    377            hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable12_16
   \   0000002C   0x6108             STR      R0,[R1, #+16]
    378            hi2c1.Init.OwnAddress2 = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable12_16
   \   00000034   0x6148             STR      R0,[R1, #+20]
    379            hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable12_16
   \   0000003C   0x6188             STR      R0,[R1, #+24]
    380            hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable12_16
   \   00000044   0x61C8             STR      R0,[R1, #+28]
    381            hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable12_16
   \   0000004C   0x6208             STR      R0,[R1, #+32]
    382            HAL_I2C_Init(&hi2c1);
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable12_16
   \   00000052   0x.... 0x....      BL       HAL_I2C_Init
    383          
    384             /*Configure Analogue filter */
    385            HAL_I2CEx_AnalogFilter_Config(&hi2c1, I2C_ANALOGFILTER_ENABLE);
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable12_16
   \   0000005C   0x.... 0x....      BL       HAL_I2CEx_ConfigAnalogFilter
    386          
    387          }
   \   00000060   0xBD01             POP      {R0,PC}          ;; return
    388          
    389          
    390          

   \                                 In section .text, align 2, keep-with-next
    391          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
    392          {
   \                     HAL_I2C_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    393          
    394            GPIO_InitTypeDef GPIO_InitStruct;
    395              
    396            if(hi2c->Instance==I2C1)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable12_15  ;; 0x40005400
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD135             BNE.N    ??HAL_I2C_MspInit_0
    397            {
    398            /* USER CODE BEGIN I2C1_MspInit 0 */
    399          
    400              /*##-1- Configure the I2C clock source. The clock is derived from the SYSCLK #*/
    401              //RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
    402              //RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    403              //HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
    404          
    405              /*##-2- Enable peripherals and GPIO Clocks #################################*/
    406              /* Enable GPIO TX/RX clock */
    407              __HAL_RCC_GPIOB_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable12_7  ;; 0x40023830
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable12_7  ;; 0x40023830
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable12_7  ;; 0x40023830
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
    408          
    409            
    410            
    411              /**I2C1 GPIO Configuration    
    412              PB6     ------> I2C1_SCL (PB6)
    413              PB7     ------> I2C1_SDA (PB7) 
    414              */
    415              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
   \   0000002E   0x20C0             MOVS     R0,#+192
   \   00000030   0x9001             STR      R0,[SP, #+4]
    416              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \   00000032   0x2012             MOVS     R0,#+18
   \   00000034   0x9002             STR      R0,[SP, #+8]
    417              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x9003             STR      R0,[SP, #+12]
    418              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   0000003A   0x2003             MOVS     R0,#+3
   \   0000003C   0x9004             STR      R0,[SP, #+16]
    419              GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
   \   0000003E   0x2004             MOVS     R0,#+4
   \   00000040   0x9005             STR      R0,[SP, #+20]
    420              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000042   0xA901             ADD      R1,SP,#+4
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable12_10  ;; 0x40020400
   \   00000048   0x.... 0x....      BL       HAL_GPIO_Init
    421          
    422              /* Peripheral clock enable */
    423              __HAL_RCC_I2C1_CLK_ENABLE();
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable12_13  ;; 0x40023840
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable12_13  ;; 0x40023840
   \   0000005A   0x6008             STR      R0,[R1, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable12_13  ;; 0x40023840
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF410 0x1000      ANDS     R0,R0,#0x200000
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0x9800             LDR      R0,[SP, #+0]
    424          	  /* Peripheral interrupt init*/
    425              HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
   \   0000006A   0x2200             MOVS     R2,#+0
   \   0000006C   0x2103             MOVS     R1,#+3
   \   0000006E   0x201F             MOVS     R0,#+31
   \   00000070   0x.... 0x....      BL       HAL_NVIC_SetPriority
    426              HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \   00000074   0x201F             MOVS     R0,#+31
   \   00000076   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   0000007A   0xE022             B.N      ??HAL_I2C_MspInit_1
    427            /* USER CODE BEGIN I2C1_MspInit 1 */
    428          
    429          
    430            /* USER CODE END I2C1_MspInit 1 */
    431            }
    432            else if(hi2c->Instance==I2C2)
   \                     ??HAL_I2C_MspInit_0: (+1)
   \   0000007C   0x6820             LDR      R0,[R4, #+0]
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable12_18  ;; 0x40005800
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xD11D             BNE.N    ??HAL_I2C_MspInit_1
    433            {
    434            /* USER CODE BEGIN I2C2_MspInit 0 */
    435          
    436            /* USER CODE END I2C2_MspInit 0 */
    437            
    438              /**I2C2 GPIO Configuration    
    439              PF0     ------> I2C2_SDA
    440              PF1     ------> I2C2_SCL 
    441              */
    442              GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
   \   00000086   0x2003             MOVS     R0,#+3
   \   00000088   0x9001             STR      R0,[SP, #+4]
    443              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \   0000008A   0x2012             MOVS     R0,#+18
   \   0000008C   0x9002             STR      R0,[SP, #+8]
    444              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   0000008E   0x2001             MOVS     R0,#+1
   \   00000090   0x9003             STR      R0,[SP, #+12]
    445              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000092   0x2003             MOVS     R0,#+3
   \   00000094   0x9004             STR      R0,[SP, #+16]
    446              GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
   \   00000096   0x2004             MOVS     R0,#+4
   \   00000098   0x9005             STR      R0,[SP, #+20]
    447              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   \   0000009A   0xA901             ADD      R1,SP,#+4
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable12_19  ;; 0x40021400
   \   000000A0   0x.... 0x....      BL       HAL_GPIO_Init
    448          
    449              /* Peripheral clock enable */
    450              __HAL_RCC_I2C2_CLK_ENABLE();
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable12_13  ;; 0x40023840
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable12_13  ;; 0x40023840
   \   000000B2   0x6008             STR      R0,[R1, #+0]
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable12_13  ;; 0x40023840
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0xF410 0x0080      ANDS     R0,R0,#0x400000
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0x9800             LDR      R0,[SP, #+0]
    451            /* USER CODE BEGIN I2C2_MspInit 1 */
    452          
    453            /* USER CODE END I2C2_MspInit 1 */
    454            }
    455          
    456          }
   \                     ??HAL_I2C_MspInit_1: (+1)
   \   000000C2   0xB006             ADD      SP,SP,#+24
   \   000000C4   0xBD10             POP      {R4,PC}          ;; return
    457          
    458          /*---------------------------------------------------*/
    459          /*   UART                                            */
    460          /* UART4 init function */

   \                                 In section .text, align 2, keep-with-next
    461          void UART6_Init(void)
    462          {
   \                     UART6_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    463          
    464            huart6.Instance = USART6;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12_20  ;; 0x40011400
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    465            huart6.Init.BaudRate = 115200;
   \   0000000C   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   00000014   0x6048             STR      R0,[R1, #+4]
    466            huart6.Init.WordLength = UART_WORDLENGTH_8B;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   0000001C   0x6088             STR      R0,[R1, #+8]
    467            huart6.Init.StopBits = UART_STOPBITS_1;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   00000024   0x60C8             STR      R0,[R1, #+12]
    468            huart6.Init.Parity = UART_PARITY_NONE;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   0000002C   0x6108             STR      R0,[R1, #+16]
    469            huart6.Init.Mode = UART_MODE_TX_RX;
   \   0000002E   0x200C             MOVS     R0,#+12
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   00000034   0x6148             STR      R0,[R1, #+20]
    470            huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   0000003C   0x6188             STR      R0,[R1, #+24]
    471            huart6.Init.OverSampling = UART_OVERSAMPLING_16;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   00000044   0x61C8             STR      R0,[R1, #+28]
    472            huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED ;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   0000004C   0x6208             STR      R0,[R1, #+32]
    473            huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   00000054   0x6248             STR      R0,[R1, #+36]
    474            HAL_UART_Init(&huart6);
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable12_21
   \   0000005A   0x.... 0x....      BL       HAL_UART_Init
    475          
    476          }
   \   0000005E   0xBD01             POP      {R0,PC}          ;; return
    477          

   \                                 In section .text, align 2, keep-with-next
    478          void HAL_UART_MspInit(UART_HandleTypeDef* huart)
    479          {
   \                     HAL_UART_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    480          
    481            GPIO_InitTypeDef GPIO_InitStruct;
    482            if(huart->Instance==USART6)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable12_20  ;; 0x40011400
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD134             BNE.N    ??HAL_UART_MspInit_0
    483            {
    484            /* USER CODE BEGIN UART6_MspInit 0 */
    485          
    486            /* USER CODE END UART4_MspInit 0 */
    487              /* Peripheral clock enable */
    488              __USART6_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable12_22  ;; 0x40023844
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable12_22  ;; 0x40023844
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable12_22  ;; 0x40023844
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF010 0x0020      ANDS     R0,R0,#0x20
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
    489              __GPIOC_CLK_ENABLE();
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable12_7  ;; 0x40023830
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable12_7  ;; 0x40023830
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable12_7  ;; 0x40023830
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
    490            
    491              /**UART4 GPIO Configuration    
    492              PC10     ------> UART4_TX (PC6)
    493              PC11     ------> UART4_RX (PC7)
    494              */
    495              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_6;
   \   0000004C   0x2040             MOVS     R0,#+64
   \   0000004E   0x9001             STR      R0,[SP, #+4]
    496              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x9002             STR      R0,[SP, #+8]
    497              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x9003             STR      R0,[SP, #+12]
    498              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000058   0x2003             MOVS     R0,#+3
   \   0000005A   0x9004             STR      R0,[SP, #+16]
    499              GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
   \   0000005C   0x2008             MOVS     R0,#+8
   \   0000005E   0x9005             STR      R0,[SP, #+20]
    500              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000060   0xA901             ADD      R1,SP,#+4
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable12_23  ;; 0x40020800
   \   00000066   0x.... 0x....      BL       HAL_GPIO_Init
    501          
    502          	  /* NVIC for USART */
    503            HAL_NVIC_SetPriority(USART6_IRQn, 0, 1);
   \   0000006A   0x2201             MOVS     R2,#+1
   \   0000006C   0x2100             MOVS     R1,#+0
   \   0000006E   0x2047             MOVS     R0,#+71
   \   00000070   0x.... 0x....      BL       HAL_NVIC_SetPriority
    504            HAL_NVIC_EnableIRQ(USART6_IRQn);
   \   00000074   0x2047             MOVS     R0,#+71
   \   00000076   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    505          
    506            /* USER CODE BEGIN UART4_MspInit 1 */
    507          
    508            /* USER CODE END UART4_MspInit 1 */
    509            }
    510          
    511          }
   \                     ??HAL_UART_MspInit_0: (+1)
   \   0000007A   0xB006             ADD      SP,SP,#+24
   \   0000007C   0xBD10             POP      {R4,PC}          ;; return
    512          
    513          
    514          

   \                                 In section .text, align 2, keep-with-next
    515          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
    516          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    517          
    518            GPIO_InitTypeDef GPIO_InitStruct;
    519            if(hspi->Instance==SPI4)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable12_24  ;; 0x40013400
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD11C             BNE.N    ??HAL_SPI_MspInit_0
    520            {
    521            /* USER CODE BEGIN SPI4_MspInit 0 */
    522          
    523            /* USER CODE END SPI4_MspInit 0 */
    524              /* Peripheral clock enable */
    525              __SPI4_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable12_22  ;; 0x40023844
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable12_22  ;; 0x40023844
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x....             LDR.N    R0,??DataTable12_22  ;; 0x40023844
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF410 0x5000      ANDS     R0,R0,#0x2000
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x9800             LDR      R0,[SP, #+0]
    526            
    527            
    528              /**SPI4 GPIO Configuration    
    529              PE2     ------> SPI4_SCK
    530              PE4     ------> SPI4_NSS
    531              PE5     ------> SPI4_MISO
    532              PE6     ------> SPI4_MOSI 
    533              */
    534              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   \   0000002C   0x2074             MOVS     R0,#+116
   \   0000002E   0x9001             STR      R0,[SP, #+4]
    535              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000030   0x2002             MOVS     R0,#+2
   \   00000032   0x9002             STR      R0,[SP, #+8]
    536              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x9003             STR      R0,[SP, #+12]
    537              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0x9004             STR      R0,[SP, #+16]
    538              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   \   0000003C   0x2005             MOVS     R0,#+5
   \   0000003E   0x9005             STR      R0,[SP, #+20]
    539              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   \   00000040   0xA901             ADD      R1,SP,#+4
   \   00000042   0x....             LDR.N    R0,??DataTable12_25  ;; 0x40021000
   \   00000044   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000048   0xE052             B.N      ??HAL_SPI_MspInit_1
    540          
    541            /* USER CODE BEGIN SPI4_MspInit 1 */
    542          
    543            /* USER CODE END SPI4_MspInit 1 */
    544            }
    545            else if(hspi->Instance==SPI5)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   0000004A   0x6820             LDR      R0,[R4, #+0]
   \   0000004C   0x....             LDR.N    R1,??DataTable12_26  ;; 0x40015000
   \   0000004E   0x4288             CMP      R0,R1
   \   00000050   0xD12F             BNE.N    ??HAL_SPI_MspInit_2
    546            {
    547            /* USER CODE BEGIN SPI5_MspInit 0 */
    548          
    549            /* USER CODE END SPI5_MspInit 0 */
    550              /* Peripheral clock enable */
    551              __HAL_RCC_SPI5_CLK_ENABLE();
   \   00000052   0x....             LDR.N    R0,??DataTable12_22  ;; 0x40023844
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0xF450 0x1080      ORRS     R0,R0,#0x100000
   \   0000005A   0x....             LDR.N    R1,??DataTable12_22  ;; 0x40023844
   \   0000005C   0x6008             STR      R0,[R1, #+0]
   \   0000005E   0x....             LDR.N    R0,??DataTable12_22  ;; 0x40023844
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF410 0x1080      ANDS     R0,R0,#0x100000
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0x9800             LDR      R0,[SP, #+0]
    552              __HAL_RCC_GPIOF_CLK_ENABLE();
   \   0000006A   0x....             LDR.N    R0,??DataTable12_7  ;; 0x40023830
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000072   0x....             LDR.N    R1,??DataTable12_7  ;; 0x40023830
   \   00000074   0x6008             STR      R0,[R1, #+0]
   \   00000076   0x....             LDR.N    R0,??DataTable12_7  ;; 0x40023830
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0xF010 0x0020      ANDS     R0,R0,#0x20
   \   0000007E   0x9000             STR      R0,[SP, #+0]
   \   00000080   0x9800             LDR      R0,[SP, #+0]
    553            
    554              /**SPI5 GPIO Configuration    
    555              PF7     ------> SPI5_SCK  --> PF7
    556              PF11     ------> SPI5_MOSI --> PF9
    557                               SPI5_MISO --> PF8
    558                                    NSS   -->  PF6
    559              */
    560              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   \   00000082   0xF44F 0x7070      MOV      R0,#+960
   \   00000086   0x9001             STR      R0,[SP, #+4]
    561              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000088   0x2002             MOVS     R0,#+2
   \   0000008A   0x9002             STR      R0,[SP, #+8]
    562              GPIO_InitStruct.Pull = GPIO_PULLDOWN;
   \   0000008C   0x2002             MOVS     R0,#+2
   \   0000008E   0x9003             STR      R0,[SP, #+12]
    563              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000090   0x2003             MOVS     R0,#+3
   \   00000092   0x9004             STR      R0,[SP, #+16]
    564              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   \   00000094   0x2005             MOVS     R0,#+5
   \   00000096   0x9005             STR      R0,[SP, #+20]
    565              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   \   00000098   0xA901             ADD      R1,SP,#+4
   \   0000009A   0x....             LDR.N    R0,??DataTable12_19  ;; 0x40021400
   \   0000009C   0x.... 0x....      BL       HAL_GPIO_Init
    566          
    567            /* Peripheral interrupt init*/
    568              HAL_NVIC_SetPriority(SPI5_IRQn, 2, 2);
   \   000000A0   0x2202             MOVS     R2,#+2
   \   000000A2   0x2102             MOVS     R1,#+2
   \   000000A4   0x2055             MOVS     R0,#+85
   \   000000A6   0x.... 0x....      BL       HAL_NVIC_SetPriority
    569              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   \   000000AA   0x2055             MOVS     R0,#+85
   \   000000AC   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   000000B0   0xE01E             B.N      ??HAL_SPI_MspInit_1
    570            /* USER CODE BEGIN SPI5_MspInit 1 */
    571          
    572            /* USER CODE END SPI5_MspInit 1 */
    573            }
    574            else if(hspi->Instance==SPI6)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   000000B2   0x6820             LDR      R0,[R4, #+0]
   \   000000B4   0x....             LDR.N    R1,??DataTable12_27  ;; 0x40015400
   \   000000B6   0x4288             CMP      R0,R1
   \   000000B8   0xD11A             BNE.N    ??HAL_SPI_MspInit_1
    575            {
    576            /* USER CODE BEGIN SPI6_MspInit 0 */
    577          
    578            /* USER CODE END SPI6_MspInit 0 */
    579              /* Peripheral clock enable */
    580              __SPI6_CLK_ENABLE();
   \   000000BA   0x....             LDR.N    R0,??DataTable12_22  ;; 0x40023844
   \   000000BC   0x6800             LDR      R0,[R0, #+0]
   \   000000BE   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   000000C2   0x....             LDR.N    R1,??DataTable12_22  ;; 0x40023844
   \   000000C4   0x6008             STR      R0,[R1, #+0]
   \   000000C6   0x....             LDR.N    R0,??DataTable12_22  ;; 0x40023844
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0xF410 0x1000      ANDS     R0,R0,#0x200000
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \   000000D0   0x9800             LDR      R0,[SP, #+0]
    581            
    582              /**SPI6 GPIO Configuration    
    583              PG13     ------> SPI6_SCK
    584              PG14     ------> SPI6_MOSI 
    585              */
    586              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   \   000000D2   0xF44F 0x40C0      MOV      R0,#+24576
   \   000000D6   0x9001             STR      R0,[SP, #+4]
    587              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   000000D8   0x2002             MOVS     R0,#+2
   \   000000DA   0x9002             STR      R0,[SP, #+8]
    588              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0x9003             STR      R0,[SP, #+12]
    589              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000000E0   0x2003             MOVS     R0,#+3
   \   000000E2   0x9004             STR      R0,[SP, #+16]
    590              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   \   000000E4   0x2005             MOVS     R0,#+5
   \   000000E6   0x9005             STR      R0,[SP, #+20]
    591              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   \   000000E8   0xA901             ADD      R1,SP,#+4
   \   000000EA   0x....             LDR.N    R0,??DataTable12_28  ;; 0x40021800
   \   000000EC   0x.... 0x....      BL       HAL_GPIO_Init
    592          
    593            /* USER CODE BEGIN SPI6_MspInit 1 */
    594          
    595            /* USER CODE END SPI6_MspInit 1 */
    596            }
    597          
    598          }
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   000000F0   0xB006             ADD      SP,SP,#+24
   \   000000F2   0xBD10             POP      {R4,PC}          ;; return
    599          
    600          
    601          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    602          void MX_SPI5_Init(void)
    603          {
   \                     MX_SPI5_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    604          
    605            hspi5.Instance = SPI5;
   \   00000002   0x....             LDR.N    R0,??DataTable12_26  ;; 0x40015000
   \   00000004   0x....             LDR.N    R1,??DataTable12_29
   \   00000006   0x6008             STR      R0,[R1, #+0]
    606            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable12_29
   \   0000000C   0x6048             STR      R0,[R1, #+4]
    607            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000012   0x....             LDR.N    R1,??DataTable12_29
   \   00000014   0x6088             STR      R0,[R1, #+8]
    608            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000016   0xF44F 0x6070      MOV      R0,#+3840
   \   0000001A   0x....             LDR.N    R1,??DataTable12_29
   \   0000001C   0x60C8             STR      R0,[R1, #+12]
    609            hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR.N    R1,??DataTable12_29
   \   00000022   0x6108             STR      R0,[R1, #+16]
    610            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR.N    R1,??DataTable12_29
   \   00000028   0x6148             STR      R0,[R1, #+20]
    611            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   0000002A   0xF44F 0x7000      MOV      R0,#+512
   \   0000002E   0x....             LDR.N    R1,??DataTable12_29
   \   00000030   0x6188             STR      R0,[R1, #+24]
    612            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR.N    R1,??DataTable12_29
   \   00000036   0x6208             STR      R0,[R1, #+32]
    613            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x....             LDR.N    R1,??DataTable12_29
   \   0000003C   0x6248             STR      R0,[R1, #+36]
    614            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable12_29
   \   00000042   0x6288             STR      R0,[R1, #+40]
    615            hspi5.Init.CRCPolynomial = 7;
   \   00000044   0x2007             MOVS     R0,#+7
   \   00000046   0x....             LDR.N    R1,??DataTable12_29
   \   00000048   0x62C8             STR      R0,[R1, #+44]
    616            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR.N    R1,??DataTable12_29
   \   0000004E   0x6308             STR      R0,[R1, #+48]
    617            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x....             LDR.N    R1,??DataTable12_29
   \   00000054   0x6348             STR      R0,[R1, #+52]
    618            //hspi5.RxISR = SPI5_CallBack;
    619            HAL_SPI_Init(&hspi5);
   \   00000056   0x....             LDR.N    R0,??DataTable12_29
   \   00000058   0x.... 0x....      BL       HAL_SPI_Init
    620          
    621          
    622            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    623            /* Enable TXE, RXNE and ERR interrupt */
    624           __HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   \   0000005C   0x....             LDR.N    R0,??DataTable12_29
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x6840             LDR      R0,[R0, #+4]
   \   00000062   0xF050 0x0060      ORRS     R0,R0,#0x60
   \   00000066   0x....             LDR.N    R1,??DataTable12_29
   \   00000068   0x6809             LDR      R1,[R1, #+0]
   \   0000006A   0x6048             STR      R0,[R1, #+4]
    625          
    626           __HAL_SPI_ENABLE(&hspi5);
   \   0000006C   0x....             LDR.N    R0,??DataTable12_29
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000076   0x....             LDR.N    R1,??DataTable12_29
   \   00000078   0x6809             LDR      R1,[R1, #+0]
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    627          
    628          }
   \   0000007C   0xBD01             POP      {R0,PC}          ;; return
    629          
    630          
    631          

   \                                 In section .text, align 2, keep-with-next
    632          void SPI5_IRQHandler(void)
    633          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    634            static uint16_t stNipple;
    635            static uint8_t stLR, stOder;
    636            
    637            /* USER CODE BEGIN SPI5_IRQn 0 */
    638          
    639            /* USER CODE END SPI5_IRQn 0 */
    640            //HAL_SPI_IRQHandler(&hspi5);
    641            /* USER CODE BEGIN SPI5_IRQn 1 */
    642          
    643            /* USER CODE END SPI5_IRQn 1 */
    644              /* Check if data are available in SPI Data register */
    645            /* SPI in mode Receiver ----------------------------------------------------*/
    646            if(
    647               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    648               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    649               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x....             LDR.N    R0,??DataTable12_29
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6880             LDR      R0,[R0, #+8]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xF100 0x809A      BMI.W    ??SPI5_IRQHandler_0
   \   0000000E   0x....             LDR.N    R0,??DataTable12_29
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x6880             LDR      R0,[R0, #+8]
   \   00000014   0x07C0             LSLS     R0,R0,#+31
   \   00000016   0xF140 0x8094      BPL.W    ??SPI5_IRQHandler_0
   \   0000001A   0x....             LDR.N    R0,??DataTable12_29
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x6840             LDR      R0,[R0, #+4]
   \   00000020   0x0640             LSLS     R0,R0,#+25
   \   00000022   0xF140 0x808E      BPL.W    ??SPI5_IRQHandler_0
    650            {
    651          
    652          
    653             uint16_t test;
    654             test =  SPI_I2S_ReceiveData(SPI5);
   \   00000026   0x....             LDR.N    R0,??DataTable12_26  ;; 0x40015000
   \   00000028   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000002C   0x0004             MOVS     R4,R0
    655             //SPI_I2S_SendData(SPI5,0);
    656             //BSP_LED_Toggle(LED1);
    657             //if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==GPIO_PIN_SET)
    658             {
    659          
    660                stOder^=0x01;
   \   0000002E   0x....             LDR.N    R0,??DataTable12_30
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0xF090 0x0001      EORS     R0,R0,#0x1
   \   00000036   0x....             LDR.N    R1,??DataTable12_30
   \   00000038   0x7008             STRB     R0,[R1, #+0]
    661                if(stOder==0x00)
   \   0000003A   0x....             LDR.N    R0,??DataTable12_30
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD16B             BNE.N    ??SPI5_IRQHandler_1
    662                {
    663          
    664                    //BSP_LED_On(LED1);  
    665          
    666          		  stLR^=0x01;
   \   00000042   0x....             LDR.N    R0,??DataTable12_31
   \   00000044   0x7800             LDRB     R0,[R0, #+0]
   \   00000046   0xF090 0x0001      EORS     R0,R0,#0x1
   \   0000004A   0x....             LDR.N    R1,??DataTable12_31
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    667          		  if (stLR==0x01)
   \   0000004E   0x....             LDR.N    R0,??DataTable12_31
   \   00000050   0x7800             LDRB     R0,[R0, #+0]
   \   00000052   0x2801             CMP      R0,#+1
   \   00000054   0xD130             BNE.N    ??SPI5_IRQHandler_2
    668          		  {
    669          		    if (Buffer1.offset + idxSPI5DataBuf1 < AUDIO_OUT_BUFFER_SIZE-2) 
   \   00000056   0x....             LDR.N    R0,??DataTable12_32
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x....             LDR.N    R1,??DataTable12_33
   \   0000005C   0x8809             LDRH     R1,[R1, #+0]
   \   0000005E   0xFA10 0xF081      UXTAH    R0,R0,R1
   \   00000062   0xF641 0x71FE      MOVW     R1,#+8190
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xD264             BCS.N    ??SPI5_IRQHandler_3
    670          		    {
    671          	               Buffer1.pcm_buff[Buffer1.offset + idxSPI5DataBuf1++] =((test>>4)|(stNipple<<12));
   \   0000006A   0x....             LDR.N    R0,??DataTable12_33
   \   0000006C   0x8800             LDRH     R0,[R0, #+0]
   \   0000006E   0x1C41             ADDS     R1,R0,#+1
   \   00000070   0x....             LDR.N    R2,??DataTable12_33
   \   00000072   0x8011             STRH     R1,[R2, #+0]
   \   00000074   0x....             LDR.N    R1,??DataTable12_34
   \   00000076   0x....             LDR.N    R2,??DataTable12_32
   \   00000078   0x6812             LDR      R2,[R2, #+0]
   \   0000007A   0xFA12 0xF080      UXTAH    R0,R2,R0
   \   0000007E   0x0022             MOVS     R2,R4
   \   00000080   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000082   0x....             LDR.N    R3,??DataTable12_35
   \   00000084   0x881B             LDRH     R3,[R3, #+0]
   \   00000086   0x031B             LSLS     R3,R3,#+12
   \   00000088   0xEA53 0x1212      ORRS     R2,R3,R2, LSR #+4
   \   0000008C   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
    672          				   Buffer1.pcm_buff[Buffer1.offset + idxSPI5DataBuf1++] =((test>>4)|(stNipple<<12));
   \   00000090   0x....             LDR.N    R0,??DataTable12_33
   \   00000092   0x8800             LDRH     R0,[R0, #+0]
   \   00000094   0x1C41             ADDS     R1,R0,#+1
   \   00000096   0x....             LDR.N    R2,??DataTable12_33
   \   00000098   0x8011             STRH     R1,[R2, #+0]
   \   0000009A   0x....             LDR.N    R1,??DataTable12_34
   \   0000009C   0x....             LDR.N    R2,??DataTable12_32
   \   0000009E   0x6812             LDR      R2,[R2, #+0]
   \   000000A0   0xFA12 0xF080      UXTAH    R0,R2,R0
   \   000000A4   0x0022             MOVS     R2,R4
   \   000000A6   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000A8   0x....             LDR.N    R3,??DataTable12_35
   \   000000AA   0x881B             LDRH     R3,[R3, #+0]
   \   000000AC   0x031B             LSLS     R3,R3,#+12
   \   000000AE   0xEA53 0x1212      ORRS     R2,R3,R2, LSR #+4
   \   000000B2   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
   \   000000B6   0xE03D             B.N      ??SPI5_IRQHandler_3
    673          		    }
    674          		  }
    675          		  else
    676          		  {
    677          		     if (Buffer2.offset + idxSPI5DataBuf2 < AUDIO_OUT_BUFFER_SIZE-2)
   \                     ??SPI5_IRQHandler_2: (+1)
   \   000000B8   0x....             LDR.N    R0,??DataTable12_36
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x....             LDR.N    R1,??DataTable12_37
   \   000000BE   0x8809             LDRH     R1,[R1, #+0]
   \   000000C0   0xFA10 0xF081      UXTAH    R0,R0,R1
   \   000000C4   0xF641 0x71FE      MOVW     R1,#+8190
   \   000000C8   0x4288             CMP      R0,R1
   \   000000CA   0xD233             BCS.N    ??SPI5_IRQHandler_3
    678          		     {
    679          	               Buffer2.pcm_buff[Buffer2.offset + idxSPI5DataBuf2++] = ((test>>4)|(stNipple<<12));
   \   000000CC   0x....             LDR.N    R0,??DataTable12_37
   \   000000CE   0x8800             LDRH     R0,[R0, #+0]
   \   000000D0   0x1C41             ADDS     R1,R0,#+1
   \   000000D2   0x....             LDR.N    R2,??DataTable12_37
   \   000000D4   0x8011             STRH     R1,[R2, #+0]
   \   000000D6   0x....             LDR.N    R1,??DataTable12_38
   \   000000D8   0x....             LDR.N    R2,??DataTable12_36
   \   000000DA   0x6812             LDR      R2,[R2, #+0]
   \   000000DC   0xFA12 0xF080      UXTAH    R0,R2,R0
   \   000000E0   0x0022             MOVS     R2,R4
   \   000000E2   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000E4   0x....             LDR.N    R3,??DataTable12_35
   \   000000E6   0x881B             LDRH     R3,[R3, #+0]
   \   000000E8   0x031B             LSLS     R3,R3,#+12
   \   000000EA   0xEA53 0x1212      ORRS     R2,R3,R2, LSR #+4
   \   000000EE   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
    680          				   Buffer2.pcm_buff[Buffer2.offset + idxSPI5DataBuf2++] = ((test>>4)|(stNipple<<12));
   \   000000F2   0x....             LDR.N    R0,??DataTable12_37
   \   000000F4   0x8800             LDRH     R0,[R0, #+0]
   \   000000F6   0x1C41             ADDS     R1,R0,#+1
   \   000000F8   0x....             LDR.N    R2,??DataTable12_37
   \   000000FA   0x8011             STRH     R1,[R2, #+0]
   \   000000FC   0x....             LDR.N    R1,??DataTable12_38
   \   000000FE   0x....             LDR.N    R2,??DataTable12_36
   \   00000100   0x6812             LDR      R2,[R2, #+0]
   \   00000102   0xFA12 0xF080      UXTAH    R0,R2,R0
   \   00000106   0x0022             MOVS     R2,R4
   \   00000108   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000010A   0x....             LDR.N    R3,??DataTable12_35
   \   0000010C   0x881B             LDRH     R3,[R3, #+0]
   \   0000010E   0x031B             LSLS     R3,R3,#+12
   \   00000110   0xEA53 0x1212      ORRS     R2,R3,R2, LSR #+4
   \   00000114   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
   \   00000118   0xE00C             B.N      ??SPI5_IRQHandler_3
    681          		     }
    682          
    683          		  }
    684          			  
    685                }
    686          	  else
    687          	  {
    688          	      //Buffer1.pcm_buff[idxSPI5DataBuf++] = 0;
    689          	      //BSP_LED_Off(LED1);  
    690                     stNipple = (test);
   \                     ??SPI5_IRQHandler_1: (+1)
   \   0000011A   0x....             LDR.N    R0,??DataTable12_35
   \   0000011C   0x8004             STRH     R4,[R0, #+0]
    691          		  Buffer3.pcm_buff[Buffer2.offset + idxSPI5DataBuf2] = stNipple;
   \   0000011E   0x....             LDR.N    R0,??DataTable12_39
   \   00000120   0x....             LDR.N    R1,??DataTable12_36
   \   00000122   0x6809             LDR      R1,[R1, #+0]
   \   00000124   0x....             LDR.N    R2,??DataTable12_37
   \   00000126   0x8812             LDRH     R2,[R2, #+0]
   \   00000128   0xFA11 0xF182      UXTAH    R1,R1,R2
   \   0000012C   0x....             LDR.N    R2,??DataTable12_35
   \   0000012E   0x8812             LDRH     R2,[R2, #+0]
   \   00000130   0xF820 0x2011      STRH     R2,[R0, R1, LSL #+1]
    692          	  }
    693          
    694          
    695          	  
    696             	}
    697              //else
    698              {
    699               // BSP_LED_Off(LED1);
    700              }
    701          
    702          
    703            // if (idxSPI5DataBuf >= AUDIO_IN_PCM_BUFFER_SIZE) idxSPI5DataBuf=0;
    704             //SPI5->DR = 3333;
    705              if(flgSTAIni==0)
   \                     ??SPI5_IRQHandler_3: (+1)
   \   00000134   0x....             LDR.N    R0,??DataTable12_40
   \   00000136   0x7800             LDRB     R0,[R0, #+0]
   \   00000138   0x2800             CMP      R0,#+0
   \   0000013A   0xD102             BNE.N    ??SPI5_IRQHandler_0
    706              {
    707                  flgSTAIni=1;
   \   0000013C   0x2001             MOVS     R0,#+1
   \   0000013E   0x....             LDR.N    R1,??DataTable12_40
   \   00000140   0x7008             STRB     R0,[R1, #+0]
    708          		//__HAL_SPI_DISABLE(&hspi5);
    709                  						 
    710              }
    711                
    712            }
    713            
    714            
    715            
    716          
    717          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   00000142   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 2
   \                     ??stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     ??stLR:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??stOder:
   \   00000000                      DS8 1
    718          

   \                                 In section .text, align 2, keep-with-next
    719          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
    720          {
    721            /* Check the parameters */
    722            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
    723            
    724            /* Return the data in the DR register */
    725            return SPIx->DR;
   \                     SPI_I2S_ReceiveData: (+1)
   \   00000000   0x68C0             LDR      R0,[R0, #+12]
   \   00000002   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0x4770             BX       LR               ;; return
    726          }
    727          
    728          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
                             ^
Warning[Pe177]: function "SPI_I2S_SendData" was declared but never referenced
    729          {
    730            /* set the data to the DR register */
    731            SPIx->DR=Data;
    732          }
    733          	
    734          

   \                                 In section .text, align 2, keep-with-next
    735          void EXTI4_IRQHandler(void)
    736          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    737              /* EXTI line interrupt detected */
    738            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
   \   00000002   0x....             LDR.N    R0,??DataTable12_41  ;; 0x40013c14
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x06C0             LSLS     R0,R0,#+27
   \   00000008   0xD514             BPL.N    ??EXTI4_IRQHandler_0
    739            {
    740              
    741               if (cntRisingEXTI==10)
   \   0000000A   0x....             LDR.N    R0,??DataTable12_42
   \   0000000C   0x8800             LDRH     R0,[R0, #+0]
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xD108             BNE.N    ??EXTI4_IRQHandler_1
    742               {
    743              	/*--------------Enable read PCM data --------------------*/
    744                  MX_SPI5_Init(); 
   \   00000012   0x.... 0x....      BL       MX_SPI5_Init
    745                  //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
    746          		//__HAL_UNLOCK(&hspi5);
    747                  //__HAL_SPI_ENABLE(&hspi5);
    748          		cntRisingEXTI=0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable12_42
   \   0000001A   0x8008             STRH     R0,[R1, #+0]
    749          
    750          		/*Disable external interrupt */
    751          		HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI4_IRQn));
   \   0000001C   0x200A             MOVS     R0,#+10
   \   0000001E   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   00000022   0xE004             B.N      ??EXTI4_IRQHandler_2
    752          		//HAL_GPIO_DeInit(GPIOB,GPIO_PIN_4);
    753               }
    754               else
    755               {
    756                   cntRisingEXTI++;
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable12_42
   \   00000026   0x8800             LDRH     R0,[R0, #+0]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x....             LDR.N    R1,??DataTable12_42
   \   0000002C   0x8008             STRH     R0,[R1, #+0]
    757          		 //__HAL_SPI_DISABLE(&hspi5);
    758               }
    759          	 __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
   \                     ??EXTI4_IRQHandler_2: (+1)
   \   0000002E   0x2010             MOVS     R0,#+16
   \   00000030   0x....             LDR.N    R1,??DataTable12_41  ;; 0x40013c14
   \   00000032   0x6008             STR      R0,[R1, #+0]
    760          
    761            }
    762          }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   00000034   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0xE000EF50         DC32     0xe000ef50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0xE000ED14         DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0xE000ED84         DC32     0xe000ed84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0xE000ED80         DC32     0xe000ed80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0xE000EF60         DC32     0xe000ef60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x000F1B30         DC32     0xf1b30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x........         DC32     AUDIO_SAMPLE+0x74

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x........         DC32     GPIO_INS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x........         DC32     flg10ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x........         DC32     ??ticks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x40007000         DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x........         DC32     hi2c1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x00C0EFFF         DC32     0xc0efff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_20:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_21:
   \   00000000   0x........         DC32     huart6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_22:
   \   00000000   0x40023844         DC32     0x40023844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_23:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_24:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_25:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_26:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_27:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_28:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_29:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_30:
   \   00000000   0x........         DC32     ??stOder

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_31:
   \   00000000   0x........         DC32     ??stLR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_32:
   \   00000000   0x........         DC32     Buffer1+0x4808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_33:
   \   00000000   0x........         DC32     idxSPI5DataBuf1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_34:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_35:
   \   00000000   0x........         DC32     ??stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_36:
   \   00000000   0x........         DC32     Buffer2+0x4808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_37:
   \   00000000   0x........         DC32     idxSPI5DataBuf2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_38:
   \   00000000   0x........         DC32     Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_39:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_40:
   \   00000000   0x........         DC32     flgSTAIni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_41:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_42:
   \   00000000   0x........         DC32     cntRisingEXTI
    763          
    764          
    765          
    766          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CPU_CACHE_Enable
         8   -> SCB_EnableDCache
         8   -> SCB_EnableICache
       8   EXTI4_IRQHandler
         8   -> HAL_NVIC_DisableIRQ
         8   -> MX_SPI5_Init
      32   HAL_I2C_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
      32   HAL_SPI_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
      32   HAL_UART_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       8   MX_I2C1_Init
         8   -> HAL_I2CEx_ConfigAnalogFilter
         8   -> HAL_I2C_Init
       8   MX_SPI5_Init
         8   -> HAL_SPI_Init
       4   SCB_EnableDCache
       0   SCB_EnableICache
       8   SPI5_IRQHandler
         8   -> SPI_I2S_ReceiveData
       0   SPI_I2S_ReceiveData
     208   SystemClock_Config
       208   -> HAL_PWREx_EnableOverDrive
       208   -> HAL_RCCEx_PeriphCLKConfig
       208   -> HAL_RCC_ClockConfig
       208   -> HAL_RCC_GetHCLKFreq
       208   -> HAL_RCC_OscConfig
       208   -> HAL_SYSTICK_CLKSourceConfig
       208   -> HAL_SYSTICK_Config
       0   Toggle_Leds
       8   UART6_Init
         8   -> HAL_UART_Init
      16   main
        16   -> AudioFlashPlay
        16   -> BSP_LED_Init
        16   -> BSP_LED_Toggle
        16   -> CPU_CACHE_Enable
        16   -> HAL_GPIO_Init
        16   -> HAL_Init
        16   -> HAL_NVIC_EnableIRQ
        16   -> HAL_NVIC_SetPriority
        16   -> SystemClock_Config
        16   -> WavePlayerInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_30
       4  ??DataTable12_31
       4  ??DataTable12_32
       4  ??DataTable12_33
       4  ??DataTable12_34
       4  ??DataTable12_35
       4  ??DataTable12_36
       4  ??DataTable12_37
       4  ??DataTable12_38
       4  ??DataTable12_39
       4  ??DataTable12_4
       4  ??DataTable12_40
       4  ??DataTable12_41
       4  ??DataTable12_42
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
   18448  Buffer1
   18448  Buffer2
   18448  Buffer3
      12  CPU_CACHE_Enable
      54  EXTI4_IRQHandler
      20  GPIO_INS
     198  HAL_I2C_MspInit
     244  HAL_SPI_MspInit
     126  HAL_UART_MspInit
      98  MX_I2C1_Init
     126  MX_SPI5_Init
     100  SCB_EnableDCache
      42  SCB_EnableICache
     324  SPI5_IRQHandler
       6  SPI_I2S_ReceiveData
     216  SystemClock_Config
      28  Toggle_Leds
      96  UART6_Init
    1024  aRxBuffer
       1  appli_state
       2  cntRisingEXTI
       1  flg10ms
       1  flgSTAIni
     696  hUSBHost
     100  hspi5
     112  huart6
       2  idxSPI5DataBuf1
       2  idxSPI5DataBuf2
     184  main
      20  pI2CData
      12  pI2CRx
       1  stLR
       2  stNipple
       1  stOder
       4  ticks

 
 57 325 bytes in section .bss
     20 bytes in section .data
  2 026 bytes in section .text
 
  2 026 bytes of CODE memory
 57 345 bytes of DATA memory

Errors: none
Warnings: 4
