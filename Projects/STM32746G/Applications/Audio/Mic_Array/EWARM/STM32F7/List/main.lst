###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       07/Mar/2016  01:51:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Oh --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\main.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\main.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          
      8          
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "main.h"
     11          #include "DSP.h"
     12          //#include "waveplayer.h"
     13          #include "waverecorder.h"
     14          #include "stm32f7xx_hal_usart.h"
     15          #include "pdm_filter.h"
     16          #include "arm_math.h"
     17          #include <stdio.h>
     18          
     19          
     20          /* Private typedef -----------------------------------------------------------*/
     21          /* Private define ------------------------------------------------------------*/
     22          /* Private macro -------------------------------------------------------------*/
     23          
     24          
     25          /* EXTERN VARIABLES ----------------------------------------------------------*/
     26          //extern __IO AUDIO_IN_BufferTypeDef Buffer1, Buffer2, BufferCtlRecIn;
     27          //AUDIO_IN_BufferTypeDef Buffer3;
     28          
     29          
     30          
     31          
     32          extern Mic_Array_Data Buffer1,Buffer2,Buffer3;
     33          
     34          extern __IO uint8_t XferCplt;
     35          extern __IO AUDIO_IN_BufferTypeDef BufferCtlRecIn;
     36          extern DMA_HandleTypeDef     DmaHandle;
     37          
     38          extern SAI_HandleTypeDef         haudio_out_sai;
     39          extern uint8_t WaveRecord_flgIni;
     40          extern uint32_t EnergySound,EnergyError;
     41          extern I2C_HandleTypeDef hi2c2;
     42          extern __IO uint16_t cntStrt;
     43          extern __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
     44          extern __IO   uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
     45          extern USBD_AUDIO_ItfTypeDef  USBD_AUDIO_fops;
     46          /* GLOBAL VARIABLE -----------------------------------------------------------*/

   \                                 In section .bss, align 4
     47          USBH_HandleTypeDef hUSBHost;
   \                     hUSBHost:
   \   00000000                      DS8 696
     48          USBD_HandleTypeDef hUSBDDevice;

   \                                 In section .bss, align 1
     49          AUDIO_ApplicationTypeDef appli_state = APPLICATION_IDLE;//APPLICATION_IDLE
   \                     appli_state:
   \   00000000                      DS8 1
     50          

   \                                 In section .bss, align 4
     51          UART_HandleTypeDef huart3;
   \                     huart3:
   \   00000000                      DS8 112

   \                                 In section .bss, align 4
     52          SPI_HandleTypeDef hspi4;
   \                     hspi4:
   \   00000000                      DS8 100
     53          GPIO_InitTypeDef GPIO_INS;
     54          Mic_Array_Coef_f FacMic;
     55          	  
     56          uint8_t  pI2CData[20]= {0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190};

   \                                 In section .bss, align 4
     57          uint8_t  pI2CRx[10];
   \                     pI2CRx:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     58          uint16_t BufferTest[2*AUDIO_OUT_BUFFER_SIZE];
   \                     BufferTest:
   \   00000000                      DS8 4096

   \                                 In section .bss, align 4
     59          uint16_t bufferSum[AUDIO_OUT_BUFFER_SIZE];
   \                     bufferSum:
   \   00000000                      DS8 2048
     60          uint32_t CrssCorVal78,CrssCorVal14,CrssCorVal25,CrssCorVal63;
     61          
     62          __IO uint16_t  WaveRec_idxSens4,WaveRec_idxSens3,I2S2_idxTmp;
     63          __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     64          __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     65          __IO uint16_t  idxSPI5DataBuf3;
     66          __IO uint16_t  cntRisingEXTI;
     67          __IO uint8_t   btnSW1,btnSW2;
     68          __IO uint8_t   flgDlyUpd; 
     69          __IO uint8_t   cntBtnPress;
     70          
     71          extern __IO uint16_t  WaveRec_idxTest;
     72          extern __IO uint8_t  swtBufUSBOut;
     73          
     74          /* Buffer used for reception */
     75          uint8_t aRxBuffer[1024];
     76          uint8_t idxDec,stFrstFrmStore;
     77          int16_t DeltaBuf1,DeltaBuf1Old;
     78          int16_t idxLatency13,idxLatency12,idxLatency14,idxLatency25,idxLatency63,idxLatency78;
   \                     idxLatency13:
   \   00000800                      DS8 2
   \                     idxLatency12:
   \   00000802                      DS8 2

   \                                 In section .bss, align 2
   \                     cntRisingEXTI:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     aRxBuffer:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 1
   \                     idxDec:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     DeltaBuf1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     DeltaBuf1Old:
   \   00000000                      DS8 2
     79          
     80          __IO char flg10ms;

   \                                 In section .bss, align 1
     81          uint8_t flgSTAIni;
   \                     flgSTAIni:
   \   00000000                      DS8 1
     82          uint16_t cntTime200;
     83          
     84          uint8_t buffer_switch = 1;
     85          uint8_t Command_index=1;
     86          
     87          float fir256Coff[DSP_NUMCOFFHANNIING];
     88          //int16_t PreCalcBuff[129][256];
     89          
     90          
     91          #if MAIN_CRSCORR
     92          arm_rfft_instance_q15 RealFFT_Ins, RealIFFT_Ins;
     93          #endif
     94          

   \                                 In section .bss, align 4
     95          arm_cfft_radix4_instance_f32 SS,SS1,SS2,SS3,SS4,ISS; 
   \                     SS:
   \   00000000                      DS8 20
   \                     SS1:
   \   00000014                      DS8 20
   \                     SS2:
   \   00000028                      DS8 20
   \                     SS3:
   \   0000003C                      DS8 20
   \                     SS4:
   \   00000050                      DS8 20
   \                     ISS:
   \   00000064                      DS8 20
     96          arm_rfft_instance_f32 S,S1,S2,S3,S4,IS;
   \                     S:
   \   00000078                      DS8 24
   \                     `S1`:
   \   00000090                      DS8 24
   \                     `S2`:
   \   000000A8                      DS8 24
   \                     `S3`:
   \   000000C0                      DS8 24
   \                     `S4`:
   \   000000D8                      DS8 24
   \                     IS:
   \   000000F0                      DS8 24
     97          
     98          //arm_rfft_fast_instance_f32 S1,S2,S3,S4,IS;
     99          
    100          
    101          #if (DEBUG)
    102          uint8_t  pUARTBuf[128];

   \                                 In section .bss, align 4
    103          uint32_t Main_CoefMor;
   \                     Main_CoefMor:
   \   00000000                      DS8 4
    104          uint8_t stDir,flgS2,flgS3,flgS4,flgS2Flt,flgS3Flt,flgS4Flt;
    105          uint8_t flgS2Ins,flgS3Ins,flgS4Ins;
    106          #endif
    107          
    108          #if USB_STREAMING
    109          extern __IO uint16_t idxFrmPDMMic8;
    110          #endif
    111          
    112          
    113          /* Private function prototypes -----------------------------------------------*/
    114          static void SystemClock_Config(void);
    115          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id);
    116          static void CPU_CACHE_Enable(void);
    117          
    118          
    119          
    120          
    121          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c);
    122          void MX_I2C2_Init(void);
    123          void USART3_Init(void);
    124          void ReadSTASeq(uint8_t Addr, uint8_t *pBufOut,uint8_t Len );
    125          void WriteSTAByte(uint8_t Addr, uint8_t *pBufIn, uint8_t len);
    126          void SPI5_CallBack(SPI_HandleTypeDef *hspi);
    127          uint8_t StartPlay(void);
    128          
    129          
    130          /*--------------INLINE FUNCTION-----------------------------------------------*/
    131          

   \                                 In section .text, align 2, keep-with-next
    132          inline static void FFT_Update(void)
    133          {
   \                     FFT_Update: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable25
    134          
    135                PDM2PCMSDO78();      
   \   00000006   0x.... 0x....      BL       PDM2PCMSDO78
    136                /* Hafl buffer is filled in by I2S data stream in */
    137                if((flgDlyUpd==0))
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD14D             BNE.N    ??FFT_Update_0
    138                {
    139                      
    140                      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15); 
    141                      FactorUpd(&FacMic); 
   \   00000010   0xF104 0x0040      ADD      R0,R4,#+64
   \   00000014   0x.... 0x....      BL       FactorUpd
    142                      //STM_EVAL_LEDOn(LED3);
    143                      flgDlyUpd = 1; 
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x7020             STRB     R0,[R4, #+0]
    144          /*-------------------------------------------------------------------------------------------------------------
    145          			  
    146          	Sequence  Record Data                     Processing Data                 Player Data
    147          			  
    148          	1-------  Buffer1                         Buffer2                         Buffer3
    149          			  
    150          	2-------  Buffer3                         Buffer1                         Buffer2		  
    151          			  
    152          	3-------  Buffer2                         Buffer3                         Buffer1 
    153           ---------------------------------------------------------------------------------------------------------------*/
    154                      /* Processing Data */
    155          			switch (buffer_switch)
   \   0000001C   0x78E0             LDRB     R0,[R4, #+3]
   \   0000001E   0xB118             CBZ.N    R0,??FFT_Update_1
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD007             BEQ.N    ??FFT_Update_2
   \   00000024   0xD303             BCC.N    ??FFT_Update_3
   \   00000026   0xE03D             B.N      ??FFT_Update_4
    156          			{             
    157          			    case BUF1_PLAY:
    158          #if MAIN_CRSCORR
    159                                      for (uint16_t i=0; i<(_MAX_SS/_MAX_SS);i++)
    160                                      {
    161                                          //uint16_t i=0;
    162                                              arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3[i*128],    (q15_t *)&bufferFFT[i*256]);
    163                                              arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3_1[i*128],   (q15_t *)&bufferFFT_1[i*256]);
    164                                      
    165                                              arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],2*128);
    166                                      
    167                                              //for (uint16_t j=0; j<256;j++)
    168                                              //{
    169                                              //	  bufferFFTSum[i*256+j]<<=6;
    170                                              //}
    171                                              
    172                                              arm_rfft_q15(&RealIFFT_Ins,    (q15_t *)&bufferFFTSum[i*256],    (q15_t *)&bufferSum[i*128]);
    173                                      }
    174          #elif MAIN_FFT
    175                              /* Summing in Buffer3 */
    176                              Delay_Sum_FFT(&Buffer3,&FacMic,(int16_t *)bufferSum, 512);
    177                              //FFT_SUM((int16_t *)buffer3, (int16_t * )buffer3_1,fbuffer, 1024);				 	   
    178          #else
    179                              idxLatency78 = GCC_PHAT(Buffer3.bufMIC7+AUDIO_OUT_BUFFER_SIZE/4, Buffer3.bufMIC8+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal78);
   \                     ??FFT_Update_1: (+1)
   \   00000028   0x.... 0x....      LDR.W    R5,??DataTable25_1
   \   0000002C   0xE004             B.N      ??FFT_Update_5
    180                              idxLatency14 = GCC_PHAT(Buffer3.bufMIC1+AUDIO_OUT_BUFFER_SIZE/4, Buffer3.bufMIC4+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal14);
    181                              idxLatency25 = GCC_PHAT(Buffer3.bufMIC5+AUDIO_OUT_BUFFER_SIZE/4, Buffer3.bufMIC2+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal25);
    182                              idxLatency63 = GCC_PHAT(Buffer3.bufMIC6+AUDIO_OUT_BUFFER_SIZE/4, Buffer3.bufMIC3+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal63);
    183                             
    184          
    185                              SumDelay(&Buffer3);
    186          #endif
    187          					
    188          					break;
    189          				case BUF2_PLAY:
    190          
    191          #if MAIN_CRSCORR
    192                               for (uint16_t i=0; i<(_MAX_SS/128);i++)
    193                               { 
    194                                  //uint16_t i=0;
    195                                  arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1[i*128],(q15_t *)&bufferFFT[i*256]);
    196                                  arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    197          
    198                                  arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],
    199                                                  2*128);
    200          
    201                                  //for (uint16_t j=0; j<256;j++)
    202                                  //{
    203                                  //	   bufferFFTSum[i*256+j]<<=6;
    204                                  //}
    205          
    206          
    207                                  arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    208                               }
    209          #elif MAIN_FFT
    210                              /* Summing in Buffer1 */	 
    211                              Delay_Sum_FFT(&Buffer1, &FacMic,(int16_t * )bufferSum,512);
    212                              //FFT_SUM((int16_t *)buffer1, (int16_t * )buffer1_1,fbuffer, 1024);
    213          
    214          #else
    215                          
    216                            //idxLatency13 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    217                            //idxLatency12 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    218          		
    219                            idxLatency78 = GCC_PHAT(Buffer1.bufMIC7+AUDIO_OUT_BUFFER_SIZE/4, Buffer1.bufMIC8+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal78);	
   \                     ??FFT_Update_3: (+1)
   \   0000002E   0x.... 0x....      LDR.W    R5,??DataTable25_2
   \   00000032   0xE001             B.N      ??FFT_Update_5
    220                            idxLatency14 = GCC_PHAT(Buffer1.bufMIC1+AUDIO_OUT_BUFFER_SIZE/4, Buffer1.bufMIC4+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal14);
    221                            idxLatency25 = GCC_PHAT(Buffer1.bufMIC5+AUDIO_OUT_BUFFER_SIZE/4, Buffer1.bufMIC2+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal25);
    222                            idxLatency63 = GCC_PHAT(Buffer1.bufMIC6+AUDIO_OUT_BUFFER_SIZE/4, Buffer1.bufMIC3+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal63);
    223          
    224          
    225          
    226                            SumDelay(&Buffer1);
    227          #endif
    228          	    break;
    229          					
    230          	   case BUF3_PLAY:
    231          #if MAIN_CRSCORR
    232                    for (uint16_t i=0; i<(_MAX_SS/128);i++)
    233                    {
    234                        arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2[i*128],(q15_t *)&bufferFFT[i*256]);
    235                        arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    236          
    237                        arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],	(q15_t *)&bufferFFTSum[i*256],
    238                                           2*128);
    239          
    240                        //for (uint16_t j=0; j<256;j++)
    241                        //{
    242                        //   bufferFFTSum[i*256+j]<<=6;
    243                        //}
    244          
    245          
    246                        arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    247                    }
    248          #elif MAIN_FFT
    249                  /* Summing in Buffer2 */
    250                  Delay_Sum_FFT(&Buffer2,&FacMic, (int16_t * )bufferSum, 512);
    251                  //FFT_SUM((int16_t *)buffer2, (int16_t * )buffer2_1,fbuffer, 1024);				
    252          #else
    253          
    254                    //idxLatency13 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    255                    //idxLatency12 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    256          
    257                    idxLatency78 = GCC_PHAT(Buffer2.bufMIC7+AUDIO_OUT_BUFFER_SIZE/4, Buffer2.bufMIC8+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal78);
   \                     ??FFT_Update_2: (+1)
   \   00000034   0x.... 0x....      LDR.W    R5,??DataTable25_3
   \                     ??FFT_Update_5: (+1)
   \   00000038   0xF505 0x41E4      ADD      R1,R5,#+29184
   \   0000003C   0xF505 0x40C4      ADD      R0,R5,#+25088
   \   00000040   0xF104 0x0358      ADD      R3,R4,#+88
   \   00000044   0xF44F 0x7200      MOV      R2,#+512
   \   00000048   0x318C             ADDS     R1,R1,#+140
   \   0000004A   0x3078             ADDS     R0,R0,#+120
   \   0000004C   0x.... 0x....      BL       GCC_PHAT
   \   00000050   0x84E0             STRH     R0,[R4, #+38]
    258                    idxLatency14 = GCC_PHAT(Buffer2.bufMIC1+AUDIO_OUT_BUFFER_SIZE/4, Buffer2.bufMIC4+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal14);
   \   00000052   0xF505 0x5148      ADD      R1,R5,#+12800
   \   00000056   0xF104 0x035C      ADD      R3,R4,#+92
   \   0000005A   0xF44F 0x7200      MOV      R2,#+512
   \   0000005E   0x313C             ADDS     R1,R1,#+60
   \   00000060   0xF505 0x7000      ADD      R0,R5,#+512
   \   00000064   0x.... 0x....      BL       GCC_PHAT
   \   00000068   0x8420             STRH     R0,[R4, #+32]
    259                    idxLatency25 = GCC_PHAT(Buffer2.bufMIC5+AUDIO_OUT_BUFFER_SIZE/4, Buffer2.bufMIC2+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal25);
   \   0000006A   0xF505 0x5190      ADD      R1,R5,#+4608
   \   0000006E   0xF505 0x4084      ADD      R0,R5,#+16896
   \   00000072   0xF104 0x0360      ADD      R3,R4,#+96
   \   00000076   0xF44F 0x7200      MOV      R2,#+512
   \   0000007A   0x3114             ADDS     R1,R1,#+20
   \   0000007C   0x3050             ADDS     R0,R0,#+80
   \   0000007E   0x.... 0x....      BL       GCC_PHAT
   \   00000082   0x8460             STRH     R0,[R4, #+34]
    260                    idxLatency63 = GCC_PHAT(Buffer2.bufMIC6+AUDIO_OUT_BUFFER_SIZE/4, Buffer2.bufMIC3+AUDIO_OUT_BUFFER_SIZE/4, AUDIO_OUT_BUFFER_SIZE/2,&CrssCorVal63);
   \   00000084   0xF505 0x5108      ADD      R1,R5,#+8704
   \   00000088   0xF505 0x40A4      ADD      R0,R5,#+20992
   \   0000008C   0xF104 0x0364      ADD      R3,R4,#+100
   \   00000090   0xF44F 0x7200      MOV      R2,#+512
   \   00000094   0x3128             ADDS     R1,R1,#+40
   \   00000096   0x3064             ADDS     R0,R0,#+100
   \   00000098   0x.... 0x....      BL       GCC_PHAT
   \   0000009C   0x84A0             STRH     R0,[R4, #+36]
    261          
    262                    SumDelay(&Buffer2);
   \   0000009E   0x4628             MOV      R0,R5
   \   000000A0   0x.... 0x....      BL       SumDelay
    263          #endif
    264          					break;
    265          					
    266          				default:
    267          					break;
    268                         
    269          			}
    270          			AudioPlayerUpd();
   \                     ??FFT_Update_4: (+1)
   \   000000A4   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   000000A8   0x.... 0x....      B.W      AudioPlayerUpd
    271          	       //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
    272          	  }
    273          	  
    274          
    275          }
   \                     ??FFT_Update_0: (+1)
   \   000000AC   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    276          
    277          
    278          inline static void Audio_Play_Out(void)
    279          {
    280          
    281          /*-------------------------------------------------------------------------------------------------------------
    282          			  
    283          	Sequence  Record Data                     Processing Data                 Player Data
    284          			  
    285          	1-------  Buffer1                         Buffer2                          Buffer3
    286          			  
    287          	2-------  Buffer3                         Buffer1                           Buffer2		  
    288          			  
    289          	3-------  Buffer2                         Buffer3                           Buffer1 
    290           ---------------------------------------------------------------------------------------------------------------*/
    291              switch (buffer_switch)
    292              {
    293                case BUF1_PLAY:
    294                  /* Play data from buffer1 */
    295          	    Audio_MAL_Play((uint32_t)&Buffer3.bufMIC3[idxFrmPDMMic8*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000)] , 2*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
    296          
    297                  break;
    298                case BUF2_PLAY:
    299                  /* Play data from buffer2 */
    300          	    Audio_MAL_Play((uint32_t)&Buffer1.bufMIC3[idxFrmPDMMic8*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000)], 2*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
    301                  
    302                  break;
    303                case BUF3_PLAY:
    304                  /* Play data from buffer1 */
    305                  Audio_MAL_Play((uint32_t)&Buffer2.bufMIC3[idxFrmPDMMic8*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000)] ,2*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
    306          
    307                  break;
    308                default:
    309                  break;
    310              }
    311              
    312          #if USB_STREAMING
    313              AudioUSBSend(idxFrmPDMMic8);
    314          #endif
    315          
    316          	/* if player is finished for curent buffer                                  */ 
    317          	if (++idxFrmPDMMic8 == AUDIO_OUT_BUFFER_SIZE/(AUDIO_SAMPLING_FREQUENCY/1000))
    318          	{
    319          	       RESET_IDX
    320          		   //MIC7Rec();
    321          		   //MIC8Rec();
    322                     WaveRec_idxTest=0;
    323                     idxFrmPDMMic8=0;
    324                      switch (buffer_switch)
    325                      {
    326                          case BUF1_PLAY:
    327                                /* set flag for switch buffer */		  
    328                            buffer_switch = BUF3_PLAY;
    329                            break;
    330                          case BUF2_PLAY:
    331                            /* set flag for switch buffer */
    332                            buffer_switch = BUF1_PLAY;        
    333                            break;
    334                          case BUF3_PLAY:
    335                            /* set flag for switch buffer */		  
    336                            buffer_switch = BUF2_PLAY;
    337                            break;
    338                          default:
    339                            break;
    340                      }
    341                    if (cntStrt<100) cntStrt++;
    342          
    343          		 /* Tongle status to switch the USB audio buffer out */
    344          
    345          	}			   
    346          }
    347          
    348          
    349          /* Private functions ---------------------------------------------------------*/
    350          
    351          /**
    352            * @brief  Main program
    353            * @param  None
    354            * @retval None
    355            */

   \                                 In section .text, align 2, keep-with-next
    356          int main(void)
    357          {
   \                     main: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0A1             SUB      SP,SP,#+132
    358            /* Enable the CPU Cache */
    359            CPU_CACHE_Enable();
   \   00000006   0xF3BF 0x8F4F      DSB      
   \   0000000A   0xF3BF 0x8F6F      ISB      
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable25_4  ;; 0xe000ef50
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x6008             STR      R0,[R1, #+0]
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25_5  ;; 0xe000ed14
   \   0000001A   0x6802             LDR      R2,[R0, #+0]
   \   0000001C   0xF442 0x3200      ORR      R2,R2,#0x20000
   \   00000020   0x6002             STR      R2,[R0, #+0]
   \   00000022   0xF3BF 0x8F4F      DSB      
   \   00000026   0xF3BF 0x8F6F      ISB      
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x6702             STR      R2,[R0, #+112]
   \   0000002E   0xF3BF 0x8F4F      DSB      
   \   00000032   0x6EC2             LDR      R2,[R0, #+108]
   \   00000034   0xF3C2 0x334E      UBFX     R3,R2,#+13,#+15
   \                     ??main_0: (+1)
   \   00000038   0xF643 0x75E0      MOVW     R5,#+16352
   \   0000003C   0xF3C2 0x04C9      UBFX     R4,R2,#+3,#+10
   \   00000040   0xEA05 0x1543      AND      R5,R5,R3, LSL #+5
   \                     ??main_1: (+1)
   \   00000044   0xEA45 0x7684      ORR      R6,R5,R4, LSL #+30
   \   00000048   0x610E             STR      R6,[R1, #+16]
   \   0000004A   0x4626             MOV      R6,R4
   \   0000004C   0x1E74             SUBS     R4,R6,#+1
   \   0000004E   0x2E00             CMP      R6,#+0
   \   00000050   0xD1F8             BNE.N    ??main_1
   \   00000052   0x461C             MOV      R4,R3
   \   00000054   0x1E63             SUBS     R3,R4,#+1
   \   00000056   0x2C00             CMP      R4,#+0
   \   00000058   0xD1EE             BNE.N    ??main_0
   \   0000005A   0xF3BF 0x8F4F      DSB      
   \   0000005E   0x6801             LDR      R1,[R0, #+0]
   \   00000060   0xF441 0x3180      ORR      R1,R1,#0x10000
   \   00000064   0x6001             STR      R1,[R0, #+0]
   \   00000066   0xF3BF 0x8F4F      DSB      
   \   0000006A   0xF3BF 0x8F6F      ISB      
    360            
    361            /* STM32F7xx HAL library initialization:
    362                 - Configure the Flash ART accelerator on ITCM interface
    363                 - Configure the Systick to generate an interrupt each 1 msec
    364                 - Set NVIC Group Priority to 4
    365                 - Global MSP (MCU Support Package) initialization
    366               */   
    367            HAL_Init();
   \   0000006E   0x.... 0x....      BL       HAL_Init
    368            
    369            /* Configure the system clock to 216 MHz */
    370            //Test_SystemClock_Config(); 
    371            SystemClock_Config();
   \   00000072   0x.... 0x....      BL       SystemClock_Config
    372            BSP_AUDIO_OUT_ClockConfig(AUDIO_FREQ, NULL);
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x.... 0x....      LDR.W    R5,??DataTable25_6  ;; 0x40023830
   \   0000007C   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
   \   00000080   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000084   0x.... 0x....      LDR.W    R4,??DataTable25
   \   00000088   0x9000             STR      R0,[SP, #+0]
   \   0000008A   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000008E   0x9010             STR      R0,[SP, #+64]
   \   00000090   0xF44F 0x70AC      MOV      R0,#+344
   \   00000094   0x9001             STR      R0,[SP, #+4]
   \   00000096   0x2007             MOVS     R0,#+7
   \   00000098   0x9003             STR      R0,[SP, #+12]
   \   0000009A   0x2001             MOVS     R0,#+1
   \   0000009C   0x9009             STR      R0,[SP, #+36]
   \   0000009E   0x4668             MOV      R0,SP
   \   000000A0   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    373            
    374            /* Initialize the SDRAM */
    375            BSP_SDRAM_Init();
   \   000000A4   0x.... 0x....      BL       BSP_SDRAM_Init
    376          
    377            BSP_LED_Init(LED1);
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x.... 0x....      ADR.W    R6,?_8
   \   000000AE   0x.... 0x....      BL       BSP_LED_Init
    378            BSP_LED_Init(LED2);
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0xAF08             ADD      R7,SP,#+32
   \   000000B6   0x.... 0x....      BL       BSP_LED_Init
    379          
    380            /* Button Initialization */
    381            ButtonInit();
   \   000000BA   0x.... 0x....      BL       ButtonInit
    382            //BSP_PB_Init(BUTTON_KEY,BUTTON_MODE_EXTI);
    383          
    384            
    385            /* Init TS module */
    386            //BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
    387             DFT_Init();	
   \   000000BE   0x.... 0x....      BL       DFT_Init
    388          
    389              /* ---------PA4: LCCKO-------------*/
    390              __GPIOA_CLK_ENABLE();
   \   000000C2   0x6828             LDR      R0,[R5, #+0]
    391              GPIO_INS.Pin = GPIO_PIN_4;
    392              GPIO_INS.Mode =GPIO_MODE_IT_RISING;
    393              GPIO_INS.Pull =GPIO_NOPULL;
    394              GPIO_INS.Speed =GPIO_SPEED_HIGH;
    395              HAL_GPIO_Init(GPIOA,&GPIO_INS);
   \   000000C4   0xF104 0x012C      ADD      R1,R4,#+44
   \   000000C8   0x.... 0x....      LDR.W    R8,??DataTable25_7
   \   000000CC   0x.... 0x....      LDR.W    R9,??DataTable25_8
   \   000000D0   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000000D4   0x.... 0x....      LDR.W    R10,??DataTable25_9
   \   000000D8   0x6028             STR      R0,[R5, #+0]
   \   000000DA   0x6828             LDR      R0,[R5, #+0]
   \   000000DC   0xF604 0x2B9B      ADDW     R11,R4,#+2715
   \   000000E0   0xF000 0x0001      AND      R0,R0,#0x1
   \   000000E4   0x9000             STR      R0,[SP, #+0]
   \   000000E6   0x9800             LDR      R0,[SP, #+0]
   \   000000E8   0x2010             MOVS     R0,#+16
   \   000000EA   0x62E0             STR      R0,[R4, #+44]
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable25_10  ;; 0x10110000
   \   000000F0   0x6320             STR      R0,[R4, #+48]
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0x6360             STR      R0,[R4, #+52]
   \   000000F6   0x2003             MOVS     R0,#+3
   \   000000F8   0x63A0             STR      R0,[R4, #+56]
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable25_11  ;; 0x40020000
   \   000000FE   0x.... 0x....      BL       HAL_GPIO_Init
    396          
    397              /* Enable and set Button EXTI Interrupt to the lowest priority */
    398              HAL_NVIC_SetPriority((IRQn_Type)EXTI4_IRQn, INTERRUPT_PRI_EXT_LRCK, 0);
   \   00000102   0x2200             MOVS     R2,#+0
   \   00000104   0x2106             MOVS     R1,#+6
   \   00000106   0x200A             MOVS     R0,#+10
   \   00000108   0x.... 0x....      BL       HAL_NVIC_SetPriority
    399              HAL_NVIC_EnableIRQ((IRQn_Type)EXTI4_IRQn);
   \   0000010C   0x200A             MOVS     R0,#+10
   \   0000010E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    400              /*-----------------------*/
    401          
    402              /*---------PE3: POWER DOWN-----------------*/
    403              __GPIOE_CLK_ENABLE();
   \   00000112   0x6828             LDR      R0,[R5, #+0]
    404              GPIO_INS.Pin = GPIO_PIN_3;
    405              GPIO_INS.Mode = GPIO_MODE_OUTPUT_PP;
    406              GPIO_INS.Pull = GPIO_PULLUP;
    407              GPIO_INS.Speed = GPIO_SPEED_HIGH;
    408          
    409              HAL_GPIO_Init(GPIOE, &GPIO_INS);
   \   00000114   0xF104 0x012C      ADD      R1,R4,#+44
   \   00000118   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000011C   0x6028             STR      R0,[R5, #+0]
   \   0000011E   0x6828             LDR      R0,[R5, #+0]
   \   00000120   0x.... 0x....      LDR.W    R5,??DataTable25_12  ;; 0x40021000
   \   00000124   0xF000 0x0010      AND      R0,R0,#0x10
   \   00000128   0x9000             STR      R0,[SP, #+0]
   \   0000012A   0x9800             LDR      R0,[SP, #+0]
   \   0000012C   0x2008             MOVS     R0,#+8
   \   0000012E   0x62E0             STR      R0,[R4, #+44]
   \   00000130   0x2001             MOVS     R0,#+1
   \   00000132   0x6320             STR      R0,[R4, #+48]
   \   00000134   0x6360             STR      R0,[R4, #+52]
   \   00000136   0x2003             MOVS     R0,#+3
   \   00000138   0x63A0             STR      R0,[R4, #+56]
   \   0000013A   0x4628             MOV      R0,R5
   \   0000013C   0x.... 0x....      BL       HAL_GPIO_Init
    410            
    411              HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
   \   00000140   0x2200             MOVS     R2,#+0
   \   00000142   0x2108             MOVS     R1,#+8
   \   00000144   0x4628             MOV      R0,R5
   \   00000146   0x.... 0x....      ADR.W    R5,?_9
   \   0000014A   0x.... 0x....      BL       HAL_GPIO_WritePin
    412          
    413              /*----------------------------------------*/
    414          
    415          #if (DEBUG)  
    416              /* UART for debug */
    417              USART3_Init();
   \   0000014E   0x.... 0x....      BL       USART3_Init
    418          #endif
    419          
    420          					  
    421          
    422              /*----------------------------------------*/
    423              MX_I2C2_Init(); //for STA321MP
   \   00000152   0x.... 0x....      BL       MX_I2C2_Init
    424              STA321MP_Ini();
   \   00000156   0x.... 0x....      BL       STA321MP_Ini
    425              BSP_LED_Toggle(LED1);
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0x.... 0x....      BL       BSP_LED_Toggle
    426              /* Init Audio Application */
    427          #ifdef CS43L22_PLAY
    428              AUDIO_InitApplication();
    429          #endif
    430              AUDIO_InitApplication();
   \   00000160   0x.... 0x....      BL       AUDIO_InitApplication
    431              BSP_LED_Toggle(LED2);
   \   00000164   0x2001             MOVS     R0,#+1
   \   00000166   0x.... 0x....      BL       BSP_LED_Toggle
    432          
    433              buffer_switch = BUF3_PLAY;		 /* record data to buffer1 */
   \   0000016A   0x2002             MOVS     R0,#+2
   \   0000016C   0x70E0             STRB     R0,[R4, #+3]
    434              MIC1TO6_Init();
   \   0000016E   0x.... 0x....      BL       MIC1TO6_Init
    435          
    436          #if (USB_STREAMING)	
    437          	/* Initialize USB descriptor basing on channels number and sampling frequency */
    438          	USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, 2*AUDIO_SAMPLING_FREQUENCY, AUDIO_CHANNELS);
   \   00000172   0x2202             MOVS     R2,#+2
   \   00000174   0xF44F 0x41FA      MOV      R1,#+32000
   \   00000178   0xF104 0x0068      ADD      R0,R4,#+104
   \   0000017C   0x.... 0x....      BL       USBD_AUDIO_Init_Microphone_Descriptor
    439          	/* Init Device Library */
    440          	USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
   \   00000180   0x2200             MOVS     R2,#+0
   \   00000182   0x.... 0x....      LDR.W    R1,??DataTable25_13
   \   00000186   0xF104 0x0068      ADD      R0,R4,#+104
   \   0000018A   0x.... 0x....      BL       USBD_Init
    441          	/* Add Supported Class */
    442          	USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable25_14
   \   00000192   0xF104 0x0068      ADD      R0,R4,#+104
   \   00000196   0x.... 0x....      BL       USBD_RegisterClass
    443          	/* Add Interface callbacks for AUDIO Class */  
    444          	USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
   \   0000019A   0x.... 0x....      LDR.W    R1,??DataTable25_15
   \   0000019E   0xF104 0x0068      ADD      R0,R4,#+104
   \   000001A2   0x.... 0x....      BL       USBD_AUDIO_RegisterInterface
    445          	/* Start Device Process */
    446          	USBD_Start(&hUSBDDevice);
   \   000001A6   0xF104 0x0068      ADD      R0,R4,#+104
   \   000001AA   0x.... 0x....      BL       USBD_Start
    447          
    448          	/* Init Host Library */
    449          	//test GIT //USBH_Init(&hUSBHost, USBH_UserProcess, 0);
    450          
    451          	/* Add Supported Class */
    452          	//test GIT //USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
    453          	
    454          	/* Start Host Process */
    455          	//test GIT //USBH_Start(&hUSBHost); 					  
    456          #endif 
    457          
    458              Window(fir256Coff);
   \   000001AE   0xF504 0x7023      ADD      R0,R4,#+652
   \   000001B2   0x.... 0x....      BL       Window
    459          	EnergyNoiseCalc(AUDIO_OUT_BUFFER_SIZE/2);
   \   000001B6   0xF44F 0x7000      MOV      R0,#+512
   \   000001BA   0x.... 0x....      BL       EnergyNoiseCalc
    460          
    461              //Precalculation(Coef,PreCalcBuff);
    462              StartPlay();
   \   000001BE   0x.... 0x....      BL       StartPlay
   \   000001C2   0xA808             ADD      R0,SP,#+32
   \   000001C4   0x9007             STR      R0,[SP, #+28]
   \   000001C6   0xF604 0x208C      ADDW     R0,R4,#+2700
   \   000001CA   0x9002             STR      R0,[SP, #+8]
   \   000001CC   0xE021             B.N      ??main_2
    463              while (1)
    464              {
    465          
    466          
    467                              /* This calculation happens once time in power cycles */
    468                              /* After 5 times of full frame recieved interrupt */
    469                         if ((cntStrt>=5))
    470                         {
    471          		      if ((WaveRecord_flgIni<200))
    472          		      {
    473                                    for(char i=0;i<16;i++)
    474                                    {
    475                                        if (ValBit(SPI4_stNipple,i)!=0) 
    476                                        {
    477                                            SPI4_stPosShft = MAX(SPI4_stPosShft,i+1);
    478                                       }
    479                                    }
    480          		          WaveRecord_flgIni++;			
    481          		      }   
    482          		 }
    483          	
    484          		/* USB Host Background task */
    485          		//USBH_Process(&hUSBHost);
    486          
    487          		/* AUDIO Menu Process */
    488          		//AUDIO_MenuProcess();
    489          		
    490          		FFT_Update(); 
    491          
    492          		if (flg10ms==1)
    493          		{
    494          		    flg10ms=0;		   		      
    495          	         cntTime200++;
    496          	         if (cntTime200==40)
    497          	         {
    498          	 
    499          #if (DEBUG)
    500                             uint32_t tmpSNR63,tmpSNR14,tmpSNR78,tmpSNR25;
    501                             tmpSNR78 = (uint32_t)(CrssCorVal78/EnergyError);
    502                             tmpSNR25 = (uint32_t)(CrssCorVal25/EnergyError);
    503          				   tmpSNR14 = (uint32_t)(CrssCorVal14/EnergyError);
    504          				   tmpSNR63 = (uint32_t)(CrssCorVal63/EnergyError);
    505                              //if (tmpSNR>10)
    506                              {
    507                                  int16_t test[5];
    508                                  static uint8_t flagNotMin;
    509                                  test[0] = 0;
    510          						if (CrssCorVal63/EnergyError>10)						
    511                                      test[1]= idxLatency63;
    512          						else
    513          							test[1] = 0;
    514          
    515          						if (CrssCorVal14/EnergyError>10)
    516                                      test[2]= idxLatency14;
    517          						else
    518          							test[2] =0;
    519          
    520          						if (CrssCorVal25/EnergyError > 10)
    521                                      test[3]= idxLatency25;
    522          						else
    523          							test[3] = 0;
    524          
    525                                  if (CrssCorVal78/EnergyError>10)
    526          						    test[4]= idxLatency78;                        
    527          						else
    528          							test[4]= 2;
    529          
    530          						//if (((tmpSNR63>10))||((tmpSNR14>10))||((tmpSNR25>10))||((tmpSNR78>10)))
    531                                  {
   \                     ??main_3: (+1)
   \   000001CE   0x2000             MOVS     R0,#+0
   \                     ??main_4: (+1)
   \   000001D0   0x7360             STRB     R0,[R4, #+13]
   \   000001D2   0x7B60             LDRB     R0,[R4, #+13]
   \   000001D4   0x2803             CMP      R0,#+3
   \   000001D6   0xBF28             IT       CS 
   \   000001D8   0x72A1             STRBCS   R1,[R4, #+10]
    532                                       sprintf((char *)pUARTBuf,"%d:%d:%d:%d  ",idxLatency63,idxLatency14,idxLatency25,idxLatency78);
    533                                       flagNotMin=0 ;
    534                                        sprintf((char *)(pUARTBuf+15),"----------\r\n");
    535                                        if (test[3]>0)
    536                                        {
    537                                                sprintf((char *)(pUARTBuf+15),"Close Mic 5\r\n"); 
    538          									  flagNotMin=1;
    539                                        }
    540                                        else if (test[3]<0)
    541                                        {
    542                                              sprintf((char *)(pUARTBuf+15),"Clsoe Mic 2\r\n");
    543          									flagNotMin=1;
    544          
    545                                        }
    546                                        else
    547                                        {
    548                                             
    549                                        }	
    550          
    551          						
    552          				                if (test[2]>0)
    553          		                  	    {
    554          		                  	       if((CrssCorVal14>CrssCorVal25)||(flagNotMin==0))
    555          		                  	       {
    556          		                             sprintf((char *)(pUARTBuf+15),"Clsoe Mic 4\r\n");
    557          									 flagNotMin=2;
    558          		                  	       }
    559          		                  	    }
    560          		                        else if (test[2]<0)
    561          		                        {
    562          		                            if((CrssCorVal14>CrssCorVal25)||(flagNotMin==0))
    563          		                            {
    564          		                              sprintf((char *)(pUARTBuf+15),"Clsoe Mic 1\r\n");                             
    565          									  flagNotMin=2;
    566          		                            }
    567          		                        }
    568          		                        else
    569          		                        {
    570          
    571          		                        }
    572          
    573          						   
    574          		                        if (test[1]>0)
    575          		                  	    {
    576          		                  	       if((((CrssCorVal63>CrssCorVal25)&&(flagNotMin==1))||(flagNotMin==0))||((CrssCorVal63>CrssCorVal14)&&(flagNotMin==2)))
    577          		                  	       {
    578          								     sprintf((char *)(pUARTBuf+15),"Clsoe Mic 3\r\n");
    579          								     flagNotMin=3;
    580          		                  	       }
    581          		                  	    }
    582          		                        else if (test[1]<0)
    583          		                        {
    584          		                             if((((CrssCorVal63>CrssCorVal25)&&(flagNotMin==1))||(flagNotMin==0))||((CrssCorVal63>CrssCorVal14)&&(flagNotMin==2)))
    585          		                             {
    586          		                               sprintf((char *)(pUARTBuf+15),"Clsoe Mic 6\r\n"); 
    587          									   flagNotMin=3;
    588          		                             }
    589          		                        }
    590          		                        else
    591          		                        {
    592          
    593          		                        }
    594          
    595          
    596          	                            if ((test[4]>3))
    597          	                            {
    598          	                                if ((flagNotMin==0))                                     
    599          	                                    sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    600          								    else if ((flagNotMin==1))
    601          										if ((CrssCorVal78>CrssCorVal25))
    602          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    603          								    else if ((flagNotMin==2))
    604          										if ((CrssCorVal78>CrssCorVal14))
    605          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");	
    606          								    else if ((flagNotMin==3))
    607          										if ((CrssCorVal78>CrssCorVal63))
    608          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    609          									else
    610          										;
    611          									
    612          	                            }
    613          	                            else if (test<=0)
    614          	                            {
    615          	                                if ((flagNotMin==0))                                     
    616          	                                    sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    617          								    else if ((flagNotMin==1))
    618          										if ((CrssCorVal78>CrssCorVal25))
    619          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    620          								    else if ((flagNotMin==2))
    621          										if ((CrssCorVal78>CrssCorVal14))
    622          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");	
    623          								    else if ((flagNotMin==3))
    624          										if ((CrssCorVal78>CrssCorVal63))
    625          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    626          									else
    627          										;
    628          									
    629          	                            }                          
    630          	                            else
    631          	                            {
    632          	                            }
    633          
    634          
    635          			  //if (flagNotMin==0) sprintf((char *)(pUARTBuf+15),"----------- \r\n");
    636          									
    637                                    //HAL_UART_Transmit_IT(&huart3,pUARTBuf,15);
    638                                    SrvB_Debound(&flgS2Ins,&flgS2Flt, flgS2,2);
    639                                    SrvB_Debound(&flgS3Ins,&flgS3Flt, flgS3,2);
    640                                    SrvB_Debound(&flgS4Ins,&flgS4Flt, flgS4,2);
    641          
    642                                    stDir = (flgS2Flt<<2)|(flgS3Flt<<1)|(flgS4Flt); 
   \   000001DA   0x7A61             LDRB     R1,[R4, #+9]
   \   000001DC   0x7A20             LDRB     R0,[R4, #+8]
    643                                   
    644                                     sprintf((char *)(pUARTBuf+30),"%d:%d:%d:%d\n\r\n\r",tmpSNR63,tmpSNR14,tmpSNR25,tmpSNR78);
   \   000001DE   0x9B04             LDR      R3,[SP, #+16]
   \   000001E0   0x9A03             LDR      R2,[SP, #+12]
   \   000001E2   0x0049             LSLS     R1,R1,#+1
   \   000001E4   0xEA41 0x0080      ORR      R0,R1,R0, LSL #+2
   \   000001E8   0x7AA1             LDRB     R1,[R4, #+10]
   \   000001EA   0x4308             ORRS     R0,R1,R0
   \   000001EC   0x.... 0x....      ADR.W    R1,?_10
   \   000001F0   0x7120             STRB     R0,[R4, #+4]
   \   000001F2   0x9806             LDR      R0,[SP, #+24]
   \   000001F4   0x9001             STR      R0,[SP, #+4]
   \   000001F6   0x9805             LDR      R0,[SP, #+20]
   \   000001F8   0x9000             STR      R0,[SP, #+0]
   \   000001FA   0xF604 0x20AA      ADDW     R0,R4,#+2730
   \   000001FE   0x.... 0x....      BL       sprintf
    645                                     HAL_UART_Transmit_IT(&huart3,pUARTBuf,15+15+15);		
   \   00000202   0x9902             LDR      R1,[SP, #+8]
   \   00000204   0x222D             MOVS     R2,#+45
   \   00000206   0x.... 0x....      LDR.W    R0,??DataTable25_16
   \   0000020A   0x.... 0x....      BL       HAL_UART_Transmit_IT
    646                                   }
    647                              }//if(SNR)
    648          
    649          #endif
    650          	   	            cntTime200=0;
   \   0000020E   0x2000             MOVS     R0,#+0
   \   00000210   0x8520             STRH     R0,[R4, #+40]
   \                     ??main_2: (+1)
   \   00000212   0x.... 0x....      LDR.W    R0,??DataTable25_17
   \   00000216   0x8800             LDRH     R0,[R0, #+0]
   \   00000218   0x2805             CMP      R0,#+5
   \   0000021A   0xDB18             BLT.N    ??main_5
   \   0000021C   0xF89A 0x0000      LDRB     R0,[R10, #+0]
   \   00000220   0x28C8             CMP      R0,#+200
   \   00000222   0xDA14             BGE.N    ??main_5
   \   00000224   0x2100             MOVS     R1,#+0
   \                     ??main_6: (+1)
   \   00000226   0xF9B9 0x2000      LDRSH    R2,[R9, #+0]
   \   0000022A   0x410A             ASRS     R2,R2,R1
   \   0000022C   0x07D2             LSLS     R2,R2,#+31
   \   0000022E   0xD508             BPL.N    ??main_7
   \   00000230   0xF898 0x3000      LDRB     R3,[R8, #+0]
   \   00000234   0x1C4A             ADDS     R2,R1,#+1
   \   00000236   0x429A             CMP      R2,R3
   \   00000238   0xBFB8             IT       LT 
   \   0000023A   0xF898 0x2000      LDRBLT   R2,[R8, #+0]
   \   0000023E   0xF888 0x2000      STRB     R2,[R8, #+0]
   \                     ??main_7: (+1)
   \   00000242   0x1C49             ADDS     R1,R1,#+1
   \   00000244   0x2910             CMP      R1,#+16
   \   00000246   0xDBEE             BLT.N    ??main_6
   \   00000248   0x1C40             ADDS     R0,R0,#+1
   \   0000024A   0xF88A 0x0000      STRB     R0,[R10, #+0]
   \                     ??main_5: (+1)
   \   0000024E   0x.... 0x....      BL       FFT_Update
   \   00000252   0x78A0             LDRB     R0,[R4, #+2]
   \   00000254   0x2801             CMP      R0,#+1
   \   00000256   0xD1DC             BNE.N    ??main_2
   \   00000258   0x2000             MOVS     R0,#+0
   \   0000025A   0x70A0             STRB     R0,[R4, #+2]
   \   0000025C   0x8D20             LDRH     R0,[R4, #+40]
   \   0000025E   0x1C40             ADDS     R0,R0,#+1
   \   00000260   0x8520             STRH     R0,[R4, #+40]
   \   00000262   0xB280             UXTH     R0,R0
   \   00000264   0x2828             CMP      R0,#+40
   \   00000266   0xD1D4             BNE.N    ??main_2
   \   00000268   0x.... 0x....      LDR.W    R0,??DataTable25_18
   \   0000026C   0x6E21             LDR      R1,[R4, #+96]
   \   0000026E   0x6DE2             LDR      R2,[R4, #+92]
   \   00000270   0xF8D4 0xC064      LDR      R12,[R4, #+100]
   \   00000274   0x6803             LDR      R3,[R0, #+0]
   \   00000276   0x6DA0             LDR      R0,[R4, #+88]
   \   00000278   0xF04F 0x0E00      MOV      LR,#+0
   \   0000027C   0xFBB0 0xF0F3      UDIV     R0,R0,R3
   \   00000280   0xFBB1 0xF1F3      UDIV     R1,R1,R3
   \   00000284   0xFBB2 0xF2F3      UDIV     R2,R2,R3
   \   00000288   0xFBBC 0xF3F3      UDIV     R3,R12,R3
   \   0000028C   0x2B0B             CMP      R3,#+11
   \   0000028E   0x9006             STR      R0,[SP, #+24]
   \   00000290   0x9105             STR      R1,[SP, #+20]
   \   00000292   0x9204             STR      R2,[SP, #+16]
   \   00000294   0x9303             STR      R3,[SP, #+12]
   \   00000296   0xF8AD 0xE020      STRH     LR,[SP, #+32]
   \   0000029A   0xBF26             ITTE     CS 
   \   0000029C   0x8CA3             LDRHCS   R3,[R4, #+36]
   \   0000029E   0x807B             STRHCS   R3,[R7, #+2]
   \   000002A0   0xF8A7 0xE002      STRHCC   LR,[R7, #+2]
   \   000002A4   0x2A0B             CMP      R2,#+11
   \   000002A6   0xBF26             ITTE     CS 
   \   000002A8   0x8C22             LDRHCS   R2,[R4, #+32]
   \   000002AA   0x80BA             STRHCS   R2,[R7, #+4]
   \   000002AC   0xF8A7 0xE004      STRHCC   LR,[R7, #+4]
   \   000002B0   0x290B             CMP      R1,#+11
   \   000002B2   0xBF26             ITTE     CS 
   \   000002B4   0x8C61             LDRHCS   R1,[R4, #+34]
   \   000002B6   0x80F9             STRHCS   R1,[R7, #+6]
   \   000002B8   0xF8A7 0xE006      STRHCC   LR,[R7, #+6]
   \   000002BC   0xF9B4 0x1026      LDRSH    R1,[R4, #+38]
   \   000002C0   0x280B             CMP      R0,#+11
   \   000002C2   0xBF2E             ITEE     CS 
   \   000002C4   0x8139             STRHCS   R1,[R7, #+8]
   \   000002C6   0x2002             MOVCC    R0,#+2
   \   000002C8   0x8138             STRHCC   R0,[R7, #+8]
   \   000002CA   0xF9B4 0x0022      LDRSH    R0,[R4, #+34]
   \   000002CE   0xF9B4 0x3020      LDRSH    R3,[R4, #+32]
   \   000002D2   0xF9B4 0x2024      LDRSH    R2,[R4, #+36]
   \   000002D6   0x9101             STR      R1,[SP, #+4]
   \   000002D8   0x.... 0x....      ADR.W    R1,?_0
   \   000002DC   0x9000             STR      R0,[SP, #+0]
   \   000002DE   0x9802             LDR      R0,[SP, #+8]
   \   000002E0   0x.... 0x....      BL       sprintf
   \   000002E4   0x2000             MOVS     R0,#+0
   \   000002E6   0x.... 0x....      ADR.W    R1,?_1
   \   000002EA   0x73A0             STRB     R0,[R4, #+14]
   \   000002EC   0x4658             MOV      R0,R11
   \   000002EE   0x.... 0x....      BL       sprintf
   \   000002F2   0xF9B7 0x0006      LDRSH    R0,[R7, #+6]
   \   000002F6   0x2801             CMP      R0,#+1
   \   000002F8   0xBFA8             IT       GE 
   \   000002FA   0x.... 0x....      ADRGE.W  R1,?_2
   \   000002FE   0xDA03             BGE.N    ??main_8
   \   00000300   0x2800             CMP      R0,#+0
   \   00000302   0xD506             BPL.N    ??main_9
   \   00000304   0x.... 0x....      ADR.W    R1,?_3
   \                     ??main_8: (+1)
   \   00000308   0x4658             MOV      R0,R11
   \   0000030A   0x.... 0x....      BL       sprintf
   \   0000030E   0x2001             MOVS     R0,#+1
   \   00000310   0x73A0             STRB     R0,[R4, #+14]
   \                     ??main_9: (+1)
   \   00000312   0xF9B7 0x0004      LDRSH    R0,[R7, #+4]
   \   00000316   0x2801             CMP      R0,#+1
   \   00000318   0xDB08             BLT.N    ??main_10
   \   0000031A   0x6E20             LDR      R0,[R4, #+96]
   \   0000031C   0x6DE1             LDR      R1,[R4, #+92]
   \   0000031E   0x4288             CMP      R0,R1
   \   00000320   0xD301             BCC.N    ??main_11
   \   00000322   0x7BA0             LDRB     R0,[R4, #+14]
   \   00000324   0xB988             CBNZ.N   R0,??main_12
   \                     ??main_11: (+1)
   \   00000326   0x.... 0x....      ADR.W    R1,?_4
   \   0000032A   0xE009             B.N      ??main_13
   \                     ??main_10: (+1)
   \   0000032C   0x2800             CMP      R0,#+0
   \   0000032E   0xD50C             BPL.N    ??main_12
   \   00000330   0x6E20             LDR      R0,[R4, #+96]
   \   00000332   0x6DE1             LDR      R1,[R4, #+92]
   \   00000334   0x4288             CMP      R0,R1
   \   00000336   0xD301             BCC.N    ??main_14
   \   00000338   0x7BA0             LDRB     R0,[R4, #+14]
   \   0000033A   0xB930             CBNZ.N   R0,??main_12
   \                     ??main_14: (+1)
   \   0000033C   0x.... 0x....      ADR.W    R1,?_5
   \                     ??main_13: (+1)
   \   00000340   0x4658             MOV      R0,R11
   \   00000342   0x.... 0x....      BL       sprintf
   \   00000346   0x2002             MOVS     R0,#+2
   \   00000348   0x73A0             STRB     R0,[R4, #+14]
   \                     ??main_12: (+1)
   \   0000034A   0xF9B7 0x0002      LDRSH    R0,[R7, #+2]
   \   0000034E   0x2801             CMP      R0,#+1
   \   00000350   0xDB0F             BLT.N    ??main_15
   \   00000352   0x6E61             LDR      R1,[R4, #+100]
   \   00000354   0x6E22             LDR      R2,[R4, #+96]
   \   00000356   0x7BA0             LDRB     R0,[R4, #+14]
   \   00000358   0x428A             CMP      R2,R1
   \   0000035A   0xD201             BCS.N    ??main_16
   \   0000035C   0x2801             CMP      R0,#+1
   \   0000035E   0xD005             BEQ.N    ??main_17
   \                     ??main_16: (+1)
   \   00000360   0xB120             CBZ.N    R0,??main_17
   \   00000362   0x6DE2             LDR      R2,[R4, #+92]
   \   00000364   0x428A             CMP      R2,R1
   \   00000366   0xD21A             BCS.N    ??main_18
   \   00000368   0x2802             CMP      R0,#+2
   \   0000036A   0xD118             BNE.N    ??main_18
   \                     ??main_17: (+1)
   \   0000036C   0x.... 0x....      ADR.W    R1,?_6
   \   00000370   0xE010             B.N      ??main_19
   \                     ??main_15: (+1)
   \   00000372   0x2800             CMP      R0,#+0
   \   00000374   0xD513             BPL.N    ??main_18
   \   00000376   0x6E61             LDR      R1,[R4, #+100]
   \   00000378   0x6E22             LDR      R2,[R4, #+96]
   \   0000037A   0x7BA0             LDRB     R0,[R4, #+14]
   \   0000037C   0x428A             CMP      R2,R1
   \   0000037E   0xD201             BCS.N    ??main_20
   \   00000380   0x2801             CMP      R0,#+1
   \   00000382   0xD005             BEQ.N    ??main_21
   \                     ??main_20: (+1)
   \   00000384   0xB120             CBZ.N    R0,??main_21
   \   00000386   0x6DE2             LDR      R2,[R4, #+92]
   \   00000388   0x428A             CMP      R2,R1
   \   0000038A   0xD208             BCS.N    ??main_18
   \   0000038C   0x2802             CMP      R0,#+2
   \   0000038E   0xD106             BNE.N    ??main_18
   \                     ??main_21: (+1)
   \   00000390   0x.... 0x....      ADR.W    R1,?_7
   \                     ??main_19: (+1)
   \   00000394   0x4658             MOV      R0,R11
   \   00000396   0x.... 0x....      BL       sprintf
   \   0000039A   0x2003             MOVS     R0,#+3
   \   0000039C   0x73A0             STRB     R0,[R4, #+14]
   \                     ??main_18: (+1)
   \   0000039E   0xF9B7 0x0008      LDRSH    R0,[R7, #+8]
   \   000003A2   0x2804             CMP      R0,#+4
   \   000003A4   0xDB0B             BLT.N    ??main_22
   \   000003A6   0x7BA0             LDRB     R0,[R4, #+14]
   \   000003A8   0xB908             CBNZ.N   R0,??main_23
   \   000003AA   0x4631             MOV      R1,R6
   \   000003AC   0xE012             B.N      ??main_24
   \                     ??main_23: (+1)
   \   000003AE   0x2801             CMP      R0,#+1
   \   000003B0   0xD113             BNE.N    ??main_25
   \   000003B2   0x6E20             LDR      R0,[R4, #+96]
   \   000003B4   0x6DA1             LDR      R1,[R4, #+88]
   \   000003B6   0x4288             CMP      R0,R1
   \   000003B8   0xD20F             BCS.N    ??main_25
   \   000003BA   0x4631             MOV      R1,R6
   \   000003BC   0xE00A             B.N      ??main_24
   \                     ??main_22: (+1)
   \   000003BE   0x9807             LDR      R0,[SP, #+28]
   \   000003C0   0xB958             CBNZ.N   R0,??main_25
   \   000003C2   0x7BA0             LDRB     R0,[R4, #+14]
   \   000003C4   0xB128             CBZ.N    R0,??main_26
   \   000003C6   0x2801             CMP      R0,#+1
   \   000003C8   0xD107             BNE.N    ??main_25
   \   000003CA   0x6E20             LDR      R0,[R4, #+96]
   \   000003CC   0x6DA1             LDR      R1,[R4, #+88]
   \   000003CE   0x4288             CMP      R0,R1
   \   000003D0   0xD203             BCS.N    ??main_25
   \                     ??main_26: (+1)
   \   000003D2   0x4629             MOV      R1,R5
   \                     ??main_24: (+1)
   \   000003D4   0x4658             MOV      R0,R11
   \   000003D6   0x.... 0x....      BL       sprintf
   \                     ??main_25: (+1)
   \   000003DA   0x7960             LDRB     R0,[R4, #+5]
   \   000003DC   0x7A21             LDRB     R1,[R4, #+8]
   \   000003DE   0x4288             CMP      R0,R1
   \   000003E0   0xD004             BEQ.N    ??main_27
   \   000003E2   0x7AE1             LDRB     R1,[R4, #+11]
   \   000003E4   0x29FF             CMP      R1,#+255
   \   000003E6   0xD002             BEQ.N    ??main_28
   \   000003E8   0x1C49             ADDS     R1,R1,#+1
   \   000003EA   0xE000             B.N      ??main_28
   \                     ??main_27: (+1)
   \   000003EC   0x2100             MOVS     R1,#+0
   \                     ??main_28: (+1)
   \   000003EE   0x72E1             STRB     R1,[R4, #+11]
   \   000003F0   0x7AE1             LDRB     R1,[R4, #+11]
   \   000003F2   0x2903             CMP      R1,#+3
   \   000003F4   0xBF28             IT       CS 
   \   000003F6   0x7220             STRBCS   R0,[R4, #+8]
   \   000003F8   0x79A0             LDRB     R0,[R4, #+6]
   \   000003FA   0x7A61             LDRB     R1,[R4, #+9]
   \   000003FC   0x4288             CMP      R0,R1
   \   000003FE   0xD004             BEQ.N    ??main_29
   \   00000400   0x7B21             LDRB     R1,[R4, #+12]
   \   00000402   0x29FF             CMP      R1,#+255
   \   00000404   0xD002             BEQ.N    ??main_30
   \   00000406   0x1C49             ADDS     R1,R1,#+1
   \   00000408   0xE000             B.N      ??main_30
   \                     ??main_29: (+1)
   \   0000040A   0x2100             MOVS     R1,#+0
   \                     ??main_30: (+1)
   \   0000040C   0x7321             STRB     R1,[R4, #+12]
   \   0000040E   0x7B21             LDRB     R1,[R4, #+12]
   \   00000410   0x2903             CMP      R1,#+3
   \   00000412   0xBF28             IT       CS 
   \   00000414   0x7260             STRBCS   R0,[R4, #+9]
   \   00000416   0x79E1             LDRB     R1,[R4, #+7]
   \   00000418   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000041A   0x4281             CMP      R1,R0
   \   0000041C   0xF43F 0xAED7      BEQ.W    ??main_3
   \   00000420   0x7B60             LDRB     R0,[R4, #+13]
   \   00000422   0x28FF             CMP      R0,#+255
   \   00000424   0xF43F 0xAED4      BEQ.W    ??main_4
   \   00000428   0x1C40             ADDS     R0,R0,#+1
   \   0000042A   0xE6D1             B.N      ??main_4
    651                  } //(cntTime200==40)
    652                }//if (flg10ms==1)	
    653            }
    654          }

   \                                 In section .data, align 4
   \                     flgDlyUpd:
   \   00000000   0x00               DC8 0
   \                     stFrstFrmStore:
   \   00000001   0x00               DC8 0
   \                     flg10ms:
   \   00000002   0x00               DC8 0
   \                     buffer_switch:
   \   00000003   0x01               DC8 1
   \                     stDir:
   \   00000004   0x00               DC8 0
   \                     flgS2:
   \   00000005   0x00               DC8 0
   \                     flgS3:
   \   00000006   0x00               DC8 0
   \                     flgS4:
   \   00000007   0x00               DC8 0
   \                     flgS2Flt:
   \   00000008   0x00               DC8 0
   \                     flgS3Flt:
   \   00000009   0x00               DC8 0
   \                     flgS4Flt:
   \   0000000A   0x00               DC8 0
   \                     flgS2Ins:
   \   0000000B   0x00               DC8 0
   \                     flgS3Ins:
   \   0000000C   0x00               DC8 0
   \                     flgS4Ins:
   \   0000000D   0x00               DC8 0
   \   0000000E   0x00               DC8 0
   \   0000000F   0x00               DC8 0
   \                     WaveRec_idxSens4:
   \   00000010   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens3:
   \   00000012   0x00 0x00          DC8 0, 0
   \                     I2S2_idxTmp:
   \   00000014   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens1:
   \   00000016   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens2:
   \   00000018   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens5:
   \   0000001A   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens6:
   \   0000001C   0x00 0x00          DC8 0, 0
   \                     idxSPI5DataBuf3:
   \   0000001E   0x00 0x00          DC8 0, 0
   \                     idxLatency14:
   \   00000020   0x00 0x00          DC8 0, 0
   \                     idxLatency25:
   \   00000022   0x00 0x00          DC8 0, 0
   \                     idxLatency63:
   \   00000024   0x00 0x00          DC8 0, 0
   \                     idxLatency78:
   \   00000026   0x00 0x00          DC8 0, 0
   \                     cntTime200:
   \   00000028   0x00 0x00          DC8 0, 0
   \   0000002A   0x00 0x00          DC8 0, 0
   \                     GPIO_INS:
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     FacMic:
   \   00000040   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000050   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     CrssCorVal78:
   \   00000058   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     CrssCorVal14:
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     CrssCorVal25:
   \   00000060   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     CrssCorVal63:
   \   00000064   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     hUSBDDevice:
   \   00000068   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000078   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000088   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000098   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000108   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000118   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000128   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000138   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000148   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000158   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000168   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000178   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000188   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000198   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000208   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000218   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000228   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000238   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000248   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000258   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000268   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000278   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     fir256Coff:
   \   0000028C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000029C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000030C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000031C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000032C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000033C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000034C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000035C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000036C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000037C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000038C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000039C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000040C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000041C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000042C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000043C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000044C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000045C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000046C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000047C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000048C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000049C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000050C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000051C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000052C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000053C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000054C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000055C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000056C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000057C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000058C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000059C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000060C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000061C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000062C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000063C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000064C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000065C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000066C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000067C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000068C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000069C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000006FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000070C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000071C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000072C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000073C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000074C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000075C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000076C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000077C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000078C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000079C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000007FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000080C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000081C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000082C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000083C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000084C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000085C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000086C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000087C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000088C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000089C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000008FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000090C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000091C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000092C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000093C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000094C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000095C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000096C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000097C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000098C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000099C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000009FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A0C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A1C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A2C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A3C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A4C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A5C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A6C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A7C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     pUARTBuf:
   \   00000A8C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000A9C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000AAC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000ABC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000ACC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000ADC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000AEC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000AFC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     pI2CData:
   \   00000000   0x00 0x0A          DC8 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150
   \              0x14 0x1E    
   \              0x28 0x32    
   \              0x3C 0x46    
   \              0x50 0x5A    
   \              0x64 0x6E    
   \              0x78 0x82    
   \              0x8C 0x96    
   \   00000010   0xA0 0xAA          DC8 160, 170, 180, 190
   \              0xB4 0xBE    

   \                                 In section .data, align 1
   \                     btnSW1:
   \   00000000   0x00               DC8 0
   \                     btnSW2:
   \   00000001   0x00               DC8 0
   \                     cntBtnPress:
   \   00000002   0x00               DC8 0
   \                     Command_index:
   \   00000003   0x01               DC8 1
    655          
    656          /**
    657            * @brief  Toggle Leds.
    658            * @param  None
    659            * @retval None
    660            */

   \                                 In section .text, align 2, keep-with-next
    661          void Toggle_Leds(void)
    662          {
    663            static uint32_t ticks = 0;
    664          
    665            if (ticks++ > 200)
   \                     Toggle_Leds: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable25_19
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x1C4A             ADDS     R2,R1,#+1
   \   00000008   0x29C9             CMP      R1,#+201
   \   0000000A   0xBF28             IT       CS 
   \   0000000C   0x2200             MOVCS    R2,#+0
    666            {
    667              //BSP_LED_Toggle(LED1);
    668              ticks = 0;
   \   0000000E   0x6002             STR      R2,[R0, #+0]
    669            }
    670          }
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??ticks:
   \   00000000                      DS8 4
    671          
    672          
    673          /**
    674            * @brief  User Process
    675            * @param  phost: Host Handle
    676            * @param  id: Host Library user message ID
    677            * @retval None
    678            */
    679          static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
                             ^
Warning[Pe177]: function "USBH_UserProcess" was declared but never referenced
    680          {
    681            switch(id)
    682            { 
    683            case HOST_USER_SELECT_CONFIGURATION:
    684              break;
    685              
    686            case HOST_USER_DISCONNECTION:
    687              appli_state = APPLICATION_DISCONNECT;
    688              break;
    689          
    690            case HOST_USER_CLASS_ACTIVE:
    691              appli_state = APPLICATION_READY;
    692              break;
    693           
    694            case HOST_USER_CONNECTION:
    695              appli_state = APPLICATION_START;
    696              break;
    697             
    698            default:
    699              break; 
    700            }
    701          }
    702          
    703          /**
    704            * @brief  System Clock Configuration
    705            *         The system Clock is configured as follow : 
    706            *            System Clock source            = PLL (HSE)
    707            *            SYSCLK(Hz)                     = 216000000
    708            *            HCLK(Hz)                       = 216000000
    709            *            AHB Prescaler                  = 1
    710            *            APB1 Prescaler                 = 4
    711            *            APB2 Prescaler                 = 2
    712            *            HSE Frequency(Hz)              = 25000000
    713            *            PLL_M                          = 25
    714            *            PLL_N                          = 432
    715            *            PLL_P                          = 2
    716            *            PLL_Q                          = 9
    717            *            VDD(V)                         = 3.3
    718            *            Main regulator output voltage  = Scale1 mode
    719            *            Flash Latency(WS)              = 7
    720            * @param  None
    721            * @retval None
    722            */

   \                                 In section .text, align 2, keep-with-next
    723          static void SystemClock_Config(void)
    724          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B2             SUB      SP,SP,#+200
    725            RCC_ClkInitTypeDef RCC_ClkInitStruct;
    726            RCC_OscInitTypeDef RCC_OscInitStruct;
    727            RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    728            HAL_StatusTypeDef ret = HAL_OK;
    729          
    730            /* Enable HSE Oscillator and activate PLL with HSE as source */
    731            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x9026             STR      R0,[SP, #+152]
    732            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   00000008   0xF44F 0x3080      MOV      R0,#+65536
   \   0000000C   0x9027             STR      R0,[SP, #+156]
    733            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x902C             STR      R0,[SP, #+176]
    734            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    735            RCC_OscInitStruct.PLL.PLLM = 25;
   \   00000012   0x2019             MOVS     R0,#+25
   \   00000014   0x902E             STR      R0,[SP, #+184]
    736            RCC_OscInitStruct.PLL.PLLN = 432;  
   \   00000016   0xF44F 0x70D8      MOV      R0,#+432
   \   0000001A   0x902F             STR      R0,[SP, #+188]
    737            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x9030             STR      R0,[SP, #+192]
    738            RCC_OscInitStruct.PLL.PLLQ = 9;
   \   00000020   0x2009             MOVS     R0,#+9
   \   00000022   0xF44F 0x0480      MOV      R4,#+4194304
   \   00000026   0x9031             STR      R0,[SP, #+196]
   \   00000028   0x942D             STR      R4,[SP, #+180]
    739          
    740            ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
   \   0000002A   0xA826             ADD      R0,SP,#+152
   \   0000002C   0x.... 0x....      BL       HAL_RCC_OscConfig
    741            if(ret != HAL_OK)
    742            {
    743              //while(1) { ; }
    744            }
    745          
    746            /* Activate the OverDrive to reach the 216 MHz Frequency */
    747            ret = HAL_PWREx_EnableOverDrive();
   \   00000030   0x.... 0x....      BL       HAL_PWREx_EnableOverDrive
    748            if(ret != HAL_OK)
    749            {
    750              //while(1) { ; }
    751            }
    752          
    753            /* Select PLLSAI output as USB clock source */
    754            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48 ;
   \   00000034   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000038   0x9005             STR      R0,[SP, #+20]
    755            PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
   \   0000003A   0xF04F 0x6000      MOV      R0,#+134217728
   \   0000003E   0x9024             STR      R0,[SP, #+144]
    756          
    757            
    758            PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
   \   00000040   0x20C0             MOVS     R0,#+192
   \   00000042   0x900A             STR      R0,[SP, #+40]
    759            PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0x900B             STR      R0,[SP, #+44]
    760            PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x900D             STR      R0,[SP, #+52]
    761            PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0x900C             STR      R0,[SP, #+48]
    762          
    763          
    764            ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
   \   00000050   0xA805             ADD      R0,SP,#+20
   \   00000052   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    765            
    766            if(ret != HAL_OK)
    767            {
    768              //while(1) { ; }
    769            }
    770            
    771            /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
    772            RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
   \   00000056   0x200F             MOVS     R0,#+15
    773            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    774            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
    775            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
    776            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
    777          
    778            ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
   \   00000058   0x2107             MOVS     R1,#+7
   \   0000005A   0x9000             STR      R0,[SP, #+0]
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x9001             STR      R0,[SP, #+4]
   \   00000060   0x2080             MOVS     R0,#+128
   \   00000062   0x9002             STR      R0,[SP, #+8]
   \   00000064   0xF44F 0x50A0      MOV      R0,#+5120
   \   00000068   0x9003             STR      R0,[SP, #+12]
   \   0000006A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000006E   0x9004             STR      R0,[SP, #+16]
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x.... 0x....      BL       HAL_RCC_ClockConfig
    779            if(ret != HAL_OK)
    780            {
    781              //while(1) { ; }
    782            }
    783            
    784           //sop1hc 344/7 = 49.142 MHz
    785            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable25_20  ;; 0x100001
    786            PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   0000007A   0x9415             STR      R4,[SP, #+84]
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    787            PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x9012             STR      R0,[SP, #+72]
    788            PeriphClkInitStruct.PLLI2S.PLLI2SP = 8;
   \   00000082   0x2008             MOVS     R0,#+8
   \   00000084   0x9009             STR      R0,[SP, #+36]
    789            PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   00000086   0xF44F 0x70AC      MOV      R0,#+344
   \   0000008A   0x9006             STR      R0,[SP, #+24]
    790            PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
   \   0000008C   0x2007             MOVS     R0,#+7
   \   0000008E   0x9008             STR      R0,[SP, #+32]
    791            PeriphClkInitStruct.PLLI2S.PLLI2SR = 7;
   \   00000090   0x9007             STR      R0,[SP, #+28]
    792            PeriphClkInitStruct.PLLI2SDivQ = 1;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x900E             STR      R0,[SP, #+56]
    793            HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);	
   \   00000096   0xA805             ADD      R0,SP,#+20
   \   00000098   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    794          }
   \   0000009C   0xB032             ADD      SP,SP,#+200
   \   0000009E   0xBD10             POP      {R4,PC}          ;; return
    795          
    796          /**
    797            * @brief  Clock Config.
    798            * @param  hsai: might be required to set audio peripheral predivider if any.
    799            * @param  AudioFreq: Audio frequency used to play the audio stream.
    800            * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
    801            *         Being __weak it can be overwritten by the application     
    802            * @retval None
    803            */

   \                                 In section .text, align 2, keep-with-next
    804          void BSP_AUDIO_OUT_ClockConfig(uint32_t AudioFreq, void *Params)
    805          {
   \                     BSP_AUDIO_OUT_ClockConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0A2             SUB      SP,SP,#+136
   \   00000004   0x4604             MOV      R4,R0
    806            RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;
    807          
    808            HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
    809            
    810            /* Set the PLL configuration according to the audio frequency */
    811            if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
   \   0000000C   0xF642 0x3011      MOVW     R0,#+11025
   \   00000010   0x4284             CMP      R4,R0
   \   00000012   0xBF1F             ITTTT    NE 
   \   00000014   0xF245 0x6022      MOVWNE   R0,#+22050
   \   00000018   0x4284             CMPNE    R4,R0
   \   0000001A   0xF64A 0x4044      MOVWNE   R0,#+44100
   \   0000001E   0x4284             CMPNE    R4,R0
   \   00000020   0xD10E             BNE.N    ??BSP_AUDIO_OUT_ClockConfig_0
    812            {
    813              /* Configure PLLSAI prescalers */
    814              /* PLLI2S_VCO: VCO_429M
    815              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    816              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    817              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \   00000022   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000026   0x9000             STR      R0,[SP, #+0]
    818              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000028   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000002C   0x9010             STR      R0,[SP, #+64]
    819              RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
   \   0000002E   0x2008             MOVS     R0,#+8
   \   00000030   0x9004             STR      R0,[SP, #+16]
    820              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
   \   00000032   0xF240 0x10AD      MOVW     R0,#+429
   \   00000036   0x9001             STR      R0,[SP, #+4]
    821              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x9003             STR      R0,[SP, #+12]
    822              RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
   \   0000003C   0x2013             MOVS     R0,#+19
   \   0000003E   0xE00B             B.N      ??BSP_AUDIO_OUT_ClockConfig_1
    823              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
    824            }
    825            else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K), AUDIO_FREQUENCY_96K */
    826            {
    827              /* SAI clock config
    828              PLLI2S_VCO: VCO_344M
    829              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
    830              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 49.142/1 = 49.142 Mhz */
    831              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \                     ??BSP_AUDIO_OUT_ClockConfig_0: (+1)
   \   00000040   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000044   0x9000             STR      R0,[SP, #+0]
    832              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000046   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000004A   0x9010             STR      R0,[SP, #+64]
    833          	//RCC_ExCLKInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
    834          //    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    835              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   0000004C   0xF44F 0x70AC      MOV      R0,#+344
   \   00000050   0x9001             STR      R0,[SP, #+4]
    836              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
   \   00000052   0x2007             MOVS     R0,#+7
   \   00000054   0x9003             STR      R0,[SP, #+12]
    837          	//RCC_ExCLKInitStruct.PLLI2S.PLLI2SR = 1;
    838              RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \                     ??BSP_AUDIO_OUT_ClockConfig_1: (+1)
   \   00000058   0x9009             STR      R0,[SP, #+36]
    839              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    840            }
    841            
    842          }
   \   00000060   0xB022             ADD      SP,SP,#+136
   \   00000062   0xBD10             POP      {R4,PC}          ;; return
    843          
    844          
    845          
    846          #ifdef  USE_FULL_ASSERT
    847          /**
    848            * @brief  Reports the name of the source file and the source line number
    849            *         where the assert_param error has occurred.
    850            * @param  file: pointer to the source file name
    851            * @param  line: assert_param error line source number
    852            * @retval None
    853            */
    854          void assert_failed(uint8_t* file, uint32_t line)
    855          { 
    856            /* User can add his own implementation to report the file name and line number,
    857               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    858          
    859            /* Infinite loop */
    860            while (1)
    861            {
    862            }
    863          }
    864          #endif
    865          
    866          /**
    867            * @brief  CPU L1-Cache enable.
    868            * @param  None
    869            * @retval None
    870            */
    871          static void CPU_CACHE_Enable(void)
    872          {
    873            /* Enable I-Cache */
    874            SCB_EnableICache();
    875          
    876            /* Enable D-Cache */
    877            SCB_EnableDCache();
    878          }
    879          
    880          

   \                                 In section .text, align 2, keep-with-next
    881          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
    882          {
   \                     HAL_I2C_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    883          
    884            GPIO_InitTypeDef GPIO_InitStruct;
    885              
    886            if(hi2c->Instance==I2C1)
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable25_21  ;; 0x40005400
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD12C             BNE.N    ??HAL_I2C_MspInit_0
    887            {
    888          	/* USER CODE BEGIN I2C1_MspInit 0 */
    889          
    890          	/*##-1- Configure the I2C clock source. The clock is derived from the SYSCLK #*/
    891          	//RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
    892          	//RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    893          	//HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
    894          
    895          	/*##-2- Enable peripherals and GPIO Clocks #################################*/
    896          	/* Enable GPIO TX/RX clock */
    897          	__HAL_RCC_GPIOB_CLK_ENABLE();
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable25_6  ;; 0x40023830
    898          
    899          	/**I2C1 GPIO Configuration	
    900          	PB6	  ------> I2C1_SCL (PB6)
    901          	PB7	  ------> I2C1_SDA (PB7) 
    902          	*/
    903          	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    904          	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    905          	GPIO_InitStruct.Pull = GPIO_PULLUP;
    906          	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    907          	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    908          	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000012   0xA901             ADD      R1,SP,#+4
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000001A   0x6020             STR      R0,[R4, #+0]
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0x20C0             MOVS     R0,#+192
   \   00000028   0x9001             STR      R0,[SP, #+4]
   \   0000002A   0x2012             MOVS     R0,#+18
   \   0000002C   0x9002             STR      R0,[SP, #+8]
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x9003             STR      R0,[SP, #+12]
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x9004             STR      R0,[SP, #+16]
   \   00000036   0x2004             MOVS     R0,#+4
   \   00000038   0x9005             STR      R0,[SP, #+20]
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable25_22  ;; 0x40020400
   \   0000003E   0x.... 0x....      BL       HAL_GPIO_Init
    909          
    910          	/* Peripheral clock enable */
    911          	__HAL_RCC_I2C1_CLK_ENABLE();
   \   00000042   0x6920             LDR      R0,[R4, #+16]
    912          	/* Peripheral interrupt init*/
    913          	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x2103             MOVS     R1,#+3
   \   00000048   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   0000004C   0x6120             STR      R0,[R4, #+16]
   \   0000004E   0x6920             LDR      R0,[R4, #+16]
   \   00000050   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x201F             MOVS     R0,#+31
   \   0000005A   0x.... 0x....      BL       HAL_NVIC_SetPriority
    914          	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \   0000005E   0x201F             MOVS     R0,#+31
   \   00000060   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    915          
    916            }
    917            else if(hi2c->Instance==I2C2)
    918            {
    919            /* USER CODE BEGIN I2C2_MspInit 0 */
    920          
    921            /* USER CODE END I2C2_MspInit 0 */
    922            
    923              /**I2C2 GPIO Configuration    
    924              PB10     ------> I2C2_SCL
    925              PB11     ------> I2C2_SDA 
    926              */
    927              __HAL_RCC_GPIOB_CLK_ENABLE();
    928              
    929              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    930              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    931              GPIO_InitStruct.Pull = GPIO_NOPULL;
    932              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    933              GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    934              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    935          
    936              /* Peripheral clock enable */
    937              __HAL_RCC_I2C2_CLK_ENABLE();
    938              /* Peripheral interrupt init*/
    939              //HAL_NVIC_SetPriority(I2C2_EV_IRQn, 3, 1);
    940              //HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    941            }
    942          
    943          }
   \   00000064   0xB006             ADD      SP,SP,#+24
   \   00000066   0xBD10             POP      {R4,PC}
   \                     ??HAL_I2C_MspInit_0: (+1)
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable25_23  ;; 0x40005800
   \   0000006C   0x4288             CMP      R0,R1
   \   0000006E   0xD123             BNE.N    ??HAL_I2C_MspInit_1
   \   00000070   0x.... 0x....      LDR.W    R4,??DataTable25_6  ;; 0x40023830
   \   00000074   0xA901             ADD      R1,SP,#+4
   \   00000076   0x6820             LDR      R0,[R4, #+0]
   \   00000078   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000007C   0x6020             STR      R0,[R4, #+0]
   \   0000007E   0x6820             LDR      R0,[R4, #+0]
   \   00000080   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000084   0x9000             STR      R0,[SP, #+0]
   \   00000086   0x9800             LDR      R0,[SP, #+0]
   \   00000088   0xF44F 0x6040      MOV      R0,#+3072
   \   0000008C   0x9001             STR      R0,[SP, #+4]
   \   0000008E   0x2012             MOVS     R0,#+18
   \   00000090   0x9002             STR      R0,[SP, #+8]
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x9003             STR      R0,[SP, #+12]
   \   00000096   0x2003             MOVS     R0,#+3
   \   00000098   0x9004             STR      R0,[SP, #+16]
   \   0000009A   0x2004             MOVS     R0,#+4
   \   0000009C   0x9005             STR      R0,[SP, #+20]
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable25_22  ;; 0x40020400
   \   000000A2   0x.... 0x....      BL       HAL_GPIO_Init
   \   000000A6   0x6920             LDR      R0,[R4, #+16]
   \   000000A8   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000000AC   0x6120             STR      R0,[R4, #+16]
   \   000000AE   0x6920             LDR      R0,[R4, #+16]
   \   000000B0   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000000B4   0x9000             STR      R0,[SP, #+0]
   \   000000B6   0x9800             LDR      R0,[SP, #+0]
   \                     ??HAL_I2C_MspInit_1: (+1)
   \   000000B8   0xB006             ADD      SP,SP,#+24
   \   000000BA   0xBD10             POP      {R4,PC}          ;; return
    944          
    945          /*---------------------------------------------------*/
    946          /*   UART                                            */
    947          /* UART4 init function */

   \                                 In section .text, align 2, keep-with-next
    948          void USART3_Init(void)
    949          {
    950          
    951            huart3.Instance = USART3;
   \                     USART3_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable25_16
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable25_24  ;; 0x40004800
   \   00000008   0x6001             STR      R1,[R0, #+0]
    952            huart3.Init.BaudRate = 115200;
   \   0000000A   0xF44F 0x31E1      MOV      R1,#+115200
   \   0000000E   0x6041             STR      R1,[R0, #+4]
    953            huart3.Init.WordLength = UART_WORDLENGTH_8B;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6081             STR      R1,[R0, #+8]
    954            huart3.Init.StopBits = UART_STOPBITS_1;
   \   00000014   0x60C1             STR      R1,[R0, #+12]
    955            huart3.Init.Parity = UART_PARITY_NONE;
   \   00000016   0x6101             STR      R1,[R0, #+16]
    956            huart3.Init.Mode = UART_MODE_TX_RX;
   \   00000018   0x210C             MOVS     R1,#+12
   \   0000001A   0x6141             STR      R1,[R0, #+20]
    957            huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6181             STR      R1,[R0, #+24]
    958            huart3.Init.OverSampling = UART_OVERSAMPLING_16;
   \   00000020   0x61C1             STR      R1,[R0, #+28]
    959            huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED ;
   \   00000022   0x6201             STR      R1,[R0, #+32]
    960            huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
   \   00000024   0x6241             STR      R1,[R0, #+36]
    961            HAL_UART_Init(&huart3);
   \   00000026   0x.... 0x....      B.W      HAL_UART_Init
    962          
    963            //HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
    964            //HAL_NVIC_EnableIRQ(USART3_IRQn);
    965          
    966          }
    967          
    968          

   \                                 In section .text, align 2, keep-with-next
    969          void HAL_UART_MspInit(UART_HandleTypeDef *huart)
    970          {
    971          
    972            GPIO_InitTypeDef GPIO_InitStruct;
    973            if(huart->Instance==USART3)
   \                     HAL_UART_MspInit: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable25_24  ;; 0x40004800
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD000             BEQ.N    ??HAL_UART_MspInit_0
   \   0000000A   0x4770             BX       LR
    974            {
    975          
    976          
    977            /* USER CODE END UART4_MspInit 0 */
    978              /* Peripheral clock enable */
    979              __USART3_CLK_ENABLE();
   \                     ??HAL_UART_MspInit_0: (+1)
   \   0000000C   0xB500             PUSH     {LR}
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable25_6  ;; 0x40023830
   \   00000012   0xB087             SUB      SP,SP,#+28
   \   00000014   0x6901             LDR      R1,[R0, #+16]
   \   00000016   0xF441 0x2180      ORR      R1,R1,#0x40000
   \   0000001A   0x6101             STR      R1,[R0, #+16]
   \   0000001C   0x6901             LDR      R1,[R0, #+16]
   \   0000001E   0xF401 0x2180      AND      R1,R1,#0x40000
   \   00000022   0x9100             STR      R1,[SP, #+0]
   \   00000024   0x9900             LDR      R1,[SP, #+0]
    980              __GPIOC_CLK_ENABLE();
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000002C   0x6001             STR      R1,[R0, #+0]
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
    981            
    982              /**UART4 GPIO Configuration    
    983              PC10     ------> USART3_TX
    984              PC11     ------> USART3_RX
    985              */
    986              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    987              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    988              GPIO_InitStruct.Pull = GPIO_PULLUP;
    989              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    990              GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    991              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000030   0xA901             ADD      R1,SP,#+4
   \   00000032   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0xF44F 0x6040      MOV      R0,#+3072
   \   0000003E   0x9001             STR      R0,[SP, #+4]
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x9002             STR      R0,[SP, #+8]
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x9003             STR      R0,[SP, #+12]
   \   00000048   0x2003             MOVS     R0,#+3
   \   0000004A   0x9004             STR      R0,[SP, #+16]
   \   0000004C   0x2007             MOVS     R0,#+7
   \   0000004E   0x9005             STR      R0,[SP, #+20]
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable25_25  ;; 0x40020800
   \   00000054   0x.... 0x....      BL       HAL_GPIO_Init
    992          
    993              /* NVIC for USART */
    994              HAL_NVIC_SetPriority(USART3_IRQn, 7, 1);
   \   00000058   0x2201             MOVS     R2,#+1
   \   0000005A   0x2107             MOVS     R1,#+7
   \   0000005C   0x2027             MOVS     R0,#+39
   \   0000005E   0x.... 0x....      BL       HAL_NVIC_SetPriority
    995              HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   00000062   0x2027             MOVS     R0,#+39
   \   00000064   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    996          
    997            }
    998          
    999          }
   \   00000068   0xB007             ADD      SP,SP,#+28
   \   0000006A   0xBD00             POP      {PC}             ;; return
   1000          
   1001          
   1002          

   \                                 In section .text, align 2, keep-with-next
   1003          void EXTI4_IRQHandler(void)
   1004          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1005              /* EXTI line interrupt detected */
   1006            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable25_26  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x06C0             LSLS     R0,R0,#+27
   \   00000008   0xD50E             BPL.N    ??EXTI4_IRQHandler_0
   1007            {
   1008              
   1009               if (cntRisingEXTI==20)
   \   0000000A   0x....             LDR.N    R0,??DataTable25_27
   \   0000000C   0x8801             LDRH     R1,[R0, #+0]
   \   0000000E   0x2914             CMP      R1,#+20
   \   00000010   0xD105             BNE.N    ??EXTI4_IRQHandler_1
   1010               {
   1011              	/*--------------Enable read PCM data --------------------*/   
   1012                  //flgDlyUpd = 1;  
   1013                  //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1014          		//__HAL_UNLOCK(&hspi5);
   1015                  //__HAL_SPI_ENABLE(&hspi5);
   1016                  cntRisingEXTI=0;
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x8001             STRH     R1,[R0, #+0]
   1017          
   1018                  /*Disable external interrupt */
   1019                  HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI4_IRQn));
   \   00000016   0x200A             MOVS     R0,#+10
   \   00000018   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   0000001C   0xE002             B.N      ??EXTI4_IRQHandler_2
   1020                  //HAL_GPIO_DeInit(GPIOB,GPIO_PIN_4);
   1021               }
   1022               else
   1023               {
   1024                  cntRisingEXTI++;
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   0000001E   0x8801             LDRH     R1,[R0, #+0]
   \   00000020   0x1C49             ADDS     R1,R1,#+1
   \   00000022   0x8001             STRH     R1,[R0, #+0]
   1025                  //__HAL_SPI_DISABLE(&hspi5);
   1026               }
   1027               
   1028                __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
   \                     ??EXTI4_IRQHandler_2: (+1)
   \   00000024   0x2010             MOVS     R0,#+16
   \   00000026   0x6020             STR      R0,[R4, #+0]
   1029          
   1030            }
   1031          }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
   1032                        

   \                                 In section .text, align 2, keep-with-next
   1033          void EXTI15_10_IRQHandler(void)
   1034          {
   1035          
   1036          }
   \                     EXTI15_10_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1037          
   1038          /* Events for Button Press */

   \                                 In section .text, align 2, keep-with-next
   1039          void EXTI9_5_IRQHandler(void)
   1040          {
   \                     EXTI9_5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1041          
   1042            /* EXTI line interrupt detected */
   1043            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable25_26  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0xD510             BPL.N    ??EXTI9_5_IRQHandler_0
   1044            {
   1045          	  btnSW2 = 1;
   \   0000000A   0x....             LDR.N    R0,??DataTable25_28
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x7041             STRB     R1,[R0, #+1]
   1046          	  if ((++cntBtnPress)==8) cntBtnPress=0;
   \   00000010   0x7881             LDRB     R1,[R0, #+2]
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0x7081             STRB     R1,[R0, #+2]
   \   00000016   0xB2C9             UXTB     R1,R1
   \   00000018   0x2908             CMP      R1,#+8
   \   0000001A   0xBF04             ITT      EQ 
   \   0000001C   0x2100             MOVEQ    R1,#+0
   \   0000001E   0x7081             STRBEQ   R1,[R0, #+2]
   1047          	  BSP_LED_Toggle(LED2);
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       BSP_LED_Toggle
   1048          	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
   \   00000026   0xF44F 0x7080      MOV      R0,#+256
   \   0000002A   0x6020             STR      R0,[R4, #+0]
   1049          
   1050            }
   1051          
   1052          
   1053            /* EXTI line interrupt detected */
   1054            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET)
   \                     ??EXTI9_5_IRQHandler_0: (+1)
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x0580             LSLS     R0,R0,#+22
   \   00000030   0xD50C             BPL.N    ??EXTI9_5_IRQHandler_1
   1055            {
   1056          		btnSW1 = 1;
   \   00000032   0x....             LDR.N    R0,??DataTable25_28
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x7001             STRB     R1,[R0, #+0]
   1057          		Command_index^=0x01;
   \   00000038   0x78C1             LDRB     R1,[R0, #+3]
   \   0000003A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000003E   0x70C1             STRB     R1,[R0, #+3]
   1058          		BSP_LED_Toggle(LED1);
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       BSP_LED_Toggle
   1059          
   1060          	   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
   \   00000046   0xF44F 0x7000      MOV      R0,#+512
   \   0000004A   0x6020             STR      R0,[R4, #+0]
   1061            }
   1062          
   1063          }
   \                     ??EXTI9_5_IRQHandler_1: (+1)
   \   0000004C   0xBD10             POP      {R4,PC}          ;; return
   1064          
   1065          

   \                                 In section .text, align 2, keep-with-next
   1066          void DFT_Init(void)
   1067          {
   \                     DFT_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1068          #if MAIN_CRSCORR
   1069          		arm_rfft_init_q15(&RealFFT_Ins,(uint32_t)128,(uint32_t)0,(uint32_t)1);
   1070          		arm_rfft_init_q15(&RealIFFT_Ins,(uint32_t)128,(uint32_t)1,(uint32_t)1);
   1071          #endif  
   1072          		/* Initialize the CFFT/CIFFT module */
   1073          		arm_rfft_init_f32(&S,&SS, 512,  0, 1);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x....             LDR.N    R4,??DataTable25_29
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0xF44F 0x7200      MOV      R2,#+512
   \   00000010   0x4621             MOV      R1,R4
   \   00000012   0xF104 0x0078      ADD      R0,R4,#+120
   \   00000016   0x.... 0x....      BL       arm_rfft_init_f32
   1074          		arm_rfft_init_f32(&S1,&SS1, 512,  0, 1); 
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0xF44F 0x7200      MOV      R2,#+512
   \   00000024   0xF104 0x0114      ADD      R1,R4,#+20
   \   00000028   0xF104 0x0090      ADD      R0,R4,#+144
   \   0000002C   0x.... 0x....      BL       arm_rfft_init_f32
   1075          		arm_rfft_init_f32(&S2,&SS2, 512,  0, 1); 
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x2300             MOVS     R3,#+0
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0xF44F 0x7200      MOV      R2,#+512
   \   0000003A   0xF104 0x0128      ADD      R1,R4,#+40
   \   0000003E   0xF104 0x00A8      ADD      R0,R4,#+168
   \   00000042   0x.... 0x....      BL       arm_rfft_init_f32
   1076          		arm_rfft_init_f32(&S3,&SS3, 512,  0, 1); 
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x2300             MOVS     R3,#+0
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0xF44F 0x7200      MOV      R2,#+512
   \   00000050   0xF104 0x013C      ADD      R1,R4,#+60
   \   00000054   0xF104 0x00C0      ADD      R0,R4,#+192
   \   00000058   0x.... 0x....      BL       arm_rfft_init_f32
   1077          		arm_rfft_init_f32(&S4,&SS4, 512,  0, 1);
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x2300             MOVS     R3,#+0
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0xF44F 0x7200      MOV      R2,#+512
   \   00000066   0xF104 0x0150      ADD      R1,R4,#+80
   \   0000006A   0xF104 0x00D8      ADD      R0,R4,#+216
   \   0000006E   0x.... 0x....      BL       arm_rfft_init_f32
   1078          		arm_rfft_init_f32(&IS,&ISS, 512,  1, 1);
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x2301             MOVS     R3,#+1
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0xF44F 0x7200      MOV      R2,#+512
   \   0000007C   0xF104 0x0164      ADD      R1,R4,#+100
   \   00000080   0xF104 0x00F0      ADD      R0,R4,#+240
   \   00000084   0x.... 0x....      BL       arm_rfft_init_f32
   1079          
   1080          		//arm_rfft_fast_init_f32(&S1, 512);
   1081                          //arm_rfft_fast_init_f32(&S2, 512);
   1082          		//arm_rfft_fast_init_f32(&S3, 512);
   1083          		//arm_rfft_fast_init_f32(&S4, 512);
   1084          		//arm_rfft_fast_init_f32(&IS, 512);
   1085          }
   \   00000088   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   1086          
   1087          

   \                                 In section .text, align 2, keep-with-next
   1088          void SumDelay(Mic_Array_Data *BufferIn)
   1089          {
   \                     SumDelay: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   1090                     //if (idxLatency12>idxLatency13)
   1091                     // {
   1092                     //     if (idxLatency13 > idxLatency14)
   1093                     //     {
   1094                     //         /* MIC2 --> MIC3 --> MIC4 */
   1095                     //     }
   1096                     //             else if (idxLatency14 > idxLatency12)
   1097                     //             {
   1098                     //        /* MIC4-->MIC2-->MIC3  */
   1099                     //            }
   1100                     //             else
   1101                     //             {
   1102                     //       /* MIC2-->MIC4-->MIC3  */
   1103                     //             }
   1104                     // }
   1105                     //else // idxLatency13>idxLatency12
   1106                     //     {
   1107                     //    if (idxLatency12 > idxLatency14)
   1108                     //    {
   1109                     //        //MIC3 --> MIC2 --> MIC4 
   1110                     //    }
   1111                     //        else if (idxLatency14 > idxLatency13)
   1112                     //        {
   1113                     //        //MIC4 --> MIC3 --> MIC2
   1114                     //        }
   1115                     //        else
   1116                     //        {
   1117                     //        //MIC3 --> MIC4 --> MIC2
   1118          	   //	   }
   1119          	   //}
   1120          
   1121          	
   1122          	for(uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R3,??DataTable25_30
   \   00000008   0xF503 0x6400      ADD      R4,R3,#+2048
   \   0000000C   0x.... 0x....      LDR.W    R8,??DataTable25
   \   00000010   0xF9B4 0x2002      LDRSH    R2,[R4, #+2]
   \   00000014   0x4681             MOV      R9,R0
   \   00000016   0x5E64             LDRSH    R4,[R4, R1]
   \   00000018   0xF9B8 0x6020      LDRSH    R6,[R8, #+32]
   \   0000001C   0xF242 0x0C28      MOVW     R12,#+8232
   \   00000020   0xF241 0x0E14      MOVW     LR,#+4116
   \   00000024   0x4252             RSBS     R2,R2,#+0
   \   00000026   0x4264             RSBS     R4,R4,#+0
   \   00000028   0x4276             RSBS     R6,R6,#+0
   1123          	{
   1124          
   1125          		 if (i%2==0)
   \                     ??SumDelay_0: (+1)
   \   0000002A   0xEB01 0x75D1      ADD      R5,R1,R1, LSR #+31
   \   0000002E   0x106D             ASRS     R5,R5,#+1
   \   00000030   0xEBB1 0x0545      SUBS     R5,R1,R5, LSL #+1
   \   00000034   0xD13F             BNE.N    ??SumDelay_1
   1126          		 {
   1127                              bufferSum[i] = (uint16_t)(BufferIn->bufMIC1[i]*FacMic.facMIC1 + 
   1128                              BufferIn->bufMIC2[(((i-idxLatency12)>0)?(i-idxLatency12):0)]*FacMic.facMIC2 + 
   1129                              BufferIn->bufMIC3[(((i-idxLatency13)>0)?(i-idxLatency13):0)]*FacMic.facMIC3 + 
   1130                              BufferIn->bufMIC4[(((i-idxLatency14)>0)?(i-idxLatency14):0)]*FacMic.facMIC4); 		
   \   00000036   0x2A01             CMP      R2,#+1
   \   00000038   0xBFAC             ITE      GE 
   \   0000003A   0x4692             MOVGE    R10,R2
   \   0000003C   0xF04F 0x0A00      MOVLT    R10,#+0
   \   00000040   0x2C01             CMP      R4,#+1
   \   00000042   0xEB00 0x0A4A      ADD      R10,R0,R10, LSL #+1
   \   00000046   0xBFA8             IT       GE 
   \   00000048   0x4625             MOVGE    R5,R4
   \   0000004A   0x2E01             CMP      R6,#+1
   \   0000004C   0xEB00 0x0545      ADD      R5,R0,R5, LSL #+1
   \   00000050   0xBFAC             ITE      GE 
   \   00000052   0x4637             MOVGE    R7,R6
   \   00000054   0x2700             MOVLT    R7,#+0
   \   00000056   0xF9B9 0xB000      LDRSH    R11,[R9, #+0]
   \   0000005A   0xF93E 0xA00A      LDRSH    R10,[LR, R10]
   \   0000005E   0xEDD8 0x0A10      VLDR     S1,[R8, #+64]
   \   00000062   0xF93C 0x5005      LDRSH    R5,[R12, R5]
   \   00000066   0xED98 0x1A11      VLDR     S2,[R8, #+68]
   \   0000006A   0xEE00 0xBA10      VMOV     S0,R11
   \   0000006E   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000072   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000076   0xEE00 0xAA90      VMOV     S1,R10
   \   0000007A   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   0000007E   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000082   0xEE00 0x5A90      VMOV     S1,R5
   \   00000086   0xEB00 0x0547      ADD      R5,R0,R7, LSL #+1
   \   0000008A   0xF243 0x073C      MOVW     R7,#+12348
   \   0000008E   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000092   0xED98 0x1A12      VLDR     S2,[R8, #+72]
   \   00000096   0x5F7D             LDRSH    R5,[R7, R5]
   \   00000098   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000009C   0xED98 0x1A13      VLDR     S2,[R8, #+76]
   \   000000A0   0xEE00 0x5A90      VMOV     S1,R5
   \   000000A4   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000000A8   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000AC   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000B0   0xEE10 0x5A10      VMOV     R5,S0
   \   000000B4   0xE001             B.N      ??SumDelay_2
   1131          		 }
   1132          		 else
   1133          		 {
   1134                               bufferSum[i] = (uint16_t)(BufferIn->bufMIC3[i]);
   \                     ??SumDelay_1: (+1)
   \   000000B6   0xF83C 0x5009      LDRH     R5,[R12, R9]
   1135          		 }
   1136          	}
   \                     ??SumDelay_2: (+1)
   \   000000BA   0x1C49             ADDS     R1,R1,#+1
   \   000000BC   0x1C76             ADDS     R6,R6,#+1
   \   000000BE   0x1C64             ADDS     R4,R4,#+1
   \   000000C0   0x1C52             ADDS     R2,R2,#+1
   \   000000C2   0xF5B1 0x6F80      CMP      R1,#+1024
   \   000000C6   0xF823 0x5B02      STRH     R5,[R3], #+2
   \   000000CA   0xF109 0x0902      ADD      R9,R9,#+2
   \   000000CE   0xDBAC             BLT.N    ??SumDelay_0
   1137          }
   \   000000D0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1138          
   1139          

   \                                 In section .text, align 2, keep-with-next
   1140          void ButtonInit(void)
   1141          {
   1142              /* PI8: SW2 */
   1143          	/* PI9: SW1 */
   1144          	 /* ----------------------*/
   1145          	 __GPIOB_CLK_ENABLE();
   \                     ButtonInit: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable25_6  ;; 0x40023830
   \   00000002   0xB580             PUSH     {R7,LR}
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0xF041 0x0102      ORR      R1,R1,#0x2
   \   0000000A   0x6001             STR      R1,[R0, #+0]
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   1146          	GPIO_INS.Pin = GPIO_PIN_8|GPIO_PIN_9;
   \   0000000E   0xF44F 0x7140      MOV      R1,#+768
   \   00000012   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0x....             LDR.N    R0,??DataTable25
   \   0000001C   0x62C1             STR      R1,[R0, #+44]
   1147          	GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   0000001E   0x....             LDR.N    R1,??DataTable25_10  ;; 0x10110000
   \   00000020   0x6301             STR      R1,[R0, #+48]
   1148          	GPIO_INS.Pull =GPIO_NOPULL;
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x6341             STR      R1,[R0, #+52]
   1149          	GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   00000026   0x2103             MOVS     R1,#+3
   \   00000028   0x6381             STR      R1,[R0, #+56]
   1150          	HAL_GPIO_Init(GPIOI,&GPIO_INS);
   \   0000002A   0xF100 0x012C      ADD      R1,R0,#+44
   \   0000002E   0x....             LDR.N    R0,??DataTable25_31  ;; 0x40022000
   \   00000030   0x.... 0x....      BL       HAL_GPIO_Init
   1151          	
   1152          	/* Enable and set Button EXTI Interrupt to the lowest priority */
   1153          	HAL_NVIC_SetPriority((IRQn_Type)EXTI9_5_IRQn, 0x0F, 0x00);
   \   00000034   0x2200             MOVS     R2,#+0
   \   00000036   0x210F             MOVS     R1,#+15
   \   00000038   0x2017             MOVS     R0,#+23
   \   0000003A   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1154          	HAL_NVIC_EnableIRQ((IRQn_Type)EXTI9_5_IRQn);
   \   0000003E   0x2017             MOVS     R0,#+23
   \   00000040   0xE8BD 0x4002      POP      {R1,LR}
   \   00000044   0x.... 0x....      B.W      HAL_NVIC_EnableIRQ
   1155          	/*-----------------------*/
   1156          
   1157          }
   1158          
   1159          
   1160          /* I2C2 init function */

   \                                 In section .text, align 2, keep-with-next
   1161          void MX_I2C2_Init(void)
   1162          {
   1163             __HAL_I2C_DISABLE(&hi2c2);
   \                     MX_I2C2_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable25_32
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x680A             LDR      R2,[R1, #+0]
   \   00000006   0x0852             LSRS     R2,R2,#+1
   \   00000008   0x0052             LSLS     R2,R2,#+1
   \   0000000A   0x600A             STR      R2,[R1, #+0]
   1164            hi2c2.Instance = I2C2;
   \   0000000C   0x....             LDR.N    R1,??DataTable25_23  ;; 0x40005800
   \   0000000E   0x6001             STR      R1,[R0, #+0]
   1165            hi2c2.Init.Timing =0x00A0689A ;//I2C_TIMING  0x00303D5D 0x00A0689A
   \   00000010   0x....             LDR.N    R1,??DataTable25_33  ;; 0xa0689a
   \   00000012   0x6041             STR      R1,[R0, #+4]
   1166            hi2c2.Init.OwnAddress1 = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6081             STR      R1,[R0, #+8]
   1167            hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x60C1             STR      R1,[R0, #+12]
   1168            hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6101             STR      R1,[R0, #+16]
   1169            hi2c2.Init.OwnAddress2 = 0;
   \   00000020   0x6141             STR      R1,[R0, #+20]
   1170            hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   00000022   0x6181             STR      R1,[R0, #+24]
   1171            hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   00000024   0x61C1             STR      R1,[R0, #+28]
   1172            hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   00000026   0x6201             STR      R1,[R0, #+32]
   1173            HAL_I2C_Init(&hi2c2);
   \   00000028   0x.... 0x....      B.W      HAL_I2C_Init
   1174          
   1175              /**Configure Analogue filter 
   1176              */
   1177            //HAL_I2CEx_AnalogFilter_Config(&hi2c2, I2C_ANALOGFILTER_ENABLE);
   1178          
   1179          }
   1180          

   \                                 In section .text, align 2, keep-with-next
   1181           void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
   1182          {  
   \                     HAL_I2S_TxCpltCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1183            Audio_Play_Out();  
   \   00000002   0x....             LDR.N    R5,??DataTable25
   \   00000004   0x....             LDR.N    R4,??DataTable25_34
   \   00000006   0x78E8             LDRB     R0,[R5, #+3]
   \   00000008   0xB148             CBZ.N    R0,??HAL_I2S_TxCpltCallback_0
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD001             BEQ.N    ??HAL_I2S_TxCpltCallback_1
   \   0000000E   0xD303             BCC.N    ??HAL_I2S_TxCpltCallback_2
   \   00000010   0xE00F             B.N      ??HAL_I2S_TxCpltCallback_3
   \                     ??HAL_I2S_TxCpltCallback_1: (+1)
   \   00000012   0x2140             MOVS     R1,#+64
   \   00000014   0x....             LDR.N    R0,??DataTable25_3
   \   00000016   0xE004             B.N      ??HAL_I2S_TxCpltCallback_4
   \                     ??HAL_I2S_TxCpltCallback_2: (+1)
   \   00000018   0x2140             MOVS     R1,#+64
   \   0000001A   0x....             LDR.N    R0,??DataTable25_2
   \   0000001C   0xE001             B.N      ??HAL_I2S_TxCpltCallback_4
   \                     ??HAL_I2S_TxCpltCallback_0: (+1)
   \   0000001E   0x2140             MOVS     R1,#+64
   \   00000020   0x....             LDR.N    R0,??DataTable25_1
   \                     ??HAL_I2S_TxCpltCallback_4: (+1)
   \   00000022   0x8822             LDRH     R2,[R4, #+0]
   \   00000024   0xEB00 0x1082      ADD      R0,R0,R2, LSL #+6
   \   00000028   0xF500 0x5000      ADD      R0,R0,#+8192
   \   0000002C   0x3028             ADDS     R0,R0,#+40
   \   0000002E   0x.... 0x....      BL       Audio_MAL_Play
   \                     ??HAL_I2S_TxCpltCallback_3: (+1)
   \   00000032   0x8820             LDRH     R0,[R4, #+0]
   \   00000034   0x.... 0x....      BL       AudioUSBSend
   \   00000038   0x8820             LDRH     R0,[R4, #+0]
   \   0000003A   0x1C40             ADDS     R0,R0,#+1
   \   0000003C   0x8020             STRH     R0,[R4, #+0]
   \   0000003E   0xB280             UXTH     R0,R0
   \   00000040   0x2840             CMP      R0,#+64
   \   00000042   0xD11F             BNE.N    ??HAL_I2S_TxCpltCallback_5
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable25_35
   \   00000048   0x82E8             STRH     R0,[R5, #+22]
   \   0000004A   0x8328             STRH     R0,[R5, #+24]
   \   0000004C   0x83E8             STRH     R0,[R5, #+30]
   \   0000004E   0x8268             STRH     R0,[R5, #+18]
   \   00000050   0x8228             STRH     R0,[R5, #+16]
   \   00000052   0x82A8             STRH     R0,[R5, #+20]
   \   00000054   0x8368             STRH     R0,[R5, #+26]
   \   00000056   0x83A8             STRH     R0,[R5, #+28]
   \   00000058   0x7028             STRB     R0,[R5, #+0]
   \   0000005A   0x8008             STRH     R0,[R1, #+0]
   \   0000005C   0x8020             STRH     R0,[R4, #+0]
   \   0000005E   0x78E8             LDRB     R0,[R5, #+3]
   \   00000060   0xB138             CBZ.N    R0,??HAL_I2S_TxCpltCallback_6
   \   00000062   0x2802             CMP      R0,#+2
   \   00000064   0xD001             BEQ.N    ??HAL_I2S_TxCpltCallback_7
   \   00000066   0xD302             BCC.N    ??HAL_I2S_TxCpltCallback_8
   \   00000068   0xE005             B.N      ??HAL_I2S_TxCpltCallback_9
   \                     ??HAL_I2S_TxCpltCallback_7: (+1)
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE002             B.N      ??HAL_I2S_TxCpltCallback_10
   \                     ??HAL_I2S_TxCpltCallback_8: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE000             B.N      ??HAL_I2S_TxCpltCallback_10
   \                     ??HAL_I2S_TxCpltCallback_6: (+1)
   \   00000072   0x2002             MOVS     R0,#+2
   \                     ??HAL_I2S_TxCpltCallback_10: (+1)
   \   00000074   0x70E8             STRB     R0,[R5, #+3]
   \                     ??HAL_I2S_TxCpltCallback_9: (+1)
   \   00000076   0x....             LDR.N    R0,??DataTable25_17
   \   00000078   0x8801             LDRH     R1,[R0, #+0]
   \   0000007A   0x2964             CMP      R1,#+100
   \   0000007C   0xDA02             BGE.N    ??HAL_I2S_TxCpltCallback_5
   \   0000007E   0x8801             LDRH     R1,[R0, #+0]
   \   00000080   0x1C49             ADDS     R1,R1,#+1
   \   00000082   0x8001             STRH     R1,[R0, #+0]
   1184          }
   \                     ??HAL_I2S_TxCpltCallback_5: (+1)
   \   00000084   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1185          

   \                                 In section .text, align 2, keep-with-next
   1186           uint8_t StartPlay(void)
   1187           {
   \                     StartPlay: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xF240 0x30FF      MOVW     R0,#+1023
   \   00000006   0x....             LDR.N    R4,??DataTable25
   1188          	while (1)
   1189          	{
   1190          		 /* there is data in the buffer */	
   1191          		 if((WaveRec_idxSens1>=(AUDIO_OUT_BUFFER_SIZE-1))&&(stFrstFrmStore<3))
   \                     ??StartPlay_0: (+1)
   \   00000008   0x8AE1             LDRH     R1,[R4, #+22]
   \   0000000A   0x4281             CMP      R1,R0
   \   0000000C   0xDBFC             BLT.N    ??StartPlay_0
   \   0000000E   0x7861             LDRB     R1,[R4, #+1]
   \   00000010   0x2903             CMP      R1,#+3
   \   00000012   0xDAF9             BGE.N    ??StartPlay_0
   1192          		 {
   1193          			 RESET_IDX
   \   00000014   0x2200             MOVS     R2,#+0
   1194          			 /* this is just run 1 time after 1st frame of I2S data full */
   1195          			 if ((stFrstFrmStore<3))
   1196          			 {
   1197                                       stFrstFrmStore++;
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0x82E2             STRH     R2,[R4, #+22]
   \   0000001A   0x8322             STRH     R2,[R4, #+24]
   \   0000001C   0x83E2             STRH     R2,[R4, #+30]
   \   0000001E   0x8262             STRH     R2,[R4, #+18]
   \   00000020   0x8222             STRH     R2,[R4, #+16]
   \   00000022   0x82A2             STRH     R2,[R4, #+20]
   \   00000024   0x8362             STRH     R2,[R4, #+26]
   \   00000026   0x83A2             STRH     R2,[R4, #+28]
   \   00000028   0x7022             STRB     R2,[R4, #+0]
   1198                       
   1199                                       buffer_switch = BUF2_PLAY; /* record data to buffer3 */
   \   0000002A   0x2201             MOVS     R2,#+1
   \   0000002C   0x7061             STRB     R1,[R4, #+1]
   1200                       
   1201                                       if (stFrstFrmStore==2)
   \   0000002E   0xB2C9             UXTB     R1,R1
   \   00000030   0x2902             CMP      R1,#+2
   \   00000032   0x70E2             STRB     R2,[R4, #+3]
   \   00000034   0xD1E8             BNE.N    ??StartPlay_0
   1202                                       {
   1203                                           
   1204                   
   1205                                           /*------------------------PLAYER------------------------------------------*/
   1206                                           Audio_MAL_Play((uint32_t)Buffer1.bufMIC1,2*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
   \   00000036   0x2140             MOVS     R1,#+64
   \   00000038   0x....             LDR.N    R0,??DataTable25_2
   \   0000003A   0x.... 0x....      BL       Audio_MAL_Play
   1207                                           /*------------------------------------------------------------------------*/				 
   1208                                           buffer_switch = BUF1_PLAY;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x70E0             STRB     R0,[R4, #+3]
   1209          								 uint16_t tdelay=100;
   1210          								 while(tdelay--);
   1211                                           //StartRecMic7_8();
   1212                                           return 0;		 
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
   1213                                       }				 
   1214                               
   1215          			 }
   1216          		 
   1217          		 }
   1218          	}
   1219           }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x........         DC32     flgDlyUpd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_2:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_3:
   \   00000000   0x........         DC32     Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_4:
   \   00000000   0xE000EF50         DC32     0xe000ef50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_5:
   \   00000000   0xE000ED14         DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_6:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_7:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_8:
   \   00000000   0x........         DC32     SPI4_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_9:
   \   00000000   0x........         DC32     WaveRecord_flgIni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_10:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_11:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_12:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_13:
   \   00000000   0x........         DC32     AUDIO_Desc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_14:
   \   00000000   0x........         DC32     USBD_AUDIO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_15:
   \   00000000   0x........         DC32     USBD_AUDIO_fops

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_16:
   \   00000000   0x........         DC32     huart3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_17:
   \   00000000   0x........         DC32     cntStrt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_18:
   \   00000000   0x........         DC32     EnergyError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_19:
   \   00000000   0x........         DC32     ??ticks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_20:
   \   00000000   0x00100001         DC32     0x100001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_21:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_22:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_23:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_24:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_25:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_26:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_27:
   \   00000000   0x........         DC32     cntRisingEXTI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_28:
   \   00000000   0x........         DC32     btnSW1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_29:
   \   00000000   0x........         DC32     SS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_30:
   \   00000000   0x........         DC32     bufferSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_31:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_32:
   \   00000000   0x........         DC32     hi2c2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_33:
   \   00000000   0x00A0689A         DC32     0xa0689a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_34:
   \   00000000   0x........         DC32     idxFrmPDMMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_35:
   \   00000000   0x........         DC32     WaveRec_idxTest

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x25 0x64          DC8 "%d:%d:%d:%d  "
   \              0x3A 0x25    
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x3A 0x25    
   \              0x64 0x20    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x2D 0x2D          DC8 "----------\015\012"
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x43 0x6C          DC8 "Close Mic 5\015\012"
   \              0x6F 0x73    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x35 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 2\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x32 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 4\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x34 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 1\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x31 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 3\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x33 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 6\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x36 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 7\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x37 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x43 0x6C          DC8 "Clsoe Mic 8\015\012"
   \              0x73 0x6F    
   \              0x65 0x20    
   \              0x4D 0x69    
   \              0x63 0x20    
   \              0x38 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x25 0x64          DC8 "%d:%d:%d:%d\012\015\012\015"
   \              0x3A 0x25    
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x3A 0x25    
   \              0x64 0x0A    
   \              0x0D 0x0A    
   \              0x0D 0x00    
   1220          /*****************************END OF FILE**************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     144   BSP_AUDIO_OUT_ClockConfig
       144   -> HAL_RCCEx_GetPeriphCLKConfig
       144   -> HAL_RCCEx_PeriphCLKConfig
       8   ButtonInit
         8   -> HAL_GPIO_Init
         0   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
      16   DFT_Init
        16   -> arm_rfft_init_f32
       0   EXTI15_10_IRQHandler
       8   EXTI4_IRQHandler
         8   -> HAL_NVIC_DisableIRQ
       8   EXTI9_5_IRQHandler
         8   -> BSP_LED_Toggle
      16   FFT_Update
         0   -> AudioPlayerUpd
        16   -> FactorUpd
        16   -> GCC_PHAT
        16   -> PDM2PCMSDO78
        16   -> SumDelay
      32   HAL_I2C_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
      16   HAL_I2S_TxCpltCallback
        16   -> AudioUSBSend
        16   -> Audio_MAL_Play
      32   HAL_UART_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       0   MX_I2C2_Init
         0   -> HAL_I2C_Init
       8   StartPlay
         8   -> Audio_MAL_Play
      36   SumDelay
     208   SystemClock_Config
       208   -> HAL_PWREx_EnableOverDrive
       208   -> HAL_RCCEx_PeriphCLKConfig
       208   -> HAL_RCC_ClockConfig
       208   -> HAL_RCC_OscConfig
       0   Toggle_Leds
       0   USART3_Init
         0   -> HAL_UART_Init
     168   main
       168   -> AUDIO_InitApplication
       168   -> BSP_LED_Init
       168   -> BSP_LED_Toggle
       168   -> BSP_SDRAM_Init
       168   -> ButtonInit
       168   -> DFT_Init
       168   -> EnergyNoiseCalc
       168   -> FFT_Update
       168   -> HAL_GPIO_Init
       168   -> HAL_GPIO_WritePin
       168   -> HAL_Init
       168   -> HAL_NVIC_EnableIRQ
       168   -> HAL_NVIC_SetPriority
       168   -> HAL_RCCEx_GetPeriphCLKConfig
       168   -> HAL_RCCEx_PeriphCLKConfig
       168   -> HAL_UART_Transmit_IT
       168   -> MIC1TO6_Init
       168   -> MX_I2C2_Init
       168   -> STA321MP_Ini
       168   -> StartPlay
       168   -> SystemClock_Config
       168   -> USART3_Init
       168   -> USBD_AUDIO_Init_Microphone_Descriptor
       168   -> USBD_AUDIO_RegisterInterface
       168   -> USBD_Init
       168   -> USBD_RegisterClass
       168   -> USBD_Start
       168   -> Window
       168   -> sprintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable25_10
       4  ??DataTable25_11
       4  ??DataTable25_12
       4  ??DataTable25_13
       4  ??DataTable25_14
       4  ??DataTable25_15
       4  ??DataTable25_16
       4  ??DataTable25_17
       4  ??DataTable25_18
       4  ??DataTable25_19
       4  ??DataTable25_2
       4  ??DataTable25_20
       4  ??DataTable25_21
       4  ??DataTable25_22
       4  ??DataTable25_23
       4  ??DataTable25_24
       4  ??DataTable25_25
       4  ??DataTable25_26
       4  ??DataTable25_27
       4  ??DataTable25_28
       4  ??DataTable25_29
       4  ??DataTable25_3
       4  ??DataTable25_30
       4  ??DataTable25_31
       4  ??DataTable25_32
       4  ??DataTable25_33
       4  ??DataTable25_34
       4  ??DataTable25_35
       4  ??DataTable25_4
       4  ??DataTable25_5
       4  ??DataTable25_6
       4  ??DataTable25_7
       4  ??DataTable25_8
       4  ??DataTable25_9
      16  ?_0
      16  ?_1
      16  ?_10
      16  ?_2
      16  ?_3
      16  ?_4
      16  ?_5
      16  ?_6
      16  ?_7
      16  ?_8
      16  ?_9
     100  BSP_AUDIO_OUT_ClockConfig
    4096  BufferTest
      72  ButtonInit
     138  DFT_Init
       2  DeltaBuf1
       2  DeltaBuf1Old
       2  EXTI15_10_IRQHandler
      42  EXTI4_IRQHandler
      78  EXTI9_5_IRQHandler
     174  FFT_Update
     188  HAL_I2C_MspInit
     134  HAL_I2S_TxCpltCallback
     108  HAL_UART_MspInit
      44  MX_I2C2_Init
       4  Main_CoefMor
     264  SS
          SS1
          SS2
          SS3
          SS4
          ISS
          S
          S1
          S2
          S3
          S4
          IS
      68  StartPlay
     212  SumDelay
     160  SystemClock_Config
      18  Toggle_Leds
      42  USART3_Init
    1024  aRxBuffer
       1  appli_state
       4  btnSW1
          btnSW2
          cntBtnPress
          Command_index
    2052  bufferSum
          idxLatency13
          idxLatency12
       2  cntRisingEXTI
    2828  flgDlyUpd
          stFrstFrmStore
          flg10ms
          buffer_switch
          stDir
          flgS2
          flgS3
          flgS4
          flgS2Flt
          flgS3Flt
          flgS4Flt
          flgS2Ins
          flgS3Ins
          flgS4Ins
          flagNotMin
          WaveRec_idxSens4
          WaveRec_idxSens3
          I2S2_idxTmp
          WaveRec_idxSens1
          WaveRec_idxSens2
          WaveRec_idxSens5
          WaveRec_idxSens6
          idxSPI5DataBuf3
          idxLatency14
          idxLatency25
          idxLatency63
          idxLatency78
          cntTime200
          GPIO_INS
          FacMic
          CrssCorVal78
          CrssCorVal14
          CrssCorVal25
          CrssCorVal63
          hUSBDDevice
          fir256Coff
          pUARTBuf
       1  flgSTAIni
     696  hUSBHost
     100  hspi4
     112  huart3
       1  idxDec
    1068  main
      20  pI2CData
      12  pI2CRx
       4  ticks

 
 8 373 bytes in section .bss
 2 852 bytes in section .data
 2 968 bytes in section .text
 
  2 968 bytes of CODE memory
 11 225 bytes of DATA memory

Errors: none
Warnings: 1
