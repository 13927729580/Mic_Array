###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       27/Feb/2016  00:32:47
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Middlewares\ST\STM32_USB_Device_Library\Core\Src\usbd_ioreq.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Middlewares\ST\STM32_USB_Device_Library\Core\Src\usbd_ioreq.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Om --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\usbd_ioreq.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\usbd_ioreq.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Middlewares\ST\STM32_USB_Device_Library\Core\Src\usbd_ioreq.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbd_ioreq.c
      4            * @author  MCD Application Team
      5            * @version V2.4.1
      6            * @date    19-June-2015
      7            * @brief   This file provides the IO requests APIs for control endpoints.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */ 
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "usbd_ioreq.h"
     30          
     31          /** @addtogroup STM32_USB_DEVICE_LIBRARY
     32            * @{
     33            */
     34          
     35          
     36          /** @defgroup USBD_IOREQ 
     37            * @brief control I/O requests module
     38            * @{
     39            */ 
     40          
     41          /** @defgroup USBD_IOREQ_Private_TypesDefinitions
     42            * @{
     43            */ 
     44          /**
     45            * @}
     46            */ 
     47          
     48          
     49          /** @defgroup USBD_IOREQ_Private_Defines
     50            * @{
     51            */ 
     52          
     53          /**
     54            * @}
     55            */ 
     56          
     57          
     58          /** @defgroup USBD_IOREQ_Private_Macros
     59            * @{
     60            */ 
     61          /**
     62            * @}
     63            */ 
     64          
     65          
     66          /** @defgroup USBD_IOREQ_Private_Variables
     67            * @{
     68            */ 
     69          
     70          /**
     71            * @}
     72            */ 
     73          
     74          
     75          /** @defgroup USBD_IOREQ_Private_FunctionPrototypes
     76            * @{
     77            */ 
     78          /**
     79            * @}
     80            */ 
     81          
     82          
     83          /** @defgroup USBD_IOREQ_Private_Functions
     84            * @{
     85            */ 
     86          
     87          /**
     88          * @brief  USBD_CtlSendData
     89          *         send data on the ctl pipe
     90          * @param  pdev: device instance
     91          * @param  buff: pointer to data buffer
     92          * @param  len: length of data to be sent
     93          * @retval status
     94          */

   \                                 In section .text, align 2, keep-with-next
     95          USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
     96                                         uint8_t *pbuf,
     97                                         uint16_t len)
     98          {
   \                     USBD_CtlSendData: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     99            /* Set EP0 State */
    100            pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
   \   00000002   0x2302             MOVS     R3,#+2
   \   00000004   0xF8C0 0x31F4      STR      R3,[R0, #+500]
    101            pdev->ep_in[0].total_length = len;
   \   00000008   0xF100 0x0318      ADD      R3,R0,#+24
   \   0000000C   0x601A             STR      R2,[R3, #+0]
    102            pdev->ep_in[0].rem_length   = len;
   \   0000000E   0x605A             STR      R2,[R3, #+4]
    103           /* Start the transfer */
    104            USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
   \   00000010   0x4613             MOV      R3,R2
   \   00000012   0x460A             MOV      R2,R1
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x.... 0x....      BL       USBD_LL_Transmit
    105            
    106            return USBD_OK;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xBD02             POP      {R1,PC}          ;; return
    107          }
    108          
    109          /**
    110          * @brief  USBD_CtlContinueSendData
    111          *         continue sending data on the ctl pipe
    112          * @param  pdev: device instance
    113          * @param  buff: pointer to data buffer
    114          * @param  len: length of data to be sent
    115          * @retval status
    116          */

   \                                 In section .text, align 2, keep-with-next
    117          USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
    118                                                 uint8_t *pbuf,
    119                                                 uint16_t len)
    120          {
   \                     USBD_CtlContinueSendData: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    121           /* Start the next transfer */
    122            USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
   \   00000002   0x4613             MOV      R3,R2
   \   00000004   0x460A             MOV      R2,R1
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x.... 0x....      BL       USBD_LL_Transmit
    123            
    124            return USBD_OK;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
    125          }
    126          
    127          /**
    128          * @brief  USBD_CtlPrepareRx
    129          *         receive data on the ctl pipe
    130          * @param  pdev: device instance
    131          * @param  buff: pointer to data buffer
    132          * @param  len: length of data to be received
    133          * @retval status
    134          */

   \                                 In section .text, align 2, keep-with-next
    135          USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
    136                                            uint8_t *pbuf,                                  
    137                                            uint16_t len)
    138          {
   \                     USBD_CtlPrepareRx: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    139            /* Set EP0 State */
    140            pdev->ep0_state = USBD_EP0_DATA_OUT; 
   \   00000002   0x2303             MOVS     R3,#+3
   \   00000004   0xF8C0 0x31F4      STR      R3,[R0, #+500]
    141            pdev->ep_out[0].total_length = len;
   \   00000008   0xF500 0x7384      ADD      R3,R0,#+264
   \   0000000C   0x601A             STR      R2,[R3, #+0]
    142            pdev->ep_out[0].rem_length   = len;
   \   0000000E   0x605A             STR      R2,[R3, #+4]
    143            /* Start the transfer */
    144            USBD_LL_PrepareReceive (pdev,
    145                                    0,
    146                                    pbuf,
    147                                   len);
   \   00000010   0x4613             MOV      R3,R2
   \   00000012   0x460A             MOV      R2,R1
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x.... 0x....      BL       USBD_LL_PrepareReceive
    148            
    149            return USBD_OK;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xBD02             POP      {R1,PC}          ;; return
    150          }
    151          
    152          /**
    153          * @brief  USBD_CtlContinueRx
    154          *         continue receive data on the ctl pipe
    155          * @param  pdev: device instance
    156          * @param  buff: pointer to data buffer
    157          * @param  len: length of data to be received
    158          * @retval status
    159          */

   \                                 In section .text, align 2, keep-with-next
    160          USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
    161                                                    uint8_t *pbuf,                                          
    162                                                    uint16_t len)
    163          {
   \                     USBD_CtlContinueRx: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    164          
    165            USBD_LL_PrepareReceive (pdev,
    166                                    0,                     
    167                                    pbuf,                         
    168                                    len);
   \   00000002   0x4613             MOV      R3,R2
   \   00000004   0x460A             MOV      R2,R1
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x.... 0x....      BL       USBD_LL_PrepareReceive
    169            return USBD_OK;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
    170          }
    171          /**
    172          * @brief  USBD_CtlSendStatus
    173          *         send zero lzngth packet on the ctl pipe
    174          * @param  pdev: device instance
    175          * @retval status
    176          */

   \                                 In section .text, align 2, keep-with-next
    177          USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
    178          {
   \                     USBD_CtlSendStatus: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    179          
    180            /* Set EP0 State */
    181            pdev->ep0_state = USBD_EP0_STATUS_IN;
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0xF8C0 0x11F4      STR      R1,[R0, #+500]
    182            
    183           /* Start the transfer */
    184            USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x461A             MOV      R2,R3
   \   0000000C   0x4611             MOV      R1,R2
   \   0000000E   0x.... 0x....      BL       USBD_LL_Transmit
    185            
    186            return USBD_OK;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    187          }
    188          
    189          /**
    190          * @brief  USBD_CtlReceiveStatus
    191          *         receive zero lzngth packet on the ctl pipe
    192          * @param  pdev: device instance
    193          * @retval status
    194          */

   \                                 In section .text, align 2, keep-with-next
    195          USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
    196          {
   \                     USBD_CtlReceiveStatus: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    197            /* Set EP0 State */
    198            pdev->ep0_state = USBD_EP0_STATUS_OUT; 
   \   00000002   0x2105             MOVS     R1,#+5
   \   00000004   0xF8C0 0x11F4      STR      R1,[R0, #+500]
    199            
    200           /* Start the transfer */  
    201            USBD_LL_PrepareReceive ( pdev,
    202                              0,
    203                              NULL,
    204                              0);  
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x461A             MOV      R2,R3
   \   0000000C   0x4611             MOV      R1,R2
   \   0000000E   0x.... 0x....      BL       USBD_LL_PrepareReceive
    205          
    206            return USBD_OK;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    207          }
    208          
    209          
    210          /**
    211          * @brief  USBD_GetRxCount
    212          *         returns the received data length
    213          * @param  pdev: device instance
    214          * @param  ep_addr: endpoint address
    215          * @retval Rx Data blength
    216          */

   \                                 In section .text, align 2, keep-with-next
    217          uint16_t  USBD_GetRxCount (USBD_HandleTypeDef  *pdev , uint8_t ep_addr)
    218          {
   \                     USBD_GetRxCount: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    219            return USBD_LL_GetRxDataSize(pdev, ep_addr);
   \   00000002   0x.... 0x....      BL       USBD_LL_GetRxDataSize
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    220          }
    221          
    222          /**
    223            * @}
    224            */ 
    225          
    226          
    227          /**
    228            * @}
    229            */ 
    230          
    231          
    232          /**
    233            * @}
    234            */ 
    235          
    236          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   USBD_CtlContinueRx
         8   -> USBD_LL_PrepareReceive
       8   USBD_CtlContinueSendData
         8   -> USBD_LL_Transmit
       8   USBD_CtlPrepareRx
         8   -> USBD_LL_PrepareReceive
       8   USBD_CtlReceiveStatus
         8   -> USBD_LL_PrepareReceive
       8   USBD_CtlSendData
         8   -> USBD_LL_Transmit
       8   USBD_CtlSendStatus
         8   -> USBD_LL_Transmit
       8   USBD_GetRxCount
         8   -> USBD_LL_GetRxDataSize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  USBD_CtlContinueRx
      16  USBD_CtlContinueSendData
      30  USBD_CtlPrepareRx
      22  USBD_CtlReceiveStatus
      30  USBD_CtlSendData
      22  USBD_CtlSendStatus
      10  USBD_GetRxCount

 
 146 bytes in section .text
 
 146 bytes of CODE memory

Errors: none
Warnings: none
