###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       08/Mar/2016  16:10:15
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\BSP\Components\ft5336\ft5336.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\BSP\Components\ft5336\ft5336.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Oh --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\ft5336.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\ft5336.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\BSP\Components\ft5336\ft5336.c
      1          /**
      2            ******************************************************************************
      3            * @file    ft5336.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    25-June-2015
      7            * @brief   This file provides a set of functions needed to manage the FT5336
      8            *          touch screen devices.
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
     13            *
     14            * Redistribution and use in source and binary forms, with or without modification,
     15            * are permitted provided that the following conditions are met:
     16            *   1. Redistributions of source code must retain the above copyright notice,
     17            *      this list of conditions and the following disclaimer.
     18            *   2. Redistributions in binary form must reproduce the above copyright notice,
     19            *      this list of conditions and the following disclaimer in the documentation
     20            *      and/or other materials provided with the distribution.
     21            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     22            *      may be used to endorse or promote products derived from this software
     23            *      without specific prior written permission.
     24            *
     25            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     26            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     27            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     28            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     29            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     30            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     31            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     32            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     33            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     34            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     35            *
     36            ******************************************************************************
     37            */
     38          
     39          /* Includes ------------------------------------------------------------------*/
     40          #include "ft5336.h"
     41          
     42          /** @addtogroup BSP
     43            * @{
     44            */
     45          
     46          /** @addtogroup Component
     47            * @{
     48            */
     49          
     50          /** @defgroup FT5336
     51            * @{
     52            */
     53          
     54          /* Private typedef -----------------------------------------------------------*/
     55          
     56          /** @defgroup FT5336_Private_Types_Definitions
     57            * @{
     58            */
     59          
     60          /* Private define ------------------------------------------------------------*/
     61          
     62          /** @defgroup FT5336_Private_Defines
     63            * @{
     64            */
     65          
     66          /* Private macro -------------------------------------------------------------*/
     67          
     68          /** @defgroup FT5336_Private_Macros
     69            * @{
     70            */
     71          
     72          /* Private variables ---------------------------------------------------------*/
     73          
     74          /** @defgroup FT5336_Private_Variables
     75            * @{
     76            */
     77          
     78          /* Touch screen driver structure initialization */

   \                                 In section .data, align 4
     79          TS_DrvTypeDef ft5336_ts_drv =
   \                     ft5336_ts_drv:
   \   00000000   0x........         DC32 ft5336_Init, ft5336_ReadID, ft5336_Reset, ft5336_TS_Start
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 ft5336_TS_DetectTouch, ft5336_TS_GetXY, ft5336_TS_EnableIT
   \              0x........   
   \              0x........   
   \   0000001C   0x........         DC32 ft5336_TS_ClearIT, ft5336_TS_ITStatus, ft5336_TS_DisableIT
   \              0x........   
   \              0x........   
     80          {
     81            ft5336_Init,
     82            ft5336_ReadID,
     83            ft5336_Reset,
     84          
     85            ft5336_TS_Start,
     86            ft5336_TS_DetectTouch,
     87            ft5336_TS_GetXY,
     88          
     89            ft5336_TS_EnableIT,
     90            ft5336_TS_ClearIT,
     91            ft5336_TS_ITStatus,
     92            ft5336_TS_DisableIT
     93          
     94          };
     95          
     96          /* Global ft5336 handle */
     97          static ft5336_handle_TypeDef ft5336_handle = { FT5336_I2C_NOT_INITIALIZED, 0, 0};
     98          
     99          /**
    100            * @}
    101            */
    102          
    103          /** @defgroup ft5336_Private_Function_Prototypes
    104            * @{
    105            */
    106          
    107          /* Private functions prototypes-----------------------------------------------*/
    108          
    109          /**
    110            * @brief  Return the status of I2C was initialized or not.
    111            * @param  None.
    112            * @retval : I2C initialization status.
    113            */
    114          static uint8_t ft5336_Get_I2C_InitializedStatus(void);
    115          
    116          /**
    117            * @brief  I2C initialize if needed.
    118            * @param  None.
    119            * @retval : None.
    120            */
    121          static void ft5336_I2C_InitializeIfRequired(void);
    122          
    123          /**
    124            * @brief  Basic static configuration of TouchScreen
    125            * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
    126            * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
    127            */
    128          static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr);
    129          
    130          /** @defgroup ft5336_Private_Functions
    131            * @{
    132            */
    133          
    134          /** @defgroup ft5336_Public_Function_Body
    135            * @{
    136            */
    137          
    138          /* Public functions bodies-----------------------------------------------*/
    139          
    140          
    141          /**
    142            * @brief  Initialize the ft5336 communication bus
    143            *         from MCU to FT5336 : ie I2C channel initialization (if required).
    144            * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
    145            * @retval None
    146            */

   \                                 In section .text, align 2, keep-with-next
    147          void ft5336_Init(uint16_t DeviceAddr)
    148          {
   \                     ft5336_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    149            /* Wait at least 200ms after power up before accessing registers
    150             * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
    151            TS_IO_Delay(200);
   \   00000002   0x20C8             MOVS     R0,#+200
   \   00000004   0x....             LDR.N    R4,??DataTable4
   \   00000006   0x.... 0x....      BL       TS_IO_Delay
    152          
    153            /* Initialize I2C link if needed */
    154            ft5336_I2C_InitializeIfRequired();
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0xB918             CBNZ.N   R0,??ft5336_Init_0
   \   0000000E   0x.... 0x....      BL       TS_IO_Init
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x7020             STRB     R0,[R4, #+0]
    155          }
   \                     ??ft5336_Init_0: (+1)
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    156          
    157          /**
    158            * @brief  Software Reset the ft5336.
    159            *         @note : Not applicable to FT5336.
    160            * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
    161            * @retval None
    162            */

   \                                 In section .text, align 2, keep-with-next
    163          void ft5336_Reset(uint16_t DeviceAddr)
    164          {
    165            /* Do nothing */
    166            /* No software reset sequence available in FT5336 IC */
    167          }
   \                     ft5336_Reset: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    168          
    169          /**
    170            * @brief  Read the ft5336 device ID, pre initialize I2C in case of need to be
    171            *         able to read the FT5336 device ID, and verify this is a FT5336.
    172            * @param  DeviceAddr: I2C FT5336 Slave address.
    173            * @retval The Device ID (two bytes).
    174            */

   \                                 In section .text, align 2, keep-with-next
    175          uint16_t ft5336_ReadID(uint16_t DeviceAddr)
    176          {
   \                     ft5336_ReadID: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB082             SUB      SP,SP,#+8
    177            volatile uint8_t ucReadId = 0;
   \   00000006   0x2000             MOVS     R0,#+0
    178            uint8_t nbReadAttempts = 0;
    179            uint8_t bFoundDevice = 0; /* Device not found by default */
    180          
    181            /* Initialize I2C link if needed */
    182            ft5336_I2C_InitializeIfRequired();
   \   00000008   0x....             LDR.N    R6,??DataTable4
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0x7830             LDRB     R0,[R6, #+0]
   \   00000012   0xB918             CBNZ.N   R0,??ft5336_ReadID_0
   \   00000014   0x.... 0x....      BL       TS_IO_Init
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x7030             STRB     R0,[R6, #+0]
    183          
    184            /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
    185            for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
    186            {
    187              /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    188              ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
   \                     ??ft5336_ReadID_0: (+1)
   \   0000001C   0x21A8             MOVS     R1,#+168
   \   0000001E   0xB2E0             UXTB     R0,R4
   \   00000020   0x.... 0x....      BL       TS_IO_Read
   \   00000024   0xF88D 0x0000      STRB     R0,[SP, #+0]
    189          
    190              /* Found the searched device ID ? */
    191              if(ucReadId == FT5336_ID_VALUE)
   \   00000028   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002C   0x2851             CMP      R0,#+81
   \   0000002E   0xD003             BEQ.N    ??ft5336_ReadID_1
    192              {
    193                /* Set device as found */
    194                bFoundDevice = 1;
    195              }
    196            }
   \   00000030   0x1C6D             ADDS     R5,R5,#+1
   \   00000032   0xB2ED             UXTB     R5,R5
   \   00000034   0x2D03             CMP      R5,#+3
   \   00000036   0xDBF1             BLT.N    ??ft5336_ReadID_0
    197          
    198            /* Return the device ID value */
    199            return (ucReadId);
   \                     ??ft5336_ReadID_1: (+1)
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    200          }
    201          
    202          /**
    203            * @brief  Configures the touch Screen IC device to start detecting touches
    204            * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
    205            * @retval None.
    206            */

   \                                 In section .text, align 2, keep-with-next
    207          void ft5336_TS_Start(uint16_t DeviceAddr)
    208          {
    209            /* Minimum static configuration of FT5336 */
    210            FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
    211          
    212            /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    213            /* Note TS_INT is active low                                                                      */
    214            ft5336_TS_DisableIT(DeviceAddr);
   \                     ft5336_TS_Start: (+1)
   \   00000000   0x....             B.N      ?Subroutine0
    215          }
    216          
    217          /**
    218            * @brief  Return if there is touches detected or not.
    219            *         Try to detect new touches and forget the old ones (reset internal global
    220            *         variables).
    221            * @param  DeviceAddr: Device address on communication Bus.
    222            * @retval : Number of active touches detected (can be 0, 1 or 2).
    223            */

   \                                 In section .text, align 2, keep-with-next
    224          uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
    225          {
   \                     ft5336_TS_DetectTouch: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    226            volatile uint8_t nbTouch = 0;
   \   00000002   0x2100             MOVS     R1,#+0
    227          
    228            /* Read register FT5336_TD_STAT_REG to check number of touches detection */
    229            nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0xF88D 0x1000      STRB     R1,[SP, #+0]
   \   0000000A   0x2102             MOVS     R1,#+2
   \   0000000C   0x.... 0x....      BL       TS_IO_Read
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
    230            nbTouch &= FT5336_TD_STAT_MASK;
   \   00000014   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000018   0xF000 0x000F      AND      R0,R0,#0xF
   \   0000001C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    231          
    232            if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
   \   00000020   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000024   0x2806             CMP      R0,#+6
   \   00000026   0xBFA4             ITT      GE 
   \   00000028   0x2000             MOVGE    R0,#+0
   \   0000002A   0xF88D 0x0000      STRBGE   R0,[SP, #+0]
    233            {
    234              /* If invalid number of touch detected, set it to zero */
    235              nbTouch = 0;
    236            }
    237          
    238            /* Update ft5336 driver internal global : current number of active touches */
    239            ft5336_handle.currActiveTouchNb = nbTouch;
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x....             LDR.N    R0,??DataTable4
   \   00000034   0x7041             STRB     R1,[R0, #+1]
    240          
    241            /* Reset current active touch index on which to work on */
    242            ft5336_handle.currActiveTouchIdx = 0;
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x7081             STRB     R1,[R0, #+2]
    243          
    244            return(nbTouch);
   \   0000003A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003E   0xBD02             POP      {R1,PC}          ;; return
    245          }
    246          
    247          /**
    248            * @brief  Get the touch screen X and Y positions values
    249            *         Manage multi touch thanks to touch Index global
    250            *         variable 'ft5336_handle.currActiveTouchIdx'.
    251            * @param  DeviceAddr: Device address on communication Bus.
    252            * @param  X: Pointer to X position value
    253            * @param  Y: Pointer to Y position value
    254            * @retval None.
    255            */

   \                                 In section .text, align 4, keep-with-next
    256          void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
    257          {
   \                     ft5336_TS_GetXY: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0xB082             SUB      SP,SP,#+8
    258            volatile uint8_t ucReadData = 0;
   \   00000008   0x2000             MOVS     R0,#+0
    259            static uint16_t coord;
    260            uint8_t regAddressXLow = 0;
    261            uint8_t regAddressXHigh = 0;
    262            uint8_t regAddressYLow = 0;
    263            uint8_t regAddressYHigh = 0;
    264          
    265            if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
   \   0000000A   0x....             LDR.N    R6,??DataTable4
   \   0000000C   0x4692             MOV      R10,R2
   \   0000000E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000012   0x78B0             LDRB     R0,[R6, #+2]
   \   00000014   0x7872             LDRB     R2,[R6, #+1]
   \   00000016   0x4689             MOV      R9,R1
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x2700             MOVS     R7,#+0
   \   0000001C   0x2400             MOVS     R4,#+0
   \   0000001E   0x2500             MOVS     R5,#+0
   \   00000020   0x4290             CMP      R0,R2
   \   00000022   0xD271             BCS.N    ??ft5336_TS_GetXY_1
    266            {
    267              switch(ft5336_handle.currActiveTouchIdx)
   \   00000024   0x2809             CMP      R0,#+9
   \   00000026   0xD837             BHI.N    ??ft5336_TS_GetXY_2
   \   00000028   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??ft5336_TS_GetXY_0:
   \   0000002C   0x05 0x0A          DC8      0x5,0xA,0xF,0x14
   \              0x0F 0x14    
   \   00000030   0x19 0x1E          DC8      0x19,0x1E,0x23,0x28
   \              0x23 0x28    
   \   00000034   0x2D 0x32          DC8      0x2D,0x32
    268              {
    269              case 0 :
    270                regAddressXLow  = FT5336_P1_XL_REG;
   \                     ??ft5336_TS_GetXY_3: (+1)
   \   00000036   0x2104             MOVS     R1,#+4
    271                regAddressXHigh = FT5336_P1_XH_REG;
   \   00000038   0x2703             MOVS     R7,#+3
    272                regAddressYLow  = FT5336_P1_YL_REG;
   \   0000003A   0x2406             MOVS     R4,#+6
    273                regAddressYHigh = FT5336_P1_YH_REG;
   \   0000003C   0x2505             MOVS     R5,#+5
    274                break;
   \   0000003E   0xE02B             B.N      ??ft5336_TS_GetXY_2
    275          
    276              case 1 :
    277                regAddressXLow  = FT5336_P2_XL_REG;
   \                     ??ft5336_TS_GetXY_4: (+1)
   \   00000040   0x210A             MOVS     R1,#+10
    278                regAddressXHigh = FT5336_P2_XH_REG;
   \   00000042   0x2709             MOVS     R7,#+9
    279                regAddressYLow  = FT5336_P2_YL_REG;
   \   00000044   0x240C             MOVS     R4,#+12
    280                regAddressYHigh = FT5336_P2_YH_REG;
   \   00000046   0x250B             MOVS     R5,#+11
    281                break;
   \   00000048   0xE026             B.N      ??ft5336_TS_GetXY_2
    282          
    283              case 2 :
    284                regAddressXLow  = FT5336_P3_XL_REG;
   \                     ??ft5336_TS_GetXY_5: (+1)
   \   0000004A   0x2110             MOVS     R1,#+16
    285                regAddressXHigh = FT5336_P3_XH_REG;
   \   0000004C   0x270F             MOVS     R7,#+15
    286                regAddressYLow  = FT5336_P3_YL_REG;
   \   0000004E   0x2412             MOVS     R4,#+18
    287                regAddressYHigh = FT5336_P3_YH_REG;
   \   00000050   0x2511             MOVS     R5,#+17
    288                break;
   \   00000052   0xE021             B.N      ??ft5336_TS_GetXY_2
    289          
    290              case 3 :
    291                regAddressXLow  = FT5336_P4_XL_REG;
   \                     ??ft5336_TS_GetXY_6: (+1)
   \   00000054   0x2116             MOVS     R1,#+22
    292                regAddressXHigh = FT5336_P4_XH_REG;
   \   00000056   0x2715             MOVS     R7,#+21
    293                regAddressYLow  = FT5336_P4_YL_REG;
   \   00000058   0x2418             MOVS     R4,#+24
    294                regAddressYHigh = FT5336_P4_YH_REG;
   \   0000005A   0x2517             MOVS     R5,#+23
    295                break;
   \   0000005C   0xE01C             B.N      ??ft5336_TS_GetXY_2
    296          
    297              case 4 :
    298                regAddressXLow  = FT5336_P5_XL_REG;
   \                     ??ft5336_TS_GetXY_7: (+1)
   \   0000005E   0x211C             MOVS     R1,#+28
    299                regAddressXHigh = FT5336_P5_XH_REG;
   \   00000060   0x271B             MOVS     R7,#+27
    300                regAddressYLow  = FT5336_P5_YL_REG;
   \   00000062   0x241E             MOVS     R4,#+30
    301                regAddressYHigh = FT5336_P5_YH_REG;
   \   00000064   0x251D             MOVS     R5,#+29
    302                break;
   \   00000066   0xE017             B.N      ??ft5336_TS_GetXY_2
    303          
    304              case 5 :
    305                regAddressXLow  = FT5336_P6_XL_REG;
   \                     ??ft5336_TS_GetXY_8: (+1)
   \   00000068   0x2122             MOVS     R1,#+34
    306                regAddressXHigh = FT5336_P6_XH_REG;
   \   0000006A   0x2721             MOVS     R7,#+33
    307                regAddressYLow  = FT5336_P6_YL_REG;
   \   0000006C   0x2424             MOVS     R4,#+36
    308                regAddressYHigh = FT5336_P6_YH_REG;
   \   0000006E   0x2523             MOVS     R5,#+35
    309                break;
   \   00000070   0xE012             B.N      ??ft5336_TS_GetXY_2
    310          
    311              case 6 :
    312                regAddressXLow  = FT5336_P7_XL_REG;
   \                     ??ft5336_TS_GetXY_9: (+1)
   \   00000072   0x2128             MOVS     R1,#+40
    313                regAddressXHigh = FT5336_P7_XH_REG;
   \   00000074   0x2727             MOVS     R7,#+39
    314                regAddressYLow  = FT5336_P7_YL_REG;
   \   00000076   0x242A             MOVS     R4,#+42
    315                regAddressYHigh = FT5336_P7_YH_REG;
   \   00000078   0x2529             MOVS     R5,#+41
    316                break;
   \   0000007A   0xE00D             B.N      ??ft5336_TS_GetXY_2
    317          
    318              case 7 :
    319                regAddressXLow  = FT5336_P8_XL_REG;
   \                     ??ft5336_TS_GetXY_10: (+1)
   \   0000007C   0x212E             MOVS     R1,#+46
    320                regAddressXHigh = FT5336_P8_XH_REG;
   \   0000007E   0x272D             MOVS     R7,#+45
    321                regAddressYLow  = FT5336_P8_YL_REG;
   \   00000080   0x2430             MOVS     R4,#+48
    322                regAddressYHigh = FT5336_P8_YH_REG;
   \   00000082   0x252F             MOVS     R5,#+47
    323                break;
   \   00000084   0xE008             B.N      ??ft5336_TS_GetXY_2
    324          
    325              case 8 :
    326                regAddressXLow  = FT5336_P9_XL_REG;
   \                     ??ft5336_TS_GetXY_11: (+1)
   \   00000086   0x2134             MOVS     R1,#+52
    327                regAddressXHigh = FT5336_P9_XH_REG;
   \   00000088   0x2733             MOVS     R7,#+51
    328                regAddressYLow  = FT5336_P9_YL_REG;
   \   0000008A   0x2436             MOVS     R4,#+54
    329                regAddressYHigh = FT5336_P9_YH_REG;
   \   0000008C   0x2535             MOVS     R5,#+53
    330                break;
   \   0000008E   0xE003             B.N      ??ft5336_TS_GetXY_2
    331          
    332              case 9 :
    333                regAddressXLow  = FT5336_P10_XL_REG;
   \                     ??ft5336_TS_GetXY_12: (+1)
   \   00000090   0x213A             MOVS     R1,#+58
    334                regAddressXHigh = FT5336_P10_XH_REG;
   \   00000092   0x2739             MOVS     R7,#+57
    335                regAddressYLow  = FT5336_P10_YL_REG;
   \   00000094   0x243C             MOVS     R4,#+60
    336                regAddressYHigh = FT5336_P10_YH_REG;
   \   00000096   0x253B             MOVS     R5,#+59
    337                break;
    338          
    339              default :
    340                break;
    341          
    342              } /* end switch(ft5336_handle.currActiveTouchIdx) */
    343          
    344              /* Read low part of X position */
    345              ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
   \                     ??ft5336_TS_GetXY_2: (+1)
   \   00000098   0xFA5F 0xF088      UXTB     R0,R8
   \   0000009C   0x.... 0x....      BL       TS_IO_Read
   \   000000A0   0xF88D 0x0000      STRB     R0,[SP, #+0]
    346              coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
   \   000000A4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
    347          
    348              /* Read high part of X position */
    349              ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
   \   000000A8   0x4639             MOV      R1,R7
   \   000000AA   0x80B0             STRH     R0,[R6, #+4]
   \   000000AC   0xFA5F 0xF088      UXTB     R0,R8
   \   000000B0   0x.... 0x....      BL       TS_IO_Read
   \   000000B4   0xF88D 0x0000      STRB     R0,[SP, #+0]
    350              coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
   \   000000B8   0x88B0             LDRH     R0,[R6, #+4]
   \   000000BA   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000BE   0xF001 0x010F      AND      R1,R1,#0xF
   \   000000C2   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
    351          
    352              /* Send back ready X position to caller */
    353              *X = coord;
    354          
    355              /* Read low part of Y position */
    356              ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
   \   000000C6   0x4621             MOV      R1,R4
   \   000000C8   0x80B0             STRH     R0,[R6, #+4]
   \   000000CA   0xF8A9 0x0000      STRH     R0,[R9, #+0]
   \   000000CE   0xFA5F 0xF088      UXTB     R0,R8
   \   000000D2   0x.... 0x....      BL       TS_IO_Read
   \   000000D6   0xF88D 0x0000      STRB     R0,[SP, #+0]
    357              coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
   \   000000DA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
    358          
    359              /* Read high part of Y position */
    360              ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
   \   000000DE   0x4629             MOV      R1,R5
   \   000000E0   0x80B0             STRH     R0,[R6, #+4]
   \   000000E2   0xFA5F 0xF088      UXTB     R0,R8
   \   000000E6   0x.... 0x....      BL       TS_IO_Read
   \   000000EA   0xF88D 0x0000      STRB     R0,[SP, #+0]
    361              coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
   \   000000EE   0x88B0             LDRH     R0,[R6, #+4]
   \   000000F0   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000F4   0xF001 0x010F      AND      R1,R1,#0xF
   \   000000F8   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   000000FC   0x80B0             STRH     R0,[R6, #+4]
    362          
    363              /* Send back ready Y position to caller */
    364              *Y = coord;
   \   000000FE   0xF8AA 0x0000      STRH     R0,[R10, #+0]
    365          
    366              ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
   \   00000102   0x78B0             LDRB     R0,[R6, #+2]
   \   00000104   0x1C40             ADDS     R0,R0,#+1
   \   00000106   0x70B0             STRB     R0,[R6, #+2]
    367          
    368            } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
    369          }
   \                     ??ft5336_TS_GetXY_1: (+1)
   \   00000108   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return

   \                                 In section .bss, align 4
   \                     ft5336_handle:
   \   00000000                      DS8 4
   \   00000004                      DS8 2
    370          
    371          /**
    372            * @brief  Configure the FT5336 device to generate IT on given INT pin
    373            *         connected to MCU as EXTI.
    374            * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
    375            * @retval None
    376            */

   \                                 In section .text, align 2, keep-with-next
    377          void ft5336_TS_EnableIT(uint16_t DeviceAddr)
    378          {
    379             uint8_t regValue = 0;
    380             regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
    381          
    382             /* Set interrupt trigger mode in FT5336_GMODE_REG */
    383             TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
   \                     ft5336_TS_EnableIT: (+1)
   \   00000000   0x2201             MOVS     R2,#+1
   \   00000002   0x....             B.N      ??Subroutine0_0
    384          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
   \                     ??Subroutine0_0: (+1)
   \   00000002   0x21A4             MOVS     R1,#+164
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0x.... 0x....      B.W      TS_IO_Write
    385          
    386          /**
    387            * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
    388            *         connected to MCU as EXTI.
    389            * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
    390            * @retval None
    391            */

   \                                 In section .text, align 2, keep-with-next
    392          void ft5336_TS_DisableIT(uint16_t DeviceAddr)
   \                     ft5336_TS_DisableIT: (+1)
   \   00000000   0xBF00             Nop      
    393          {
    394            uint8_t regValue = 0;
    395            regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
    396          
    397            /* Set interrupt polling mode in FT5336_GMODE_REG */
    398            TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0
    399          }
    400          
    401          /**
    402            * @brief  Get IT status from FT5336 interrupt status registers
    403            *         Should be called Following an EXTI coming to the MCU to know the detailed
    404            *         reason of the interrupt.
    405            *         @note : This feature is not applicable to FT5336.
    406            * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
    407            * @retval TS interrupts status : always return 0 here
    408            */

   \                                 In section .text, align 2, keep-with-next
    409          uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
    410          {
    411            /* Always return 0 as feature not applicable to FT5336 */
    412            return 0;
   \                     ft5336_TS_ITStatus: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    413          }
    414          
    415          /**
    416            * @brief  Clear IT status in FT5336 interrupt status clear registers
    417            *         Should be called Following an EXTI coming to the MCU.
    418            *         @note : This feature is not applicable to FT5336.
    419            * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
    420            * @retval None
    421            */

   \                                 In section .text, align 2, keep-with-next
    422          void ft5336_TS_ClearIT(uint16_t DeviceAddr)
    423          {
    424            /* Nothing to be done here for FT5336 */
    425          }
   \                     ft5336_TS_ClearIT: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    426          
    427          /**** NEW FEATURES enabled when Multi-touch support is enabled ****/
    428          
    429          #if (TS_MULTI_TOUCH_SUPPORTED == 1)
    430          
    431          /**
    432            * @brief  Get the last touch gesture identification (zoom, move up/down...).
    433            * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
    434            * @param  pGestureId : Pointer to get last touch gesture Identification.
    435            * @retval None.
    436            */

   \                                 In section .text, align 2, keep-with-next
    437          void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
    438          {
   \                     ft5336_TS_GetGestureID: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0xB082             SUB      SP,SP,#+8
    439            volatile uint8_t ucReadData = 0;
   \   00000006   0x2100             MOVS     R1,#+0
    440          
    441            ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
   \   00000008   0xB2C0             UXTB     R0,R0
   \   0000000A   0xF88D 0x1000      STRB     R1,[SP, #+0]
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x.... 0x....      BL       TS_IO_Read
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
    442          
    443            * pGestureId = ucReadData;
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x6020             STR      R0,[R4, #+0]
    444          }
   \   0000001E   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    445          
    446          /**
    447            * @brief  Get the touch detailed informations on touch number 'touchIdx' (0..1)
    448            *         This touch detailed information contains :
    449            *         - weight that was applied to this touch
    450            *         - sub-area of the touch in the touch panel
    451            *         - event of linked to the touch (press down, lift up, ...)
    452            * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
    453            * @param  touchIdx : Passed index of the touch (0..1) on which we want to get the
    454            *                    detailed information.
    455            * @param  pWeight : Pointer to to get the weight information of 'touchIdx'.
    456            * @param  pArea   : Pointer to to get the sub-area information of 'touchIdx'.
    457            * @param  pEvent  : Pointer to to get the event information of 'touchIdx'.
    458          
    459            * @retval None.
    460            */

   \                                 In section .text, align 4, keep-with-next
    461          void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
    462                                      uint32_t   touchIdx,
    463                                      uint32_t * pWeight,
    464                                      uint32_t * pArea,
    465                                      uint32_t * pEvent)
    466          {
   \                     ft5336_TS_GetTouchInfo: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x4690             MOV      R8,R2
   \   00000008   0xB082             SUB      SP,SP,#+8
    467            volatile uint8_t ucReadData = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
    468            uint8_t regAddressXHigh = 0;
    469            uint8_t regAddressPWeight = 0;
    470            uint8_t regAddressPMisc = 0;
    471          
    472            if(touchIdx < ft5336_handle.currActiveTouchNb)
   \   0000000C   0x....             LDR.N    R2,??DataTable4
   \   0000000E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000012   0x2600             MOVS     R6,#+0
   \   00000014   0x2700             MOVS     R7,#+0
   \   00000016   0x7852             LDRB     R2,[R2, #+1]
   \   00000018   0x461C             MOV      R4,R3
   \   0000001A   0x4291             CMP      R1,R2
   \   0000001C   0xD250             BCS.N    ??ft5336_TS_GetTouchInfo_1
    473            {
    474              switch(touchIdx)
   \   0000001E   0x2909             CMP      R1,#+9
   \   00000020   0xD82D             BHI.N    ??ft5336_TS_GetTouchInfo_2
   \   00000022   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??ft5336_TS_GetTouchInfo_0:
   \   00000026   0x05 0x09          DC8      0x5,0x9,0xD,0x11
   \              0x0D 0x11    
   \   0000002A   0x15 0x19          DC8      0x15,0x19,0x1D,0x21
   \              0x1D 0x21    
   \   0000002E   0x25 0x29          DC8      0x25,0x29
    475              {
    476              case 0 :
    477                regAddressXHigh   = FT5336_P1_XH_REG;
   \                     ??ft5336_TS_GetTouchInfo_3: (+1)
   \   00000030   0x2003             MOVS     R0,#+3
    478                regAddressPWeight = FT5336_P1_WEIGHT_REG;
   \   00000032   0x2607             MOVS     R6,#+7
    479                regAddressPMisc   = FT5336_P1_MISC_REG;
   \   00000034   0x2708             MOVS     R7,#+8
    480                break;
   \   00000036   0xE022             B.N      ??ft5336_TS_GetTouchInfo_2
    481          
    482              case 1 :
    483                regAddressXHigh   = FT5336_P2_XH_REG;
   \                     ??ft5336_TS_GetTouchInfo_4: (+1)
   \   00000038   0x2009             MOVS     R0,#+9
    484                regAddressPWeight = FT5336_P2_WEIGHT_REG;
   \   0000003A   0x260D             MOVS     R6,#+13
    485                regAddressPMisc   = FT5336_P2_MISC_REG;
   \   0000003C   0x270E             MOVS     R7,#+14
    486                break;
   \   0000003E   0xE01E             B.N      ??ft5336_TS_GetTouchInfo_2
    487          
    488              case 2 :
    489                regAddressXHigh   = FT5336_P3_XH_REG;
   \                     ??ft5336_TS_GetTouchInfo_5: (+1)
   \   00000040   0x200F             MOVS     R0,#+15
    490                regAddressPWeight = FT5336_P3_WEIGHT_REG;
   \   00000042   0x2613             MOVS     R6,#+19
    491                regAddressPMisc   = FT5336_P3_MISC_REG;
   \   00000044   0x2714             MOVS     R7,#+20
    492                break;
   \   00000046   0xE01A             B.N      ??ft5336_TS_GetTouchInfo_2
    493          
    494              case 3 :
    495                regAddressXHigh   = FT5336_P4_XH_REG;
   \                     ??ft5336_TS_GetTouchInfo_6: (+1)
   \   00000048   0x2015             MOVS     R0,#+21
    496                regAddressPWeight = FT5336_P4_WEIGHT_REG;
   \   0000004A   0x2619             MOVS     R6,#+25
    497                regAddressPMisc   = FT5336_P4_MISC_REG;
   \   0000004C   0x271A             MOVS     R7,#+26
    498                break;
   \   0000004E   0xE016             B.N      ??ft5336_TS_GetTouchInfo_2
    499          
    500              case 4 :
    501                regAddressXHigh   = FT5336_P5_XH_REG;
   \                     ??ft5336_TS_GetTouchInfo_7: (+1)
   \   00000050   0x201B             MOVS     R0,#+27
    502                regAddressPWeight = FT5336_P5_WEIGHT_REG;
   \   00000052   0x261F             MOVS     R6,#+31
    503                regAddressPMisc   = FT5336_P5_MISC_REG;
   \   00000054   0x2720             MOVS     R7,#+32
    504                break;
   \   00000056   0xE012             B.N      ??ft5336_TS_GetTouchInfo_2
    505          
    506              case 5 :
    507                regAddressXHigh   = FT5336_P6_XH_REG;
   \                     ??ft5336_TS_GetTouchInfo_8: (+1)
   \   00000058   0x2021             MOVS     R0,#+33
    508                regAddressPWeight = FT5336_P6_WEIGHT_REG;
   \   0000005A   0x2625             MOVS     R6,#+37
    509                regAddressPMisc   = FT5336_P6_MISC_REG;
   \   0000005C   0x2726             MOVS     R7,#+38
    510                break;
   \   0000005E   0xE00E             B.N      ??ft5336_TS_GetTouchInfo_2
    511          
    512              case 6 :
    513                regAddressXHigh   = FT5336_P7_XH_REG;
   \                     ??ft5336_TS_GetTouchInfo_9: (+1)
   \   00000060   0x2027             MOVS     R0,#+39
    514                regAddressPWeight = FT5336_P7_WEIGHT_REG;
   \   00000062   0x262B             MOVS     R6,#+43
    515                regAddressPMisc   = FT5336_P7_MISC_REG;
   \   00000064   0x272C             MOVS     R7,#+44
    516                break;
   \   00000066   0xE00A             B.N      ??ft5336_TS_GetTouchInfo_2
    517          
    518              case 7 :
    519                regAddressXHigh   = FT5336_P8_XH_REG;
   \                     ??ft5336_TS_GetTouchInfo_10: (+1)
   \   00000068   0x202D             MOVS     R0,#+45
    520                regAddressPWeight = FT5336_P8_WEIGHT_REG;
   \   0000006A   0x2631             MOVS     R6,#+49
    521                regAddressPMisc   = FT5336_P8_MISC_REG;
   \   0000006C   0x2732             MOVS     R7,#+50
    522                break;
   \   0000006E   0xE006             B.N      ??ft5336_TS_GetTouchInfo_2
    523          
    524              case 8 :
    525                regAddressXHigh   = FT5336_P9_XH_REG;
   \                     ??ft5336_TS_GetTouchInfo_11: (+1)
   \   00000070   0x2033             MOVS     R0,#+51
    526                regAddressPWeight = FT5336_P9_WEIGHT_REG;
   \   00000072   0x2637             MOVS     R6,#+55
    527                regAddressPMisc   = FT5336_P9_MISC_REG;
   \   00000074   0x2738             MOVS     R7,#+56
    528                break;
   \   00000076   0xE002             B.N      ??ft5336_TS_GetTouchInfo_2
    529          
    530              case 9 :
    531                regAddressXHigh   = FT5336_P10_XH_REG;
   \                     ??ft5336_TS_GetTouchInfo_12: (+1)
   \   00000078   0x2039             MOVS     R0,#+57
    532                regAddressPWeight = FT5336_P10_WEIGHT_REG;
   \   0000007A   0x263D             MOVS     R6,#+61
    533                regAddressPMisc   = FT5336_P10_MISC_REG;
   \   0000007C   0x273E             MOVS     R7,#+62
    534                break;
    535          
    536              default :
    537                break;
    538          
    539              } /* end switch(touchIdx) */
    540          
    541              /* Read Event Id of touch index */
    542              ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
   \                     ??ft5336_TS_GetTouchInfo_2: (+1)
   \   0000007E   0x4601             MOV      R1,R0
   \   00000080   0xB2E8             UXTB     R0,R5
   \   00000082   0x.... 0x....      BL       TS_IO_Read
   \   00000086   0xF88D 0x0000      STRB     R0,[SP, #+0]
    543              * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
   \   0000008A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000008E   0x9908             LDR      R1,[SP, #+32]
   \   00000090   0x0980             LSRS     R0,R0,#+6
   \   00000092   0x6008             STR      R0,[R1, #+0]
    544          
    545              /* Read weight of touch index */
    546              ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
   \   00000094   0x4631             MOV      R1,R6
   \   00000096   0xB2E8             UXTB     R0,R5
   \   00000098   0x.... 0x....      BL       TS_IO_Read
   \   0000009C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    547              * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
   \   000000A0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
    548          
    549              /* Read area of touch index */
    550              ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
   \   000000A4   0x4639             MOV      R1,R7
   \   000000A6   0xF8C8 0x0000      STR      R0,[R8, #+0]
   \   000000AA   0xB2E8             UXTB     R0,R5
   \   000000AC   0x.... 0x....      BL       TS_IO_Read
   \   000000B0   0xF88D 0x0000      STRB     R0,[SP, #+0]
    551              * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
   \   000000B4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000B8   0x0900             LSRS     R0,R0,#+4
   \   000000BA   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000BE   0x6020             STR      R0,[R4, #+0]
    552          
    553            } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
    554          }
   \                     ??ft5336_TS_GetTouchInfo_1: (+1)
   \   000000C0   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ft5336_handle
    555          
    556          #endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */
    557          
    558          /** @defgroup ft5336_Static_Function_Body
    559            * @{
    560            */
    561          
    562          /* Static functions bodies-----------------------------------------------*/
    563          
    564          
    565          /**
    566            * @brief  Return the status of I2C was initialized or not.
    567            * @param  None.
    568            * @retval : I2C initialization status.
    569            */
    570          static uint8_t ft5336_Get_I2C_InitializedStatus(void)
    571          {
    572            return(ft5336_handle.i2cInitialized);
    573          }
    574          
    575          /**
    576            * @brief  I2C initialize if needed.
    577            * @param  None.
    578            * @retval : None.
    579            */
    580          static void ft5336_I2C_InitializeIfRequired(void)
    581          {
    582            if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
    583            {
    584              /* Initialize TS IO BUS layer (I2C) */
    585              TS_IO_Init();
    586          
    587              /* Set state to initialized */
    588              ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
    589            }
    590          }
    591          
    592          /**
    593            * @brief  Basic static configuration of TouchScreen
    594            * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
    595            * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
    596            */
    597          static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
    598          {
    599            uint32_t status = FT5336_STATUS_OK;
    600          
    601            /* Nothing special to be done for FT5336 */
    602          
    603            return(status);
    604          }
    605          
    606          /**
    607            * @}
    608            */
    609          
    610          /**
    611            * @}
    612            */
    613          
    614          /**
    615            * @}
    616            */
    617          
    618          /**
    619            * @}
    620            */
    621          
    622          /**
    623            * @}
    624            */
    625          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ft5336_Init
         8   -> TS_IO_Delay
         8   -> TS_IO_Init
      24   ft5336_ReadID
        24   -> TS_IO_Init
        24   -> TS_IO_Read
       0   ft5336_Reset
       0   ft5336_TS_ClearIT
       8   ft5336_TS_DetectTouch
         8   -> TS_IO_Read
       0   ft5336_TS_DisableIT
         0   -> TS_IO_Write
       0   ft5336_TS_EnableIT
         0   -> TS_IO_Write
      16   ft5336_TS_GetGestureID
        16   -> TS_IO_Read
      32   ft5336_TS_GetTouchInfo
        32   -> TS_IO_Read
      40   ft5336_TS_GetXY
        40   -> TS_IO_Read
       0   ft5336_TS_ITStatus
       0   ft5336_TS_Start
         0   -> TS_IO_Write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
      10  ?Subroutine0
      24  ft5336_Init
      62  ft5336_ReadID
       2  ft5336_Reset
       2  ft5336_TS_ClearIT
      64  ft5336_TS_DetectTouch
       2  ft5336_TS_DisableIT
       4  ft5336_TS_EnableIT
      32  ft5336_TS_GetGestureID
     196  ft5336_TS_GetTouchInfo
     268  ft5336_TS_GetXY
       4  ft5336_TS_ITStatus
       2  ft5336_TS_Start
       6  ft5336_handle
          coord
      40  ft5336_ts_drv

 
   6 bytes in section .bss
  40 bytes in section .data
 676 bytes in section .text
 
 676 bytes of CODE memory
  46 bytes of DATA memory

Errors: none
Warnings: none
