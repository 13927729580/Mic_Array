###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       04/Mar/2016  17:12:04
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waveplayer
#        _CS43L22.c
#    Command line =  
#        "D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waveplayer
#        _CS43L22.c" -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waveplayer
#        _CS43L22.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waveplayer
#        _CS43L22.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waveplayer _CS43L22.c
      1          /* Includes ------------------------------------------------------------------*/
      2          #include "main.h"
      3          
      4          /** @addtogroup STM32F4-Discovery_Audio_Player_Recorder
      5          * @{
      6          */ 
      7          
      8          /* Private typedef -----------------------------------------------------------*/
      9          /* Private define ------------------------------------------------------------*/
     10          /* Private macro -------------------------------------------------------------*/
     11          /* Private variables ---------------------------------------------------------*/
     12          #if defined MEDIA_USB_KEY
     13           extern __IO uint8_t Command_index;
     14           static uint32_t wavelen = 0;
     15           static char* WaveFileName ;
     16           static __IO uint32_t SpeechDataOffset = 0x00;
     17          
     18           __IO ErrorCode WaveFileStatus = Unvalid_RIFF_ID;
     19           UINT BytesRead;
     20           WAVE_FormatTypeDef WAVE_Format;
     21           uint16_t buffer1[2*_MAX_SS] ={0x00};
     22           uint16_t buffer2[2*_MAX_SS] ={0x00};
     23          
     24          
     25           extern FATFS fatfs;
     26           extern FIL file;
     27           extern FIL fileR;
     28           extern DIR dir;
     29           extern FILINFO fno;
     30           extern uint16_t *CurrentPos;
     31           extern USB_OTG_CORE_HANDLE USB_OTG_Core;
     32           extern uint8_t WaveRecStatus;
     33          #endif
     34          extern uint8_t buffer_switch;

   \                                 In section .bss, align 4
     35          __IO uint32_t XferCplt = 0;
   \                     XferCplt:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
     36          __IO uint8_t volume = 80, AudioPlayStart = 0; //sop1hc: 70
   \                     volume:
   \   00000000   0x50               DC8 80

   \                                 In section .bss, align 1
   \                     AudioPlayStart:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     37          __IO uint32_t WaveCounter;
   \                     WaveCounter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     38          uint8_t Buffer[6];
   \                     Buffer:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     39          __IO uint32_t WaveDataLength = 0;
   \                     WaveDataLength:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     40          I2S_HandleTypeDef     hi2s3;
   \                     hi2s3:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
     41          SPI_HandleTypeDef     hspi3;
   \                     hspi3:
   \   00000000                      DS8 100
     42          

   \                                 In section .bss, align 4
     43          static __IO uint32_t TimingDelay;
   \                     TimingDelay:
   \   00000000                      DS8 4
     44          
     45          /* Private function prototypes -----------------------------------------------*/
     46          /* Private functions ---------------------------------------------------------*/
     47          
     48          /**
     49            * @brief  Play wave from a mass storge
     50            * @param  AudioFreq: Audio Sampling Frequency
     51            * @retval None
     52          */
     53          

   \                                 In section .text, align 2, keep-with-next
     54          void WavePlayBack(uint32_t AudioFreq)
     55          { 
     56            /* 
     57            Normal mode description:
     58            Start playing the audio file (using DMA stream) .
     59            Using this mode, the application can run other tasks in parallel since 
     60            the DMA is handling the Audio Transfer instead of the CPU.
     61            The only task remaining for the CPU will be the management of the DMA 
     62            Transfer Complete interrupt or the Half Transfer Complete interrupt in 
     63            order to load again the buffer and to calculate the remaining data.  
     64            Circular mode description:
     65            Start playing the file from a circular buffer, once the DMA is enabled it 
     66            always run. User has to fill periodically the buffer with the audio data 
     67            using Transfer complete and/or half transfer complete interrupts callbacks 
     68            (EVAL_AUDIO_TransferComplete_CallBack() or EVAL_AUDIO_HalfTransfer_CallBack()...
     69            In this case the audio data file is smaller than the DMA max buffer 
     70            size 65535 so there is no need to load buffer continuously or manage the 
     71            transfer complete or Half transfer interrupts callbacks. */  
     72            
     73            /* Start playing */
     74            AudioPlayStart = 1;
   \                     WavePlayBack: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x....             LDR.N    R2,??DataTable4
   \   00000004   0x7011             STRB     R1,[R2, #+0]
     75          
     76          #if defined MEDIA_IntFLASH 
     77            
     78            /* Initialize wave player (Codec, DMA, I2C) */
     79            WavePlayerInit(AudioFreq); //1 sop1hc: Audio Sampling Frequency: 48000??
     80            
     81            /* Play on */
     82            //AudioFlashPlay((uint16_t*)(AUDIO_SAMPLE + AUIDO_START_ADDRESS),AUDIO_FILE_SZE,AUIDO_START_ADDRESS);
     83            // AUDIO_SAMPLE: Data
     84            //AUIDO_START_ADDRESS = 58: Offset ralative to audio file header size
     85            //AUDIO_FILE_SZE = 990000
     86            
     87            
     88            /* LED Blue Start toggling */
     89            LED_Toggle = 6;
     90            
     91            /* Infinite loop */
     92            while(1)
     93            { 
     94              /* check on the repeate status */
     95              if (RepeatState == 0)
     96              {
     97                if (PauseResumeStatus == 0)
     98                {
     99                  /* LED Blue Stop Toggling */
    100                  LED_Toggle = 0;
    101                  /* Pause playing */
    102                  WavePlayerPauseResume(PauseResumeStatus);
    103                  PauseResumeStatus = 2;
    104                }
    105                else if (PauseResumeStatus == 1)
    106                {
    107                  /* LED Blue Toggling */
    108                  LED_Toggle = 6;
    109                  /* Resume playing */
    110                  WavePlayerPauseResume(PauseResumeStatus);
    111                  PauseResumeStatus = 2;
    112                }
    113              }
    114              else
    115              {
    116                /* Stop playing */
    117                WavePlayerStop();
    118                /* Green LED toggling */
    119                LED_Toggle = 4;
    120              }
    121            }
    122            
    123          #elif defined MEDIA_USB_KEY
    124            /* Initialize wave player (Codec, DMA, I2C) */
    125            WavePlayerInit(AudioFreq);
    126            AudioRemSize   = 0; 
    127          
    128            /* Get Data from USB Key */
    129            f_lseek(&fileR, WaveCounter);
    130            f_read (&fileR, buffer1, _MAX_SS, &BytesRead); 
    131            f_read (&fileR, buffer2, _MAX_SS, &BytesRead);
    132           
    133            /* Start playing wave */
    134            Audio_MAL_Play((uint16_t *)buffer1, _MAX_SS);
    135            buffer_switch = 1;
    136            XferCplt = 0;
    137            LED_Toggle = 6;
    138            PauseResumeStatus = 1;
    139            Count = 0;
    140           
    141            while((WaveDataLength != 0) &&  HCD_IsDeviceConnected(&USB_OTG_Core))
    142            { 
    143              /* Test on the command: Playing */
    144              if (Command_index == 0)
    145              { 
    146                /* wait for DMA transfert complete */
    147                while((XferCplt == 0) &&  HCD_IsDeviceConnected(&USB_OTG_Core))
    148                {
    149                  if (PauseResumeStatus == 0)
    150                  {
    151                    /* Pause Playing wave */
    152                    LED_Toggle = 0;
    153                    WavePlayerPauseResume(PauseResumeStatus);
    154                    PauseResumeStatus = 2;
    155                  }
    156                  else if (PauseResumeStatus == 1)
    157                  {
    158                    LED_Toggle = 6;
    159                    /* Resume Playing wave */
    160                    WavePlayerPauseResume(PauseResumeStatus);
    161                    PauseResumeStatus = 2;
    162                  }  
    163                }
    164                XferCplt = 0;
    165          
    166                if(buffer_switch == 0)
    167                {
    168                  /* Play data from buffer1 */
    169                  Audio_MAL_Play((uint16_t)buffer1, _MAX_SS);
    170                  /* Store data in buffer2 */
    171                  f_read (&fileR, buffer2, _MAX_SS, &BytesRead);
    172                  buffer_switch = 1;
    173                }
    174                else 
    175                {   
    176                  /* Play data from buffer2 */
    177                  Audio_MAL_Play((uint16_t)buffer2, _MAX_SS);
    178                  /* Store data in buffer1 */
    179                  f_read (&fileR, buffer1, _MAX_SS, &BytesRead);
    180                  buffer_switch = 0;
    181                } 
    182              }
    183              else 
    184              {
    185                WavePlayerStop();
    186                WaveDataLength = 0;
    187                RepeatState =0;
    188                break;
    189              }
    190            }
    191          #if defined PLAY_REPEAT_OFF 
    192            RepeatState = 1;
    193            WavePlayerStop();
    194            if (Command_index == 0)
    195              LED_Toggle = 4;
    196          #else 
    197            LED_Toggle = 7;
    198            RepeatState = 0;
    199            AudioPlayStart = 0;
    200            WavePlayerStop();
    201          #endif
    202          #endif 
    203          
    204          }
   \   00000006   0x4770             BX       LR               ;; return
    205          
    206          /**
    207            * @brief  Pause or Resume a played wave
    208            * @param  state: if it is equal to 0 pause Playing else resume playing
    209            * @retval None
    210            */

   \                                 In section .text, align 2, keep-with-next
    211          void WavePlayerPauseResume(uint8_t state)
    212          { 
   \                     WavePlayerPauseResume: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    213            AUDIO_PauseResume(state);   
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       AUDIO_PauseResume
    214          }
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
    215          
    216          /**
    217            * @brief  Configure the volune
    218            * @param  vol: volume value
    219            * @retval None
    220            */

   \                                 In section .text, align 2, keep-with-next
    221          uint8_t WaveplayerCtrlVolume(uint8_t vol)
    222          { 
   \                     WaveplayerCtrlVolume: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    223            AUDIO_VolumeCtl(vol);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       AUDIO_VolumeCtl
    224            return 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
    225          }
    226          
    227          
    228          /**
    229            * @brief  Stop playing wave
    230            * @param  None
    231            * @retval None
    232            */

   \                                 In section .text, align 2, keep-with-next
    233          void WavePlayerStop(void)
    234          { 
   \                     WavePlayerStop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    235            AUDIO_Stop(CODEC_PDWN_SW);
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      BL       AUDIO_Stop
    236          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    237           
    238          /**
    239          * @brief  Initializes the wave player
    240          * @param  AudioFreq: Audio sampling frequency
    241          * @retval None
    242          */

   \                                 In section .text, align 2, keep-with-next
    243          int WavePlayerInit(uint32_t AudioFreq)
    244          { 
   \                     WavePlayerInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    245          
    246            
    247            /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
    248            AUDIO_Init(OUTPUT_DEVICE_AUTO, 80, AudioFreq );  
   \   00000004   0x0022             MOVS     R2,R4
   \   00000006   0x2150             MOVS     R1,#+80
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x.... 0x....      BL       AUDIO_Init
    249            
    250            return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    251          }
    252          
    253          
    254          /**
    255          * @brief  Play wave file from internal Flash
    256          * @param  None
    257          * @retval None
    258          */

   \                                 In section .text, align 2, keep-with-next
    259          uint32_t AudioFlashPlay(uint16_t* pBuffer, uint32_t FullSize, uint32_t StartAdd)
    260          { 
   \                     AudioFlashPlay: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    261            AUDIO_Play((uint16_t*)pBuffer, (FullSize - StartAdd));
   \   00000008   0x1BA9             SUBS     R1,R5,R6
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       AUDIO_Play
    262            return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD70             POP      {R4-R6,PC}       ;; return
    263          }
    264          

   \                                 In section .text, align 2, keep-with-next
    265          void TC_Callback(struct __DMA_HandleTypeDef * hdma)
    266          {	
    267                /* Replay from the beginning */
    268             
    269          }
   \                     TC_Callback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    270          
    271          /**
    272          * @brief  Manages the DMA Half Transfer complete interrupt.
    273          * @param  None
    274          * @retval None
    275          */

   \                                 In section .text, align 2, keep-with-next
    276          void AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
    277          {  
    278          
    279          }
   \                     AUDIO_HalfTransfer_CallBack: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    280          
    281          
    282          
    283          #ifndef USE_DEFAULT_TIMEOUT_CALLBACK
    284          /**
    285            * @brief  Basic management of the timeout situation.
    286            * @param  None.
    287            * @retval None.
    288            */

   \                                 In section .text, align 2, keep-with-next
    289          uint32_t Codec_TIMEOUT_UserCallback(void)
    290          {   
    291            return (0);
   \                     Codec_TIMEOUT_UserCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    292          }
    293          #endif /* USE_DEFAULT_TIMEOUT_CALLBACK */
    294          /*----------------------------------------------------------------------------*/
    295          
    296          /**
    297            * @brief  Inserts a delay time.
    298            * @param  nTime: specifies the delay time length, in 10 ms.
    299            * @retval None
    300            */

   \                                 In section .text, align 2, keep-with-next
    301          void Delay(__IO uint32_t nTime)
    302          {
   \                     Delay: (+1)
   \   00000000   0xB401             PUSH     {R0}
    303            TimingDelay = nTime;
   \   00000002   0x9800             LDR      R0,[SP, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable4_1
   \   00000006   0x6008             STR      R0,[R1, #+0]
    304            
    305            while(TimingDelay != 0);
   \                     ??Delay_0: (+1)
   \   00000008   0x....             LDR.N    R0,??DataTable4_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD1FB             BNE.N    ??Delay_0
    306          }
   \   00000010   0xB001             ADD      SP,SP,#+4
   \   00000012   0x4770             BX       LR               ;; return
    307          
    308          /**
    309            * @brief  Decrements the TimingDelay variable.
    310            * @param  None
    311            * @retval None
    312            */

   \                                 In section .text, align 2, keep-with-next
    313          void TimingDelay_Decrement(void)
    314          {
    315            if (TimingDelay != 0x00)
   \                     TimingDelay_Decrement: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD004             BEQ.N    ??TimingDelay_Decrement_0
    316            { 
    317              TimingDelay--;
   \   00000008   0x....             LDR.N    R0,??DataTable4_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x1E40             SUBS     R0,R0,#+1
   \   0000000E   0x....             LDR.N    R1,??DataTable4_1
   \   00000010   0x6008             STR      R0,[R1, #+0]
    318            }
    319          }
   \                     ??TimingDelay_Decrement_0: (+1)
   \   00000012   0x4770             BX       LR               ;; return
    320          
    321          

   \                                 In section .text, align 2, keep-with-next
    322          void I2S3_Init(uint32_t AudioFreq)
    323          {
   \                     I2S3_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    324          
    325            // static I2S_HandleTypeDef hi2s3;
    326            /* Enable the CODEC_I2S peripheral clock */
    327            __HAL_RCC_SPI3_CLK_ENABLE();
   \   00000006   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40023840
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   0000000E   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40023840
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40023840
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF410 0x4000      ANDS     R0,R0,#0x8000
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
    328          
    329            hi2s3.Instance = SPI3;
   \   0000001E   0x....             LDR.N    R0,??DataTable4_3  ;; 0x40003c00
   \   00000020   0x....             LDR.N    R1,??DataTable4_4
   \   00000022   0x6008             STR      R0,[R1, #+0]
    330            /* Disable I2S3 peripheral to allow access to I2S internal registers */
    331            __HAL_I2S_DISABLE(&hi2s3);
   \   00000024   0x....             LDR.N    R0,??DataTable4_4
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x69C0             LDR      R0,[R0, #+28]
   \   0000002A   0xF430 0x6080      BICS     R0,R0,#0x400
   \   0000002E   0x....             LDR.N    R1,??DataTable4_4
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x61C8             STR      R0,[R1, #+28]
    332            
    333            hi2s3.Init.Standard = I2S_STANDARD;//I2S_STANDARD_PHILIPS
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable4_4
   \   00000038   0x6088             STR      R0,[R1, #+8]
    334            hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x....             LDR.N    R1,??DataTable4_4
   \   0000003E   0x60C8             STR      R0,[R1, #+12]
    335            hi2s3.Init.AudioFreq = AudioFreq;
   \   00000040   0x....             LDR.N    R0,??DataTable4_4
   \   00000042   0x6144             STR      R4,[R0, #+20]
    336            hi2s3.Init.CPOL = I2S_CPOL_LOW;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable4_4
   \   00000048   0x6188             STR      R0,[R1, #+24]
    337            hi2s3.Init.ClockSource = I2S_CLOCK_SYSCLK;
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0x....             LDR.N    R1,??DataTable4_4
   \   0000004E   0x61C8             STR      R0,[R1, #+28]
    338            hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
   \   00000050   0xF44F 0x7000      MOV      R0,#+512
   \   00000054   0x....             LDR.N    R1,??DataTable4_4
   \   00000056   0x6048             STR      R0,[R1, #+4]
    339          
    340          #ifdef CODEC_MCLK_ENABLED
    341            hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
   \   00000058   0xF44F 0x7000      MOV      R0,#+512
   \   0000005C   0x....             LDR.N    R1,??DataTable4_4
   \   0000005E   0x6108             STR      R0,[R1, #+16]
    342          #elif defined(CODEC_MCLK_DISABLED)
    343            hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    344          #else
    345          #error "No selection for the MCLK output has been defined !"
    346          #endif /* CODEC_MCLK_ENABLED */
    347            
    348            /* Initialize the I2S peripheral with the structure above */
    349            HAL_I2S_Init(&hi2s3);
   \   00000060   0x....             LDR.N    R0,??DataTable4_4
   \   00000062   0x.... 0x....      BL       HAL_I2S_Init
    350            
    351          
    352            /* Enable I2S peripheral */    
    353            //__HAL_I2S_ENABLE(&hi2s3);
    354                /* Enable the Peripheral */
    355            //__HAL_DMA_ENABLE(&DmaHandle);
    356          
    357          
    358          }
   \   00000066   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    359          
    360          

   \                                 In section .text, align 2, keep-with-next
    361          void SPI3_Init(uint32_t AudioFreq)
    362          {
   \                     SPI3_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    363          
    364            // static I2S_HandleTypeDef hi2s3;
    365            /* Enable the CODEC_I2S peripheral clock */
    366            __SPI3_CLK_ENABLE();
   \   00000006   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40023840
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   0000000E   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40023840
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40023840
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF410 0x4000      ANDS     R0,R0,#0x8000
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
    367          
    368            hspi3.Instance = SPI3;
   \   0000001E   0x....             LDR.N    R0,??DataTable4_3  ;; 0x40003c00
   \   00000020   0x....             LDR.N    R1,??DataTable4_5
   \   00000022   0x6008             STR      R0,[R1, #+0]
    369            hspi3.Init.Mode = SPI_MODE_MASTER;
   \   00000024   0xF44F 0x7082      MOV      R0,#+260
   \   00000028   0x....             LDR.N    R1,??DataTable4_5
   \   0000002A   0x6048             STR      R0,[R1, #+4]
    370            hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
   \   0000002C   0x2018             MOVS     R0,#+24
   \   0000002E   0x....             LDR.N    R1,??DataTable4_5
   \   00000030   0x61C8             STR      R0,[R1, #+28]
    371            hspi3.Init.Direction = SPI_DIRECTION_1LINE;
   \   00000032   0xF44F 0x4000      MOV      R0,#+32768
   \   00000036   0x....             LDR.N    R1,??DataTable4_5
   \   00000038   0x6088             STR      R0,[R1, #+8]
    372            hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000003A   0xF44F 0x6070      MOV      R0,#+3840
   \   0000003E   0x....             LDR.N    R1,??DataTable4_5
   \   00000040   0x60C8             STR      R0,[R1, #+12]
    373            hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable4_5
   \   00000046   0x6108             STR      R0,[R1, #+16]
    374            hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x....             LDR.N    R1,??DataTable4_5
   \   0000004C   0x6148             STR      R0,[R1, #+20]
    375            hspi3.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   0000004E   0xF44F 0x7000      MOV      R0,#+512
   \   00000052   0x....             LDR.N    R1,??DataTable4_5
   \   00000054   0x6188             STR      R0,[R1, #+24]
    376            hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x....             LDR.N    R1,??DataTable4_5
   \   0000005A   0x6208             STR      R0,[R1, #+32]
    377            hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x....             LDR.N    R1,??DataTable4_5
   \   00000060   0x6248             STR      R0,[R1, #+36]
    378            hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x....             LDR.N    R1,??DataTable4_5
   \   00000066   0x6288             STR      R0,[R1, #+40]
    379            hspi3.Init.CRCPolynomial = 7;
   \   00000068   0x2007             MOVS     R0,#+7
   \   0000006A   0x....             LDR.N    R1,??DataTable4_5
   \   0000006C   0x62C8             STR      R0,[R1, #+44]
    380            hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x....             LDR.N    R1,??DataTable4_5
   \   00000072   0x6308             STR      R0,[R1, #+48]
    381            hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x....             LDR.N    R1,??DataTable4_5
   \   00000078   0x6348             STR      R0,[R1, #+52]
    382            //hspi4.RxISR = SPI5_CallBack;
    383            HAL_SPI_Init(&hspi3);
   \   0000007A   0x....             LDR.N    R0,??DataTable4_5
   \   0000007C   0x.... 0x....      BL       HAL_SPI_Init
    384            
    385            __HAL_SPI_ENABLE(&hspi3);
   \   00000080   0x....             LDR.N    R0,??DataTable4_5
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000008A   0x....             LDR.N    R1,??DataTable4_5
   \   0000008C   0x6809             LDR      R1,[R1, #+0]
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    386            
    387          
    388            /* The I2S peripheral will be enabled only in the AUDIO_Play() function 
    389                 or by user functions if DMA mode not enabled */
    390          
    391          }
   \   00000090   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    392          
    393          

   \                                 In section .text, align 2, keep-with-next
    394          void AUDIO_InitApplication(void)
    395          {
   \                     AUDIO_InitApplication: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    396            WavePlayerInit(AUDIO_FREQ);
   \   00000002   0xF44F 0x507A      MOV      R0,#+16000
   \   00000006   0x.... 0x....      BL       WavePlayerInit
    397          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     AudioPlayStart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     TimingDelay

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     hi2s3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     hspi3
    398          
    399          
    400          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   AUDIO_HalfTransfer_CallBack
       8   AUDIO_InitApplication
         8   -> WavePlayerInit
      16   AudioFlashPlay
        16   -> AUDIO_Play
       0   Codec_TIMEOUT_UserCallback
       4   Delay
      16   I2S3_Init
        16   -> HAL_I2S_Init
      16   SPI3_Init
        16   -> HAL_SPI_Init
       0   TC_Callback
       0   TimingDelay_Decrement
       0   WavePlayBack
       8   WavePlayerInit
         8   -> AUDIO_Init
       8   WavePlayerPauseResume
         8   -> AUDIO_PauseResume
       8   WavePlayerStop
         8   -> AUDIO_Stop
       8   WaveplayerCtrlVolume
         8   -> AUDIO_VolumeCtl


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       2  AUDIO_HalfTransfer_CallBack
      12  AUDIO_InitApplication
      20  AudioFlashPlay
       1  AudioPlayStart
       8  Buffer
       4  Codec_TIMEOUT_UserCallback
      20  Delay
     104  I2S3_Init
     146  SPI3_Init
       2  TC_Callback
       4  TimingDelay
      20  TimingDelay_Decrement
       4  WaveCounter
       4  WaveDataLength
       8  WavePlayBack
      18  WavePlayerInit
      14  WavePlayerPauseResume
      10  WavePlayerStop
      16  WaveplayerCtrlVolume
       4  XferCplt
      64  hi2s3
     100  hspi3
       1  volume

 
 189 bytes in section .bss
   1 byte  in section .data
 420 bytes in section .text
 
 420 bytes of CODE memory
 190 bytes of DATA memory

Errors: none
Warnings: none
