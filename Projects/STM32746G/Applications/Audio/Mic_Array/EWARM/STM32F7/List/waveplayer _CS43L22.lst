###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       29/Mar/2016  20:10:40
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waveplayer
#        _CS43L22.c
#    Command line =  
#        "D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waveplayer
#        _CS43L22.c" -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waveplayer
#        _CS43L22.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waveplayer
#        _CS43L22.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waveplayer _CS43L22.c
      1          /*******************************************************************************
      2            *    Author: Phan Le Son (porting from ST Lib                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          /* Includes ------------------------------------------------------------------*/
      8          #include "main.h"
      9          
     10          /** @addtogroup STM32F4-Discovery_Audio_Player_Recorder
     11          * @{
     12          */ 
     13          
     14          /* Private typedef -----------------------------------------------------------*/
     15          /* Private define ------------------------------------------------------------*/
     16          /* Private macro -------------------------------------------------------------*/
     17          /* Private variables ---------------------------------------------------------*/
     18          #if defined MEDIA_USB_KEY
     19           extern __IO uint8_t Command_index;
     20           static uint32_t wavelen = 0;
     21           static char* WaveFileName ;
     22           static __IO uint32_t SpeechDataOffset = 0x00;
     23          
     24           __IO ErrorCode WaveFileStatus = Unvalid_RIFF_ID;
     25           UINT BytesRead;
     26           WAVE_FormatTypeDef WAVE_Format;
     27           uint16_t buffer1[2*_MAX_SS] ={0x00};
     28           uint16_t buffer2[2*_MAX_SS] ={0x00};
     29          
     30          
     31           extern FATFS fatfs;
     32           extern FIL file;
     33           extern FIL fileR;
     34           extern DIR dir;
     35           extern FILINFO fno;
     36           extern uint16_t *CurrentPos;
     37           extern USB_OTG_CORE_HANDLE USB_OTG_Core;
     38           extern uint8_t WaveRecStatus;
     39          #endif
     40          extern uint8_t buffer_switch;

   \                                 In section .bss, align 4
     41          __IO uint32_t XferCplt = 0;
   \                     XferCplt:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
     42          __IO uint8_t volume = 80, AudioPlayStart = 0; //sop1hc: 70
   \                     volume:
   \   00000000   0x50               DC8 80

   \                                 In section .bss, align 1
   \                     AudioPlayStart:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     43          __IO uint32_t WaveCounter;
   \                     WaveCounter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     44          uint8_t Buffer[6];
   \                     Buffer:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     45          __IO uint32_t WaveDataLength = 0;
   \                     WaveDataLength:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     46          I2S_HandleTypeDef     hi2s3;
   \                     hi2s3:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
     47          SPI_HandleTypeDef     hspi3;
   \                     hspi3:
   \   00000000                      DS8 100
     48          

   \                                 In section .bss, align 4
     49          static __IO uint32_t TimingDelay;
   \                     TimingDelay:
   \   00000000                      DS8 4
     50          
     51          /* Private function prototypes -----------------------------------------------*/
     52          /* Private functions ---------------------------------------------------------*/
     53          
     54          /**
     55            * @brief  Play wave from a mass storge
     56            * @param  AudioFreq: Audio Sampling Frequency
     57            * @retval None
     58          */
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void WavePlayBack(uint32_t AudioFreq)
     61          { 
     62            /* 
     63            Normal mode description:
     64            Start playing the audio file (using DMA stream) .
     65            Using this mode, the application can run other tasks in parallel since 
     66            the DMA is handling the Audio Transfer instead of the CPU.
     67            The only task remaining for the CPU will be the management of the DMA 
     68            Transfer Complete interrupt or the Half Transfer Complete interrupt in 
     69            order to load again the buffer and to calculate the remaining data.  
     70            Circular mode description:
     71            Start playing the file from a circular buffer, once the DMA is enabled it 
     72            always run. User has to fill periodically the buffer with the audio data 
     73            using Transfer complete and/or half transfer complete interrupts callbacks 
     74            (EVAL_AUDIO_TransferComplete_CallBack() or EVAL_AUDIO_HalfTransfer_CallBack()...
     75            In this case the audio data file is smaller than the DMA max buffer 
     76            size 65535 so there is no need to load buffer continuously or manage the 
     77            transfer complete or Half transfer interrupts callbacks. */  
     78            
     79            /* Start playing */
     80            AudioPlayStart = 1;
   \                     WavePlayBack: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x....             LDR.N    R2,??DataTable4
   \   00000004   0x7011             STRB     R1,[R2, #+0]
     81          
     82          #if defined MEDIA_IntFLASH 
     83            
     84            /* Initialize wave player (Codec, DMA, I2C) */
     85            WavePlayerInit(AudioFreq); //1 sop1hc: Audio Sampling Frequency: 48000??
     86            
     87            /* Play on */
     88            //AudioFlashPlay((uint16_t*)(AUDIO_SAMPLE + AUIDO_START_ADDRESS),AUDIO_FILE_SZE,AUIDO_START_ADDRESS);
     89            // AUDIO_SAMPLE: Data
     90            //AUIDO_START_ADDRESS = 58: Offset ralative to audio file header size
     91            //AUDIO_FILE_SZE = 990000
     92            
     93            
     94            /* LED Blue Start toggling */
     95            LED_Toggle = 6;
     96            
     97            /* Infinite loop */
     98            while(1)
     99            { 
    100              /* check on the repeate status */
    101              if (RepeatState == 0)
    102              {
    103                if (PauseResumeStatus == 0)
    104                {
    105                  /* LED Blue Stop Toggling */
    106                  LED_Toggle = 0;
    107                  /* Pause playing */
    108                  WavePlayerPauseResume(PauseResumeStatus);
    109                  PauseResumeStatus = 2;
    110                }
    111                else if (PauseResumeStatus == 1)
    112                {
    113                  /* LED Blue Toggling */
    114                  LED_Toggle = 6;
    115                  /* Resume playing */
    116                  WavePlayerPauseResume(PauseResumeStatus);
    117                  PauseResumeStatus = 2;
    118                }
    119              }
    120              else
    121              {
    122                /* Stop playing */
    123                WavePlayerStop();
    124                /* Green LED toggling */
    125                LED_Toggle = 4;
    126              }
    127            }
    128            
    129          #elif defined MEDIA_USB_KEY
    130            /* Initialize wave player (Codec, DMA, I2C) */
    131            WavePlayerInit(AudioFreq);
    132            AudioRemSize   = 0; 
    133          
    134            /* Get Data from USB Key */
    135            f_lseek(&fileR, WaveCounter);
    136            f_read (&fileR, buffer1, _MAX_SS, &BytesRead); 
    137            f_read (&fileR, buffer2, _MAX_SS, &BytesRead);
    138           
    139            /* Start playing wave */
    140            Audio_MAL_Play((uint16_t *)buffer1, _MAX_SS);
    141            buffer_switch = 1;
    142            XferCplt = 0;
    143            LED_Toggle = 6;
    144            PauseResumeStatus = 1;
    145            Count = 0;
    146           
    147            while((WaveDataLength != 0) &&  HCD_IsDeviceConnected(&USB_OTG_Core))
    148            { 
    149              /* Test on the command: Playing */
    150              if (Command_index == 0)
    151              { 
    152                /* wait for DMA transfert complete */
    153                while((XferCplt == 0) &&  HCD_IsDeviceConnected(&USB_OTG_Core))
    154                {
    155                  if (PauseResumeStatus == 0)
    156                  {
    157                    /* Pause Playing wave */
    158                    LED_Toggle = 0;
    159                    WavePlayerPauseResume(PauseResumeStatus);
    160                    PauseResumeStatus = 2;
    161                  }
    162                  else if (PauseResumeStatus == 1)
    163                  {
    164                    LED_Toggle = 6;
    165                    /* Resume Playing wave */
    166                    WavePlayerPauseResume(PauseResumeStatus);
    167                    PauseResumeStatus = 2;
    168                  }  
    169                }
    170                XferCplt = 0;
    171          
    172                if(buffer_switch == 0)
    173                {
    174                  /* Play data from buffer1 */
    175                  Audio_MAL_Play((uint16_t)buffer1, _MAX_SS);
    176                  /* Store data in buffer2 */
    177                  f_read (&fileR, buffer2, _MAX_SS, &BytesRead);
    178                  buffer_switch = 1;
    179                }
    180                else 
    181                {   
    182                  /* Play data from buffer2 */
    183                  Audio_MAL_Play((uint16_t)buffer2, _MAX_SS);
    184                  /* Store data in buffer1 */
    185                  f_read (&fileR, buffer1, _MAX_SS, &BytesRead);
    186                  buffer_switch = 0;
    187                } 
    188              }
    189              else 
    190              {
    191                WavePlayerStop();
    192                WaveDataLength = 0;
    193                RepeatState =0;
    194                break;
    195              }
    196            }
    197          #if defined PLAY_REPEAT_OFF 
    198            RepeatState = 1;
    199            WavePlayerStop();
    200            if (Command_index == 0)
    201              LED_Toggle = 4;
    202          #else 
    203            LED_Toggle = 7;
    204            RepeatState = 0;
    205            AudioPlayStart = 0;
    206            WavePlayerStop();
    207          #endif
    208          #endif 
    209          
    210          }
   \   00000006   0x4770             BX       LR               ;; return
    211          
    212          /**
    213            * @brief  Pause or Resume a played wave
    214            * @param  state: if it is equal to 0 pause Playing else resume playing
    215            * @retval None
    216            */

   \                                 In section .text, align 2, keep-with-next
    217          void WavePlayerPauseResume(uint8_t state)
    218          { 
   \                     WavePlayerPauseResume: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    219            AUDIO_PauseResume(state);   
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       AUDIO_PauseResume
    220          }
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
    221          
    222          /**
    223            * @brief  Configure the volune
    224            * @param  vol: volume value
    225            * @retval None
    226            */

   \                                 In section .text, align 2, keep-with-next
    227          uint8_t WaveplayerCtrlVolume(uint8_t vol)
    228          { 
   \                     WaveplayerCtrlVolume: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    229            AUDIO_VolumeCtl(vol);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       AUDIO_VolumeCtl
    230            return 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
    231          }
    232          
    233          
    234          /**
    235            * @brief  Stop playing wave
    236            * @param  None
    237            * @retval None
    238            */

   \                                 In section .text, align 2, keep-with-next
    239          void WavePlayerStop(void)
    240          { 
   \                     WavePlayerStop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    241            AUDIO_Stop(CODEC_PDWN_SW);
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      BL       AUDIO_Stop
    242          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    243           
    244          /**
    245          * @brief  Initializes the wave player
    246          * @param  AudioFreq: Audio sampling frequency
    247          * @retval None
    248          */

   \                                 In section .text, align 2, keep-with-next
    249          int WavePlayerInit(uint32_t AudioFreq)
    250          { 
   \                     WavePlayerInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    251          
    252            
    253            /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
    254            AUDIO_Init(OUTPUT_DEVICE_AUTO, 80, AudioFreq );  
   \   00000004   0x0022             MOVS     R2,R4
   \   00000006   0x2150             MOVS     R1,#+80
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x.... 0x....      BL       AUDIO_Init
    255            
    256            return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    257          }
    258          
    259          
    260          /**
    261          * @brief  Play wave file from internal Flash
    262          * @param  None
    263          * @retval None
    264          */

   \                                 In section .text, align 2, keep-with-next
    265          uint32_t AudioFlashPlay(uint16_t* pBuffer, uint32_t FullSize, uint32_t StartAdd)
    266          { 
   \                     AudioFlashPlay: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    267            AUDIO_Play((uint16_t*)pBuffer, (FullSize - StartAdd));
   \   00000008   0x1BA9             SUBS     R1,R5,R6
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       AUDIO_Play
    268            return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD70             POP      {R4-R6,PC}       ;; return
    269          }
    270          

   \                                 In section .text, align 2, keep-with-next
    271          void TC_Callback(struct __DMA_HandleTypeDef * hdma)
    272          {	
    273                /* Replay from the beginning */
    274             
    275          }
   \                     TC_Callback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    276          
    277          /**
    278          * @brief  Manages the DMA Half Transfer complete interrupt.
    279          * @param  None
    280          * @retval None
    281          */

   \                                 In section .text, align 2, keep-with-next
    282          void AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
    283          {  
    284          
    285          }
   \                     AUDIO_HalfTransfer_CallBack: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    286          
    287          
    288          
    289          #ifndef USE_DEFAULT_TIMEOUT_CALLBACK
    290          /**
    291            * @brief  Basic management of the timeout situation.
    292            * @param  None.
    293            * @retval None.
    294            */

   \                                 In section .text, align 2, keep-with-next
    295          uint32_t Codec_TIMEOUT_UserCallback(void)
    296          {   
    297            return (0);
   \                     Codec_TIMEOUT_UserCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    298          }
    299          #endif /* USE_DEFAULT_TIMEOUT_CALLBACK */
    300          /*----------------------------------------------------------------------------*/
    301          
    302          /**
    303            * @brief  Inserts a delay time.
    304            * @param  nTime: specifies the delay time length, in 10 ms.
    305            * @retval None
    306            */

   \                                 In section .text, align 2, keep-with-next
    307          void Delay(__IO uint32_t nTime)
    308          {
   \                     Delay: (+1)
   \   00000000   0xB401             PUSH     {R0}
    309            TimingDelay = nTime;
   \   00000002   0x9800             LDR      R0,[SP, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable4_1
   \   00000006   0x6008             STR      R0,[R1, #+0]
    310            
    311            while(TimingDelay != 0);
   \                     ??Delay_0: (+1)
   \   00000008   0x....             LDR.N    R0,??DataTable4_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD1FB             BNE.N    ??Delay_0
    312          }
   \   00000010   0xB001             ADD      SP,SP,#+4
   \   00000012   0x4770             BX       LR               ;; return
    313          
    314          /**
    315            * @brief  Decrements the TimingDelay variable.
    316            * @param  None
    317            * @retval None
    318            */

   \                                 In section .text, align 2, keep-with-next
    319          void TimingDelay_Decrement(void)
    320          {
    321            if (TimingDelay != 0x00)
   \                     TimingDelay_Decrement: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD004             BEQ.N    ??TimingDelay_Decrement_0
    322            { 
    323              TimingDelay--;
   \   00000008   0x....             LDR.N    R0,??DataTable4_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x1E40             SUBS     R0,R0,#+1
   \   0000000E   0x....             LDR.N    R1,??DataTable4_1
   \   00000010   0x6008             STR      R0,[R1, #+0]
    324            }
    325          }
   \                     ??TimingDelay_Decrement_0: (+1)
   \   00000012   0x4770             BX       LR               ;; return
    326          
    327          

   \                                 In section .text, align 2, keep-with-next
    328          void I2S3_Init(uint32_t AudioFreq)
    329          {
   \                     I2S3_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    330          
    331            // static I2S_HandleTypeDef hi2s3;
    332            /* Enable the CODEC_I2S peripheral clock */
    333            __HAL_RCC_SPI3_CLK_ENABLE();
   \   00000006   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40023840
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   0000000E   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40023840
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40023840
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF410 0x4000      ANDS     R0,R0,#0x8000
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
    334          
    335            hi2s3.Instance = SPI3;
   \   0000001E   0x....             LDR.N    R0,??DataTable4_3  ;; 0x40003c00
   \   00000020   0x....             LDR.N    R1,??DataTable4_4
   \   00000022   0x6008             STR      R0,[R1, #+0]
    336            /* Disable I2S3 peripheral to allow access to I2S internal registers */
    337            __HAL_I2S_DISABLE(&hi2s3);
   \   00000024   0x....             LDR.N    R0,??DataTable4_4
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x69C0             LDR      R0,[R0, #+28]
   \   0000002A   0xF430 0x6080      BICS     R0,R0,#0x400
   \   0000002E   0x....             LDR.N    R1,??DataTable4_4
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x61C8             STR      R0,[R1, #+28]
    338            
    339            hi2s3.Init.Standard = I2S_STANDARD;//I2S_STANDARD_PHILIPS
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable4_4
   \   00000038   0x6088             STR      R0,[R1, #+8]
    340            hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x....             LDR.N    R1,??DataTable4_4
   \   0000003E   0x60C8             STR      R0,[R1, #+12]
    341            hi2s3.Init.AudioFreq = AudioFreq;
   \   00000040   0x....             LDR.N    R0,??DataTable4_4
   \   00000042   0x6144             STR      R4,[R0, #+20]
    342            hi2s3.Init.CPOL = I2S_CPOL_LOW;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable4_4
   \   00000048   0x6188             STR      R0,[R1, #+24]
    343            hi2s3.Init.ClockSource = I2S_CLOCK_SYSCLK;
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0x....             LDR.N    R1,??DataTable4_4
   \   0000004E   0x61C8             STR      R0,[R1, #+28]
    344            hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
   \   00000050   0xF44F 0x7000      MOV      R0,#+512
   \   00000054   0x....             LDR.N    R1,??DataTable4_4
   \   00000056   0x6048             STR      R0,[R1, #+4]
    345          
    346          #ifdef CODEC_MCLK_ENABLED
    347            hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
   \   00000058   0xF44F 0x7000      MOV      R0,#+512
   \   0000005C   0x....             LDR.N    R1,??DataTable4_4
   \   0000005E   0x6108             STR      R0,[R1, #+16]
    348          #elif defined(CODEC_MCLK_DISABLED)
    349            hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    350          #else
    351          #error "No selection for the MCLK output has been defined !"
    352          #endif /* CODEC_MCLK_ENABLED */
    353            
    354            /* Initialize the I2S peripheral with the structure above */
    355            HAL_I2S_Init(&hi2s3);
   \   00000060   0x....             LDR.N    R0,??DataTable4_4
   \   00000062   0x.... 0x....      BL       HAL_I2S_Init
    356            
    357          
    358            /* Enable I2S peripheral */    
    359            //__HAL_I2S_ENABLE(&hi2s3);
    360                /* Enable the Peripheral */
    361            //__HAL_DMA_ENABLE(&DmaHandle);
    362          
    363          
    364          }
   \   00000066   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    365          
    366          

   \                                 In section .text, align 2, keep-with-next
    367          void SPI3_Init(uint32_t AudioFreq)
    368          {
   \                     SPI3_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    369          
    370            // static I2S_HandleTypeDef hi2s3;
    371            /* Enable the CODEC_I2S peripheral clock */
    372            __SPI3_CLK_ENABLE();
   \   00000006   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40023840
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   0000000E   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40023840
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40023840
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF410 0x4000      ANDS     R0,R0,#0x8000
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
    373          
    374            hspi3.Instance = SPI3;
   \   0000001E   0x....             LDR.N    R0,??DataTable4_3  ;; 0x40003c00
   \   00000020   0x....             LDR.N    R1,??DataTable4_5
   \   00000022   0x6008             STR      R0,[R1, #+0]
    375            hspi3.Init.Mode = SPI_MODE_MASTER;
   \   00000024   0xF44F 0x7082      MOV      R0,#+260
   \   00000028   0x....             LDR.N    R1,??DataTable4_5
   \   0000002A   0x6048             STR      R0,[R1, #+4]
    376            hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
   \   0000002C   0x2018             MOVS     R0,#+24
   \   0000002E   0x....             LDR.N    R1,??DataTable4_5
   \   00000030   0x61C8             STR      R0,[R1, #+28]
    377            hspi3.Init.Direction = SPI_DIRECTION_1LINE;
   \   00000032   0xF44F 0x4000      MOV      R0,#+32768
   \   00000036   0x....             LDR.N    R1,??DataTable4_5
   \   00000038   0x6088             STR      R0,[R1, #+8]
    378            hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000003A   0xF44F 0x6070      MOV      R0,#+3840
   \   0000003E   0x....             LDR.N    R1,??DataTable4_5
   \   00000040   0x60C8             STR      R0,[R1, #+12]
    379            hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable4_5
   \   00000046   0x6108             STR      R0,[R1, #+16]
    380            hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x....             LDR.N    R1,??DataTable4_5
   \   0000004C   0x6148             STR      R0,[R1, #+20]
    381            hspi3.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   0000004E   0xF44F 0x7000      MOV      R0,#+512
   \   00000052   0x....             LDR.N    R1,??DataTable4_5
   \   00000054   0x6188             STR      R0,[R1, #+24]
    382            hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x....             LDR.N    R1,??DataTable4_5
   \   0000005A   0x6208             STR      R0,[R1, #+32]
    383            hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x....             LDR.N    R1,??DataTable4_5
   \   00000060   0x6248             STR      R0,[R1, #+36]
    384            hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x....             LDR.N    R1,??DataTable4_5
   \   00000066   0x6288             STR      R0,[R1, #+40]
    385            hspi3.Init.CRCPolynomial = 7;
   \   00000068   0x2007             MOVS     R0,#+7
   \   0000006A   0x....             LDR.N    R1,??DataTable4_5
   \   0000006C   0x62C8             STR      R0,[R1, #+44]
    386            hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x....             LDR.N    R1,??DataTable4_5
   \   00000072   0x6308             STR      R0,[R1, #+48]
    387            hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x....             LDR.N    R1,??DataTable4_5
   \   00000078   0x6348             STR      R0,[R1, #+52]
    388            //hspi4.RxISR = SPI5_CallBack;
    389            HAL_SPI_Init(&hspi3);
   \   0000007A   0x....             LDR.N    R0,??DataTable4_5
   \   0000007C   0x.... 0x....      BL       HAL_SPI_Init
    390            
    391            __HAL_SPI_ENABLE(&hspi3);
   \   00000080   0x....             LDR.N    R0,??DataTable4_5
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000008A   0x....             LDR.N    R1,??DataTable4_5
   \   0000008C   0x6809             LDR      R1,[R1, #+0]
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    392            
    393          
    394            /* The I2S peripheral will be enabled only in the AUDIO_Play() function 
    395                 or by user functions if DMA mode not enabled */
    396          
    397          }
   \   00000090   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    398          
    399          

   \                                 In section .text, align 2, keep-with-next
    400          void AUDIO_InitApplication(void)
    401          {
   \                     AUDIO_InitApplication: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    402            WavePlayerInit(3*AUDIO_FREQ);
   \   00000002   0xF64B 0x3080      MOVW     R0,#+48000
   \   00000006   0x.... 0x....      BL       WavePlayerInit
    403          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     AudioPlayStart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     TimingDelay

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     hi2s3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     hspi3
    404          
    405          
    406          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   AUDIO_HalfTransfer_CallBack
       8   AUDIO_InitApplication
         8   -> WavePlayerInit
      16   AudioFlashPlay
        16   -> AUDIO_Play
       0   Codec_TIMEOUT_UserCallback
       4   Delay
      16   I2S3_Init
        16   -> HAL_I2S_Init
      16   SPI3_Init
        16   -> HAL_SPI_Init
       0   TC_Callback
       0   TimingDelay_Decrement
       0   WavePlayBack
       8   WavePlayerInit
         8   -> AUDIO_Init
       8   WavePlayerPauseResume
         8   -> AUDIO_PauseResume
       8   WavePlayerStop
         8   -> AUDIO_Stop
       8   WaveplayerCtrlVolume
         8   -> AUDIO_VolumeCtl


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       2  AUDIO_HalfTransfer_CallBack
      12  AUDIO_InitApplication
      20  AudioFlashPlay
       1  AudioPlayStart
       8  Buffer
       4  Codec_TIMEOUT_UserCallback
      20  Delay
     104  I2S3_Init
     146  SPI3_Init
       2  TC_Callback
       4  TimingDelay
      20  TimingDelay_Decrement
       4  WaveCounter
       4  WaveDataLength
       8  WavePlayBack
      18  WavePlayerInit
      14  WavePlayerPauseResume
      10  WavePlayerStop
      16  WaveplayerCtrlVolume
       4  XferCplt
      64  hi2s3
     100  hspi3
       1  volume

 
 189 bytes in section .bss
   1 byte  in section .data
 420 bytes in section .text
 
 420 bytes of CODE memory
 190 bytes of DATA memory

Errors: none
Warnings: none
