###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       01/Feb/2016  11:10:29
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waveplayer
#        _CS43L22.c
#    Command line =  
#        "D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waveplayer
#        _CS43L22.c" -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waveplayer
#        _CS43L22.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waveplayer
#        _CS43L22.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waveplayer _CS43L22.c
      1          /* Includes ------------------------------------------------------------------*/
      2          #include "main.h"
      3          
      4          /** @addtogroup STM32F4-Discovery_Audio_Player_Recorder
      5          * @{
      6          */ 
      7          
      8          /* Private typedef -----------------------------------------------------------*/
      9          /* Private define ------------------------------------------------------------*/
     10          /* Private macro -------------------------------------------------------------*/
     11          /* Private variables ---------------------------------------------------------*/
     12          #if defined MEDIA_USB_KEY
     13           extern __IO uint8_t Command_index;
     14           static uint32_t wavelen = 0;
     15           static char* WaveFileName ;
     16           static __IO uint32_t SpeechDataOffset = 0x00;
     17          
     18           __IO ErrorCode WaveFileStatus = Unvalid_RIFF_ID;
     19           UINT BytesRead;
     20           WAVE_FormatTypeDef WAVE_Format;
     21           uint16_t buffer1[2*_MAX_SS] ={0x00};
     22           uint16_t buffer2[2*_MAX_SS] ={0x00};
     23          
     24          
     25          
     26          
     27           extern FATFS fatfs;
     28           extern FIL file;
     29           extern FIL fileR;
     30           extern DIR dir;
     31           extern FILINFO fno;
     32           extern uint16_t *CurrentPos;
     33           extern USB_OTG_CORE_HANDLE USB_OTG_Core;
     34           extern uint8_t WaveRecStatus;
     35          #endif
     36          extern uint8_t buffer_switch;

   \                                 In section .bss, align 4
     37          __IO uint32_t XferCplt = 0;
   \                     XferCplt:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
     38          __IO uint8_t volume = 80, AudioPlayStart = 0; //sop1hc: 70
   \                     volume:
   \   00000000   0x50               DC8 80

   \                                 In section .bss, align 1
   \                     AudioPlayStart:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     39          __IO uint32_t WaveCounter;
   \                     WaveCounter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     40          uint8_t Buffer[6];
   \                     Buffer:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     41          __IO uint32_t WaveDataLength = 0;
   \                     WaveDataLength:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     42          I2S_HandleTypeDef     hi2s3;
   \                     hi2s3:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
     43          SPI_HandleTypeDef     hspi3;
   \                     hspi3:
   \   00000000                      DS8 100
     44          

   \                                 In section .bss, align 4
     45          static __IO uint32_t TimingDelay;
   \                     TimingDelay:
   \   00000000                      DS8 4
     46          
     47          /* Private function prototypes -----------------------------------------------*/
     48          /* Private functions ---------------------------------------------------------*/
     49          
     50          /**
     51            * @brief  Play wave from a mass storge
     52            * @param  AudioFreq: Audio Sampling Frequency
     53            * @retval None
     54          */
     55          

   \                                 In section .text, align 2, keep-with-next
     56          void WavePlayBack(uint32_t AudioFreq)
     57          { 
     58            /* 
     59            Normal mode description:
     60            Start playing the audio file (using DMA stream) .
     61            Using this mode, the application can run other tasks in parallel since 
     62            the DMA is handling the Audio Transfer instead of the CPU.
     63            The only task remaining for the CPU will be the management of the DMA 
     64            Transfer Complete interrupt or the Half Transfer Complete interrupt in 
     65            order to load again the buffer and to calculate the remaining data.  
     66            Circular mode description:
     67            Start playing the file from a circular buffer, once the DMA is enabled it 
     68            always run. User has to fill periodically the buffer with the audio data 
     69            using Transfer complete and/or half transfer complete interrupts callbacks 
     70            (EVAL_AUDIO_TransferComplete_CallBack() or EVAL_AUDIO_HalfTransfer_CallBack()...
     71            In this case the audio data file is smaller than the DMA max buffer 
     72            size 65535 so there is no need to load buffer continuously or manage the 
     73            transfer complete or Half transfer interrupts callbacks. */  
     74            
     75            /* Start playing */
     76            AudioPlayStart = 1;
   \                     WavePlayBack: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x....             LDR.N    R2,??DataTable5
   \   00000004   0x7011             STRB     R1,[R2, #+0]
     77          
     78          #if defined MEDIA_IntFLASH 
     79            
     80            /* Initialize wave player (Codec, DMA, I2C) */
     81            WavePlayerInit(AudioFreq); //1 sop1hc: Audio Sampling Frequency: 48000??
     82            
     83            /* Play on */
     84            //AudioFlashPlay((uint16_t*)(AUDIO_SAMPLE + AUIDO_START_ADDRESS),AUDIO_FILE_SZE,AUIDO_START_ADDRESS);
     85            // AUDIO_SAMPLE: Data
     86            //AUIDO_START_ADDRESS = 58: Offset ralative to audio file header size
     87            //AUDIO_FILE_SZE = 990000
     88            
     89            
     90            /* LED Blue Start toggling */
     91            LED_Toggle = 6;
     92            
     93            /* Infinite loop */
     94            while(1)
     95            { 
     96              /* check on the repeate status */
     97              if (RepeatState == 0)
     98              {
     99                if (PauseResumeStatus == 0)
    100                {
    101                  /* LED Blue Stop Toggling */
    102                  LED_Toggle = 0;
    103                  /* Pause playing */
    104                  WavePlayerPauseResume(PauseResumeStatus);
    105                  PauseResumeStatus = 2;
    106                }
    107                else if (PauseResumeStatus == 1)
    108                {
    109                  /* LED Blue Toggling */
    110                  LED_Toggle = 6;
    111                  /* Resume playing */
    112                  WavePlayerPauseResume(PauseResumeStatus);
    113                  PauseResumeStatus = 2;
    114                }
    115              }
    116              else
    117              {
    118                /* Stop playing */
    119                WavePlayerStop();
    120                /* Green LED toggling */
    121                LED_Toggle = 4;
    122              }
    123            }
    124            
    125          #elif defined MEDIA_USB_KEY
    126            /* Initialize wave player (Codec, DMA, I2C) */
    127            WavePlayerInit(AudioFreq);
    128            AudioRemSize   = 0; 
    129          
    130            /* Get Data from USB Key */
    131            f_lseek(&fileR, WaveCounter);
    132            f_read (&fileR, buffer1, _MAX_SS, &BytesRead); 
    133            f_read (&fileR, buffer2, _MAX_SS, &BytesRead);
    134           
    135            /* Start playing wave */
    136            Audio_MAL_Play((uint16_t *)buffer1, _MAX_SS);
    137            buffer_switch = 1;
    138            XferCplt = 0;
    139            LED_Toggle = 6;
    140            PauseResumeStatus = 1;
    141            Count = 0;
    142           
    143            while((WaveDataLength != 0) &&  HCD_IsDeviceConnected(&USB_OTG_Core))
    144            { 
    145              /* Test on the command: Playing */
    146              if (Command_index == 0)
    147              { 
    148                /* wait for DMA transfert complete */
    149                while((XferCplt == 0) &&  HCD_IsDeviceConnected(&USB_OTG_Core))
    150                {
    151                  if (PauseResumeStatus == 0)
    152                  {
    153                    /* Pause Playing wave */
    154                    LED_Toggle = 0;
    155                    WavePlayerPauseResume(PauseResumeStatus);
    156                    PauseResumeStatus = 2;
    157                  }
    158                  else if (PauseResumeStatus == 1)
    159                  {
    160                    LED_Toggle = 6;
    161                    /* Resume Playing wave */
    162                    WavePlayerPauseResume(PauseResumeStatus);
    163                    PauseResumeStatus = 2;
    164                  }  
    165                }
    166                XferCplt = 0;
    167          
    168                if(buffer_switch == 0)
    169                {
    170                  /* Play data from buffer1 */
    171                  Audio_MAL_Play((uint16_t)buffer1, _MAX_SS);
    172                  /* Store data in buffer2 */
    173                  f_read (&fileR, buffer2, _MAX_SS, &BytesRead);
    174                  buffer_switch = 1;
    175                }
    176                else 
    177                {   
    178                  /* Play data from buffer2 */
    179                  Audio_MAL_Play((uint16_t)buffer2, _MAX_SS);
    180                  /* Store data in buffer1 */
    181                  f_read (&fileR, buffer1, _MAX_SS, &BytesRead);
    182                  buffer_switch = 0;
    183                } 
    184              }
    185              else 
    186              {
    187                WavePlayerStop();
    188                WaveDataLength = 0;
    189                RepeatState =0;
    190                break;
    191              }
    192            }
    193          #if defined PLAY_REPEAT_OFF 
    194            RepeatState = 1;
    195            WavePlayerStop();
    196            if (Command_index == 0)
    197              LED_Toggle = 4;
    198          #else 
    199            LED_Toggle = 7;
    200            RepeatState = 0;
    201            AudioPlayStart = 0;
    202            WavePlayerStop();
    203          #endif
    204          #endif 
    205          
    206          }
   \   00000006   0x4770             BX       LR               ;; return
    207          
    208          /**
    209            * @brief  Pause or Resume a played wave
    210            * @param  state: if it is equal to 0 pause Playing else resume playing
    211            * @retval None
    212            */

   \                                 In section .text, align 2, keep-with-next
    213          void WavePlayerPauseResume(uint8_t state)
    214          { 
   \                     WavePlayerPauseResume: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    215            AUDIO_PauseResume(state);   
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       AUDIO_PauseResume
    216          }
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
    217          
    218          /**
    219            * @brief  Configure the volune
    220            * @param  vol: volume value
    221            * @retval None
    222            */

   \                                 In section .text, align 2, keep-with-next
    223          uint8_t WaveplayerCtrlVolume(uint8_t vol)
    224          { 
   \                     WaveplayerCtrlVolume: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    225            AUDIO_VolumeCtl(vol);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       AUDIO_VolumeCtl
    226            return 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
    227          }
    228          
    229          
    230          /**
    231            * @brief  Stop playing wave
    232            * @param  None
    233            * @retval None
    234            */

   \                                 In section .text, align 2, keep-with-next
    235          void WavePlayerStop(void)
    236          { 
   \                     WavePlayerStop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    237            AUDIO_Stop(CODEC_PDWN_SW);
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      BL       AUDIO_Stop
    238          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    239           
    240          /**
    241          * @brief  Initializes the wave player
    242          * @param  AudioFreq: Audio sampling frequency
    243          * @retval None
    244          */

   \                                 In section .text, align 2, keep-with-next
    245          int WavePlayerInit(uint32_t AudioFreq)
    246          { 
   \                     WavePlayerInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    247          
    248            
    249            /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
    250            AUDIO_Init(OUTPUT_DEVICE_AUTO, volume, AudioFreq );  
   \   00000004   0x0022             MOVS     R2,R4
   \   00000006   0x....             LDR.N    R0,??DataTable5_1
   \   00000008   0x7801             LDRB     R1,[R0, #+0]
   \   0000000A   0x2004             MOVS     R0,#+4
   \   0000000C   0x.... 0x....      BL       AUDIO_Init
    251            
    252            return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    253          }
    254          
    255          
    256          /**
    257          * @brief  Play wave file from internal Flash
    258          * @param  None
    259          * @retval None
    260          */

   \                                 In section .text, align 2, keep-with-next
    261          uint32_t AudioFlashPlay(uint16_t* pBuffer, uint32_t FullSize, uint32_t StartAdd)
    262          { 
   \                     AudioFlashPlay: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    263            AUDIO_Play((uint16_t*)pBuffer, (FullSize - StartAdd));
   \   00000008   0x1BA9             SUBS     R1,R5,R6
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       AUDIO_Play
    264            return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD70             POP      {R4-R6,PC}       ;; return
    265          }
    266          

   \                                 In section .text, align 2, keep-with-next
    267          void TC_Callback(struct __DMA_HandleTypeDef * hdma)
    268          {	
    269                /* Replay from the beginning */
    270             
    271          }
   \                     TC_Callback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    272          
    273          /**
    274          * @brief  Manages the DMA Half Transfer complete interrupt.
    275          * @param  None
    276          * @retval None
    277          */

   \                                 In section .text, align 2, keep-with-next
    278          void AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
    279          {  
    280          
    281          }
   \                     AUDIO_HalfTransfer_CallBack: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    282          
    283          
    284          
    285          #ifndef USE_DEFAULT_TIMEOUT_CALLBACK
    286          /**
    287            * @brief  Basic management of the timeout situation.
    288            * @param  None.
    289            * @retval None.
    290            */

   \                                 In section .text, align 2, keep-with-next
    291          uint32_t Codec_TIMEOUT_UserCallback(void)
    292          {   
    293            return (0);
   \                     Codec_TIMEOUT_UserCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    294          }
    295          #endif /* USE_DEFAULT_TIMEOUT_CALLBACK */
    296          /*----------------------------------------------------------------------------*/
    297          
    298          /**
    299            * @brief  Inserts a delay time.
    300            * @param  nTime: specifies the delay time length, in 10 ms.
    301            * @retval None
    302            */

   \                                 In section .text, align 2, keep-with-next
    303          void Delay(__IO uint32_t nTime)
    304          {
   \                     Delay: (+1)
   \   00000000   0xB401             PUSH     {R0}
    305            TimingDelay = nTime;
   \   00000002   0x9800             LDR      R0,[SP, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable5_2
   \   00000006   0x6008             STR      R0,[R1, #+0]
    306            
    307            while(TimingDelay != 0);
   \                     ??Delay_0: (+1)
   \   00000008   0x....             LDR.N    R0,??DataTable5_2
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD1FB             BNE.N    ??Delay_0
    308          }
   \   00000010   0xB001             ADD      SP,SP,#+4
   \   00000012   0x4770             BX       LR               ;; return
    309          
    310          /**
    311            * @brief  Decrements the TimingDelay variable.
    312            * @param  None
    313            * @retval None
    314            */

   \                                 In section .text, align 2, keep-with-next
    315          void TimingDelay_Decrement(void)
    316          {
    317            if (TimingDelay != 0x00)
   \                     TimingDelay_Decrement: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_2
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD004             BEQ.N    ??TimingDelay_Decrement_0
    318            { 
    319              TimingDelay--;
   \   00000008   0x....             LDR.N    R0,??DataTable5_2
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x1E40             SUBS     R0,R0,#+1
   \   0000000E   0x....             LDR.N    R1,??DataTable5_2
   \   00000010   0x6008             STR      R0,[R1, #+0]
    320            }
    321          }
   \                     ??TimingDelay_Decrement_0: (+1)
   \   00000012   0x4770             BX       LR               ;; return
    322          
    323          

   \                                 In section .text, align 2, keep-with-next
    324          void I2S3_Init(uint32_t AudioFreq)
    325          {
   \                     I2S3_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    326          
    327            // static I2S_HandleTypeDef hi2s3;
    328            /* Enable the CODEC_I2S peripheral clock */
    329            __HAL_RCC_SPI3_CLK_ENABLE();
   \   00000006   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40023840
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   0000000E   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40023840
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40023840
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF410 0x4000      ANDS     R0,R0,#0x8000
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
    330          
    331            hi2s3.Instance = SPI3;
   \   0000001E   0x....             LDR.N    R0,??DataTable5_4  ;; 0x40003c00
   \   00000020   0x....             LDR.N    R1,??DataTable5_5
   \   00000022   0x6008             STR      R0,[R1, #+0]
    332            /* Disable I2S3 peripheral to allow access to I2S internal registers */
    333            __HAL_I2S_DISABLE(&hi2s3);
   \   00000024   0x....             LDR.N    R0,??DataTable5_5
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x69C0             LDR      R0,[R0, #+28]
   \   0000002A   0xF430 0x6080      BICS     R0,R0,#0x400
   \   0000002E   0x....             LDR.N    R1,??DataTable5_5
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x61C8             STR      R0,[R1, #+28]
    334            
    335            hi2s3.Init.Standard = I2S_STANDARD_MSB;//I2S_STANDARD_PHILIPS
   \   00000034   0x2010             MOVS     R0,#+16
   \   00000036   0x....             LDR.N    R1,??DataTable5_5
   \   00000038   0x6088             STR      R0,[R1, #+8]
    336            hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x....             LDR.N    R1,??DataTable5_5
   \   0000003E   0x60C8             STR      R0,[R1, #+12]
    337            hi2s3.Init.AudioFreq = AudioFreq;
   \   00000040   0x....             LDR.N    R0,??DataTable5_5
   \   00000042   0x6144             STR      R4,[R0, #+20]
    338            hi2s3.Init.CPOL = I2S_CPOL_LOW;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable5_5
   \   00000048   0x6188             STR      R0,[R1, #+24]
    339            hi2s3.Init.ClockSource = I2S_CLOCK_SYSCLK;
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0x....             LDR.N    R1,??DataTable5_5
   \   0000004E   0x61C8             STR      R0,[R1, #+28]
    340            hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
   \   00000050   0xF44F 0x7000      MOV      R0,#+512
   \   00000054   0x....             LDR.N    R1,??DataTable5_5
   \   00000056   0x6048             STR      R0,[R1, #+4]
    341          
    342          #ifdef CODEC_MCLK_ENABLED
    343            hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
   \   00000058   0xF44F 0x7000      MOV      R0,#+512
   \   0000005C   0x....             LDR.N    R1,??DataTable5_5
   \   0000005E   0x6108             STR      R0,[R1, #+16]
    344          #elif defined(CODEC_MCLK_DISABLED)
    345            hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    346          #else
    347          #error "No selection for the MCLK output has been defined !"
    348          #endif /* CODEC_MCLK_ENABLED */
    349            
    350            /* Initialize the I2S peripheral with the structure above */
    351            HAL_I2S_Init(&hi2s3);
   \   00000060   0x....             LDR.N    R0,??DataTable5_5
   \   00000062   0x.... 0x....      BL       HAL_I2S_Init
    352            
    353          
    354            /* Enable I2S peripheral */    
    355            __HAL_I2S_ENABLE(&hi2s3);
   \   00000066   0x....             LDR.N    R0,??DataTable5_5
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x69C0             LDR      R0,[R0, #+28]
   \   0000006C   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000070   0x....             LDR.N    R1,??DataTable5_5
   \   00000072   0x6809             LDR      R1,[R1, #+0]
   \   00000074   0x61C8             STR      R0,[R1, #+28]
    356                /* Enable the Peripheral */
    357            //__HAL_DMA_ENABLE(&DmaHandle);
    358          
    359          
    360          }
   \   00000076   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    361          
    362          

   \                                 In section .text, align 2, keep-with-next
    363          void SPI3_Init(uint32_t AudioFreq)
    364          {
   \                     SPI3_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    365          
    366            // static I2S_HandleTypeDef hi2s3;
    367            /* Enable the CODEC_I2S peripheral clock */
    368            __SPI3_CLK_ENABLE();
   \   00000006   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40023840
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   0000000E   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40023840
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40023840
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF410 0x4000      ANDS     R0,R0,#0x8000
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
    369          
    370            hspi3.Instance = SPI3;
   \   0000001E   0x....             LDR.N    R0,??DataTable5_4  ;; 0x40003c00
   \   00000020   0x....             LDR.N    R1,??DataTable5_6
   \   00000022   0x6008             STR      R0,[R1, #+0]
    371            hspi3.Init.Mode = SPI_MODE_MASTER;
   \   00000024   0xF44F 0x7082      MOV      R0,#+260
   \   00000028   0x....             LDR.N    R1,??DataTable5_6
   \   0000002A   0x6048             STR      R0,[R1, #+4]
    372            hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
   \   0000002C   0x2018             MOVS     R0,#+24
   \   0000002E   0x....             LDR.N    R1,??DataTable5_6
   \   00000030   0x61C8             STR      R0,[R1, #+28]
    373            hspi3.Init.Direction = SPI_DIRECTION_1LINE;
   \   00000032   0xF44F 0x4000      MOV      R0,#+32768
   \   00000036   0x....             LDR.N    R1,??DataTable5_6
   \   00000038   0x6088             STR      R0,[R1, #+8]
    374            hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000003A   0xF44F 0x6070      MOV      R0,#+3840
   \   0000003E   0x....             LDR.N    R1,??DataTable5_6
   \   00000040   0x60C8             STR      R0,[R1, #+12]
    375            hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable5_6
   \   00000046   0x6108             STR      R0,[R1, #+16]
    376            hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x....             LDR.N    R1,??DataTable5_6
   \   0000004C   0x6148             STR      R0,[R1, #+20]
    377            hspi3.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   0000004E   0xF44F 0x7000      MOV      R0,#+512
   \   00000052   0x....             LDR.N    R1,??DataTable5_6
   \   00000054   0x6188             STR      R0,[R1, #+24]
    378            hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x....             LDR.N    R1,??DataTable5_6
   \   0000005A   0x6208             STR      R0,[R1, #+32]
    379            hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x....             LDR.N    R1,??DataTable5_6
   \   00000060   0x6248             STR      R0,[R1, #+36]
    380            hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x....             LDR.N    R1,??DataTable5_6
   \   00000066   0x6288             STR      R0,[R1, #+40]
    381            hspi3.Init.CRCPolynomial = 7;
   \   00000068   0x2007             MOVS     R0,#+7
   \   0000006A   0x....             LDR.N    R1,??DataTable5_6
   \   0000006C   0x62C8             STR      R0,[R1, #+44]
    382            hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x....             LDR.N    R1,??DataTable5_6
   \   00000072   0x6308             STR      R0,[R1, #+48]
    383            hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x....             LDR.N    R1,??DataTable5_6
   \   00000078   0x6348             STR      R0,[R1, #+52]
    384            //hspi4.RxISR = SPI5_CallBack;
    385            HAL_SPI_Init(&hspi3);
   \   0000007A   0x....             LDR.N    R0,??DataTable5_6
   \   0000007C   0x.... 0x....      BL       HAL_SPI_Init
    386            
    387            __HAL_SPI_ENABLE(&hspi3);
   \   00000080   0x....             LDR.N    R0,??DataTable5_6
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000008A   0x....             LDR.N    R1,??DataTable5_6
   \   0000008C   0x6809             LDR      R1,[R1, #+0]
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    388            
    389          
    390            /* The I2S peripheral will be enabled only in the AUDIO_Play() function 
    391                 or by user functions if DMA mode not enabled */
    392          
    393          }
   \   00000090   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    394          
    395          

   \                                 In section .text, align 2, keep-with-next
    396          void AUDIO_InitApplication(void)
    397          {
   \                     AUDIO_InitApplication: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    398            WavePlayerInit(AUDIO_FREQ);
   \   00000002   0xF44F 0x507A      MOV      R0,#+16000
   \   00000006   0x.... 0x....      BL       WavePlayerInit
    399          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     AudioPlayStart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     TimingDelay

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     hi2s3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     hspi3
    400          
    401          
    402          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   AUDIO_HalfTransfer_CallBack
       8   AUDIO_InitApplication
         8   -> WavePlayerInit
      16   AudioFlashPlay
        16   -> AUDIO_Play
       0   Codec_TIMEOUT_UserCallback
       4   Delay
      16   I2S3_Init
        16   -> HAL_I2S_Init
      16   SPI3_Init
        16   -> HAL_SPI_Init
       0   TC_Callback
       0   TimingDelay_Decrement
       0   WavePlayBack
       8   WavePlayerInit
         8   -> AUDIO_Init
       8   WavePlayerPauseResume
         8   -> AUDIO_PauseResume
       8   WavePlayerStop
         8   -> AUDIO_Stop
       8   WaveplayerCtrlVolume
         8   -> AUDIO_VolumeCtl


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       2  AUDIO_HalfTransfer_CallBack
      12  AUDIO_InitApplication
      20  AudioFlashPlay
       1  AudioPlayStart
       8  Buffer
       4  Codec_TIMEOUT_UserCallback
      20  Delay
     120  I2S3_Init
     146  SPI3_Init
       2  TC_Callback
       4  TimingDelay
      20  TimingDelay_Decrement
       4  WaveCounter
       4  WaveDataLength
       8  WavePlayBack
      20  WavePlayerInit
      14  WavePlayerPauseResume
      10  WavePlayerStop
      16  WaveplayerCtrlVolume
       4  XferCplt
      64  hi2s3
     100  hspi3
       1  volume

 
 189 bytes in section .bss
   1 byte  in section .data
 442 bytes in section .text
 
 442 bytes of CODE memory
 190 bytes of DATA memory

Errors: none
Warnings: none
