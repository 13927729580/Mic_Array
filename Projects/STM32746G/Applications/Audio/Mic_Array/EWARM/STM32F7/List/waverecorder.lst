###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       15/Mar/2016  18:17:17
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          
      8          
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "waverecorder.h" 
     11          #include "string.h"
     12          //#include "stm32f7xx_hal_spi.h"
     13          #include "stm32f7xx_hal.h"
     14          #include "pdm_filter.h"
     15          #include "DSP.h"
     16          
     17          
     18          /* Private typedef -----------------------------------------------------------*/
     19          /* Private define ------------------------------------------------------------*/
     20          
     21          
     22          /* SPI Configuration defines */
     23          #define SPI_SCK_PIN                       GPIO_PIN_10
     24          #define SPI_SCK_GPIO_PORT                 GPIOB
     25          #define SPI_SCK_GPIO_CLK                  1
     26          #define SPI_SCK_SOURCE                    1
     27          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     28          
     29          #define SPI_MOSI_PIN                      GPIO_PIN_3
     30          #define SPI_MOSI_GPIO_PORT                GPIOC
     31          #define SPI_MOSI_GPIO_CLK                 1
     32          #define SPI_MOSI_SOURCE                   1
     33          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     34          
     35          
     36          /* sop1hc */
     37          #define SPI1_SCK_PIN                       GPIO_PIN_5
     38          #define SPI1_SCK_GPIO_PORT                 GPIOA
     39          #define SPI1_SCK_GPIO_CLK                  1
     40          #define SPI1_SCK_SOURCE                    1
     41          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     42          
     43          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     44          #define SPI1_MOSI_GPIO_PORT                GPIOA
     45          #define SPI1_MOSI_GPIO_CLK                 1
     46          #define SPI1_MOSI_SOURCE                   1
     47          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     48          
     49          #define SPI1_MISO_PIN                      GPIO_PIN_6
     50          #define SPI1_MISO_GPIO_PORT                GPIOA
     51          #define SPI1_MISO_GPIO_CLK                 1
     52          #define SPI1_MISO_SOURCE                   1
     53          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     54          
     55          
     56          
     57          
     58          uint16_t idxMic8=0;
     59          uint16_t idxMic7=0;
     60          uint8_t pHeaderBuff[44];
     61          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
     62          uint16_t volatile cntTransFinish;
     63          
     64          /* Private macro -------------------------------------------------------------*/
     65          /* Private variables ---------------------------------------------------------*/
     66          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     67          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     68          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     69          extern WAVE_FormatTypeDef WaveFormat;
     70          extern FIL WavFile;
     71          extern AUDIO_DEMO_StateMachine AudioDemo;
     72          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     73          extern __IO uint8_t buffer_switch;
     74          extern __IO uint8_t volume;
     75          extern SPI_HandleTypeDef hspi4,hspi1;
     76          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     77          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     78          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     79          extern __IO uint16_t  I2S2_idxTmp;
     80          extern SPI_HandleTypeDef     hspi4;
     81          extern DMA_HandleTypeDef     DmaHandle;
     82          
     83          #ifndef CS43L22_PLAY
     84          extern __IO uint8_t flgDlyUpd; 
     85          extern __IO uint32_t XferCplt;
     86          extern __IO uint16_t  idxSPI5DataBuf3;
     87          #endif
     88          
     89          int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
     90          int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
     91          int16_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
     92          uint16_t TestSDO7[4*AUDIO_OUT_BUFFER_SIZE];
     93          uint16_t TestSDO8[4*AUDIO_OUT_BUFFER_SIZE];
     94          uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
     95          uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
     96          __IO uint16_t  WaveRec_idxTest;
     97          
     98          
     99          SPI_HandleTypeDef hspi1,hspi2;
    100          SPI_HandleTypeDef spi1_ins,spi2_ins;
    101          I2S_HandleTypeDef hi2s1;
    102          I2S_HandleTypeDef hi2s2;
    103          SPI_HandleTypeDef hspi5,hspi6;
    104          DMA_HandleTypeDef hdma_spi2_tx;
    105          DMA_HandleTypeDef hdma_spi3_tx;
    106          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
    107          
    108          #if USB_STREAMING
    109          __IO uint16_t idxFrmPDMMic8;
    110          #endif
    111          
    112          uint16_t *bufPCMSens7;
    113          uint16_t *bufPCMSens8;
    114          __IO uint16_t cntPos;
    115          __IO uint16_t cntPos7;
    116          __IO static uint16_t iBuff;
    117          __IO static uint32_t uwVolume = 70;
    118          __IO PDMFilter_InitStruct Filter[2];
    119          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
    120          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
    121          __IO int16_t   pPDM2PCM[16];
    122          __IO uint16_t cntStrt;
    123          __IO uint8_t WaveRecord_flgInt;
    124          uint8_t WaveRecord_flgIni;
    125          
    126          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
    127          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
    128          __IO uint16_t iSDO12,iSDO34,iSDO56;
    129          __IO uint8_t swtSDO7,swtSDO8;
    130          __IO uint8_t WaveRecord_flgSDO7Finish, WaveRecord_flgSDO8Finish;
    131          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
    132          __IO uint8_t I2S2_stLR, I2S2_stLROld;
    133          
    134          /* Private function prototypes -----------------------------------------------*/
    135          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    136          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    137          static void I2S1_Init(void);
    138          static void I2S2_Init(void);
    139          
    140          #if EXT_RAM
    141          #pragma location=SDRAM_BANK_ADDR
    142          #endif
    143          Mic_Array_Data Buffer1;
    144          #if EXT_RAM
    145          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)
    146          #endif
    147          Mic_Array_Data Buffer2;
    148          #if EXT_RAM
    149          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)
    150          #endif
    151          Mic_Array_Data Buffer3;
    152          

   \                                 In section .text, align 2, keep-with-next
    153          void SPI1_Ini(void)
    154          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    155            GPIO_InitTypeDef GPIO_InitStructure;
    156          
    157           
    158             	 
    159            /* Enable SCK, MOSI and MISO GPIO clocks */
    160            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40023830
   \   00000006   0xB086             SUB      SP,SP,#+24
    161            __HAL_RCC_GPIOA_CLK_ENABLE();
    162          
    163            
    164            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    165            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    166            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    167          
    168            /* SPI SCK pin configuration */
    169            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    170            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    171            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable13_1  ;; 0x40020000
   \   0000000C   0x6941             LDR      R1,[R0, #+20]
   \   0000000E   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000012   0x6141             STR      R1,[R0, #+20]
   \   00000014   0x6941             LDR      R1,[R0, #+20]
   \   00000016   0xF401 0x5180      AND      R1,R1,#0x1000
   \   0000001A   0x9100             STR      R1,[SP, #+0]
   \   0000001C   0x9900             LDR      R1,[SP, #+0]
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000024   0x6001             STR      R1,[R0, #+0]
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xA901             ADD      R1,SP,#+4
   \   0000002A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x9800             LDR      R0,[SP, #+0]
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x9002             STR      R0,[SP, #+8]
   \   00000036   0x9003             STR      R0,[SP, #+12]
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0x9004             STR      R0,[SP, #+16]
   \   0000003C   0x2005             MOVS     R0,#+5
   \   0000003E   0x9005             STR      R0,[SP, #+20]
   \   00000040   0x2020             MOVS     R0,#+32
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       HAL_GPIO_Init
    172          
    173            /* SPI  MOSI pin configuration */
    174            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   0000004A   0x2001             MOVS     R0,#+1
    175            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    176            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   0000004C   0xA901             ADD      R1,SP,#+4
   \   0000004E   0x9005             STR      R0,[SP, #+20]
   \   00000050   0x2080             MOVS     R0,#+128
   \   00000052   0x9001             STR      R0,[SP, #+4]
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       HAL_GPIO_Init
    177          
    178            /* SPI MISO pin configuration */
    179            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   0000005A   0x2001             MOVS     R0,#+1
    180            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    181            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   0000005C   0xA901             ADD      R1,SP,#+4
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x2040             MOVS     R0,#+64
   \   00000062   0x9001             STR      R0,[SP, #+4]
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       HAL_GPIO_Init
    182          
    183            /* SPI configuration -------------------------------------------------------*/
    184            //SPI_I2S_DeInit(SPI1);
    185            
    186            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   0000006E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000072   0x6081             STR      R1,[R0, #+8]
    187            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000074   0xF44F 0x6170      MOV      R1,#+3840
   \   00000078   0x60C1             STR      R1,[R0, #+12]
    188            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x6101             STR      R1,[R0, #+16]
    189            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    190            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    191            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    192            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    193            spi1_ins.Init.CRCPolynomial = 7;
    194            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   0000007E   0x.... 0x....      LDR.W    R4,??DataTable17  ;; 0x40021000
   \   00000082   0x6141             STR      R1,[R0, #+20]
   \   00000084   0xF44F 0x7100      MOV      R1,#+512
   \   00000088   0x6181             STR      R1,[R0, #+24]
   \   0000008A   0x2128             MOVS     R1,#+40
   \   0000008C   0x61C1             STR      R1,[R0, #+28]
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x6201             STR      R1,[R0, #+32]
   \   00000092   0x2107             MOVS     R1,#+7
   \   00000094   0x62C1             STR      R1,[R0, #+44]
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x6041             STR      R1,[R0, #+4]
    195            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   0000009A   0x.... 0x....      BL       HAL_SPI_Init
    196            {
    197              /* Initialization Error */
    198              //Error_Handler();
    199            }
    200            
    201           
    202            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   0000009E   0x2008             MOVS     R0,#+8
    203            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    204            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    205            GPIO_InitStructure.Pull = GPIO_PULLUP;
    206            //GPIO_InitStructure.Alternate 
    207            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000A0   0xA901             ADD      R1,SP,#+4
   \   000000A2   0x9001             STR      R0,[SP, #+4]
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x9002             STR      R0,[SP, #+8]
   \   000000A8   0x2002             MOVS     R0,#+2
   \   000000AA   0x9004             STR      R0,[SP, #+16]
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x9003             STR      R0,[SP, #+12]
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       HAL_GPIO_Init
    208          
    209            /* Deselect : Chip Select high */
    210            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0x2108             MOVS     R1,#+8
   \   000000BA   0x4620             MOV      R0,R4
   \   000000BC   0x.... 0x....      BL       HAL_GPIO_WritePin
    211             /* sop1hc */
    212            /* Configure the SPI interrupt priority */
    213            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000C0   0x2200             MOVS     R2,#+0
   \   000000C2   0x2101             MOVS     R1,#+1
   \   000000C4   0x2023             MOVS     R0,#+35
   \   000000C6   0x.... 0x....      BL       HAL_NVIC_SetPriority
    214          
    215            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000CA   0x2023             MOVS     R0,#+35
   \   000000CC   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    216            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    217            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    218          
    219            /* Enable SPI1  */
    220            //__HAL_SPI_ENABLE(SPI1);
    221          
    222          }
   \   000000D0   0xB006             ADD      SP,SP,#+24
   \   000000D2   0xBD10             POP      {R4,PC}          ;; return
    223          

   \                                 In section .text, align 2, keep-with-next
    224          void mySPI_SendData(uint8_t adress, uint8_t data)
    225          {
   \                     mySPI_SendData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   00000004   0x6812             LDR      R2,[R2, #+0]
    226           
    227          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x6893             LDR      R3,[R2, #+8]
   \   00000008   0x079B             LSLS     R3,R3,#+30
   \   0000000A   0xD5FC             BPL.N    ??mySPI_SendData_0
    228          SPI_I2S_SendData(SPI1, adress);
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable16  ;; 0x4001300c
   \   00000010   0x6018             STR      R0,[R3, #+0]
    229          
    230          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   00000012   0x6890             LDR      R0,[R2, #+8]
   \   00000014   0x07C0             LSLS     R0,R0,#+31
   \   00000016   0xD5FC             BPL.N    ??mySPI_SendData_1
    231          SPI_I2S_ReceiveData(SPI1);
   \   00000018   0x6818             LDR      R0,[R3, #+0]
    232          
    233          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   0000001A   0x6890             LDR      R0,[R2, #+8]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD4FC             BMI.N    ??mySPI_SendData_2
    234          SPI_I2S_SendData(SPI1, data);
   \   00000020   0x6019             STR      R1,[R3, #+0]
    235          
    236          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000022   0x6890             LDR      R0,[R2, #+8]
   \   00000024   0x07C0             LSLS     R0,R0,#+31
   \   00000026   0xD4FC             BMI.N    ??mySPI_SendData_3
    237          SPI_I2S_ReceiveData(SPI1);
   \   00000028   0x6818             LDR      R0,[R3, #+0]
    238           
    239          }
   \   0000002A   0x4770             BX       LR               ;; return
    240          
    241          /**
    242            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    243            * @param  None
    244            * @retval None
    245          */
    246          

   \                                 In section .text, align 2, keep-with-next
    247          void SPI1_IRQHandler(void)
    248          {  
    249                int16_t tmpTest;
    250          	  static uint8_t stLR,stLROld;
                 	                 ^
Warning[Pe177]: variable "stLR" was declared but never referenced
    251          	
    252          	  /* SPI in mode Receiver ----------------------------------------------------*/
    253          	  if(
    254          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    255          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    256          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000004   0xF8D0 0x10C8      LDR      R1,[R0, #+200]
   \   00000008   0x6849             LDR      R1,[R1, #+4]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xF140 0x8090      BPL.W    ??SPI1_IRQHandler_0
    257          	  {
    258          	
    259          
    260          	   tmpTest =  (int16_t)SPI_I2S_ReceiveData(SPI1);
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable16  ;; 0x4001300c
   \   00000014   0x6809             LDR      R1,[R1, #+0]
    261          	
    262          	   /* Left-Right Mic data */
    263          	   //stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    264          	
    265          		if (I2S2_stLR==GPIO_PIN_SET)
   \   00000016   0xF890 0x21B8      LDRB     R2,[R0, #+440]
   \   0000001A   0xF890 0x31B6      LDRB     R3,[R0, #+438]
   \   0000001E   0xB209             SXTH     R1,R1
   \   00000020   0x2B01             CMP      R3,#+1
   \   00000022   0xD145             BNE.N    ??SPI1_IRQHandler_1
    266          		{
    267          		       if((stLROld==GPIO_PIN_SET)&&(WaveRec_idxSens1<2*AUDIO_OUT_BUFFER_SIZE))  
   \   00000024   0x2A01             CMP      R2,#+1
   \   00000026   0xF040 0x8083      BNE.W    ??SPI1_IRQHandler_0
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable16_2
   \   0000002E   0x8813             LDRH     R3,[R2, #+0]
   \   00000030   0xF5B3 0x6F00      CMP      R3,#+2048
   \   00000034   0xDA7C             BGE.N    ??SPI1_IRQHandler_0
    268          		       {
    269          				   vRawSens1 = (tmpTest);
   \   00000036   0xF8A0 0x11C4      STRH     R1,[R0, #+452]
    270          			       WaveRec_idxTest++;
   \   0000003A   0xF8B0 0x11BE      LDRH     R1,[R0, #+446]
   \   0000003E   0x1C49             ADDS     R1,R1,#+1
   \   00000040   0xF8A0 0x11BE      STRH     R1,[R0, #+446]
    271          				   /* Recording Audio Data */						 
    272          				   switch (buffer_switch)
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable16_3
   \   00000048   0x7809             LDRB     R1,[R1, #+0]
   \   0000004A   0xB139             CBZ.N    R1,??SPI1_IRQHandler_2
   \   0000004C   0x2902             CMP      R1,#+2
   \   0000004E   0xD021             BEQ.N    ??SPI1_IRQHandler_3
   \   00000050   0xD312             BCC.N    ??SPI1_IRQHandler_4
    273          				   {
    274          						case BUF1_PLAY:
    275          								Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;								
    276          								break;
    277          						case BUF2_PLAY:
    278          								Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    279          								break;
    280          						case BUF3_PLAY:
    281          								Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;									
    282          								break;
    283          						default:
    284          								break; 
    285          				   
    286          				   	}
    287          		       	}
    288          		}
    289          		else
    290          		{		
    291          			if ((stLROld==GPIO_PIN_RESET)&&(WaveRec_idxSens1<2*AUDIO_OUT_BUFFER_SIZE))  
    292          			{
    293          				vRawSens2 = (tmpTest);
    294          				WaveRec_idxTest++;
    295          				/* Recording Audio Data */						 
    296          				switch (buffer_switch)
    297          				{
    298          					case BUF1_PLAY:
    299          						Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;								
    300          						break;
    301          					case BUF2_PLAY:
    302          						Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
    303          						break;
    304          					case BUF3_PLAY:
    305          						Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    306          						break;
    307          					default:
    308          						break; 
    309          
    310          				}
    311          			}
    312          		
    313          		} 	
    314          	}
    315          	   
    316          
    317          #if 0
    318                 if (iSDO12<4*AUDIO_OUT_BUFFER_SIZE)
    319          	   {
    320                     TestSDO12[iSDO12++]=tmpTest;
    321          	   }
    322          	   else
    323          	   {
    324                     iSDO12=0;
    325          	   }
    326          		if ((WaveRec_idxSens1 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens2 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    327          	//			  &&(stLR!=stLROld))
    328          		{
    329          	/*-------------------------------------------------------------------------------------------------------------
    330          				  
    331          		Sequence  Record Data					  Processing Data				  Player Data
    332          				  
    333          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    334          				  
    335          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    336          				  
    337          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    338          	 ---------------------------------------------------------------------------------------------------------------*/
    339          				  /* Recording Audio Data */						 
    340          				   switch (buffer_switch)
    341          				   {
    342          							case BUF1_PLAY:
    343          
    344                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    345          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    346          							    else
    347          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    348          
    349          	
    350          									break;
    351          							case BUF2_PLAY:
    352                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    353          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    354          							    else
    355          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;	
    356          
    357          									break;
    358          							case BUF3_PLAY:
    359                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    360          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    361          							    else
    362          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    363          
    364          									break;
    365          							default:
    366          									break; 
    367          				   }
    368          			
    369          		 } 
    370          #endif		
    371          
    372          		/* Update Old value */	  
    373          		stLROld=I2S2_stLR;
   \   00000052   0xF890 0x11B6      LDRB     R1,[R0, #+438]
   \   00000056   0xF880 0x11B8      STRB     R1,[R0, #+440]
    374          
    375          				 
    376          } 	 
   \   0000005A   0x4770             BX       LR
   \                     ??SPI1_IRQHandler_2: (+1)
   \   0000005C   0x8811             LDRH     R1,[R2, #+0]
   \   0000005E   0x1C4B             ADDS     R3,R1,#+1
   \   00000060   0x8013             STRH     R3,[R2, #+0]
   \   00000062   0xF9B0 0x21C4      LDRSH    R2,[R0, #+452]
   \   00000066   0x.... 0x....      LDR.W    R3,??DataTable16_4  ;; 0xc00080a0
   \   0000006A   0xF823 0x2011      STRH     R2,[R3, R1, LSL #+1]
   \   0000006E   0xF890 0x11B6      LDRB     R1,[R0, #+438]
   \   00000072   0xF880 0x11B8      STRB     R1,[R0, #+440]
   \   00000076   0x4770             BX       LR
   \                     ??SPI1_IRQHandler_4: (+1)
   \   00000078   0x8811             LDRH     R1,[R2, #+0]
   \   0000007A   0x1C4B             ADDS     R3,R1,#+1
   \   0000007C   0x8013             STRH     R3,[R2, #+0]
   \   0000007E   0xF9B0 0x21C4      LDRSH    R2,[R0, #+452]
   \   00000082   0x.... 0x....      LDR.W    R3,??DataTable17_1  ;; 0xc0010140
   \   00000086   0xF823 0x2011      STRH     R2,[R3, R1, LSL #+1]
   \   0000008A   0xF890 0x11B6      LDRB     R1,[R0, #+438]
   \   0000008E   0xF880 0x11B8      STRB     R1,[R0, #+440]
   \   00000092   0x4770             BX       LR
   \                     ??SPI1_IRQHandler_3: (+1)
   \   00000094   0x8811             LDRH     R1,[R2, #+0]
   \   00000096   0x1C4B             ADDS     R3,R1,#+1
   \   00000098   0x0049             LSLS     R1,R1,#+1
   \   0000009A   0x8013             STRH     R3,[R2, #+0]
   \   0000009C   0xF9B0 0x21C4      LDRSH    R2,[R0, #+452]
   \   000000A0   0xF1A1 0x4180      SUB      R1,R1,#+1073741824
   \   000000A4   0x800A             STRH     R2,[R1, #+0]
   \   000000A6   0xF890 0x11B6      LDRB     R1,[R0, #+438]
   \   000000AA   0xF880 0x11B8      STRB     R1,[R0, #+440]
   \   000000AE   0x4770             BX       LR
   \                     ??SPI1_IRQHandler_1: (+1)
   \   000000B0   0x2A00             CMP      R2,#+0
   \   000000B2   0xD13D             BNE.N    ??SPI1_IRQHandler_0
   \   000000B4   0x.... 0x....      LDR.W    R2,??DataTable16_2
   \   000000B8   0x8812             LDRH     R2,[R2, #+0]
   \   000000BA   0xF5B2 0x6F00      CMP      R2,#+2048
   \   000000BE   0xDA37             BGE.N    ??SPI1_IRQHandler_0
   \   000000C0   0xF8A0 0x11C6      STRH     R1,[R0, #+454]
   \   000000C4   0xF8B0 0x11BE      LDRH     R1,[R0, #+446]
   \   000000C8   0x1C49             ADDS     R1,R1,#+1
   \   000000CA   0xF8A0 0x11BE      STRH     R1,[R0, #+446]
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable16_3
   \   000000D2   0x7809             LDRB     R1,[R1, #+0]
   \   000000D4   0xB139             CBZ.N    R1,??SPI1_IRQHandler_5
   \   000000D6   0x2902             CMP      R1,#+2
   \   000000D8   0xD01D             BEQ.N    ??SPI1_IRQHandler_6
   \   000000DA   0xD310             BCC.N    ??SPI1_IRQHandler_7
   \   000000DC   0xF890 0x11B6      LDRB     R1,[R0, #+438]
   \   000000E0   0xF880 0x11B8      STRB     R1,[R0, #+440]
   \   000000E4   0x4770             BX       LR
   \                     ??SPI1_IRQHandler_5: (+1)
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   000000EA   0x880A             LDRH     R2,[R1, #+0]
   \   000000EC   0x1C53             ADDS     R3,R2,#+1
   \   000000EE   0x800B             STRH     R3,[R1, #+0]
   \   000000F0   0x.... 0x....      LDR.W    R3,??DataTable16_4  ;; 0xc00080a0
   \   000000F4   0xF9B0 0x11C6      LDRSH    R1,[R0, #+454]
   \   000000F8   0xEB03 0x0242      ADD      R2,R3,R2, LSL #+1
   \   000000FC   0xE015             B.N      ??SPI1_IRQHandler_8
   \                     ??SPI1_IRQHandler_7: (+1)
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   00000102   0x880A             LDRH     R2,[R1, #+0]
   \   00000104   0x1C53             ADDS     R3,R2,#+1
   \   00000106   0x800B             STRH     R3,[R1, #+0]
   \   00000108   0x.... 0x....      LDR.W    R3,??DataTable17_1  ;; 0xc0010140
   \   0000010C   0xF9B0 0x11C6      LDRSH    R1,[R0, #+454]
   \   00000110   0xEB03 0x0242      ADD      R2,R3,R2, LSL #+1
   \   00000114   0xE009             B.N      ??SPI1_IRQHandler_8
   \                     ??SPI1_IRQHandler_6: (+1)
   \   00000116   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   0000011A   0x880A             LDRH     R2,[R1, #+0]
   \   0000011C   0x1C53             ADDS     R3,R2,#+1
   \   0000011E   0x0052             LSLS     R2,R2,#+1
   \   00000120   0x800B             STRH     R3,[R1, #+0]
   \   00000122   0xF9B0 0x11C6      LDRSH    R1,[R0, #+454]
   \   00000126   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \                     ??SPI1_IRQHandler_8: (+1)
   \   0000012A   0xF241 0x0314      MOVW     R3,#+4116
   \   0000012E   0x5299             STRH     R1,[R3, R2]
   \                     ??SPI1_IRQHandler_0: (+1)
   \   00000130   0xF890 0x11B6      LDRB     R1,[R0, #+438]
   \   00000134   0xF880 0x11B8      STRB     R1,[R0, #+440]
   \   00000138   0x4770             BX       LR               ;; return
   \   0000013A                      REQUIRE Buffer2
   \   0000013A                      REQUIRE Buffer3
   \   0000013A                      REQUIRE Buffer1
    377          
    378          
    379          
    380          
    381          /**
    382            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    383            * @param  None
    384            * @retval None
    385          */
    386          

   \                                 In section .text, align 2, keep-with-next
    387          void SPI2_IRQHandler(void)
    388          {      
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    389              int16_t app;
    390              
    391          
    392            /* Check if data are available in SPI Data register */
    393             if (
    394          //	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    395          //   	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    396             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    397             	  )
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable16_1
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0xF8D4 0x0108      LDR      R0,[R4, #+264]
   \   0000000C   0x6840             LDR      R0,[R0, #+4]
   \   0000000E   0x0640             LSLS     R0,R0,#+25
   \   00000010   0xD56D             BPL.N    ??SPI2_IRQHandler_0
    398             {
    399              
    400               app = (int16_t)SPI_I2S_ReceiveData(SPI2);   
    401               //SPI_I2S_SendData(SPI2, 3333);
    402          
    403          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x4000380c
   \   00000018   0x6805             LDR      R5,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000022   0xF884 0x01B6      STRB     R0,[R4, #+438]
    404          
    405          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   00000026   0xF894 0x01B6      LDRB     R0,[R4, #+438]
   \   0000002A   0xB22D             SXTH     R5,R5
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xF894 0x01B7      LDRB     R0,[R4, #+439]
   \   00000032   0xD12E             BNE.N    ??SPI2_IRQHandler_1
    406          	 {
    407          		
    408          			if ((I2S2_stLROld==GPIO_PIN_SET)&&(WaveRec_idxSens3<2*AUDIO_OUT_BUFFER_SIZE)) 
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD156             BNE.N    ??SPI2_IRQHandler_2
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable17_4
   \   0000003C   0x8801             LDRH     R1,[R0, #+0]
   \   0000003E   0xF5B1 0x6F00      CMP      R1,#+2048
   \   00000042   0xDA50             BGE.N    ??SPI2_IRQHandler_2
    409          			{
    410          				vRawSens3 = app;
    411          				switch (buffer_switch)
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable16_3
   \   00000048   0xF8A4 0x51CA      STRH     R5,[R4, #+458]
   \   0000004C   0x7809             LDRB     R1,[R1, #+0]
   \   0000004E   0xB119             CBZ.N    R1,??SPI2_IRQHandler_3
   \   00000050   0x2902             CMP      R1,#+2
   \   00000052   0xD015             BEQ.N    ??SPI2_IRQHandler_4
   \   00000054   0xD30A             BCC.N    ??SPI2_IRQHandler_5
   \   00000056   0xE046             B.N      ??SPI2_IRQHandler_2
    412          				{
    413          					case BUF1_PLAY:
    414          						Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;								
   \                     ??SPI2_IRQHandler_3: (+1)
   \   00000058   0x8801             LDRH     R1,[R0, #+0]
   \   0000005A   0x1C4A             ADDS     R2,R1,#+1
   \   0000005C   0x8002             STRH     R2,[R0, #+0]
   \   0000005E   0x.... 0x....      LDR.W    R2,??DataTable16_4  ;; 0xc00080a0
   \   00000062   0xEB02 0x0141      ADD      R1,R2,R1, LSL #+1
   \   00000066   0xF242 0x0228      MOVW     R2,#+8232
   \   0000006A   0xE03B             B.N      ??SPI2_IRQHandler_6
    415          						break;
    416          					case BUF2_PLAY:
    417          						Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \                     ??SPI2_IRQHandler_5: (+1)
   \   0000006C   0x8801             LDRH     R1,[R0, #+0]
   \   0000006E   0x1C4A             ADDS     R2,R1,#+1
   \   00000070   0x8002             STRH     R2,[R0, #+0]
   \   00000072   0x.... 0x....      LDR.W    R2,??DataTable17_1  ;; 0xc0010140
   \   00000076   0xEB02 0x0141      ADD      R1,R2,R1, LSL #+1
   \   0000007A   0xF242 0x0228      MOVW     R2,#+8232
   \   0000007E   0xE031             B.N      ??SPI2_IRQHandler_6
    418          						break;
    419          					case BUF3_PLAY:
    420          						Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;									
   \                     ??SPI2_IRQHandler_4: (+1)
   \   00000080   0x8801             LDRH     R1,[R0, #+0]
   \   00000082   0x1C4A             ADDS     R2,R1,#+1
   \   00000084   0x0049             LSLS     R1,R1,#+1
   \   00000086   0x8002             STRH     R2,[R0, #+0]
   \   00000088   0xF1A1 0x4180      SUB      R1,R1,#+1073741824
   \   0000008C   0xF242 0x0228      MOVW     R2,#+8232
   \   00000090   0xE028             B.N      ??SPI2_IRQHandler_6
    421          						break;
    422          					default:
    423          						break; 
    424          				}
    425          			}
    426          
    427          		
    428          	 }
    429          	 else
    430          	 {
    431                      if ((I2S2_stLROld==GPIO_PIN_RESET)&&(WaveRec_idxSens4<2*AUDIO_OUT_BUFFER_SIZE))   
   \                     ??SPI2_IRQHandler_1: (+1)
   \   00000092   0xBB40             CBNZ.N   R0,??SPI2_IRQHandler_2
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   00000098   0x8801             LDRH     R1,[R0, #+0]
   \   0000009A   0xF5B1 0x6F00      CMP      R1,#+2048
   \   0000009E   0xDA22             BGE.N    ??SPI2_IRQHandler_2
    432                      {
    433          				vRawSens4 =app;
    434          				switch (buffer_switch)
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable16_3
   \   000000A4   0xF8A4 0x51C8      STRH     R5,[R4, #+456]
   \   000000A8   0x7809             LDRB     R1,[R1, #+0]
   \   000000AA   0xB119             CBZ.N    R1,??SPI2_IRQHandler_7
   \   000000AC   0x2902             CMP      R1,#+2
   \   000000AE   0xD011             BEQ.N    ??SPI2_IRQHandler_8
   \   000000B0   0xD308             BCC.N    ??SPI2_IRQHandler_9
   \   000000B2   0xE018             B.N      ??SPI2_IRQHandler_2
    435          				{	 
    436          					case BUF1_PLAY:
    437          						Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;								
   \                     ??SPI2_IRQHandler_7: (+1)
   \   000000B4   0x8801             LDRH     R1,[R0, #+0]
   \   000000B6   0x1C4A             ADDS     R2,R1,#+1
   \   000000B8   0x8002             STRH     R2,[R0, #+0]
   \   000000BA   0x.... 0x....      LDR.W    R2,??DataTable16_4  ;; 0xc00080a0
   \   000000BE   0xEB02 0x0141      ADD      R1,R2,R1, LSL #+1
   \   000000C2   0xE00D             B.N      ??SPI2_IRQHandler_10
    438          						break;
    439          					case BUF2_PLAY:
    440          						Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \                     ??SPI2_IRQHandler_9: (+1)
   \   000000C4   0x8801             LDRH     R1,[R0, #+0]
   \   000000C6   0x1C4A             ADDS     R2,R1,#+1
   \   000000C8   0x8002             STRH     R2,[R0, #+0]
   \   000000CA   0x.... 0x....      LDR.W    R2,??DataTable17_1  ;; 0xc0010140
   \   000000CE   0xEB02 0x0141      ADD      R1,R2,R1, LSL #+1
   \   000000D2   0xE005             B.N      ??SPI2_IRQHandler_10
    441          						break;
    442          					case BUF3_PLAY:
    443          						Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;									
   \                     ??SPI2_IRQHandler_8: (+1)
   \   000000D4   0x8801             LDRH     R1,[R0, #+0]
   \   000000D6   0x1C4A             ADDS     R2,R1,#+1
   \   000000D8   0x0049             LSLS     R1,R1,#+1
   \   000000DA   0x8002             STRH     R2,[R0, #+0]
   \   000000DC   0xF1A1 0x4180      SUB      R1,R1,#+1073741824
   \                     ??SPI2_IRQHandler_10: (+1)
   \   000000E0   0xF243 0x023C      MOVW     R2,#+12348
   \                     ??SPI2_IRQHandler_6: (+1)
   \   000000E4   0x5255             STRH     R5,[R2, R1]
    444          						break;
    445          					default:
    446          						break; 
    447          				}
    448                      }
    449          	 }
    450          
    451          
    452          	 
    453          #if 0
    454          	  if (iSDO34<4*AUDIO_OUT_BUFFER_SIZE)
    455          	 {
    456          		 TestSDO34[iSDO34++]=app;
    457          	 }
    458          	 else
    459          	 {
    460          		 iSDO34=0;
    461          	 }
    462          
    463          	 if ((WaveRec_idxSens3 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens4 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    464          //             &&(I2S2_stLR!=I2S2_stLROld))
    465          	 {
    466          /*-------------------------------------------------------------------------------------------------------------
    467          			  
    468          	Sequence  Record Data                     Processing Data                 Player Data
    469          			  
    470          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    471          			  
    472          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    473          			  
    474          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    475           ---------------------------------------------------------------------------------------------------------------*/
    476          		/* Recording Audio Data */			             
    477          		 switch (buffer_switch)
    478          		 {
    479          			  case BUF1_PLAY:
    480                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    481                                        Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    482                                    else
    483                                        Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			  
    484          			  break;                     
    485          			  case BUF2_PLAY:
    486                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    487                                        Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    488                                    else
    489                                        Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			   
    490          				  break;
    491          			  case BUF3_PLAY:
    492                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    493                                       Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    494          		          else
    495                                       Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    496          		          break;
    497          			  default:
    498          			     break; 
    499          		 }
    500          		
    501          	 }          
    502          #endif		  
    503          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   000000E6   0xF894 0x01B6      LDRB     R0,[R4, #+438]
   \   000000EA   0xF884 0x01B7      STRB     R0,[R4, #+439]
    504          
    505             }
    506          
    507          }
   \                     ??SPI2_IRQHandler_0: (+1)
   \   000000EE   0xB001             ADD      SP,SP,#+4
   \   000000F0   0xBD30             POP      {R4,R5,PC}       ;; return
   \   000000F2                      REQUIRE Buffer2
   \   000000F2                      REQUIRE Buffer3
   \   000000F2                      REQUIRE Buffer1
    508          
    509          

   \                                 In section .text, align 2, keep-with-next
    510          void SPI4_IRQHandler(void)
    511          {
    512            static uint8_t Main_stLR, Main_stLROld;
                                  ^
Warning[Pe177]: variable "Main_stLR" was declared but never referenced
    513          
    514          
    515            /* SPI in mode Receiver ----------------------------------------------------*/
    516            if(
    517          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    518          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    519               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_6
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xF140 0x8092      BPL.W    ??SPI4_IRQHandler_0
    520            {
    521          
    522                  uint16_t test;
    523                  test =  SPI_I2S_ReceiveData(SPI4);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable17_7  ;; 0x4001340c
   \   00000012   0x6801             LDR      R1,[R0, #+0]
    524          
    525                  /* Left-Right Mic data */
    526                  //Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    527          
    528                  /* STM32F746 read data from STA321MP, the data is shifted few bit     */
    529                  /* Data from STA321MP is 32bit formart                                */
    530                  /* SPI is just able to read 16 bit format                             */
    531                  /* Therefore, it needs to correct                                     */
    532                  
    533                  /* ---------------------------+++++++++++++++++++++++++++++++---------*/
    534                  /*                  ______DATAL_____              ______DATAR_____    */
    535                  /*                  _____vRawSens5__              ______vRawSens6_    */       
    536          	if (I2S2_stLR==GPIO_PIN_SET)
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000018   0xF890 0x21B9      LDRB     R2,[R0, #+441]
   \   0000001C   0xF890 0x31B6      LDRB     R3,[R0, #+438]
   \   00000020   0xB289             UXTH     R1,R1
   \   00000022   0x2B01             CMP      R3,#+1
   \   00000024   0xD141             BNE.N    ??SPI4_IRQHandler_1
    537          	{
    538                      if (Main_stLROld==GPIO_PIN_SET)
   \   00000026   0x2A01             CMP      R2,#+1
   \   00000028   0xD040             BEQ.N    ??SPI4_IRQHandler_2
    539                      {
    540                         SPI4_stNipple = (test);    
    541                      }
    542                      else
    543                      {
    544                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   0000002A   0xF890 0x21B5      LDRB     R2,[R0, #+437]
   \   0000002E   0xF9B0 0x31D0      LDRSH    R3,[R0, #+464]
    545                         if (WaveRec_idxSens5 < (2*AUDIO_OUT_BUFFER_SIZE+5))
   \   00000032   0xF640 0x0C05      MOVW     R12,#+2053
   \   00000036   0x40D1             LSRS     R1,R1,R2
   \   00000038   0xF890 0x21B5      LDRB     R2,[R0, #+437]
   \   0000003C   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   00000040   0xFA03 0xF202      LSL      R2,R3,R2
   \   00000044   0x4311             ORRS     R1,R2,R1
   \   00000046   0x.... 0x....      LDR.W    R2,??DataTable17_8
   \   0000004A   0xF8A0 0x11CC      STRH     R1,[R0, #+460]
   \   0000004E   0x8813             LDRH     R3,[R2, #+0]
   \   00000050   0x4563             CMP      R3,R12
   \   00000052   0xDA6A             BGE.N    ??SPI4_IRQHandler_3
    546                         {
    547                              /*-------------------------------------------------------------------------------------------------------------                                             
    548                              Sequence  Record Data                     Processing Data                 Player Data
    549                                                
    550                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    551                                                
    552                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    553                                                
    554                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    555                               ---------------------------------------------------------------------------------------------------------------*/                     
    556                               /* Recording Audio Data */			             
    557                               switch (buffer_switch)
   \   00000054   0x.... 0x....      LDR.W    R3,??DataTable16_3
   \   00000058   0x781B             LDRB     R3,[R3, #+0]
   \   0000005A   0xB11B             CBZ.N    R3,??SPI4_IRQHandler_4
   \   0000005C   0x2B02             CMP      R3,#+2
   \   0000005E   0xD019             BEQ.N    ??SPI4_IRQHandler_5
   \   00000060   0xD30C             BCC.N    ??SPI4_IRQHandler_6
   \   00000062   0xE062             B.N      ??SPI4_IRQHandler_3
    558                               {
    559                                   case BUF1_PLAY:
    560                                       Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_4: (+1)
   \   00000064   0x8813             LDRH     R3,[R2, #+0]
   \   00000066   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000006A   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000006E   0x.... 0x....      LDR.W    R2,??DataTable16_4  ;; 0xc00080a0
   \   00000072   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000076   0xF244 0x0350      MOVW     R3,#+16464
   \   0000007A   0xE055             B.N      ??SPI4_IRQHandler_7
    561          
    562                                       break;
    563                                   case BUF2_PLAY:
    564                                       Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_6: (+1)
   \   0000007C   0x8813             LDRH     R3,[R2, #+0]
   \   0000007E   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000082   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000086   0x.... 0x....      LDR.W    R2,??DataTable20  ;; 0xc0010140
   \   0000008A   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000008E   0xF244 0x0350      MOVW     R3,#+16464
   \   00000092   0xE049             B.N      ??SPI4_IRQHandler_7
    565          
    566                                       break;
    567                                   case BUF3_PLAY:
    568                                       Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_5: (+1)
   \   00000094   0x8813             LDRH     R3,[R2, #+0]
   \   00000096   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000009A   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000009E   0x005A             LSLS     R2,R3,#+1
   \   000000A0   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \   000000A4   0xF244 0x0350      MOVW     R3,#+16464
   \   000000A8   0xE03E             B.N      ??SPI4_IRQHandler_7
    569          
    570                                       break;                          
    571                                   default:
    572                                       break;
    573                               }
    574                         }
    575          	   }
    576                  }
    577          	else
    578          	{
    579                    if (Main_stLROld==GPIO_PIN_RESET)
   \                     ??SPI4_IRQHandler_1: (+1)
   \   000000AA   0xB912             CBNZ.N   R2,??SPI4_IRQHandler_8
    580                    {
    581                        SPI4_stNipple = (test);	  
   \                     ??SPI4_IRQHandler_2: (+1)
   \   000000AC   0xF8A0 0x11D0      STRH     R1,[R0, #+464]
   \   000000B0   0xE03B             B.N      ??SPI4_IRQHandler_3
    582          
    583                    }
    584                    else
    585                    {
    586                         vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI4_IRQHandler_8: (+1)
   \   000000B2   0xF890 0x21B5      LDRB     R2,[R0, #+437]
   \   000000B6   0xF9B0 0x31D0      LDRSH    R3,[R0, #+464]
    587                         if (WaveRec_idxSens6 < (2*AUDIO_OUT_BUFFER_SIZE+5))
   \   000000BA   0xF640 0x0C05      MOVW     R12,#+2053
   \   000000BE   0x40D1             LSRS     R1,R1,R2
   \   000000C0   0xF890 0x21B5      LDRB     R2,[R0, #+437]
   \   000000C4   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   000000C8   0xFA03 0xF202      LSL      R2,R3,R2
   \   000000CC   0x4311             ORRS     R1,R2,R1
   \   000000CE   0x.... 0x....      LDR.W    R2,??DataTable18
   \   000000D2   0xF8A0 0x11CE      STRH     R1,[R0, #+462]
   \   000000D6   0x8813             LDRH     R3,[R2, #+0]
   \   000000D8   0x4563             CMP      R3,R12
   \   000000DA   0xDA26             BGE.N    ??SPI4_IRQHandler_3
    588                         {
    589                              /*-------------------------------------------------------------------------------------------------------------                                             
    590                              Sequence  Record Data                     Processing Data                 Player Data
    591                                                
    592                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    593                                                
    594                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    595                                                
    596                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    597                               ---------------------------------------------------------------------------------------------------------------*/                 
    598                                /* Recording Audio Data */			             
    599                               switch (buffer_switch)
   \   000000DC   0x.... 0x....      LDR.W    R3,??DataTable16_3
   \   000000E0   0x781B             LDRB     R3,[R3, #+0]
   \   000000E2   0xB11B             CBZ.N    R3,??SPI4_IRQHandler_9
   \   000000E4   0x2B02             CMP      R3,#+2
   \   000000E6   0xD015             BEQ.N    ??SPI4_IRQHandler_10
   \   000000E8   0xD30A             BCC.N    ??SPI4_IRQHandler_11
   \   000000EA   0xE01E             B.N      ??SPI4_IRQHandler_3
    600                               {
    601                                   case BUF1_PLAY:
    602                                       Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_9: (+1)
   \   000000EC   0x8813             LDRH     R3,[R2, #+0]
   \   000000EE   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000F2   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000000F6   0x.... 0x....      LDR.W    R2,??DataTable16_4  ;; 0xc00080a0
   \   000000FA   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000FE   0xE011             B.N      ??SPI4_IRQHandler_12
    603           
    604                                       break;
    605                                   case BUF2_PLAY:
    606                                       Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_11: (+1)
   \   00000100   0x8813             LDRH     R3,[R2, #+0]
   \   00000102   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000106   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000010A   0x.... 0x....      LDR.W    R2,??DataTable20  ;; 0xc0010140
   \   0000010E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000112   0xE007             B.N      ??SPI4_IRQHandler_12
    607                 
    608                                       break;
    609                                   case BUF3_PLAY:
    610                                       Buffer1.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_10: (+1)
   \   00000114   0x8813             LDRH     R3,[R2, #+0]
   \   00000116   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000011A   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000011E   0x005A             LSLS     R2,R3,#+1
   \   00000120   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \                     ??SPI4_IRQHandler_12: (+1)
   \   00000124   0xF245 0x0364      MOVW     R3,#+20580
   \                     ??SPI4_IRQHandler_7: (+1)
   \   00000128   0x5299             STRH     R1,[R3, R2]
    611           
    612                                       break;                          
    613                                   default:
    614                                       break;
    615                               }
    616                         }
    617                    }		
    618          	}
    619          #if 0
    620          	/* The code to store data in to buffer for testing purpose */
    621          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
    622          	{
    623          		TestSDO56[iSDO56++]=test;
    624          	}
    625          	else
    626          	{
    627          		iSDO56=0;
    628          	}
    629          #endif
    630          
    631          	/* Update Old value */	  
    632          	Main_stLROld=I2S2_stLR;	  
   \                     ??SPI4_IRQHandler_3: (+1)
   \   0000012A   0xF890 0x11B6      LDRB     R1,[R0, #+438]
   \   0000012E   0xF880 0x11B9      STRB     R1,[R0, #+441]
    633               
    634            }      
    635          }
   \                     ??SPI4_IRQHandler_0: (+1)
   \   00000132   0x4770             BX       LR               ;; return
   \   00000134                      REQUIRE Buffer2
   \   00000134                      REQUIRE Buffer3
   \   00000134                      REQUIRE Buffer1
    636          
    637          
    638          
    639          

   \                                 In section .text, align 2, keep-with-next
    640          void SPI5_IRQHandler(void)
    641          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    642            //static uint16_t stNipple;
    643            //static uint8_t stLR, stOder;
    644          
    645            /* USER CODE BEGIN SPI5_IRQn 0 */
    646          
    647            /* USER CODE END SPI5_IRQn 0 */
    648            //HAL_SPI_IRQHandler(&hspi5);
    649            /* USER CODE BEGIN SPI5_IRQn 1 */
    650          
    651            /* USER CODE END SPI5_IRQn 1 */
    652              /* Check if data are available in SPI Data register */
    653            /* SPI in mode Receiver ----------------------------------------------------*/
    654            if(
    655               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    656               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    657               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable16_1
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xD439             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD536             BPL.N    ??SPI5_IRQHandler_0
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD533             BPL.N    ??SPI5_IRQHandler_0
    658            {
    659          
    660          
    661             uint16_t test;
    662             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable20_1  ;; 0x4001500c
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
    663             //SPI5->DR = 3333;
    664          
    665            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000020   0xF8B4 0x11BA      LDRH     R1,[R4, #+442]
   \   00000024   0xB282             UXTH     R2,R0
   \   00000026   0x0200             LSLS     R0,R0,#+8
   \   00000028   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   0000002C   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   00000030   0xF8A2 0x01DC      STRH     R0,[R2, #+476]
   \   00000034   0x1C48             ADDS     R0,R1,#+1
   \   00000036   0xF8A4 0x01BA      STRH     R0,[R4, #+442]
    666            
    667            //volume = 64;
    668            
    669            if (idxMic8>=64)
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0x2840             CMP      R0,#+64
   \   0000003E   0xDB20             BLT.N    ??SPI5_IRQHandler_0
    670            {
    671          	if (buffer_switch != 1)
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable16_3
   \   00000044   0xF8D4 0x01D8      LDR      R0,[R4, #+472]
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable20_2
   \   0000004C   0xF504 0x73A4      ADD      R3,R4,#+328
   \   00000050   0x7812             LDRB     R2,[R2, #+0]
   \   00000052   0x780A             LDRB     R2,[R1, #+0]
   \   00000054   0xF8B4 0x11C0      LDRH     R1,[R4, #+448]
   \   00000058   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   0000005C   0xF504 0x70EE      ADD      R0,R4,#+476
    672          	{
    673          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    674          						  (PDMFilter_InitStruct *)&Filter[0]);
    675          	}
    676          	else
    677          	{
    678          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    679          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \   00000060   0x.... 0x....      BL       PDM_Filter_64_LSB
    680          	}
    681          	idxMic8=0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xF8A4 0x01BA      STRH     R0,[R4, #+442]
    682          	cntPos++;
   \   0000006A   0xF8B4 0x01C0      LDRH     R0,[R4, #+448]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0xF8A4 0x01C0      STRH     R0,[R4, #+448]
    683          	if (cntPos>=256) cntPos=0;
   \   00000074   0xF8B4 0x01C0      LDRH     R0,[R4, #+448]
   \   00000078   0x28FF             CMP      R0,#+255
   \   0000007A   0xBFC4             ITT      GT 
   \   0000007C   0x2000             MOVGT    R0,#+0
   \   0000007E   0xF8A4 0x01C0      STRHGT   R0,[R4, #+448]
    684            }
    685              
    686            }
    687            
    688          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   00000082   0xBD10             POP      {R4,PC}          ;; return
    689          
    690          /* SPI5 init function */
    691          
    692          

   \                                 In section .text, align 2, keep-with-next
    693          void SPI6_IRQHandler(void)
    694          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    695            /* SPI in mode Receiver ----------------------------------------------------*/
    696            if(
    697          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    698               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    699               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable16_1
   \   00000006   0x6E60             LDR      R0,[R4, #+100]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0789             LSLS     R1,R1,#+30
   \   0000000C   0xD536             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD533             BPL.N    ??SPI6_IRQHandler_0
    700            {
    701          
    702          
    703               uint16_t test;
    704               test =  SPI_I2S_ReceiveData(SPI6);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable20_3  ;; 0x4001540c
   \   00000018   0x6800             LDR      R0,[R0, #+0]
    705               //SPI6->DR = 3333;
    706          
    707              pDataMic7[idxMic7++] =	HTONS(test);
   \   0000001A   0xF8B4 0x11BC      LDRH     R1,[R4, #+444]
   \   0000001E   0xB282             UXTH     R2,R0
   \   00000020   0x0200             LSLS     R0,R0,#+8
   \   00000022   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000026   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   0000002A   0xF8A2 0x025C      STRH     R0,[R2, #+604]
   \   0000002E   0x1C48             ADDS     R0,R1,#+1
   \   00000030   0xF8A4 0x01BC      STRH     R0,[R4, #+444]
    708          
    709              //volume = 64;
    710          
    711              if (idxMic7>=64)
   \   00000034   0xB280             UXTH     R0,R0
   \   00000036   0x2840             CMP      R0,#+64
   \   00000038   0xDB20             BLT.N    ??SPI6_IRQHandler_0
    712              {
    713                if (buffer_switch != 1)
   \   0000003A   0x.... 0x....      LDR.W    R2,??DataTable16_3
   \   0000003E   0xF8D4 0x01D4      LDR      R0,[R4, #+468]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable20_2
   \   00000046   0xF504 0x73BE      ADD      R3,R4,#+380
   \   0000004A   0x7812             LDRB     R2,[R2, #+0]
   \   0000004C   0x780A             LDRB     R2,[R1, #+0]
   \   0000004E   0xF8B4 0x11C2      LDRH     R1,[R4, #+450]
   \   00000052   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   00000056   0xF504 0x7017      ADD      R0,R4,#+604
    714                {
    715                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    716                                                          (PDMFilter_InitStruct *)&Filter[1]);
    717                }
    718                else
    719                {
    720                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    721                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \   0000005A   0x.... 0x....      BL       PDM_Filter_64_LSB
    722                }
    723                idxMic7=0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF8A4 0x01BC      STRH     R0,[R4, #+444]
    724                cntPos7++;
   \   00000064   0xF8B4 0x01C2      LDRH     R0,[R4, #+450]
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0xF8A4 0x01C2      STRH     R0,[R4, #+450]
    725                if (cntPos7>=256) cntPos7=0;
   \   0000006E   0xF8B4 0x01C2      LDRH     R0,[R4, #+450]
   \   00000072   0x28FF             CMP      R0,#+255
   \   00000074   0xBFC4             ITT      GT 
   \   00000076   0x2000             MOVGT    R0,#+0
   \   00000078   0xF8A4 0x01C2      STRHGT   R0,[R4, #+450]
    726              }
    727              
    728            }
    729          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   0000007C   0xBD10             POP      {R4,PC}          ;; return
    730          
    731          
    732          

   \                                 In section .text, align 2, keep-with-next
    733          void MIC1TO6_Init(void)
    734          {
   \                     MIC1TO6_Init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    735            SPI5_Init();
   \   00000002   0x.... 0x....      BL       SPI5_Init
    736            SPI6_Init();
   \   00000006   0x.... 0x....      BL       SPI6_Init
    737            StartRecMic7_8();
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable16_1
   \   0000000E   0xF44F 0x5280      MOV      R2,#+4096
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   \   0000001C   0xF44F 0x5280      MOV      R2,#+4096
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable20_5
   \   00000024   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000028   0xF44F 0x7580      MOV      R5,#+256
   \   0000002C   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   \   00000030   0x2000             MOVS     R0,#+0
    738            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    739            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    740            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    741            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    742            //HAL_Delay(2);
    743          
    744          
    745            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    746            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    747            I2S1_Init(); /* I2S1   --> SDO12 */
   \   00000032   0xF44F 0x567A      MOV      R6,#+16000
   \   00000036   0xF884 0x01B1      STRB     R0,[R4, #+433]
   \   0000003A   0xF884 0x01B2      STRB     R0,[R4, #+434]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable20_6  ;; 0x40013000
   \   00000042   0xF8C4 0x00C8      STR      R0,[R4, #+200]
   \   00000046   0x2020             MOVS     R0,#+32
   \   00000048   0xF8C4 0x00D0      STR      R0,[R4, #+208]
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xF8C4 0x00D4      STR      R0,[R4, #+212]
   \   00000052   0xF8C4 0x00D8      STR      R0,[R4, #+216]
   \   00000056   0xF8C4 0x00E0      STR      R0,[R4, #+224]
   \   0000005A   0x2002             MOVS     R0,#+2
   \   0000005C   0xF8C4 0x00E4      STR      R0,[R4, #+228]
   \   00000060   0xF104 0x00C8      ADD      R0,R4,#+200
   \   00000064   0xF8C4 0x50CC      STR      R5,[R4, #+204]
   \   00000068   0xF8C4 0x60DC      STR      R6,[R4, #+220]
   \   0000006C   0x.... 0x....      BL       HAL_I2S_Init
   \   00000070   0xF8D4 0x00C8      LDR      R0,[R4, #+200]
   \   00000074   0x6841             LDR      R1,[R0, #+4]
   \   00000076   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000007A   0x6041             STR      R1,[R0, #+4]
   \   0000007C   0x69C1             LDR      R1,[R0, #+28]
   \   0000007E   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000082   0x61C1             STR      R1,[R0, #+28]
    748            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    749            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    750            I2S2_Init(); /* I2S2   --> SDO34 */
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable20_7  ;; 0x40003800
   \   00000088   0xF8C4 0x0108      STR      R0,[R4, #+264]
   \   0000008C   0x2020             MOVS     R0,#+32
   \   0000008E   0xF8C4 0x0110      STR      R0,[R4, #+272]
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0xF8C4 0x0114      STR      R0,[R4, #+276]
   \   00000098   0xF8C4 0x0118      STR      R0,[R4, #+280]
   \   0000009C   0xF8C4 0x0120      STR      R0,[R4, #+288]
   \   000000A0   0x2002             MOVS     R0,#+2
   \   000000A2   0xF8C4 0x0124      STR      R0,[R4, #+292]
   \   000000A6   0xF504 0x7084      ADD      R0,R4,#+264
   \   000000AA   0xF8C4 0x510C      STR      R5,[R4, #+268]
   \   000000AE   0xF8C4 0x611C      STR      R6,[R4, #+284]
   \   000000B2   0x.... 0x....      BL       HAL_I2S_Init
   \   000000B6   0xF8D4 0x0108      LDR      R0,[R4, #+264]
   \   000000BA   0x6841             LDR      R1,[R0, #+4]
   \   000000BC   0xF041 0x0140      ORR      R1,R1,#0x40
   \   000000C0   0x6041             STR      R1,[R0, #+4]
   \   000000C2   0x69C1             LDR      R1,[R0, #+28]
   \   000000C4   0xF441 0x6180      ORR      R1,R1,#0x400
   \   000000C8   0x61C1             STR      R1,[R0, #+28]
    751            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    752            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    753            SPI4_Init(); /* SPI4   --> SDO56 */
   \   000000CA   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000CE   0x....             B.N      SPI4_Init
    754          
    755          
    756          }
    757          

   \                                 In section .text, align 2, keep-with-next
    758          void StartRecMic7_8 (void)
    759          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    760          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable16_1
   \   00000006   0xF44F 0x5280      MOV      R2,#+4096
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    761          #if (0)
    762          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
    763          #else
    764          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000014   0xF44F 0x5280      MOV      R2,#+4096
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable20_5
   \   0000001C   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000020   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    765          #endif
    766          	  swtSDO7 = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF884 0x01B1      STRB     R0,[R4, #+433]
    767          	  swtSDO8 = 0;
   \   0000002A   0xF884 0x01B2      STRB     R0,[R4, #+434]
    768          
    769          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    770          
    771          /* I2S1 init function */
    772          /* Read data of MIC12 */
    773          static void I2S1_Init(void)
    774          {
    775          #if 1
    776            hi2s1.Instance = SPI1;
    777            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
    778            hi2s1.Init.Standard = I2S_STANDARD_LSB;
    779            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    780            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    781            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    782            hi2s1.Init.CPOL = I2S_CPOL_LOW;
    783            hi2s1.Init.ClockSource = I2S_CLOCK_SYSCLK;
    784            HAL_I2S_Init(&hi2s1);
    785          
    786            /* Enable TXE and ERR interrupt */
    787           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
    788           
    789           __HAL_I2S_ENABLE(&hi2s1);
    790          #else
    791          	hspi1.Instance = SPI1;
    792          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    793          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    794          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    795          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    796          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    797          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    798          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    799          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    800          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    801          	hspi1.Init.CRCPolynomial = 7;
    802          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    803          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    804          	//hspi4.RxISR = SPI5_CallBack;
    805          	HAL_SPI_Init(&hspi1);
    806          
    807          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    808            /* Enable TXE, RXNE and ERR interrupt */
    809           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    810          
    811           __HAL_SPI_ENABLE(&hspi1);
    812          
    813          #endif
    814          }
    815          
    816          /* I2S2 init function */
    817          /* Read data of MIC34 */
    818          
    819          static void I2S2_Init(void)
    820          {
    821          
    822          #if 1
    823           //HAL_I2S_DeInit(&hi2s2);
    824           hi2s2.Instance = SPI2;
    825           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
    826           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
    827           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
    828           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    829           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    830           hi2s2.Init.CPOL = I2S_CPOL_LOW;
    831           hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
    832          
    833           HAL_I2S_Init(&hi2s2);
    834           /* Enable TXE and ERR interrupt */
    835           __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
    836           __HAL_I2S_ENABLE(&hi2s2);
    837          
    838          #else
    839             hspi2.Instance = SPI2;
    840             hspi2.Init.Mode = SPI_MODE_SLAVE;
    841             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    842             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
    843             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
    844             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
    845             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    846             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
    847             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
    848             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    849             hspi2.Init.CRCPolynomial = 7;
    850             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    851             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    852             HAL_SPI_Init(&hspi2);
    853          
    854          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    855           /* Enable TXE, RXNE and ERR interrupt */
    856          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
    857          
    858          __HAL_SPI_ENABLE(&hspi2);
    859          
    860          #endif
    861          
    862          
    863          }
    864          
    865          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    866          void SPI4_Init(void)
    867          {
   \                     SPI4_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    868          
    869            hspi4.Instance = SPI4;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_6
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable20_8  ;; 0x40013400
   \   0000000A   0x6020             STR      R0,[R4, #+0]
    870            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6060             STR      R0,[R4, #+4]
    871            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000010   0xF44F 0x6080      MOV      R0,#+1024
   \   00000014   0x60A0             STR      R0,[R4, #+8]
    872            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000016   0xF44F 0x6070      MOV      R0,#+3840
   \   0000001A   0x60E0             STR      R0,[R4, #+12]
    873            hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x6120             STR      R0,[R4, #+16]
    874            hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6160             STR      R0,[R4, #+20]
    875            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000024   0xF44F 0x7000      MOV      R0,#+512
   \   00000028   0x61A0             STR      R0,[R4, #+24]
    876            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x6220             STR      R0,[R4, #+32]
    877            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0x6260             STR      R0,[R4, #+36]
    878            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000030   0x62A0             STR      R0,[R4, #+40]
    879            hspi4.Init.CRCPolynomial = 7;
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0x62E0             STR      R0,[R4, #+44]
    880            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x6320             STR      R0,[R4, #+48]
    881            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000003A   0x6360             STR      R0,[R4, #+52]
    882            HAL_SPI_Init(&hspi4);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       HAL_SPI_Init
    883          
    884            /* Enable TXE, RXNE and ERR interrupt */
    885           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x6841             LDR      R1,[R0, #+4]
   \   00000046   0xF041 0x0160      ORR      R1,R1,#0x60
   \   0000004A   0x6041             STR      R1,[R0, #+4]
    886          
    887           __HAL_SPI_ENABLE(&hspi4);
   \   0000004C   0x6801             LDR      R1,[R0, #+0]
   \   0000004E   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000052   0x6001             STR      R1,[R0, #+0]
    888          }
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
    889          
    890          

   \                                 In section .text, align 2, keep-with-next
    891          void Mic7Rec(void)
    892          {
    893              SPI5_Init();
   \                     Mic7Rec: (+1)
   \   00000000   0x....             B.N      SPI5_Init
    894          }
    895          

   \                                 In section .text, align 2, keep-with-next
    896          void Mic8Rec(void)
    897          {
    898              SPI6_Init();
   \                     Mic8Rec: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable20_9  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6781             STR      R1,[R0, #+120]
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x67C1             STR      R1,[R0, #+124]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF8C0 0x1084      STR      R1,[R0, #+132]
   \   0000002E   0xF8C0 0x1088      STR      R1,[R0, #+136]
   \   00000032   0xF8C0 0x108C      STR      R1,[R0, #+140]
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0xF8C0 0x1090      STR      R1,[R0, #+144]
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF8C0 0x1094      STR      R1,[R0, #+148]
   \   00000042   0xF8C0 0x1098      STR      R1,[R0, #+152]
   \   00000046   0x3064             ADDS     R0,R0,#+100
   \   00000048   0x.... 0x....      B.W      HAL_SPI_Init
    899          }
    900          
    901          
    902          /* SPI5 init function */

   \                                 In section .text, align 4, keep-with-next
    903          void SPI5_Init(void)
    904          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    905          	
    906              /* Enable CRC module */
    907              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40023830
    908          	for (char i=0; i< 2; i++)
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable16_1
   \   0000000C   0x2602             MOVS     R6,#+2
   \   0000000E   0xED2D 0x8B02      VPUSH    {D8}
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xF504 0x75A4      ADD      R5,R4,#+328
   \   00000018   0xF44F 0x577A      MOV      R7,#+16000
   \   0000001C   0xEEB2 0x8A04      VMOV.F32 S16,#10.0
   \   00000020   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000024   0xEDDF 0x....      VLDR.W   S17,??DataTable12  ;; 0x45fa0000
   \   00000028   0xF8C0 0x1000      STR.W    R1,[R0, #+0]
    909          	{
    910          		/* Filter LP & HP Init */
    911          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \                     ??SPI5_Init_0: (+1)
   \   0000002C   0xEDC5 0x8A01      VSTR     S17,[R5, #+4]
    912          		Filter[i].HP_HZ = 10;
    913          		Filter[i].Fs = 16000;    //sop1hc: 16000
    914          		Filter[i].Out_MicChannels = 1;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xED85 0x8A02      VSTR     S16,[R5, #+8]
   \   00000036   0x802F             STRH     R7,[R5, #+0]
   \   00000038   0x81E8             STRH     R0,[R5, #+14]
    915          		Filter[i].In_MicChannels = 1;
   \   0000003A   0x81A8             STRH     R0,[R5, #+12]
    916          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   0000003C   0x4628             MOV      R0,R5
   \   0000003E   0x.... 0x....      BL       PDM_Filter_Init
    917          	}
   \   00000042   0x3534             ADDS     R5,R5,#+52
   \   00000044   0x1E76             SUBS     R6,R6,#+1
   \   00000046   0xD1F1             BNE.N    ??SPI5_Init_0
    918          
    919          
    920            hspi5.Instance = SPI5;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable20_10  ;; 0x40015000
   \   0000004C   0x6020             STR      R0,[R4, #+0]
    921            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x6060             STR      R0,[R4, #+4]
    922            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000052   0xF44F 0x6080      MOV      R0,#+1024
   \   00000056   0x60A0             STR      R0,[R4, #+8]
    923            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000058   0xF44F 0x6070      MOV      R0,#+3840
   \   0000005C   0x60E0             STR      R0,[R4, #+12]
    924            hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0x6120             STR      R0,[R4, #+16]
    925            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x6160             STR      R0,[R4, #+20]
    926            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000066   0xF44F 0x7000      MOV      R0,#+512
   \   0000006A   0x61A0             STR      R0,[R4, #+24]
    927            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x6220             STR      R0,[R4, #+32]
    928            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   00000070   0x6260             STR      R0,[R4, #+36]
    929            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000072   0x62A0             STR      R0,[R4, #+40]
    930            hspi5.Init.CRCPolynomial = 7;
   \   00000074   0x2007             MOVS     R0,#+7
   \   00000076   0x62E0             STR      R0,[R4, #+44]
    931            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x6320             STR      R0,[R4, #+48]
    932            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000007C   0x6360             STR      R0,[R4, #+52]
    933            //hspi5.RxISR = SPI5_CallBack;
    934            HAL_SPI_Init(&hspi5);
   \   0000007E   0x4620             MOV      R0,R4
   \   00000080   0xECBD 0x8B02      VPOP     {D8}
   \   00000084   0xB001             ADD      SP,SP,#+4
   \   00000086   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   0000008A   0x.... 0x....      B.W      HAL_SPI_Init
    935          
    936          
    937            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    938            /* Enable TXE, RXNE and ERR interrupt */
    939           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
    940          
    941           //__HAL_SPI_ENABLE(&hspi5);
    942          
    943          }
    944          

   \                                 In section .text, align 2, keep-with-next
    945          void SPI6_Init(void)
    946          {
    947          	
    948            hspi6.Instance = SPI6;
   \                     SPI6_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable20_9  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
    949            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
    950            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
    951            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
    952            hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6741             STR      R1,[R0, #+116]
    953            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6781             STR      R1,[R0, #+120]
    954            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x67C1             STR      R1,[R0, #+124]
    955            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF8C0 0x1084      STR      R1,[R0, #+132]
    956            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0xF8C0 0x1088      STR      R1,[R0, #+136]
    957            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000032   0xF8C0 0x108C      STR      R1,[R0, #+140]
    958            hspi6.Init.CRCPolynomial = 7;
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0xF8C0 0x1090      STR      R1,[R0, #+144]
    959            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF8C0 0x1094      STR      R1,[R0, #+148]
    960            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000042   0xF8C0 0x1098      STR      R1,[R0, #+152]
    961            //hspi6.RxISR = SPI6_CallBack;
    962            HAL_SPI_Init(&hspi6);
   \   00000046   0x3064             ADDS     R0,R0,#+100
   \   00000048   0x.... 0x....      B.W      HAL_SPI_Init
    963          
    964          
    965            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    966            /* Enable TXE, RXNE and ERR interrupt */
    967           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
    968          
    969           //__HAL_SPI_ENABLE(&hspi6);
    970          
    971          }
    972          
    973          
    974          
    975          

   \                                 In section .text, align 2, keep-with-next
    976          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
    977          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
    978          
    979            GPIO_InitTypeDef GPIO_InitStruct;
    980            if (hspi->Instance==SPI1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable20_6  ;; 0x40013000
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD131             BNE.N    ??HAL_SPI_MspInit_0
    981            {
    982          	  /* USER CODE BEGIN SPI1_MspInit 0 */
    983          	  
    984          	  /* USER CODE END SPI1_MspInit 0 */
    985          	  /* Peripheral clock enable */
    986          	  __SPI1_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable13  ;; 0x40023830
    987          	  __GPIOA_CLK_ENABLE();
    988          	  __GPIOC_CLK_ENABLE();
    989          	  
    990          	  /**I2S1 GPIO Configuration	
    991          		PA4 	------> I2S1_WS --> LRCKO
    992          		PA5 	------> I2S1_CK --> BICKO
    993          		PA7 	------> I2S1_SD --> SDO12
    994          		PC4 	------> I2S1_MCK
    995          		*/
    996          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    997          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    998          		GPIO_InitStruct.Pull = GPIO_NOPULL;
    999          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1000          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1001          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000014   0xA901             ADD      R1,SP,#+4
   \   00000016   0x6968             LDR      R0,[R5, #+20]
   \   00000018   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   0000001C   0x6168             STR      R0,[R5, #+20]
   \   0000001E   0x6968             LDR      R0,[R5, #+20]
   \   00000020   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x6828             LDR      R0,[R5, #+0]
   \   0000002A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000002E   0x6028             STR      R0,[R5, #+0]
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x6828             LDR      R0,[R5, #+0]
   \   0000003C   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000040   0x6028             STR      R0,[R5, #+0]
   \   00000042   0x6828             LDR      R0,[R5, #+0]
   \   00000044   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   \   0000004C   0x20F0             MOVS     R0,#+240
   \   0000004E   0x9001             STR      R0,[SP, #+4]
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x9002             STR      R0,[SP, #+8]
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x9003             STR      R0,[SP, #+12]
   \   00000058   0x2003             MOVS     R0,#+3
   \   0000005A   0x9004             STR      R0,[SP, #+16]
   \   0000005C   0x2005             MOVS     R0,#+5
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40020000
   \   00000062   0x.... 0x....      BL       HAL_GPIO_Init
   1002          	  
   1003          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
   1004          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1005          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
   1006          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1007          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1008          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1009          		
   1010          	  /* Peripheral interrupt init*/
   1011          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x2023             MOVS     R0,#+35
   \   0000006C   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1012          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000070   0x2023             MOVS     R0,#+35
   \   00000072   0xE1CA             B.N      ??HAL_SPI_MspInit_1
   1013          	  /* USER CODE BEGIN SPI1_MspInit 1 */
   1014          	  
   1015          	  /* USER CODE END SPI1_MspInit 1 */
   1016          
   1017            }
   1018            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable20_7  ;; 0x40003800
   \   00000078   0x4288             CMP      R0,R1
   \   0000007A   0xD149             BNE.N    ??HAL_SPI_MspInit_2
   1019            {
   1020          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1021          	  
   1022          	  /* USER CODE END SPI2_MspInit 0 */
   1023          		/* Peripheral clock enable */
   1024          		__SPI2_CLK_ENABLE();
   \   0000007C   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   1025          		__GPIOI_CLK_ENABLE();
   1026          		__GPIOB_CLK_ENABLE();
   1027          		__GPIOC_CLK_ENABLE();
   1028          	  
   1029          		/**I2S2 GPIO Configuration	   
   1030          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1031          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1032          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1033          	  
   1034          	  
   1035          		*/
   1036          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   1037          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1038          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1039          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1040          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1041          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   0000007E   0xA901             ADD      R1,SP,#+4
   \   00000080   0x6928             LDR      R0,[R5, #+16]
   \   00000082   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   00000086   0x6128             STR      R0,[R5, #+16]
   \   00000088   0x6928             LDR      R0,[R5, #+16]
   \   0000008A   0xF400 0x4080      AND      R0,R0,#0x4000
   \   0000008E   0x9000             STR      R0,[SP, #+0]
   \   00000090   0x9800             LDR      R0,[SP, #+0]
   \   00000092   0x6828             LDR      R0,[R5, #+0]
   \   00000094   0xF440 0x7080      ORR      R0,R0,#0x100
   \   00000098   0x6028             STR      R0,[R5, #+0]
   \   0000009A   0x6828             LDR      R0,[R5, #+0]
   \   0000009C   0xF400 0x7080      AND      R0,R0,#0x100
   \   000000A0   0x9000             STR      R0,[SP, #+0]
   \   000000A2   0x9800             LDR      R0,[SP, #+0]
   \   000000A4   0x6828             LDR      R0,[R5, #+0]
   \   000000A6   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000AA   0x6028             STR      R0,[R5, #+0]
   \   000000AC   0x6828             LDR      R0,[R5, #+0]
   \   000000AE   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000B2   0x9000             STR      R0,[SP, #+0]
   \   000000B4   0x9800             LDR      R0,[SP, #+0]
   \   000000B6   0x6828             LDR      R0,[R5, #+0]
   \   000000B8   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000BC   0x6028             STR      R0,[R5, #+0]
   \   000000BE   0x6828             LDR      R0,[R5, #+0]
   \   000000C0   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000C4   0x9000             STR      R0,[SP, #+0]
   \   000000C6   0x9800             LDR      R0,[SP, #+0]
   \   000000C8   0x2002             MOVS     R0,#+2
   \   000000CA   0x9001             STR      R0,[SP, #+4]
   \   000000CC   0x9002             STR      R0,[SP, #+8]
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x9003             STR      R0,[SP, #+12]
   \   000000D2   0x2003             MOVS     R0,#+3
   \   000000D4   0x9004             STR      R0,[SP, #+16]
   \   000000D6   0x2005             MOVS     R0,#+5
   \   000000D8   0x9005             STR      R0,[SP, #+20]
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable20_11  ;; 0x40020800
   \   000000DE   0x.... 0x....      BL       HAL_GPIO_Init
   1042          	  
   1043          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   000000E2   0xF44F 0x5040      MOV      R0,#+12288
   1044          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1045          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1046          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1047          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1048          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   000000E6   0xA901             ADD      R1,SP,#+4
   \   000000E8   0x9001             STR      R0,[SP, #+4]
   \   000000EA   0x2002             MOVS     R0,#+2
   \   000000EC   0x9002             STR      R0,[SP, #+8]
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x9003             STR      R0,[SP, #+12]
   \   000000F2   0x2003             MOVS     R0,#+3
   \   000000F4   0x9004             STR      R0,[SP, #+16]
   \   000000F6   0x2005             MOVS     R0,#+5
   \   000000F8   0x9005             STR      R0,[SP, #+20]
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable20_12  ;; 0x40020400
   \   000000FE   0x.... 0x....      BL       HAL_GPIO_Init
   1049          	  
   1050          	  
   1051          		/* Peripheral interrupt init*/
   1052          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   00000102   0x2200             MOVS     R2,#+0
   \   00000104   0x2101             MOVS     R1,#+1
   \   00000106   0x2024             MOVS     R0,#+36
   \   00000108   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1053          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   0000010C   0x2024             MOVS     R0,#+36
   \   0000010E   0xE17C             B.N      ??HAL_SPI_MspInit_1
   1054          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1055          	  
   1056          	  /* USER CODE END SPI2_MspInit 1 */
   1057          
   1058          
   1059            }
   1060            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable20_13  ;; 0x40003c00
   \   00000114   0x4288             CMP      R0,R1
   \   00000116   0xF040 0x808E      BNE.W    ??HAL_SPI_MspInit_3
   1061            {
   1062          	  
   1063              /**I2S3 GPIO Configuration    
   1064                 PB2     ------> I2S3_SD
   1065                 PA15     ------> I2S3_WS (LRCK)
   1066                 PB3     ------> I2S3_CK 
   1067          	   PC7    ------> MCLK
   1068              */
   1069           
   1070            /* USER CODE BEGIN SPI3_MspInit 1 */
   1071            __SPI3_CLK_ENABLE();
   \   0000011A   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   1072            __GPIOA_CLK_ENABLE();
   1073            __GPIOB_CLK_ENABLE();
   1074          
   1075            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   1076            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1077            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1078            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1079            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1080            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   0000011C   0xA901             ADD      R1,SP,#+4
   \   0000011E   0x6928             LDR      R0,[R5, #+16]
   \   00000120   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   00000124   0x6128             STR      R0,[R5, #+16]
   \   00000126   0x6928             LDR      R0,[R5, #+16]
   \   00000128   0xF400 0x4000      AND      R0,R0,#0x8000
   \   0000012C   0x9000             STR      R0,[SP, #+0]
   \   0000012E   0x9800             LDR      R0,[SP, #+0]
   \   00000130   0x6828             LDR      R0,[R5, #+0]
   \   00000132   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000136   0x6028             STR      R0,[R5, #+0]
   \   00000138   0x6828             LDR      R0,[R5, #+0]
   \   0000013A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000013E   0x9000             STR      R0,[SP, #+0]
   \   00000140   0x9800             LDR      R0,[SP, #+0]
   \   00000142   0x6828             LDR      R0,[R5, #+0]
   \   00000144   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000148   0x6028             STR      R0,[R5, #+0]
   \   0000014A   0x6828             LDR      R0,[R5, #+0]
   \   0000014C   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000150   0x9000             STR      R0,[SP, #+0]
   \   00000152   0x9800             LDR      R0,[SP, #+0]
   \   00000154   0x200C             MOVS     R0,#+12
   \   00000156   0x9001             STR      R0,[SP, #+4]
   \   00000158   0x2002             MOVS     R0,#+2
   \   0000015A   0x9002             STR      R0,[SP, #+8]
   \   0000015C   0x2003             MOVS     R0,#+3
   \   0000015E   0x9004             STR      R0,[SP, #+16]
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0x9003             STR      R0,[SP, #+12]
   \   00000164   0x2006             MOVS     R0,#+6
   \   00000166   0x9005             STR      R0,[SP, #+20]
   \   00000168   0x.... 0x....      LDR.W    R0,??DataTable20_12  ;; 0x40020400
   \   0000016C   0x.... 0x....      BL       HAL_GPIO_Init
   1081          
   1082          
   1083            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   00000170   0xF44F 0x4000      MOV      R0,#+32768
   1084            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1085            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1086            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000174   0xA901             ADD      R1,SP,#+4
   \   00000176   0x9001             STR      R0,[SP, #+4]
   \   00000178   0x2002             MOVS     R0,#+2
   \   0000017A   0x9002             STR      R0,[SP, #+8]
   \   0000017C   0x2006             MOVS     R0,#+6
   \   0000017E   0x9005             STR      R0,[SP, #+20]
   \   00000180   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40020000
   \   00000182   0x.... 0x....      BL       HAL_GPIO_Init
   1087          
   1088          #ifdef CODEC_MCLK_ENABLED
   1089            __GPIOC_CLK_ENABLE();
   \   00000186   0x6828             LDR      R0,[R5, #+0]
   1090            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   1091            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1092            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1093            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1094            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1095            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000188   0xA901             ADD      R1,SP,#+4
   \   0000018A   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000018E   0x6028             STR      R0,[R5, #+0]
   \   00000190   0x6828             LDR      R0,[R5, #+0]
   \   00000192   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000196   0x9000             STR      R0,[SP, #+0]
   \   00000198   0x9800             LDR      R0,[SP, #+0]
   \   0000019A   0x2080             MOVS     R0,#+128
   \   0000019C   0x9001             STR      R0,[SP, #+4]
   \   0000019E   0x2002             MOVS     R0,#+2
   \   000001A0   0x9002             STR      R0,[SP, #+8]
   \   000001A2   0x2003             MOVS     R0,#+3
   \   000001A4   0x9004             STR      R0,[SP, #+16]
   \   000001A6   0x2000             MOVS     R0,#+0
   \   000001A8   0x9003             STR      R0,[SP, #+12]
   \   000001AA   0x2006             MOVS     R0,#+6
   \   000001AC   0x9005             STR      R0,[SP, #+20]
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable20_11  ;; 0x40020800
   \   000001B2   0x.... 0x....      BL       HAL_GPIO_Init
   1096          
   1097          #endif /* CODEC_MCLK_ENABLED */ 
   1098          
   1099          #ifdef I2S_INTERRUPT   
   1100               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1101               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1102               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1103          
   1104               /* Enable the I2S DMA request */
   1105               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1106               //__HAL_I2S_ENABLE(&hi2s3);
   1107            	    /* Peripheral interrupt init*/
   1108          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1109          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1110          #endif
   1111          
   1112                /* Enable the DMA clock */ 
   1113          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   000001B6   0x6828             LDR      R0,[R5, #+0]
   \   000001B8   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000001BC   0x6028             STR      R0,[R5, #+0]
   \   000001BE   0x6828             LDR      R0,[R5, #+0]
   1114          
   1115                /* Configure the DMA Stream */
   1116                //HAL_DMA_DeInit(&DmaHandle);
   1117          
   1118                /* Set the parameters to be configured */ 
   1119          	  DmaHandle.Instance = DMA1_Stream7;
   \   000001C0   0x.... 0x....      LDR.W    R5,??DataTable20_14
   \   000001C4   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000001C8   0x9000             STR      R0,[SP, #+0]
   \   000001CA   0x9800             LDR      R0,[SP, #+0]
   \   000001CC   0x.... 0x....      LDR.W    R0,??DataTable20_15  ;; 0x400260b8
   \   000001D0   0x6028             STR      R0,[R5, #+0]
   1120                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   000001D2   0x2000             MOVS     R0,#+0
   \   000001D4   0x6068             STR      R0,[R5, #+4]
   1121          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   000001D6   0x2040             MOVS     R0,#+64
   \   000001D8   0x60A8             STR      R0,[R5, #+8]
   1122          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x60E8             STR      R0,[R5, #+12]
   1123          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   000001DE   0xF44F 0x6080      MOV      R0,#+1024
   \   000001E2   0x6128             STR      R0,[R5, #+16]
   1124          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   000001E4   0xF44F 0x6000      MOV      R0,#+2048
   \   000001E8   0x6168             STR      R0,[R5, #+20]
   1125                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   000001EA   0xF44F 0x5000      MOV      R0,#+8192
   \   000001EE   0x61A8             STR      R0,[R5, #+24]
   1126          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   000001F0   0x2000             MOVS     R0,#+0
   \   000001F2   0x61E8             STR      R0,[R5, #+28]
   1127                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   000001F4   0xF44F 0x3000      MOV      R0,#+131072
   \   000001F8   0x6228             STR      R0,[R5, #+32]
   1128          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   000001FA   0x2004             MOVS     R0,#+4
   \   000001FC   0x6268             STR      R0,[R5, #+36]
   1129                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   000001FE   0x2003             MOVS     R0,#+3
   \   00000200   0x62A8             STR      R0,[R5, #+40]
   1130                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   00000202   0x2000             MOVS     R0,#+0
   \   00000204   0x62E8             STR      R0,[R5, #+44]
   1131                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   00000206   0x6328             STR      R0,[R5, #+48]
   1132                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1133                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1134                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1135                //DmaHandle.XferCpltCallback = &TC_Callback;
   1136           
   1137          
   1138                /* Associate the initialized DMA handle to the the SPI handle */
   1139                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   1140                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1141          
   1142          	   /* Deinitialize the Stream for new transfer */
   1143                 HAL_DMA_DeInit(&DmaHandle);
   \   00000208   0x4628             MOV      R0,R5
   \   0000020A   0x6565             STR      R5,[R4, #+84]
   \   0000020C   0x63AC             STR      R4,[R5, #+56]
   \   0000020E   0x.... 0x....      BL       HAL_DMA_DeInit
   1144                 /* Configure the DMA Stream */
   1145          	   HAL_DMA_Init(&DmaHandle);
   \   00000212   0x4628             MOV      R0,R5
   \   00000214   0x.... 0x....      BL       HAL_DMA_Init
   1146          
   1147                /* Set Interrupt Group Priority */
   1148                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   00000218   0x2200             MOVS     R2,#+0
   \   0000021A   0x2100             MOVS     R1,#+0
   \   0000021C   0x202F             MOVS     R0,#+47
   \   0000021E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1149                /* Enable the DMA STREAM global Interrupt */
   1150                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   00000222   0x202F             MOVS     R0,#+47
   \   00000224   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1151          
   1152          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000228   0x6828             LDR      R0,[R5, #+0]
   \   0000022A   0x6801             LDR      R1,[R0, #+0]
   \   0000022C   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000230   0x6001             STR      R1,[R0, #+0]
   1153          	    
   1154            }
   1155            else if(hspi->Instance==SPI4)
   1156            {
   1157            /* USER CODE BEGIN SPI4_MspInit 0 */
   1158          
   1159            /* USER CODE END SPI4_MspInit 0 */
   1160              /* Peripheral clock enable */
   1161              __SPI4_CLK_ENABLE();
   1162              __HAL_RCC_GPIOE_CLK_ENABLE();
   1163            
   1164            
   1165              /**SPI4 GPIO Configuration    
   1166              PE2     ------> SPI4_SCK
   1167              PE4     ------> SPI4_NSS
   1168              PE5     ------> SPI4_MISO
   1169              PE6     ------> SPI4_MOSI 
   1170              */
   1171              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   1172              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1173              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1174              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1175              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   1176              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   1177          
   1178          	/* Peripheral interrupt init*/
   1179              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   1180              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   1181          
   1182            /* USER CODE BEGIN SPI4_MspInit 1 */
   1183          
   1184            /* USER CODE END SPI4_MspInit 1 */
   1185            }
   1186            else if(hspi->Instance==SPI5)
   1187            {
   1188            /* USER CODE BEGIN SPI5_MspInit 0 */
   1189          
   1190            /* USER CODE END SPI5_MspInit 0 */
   1191              /* Peripheral clock enable */
   1192              __HAL_RCC_SPI5_CLK_ENABLE();
   1193              __HAL_RCC_GPIOF_CLK_ENABLE();
   1194            
   1195              /**SPI5 GPIO Configuration    
   1196              PF7     ------> SPI5_SCK  --> PF7
   1197              PF11     ------> SPI5_MOSI --> PF9
   1198                               SPI5_MISO --> PF8
   1199                                    NSS   -->  PF6
   1200              */
   1201              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   1202              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   1203              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1204              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1205              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   1206              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   1207          
   1208          #if 0
   1209            /* Peripheral interrupt init*/
   1210              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1211              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1212          
   1213          #else
   1214          	/* Peripheral DMA init*/
   1215              __HAL_RCC_DMA2_CLK_ENABLE();
   1216          	hdma_spi5_rx.Instance = DMA2_Stream5;
   1217          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   1218          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1219          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1220          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   1221          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1222          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   1223          	hdma_spi5_rx.Init.Mode = DMA_NORMAL;
   1224          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1225          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1226          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1227          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   1228          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   1229          	HAL_DMA_Init(&hdma_spi5_rx);
   1230          
   1231              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   1232          
   1233          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1234          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   1235          
   1236          #endif
   1237            /* USER CODE END SPI5_MspInit 1 */
   1238            }
   1239            else if(hspi->Instance==SPI6)
   1240            {
   1241            /* USER CODE BEGIN SPI6_MspInit 0 */
   1242          
   1243            /* USER CODE END SPI6_MspInit 0 */
   1244              /* Peripheral clock enable */
   1245              __SPI6_CLK_ENABLE();
   1246              __HAL_RCC_GPIOG_CLK_ENABLE();
   1247            
   1248              /**SPI6 GPIO Configuration    
   1249              PG13     ------> SPI6_SCK
   1250              PG14     ------> SPI6_MOSI 
   1251              */
   1252              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   1253              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1254              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1255              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1256              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   1257              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   1258          
   1259          #if 0
   1260          	  /* Peripheral interrupt init*/
   1261              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1262              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1263          #else
   1264          	/* Peripheral DMA init*/
   1265          	__HAL_RCC_DMA2_CLK_ENABLE();
   1266          	hdma_spi6_rx.Instance = DMA2_Stream6;
   1267          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   1268          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1269          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1270          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   1271          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1272          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1273          	hdma_spi6_rx.Init.Mode = DMA_NORMAL;
   1274          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1275          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1276          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1277          	hdma_spi6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   1278          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   1279          	HAL_DMA_Init(&hdma_spi6_rx);
   1280          
   1281          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   1282          
   1283          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1284          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   1285          
   1286          #endif
   1287            }
   1288          
   1289          }
   \   00000232   0xB007             ADD      SP,SP,#+28
   \   00000234   0xBD30             POP      {R4,R5,PC}
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   00000236   0x.... 0x....      LDR.W    R1,??DataTable20_8  ;; 0x40013400
   \   0000023A   0x4288             CMP      R0,R1
   \   0000023C   0xD127             BNE.N    ??HAL_SPI_MspInit_4
   \   0000023E   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   00000240   0xA901             ADD      R1,SP,#+4
   \   00000242   0x6968             LDR      R0,[R5, #+20]
   \   00000244   0xF440 0x5000      ORR      R0,R0,#0x2000
   \   00000248   0x6168             STR      R0,[R5, #+20]
   \   0000024A   0x6968             LDR      R0,[R5, #+20]
   \   0000024C   0xF400 0x5000      AND      R0,R0,#0x2000
   \   00000250   0x9000             STR      R0,[SP, #+0]
   \   00000252   0x9800             LDR      R0,[SP, #+0]
   \   00000254   0x6828             LDR      R0,[R5, #+0]
   \   00000256   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000025A   0x6028             STR      R0,[R5, #+0]
   \   0000025C   0x6828             LDR      R0,[R5, #+0]
   \   0000025E   0xF000 0x0010      AND      R0,R0,#0x10
   \   00000262   0x9000             STR      R0,[SP, #+0]
   \   00000264   0x9800             LDR      R0,[SP, #+0]
   \   00000266   0x2074             MOVS     R0,#+116
   \   00000268   0x9001             STR      R0,[SP, #+4]
   \   0000026A   0x2002             MOVS     R0,#+2
   \   0000026C   0x9002             STR      R0,[SP, #+8]
   \   0000026E   0x2000             MOVS     R0,#+0
   \   00000270   0x9003             STR      R0,[SP, #+12]
   \   00000272   0x2003             MOVS     R0,#+3
   \   00000274   0x9004             STR      R0,[SP, #+16]
   \   00000276   0x2005             MOVS     R0,#+5
   \   00000278   0x9005             STR      R0,[SP, #+20]
   \   0000027A   0x....             LDR.N    R0,??DataTable17  ;; 0x40021000
   \   0000027C   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000280   0x2200             MOVS     R2,#+0
   \   00000282   0x2102             MOVS     R1,#+2
   \   00000284   0x2054             MOVS     R0,#+84
   \   00000286   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   0000028A   0x2054             MOVS     R0,#+84
   \   0000028C   0xE0BD             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   0000028E   0x.... 0x....      LDR.W    R1,??DataTable20_10  ;; 0x40015000
   \   00000292   0x4288             CMP      R0,R1
   \   00000294   0xD159             BNE.N    ??HAL_SPI_MspInit_5
   \   00000296   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   00000298   0xA901             ADD      R1,SP,#+4
   \   0000029A   0x6968             LDR      R0,[R5, #+20]
   \   0000029C   0xF440 0x1080      ORR      R0,R0,#0x100000
   \   000002A0   0x6168             STR      R0,[R5, #+20]
   \   000002A2   0x6968             LDR      R0,[R5, #+20]
   \   000002A4   0xF400 0x1080      AND      R0,R0,#0x100000
   \   000002A8   0x9000             STR      R0,[SP, #+0]
   \   000002AA   0x9800             LDR      R0,[SP, #+0]
   \   000002AC   0x6828             LDR      R0,[R5, #+0]
   \   000002AE   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000002B2   0x6028             STR      R0,[R5, #+0]
   \   000002B4   0x6828             LDR      R0,[R5, #+0]
   \   000002B6   0xF000 0x0020      AND      R0,R0,#0x20
   \   000002BA   0x9000             STR      R0,[SP, #+0]
   \   000002BC   0x9800             LDR      R0,[SP, #+0]
   \   000002BE   0xF44F 0x7070      MOV      R0,#+960
   \   000002C2   0x9001             STR      R0,[SP, #+4]
   \   000002C4   0x2012             MOVS     R0,#+18
   \   000002C6   0x9002             STR      R0,[SP, #+8]
   \   000002C8   0x2001             MOVS     R0,#+1
   \   000002CA   0x9003             STR      R0,[SP, #+12]
   \   000002CC   0x2003             MOVS     R0,#+3
   \   000002CE   0x9004             STR      R0,[SP, #+16]
   \   000002D0   0x2005             MOVS     R0,#+5
   \   000002D2   0x9005             STR      R0,[SP, #+20]
   \   000002D4   0x.... 0x....      LDR.W    R0,??DataTable20_16  ;; 0x40021400
   \   000002D8   0x.... 0x....      BL       HAL_GPIO_Init
   \   000002DC   0x6828             LDR      R0,[R5, #+0]
   \   000002DE   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000002E2   0x6028             STR      R0,[R5, #+0]
   \   000002E4   0x6828             LDR      R0,[R5, #+0]
   \   000002E6   0x.... 0x....      LDR.W    R5,??DataTable20_17
   \   000002EA   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000002EE   0x9000             STR      R0,[SP, #+0]
   \   000002F0   0x9800             LDR      R0,[SP, #+0]
   \   000002F2   0x.... 0x....      LDR.W    R0,??DataTable20_15  ;; 0x400260b8
   \   000002F6   0xF500 0x7074      ADD      R0,R0,#+976
   \   000002FA   0x6028             STR      R0,[R5, #+0]
   \   000002FC   0xF04F 0x6060      MOV      R0,#+234881024
   \   00000300   0x6068             STR      R0,[R5, #+4]
   \   00000302   0x2000             MOVS     R0,#+0
   \   00000304   0x60A8             STR      R0,[R5, #+8]
   \   00000306   0x60E8             STR      R0,[R5, #+12]
   \   00000308   0xF44F 0x6080      MOV      R0,#+1024
   \   0000030C   0x6128             STR      R0,[R5, #+16]
   \   0000030E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000312   0x6168             STR      R0,[R5, #+20]
   \   00000314   0xF44F 0x5000      MOV      R0,#+8192
   \   00000318   0x61A8             STR      R0,[R5, #+24]
   \   0000031A   0x2000             MOVS     R0,#+0
   \   0000031C   0x61E8             STR      R0,[R5, #+28]
   \   0000031E   0xF44F 0x3000      MOV      R0,#+131072
   \   00000322   0x6228             STR      R0,[R5, #+32]
   \   00000324   0x2000             MOVS     R0,#+0
   \   00000326   0x6268             STR      R0,[R5, #+36]
   \   00000328   0x2003             MOVS     R0,#+3
   \   0000032A   0x62A8             STR      R0,[R5, #+40]
   \   0000032C   0x2000             MOVS     R0,#+0
   \   0000032E   0x62E8             STR      R0,[R5, #+44]
   \   00000330   0x6328             STR      R0,[R5, #+48]
   \   00000332   0x4628             MOV      R0,R5
   \   00000334   0x.... 0x....      BL       HAL_DMA_Init
   \   00000338   0x65A5             STR      R5,[R4, #+88]
   \   0000033A   0x2200             MOVS     R2,#+0
   \   0000033C   0x63AC             STR      R4,[R5, #+56]
   \   0000033E   0x2104             MOVS     R1,#+4
   \   00000340   0x2044             MOVS     R0,#+68
   \   00000342   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000346   0x2044             MOVS     R0,#+68
   \   00000348   0xE05F             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   0000034A   0x.... 0x....      LDR.W    R1,??DataTable20_9  ;; 0x40015400
   \   0000034E   0x4288             CMP      R0,R1
   \   00000350   0xD15D             BNE.N    ??HAL_SPI_MspInit_6
   \   00000352   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   00000354   0xA901             ADD      R1,SP,#+4
   \   00000356   0x6968             LDR      R0,[R5, #+20]
   \   00000358   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   0000035C   0x6168             STR      R0,[R5, #+20]
   \   0000035E   0x6968             LDR      R0,[R5, #+20]
   \   00000360   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000364   0x9000             STR      R0,[SP, #+0]
   \   00000366   0x9800             LDR      R0,[SP, #+0]
   \   00000368   0x6828             LDR      R0,[R5, #+0]
   \   0000036A   0xF040 0x0040      ORR      R0,R0,#0x40
   \   0000036E   0x6028             STR      R0,[R5, #+0]
   \   00000370   0x6828             LDR      R0,[R5, #+0]
   \   00000372   0xF000 0x0040      AND      R0,R0,#0x40
   \   00000376   0x9000             STR      R0,[SP, #+0]
   \   00000378   0x9800             LDR      R0,[SP, #+0]
   \   0000037A   0xF44F 0x40C0      MOV      R0,#+24576
   \   0000037E   0x9001             STR      R0,[SP, #+4]
   \   00000380   0x2002             MOVS     R0,#+2
   \   00000382   0x9002             STR      R0,[SP, #+8]
   \   00000384   0x2000             MOVS     R0,#+0
   \   00000386   0x9003             STR      R0,[SP, #+12]
   \   00000388   0x2003             MOVS     R0,#+3
   \   0000038A   0x9004             STR      R0,[SP, #+16]
   \   0000038C   0x2005             MOVS     R0,#+5
   \   0000038E   0x9005             STR      R0,[SP, #+20]
   \   00000390   0x.... 0x....      LDR.W    R0,??DataTable20_18  ;; 0x40021800
   \   00000394   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000398   0x6828             LDR      R0,[R5, #+0]
   \   0000039A   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   0000039E   0x6028             STR      R0,[R5, #+0]
   \   000003A0   0x6828             LDR      R0,[R5, #+0]
   \   000003A2   0x.... 0x....      LDR.W    R5,??DataTable20_17
   \   000003A6   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000003AA   0x9000             STR      R0,[SP, #+0]
   \   000003AC   0x9800             LDR      R0,[SP, #+0]
   \   000003AE   0x.... 0x....      LDR.W    R0,??DataTable20_15  ;; 0x400260b8
   \   000003B2   0xF500 0x707A      ADD      R0,R0,#+1000
   \   000003B6   0x6528             STR      R0,[R5, #+80]
   \   000003B8   0xF04F 0x7000      MOV      R0,#+33554432
   \   000003BC   0x6568             STR      R0,[R5, #+84]
   \   000003BE   0x2000             MOVS     R0,#+0
   \   000003C0   0x65A8             STR      R0,[R5, #+88]
   \   000003C2   0x65E8             STR      R0,[R5, #+92]
   \   000003C4   0xF44F 0x6080      MOV      R0,#+1024
   \   000003C8   0x6628             STR      R0,[R5, #+96]
   \   000003CA   0xF44F 0x6000      MOV      R0,#+2048
   \   000003CE   0x6668             STR      R0,[R5, #+100]
   \   000003D0   0x66A8             STR      R0,[R5, #+104]
   \   000003D2   0x2000             MOVS     R0,#+0
   \   000003D4   0x66E8             STR      R0,[R5, #+108]
   \   000003D6   0xF44F 0x3000      MOV      R0,#+131072
   \   000003DA   0x6728             STR      R0,[R5, #+112]
   \   000003DC   0x2000             MOVS     R0,#+0
   \   000003DE   0x6768             STR      R0,[R5, #+116]
   \   000003E0   0x2003             MOVS     R0,#+3
   \   000003E2   0x67A8             STR      R0,[R5, #+120]
   \   000003E4   0x2000             MOVS     R0,#+0
   \   000003E6   0x67E8             STR      R0,[R5, #+124]
   \   000003E8   0xF8C5 0x0080      STR      R0,[R5, #+128]
   \   000003EC   0xF105 0x0050      ADD      R0,R5,#+80
   \   000003F0   0x.... 0x....      BL       HAL_DMA_Init
   \   000003F4   0xF105 0x0050      ADD      R0,R5,#+80
   \   000003F8   0x2201             MOVS     R2,#+1
   \   000003FA   0x65A0             STR      R0,[R4, #+88]
   \   000003FC   0x2107             MOVS     R1,#+7
   \   000003FE   0xF8C5 0x4088      STR      R4,[R5, #+136]
   \   00000402   0x2045             MOVS     R0,#+69
   \   00000404   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000408   0x2045             MOVS     R0,#+69
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   0000040A   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \                     ??HAL_SPI_MspInit_6: (+1)
   \   0000040E   0xB007             ADD      SP,SP,#+28
   \   00000410   0xBD30             POP      {R4,R5,PC}       ;; return
   1290          
   1291          
   1292          
   1293          
   1294          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1295          {
   1296            /* Check the parameters */
   1297            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1298            
   1299            /* Write in the DR register the data to be sent */
   1300            SPIx->DR = Data;
   1301          }
   1302          
   1303          
   1304          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1305          {
   1306            /* Check the parameters */
   1307            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1308            
   1309            /* Return the data in the DR register */
   1310            return SPIx->DR;
   1311          }
   1312          
   1313          

   \                                 In section .text, align 2, keep-with-next
   1314          void RecordUpdBuf(void)
   1315          {
   1316          
   1317               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable16_1
   \   00000002   0xF890 0x11B0      LDRB     R1,[R0, #+432]
   \   00000006   0x2902             CMP      R1,#+2
   \   00000008   0xD170             BNE.N    ??RecordUpdBuf_0
   1318               {
   1319                  WaveRecord_flgInt=0;
   \   0000000A   0x2100             MOVS     R1,#+0
   1320          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   0000000C   0x....             LDR.N    R2,??DataTable16_2
   \   0000000E   0xF880 0x11B0      STRB     R1,[R0, #+432]
   \   00000012   0x8811             LDRH     R1,[R2, #+0]
   \   00000014   0xF5B1 0x6F80      CMP      R1,#+1024
   \   00000018   0xBFBE             ITTT     LT 
   \   0000001A   0x....             LDRLT.N  R1,??DataTable17_2
   \   0000001C   0x880B             LDRHLT   R3,[R1, #+0]
   \   0000001E   0xF5B3 0x6F80      CMPLT    R3,#+1024
   \   00000022   0xDA63             BGE.N    ??RecordUpdBuf_0
   1321          		//			  &&(stLR!=stLROld))
   1322          			{
   1323          		/*-------------------------------------------------------------------------------------------------------------
   1324          					  
   1325          			Sequence  Record Data					  Processing Data				  Player Data
   1326          					  
   1327          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1328          					  
   1329          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1330          					  
   1331          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1332          		 ---------------------------------------------------------------------------------------------------------------*/
   1333          					  /* Recording Audio Data */						 
   1334          					   switch (buffer_switch)
   \   00000024   0x....             LDR.N    R3,??DataTable16_3
   \   00000026   0x781B             LDRB     R3,[R3, #+0]
   \   00000028   0xB11B             CBZ.N    R3,??RecordUpdBuf_1
   \   0000002A   0x2B02             CMP      R3,#+2
   \   0000002C   0xD00F             BEQ.N    ??RecordUpdBuf_2
   \   0000002E   0xD307             BCC.N    ??RecordUpdBuf_3
   \   00000030   0x4770             BX       LR
   1335          					   {
   1336          								case BUF1_PLAY:
   1337          
   1338          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_1: (+1)
   \   00000032   0x8813             LDRH     R3,[R2, #+0]
   \   00000034   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000038   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000003C   0x....             LDR.N    R2,??DataTable16_4  ;; 0xc00080a0
   \   0000003E   0xE00D             B.N      ??RecordUpdBuf_4
   1339          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   1340          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1341          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   1342          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1343          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   1344          	
   1345          										break;
   1346          								case BUF2_PLAY:
   1347          
   1348          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_3: (+1)
   \   00000040   0x8813             LDRH     R3,[R2, #+0]
   \   00000042   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000046   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000004A   0x....             LDR.N    R2,??DataTable17_1  ;; 0xc0010140
   \   0000004C   0xE006             B.N      ??RecordUpdBuf_4
   1349          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   1350          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1351          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   1352          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1353          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   1354          		
   1355          
   1356          										break;
   1357          								case BUF3_PLAY:
   1358          
   1359          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_2: (+1)
   \   0000004E   0x8813             LDRH     R3,[R2, #+0]
   \   00000050   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000054   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000058   0xF04F 0x4240      MOV      R2,#-1073741824
   \                     ??RecordUpdBuf_4: (+1)
   \   0000005C   0xF9B0 0xC1C4      LDRSH    R12,[R0, #+452]
   \   00000060   0xF822 0xC013      STRH     R12,[R2, R3, LSL #+1]
   1360          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   00000064   0x880B             LDRH     R3,[R1, #+0]
   \   00000066   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000006A   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   0000006E   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   00000072   0xF9B0 0x11C6      LDRSH    R1,[R0, #+454]
   \   00000076   0xF241 0x0C14      MOVW     R12,#+4116
   \   0000007A   0xF82C 0x1003      STRH     R1,[R12, R3]
   1361          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   0000007E   0x....             LDR.N    R1,??DataTable17_4
   \   00000080   0x880B             LDRH     R3,[R1, #+0]
   \   00000082   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000086   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   0000008A   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   0000008E   0xF9B0 0x11CA      LDRSH    R1,[R0, #+458]
   \   00000092   0xF242 0x0C28      MOVW     R12,#+8232
   \   00000096   0xF82C 0x1003      STRH     R1,[R12, R3]
   1362          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \   0000009A   0x....             LDR.N    R1,??DataTable17_5
   \   0000009C   0x880B             LDRH     R3,[R1, #+0]
   \   0000009E   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000A2   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000A6   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000AA   0xF9B0 0x11C8      LDRSH    R1,[R0, #+456]
   \   000000AE   0xF243 0x0C3C      MOVW     R12,#+12348
   \   000000B2   0xF82C 0x1003      STRH     R1,[R12, R3]
   1363          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000000B6   0x....             LDR.N    R1,??DataTable17_8
   \   000000B8   0x880B             LDRH     R3,[R1, #+0]
   \   000000BA   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000BE   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000C2   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000C6   0xF9B0 0x11CC      LDRSH    R1,[R0, #+460]
   \   000000CA   0xF244 0x0C50      MOVW     R12,#+16464
   \   000000CE   0xF82C 0x1003      STRH     R1,[R12, R3]
   1364          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   \   000000D2   0x....             LDR.N    R1,??DataTable18
   \   000000D4   0x880B             LDRH     R3,[R1, #+0]
   \   000000D6   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000DA   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000DE   0xF9B0 0x01CE      LDRSH    R0,[R0, #+462]
   \   000000E2   0xEB02 0x0143      ADD      R1,R2,R3, LSL #+1
   \   000000E6   0xF245 0x0264      MOVW     R2,#+20580
   \   000000EA   0x5250             STRH     R0,[R2, R1]
   1365          										break;
   1366          								default:
   1367          										break; 
   1368          					   }
   1369          				
   1370          				}
   1371                               
   1372               	}
   1373          }
   \                     ??RecordUpdBuf_0: (+1)
   \   000000EC   0x4770             BX       LR               ;; return
   \   000000EE                      REQUIRE Buffer2
   \   000000EE                      REQUIRE Buffer3
   \   000000EE                      REQUIRE Buffer1
   1374          
   1375          

   \                                 In section .text, align 2, keep-with-next
   1376          void DMA2_Stream5_IRQHandler(void)
   1377          {
   1378            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1379          
   1380            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1381            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_17
   \   00000004   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1382            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1383          
   1384            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1385          }
   1386          
   1387          /**
   1388          * @brief This function handles DMA2 stream6 global interrupt.
   1389          */

   \                                 In section .text, align 2, keep-with-next
   1390          void DMA2_Stream6_IRQHandler(void)
   1391          {
   1392            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1393          
   1394            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1395            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_19
   \   00000004   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1396            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1397          
   1398            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1399          }
   1400          

   \                                 In section .text, align 2, keep-with-next
   1401          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1402          {
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1403              if(hspi->Instance==SPI1)
   1404              {
   1405                  /* Copy Data to Record Buffer */
   1406          		//RecordUpdBuf();
   1407          		//XferCplt = 1;
   1408                  //Audio_Play_Out();
   1409              }
   1410              else if (hspi->Instance==SPI2)
   1411              {
   1412          
   1413              }
   1414              else if (hspi->Instance==SPI4)
   1415              {
   1416          
   1417              }
   1418          	else
   1419          	{
   1420          
   1421          	}
   1422          
   1423              if (hspi->Instance==SPI5)
   \   00000004   0x....             LDR.N    R1,??DataTable20_10  ;; 0x40015000
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD114             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1424              {
   1425                  MIC7Rec();
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable20_20
   \   00000010   0xF44F 0x5280      MOV      R2,#+4096
   \   00000014   0xF890 0x11B1      LDRB     R1,[R0, #+433]
   \   00000018   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000001C   0xF880 0x11B1      STRB     R1,[R0, #+433]
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0xF880 0x11B3      STRB     R1,[R0, #+435]
   \   00000026   0xF890 0x11B1      LDRB     R1,[R0, #+433]
   \   0000002A   0x2901             CMP      R1,#+1
   \   0000002C   0xBF0C             ITE      EQ 
   \   0000002E   0x....             LDREQ.N  R1,??DataTable20_21
   \   00000030   0x....             LDRNE.N  R1,??DataTable20_4
   \   00000032   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1426              }
   1427              else
   1428              {
   1429                
   1430              }
   1431              
   1432              if (hspi->Instance==SPI6) //MIC8
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   00000036   0x6820             LDR      R0,[R4, #+0]
   \   00000038   0x....             LDR.N    R1,??DataTable20_9  ;; 0x40015400
   \   0000003A   0x4288             CMP      R0,R1
   \   0000003C   0xD116             BNE.N    ??HAL_SPI_RxCpltCallback_1
   1433              {
   1434          #if 0							
   1435          
   1436              if (swtSDO8==0x01)
   1437             {
   1438                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1439             }
   1440             else
   1441             {
   1442          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1443             }      
   1444             AudioUSBSend(idxFrmPDMMic8++);
   1445          
   1446             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   1447             {
   1448                 swtSDO8^=0x01;
   1449                 WaveRecord_flgSDO8Finish = 1;
   1450                 idxFrmPDMMic8 = 0;
   1451          		RESET_IDX
   1452          		XferCplt = 0; // clear DMA interrupt flag
   1453          		switch (buffer_switch)
   1454          		{
   1455          	        case BUF1_PLAY: 		
   1456          	          buffer_switch = BUF3_PLAY;
   1457          	          break;
   1458          	        case BUF2_PLAY: 
   1459          	          buffer_switch = BUF1_PLAY;		
   1460          	          break;
   1461          	        case BUF3_PLAY: 	
   1462          	          buffer_switch = BUF2_PLAY;
   1463          	          break;
   1464          	        default:
   1465          	          break;
   1466          		}
   1467          
   1468          		/* Last player Frame is finished */
   1469          		AudioPlayerUpd(); 		
   1470          		
   1471          		if (cntStrt<100) cntStrt++;		   
   1472                  
   1473             }
   1474          
   1475          
   1476          #else
   1477              MIC8Rec();
   \   0000003E   0x....             LDR.N    R0,??DataTable20_20
   \   00000040   0xF44F 0x5280      MOV      R2,#+4096
   \   00000044   0xF890 0x11B2      LDRB     R1,[R0, #+434]
   \   00000048   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000004C   0xF880 0x11B2      STRB     R1,[R0, #+434]
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0xF880 0x11B4      STRB     R1,[R0, #+436]
   \   00000056   0xF890 0x11B2      LDRB     R1,[R0, #+434]
   \   0000005A   0x2901             CMP      R1,#+1
   \   0000005C   0xBF0C             ITE      EQ 
   \   0000005E   0x....             LDREQ.N  R1,??DataTable20_22
   \   00000060   0x....             LDRNE.N  R1,??DataTable20_5
   \   00000062   0x3064             ADDS     R0,R0,#+100
   \   00000064   0xE8BD 0x4010      POP      {R4,LR}
   \   00000068   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1478          	
   1479          #endif
   1480          
   1481            }
   1482          }
   \                     ??HAL_SPI_RxCpltCallback_1: (+1)
   \   0000006C   0xBD10             POP      {R4,PC}          ;; return
   1483          

   \                                 In section .text, align 2, keep-with-next
   1484          void PDM2PCMSDO78(void)
   1485          {
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x....             LDR.N    R0,??DataTable20_23
   \   00000006   0xB083             SUB      SP,SP,#+12
   1486          static int16_t Mic7LPOld,Mic8LPOld;
   1487          uint8_t buffer_switch_tmp;
   1488          
   1489          buffer_switch_tmp = buffer_switch;
   1490          
   1491          /*-------------------------------------------------------------------------------------------------------------
   1492          			  
   1493          	Sequence  Record Data					  Processing Data				  Player Data
   1494          			  
   1495          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1496          			  
   1497          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1498          			  
   1499          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1500           ---------------------------------------------------------------------------------------------------------------*/
   1501          
   1502              /* Data in Mic7 finished recording */
   1503              if (WaveRecord_flgSDO7Finish==1)
   \   00000008   0x.... 0x....      LDR.W    R11,??DataTable20_20
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0xF89B 0x01B3      LDRB     R0,[R11, #+435]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xF040 0x808B      BNE.W    ??PDM2PCMSDO78_0
   1504              {
   1505                  WaveRecord_flgSDO7Finish=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   1506          
   1507                  uint8_t swtSDO7_tmp;
   1508                  swtSDO7_tmp = swtSDO7;
   1509          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   0000001C   0x2400             MOVS     R4,#+0
   \   0000001E   0xF88B 0x01B3      STRB     R0,[R11, #+435]
   \   00000022   0xF89B 0x01B1      LDRB     R0,[R11, #+433]
   \   00000026   0x....             LDR.N    R5,??DataTable20_4
   \   00000028   0x....             LDR.N    R6,??DataTable20_21
   \   0000002A   0x.... 0x....      LDR.W    R8,??DataTable20_24  ;; 0xc00080a0
   \   0000002E   0x.... 0x....      LDR.W    R9,??DataTable20  ;; 0xc0010140
   \   00000032   0x9000             STR      R0,[SP, #+0]
   \   00000034   0xF246 0x0778      MOVW     R7,#+24696
   \   00000038   0xF04F 0x4A40      MOV      R10,#-1073741824
   1510          		{
   1511          	        if(swtSDO7_tmp==0x01)
   \                     ??PDM2PCMSDO78_1: (+1)
   \   0000003C   0x9800             LDR      R0,[SP, #+0]
   \   0000003E   0x2801             CMP      R0,#+1
   \   00000040   0xBF0C             ITE      EQ 
   \   00000042   0x8828             LDRHEQ   R0,[R5, #+0]
   \   00000044   0x8830             LDRHNE   R0,[R6, #+0]
   1512          	        {
   1513          	            pDataMic7[i%64] = HTONS(TestSDO7[i]);					
   1514          	        }
   1515          	        else
   1516          	        {
   1517          	           pDataMic7[i%64] = HTONS(TestSDO7_1[i]);
   \   00000046   0x1161             ASRS     R1,R4,#+5
   \   00000048   0x4602             MOV      R2,R0
   \   0000004A   0xEB04 0x6191      ADD      R1,R4,R1, LSR #+26
   \   0000004E   0x0200             LSLS     R0,R0,#+8
   \   00000050   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000054   0x1189             ASRS     R1,R1,#+6
   \   00000056   0xEBA4 0x1181      SUB      R1,R4,R1, LSL #+6
   \   0000005A   0xEB0B 0x0141      ADD      R1,R11,R1, LSL #+1
   \   0000005E   0xF8A1 0x025C      STRH     R0,[R1, #+604]
   1518          	        }
   1519          
   1520          	        /* PDM conversion for frame of 64 inputs, 16 outputs */
   1521          	        if (i%64==63)
   \   00000062   0x1160             ASRS     R0,R4,#+5
   \   00000064   0xEB04 0x6090      ADD      R0,R4,R0, LSR #+26
   \   00000068   0x1180             ASRS     R0,R0,#+6
   \   0000006A   0xEBA4 0x1180      SUB      R1,R4,R0, LSL #+6
   \   0000006E   0x293F             CMP      R1,#+63
   \   00000070   0xD11B             BNE.N    ??PDM2PCMSDO78_2
   1522          	        {
   1523          				/* Put them in processing phase */
   1524          	          /* Recording Audio Data */						 
   1525          	          switch (buffer_switch_tmp)
   \   00000072   0x9901             LDR      R1,[SP, #+4]
   \   00000074   0xB119             CBZ.N    R1,??PDM2PCMSDO78_3
   \   00000076   0x2902             CMP      R1,#+2
   \   00000078   0xD00D             BEQ.N    ??PDM2PCMSDO78_4
   \   0000007A   0xD306             BCC.N    ??PDM2PCMSDO78_5
   \   0000007C   0xE015             B.N      ??PDM2PCMSDO78_2
   1526          	          {
   1527          			    case BUF1_PLAY:								
   1528                            PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 150 ,
   1529                            (PDMFilter_InitStruct *)&Filter[0]);						  
   \                     ??PDM2PCMSDO78_3: (+1)
   \   0000007E   0xF50B 0x73A4      ADD      R3,R11,#+328
   \   00000082   0x2296             MOVS     R2,#+150
   \   00000084   0xEB08 0x1040      ADD      R0,R8,R0, LSL #+5
   \   00000088   0xE00A             B.N      ??PDM2PCMSDO78_6
   1530                            break;	              
   1531          	            case BUF2_PLAY:
   1532          					PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 150 ,
   1533          					(PDMFilter_InitStruct *)&Filter[0]);							
   \                     ??PDM2PCMSDO78_5: (+1)
   \   0000008A   0xF50B 0x73A4      ADD      R3,R11,#+328
   \   0000008E   0x2296             MOVS     R2,#+150
   \   00000090   0xEB09 0x1040      ADD      R0,R9,R0, LSL #+5
   \   00000094   0xE004             B.N      ??PDM2PCMSDO78_6
   1534          					break;
   1535          	            case BUF3_PLAY:
   1536          					PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 150 ,
   1537          					(PDMFilter_InitStruct *)&Filter[0]);		
   \                     ??PDM2PCMSDO78_4: (+1)
   \   00000096   0xF50B 0x73A4      ADD      R3,R11,#+328
   \   0000009A   0x2296             MOVS     R2,#+150
   \   0000009C   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \                     ??PDM2PCMSDO78_6: (+1)
   \   000000A0   0x1839             ADDS     R1,R7,R0
   \   000000A2   0xF50B 0x7017      ADD      R0,R11,#+604
   \   000000A6   0x.... 0x....      BL       PDM_Filter_64_LSB
   1538          					break;
   1539          	            default:
   1540          	                break; 
   1541          	          }
   1542          	        }
   1543          	     }
   \                     ??PDM2PCMSDO78_2: (+1)
   \   000000AA   0x1C64             ADDS     R4,R4,#+1
   \   000000AC   0x1CB6             ADDS     R6,R6,#+2
   \   000000AE   0x1CAD             ADDS     R5,R5,#+2
   \   000000B0   0xF5B4 0x5F80      CMP      R4,#+4096
   \   000000B4   0xDBC2             BLT.N    ??PDM2PCMSDO78_1
   1544                  /* LowPass Filter 
   1545                        dT = 1/16000
   1546                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1547          		*/						 
   1548          		switch (buffer_switch)
   \   000000B6   0x....             LDR.N    R0,??DataTable20_23
   \   000000B8   0x7800             LDRB     R0,[R0, #+0]
   \   000000BA   0xB118             CBZ.N    R0,??PDM2PCMSDO78_7
   \   000000BC   0x2802             CMP      R0,#+2
   \   000000BE   0xD00E             BEQ.N    ??PDM2PCMSDO78_8
   \   000000C0   0xD30A             BCC.N    ??PDM2PCMSDO78_9
   \   000000C2   0xE017             B.N      ??PDM2PCMSDO78_10
   1549          		{
   1550          			case BUF1_PLAY: 
   1551          				LowPassIIR(Buffer2.bufMIC7 ,Buffer2.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_7: (+1)
   \   000000C4   0x2004             MOVS     R0,#+4
   \   000000C6   0xEB07 0x0108      ADD      R1,R7,R8
   \   000000CA   0x9000             STR      R0,[SP, #+0]
   \   000000CC   0xF44F 0x6380      MOV      R3,#+1024
   \   000000D0   0xF50B 0x7237      ADD      R2,R11,#+732
   \   000000D4   0x4608             MOV      R0,R1
   \   000000D6   0xE00B             B.N      ??PDM2PCMSDO78_11
   1552          			    break;
   1553          			case BUF2_PLAY:
   1554          				LowPassIIR(Buffer3.bufMIC7 ,Buffer3.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_9: (+1)
   \   000000D8   0xEB07 0x0009      ADD      R0,R7,R9
   \   000000DC   0xE001             B.N      ??PDM2PCMSDO78_12
   1555          			    break;
   1556          			case BUF3_PLAY:
   1557          			    LowPassIIR(Buffer1.bufMIC7 ,Buffer1.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);						
   \                     ??PDM2PCMSDO78_8: (+1)
   \   000000DE   0xEB07 0x000A      ADD      R0,R7,R10
   \                     ??PDM2PCMSDO78_12: (+1)
   \   000000E2   0x2104             MOVS     R1,#+4
   \   000000E4   0xF44F 0x6380      MOV      R3,#+1024
   \   000000E8   0x9100             STR      R1,[SP, #+0]
   \   000000EA   0xF50B 0x7237      ADD      R2,R11,#+732
   \   000000EE   0x4601             MOV      R1,R0
   \                     ??PDM2PCMSDO78_11: (+1)
   \   000000F0   0x.... 0x....      BL       LowPassIIR
   1558          			    break;
   1559          			default:
   1560          			break; 
   1561          		}
   1562          
   1563             switch (buffer_switch_tmp)
   \                     ??PDM2PCMSDO78_10: (+1)
   \   000000F4   0x9801             LDR      R0,[SP, #+4]
   \   000000F6   0xB118             CBZ.N    R0,??PDM2PCMSDO78_13
   \   000000F8   0x2802             CMP      R0,#+2
   \   000000FA   0xD00F             BEQ.N    ??PDM2PCMSDO78_14
   \   000000FC   0xD30B             BCC.N    ??PDM2PCMSDO78_15
   \   000000FE   0xE017             B.N      ??PDM2PCMSDO78_0
   1564            {
   1565          	case BUF1_PLAY:								
   1566          		Buffer2.bufMIC7[0]=Buffer2.bufMIC7[4];
   \                     ??PDM2PCMSDO78_13: (+1)
   \   00000100   0xEB07 0x0108      ADD      R1,R7,R8
   \   00000104   0x8908             LDRH     R0,[R1, #+8]
   \   00000106   0x8008             STRH     R0,[R1, #+0]
   1567          		Buffer2.bufMIC7[1]=Buffer2.bufMIC7[5];
   \   00000108   0x8948             LDRH     R0,[R1, #+10]
   \   0000010A   0x8048             STRH     R0,[R1, #+2]
   1568          		Buffer2.bufMIC7[2]=Buffer2.bufMIC7[6];
   \   0000010C   0x8988             LDRH     R0,[R1, #+12]
   \   0000010E   0x8088             STRH     R0,[R1, #+4]
   1569          		Buffer2.bufMIC7[3]=Buffer2.bufMIC7[7];								
   \   00000110   0x89C8             LDRH     R0,[R1, #+14]
   \   00000112   0x80C8             STRH     R0,[R1, #+6]
   1570          	    break;	              
   \   00000114   0xE00C             B.N      ??PDM2PCMSDO78_0
   1571          	case BUF2_PLAY:	
   1572          		Buffer3.bufMIC7[0]=Buffer3.bufMIC7[4];
   \                     ??PDM2PCMSDO78_15: (+1)
   \   00000116   0xEB07 0x0009      ADD      R0,R7,R9
   \   0000011A   0xE001             B.N      ??PDM2PCMSDO78_16
   1573          		Buffer3.bufMIC7[1]=Buffer3.bufMIC7[5];
   1574          		Buffer3.bufMIC7[2]=Buffer3.bufMIC7[6];
   1575          		Buffer3.bufMIC7[3]=Buffer3.bufMIC7[7];				
   1576          	    break;
   1577          	case BUF3_PLAY:
   1578          		Buffer1.bufMIC7[0]=Buffer1.bufMIC7[4];
   \                     ??PDM2PCMSDO78_14: (+1)
   \   0000011C   0xEB07 0x000A      ADD      R0,R7,R10
   \                     ??PDM2PCMSDO78_16: (+1)
   \   00000120   0x8901             LDRH     R1,[R0, #+8]
   \   00000122   0x8001             STRH     R1,[R0, #+0]
   1579          		Buffer1.bufMIC7[1]=Buffer1.bufMIC7[5];
   \   00000124   0x8941             LDRH     R1,[R0, #+10]
   \   00000126   0x8041             STRH     R1,[R0, #+2]
   1580          		Buffer1.bufMIC7[2]=Buffer1.bufMIC7[6];
   \   00000128   0x8981             LDRH     R1,[R0, #+12]
   \   0000012A   0x8081             STRH     R1,[R0, #+4]
   1581          		Buffer1.bufMIC7[3]=Buffer1.bufMIC7[7];				
   \   0000012C   0x89C1             LDRH     R1,[R0, #+14]
   \   0000012E   0x80C1             STRH     R1,[R0, #+6]
   1582          	    break;
   1583          	default:
   1584          	         break; 
   1585            }
   1586          
   1587          	}
   1588          #if 0
   1589                      /* Recording Audio Data */						 
   1590          		    switch (buffer_switch)//buffer_switch
   1591          		    {
   1592          		        case BUF1_PLAY:								
   1593          					        /* Update for left-right channel */
   1594          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1595          			        {
   1596          	                    Buffer2.bufMIC7[2*i+1]=  Buffer2.bufMIC7[i];
   1597                                  Buffer2.bufMIC7[2*i] = Buffer2.bufMIC7[i];
   1598          			        }
   1599          					  Buffer2.bufMIC7[0] = Buffer2.bufMIC7[4];
   1600          					  Buffer2.bufMIC7[1] = Buffer2.bufMIC7[5];
   1601          					  Buffer2.bufMIC7[2] = Buffer2.bufMIC7[6];
   1602          					  Buffer2.bufMIC7[3] = Buffer2.bufMIC7[7];
   1603          			            break;
   1604          			     case BUF2_PLAY:
   1605          			        /* Update for left-right channel */
   1606          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1607          			        {				 	
   1608          		                Buffer3.bufMIC7[2*i+1]= Buffer3.bufMIC7[i];
   1609          		                Buffer3.bufMIC7[2*i]= Buffer3.bufMIC7[i];;	
   1610          			        }
   1611          					  Buffer3.bufMIC7[0] = Buffer3.bufMIC7[4];
   1612          					  Buffer3.bufMIC7[1] = Buffer3.bufMIC7[5];
   1613          					  Buffer3.bufMIC7[2] = Buffer3.bufMIC7[6];
   1614          					  Buffer3.bufMIC7[3] = Buffer3.bufMIC7[7];					
   1615          	                break;
   1616          	            case BUF3_PLAY:
   1617          			        /* Update for left-right channel */
   1618          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1619          			        {					
   1620          	                    Buffer1.bufMIC7[2*i+1]= Buffer1.bufMIC7[i];
   1621          	                    Buffer1.bufMIC7[2*i]= Buffer1.bufMIC7[i];;	
   1622          			        }
   1623          					  Buffer1.bufMIC7[0] = Buffer1.bufMIC7[4];
   1624          					  Buffer1.bufMIC7[1] = Buffer1.bufMIC7[5];
   1625          					  Buffer1.bufMIC7[2] = Buffer1.bufMIC7[6];
   1626          					  Buffer1.bufMIC7[3] = Buffer1.bufMIC7[7];						
   1627          	                break;
   1628          	            default:
   1629          	                break; 
   1630          	        }
   1631          	    
   1632          
   1633               }
   1634              
   1635          #endif	
   1636          
   1637          	/* Data in Mic8 finished recording */
   1638          	if (WaveRecord_flgSDO8Finish==1)
   \                     ??PDM2PCMSDO78_0: (+1)
   \   00000130   0xF89B 0x01B4      LDRB     R0,[R11, #+436]
   \   00000134   0x2801             CMP      R0,#+1
   \   00000136   0xF040 0x8080      BNE.W    ??PDM2PCMSDO78_17
   1639          	{
   1640          		WaveRecord_flgSDO8Finish=0;
   \   0000013A   0x2000             MOVS     R0,#+0
   1641          		uint8_t swtSDO8_tmp;
   1642          		swtSDO8_tmp = swtSDO8;
   1643          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   0000013C   0x2400             MOVS     R4,#+0
   \   0000013E   0xF88B 0x01B4      STRB     R0,[R11, #+436]
   \   00000142   0xF89B 0x01B2      LDRB     R0,[R11, #+434]
   \   00000146   0x....             LDR.N    R5,??DataTable20_5
   \   00000148   0x....             LDR.N    R6,??DataTable20_22
   \   0000014A   0xF247 0x078C      MOVW     R7,#+28812
   \   0000014E   0x.... 0x....      LDR.W    R8,??DataTable20_24  ;; 0xc00080a0
   \   00000152   0x9000             STR      R0,[SP, #+0]
   \   00000154   0x.... 0x....      LDR.W    R9,??DataTable20  ;; 0xc0010140
   \   00000158   0xF04F 0x4A40      MOV      R10,#-1073741824
   1644          		{
   1645                            if(swtSDO8_tmp==0x01)
   \                     ??PDM2PCMSDO78_18: (+1)
   \   0000015C   0x9800             LDR      R0,[SP, #+0]
   \   0000015E   0x2801             CMP      R0,#+1
   \   00000160   0xBF0C             ITE      EQ 
   \   00000162   0x8828             LDRHEQ   R0,[R5, #+0]
   \   00000164   0x8830             LDRHNE   R0,[R6, #+0]
   1646                            {
   1647                               pDataMic8[i%64] = HTONS(TestSDO8[i]);
   1648                            }
   1649                            else
   1650                            {
   1651                               pDataMic8[i%64] = HTONS(TestSDO8_1[i]);
   \   00000166   0x1161             ASRS     R1,R4,#+5
   \   00000168   0x4602             MOV      R2,R0
   \   0000016A   0xEB04 0x6191      ADD      R1,R4,R1, LSR #+26
   \   0000016E   0x0200             LSLS     R0,R0,#+8
   \   00000170   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000174   0x1189             ASRS     R1,R1,#+6
   \   00000176   0xEBA4 0x1181      SUB      R1,R4,R1, LSL #+6
   \   0000017A   0xEB0B 0x0141      ADD      R1,R11,R1, LSL #+1
   \   0000017E   0xF8A1 0x01DC      STRH     R0,[R1, #+476]
   1652                            }
   1653          		
   1654                            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1655                            if (i%64==63)
   \   00000182   0x1160             ASRS     R0,R4,#+5
   \   00000184   0xEB04 0x6090      ADD      R0,R4,R0, LSR #+26
   \   00000188   0x1180             ASRS     R0,R0,#+6
   \   0000018A   0xEBA4 0x1180      SUB      R1,R4,R0, LSL #+6
   \   0000018E   0x293F             CMP      R1,#+63
   \   00000190   0xD11C             BNE.N    ??PDM2PCMSDO78_19
   1656                            {
   1657                                /* Recording Audio Data */						 
   1658                                switch (buffer_switch)
   \   00000192   0x....             LDR.N    R1,??DataTable20_23
   \   00000194   0x7809             LDRB     R1,[R1, #+0]
   \   00000196   0xB119             CBZ.N    R1,??PDM2PCMSDO78_20
   \   00000198   0x2902             CMP      R1,#+2
   \   0000019A   0xD00D             BEQ.N    ??PDM2PCMSDO78_21
   \   0000019C   0xD306             BCC.N    ??PDM2PCMSDO78_22
   \   0000019E   0xE015             B.N      ??PDM2PCMSDO78_19
   1659                                {
   1660                                        case BUF1_PLAY: 							
   1661                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 150 ,
   1662                                                (PDMFilter_InitStruct *)&Filter[1]);
   \                     ??PDM2PCMSDO78_20: (+1)
   \   000001A0   0xF50B 0x73BE      ADD      R3,R11,#+380
   \   000001A4   0x2296             MOVS     R2,#+150
   \   000001A6   0xEB08 0x1040      ADD      R0,R8,R0, LSL #+5
   \   000001AA   0xE00A             B.N      ??PDM2PCMSDO78_23
   1663                                                break;
   1664                                        case BUF2_PLAY:
   1665                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 150 ,
   1666                                                (PDMFilter_InitStruct *)&Filter[1]);	
   \                     ??PDM2PCMSDO78_22: (+1)
   \   000001AC   0xF50B 0x73BE      ADD      R3,R11,#+380
   \   000001B0   0x2296             MOVS     R2,#+150
   \   000001B2   0xEB09 0x1040      ADD      R0,R9,R0, LSL #+5
   \   000001B6   0xE004             B.N      ??PDM2PCMSDO78_23
   1667                                                break;
   1668                                        case BUF3_PLAY:
   1669                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 150 ,
   1670                                                (PDMFilter_InitStruct *)&Filter[1]);									
   \                     ??PDM2PCMSDO78_21: (+1)
   \   000001B8   0xF50B 0x73BE      ADD      R3,R11,#+380
   \   000001BC   0x2296             MOVS     R2,#+150
   \   000001BE   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \                     ??PDM2PCMSDO78_23: (+1)
   \   000001C2   0x1839             ADDS     R1,R7,R0
   \   000001C4   0xF50B 0x70EE      ADD      R0,R11,#+476
   \   000001C8   0x.... 0x....      BL       PDM_Filter_64_LSB
   1671                                                 break;
   1672                                        default:
   1673                                                 break; 
   1674                                }		
   1675                             }					 
   1676          		}
   \                     ??PDM2PCMSDO78_19: (+1)
   \   000001CC   0x1C64             ADDS     R4,R4,#+1
   \   000001CE   0x1CB6             ADDS     R6,R6,#+2
   \   000001D0   0x1CAD             ADDS     R5,R5,#+2
   \   000001D2   0xF5B4 0x5F80      CMP      R4,#+4096
   \   000001D6   0xDBC1             BLT.N    ??PDM2PCMSDO78_18
   1677          
   1678                  /* LowPass Filter 
   1679                        dT = 1/16000
   1680                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1681          		*/						 
   1682          		switch (buffer_switch)
   \   000001D8   0x....             LDR.N    R0,??DataTable20_23
   \   000001DA   0x7800             LDRB     R0,[R0, #+0]
   \   000001DC   0xB118             CBZ.N    R0,??PDM2PCMSDO78_24
   \   000001DE   0x2802             CMP      R0,#+2
   \   000001E0   0xD007             BEQ.N    ??PDM2PCMSDO78_25
   \   000001E2   0xD303             BCC.N    ??PDM2PCMSDO78_26
   \   000001E4   0xE010             B.N      ??PDM2PCMSDO78_27
   1683          		{
   1684          			case BUF1_PLAY: 
   1685          				LowPassIIR(Buffer2.bufMIC8 ,Buffer2.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_24: (+1)
   \   000001E6   0xEB07 0x0008      ADD      R0,R7,R8
   \   000001EA   0xE004             B.N      ??PDM2PCMSDO78_28
   1686          			    break;
   1687          			case BUF2_PLAY:
   1688          				LowPassIIR(Buffer3.bufMIC8 ,Buffer3.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_26: (+1)
   \   000001EC   0xEB07 0x0009      ADD      R0,R7,R9
   \   000001F0   0xE001             B.N      ??PDM2PCMSDO78_28
   1689          			    break;
   1690          			case BUF3_PLAY:
   1691          			    LowPassIIR(Buffer1.bufMIC8 ,Buffer1.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);						
   \                     ??PDM2PCMSDO78_25: (+1)
   \   000001F2   0xEB07 0x000A      ADD      R0,R7,R10
   \                     ??PDM2PCMSDO78_28: (+1)
   \   000001F6   0x2104             MOVS     R1,#+4
   \   000001F8   0xF44F 0x6380      MOV      R3,#+1024
   \   000001FC   0x9100             STR      R1,[SP, #+0]
   \   000001FE   0xF20B 0x22DE      ADDW     R2,R11,#+734
   \   00000202   0x4601             MOV      R1,R0
   \   00000204   0x.... 0x....      BL       LowPassIIR
   1692          			    break;
   1693          			default:
   1694          			break; 
   1695          		}
   1696                    					 
   1697                    switch (buffer_switch)
   \                     ??PDM2PCMSDO78_27: (+1)
   \   00000208   0x....             LDR.N    R0,??DataTable20_23
   \   0000020A   0x7800             LDRB     R0,[R0, #+0]
   \   0000020C   0xB128             CBZ.N    R0,??PDM2PCMSDO78_29
   \   0000020E   0x2802             CMP      R0,#+2
   \   00000210   0xD009             BEQ.N    ??PDM2PCMSDO78_30
   \   00000212   0xD305             BCC.N    ??PDM2PCMSDO78_31
   1698                    {
   1699                        case BUF1_PLAY: 	
   1700          					  Buffer2.bufMIC8[0] = Buffer2.bufMIC8[4];
   1701          					  Buffer2.bufMIC8[1] = Buffer2.bufMIC8[5];
   1702          					  Buffer2.bufMIC8[2] = Buffer2.bufMIC8[6];
   1703          					  Buffer2.bufMIC8[3] = Buffer2.bufMIC8[7];
   1704                                break;
   1705                        case BUF2_PLAY:
   1706            					  Buffer3.bufMIC8[0] = Buffer3.bufMIC8[4];
   1707          					  Buffer3.bufMIC8[1] = Buffer3.bufMIC8[5];
   1708          					  Buffer3.bufMIC8[2] = Buffer3.bufMIC8[6];
   1709          					  Buffer3.bufMIC8[3] = Buffer3.bufMIC8[7];
   1710                                break;
   1711                        case BUF3_PLAY:
   1712            					  Buffer1.bufMIC8[0] = Buffer1.bufMIC8[4];
   1713          					  Buffer1.bufMIC8[1] = Buffer1.bufMIC8[5];
   1714          					  Buffer1.bufMIC8[2] = Buffer1.bufMIC8[6];
   1715          					  Buffer1.bufMIC8[3] = Buffer1.bufMIC8[7];
   1716                              break;
   1717                        default:
   1718                              break; 
   1719                    }                	  
   1720             }//if (WaveRecord_flgSDO8Finish==1)
   1721          }
   \   00000214   0xB003             ADD      SP,SP,#+12
   \   00000216   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??PDM2PCMSDO78_29: (+1)
   \   0000021A   0xEB07 0x0008      ADD      R0,R7,R8
   \   0000021E   0xE004             B.N      ??PDM2PCMSDO78_32
   \                     ??PDM2PCMSDO78_31: (+1)
   \   00000220   0xEB07 0x0009      ADD      R0,R7,R9
   \   00000224   0xE001             B.N      ??PDM2PCMSDO78_32
   \                     ??PDM2PCMSDO78_30: (+1)
   \   00000226   0xEB07 0x000A      ADD      R0,R7,R10
   \                     ??PDM2PCMSDO78_32: (+1)
   \   0000022A   0x8901             LDRH     R1,[R0, #+8]
   \   0000022C   0x8001             STRH     R1,[R0, #+0]
   \   0000022E   0x8941             LDRH     R1,[R0, #+10]
   \   00000230   0x8041             STRH     R1,[R0, #+2]
   \   00000232   0x8981             LDRH     R1,[R0, #+12]
   \   00000234   0x8081             STRH     R1,[R0, #+4]
   \   00000236   0x89C1             LDRH     R1,[R0, #+14]
   \   00000238   0x80C1             STRH     R1,[R0, #+6]
   \                     ??PDM2PCMSDO78_17: (+1)
   \   0000023A   0xB003             ADD      SP,SP,#+12
   \   0000023C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \   00000240                      REQUIRE Buffer2
   \   00000240                      REQUIRE Buffer3
   \   00000240                      REQUIRE Buffer1

   \                                 In section .bss, align 4
   \                     hspi5:
   \   00000000                      DS8 100
   \                     hspi6:
   \   00000064                      DS8 100
   \                     hi2s1:
   \   000000C8                      DS8 64
   \                     hi2s2:
   \   00000108                      DS8 64
   \                     Filter:
   \   00000148                      DS8 104
   \                     WaveRecord_flgInt:
   \   000001B0                      DS8 1
   \                     swtSDO7:
   \   000001B1                      DS8 1
   \                     swtSDO8:
   \   000001B2                      DS8 1
   \                     WaveRecord_flgSDO7Finish:
   \   000001B3                      DS8 1
   \                     WaveRecord_flgSDO8Finish:
   \   000001B4                      DS8 1
   \                     SPI4_stPosShft:
   \   000001B5                      DS8 1
   \                     I2S2_stLR:
   \   000001B6                      DS8 1
   \                     I2S2_stLROld:
   \   000001B7                      DS8 1
   \   000001B8                      DS8 1
   \   000001B9                      DS8 1
   \                     idxMic8:
   \   000001BA                      DS8 2
   \                     idxMic7:
   \   000001BC                      DS8 2
   \                     WaveRec_idxTest:
   \   000001BE                      DS8 2
   \                     cntPos:
   \   000001C0                      DS8 2
   \                     cntPos7:
   \   000001C2                      DS8 2
   \                     vRawSens1:
   \   000001C4                      DS8 2
   \                     vRawSens2:
   \   000001C6                      DS8 2
   \                     vRawSens4:
   \   000001C8                      DS8 2
   \                     vRawSens3:
   \   000001CA                      DS8 2
   \                     vRawSens5:
   \   000001CC                      DS8 2
   \                     vRawSens6:
   \   000001CE                      DS8 2
   \                     SPI4_stNipple:
   \   000001D0                      DS8 2
   \   000001D2                      DS8 2
   \                     bufPCMSens7:
   \   000001D4                      DS8 4
   \                     bufPCMSens8:
   \   000001D8                      DS8 4
   \                     pDataMic8:
   \   000001DC                      DS8 128
   \                     pDataMic7:
   \   0000025C                      DS8 128
   \   000002DC                      DS8 2
   \   000002DE                      DS8 2

   \                                 In section .bss, align 4
   \                     pHeaderBuff:
   \   00000000                      DS8 44

   \                                 In section .bss, align 2
   \                     cntTransFinish:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     TestSDO12:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO34:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO56:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hdma_spi2_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi3_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi5_rx:
   \   00000000                      DS8 80
   \                     hdma_spi6_rx:
   \   00000050                      DS8 80

   \                                 In section .bss, align 2
   \                     idxFrmPDMMic8:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
   \                     cntStrt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     SPI1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S2_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO34:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO56:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     I2S1_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, at 0xc0000000
   \                     Buffer1:
   \   00000000                      DS8 32928

   \                                 In section .bss, at 0xc00080a0
   \                     Buffer2:
   \   00000000                      DS8 32928

   \                                 In section .bss, at 0xc0010140
   \                     Buffer3:
   \   00000000                      DS8 32928
   1722          

   \                                 In section .text, align 2, keep-with-next
   1723          void MIC7Rec (void)
   1724          {
   1725          	swtSDO7^=0x01;
   \                     MIC7Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_20
   1726          	WaveRecord_flgSDO7Finish = 1;
   1727          	if (swtSDO7==0x01)
   \   00000002   0xF44F 0x5280      MOV      R2,#+4096
   \   00000006   0xF890 0x11B1      LDRB     R1,[R0, #+433]
   \   0000000A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000E   0xF880 0x11B1      STRB     R1,[R0, #+433]
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0xF880 0x11B3      STRB     R1,[R0, #+435]
   \   00000018   0xF890 0x11B1      LDRB     R1,[R0, #+433]
   \   0000001C   0x2901             CMP      R1,#+1
   \   0000001E   0xBF0C             ITE      EQ 
   \   00000020   0x....             LDREQ.N  R1,??DataTable20_21
   \   00000022   0x....             LDRNE.N  R1,??DataTable20_4
   1728          	{
   1729          		HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   1730          	}
   1731          	else
   1732          	{
   1733          		HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000024   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1734          	} 
   1735          
   1736          }
   1737          

   \                                 In section .text, align 2, keep-with-next
   1738          void MIC8Rec (void)
   1739          {
   1740               swtSDO8^=0x01;
   \                     MIC8Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_20
   1741              WaveRecord_flgSDO8Finish = 1;
   1742              if (swtSDO8==0x01)
   \   00000002   0xF44F 0x5280      MOV      R2,#+4096
   \   00000006   0xF890 0x11B2      LDRB     R1,[R0, #+434]
   \   0000000A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000E   0xF880 0x11B2      STRB     R1,[R0, #+434]
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0xF880 0x11B4      STRB     R1,[R0, #+436]
   \   00000018   0xF890 0x11B2      LDRB     R1,[R0, #+434]
   \   0000001C   0x2901             CMP      R1,#+1
   \   0000001E   0xBF0C             ITE      EQ 
   \   00000020   0x....             LDREQ.N  R1,??DataTable20_22
   \   00000022   0x....             LDRNE.N  R1,??DataTable20_5
   1743              {
   1744                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   1745              }
   1746              else
   1747              {
   1748                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000024   0x3064             ADDS     R0,R0,#+100
   \   00000026   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1749          
   1750              }
   1751          
   1752          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x4001300C         DC32     0x4001300c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   0x4001340C         DC32     0x4001340c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x4001540C         DC32     0x4001540c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_10:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_11:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_12:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_13:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_14:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_15:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_16:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_17:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_18:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_19:
   \   00000000   0x........         DC32     hdma_spi5_rx+0x50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_20:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_21:
   \   00000000   0x........         DC32     TestSDO7_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_22:
   \   00000000   0x........         DC32     TestSDO8_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_23:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_24:
   \   00000000   0xC00080A0         DC32     0xc00080a0
   1753          
   1754          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DMA2_Stream5_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream6_IRQHandler
         0   -> HAL_DMA_IRQHandler
      40   HAL_SPI_MspInit
        40   -> HAL_DMA_DeInit
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
       8   HAL_SPI_RxCpltCallback
         0   -> HAL_SPI_Receive_DMA
         8   -> HAL_SPI_Receive_DMA
      16   MIC1TO6_Init
        16   -> HAL_I2S_Init
        16   -> HAL_SPI_Receive_DMA
         0   -> SPI4_Init
        16   -> SPI5_Init
        16   -> SPI6_Init
       0   MIC7Rec
         0   -> HAL_SPI_Receive_DMA
       0   MIC8Rec
         0   -> HAL_SPI_Receive_DMA
       0   Mic7Rec
         0   -> SPI5_Init
       0   Mic8Rec
         0   -> HAL_SPI_Init
      48   PDM2PCMSDO78
        48   -> LowPassIIR
        48   -> PDM_Filter_64_LSB
       0   RecordUpdBuf
       0   SPI1_IRQHandler
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
      16   SPI2_IRQHandler
        16   -> HAL_GPIO_ReadPin
       0   SPI4_IRQHandler
       8   SPI4_Init
         8   -> HAL_SPI_Init
       8   SPI5_IRQHandler
         8   -> PDM_Filter_64_LSB
      32   SPI5_Init
         0   -> HAL_SPI_Init
        32   -> PDM_Filter_Init
       8   SPI6_IRQHandler
         8   -> PDM_Filter_64_LSB
       0   SPI6_Init
         0   -> HAL_SPI_Init
       8   StartRecMic7_8
         8   -> HAL_SPI_Receive_DMA
       0   mySPI_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable17_8
       4  ??DataTable18
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_13
       4  ??DataTable20_14
       4  ??DataTable20_15
       4  ??DataTable20_16
       4  ??DataTable20_17
       4  ??DataTable20_18
       4  ??DataTable20_19
       4  ??DataTable20_2
       4  ??DataTable20_20
       4  ??DataTable20_21
       4  ??DataTable20_22
       4  ??DataTable20_23
       4  ??DataTable20_24
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
   32928  Buffer1
   32928  Buffer2
   32928  Buffer3
       8  DMA2_Stream5_IRQHandler
       8  DMA2_Stream6_IRQHandler
    1042  HAL_SPI_MspInit
     110  HAL_SPI_RxCpltCallback
       2  I2S1_stNipple
       1  I2S1_stPosShft
       2  I2S2_stNipple
       1  I2S2_stPosShft
     208  MIC1TO6_Init
      40  MIC7Rec
      42  MIC8Rec
       2  Mic7Rec
      76  Mic8Rec
     576  PDM2PCMSDO78
     238  RecordUpdBuf
     314  SPI1_IRQHandler
     212  SPI1_Ini
       2  SPI1_stNipple
     242  SPI2_IRQHandler
     308  SPI4_IRQHandler
      86  SPI4_Init
     132  SPI5_IRQHandler
     142  SPI5_Init
     126  SPI6_IRQHandler
      76  SPI6_Init
      48  StartRecMic7_8
    8192  TestSDO12
    8192  TestSDO34
    8192  TestSDO56
    8192  TestSDO7
    8192  TestSDO7_1
    8192  TestSDO8
    8192  TestSDO8_1
       1  WaveRecord_flgIni
       2  cntStrt
       2  cntTransFinish
      80  hdma_spi2_tx
      80  hdma_spi3_tx
     160  hdma_spi5_rx
          hdma_spi6_rx
     100  hspi1
     100  hspi2
     736  hspi5
          hspi6
          hi2s1
          hi2s2
          Filter
          WaveRecord_flgInt
          swtSDO7
          swtSDO8
          WaveRecord_flgSDO7Finish
          WaveRecord_flgSDO8Finish
          SPI4_stPosShft
          I2S2_stLR
          I2S2_stLROld
          stLROld
          Main_stLROld
          idxMic8
          idxMic7
          WaveRec_idxTest
          cntPos
          cntPos7
          vRawSens1
          vRawSens2
          vRawSens4
          vRawSens3
          vRawSens5
          vRawSens6
          SPI4_stNipple
          bufPCMSens7
          bufPCMSens8
          pDataMic8
          pDataMic7
          Mic7LPOld
          Mic8LPOld
       2  iSDO12
       2  iSDO34
       2  iSDO56
       2  idxFrmPDMMic8
      44  mySPI_SendData
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins

 
 58 897 bytes in section .bss
 98 784 bytes in section .bss  (abs)
  4 256 bytes in section .text
 
   4 256 bytes of CODE memory
 157 681 bytes of DATA memory

Errors: none
Warnings: 8
