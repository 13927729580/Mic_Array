###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       31/Mar/2016  20:53:51
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          
      8          
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "waverecorder.h" 
     11          #include "string.h"
     12          //#include "stm32f7xx_hal_spi.h"
     13          #include "stm32f7xx_hal.h"
     14          #include "pdm_filter.h"
     15          #include "DSP.h"
     16          
     17          
     18          /* Private typedef -----------------------------------------------------------*/
     19          /* Private define ------------------------------------------------------------*/
     20          
     21          
     22          /* SPI Configuration defines */
     23          #define SPI_SCK_PIN                       GPIO_PIN_10
     24          #define SPI_SCK_GPIO_PORT                 GPIOB
     25          #define SPI_SCK_GPIO_CLK                  1
     26          #define SPI_SCK_SOURCE                    1
     27          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     28          
     29          #define SPI_MOSI_PIN                      GPIO_PIN_3
     30          #define SPI_MOSI_GPIO_PORT                GPIOC
     31          #define SPI_MOSI_GPIO_CLK                 1
     32          #define SPI_MOSI_SOURCE                   1
     33          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     34          
     35          
     36          /* sop1hc */
     37          #define SPI1_SCK_PIN                       GPIO_PIN_5
     38          #define SPI1_SCK_GPIO_PORT                 GPIOA
     39          #define SPI1_SCK_GPIO_CLK                  1
     40          #define SPI1_SCK_SOURCE                    1
     41          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     42          
     43          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     44          #define SPI1_MOSI_GPIO_PORT                GPIOA
     45          #define SPI1_MOSI_GPIO_CLK                 1
     46          #define SPI1_MOSI_SOURCE                   1
     47          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     48          
     49          #define SPI1_MISO_PIN                      GPIO_PIN_6
     50          #define SPI1_MISO_GPIO_PORT                GPIOA
     51          #define SPI1_MISO_GPIO_CLK                 1
     52          #define SPI1_MISO_SOURCE                   1
     53          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     54          
     55          
     56          
     57          

   \                                 In section .bss, align 4
     58          uint16_t idxMic8=0;
     59          uint16_t idxMic7=0;
     60          uint8_t pHeaderBuff[44];
     61          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
     62          uint16_t volatile cntTransFinish;
     63          
     64          /* Private macro -------------------------------------------------------------*/
     65          /* Private variables ---------------------------------------------------------*/
     66          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     67          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     68          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     69          extern WAVE_FormatTypeDef WaveFormat;
     70          extern FIL WavFile;
     71          extern AUDIO_DEMO_StateMachine AudioDemo;
     72          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     73          extern __IO uint8_t buffer_switch;
     74          extern __IO uint8_t volume;
     75          extern SPI_HandleTypeDef hspi4,hspi1;
     76          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     77          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     78          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     79          extern __IO uint16_t  I2S2_idxTmp;
     80          extern SPI_HandleTypeDef     hspi4;
     81          extern DMA_HandleTypeDef     DmaHandle;
     82          
     83          #ifndef CS43L22_PLAY
     84          extern __IO uint8_t flgDlyUpd; 
     85          extern __IO uint32_t XferCplt;
     86          extern __IO uint16_t  idxSPI5DataBuf3;
     87          #endif
     88          
     89          int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
     90          int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
     91          int16_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
     92          uint16_t TestSDO7[4*AUDIO_OUT_BUFFER_SIZE];
     93          uint16_t TestSDO8[4*AUDIO_OUT_BUFFER_SIZE];
     94          uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
     95          uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
     96          __IO uint16_t  WaveRec_idxTest;
     97          __IO uint8_t flgRacing;
     98          
     99          
    100          SPI_HandleTypeDef hspi1,hspi2;
    101          SPI_HandleTypeDef spi1_ins,spi2_ins;
    102          I2S_HandleTypeDef hi2s1;
    103          I2S_HandleTypeDef hi2s2;
    104          SPI_HandleTypeDef hspi5,hspi6;
   \                     hspi5:
   \   00000000                      DS8 100
   \                     hspi6:
   \   00000064                      DS8 100
    105          DMA_HandleTypeDef hdma_spi2_tx;
    106          DMA_HandleTypeDef hdma_spi3_tx;
    107          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
    108          
    109          #if USB_STREAMING
    110          __IO uint16_t idxFrmPDMMic8;
    111          #endif
    112          
    113          uint16_t *bufPCMSens7;
    114          uint16_t *bufPCMSens8;
    115          __IO uint16_t cntPos;
    116          __IO uint16_t cntPos7;
    117          __IO static uint16_t iBuff;
    118          __IO static uint32_t uwVolume = 70;
    119          __IO PDMFilter_InitStruct Filter[2];
   \                     Filter:
   \   000000C8                      DS8 104
    120          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
    121          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
    122          __IO int16_t   pPDM2PCM[16];
    123          __IO uint16_t cntStrt;
    124          __IO uint8_t WaveRecord_flgInt;
    125          uint8_t WaveRecord_flgIni;
    126          
    127          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
    128          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
    129          __IO uint16_t iSDO12,iSDO34,iSDO56;
    130          __IO uint8_t swtSDO7,swtSDO8;
   \                     swtSDO7:
   \   00000130                      DS8 1
   \                     swtSDO8:
   \   00000131                      DS8 1
    131          __IO uint8_t WaveRecord_flgSDO7Finish, WaveRecord_flgSDO8Finish;
   \                     WaveRecord_flgSDO7Finish:
   \   00000132                      DS8 1
   \                     WaveRecord_flgSDO8Finish:
   \   00000133                      DS8 1
   \                     idxMic8:
   \   00000134                      DS8 2
   \                     idxMic7:
   \   00000136                      DS8 2
   \                     cntPos:
   \   00000138                      DS8 2
   \                     cntPos7:
   \   0000013A                      DS8 2
   \                     bufPCMSens7:
   \   0000013C                      DS8 4
   \                     bufPCMSens8:
   \   00000140                      DS8 4
   \                     pDataMic8:
   \   00000144                      DS8 128
   \                     pDataMic7:
   \   000001C4                      DS8 128

   \                                 In section .bss, align 4
   \                     pHeaderBuff:
   \   00000000                      DS8 44

   \                                 In section .bss, align 2
   \                     cntTransFinish:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     TestSDO12:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO34:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO56:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8_1:
   \   00000000                      DS8 8192
    132          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
    133          __IO uint8_t I2S2_stLR, I2S2_stLROld;
    134          
    135          /* Private function prototypes -----------------------------------------------*/
    136          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    137          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    138          static void I2S1_Init(void);
    139          static void I2S2_Init(void);
    140          
    141          #if EXT_RAM
    142          #pragma location=SDRAM_BANK_ADDR
    143          #endif
    144          Mic_Array_Data Buffer1;
    145          #if EXT_RAM
    146          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)
    147          #endif
    148          Mic_Array_Data Buffer2;
    149          #if EXT_RAM
    150          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)
    151          #endif
    152          Mic_Array_Data Buffer3;
    153          

   \                                 In section .text, align 2, keep-with-next
    154          void SPI1_Ini(void)
    155          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    156            GPIO_InitTypeDef GPIO_InitStructure;
    157          
    158           
    159             	 
    160            /* Enable SCK, MOSI and MISO GPIO clocks */
    161            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x40023830
   \   00000006   0xB086             SUB      SP,SP,#+24
    162            __HAL_RCC_GPIOA_CLK_ENABLE();
    163          
    164            
    165            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    166            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    167            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    168          
    169            /* SPI SCK pin configuration */
    170            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    171            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    172            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable12_2  ;; 0x40020000
   \   0000000C   0x6941             LDR      R1,[R0, #+20]
   \   0000000E   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000012   0x6141             STR      R1,[R0, #+20]
   \   00000014   0x6941             LDR      R1,[R0, #+20]
   \   00000016   0xF401 0x5180      AND      R1,R1,#0x1000
   \   0000001A   0x9100             STR      R1,[SP, #+0]
   \   0000001C   0x9900             LDR      R1,[SP, #+0]
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000024   0x6001             STR      R1,[R0, #+0]
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xA901             ADD      R1,SP,#+4
   \   0000002A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x9800             LDR      R0,[SP, #+0]
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x9002             STR      R0,[SP, #+8]
   \   00000036   0x9003             STR      R0,[SP, #+12]
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0x9004             STR      R0,[SP, #+16]
   \   0000003C   0x2005             MOVS     R0,#+5
   \   0000003E   0x9005             STR      R0,[SP, #+20]
   \   00000040   0x2020             MOVS     R0,#+32
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       HAL_GPIO_Init
    173          
    174            /* SPI  MOSI pin configuration */
    175            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   0000004A   0x2001             MOVS     R0,#+1
    176            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    177            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   0000004C   0xA901             ADD      R1,SP,#+4
   \   0000004E   0x9005             STR      R0,[SP, #+20]
   \   00000050   0x2080             MOVS     R0,#+128
   \   00000052   0x9001             STR      R0,[SP, #+4]
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       HAL_GPIO_Init
    178          
    179            /* SPI MISO pin configuration */
    180            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   0000005A   0x2001             MOVS     R0,#+1
    181            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    182            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   0000005C   0xA901             ADD      R1,SP,#+4
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x2040             MOVS     R0,#+64
   \   00000062   0x9001             STR      R0,[SP, #+4]
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       HAL_GPIO_Init
    183          
    184            /* SPI configuration -------------------------------------------------------*/
    185            //SPI_I2S_DeInit(SPI1);
    186            
    187            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   0000006E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000072   0x6081             STR      R1,[R0, #+8]
    188            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000074   0xF44F 0x6170      MOV      R1,#+3840
   \   00000078   0x60C1             STR      R1,[R0, #+12]
    189            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x6101             STR      R1,[R0, #+16]
    190            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    191            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    192            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    193            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    194            spi1_ins.Init.CRCPolynomial = 7;
    195            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   0000007E   0x.... 0x....      LDR.W    R4,??DataTable13  ;; 0x40021000
   \   00000082   0x6141             STR      R1,[R0, #+20]
   \   00000084   0xF44F 0x7100      MOV      R1,#+512
   \   00000088   0x6181             STR      R1,[R0, #+24]
   \   0000008A   0x2128             MOVS     R1,#+40
   \   0000008C   0x61C1             STR      R1,[R0, #+28]
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x6201             STR      R1,[R0, #+32]
   \   00000092   0x2107             MOVS     R1,#+7
   \   00000094   0x62C1             STR      R1,[R0, #+44]
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x6041             STR      R1,[R0, #+4]
    196            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   0000009A   0x.... 0x....      BL       HAL_SPI_Init
    197            {
    198              /* Initialization Error */
    199              //Error_Handler();
    200            }
    201            
    202           
    203            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   0000009E   0x2008             MOVS     R0,#+8
    204            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    205            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    206            GPIO_InitStructure.Pull = GPIO_PULLUP;
    207            //GPIO_InitStructure.Alternate 
    208            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000A0   0xA901             ADD      R1,SP,#+4
   \   000000A2   0x9001             STR      R0,[SP, #+4]
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x9002             STR      R0,[SP, #+8]
   \   000000A8   0x2002             MOVS     R0,#+2
   \   000000AA   0x9004             STR      R0,[SP, #+16]
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x9003             STR      R0,[SP, #+12]
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       HAL_GPIO_Init
    209          
    210            /* Deselect : Chip Select high */
    211            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0x2108             MOVS     R1,#+8
   \   000000BA   0x4620             MOV      R0,R4
   \   000000BC   0x.... 0x....      BL       HAL_GPIO_WritePin
    212             /* sop1hc */
    213            /* Configure the SPI interrupt priority */
    214            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000C0   0x2200             MOVS     R2,#+0
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x2023             MOVS     R0,#+35
   \   000000C6   0x.... 0x....      BL       HAL_NVIC_SetPriority
    215          
    216            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000CA   0x2023             MOVS     R0,#+35
   \   000000CC   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    217            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    218            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    219          
    220            /* Enable SPI1  */
    221            //__HAL_SPI_ENABLE(SPI1);
    222          
    223          }
   \   000000D0   0xB006             ADD      SP,SP,#+24
   \   000000D2   0xBD10             POP      {R4,PC}          ;; return
    224          

   \                                 In section .text, align 2, keep-with-next
    225          void mySPI_SendData(uint8_t adress, uint8_t data)
    226          {
   \                     mySPI_SendData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable12_3
   \   00000004   0x6812             LDR      R2,[R2, #+0]
    227           
    228          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x6893             LDR      R3,[R2, #+8]
   \   00000008   0x079B             LSLS     R3,R3,#+30
   \   0000000A   0xD5FC             BPL.N    ??mySPI_SendData_0
    229          SPI_I2S_SendData(SPI1, adress);
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable12_4  ;; 0x4001300c
   \   00000010   0x6018             STR      R0,[R3, #+0]
    230          
    231          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   00000012   0x6890             LDR      R0,[R2, #+8]
   \   00000014   0x07C0             LSLS     R0,R0,#+31
   \   00000016   0xD5FC             BPL.N    ??mySPI_SendData_1
    232          SPI_I2S_ReceiveData(SPI1);
   \   00000018   0x6818             LDR      R0,[R3, #+0]
    233          
    234          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   0000001A   0x6890             LDR      R0,[R2, #+8]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD4FC             BMI.N    ??mySPI_SendData_2
    235          SPI_I2S_SendData(SPI1, data);
   \   00000020   0x6019             STR      R1,[R3, #+0]
    236          
    237          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000022   0x6890             LDR      R0,[R2, #+8]
   \   00000024   0x07C0             LSLS     R0,R0,#+31
   \   00000026   0xD4FC             BMI.N    ??mySPI_SendData_3
    238          SPI_I2S_ReceiveData(SPI1);
   \   00000028   0x6818             LDR      R0,[R3, #+0]
    239           
    240          }
   \   0000002A   0x4770             BX       LR               ;; return
    241          
    242          /**
    243            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    244            * @param  None
    245            * @retval None
    246          */
    247          

   \                                 In section .text, align 2, keep-with-next
    248          void SPI1_IRQHandler(void)
    249          {  
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    250                int16_t tmpTest;
    251          	  static uint8_t stLR,stLROld;
                 	                 ^
Warning[Pe177]: variable "stLR" was declared but never referenced
    252          	
    253          	  /* SPI in mode Receiver ----------------------------------------------------*/
    254          	  if(
    255          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    256          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    257          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable12_5
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xF140 0x80E4      BPL.W    ??SPI1_IRQHandler_0
    258          	  {
    259          	
    260          
    261          	   tmpTest =  (int16_t)SPI_I2S_ReceiveData(SPI1);
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable12_4  ;; 0x4001300c
   \   00000014   0x6800             LDR      R0,[R0, #+0]
    262          	
    263          	   /* Left-Right Mic data */
    264          	   //stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    265          	
    266          		if (I2S2_stLR==GPIO_PIN_SET)
   \   00000016   0xF894 0x1085      LDRB     R1,[R4, #+133]
   \   0000001A   0xF894 0x2083      LDRB     R2,[R4, #+131]
   \   0000001E   0xB200             SXTH     R0,R0
   \   00000020   0x2A01             CMP      R2,#+1
   \   00000022   0xD168             BNE.N    ??SPI1_IRQHandler_1
    267          		{
    268          		       if(stLROld==GPIO_PIN_SET) 
   \   00000024   0x2901             CMP      R1,#+1
   \   00000026   0xF040 0x80D7      BNE.W    ??SPI1_IRQHandler_0
    269          		       {
    270          				   vRawSens1 = (tmpTest);
   \   0000002A   0xF8A4 0x008A      STRH     R0,[R4, #+138]
    271          			       WaveRec_idxTest++;
   \   0000002E   0xF8B4 0x0088      LDRH     R0,[R4, #+136]
    272          				   /* Recording Audio Data */						 
    273          					if (WaveRec_idxSens1<AUDIO_OUT_BUFFER_SIZE) 
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable12_6
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0xF8A4 0x0088      STRH     R0,[R4, #+136]
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable12_7
   \   00000040   0x8802             LDRH     R2,[R0, #+0]
   \   00000042   0x7809             LDRB     R1,[R1, #+0]
   \   00000044   0xF5B2 0x6F80      CMP      R2,#+1024
   \   00000048   0xDA22             BGE.N    ??SPI1_IRQHandler_2
    274          					{
    275          					   switch (buffer_switch)
   \   0000004A   0xB119             CBZ.N    R1,??SPI1_IRQHandler_3
   \   0000004C   0x2902             CMP      R1,#+2
   \   0000004E   0xD017             BEQ.N    ??SPI1_IRQHandler_4
   \   00000050   0xD30B             BCC.N    ??SPI1_IRQHandler_5
   \   00000052   0xE042             B.N      ??SPI1_IRQHandler_6
    276          					   {
    277          							case BUF1_PLAY:
    278          									Buffer2.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;								
   \                     ??SPI1_IRQHandler_3: (+1)
   \   00000054   0xF9B4 0x108A      LDRSH    R1,[R4, #+138]
   \   00000058   0x8803             LDRH     R3,[R0, #+0]
   \   0000005A   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   0000005E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000062   0xF502 0x4280      ADD      R2,R2,#+16384
   \   00000066   0x8011             STRH     R1,[R2, #+0]
    279          									break;
    280          							case BUF2_PLAY:
    281          									Buffer3.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;
    282          									break;
   \   00000068   0xE037             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_5: (+1)
   \   0000006A   0xF9B4 0x108A      LDRSH    R1,[R4, #+138]
   \   0000006E   0x8803             LDRH     R3,[R0, #+0]
   \   00000070   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   00000074   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000078   0xF502 0x4200      ADD      R2,R2,#+32768
   \   0000007C   0x8011             STRH     R1,[R2, #+0]
   \   0000007E   0xE02C             B.N      ??SPI1_IRQHandler_6
    283          							case BUF3_PLAY:
    284          									Buffer1.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;									
   \                     ??SPI1_IRQHandler_4: (+1)
   \   00000080   0xF9B4 0x108A      LDRSH    R1,[R4, #+138]
   \   00000084   0x8803             LDRH     R3,[R0, #+0]
   \   00000086   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   0000008A   0xF822 0x1013      STRH     R1,[R2, R3, LSL #+1]
    285          									break;
    286          							default:
    287          									break; 
    288          					   
    289          					   }
    290          					  
    291          					}
    292          					else
    293          					{
    294          						switch (buffer_switch)
    295          						{
    296          						    case BUF1_PLAY:
    297          						                    Buffer1.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;//vRawSens1;									
    298          						                    break;
   \   0000008E   0xE024             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_2: (+1)
   \   00000090   0xB119             CBZ.N    R1,??SPI1_IRQHandler_7
   \   00000092   0x2902             CMP      R1,#+2
   \   00000094   0xD015             BEQ.N    ??SPI1_IRQHandler_8
   \   00000096   0xD30A             BCC.N    ??SPI1_IRQHandler_9
   \   00000098   0xE01F             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_7: (+1)
   \   0000009A   0xF9B4 0x108A      LDRSH    R1,[R4, #+138]
   \   0000009E   0x8803             LDRH     R3,[R0, #+0]
   \   000000A0   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   000000A4   0x059B             LSLS     R3,R3,#+22
   \   000000A6   0x0D9B             LSRS     R3,R3,#+22
   \   000000A8   0xF822 0x1013      STRH     R1,[R2, R3, LSL #+1]
   \   000000AC   0xE015             B.N      ??SPI1_IRQHandler_6
    299          						    case BUF2_PLAY:
    300          						                    Buffer2.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;//vRawSens1;	
   \                     ??SPI1_IRQHandler_9: (+1)
   \   000000AE   0x8802             LDRH     R2,[R0, #+0]
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000B4   0x0592             LSLS     R2,R2,#+22
   \   000000B6   0x0D92             LSRS     R2,R2,#+22
   \   000000B8   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000BC   0xF501 0x4180      ADD      R1,R1,#+16384
   \   000000C0   0xE008             B.N      ??SPI1_IRQHandler_10
    301          						                    break;
    302          						    case BUF3_PLAY:
    303          						                    Buffer3.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;//vRawSens1;										
   \                     ??SPI1_IRQHandler_8: (+1)
   \   000000C2   0x8802             LDRH     R2,[R0, #+0]
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000C8   0x0592             LSLS     R2,R2,#+22
   \   000000CA   0x0D92             LSRS     R2,R2,#+22
   \   000000CC   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000D0   0xF501 0x4100      ADD      R1,R1,#+32768
   \                     ??SPI1_IRQHandler_10: (+1)
   \   000000D4   0xF9B4 0x208A      LDRSH    R2,[R4, #+138]
   \   000000D8   0x800A             STRH     R2,[R1, #+0]
    304          						                    break;
    305          						    default:
    306          						                    break; 
    307          						}
    308          					}
    309          
    310          					 WaveRec_idxSens1++;
   \                     ??SPI1_IRQHandler_6: (+1)
   \   000000DA   0x8801             LDRH     R1,[R0, #+0]
   \   000000DC   0x1C49             ADDS     R1,R1,#+1
   \   000000DE   0x8001             STRH     R1,[R0, #+0]
    311          
    312          			if ((WaveRec_idxSens1 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x01;
   \   000000E0   0x8800             LDRH     R0,[R0, #+0]
   \   000000E2   0x210F             MOVS     R1,#+15
   \   000000E4   0x4208             TST      R0,R1
   \   000000E6   0xD171             BNE.N    ??SPI1_IRQHandler_11
   \   000000E8   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000000EC   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000000F0   0xF884 0x0080      STRB     R0,[R4, #+128]
    313          
    314          			if (flgRacing==0x3F)  SubFrameFinished();                    
   \   000000F4   0xE06A             B.N      ??SPI1_IRQHandler_11
    315          		       	}
    316          		}
    317          		else
    318          		{		
    319                    if ((stLROld==GPIO_PIN_RESET))  
   \                     ??SPI1_IRQHandler_1: (+1)
   \   000000F6   0x2900             CMP      R1,#+0
   \   000000F8   0xD16E             BNE.N    ??SPI1_IRQHandler_0
    320                    {
    321          				vRawSens2 = (tmpTest);
   \   000000FA   0xF8A4 0x008C      STRH     R0,[R4, #+140]
    322          				WaveRec_idxTest++;
   \   000000FE   0xF8B4 0x0088      LDRH     R0,[R4, #+136]
    323          				if (WaveRec_idxSens2<AUDIO_OUT_BUFFER_SIZE)
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable12_6
   \   00000106   0x1C40             ADDS     R0,R0,#+1
   \   00000108   0xF8A4 0x0088      STRH     R0,[R4, #+136]
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   00000110   0x8802             LDRH     R2,[R0, #+0]
   \   00000112   0x7809             LDRB     R1,[R1, #+0]
   \   00000114   0xF5B2 0x6F80      CMP      R2,#+1024
   \   00000118   0xDA24             BGE.N    ??SPI1_IRQHandler_12
    324          				{
    325          					/* Recording Audio Data */						 
    326          					switch (buffer_switch)
   \   0000011A   0xB119             CBZ.N    R1,??SPI1_IRQHandler_13
   \   0000011C   0x2902             CMP      R1,#+2
   \   0000011E   0xD017             BEQ.N    ??SPI1_IRQHandler_14
   \   00000120   0xD30B             BCC.N    ??SPI1_IRQHandler_15
   \   00000122   0xE046             B.N      ??SPI1_IRQHandler_16
    327          					{
    328          						case BUF1_PLAY:
    329          							Buffer2.bufMIC2[WaveRec_idxSens2] = vRawSens2;								
   \                     ??SPI1_IRQHandler_13: (+1)
   \   00000124   0xF9B4 0x108C      LDRSH    R1,[R4, #+140]
   \   00000128   0x8803             LDRH     R3,[R0, #+0]
   \   0000012A   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   0000012E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000132   0xF502 0x4290      ADD      R2,R2,#+18432
   \   00000136   0x8011             STRH     R1,[R2, #+0]
    330          							break;
    331          						case BUF2_PLAY:
    332          							Buffer3.bufMIC2[WaveRec_idxSens2] = vRawSens2;
    333          							break;
   \   00000138   0xE03B             B.N      ??SPI1_IRQHandler_16
   \                     ??SPI1_IRQHandler_15: (+1)
   \   0000013A   0xF9B4 0x108C      LDRSH    R1,[R4, #+140]
   \   0000013E   0x8803             LDRH     R3,[R0, #+0]
   \   00000140   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   00000144   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000148   0xF502 0x4208      ADD      R2,R2,#+34816
   \   0000014C   0x8011             STRH     R1,[R2, #+0]
   \   0000014E   0xE030             B.N      ??SPI1_IRQHandler_16
    334          						case BUF3_PLAY:
    335          							Buffer1.bufMIC2[WaveRec_idxSens2] = vRawSens2;									
   \                     ??SPI1_IRQHandler_14: (+1)
   \   00000150   0xF9B4 0x108C      LDRSH    R1,[R4, #+140]
   \   00000154   0x8803             LDRH     R3,[R0, #+0]
   \   00000156   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   0000015A   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000015E   0xF8A2 0x1800      STRH     R1,[R2, #+2048]
    336          							break;
   \   00000162   0xE026             B.N      ??SPI1_IRQHandler_16
    337          						default:
    338          							break; 
    339          
    340          				        }
    341          					
    342                           }
    343                           else
    344                           {
    345          
    346          					 /* Recording Audio Data */ 					  
    347          					 switch (buffer_switch)
   \                     ??SPI1_IRQHandler_12: (+1)
   \   00000164   0xB119             CBZ.N    R1,??SPI1_IRQHandler_17
   \   00000166   0x2902             CMP      R1,#+2
   \   00000168   0xD017             BEQ.N    ??SPI1_IRQHandler_18
   \   0000016A   0xD30C             BCC.N    ??SPI1_IRQHandler_19
   \   0000016C   0xE021             B.N      ??SPI1_IRQHandler_16
    348          					 {
    349          						 case BUF1_PLAY:
    350          							 Buffer1.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;								 
   \                     ??SPI1_IRQHandler_17: (+1)
   \   0000016E   0x8802             LDRH     R2,[R0, #+0]
   \   00000170   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000174   0x0592             LSLS     R2,R2,#+22
   \   00000176   0x0D92             LSRS     R2,R2,#+22
   \   00000178   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   0000017C   0xF9B4 0x208C      LDRSH    R2,[R4, #+140]
   \   00000180   0xF8A1 0x2800      STRH     R2,[R1, #+2048]
    351          							 break;
   \   00000184   0xE015             B.N      ??SPI1_IRQHandler_16
    352          						 case BUF2_PLAY:
    353          							 Buffer2.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;
   \                     ??SPI1_IRQHandler_19: (+1)
   \   00000186   0x8802             LDRH     R2,[R0, #+0]
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   0000018C   0x0592             LSLS     R2,R2,#+22
   \   0000018E   0x0D92             LSRS     R2,R2,#+22
   \   00000190   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   00000194   0xF501 0x4190      ADD      R1,R1,#+18432
   \   00000198   0xE008             B.N      ??SPI1_IRQHandler_20
    354          							 break;
    355          						 case BUF3_PLAY:
    356          							 Buffer3.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;									 
   \                     ??SPI1_IRQHandler_18: (+1)
   \   0000019A   0x8802             LDRH     R2,[R0, #+0]
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000001A0   0x0592             LSLS     R2,R2,#+22
   \   000001A2   0x0D92             LSRS     R2,R2,#+22
   \   000001A4   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000001A8   0xF501 0x4108      ADD      R1,R1,#+34816
   \                     ??SPI1_IRQHandler_20: (+1)
   \   000001AC   0xF9B4 0x208C      LDRSH    R2,[R4, #+140]
   \   000001B0   0x800A             STRH     R2,[R1, #+0]
    357          							 break;
    358          						 default:
    359          							 break; 
    360          					
    361          					}
    362          
    363          			       }
    364          
    365          				    WaveRec_idxSens2++;
   \                     ??SPI1_IRQHandler_16: (+1)
   \   000001B2   0x8801             LDRH     R1,[R0, #+0]
   \   000001B4   0x1C49             ADDS     R1,R1,#+1
   \   000001B6   0x8001             STRH     R1,[R0, #+0]
    366          
    367          			if ((WaveRec_idxSens2 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x02;
   \   000001B8   0x8800             LDRH     R0,[R0, #+0]
   \   000001BA   0x210F             MOVS     R1,#+15
   \   000001BC   0x4208             TST      R0,R1
   \   000001BE   0xD105             BNE.N    ??SPI1_IRQHandler_11
   \   000001C0   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000001C4   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000001C8   0xF884 0x0080      STRB     R0,[R4, #+128]
    368          
    369          			if (flgRacing==0x3F)  SubFrameFinished();			      
   \                     ??SPI1_IRQHandler_11: (+1)
   \   000001CC   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000001D0   0x283F             CMP      R0,#+63
   \   000001D2   0xBF08             IT       EQ 
   \   000001D4   0x.... 0x....      BLEQ     SubFrameFinished
    370          					
    371          
    372          			  }
    373          		
    374          		} 	
    375          
    376          		
    377          	}
    378          	   
    379          
    380          #if 0
    381                 if (iSDO12<4*AUDIO_OUT_BUFFER_SIZE)
    382          	   {
    383                     TestSDO12[iSDO12++]=tmpTest;
    384          	   }
    385          	   else
    386          	   {
    387                     iSDO12=0;
    388          	   }
    389          		if ((WaveRec_idxSens1 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens2 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    390          	//			  &&(stLR!=stLROld))
    391          		{
    392          	/*-------------------------------------------------------------------------------------------------------------
    393          				  
    394          		Sequence  Record Data					  Processing Data				  Player Data
    395          				  
    396          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    397          				  
    398          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    399          				  
    400          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    401          	 ---------------------------------------------------------------------------------------------------------------*/
    402          				  /* Recording Audio Data */						 
    403          				   switch (buffer_switch)
    404          				   {
    405          							case BUF1_PLAY:
    406          
    407                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    408          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    409          							    else
    410          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    411          
    412          	
    413          									break;
    414          							case BUF2_PLAY:
    415                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    416          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    417          							    else
    418          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;	
    419          
    420          									break;
    421          							case BUF3_PLAY:
    422                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    423          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    424          							    else
    425          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    426          
    427          									break;
    428          							default:
    429          									break; 
    430          				   }
    431          			
    432          		 } 
    433          #endif		
    434          
    435          		/* Update Old value */	  
    436          		stLROld=I2S2_stLR;
   \                     ??SPI1_IRQHandler_0: (+1)
   \   000001D8   0xF894 0x0083      LDRB     R0,[R4, #+131]
   \   000001DC   0xF884 0x0085      STRB     R0,[R4, #+133]
    437          
    438          				 
    439          } 	 
   \   000001E0   0xBD10             POP      {R4,PC}          ;; return
    440          
    441          
    442          
    443          
    444          /**
    445            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    446            * @param  None
    447            * @retval None
    448          */
    449          

   \                                 In section .text, align 2, keep-with-next
    450          void SPI2_IRQHandler(void)
    451          {      
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    452              int16_t app;
    453              
    454          
    455            /* Check if data are available in SPI Data register */
    456             if (
    457          //	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    458          //   	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    459             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    460             	  )
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable12_5
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x6C20             LDR      R0,[R4, #+64]
   \   0000000A   0x6840             LDR      R0,[R0, #+4]
   \   0000000C   0x0640             LSLS     R0,R0,#+25
   \   0000000E   0xF140 0x80D7      BPL.W    ??SPI2_IRQHandler_0
    461             {
    462              
    463               app = (int16_t)SPI_I2S_ReceiveData(SPI2);   
    464               //SPI_I2S_SendData(SPI2, 3333);
    465          
    466          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable13_3  ;; 0x4000380c
   \   00000018   0x6805             LDR      R5,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x40020000
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000022   0xF884 0x0083      STRB     R0,[R4, #+131]
    467          
    468          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   00000026   0xF894 0x0083      LDRB     R0,[R4, #+131]
   \   0000002A   0xB22D             SXTH     R5,R5
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xF894 0x0084      LDRB     R0,[R4, #+132]
   \   00000032   0xD15E             BNE.N    ??SPI2_IRQHandler_1
    469          	 {		
    470          		if ((I2S2_stLROld==GPIO_PIN_RESET)) 
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xF040 0x80BF      BNE.W    ??SPI2_IRQHandler_2
    471          		{
    472          			vRawSens3 = app;
    473          			if (WaveRec_idxSens3 < AUDIO_OUT_BUFFER_SIZE)
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable13_4
   \   0000003E   0xF8A4 0x5090      STRH     R5,[R4, #+144]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable12_6
   \   00000046   0x8802             LDRH     R2,[R0, #+0]
   \   00000048   0x7809             LDRB     R1,[R1, #+0]
   \   0000004A   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000004E   0xDA1F             BGE.N    ??SPI2_IRQHandler_3
    474          			{
    475          				switch (buffer_switch)
   \   00000050   0xB119             CBZ.N    R1,??SPI2_IRQHandler_4
   \   00000052   0x2902             CMP      R1,#+2
   \   00000054   0xD013             BEQ.N    ??SPI2_IRQHandler_5
   \   00000056   0xD309             BCC.N    ??SPI2_IRQHandler_6
   \   00000058   0xE03D             B.N      ??SPI2_IRQHandler_7
    476          				{
    477          					case BUF1_PLAY:
    478          						Buffer2.bufMIC3[WaveRec_idxSens3] = vRawSens3;								
   \                     ??SPI2_IRQHandler_4: (+1)
   \   0000005A   0x8803             LDRH     R3,[R0, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   00000060   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000064   0xF502 0x42A0      ADD      R2,R2,#+20480
   \   00000068   0x8015             STRH     R5,[R2, #+0]
    479          						break;
    480          					case BUF2_PLAY:
    481          						Buffer3.bufMIC3[WaveRec_idxSens3] = vRawSens3;
    482          						break;
    483          					case BUF3_PLAY:
    484          						Buffer1.bufMIC3[WaveRec_idxSens3] = vRawSens3;									
    485          						break;
   \   0000006A   0xE034             B.N      ??SPI2_IRQHandler_7
   \                     ??SPI2_IRQHandler_6: (+1)
   \   0000006C   0x8803             LDRH     R3,[R0, #+0]
   \   0000006E   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   00000072   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000076   0xF502 0x4210      ADD      R2,R2,#+36864
   \   0000007A   0x8015             STRH     R5,[R2, #+0]
   \   0000007C   0xE02B             B.N      ??SPI2_IRQHandler_7
   \                     ??SPI2_IRQHandler_5: (+1)
   \   0000007E   0x8803             LDRH     R3,[R0, #+0]
   \   00000080   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   00000084   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000088   0xF502 0x5280      ADD      R2,R2,#+4096
   \   0000008C   0x8015             STRH     R5,[R2, #+0]
   \   0000008E   0xE022             B.N      ??SPI2_IRQHandler_7
    486          					default:
    487          						break; 
    488          				}
    489          				
    490          			}
    491          			else
    492          			{
    493          				switch (buffer_switch)
   \                     ??SPI2_IRQHandler_3: (+1)
   \   00000090   0xB119             CBZ.N    R1,??SPI2_IRQHandler_8
   \   00000092   0x2902             CMP      R1,#+2
   \   00000094   0xD015             BEQ.N    ??SPI2_IRQHandler_9
   \   00000096   0xD30A             BCC.N    ??SPI2_IRQHandler_10
   \   00000098   0xE01D             B.N      ??SPI2_IRQHandler_7
    494          				{
    495          					case BUF1_PLAY:
    496          						Buffer1.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;								
   \                     ??SPI2_IRQHandler_8: (+1)
   \   0000009A   0x8802             LDRH     R2,[R0, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000A0   0x0592             LSLS     R2,R2,#+22
   \   000000A2   0x0D92             LSRS     R2,R2,#+22
   \   000000A4   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000A8   0xF501 0x5180      ADD      R1,R1,#+4096
   \   000000AC   0xE012             B.N      ??SPI2_IRQHandler_11
    497          						break;
    498          					case BUF2_PLAY:
    499          						Buffer2.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;
   \                     ??SPI2_IRQHandler_10: (+1)
   \   000000AE   0x8802             LDRH     R2,[R0, #+0]
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000B4   0x0592             LSLS     R2,R2,#+22
   \   000000B6   0x0D92             LSRS     R2,R2,#+22
   \   000000B8   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000BC   0xF501 0x41A0      ADD      R1,R1,#+20480
   \   000000C0   0xE008             B.N      ??SPI2_IRQHandler_11
    500          						break;
    501          					case BUF3_PLAY:
    502          						Buffer3.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;									
   \                     ??SPI2_IRQHandler_9: (+1)
   \   000000C2   0x8802             LDRH     R2,[R0, #+0]
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000C8   0x0592             LSLS     R2,R2,#+22
   \   000000CA   0x0D92             LSRS     R2,R2,#+22
   \   000000CC   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000D0   0xF501 0x4110      ADD      R1,R1,#+36864
   \                     ??SPI2_IRQHandler_11: (+1)
   \   000000D4   0x800D             STRH     R5,[R1, #+0]
    503          						break;
    504          					default:
    505          						break; 
    506          				}
    507          			}
    508          
    509          		    WaveRec_idxSens3++;
   \                     ??SPI2_IRQHandler_7: (+1)
   \   000000D6   0x8801             LDRH     R1,[R0, #+0]
   \   000000D8   0x1C49             ADDS     R1,R1,#+1
   \   000000DA   0x8001             STRH     R1,[R0, #+0]
    510          
    511          			if ((WaveRec_idxSens3 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x04;
   \   000000DC   0x8800             LDRH     R0,[R0, #+0]
   \   000000DE   0x210F             MOVS     R1,#+15
   \   000000E0   0x4208             TST      R0,R1
   \   000000E2   0xD163             BNE.N    ??SPI2_IRQHandler_12
   \   000000E4   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000000E8   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000EC   0xF884 0x0080      STRB     R0,[R4, #+128]
    512          
    513          			if (flgRacing==0x3F)  SubFrameFinished();
   \   000000F0   0xE05C             B.N      ??SPI2_IRQHandler_12
    514          			
    515          		}
    516          		
    517          	 }
    518          	 else
    519          	 {
    520                      if ((I2S2_stLROld==GPIO_PIN_SET))   
   \                     ??SPI2_IRQHandler_1: (+1)
   \   000000F2   0x2801             CMP      R0,#+1
   \   000000F4   0xD160             BNE.N    ??SPI2_IRQHandler_2
    521                      {
    522                            vRawSens4 =app;
    523                            if ((WaveRec_idxSens4<AUDIO_OUT_BUFFER_SIZE))
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable16
   \   000000FA   0xF8A4 0x508E      STRH     R5,[R4, #+142]
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable12_6
   \   00000102   0x8802             LDRH     R2,[R0, #+0]
   \   00000104   0x7809             LDRB     R1,[R1, #+0]
   \   00000106   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000010A   0xDA1F             BGE.N    ??SPI2_IRQHandler_13
    524                            {
    525          	                    switch (buffer_switch)
   \   0000010C   0xB119             CBZ.N    R1,??SPI2_IRQHandler_14
   \   0000010E   0x2902             CMP      R1,#+2
   \   00000110   0xD013             BEQ.N    ??SPI2_IRQHandler_15
   \   00000112   0xD309             BCC.N    ??SPI2_IRQHandler_16
   \   00000114   0xE03D             B.N      ??SPI2_IRQHandler_17
    526          	                    {	 
    527          	                        case BUF1_PLAY:
    528          	                                Buffer2.bufMIC4[WaveRec_idxSens4] = vRawSens4;								
   \                     ??SPI2_IRQHandler_14: (+1)
   \   00000116   0x8803             LDRH     R3,[R0, #+0]
   \   00000118   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   0000011C   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000120   0xF502 0x42B0      ADD      R2,R2,#+22528
   \   00000124   0x8015             STRH     R5,[R2, #+0]
    529          	                                break;
    530          	                        case BUF2_PLAY:
    531          	                                Buffer3.bufMIC4[WaveRec_idxSens4] = vRawSens4;
    532          	                                break;
    533          	                        case BUF3_PLAY:
    534          	                                Buffer1.bufMIC4[WaveRec_idxSens4] = vRawSens4;									
    535          	                                break;
   \   00000126   0xE034             B.N      ??SPI2_IRQHandler_17
   \                     ??SPI2_IRQHandler_16: (+1)
   \   00000128   0x8803             LDRH     R3,[R0, #+0]
   \   0000012A   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   0000012E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000132   0xF502 0x4218      ADD      R2,R2,#+38912
   \   00000136   0x8015             STRH     R5,[R2, #+0]
   \   00000138   0xE02B             B.N      ??SPI2_IRQHandler_17
   \                     ??SPI2_IRQHandler_15: (+1)
   \   0000013A   0x8803             LDRH     R3,[R0, #+0]
   \   0000013C   0x.... 0x....      LDR.W    R2,??DataTable13_1
   \   00000140   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000144   0xF502 0x52C0      ADD      R2,R2,#+6144
   \   00000148   0x8015             STRH     R5,[R2, #+0]
   \   0000014A   0xE022             B.N      ??SPI2_IRQHandler_17
    536          	                        default:
    537          	                                break; 
    538          	                    }
    539          
    540          						
    541                            }
    542                            else
    543                            {
    544                                switch (buffer_switch)
   \                     ??SPI2_IRQHandler_13: (+1)
   \   0000014C   0xB119             CBZ.N    R1,??SPI2_IRQHandler_18
   \   0000014E   0x2902             CMP      R1,#+2
   \   00000150   0xD015             BEQ.N    ??SPI2_IRQHandler_19
   \   00000152   0xD30A             BCC.N    ??SPI2_IRQHandler_20
   \   00000154   0xE01D             B.N      ??SPI2_IRQHandler_17
    545                                {	 
    546                                    case BUF1_PLAY:
    547                                            Buffer1.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;								
   \                     ??SPI2_IRQHandler_18: (+1)
   \   00000156   0x8802             LDRH     R2,[R0, #+0]
   \   00000158   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   0000015C   0x0592             LSLS     R2,R2,#+22
   \   0000015E   0x0D92             LSRS     R2,R2,#+22
   \   00000160   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   00000164   0xF501 0x51C0      ADD      R1,R1,#+6144
   \   00000168   0xE012             B.N      ??SPI2_IRQHandler_21
    548                                            break;
    549                                    case BUF2_PLAY:
    550                                            Buffer2.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;
   \                     ??SPI2_IRQHandler_20: (+1)
   \   0000016A   0x8802             LDRH     R2,[R0, #+0]
   \   0000016C   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000170   0x0592             LSLS     R2,R2,#+22
   \   00000172   0x0D92             LSRS     R2,R2,#+22
   \   00000174   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   00000178   0xF501 0x41B0      ADD      R1,R1,#+22528
   \   0000017C   0xE008             B.N      ??SPI2_IRQHandler_21
    551                                            break;
    552                                    case BUF3_PLAY:
    553                                            Buffer3.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;									
   \                     ??SPI2_IRQHandler_19: (+1)
   \   0000017E   0x8802             LDRH     R2,[R0, #+0]
   \   00000180   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000184   0x0592             LSLS     R2,R2,#+22
   \   00000186   0x0D92             LSRS     R2,R2,#+22
   \   00000188   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   0000018C   0xF501 0x4118      ADD      R1,R1,#+38912
   \                     ??SPI2_IRQHandler_21: (+1)
   \   00000190   0x800D             STRH     R5,[R1, #+0]
    554                                            break;
    555                                    default:
    556                                            break; 
    557                                }
    558                              }
    559          				  WaveRec_idxSens4++;
   \                     ??SPI2_IRQHandler_17: (+1)
   \   00000192   0x8801             LDRH     R1,[R0, #+0]
   \   00000194   0x1C49             ADDS     R1,R1,#+1
   \   00000196   0x8001             STRH     R1,[R0, #+0]
    560          
    561          			if ((WaveRec_idxSens4 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x08;
   \   00000198   0x8800             LDRH     R0,[R0, #+0]
   \   0000019A   0x210F             MOVS     R1,#+15
   \   0000019C   0x4208             TST      R0,R1
   \   0000019E   0xD105             BNE.N    ??SPI2_IRQHandler_12
   \   000001A0   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000001A4   0xF040 0x0008      ORR      R0,R0,#0x8
   \   000001A8   0xF884 0x0080      STRB     R0,[R4, #+128]
    562          			if (flgRacing==0x3F)  SubFrameFinished();				  
   \                     ??SPI2_IRQHandler_12: (+1)
   \   000001AC   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000001B0   0x283F             CMP      R0,#+63
   \   000001B2   0xBF08             IT       EQ 
   \   000001B4   0x.... 0x....      BLEQ     SubFrameFinished
    563                              
    564                      }
    565          	 }//else
    566          
    567          	 
    568          #if 0
    569          	  if (iSDO34<4*AUDIO_OUT_BUFFER_SIZE)
    570          	 {
    571          		 TestSDO34[iSDO34++]=app;
    572          	 }
    573          	 else
    574          	 {
    575          		 iSDO34=0;
    576          	 }
    577          
    578          	 if ((WaveRec_idxSens3 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens4 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    579          //             &&(I2S2_stLR!=I2S2_stLROld))
    580          	 {
    581          /*-------------------------------------------------------------------------------------------------------------
    582          			  
    583          	Sequence  Record Data                     Processing Data                 Player Data
    584          			  
    585          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    586          			  
    587          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    588          			  
    589          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    590           ---------------------------------------------------------------------------------------------------------------*/
    591          		/* Recording Audio Data */			             
    592          		 switch (buffer_switch)
    593          		 {
    594          			  case BUF1_PLAY:
    595                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    596                                        Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    597                                    else
    598                                        Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			  
    599          			  break;                     
    600          			  case BUF2_PLAY:
    601                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    602                                        Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    603                                    else
    604                                        Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			   
    605          				  break;
    606          			  case BUF3_PLAY:
    607                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    608                                       Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    609          		          else
    610                                       Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    611          		          break;
    612          			  default:
    613          			     break; 
    614          		 }
    615          		
    616          	 }          
    617          #endif		  
    618          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   000001B8   0xF894 0x0083      LDRB     R0,[R4, #+131]
   \   000001BC   0xF884 0x0084      STRB     R0,[R4, #+132]
    619             }
    620          
    621          }
   \                     ??SPI2_IRQHandler_0: (+1)
   \   000001C0   0xB001             ADD      SP,SP,#+4
   \   000001C2   0xBD30             POP      {R4,R5,PC}       ;; return
    622          
    623          

   \                                 In section .text, align 2, keep-with-next
    624          void SPI4_IRQHandler(void)
    625          {
    626            static uint8_t Main_stLR, Main_stLROld;
    627          
    628          
    629            /* SPI in mode Receiver ----------------------------------------------------*/
    630            if(
    631          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    632          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    633               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xD400             BMI.N    ??SPI4_IRQHandler_0
   \   0000000C   0x4770             BX       LR
    634            {
    635          
    636                  uint16_t test;
    637                  test =  SPI_I2S_ReceiveData(SPI4);
   \                     ??SPI4_IRQHandler_0: (+1)
   \   0000000E   0xB530             PUSH     {R4,R5,LR}
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x4001340c
   \   00000014   0xB081             SUB      SP,SP,#+4
    638          
    639                  /* Left-Right Mic data */
    640                  Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000016   0x2110             MOVS     R1,#+16
   \   00000018   0x.... 0x....      LDR.W    R4,??DataTable12_5
   \   0000001C   0x6805             LDR      R5,[R0, #+0]
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x40020000
   \   00000022   0x.... 0x....      BL       HAL_GPIO_ReadPin
    641          
    642                  /* STM32F746 read data from STA321MP, the data is shifted few bit     */
    643                  /* Data from STA321MP is 32bit formart                                */
    644                  /* SPI is just able to read 16 bit format                             */
    645                  /* Therefore, it needs to correct                                     */
    646                  
    647                  /* ---------------------------+++++++++++++++++++++++++++++++---------*/
    648                  /*                  ______DATAL_____              ______DATAR_____    */
    649                  /*                  _____vRawSens5__              ______vRawSens6_    */       
    650          	if (Main_stLR==GPIO_PIN_SET)
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xB2AD             UXTH     R5,R5
   \   0000002A   0xF884 0x0086      STRB     R0,[R4, #+134]
   \   0000002E   0xF894 0x1087      LDRB     R1,[R4, #+135]
   \   00000032   0xD163             BNE.N    ??SPI4_IRQHandler_1
    651          	{
    652                      if (Main_stLROld==GPIO_PIN_SET)
   \   00000034   0x2901             CMP      R1,#+1
   \   00000036   0xD062             BEQ.N    ??SPI4_IRQHandler_2
    653                      {
    654                         SPI4_stNipple = (test);    
    655                      }
    656                      else
    657                      {
    658                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000038   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   0000003C   0xF9B4 0x1096      LDRSH    R1,[R4, #+150]
    659                         if (WaveRec_idxSens5 < AUDIO_OUT_BUFFER_SIZE)
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable12_6
   \   00000044   0x40C5             LSRS     R5,R5,R0
   \   00000046   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   0000004A   0xF1C0 0x0010      RSB      R0,R0,#+16
   \   0000004E   0xFA01 0xF000      LSL      R0,R1,R0
   \   00000052   0xEA40 0x0105      ORR      R1,R0,R5
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable17_2
   \   0000005A   0xF8A4 0x1092      STRH     R1,[R4, #+146]
   \   0000005E   0x8803             LDRH     R3,[R0, #+0]
   \   00000060   0x7812             LDRB     R2,[R2, #+0]
   \   00000062   0xF5B3 0x6F80      CMP      R3,#+1024
   \   00000066   0xDA18             BGE.N    ??SPI4_IRQHandler_3
    660                         {
    661                              /*-------------------------------------------------------------------------------------------------------------                                             
    662                              Sequence  Record Data                     Processing Data                 Player Data
    663                                                
    664                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    665                                                
    666                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    667                                                
    668                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    669                               ---------------------------------------------------------------------------------------------------------------*/                     
    670                               /* Recording Audio Data */			             
    671                               switch (buffer_switch)
   \   00000068   0xB11A             CBZ.N    R2,??SPI4_IRQHandler_4
   \   0000006A   0x2A02             CMP      R2,#+2
   \   0000006C   0xD00D             BEQ.N    ??SPI4_IRQHandler_5
   \   0000006E   0xD308             BCC.N    ??SPI4_IRQHandler_6
   \   00000070   0xE036             B.N      ??SPI4_IRQHandler_7
    672                               {
    673                                   case BUF1_PLAY:
    674                                       Buffer2.bufMIC5[WaveRec_idxSens5] = vRawSens5;
   \                     ??SPI4_IRQHandler_4: (+1)
   \   00000072   0x8803             LDRH     R3,[R0, #+0]
   \   00000074   0x.... 0x....      LDR.W    R2,??DataTable20
   \   00000078   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000007C   0xF502 0x42C0      ADD      R2,R2,#+24576
   \   00000080   0xE02D             B.N      ??SPI4_IRQHandler_8
    675          
    676                                       break;
    677                                   case BUF2_PLAY:
    678                                       Buffer3.bufMIC5[WaveRec_idxSens5] = vRawSens5;
   \                     ??SPI4_IRQHandler_6: (+1)
   \   00000082   0x.... 0x....      LDR.W    R2,??DataTable20
   \   00000086   0x8803             LDRH     R3,[R0, #+0]
   \   00000088   0xE025             B.N      ??SPI4_IRQHandler_9
    679          
    680                                       break;
    681                                   case BUF3_PLAY:
    682                                       Buffer1.bufMIC5[WaveRec_idxSens5] = vRawSens5;
   \                     ??SPI4_IRQHandler_5: (+1)
   \   0000008A   0x8803             LDRH     R3,[R0, #+0]
   \   0000008C   0x.... 0x....      LDR.W    R2,??DataTable20
   \   00000090   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000094   0xF502 0x5200      ADD      R2,R2,#+8192
   \   00000098   0xE021             B.N      ??SPI4_IRQHandler_8
    683          
    684                                       break;                          
    685                                   default:
    686                                       break;
    687                               }
    688          
    689          					
    690                         }
    691                         else
    692                         {
    693                           /* Recording Audio Data */			             
    694                           switch (buffer_switch)
   \                     ??SPI4_IRQHandler_3: (+1)
   \   0000009A   0xB11A             CBZ.N    R2,??SPI4_IRQHandler_10
   \   0000009C   0x2A02             CMP      R2,#+2
   \   0000009E   0xD015             BEQ.N    ??SPI4_IRQHandler_11
   \   000000A0   0xD30A             BCC.N    ??SPI4_IRQHandler_12
   \   000000A2   0xE01D             B.N      ??SPI4_IRQHandler_7
    695                           {
    696                               case BUF1_PLAY:
    697                                   Buffer1.bufMIC5[WaveRec_idxSens5%AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
   \                     ??SPI4_IRQHandler_10: (+1)
   \   000000A4   0x8803             LDRH     R3,[R0, #+0]
   \   000000A6   0x.... 0x....      LDR.W    R2,??DataTable20
   \   000000AA   0x059B             LSLS     R3,R3,#+22
   \   000000AC   0x0D9B             LSRS     R3,R3,#+22
   \   000000AE   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000B2   0xF502 0x5200      ADD      R2,R2,#+8192
   \   000000B6   0xE012             B.N      ??SPI4_IRQHandler_8
    698          
    699                                   break;
    700                               case BUF2_PLAY:
    701                                   Buffer2.bufMIC5[WaveRec_idxSens5%AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
   \                     ??SPI4_IRQHandler_12: (+1)
   \   000000B8   0x8803             LDRH     R3,[R0, #+0]
   \   000000BA   0x.... 0x....      LDR.W    R2,??DataTable20
   \   000000BE   0x059B             LSLS     R3,R3,#+22
   \   000000C0   0x0D9B             LSRS     R3,R3,#+22
   \   000000C2   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000C6   0xF502 0x42C0      ADD      R2,R2,#+24576
   \   000000CA   0xE008             B.N      ??SPI4_IRQHandler_8
    702          
    703                                   break;
    704                               case BUF3_PLAY:
    705                                   Buffer3.bufMIC5[WaveRec_idxSens5%AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
   \                     ??SPI4_IRQHandler_11: (+1)
   \   000000CC   0x8803             LDRH     R3,[R0, #+0]
   \   000000CE   0x.... 0x....      LDR.W    R2,??DataTable20
   \   000000D2   0x059B             LSLS     R3,R3,#+22
   \   000000D4   0x0D9B             LSRS     R3,R3,#+22
   \                     ??SPI4_IRQHandler_9: (+1)
   \   000000D6   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000DA   0xF502 0x4220      ADD      R2,R2,#+40960
   \                     ??SPI4_IRQHandler_8: (+1)
   \   000000DE   0x8011             STRH     R1,[R2, #+0]
    706          
    707                                   break;                          
    708                               default:
    709                                   break;
    710                           }
    711                         }
    712          
    713          			    WaveRec_idxSens5++;
   \                     ??SPI4_IRQHandler_7: (+1)
   \   000000E0   0x8801             LDRH     R1,[R0, #+0]
   \   000000E2   0x1C49             ADDS     R1,R1,#+1
   \   000000E4   0x8001             STRH     R1,[R0, #+0]
    714          			if ((WaveRec_idxSens5 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x10;
   \   000000E6   0x8800             LDRH     R0,[R0, #+0]
   \   000000E8   0x210F             MOVS     R1,#+15
   \   000000EA   0x4208             TST      R0,R1
   \   000000EC   0xD170             BNE.N    ??SPI4_IRQHandler_13
   \   000000EE   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000000F2   0xF040 0x0010      ORR      R0,R0,#0x10
   \   000000F6   0xF884 0x0080      STRB     R0,[R4, #+128]
    715          
    716          			if (flgRacing==0x3F)  SubFrameFinished();				
   \   000000FA   0xE069             B.N      ??SPI4_IRQHandler_13
    717          	   }
    718                  }
    719          	else
    720          	{
    721                    if (Main_stLROld==GPIO_PIN_RESET)
   \                     ??SPI4_IRQHandler_1: (+1)
   \   000000FC   0xB939             CBNZ.N   R1,??SPI4_IRQHandler_14
    722                    {
    723                        SPI4_stNipple = (test);	  
   \                     ??SPI4_IRQHandler_2: (+1)
   \   000000FE   0xF8A4 0x5096      STRH     R5,[R4, #+150]
    724          
    725                    }
    726                    else
    727                    {
    728                         vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    729                         if (WaveRec_idxSens6 < AUDIO_OUT_BUFFER_SIZE)
    730                         {
    731                              /*-------------------------------------------------------------------------------------------------------------                                             
    732                              Sequence  Record Data                     Processing Data                 Player Data
    733                                                
    734                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    735                                                
    736                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    737                                                
    738                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    739                               ---------------------------------------------------------------------------------------------------------------*/                 
    740                                /* Recording Audio Data */			             
    741                               switch (buffer_switch)
    742                               {
    743                                   case BUF1_PLAY:
    744                                       Buffer2.bufMIC6[WaveRec_idxSens6] = vRawSens6;
    745           
    746                                       break;
    747                                   case BUF2_PLAY:
    748                                       Buffer3.bufMIC6[WaveRec_idxSens6] = vRawSens6;
    749                 
    750                                       break;
    751                                   case BUF3_PLAY:
    752                                       Buffer1.bufMIC6[WaveRec_idxSens6] = vRawSens6;
    753           
    754                                       break;                          
    755                                   default:
    756                                       break;
    757                               }
    758          
    759          
    760          					  
    761                         }
    762                         else
    763                         {
    764                            /* Recording Audio Data */						 
    765                             switch (buffer_switch)
    766                             {
    767                                     case BUF1_PLAY:
    768                                             Buffer1.bufMIC6[WaveRec_idxSens6 % AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
    769                            
    770                                             break;
    771                                     case BUF2_PLAY:
    772                                             Buffer2.bufMIC6[WaveRec_idxSens6 % AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
    773                            
    774                                             break;
    775                                     case BUF3_PLAY:
    776                                             Buffer3.bufMIC6[WaveRec_idxSens6 % AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
    777                            
    778                                             break; 						 
    779                                     default:
    780                                             break;
    781                             }
    782          
    783                          }
    784                         
    785          		       
    786          			   WaveRec_idxSens6++;
    787          			if ((WaveRec_idxSens6 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x20;
    788          
    789          			if (flgRacing==0x3F)  SubFrameFinished();			   
    790                         
    791                    }		
    792          	}
    793          #if 0
    794          	/* The code to store data in to buffer for testing purpose */
    795          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
    796          	{
    797          		TestSDO56[iSDO56++]=test;
    798          	}
    799          	else
    800          	{
    801          		iSDO56=0;
    802          	}
    803          #endif
    804          
    805          	/* Update Old value */	  
    806          	Main_stLROld=Main_stLR;	  
   \   00000102   0xF894 0x0086      LDRB     R0,[R4, #+134]
   \   00000106   0xF884 0x0087      STRB     R0,[R4, #+135]
    807               
    808            }      
    809          }
   \   0000010A   0xB001             ADD      SP,SP,#+4
   \   0000010C   0xBD30             POP      {R4,R5,PC}
   \                     ??SPI4_IRQHandler_14: (+1)
   \   0000010E   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   00000112   0xF9B4 0x1096      LDRSH    R1,[R4, #+150]
   \   00000116   0x.... 0x....      LDR.W    R2,??DataTable12_6
   \   0000011A   0x40C5             LSRS     R5,R5,R0
   \   0000011C   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   00000120   0xF1C0 0x0010      RSB      R0,R0,#+16
   \   00000124   0xFA01 0xF000      LSL      R0,R1,R0
   \   00000128   0xEA40 0x0105      ORR      R1,R0,R5
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   00000130   0xF8A4 0x1094      STRH     R1,[R4, #+148]
   \   00000134   0x8803             LDRH     R3,[R0, #+0]
   \   00000136   0x7812             LDRB     R2,[R2, #+0]
   \   00000138   0xF5B3 0x6F80      CMP      R3,#+1024
   \   0000013C   0xDA18             BGE.N    ??SPI4_IRQHandler_15
   \   0000013E   0xB11A             CBZ.N    R2,??SPI4_IRQHandler_16
   \   00000140   0x2A02             CMP      R2,#+2
   \   00000142   0xD00D             BEQ.N    ??SPI4_IRQHandler_17
   \   00000144   0xD308             BCC.N    ??SPI4_IRQHandler_18
   \   00000146   0xE036             B.N      ??SPI4_IRQHandler_19
   \                     ??SPI4_IRQHandler_16: (+1)
   \   00000148   0x8803             LDRH     R3,[R0, #+0]
   \   0000014A   0x.... 0x....      LDR.W    R2,??DataTable20
   \   0000014E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000152   0xF502 0x42D0      ADD      R2,R2,#+26624
   \   00000156   0xE02D             B.N      ??SPI4_IRQHandler_20
   \                     ??SPI4_IRQHandler_18: (+1)
   \   00000158   0x.... 0x....      LDR.W    R2,??DataTable20
   \   0000015C   0x8803             LDRH     R3,[R0, #+0]
   \   0000015E   0xE025             B.N      ??SPI4_IRQHandler_21
   \                     ??SPI4_IRQHandler_17: (+1)
   \   00000160   0x8803             LDRH     R3,[R0, #+0]
   \   00000162   0x.... 0x....      LDR.W    R2,??DataTable20
   \   00000166   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000016A   0xF502 0x5220      ADD      R2,R2,#+10240
   \   0000016E   0xE021             B.N      ??SPI4_IRQHandler_20
   \                     ??SPI4_IRQHandler_15: (+1)
   \   00000170   0xB11A             CBZ.N    R2,??SPI4_IRQHandler_22
   \   00000172   0x2A02             CMP      R2,#+2
   \   00000174   0xD015             BEQ.N    ??SPI4_IRQHandler_23
   \   00000176   0xD30A             BCC.N    ??SPI4_IRQHandler_24
   \   00000178   0xE01D             B.N      ??SPI4_IRQHandler_19
   \                     ??SPI4_IRQHandler_22: (+1)
   \   0000017A   0x8803             LDRH     R3,[R0, #+0]
   \   0000017C   0x.... 0x....      LDR.W    R2,??DataTable20
   \   00000180   0x059B             LSLS     R3,R3,#+22
   \   00000182   0x0D9B             LSRS     R3,R3,#+22
   \   00000184   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000188   0xF502 0x5220      ADD      R2,R2,#+10240
   \   0000018C   0xE012             B.N      ??SPI4_IRQHandler_20
   \                     ??SPI4_IRQHandler_24: (+1)
   \   0000018E   0x8803             LDRH     R3,[R0, #+0]
   \   00000190   0x.... 0x....      LDR.W    R2,??DataTable20
   \   00000194   0x059B             LSLS     R3,R3,#+22
   \   00000196   0x0D9B             LSRS     R3,R3,#+22
   \   00000198   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000019C   0xF502 0x42D0      ADD      R2,R2,#+26624
   \   000001A0   0xE008             B.N      ??SPI4_IRQHandler_20
   \                     ??SPI4_IRQHandler_23: (+1)
   \   000001A2   0x8803             LDRH     R3,[R0, #+0]
   \   000001A4   0x.... 0x....      LDR.W    R2,??DataTable20
   \   000001A8   0x059B             LSLS     R3,R3,#+22
   \   000001AA   0x0D9B             LSRS     R3,R3,#+22
   \                     ??SPI4_IRQHandler_21: (+1)
   \   000001AC   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000001B0   0xF502 0x4228      ADD      R2,R2,#+43008
   \                     ??SPI4_IRQHandler_20: (+1)
   \   000001B4   0x8011             STRH     R1,[R2, #+0]
   \                     ??SPI4_IRQHandler_19: (+1)
   \   000001B6   0x8801             LDRH     R1,[R0, #+0]
   \   000001B8   0x1C49             ADDS     R1,R1,#+1
   \   000001BA   0x8001             STRH     R1,[R0, #+0]
   \   000001BC   0x8800             LDRH     R0,[R0, #+0]
   \   000001BE   0x210F             MOVS     R1,#+15
   \   000001C0   0x4208             TST      R0,R1
   \   000001C2   0xD105             BNE.N    ??SPI4_IRQHandler_13
   \   000001C4   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000001C8   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000001CC   0xF884 0x0080      STRB     R0,[R4, #+128]
   \                     ??SPI4_IRQHandler_13: (+1)
   \   000001D0   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000001D4   0x283F             CMP      R0,#+63
   \   000001D6   0xBF08             IT       EQ 
   \   000001D8   0x.... 0x....      BLEQ     SubFrameFinished
   \   000001DC   0xF894 0x0086      LDRB     R0,[R4, #+134]
   \   000001E0   0xF884 0x0087      STRB     R0,[R4, #+135]
   \   000001E4   0xB001             ADD      SP,SP,#+4
   \   000001E6   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .bss, align 4
   \                     hi2s1:
   \   00000000                      DS8 64
   \                     hi2s2:
   \   00000040                      DS8 64
   \                     flgRacing:
   \   00000080                      DS8 1
   \                     WaveRecord_flgInt:
   \   00000081                      DS8 1
   \                     SPI4_stPosShft:
   \   00000082                      DS8 1
   \                     I2S2_stLR:
   \   00000083                      DS8 1
   \                     I2S2_stLROld:
   \   00000084                      DS8 1
   \   00000085                      DS8 1
   \   00000086                      DS8 1
   \   00000087                      DS8 1
   \                     WaveRec_idxTest:
   \   00000088                      DS8 2
   \                     vRawSens1:
   \   0000008A                      DS8 2
   \                     vRawSens2:
   \   0000008C                      DS8 2
   \                     vRawSens4:
   \   0000008E                      DS8 2
   \                     vRawSens3:
   \   00000090                      DS8 2
   \                     vRawSens5:
   \   00000092                      DS8 2
   \                     vRawSens6:
   \   00000094                      DS8 2
   \                     SPI4_stNipple:
   \   00000096                      DS8 2

   \                                 In section .bss, align 4
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hdma_spi2_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi3_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi5_rx:
   \   00000000                      DS8 80
   \                     hdma_spi6_rx:
   \   00000050                      DS8 80

   \                                 In section .bss, align 2
   \                     idxFrmPDMMic8:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
   \                     cntStrt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     SPI1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S2_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO34:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO56:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     I2S1_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1
    810          
    811          
    812          
    813          

   \                                 In section .text, align 2, keep-with-next
    814          void SPI5_IRQHandler(void)
    815          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    816            //static uint16_t stNipple;
    817            //static uint8_t stLR, stOder;
    818          
    819            /* USER CODE BEGIN SPI5_IRQn 0 */
    820          
    821            /* USER CODE END SPI5_IRQn 0 */
    822            //HAL_SPI_IRQHandler(&hspi5);
    823            /* USER CODE BEGIN SPI5_IRQn 1 */
    824          
    825            /* USER CODE END SPI5_IRQn 1 */
    826              /* Check if data are available in SPI Data register */
    827            /* SPI in mode Receiver ----------------------------------------------------*/
    828            if(
    829               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    830               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    831               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xD438             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD535             BPL.N    ??SPI5_IRQHandler_0
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD532             BPL.N    ??SPI5_IRQHandler_0
    832            {
    833          
    834          
    835             uint16_t test;
    836             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x4001500c
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
    837             //SPI5->DR = 3333;
    838          
    839            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000020   0xF8B4 0x1134      LDRH     R1,[R4, #+308]
   \   00000024   0xB282             UXTH     R2,R0
   \   00000026   0x0200             LSLS     R0,R0,#+8
   \   00000028   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   0000002C   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   00000030   0xF8A2 0x0144      STRH     R0,[R2, #+324]
   \   00000034   0x1C48             ADDS     R0,R1,#+1
   \   00000036   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    840            
    841            //volume = 64;
    842            
    843            if (idxMic8>=64)
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0x2840             CMP      R0,#+64
   \   0000003E   0xDB1F             BLT.N    ??SPI5_IRQHandler_0
    844            {
    845          	if (buffer_switch != 1)
   \   00000040   0x....             LDR.N    R2,??DataTable12_6
   \   00000042   0xF8D4 0x0140      LDR      R0,[R4, #+320]
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable20_3
   \   0000004A   0xF104 0x03C8      ADD      R3,R4,#+200
   \   0000004E   0x7812             LDRB     R2,[R2, #+0]
   \   00000050   0x780A             LDRB     R2,[R1, #+0]
   \   00000052   0xF8B4 0x1138      LDRH     R1,[R4, #+312]
   \   00000056   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   0000005A   0xF504 0x70A2      ADD      R0,R4,#+324
    846          	{
    847          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    848          						  (PDMFilter_InitStruct *)&Filter[0]);
    849          	}
    850          	else
    851          	{
    852          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    853          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \   0000005E   0x.... 0x....      BL       PDM_Filter_64_LSB
    854          	}
    855          	idxMic8=0;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    856          	cntPos++;
   \   00000068   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   0000006C   0x1C40             ADDS     R0,R0,#+1
   \   0000006E   0xF8A4 0x0138      STRH     R0,[R4, #+312]
    857          	if (cntPos>=256) cntPos=0;
   \   00000072   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   00000076   0x28FF             CMP      R0,#+255
   \   00000078   0xBFC4             ITT      GT 
   \   0000007A   0x2000             MOVGT    R0,#+0
   \   0000007C   0xF8A4 0x0138      STRHGT   R0,[R4, #+312]
    858            }
    859              
    860            }
    861            
    862          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   00000080   0xBD10             POP      {R4,PC}          ;; return
    863          
    864          /* SPI5 init function */
    865          
    866          

   \                                 In section .text, align 2, keep-with-next
    867          void SPI6_IRQHandler(void)
    868          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    869            /* SPI in mode Receiver ----------------------------------------------------*/
    870            if(
    871          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    872               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    873               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   00000006   0x6E60             LDR      R0,[R4, #+100]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0789             LSLS     R1,R1,#+30
   \   0000000C   0xD535             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD532             BPL.N    ??SPI6_IRQHandler_0
    874            {
    875          
    876          
    877               uint16_t test;
    878               test =  SPI_I2S_ReceiveData(SPI6);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable20_4  ;; 0x4001540c
   \   00000018   0x6800             LDR      R0,[R0, #+0]
    879               //SPI6->DR = 3333;
    880          
    881              pDataMic7[idxMic7++] =	HTONS(test);
   \   0000001A   0xF8B4 0x1136      LDRH     R1,[R4, #+310]
   \   0000001E   0xB282             UXTH     R2,R0
   \   00000020   0x0200             LSLS     R0,R0,#+8
   \   00000022   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000026   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   0000002A   0xF8A2 0x01C4      STRH     R0,[R2, #+452]
   \   0000002E   0x1C48             ADDS     R0,R1,#+1
   \   00000030   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    882          
    883              //volume = 64;
    884          
    885              if (idxMic7>=64)
   \   00000034   0xB280             UXTH     R0,R0
   \   00000036   0x2840             CMP      R0,#+64
   \   00000038   0xDB1F             BLT.N    ??SPI6_IRQHandler_0
    886              {
    887                if (buffer_switch != 1)
   \   0000003A   0x....             LDR.N    R2,??DataTable12_6
   \   0000003C   0xF8D4 0x013C      LDR      R0,[R4, #+316]
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable20_3
   \   00000044   0xF104 0x03FC      ADD      R3,R4,#+252
   \   00000048   0x7812             LDRB     R2,[R2, #+0]
   \   0000004A   0x780A             LDRB     R2,[R1, #+0]
   \   0000004C   0xF8B4 0x113A      LDRH     R1,[R4, #+314]
   \   00000050   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   00000054   0xF504 0x70E2      ADD      R0,R4,#+452
    888                {
    889                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    890                                                          (PDMFilter_InitStruct *)&Filter[1]);
    891                }
    892                else
    893                {
    894                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    895                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \   00000058   0x.... 0x....      BL       PDM_Filter_64_LSB
    896                }
    897                idxMic7=0;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    898                cntPos7++;
   \   00000062   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0xF8A4 0x013A      STRH     R0,[R4, #+314]
    899                if (cntPos7>=256) cntPos7=0;
   \   0000006C   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000070   0x28FF             CMP      R0,#+255
   \   00000072   0xBFC4             ITT      GT 
   \   00000074   0x2000             MOVGT    R0,#+0
   \   00000076   0xF8A4 0x013A      STRHGT   R0,[R4, #+314]
    900              }
    901              
    902            }
    903          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   0000007A   0xBD10             POP      {R4,PC}          ;; return
    904          
    905          
    906          

   \                                 In section .text, align 2, keep-with-next
    907          void MIC1TO8_Init(void)
    908          {
   \                     MIC1TO8_Init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    909          
    910          
    911            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    912            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    913            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    914            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    915            //HAL_Delay(2);
    916          
    917          
    918            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    919            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    920            I2S1_Init(); /* I2S1   --> SDO12 */
   \   00000002   0x....             LDR.N    R4,??DataTable12_5
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable20_5  ;; 0x40013000
   \   00000008   0x6020             STR      R0,[R4, #+0]
   \   0000000A   0x2020             MOVS     R0,#+32
   \   0000000C   0x60A0             STR      R0,[R4, #+8]
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x60E0             STR      R0,[R4, #+12]
   \   00000012   0xF44F 0x7580      MOV      R5,#+256
   \   00000016   0x6120             STR      R0,[R4, #+16]
   \   00000018   0xF44F 0x567A      MOV      R6,#+16000
   \   0000001C   0x61A0             STR      R0,[R4, #+24]
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x61E0             STR      R0,[R4, #+28]
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x6065             STR      R5,[R4, #+4]
   \   00000026   0x6166             STR      R6,[R4, #+20]
   \   00000028   0x.... 0x....      BL       HAL_I2S_Init
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x6841             LDR      R1,[R0, #+4]
   \   00000030   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000034   0x6041             STR      R1,[R0, #+4]
   \   00000036   0x69C1             LDR      R1,[R0, #+28]
   \   00000038   0xF441 0x6180      ORR      R1,R1,#0x400
   \   0000003C   0x61C1             STR      R1,[R0, #+28]
    921            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    922            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    923            I2S2_Init(); /* I2S2   --> SDO34 */
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable20_6  ;; 0x40003800
   \   00000042   0x6420             STR      R0,[R4, #+64]
   \   00000044   0x2020             MOVS     R0,#+32
   \   00000046   0x64A0             STR      R0,[R4, #+72]
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x64E0             STR      R0,[R4, #+76]
   \   0000004C   0x6520             STR      R0,[R4, #+80]
   \   0000004E   0x65A0             STR      R0,[R4, #+88]
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x65E0             STR      R0,[R4, #+92]
   \   00000054   0xF104 0x0040      ADD      R0,R4,#+64
   \   00000058   0x6465             STR      R5,[R4, #+68]
   \   0000005A   0x6566             STR      R6,[R4, #+84]
   \   0000005C   0x.... 0x....      BL       HAL_I2S_Init
   \   00000060   0x6C20             LDR      R0,[R4, #+64]
   \   00000062   0x6841             LDR      R1,[R0, #+4]
   \   00000064   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000068   0x6041             STR      R1,[R0, #+4]
   \   0000006A   0x69C1             LDR      R1,[R0, #+28]
   \   0000006C   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000070   0x61C1             STR      R1,[R0, #+28]
    924            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    925            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    926            SPI4_Init(); /* SPI4   --> SDO56 */
   \   00000072   0x.... 0x....      BL       SPI4_Init
    927            SPI5_Init();
   \   00000076   0x.... 0x....      BL       SPI5_Init
    928            SPI6_Init();  
   \   0000007A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000007E   0x....             B.N      SPI6_Init
    929          }
    930          

   \                                 In section .text, align 2, keep-with-next
    931          void StartRecMic7_8 (void)
    932          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    933          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   00000006   0xF44F 0x5280      MOV      R2,#+4096
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    934          #if (0)
    935          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
    936          #else
    937          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000014   0xF44F 0x5280      MOV      R2,#+4096
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   0000001C   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000020   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    938          #endif
    939          	  swtSDO7 = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF884 0x0130      STRB     R0,[R4, #+304]
    940          	  swtSDO8 = 0;
   \   0000002A   0xF884 0x0131      STRB     R0,[R4, #+305]
    941          
    942          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    943          
    944          /* I2S1 init function */
    945          /* Read data of MIC12 */
    946          static void I2S1_Init(void)
    947          {
    948          #if 1
    949            hi2s1.Instance = SPI1;
    950            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
    951            hi2s1.Init.Standard = I2S_STANDARD_LSB;
    952            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    953            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    954            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    955            hi2s1.Init.CPOL = I2S_CPOL_LOW;
    956            hi2s1.Init.ClockSource = I2S_CLOCK_SYSCLK;
    957            HAL_I2S_Init(&hi2s1);
    958          
    959            /* Enable TXE and ERR interrupt */
    960           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
    961           
    962           __HAL_I2S_ENABLE(&hi2s1);
    963          #else
    964          	hspi1.Instance = SPI1;
    965          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    966          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    967          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    968          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    969          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    970          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    971          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    972          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    973          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    974          	hspi1.Init.CRCPolynomial = 7;
    975          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    976          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    977          	//hspi4.RxISR = SPI5_CallBack;
    978          	HAL_SPI_Init(&hspi1);
    979          
    980          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    981            /* Enable TXE, RXNE and ERR interrupt */
    982           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    983          
    984           __HAL_SPI_ENABLE(&hspi1);
    985          
    986          #endif
    987          }
    988          
    989          /* I2S2 init function */
    990          /* Read data of MIC34 */
    991          
    992          static void I2S2_Init(void)
    993          {
    994          
    995          #if 1
    996           //HAL_I2S_DeInit(&hi2s2);
    997           hi2s2.Instance = SPI2;
    998           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
    999           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
   1000           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
   1001           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
   1002           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
   1003           hi2s2.Init.CPOL = I2S_CPOL_LOW;
   1004           hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
   1005          
   1006           HAL_I2S_Init(&hi2s2);
   1007           /* Enable TXE and ERR interrupt */
   1008           __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
   1009           __HAL_I2S_ENABLE(&hi2s2);
   1010          
   1011          #else
   1012             hspi2.Instance = SPI2;
   1013             hspi2.Init.Mode = SPI_MODE_SLAVE;
   1014             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
   1015             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
   1016             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
   1017             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
   1018             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   1019             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
   1020             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
   1021             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   1022             hspi2.Init.CRCPolynomial = 7;
   1023             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   1024             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   1025             HAL_SPI_Init(&hspi2);
   1026          
   1027          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1028           /* Enable TXE, RXNE and ERR interrupt */
   1029          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
   1030          
   1031          __HAL_SPI_ENABLE(&hspi2);
   1032          
   1033          #endif
   1034          
   1035          
   1036          }
   1037          
   1038          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
   1039          void SPI4_Init(void)
   1040          {
   \                     SPI4_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1041          
   1042            hspi4.Instance = SPI4;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable20_9  ;; 0x40013400
   \   0000000A   0x6020             STR      R0,[R4, #+0]
   1043            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6060             STR      R0,[R4, #+4]
   1044            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000010   0xF44F 0x6080      MOV      R0,#+1024
   \   00000014   0x60A0             STR      R0,[R4, #+8]
   1045            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000016   0xF44F 0x6070      MOV      R0,#+3840
   \   0000001A   0x60E0             STR      R0,[R4, #+12]
   1046            hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x6120             STR      R0,[R4, #+16]
   1047            hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6160             STR      R0,[R4, #+20]
   1048            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000024   0xF44F 0x7000      MOV      R0,#+512
   \   00000028   0x61A0             STR      R0,[R4, #+24]
   1049            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x6220             STR      R0,[R4, #+32]
   1050            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0x6260             STR      R0,[R4, #+36]
   1051            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000030   0x62A0             STR      R0,[R4, #+40]
   1052            hspi4.Init.CRCPolynomial = 7;
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0x62E0             STR      R0,[R4, #+44]
   1053            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x6320             STR      R0,[R4, #+48]
   1054            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000003A   0x6360             STR      R0,[R4, #+52]
   1055            HAL_SPI_Init(&hspi4);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       HAL_SPI_Init
   1056          
   1057            /* Enable TXE, RXNE and ERR interrupt */
   1058           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x6841             LDR      R1,[R0, #+4]
   \   00000046   0xF041 0x0160      ORR      R1,R1,#0x60
   \   0000004A   0x6041             STR      R1,[R0, #+4]
   1059          
   1060           __HAL_SPI_ENABLE(&hspi4);
   \   0000004C   0x6801             LDR      R1,[R0, #+0]
   \   0000004E   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000052   0x6001             STR      R1,[R0, #+0]
   1061          }
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
   1062          
   1063          

   \                                 In section .text, align 2, keep-with-next
   1064          void Mic7Rec(void)
   1065          {
   1066              SPI5_Init();
   \                     Mic7Rec: (+1)
   \   00000000   0x....             B.N      SPI5_Init
   1067          }
   1068          

   \                                 In section .text, align 2, keep-with-next
   1069          void Mic8Rec(void)
   1070          {
   1071              SPI6_Init();
   \                     Mic8Rec: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable20_10  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6781             STR      R1,[R0, #+120]
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x67C1             STR      R1,[R0, #+124]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF8C0 0x1084      STR      R1,[R0, #+132]
   \   0000002E   0xF8C0 0x1088      STR      R1,[R0, #+136]
   \   00000032   0xF8C0 0x108C      STR      R1,[R0, #+140]
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0xF8C0 0x1090      STR      R1,[R0, #+144]
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF8C0 0x1094      STR      R1,[R0, #+148]
   \   00000042   0xF8C0 0x1098      STR      R1,[R0, #+152]
   \   00000046   0x3064             ADDS     R0,R0,#+100
   \   00000048   0x.... 0x....      B.W      HAL_SPI_Init
   1072          }
   1073          
   1074          
   1075          /* SPI5 init function */

   \                                 In section .text, align 4, keep-with-next
   1076          void SPI5_Init(void)
   1077          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   1078          	
   1079              /* Enable CRC module */
   1080              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000004   0x....             LDR.N    R0,??DataTable12_1  ;; 0x40023830
   1081          	for (char i=0; i< 2; i++)
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   0000000A   0x2602             MOVS     R6,#+2
   \   0000000C   0xED2D 0x8B02      VPUSH    {D8}
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0xF104 0x05C8      ADD      R5,R4,#+200
   \   00000016   0xF44F 0x577A      MOV      R7,#+16000
   \   0000001A   0xEEB2 0x8A04      VMOV.F32 S16,#10.0
   \   0000001E   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000022   0xEDDF 0x....      VLDR.W   S17,??DataTable12  ;; 0x45fa0000
   \   00000026   0x6001             STR      R1,[R0, #+0]
   1082          	{
   1083          		/* Filter LP & HP Init */
   1084          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \                     ??SPI5_Init_0: (+1)
   \   00000028   0xEDC5 0x8A01      VSTR     S17,[R5, #+4]
   1085          		Filter[i].HP_HZ = 10;
   1086          		Filter[i].Fs = 16000;    //sop1hc: 16000
   1087          		Filter[i].Out_MicChannels = 1;
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xED85 0x8A02      VSTR     S16,[R5, #+8]
   \   00000032   0x802F             STRH     R7,[R5, #+0]
   \   00000034   0x81E8             STRH     R0,[R5, #+14]
   1088          		Filter[i].In_MicChannels = 1;
   \   00000036   0x81A8             STRH     R0,[R5, #+12]
   1089          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   00000038   0x4628             MOV      R0,R5
   \   0000003A   0x.... 0x....      BL       PDM_Filter_Init
   1090          	}
   \   0000003E   0x3534             ADDS     R5,R5,#+52
   \   00000040   0x1E76             SUBS     R6,R6,#+1
   \   00000042   0xD1F1             BNE.N    ??SPI5_Init_0
   1091          
   1092          
   1093            hspi5.Instance = SPI5;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable20_11  ;; 0x40015000
   \   00000048   0x6020             STR      R0,[R4, #+0]
   1094            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x6060             STR      R0,[R4, #+4]
   1095            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000004E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000052   0x60A0             STR      R0,[R4, #+8]
   1096            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000054   0xF44F 0x6070      MOV      R0,#+3840
   \   00000058   0x60E0             STR      R0,[R4, #+12]
   1097            hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000005A   0x2002             MOVS     R0,#+2
   \   0000005C   0x6120             STR      R0,[R4, #+16]
   1098            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x6160             STR      R0,[R4, #+20]
   1099            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000062   0xF44F 0x7000      MOV      R0,#+512
   \   00000066   0x61A0             STR      R0,[R4, #+24]
   1100            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x6220             STR      R0,[R4, #+32]
   1101            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000006C   0x6260             STR      R0,[R4, #+36]
   1102            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000006E   0x62A0             STR      R0,[R4, #+40]
   1103            hspi5.Init.CRCPolynomial = 7;
   \   00000070   0x2007             MOVS     R0,#+7
   \   00000072   0x62E0             STR      R0,[R4, #+44]
   1104            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x6320             STR      R0,[R4, #+48]
   1105            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000078   0x6360             STR      R0,[R4, #+52]
   1106            //hspi5.RxISR = SPI5_CallBack;
   1107            HAL_SPI_Init(&hspi5);
   \   0000007A   0x4620             MOV      R0,R4
   \   0000007C   0xECBD 0x8B02      VPOP     {D8}
   \   00000080   0xB001             ADD      SP,SP,#+4
   \   00000082   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   00000086   0x.... 0x....      B.W      HAL_SPI_Init
   1108          
   1109          
   1110            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1111            /* Enable TXE, RXNE and ERR interrupt */
   1112           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1113          
   1114           //__HAL_SPI_ENABLE(&hspi5);
   1115          
   1116          }
   1117          

   \                                 In section .text, align 2, keep-with-next
   1118          void SPI6_Init(void)
   1119          {
   1120          	
   1121            hspi6.Instance = SPI6;
   \                     SPI6_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable20_10  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   1122            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   1123            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   1124            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   1125            hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   1126            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6781             STR      R1,[R0, #+120]
   1127            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x67C1             STR      R1,[R0, #+124]
   1128            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF8C0 0x1084      STR      R1,[R0, #+132]
   1129            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0xF8C0 0x1088      STR      R1,[R0, #+136]
   1130            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000032   0xF8C0 0x108C      STR      R1,[R0, #+140]
   1131            hspi6.Init.CRCPolynomial = 7;
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0xF8C0 0x1090      STR      R1,[R0, #+144]
   1132            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF8C0 0x1094      STR      R1,[R0, #+148]
   1133            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000042   0xF8C0 0x1098      STR      R1,[R0, #+152]
   1134            //hspi6.RxISR = SPI6_CallBack;
   1135            HAL_SPI_Init(&hspi6);
   \   00000046   0x3064             ADDS     R0,R0,#+100
   \   00000048   0x.... 0x....      B.W      HAL_SPI_Init
   1136          
   1137          
   1138            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1139            /* Enable TXE, RXNE and ERR interrupt */
   1140           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
   1141          
   1142           //__HAL_SPI_ENABLE(&hspi6);
   1143          
   1144          }
   1145          
   1146          
   1147          
   1148          

   \                                 In section .text, align 2, keep-with-next
   1149          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
   1150          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
   1151          
   1152            GPIO_InitTypeDef GPIO_InitStruct;
   1153            if (hspi->Instance==SPI1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable20_5  ;; 0x40013000
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD132             BNE.N    ??HAL_SPI_MspInit_0
   1154            {
   1155          	  /* USER CODE BEGIN SPI1_MspInit 0 */
   1156          	  
   1157          	  /* USER CODE END SPI1_MspInit 0 */
   1158          	  /* Peripheral clock enable */
   1159          	  __SPI1_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable20_12  ;; 0x40023830
   1160          	  __GPIOA_CLK_ENABLE();
   1161          	  __GPIOC_CLK_ENABLE();
   1162          	  
   1163          	  /**I2S1 GPIO Configuration	
   1164          		PA4 	------> I2S1_WS --> LRCKO
   1165          		PA5 	------> I2S1_CK --> BICKO
   1166          		PA7 	------> I2S1_SD --> SDO12
   1167          		PC4 	------> I2S1_MCK
   1168          		*/
   1169          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
   1170          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1171          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1172          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1173          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1174          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000014   0xA901             ADD      R1,SP,#+4
   \   00000016   0x6968             LDR      R0,[R5, #+20]
   \   00000018   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   0000001C   0x6168             STR      R0,[R5, #+20]
   \   0000001E   0x6968             LDR      R0,[R5, #+20]
   \   00000020   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x6828             LDR      R0,[R5, #+0]
   \   0000002A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000002E   0x6028             STR      R0,[R5, #+0]
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x6828             LDR      R0,[R5, #+0]
   \   0000003C   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000040   0x6028             STR      R0,[R5, #+0]
   \   00000042   0x6828             LDR      R0,[R5, #+0]
   \   00000044   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   \   0000004C   0x20F0             MOVS     R0,#+240
   \   0000004E   0x9001             STR      R0,[SP, #+4]
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x9002             STR      R0,[SP, #+8]
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x9003             STR      R0,[SP, #+12]
   \   00000058   0x2003             MOVS     R0,#+3
   \   0000005A   0x9004             STR      R0,[SP, #+16]
   \   0000005C   0x2005             MOVS     R0,#+5
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable20_13  ;; 0x40020000
   \   00000064   0x.... 0x....      BL       HAL_GPIO_Init
   1175          	  
   1176          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
   1177          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1178          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
   1179          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1180          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1181          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1182          		
   1183          	  /* Peripheral interrupt init*/
   1184          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000068   0x2200             MOVS     R2,#+0
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x2023             MOVS     R0,#+35
   \   0000006E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1185          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000072   0x2023             MOVS     R0,#+35
   \   00000074   0xE1D0             B.N      ??HAL_SPI_MspInit_1
   1186          	  /* USER CODE BEGIN SPI1_MspInit 1 */
   1187          	  
   1188          	  /* USER CODE END SPI1_MspInit 1 */
   1189          
   1190            }
   1191            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable20_6  ;; 0x40003800
   \   0000007A   0x4288             CMP      R0,R1
   \   0000007C   0xD14A             BNE.N    ??HAL_SPI_MspInit_2
   1192            {
   1193          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1194          	  
   1195          	  /* USER CODE END SPI2_MspInit 0 */
   1196          		/* Peripheral clock enable */
   1197          		__SPI2_CLK_ENABLE();
   \   0000007E   0x.... 0x....      LDR.W    R5,??DataTable20_12  ;; 0x40023830
   1198          		__GPIOI_CLK_ENABLE();
   1199          		__GPIOB_CLK_ENABLE();
   1200          		__GPIOC_CLK_ENABLE();
   1201          	  
   1202          		/**I2S2 GPIO Configuration	   
   1203          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1204          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1205          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1206          	  
   1207          	  
   1208          		*/
   1209          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   1210          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1211          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1212          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1213          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1214          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000082   0xA901             ADD      R1,SP,#+4
   \   00000084   0x6928             LDR      R0,[R5, #+16]
   \   00000086   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   0000008A   0x6128             STR      R0,[R5, #+16]
   \   0000008C   0x6928             LDR      R0,[R5, #+16]
   \   0000008E   0xF400 0x4080      AND      R0,R0,#0x4000
   \   00000092   0x9000             STR      R0,[SP, #+0]
   \   00000094   0x9800             LDR      R0,[SP, #+0]
   \   00000096   0x6828             LDR      R0,[R5, #+0]
   \   00000098   0xF440 0x7080      ORR      R0,R0,#0x100
   \   0000009C   0x6028             STR      R0,[R5, #+0]
   \   0000009E   0x6828             LDR      R0,[R5, #+0]
   \   000000A0   0xF400 0x7080      AND      R0,R0,#0x100
   \   000000A4   0x9000             STR      R0,[SP, #+0]
   \   000000A6   0x9800             LDR      R0,[SP, #+0]
   \   000000A8   0x6828             LDR      R0,[R5, #+0]
   \   000000AA   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000AE   0x6028             STR      R0,[R5, #+0]
   \   000000B0   0x6828             LDR      R0,[R5, #+0]
   \   000000B2   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000B6   0x9000             STR      R0,[SP, #+0]
   \   000000B8   0x9800             LDR      R0,[SP, #+0]
   \   000000BA   0x6828             LDR      R0,[R5, #+0]
   \   000000BC   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000C0   0x6028             STR      R0,[R5, #+0]
   \   000000C2   0x6828             LDR      R0,[R5, #+0]
   \   000000C4   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000C8   0x9000             STR      R0,[SP, #+0]
   \   000000CA   0x9800             LDR      R0,[SP, #+0]
   \   000000CC   0x2002             MOVS     R0,#+2
   \   000000CE   0x9001             STR      R0,[SP, #+4]
   \   000000D0   0x9002             STR      R0,[SP, #+8]
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x9003             STR      R0,[SP, #+12]
   \   000000D6   0x2003             MOVS     R0,#+3
   \   000000D8   0x9004             STR      R0,[SP, #+16]
   \   000000DA   0x2005             MOVS     R0,#+5
   \   000000DC   0x9005             STR      R0,[SP, #+20]
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable20_14  ;; 0x40020800
   \   000000E2   0x.... 0x....      BL       HAL_GPIO_Init
   1215          	  
   1216          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   000000E6   0xF44F 0x5040      MOV      R0,#+12288
   1217          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1218          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1219          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1220          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1221          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   000000EA   0xA901             ADD      R1,SP,#+4
   \   000000EC   0x9001             STR      R0,[SP, #+4]
   \   000000EE   0x2002             MOVS     R0,#+2
   \   000000F0   0x9002             STR      R0,[SP, #+8]
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0x9003             STR      R0,[SP, #+12]
   \   000000F6   0x2003             MOVS     R0,#+3
   \   000000F8   0x9004             STR      R0,[SP, #+16]
   \   000000FA   0x2005             MOVS     R0,#+5
   \   000000FC   0x9005             STR      R0,[SP, #+20]
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable20_15  ;; 0x40020400
   \   00000102   0x.... 0x....      BL       HAL_GPIO_Init
   1222          	  
   1223          	  
   1224          		/* Peripheral interrupt init*/
   1225          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   00000106   0x2200             MOVS     R2,#+0
   \   00000108   0x2101             MOVS     R1,#+1
   \   0000010A   0x2024             MOVS     R0,#+36
   \   0000010C   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1226          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   00000110   0x2024             MOVS     R0,#+36
   \   00000112   0xE181             B.N      ??HAL_SPI_MspInit_1
   1227          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1228          	  
   1229          	  /* USER CODE END SPI2_MspInit 1 */
   1230          
   1231          
   1232            }
   1233            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable20_16  ;; 0x40003c00
   \   00000118   0x4288             CMP      R0,R1
   \   0000011A   0xF040 0x8090      BNE.W    ??HAL_SPI_MspInit_3
   1234            {
   1235          	  
   1236              /**I2S3 GPIO Configuration    
   1237                 PB2     ------> I2S3_SD
   1238                 PA15     ------> I2S3_WS (LRCK)
   1239                 PB3     ------> I2S3_CK 
   1240          	   PC7    ------> MCLK
   1241              */
   1242           
   1243            /* USER CODE BEGIN SPI3_MspInit 1 */
   1244            __SPI3_CLK_ENABLE();
   \   0000011E   0x.... 0x....      LDR.W    R5,??DataTable20_12  ;; 0x40023830
   1245            __GPIOA_CLK_ENABLE();
   1246            __GPIOB_CLK_ENABLE();
   1247          
   1248            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   1249            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1250            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1251            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1252            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1253            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000122   0xA901             ADD      R1,SP,#+4
   \   00000124   0x6928             LDR      R0,[R5, #+16]
   \   00000126   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   0000012A   0x6128             STR      R0,[R5, #+16]
   \   0000012C   0x6928             LDR      R0,[R5, #+16]
   \   0000012E   0xF400 0x4000      AND      R0,R0,#0x8000
   \   00000132   0x9000             STR      R0,[SP, #+0]
   \   00000134   0x9800             LDR      R0,[SP, #+0]
   \   00000136   0x6828             LDR      R0,[R5, #+0]
   \   00000138   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000013C   0x6028             STR      R0,[R5, #+0]
   \   0000013E   0x6828             LDR      R0,[R5, #+0]
   \   00000140   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000144   0x9000             STR      R0,[SP, #+0]
   \   00000146   0x9800             LDR      R0,[SP, #+0]
   \   00000148   0x6828             LDR      R0,[R5, #+0]
   \   0000014A   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000014E   0x6028             STR      R0,[R5, #+0]
   \   00000150   0x6828             LDR      R0,[R5, #+0]
   \   00000152   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000156   0x9000             STR      R0,[SP, #+0]
   \   00000158   0x9800             LDR      R0,[SP, #+0]
   \   0000015A   0x200C             MOVS     R0,#+12
   \   0000015C   0x9001             STR      R0,[SP, #+4]
   \   0000015E   0x2002             MOVS     R0,#+2
   \   00000160   0x9002             STR      R0,[SP, #+8]
   \   00000162   0x2003             MOVS     R0,#+3
   \   00000164   0x9004             STR      R0,[SP, #+16]
   \   00000166   0x2000             MOVS     R0,#+0
   \   00000168   0x9003             STR      R0,[SP, #+12]
   \   0000016A   0x2006             MOVS     R0,#+6
   \   0000016C   0x9005             STR      R0,[SP, #+20]
   \   0000016E   0x.... 0x....      LDR.W    R0,??DataTable20_15  ;; 0x40020400
   \   00000172   0x.... 0x....      BL       HAL_GPIO_Init
   1254          
   1255          
   1256            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   00000176   0xF44F 0x4000      MOV      R0,#+32768
   1257            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1258            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1259            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   0000017A   0xA901             ADD      R1,SP,#+4
   \   0000017C   0x9001             STR      R0,[SP, #+4]
   \   0000017E   0x2002             MOVS     R0,#+2
   \   00000180   0x9002             STR      R0,[SP, #+8]
   \   00000182   0x2006             MOVS     R0,#+6
   \   00000184   0x9005             STR      R0,[SP, #+20]
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable20_13  ;; 0x40020000
   \   0000018A   0x.... 0x....      BL       HAL_GPIO_Init
   1260          
   1261          #ifdef CODEC_MCLK_ENABLED
   1262            __GPIOC_CLK_ENABLE();
   \   0000018E   0x6828             LDR      R0,[R5, #+0]
   1263            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   1264            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1265            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1266            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1267            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1268            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000190   0xA901             ADD      R1,SP,#+4
   \   00000192   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000196   0x6028             STR      R0,[R5, #+0]
   \   00000198   0x6828             LDR      R0,[R5, #+0]
   \   0000019A   0xF000 0x0004      AND      R0,R0,#0x4
   \   0000019E   0x9000             STR      R0,[SP, #+0]
   \   000001A0   0x9800             LDR      R0,[SP, #+0]
   \   000001A2   0x2080             MOVS     R0,#+128
   \   000001A4   0x9001             STR      R0,[SP, #+4]
   \   000001A6   0x2002             MOVS     R0,#+2
   \   000001A8   0x9002             STR      R0,[SP, #+8]
   \   000001AA   0x2003             MOVS     R0,#+3
   \   000001AC   0x9004             STR      R0,[SP, #+16]
   \   000001AE   0x2000             MOVS     R0,#+0
   \   000001B0   0x9003             STR      R0,[SP, #+12]
   \   000001B2   0x2006             MOVS     R0,#+6
   \   000001B4   0x9005             STR      R0,[SP, #+20]
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable20_14  ;; 0x40020800
   \   000001BA   0x.... 0x....      BL       HAL_GPIO_Init
   1269          
   1270          #endif /* CODEC_MCLK_ENABLED */ 
   1271          
   1272          #ifdef I2S_INTERRUPT   
   1273               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1274               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1275               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1276          
   1277               /* Enable the I2S DMA request */
   1278               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1279               //__HAL_I2S_ENABLE(&hi2s3);
   1280            	    /* Peripheral interrupt init*/
   1281          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1282          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1283          #endif
   1284          
   1285                /* Enable the DMA clock */ 
   1286          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   000001BE   0x6828             LDR      R0,[R5, #+0]
   \   000001C0   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000001C4   0x6028             STR      R0,[R5, #+0]
   \   000001C6   0x6828             LDR      R0,[R5, #+0]
   1287          
   1288                /* Configure the DMA Stream */
   1289                //HAL_DMA_DeInit(&DmaHandle);
   1290          
   1291                /* Set the parameters to be configured */ 
   1292          	  DmaHandle.Instance = DMA1_Stream7;
   \   000001C8   0x.... 0x....      LDR.W    R5,??DataTable20_17
   \   000001CC   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000001D0   0x9000             STR      R0,[SP, #+0]
   \   000001D2   0x9800             LDR      R0,[SP, #+0]
   \   000001D4   0x.... 0x....      LDR.W    R0,??DataTable20_18  ;; 0x400260b8
   \   000001D8   0x6028             STR      R0,[R5, #+0]
   1293                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x6068             STR      R0,[R5, #+4]
   1294          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   000001DE   0x2040             MOVS     R0,#+64
   \   000001E0   0x60A8             STR      R0,[R5, #+8]
   1295          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   000001E2   0x2000             MOVS     R0,#+0
   \   000001E4   0x60E8             STR      R0,[R5, #+12]
   1296          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   000001E6   0xF44F 0x6080      MOV      R0,#+1024
   \   000001EA   0x6128             STR      R0,[R5, #+16]
   1297          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   000001EC   0xF44F 0x6000      MOV      R0,#+2048
   \   000001F0   0x6168             STR      R0,[R5, #+20]
   1298                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   000001F2   0xF44F 0x5000      MOV      R0,#+8192
   \   000001F6   0x61A8             STR      R0,[R5, #+24]
   1299          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   000001F8   0x2000             MOVS     R0,#+0
   \   000001FA   0x61E8             STR      R0,[R5, #+28]
   1300                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   000001FC   0xF44F 0x3000      MOV      R0,#+131072
   \   00000200   0x6228             STR      R0,[R5, #+32]
   1301          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   00000202   0x2004             MOVS     R0,#+4
   \   00000204   0x6268             STR      R0,[R5, #+36]
   1302                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   00000206   0x2003             MOVS     R0,#+3
   \   00000208   0x62A8             STR      R0,[R5, #+40]
   1303                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   0000020A   0x2000             MOVS     R0,#+0
   \   0000020C   0x62E8             STR      R0,[R5, #+44]
   1304                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   0000020E   0x6328             STR      R0,[R5, #+48]
   1305                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1306                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1307                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1308                //DmaHandle.XferCpltCallback = &TC_Callback;
   1309           
   1310          
   1311                /* Associate the initialized DMA handle to the the SPI handle */
   1312                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   1313                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1314          
   1315          	   /* Deinitialize the Stream for new transfer */
   1316                 HAL_DMA_DeInit(&DmaHandle);
   \   00000210   0x4628             MOV      R0,R5
   \   00000212   0x6565             STR      R5,[R4, #+84]
   \   00000214   0x63AC             STR      R4,[R5, #+56]
   \   00000216   0x.... 0x....      BL       HAL_DMA_DeInit
   1317                 /* Configure the DMA Stream */
   1318          	   HAL_DMA_Init(&DmaHandle);
   \   0000021A   0x4628             MOV      R0,R5
   \   0000021C   0x.... 0x....      BL       HAL_DMA_Init
   1319          
   1320                /* Set Interrupt Group Priority */
   1321                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   00000220   0x2200             MOVS     R2,#+0
   \   00000222   0x2100             MOVS     R1,#+0
   \   00000224   0x202F             MOVS     R0,#+47
   \   00000226   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1322                /* Enable the DMA STREAM global Interrupt */
   1323                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   0000022A   0x202F             MOVS     R0,#+47
   \   0000022C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1324          
   1325          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000230   0x6828             LDR      R0,[R5, #+0]
   \   00000232   0x6801             LDR      R1,[R0, #+0]
   \   00000234   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000238   0x6001             STR      R1,[R0, #+0]
   1326          	    
   1327            }
   1328            else if(hspi->Instance==SPI4)
   1329            {
   1330            /* USER CODE BEGIN SPI4_MspInit 0 */
   1331          
   1332            /* USER CODE END SPI4_MspInit 0 */
   1333              /* Peripheral clock enable */
   1334              __SPI4_CLK_ENABLE();
   1335              __HAL_RCC_GPIOE_CLK_ENABLE();
   1336            
   1337            
   1338              /**SPI4 GPIO Configuration    
   1339              PE2     ------> SPI4_SCK
   1340              PE4     ------> SPI4_NSS
   1341              PE5     ------> SPI4_MISO
   1342              PE6     ------> SPI4_MOSI 
   1343              */
   1344              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   1345              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1346              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1347              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1348              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   1349              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   1350          
   1351          	/* Peripheral interrupt init*/
   1352              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   1353              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   1354          
   1355            /* USER CODE BEGIN SPI4_MspInit 1 */
   1356          
   1357            /* USER CODE END SPI4_MspInit 1 */
   1358            }
   1359            else if(hspi->Instance==SPI5)
   1360            {
   1361            /* USER CODE BEGIN SPI5_MspInit 0 */
   1362          
   1363            /* USER CODE END SPI5_MspInit 0 */
   1364              /* Peripheral clock enable */
   1365              __HAL_RCC_SPI5_CLK_ENABLE();
   1366              __HAL_RCC_GPIOF_CLK_ENABLE();
   1367            
   1368              /**SPI5 GPIO Configuration    
   1369              PF7     ------> SPI5_SCK  --> PF7
   1370              PF11     ------> SPI5_MOSI --> PF9
   1371                               SPI5_MISO --> PF8
   1372                                    NSS   -->  PF6
   1373              */
   1374              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   1375              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   1376              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1377              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1378              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   1379              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   1380          
   1381          #if 0
   1382            /* Peripheral interrupt init*/
   1383              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1384              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1385          
   1386          #else
   1387          	/* Peripheral DMA init*/
   1388              __HAL_RCC_DMA2_CLK_ENABLE();
   1389          	hdma_spi5_rx.Instance = DMA2_Stream5;
   1390          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   1391          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1392          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1393          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   1394          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1395          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   1396          	hdma_spi5_rx.Init.Mode = DMA_NORMAL;
   1397          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1398          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1399          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1400          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   1401          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   1402          	HAL_DMA_Init(&hdma_spi5_rx);
   1403          
   1404              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   1405          
   1406          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1407          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   1408          
   1409          #endif
   1410            /* USER CODE END SPI5_MspInit 1 */
   1411            }
   1412            else if(hspi->Instance==SPI6)
   1413            {
   1414            /* USER CODE BEGIN SPI6_MspInit 0 */
   1415          
   1416            /* USER CODE END SPI6_MspInit 0 */
   1417              /* Peripheral clock enable */
   1418              __SPI6_CLK_ENABLE();
   1419              __HAL_RCC_GPIOG_CLK_ENABLE();
   1420            
   1421              /**SPI6 GPIO Configuration    
   1422              PG13     ------> SPI6_SCK
   1423              PG14     ------> SPI6_MOSI 
   1424              */
   1425              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   1426              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1427              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1428              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1429              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   1430              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   1431          
   1432          #if 0
   1433          	  /* Peripheral interrupt init*/
   1434              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1435              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1436          #else
   1437          	/* Peripheral DMA init*/
   1438          	__HAL_RCC_DMA2_CLK_ENABLE();
   1439          	hdma_spi6_rx.Instance = DMA2_Stream6;
   1440          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   1441          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1442          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1443          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   1444          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1445          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1446          	hdma_spi6_rx.Init.Mode = DMA_NORMAL;
   1447          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1448          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1449          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1450          	hdma_spi6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   1451          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   1452          	HAL_DMA_Init(&hdma_spi6_rx);
   1453          
   1454          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   1455          
   1456          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1457          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   1458          
   1459          #endif
   1460            }
   1461          
   1462          }
   \   0000023A   0xB007             ADD      SP,SP,#+28
   \   0000023C   0xBD30             POP      {R4,R5,PC}
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   0000023E   0x.... 0x....      LDR.W    R1,??DataTable20_9  ;; 0x40013400
   \   00000242   0x4288             CMP      R0,R1
   \   00000244   0xD128             BNE.N    ??HAL_SPI_MspInit_4
   \   00000246   0x.... 0x....      LDR.W    R5,??DataTable20_12  ;; 0x40023830
   \   0000024A   0xA901             ADD      R1,SP,#+4
   \   0000024C   0x6968             LDR      R0,[R5, #+20]
   \   0000024E   0xF440 0x5000      ORR      R0,R0,#0x2000
   \   00000252   0x6168             STR      R0,[R5, #+20]
   \   00000254   0x6968             LDR      R0,[R5, #+20]
   \   00000256   0xF400 0x5000      AND      R0,R0,#0x2000
   \   0000025A   0x9000             STR      R0,[SP, #+0]
   \   0000025C   0x9800             LDR      R0,[SP, #+0]
   \   0000025E   0x6828             LDR      R0,[R5, #+0]
   \   00000260   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000264   0x6028             STR      R0,[R5, #+0]
   \   00000266   0x6828             LDR      R0,[R5, #+0]
   \   00000268   0xF000 0x0010      AND      R0,R0,#0x10
   \   0000026C   0x9000             STR      R0,[SP, #+0]
   \   0000026E   0x9800             LDR      R0,[SP, #+0]
   \   00000270   0x2074             MOVS     R0,#+116
   \   00000272   0x9001             STR      R0,[SP, #+4]
   \   00000274   0x2002             MOVS     R0,#+2
   \   00000276   0x9002             STR      R0,[SP, #+8]
   \   00000278   0x2000             MOVS     R0,#+0
   \   0000027A   0x9003             STR      R0,[SP, #+12]
   \   0000027C   0x2003             MOVS     R0,#+3
   \   0000027E   0x9004             STR      R0,[SP, #+16]
   \   00000280   0x2005             MOVS     R0,#+5
   \   00000282   0x9005             STR      R0,[SP, #+20]
   \   00000284   0x....             LDR.N    R0,??DataTable13  ;; 0x40021000
   \   00000286   0x.... 0x....      BL       HAL_GPIO_Init
   \   0000028A   0x2200             MOVS     R2,#+0
   \   0000028C   0x2102             MOVS     R1,#+2
   \   0000028E   0x2054             MOVS     R0,#+84
   \   00000290   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000294   0x2054             MOVS     R0,#+84
   \   00000296   0xE0BF             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   00000298   0x.... 0x....      LDR.W    R1,??DataTable20_11  ;; 0x40015000
   \   0000029C   0x4288             CMP      R0,R1
   \   0000029E   0xD15A             BNE.N    ??HAL_SPI_MspInit_5
   \   000002A0   0x.... 0x....      LDR.W    R5,??DataTable20_12  ;; 0x40023830
   \   000002A4   0xA901             ADD      R1,SP,#+4
   \   000002A6   0x6968             LDR      R0,[R5, #+20]
   \   000002A8   0xF440 0x1080      ORR      R0,R0,#0x100000
   \   000002AC   0x6168             STR      R0,[R5, #+20]
   \   000002AE   0x6968             LDR      R0,[R5, #+20]
   \   000002B0   0xF400 0x1080      AND      R0,R0,#0x100000
   \   000002B4   0x9000             STR      R0,[SP, #+0]
   \   000002B6   0x9800             LDR      R0,[SP, #+0]
   \   000002B8   0x6828             LDR      R0,[R5, #+0]
   \   000002BA   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000002BE   0x6028             STR      R0,[R5, #+0]
   \   000002C0   0x6828             LDR      R0,[R5, #+0]
   \   000002C2   0xF000 0x0020      AND      R0,R0,#0x20
   \   000002C6   0x9000             STR      R0,[SP, #+0]
   \   000002C8   0x9800             LDR      R0,[SP, #+0]
   \   000002CA   0xF44F 0x7070      MOV      R0,#+960
   \   000002CE   0x9001             STR      R0,[SP, #+4]
   \   000002D0   0x2012             MOVS     R0,#+18
   \   000002D2   0x9002             STR      R0,[SP, #+8]
   \   000002D4   0x2001             MOVS     R0,#+1
   \   000002D6   0x9003             STR      R0,[SP, #+12]
   \   000002D8   0x2003             MOVS     R0,#+3
   \   000002DA   0x9004             STR      R0,[SP, #+16]
   \   000002DC   0x2005             MOVS     R0,#+5
   \   000002DE   0x9005             STR      R0,[SP, #+20]
   \   000002E0   0x.... 0x....      LDR.W    R0,??DataTable20_19  ;; 0x40021400
   \   000002E4   0x.... 0x....      BL       HAL_GPIO_Init
   \   000002E8   0x6828             LDR      R0,[R5, #+0]
   \   000002EA   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000002EE   0x6028             STR      R0,[R5, #+0]
   \   000002F0   0x6828             LDR      R0,[R5, #+0]
   \   000002F2   0x.... 0x....      LDR.W    R5,??DataTable20_20
   \   000002F6   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000002FA   0x9000             STR      R0,[SP, #+0]
   \   000002FC   0x9800             LDR      R0,[SP, #+0]
   \   000002FE   0x.... 0x....      LDR.W    R0,??DataTable20_18  ;; 0x400260b8
   \   00000302   0xF500 0x7074      ADD      R0,R0,#+976
   \   00000306   0x6028             STR      R0,[R5, #+0]
   \   00000308   0xF04F 0x6060      MOV      R0,#+234881024
   \   0000030C   0x6068             STR      R0,[R5, #+4]
   \   0000030E   0x2000             MOVS     R0,#+0
   \   00000310   0x60A8             STR      R0,[R5, #+8]
   \   00000312   0x60E8             STR      R0,[R5, #+12]
   \   00000314   0xF44F 0x6080      MOV      R0,#+1024
   \   00000318   0x6128             STR      R0,[R5, #+16]
   \   0000031A   0xF44F 0x6000      MOV      R0,#+2048
   \   0000031E   0x6168             STR      R0,[R5, #+20]
   \   00000320   0xF44F 0x5000      MOV      R0,#+8192
   \   00000324   0x61A8             STR      R0,[R5, #+24]
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x61E8             STR      R0,[R5, #+28]
   \   0000032A   0xF44F 0x3000      MOV      R0,#+131072
   \   0000032E   0x6228             STR      R0,[R5, #+32]
   \   00000330   0x2000             MOVS     R0,#+0
   \   00000332   0x6268             STR      R0,[R5, #+36]
   \   00000334   0x2003             MOVS     R0,#+3
   \   00000336   0x62A8             STR      R0,[R5, #+40]
   \   00000338   0x2000             MOVS     R0,#+0
   \   0000033A   0x62E8             STR      R0,[R5, #+44]
   \   0000033C   0x6328             STR      R0,[R5, #+48]
   \   0000033E   0x4628             MOV      R0,R5
   \   00000340   0x.... 0x....      BL       HAL_DMA_Init
   \   00000344   0x65A5             STR      R5,[R4, #+88]
   \   00000346   0x2200             MOVS     R2,#+0
   \   00000348   0x63AC             STR      R4,[R5, #+56]
   \   0000034A   0x2104             MOVS     R1,#+4
   \   0000034C   0x2044             MOVS     R0,#+68
   \   0000034E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000352   0x2044             MOVS     R0,#+68
   \   00000354   0xE060             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   00000356   0x.... 0x....      LDR.W    R1,??DataTable20_10  ;; 0x40015400
   \   0000035A   0x4288             CMP      R0,R1
   \   0000035C   0xD15E             BNE.N    ??HAL_SPI_MspInit_6
   \   0000035E   0x.... 0x....      LDR.W    R5,??DataTable20_12  ;; 0x40023830
   \   00000362   0xA901             ADD      R1,SP,#+4
   \   00000364   0x6968             LDR      R0,[R5, #+20]
   \   00000366   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   0000036A   0x6168             STR      R0,[R5, #+20]
   \   0000036C   0x6968             LDR      R0,[R5, #+20]
   \   0000036E   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000372   0x9000             STR      R0,[SP, #+0]
   \   00000374   0x9800             LDR      R0,[SP, #+0]
   \   00000376   0x6828             LDR      R0,[R5, #+0]
   \   00000378   0xF040 0x0040      ORR      R0,R0,#0x40
   \   0000037C   0x6028             STR      R0,[R5, #+0]
   \   0000037E   0x6828             LDR      R0,[R5, #+0]
   \   00000380   0xF000 0x0040      AND      R0,R0,#0x40
   \   00000384   0x9000             STR      R0,[SP, #+0]
   \   00000386   0x9800             LDR      R0,[SP, #+0]
   \   00000388   0xF44F 0x40C0      MOV      R0,#+24576
   \   0000038C   0x9001             STR      R0,[SP, #+4]
   \   0000038E   0x2002             MOVS     R0,#+2
   \   00000390   0x9002             STR      R0,[SP, #+8]
   \   00000392   0x2000             MOVS     R0,#+0
   \   00000394   0x9003             STR      R0,[SP, #+12]
   \   00000396   0x2003             MOVS     R0,#+3
   \   00000398   0x9004             STR      R0,[SP, #+16]
   \   0000039A   0x2005             MOVS     R0,#+5
   \   0000039C   0x9005             STR      R0,[SP, #+20]
   \   0000039E   0x.... 0x....      LDR.W    R0,??DataTable20_21  ;; 0x40021800
   \   000003A2   0x.... 0x....      BL       HAL_GPIO_Init
   \   000003A6   0x6828             LDR      R0,[R5, #+0]
   \   000003A8   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000003AC   0x6028             STR      R0,[R5, #+0]
   \   000003AE   0x6828             LDR      R0,[R5, #+0]
   \   000003B0   0x.... 0x....      LDR.W    R5,??DataTable20_20
   \   000003B4   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000003B8   0x9000             STR      R0,[SP, #+0]
   \   000003BA   0x9800             LDR      R0,[SP, #+0]
   \   000003BC   0x.... 0x....      LDR.W    R0,??DataTable20_18  ;; 0x400260b8
   \   000003C0   0xF500 0x707A      ADD      R0,R0,#+1000
   \   000003C4   0x6528             STR      R0,[R5, #+80]
   \   000003C6   0xF04F 0x7000      MOV      R0,#+33554432
   \   000003CA   0x6568             STR      R0,[R5, #+84]
   \   000003CC   0x2000             MOVS     R0,#+0
   \   000003CE   0x65A8             STR      R0,[R5, #+88]
   \   000003D0   0x65E8             STR      R0,[R5, #+92]
   \   000003D2   0xF44F 0x6080      MOV      R0,#+1024
   \   000003D6   0x6628             STR      R0,[R5, #+96]
   \   000003D8   0xF44F 0x6000      MOV      R0,#+2048
   \   000003DC   0x6668             STR      R0,[R5, #+100]
   \   000003DE   0x66A8             STR      R0,[R5, #+104]
   \   000003E0   0x2000             MOVS     R0,#+0
   \   000003E2   0x66E8             STR      R0,[R5, #+108]
   \   000003E4   0xF44F 0x3000      MOV      R0,#+131072
   \   000003E8   0x6728             STR      R0,[R5, #+112]
   \   000003EA   0x2000             MOVS     R0,#+0
   \   000003EC   0x6768             STR      R0,[R5, #+116]
   \   000003EE   0x2003             MOVS     R0,#+3
   \   000003F0   0x67A8             STR      R0,[R5, #+120]
   \   000003F2   0x2000             MOVS     R0,#+0
   \   000003F4   0x67E8             STR      R0,[R5, #+124]
   \   000003F6   0xF8C5 0x0080      STR      R0,[R5, #+128]
   \   000003FA   0xF105 0x0050      ADD      R0,R5,#+80
   \   000003FE   0x.... 0x....      BL       HAL_DMA_Init
   \   00000402   0xF105 0x0050      ADD      R0,R5,#+80
   \   00000406   0x2201             MOVS     R2,#+1
   \   00000408   0x65A0             STR      R0,[R4, #+88]
   \   0000040A   0x2107             MOVS     R1,#+7
   \   0000040C   0xF8C5 0x4088      STR      R4,[R5, #+136]
   \   00000410   0x2045             MOVS     R0,#+69
   \   00000412   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000416   0x2045             MOVS     R0,#+69
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   00000418   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \                     ??HAL_SPI_MspInit_6: (+1)
   \   0000041C   0xB007             ADD      SP,SP,#+28
   \   0000041E   0xBD30             POP      {R4,R5,PC}       ;; return
   1463          
   1464          
   1465          
   1466          
   1467          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1468          {
   1469            /* Check the parameters */
   1470            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1471            
   1472            /* Write in the DR register the data to be sent */
   1473            SPIx->DR = Data;
   1474          }
   1475          
   1476          
   1477          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1478          {
   1479            /* Check the parameters */
   1480            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1481            
   1482            /* Return the data in the DR register */
   1483            return SPIx->DR;
   1484          }
   1485          
   1486          

   \                                 In section .text, align 2, keep-with-next
   1487          void RecordUpdBuf(void)
   1488          {
   1489          
   1490               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_22
   \   00000004   0xF890 0x1081      LDRB     R1,[R0, #+129]
   \   00000008   0x2902             CMP      R1,#+2
   \   0000000A   0xF040 0x8103      BNE.W    ??RecordUpdBuf_0
   1491               {
   1492                  WaveRecord_flgInt=0;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xF880 0x1081      STRB     R1,[R0, #+129]
   1493          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable20_23
   \   00000018   0x880A             LDRH     R2,[R1, #+0]
   \   0000001A   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000001E   0xBFBE             ITTT     LT 
   \   00000020   0x.... 0x....      LDRLT.W  R2,??DataTable20_24
   \   00000024   0x8813             LDRHLT   R3,[R2, #+0]
   \   00000026   0xF5B3 0x6F80      CMPLT    R3,#+1024
   \   0000002A   0xF280 0x80F3      BGE.W    ??RecordUpdBuf_0
   1494          		//			  &&(stLR!=stLROld))
   1495          			{
   1496          		/*-------------------------------------------------------------------------------------------------------------
   1497          					  
   1498          			Sequence  Record Data					  Processing Data				  Player Data
   1499          					  
   1500          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1501          					  
   1502          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1503          					  
   1504          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1505          		 ---------------------------------------------------------------------------------------------------------------*/
   1506          					  /* Recording Audio Data */						 
   1507          					   switch (buffer_switch)
   \   0000002E   0x.... 0x....      LDR.W    R3,??DataTable20_25
   \   00000032   0x781B             LDRB     R3,[R3, #+0]
   \   00000034   0xB123             CBZ.N    R3,??RecordUpdBuf_1
   \   00000036   0x2B02             CMP      R3,#+2
   \   00000038   0xF000 0x80A2      BEQ.W    ??RecordUpdBuf_2
   \   0000003C   0xD350             BCC.N    ??RecordUpdBuf_3
   \   0000003E   0x4770             BX       LR
   1508          					   {
   1509          								case BUF1_PLAY:
   1510          
   1511          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_1: (+1)
   \   00000040   0x880B             LDRH     R3,[R1, #+0]
   \   00000042   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000046   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable20
   \   0000004E   0xF9B0 0xC08A      LDRSH    R12,[R0, #+138]
   \   00000052   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000056   0xF503 0x4380      ADD      R3,R3,#+16384
   \   0000005A   0xF8A3 0xC000      STRH     R12,[R3, #+0]
   1512          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   0000005E   0x8813             LDRH     R3,[R2, #+0]
   \   00000060   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000064   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000068   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000006C   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   00000070   0xF503 0x4390      ADD      R3,R3,#+18432
   \   00000074   0x801A             STRH     R2,[R3, #+0]
   1513          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   00000076   0x.... 0x....      LDR.W    R2,??DataTable20_26
   \   0000007A   0x8813             LDRH     R3,[R2, #+0]
   \   0000007C   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000080   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000084   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000088   0xF9B0 0x2090      LDRSH    R2,[R0, #+144]
   \   0000008C   0xF503 0x43A0      ADD      R3,R3,#+20480
   \   00000090   0x801A             STRH     R2,[R3, #+0]
   1514          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   00000092   0x....             LDR.N    R2,??DataTable16
   \   00000094   0x8813             LDRH     R3,[R2, #+0]
   \   00000096   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000009A   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   0000009E   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000000A2   0xF9B0 0x208E      LDRSH    R2,[R0, #+142]
   \   000000A6   0xF503 0x43B0      ADD      R3,R3,#+22528
   \   000000AA   0x801A             STRH     R2,[R3, #+0]
   1515          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000000AC   0x....             LDR.N    R2,??DataTable17_2
   \   000000AE   0x8813             LDRH     R3,[R2, #+0]
   \   000000B0   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000B4   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000000B8   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000000BC   0xF9B0 0x2092      LDRSH    R2,[R0, #+146]
   \   000000C0   0xF503 0x43C0      ADD      R3,R3,#+24576
   \   000000C4   0x801A             STRH     R2,[R3, #+0]
   1516          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   000000C6   0x....             LDR.N    R2,??DataTable17_3
   \   000000C8   0x8813             LDRH     R3,[R2, #+0]
   \   000000CA   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000CE   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000000D2   0xF9B0 0x0094      LDRSH    R0,[R0, #+148]
   \   000000D6   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   000000DA   0xF501 0x41D0      ADD      R1,R1,#+26624
   \   000000DE   0xE098             B.N      ??RecordUpdBuf_4
   1517          	
   1518          										break;
   1519          								case BUF2_PLAY:
   1520          
   1521          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_3: (+1)
   \   000000E0   0x880B             LDRH     R3,[R1, #+0]
   \   000000E2   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000E6   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable20
   \   000000EE   0xF9B0 0xC08A      LDRSH    R12,[R0, #+138]
   \   000000F2   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000000F6   0xF503 0x4300      ADD      R3,R3,#+32768
   \   000000FA   0xF8A3 0xC000      STRH     R12,[R3, #+0]
   1522          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   000000FE   0x8813             LDRH     R3,[R2, #+0]
   \   00000100   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000104   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000108   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000010C   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   00000110   0xF503 0x4308      ADD      R3,R3,#+34816
   \   00000114   0x801A             STRH     R2,[R3, #+0]
   1523          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   00000116   0x.... 0x....      LDR.W    R2,??DataTable20_26
   \   0000011A   0x8813             LDRH     R3,[R2, #+0]
   \   0000011C   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000120   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000124   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000128   0xF9B0 0x2090      LDRSH    R2,[R0, #+144]
   \   0000012C   0xF503 0x4310      ADD      R3,R3,#+36864
   \   00000130   0x801A             STRH     R2,[R3, #+0]
   1524          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   00000132   0x....             LDR.N    R2,??DataTable16
   \   00000134   0x8813             LDRH     R3,[R2, #+0]
   \   00000136   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000013A   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   0000013E   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000142   0xF9B0 0x208E      LDRSH    R2,[R0, #+142]
   \   00000146   0xF503 0x4318      ADD      R3,R3,#+38912
   \   0000014A   0x801A             STRH     R2,[R3, #+0]
   1525          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   0000014C   0x....             LDR.N    R2,??DataTable17_2
   \   0000014E   0x8813             LDRH     R3,[R2, #+0]
   \   00000150   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000154   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000158   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000015C   0xF9B0 0x2092      LDRSH    R2,[R0, #+146]
   \   00000160   0xF503 0x4320      ADD      R3,R3,#+40960
   \   00000164   0x801A             STRH     R2,[R3, #+0]
   1526          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   00000166   0x....             LDR.N    R2,??DataTable17_3
   \   00000168   0x8813             LDRH     R3,[R2, #+0]
   \   0000016A   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000016E   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000172   0xF9B0 0x0094      LDRSH    R0,[R0, #+148]
   \   00000176   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   0000017A   0xF501 0x4128      ADD      R1,R1,#+43008
   \   0000017E   0xE048             B.N      ??RecordUpdBuf_4
   1527          		
   1528          
   1529          										break;
   1530          								case BUF3_PLAY:
   1531          
   1532          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_2: (+1)
   \   00000180   0x880B             LDRH     R3,[R1, #+0]
   \   00000182   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000186   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   0000018A   0xF9B0 0xC08A      LDRSH    R12,[R0, #+138]
   \   0000018E   0x....             LDR.N    R1,??DataTable20
   \   00000190   0xF821 0xC013      STRH     R12,[R1, R3, LSL #+1]
   1533          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   00000194   0x8813             LDRH     R3,[R2, #+0]
   \   00000196   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000019A   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   0000019E   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001A2   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   000001A6   0xF8A3 0x2800      STRH     R2,[R3, #+2048]
   1534          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   000001AA   0x.... 0x....      LDR.W    R2,??DataTable20_26
   \   000001AE   0x8813             LDRH     R3,[R2, #+0]
   \   000001B0   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001B4   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000001B8   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001BC   0xF9B0 0x2090      LDRSH    R2,[R0, #+144]
   \   000001C0   0xF503 0x5380      ADD      R3,R3,#+4096
   \   000001C4   0x801A             STRH     R2,[R3, #+0]
   1535          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \   000001C6   0x....             LDR.N    R2,??DataTable16
   \   000001C8   0x8813             LDRH     R3,[R2, #+0]
   \   000001CA   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001CE   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000001D2   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001D6   0xF9B0 0x208E      LDRSH    R2,[R0, #+142]
   \   000001DA   0xF503 0x53C0      ADD      R3,R3,#+6144
   \   000001DE   0x801A             STRH     R2,[R3, #+0]
   1536          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000001E0   0x....             LDR.N    R2,??DataTable17_2
   \   000001E2   0x8813             LDRH     R3,[R2, #+0]
   \   000001E4   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001E8   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000001EC   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001F0   0xF9B0 0x2092      LDRSH    R2,[R0, #+146]
   \   000001F4   0xF503 0x5300      ADD      R3,R3,#+8192
   \   000001F8   0x801A             STRH     R2,[R3, #+0]
   1537          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   \   000001FA   0x....             LDR.N    R2,??DataTable17_3
   \   000001FC   0x8813             LDRH     R3,[R2, #+0]
   \   000001FE   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000202   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000206   0xF9B0 0x0094      LDRSH    R0,[R0, #+148]
   \   0000020A   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   0000020E   0xF501 0x5120      ADD      R1,R1,#+10240
   \                     ??RecordUpdBuf_4: (+1)
   \   00000212   0x8008             STRH     R0,[R1, #+0]
   1538          										break;
   1539          								default:
   1540          										break; 
   1541          					   }
   1542          				
   1543          				}
   1544                               
   1545               	}
   1546          }
   \                     ??RecordUpdBuf_0: (+1)
   \   00000214   0x4770             BX       LR               ;; return
   1547          
   1548          

   \                                 In section .text, align 2, keep-with-next
   1549          void DMA2_Stream5_IRQHandler(void)
   1550          {
   1551            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1552          
   1553            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1554            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_20
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1555            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1556          
   1557            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1558          }
   1559          
   1560          /**
   1561          * @brief This function handles DMA2 stream6 global interrupt.
   1562          */

   \                                 In section .text, align 2, keep-with-next
   1563          void DMA2_Stream6_IRQHandler(void)
   1564          {
   1565            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1566          
   1567            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1568            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_27
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1569            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1570          
   1571            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1572          }
   1573          

   \                                 In section .text, align 2, keep-with-next
   1574          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1575          {
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1576              if(hspi->Instance==SPI1)
   1577              {
   1578                  /* Copy Data to Record Buffer */
   1579          		//RecordUpdBuf();
   1580          		//XferCplt = 1;
   1581                  //Audio_Play_Out();
   1582              }
   1583              else if (hspi->Instance==SPI2)
   1584              {
   1585          
   1586              }
   1587              else if (hspi->Instance==SPI4)
   1588              {
   1589          
   1590              }
   1591          	else
   1592          	{
   1593          
   1594          	}
   1595          
   1596              if (hspi->Instance==SPI5)
   \   00000004   0x....             LDR.N    R1,??DataTable20_11  ;; 0x40015000
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD113             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1597              {
   1598                  MIC7Rec();
   \   0000000C   0x....             LDR.N    R0,??DataTable20_1
   \   0000000E   0xF44F 0x5280      MOV      R2,#+4096
   \   00000012   0xF890 0x1130      LDRB     R1,[R0, #+304]
   \   00000016   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000001A   0xF880 0x1130      STRB     R1,[R0, #+304]
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0xF880 0x1132      STRB     R1,[R0, #+306]
   \   00000024   0xF890 0x1130      LDRB     R1,[R0, #+304]
   \   00000028   0x2901             CMP      R1,#+1
   \   0000002A   0xBF0C             ITE      EQ 
   \   0000002C   0x....             LDREQ.N  R1,??DataTable20_28
   \   0000002E   0x....             LDRNE.N  R1,??DataTable20_7
   \   00000030   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1599              }
   1600              else
   1601              {
   1602                
   1603              }
   1604              
   1605              if (hspi->Instance==SPI6) //MIC8
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0x....             LDR.N    R1,??DataTable20_10  ;; 0x40015400
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xD116             BNE.N    ??HAL_SPI_RxCpltCallback_1
   1606              {
   1607          #if 0							
   1608          
   1609              if (swtSDO8==0x01)
   1610             {
   1611                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1612             }
   1613             else
   1614             {
   1615          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1616             }      
   1617             AudioUSBSend(idxFrmPDMMic8++);
   1618          
   1619             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   1620             {
   1621                 swtSDO8^=0x01;
   1622                 WaveRecord_flgSDO8Finish = 1;
   1623                 idxFrmPDMMic8 = 0;
   1624          		RESET_IDX
   1625          		XferCplt = 0; // clear DMA interrupt flag
   1626          		switch (buffer_switch)
   1627          		{
   1628          	        case BUF1_PLAY: 		
   1629          	          buffer_switch = BUF3_PLAY;
   1630          	          break;
   1631          	        case BUF2_PLAY: 
   1632          	          buffer_switch = BUF1_PLAY;		
   1633          	          break;
   1634          	        case BUF3_PLAY: 	
   1635          	          buffer_switch = BUF2_PLAY;
   1636          	          break;
   1637          	        default:
   1638          	          break;
   1639          		}
   1640          
   1641          		/* Last player Frame is finished */
   1642          		AudioPlayerUpd(); 		
   1643          		
   1644          		if (cntStrt<100) cntStrt++;		   
   1645                  
   1646             }
   1647          
   1648          
   1649          #else
   1650              MIC8Rec();
   \   0000003C   0x....             LDR.N    R0,??DataTable20_1
   \   0000003E   0xF44F 0x5280      MOV      R2,#+4096
   \   00000042   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   00000046   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000004A   0xF880 0x1131      STRB     R1,[R0, #+305]
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0xF880 0x1133      STRB     R1,[R0, #+307]
   \   00000054   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   00000058   0x2901             CMP      R1,#+1
   \   0000005A   0xBF0C             ITE      EQ 
   \   0000005C   0x....             LDREQ.N  R1,??DataTable20_29
   \   0000005E   0x....             LDRNE.N  R1,??DataTable20_8
   \   00000060   0x3064             ADDS     R0,R0,#+100
   \   00000062   0xE8BD 0x4010      POP      {R4,LR}
   \   00000066   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1651          	
   1652          #endif
   1653          
   1654            }
   1655          }
   \                     ??HAL_SPI_RxCpltCallback_1: (+1)
   \   0000006A   0xBD10             POP      {R4,PC}          ;; return
   1656          

   \                                 In section .text, align 4, keep-with-next
   1657          void PDM2PCMSDO78(void)
   1658          {
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   1659          static int16_t Mic7LPOld,Mic8LPOld;
   1660          uint8_t buffer_switch_tmp;
   1661          
   1662          buffer_switch_tmp = buffer_switch;
   \   00000004   0x....             LDR.N    R4,??DataTable20_25
   \   00000006   0xB081             SUB      SP,SP,#+4
   1663          
   1664          /*-------------------------------------------------------------------------------------------------------------
   1665          			  
   1666          	Sequence  Record Data					  Processing Data				  Player Data
   1667          			  
   1668          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1669          			  
   1670          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1671          			  
   1672          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1673           ---------------------------------------------------------------------------------------------------------------*/
   1674          
   1675              /* Data in Mic7 finished recording */
   1676              if (WaveRecord_flgSDO7Finish==1)
   \   00000008   0x.... 0x....      LDR.W    R8,??DataTable20_1
   \   0000000C   0x7825             LDRB     R5,[R4, #+0]
   \   0000000E   0xF898 0x0132      LDRB     R0,[R8, #+306]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD16C             BNE.N    ??PDM2PCMSDO78_0
   1677              {
   1678                  WaveRecord_flgSDO7Finish=0;
   \   00000016   0x2000             MOVS     R0,#+0
   1679          
   1680                  uint8_t swtSDO7_tmp;
   1681                  swtSDO7_tmp = swtSDO7;
   1682          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000018   0x4683             MOV      R11,R0
   \   0000001A   0xF888 0x0132      STRB     R0,[R8, #+306]
   \   0000001E   0xF898 0x9130      LDRB     R9,[R8, #+304]
   \   00000022   0x....             LDR.N    R6,??DataTable20_7
   \   00000024   0x.... 0x....      LDR.W    R7,??DataTable20_28
   \   00000028   0x.... 0x....      LDR.W    R10,??DataTable20
   1683          		{
   1684          	        if(swtSDO7_tmp==0x01)
   \                     ??PDM2PCMSDO78_1: (+1)
   \   0000002C   0xF1B9 0x0F01      CMP      R9,#+1
   1685          	        {
   1686          	            pDataMic7[i%64] = HTONS(TestSDO7[i]);					
   1687          	        }
   1688          	        else
   1689          	        {
   1690          	           pDataMic7[i%64] = HTONS(TestSDO7_1[i]);
   \   00000030   0xEA4F 0x116B      ASR      R1,R11,#+5
   \   00000034   0xEB0B 0x6191      ADD      R1,R11,R1, LSR #+26
   \   00000038   0xBF0C             ITE      EQ 
   \   0000003A   0x8830             LDRHEQ   R0,[R6, #+0]
   \   0000003C   0x8838             LDRHNE   R0,[R7, #+0]
   \   0000003E   0x1189             ASRS     R1,R1,#+6
   \   00000040   0x4602             MOV      R2,R0
   \   00000042   0xEBAB 0x1181      SUB      R1,R11,R1, LSL #+6
   \   00000046   0x0200             LSLS     R0,R0,#+8
   \   00000048   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   0000004C   0xEB08 0x0141      ADD      R1,R8,R1, LSL #+1
   \   00000050   0xF8A1 0x01C4      STRH     R0,[R1, #+452]
   1691          	        }
   1692          
   1693          	        /* PDM conversion for frame of 64 inputs, 16 outputs */
   1694          	        if (i%64==63)
   \   00000054   0xEA4F 0x106B      ASR      R0,R11,#+5
   \   00000058   0xEB0B 0x6090      ADD      R0,R11,R0, LSR #+26
   \   0000005C   0x1180             ASRS     R0,R0,#+6
   \   0000005E   0xEBAB 0x1180      SUB      R1,R11,R0, LSL #+6
   \   00000062   0x293F             CMP      R1,#+63
   \   00000064   0xD11F             BNE.N    ??PDM2PCMSDO78_2
   1695          	        {
   1696          				/* Put them in processing phase */
   1697          	          /* Recording Audio Data */						 
   1698          	          switch (buffer_switch_tmp)
   \   00000066   0xB11D             CBZ.N    R5,??PDM2PCMSDO78_3
   \   00000068   0x2D02             CMP      R5,#+2
   \   0000006A   0xD011             BEQ.N    ??PDM2PCMSDO78_4
   \   0000006C   0xD308             BCC.N    ??PDM2PCMSDO78_5
   \   0000006E   0xE01A             B.N      ??PDM2PCMSDO78_2
   1699          	          {
   1700          			    case BUF1_PLAY:								
   1701                            PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 54 ,
   1702                            (PDMFilter_InitStruct *)&Filter[0]);						  
   \                     ??PDM2PCMSDO78_3: (+1)
   \   00000070   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \   00000074   0xF108 0x03C8      ADD      R3,R8,#+200
   \   00000078   0x2236             MOVS     R2,#+54
   \   0000007A   0xF500 0x41E0      ADD      R1,R0,#+28672
   \   0000007E   0xE00E             B.N      ??PDM2PCMSDO78_6
   1703                            break;	              
   1704          	            case BUF2_PLAY:
   1705          					PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 54 ,
   1706          					(PDMFilter_InitStruct *)&Filter[0]);							
   \                     ??PDM2PCMSDO78_5: (+1)
   \   00000080   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \   00000084   0xF108 0x03C8      ADD      R3,R8,#+200
   \   00000088   0x2236             MOVS     R2,#+54
   \   0000008A   0xF500 0x4130      ADD      R1,R0,#+45056
   \   0000008E   0xE006             B.N      ??PDM2PCMSDO78_6
   1707          					break;
   1708          	            case BUF3_PLAY:
   1709          					PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 54 ,
   1710          					(PDMFilter_InitStruct *)&Filter[0]);		
   \                     ??PDM2PCMSDO78_4: (+1)
   \   00000090   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \   00000094   0xF108 0x03C8      ADD      R3,R8,#+200
   \   00000098   0x2236             MOVS     R2,#+54
   \   0000009A   0xF500 0x5140      ADD      R1,R0,#+12288
   \                     ??PDM2PCMSDO78_6: (+1)
   \   0000009E   0xF508 0x70E2      ADD      R0,R8,#+452
   \   000000A2   0x.... 0x....      BL       PDM_Filter_64_LSB
   1711          					break;
   1712          	            default:
   1713          	                break; 
   1714          	          }
   1715          	        }
   1716          	     }
   \                     ??PDM2PCMSDO78_2: (+1)
   \   000000A6   0xF10B 0x0B01      ADD      R11,R11,#+1
   \   000000AA   0x1CBF             ADDS     R7,R7,#+2
   \   000000AC   0x1CB6             ADDS     R6,R6,#+2
   \   000000AE   0xF5BB 0x5F80      CMP      R11,#+4096
   \   000000B2   0xDBBB             BLT.N    ??PDM2PCMSDO78_1
   1717                  /* LowPass Filter 
   1718                        dT = 1/16000
   1719                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1720          		*/						 
   1721          		switch (buffer_switch)
   \   000000B4   0x7820             LDRB     R0,[R4, #+0]
   \   000000B6   0xB118             CBZ.N    R0,??PDM2PCMSDO78_7
   \   000000B8   0x2802             CMP      R0,#+2
   \   000000BA   0xD00E             BEQ.N    ??PDM2PCMSDO78_8
   \   000000BC   0xD30A             BCC.N    ??PDM2PCMSDO78_9
   \   000000BE   0xE017             B.N      ??PDM2PCMSDO78_0
   1722          		{
   1723          			case BUF1_PLAY: 
   1724          				LowPassIIR(Buffer2.bufMIC7 ,Buffer2.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_7: (+1)
   \   000000C0   0x2004             MOVS     R0,#+4
   \   000000C2   0xF50A 0x41E0      ADD      R1,R10,#+28672
   \   000000C6   0x9000             STR      R0,[SP, #+0]
   \   000000C8   0xF44F 0x6380      MOV      R3,#+1024
   \   000000CC   0xF50A 0x4240      ADD      R2,R10,#+49152
   \   000000D0   0x4608             MOV      R0,R1
   \   000000D2   0xE00B             B.N      ??PDM2PCMSDO78_10
   1725          			    break;
   1726          			case BUF2_PLAY:
   1727          				LowPassIIR(Buffer3.bufMIC7 ,Buffer3.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_9: (+1)
   \   000000D4   0xF50A 0x4030      ADD      R0,R10,#+45056
   \   000000D8   0xE001             B.N      ??PDM2PCMSDO78_11
   1728          			    break;
   1729          			case BUF3_PLAY:
   1730          			    LowPassIIR(Buffer1.bufMIC7 ,Buffer1.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);						
   \                     ??PDM2PCMSDO78_8: (+1)
   \   000000DA   0xF50A 0x5040      ADD      R0,R10,#+12288
   \                     ??PDM2PCMSDO78_11: (+1)
   \   000000DE   0x2104             MOVS     R1,#+4
   \   000000E0   0xF44F 0x6380      MOV      R3,#+1024
   \   000000E4   0x9100             STR      R1,[SP, #+0]
   \   000000E6   0xF50A 0x4240      ADD      R2,R10,#+49152
   \   000000EA   0x4601             MOV      R1,R0
   \                     ??PDM2PCMSDO78_10: (+1)
   \   000000EC   0x.... 0x....      BL       LowPassIIR
   1731          			    break;
   1732          			default:
   1733          			break; 
   1734          		}
   1735          
   1736          
   1737          	}
   1738          #if 0
   1739                      /* Recording Audio Data */						 
   1740          		    switch (buffer_switch)//buffer_switch
   1741          		    {
   1742          		        case BUF1_PLAY:								
   1743          					        /* Update for left-right channel */
   1744          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1745          			        {
   1746          	                    Buffer2.bufMIC7[2*i+1]=  Buffer2.bufMIC7[i];
   1747                                  Buffer2.bufMIC7[2*i] = Buffer2.bufMIC7[i];
   1748          			        }
   1749          					  Buffer2.bufMIC7[0] = Buffer2.bufMIC7[4];
   1750          					  Buffer2.bufMIC7[1] = Buffer2.bufMIC7[5];
   1751          					  Buffer2.bufMIC7[2] = Buffer2.bufMIC7[6];
   1752          					  Buffer2.bufMIC7[3] = Buffer2.bufMIC7[7];
   1753          			            break;
   1754          			     case BUF2_PLAY:
   1755          			        /* Update for left-right channel */
   1756          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1757          			        {				 	
   1758          		                Buffer3.bufMIC7[2*i+1]= Buffer3.bufMIC7[i];
   1759          		                Buffer3.bufMIC7[2*i]= Buffer3.bufMIC7[i];;	
   1760          			        }
   1761          					  Buffer3.bufMIC7[0] = Buffer3.bufMIC7[4];
   1762          					  Buffer3.bufMIC7[1] = Buffer3.bufMIC7[5];
   1763          					  Buffer3.bufMIC7[2] = Buffer3.bufMIC7[6];
   1764          					  Buffer3.bufMIC7[3] = Buffer3.bufMIC7[7];					
   1765          	                break;
   1766          	            case BUF3_PLAY:
   1767          			        /* Update for left-right channel */
   1768          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1769          			        {					
   1770          	                    Buffer1.bufMIC7[2*i+1]= Buffer1.bufMIC7[i];
   1771          	                    Buffer1.bufMIC7[2*i]= Buffer1.bufMIC7[i];;	
   1772          			        }
   1773          					  Buffer1.bufMIC7[0] = Buffer1.bufMIC7[4];
   1774          					  Buffer1.bufMIC7[1] = Buffer1.bufMIC7[5];
   1775          					  Buffer1.bufMIC7[2] = Buffer1.bufMIC7[6];
   1776          					  Buffer1.bufMIC7[3] = Buffer1.bufMIC7[7];						
   1777          	                break;
   1778          	            default:
   1779          	                break; 
   1780          	        }
   1781          	    
   1782          
   1783               }
   1784              
   1785          #endif	
   1786          
   1787          	/* Data in Mic8 finished recording */
   1788          	if (WaveRecord_flgSDO8Finish==1)
   \                     ??PDM2PCMSDO78_0: (+1)
   \   000000F0   0xF898 0x0133      LDRB     R0,[R8, #+307]
   \   000000F4   0x2801             CMP      R0,#+1
   \   000000F6   0xD165             BNE.N    ??PDM2PCMSDO78_12
   1789          	{
   1790          		WaveRecord_flgSDO8Finish=0;
   \   000000F8   0x2000             MOVS     R0,#+0
   1791          		uint8_t swtSDO8_tmp;
   1792          		swtSDO8_tmp = swtSDO8;
   1793          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   000000FA   0x2500             MOVS     R5,#+0
   \   000000FC   0xF888 0x0133      STRB     R0,[R8, #+307]
   \   00000100   0xF898 0x9131      LDRB     R9,[R8, #+305]
   \   00000104   0x....             LDR.N    R6,??DataTable20_8
   \   00000106   0x....             LDR.N    R7,??DataTable20_29
   \   00000108   0x.... 0x....      LDR.W    R10,??DataTable20
   1794          		{
   1795                            if(swtSDO8_tmp==0x01)
   \                     ??PDM2PCMSDO78_13: (+1)
   \   0000010C   0xF1B9 0x0F01      CMP      R9,#+1
   \   00000110   0xBF0C             ITE      EQ 
   \   00000112   0x8830             LDRHEQ   R0,[R6, #+0]
   \   00000114   0x8838             LDRHNE   R0,[R7, #+0]
   1796                            {
   1797                               pDataMic8[i%64] = HTONS(TestSDO8[i]);
   1798                            }
   1799                            else
   1800                            {
   1801                               pDataMic8[i%64] = HTONS(TestSDO8_1[i]);
   \   00000116   0x1169             ASRS     R1,R5,#+5
   \   00000118   0x4602             MOV      R2,R0
   \   0000011A   0xEB05 0x6191      ADD      R1,R5,R1, LSR #+26
   \   0000011E   0x0200             LSLS     R0,R0,#+8
   \   00000120   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000124   0x1189             ASRS     R1,R1,#+6
   \   00000126   0xEBA5 0x1181      SUB      R1,R5,R1, LSL #+6
   \   0000012A   0xEB08 0x0141      ADD      R1,R8,R1, LSL #+1
   \   0000012E   0xF8A1 0x0144      STRH     R0,[R1, #+324]
   1802                            }
   1803          		
   1804                            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1805                            if (i%64==63)
   \   00000132   0x1168             ASRS     R0,R5,#+5
   \   00000134   0xEB05 0x6090      ADD      R0,R5,R0, LSR #+26
   \   00000138   0x1180             ASRS     R0,R0,#+6
   \   0000013A   0xEBA5 0x1180      SUB      R1,R5,R0, LSL #+6
   \   0000013E   0x293F             CMP      R1,#+63
   \   00000140   0xD120             BNE.N    ??PDM2PCMSDO78_14
   1806                            {
   1807                                /* Recording Audio Data */						 
   1808                                switch (buffer_switch)
   \   00000142   0x7821             LDRB     R1,[R4, #+0]
   \   00000144   0xB119             CBZ.N    R1,??PDM2PCMSDO78_15
   \   00000146   0x2902             CMP      R1,#+2
   \   00000148   0xD011             BEQ.N    ??PDM2PCMSDO78_16
   \   0000014A   0xD308             BCC.N    ??PDM2PCMSDO78_17
   \   0000014C   0xE01A             B.N      ??PDM2PCMSDO78_14
   1809                                {
   1810                                        case BUF1_PLAY: 							
   1811                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 54 ,
   1812                                                (PDMFilter_InitStruct *)&Filter[1]);
   \                     ??PDM2PCMSDO78_15: (+1)
   \   0000014E   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \   00000152   0xF108 0x03FC      ADD      R3,R8,#+252
   \   00000156   0x2236             MOVS     R2,#+54
   \   00000158   0xF500 0x41F0      ADD      R1,R0,#+30720
   \   0000015C   0xE00E             B.N      ??PDM2PCMSDO78_18
   1813                                                break;
   1814                                        case BUF2_PLAY:
   1815                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 54 ,
   1816                                                (PDMFilter_InitStruct *)&Filter[1]);	
   \                     ??PDM2PCMSDO78_17: (+1)
   \   0000015E   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \   00000162   0xF108 0x03FC      ADD      R3,R8,#+252
   \   00000166   0x2236             MOVS     R2,#+54
   \   00000168   0xF500 0x4138      ADD      R1,R0,#+47104
   \   0000016C   0xE006             B.N      ??PDM2PCMSDO78_18
   1817                                                break;
   1818                                        case BUF3_PLAY:
   1819                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 54 ,
   1820                                                (PDMFilter_InitStruct *)&Filter[1]);									
   \                     ??PDM2PCMSDO78_16: (+1)
   \   0000016E   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \   00000172   0xF108 0x03FC      ADD      R3,R8,#+252
   \   00000176   0x2236             MOVS     R2,#+54
   \   00000178   0xF500 0x5160      ADD      R1,R0,#+14336
   \                     ??PDM2PCMSDO78_18: (+1)
   \   0000017C   0xF508 0x70A2      ADD      R0,R8,#+324
   \   00000180   0x.... 0x....      BL       PDM_Filter_64_LSB
   1821                                                 break;
   1822                                        default:
   1823                                                 break; 
   1824                                }		
   1825                             }					 
   1826          		}
   \                     ??PDM2PCMSDO78_14: (+1)
   \   00000184   0x1C6D             ADDS     R5,R5,#+1
   \   00000186   0x1CBF             ADDS     R7,R7,#+2
   \   00000188   0x1CB6             ADDS     R6,R6,#+2
   \   0000018A   0xF5B5 0x5F80      CMP      R5,#+4096
   \   0000018E   0xDBBD             BLT.N    ??PDM2PCMSDO78_13
   1827          
   1828                  /* LowPass Filter 
   1829                        dT = 1/16000
   1830                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1831          		*/						 
   1832          		switch (buffer_switch)
   \   00000190   0x7820             LDRB     R0,[R4, #+0]
   \   00000192   0xB128             CBZ.N    R0,??PDM2PCMSDO78_19
   \   00000194   0x2802             CMP      R0,#+2
   \   00000196   0xD009             BEQ.N    ??PDM2PCMSDO78_20
   \   00000198   0xD305             BCC.N    ??PDM2PCMSDO78_21
   1833          		{
   1834          			case BUF1_PLAY: 
   1835          				LowPassIIR(Buffer2.bufMIC8 ,Buffer2.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1836          			    break;
   1837          			case BUF2_PLAY:
   1838          				LowPassIIR(Buffer3.bufMIC8 ,Buffer3.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1839          			    break;
   1840          			case BUF3_PLAY:
   1841          			    LowPassIIR(Buffer1.bufMIC8 ,Buffer1.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);						
   1842          			    break;
   1843          			default:
   1844          			break; 
   1845          		}
   1846                    					 
   1847                         	  
   1848             }//if (WaveRecord_flgSDO8Finish==1)
   1849          }
   \   0000019A   0xB001             ADD      SP,SP,#+4
   \   0000019C   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??PDM2PCMSDO78_19: (+1)
   \   000001A0   0xF50A 0x40F0      ADD      R0,R10,#+30720
   \   000001A4   0xE004             B.N      ??PDM2PCMSDO78_22
   \                     ??PDM2PCMSDO78_21: (+1)
   \   000001A6   0xF50A 0x4038      ADD      R0,R10,#+47104
   \   000001AA   0xE001             B.N      ??PDM2PCMSDO78_22
   \                     ??PDM2PCMSDO78_20: (+1)
   \   000001AC   0xF50A 0x5060      ADD      R0,R10,#+14336
   \                     ??PDM2PCMSDO78_22: (+1)
   \   000001B0   0x2104             MOVS     R1,#+4
   \   000001B2   0xF50A 0x4240      ADD      R2,R10,#+49152
   \   000001B6   0x9100             STR      R1,[SP, #+0]
   \   000001B8   0xF44F 0x6380      MOV      R3,#+1024
   \   000001BC   0x1C92             ADDS     R2,R2,#+2
   \   000001BE   0x4601             MOV      R1,R0
   \   000001C0   0x.... 0x....      BL       LowPassIIR
   \                     ??PDM2PCMSDO78_12: (+1)
   \   000001C4   0xB001             ADD      SP,SP,#+4
   \   000001C6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .bss, align 4
   \                     Buffer1:
   \   00000000                      DS8 16384
   \                     Buffer2:
   \   00004000                      DS8 16384
   \                     Buffer3:
   \   00008000                      DS8 16384
   \   0000C000                      DS8 2
   \   0000C002                      DS8 2
   1850          

   \                                 In section .text, align 2, keep-with-next
   1851          void MIC7Rec (void)
   1852          {
   1853          	swtSDO7^=0x01;
   \                     MIC7Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_1
   1854          	WaveRecord_flgSDO7Finish = 1;
   1855          	if (swtSDO7==0x01)
   \   00000002   0xF44F 0x5280      MOV      R2,#+4096
   \   00000006   0xF890 0x1130      LDRB     R1,[R0, #+304]
   \   0000000A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000E   0xF880 0x1130      STRB     R1,[R0, #+304]
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0xF880 0x1132      STRB     R1,[R0, #+306]
   \   00000018   0xF890 0x1130      LDRB     R1,[R0, #+304]
   \   0000001C   0x2901             CMP      R1,#+1
   \   0000001E   0xBF0C             ITE      EQ 
   \   00000020   0x....             LDREQ.N  R1,??DataTable20_28
   \   00000022   0x....             LDRNE.N  R1,??DataTable20_7
   1856          	{
   1857          		HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   1858          	}
   1859          	else
   1860          	{
   1861          		HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000024   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1862          	} 
   1863          
   1864          }
   1865          

   \                                 In section .text, align 2, keep-with-next
   1866          void MIC8Rec (void)
   1867          {
   1868               swtSDO8^=0x01;
   \                     MIC8Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_1
   1869              WaveRecord_flgSDO8Finish = 1;
   1870              if (swtSDO8==0x01)
   \   00000002   0xF44F 0x5280      MOV      R2,#+4096
   \   00000006   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   0000000A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000E   0xF880 0x1131      STRB     R1,[R0, #+305]
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0xF880 0x1133      STRB     R1,[R0, #+307]
   \   00000018   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   0000001C   0x2901             CMP      R1,#+1
   \   0000001E   0xBF0C             ITE      EQ 
   \   00000020   0x....             LDREQ.N  R1,??DataTable20_29
   \   00000022   0x....             LDRNE.N  R1,??DataTable20_8
   1871              {
   1872                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   1873              }
   1874              else
   1875              {
   1876                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000024   0x3064             ADDS     R0,R0,#+100
   \   00000026   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1877          
   1878              }
   1879          
   1880          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x4001300C         DC32     0x4001300c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x4001340C         DC32     0x4001340c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x4001540C         DC32     0x4001540c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_10:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_11:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_12:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_13:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_14:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_15:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_16:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_17:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_18:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_19:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_20:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_21:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_22:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_23:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_24:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_25:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_26:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_27:
   \   00000000   0x........         DC32     hdma_spi5_rx+0x50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_28:
   \   00000000   0x........         DC32     TestSDO7_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_29:
   \   00000000   0x........         DC32     TestSDO8_1
   1881          
   1882          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DMA2_Stream5_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream6_IRQHandler
         0   -> HAL_DMA_IRQHandler
      40   HAL_SPI_MspInit
        40   -> HAL_DMA_DeInit
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
       8   HAL_SPI_RxCpltCallback
         0   -> HAL_SPI_Receive_DMA
         8   -> HAL_SPI_Receive_DMA
      16   MIC1TO8_Init
        16   -> HAL_I2S_Init
        16   -> SPI4_Init
        16   -> SPI5_Init
         0   -> SPI6_Init
       0   MIC7Rec
         0   -> HAL_SPI_Receive_DMA
       0   MIC8Rec
         0   -> HAL_SPI_Receive_DMA
       0   Mic7Rec
         0   -> SPI5_Init
       0   Mic8Rec
         0   -> HAL_SPI_Init
      40   PDM2PCMSDO78
        40   -> LowPassIIR
        40   -> PDM_Filter_64_LSB
       0   RecordUpdBuf
       8   SPI1_IRQHandler
         8   -> SubFrameFinished
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
      16   SPI2_IRQHandler
        16   -> HAL_GPIO_ReadPin
        16   -> SubFrameFinished
      16   SPI4_IRQHandler
        16   -> HAL_GPIO_ReadPin
        16   -> SubFrameFinished
       8   SPI4_Init
         8   -> HAL_SPI_Init
       8   SPI5_IRQHandler
         8   -> PDM_Filter_64_LSB
      32   SPI5_Init
         0   -> HAL_SPI_Init
        32   -> PDM_Filter_Init
       8   SPI6_IRQHandler
         8   -> PDM_Filter_64_LSB
       0   SPI6_Init
         0   -> HAL_SPI_Init
       8   StartRecMic7_8
         8   -> HAL_SPI_Receive_DMA
       0   mySPI_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable16
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_13
       4  ??DataTable20_14
       4  ??DataTable20_15
       4  ??DataTable20_16
       4  ??DataTable20_17
       4  ??DataTable20_18
       4  ??DataTable20_19
       4  ??DataTable20_2
       4  ??DataTable20_20
       4  ??DataTable20_21
       4  ??DataTable20_22
       4  ??DataTable20_23
       4  ??DataTable20_24
       4  ??DataTable20_25
       4  ??DataTable20_26
       4  ??DataTable20_27
       4  ??DataTable20_28
       4  ??DataTable20_29
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
   49156  Buffer1
          Buffer2
          Buffer3
          Mic7LPOld
          Mic8LPOld
       6  DMA2_Stream5_IRQHandler
       6  DMA2_Stream6_IRQHandler
    1056  HAL_SPI_MspInit
     108  HAL_SPI_RxCpltCallback
       2  I2S1_stNipple
       1  I2S1_stPosShft
       2  I2S2_stNipple
       1  I2S2_stPosShft
     128  MIC1TO8_Init
      40  MIC7Rec
      42  MIC8Rec
       2  Mic7Rec
      76  Mic8Rec
     458  PDM2PCMSDO78
     534  RecordUpdBuf
     482  SPI1_IRQHandler
     212  SPI1_Ini
       2  SPI1_stNipple
     452  SPI2_IRQHandler
     488  SPI4_IRQHandler
      86  SPI4_Init
     130  SPI5_IRQHandler
     138  SPI5_Init
     124  SPI6_IRQHandler
      76  SPI6_Init
      48  StartRecMic7_8
    8192  TestSDO12
    8192  TestSDO34
    8192  TestSDO56
    8192  TestSDO7
    8192  TestSDO7_1
    8192  TestSDO8
    8192  TestSDO8_1
       1  WaveRecord_flgIni
       2  cntStrt
       2  cntTransFinish
      80  hdma_spi2_tx
      80  hdma_spi3_tx
     160  hdma_spi5_rx
          hdma_spi6_rx
     152  hi2s1
          hi2s2
          flgRacing
          WaveRecord_flgInt
          SPI4_stPosShft
          I2S2_stLR
          I2S2_stLROld
          stLROld
          Main_stLR
          Main_stLROld
          WaveRec_idxTest
          vRawSens1
          vRawSens2
          vRawSens4
          vRawSens3
          vRawSens5
          vRawSens6
          SPI4_stNipple
     100  hspi1
     100  hspi2
     580  hspi5
          hspi6
          Filter
          swtSDO7
          swtSDO8
          WaveRecord_flgSDO7Finish
          WaveRecord_flgSDO8Finish
          idxMic8
          idxMic7
          cntPos
          cntPos7
          bufPCMSens7
          bufPCMSens8
          pDataMic8
          pDataMic7
       2  iSDO12
       2  iSDO34
       2  iSDO56
       2  idxFrmPDMMic8
      44  mySPI_SendData
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins

 
 108 049 bytes in section .bss
   4 928 bytes in section .text
 
   4 928 bytes of CODE memory
 108 049 bytes of DATA memory

Errors: none
Warnings: 7
