###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       22/Dec/2015  23:10:17
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -Ohz --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          /**
      2            ******************************************************************************
      3            * @file    Audio/Audio_playback_and_record/Src/waverecorder.c 
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    25-June-2015
      7            * @brief   This file provides the Audio In (record) interface API
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
     12            *
     13            * Redistribution and use in source and binary forms, with or without modification,
     14            * are permitted provided that the following conditions are met:
     15            *   1. Redistributions of source code must retain the above copyright notice,
     16            *      this list of conditions and the following disclaimer.
     17            *   2. Redistributions in binary form must reproduce the above copyright notice,
     18            *      this list of conditions and the following disclaimer in the documentation
     19            *      and/or other materials provided with the distribution.
     20            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     21            *      may be used to endorse or promote products derived from this software
     22            *      without specific prior written permission.
     23            *
     24            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     25            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     26            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     27            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     28            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     29            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     30            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     31            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     32            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     33            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     34            *
     35            ******************************************************************************
     36            */  
     37          
     38          /* Includes ------------------------------------------------------------------*/
     39          #include "waverecorder.h" 
     40          #include "string.h"
     41          //#include "stm32f7xx_hal_spi.h"
     42          #include "stm32f7xx_hal.h"
     43          #include "pdm_filter.h"
     44          
     45          
     46          /* Private typedef -----------------------------------------------------------*/
     47          /* Private define ------------------------------------------------------------*/
     48          #define TOUCH_RECORD_XMIN       300
     49          #define TOUCH_RECORD_XMAX       340
     50          #define TOUCH_RECORD_YMIN       212
     51          #define TOUCH_RECORD_YMAX       252
     52          
     53          #define TOUCH_STOP_XMIN         205
     54          #define TOUCH_STOP_XMAX         245
     55          #define TOUCH_STOP_YMIN         212
     56          #define TOUCH_STOP_YMAX         252
     57          
     58          #define TOUCH_PAUSE_XMIN        125
     59          #define TOUCH_PAUSE_XMAX        149
     60          #define TOUCH_PAUSE_YMIN        212
     61          #define TOUCH_PAUSE_YMAX        252
     62          
     63          #define TOUCH_VOL_MINUS_XMIN    20
     64          #define TOUCH_VOL_MINUS_XMAX    70
     65          #define TOUCH_VOL_MINUS_YMIN    212
     66          #define TOUCH_VOL_MINUS_YMAX    252
     67          
     68          #define TOUCH_VOL_PLUS_XMIN     402
     69          #define TOUCH_VOL_PLUS_XMAX     452
     70          #define TOUCH_VOL_PLUS_YMIN     212
     71          #define TOUCH_VOL_PLUS_YMAX     252
     72          
     73          
     74          
     75          /* SPI Configuration defines */
     76          #define SPI_SCK_PIN                       GPIO_PIN_10
     77          #define SPI_SCK_GPIO_PORT                 GPIOB
     78          #define SPI_SCK_GPIO_CLK                  1
     79          #define SPI_SCK_SOURCE                    1
     80          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     81          
     82          #define SPI_MOSI_PIN                      GPIO_PIN_3
     83          #define SPI_MOSI_GPIO_PORT                GPIOC
     84          #define SPI_MOSI_GPIO_CLK                 1
     85          #define SPI_MOSI_SOURCE                   1
     86          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     87          
     88          
     89          /* sop1hc */
     90          #define SPI1_SCK_PIN                       GPIO_PIN_5
     91          #define SPI1_SCK_GPIO_PORT                 GPIOA
     92          #define SPI1_SCK_GPIO_CLK                  1
     93          #define SPI1_SCK_SOURCE                    1
     94          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     95          
     96          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     97          #define SPI1_MOSI_GPIO_PORT                GPIOA
     98          #define SPI1_MOSI_GPIO_CLK                 1
     99          #define SPI1_MOSI_SOURCE                   1
    100          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
    101          
    102          #define SPI1_MISO_PIN                      GPIO_PIN_6
    103          #define SPI1_MISO_GPIO_PORT                GPIOA
    104          #define SPI1_MISO_GPIO_CLK                 1
    105          #define SPI1_MISO_SOURCE                   1
    106          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
    107          
    108          
    109          #define AUDIO_REC_SPI1_IRQHANDLER          SPI1_IRQHandler
    110          #define AUDIO_REC_SPI2_IRQHANDLER          SPI2_IRQHandler
    111          #define AUDIO_REC_SPI3_IRQHANDLER          SPI3_IRQHandler
    112          
    113          
    114          
    115          

   \                                 In section .bss, align 4
    116          uint8_t pHeaderBuff[44];
   \                     pHeaderBuff:
   \   00000000                      DS8 44
    117          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];

   \                                 In section .bss, align 2
    118          uint16_t volatile cntTransFinish;
   \                     cntTransFinish:
   \   00000000                      DS8 2
    119          
    120          /* Private macro -------------------------------------------------------------*/
    121          /* Private variables ---------------------------------------------------------*/
    122          extern AUDIO_IN_BufferTypeDef  BufferCtlRecIn,Buffer1, Buffer2;

   \                                 In section .bss, align 4
    123          I2S_HandleTypeDef hi2s1;
   \                     hi2s1:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
    124          I2S_HandleTypeDef hi2s2;
   \                     hi2s2:
   \   00000000                      DS8 64
    125          extern I2S_HandleTypeDef hi2s3;

   \                                 In section .bss, align 4
    126          SPI_HandleTypeDef spi1_ins;
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
    127          SPI_HandleTypeDef spi2_ins;
   \                     spi2_ins:
   \   00000000                      DS8 100
    128          

   \                                 In section .bss, align 4
    129          DMA_HandleTypeDef hdma_spi2_tx;
   \                     hdma_spi2_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
    130          DMA_HandleTypeDef hdma_spi3_tx;
   \                     hdma_spi3_tx:
   \   00000000                      DS8 80
    131          

   \                                 In section .bss, align 2
    132          __IO uint16_t cntPos;
   \                     cntPos:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
    133          PDMFilter_InitStruct Filter[2];
   \                     Filter:
   \   00000000                      DS8 104
    134          
    135          
    136          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
    137          static __IO uint32_t uwVolume = 70;
    138          extern WAVE_FormatTypeDef WaveFormat;
    139          extern FIL WavFile;
    140          extern AUDIO_DEMO_StateMachine AudioDemo;
    141          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
    142          
    143          
    144          //static uint16_t pDataI2S2[1024];
    145          static __IO uint16_t iBuff;
    146          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
    147          
    148          
    149          
    150          /* Private function prototypes -----------------------------------------------*/
    151          
    152          
    153          
    154          /*sop1hc*/
    155          static uint8_t PlayerIni(uint32_t AudioFreq);
    156          
    157          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    158          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    159          
    160          static void I2S1_Init(void);
    161          static void I2S2_Init(void);
    162          static void I2S3_Init(void);
    163          static void GPIO_CLK_Init(void);
    164          
    165          
    166          
    167          
    168          /* Private functions ---------------------------------------------------------*/
    169          
    170          
    171          
    172          
    173            
    174          
    175          
    176          
    177          
    178          /* sop1hc */

   \                                 In section .text, align 2, keep-with-next
    179          void Audio_Streaming_Ini(void)
    180          {
    181          
    182          }
   \                     Audio_Streaming_Ini: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    183          

   \                                 In section .text, align 2, keep-with-next
    184          void Audio_Streaming(void)
    185          {
   \                     Audio_Streaming: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    186          
    187          
    188          	/*------------------------------------------------------------------------------------------*/
    189          
    190          	/*-----------------------------PLAY FROM SAI------------------------------------------------*/
    191          
    192          	if(BufferCtlPlayOut.state == BUFFER_OFFSET_HALF)
   \   00000002   0x....             LDR.N    R5,??DataTable5
   \   00000004   0xF44F 0x5400      MOV      R4,#+8192
   \   00000008   0x5D60             LDRB     R0,[R4, R5]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD108             BNE.N    ??Audio_Streaming_0
    193              {
    194          
    195          		 BufferCtlPlayOut.state = BUFFER_OFFSET_NONE;
   \   0000000E   0x2000             MOVS     R0,#+0
    196          
    197          		 //BSP_LCD_DisplayStringAtLine(18,(uint8_t *)BufferCtlPlayOut.buff);
    198          		 if (cntTransFinish==0)
   \   00000010   0x....             LDR.N    R6,??DataTable5_1
   \   00000012   0x5560             STRB     R0,[R4, R5]
   \   00000014   0x8830             LDRH     R0,[R6, #+0]
   \   00000016   0xB940             CBNZ.N   R0,??Audio_Streaming_1
    199          		 {
    200          		     I2S_Init();
   \   00000018   0x.... 0x....      BL       I2S_Init
    201          			 cntTransFinish = 1;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x8030             STRH     R0,[R6, #+0]
    202          		 }
    203          	
    204          	}
    205          
    206          	if(BufferCtlPlayOut.state == BUFFER_OFFSET_FULL)
   \                     ??Audio_Streaming_0: (+1)
   \   00000020   0x5D60             LDRB     R0,[R4, R5]
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xBF04             ITT      EQ 
   \   00000026   0x2000             MOVEQ    R0,#+0
   \   00000028   0x5560             STRBEQ   R0,[R4, R5]
    207              {
    208                   /* copy from Buffer1 to BufferCtlPlayOut */
    209                   //memcpy(&BufferCtlPlayOut.buff[0],&Buffer1.pcm_buff[0],2*AUDIO_OUT_BUFFER_SIZE);
    210          		 BufferCtlPlayOut.state = BUFFER_OFFSET_NONE;
    211          
    212          
    213          
    214                   		/*Adjust the Audio frequency */
    215                   //PlayerIni(DEFAULT_AUDIO_IN_FREQ);//WaveFormat.SampleRate
    216          				 /* Record process*/
    217                   //BSP_AUDIO_IN_Record((uint16_t*)&BufferCtlRecIn.pcm_buff[0], AUDIO_OUT_BUFFER_SIZE);    
    218          		 //BSP_LCD_DisplayStringAtLine(19,(uint8_t *)BufferCtlPlayOut.buff);
    219          	
    220          	}
    221          
    222          	/* -------------------------------------------------------------------------------------------*/
    223          	
    224          	
    225          }
   \                     ??Audio_Streaming_1: (+1)
   \   0000002A   0xBD70             POP      {R4-R6,PC}       ;; return
    226          
    227          

   \                                 In section .text, align 2, keep-with-next
    228          void SPI1_Ini(void)
    229          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    230            GPIO_InitTypeDef GPIO_InitStructure;
    231          
    232           
    233             	 
    234            /* Enable SCK, MOSI and MISO GPIO clocks */
    235            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000002   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40023830
   \   00000004   0xB086             SUB      SP,SP,#+24
    236            __HAL_RCC_GPIOA_CLK_ENABLE();
    237          
    238            
    239            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    240            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    241            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    242          
    243            /* SPI SCK pin configuration */
    244            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    245            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    246            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   00000006   0x....             LDR.N    R4,??DataTable5_3  ;; 0x40020000
   \   00000008   0x6941             LDR      R1,[R0, #+20]
   \   0000000A   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   0000000E   0x6141             STR      R1,[R0, #+20]
   \   00000010   0x6941             LDR      R1,[R0, #+20]
   \   00000012   0xF401 0x5180      AND      R1,R1,#0x1000
   \   00000016   0x9100             STR      R1,[SP, #+0]
   \   00000018   0x9900             LDR      R1,[SP, #+0]
   \   0000001A   0x6801             LDR      R1,[R0, #+0]
   \   0000001C   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000020   0x6001             STR      R1,[R0, #+0]
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xA901             ADD      R1,SP,#+4
   \   00000026   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x9002             STR      R0,[SP, #+8]
   \   00000032   0x9003             STR      R0,[SP, #+12]
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0x9004             STR      R0,[SP, #+16]
   \   00000038   0x2005             MOVS     R0,#+5
   \   0000003A   0x9005             STR      R0,[SP, #+20]
   \   0000003C   0x2020             MOVS     R0,#+32
   \   0000003E   0x.... 0x....      BL       ?Subroutine0
    247          
    248            /* SPI  MOSI pin configuration */
    249            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000042   0x2001             MOVS     R0,#+1
    250            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    251            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   00000044   0xA901             ADD      R1,SP,#+4
   \   00000046   0x9005             STR      R0,[SP, #+20]
   \   00000048   0x2080             MOVS     R0,#+128
   \   0000004A   0x.... 0x....      BL       ?Subroutine0
    252          
    253            /* SPI MISO pin configuration */
    254            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \                     ??CrossCallReturnLabel_1: (+1)
   \   0000004E   0x2001             MOVS     R0,#+1
    255            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    256            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   00000050   0xA901             ADD      R1,SP,#+4
   \   00000052   0x9005             STR      R0,[SP, #+20]
   \   00000054   0x2040             MOVS     R0,#+64
   \   00000056   0x.... 0x....      BL       ?Subroutine0
    257          
    258            /* SPI configuration -------------------------------------------------------*/
    259            //SPI_I2S_DeInit(SPI1);
    260            
    261            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \                     ??CrossCallReturnLabel_0: (+1)
   \   0000005A   0x....             LDR.N    R0,??DataTable5_4
   \   0000005C   0xF44F 0x6180      MOV      R1,#+1024
   \   00000060   0x6081             STR      R1,[R0, #+8]
    262            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000062   0xF44F 0x6170      MOV      R1,#+3840
   \   00000066   0x60C1             STR      R1,[R0, #+12]
    263            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x6101             STR      R1,[R0, #+16]
    264            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    265            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    266            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    267            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    268            spi1_ins.Init.CRCPolynomial = 7;
    269            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   0000006C   0x....             LDR.N    R4,??DataTable5_5  ;; 0x40021000
   \   0000006E   0x6141             STR      R1,[R0, #+20]
   \   00000070   0xF44F 0x7100      MOV      R1,#+512
   \   00000074   0x6181             STR      R1,[R0, #+24]
   \   00000076   0x2128             MOVS     R1,#+40
   \   00000078   0x61C1             STR      R1,[R0, #+28]
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x6201             STR      R1,[R0, #+32]
   \   0000007E   0x2107             MOVS     R1,#+7
   \   00000080   0x62C1             STR      R1,[R0, #+44]
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x6041             STR      R1,[R0, #+4]
    270            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   00000086   0x.... 0x....      BL       HAL_SPI_Init
    271            {
    272              /* Initialization Error */
    273              //Error_Handler();
    274            }
    275            
    276           
    277            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   0000008A   0x2008             MOVS     R0,#+8
    278            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    279            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    280            GPIO_InitStructure.Pull = GPIO_PULLUP;
    281            //GPIO_InitStructure.Alternate 
    282            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   0000008C   0xA901             ADD      R1,SP,#+4
   \   0000008E   0x9001             STR      R0,[SP, #+4]
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x9002             STR      R0,[SP, #+8]
   \   00000094   0x2002             MOVS     R0,#+2
   \   00000096   0x9004             STR      R0,[SP, #+16]
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x9003             STR      R0,[SP, #+12]
   \   0000009C   0x4620             MOV      R0,R4
   \   0000009E   0x.... 0x....      BL       HAL_GPIO_Init
    283          
    284            /* Deselect : Chip Select high */
    285            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000A2   0x2201             MOVS     R2,#+1
   \   000000A4   0x2108             MOVS     R1,#+8
   \   000000A6   0x4620             MOV      R0,R4
   \   000000A8   0x.... 0x....      BL       HAL_GPIO_WritePin
    286             /* sop1hc */
    287            /* Configure the SPI interrupt priority */
    288            HAL_NVIC_SetPriority(SPI1_IRQn, 0, 1);
   \   000000AC   0x2201             MOVS     R2,#+1
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x2023             MOVS     R0,#+35
   \   000000B2   0x.... 0x....      BL       HAL_NVIC_SetPriority
    289            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000B6   0x2023             MOVS     R0,#+35
   \   000000B8   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    290            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    291            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    292          
    293            /* Enable SPI1  */
    294            //__HAL_SPI_ENABLE(SPI1);
    295          
    296          }
   \   000000BC   0xB006             ADD      SP,SP,#+24
   \   000000BE   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x9001             STR      R0,[SP, #+4]
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      B.W      HAL_GPIO_Init
    297          

   \                                 In section .text, align 2, keep-with-next
    298          void mySPI_SendData(uint8_t adress, uint8_t data)
    299          {
   \                     mySPI_SendData: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x....             LDR.N    R5,??DataTable5_4
    300           
    301          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x6829             LDR      R1,[R5, #+0]
   \   00000008   0x6889             LDR      R1,[R1, #+8]
   \   0000000A   0x0789             LSLS     R1,R1,#+30
   \   0000000C   0xD5FB             BPL.N    ??mySPI_SendData_0
    302          SPI_I2S_SendData(SPI1, adress);
   \   0000000E   0x....             LDR.N    R6,??DataTable5_6  ;; 0x40013000
   \   00000010   0x4601             MOV      R1,R0
   \   00000012   0x4630             MOV      R0,R6
   \   00000014   0x.... 0x....      BL       SPI_I2S_SendData
   \   00000018   0x6828             LDR      R0,[R5, #+0]
    303          
    304          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   0000001A   0x6881             LDR      R1,[R0, #+8]
   \   0000001C   0x07C9             LSLS     R1,R1,#+31
   \   0000001E   0xD5FC             BPL.N    ??mySPI_SendData_1
    305          SPI_I2S_ReceiveData(SPI1);
   \   00000020   0x68F1             LDR      R1,[R6, #+12]
    306          
    307          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   00000022   0x6881             LDR      R1,[R0, #+8]
   \   00000024   0x0789             LSLS     R1,R1,#+30
   \   00000026   0xD4FC             BMI.N    ??mySPI_SendData_2
    308          SPI_I2S_SendData(SPI1, data);
   \   00000028   0x4621             MOV      R1,R4
   \   0000002A   0x4630             MOV      R0,R6
   \   0000002C   0x.... 0x....      BL       SPI_I2S_SendData
    309          
    310          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0x6880             LDR      R0,[R0, #+8]
   \   00000034   0x07C0             LSLS     R0,R0,#+31
   \   00000036   0xD4FB             BMI.N    ??mySPI_SendData_3
    311          SPI_I2S_ReceiveData(SPI1);
   \   00000038   0x68F0             LDR      R0,[R6, #+12]
    312           
    313          }
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
    314          
    315          /**
    316            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    317            * @param  None
    318            * @retval None
    319          */
    320          

   \                                 In section .text, align 2, keep-with-next
    321          void SPI1_IRQHandler(void)
    322          {  
    323             //uint16_t volume;
    324             uint16_t app;
                             ^
Warning[Pe550]: variable "app" was set but never used
    325             
    326          
    327            /* Check if data are available in SPI Data register */
    328            if (__HAL_SPI_GET_FLAG(&spi1_ins, SPI_IT_TXE) != RESET)
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_4
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x0600             LSLS     R0,R0,#+24
   \   00000008   0xD504             BPL.N    ??SPI1_IRQHandler_0
    329            {
    330          	
    331              app = SPI_I2S_ReceiveData(SPI1);
   \   0000000A   0x....             LDR.N    R0,??DataTable5_6  ;; 0x40013000
   \   0000000C   0x68C1             LDR      R1,[R0, #+12]
    332          	
    333              SPI_I2S_SendData(SPI1, 3333);
   \   0000000E   0xF640 0x5105      MOVW     R1,#+3333
   \   00000012   0x....             B.N      SPI_I2S_SendData
    334              
    335             }
    336          }
   \                     ??SPI1_IRQHandler_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    337          
    338          
    339          /**
    340            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    341            * @param  None
    342            * @retval None
    343          */
    344          

   \                                 In section .text, align 2, keep-with-next
    345          void SPI2_IRQHandler(void)
    346          {  
    347              //uint16_t volume;
    348              uint16_t app;
                              ^
Warning[Pe550]: variable "app" was set but never used

  static uint8_t PlayerIni(uint32_t AudioFreq);
                 ^
"H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",155  Warning[Pe177]: 
          function "PlayerIni" was declared but never referenced
    349            
    350          
    351            /* Check if data are available in SPI Data register */
    352             if ((__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)
    353             	//    &&(__HAL_SPI_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    354             	  )
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_7
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xBF44             ITT      MI 
   \   0000000A   0x....             LDRMI.N  R0,??DataTable5_8  ;; 0x4000380c
   \   0000000C   0x6800             LDRMI    R0,[R0, #+0]
    355             {
    356              
    357               app = SPI_I2S_ReceiveData(SPI2);   
    358               //SPI_I2S_SendData(SPI2, 3333);
    359               /*
    360          	 pDataI2S2[iBuff++] =  HTONS(app);
    361          
    362          	 volume = 64;
    363          	 
    364          	 if (iBuff>=64)
    365               {
    366                  PDM_Filter_64_LSB((uint8_t *)pDataI2S2,
    367          		(uint16_t *)(Buffer1.pcm_buff + Buffer1.offset + cntPos*16), volume , (PDMFilter_InitStruct *)&Filter[0]);
    368          		iBuff=0;
    369          		cntPos++;
    370          		if (cntPos>=256) cntPos=0;
    371               }
    372               */
    373               
    374          	 //BSP_LED_Toggle(LED1);
    375           	 //if (Buffer1.offset + idxSPI5DataBuf1 < AUDIO_OUT_BUFFER_SIZE-1)	  
    376               //    Buffer1.pcm_buff[Buffer1.offset + idxSPI5DataBuf1++] = app;//HTONS(test);
    377          
    378             	}
    379              //HAL_I2S_IRQHandler(&hi2s2);
    380             
    381          
    382          }
   \   0000000E   0x4770             BX       LR               ;; return
    383          
    384          
    385          
    386          
    387          
    388          
    389          
    390          

   \                                 In section .text, align 2, keep-with-next
    391          void I2S_Init(void)
    392          {
   \                     I2S_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    393          
    394              /* Enable CRC module */
    395              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000002   0x....             LDR.N    R4,??DataTable5_2  ;; 0x40023830
   \   00000004   0xB082             SUB      SP,SP,#+8
    396          	for (char i=0; i< 1; i++)
    397          	{
    398          		/* Filter LP & HP Init */
    399          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \   00000006   0x....             LDR.N    R1,??DataTable5_9  ;; 0x45fa0000
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   0000000E   0x6020             STR      R0,[R4, #+0]
   \   00000010   0x....             LDR.N    R0,??DataTable5_10
   \   00000012   0x6041             STR      R1,[R0, #+4]
    400          		Filter[i].HP_HZ = 10;
   \   00000014   0x....             LDR.N    R1,??DataTable5_11  ;; 0x41200000
   \   00000016   0x6081             STR      R1,[R0, #+8]
    401          		Filter[i].Fs = 16000;    //sop1hc: 16000
   \   00000018   0xF44F 0x517A      MOV      R1,#+16000
   \   0000001C   0x8001             STRH     R1,[R0, #+0]
    402          		Filter[i].Out_MicChannels = 1;
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x81C1             STRH     R1,[R0, #+14]
    403          		Filter[i].In_MicChannels = 1;
   \   00000022   0x8181             STRH     R1,[R0, #+12]
    404          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   00000024   0x.... 0x....      BL       PDM_Filter_Init
    405          	}
    406          
    407             GPIO_CLK_Init();
   \   00000028   0x6820             LDR      R0,[R4, #+0]
   \   0000002A   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000002E   0x6020             STR      R0,[R4, #+0]
   \   00000030   0x6820             LDR      R0,[R4, #+0]
   \   00000032   0xF000 0x0010      AND      R0,R0,#0x10
   \   00000036   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_3: (+1)
   \   0000003A   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000003E   0x6020             STR      R0,[R4, #+0]
   \   00000040   0x6820             LDR      R0,[R4, #+0]
   \   00000042   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000046   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_4: (+1)
   \   0000004A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000004E   0x6020             STR      R0,[R4, #+0]
   \   00000050   0x6820             LDR      R0,[R4, #+0]
   \   00000052   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000056   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_5: (+1)
   \   0000005A   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000005E   0x6020             STR      R0,[R4, #+0]
   \   00000060   0x6820             LDR      R0,[R4, #+0]
   \   00000062   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000066   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_6: (+1)
   \   0000006A   0xF440 0x7080      ORR      R0,R0,#0x100
   \   0000006E   0x6020             STR      R0,[R4, #+0]
   \   00000070   0x6820             LDR      R0,[R4, #+0]
    408            
    409            //I2S1_Init();
    410            I2S2_Init(); //-->DISCOVERY BOARD: PI_1:LED
   \   00000072   0x....             LDR.N    R4,??DataTable5_7
   \   00000074   0xF400 0x7080      AND      R0,R0,#0x100
   \   00000078   0x9000             STR      R0,[SP, #+0]
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0x....             LDR.N    R0,??DataTable5_12  ;; 0x40003800
   \   0000007E   0x6020             STR      R0,[R4, #+0]
   \   00000080   0xF44F 0x7040      MOV      R0,#+768
   \   00000084   0x6060             STR      R0,[R4, #+4]
   \   00000086   0x2020             MOVS     R0,#+32
   \   00000088   0x60A0             STR      R0,[R4, #+8]
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x60E0             STR      R0,[R4, #+12]
   \   0000008E   0xF44F 0x7000      MOV      R0,#+512
   \   00000092   0x6120             STR      R0,[R4, #+16]
   \   00000094   0xF64B 0x3080      MOVW     R0,#+48000
   \   00000098   0x6160             STR      R0,[R4, #+20]
   \   0000009A   0x2008             MOVS     R0,#+8
   \   0000009C   0x61A0             STR      R0,[R4, #+24]
   \   0000009E   0x2002             MOVS     R0,#+2
   \   000000A0   0x61E0             STR      R0,[R4, #+28]
   \   000000A2   0x4620             MOV      R0,R4
   \   000000A4   0x.... 0x....      BL       HAL_I2S_Init
   \   000000A8   0x6820             LDR      R0,[R4, #+0]
   \   000000AA   0x69C1             LDR      R1,[R0, #+28]
   \   000000AC   0xF441 0x6180      ORR      R1,R1,#0x400
   \   000000B0   0x61C1             STR      R1,[R0, #+28]
    411            //I2S3_Init();
    412          
    413          }
   \   000000B2   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    414          
    415          

   \                                 In section .text, align 2, keep-with-next
    416          void I2S_Proc(void)
    417          {
    418          
    419              //uint16_t Size_I2S2=128;
    420          	//uint32_t TimeOut=100;
    421          
    422              /* Read from I2S1 */
    423              //HAL_I2S_Receive(&hi2s2,pDataI2S2,Size_I2S2,TimeOut);
    424              //HAL_I2S_Receive_IT(&hi2s2,pDataI2S2,Size_I2S2);
    425            
    426          
    427              /* Read from I2S2 */
    428          
    429              /* Read from I2S3 */
    430          
    431              /* LCD show */
    432          
    433          
    434          }
   \                     I2S_Proc: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    435          
    436          
    437          
    438          /** Pinout Configuration
    439          */
    440          static void GPIO_CLK_Init(void)
    441          {
    442          
    443            /* GPIO Ports Clock Enable */
    444            __GPIOE_CLK_ENABLE();
    445            __GPIOC_CLK_ENABLE();
    446            __GPIOA_CLK_ENABLE();
    447            __GPIOB_CLK_ENABLE();
    448            __GPIOI_CLK_ENABLE();
    449          
    450          }
    451          
    452          
    453          
    454          /* I2S1 init function */
    455          static void I2S1_Init(void)
                             ^
Warning[Pe177]: function "I2S1_Init" was declared but never referenced
    456          {
    457          
    458            hi2s1.Instance = SPI1;
    459            hi2s1.Init.Mode = I2S_MODE_SLAVE_TX;
    460            hi2s1.Init.Standard = I2S_STANDARD_PCM_SHORT;
    461            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    462            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    463            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    464            hi2s1.Init.CPOL = I2S_CPOL_LOW;
    465            HAL_I2S_Init(&hi2s1);
    466          }
    467          
    468          /* I2S2 init function */
    469          static void I2S2_Init(void)
    470          {
    471          
    472            //HAL_I2S_DeInit(&hi2s2);
    473            hi2s2.Instance = SPI2;
    474            hi2s2.Init.Mode = I2S_MODE_MASTER_RX;//I2S_MODE_MASTER_RX
    475            hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
    476            hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
    477            hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
    478            hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
    479            hi2s2.Init.CPOL = I2S_CPOL_HIGH;
    480            hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
    481          
    482            HAL_I2S_Init(&hi2s2);
    483             /* Enable TXE and ERR interrupt */
    484           //__HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
    485           
    486           __HAL_I2S_ENABLE(&hi2s2);
    487          
    488          }
    489          
    490          
    491          /* I2S3 init function */
    492          static void I2S3_Init(void)
                             ^
Warning[Pe177]: function "I2S3_Init" was declared but never referenced
    493          {
    494          
    495            hi2s3.Instance = SPI3;
    496            hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
    497            hi2s3.Init.Standard = I2S_STANDARD_PCM_SHORT;
    498            hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
    499            hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    500            hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_11K;
    501            hi2s3.Init.CPOL = I2S_CPOL_HIGH;
    502            HAL_I2S_Init(&hi2s3);
    503          
    504          }
    505          
    506          
    507          

   \                                 In section .text, align 2, keep-with-next
    508          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
    509          {
    510            /* Check the parameters */
    511            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
    512            
    513            /* Write in the DR register the data to be sent */
    514            SPIx->DR = Data;
   \                     SPI_I2S_SendData: (+1)
   \   00000000   0x60C1             STR      R1,[R0, #+12]
    515          }
   \   00000002   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     BufferCtlPlayOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     cntTransFinish

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     hi2s2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     Filter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x9000             STR      R0,[SP, #+0]
   \   00000002   0x9800             LDR      R0,[SP, #+0]
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x4770             BX       LR
    516          
    517          
    518          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
    519          {
    520            /* Check the parameters */
    521            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
    522            
    523            /* Return the data in the DR register */
    524            return SPIx->DR;
    525          }
    526          
    527          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
    528          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Audio_Streaming
        16   -> I2S_Init
       0   Audio_Streaming_Ini
      16   I2S_Init
        16   -> HAL_I2S_Init
        16   -> PDM_Filter_Init
       0   I2S_Proc
       0   SPI1_IRQHandler
         0   -> SPI_I2S_SendData
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
       0   SPI2_IRQHandler
       0   SPI_I2S_SendData
      16   mySPI_SendData
        16   -> SPI_I2S_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       8  ?Subroutine0
       8  ?Subroutine1
      44  Audio_Streaming
       2  Audio_Streaming_Ini
     104  Filter
     180  I2S_Init
       2  I2S_Proc
      22  SPI1_IRQHandler
     192  SPI1_Ini
      16  SPI2_IRQHandler
       4  SPI_I2S_SendData
       2  cntPos
       2  cntTransFinish
      80  hdma_spi2_tx
      80  hdma_spi3_tx
      64  hi2s1
      64  hi2s2
      60  mySPI_SendData
      44  pHeaderBuff
     100  spi1_ins
     100  spi2_ins

 
 640 bytes in section .bss
 590 bytes in section .text
 
 590 bytes of CODE memory
 640 bytes of DATA memory

Errors: none
Warnings: 5
