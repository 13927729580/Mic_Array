###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       20/Dec/2015  02:27:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -Ohz --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          /**
      2            ******************************************************************************
      3            * @file    Audio/Audio_playback_and_record/Src/waverecorder.c 
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    25-June-2015
      7            * @brief   This file provides the Audio In (record) interface API
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
     12            *
     13            * Redistribution and use in source and binary forms, with or without modification,
     14            * are permitted provided that the following conditions are met:
     15            *   1. Redistributions of source code must retain the above copyright notice,
     16            *      this list of conditions and the following disclaimer.
     17            *   2. Redistributions in binary form must reproduce the above copyright notice,
     18            *      this list of conditions and the following disclaimer in the documentation
     19            *      and/or other materials provided with the distribution.
     20            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     21            *      may be used to endorse or promote products derived from this software
     22            *      without specific prior written permission.
     23            *
     24            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     25            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     26            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     27            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     28            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     29            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     30            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     31            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     32            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     33            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     34            *
     35            ******************************************************************************
     36            */  
     37          
     38          /* Includes ------------------------------------------------------------------*/
     39          #include "waverecorder.h" 
     40          #include "string.h"
     41          //#include "stm32f7xx_hal_spi.h"
     42          #include "stm32f7xx_hal.h"
     43          #include "pdm_filter.h"
     44          
     45          
     46          /* Private typedef -----------------------------------------------------------*/
     47          /* Private define ------------------------------------------------------------*/
     48          #define TOUCH_RECORD_XMIN       300
     49          #define TOUCH_RECORD_XMAX       340
     50          #define TOUCH_RECORD_YMIN       212
     51          #define TOUCH_RECORD_YMAX       252
     52          
     53          #define TOUCH_STOP_XMIN         205
     54          #define TOUCH_STOP_XMAX         245
     55          #define TOUCH_STOP_YMIN         212
     56          #define TOUCH_STOP_YMAX         252
     57          
     58          #define TOUCH_PAUSE_XMIN        125
     59          #define TOUCH_PAUSE_XMAX        149
     60          #define TOUCH_PAUSE_YMIN        212
     61          #define TOUCH_PAUSE_YMAX        252
     62          
     63          #define TOUCH_VOL_MINUS_XMIN    20
     64          #define TOUCH_VOL_MINUS_XMAX    70
     65          #define TOUCH_VOL_MINUS_YMIN    212
     66          #define TOUCH_VOL_MINUS_YMAX    252
     67          
     68          #define TOUCH_VOL_PLUS_XMIN     402
     69          #define TOUCH_VOL_PLUS_XMAX     452
     70          #define TOUCH_VOL_PLUS_YMIN     212
     71          #define TOUCH_VOL_PLUS_YMAX     252
     72          
     73          
     74          
     75          /* SPI Configuration defines */
     76          #define SPI_SCK_PIN                       GPIO_PIN_10
     77          #define SPI_SCK_GPIO_PORT                 GPIOB
     78          #define SPI_SCK_GPIO_CLK                  1
     79          #define SPI_SCK_SOURCE                    1
     80          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     81          
     82          #define SPI_MOSI_PIN                      GPIO_PIN_3
     83          #define SPI_MOSI_GPIO_PORT                GPIOC
     84          #define SPI_MOSI_GPIO_CLK                 1
     85          #define SPI_MOSI_SOURCE                   1
     86          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     87          
     88          
     89          /* sop1hc */
     90          #define SPI1_SCK_PIN                       GPIO_PIN_5
     91          #define SPI1_SCK_GPIO_PORT                 GPIOA
     92          #define SPI1_SCK_GPIO_CLK                  1
     93          #define SPI1_SCK_SOURCE                    1
     94          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     95          
     96          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     97          #define SPI1_MOSI_GPIO_PORT                GPIOA
     98          #define SPI1_MOSI_GPIO_CLK                 1
     99          #define SPI1_MOSI_SOURCE                   1
    100          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
    101          
    102          #define SPI1_MISO_PIN                      GPIO_PIN_6
    103          #define SPI1_MISO_GPIO_PORT                GPIOA
    104          #define SPI1_MISO_GPIO_CLK                 1
    105          #define SPI1_MISO_SOURCE                   1
    106          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
    107          
    108          
    109          #define AUDIO_REC_SPI1_IRQHANDLER          SPI1_IRQHandler
    110          #define AUDIO_REC_SPI2_IRQHANDLER          SPI2_IRQHandler
    111          #define AUDIO_REC_SPI3_IRQHANDLER          SPI3_IRQHandler
    112          
    113          
    114          
    115          
    116          uint8_t pHeaderBuff[44];
    117          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
    118          uint16_t volatile cntTransFinish;
    119          
    120          /* Private macro -------------------------------------------------------------*/
    121          /* Private variables ---------------------------------------------------------*/
    122          AUDIO_IN_BufferTypeDef  BufferCtlRecIn,Buffer1, Buffer2;
    123          I2S_HandleTypeDef hi2s1;
    124          I2S_HandleTypeDef hi2s2;
    125          extern I2S_HandleTypeDef hi2s3;
    126          SPI_HandleTypeDef spi1_ins;
    127          SPI_HandleTypeDef spi2_ins;
    128          
    129          DMA_HandleTypeDef hdma_spi2_tx;
    130          DMA_HandleTypeDef hdma_spi3_tx;
    131          
    132          __IO uint16_t cntPos;
    133          PDMFilter_InitStruct Filter[2];
    134          
    135          
    136          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
    137          static __IO uint32_t uwVolume = 70;
    138          extern WAVE_FormatTypeDef WaveFormat;
    139          extern FIL WavFile;
    140          extern AUDIO_DEMO_StateMachine AudioDemo;
    141          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
    142          
    143          
    144          //static uint16_t pDataI2S2[1024];
    145          static __IO uint16_t iBuff;
    146          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
    147          
    148          
    149          
    150          /* Private function prototypes -----------------------------------------------*/
    151          
    152          
    153          
    154          /*sop1hc*/
    155          static uint8_t PlayerIni(uint32_t AudioFreq);
    156          
    157          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    158          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    159          
    160          static void I2S1_Init(void);
    161          static void I2S2_Init(void);
    162          static void I2S3_Init(void);
    163          static void GPIO_CLK_Init(void);
    164          
    165          
    166          
    167          
    168          /* Private functions ---------------------------------------------------------*/
    169          
    170          /**
    171            * @brief  Calculates the remaining file size and new position of the pointer.
    172            * @param  None
    173            * @retval None
    174            */
    175          void BSP_AUDIO_IN_TransferComplete_CallBack(void)
                      ^
Error[Pa045]: function "BSP_AUDIO_IN_TransferComplete_CallBack" has no
          prototype
    176          {
    177            BufferCtlRecIn.pcm_ptr+= AUDIO_OUT_BUFFER_SIZE/2;
    178            if(BufferCtlRecIn.pcm_ptr == AUDIO_OUT_BUFFER_SIZE/2)
    179            {
    180              BufferCtlRecIn.wr_state   =  BUFFER_FULL;
    181              BufferCtlRecIn.offset  = 0;
    182            }
    183            
    184            if(BufferCtlRecIn.pcm_ptr >= AUDIO_OUT_BUFFER_SIZE)
    185            {
    186              BufferCtlRecIn.wr_state   =  BUFFER_FULL;
    187              BufferCtlRecIn.offset  = AUDIO_OUT_BUFFER_SIZE/2;    
    188              BufferCtlRecIn.pcm_ptr = 0;
    189            }
    190          
    191          
    192          
    193            
    194          }
    195          
    196          /**
    197            * @brief  Manages the DMA Half Transfer complete interrupt.
    198            * @param  None
    199            * @retval None
    200            */
    201          void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
                      ^
Error[Pa045]: function "BSP_AUDIO_IN_HalfTransfer_CallBack" has no prototype
    202          { 
    203            BufferCtlRecIn.pcm_ptr+= AUDIO_OUT_BUFFER_SIZE/2;
    204            if(BufferCtlRecIn.pcm_ptr == AUDIO_OUT_BUFFER_SIZE/2)
    205            {
    206              BufferCtlRecIn.wr_state   =  BUFFER_FULL;
    207              BufferCtlRecIn.offset  = 0;
    208            }
    209            
    210            if(BufferCtlRecIn.pcm_ptr >= AUDIO_OUT_BUFFER_SIZE)
    211            {
    212              BufferCtlRecIn.wr_state   =  BUFFER_FULL;
    213              BufferCtlRecIn.offset  = AUDIO_OUT_BUFFER_SIZE/2;    
    214              BufferCtlRecIn.pcm_ptr = 0;
    215            }
    216          
    217          
    218          
    219          
    220            
    221          }
    222          
    223          
    224          /* sop1hc */
    225          void Audio_Streaming_Ini(void)
    226          {
    227          
    228          
    229              /*------------------------PLAYER------------------------------------------------------*/
    230          	/*Adjust the Audio frequency */
    231              PlayerIni(I2S_AUDIOFREQ_11K);//WaveFormat.SampleRate DEFAULT_AUDIO_IN_FREQ
    232          
    233              BSP_AUDIO_OUT_Play((uint16_t*)&Buffer1.pcm_buff[0], 2*AUDIO_OUT_BUFFER_SIZE);//2*AUDIO_OUT_BUFFER_SIZE
                     ^
Error[Pe223]: function "BSP_AUDIO_OUT_Play" declared implicitly
    234          
    235          	//BSP_LCD_DisplayStringAt(250, LINE(20), (uint8_t *)"  [PLAY ]", LEFT_MODE);
    236          	///AudioState = AUDIO_STATE_PLAY;
    237          
    238          	//HAL_Delay(1000);
    239          
    240              /*----------------------RECORDER-------------------------------------------------------*/	
    241              /* Initial for microphone's data reading */
    242              //BSP_AUDIO_IN_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, uwVolume, DEFAULT_AUDIO_IN_FREQ); 
    243          
    244              /* Record process*/
    245              //BSP_AUDIO_IN_Record((uint16_t*)&Buffer1.pcm_buff[0], AUDIO_OUT_BUFFER_SIZE); //8192	
    246          
    247          	//BufferCtlRecIn.wr_state = BUFFER_EMPTY;
    248                  
    249          	/*-----------------------------------------------------------------------------------*/
    250          
    251          
    252          
    253          
    254          
    255          
    256          
    257          	/*----------------------------------STATE MACHINE CONTROL----------------------------*/
    258          	/* Streaming state */
    259              AudioDemo.state =  AUDI0_DEMO_STREAMING;
    260          	appli_state = APPLICATION_READY;
    261          
    262          
    263          	/*------------------------------------------------------------------------------------*/
    264          
    265          	
    266          }
    267          
    268          void Audio_Streaming(void)
    269          {
    270          
    271          
    272          	/*------------------------------------------------------------------------------------------*/
    273          
    274          	/*-----------------------------PLAY FROM SAI------------------------------------------------*/
    275          
    276          	if(BufferCtlPlayOut.state == BUFFER_OFFSET_HALF)
    277              {
    278          
    279          		 BufferCtlPlayOut.state = BUFFER_OFFSET_NONE;
    280          
    281          		 //BSP_LCD_DisplayStringAtLine(18,(uint8_t *)BufferCtlPlayOut.buff);
    282          		 if (cntTransFinish==0)
    283          		 {
    284          		     I2S_Init();
    285          			 cntTransFinish = 1;
    286          		 }
    287          	
    288          	}
    289          
    290          	if(BufferCtlPlayOut.state == BUFFER_OFFSET_FULL)
    291              {
    292                   /* copy from Buffer1 to BufferCtlPlayOut */
    293                   //memcpy(&BufferCtlPlayOut.buff[0],&Buffer1.pcm_buff[0],2*AUDIO_OUT_BUFFER_SIZE);
    294          		 BufferCtlPlayOut.state = BUFFER_OFFSET_NONE;
    295          
    296          
    297          
    298                   		/*Adjust the Audio frequency */
    299                   //PlayerIni(DEFAULT_AUDIO_IN_FREQ);//WaveFormat.SampleRate
    300          				 /* Record process*/
    301                   //BSP_AUDIO_IN_Record((uint16_t*)&BufferCtlRecIn.pcm_buff[0], AUDIO_OUT_BUFFER_SIZE);    
    302          		 //BSP_LCD_DisplayStringAtLine(19,(uint8_t *)BufferCtlPlayOut.buff);
    303          	
    304          	}
    305          
    306          	/* -------------------------------------------------------------------------------------------*/
    307          	
    308          	
    309          }
    310          
    311          
    312          void SPI1_Ini(void)
    313          {
    314            GPIO_InitTypeDef GPIO_InitStructure;
    315          
    316           
    317             	 
    318            /* Enable SCK, MOSI and MISO GPIO clocks */
    319            __HAL_RCC_SPI1_CLK_ENABLE();
    320            __HAL_RCC_GPIOA_CLK_ENABLE();
    321          
    322            
    323            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    324            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    325            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    326          
    327            /* SPI SCK pin configuration */
    328            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    329            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    330            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
    331          
    332            /* SPI  MOSI pin configuration */
    333            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
    334            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    335            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
    336          
    337            /* SPI MISO pin configuration */
    338            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
    339            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    340            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
    341          
    342            /* SPI configuration -------------------------------------------------------*/
    343            //SPI_I2S_DeInit(SPI1);
    344            
    345            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
    346            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
    347            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
    348            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    349            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    350            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    351            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    352            spi1_ins.Init.CRCPolynomial = 7;
    353            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
    354            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
    355            {
    356              /* Initialization Error */
    357              //Error_Handler();
    358            }
    359            
    360           
    361            GPIO_InitStructure.Pin = GPIO_PIN_3;
    362            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    363            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    364            GPIO_InitStructure.Pull = GPIO_PULLUP;
    365            //GPIO_InitStructure.Alternate 
    366            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
    367          
    368            /* Deselect : Chip Select high */
    369            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
    370             /* sop1hc */
    371            /* Configure the SPI interrupt priority */
    372            HAL_NVIC_SetPriority(SPI1_IRQn, 0, 1);
    373            HAL_NVIC_EnableIRQ(SPI1_IRQn);
    374            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    375            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    376          
    377            /* Enable SPI1  */
    378            //__HAL_SPI_ENABLE(SPI1);
    379          
    380          }
    381          
    382          void mySPI_SendData(uint8_t adress, uint8_t data)
    383          {
    384           
    385          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
    386          SPI_I2S_SendData(SPI1, adress);
    387          
    388          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
    389          SPI_I2S_ReceiveData(SPI1);
    390          
    391          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
    392          SPI_I2S_SendData(SPI1, data);
    393          
    394          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
    395          SPI_I2S_ReceiveData(SPI1);
    396           
    397          }
    398          
    399          /**
    400            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    401            * @param  None
    402            * @retval None
    403          */
    404          
    405          void SPI1_IRQHandler(void)
    406          {  
    407             //uint16_t volume;
    408             uint16_t app;
                             ^
Warning[Pe550]: variable "app" was set but never used
    409             
    410          
    411            /* Check if data are available in SPI Data register */
    412            if (__HAL_SPI_GET_FLAG(&spi1_ins, SPI_IT_TXE) != RESET)
    413            {
    414          	
    415              app = SPI_I2S_ReceiveData(SPI1);
    416          	
    417              SPI_I2S_SendData(SPI1, 3333);
    418              
    419             }
    420          }
    421          
    422          
    423          /**
    424            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    425            * @param  None
    426            * @retval None
    427          */
    428          
    429          void SPI2_IRQHandler(void)
    430          {  
    431              //uint16_t volume;
    432              uint16_t app;
                              ^
Warning[Pe550]: variable "app" was set but never used
    433            
    434          
    435            /* Check if data are available in SPI Data register */
    436             if ((__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)
    437             	//    &&(__HAL_SPI_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    438             	  )
    439             {
    440              
    441               app = SPI_I2S_ReceiveData(SPI2);   
    442               //SPI_I2S_SendData(SPI2, 3333);
    443               /*
    444          	 pDataI2S2[iBuff++] =  HTONS(app);
    445          
    446          	 volume = 64;
    447          	 
    448          	 if (iBuff>=64)
    449               {
    450                  PDM_Filter_64_LSB((uint8_t *)pDataI2S2,
    451          		(uint16_t *)(Buffer1.pcm_buff + Buffer1.offset + cntPos*16), volume , (PDMFilter_InitStruct *)&Filter[0]);
    452          		iBuff=0;
    453          		cntPos++;
    454          		if (cntPos>=256) cntPos=0;
    455               }
    456               */
    457               
    458          	 //BSP_LED_Toggle(LED1);
    459           	 //if (Buffer1.offset + idxSPI5DataBuf1 < AUDIO_OUT_BUFFER_SIZE-1)	  
    460               //    Buffer1.pcm_buff[Buffer1.offset + idxSPI5DataBuf1++] = app;//HTONS(test);
    461          
    462             	}
    463              //HAL_I2S_IRQHandler(&hi2s2);
    464             
    465          
    466          }
    467          
    468          
    469          
    470          
    471          
    472          
    473          
    474          /**
    475            * @brief  Initializes the Wave player.
    476            * @param  AudioFreq: Audio sampling frequency
    477            * @retval None
    478            */
    479          static uint8_t PlayerIni(uint32_t AudioFreq)
    480          { 
    481            /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
    482            if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 64, AudioFreq) != 0) //sop1hc OUTPUT_DEVICE_BOTH
                      ^
Error[Pe223]: function "BSP_AUDIO_OUT_Init" declared implicitly

    if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 64, AudioFreq) != 0) //sop1hc OUTPUT_DEVICE_BOTH
                          ^
"H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",482  Error[Pe020]: 
          identifier "OUTPUT_DEVICE_HEADPHONE" is undefined
    483            {
    484              return 1;
    485            }
    486            else
    487            {
    488              BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
                     ^
Error[Pe223]: function "BSP_AUDIO_OUT_SetAudioFrameSlot" declared implicitly

      BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
                                      ^
"H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",488  Error[Pe020]: 
          identifier "CODEC_AUDIOFRAME_SLOT_02" is undefined
    489              return 0;
    490            } 
    491          }
    492          
    493          void I2S_Init(void)
    494          {
    495          
    496              /* Enable CRC module */
    497              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
    498          	for (char i=0; i< 1; i++)
    499          	{
    500          		/* Filter LP & HP Init */
    501          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
    502          		Filter[i].HP_HZ = 10;
    503          		Filter[i].Fs = 16000;    //sop1hc: 16000
    504          		Filter[i].Out_MicChannels = 1;
    505          		Filter[i].In_MicChannels = 1;
    506          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
    507          	}
    508          
    509             GPIO_CLK_Init();
    510            
    511            //I2S1_Init();
    512            I2S2_Init(); //-->DISCOVERY BOARD: PI_1:LED
    513            //I2S3_Init();
    514          
    515          }
    516          
    517          
    518          void I2S_Proc(void)
    519          {
    520          
    521              //uint16_t Size_I2S2=128;
    522          	//uint32_t TimeOut=100;
    523          
    524              /* Read from I2S1 */
    525              //HAL_I2S_Receive(&hi2s2,pDataI2S2,Size_I2S2,TimeOut);
    526              //HAL_I2S_Receive_IT(&hi2s2,pDataI2S2,Size_I2S2);
    527            
    528          
    529              /* Read from I2S2 */
    530          
    531              /* Read from I2S3 */
    532          
    533              /* LCD show */
    534          
    535          
    536          }
    537          
    538          
    539          
    540          /** Pinout Configuration
    541          */
    542          static void GPIO_CLK_Init(void)
    543          {
    544          
    545            /* GPIO Ports Clock Enable */
    546            __GPIOE_CLK_ENABLE();
    547            __GPIOC_CLK_ENABLE();
    548            __GPIOA_CLK_ENABLE();
    549            __GPIOB_CLK_ENABLE();
    550            __GPIOI_CLK_ENABLE();
    551          
    552          }
    553          
    554          
    555          
    556          /* I2S1 init function */
    557          static void I2S1_Init(void)
                             ^
Warning[Pe177]: function "I2S1_Init" was declared but never referenced
    558          {
    559          
    560            hi2s1.Instance = SPI1;
    561            hi2s1.Init.Mode = I2S_MODE_SLAVE_TX;
    562            hi2s1.Init.Standard = I2S_STANDARD_PCM_SHORT;
    563            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    564            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    565            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    566            hi2s1.Init.CPOL = I2S_CPOL_LOW;
    567            HAL_I2S_Init(&hi2s1);
    568          }
    569          
    570          /* I2S2 init function */
    571          static void I2S2_Init(void)
    572          {
    573          
    574            //HAL_I2S_DeInit(&hi2s2);
    575            hi2s2.Instance = SPI2;
    576            hi2s2.Init.Mode = I2S_MODE_MASTER_RX;//I2S_MODE_MASTER_RX
    577            hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
    578            hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
    579            hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
    580            hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
    581            hi2s2.Init.CPOL = I2S_CPOL_HIGH;
    582            hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
    583          
    584            HAL_I2S_Init(&hi2s2);
    585             /* Enable TXE and ERR interrupt */
    586           //__HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
    587           
    588           __HAL_I2S_ENABLE(&hi2s2);
    589          
    590          }
    591          
    592          
    593          /* I2S3 init function */
    594          static void I2S3_Init(void)
                             ^
Warning[Pe177]: function "I2S3_Init" was declared but never referenced
    595          {
    596          
    597            hi2s3.Instance = SPI3;
    598            hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
    599            hi2s3.Init.Standard = I2S_STANDARD_PCM_SHORT;
    600            hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
    601            hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    602            hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_11K;
    603            hi2s3.Init.CPOL = I2S_CPOL_HIGH;
    604            HAL_I2S_Init(&hi2s3);
    605          
    606          }
    607          
    608          
    609          
    610          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
    611          {
    612            /* Check the parameters */
    613            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
    614            
    615            /* Write in the DR register the data to be sent */
    616            SPIx->DR = Data;
    617          }
    618          
    619          
    620          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
    621          {
    622            /* Check the parameters */
    623            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
    624            
    625            /* Return the data in the DR register */
    626            return SPIx->DR;
    627          }
    628          
    629          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
    630          

Errors: 7
Warnings: 4
