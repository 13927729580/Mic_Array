###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       23/Feb/2016  19:41:52
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          
      2          /* Includes ------------------------------------------------------------------*/
      3          #include "waverecorder.h" 

    
   ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Inc\waverecorder.h",2  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
      4          #include "string.h"
      5          //#include "stm32f7xx_hal_spi.h"
      6          #include "stm32f7xx_hal.h"
      7          #include "pdm_filter.h"
      8          
      9          
     10          /* Private typedef -----------------------------------------------------------*/
     11          /* Private define ------------------------------------------------------------*/
     12          #define TOUCH_RECORD_XMIN       300
     13          #define TOUCH_RECORD_XMAX       340
     14          #define TOUCH_RECORD_YMIN       212
     15          #define TOUCH_RECORD_YMAX       252
     16          
     17          #define TOUCH_STOP_XMIN         205
     18          #define TOUCH_STOP_XMAX         245
     19          #define TOUCH_STOP_YMIN         212
     20          #define TOUCH_STOP_YMAX         252
     21          
     22          #define TOUCH_PAUSE_XMIN        125
     23          #define TOUCH_PAUSE_XMAX        149
     24          #define TOUCH_PAUSE_YMIN        212
     25          #define TOUCH_PAUSE_YMAX        252
     26          
     27          #define TOUCH_VOL_MINUS_XMIN    20
     28          #define TOUCH_VOL_MINUS_XMAX    70
     29          #define TOUCH_VOL_MINUS_YMIN    212
     30          #define TOUCH_VOL_MINUS_YMAX    252
     31          
     32          #define TOUCH_VOL_PLUS_XMIN     402
     33          #define TOUCH_VOL_PLUS_XMAX     452
     34          #define TOUCH_VOL_PLUS_YMIN     212
     35          #define TOUCH_VOL_PLUS_YMAX     252
     36          
     37          
     38          
     39          /* SPI Configuration defines */
     40          #define SPI_SCK_PIN                       GPIO_PIN_10
     41          #define SPI_SCK_GPIO_PORT                 GPIOB
     42          #define SPI_SCK_GPIO_CLK                  1
     43          #define SPI_SCK_SOURCE                    1
     44          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     45          
     46          #define SPI_MOSI_PIN                      GPIO_PIN_3
     47          #define SPI_MOSI_GPIO_PORT                GPIOC
     48          #define SPI_MOSI_GPIO_CLK                 1
     49          #define SPI_MOSI_SOURCE                   1
     50          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     51          
     52          
     53          /* sop1hc */
     54          #define SPI1_SCK_PIN                       GPIO_PIN_5
     55          #define SPI1_SCK_GPIO_PORT                 GPIOA
     56          #define SPI1_SCK_GPIO_CLK                  1
     57          #define SPI1_SCK_SOURCE                    1
     58          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     59          
     60          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     61          #define SPI1_MOSI_GPIO_PORT                GPIOA
     62          #define SPI1_MOSI_GPIO_CLK                 1
     63          #define SPI1_MOSI_SOURCE                   1
     64          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     65          
     66          #define SPI1_MISO_PIN                      GPIO_PIN_6
     67          #define SPI1_MISO_GPIO_PORT                GPIOA
     68          #define SPI1_MISO_GPIO_CLK                 1
     69          #define SPI1_MISO_SOURCE                   1
     70          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     71          
     72          
     73          
     74          

   \                                 In section .bss, align 4
     75          uint16_t idxMic8=0;
     76          uint16_t idxMic7=0;
     77          uint8_t pHeaderBuff[44];
     78          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
     79          uint16_t volatile cntTransFinish;
     80          
     81          /* Private macro -------------------------------------------------------------*/
     82          /* Private variables ---------------------------------------------------------*/
     83          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     84          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     85          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     86          extern WAVE_FormatTypeDef WaveFormat;
     87          extern FIL WavFile;
     88          extern AUDIO_DEMO_StateMachine AudioDemo;
     89          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     90          extern __IO uint8_t buffer_switch;
     91          extern __IO uint8_t volume;
     92          extern SPI_HandleTypeDef hspi4,hspi1;
     93          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     94          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     95          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     96          extern __IO uint16_t  I2S2_idxTmp;
     97          extern SPI_HandleTypeDef     hspi4;
     98          extern DMA_HandleTypeDef     DmaHandle;
     99          
    100          #ifndef CS43L22_PLAY
    101          extern __IO uint8_t flgDlyUpd; 
    102          extern __IO uint32_t XferCplt;
    103          extern __IO uint16_t  idxSPI5DataBuf3;
    104          #endif
    105          
    106          __IO int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
    107          __IO int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
    108          __IO int16_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
    109          __IO uint16_t TestSDO7[4*AUDIO_OUT_BUFFER_SIZE];
    110          __IO uint16_t TestSDO8[4*AUDIO_OUT_BUFFER_SIZE];
    111          __IO uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
    112          __IO uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
    113          
    114          
    115          SPI_HandleTypeDef hspi1,hspi2;
    116          SPI_HandleTypeDef spi1_ins,spi2_ins;
    117          I2S_HandleTypeDef hi2s1;
    118          I2S_HandleTypeDef hi2s2;
    119          SPI_HandleTypeDef hspi5,hspi6;
   \                     hspi5:
   \   00000000                      DS8 100
   \                     hspi6:
   \   00000064                      DS8 100
    120          DMA_HandleTypeDef hdma_spi2_tx;
    121          DMA_HandleTypeDef hdma_spi3_tx;
    122          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
    123          
    124          #if USB_STREAMING
    125          __IO uint16_t idxFrmPDMMic8;
    126          #endif
    127          
    128          uint16_t *bufPCMSens7;
    129          uint16_t *bufPCMSens8;
    130          __IO uint16_t cntPos;
    131          __IO uint16_t cntPos7;
    132          __IO static uint16_t iBuff;
    133          __IO static uint32_t uwVolume = 70;
    134          __IO PDMFilter_InitStruct Filter[2];
   \                     Filter:
   \   000000C8                      DS8 104
    135          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
    136          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
    137          __IO int16_t   pPDM2PCM[16];
    138          __IO uint16_t cntStrt;
    139          __IO uint8_t WaveRecord_flgInt;
    140          uint8_t WaveRecord_flgIni;
    141          
    142          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
    143          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
    144          __IO uint16_t iSDO12,iSDO34,iSDO56;
    145          __IO uint8_t swtSDO7,swtSDO8;
   \                     swtSDO7:
   \   00000130                      DS8 1
   \                     swtSDO8:
   \   00000131                      DS8 1
    146          __IO uint8_t WaveRecord_flgSDO7Finish,WaveRecord_flgSDO8Finish;
   \                     WaveRecord_flgSDO7Finish:
   \   00000132                      DS8 1
   \                     WaveRecord_flgSDO8Finish:
   \   00000133                      DS8 1
   \                     idxMic8:
   \   00000134                      DS8 2
   \                     idxMic7:
   \   00000136                      DS8 2
   \                     idxFrmPDMMic8:
   \   00000138                      DS8 2
   \                     cntPos:
   \   0000013A                      DS8 2
   \                     cntPos7:
   \   0000013C                      DS8 2
   \                     cntStrt:
   \   0000013E                      DS8 2
   \                     bufPCMSens7:
   \   00000140                      DS8 4
   \                     bufPCMSens8:
   \   00000144                      DS8 4
   \                     pDataMic8:
   \   00000148                      DS8 128
   \                     pDataMic7:
   \   000001C8                      DS8 128

   \                                 In section .bss, align 4
   \                     pHeaderBuff:
   \   00000000                      DS8 44

   \                                 In section .bss, align 2
   \                     cntTransFinish:
   \   00000000                      DS8 2
    147          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
    148          
    149          /* Private function prototypes -----------------------------------------------*/
    150          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    151          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    152          static void I2S1_Init(void);
    153          static void I2S2_Init(void);
    154          
    155          #pragma location=SDRAM_BANK_ADDR
    156          Mic_Array_Data Buffer1;
    157          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)
    158          Mic_Array_Data Buffer2;
    159          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)
    160          Mic_Array_Data Buffer3;
    161          

   \                                 In section .text, align 2, keep-with-next
    162          void SPI1_Ini(void)
    163          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    164            GPIO_InitTypeDef GPIO_InitStructure;
    165          
    166           
    167             	 
    168            /* Enable SCK, MOSI and MISO GPIO clocks */
    169            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40023830
   \   00000006   0xB086             SUB      SP,SP,#+24
    170            __HAL_RCC_GPIOA_CLK_ENABLE();
    171          
    172            
    173            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    174            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    175            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    176          
    177            /* SPI SCK pin configuration */
    178            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    179            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    180            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable13_1  ;; 0x40020000
   \   0000000C   0x6941             LDR      R1,[R0, #+20]
   \   0000000E   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000012   0x6141             STR      R1,[R0, #+20]
   \   00000014   0x6941             LDR      R1,[R0, #+20]
   \   00000016   0xF401 0x5180      AND      R1,R1,#0x1000
   \   0000001A   0x9100             STR      R1,[SP, #+0]
   \   0000001C   0x9900             LDR      R1,[SP, #+0]
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000024   0x6001             STR      R1,[R0, #+0]
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xA901             ADD      R1,SP,#+4
   \   0000002A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x9800             LDR      R0,[SP, #+0]
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x9002             STR      R0,[SP, #+8]
   \   00000036   0x9003             STR      R0,[SP, #+12]
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0x9004             STR      R0,[SP, #+16]
   \   0000003C   0x2005             MOVS     R0,#+5
   \   0000003E   0x9005             STR      R0,[SP, #+20]
   \   00000040   0x2020             MOVS     R0,#+32
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       HAL_GPIO_Init
    181          
    182            /* SPI  MOSI pin configuration */
    183            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   0000004A   0x2001             MOVS     R0,#+1
    184            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    185            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   0000004C   0xA901             ADD      R1,SP,#+4
   \   0000004E   0x9005             STR      R0,[SP, #+20]
   \   00000050   0x2080             MOVS     R0,#+128
   \   00000052   0x9001             STR      R0,[SP, #+4]
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       HAL_GPIO_Init
    186          
    187            /* SPI MISO pin configuration */
    188            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   0000005A   0x2001             MOVS     R0,#+1
    189            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    190            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   0000005C   0xA901             ADD      R1,SP,#+4
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x2040             MOVS     R0,#+64
   \   00000062   0x9001             STR      R0,[SP, #+4]
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       HAL_GPIO_Init
    191          
    192            /* SPI configuration -------------------------------------------------------*/
    193            //SPI_I2S_DeInit(SPI1);
    194            
    195            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   0000006E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000072   0x6081             STR      R1,[R0, #+8]
    196            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000074   0xF44F 0x6170      MOV      R1,#+3840
   \   00000078   0x60C1             STR      R1,[R0, #+12]
    197            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x6101             STR      R1,[R0, #+16]
    198            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    199            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    200            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    201            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    202            spi1_ins.Init.CRCPolynomial = 7;
    203            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   0000007E   0x.... 0x....      LDR.W    R4,??DataTable17  ;; 0x40021000
   \   00000082   0x6141             STR      R1,[R0, #+20]
   \   00000084   0xF44F 0x7100      MOV      R1,#+512
   \   00000088   0x6181             STR      R1,[R0, #+24]
   \   0000008A   0x2128             MOVS     R1,#+40
   \   0000008C   0x61C1             STR      R1,[R0, #+28]
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x6201             STR      R1,[R0, #+32]
   \   00000092   0x2107             MOVS     R1,#+7
   \   00000094   0x62C1             STR      R1,[R0, #+44]
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x6041             STR      R1,[R0, #+4]
    204            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   0000009A   0x.... 0x....      BL       HAL_SPI_Init
    205            {
    206              /* Initialization Error */
    207              //Error_Handler();
    208            }
    209            
    210           
    211            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   0000009E   0x2008             MOVS     R0,#+8
    212            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    213            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    214            GPIO_InitStructure.Pull = GPIO_PULLUP;
    215            //GPIO_InitStructure.Alternate 
    216            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000A0   0xA901             ADD      R1,SP,#+4
   \   000000A2   0x9001             STR      R0,[SP, #+4]
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x9002             STR      R0,[SP, #+8]
   \   000000A8   0x2002             MOVS     R0,#+2
   \   000000AA   0x9004             STR      R0,[SP, #+16]
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x9003             STR      R0,[SP, #+12]
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       HAL_GPIO_Init
    217          
    218            /* Deselect : Chip Select high */
    219            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0x2108             MOVS     R1,#+8
   \   000000BA   0x4620             MOV      R0,R4
   \   000000BC   0x.... 0x....      BL       HAL_GPIO_WritePin
    220             /* sop1hc */
    221            /* Configure the SPI interrupt priority */
    222            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000C0   0x2200             MOVS     R2,#+0
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x2023             MOVS     R0,#+35
   \   000000C6   0x.... 0x....      BL       HAL_NVIC_SetPriority
    223          
    224            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000CA   0x2023             MOVS     R0,#+35
   \   000000CC   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    225            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    226            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    227          
    228            /* Enable SPI1  */
    229            //__HAL_SPI_ENABLE(SPI1);
    230          
    231          }
   \   000000D0   0xB006             ADD      SP,SP,#+24
   \   000000D2   0xBD10             POP      {R4,PC}          ;; return
    232          

   \                                 In section .text, align 2, keep-with-next
    233          void mySPI_SendData(uint8_t adress, uint8_t data)
    234          {
   \                     mySPI_SendData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   00000004   0x6812             LDR      R2,[R2, #+0]
    235           
    236          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x6893             LDR      R3,[R2, #+8]
   \   00000008   0x079B             LSLS     R3,R3,#+30
   \   0000000A   0xD5FC             BPL.N    ??mySPI_SendData_0
    237          SPI_I2S_SendData(SPI1, adress);
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable16  ;; 0x4001300c
   \   00000010   0x6018             STR      R0,[R3, #+0]
    238          
    239          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   00000012   0x6890             LDR      R0,[R2, #+8]
   \   00000014   0x07C0             LSLS     R0,R0,#+31
   \   00000016   0xD5FC             BPL.N    ??mySPI_SendData_1
    240          SPI_I2S_ReceiveData(SPI1);
   \   00000018   0x6818             LDR      R0,[R3, #+0]
    241          
    242          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   0000001A   0x6890             LDR      R0,[R2, #+8]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD4FC             BMI.N    ??mySPI_SendData_2
    243          SPI_I2S_SendData(SPI1, data);
   \   00000020   0x6019             STR      R1,[R3, #+0]
    244          
    245          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000022   0x6890             LDR      R0,[R2, #+8]
   \   00000024   0x07C0             LSLS     R0,R0,#+31
   \   00000026   0xD4FC             BMI.N    ??mySPI_SendData_3
    246          SPI_I2S_ReceiveData(SPI1);
   \   00000028   0x6818             LDR      R0,[R3, #+0]
    247           
    248          }
   \   0000002A   0x4770             BX       LR               ;; return
    249          
    250          /**
    251            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    252            * @param  None
    253            * @retval None
    254          */
    255          

   \                                 In section .text, align 2, keep-with-next
    256          void SPI1_IRQHandler(void)
    257          {  
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    258                uint16_t tmpTest;
    259          	  static uint8_t stLR,stLROld;
    260          
    261          	  /* USER CODE BEGIN SPI5_IRQn 0 */
    262          	
    263          	  /* USER CODE END SPI5_IRQn 0 */
    264          	  //HAL_SPI_IRQHandler(&hspi5);
    265          	  /* USER CODE BEGIN SPI5_IRQn 1 */
    266          	
    267          	  /* USER CODE END SPI5_IRQn 1 */
    268          		/* Check if data are available in SPI Data register */
    269          	  /* SPI in mode Receiver ----------------------------------------------------*/
    270          	  if(
    271          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    272          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    273          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable16_1
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xD57A             BPL.N    ??SPI1_IRQHandler_0
    274          	  {
    275          	
    276          
    277          	   tmpTest =  SPI_I2S_ReceiveData(SPI1);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4001300c
    278          	
    279          	   /* Left-Right Mic data */
    280          	   stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x6805             LDR      R5,[R0, #+0]
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   0000001A   0x.... 0x....      BL       HAL_GPIO_ReadPin
    281          	
    282          		if (stLR==GPIO_PIN_SET)
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xB2AD             UXTH     R5,R5
   \   00000022   0xF894 0x1082      LDRB     R1,[R4, #+130]
   \   00000026   0xD110             BNE.N    ??SPI1_IRQHandler_1
    283          		{
    284          				if (stLROld==GPIO_PIN_RESET)
   \   00000028   0xB189             CBZ.N    R1,??SPI1_IRQHandler_2
    285          				{
    286          					SPI1_stNipple = (tmpTest);
    287          
    288          				}
    289          				else
    290          				{
    291          					 vRawSens1 =((tmpTest>>I2S1_stPosShft)|(SPI1_stNipple<<(SDOLEN-I2S1_stPosShft)));	
                 					 ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   0000002A   0xF894 0x1081      LDRB     R1,[R4, #+129]
   \   0000002E   0xF9B4 0x2090      LDRSH    R2,[R4, #+144]
   \   00000032   0xFA25 0xF301      LSR      R3,R5,R1
   \   00000036   0xF894 0x1081      LDRB     R1,[R4, #+129]
   \   0000003A   0xF1C1 0x0110      RSB      R1,R1,#+16
   \   0000003E   0xFA02 0xF101      LSL      R1,R2,R1
   \   00000042   0x4319             ORRS     R1,R1,R3
   \   00000044   0xF8A4 0x1084      STRH     R1,[R4, #+132]
   \   00000048   0xE013             B.N      ??SPI1_IRQHandler_3
    292          				   
    293          				}
    294          		}
    295          		else
    296          		{
    297          			  if (stLROld==GPIO_PIN_SET)
   \                     ??SPI1_IRQHandler_1: (+1)
   \   0000004A   0x2901             CMP      R1,#+1
   \   0000004C   0xD102             BNE.N    ??SPI1_IRQHandler_4
    298          			  {
    299          				  SPI1_stNipple = (tmpTest);  
   \                     ??SPI1_IRQHandler_2: (+1)
   \   0000004E   0xF8A4 0x5090      STRH     R5,[R4, #+144]
   \   00000052   0xE00E             B.N      ??SPI1_IRQHandler_3
    300          
    301          			  }
    302          			  else
    303          			  {
    304          				  vRawSens2 =((tmpTest>>I2S1_stPosShft)|(SPI1_stNipple<<(SDOLEN-I2S1_stPosShft)));
                 				  ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI1_IRQHandler_4: (+1)
   \   00000054   0xF894 0x1081      LDRB     R1,[R4, #+129]
   \   00000058   0xF9B4 0x2090      LDRSH    R2,[R4, #+144]
   \   0000005C   0xFA25 0xF301      LSR      R3,R5,R1
   \   00000060   0xF894 0x1081      LDRB     R1,[R4, #+129]
   \   00000064   0xF1C1 0x0110      RSB      R1,R1,#+16
   \   00000068   0xFA02 0xF101      LSL      R1,R2,R1
   \   0000006C   0x4319             ORRS     R1,R1,R3
   \   0000006E   0xF8A4 0x1086      STRH     R1,[R4, #+134]
    305          
    306          			  } 	
    307          		}
    308          	   
    309          	   if (iSDO12<4*AUDIO_OUT_BUFFER_SIZE)
   \                     ??SPI1_IRQHandler_3: (+1)
   \   00000072   0xF8B4 0x1092      LDRH     R1,[R4, #+146]
   \   00000076   0xF5B1 0x5F80      CMP      R1,#+4096
   \   0000007A   0xDA09             BGE.N    ??SPI1_IRQHandler_5
    310          	   {
    311                     TestSDO12[iSDO12++]=tmpTest;
   \   0000007C   0xF8B4 0x1092      LDRH     R1,[R4, #+146]
   \   00000080   0x1C4A             ADDS     R2,R1,#+1
   \   00000082   0xEB04 0x0141      ADD      R1,R4,R1, LSL #+1
   \   00000086   0xF8A4 0x2092      STRH     R2,[R4, #+146]
   \   0000008A   0xF8A1 0x5094      STRH     R5,[R1, #+148]
   \   0000008E   0xE002             B.N      ??SPI1_IRQHandler_6
    312          	   }
    313          	   else
    314          	   {
    315                     iSDO12=0;
   \                     ??SPI1_IRQHandler_5: (+1)
   \   00000090   0x2100             MOVS     R1,#+0
   \   00000092   0xF8A4 0x1092      STRH     R1,[R4, #+146]
    316          	   }
    317          #if 1
    318          		if ((WaveRec_idxSens1 < (2*AUDIO_OUT_BUFFER_SIZE+1))&&(WaveRec_idxSens2 < (2*AUDIO_OUT_BUFFER_SIZE+1)))
   \                     ??SPI1_IRQHandler_6: (+1)
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   0000009A   0xF640 0x0301      MOVW     R3,#+2049
   \   0000009E   0x880A             LDRH     R2,[R1, #+0]
   \   000000A0   0x429A             CMP      R2,R3
   \   000000A2   0xBFBE             ITTT     LT 
   \   000000A4   0x.... 0x....      LDRLT.W  R2,??DataTable16_3
   \   000000A8   0x8815             LDRHLT   R5,[R2, #+0]
   \   000000AA   0x429D             CMPLT    R5,R3
   \   000000AC   0xDA27             BGE.N    ??SPI1_IRQHandler_7
    319          	//			  &&(stLR!=stLROld))
    320          		{
    321          	/*-------------------------------------------------------------------------------------------------------------
    322          				  
    323          		Sequence  Record Data					  Processing Data				  Player Data
    324          				  
    325          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    326          				  
    327          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    328          				  
    329          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    330          	 ---------------------------------------------------------------------------------------------------------------*/
    331          				  /* Recording Audio Data */						 
    332          				   switch (buffer_switch)
   \   000000AE   0x.... 0x....      LDR.W    R3,??DataTable16_4
   \   000000B2   0x781B             LDRB     R3,[R3, #+0]
   \   000000B4   0xB11B             CBZ.N    R3,??SPI1_IRQHandler_8
   \   000000B6   0x2B02             CMP      R3,#+2
   \   000000B8   0xD009             BEQ.N    ??SPI1_IRQHandler_9
   \   000000BA   0xD304             BCC.N    ??SPI1_IRQHandler_10
   \   000000BC   0xE01F             B.N      ??SPI1_IRQHandler_7
    333          				   {
    334          							case BUF1_PLAY:
    335          #if MAIN_FFT
    336          									//Data is updated to Buffer2
    337          									if ((stLR==GPIO_PIN_SET)&&(stLROld==GPIO_PIN_RESET))
    338          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    339          									if ((stLR==GPIO_PIN_RESET)&&(stLROld==GPIO_PIN_SET))
    340          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
    341          	
    342          #else
    343                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
                                                 ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI1_IRQHandler_8: (+1)
   \   000000BE   0x8813             LDRH     R3,[R2, #+0]
   \   000000C0   0x.... 0x....      LDR.W    R5,??DataTable16_5  ;; 0xc00080a0
   \   000000C4   0xE006             B.N      ??SPI1_IRQHandler_11
    344          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    345          							    else
    346          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    347          #endif
    348          	
    349          									break;
    350          							case BUF2_PLAY:
    351          #if MAIN_FFT
    352          									//Data is updated to Buffer3				 
    353          									if ((stLR==GPIO_PIN_SET)&&(stLROld==GPIO_PIN_RESET))
    354          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    355          									if ((stLR==GPIO_PIN_RESET)&&(stLROld==GPIO_PIN_SET))
    356          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
    357          #else
    358                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
                                                 ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI1_IRQHandler_10: (+1)
   \   000000C6   0x8813             LDRH     R3,[R2, #+0]
   \   000000C8   0x.... 0x....      LDR.W    R5,??DataTable17_1  ;; 0xc0010140
   \   000000CC   0xE002             B.N      ??SPI1_IRQHandler_11
    359          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    360          							    else
    361          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;	
    362          #endif
    363          									break;
    364          							case BUF3_PLAY:
    365          #if MAIN_FFT
    366          	
    367          									//Data is update to Buffer1 	 
    368          									if ((stLR==GPIO_PIN_SET)&&(stLROld==GPIO_PIN_RESET))
    369          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    370          									if ((stLR==GPIO_PIN_RESET)&&(stLROld==GPIO_PIN_SET))
    371          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
    372          #else
    373                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
                                                 ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI1_IRQHandler_9: (+1)
   \   000000CE   0x8813             LDRH     R3,[R2, #+0]
   \   000000D0   0xF04F 0x4540      MOV      R5,#-1073741824
   \                     ??SPI1_IRQHandler_11: (+1)
   \   000000D4   0x880E             LDRH     R6,[R1, #+0]
   \   000000D6   0x42B3             CMP      R3,R6
   \   000000D8   0xD307             BCC.N    ??SPI1_IRQHandler_12
    374          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \   000000DA   0x880A             LDRH     R2,[R1, #+0]
   \   000000DC   0x1C53             ADDS     R3,R2,#+1
   \   000000DE   0x800B             STRH     R3,[R1, #+0]
   \   000000E0   0xF9B4 0x3084      LDRSH    R3,[R4, #+132]
   \   000000E4   0xF825 0x3012      STRH     R3,[R5, R2, LSL #+1]
   \   000000E8   0xE009             B.N      ??SPI1_IRQHandler_7
    375          							    else
    376          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
   \                     ??SPI1_IRQHandler_12: (+1)
   \   000000EA   0x8813             LDRH     R3,[R2, #+0]
   \   000000EC   0x1C5E             ADDS     R6,R3,#+1
   \   000000EE   0xEB05 0x0343      ADD      R3,R5,R3, LSL #+1
   \   000000F2   0x8016             STRH     R6,[R2, #+0]
   \   000000F4   0xF9B4 0x2086      LDRSH    R2,[R4, #+134]
   \   000000F8   0xF241 0x0514      MOVW     R5,#+4116
   \   000000FC   0x52EA             STRH     R2,[R5, R3]
    377          #endif
    378          									break;
    379          							default:
    380          									break; 
    381          				   }
    382          			
    383          		 } 
    384          #endif		
    385          		/* Update Old value */	  
    386          		stLROld=stLR;
   \                     ??SPI1_IRQHandler_7: (+1)
   \   000000FE   0xF884 0x0082      STRB     R0,[R4, #+130]
    387          		if(WaveRec_idxSens1 >= (2*AUDIO_OUT_BUFFER_SIZE-1))
   \   00000102   0x8808             LDRH     R0,[R1, #+0]
    388          		{
    389          #ifndef CS43L22_PLAY	
    390          
    391          			
    392          #endif
    393                     }
    394          	  	}
    395          				 
    396          } 	 
   \                     ??SPI1_IRQHandler_0: (+1)
   \   00000104   0xBD70             POP      {R4-R6,PC}       ;; return
   \   00000106                      REQUIRE Buffer2
   \   00000106                      REQUIRE Buffer3
   \   00000106                      REQUIRE Buffer1

   \                                 In section .bss, align 4
   \                     hi2s1:
   \   00000000                      DS8 64
   \                     hi2s2:
   \   00000040                      DS8 64
   \                     WaveRecord_flgInt:
   \   00000080                      DS8 1
   \                     I2S1_stPosShft:
   \   00000081                      DS8 1
   \   00000082                      DS8 1
   \   00000083                      DS8 1
   \                     vRawSens1:
   \   00000084                      DS8 2
   \                     vRawSens2:
   \   00000086                      DS8 2
   \                     vRawSens4:
   \   00000088                      DS8 2
   \                     vRawSens3:
   \   0000008A                      DS8 2
   \                     vRawSens5:
   \   0000008C                      DS8 2
   \                     vRawSens6:
   \   0000008E                      DS8 2
   \                     SPI1_stNipple:
   \   00000090                      DS8 2
   \                     iSDO12:
   \   00000092                      DS8 2
   \                     TestSDO12:
   \   00000094                      DS8 8192
    397          
    398          
    399          
    400          
    401          /**
    402            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    403            * @param  None
    404            * @retval None
    405          */
    406          

   \                                 In section .text, align 2, keep-with-next
    407          void SPI2_IRQHandler(void)
    408          {      
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    409              uint16_t app;
    410              static uint8_t I2S2_stLR, I2S2_stLROld;
    411          
    412            /* Check if data are available in SPI Data register */
    413             if (
    414          //	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    415          //   	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    416             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    417             	  )
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable16_1
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x6C20             LDR      R0,[R4, #+64]
   \   0000000A   0x6840             LDR      R0,[R0, #+4]
   \   0000000C   0x0640             LSLS     R0,R0,#+25
   \   0000000E   0xD572             BPL.N    ??SPI2_IRQHandler_0
    418             {
    419              
    420               app = SPI_I2S_ReceiveData(SPI2);   
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable16_6  ;; 0x4000380c
    421               //SPI_I2S_SendData(SPI2, 3333);
    422          
    423          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000014   0x2110             MOVS     R1,#+16
   \   00000016   0x6805             LDR      R5,[R0, #+0]
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   0000001C   0x.... 0x....      BL       HAL_GPIO_ReadPin
    424          
    425          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable16_7
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xB2AD             UXTH     R5,R5
   \   00000028   0x784A             LDRB     R2,[R1, #+1]
   \   0000002A   0xD10F             BNE.N    ??SPI2_IRQHandler_1
    426          	 {
    427                  if (I2S2_stLROld==GPIO_PIN_SET)
   \   0000002C   0x2A01             CMP      R2,#+1
   \   0000002E   0xD00E             BEQ.N    ??SPI2_IRQHandler_2
    428                  {
    429                      I2S2_stNipple = app;           
    430                  }
    431          		else
    432          		{
    433          
    434          			 vRawSens3 = ((app>>I2S2_stPosShft)|(I2S2_stNipple<<(SDOLEN-I2S2_stPosShft)));
                 			 ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000030   0x780A             LDRB     R2,[R1, #+0]
   \   00000032   0xF9B1 0x3002      LDRSH    R3,[R1, #+2]
   \   00000036   0xFA25 0xF602      LSR      R6,R5,R2
   \   0000003A   0x780A             LDRB     R2,[R1, #+0]
   \   0000003C   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   00000040   0xFA03 0xF202      LSL      R2,R3,R2
   \   00000044   0x4332             ORRS     R2,R2,R6
   \   00000046   0xF8A4 0x208A      STRH     R2,[R4, #+138]
   \   0000004A   0xE00F             B.N      ??SPI2_IRQHandler_3
    435          
    436          		}
    437          	 }
    438          	 else
    439          	 {
    440                  if (I2S2_stLROld==GPIO_PIN_RESET)
   \                     ??SPI2_IRQHandler_1: (+1)
   \   0000004C   0xB90A             CBNZ.N   R2,??SPI2_IRQHandler_4
    441                  {
    442                      I2S2_stNipple = app;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   0000004E   0x804D             STRH     R5,[R1, #+2]
   \   00000050   0xE00C             B.N      ??SPI2_IRQHandler_3
    443          
    444                  }
    445          		else
    446          		{
    447                      vRawSens4 =((app>>I2S2_stPosShft)|(I2S2_stNipple<<(SDOLEN-I2S2_stPosShft)));
                             ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI2_IRQHandler_4: (+1)
   \   00000052   0x780A             LDRB     R2,[R1, #+0]
   \   00000054   0xF9B1 0x3002      LDRSH    R3,[R1, #+2]
   \   00000058   0xFA25 0xF602      LSR      R6,R5,R2
   \   0000005C   0x780A             LDRB     R2,[R1, #+0]
   \   0000005E   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   00000062   0xFA03 0xF202      LSL      R2,R3,R2
   \   00000066   0x4332             ORRS     R2,R2,R6
   \   00000068   0xF8A4 0x2088      STRH     R2,[R4, #+136]
    448          		
    449          		}
    450          	 }
    451          
    452          	 	if (iSDO34<4*AUDIO_OUT_BUFFER_SIZE)
   \                     ??SPI2_IRQHandler_3: (+1)
   \   0000006C   0x888A             LDRH     R2,[R1, #+4]
   \   0000006E   0xF5B2 0x5F80      CMP      R2,#+4096
   \   00000072   0xDA06             BGE.N    ??SPI2_IRQHandler_5
    453          	   {
    454                     TestSDO34[iSDO34++]=app;
   \   00000074   0x888A             LDRH     R2,[R1, #+4]
   \   00000076   0x1C53             ADDS     R3,R2,#+1
   \   00000078   0xEB01 0x0242      ADD      R2,R1,R2, LSL #+1
   \   0000007C   0x808B             STRH     R3,[R1, #+4]
   \   0000007E   0x8115             STRH     R5,[R2, #+8]
   \   00000080   0xE001             B.N      ??SPI2_IRQHandler_6
    455          	   }
    456          	   else
    457          	   {
    458                     iSDO34=0;
   \                     ??SPI2_IRQHandler_5: (+1)
   \   00000082   0x2200             MOVS     R2,#+0
   \   00000084   0x808A             STRH     R2,[R1, #+4]
    459          	   }
    460          	 
    461          #if 1
    462          	 if ((WaveRec_idxSens3 < (2*AUDIO_OUT_BUFFER_SIZE+1))&&(WaveRec_idxSens4 < (2*AUDIO_OUT_BUFFER_SIZE+1)))
   \                     ??SPI2_IRQHandler_6: (+1)
   \   00000086   0x.... 0x....      LDR.W    R2,??DataTable17_2
   \   0000008A   0xF640 0x0501      MOVW     R5,#+2049
   \   0000008E   0x8813             LDRH     R3,[R2, #+0]
   \   00000090   0x42AB             CMP      R3,R5
   \   00000092   0xBFBE             ITTT     LT 
   \   00000094   0x.... 0x....      LDRLT.W  R3,??DataTable17_3
   \   00000098   0x881E             LDRHLT   R6,[R3, #+0]
   \   0000009A   0x42AE             CMPLT    R6,R5
   \   0000009C   0xDA2A             BGE.N    ??SPI2_IRQHandler_7
    463          //             &&(I2S2_stLR!=I2S2_stLROld))
    464          	 {
    465          /*-------------------------------------------------------------------------------------------------------------
    466          			  
    467          	Sequence  Record Data                     Processing Data                 Player Data
    468          			  
    469          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    470          			  
    471          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    472          			  
    473          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    474           ---------------------------------------------------------------------------------------------------------------*/
    475          		/* Recording Audio Data */			             
    476          		 switch (buffer_switch)
   \   0000009E   0x.... 0x....      LDR.W    R5,??DataTable16_4
   \   000000A2   0x782D             LDRB     R5,[R5, #+0]
   \   000000A4   0xB11D             CBZ.N    R5,??SPI2_IRQHandler_8
   \   000000A6   0x2D02             CMP      R5,#+2
   \   000000A8   0xD009             BEQ.N    ??SPI2_IRQHandler_9
   \   000000AA   0xD304             BCC.N    ??SPI2_IRQHandler_10
   \   000000AC   0xE022             B.N      ??SPI2_IRQHandler_7
    477          		 {
    478          			  case BUF1_PLAY:
    479          				  //Data is updated to Buffer2
    480          				  //PDM_Filter_64_LSB((uint8_t *)InternalBuffer, (uint16_t *)(buffer2+cntPos*PCM_OUT_SIZE), volume , (PDMFilter_InitStruct *)&Filter[0]);
    481          #if MAIN_FFT
    482          				  if ((I2S2_stLR==GPIO_PIN_SET)&&(I2S2_stLROld==GPIO_PIN_RESET))
    483          				      Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    484          				  if ((I2S2_stLR==GPIO_PIN_RESET)&&(I2S2_stLROld==GPIO_PIN_SET))
    485          				      Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    486          #else
    487                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
                                   ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI2_IRQHandler_8: (+1)
   \   000000AE   0x881D             LDRH     R5,[R3, #+0]
   \   000000B0   0x.... 0x....      LDR.W    R6,??DataTable16_5  ;; 0xc00080a0
   \   000000B4   0xE006             B.N      ??SPI2_IRQHandler_11
    488                                Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    489          				  else
    490                                Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			  
    491          #endif 
    492          				  break;
    493          			  case BUF2_PLAY:
    494          				  //Data is updated to Buffer3
    495          				  //PDM_Filter_64_LSB((uint8_t *)InternalBuffer, (uint16_t *)(buffer3+cntPos*PCM_OUT_SIZE), volume , (PDMFilter_InitStruct *)&Filter[0]);
    496          #if MAIN_FFT
    497          				  if ((I2S2_stLR==GPIO_PIN_SET)&&(I2S2_stLROld==GPIO_PIN_RESET))
    498          				      Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    499          				  if ((I2S2_stLR==GPIO_PIN_RESET)&&(I2S2_stLROld==GPIO_PIN_SET))
    500          				      Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    501          #else
    502                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
                                   ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI2_IRQHandler_10: (+1)
   \   000000B6   0x881D             LDRH     R5,[R3, #+0]
   \   000000B8   0x.... 0x....      LDR.W    R6,??DataTable17_1  ;; 0xc0010140
   \   000000BC   0xE002             B.N      ??SPI2_IRQHandler_11
    503                                Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    504          				  else
    505                                Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			   
    506          #endif
    507          				  break;
    508          			  case BUF3_PLAY:
    509          				  //Data is update to Buffer1
    510          				  //PDM_Filter_64_LSB((uint8_t *)InternalBuffer, (uint16_t *)(buffer1+cntPos*PCM_OUT_SIZE), volume , (PDMFilter_InitStruct *)&Filter[0]);
    511          #if MAIN_FFT
    512          				  if ((I2S2_stLR==GPIO_PIN_SET)&&(I2S2_stLROld==GPIO_PIN_RESET))
    513               				  Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    514            				  if ((I2S2_stLR==GPIO_PIN_RESET)&&(I2S2_stLROld==GPIO_PIN_SET))
    515               				  Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
    516          #else
    517                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
                                   ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI2_IRQHandler_9: (+1)
   \   000000BE   0x881D             LDRH     R5,[R3, #+0]
   \   000000C0   0xF04F 0x4640      MOV      R6,#-1073741824
   \                     ??SPI2_IRQHandler_11: (+1)
   \   000000C4   0x8817             LDRH     R7,[R2, #+0]
   \   000000C6   0x42BD             CMP      R5,R7
   \   000000C8   0xD30A             BCC.N    ??SPI2_IRQHandler_12
    518                                Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   000000CA   0x8813             LDRH     R3,[R2, #+0]
   \   000000CC   0x1C5D             ADDS     R5,R3,#+1
   \   000000CE   0xEB06 0x0343      ADD      R3,R6,R3, LSL #+1
   \   000000D2   0x8015             STRH     R5,[R2, #+0]
   \   000000D4   0xF9B4 0x208A      LDRSH    R2,[R4, #+138]
   \   000000D8   0xF242 0x0428      MOVW     R4,#+8232
   \   000000DC   0x52E2             STRH     R2,[R4, R3]
   \   000000DE   0xE009             B.N      ??SPI2_IRQHandler_7
    519          				  else
    520                                Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \                     ??SPI2_IRQHandler_12: (+1)
   \   000000E0   0x881A             LDRH     R2,[R3, #+0]
   \   000000E2   0x1C55             ADDS     R5,R2,#+1
   \   000000E4   0xEB06 0x0242      ADD      R2,R6,R2, LSL #+1
   \   000000E8   0x801D             STRH     R5,[R3, #+0]
   \   000000EA   0xF9B4 0x3088      LDRSH    R3,[R4, #+136]
   \   000000EE   0xF243 0x043C      MOVW     R4,#+12348
   \   000000F2   0x52A3             STRH     R3,[R4, R2]
    521          
    522          
    523          #endif
    524          				  break;
    525          			  default:
    526          				  break; 
    527          		 }
    528          		
    529          	 }          
    530          #endif		  
    531          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_7: (+1)
   \   000000F4   0x7048             STRB     R0,[R1, #+1]
    532          
    533             }
    534          
    535          }
   \                     ??SPI2_IRQHandler_0: (+1)
   \   000000F6   0xB001             ADD      SP,SP,#+4
   \   000000F8   0xBDF0             POP      {R4-R7,PC}       ;; return
   \   000000FA                      REQUIRE Buffer2
   \   000000FA                      REQUIRE Buffer3
   \   000000FA                      REQUIRE Buffer1

   \                                 In section .bss, align 4
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \                     I2S2_stNipple:
   \   00000002                      DS8 2
   \                     iSDO34:
   \   00000004                      DS8 2
   \   00000006                      DS8 2
   \                     TestSDO34:
   \   00000008                      DS8 8192
    536          
    537          

   \                                 In section .text, align 2, keep-with-next
    538          void SPI4_IRQHandler(void)
    539          {
    540            static uint8_t Main_stLR, Main_stLROld;
    541          
    542          
    543          
    544            /* USER CODE BEGIN SPI5_IRQn 0 */
    545          
    546            /* USER CODE END SPI5_IRQn 0 */
    547            //HAL_SPI_IRQHandler(&hspi5);
    548            /* USER CODE BEGIN SPI5_IRQn 1 */
    549          
    550            /* USER CODE END SPI5_IRQn 1 */
    551              /* Check if data are available in SPI Data register */
    552            /* SPI in mode Receiver ----------------------------------------------------*/
    553            if(
    554          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    555          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    556               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xD400             BMI.N    ??SPI4_IRQHandler_0
   \   0000000C   0x4770             BX       LR
    557            {
    558          
    559                  uint16_t test;
    560                  test =  SPI_I2S_ReceiveData(SPI4);
   \                     ??SPI4_IRQHandler_0: (+1)
   \   0000000E   0xB5F0             PUSH     {R4-R7,LR}
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable17_5  ;; 0x4001340c
   \   00000014   0xB081             SUB      SP,SP,#+4
    561          
    562                  /* Left-Right Mic data */
    563                  Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000016   0x2110             MOVS     R1,#+16
   \   00000018   0x6804             LDR      R4,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_ReadPin
    564          
    565                  /* STM32F746 read data from STA321MP, the data is shifted few bit     */
    566                  /* Data from STA321MP is 32bit formart                                */
    567                  /* SPI is just able to read 16 bit format                             */
    568                  /* Therefore, it needs to correct                                     */
    569                  
    570                  /* ---------------------------+++++++++++++++++++++++++++++++---------*/
    571                  /*                  ______DATAL_____              ______DATAR_____    */
    572                  /*                  _____vRawSens5__              ______vRawSens6_    */       
    573          	if (Main_stLR==GPIO_PIN_SET)
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable17_6
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xB2A4             UXTH     R4,R4
   \   0000002A   0x784A             LDRB     R2,[R1, #+1]
   \   0000002C   0xD135             BNE.N    ??SPI4_IRQHandler_1
    574          	{
    575                      if (Main_stLROld==GPIO_PIN_SET)
   \   0000002E   0x2A01             CMP      R2,#+1
   \   00000030   0xD034             BEQ.N    ??SPI4_IRQHandler_2
    576                      {
    577                         SPI4_stNipple = (test);    
    578                      }
    579                      else
    580                      {
    581                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000032   0x780A             LDRB     R2,[R1, #+0]
   \   00000034   0xF9B1 0x3002      LDRSH    R3,[R1, #+2]
    582                         if (WaveRec_idxSens5 < (2*AUDIO_OUT_BUFFER_SIZE+2))
   \   00000038   0xF640 0x0602      MOVW     R6,#+2050
   \   0000003C   0xFA24 0xF502      LSR      R5,R4,R2
   \   00000040   0x780A             LDRB     R2,[R1, #+0]
   \   00000042   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   00000046   0xFA03 0xF202      LSL      R2,R3,R2
   \   0000004A   0x432A             ORRS     R2,R2,R5
   \   0000004C   0x.... 0x....      LDR.W    R3,??DataTable16_1
   \   00000050   0xF8A3 0x208C      STRH     R2,[R3, #+140]
   \   00000054   0x.... 0x....      LDR.W    R3,??DataTable17_7
   \   00000058   0x881D             LDRH     R5,[R3, #+0]
   \   0000005A   0x42B5             CMP      R5,R6
   \   0000005C   0xDA60             BGE.N    ??SPI4_IRQHandler_3
    583                         {
    584                              /*-------------------------------------------------------------------------------------------------------------                                             
    585                              Sequence  Record Data                     Processing Data                 Player Data
    586                                                
    587                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    588                                                
    589                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    590                                                
    591                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    592                               ---------------------------------------------------------------------------------------------------------------*/                     
    593                               /* Recording Audio Data */			             
    594                               switch (buffer_switch)
   \   0000005E   0x.... 0x....      LDR.W    R5,??DataTable16_4
   \   00000062   0x782D             LDRB     R5,[R5, #+0]
   \   00000064   0xB11D             CBZ.N    R5,??SPI4_IRQHandler_4
   \   00000066   0x2D02             CMP      R5,#+2
   \   00000068   0xD011             BEQ.N    ??SPI4_IRQHandler_5
   \   0000006A   0xD308             BCC.N    ??SPI4_IRQHandler_6
   \   0000006C   0xE058             B.N      ??SPI4_IRQHandler_3
    595                               {
    596                                   case BUF1_PLAY:
    597                                       Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_4: (+1)
   \   0000006E   0x881F             LDRH     R7,[R3, #+0]
   \   00000070   0x.... 0x....      LDR.W    R6,??DataTable16_5  ;; 0xc00080a0
   \   00000074   0x1C7D             ADDS     R5,R7,#+1
   \   00000076   0x801D             STRH     R5,[R3, #+0]
   \   00000078   0xF244 0x0550      MOVW     R5,#+16464
   \   0000007C   0xE045             B.N      ??SPI4_IRQHandler_7
    598                                       Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
    599                                       break;
    600                                   case BUF2_PLAY:
    601                                       Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_6: (+1)
   \   0000007E   0x881F             LDRH     R7,[R3, #+0]
   \   00000080   0x.... 0x....      LDR.W    R6,??DataTable18  ;; 0xc0010140
   \   00000084   0x1C7D             ADDS     R5,R7,#+1
   \   00000086   0x801D             STRH     R5,[R3, #+0]
   \   00000088   0xF244 0x0550      MOVW     R5,#+16464
   \   0000008C   0xE03D             B.N      ??SPI4_IRQHandler_7
    602                                       Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
    603                                       break;
    604                                   case BUF3_PLAY:
    605                                       Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_5: (+1)
   \   0000008E   0x881F             LDRH     R7,[R3, #+0]
   \   00000090   0x1C7D             ADDS     R5,R7,#+1
   \   00000092   0x801D             STRH     R5,[R3, #+0]
   \   00000094   0xF244 0x0550      MOVW     R5,#+16464
   \   00000098   0xE035             B.N      ??SPI4_IRQHandler_8
    606                                       Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
    607                                       break;                          
    608                                   default:
    609                                       break;
    610                               }
    611                         }
    612          	   }
    613                  }
    614          	else
    615          	{
    616                    if (Main_stLROld==GPIO_PIN_RESET)
   \                     ??SPI4_IRQHandler_1: (+1)
   \   0000009A   0xB90A             CBNZ.N   R2,??SPI4_IRQHandler_9
    617                    {
    618                        SPI4_stNipple = (test);	  
   \                     ??SPI4_IRQHandler_2: (+1)
   \   0000009C   0x804C             STRH     R4,[R1, #+2]
   \   0000009E   0xE03F             B.N      ??SPI4_IRQHandler_3
    619          
    620                    }
    621                    else
    622                    {
    623                         vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI4_IRQHandler_9: (+1)
   \   000000A0   0x780A             LDRB     R2,[R1, #+0]
   \   000000A2   0xF9B1 0x3002      LDRSH    R3,[R1, #+2]
    624                         if (WaveRec_idxSens6 < (2*AUDIO_OUT_BUFFER_SIZE+2))
   \   000000A6   0xF640 0x0602      MOVW     R6,#+2050
   \   000000AA   0xFA24 0xF502      LSR      R5,R4,R2
   \   000000AE   0x780A             LDRB     R2,[R1, #+0]
   \   000000B0   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   000000B4   0xFA03 0xF202      LSL      R2,R3,R2
   \   000000B8   0x432A             ORRS     R2,R2,R5
   \   000000BA   0x.... 0x....      LDR.W    R3,??DataTable16_1
   \   000000BE   0xF8A3 0x208E      STRH     R2,[R3, #+142]
   \   000000C2   0x.... 0x....      LDR.W    R3,??DataTable17_8
   \   000000C6   0x881D             LDRH     R5,[R3, #+0]
   \   000000C8   0x42B5             CMP      R5,R6
   \   000000CA   0xDA29             BGE.N    ??SPI4_IRQHandler_3
    625                         {
    626                              /*-------------------------------------------------------------------------------------------------------------                                             
    627                              Sequence  Record Data                     Processing Data                 Player Data
    628                                                
    629                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    630                                                
    631                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    632                                                
    633                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    634                               ---------------------------------------------------------------------------------------------------------------*/                 
    635                                /* Recording Audio Data */			             
    636                               switch (buffer_switch)
   \   000000CC   0x.... 0x....      LDR.W    R5,??DataTable16_4
   \   000000D0   0x782D             LDRB     R5,[R5, #+0]
   \   000000D2   0xB11D             CBZ.N    R5,??SPI4_IRQHandler_10
   \   000000D4   0x2D02             CMP      R5,#+2
   \   000000D6   0xD011             BEQ.N    ??SPI4_IRQHandler_11
   \   000000D8   0xD308             BCC.N    ??SPI4_IRQHandler_12
   \   000000DA   0xE021             B.N      ??SPI4_IRQHandler_3
    637                               {
    638                                   case BUF1_PLAY:
    639                                       Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_10: (+1)
   \   000000DC   0x881F             LDRH     R7,[R3, #+0]
   \   000000DE   0x.... 0x....      LDR.W    R6,??DataTable16_5  ;; 0xc00080a0
   \   000000E2   0x1C7D             ADDS     R5,R7,#+1
   \   000000E4   0x801D             STRH     R5,[R3, #+0]
   \   000000E6   0xF245 0x0564      MOVW     R5,#+20580
   \   000000EA   0xE00E             B.N      ??SPI4_IRQHandler_7
    640                                       Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
    641                                       break;
    642                                   case BUF2_PLAY:
    643                                       Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_12: (+1)
   \   000000EC   0x881F             LDRH     R7,[R3, #+0]
   \   000000EE   0x.... 0x....      LDR.W    R6,??DataTable18  ;; 0xc0010140
   \   000000F2   0x1C7D             ADDS     R5,R7,#+1
   \   000000F4   0x801D             STRH     R5,[R3, #+0]
   \   000000F6   0xF245 0x0564      MOVW     R5,#+20580
   \   000000FA   0xE006             B.N      ??SPI4_IRQHandler_7
    644                                       Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
    645                                       break;
    646                                   case BUF3_PLAY:
    647                                       Buffer1.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_11: (+1)
   \   000000FC   0x881F             LDRH     R7,[R3, #+0]
   \   000000FE   0x1C7D             ADDS     R5,R7,#+1
   \   00000100   0x801D             STRH     R5,[R3, #+0]
   \   00000102   0xF245 0x0564      MOVW     R5,#+20580
   \                     ??SPI4_IRQHandler_8: (+1)
   \   00000106   0xF04F 0x4640      MOV      R6,#-1073741824
   \                     ??SPI4_IRQHandler_7: (+1)
   \   0000010A   0xEB06 0x0747      ADD      R7,R6,R7, LSL #+1
   \   0000010E   0x53EA             STRH     R2,[R5, R7]
    648                                       Buffer1.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   00000110   0x881F             LDRH     R7,[R3, #+0]
   \   00000112   0xF107 0x0C01      ADD      R12,R7,#+1
   \   00000116   0xF8A3 0xC000      STRH     R12,[R3, #+0]
   \   0000011A   0xEB06 0x0347      ADD      R3,R6,R7, LSL #+1
   \   0000011E   0x52EA             STRH     R2,[R5, R3]
    649                                       break;                          
    650                                   default:
    651                                       break;
    652                               }
    653                         }
    654                    }		
    655          	}
    656          
    657          	/* The code to store data in to buffer for testing purpose */
    658          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
   \                     ??SPI4_IRQHandler_3: (+1)
   \   00000120   0x888A             LDRH     R2,[R1, #+4]
   \   00000122   0xF5B2 0x5F80      CMP      R2,#+4096
   \   00000126   0xDA08             BGE.N    ??SPI4_IRQHandler_13
    659          	{
    660          		TestSDO56[iSDO56++]=test;
   \   00000128   0x888A             LDRH     R2,[R1, #+4]
   \   0000012A   0x1C53             ADDS     R3,R2,#+1
   \   0000012C   0xEB01 0x0242      ADD      R2,R1,R2, LSL #+1
   \   00000130   0x808B             STRH     R3,[R1, #+4]
   \   00000132   0x8114             STRH     R4,[R2, #+8]
    661          	}
    662          	else
    663          	{
    664          		iSDO56=0;
    665          	}
    666          
    667          
    668          	/* Update Old value */	  
    669          	Main_stLROld=Main_stLR;	  
   \   00000134   0x7048             STRB     R0,[R1, #+1]
    670               
    671            }      
    672          }
   \   00000136   0xB001             ADD      SP,SP,#+4
   \   00000138   0xBDF0             POP      {R4-R7,PC}
   \                     ??SPI4_IRQHandler_13: (+1)
   \   0000013A   0x2200             MOVS     R2,#+0
   \   0000013C   0x808A             STRH     R2,[R1, #+4]
   \   0000013E   0x7048             STRB     R0,[R1, #+1]
   \   00000140   0xB001             ADD      SP,SP,#+4
   \   00000142   0xBDF0             POP      {R4-R7,PC}       ;; return
   \   00000144                      REQUIRE Buffer2
   \   00000144                      REQUIRE Buffer3
   \   00000144                      REQUIRE Buffer1

   \                                 In section .bss, align 4
   \                     SPI4_stPosShft:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \                     SPI4_stNipple:
   \   00000002                      DS8 2
   \                     iSDO56:
   \   00000004                      DS8 2
   \   00000006                      DS8 2
   \                     TestSDO56:
   \   00000008                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hdma_spi2_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi3_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi5_rx:
   \   00000000                      DS8 80
   \                     hdma_spi6_rx:
   \   00000050                      DS8 80

   \                                 In section .bss, align 4
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 1
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, at 0xc0000000
   \                     Buffer1:
   \   00000000                      DS8 32928

   \                                 In section .bss, at 0xc00080a0
   \                     Buffer2:
   \   00000000                      DS8 32928

   \                                 In section .bss, at 0xc0010140
   \                     Buffer3:
   \   00000000                      DS8 32928

   \                                 In section .bss, align 1
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \   00000000                      DS8 1
    673          
    674          
    675          
    676          

   \                                 In section .text, align 2, keep-with-next
    677          void SPI5_IRQHandler(void)
    678          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    679            //static uint16_t stNipple;
    680            //static uint8_t stLR, stOder;
    681          
    682            /* USER CODE BEGIN SPI5_IRQn 0 */
    683          
    684            /* USER CODE END SPI5_IRQn 0 */
    685            //HAL_SPI_IRQHandler(&hspi5);
    686            /* USER CODE BEGIN SPI5_IRQn 1 */
    687          
    688            /* USER CODE END SPI5_IRQn 1 */
    689              /* Check if data are available in SPI Data register */
    690            /* SPI in mode Receiver ----------------------------------------------------*/
    691            if(
    692               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    693               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    694               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_9
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xD43C             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD539             BPL.N    ??SPI5_IRQHandler_0
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD536             BPL.N    ??SPI5_IRQHandler_0
    695            {
    696          
    697          
    698             uint16_t test;
    699             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x4001500c
    700             SPI5->DR = 3333;
   \   0000001E   0xF640 0x5205      MOVW     R2,#+3333
   \   00000022   0x6801             LDR      R1,[R0, #+0]
   \   00000024   0x6002             STR      R2,[R0, #+0]
    701          
    702            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000026   0xF8B4 0x0134      LDRH     R0,[R4, #+308]
   \   0000002A   0xB28A             UXTH     R2,R1
   \   0000002C   0x0209             LSLS     R1,R1,#+8
   \   0000002E   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   00000032   0xEB04 0x0240      ADD      R2,R4,R0, LSL #+1
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0xF8A2 0x1148      STRH     R1,[R2, #+328]
   \   0000003C   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    703            
    704            //volume = 64;
    705            
    706            if (idxMic8>=64)
   \   00000040   0xB280             UXTH     R0,R0
   \   00000042   0x2840             CMP      R0,#+64
   \   00000044   0xDB20             BLT.N    ??SPI5_IRQHandler_0
    707            {
    708          	if (buffer_switch != 1)
   \   00000046   0x.... 0x....      LDR.W    R2,??DataTable16_4
   \   0000004A   0xF8D4 0x0144      LDR      R0,[R4, #+324]
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable18_1
   \   00000052   0xF104 0x03C8      ADD      R3,R4,#+200
   \   00000056   0x7812             LDRB     R2,[R2, #+0]
   \   00000058   0x780A             LDRB     R2,[R1, #+0]
   \   0000005A   0xF8B4 0x113A      LDRH     R1,[R4, #+314]
   \   0000005E   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   00000062   0xF504 0x70A4      ADD      R0,R4,#+328
    709          	{
    710          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    711          						  (PDMFilter_InitStruct *)&Filter[0]);
    712          	}
    713          	else
    714          	{
    715          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    716          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \   00000066   0x.... 0x....      BL       PDM_Filter_64_LSB
    717          	}
    718          	idxMic8=0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    719          	cntPos++;
   \   00000070   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000074   0x1C40             ADDS     R0,R0,#+1
   \   00000076   0xF8A4 0x013A      STRH     R0,[R4, #+314]
    720          	if (cntPos>=256) cntPos=0;
   \   0000007A   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   0000007E   0x28FF             CMP      R0,#+255
   \   00000080   0xBFC4             ITT      GT 
   \   00000082   0x2000             MOVGT    R0,#+0
   \   00000084   0xF8A4 0x013A      STRHGT   R0,[R4, #+314]
    721            }
    722              
    723            }
    724            
    725          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   00000088   0xBD10             POP      {R4,PC}          ;; return
    726          
    727          /* SPI5 init function */
    728          
    729          

   \                                 In section .text, align 2, keep-with-next
    730          void SPI6_IRQHandler(void)
    731          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    732            /* SPI in mode Receiver ----------------------------------------------------*/
    733            if(
    734          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    735               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    736               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_9
   \   00000006   0x6E60             LDR      R0,[R4, #+100]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0789             LSLS     R1,R1,#+30
   \   0000000C   0xD539             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD536             BPL.N    ??SPI6_IRQHandler_0
    737            {
    738          
    739          
    740               uint16_t test;
    741               test =  SPI_I2S_ReceiveData(SPI6);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable18_2  ;; 0x4001540c
    742               SPI6->DR = 3333;
   \   00000018   0xF640 0x5205      MOVW     R2,#+3333
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0x6002             STR      R2,[R0, #+0]
    743          
    744              pDataMic7[idxMic7++] =	HTONS(test);
   \   00000020   0xF8B4 0x0136      LDRH     R0,[R4, #+310]
   \   00000024   0xB28A             UXTH     R2,R1
   \   00000026   0x0209             LSLS     R1,R1,#+8
   \   00000028   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   0000002C   0xEB04 0x0240      ADD      R2,R4,R0, LSL #+1
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0xF8A2 0x11C8      STRH     R1,[R2, #+456]
   \   00000036   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    745          
    746              //volume = 64;
    747          
    748              if (idxMic7>=64)
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0x2840             CMP      R0,#+64
   \   0000003E   0xDB20             BLT.N    ??SPI6_IRQHandler_0
    749              {
    750                if (buffer_switch != 1)
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable16_4
   \   00000044   0xF8D4 0x0140      LDR      R0,[R4, #+320]
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable18_1
   \   0000004C   0xF104 0x03FC      ADD      R3,R4,#+252
   \   00000050   0x7812             LDRB     R2,[R2, #+0]
   \   00000052   0x780A             LDRB     R2,[R1, #+0]
   \   00000054   0xF8B4 0x113C      LDRH     R1,[R4, #+316]
   \   00000058   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   0000005C   0xF504 0x70E4      ADD      R0,R4,#+456
    751                {
    752                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    753                                                          (PDMFilter_InitStruct *)&Filter[1]);
    754                }
    755                else
    756                {
    757                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    758                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \   00000060   0x.... 0x....      BL       PDM_Filter_64_LSB
    759                }
    760                idxMic7=0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    761                cntPos7++;
   \   0000006A   0xF8B4 0x013C      LDRH     R0,[R4, #+316]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0xF8A4 0x013C      STRH     R0,[R4, #+316]
    762                if (cntPos7>=256) cntPos7=0;
   \   00000074   0xF8B4 0x013C      LDRH     R0,[R4, #+316]
   \   00000078   0x28FF             CMP      R0,#+255
   \   0000007A   0xBFC4             ITT      GT 
   \   0000007C   0x2000             MOVGT    R0,#+0
   \   0000007E   0xF8A4 0x013C      STRHGT   R0,[R4, #+316]
    763              }
    764              
    765            }
    766          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   00000082   0xBD10             POP      {R4,PC}          ;; return
    767          
    768          
    769          

   \                                 In section .text, align 2, keep-with-next
    770          void MIC1TO6_Init(void)
    771          {
   \                     MIC1TO6_Init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable13_1  ;; 0x40020000
    772            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_0: (+1)
   \   00000008   0x2110             MOVS     R1,#+16
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD0F9             BEQ.N    ??MIC1TO6_Init_0
    773            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_1: (+1)
   \   00000014   0x2110             MOVS     R1,#+16
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD0F9             BEQ.N    ??MIC1TO6_Init_1
    774            I2S1_Init(); /* I2S1   --> SDO12 */
   \   00000020   0x.... 0x....      LDR.W    R5,??DataTable16_1
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable18_3  ;; 0x40013000
   \   00000028   0x6028             STR      R0,[R5, #+0]
   \   0000002A   0x2020             MOVS     R0,#+32
   \   0000002C   0x60A8             STR      R0,[R5, #+8]
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x60E8             STR      R0,[R5, #+12]
   \   00000032   0xF44F 0x7680      MOV      R6,#+256
   \   00000036   0x6128             STR      R0,[R5, #+16]
   \   00000038   0xF44F 0x577A      MOV      R7,#+16000
   \   0000003C   0x61A8             STR      R0,[R5, #+24]
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x61E8             STR      R0,[R5, #+28]
   \   00000042   0x4628             MOV      R0,R5
   \   00000044   0x606E             STR      R6,[R5, #+4]
   \   00000046   0x616F             STR      R7,[R5, #+20]
   \   00000048   0x.... 0x....      BL       HAL_I2S_Init
   \   0000004C   0x6828             LDR      R0,[R5, #+0]
   \   0000004E   0x6841             LDR      R1,[R0, #+4]
   \   00000050   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000054   0x6041             STR      R1,[R0, #+4]
   \   00000056   0x69C1             LDR      R1,[R0, #+28]
   \   00000058   0xF441 0x6180      ORR      R1,R1,#0x400
   \   0000005C   0x61C1             STR      R1,[R0, #+28]
    775            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_2: (+1)
   \   0000005E   0x2110             MOVS     R1,#+16
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xD0F9             BEQ.N    ??MIC1TO6_Init_2
    776            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_3: (+1)
   \   0000006A   0x2110             MOVS     R1,#+16
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD0F9             BEQ.N    ??MIC1TO6_Init_3
    777            I2S2_Init(); /* I2S2   --> SDO34 */
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable18_4  ;; 0x40003800
   \   0000007A   0x646E             STR      R6,[R5, #+68]
   \   0000007C   0x6428             STR      R0,[R5, #+64]
   \   0000007E   0x2020             MOVS     R0,#+32
   \   00000080   0x64A8             STR      R0,[R5, #+72]
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x64E8             STR      R0,[R5, #+76]
   \   00000086   0x6528             STR      R0,[R5, #+80]
   \   00000088   0x65A8             STR      R0,[R5, #+88]
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0x65E8             STR      R0,[R5, #+92]
   \   0000008E   0xF105 0x0040      ADD      R0,R5,#+64
   \   00000092   0x656F             STR      R7,[R5, #+84]
   \   00000094   0x.... 0x....      BL       HAL_I2S_Init
   \   00000098   0x6C28             LDR      R0,[R5, #+64]
   \   0000009A   0x6841             LDR      R1,[R0, #+4]
   \   0000009C   0xF041 0x0140      ORR      R1,R1,#0x40
   \   000000A0   0x6041             STR      R1,[R0, #+4]
   \   000000A2   0x69C1             LDR      R1,[R0, #+28]
   \   000000A4   0xF441 0x6180      ORR      R1,R1,#0x400
   \   000000A8   0x61C1             STR      R1,[R0, #+28]
    778            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_4: (+1)
   \   000000AA   0x2110             MOVS     R1,#+16
   \   000000AC   0x4620             MOV      R0,R4
   \   000000AE   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   000000B2   0x2801             CMP      R0,#+1
   \   000000B4   0xD0F9             BEQ.N    ??MIC1TO6_Init_4
    779            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_5: (+1)
   \   000000B6   0x2110             MOVS     R1,#+16
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD0F9             BEQ.N    ??MIC1TO6_Init_5
    780            SPI4_Init(); /* SPI4   --> SDO56 */
   \   000000C2   0x.... 0x....      BL       SPI4_Init
    781          
    782            SPI5_Init();
   \   000000C6   0x.... 0x....      BL       SPI5_Init
    783            SPI6_Init();
   \   000000CA   0xB001             ADD      SP,SP,#+4
   \   000000CC   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   000000D0   0x....             B.N      SPI6_Init
    784          
    785            //StartRecMic7_8();
    786          }
    787          

   \                                 In section .text, align 2, keep-with-next
    788          void StartRecMic7_8 (void)
    789          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    790          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_9
   \   00000006   0xF44F 0x5280      MOV      R2,#+4096
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable18_5
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    791          #if (USB_STREAMING)
    792          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
   \   00000014   0x2240             MOVS     R2,#+64
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable18_6
   \   0000001A   0xF104 0x0064      ADD      R0,R4,#+100
   \   0000001E   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    793          #else
    794          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
    795          #endif
    796          	  swtSDO7 = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF884 0x0130      STRB     R0,[R4, #+304]
    797          	  swtSDO8 = 0;
   \   00000028   0xF884 0x0131      STRB     R0,[R4, #+305]
    798          
    799          }
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    800          
    801          /* I2S1 init function */
    802          /* Read data of MIC12 */
    803          static void I2S1_Init(void)
    804          {
    805          #if 1
    806            hi2s1.Instance = SPI1;
    807            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
    808            hi2s1.Init.Standard = I2S_STANDARD_LSB;
    809            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    810            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    811            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    812            hi2s1.Init.CPOL = I2S_CPOL_LOW;
    813            hi2s1.Init.ClockSource = I2S_CLOCK_EXTERNAL;
    814            HAL_I2S_Init(&hi2s1);
    815          
    816               /* Enable TXE and ERR interrupt */
    817           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
    818           
    819           __HAL_I2S_ENABLE(&hi2s1);
    820          #else
    821          	hspi1.Instance = SPI1;
    822          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    823          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    824          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    825          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    826          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    827          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    828          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    829          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    830          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    831          	hspi1.Init.CRCPolynomial = 7;
    832          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    833          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    834          	//hspi4.RxISR = SPI5_CallBack;
    835          	HAL_SPI_Init(&hspi1);
    836          
    837          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    838            /* Enable TXE, RXNE and ERR interrupt */
    839           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    840          
    841           __HAL_SPI_ENABLE(&hspi1);
    842          
    843          #endif
    844          }
    845          
    846          /* I2S2 init function */
    847          /* Read data of MIC34 */
    848          
    849          static void I2S2_Init(void)
    850          {
    851          
    852          #if 1
    853           //HAL_I2S_DeInit(&hi2s2);
    854           hi2s2.Instance = SPI2;
    855           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
    856           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
    857           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
    858           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    859           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    860           hi2s2.Init.CPOL = I2S_CPOL_LOW;
    861           hi2s2.Init.ClockSource = I2S_CLOCK_EXTERNAL;
    862          
    863           HAL_I2S_Init(&hi2s2);
    864            /* Enable TXE and ERR interrupt */
    865          __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
    866          __HAL_I2S_ENABLE(&hi2s2);
    867          
    868          #else
    869             hspi2.Instance = SPI2;
    870             hspi2.Init.Mode = SPI_MODE_SLAVE;
    871             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    872             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
    873             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
    874             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
    875             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    876             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
    877             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
    878             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    879             hspi2.Init.CRCPolynomial = 7;
    880             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    881             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    882             HAL_SPI_Init(&hspi2);
    883          
    884          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    885           /* Enable TXE, RXNE and ERR interrupt */
    886          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
    887          
    888          __HAL_SPI_ENABLE(&hspi2);
    889          
    890          #endif
    891          
    892          
    893          }
    894          
    895          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    896          void SPI4_Init(void)
    897          {
   \                     SPI4_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    898          
    899            hspi4.Instance = SPI4;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_4
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18_7  ;; 0x40013400
   \   0000000A   0x6020             STR      R0,[R4, #+0]
    900            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6060             STR      R0,[R4, #+4]
    901            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000010   0xF44F 0x6080      MOV      R0,#+1024
   \   00000014   0x60A0             STR      R0,[R4, #+8]
    902            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000016   0xF44F 0x6070      MOV      R0,#+3840
   \   0000001A   0x60E0             STR      R0,[R4, #+12]
    903            hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x6120             STR      R0,[R4, #+16]
    904            hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6160             STR      R0,[R4, #+20]
    905            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000024   0xF44F 0x7000      MOV      R0,#+512
   \   00000028   0x61A0             STR      R0,[R4, #+24]
    906            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x6220             STR      R0,[R4, #+32]
    907            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0x6260             STR      R0,[R4, #+36]
    908            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000030   0x62A0             STR      R0,[R4, #+40]
    909            hspi4.Init.CRCPolynomial = 7;
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0x62E0             STR      R0,[R4, #+44]
    910            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x6320             STR      R0,[R4, #+48]
    911            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000003A   0x6360             STR      R0,[R4, #+52]
    912            HAL_SPI_Init(&hspi4);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       HAL_SPI_Init
    913          
    914            /* Enable TXE, RXNE and ERR interrupt */
    915           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x6841             LDR      R1,[R0, #+4]
   \   00000046   0xF041 0x0160      ORR      R1,R1,#0x60
   \   0000004A   0x6041             STR      R1,[R0, #+4]
    916          
    917           __HAL_SPI_ENABLE(&hspi4);
   \   0000004C   0x6801             LDR      R1,[R0, #+0]
   \   0000004E   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000052   0x6001             STR      R1,[R0, #+0]
    918          }
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
    919          
    920          

   \                                 In section .text, align 2, keep-with-next
    921          void Mic7Rec(void)
    922          {
    923              SPI5_Init();
   \                     Mic7Rec: (+1)
   \   00000000   0x....             B.N      SPI5_Init
    924          }
    925          

   \                                 In section .text, align 2, keep-with-next
    926          void Mic8Rec(void)
    927          {
    928              SPI6_Init();
   \                     Mic8Rec: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_9
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable18_8  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   \   0000001E   0x6781             STR      R1,[R0, #+120]
   \   00000020   0xF44F 0x7100      MOV      R1,#+512
   \   00000024   0x67C1             STR      R1,[R0, #+124]
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0xF8C0 0x1084      STR      R1,[R0, #+132]
   \   0000002C   0xF8C0 0x1088      STR      R1,[R0, #+136]
   \   00000030   0xF8C0 0x108C      STR      R1,[R0, #+140]
   \   00000034   0x2107             MOVS     R1,#+7
   \   00000036   0xF8C0 0x1090      STR      R1,[R0, #+144]
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xF8C0 0x1094      STR      R1,[R0, #+148]
   \   00000040   0xF8C0 0x1098      STR      R1,[R0, #+152]
   \   00000044   0x3064             ADDS     R0,R0,#+100
   \   00000046   0x.... 0x....      B.W      HAL_SPI_Init
    929          }
    930          
    931          
    932          /* SPI5 init function */

   \                                 In section .text, align 4, keep-with-next
    933          void SPI5_Init(void)
    934          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    935          	
    936              /* Enable CRC module */
    937              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40023830
    938          	for (char i=0; i< 2; i++)
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable17_9
   \   0000000C   0x2602             MOVS     R6,#+2
   \   0000000E   0xED2D 0x8B02      VPUSH    {D8}
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xF104 0x05C8      ADD      R5,R4,#+200
   \   00000018   0xF44F 0x577A      MOV      R7,#+16000
   \   0000001C   0xEEB2 0x8A04      VMOV.F32 S16,#10.0
   \   00000020   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000024   0xEDDF 0x....      VLDR.W   S17,??DataTable12  ;; 0x45fa0000
   \   00000028   0xF8C0 0x1000      STR.W    R1,[R0, #+0]
    939          	{
    940          		/* Filter LP & HP Init */
    941          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \                     ??SPI5_Init_0: (+1)
   \   0000002C   0xEDC5 0x8A01      VSTR     S17,[R5, #+4]
    942          		Filter[i].HP_HZ = 10;
    943          		Filter[i].Fs = 16000;    //sop1hc: 16000
    944          		Filter[i].Out_MicChannels = 1;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xED85 0x8A02      VSTR     S16,[R5, #+8]
   \   00000036   0x802F             STRH     R7,[R5, #+0]
   \   00000038   0x81E8             STRH     R0,[R5, #+14]
    945          		Filter[i].In_MicChannels = 1;
   \   0000003A   0x81A8             STRH     R0,[R5, #+12]
    946          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   0000003C   0x4628             MOV      R0,R5
   \   0000003E   0x.... 0x....      BL       PDM_Filter_Init
    947          	}
   \   00000042   0x3534             ADDS     R5,R5,#+52
   \   00000044   0x1E76             SUBS     R6,R6,#+1
   \   00000046   0xD1F1             BNE.N    ??SPI5_Init_0
    948          
    949          
    950            hspi5.Instance = SPI5;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable18_9  ;; 0x40015000
   \   0000004C   0x6020             STR      R0,[R4, #+0]
    951            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x6060             STR      R0,[R4, #+4]
    952            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000052   0xF44F 0x6080      MOV      R0,#+1024
   \   00000056   0x60A0             STR      R0,[R4, #+8]
    953            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000058   0xF44F 0x6070      MOV      R0,#+3840
   \   0000005C   0x60E0             STR      R0,[R4, #+12]
    954            hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x6120             STR      R0,[R4, #+16]
    955            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000062   0x6160             STR      R0,[R4, #+20]
    956            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000064   0xF44F 0x7000      MOV      R0,#+512
   \   00000068   0x61A0             STR      R0,[R4, #+24]
    957            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x6220             STR      R0,[R4, #+32]
    958            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000006E   0x6260             STR      R0,[R4, #+36]
    959            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000070   0x62A0             STR      R0,[R4, #+40]
    960            hspi5.Init.CRCPolynomial = 7;
   \   00000072   0x2007             MOVS     R0,#+7
   \   00000074   0x62E0             STR      R0,[R4, #+44]
    961            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x6320             STR      R0,[R4, #+48]
    962            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000007A   0x6360             STR      R0,[R4, #+52]
    963            //hspi5.RxISR = SPI5_CallBack;
    964            HAL_SPI_Init(&hspi5);
   \   0000007C   0x4620             MOV      R0,R4
   \   0000007E   0xECBD 0x8B02      VPOP     {D8}
   \   00000082   0xB001             ADD      SP,SP,#+4
   \   00000084   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   00000088   0x.... 0x....      B.W      HAL_SPI_Init
    965          
    966          
    967            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    968            /* Enable TXE, RXNE and ERR interrupt */
    969           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
    970          
    971           //__HAL_SPI_ENABLE(&hspi5);
    972          
    973          }
    974          

   \                                 In section .text, align 2, keep-with-next
    975          void SPI6_Init(void)
    976          {
    977          	
    978            hspi6.Instance = SPI6;
   \                     SPI6_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_9
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable18_8  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
    979            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
    980            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
    981            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
    982            hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6741             STR      R1,[R0, #+116]
    983            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001E   0x6781             STR      R1,[R0, #+120]
    984            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000020   0xF44F 0x7100      MOV      R1,#+512
   \   00000024   0x67C1             STR      R1,[R0, #+124]
    985            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0xF8C0 0x1084      STR      R1,[R0, #+132]
    986            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002C   0xF8C0 0x1088      STR      R1,[R0, #+136]
    987            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000030   0xF8C0 0x108C      STR      R1,[R0, #+140]
    988            hspi6.Init.CRCPolynomial = 7;
   \   00000034   0x2107             MOVS     R1,#+7
   \   00000036   0xF8C0 0x1090      STR      R1,[R0, #+144]
    989            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xF8C0 0x1094      STR      R1,[R0, #+148]
    990            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000040   0xF8C0 0x1098      STR      R1,[R0, #+152]
    991            //hspi6.RxISR = SPI6_CallBack;
    992            HAL_SPI_Init(&hspi6);
   \   00000044   0x3064             ADDS     R0,R0,#+100
   \   00000046   0x.... 0x....      B.W      HAL_SPI_Init
    993          
    994          
    995            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    996            /* Enable TXE, RXNE and ERR interrupt */
    997           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
    998          
    999           //__HAL_SPI_ENABLE(&hspi6);
   1000          
   1001          }
   1002          
   1003          
   1004          
   1005          

   \                                 In section .text, align 2, keep-with-next
   1006          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
   1007          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
   1008          
   1009            GPIO_InitTypeDef GPIO_InitStruct;
   1010            if (hspi->Instance==SPI1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable18_3  ;; 0x40013000
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD131             BNE.N    ??HAL_SPI_MspInit_0
   1011            {
   1012          	  /* USER CODE BEGIN SPI1_MspInit 0 */
   1013          	  
   1014          	  /* USER CODE END SPI1_MspInit 0 */
   1015          	  /* Peripheral clock enable */
   1016          	  __SPI1_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable13  ;; 0x40023830
   1017          	  __GPIOA_CLK_ENABLE();
   1018          	  __GPIOC_CLK_ENABLE();
   1019          	  
   1020          	  /**I2S1 GPIO Configuration	
   1021          		PA4 	------> I2S1_WS --> LRCKO
   1022          		PA5 	------> I2S1_CK --> BICKO
   1023          		PA7 	------> I2S1_SD --> SDO12
   1024          		PC4 	------> I2S1_MCK
   1025          		*/
   1026          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
   1027          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1028          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1029          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1030          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1031          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000014   0xA901             ADD      R1,SP,#+4
   \   00000016   0x6968             LDR      R0,[R5, #+20]
   \   00000018   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   0000001C   0x6168             STR      R0,[R5, #+20]
   \   0000001E   0x6968             LDR      R0,[R5, #+20]
   \   00000020   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x6828             LDR      R0,[R5, #+0]
   \   0000002A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000002E   0x6028             STR      R0,[R5, #+0]
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x6828             LDR      R0,[R5, #+0]
   \   0000003C   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000040   0x6028             STR      R0,[R5, #+0]
   \   00000042   0x6828             LDR      R0,[R5, #+0]
   \   00000044   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   \   0000004C   0x20F0             MOVS     R0,#+240
   \   0000004E   0x9001             STR      R0,[SP, #+4]
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x9002             STR      R0,[SP, #+8]
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x9003             STR      R0,[SP, #+12]
   \   00000058   0x2003             MOVS     R0,#+3
   \   0000005A   0x9004             STR      R0,[SP, #+16]
   \   0000005C   0x2005             MOVS     R0,#+5
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40020000
   \   00000062   0x.... 0x....      BL       HAL_GPIO_Init
   1032          	  
   1033          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
   1034          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1035          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
   1036          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1037          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1038          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1039          		
   1040          	  /* Peripheral interrupt init*/
   1041          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x2023             MOVS     R0,#+35
   \   0000006C   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1042          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000070   0x2023             MOVS     R0,#+35
   \   00000072   0xE1CB             B.N      ??HAL_SPI_MspInit_1
   1043          	  /* USER CODE BEGIN SPI1_MspInit 1 */
   1044          	  
   1045          	  /* USER CODE END SPI1_MspInit 1 */
   1046          
   1047            }
   1048            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable18_4  ;; 0x40003800
   \   00000078   0x4288             CMP      R0,R1
   \   0000007A   0xD149             BNE.N    ??HAL_SPI_MspInit_2
   1049            {
   1050          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1051          	  
   1052          	  /* USER CODE END SPI2_MspInit 0 */
   1053          		/* Peripheral clock enable */
   1054          		__SPI2_CLK_ENABLE();
   \   0000007C   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   1055          		__GPIOI_CLK_ENABLE();
   1056          		__GPIOB_CLK_ENABLE();
   1057          		__GPIOC_CLK_ENABLE();
   1058          	  
   1059          		/**I2S2 GPIO Configuration	   
   1060          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1061          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1062          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1063          	  
   1064          	  
   1065          		*/
   1066          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   1067          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1068          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1069          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1070          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1071          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   0000007E   0xA901             ADD      R1,SP,#+4
   \   00000080   0x6928             LDR      R0,[R5, #+16]
   \   00000082   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   00000086   0x6128             STR      R0,[R5, #+16]
   \   00000088   0x6928             LDR      R0,[R5, #+16]
   \   0000008A   0xF400 0x4080      AND      R0,R0,#0x4000
   \   0000008E   0x9000             STR      R0,[SP, #+0]
   \   00000090   0x9800             LDR      R0,[SP, #+0]
   \   00000092   0x6828             LDR      R0,[R5, #+0]
   \   00000094   0xF440 0x7080      ORR      R0,R0,#0x100
   \   00000098   0x6028             STR      R0,[R5, #+0]
   \   0000009A   0x6828             LDR      R0,[R5, #+0]
   \   0000009C   0xF400 0x7080      AND      R0,R0,#0x100
   \   000000A0   0x9000             STR      R0,[SP, #+0]
   \   000000A2   0x9800             LDR      R0,[SP, #+0]
   \   000000A4   0x6828             LDR      R0,[R5, #+0]
   \   000000A6   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000AA   0x6028             STR      R0,[R5, #+0]
   \   000000AC   0x6828             LDR      R0,[R5, #+0]
   \   000000AE   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000B2   0x9000             STR      R0,[SP, #+0]
   \   000000B4   0x9800             LDR      R0,[SP, #+0]
   \   000000B6   0x6828             LDR      R0,[R5, #+0]
   \   000000B8   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000BC   0x6028             STR      R0,[R5, #+0]
   \   000000BE   0x6828             LDR      R0,[R5, #+0]
   \   000000C0   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000C4   0x9000             STR      R0,[SP, #+0]
   \   000000C6   0x9800             LDR      R0,[SP, #+0]
   \   000000C8   0x2002             MOVS     R0,#+2
   \   000000CA   0x9001             STR      R0,[SP, #+4]
   \   000000CC   0x9002             STR      R0,[SP, #+8]
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x9003             STR      R0,[SP, #+12]
   \   000000D2   0x2003             MOVS     R0,#+3
   \   000000D4   0x9004             STR      R0,[SP, #+16]
   \   000000D6   0x2005             MOVS     R0,#+5
   \   000000D8   0x9005             STR      R0,[SP, #+20]
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable18_10  ;; 0x40020800
   \   000000DE   0x.... 0x....      BL       HAL_GPIO_Init
   1072          	  
   1073          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   000000E2   0xF44F 0x5040      MOV      R0,#+12288
   1074          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1075          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1076          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1077          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1078          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   000000E6   0xA901             ADD      R1,SP,#+4
   \   000000E8   0x9001             STR      R0,[SP, #+4]
   \   000000EA   0x2002             MOVS     R0,#+2
   \   000000EC   0x9002             STR      R0,[SP, #+8]
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x9003             STR      R0,[SP, #+12]
   \   000000F2   0x2003             MOVS     R0,#+3
   \   000000F4   0x9004             STR      R0,[SP, #+16]
   \   000000F6   0x2005             MOVS     R0,#+5
   \   000000F8   0x9005             STR      R0,[SP, #+20]
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable18_11  ;; 0x40020400
   \   000000FE   0x.... 0x....      BL       HAL_GPIO_Init
   1079          	  
   1080          	  
   1081          		/* Peripheral interrupt init*/
   1082          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   00000102   0x2200             MOVS     R2,#+0
   \   00000104   0x2101             MOVS     R1,#+1
   \   00000106   0x2024             MOVS     R0,#+36
   \   00000108   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1083          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   0000010C   0x2024             MOVS     R0,#+36
   \   0000010E   0xE17D             B.N      ??HAL_SPI_MspInit_1
   1084          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1085          	  
   1086          	  /* USER CODE END SPI2_MspInit 1 */
   1087          
   1088          
   1089            }
   1090            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable18_12  ;; 0x40003c00
   \   00000114   0x4288             CMP      R0,R1
   \   00000116   0xF040 0x808E      BNE.W    ??HAL_SPI_MspInit_3
   1091            {
   1092          	  
   1093              /**I2S3 GPIO Configuration    
   1094                 PB2     ------> I2S3_SD
   1095                 PA15     ------> I2S3_WS (LRCK)
   1096                 PB3     ------> I2S3_CK 
   1097          	   PC7    ------> MCLK
   1098              */
   1099           
   1100            /* USER CODE BEGIN SPI3_MspInit 1 */
   1101            __SPI3_CLK_ENABLE();
   \   0000011A   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   1102            __GPIOA_CLK_ENABLE();
   1103            __GPIOB_CLK_ENABLE();
   1104          
   1105            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   1106            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1107            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1108            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1109            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1110            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   0000011C   0xA901             ADD      R1,SP,#+4
   \   0000011E   0x6928             LDR      R0,[R5, #+16]
   \   00000120   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   00000124   0x6128             STR      R0,[R5, #+16]
   \   00000126   0x6928             LDR      R0,[R5, #+16]
   \   00000128   0xF400 0x4000      AND      R0,R0,#0x8000
   \   0000012C   0x9000             STR      R0,[SP, #+0]
   \   0000012E   0x9800             LDR      R0,[SP, #+0]
   \   00000130   0x6828             LDR      R0,[R5, #+0]
   \   00000132   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000136   0x6028             STR      R0,[R5, #+0]
   \   00000138   0x6828             LDR      R0,[R5, #+0]
   \   0000013A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000013E   0x9000             STR      R0,[SP, #+0]
   \   00000140   0x9800             LDR      R0,[SP, #+0]
   \   00000142   0x6828             LDR      R0,[R5, #+0]
   \   00000144   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000148   0x6028             STR      R0,[R5, #+0]
   \   0000014A   0x6828             LDR      R0,[R5, #+0]
   \   0000014C   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000150   0x9000             STR      R0,[SP, #+0]
   \   00000152   0x9800             LDR      R0,[SP, #+0]
   \   00000154   0x200C             MOVS     R0,#+12
   \   00000156   0x9001             STR      R0,[SP, #+4]
   \   00000158   0x2002             MOVS     R0,#+2
   \   0000015A   0x9002             STR      R0,[SP, #+8]
   \   0000015C   0x2003             MOVS     R0,#+3
   \   0000015E   0x9004             STR      R0,[SP, #+16]
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0x9003             STR      R0,[SP, #+12]
   \   00000164   0x2006             MOVS     R0,#+6
   \   00000166   0x9005             STR      R0,[SP, #+20]
   \   00000168   0x.... 0x....      LDR.W    R0,??DataTable18_11  ;; 0x40020400
   \   0000016C   0x.... 0x....      BL       HAL_GPIO_Init
   1111          
   1112          
   1113            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   00000170   0xF44F 0x4000      MOV      R0,#+32768
   1114            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1115            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1116            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000174   0xA901             ADD      R1,SP,#+4
   \   00000176   0x9001             STR      R0,[SP, #+4]
   \   00000178   0x2002             MOVS     R0,#+2
   \   0000017A   0x9002             STR      R0,[SP, #+8]
   \   0000017C   0x2006             MOVS     R0,#+6
   \   0000017E   0x9005             STR      R0,[SP, #+20]
   \   00000180   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40020000
   \   00000182   0x.... 0x....      BL       HAL_GPIO_Init
   1117          
   1118          #ifdef CODEC_MCLK_ENABLED
   1119            __GPIOC_CLK_ENABLE();
   \   00000186   0x6828             LDR      R0,[R5, #+0]
   1120            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   1121            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1122            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1123            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1124            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1125            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000188   0xA901             ADD      R1,SP,#+4
   \   0000018A   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000018E   0x6028             STR      R0,[R5, #+0]
   \   00000190   0x6828             LDR      R0,[R5, #+0]
   \   00000192   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000196   0x9000             STR      R0,[SP, #+0]
   \   00000198   0x9800             LDR      R0,[SP, #+0]
   \   0000019A   0x2080             MOVS     R0,#+128
   \   0000019C   0x9001             STR      R0,[SP, #+4]
   \   0000019E   0x2002             MOVS     R0,#+2
   \   000001A0   0x9002             STR      R0,[SP, #+8]
   \   000001A2   0x2003             MOVS     R0,#+3
   \   000001A4   0x9004             STR      R0,[SP, #+16]
   \   000001A6   0x2000             MOVS     R0,#+0
   \   000001A8   0x9003             STR      R0,[SP, #+12]
   \   000001AA   0x2006             MOVS     R0,#+6
   \   000001AC   0x9005             STR      R0,[SP, #+20]
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable18_10  ;; 0x40020800
   \   000001B2   0x.... 0x....      BL       HAL_GPIO_Init
   1126          
   1127          #endif /* CODEC_MCLK_ENABLED */ 
   1128          
   1129          #ifdef I2S_INTERRUPT   
   1130               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1131               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1132               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1133          
   1134               /* Enable the I2S DMA request */
   1135               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1136               //__HAL_I2S_ENABLE(&hi2s3);
   1137            	    /* Peripheral interrupt init*/
   1138          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1139          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1140          #endif
   1141          
   1142                /* Enable the DMA clock */ 
   1143          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   000001B6   0x6828             LDR      R0,[R5, #+0]
   \   000001B8   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000001BC   0x6028             STR      R0,[R5, #+0]
   \   000001BE   0x6828             LDR      R0,[R5, #+0]
   1144          
   1145                /* Configure the DMA Stream */
   1146                //HAL_DMA_DeInit(&DmaHandle);
   1147          
   1148                /* Set the parameters to be configured */ 
   1149          	  DmaHandle.Instance = DMA1_Stream7;
   \   000001C0   0x.... 0x....      LDR.W    R5,??DataTable18_13
   \   000001C4   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000001C8   0x9000             STR      R0,[SP, #+0]
   \   000001CA   0x9800             LDR      R0,[SP, #+0]
   \   000001CC   0x.... 0x....      LDR.W    R0,??DataTable18_14  ;; 0x400260b8
   \   000001D0   0x6028             STR      R0,[R5, #+0]
   1150                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   000001D2   0x2000             MOVS     R0,#+0
   \   000001D4   0x6068             STR      R0,[R5, #+4]
   1151          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   000001D6   0x2040             MOVS     R0,#+64
   \   000001D8   0x60A8             STR      R0,[R5, #+8]
   1152          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x60E8             STR      R0,[R5, #+12]
   1153          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   000001DE   0xF44F 0x6080      MOV      R0,#+1024
   \   000001E2   0x6128             STR      R0,[R5, #+16]
   1154          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   000001E4   0xF44F 0x6000      MOV      R0,#+2048
   \   000001E8   0x6168             STR      R0,[R5, #+20]
   1155                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   000001EA   0xF44F 0x5000      MOV      R0,#+8192
   \   000001EE   0x61A8             STR      R0,[R5, #+24]
   1156          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   000001F0   0x2000             MOVS     R0,#+0
   \   000001F2   0x61E8             STR      R0,[R5, #+28]
   1157                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   000001F4   0xF44F 0x3000      MOV      R0,#+131072
   \   000001F8   0x6228             STR      R0,[R5, #+32]
   1158          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   000001FA   0x2004             MOVS     R0,#+4
   \   000001FC   0x6268             STR      R0,[R5, #+36]
   1159                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   000001FE   0x2003             MOVS     R0,#+3
   \   00000200   0x62A8             STR      R0,[R5, #+40]
   1160                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   00000202   0x2000             MOVS     R0,#+0
   \   00000204   0x62E8             STR      R0,[R5, #+44]
   1161                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   00000206   0x6328             STR      R0,[R5, #+48]
   1162                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1163                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1164                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1165                //DmaHandle.XferCpltCallback = &TC_Callback;
   1166           
   1167          
   1168                /* Associate the initialized DMA handle to the the SPI handle */
   1169                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   1170                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1171          
   1172          	   /* Deinitialize the Stream for new transfer */
   1173                 HAL_DMA_DeInit(&DmaHandle);
   \   00000208   0x4628             MOV      R0,R5
   \   0000020A   0x6565             STR      R5,[R4, #+84]
   \   0000020C   0x63AC             STR      R4,[R5, #+56]
   \   0000020E   0x.... 0x....      BL       HAL_DMA_DeInit
   1174                 /* Configure the DMA Stream */
   1175          	   HAL_DMA_Init(&DmaHandle);
   \   00000212   0x4628             MOV      R0,R5
   \   00000214   0x.... 0x....      BL       HAL_DMA_Init
   1176          
   1177                /* Set Interrupt Group Priority */
   1178                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   00000218   0x2200             MOVS     R2,#+0
   \   0000021A   0x2105             MOVS     R1,#+5
   \   0000021C   0x202F             MOVS     R0,#+47
   \   0000021E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1179                /* Enable the DMA STREAM global Interrupt */
   1180                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   00000222   0x202F             MOVS     R0,#+47
   \   00000224   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1181          
   1182          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000228   0x6828             LDR      R0,[R5, #+0]
   \   0000022A   0x6801             LDR      R1,[R0, #+0]
   \   0000022C   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000230   0x6001             STR      R1,[R0, #+0]
   1183          	    
   1184            }
   1185            else if(hspi->Instance==SPI4)
   1186            {
   1187            /* USER CODE BEGIN SPI4_MspInit 0 */
   1188          
   1189            /* USER CODE END SPI4_MspInit 0 */
   1190              /* Peripheral clock enable */
   1191              __SPI4_CLK_ENABLE();
   1192              __HAL_RCC_GPIOE_CLK_ENABLE();
   1193            
   1194            
   1195              /**SPI4 GPIO Configuration    
   1196              PE2     ------> SPI4_SCK
   1197              PE4     ------> SPI4_NSS
   1198              PE5     ------> SPI4_MISO
   1199              PE6     ------> SPI4_MOSI 
   1200              */
   1201              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   1202              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1203              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1204              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1205              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   1206              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   1207          
   1208          	/* Peripheral interrupt init*/
   1209              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   1210              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   1211          
   1212            /* USER CODE BEGIN SPI4_MspInit 1 */
   1213          
   1214            /* USER CODE END SPI4_MspInit 1 */
   1215            }
   1216            else if(hspi->Instance==SPI5)
   1217            {
   1218            /* USER CODE BEGIN SPI5_MspInit 0 */
   1219          
   1220            /* USER CODE END SPI5_MspInit 0 */
   1221              /* Peripheral clock enable */
   1222              __HAL_RCC_SPI5_CLK_ENABLE();
   1223              __HAL_RCC_GPIOF_CLK_ENABLE();
   1224            
   1225              /**SPI5 GPIO Configuration    
   1226              PF7     ------> SPI5_SCK  --> PF7
   1227              PF11     ------> SPI5_MOSI --> PF9
   1228                               SPI5_MISO --> PF8
   1229                                    NSS   -->  PF6
   1230              */
   1231              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   1232              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   1233              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1234              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1235              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   1236              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   1237          
   1238          #if 0
   1239            /* Peripheral interrupt init*/
   1240              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1241              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1242          
   1243          #else
   1244          	/* Peripheral DMA init*/
   1245              __HAL_RCC_DMA2_CLK_ENABLE();
   1246          	hdma_spi5_rx.Instance = DMA2_Stream5;
   1247          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   1248          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1249          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1250          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   1251          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1252          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   1253          	hdma_spi5_rx.Init.Mode = DMA_NORMAL;
   1254          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1255          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1256          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1257          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   1258          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   1259          	HAL_DMA_Init(&hdma_spi5_rx);
   1260          
   1261              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   1262          
   1263          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1264          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   1265          
   1266          #endif
   1267            /* USER CODE END SPI5_MspInit 1 */
   1268            }
   1269            else if(hspi->Instance==SPI6)
   1270            {
   1271            /* USER CODE BEGIN SPI6_MspInit 0 */
   1272          
   1273            /* USER CODE END SPI6_MspInit 0 */
   1274              /* Peripheral clock enable */
   1275              __SPI6_CLK_ENABLE();
   1276              __HAL_RCC_GPIOG_CLK_ENABLE();
   1277            
   1278              /**SPI6 GPIO Configuration    
   1279              PG13     ------> SPI6_SCK
   1280              PG14     ------> SPI6_MOSI 
   1281              */
   1282              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   1283              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1284              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1285              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1286              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   1287              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   1288          
   1289          #if 0
   1290          	  /* Peripheral interrupt init*/
   1291              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1292              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1293          #else
   1294          	/* Peripheral DMA init*/
   1295          	__HAL_RCC_DMA2_CLK_ENABLE();
   1296          	hdma_spi6_rx.Instance = DMA2_Stream6;
   1297          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   1298          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1299          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1300          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   1301          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1302          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1303          	hdma_spi6_rx.Init.Mode = DMA_NORMAL;
   1304          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1305          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1306          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1307          	hdma_spi6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   1308          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   1309          	HAL_DMA_Init(&hdma_spi6_rx);
   1310          
   1311          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   1312          
   1313          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1314          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   1315          
   1316          #endif
   1317            }
   1318          
   1319          }
   \   00000232   0xB007             ADD      SP,SP,#+28
   \   00000234   0xBD30             POP      {R4,R5,PC}
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   00000236   0x.... 0x....      LDR.W    R1,??DataTable18_7  ;; 0x40013400
   \   0000023A   0x4288             CMP      R0,R1
   \   0000023C   0xD128             BNE.N    ??HAL_SPI_MspInit_4
   \   0000023E   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   00000240   0xA901             ADD      R1,SP,#+4
   \   00000242   0x6968             LDR      R0,[R5, #+20]
   \   00000244   0xF440 0x5000      ORR      R0,R0,#0x2000
   \   00000248   0x6168             STR      R0,[R5, #+20]
   \   0000024A   0x6968             LDR      R0,[R5, #+20]
   \   0000024C   0xF400 0x5000      AND      R0,R0,#0x2000
   \   00000250   0x9000             STR      R0,[SP, #+0]
   \   00000252   0x9800             LDR      R0,[SP, #+0]
   \   00000254   0x6828             LDR      R0,[R5, #+0]
   \   00000256   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000025A   0x6028             STR      R0,[R5, #+0]
   \   0000025C   0x6828             LDR      R0,[R5, #+0]
   \   0000025E   0xF000 0x0010      AND      R0,R0,#0x10
   \   00000262   0x9000             STR      R0,[SP, #+0]
   \   00000264   0x9800             LDR      R0,[SP, #+0]
   \   00000266   0x2074             MOVS     R0,#+116
   \   00000268   0x9001             STR      R0,[SP, #+4]
   \   0000026A   0x2002             MOVS     R0,#+2
   \   0000026C   0x9002             STR      R0,[SP, #+8]
   \   0000026E   0x2000             MOVS     R0,#+0
   \   00000270   0x9003             STR      R0,[SP, #+12]
   \   00000272   0x2003             MOVS     R0,#+3
   \   00000274   0x9004             STR      R0,[SP, #+16]
   \   00000276   0x2005             MOVS     R0,#+5
   \   00000278   0x9005             STR      R0,[SP, #+20]
   \   0000027A   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40021000
   \   0000027E   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000282   0x2200             MOVS     R2,#+0
   \   00000284   0x2102             MOVS     R1,#+2
   \   00000286   0x2054             MOVS     R0,#+84
   \   00000288   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   0000028C   0x2054             MOVS     R0,#+84
   \   0000028E   0xE0BD             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   00000290   0x.... 0x....      LDR.W    R1,??DataTable18_9  ;; 0x40015000
   \   00000294   0x4288             CMP      R0,R1
   \   00000296   0xD159             BNE.N    ??HAL_SPI_MspInit_5
   \   00000298   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   0000029A   0xA901             ADD      R1,SP,#+4
   \   0000029C   0x6968             LDR      R0,[R5, #+20]
   \   0000029E   0xF440 0x1080      ORR      R0,R0,#0x100000
   \   000002A2   0x6168             STR      R0,[R5, #+20]
   \   000002A4   0x6968             LDR      R0,[R5, #+20]
   \   000002A6   0xF400 0x1080      AND      R0,R0,#0x100000
   \   000002AA   0x9000             STR      R0,[SP, #+0]
   \   000002AC   0x9800             LDR      R0,[SP, #+0]
   \   000002AE   0x6828             LDR      R0,[R5, #+0]
   \   000002B0   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000002B4   0x6028             STR      R0,[R5, #+0]
   \   000002B6   0x6828             LDR      R0,[R5, #+0]
   \   000002B8   0xF000 0x0020      AND      R0,R0,#0x20
   \   000002BC   0x9000             STR      R0,[SP, #+0]
   \   000002BE   0x9800             LDR      R0,[SP, #+0]
   \   000002C0   0xF44F 0x7070      MOV      R0,#+960
   \   000002C4   0x9001             STR      R0,[SP, #+4]
   \   000002C6   0x2012             MOVS     R0,#+18
   \   000002C8   0x9002             STR      R0,[SP, #+8]
   \   000002CA   0x2001             MOVS     R0,#+1
   \   000002CC   0x9003             STR      R0,[SP, #+12]
   \   000002CE   0x2003             MOVS     R0,#+3
   \   000002D0   0x9004             STR      R0,[SP, #+16]
   \   000002D2   0x2005             MOVS     R0,#+5
   \   000002D4   0x9005             STR      R0,[SP, #+20]
   \   000002D6   0x.... 0x....      LDR.W    R0,??DataTable18_15  ;; 0x40021400
   \   000002DA   0x.... 0x....      BL       HAL_GPIO_Init
   \   000002DE   0x6828             LDR      R0,[R5, #+0]
   \   000002E0   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000002E4   0x6028             STR      R0,[R5, #+0]
   \   000002E6   0x6828             LDR      R0,[R5, #+0]
   \   000002E8   0x.... 0x....      LDR.W    R5,??DataTable18_16
   \   000002EC   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000002F0   0x9000             STR      R0,[SP, #+0]
   \   000002F2   0x9800             LDR      R0,[SP, #+0]
   \   000002F4   0x.... 0x....      LDR.W    R0,??DataTable18_14  ;; 0x400260b8
   \   000002F8   0xF500 0x7074      ADD      R0,R0,#+976
   \   000002FC   0x6028             STR      R0,[R5, #+0]
   \   000002FE   0xF04F 0x6060      MOV      R0,#+234881024
   \   00000302   0x6068             STR      R0,[R5, #+4]
   \   00000304   0x2000             MOVS     R0,#+0
   \   00000306   0x60A8             STR      R0,[R5, #+8]
   \   00000308   0x60E8             STR      R0,[R5, #+12]
   \   0000030A   0xF44F 0x6080      MOV      R0,#+1024
   \   0000030E   0x6128             STR      R0,[R5, #+16]
   \   00000310   0xF44F 0x6000      MOV      R0,#+2048
   \   00000314   0x6168             STR      R0,[R5, #+20]
   \   00000316   0xF44F 0x5000      MOV      R0,#+8192
   \   0000031A   0x61A8             STR      R0,[R5, #+24]
   \   0000031C   0x2000             MOVS     R0,#+0
   \   0000031E   0x61E8             STR      R0,[R5, #+28]
   \   00000320   0xF44F 0x3000      MOV      R0,#+131072
   \   00000324   0x6228             STR      R0,[R5, #+32]
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x6268             STR      R0,[R5, #+36]
   \   0000032A   0x2003             MOVS     R0,#+3
   \   0000032C   0x62A8             STR      R0,[R5, #+40]
   \   0000032E   0x2000             MOVS     R0,#+0
   \   00000330   0x62E8             STR      R0,[R5, #+44]
   \   00000332   0x6328             STR      R0,[R5, #+48]
   \   00000334   0x4628             MOV      R0,R5
   \   00000336   0x.... 0x....      BL       HAL_DMA_Init
   \   0000033A   0x65A5             STR      R5,[R4, #+88]
   \   0000033C   0x2200             MOVS     R2,#+0
   \   0000033E   0x63AC             STR      R4,[R5, #+56]
   \   00000340   0x2104             MOVS     R1,#+4
   \   00000342   0x2044             MOVS     R0,#+68
   \   00000344   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000348   0x2044             MOVS     R0,#+68
   \   0000034A   0xE05F             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   0000034C   0x.... 0x....      LDR.W    R1,??DataTable18_8  ;; 0x40015400
   \   00000350   0x4288             CMP      R0,R1
   \   00000352   0xD15D             BNE.N    ??HAL_SPI_MspInit_6
   \   00000354   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   00000356   0xA901             ADD      R1,SP,#+4
   \   00000358   0x6968             LDR      R0,[R5, #+20]
   \   0000035A   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   0000035E   0x6168             STR      R0,[R5, #+20]
   \   00000360   0x6968             LDR      R0,[R5, #+20]
   \   00000362   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000366   0x9000             STR      R0,[SP, #+0]
   \   00000368   0x9800             LDR      R0,[SP, #+0]
   \   0000036A   0x6828             LDR      R0,[R5, #+0]
   \   0000036C   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000370   0x6028             STR      R0,[R5, #+0]
   \   00000372   0x6828             LDR      R0,[R5, #+0]
   \   00000374   0xF000 0x0040      AND      R0,R0,#0x40
   \   00000378   0x9000             STR      R0,[SP, #+0]
   \   0000037A   0x9800             LDR      R0,[SP, #+0]
   \   0000037C   0xF44F 0x40C0      MOV      R0,#+24576
   \   00000380   0x9001             STR      R0,[SP, #+4]
   \   00000382   0x2002             MOVS     R0,#+2
   \   00000384   0x9002             STR      R0,[SP, #+8]
   \   00000386   0x2000             MOVS     R0,#+0
   \   00000388   0x9003             STR      R0,[SP, #+12]
   \   0000038A   0x2003             MOVS     R0,#+3
   \   0000038C   0x9004             STR      R0,[SP, #+16]
   \   0000038E   0x2005             MOVS     R0,#+5
   \   00000390   0x9005             STR      R0,[SP, #+20]
   \   00000392   0x.... 0x....      LDR.W    R0,??DataTable18_17  ;; 0x40021800
   \   00000396   0x.... 0x....      BL       HAL_GPIO_Init
   \   0000039A   0x6828             LDR      R0,[R5, #+0]
   \   0000039C   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000003A0   0x6028             STR      R0,[R5, #+0]
   \   000003A2   0x6828             LDR      R0,[R5, #+0]
   \   000003A4   0x.... 0x....      LDR.W    R5,??DataTable18_16
   \   000003A8   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000003AC   0x9000             STR      R0,[SP, #+0]
   \   000003AE   0x9800             LDR      R0,[SP, #+0]
   \   000003B0   0x.... 0x....      LDR.W    R0,??DataTable18_14  ;; 0x400260b8
   \   000003B4   0xF500 0x707A      ADD      R0,R0,#+1000
   \   000003B8   0x6528             STR      R0,[R5, #+80]
   \   000003BA   0xF04F 0x7000      MOV      R0,#+33554432
   \   000003BE   0x6568             STR      R0,[R5, #+84]
   \   000003C0   0x2000             MOVS     R0,#+0
   \   000003C2   0x65A8             STR      R0,[R5, #+88]
   \   000003C4   0x65E8             STR      R0,[R5, #+92]
   \   000003C6   0xF44F 0x6080      MOV      R0,#+1024
   \   000003CA   0x6628             STR      R0,[R5, #+96]
   \   000003CC   0xF44F 0x6000      MOV      R0,#+2048
   \   000003D0   0x6668             STR      R0,[R5, #+100]
   \   000003D2   0x66A8             STR      R0,[R5, #+104]
   \   000003D4   0x2000             MOVS     R0,#+0
   \   000003D6   0x66E8             STR      R0,[R5, #+108]
   \   000003D8   0xF44F 0x3000      MOV      R0,#+131072
   \   000003DC   0x6728             STR      R0,[R5, #+112]
   \   000003DE   0x2000             MOVS     R0,#+0
   \   000003E0   0x6768             STR      R0,[R5, #+116]
   \   000003E2   0x2003             MOVS     R0,#+3
   \   000003E4   0x67A8             STR      R0,[R5, #+120]
   \   000003E6   0x2000             MOVS     R0,#+0
   \   000003E8   0x67E8             STR      R0,[R5, #+124]
   \   000003EA   0xF8C5 0x0080      STR      R0,[R5, #+128]
   \   000003EE   0xF105 0x0050      ADD      R0,R5,#+80
   \   000003F2   0x.... 0x....      BL       HAL_DMA_Init
   \   000003F6   0xF105 0x0050      ADD      R0,R5,#+80
   \   000003FA   0x2201             MOVS     R2,#+1
   \   000003FC   0x65A0             STR      R0,[R4, #+88]
   \   000003FE   0x2107             MOVS     R1,#+7
   \   00000400   0xF8C5 0x4088      STR      R4,[R5, #+136]
   \   00000404   0x2045             MOVS     R0,#+69
   \   00000406   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   0000040A   0x2045             MOVS     R0,#+69
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   0000040C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \                     ??HAL_SPI_MspInit_6: (+1)
   \   00000410   0xB007             ADD      SP,SP,#+28
   \   00000412   0xBD30             POP      {R4,R5,PC}       ;; return
   1320          
   1321          
   1322          
   1323          
   1324          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1325          {
   1326            /* Check the parameters */
   1327            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1328            
   1329            /* Write in the DR register the data to be sent */
   1330            SPIx->DR = Data;
   1331          }
   1332          
   1333          
   1334          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1335          {
   1336            /* Check the parameters */
   1337            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1338            
   1339            /* Return the data in the DR register */
   1340            return SPIx->DR;
   1341          }
   1342          
   1343          

   \                                 In section .text, align 2, keep-with-next
   1344          void RecordUpdBuf(void)
   1345          {
   1346          
   1347               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable16_1
   \   00000002   0xF890 0x1080      LDRB     R1,[R0, #+128]
   \   00000006   0x2902             CMP      R1,#+2
   \   00000008   0xD170             BNE.N    ??RecordUpdBuf_0
   1348               {
   1349                  WaveRecord_flgInt=0;
   \   0000000A   0x2100             MOVS     R1,#+0
   1350          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   0000000C   0x....             LDR.N    R2,??DataTable16_2
   \   0000000E   0xF880 0x1080      STRB     R1,[R0, #+128]
   \   00000012   0x8811             LDRH     R1,[R2, #+0]
   \   00000014   0xF5B1 0x6F80      CMP      R1,#+1024
   \   00000018   0xBFBE             ITTT     LT 
   \   0000001A   0x....             LDRLT.N  R1,??DataTable16_3
   \   0000001C   0x880B             LDRHLT   R3,[R1, #+0]
   \   0000001E   0xF5B3 0x6F80      CMPLT    R3,#+1024
   \   00000022   0xDA63             BGE.N    ??RecordUpdBuf_0
   1351          		//			  &&(stLR!=stLROld))
   1352          			{
   1353          		/*-------------------------------------------------------------------------------------------------------------
   1354          					  
   1355          			Sequence  Record Data					  Processing Data				  Player Data
   1356          					  
   1357          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1358          					  
   1359          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1360          					  
   1361          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1362          		 ---------------------------------------------------------------------------------------------------------------*/
   1363          					  /* Recording Audio Data */						 
   1364          					   switch (buffer_switch)
   \   00000024   0x....             LDR.N    R3,??DataTable16_4
   \   00000026   0x781B             LDRB     R3,[R3, #+0]
   \   00000028   0xB11B             CBZ.N    R3,??RecordUpdBuf_1
   \   0000002A   0x2B02             CMP      R3,#+2
   \   0000002C   0xD00F             BEQ.N    ??RecordUpdBuf_2
   \   0000002E   0xD307             BCC.N    ??RecordUpdBuf_3
   \   00000030   0x4770             BX       LR
   1365          					   {
   1366          								case BUF1_PLAY:
   1367          
   1368          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_1: (+1)
   \   00000032   0x8813             LDRH     R3,[R2, #+0]
   \   00000034   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000038   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000003C   0x....             LDR.N    R2,??DataTable16_5  ;; 0xc00080a0
   \   0000003E   0xE00D             B.N      ??RecordUpdBuf_4
   1369          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   1370          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1371          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   1372          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1373          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   1374          	
   1375          										break;
   1376          								case BUF2_PLAY:
   1377          
   1378          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_3: (+1)
   \   00000040   0x8813             LDRH     R3,[R2, #+0]
   \   00000042   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000046   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000004A   0x....             LDR.N    R2,??DataTable17_1  ;; 0xc0010140
   \   0000004C   0xE006             B.N      ??RecordUpdBuf_4
   1379          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   1380          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1381          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   1382          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1383          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   1384          		
   1385          
   1386          										break;
   1387          								case BUF3_PLAY:
   1388          
   1389          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_2: (+1)
   \   0000004E   0x8813             LDRH     R3,[R2, #+0]
   \   00000050   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000054   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000058   0xF04F 0x4240      MOV      R2,#-1073741824
   \                     ??RecordUpdBuf_4: (+1)
   \   0000005C   0xF9B0 0xC084      LDRSH    R12,[R0, #+132]
   \   00000060   0xF822 0xC013      STRH     R12,[R2, R3, LSL #+1]
   1390          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   00000064   0x880B             LDRH     R3,[R1, #+0]
   \   00000066   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000006A   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   0000006E   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   00000072   0xF9B0 0x1086      LDRSH    R1,[R0, #+134]
   \   00000076   0xF241 0x0C14      MOVW     R12,#+4116
   \   0000007A   0xF82C 0x1003      STRH     R1,[R12, R3]
   1391          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   0000007E   0x....             LDR.N    R1,??DataTable17_2
   \   00000080   0x880B             LDRH     R3,[R1, #+0]
   \   00000082   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000086   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   0000008A   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   0000008E   0xF9B0 0x108A      LDRSH    R1,[R0, #+138]
   \   00000092   0xF242 0x0C28      MOVW     R12,#+8232
   \   00000096   0xF82C 0x1003      STRH     R1,[R12, R3]
   1392          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \   0000009A   0x....             LDR.N    R1,??DataTable17_3
   \   0000009C   0x880B             LDRH     R3,[R1, #+0]
   \   0000009E   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000A2   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000A6   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000AA   0xF9B0 0x1088      LDRSH    R1,[R0, #+136]
   \   000000AE   0xF243 0x0C3C      MOVW     R12,#+12348
   \   000000B2   0xF82C 0x1003      STRH     R1,[R12, R3]
   1393          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000000B6   0x....             LDR.N    R1,??DataTable17_7
   \   000000B8   0x880B             LDRH     R3,[R1, #+0]
   \   000000BA   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000BE   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000C2   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000C6   0xF9B0 0x108C      LDRSH    R1,[R0, #+140]
   \   000000CA   0xF244 0x0C50      MOVW     R12,#+16464
   \   000000CE   0xF82C 0x1003      STRH     R1,[R12, R3]
   1394          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   \   000000D2   0x....             LDR.N    R1,??DataTable17_8
   \   000000D4   0x880B             LDRH     R3,[R1, #+0]
   \   000000D6   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000DA   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000DE   0xF9B0 0x008E      LDRSH    R0,[R0, #+142]
   \   000000E2   0xEB02 0x0143      ADD      R1,R2,R3, LSL #+1
   \   000000E6   0xF245 0x0264      MOVW     R2,#+20580
   \   000000EA   0x5250             STRH     R0,[R2, R1]
   1395          										break;
   1396          								default:
   1397          										break; 
   1398          					   }
   1399          				
   1400          				}
   1401                               
   1402               	}
   1403          }
   \                     ??RecordUpdBuf_0: (+1)
   \   000000EC   0x4770             BX       LR               ;; return
   \   000000EE                      REQUIRE Buffer2
   \   000000EE                      REQUIRE Buffer3
   \   000000EE                      REQUIRE Buffer1
   1404          
   1405          

   \                                 In section .text, align 2, keep-with-next
   1406          void DMA2_Stream5_IRQHandler(void)
   1407          {
   1408            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1409          
   1410            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1411            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable18_16
   \   00000004   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1412            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1413          
   1414            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1415          }
   1416          
   1417          /**
   1418          * @brief This function handles DMA2 stream6 global interrupt.
   1419          */

   \                                 In section .text, align 2, keep-with-next
   1420          void DMA2_Stream6_IRQHandler(void)
   1421          {
   1422            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1423          
   1424            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1425            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable18_18
   \   00000004   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1426            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1427          
   1428            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1429          }
   1430          

   \                                 In section .text, align 2, keep-with-next
   1431          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1432          {
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB081             SUB      SP,SP,#+4
   1433              if(hspi->Instance==SPI1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable18_3  ;; 0x40013000
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xBF1F             ITTTT    NE 
   \   00000010   0x.... 0x....      LDRNE.W  R1,??DataTable18_4  ;; 0x40003800
   \   00000014   0x4288             CMPNE    R0,R1
   \   00000016   0x.... 0x....      LDRNE.W  R1,??DataTable18_7  ;; 0x40013400
   \   0000001A   0x4288             CMPNE    R0,R1
   1434              {
   1435                  /* Copy Data to Record Buffer */
   1436          		//RecordUpdBuf();
   1437          		//XferCplt = 1;
   1438                  //Audio_Play_Out();
   1439              }
   1440              else if (hspi->Instance==SPI2)
   1441              {
   1442          
   1443              }
   1444              else if (hspi->Instance==SPI4)
   \   0000001C   0xD071             BEQ.N    ??HAL_SPI_RxCpltCallback_0
   1445              {
   1446          
   1447              }
   1448              else if (hspi->Instance==SPI5)
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable18_9  ;; 0x40015000
   \   00000022   0x....             LDR.N    R5,??DataTable17_9
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD114             BNE.N    ??HAL_SPI_RxCpltCallback_1
   1449              {
   1450                  swtSDO7^=0x01;
   \   00000028   0xF895 0x0130      LDRB     R0,[R5, #+304]
   1451                  WaveRecord_flgSDO7Finish = 1;
   1452                  if (swtSDO7==0x01)
   \   0000002C   0xF44F 0x5280      MOV      R2,#+4096
   \   00000030   0xF080 0x0001      EOR      R0,R0,#0x1
   \   00000034   0xF885 0x0130      STRB     R0,[R5, #+304]
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xF885 0x0132      STRB     R0,[R5, #+306]
   \   0000003E   0xF895 0x0130      LDRB     R0,[R5, #+304]
   \   00000042   0x2801             CMP      R0,#+1
   1453                  {
   1454                      HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   1455                  }
   1456                  else
   1457                  {
   1458                      HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0xBF0C             ITE      EQ 
   \   00000048   0x.... 0x....      LDREQ.W  R1,??DataTable18_19
   \   0000004C   0x....             LDRNE.N  R1,??DataTable18_5
   \   0000004E   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1459                  }
   1460              }
   1461              else
   1462              {
   1463                
   1464              }
   1465              
   1466              if (hspi->Instance==SPI6) //MIC8
   \                     ??HAL_SPI_RxCpltCallback_1: (+1)
   \   00000052   0x6820             LDR      R0,[R4, #+0]
   \   00000054   0x....             LDR.N    R1,??DataTable18_8  ;; 0x40015400
   \   00000056   0x4288             CMP      R0,R1
   \   00000058   0xD153             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1467              {
   1468          #if USB_STREAMING							
   1469          
   1470              if (swtSDO8==0x01)
   \   0000005A   0xF895 0x0131      LDRB     R0,[R5, #+305]
   \   0000005E   0x2801             CMP      R0,#+1
   \   00000060   0xBF07             ITTEE    EQ 
   \   00000062   0x2240             MOVEQ    R2,#+64
   \   00000064   0x.... 0x....      LDREQ.W  R0,??DataTable18_20
   \   00000068   0x2240             MOVNE    R2,#+64
   \   0000006A   0x....             LDRNE.N  R0,??DataTable18_6
   1471             {
   1472                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1473             }
   1474             else
   1475             {
   1476          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   \   0000006C   0xF8B5 0x1138      LDRH     R1,[R5, #+312]
   \   00000070   0xEB00 0x11C1      ADD      R1,R0,R1, LSL #+7
   \   00000074   0xF105 0x0064      ADD      R0,R5,#+100
   \   00000078   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1477             }      
   1478             AudioUSBSend(idxFrmPDMMic8++);
   \   0000007C   0xF8B5 0x0138      LDRH     R0,[R5, #+312]
   \   00000080   0x1C41             ADDS     R1,R0,#+1
   \   00000082   0xF8A5 0x1138      STRH     R1,[R5, #+312]
   \   00000086   0x.... 0x....      BL       AudioUSBSend
   1479          
   1480             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   \   0000008A   0xF8B5 0x0138      LDRH     R0,[R5, #+312]
   \   0000008E   0x2840             CMP      R0,#+64
   \   00000090   0xD137             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1481             {
   1482                 swtSDO8^=0x01;
   \   00000092   0xF895 0x0131      LDRB     R0,[R5, #+305]
   1483          	   WaveRecord_flgSDO8Finish = 1;
   1484                 idxFrmPDMMic8 = 0;
   1485          		RESET_IDX
   \   00000096   0x....             LDR.N    R1,??DataTable18_21
   \   00000098   0xF080 0x0001      EOR      R0,R0,#0x1
   \   0000009C   0xF885 0x0131      STRB     R0,[R5, #+305]
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0xF885 0x0133      STRB     R0,[R5, #+307]
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xF8A5 0x0138      STRH     R0,[R5, #+312]
   \   000000AC   0x8008             STRH     R0,[R1, #+0]
   \   000000AE   0x....             LDR.N    R1,??DataTable18_22
   \   000000B0   0x8008             STRH     R0,[R1, #+0]
   \   000000B2   0x....             LDR.N    R1,??DataTable18_23
   \   000000B4   0x8008             STRH     R0,[R1, #+0]
   \   000000B6   0x....             LDR.N    R1,??DataTable17_2
   \   000000B8   0x8008             STRH     R0,[R1, #+0]
   \   000000BA   0x....             LDR.N    R1,??DataTable17_3
   \   000000BC   0x8008             STRH     R0,[R1, #+0]
   \   000000BE   0x....             LDR.N    R1,??DataTable18_24
   \   000000C0   0x8008             STRH     R0,[R1, #+0]
   \   000000C2   0x....             LDR.N    R1,??DataTable17_7
   \   000000C4   0x8008             STRH     R0,[R1, #+0]
   \   000000C6   0x....             LDR.N    R1,??DataTable17_8
   \   000000C8   0x8008             STRH     R0,[R1, #+0]
   \   000000CA   0x....             LDR.N    R1,??DataTable18_25
   \   000000CC   0x7008             STRB     R0,[R1, #+0]
   1486          		XferCplt = 0; // clear DMA interrupt flag
   \   000000CE   0x....             LDR.N    R1,??DataTable18_26
   \   000000D0   0x6008             STR      R0,[R1, #+0]
   1487          		switch (buffer_switch)
   \   000000D2   0x....             LDR.N    R0,??DataTable18_27
   \   000000D4   0x7801             LDRB     R1,[R0, #+0]
   \   000000D6   0xB119             CBZ.N    R1,??HAL_SPI_RxCpltCallback_2
   \   000000D8   0x2902             CMP      R1,#+2
   \   000000DA   0xD005             BEQ.N    ??HAL_SPI_RxCpltCallback_3
   \   000000DC   0xD302             BCC.N    ??HAL_SPI_RxCpltCallback_4
   \   000000DE   0xE005             B.N      ??HAL_SPI_RxCpltCallback_5
   1488          		{
   1489          	        case BUF1_PLAY: 		
   1490          	          buffer_switch = BUF3_PLAY;
   \                     ??HAL_SPI_RxCpltCallback_2: (+1)
   \   000000E0   0x2102             MOVS     R1,#+2
   \   000000E2   0xE002             B.N      ??HAL_SPI_RxCpltCallback_6
   1491          	          break;
   1492          	        case BUF2_PLAY: 
   1493          	          buffer_switch = BUF1_PLAY;		
   \                     ??HAL_SPI_RxCpltCallback_4: (+1)
   \   000000E4   0x2100             MOVS     R1,#+0
   \   000000E6   0xE000             B.N      ??HAL_SPI_RxCpltCallback_6
   1494          	          break;
   1495          	        case BUF3_PLAY: 	
   1496          	          buffer_switch = BUF2_PLAY;
   \                     ??HAL_SPI_RxCpltCallback_3: (+1)
   \   000000E8   0x2101             MOVS     R1,#+1
   \                     ??HAL_SPI_RxCpltCallback_6: (+1)
   \   000000EA   0x7001             STRB     R1,[R0, #+0]
   1497          	          break;
   1498          	        default:
   1499          	          break;
   1500          		}
   1501          
   1502          		/* Last player Frame is finished */
   1503          		AudioPlayerUpd(); 		
   \                     ??HAL_SPI_RxCpltCallback_5: (+1)
   \   000000EC   0x.... 0x....      BL       AudioPlayerUpd
   1504          		
   1505          		if (cntStrt<100) cntStrt++;		   
   \   000000F0   0xF8B5 0x013E      LDRH     R0,[R5, #+318]
   \   000000F4   0x2864             CMP      R0,#+100
   \   000000F6   0xDA04             BGE.N    ??HAL_SPI_RxCpltCallback_0
   \   000000F8   0xF8B5 0x013E      LDRH     R0,[R5, #+318]
   \   000000FC   0x1C40             ADDS     R0,R0,#+1
   \   000000FE   0xF8A5 0x013E      STRH     R0,[R5, #+318]
   1506             }
   1507          
   1508          
   1509          #else
   1510              swtSDO8^=0x01;
   1511              WaveRecord_flgSDO8Finish = 1;
   1512              if (swtSDO8==0x01)
   1513              {
   1514                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   1515              }
   1516              else
   1517              {
   1518                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   1519          
   1520              }
   1521          #endif
   1522          
   1523            }
   1524          }
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   00000102   0xB001             ADD      SP,SP,#+4
   \   00000104   0xBD30             POP      {R4,R5,PC}       ;; return
   1525          

   \                                 In section .text, align 4, keep-with-next
   1526          void PDM2PCMSDO78(void)
   1527          {
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   1528          /*-------------------------------------------------------------------------------------------------------------
   1529          			  
   1530          	Sequence  Record Data					  Processing Data				  Player Data
   1531          			  
   1532          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1533          			  
   1534          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1535          			  
   1536          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1537           ---------------------------------------------------------------------------------------------------------------*/
   1538          
   1539              /* Data in Mic7 finished recording */
   1540              if (WaveRecord_flgSDO7Finish==1)
   \   00000004   0x.... 0x....      LDR.W    R11,??DataTable18_28
   \   00000008   0xB081             SUB      SP,SP,#+4
   \   0000000A   0xF89B 0x0132      LDRB     R0,[R11, #+306]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xF040 0x8087      BNE.W    ??PDM2PCMSDO78_0
   1541              {
   1542                  WaveRecord_flgSDO7Finish=0;
   \   00000014   0x2000             MOVS     R0,#+0
   1543          
   1544          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000016   0x2400             MOVS     R4,#+0
   \   00000018   0xF88B 0x0132      STRB     R0,[R11, #+306]
   \   0000001C   0x....             LDR.N    R5,??DataTable18_5
   \   0000001E   0x....             LDR.N    R6,??DataTable18_19
   \   00000020   0x.... 0x....      LDR.W    R8,??DataTable18_29  ;; 0xc00080a0
   \   00000024   0x.... 0x....      LDR.W    R9,??DataTable18  ;; 0xc0010140
   \   00000028   0xF246 0x0778      MOVW     R7,#+24696
   \   0000002C   0xF04F 0x4A40      MOV      R10,#-1073741824
   1545          		{
   1546          	            if(swtSDO7==0x01)
   \                     ??PDM2PCMSDO78_1: (+1)
   \   00000030   0xF89B 0x0130      LDRB     R0,[R11, #+304]
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xBF07             ITTEE    EQ 
   \   00000038   0x8828             LDRHEQ   R0,[R5, #+0]
   \   0000003A   0x8829             LDRHEQ   R1,[R5, #+0]
   \   0000003C   0x8830             LDRHNE   R0,[R6, #+0]
   \   0000003E   0x8831             LDRHNE   R1,[R6, #+0]
   1547          	            {
   1548          	                pDataMic7[i%64] = HTONS(TestSDO7[i]);
                 	                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   1549          	            }
   1550          	            else
   1551          	            {
   1552          	               pDataMic7[i%64] = HTONS(TestSDO7_1[i]);
                 	               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000040   0x1162             ASRS     R2,R4,#+5
   \   00000042   0x0209             LSLS     R1,R1,#+8
   \   00000044   0xEB04 0x6292      ADD      R2,R4,R2, LSR #+26
   \   00000048   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   0000004C   0x1192             ASRS     R2,R2,#+6
   \   0000004E   0xEBA4 0x1282      SUB      R2,R4,R2, LSL #+6
   \   00000052   0xEB0B 0x0242      ADD      R2,R11,R2, LSL #+1
   \   00000056   0xF8A2 0x01C8      STRH     R0,[R2, #+456]
   1553          
   1554          	            }
   1555          
   1556          	            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1557          	            if (i%64==63)
   \   0000005A   0x1160             ASRS     R0,R4,#+5
   \   0000005C   0xEB04 0x6090      ADD      R0,R4,R0, LSR #+26
   \   00000060   0x1180             ASRS     R0,R0,#+6
   \   00000062   0xEBA4 0x1180      SUB      R1,R4,R0, LSL #+6
   \   00000066   0x293F             CMP      R1,#+63
   \   00000068   0xD11C             BNE.N    ??PDM2PCMSDO78_2
   1558          	            {
   1559          	              /* Recording Audio Data */						 
   1560          	              switch (buffer_switch)
   \   0000006A   0x....             LDR.N    R1,??DataTable18_27
   \   0000006C   0x7809             LDRB     R1,[R1, #+0]
   \   0000006E   0xB119             CBZ.N    R1,??PDM2PCMSDO78_3
   \   00000070   0x2902             CMP      R1,#+2
   \   00000072   0xD00D             BEQ.N    ??PDM2PCMSDO78_4
   \   00000074   0xD306             BCC.N    ??PDM2PCMSDO78_5
   \   00000076   0xE015             B.N      ??PDM2PCMSDO78_2
   1561          	              {
   1562          	                case BUF1_PLAY:								
   1563          	                      PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 100 ,
   1564          	                      (PDMFilter_InitStruct *)&Filter[0]);
   \                     ??PDM2PCMSDO78_3: (+1)
   \   00000078   0xF10B 0x03C8      ADD      R3,R11,#+200
   \   0000007C   0x2264             MOVS     R2,#+100
   \   0000007E   0xEB08 0x1040      ADD      R0,R8,R0, LSL #+5
   \   00000082   0xE00A             B.N      ??PDM2PCMSDO78_6
   1565          	                      break;
   1566          	                case BUF2_PLAY:
   1567          	                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 100 ,
   1568          	                        (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_5: (+1)
   \   00000084   0xF10B 0x03C8      ADD      R3,R11,#+200
   \   00000088   0x2264             MOVS     R2,#+100
   \   0000008A   0xEB09 0x1040      ADD      R0,R9,R0, LSL #+5
   \   0000008E   0xE004             B.N      ??PDM2PCMSDO78_6
   1569          	                        break;
   1570          	                case BUF3_PLAY:
   1571          	                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 100 ,
   1572          	                        (PDMFilter_InitStruct *)&Filter[0]);									
   \                     ??PDM2PCMSDO78_4: (+1)
   \   00000090   0xF10B 0x03C8      ADD      R3,R11,#+200
   \   00000094   0x2264             MOVS     R2,#+100
   \   00000096   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \                     ??PDM2PCMSDO78_6: (+1)
   \   0000009A   0x1839             ADDS     R1,R7,R0
   \   0000009C   0xF50B 0x70E4      ADD      R0,R11,#+456
   \   000000A0   0x.... 0x....      BL       PDM_Filter_64_LSB
   1573          	                         break;
   1574          	                default:
   1575          	                         break; 
   1576          	              }
   1577          		        }
   1578          	      }//if (WaveRecord_flgSDO7Finish==1)
   \                     ??PDM2PCMSDO78_2: (+1)
   \   000000A4   0x1C64             ADDS     R4,R4,#+1
   \   000000A6   0x1CB6             ADDS     R6,R6,#+2
   \   000000A8   0x1CAD             ADDS     R5,R5,#+2
   \   000000AA   0xF5B4 0x5F80      CMP      R4,#+4096
   \   000000AE   0xDBBF             BLT.N    ??PDM2PCMSDO78_1
   1579          
   1580          
   1581                      /* Recording Audio Data */						 
   1582          		    switch (buffer_switch)
   \   000000B0   0x....             LDR.N    R0,??DataTable18_27
   \   000000B2   0x7800             LDRB     R0,[R0, #+0]
   \   000000B4   0xB118             CBZ.N    R0,??PDM2PCMSDO78_7
   \   000000B6   0x2802             CMP      R0,#+2
   \   000000B8   0xD023             BEQ.N    ??PDM2PCMSDO78_8
   \   000000BA   0xD311             BCC.N    ??PDM2PCMSDO78_9
   \   000000BC   0xE031             B.N      ??PDM2PCMSDO78_0
   1583          		    {
   1584          		        case BUF1_PLAY:								
   1585          					        /* Update for left-right channel */
   1586          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>=0;i--)
   \                     ??PDM2PCMSDO78_7: (+1)
   \   000000BE   0xF508 0x40D0      ADD      R0,R8,#+26624
   \   000000C2   0xF508 0x41E0      ADD      R1,R8,#+28672
   \   000000C6   0x3076             ADDS     R0,R0,#+118
   \   000000C8   0x3174             ADDS     R1,R1,#+116
   \   000000CA   0xF44F 0x6280      MOV      R2,#+1024
   1587          			        {
   1588          	                    Buffer2.bufMIC7[2*i+1]=  Buffer2.bufMIC7[i];
   \                     ??PDM2PCMSDO78_10: (+1)
   \   000000CE   0x8803             LDRH     R3,[R0, #+0]
   1589          			            Buffer2.bufMIC7[2*i] = Buffer2.bufMIC7[i];
   1590          			        }
   \   000000D0   0x1E52             SUBS     R2,R2,#+1
   \   000000D2   0x804B             STRH     R3,[R1, #+2]
   \   000000D4   0xF830 0x3902      LDRH     R3,[R0], #-2
   \   000000D8   0xF821 0x3904      STRH     R3,[R1], #-4
   \   000000DC   0xD1F7             BNE.N    ??PDM2PCMSDO78_10
   \   000000DE   0xE020             B.N      ??PDM2PCMSDO78_0
   1591          			            break;
   1592          			     case BUF2_PLAY:
   1593          			        /* Update for left-right channel */
   1594          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>=0;i--)
   \                     ??PDM2PCMSDO78_9: (+1)
   \   000000E0   0xF509 0x40D0      ADD      R0,R9,#+26624
   \   000000E4   0xF509 0x41E0      ADD      R1,R9,#+28672
   \   000000E8   0x3076             ADDS     R0,R0,#+118
   \   000000EA   0x3174             ADDS     R1,R1,#+116
   \   000000EC   0xF44F 0x6280      MOV      R2,#+1024
   1595          			        {				 	
   1596          		                Buffer3.bufMIC7[2*i+1]= Buffer3.bufMIC7[i];
   \                     ??PDM2PCMSDO78_11: (+1)
   \   000000F0   0x8803             LDRH     R3,[R0, #+0]
   1597          		                Buffer3.bufMIC7[2*i]= Buffer3.bufMIC7[i];;	
   1598          			        }
   \   000000F2   0x1E52             SUBS     R2,R2,#+1
   \   000000F4   0x804B             STRH     R3,[R1, #+2]
   \   000000F6   0xF830 0x3902      LDRH     R3,[R0], #-2
   \   000000FA   0xF821 0x3904      STRH     R3,[R1], #-4
   \   000000FE   0xD1F7             BNE.N    ??PDM2PCMSDO78_11
   \   00000100   0xE00F             B.N      ??PDM2PCMSDO78_0
   1599          	                break;
   1600          	            case BUF3_PLAY:
   1601          			        /* Update for left-right channel */
   1602          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>=0;i--)
   \                     ??PDM2PCMSDO78_8: (+1)
   \   00000102   0xF50A 0x40D0      ADD      R0,R10,#+26624
   \   00000106   0xF50A 0x41E0      ADD      R1,R10,#+28672
   \   0000010A   0x3076             ADDS     R0,R0,#+118
   \   0000010C   0x3174             ADDS     R1,R1,#+116
   \   0000010E   0xF44F 0x6280      MOV      R2,#+1024
   1603          			        {					
   1604          	                    Buffer1.bufMIC7[2*i+1]= Buffer1.bufMIC7[i];
   \                     ??PDM2PCMSDO78_12: (+1)
   \   00000112   0x8803             LDRH     R3,[R0, #+0]
   1605          	                    Buffer1.bufMIC7[2*i]= Buffer1.bufMIC7[i];;	
   1606          			        }
   \   00000114   0x1E52             SUBS     R2,R2,#+1
   \   00000116   0x804B             STRH     R3,[R1, #+2]
   \   00000118   0xF830 0x3902      LDRH     R3,[R0], #-2
   \   0000011C   0xF821 0x3904      STRH     R3,[R1], #-4
   \   00000120   0xD1F7             BNE.N    ??PDM2PCMSDO78_12
   1607          	                break;
   1608          	            default:
   1609          	                break; 
   1610          	        }
   1611          	    
   1612          
   1613               }
   1614              
   1615          
   1616          	/* Data in Mic8 finished recording */
   1617          	if (WaveRecord_flgSDO8Finish==1)
   \                     ??PDM2PCMSDO78_0: (+1)
   \   00000122   0xF89B 0x0133      LDRB     R0,[R11, #+307]
   \   00000126   0x2801             CMP      R0,#+1
   \   00000128   0xF040 0x808D      BNE.W    ??PDM2PCMSDO78_13
   1618          	{
   1619          		WaveRecord_flgSDO8Finish=0;
   \   0000012C   0x2000             MOVS     R0,#+0
   1620          		
   1621          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   0000012E   0x2400             MOVS     R4,#+0
   \   00000130   0xF88B 0x0133      STRB     R0,[R11, #+307]
   \   00000134   0x....             LDR.N    R5,??DataTable18_6
   \   00000136   0x....             LDR.N    R6,??DataTable18_20
   \   00000138   0xF247 0x078C      MOVW     R7,#+28812
   \   0000013C   0x.... 0x....      LDR.W    R8,??DataTable18_29  ;; 0xc00080a0
   \   00000140   0x.... 0x....      LDR.W    R9,??DataTable18  ;; 0xc0010140
   \   00000144   0xF04F 0x4A40      MOV      R10,#-1073741824
   1622          		{
   1623                            if(swtSDO8==0x01)
   \                     ??PDM2PCMSDO78_14: (+1)
   \   00000148   0xF89B 0x0131      LDRB     R0,[R11, #+305]
   \   0000014C   0x2801             CMP      R0,#+1
   \   0000014E   0xBF07             ITTEE    EQ 
   \   00000150   0x8828             LDRHEQ   R0,[R5, #+0]
   \   00000152   0x8829             LDRHEQ   R1,[R5, #+0]
   \   00000154   0x8830             LDRHNE   R0,[R6, #+0]
   \   00000156   0x8831             LDRHNE   R1,[R6, #+0]
   1624                            {
   1625                               pDataMic8[i%64] = HTONS(TestSDO8[i]);
                                      ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   1626                            }
   1627                            else
   1628                            {
   1629                               pDataMic8[i%64] = HTONS(TestSDO8_1[i]);
                                      ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000158   0x1162             ASRS     R2,R4,#+5
   \   0000015A   0x0209             LSLS     R1,R1,#+8
   \   0000015C   0xEB04 0x6292      ADD      R2,R4,R2, LSR #+26
   \   00000160   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   00000164   0x1192             ASRS     R2,R2,#+6
   \   00000166   0xEBA4 0x1282      SUB      R2,R4,R2, LSL #+6
   \   0000016A   0xEB0B 0x0242      ADD      R2,R11,R2, LSL #+1
   \   0000016E   0xF8A2 0x0148      STRH     R0,[R2, #+328]
   1630                            }
   1631          		
   1632                            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1633                            if (i%64==63)
   \   00000172   0x1160             ASRS     R0,R4,#+5
   \   00000174   0xEB04 0x6090      ADD      R0,R4,R0, LSR #+26
   \   00000178   0x1180             ASRS     R0,R0,#+6
   \   0000017A   0xEBA4 0x1180      SUB      R1,R4,R0, LSL #+6
   \   0000017E   0x293F             CMP      R1,#+63
   \   00000180   0xD11C             BNE.N    ??PDM2PCMSDO78_15
   1634                            {
   1635                                /* Recording Audio Data */						 
   1636                                switch (buffer_switch)
   \   00000182   0x....             LDR.N    R1,??DataTable18_27
   \   00000184   0x7809             LDRB     R1,[R1, #+0]
   \   00000186   0xB119             CBZ.N    R1,??PDM2PCMSDO78_16
   \   00000188   0x2902             CMP      R1,#+2
   \   0000018A   0xD00D             BEQ.N    ??PDM2PCMSDO78_17
   \   0000018C   0xD306             BCC.N    ??PDM2PCMSDO78_18
   \   0000018E   0xE015             B.N      ??PDM2PCMSDO78_15
   1637                                {
   1638                                        case BUF1_PLAY: 							
   1639                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 80 ,
   1640                                                (PDMFilter_InitStruct *)&Filter[1]);
   \                     ??PDM2PCMSDO78_16: (+1)
   \   00000190   0xF10B 0x03FC      ADD      R3,R11,#+252
   \   00000194   0x2250             MOVS     R2,#+80
   \   00000196   0xEB08 0x1040      ADD      R0,R8,R0, LSL #+5
   \   0000019A   0xE00A             B.N      ??PDM2PCMSDO78_19
   1641                                                break;
   1642                                        case BUF2_PLAY:
   1643                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 80 ,
   1644                                                (PDMFilter_InitStruct *)&Filter[1]);	
   \                     ??PDM2PCMSDO78_18: (+1)
   \   0000019C   0xF10B 0x03FC      ADD      R3,R11,#+252
   \   000001A0   0x2250             MOVS     R2,#+80
   \   000001A2   0xEB09 0x1040      ADD      R0,R9,R0, LSL #+5
   \   000001A6   0xE004             B.N      ??PDM2PCMSDO78_19
   1645                                                break;
   1646                                        case BUF3_PLAY:
   1647                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 80 ,
   1648                                                (PDMFilter_InitStruct *)&Filter[1]);									
   \                     ??PDM2PCMSDO78_17: (+1)
   \   000001A8   0xF10B 0x03FC      ADD      R3,R11,#+252
   \   000001AC   0x2250             MOVS     R2,#+80
   \   000001AE   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \                     ??PDM2PCMSDO78_19: (+1)
   \   000001B2   0x1839             ADDS     R1,R7,R0
   \   000001B4   0xF50B 0x70A4      ADD      R0,R11,#+328
   \   000001B8   0x.... 0x....      BL       PDM_Filter_64_LSB
   1649                                                 break;
   1650                                        default:
   1651                                                 break; 
   1652                                }		
   1653                             }					 
   1654          		}
   \                     ??PDM2PCMSDO78_15: (+1)
   \   000001BC   0x1C64             ADDS     R4,R4,#+1
   \   000001BE   0x1CB6             ADDS     R6,R6,#+2
   \   000001C0   0x1CAD             ADDS     R5,R5,#+2
   \   000001C2   0xF5B4 0x5F80      CMP      R4,#+4096
   \   000001C6   0xDBBF             BLT.N    ??PDM2PCMSDO78_14
   1655                          
   1656                    /* Recording Audio Data */						 
   1657                    switch (buffer_switch)
   \   000001C8   0x....             LDR.N    R0,??DataTable18_27
   \   000001CA   0x7800             LDRB     R0,[R0, #+0]
   \   000001CC   0xB128             CBZ.N    R0,??PDM2PCMSDO78_20
   \   000001CE   0x2802             CMP      R0,#+2
   \   000001D0   0xD029             BEQ.N    ??PDM2PCMSDO78_21
   \   000001D2   0xD315             BCC.N    ??PDM2PCMSDO78_22
   1658                    {
   1659                        case BUF1_PLAY: 	
   1660                                /* Update for left-right channel */
   1661                                for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>=0;i--)
   1662                                {
   1663                                    Buffer2.bufMIC8[2*i+1]=  Buffer2.bufMIC8[i];
   1664                                    Buffer2.bufMIC8[2*i] = Buffer2.bufMIC8[i];
   1665                                }
   1666                                break;
   1667                        case BUF2_PLAY:
   1668                                /* Update for left-right channel */
   1669                                for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>=0;i--)
   1670                                {
   1671                                    Buffer3.bufMIC8[2*i+1]= Buffer3.bufMIC8[i];
   1672                                    Buffer3.bufMIC8[2*i]= Buffer3.bufMIC8[i];;	
   1673                                }
   1674                                break;
   1675                        case BUF3_PLAY:
   1676                              /* Update for left-right channel */
   1677                              for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>=0;i--)
   1678                              {					
   1679                                  Buffer1.bufMIC8[2*i+1]= Buffer1.bufMIC8[i];
   1680                                  Buffer1.bufMIC8[2*i]= Buffer1.bufMIC8[i];
   1681                              }
   1682                              break;
   1683                        default:
   1684                              break; 
   1685                    }                
   1686             }//if (WaveRecord_flgSDO8Finish==1)
   1687          }
   \   000001D4   0xB001             ADD      SP,SP,#+4
   \   000001D6   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??PDM2PCMSDO78_20: (+1)
   \   000001DA   0xF508 0x40F0      ADD      R0,R8,#+30720
   \   000001DE   0xF508 0x4100      ADD      R1,R8,#+32768
   \   000001E2   0x308A             ADDS     R0,R0,#+138
   \   000001E4   0x3188             ADDS     R1,R1,#+136
   \   000001E6   0xF44F 0x6280      MOV      R2,#+1024
   \                     ??PDM2PCMSDO78_23: (+1)
   \   000001EA   0x8803             LDRH     R3,[R0, #+0]
   \   000001EC   0x1E52             SUBS     R2,R2,#+1
   \   000001EE   0x804B             STRH     R3,[R1, #+2]
   \   000001F0   0xF830 0x3902      LDRH     R3,[R0], #-2
   \   000001F4   0xF821 0x3904      STRH     R3,[R1], #-4
   \   000001F8   0xD1F7             BNE.N    ??PDM2PCMSDO78_23
   \   000001FA   0xB001             ADD      SP,SP,#+4
   \   000001FC   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??PDM2PCMSDO78_22: (+1)
   \   00000200   0xF509 0x40F0      ADD      R0,R9,#+30720
   \   00000204   0xF509 0x4100      ADD      R1,R9,#+32768
   \   00000208   0x308A             ADDS     R0,R0,#+138
   \   0000020A   0x3188             ADDS     R1,R1,#+136
   \   0000020C   0xF44F 0x6280      MOV      R2,#+1024
   \                     ??PDM2PCMSDO78_24: (+1)
   \   00000210   0x8803             LDRH     R3,[R0, #+0]
   \   00000212   0x1E52             SUBS     R2,R2,#+1
   \   00000214   0x804B             STRH     R3,[R1, #+2]
   \   00000216   0xF830 0x3902      LDRH     R3,[R0], #-2
   \   0000021A   0xF821 0x3904      STRH     R3,[R1], #-4
   \   0000021E   0xD1F7             BNE.N    ??PDM2PCMSDO78_24
   \   00000220   0xB001             ADD      SP,SP,#+4
   \   00000222   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??PDM2PCMSDO78_21: (+1)
   \   00000226   0xF50A 0x40F0      ADD      R0,R10,#+30720
   \   0000022A   0xF50A 0x4100      ADD      R1,R10,#+32768
   \   0000022E   0x308A             ADDS     R0,R0,#+138
   \   00000230   0x3188             ADDS     R1,R1,#+136
   \   00000232   0xF44F 0x6280      MOV      R2,#+1024
   \                     ??PDM2PCMSDO78_25: (+1)
   \   00000236   0x8803             LDRH     R3,[R0, #+0]
   \   00000238   0x1E52             SUBS     R2,R2,#+1
   \   0000023A   0x804B             STRH     R3,[R1, #+2]
   \   0000023C   0xF830 0x3902      LDRH     R3,[R0], #-2
   \   00000240   0xF821 0x3904      STRH     R3,[R1], #-4
   \   00000244   0xD1F7             BNE.N    ??PDM2PCMSDO78_25
   \                     ??PDM2PCMSDO78_13: (+1)
   \   00000246   0xB001             ADD      SP,SP,#+4
   \   00000248   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \   0000024C                      REQUIRE Buffer2
   \   0000024C                      REQUIRE Buffer3
   \   0000024C                      REQUIRE Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x4001300C         DC32     0x4001300c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   0x........         DC32     I2S2_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x4001340C         DC32     0x4001340c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_9:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_10:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x4001540C         DC32     0x4001540c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_9:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_10:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_11:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_12:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_13:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_14:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_15:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_16:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_17:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_18:
   \   00000000   0x........         DC32     hdma_spi5_rx+0x50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_19:
   \   00000000   0x........         DC32     TestSDO7_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_20:
   \   00000000   0x........         DC32     TestSDO8_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_21:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_22:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_23:
   \   00000000   0x........         DC32     idxSPI5DataBuf3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_24:
   \   00000000   0x........         DC32     I2S2_idxTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_25:
   \   00000000   0x........         DC32     flgDlyUpd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_26:
   \   00000000   0x........         DC32     XferCplt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_27:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_28:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_29:
   \   00000000   0xC00080A0         DC32     0xc00080a0
   1688          
   1689          
   1690          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DMA2_Stream5_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream6_IRQHandler
         0   -> HAL_DMA_IRQHandler
      40   HAL_SPI_MspInit
        40   -> HAL_DMA_DeInit
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
      16   HAL_SPI_RxCpltCallback
        16   -> AudioPlayerUpd
        16   -> AudioUSBSend
        16   -> HAL_SPI_Receive_DMA
      24   MIC1TO6_Init
        24   -> HAL_GPIO_ReadPin
        24   -> HAL_I2S_Init
        24   -> SPI4_Init
        24   -> SPI5_Init
         0   -> SPI6_Init
       0   Mic7Rec
         0   -> SPI5_Init
       0   Mic8Rec
         0   -> HAL_SPI_Init
      40   PDM2PCMSDO78
        40   -> PDM_Filter_64_LSB
       0   RecordUpdBuf
      16   SPI1_IRQHandler
        16   -> HAL_GPIO_ReadPin
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
      24   SPI2_IRQHandler
        24   -> HAL_GPIO_ReadPin
      24   SPI4_IRQHandler
        24   -> HAL_GPIO_ReadPin
       8   SPI4_Init
         8   -> HAL_SPI_Init
       8   SPI5_IRQHandler
         8   -> PDM_Filter_64_LSB
      32   SPI5_Init
         0   -> HAL_SPI_Init
        32   -> PDM_Filter_Init
       8   SPI6_IRQHandler
         8   -> PDM_Filter_64_LSB
       0   SPI6_Init
         0   -> HAL_SPI_Init
       8   StartRecMic7_8
         8   -> HAL_SPI_Receive_DMA
       0   mySPI_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable17_8
       4  ??DataTable17_9
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_10
       4  ??DataTable18_11
       4  ??DataTable18_12
       4  ??DataTable18_13
       4  ??DataTable18_14
       4  ??DataTable18_15
       4  ??DataTable18_16
       4  ??DataTable18_17
       4  ??DataTable18_18
       4  ??DataTable18_19
       4  ??DataTable18_2
       4  ??DataTable18_20
       4  ??DataTable18_21
       4  ??DataTable18_22
       4  ??DataTable18_23
       4  ??DataTable18_24
       4  ??DataTable18_25
       4  ??DataTable18_26
       4  ??DataTable18_27
       4  ??DataTable18_28
       4  ??DataTable18_29
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable18_8
       4  ??DataTable18_9
   32928  Buffer1
   32928  Buffer2
   32928  Buffer3
       8  DMA2_Stream5_IRQHandler
       8  DMA2_Stream6_IRQHandler
    1044  HAL_SPI_MspInit
     262  HAL_SPI_RxCpltCallback
       2  I2S1_stNipple
       1  I2S2_stLR
    8200  I2S2_stPosShft
          I2S2_stLROld
          I2S2_stNipple
          iSDO34
          TestSDO34
     210  MIC1TO6_Init
       1  Main_stLR
       2  Mic7Rec
      74  Mic8Rec
     588  PDM2PCMSDO78
     238  RecordUpdBuf
     262  SPI1_IRQHandler
     212  SPI1_Ini
     250  SPI2_IRQHandler
     324  SPI4_IRQHandler
      86  SPI4_Init
    8200  SPI4_stPosShft
          Main_stLROld
          SPI4_stNipple
          iSDO56
          TestSDO56
     138  SPI5_IRQHandler
     140  SPI5_Init
     132  SPI6_IRQHandler
      74  SPI6_Init
      46  StartRecMic7_8
    8192  TestSDO7
    8192  TestSDO7_1
    8192  TestSDO8
    8192  TestSDO8_1
       1  WaveRecord_flgIni
       2  cntTransFinish
      80  hdma_spi2_tx
      80  hdma_spi3_tx
     160  hdma_spi5_rx
          hdma_spi6_rx
    8340  hi2s1
          hi2s2
          WaveRecord_flgInt
          I2S1_stPosShft
          stLROld
          vRawSens1
          vRawSens2
          vRawSens4
          vRawSens3
          vRawSens5
          vRawSens6
          SPI1_stNipple
          iSDO12
          TestSDO12
     100  hspi1
     100  hspi2
     584  hspi5
          hspi6
          Filter
          swtSDO7
          swtSDO8
          WaveRecord_flgSDO7Finish
          WaveRecord_flgSDO8Finish
          idxMic8
          idxMic7
          idxFrmPDMMic8
          cntPos
          cntPos7
          cntStrt
          bufPCMSens7
          bufPCMSens8
          pDataMic8
          pDataMic7
      44  mySPI_SendData
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins
       1  stLR

 
 58 896 bytes in section .bss
 98 784 bytes in section .bss  (abs)
  4 354 bytes in section .text
 
   4 354 bytes of CODE memory
 157 680 bytes of DATA memory

Errors: none
Warnings: 21
