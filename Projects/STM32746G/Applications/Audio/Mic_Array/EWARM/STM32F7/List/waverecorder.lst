###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       08/Mar/2016  16:10:21
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Oh --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          
      8          
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "waverecorder.h" 
     11          #include "string.h"
     12          //#include "stm32f7xx_hal_spi.h"
     13          #include "stm32f7xx_hal.h"
     14          #include "pdm_filter.h"
     15          #include "DSP.h"
     16          
     17          
     18          /* Private typedef -----------------------------------------------------------*/
     19          /* Private define ------------------------------------------------------------*/
     20          
     21          
     22          /* SPI Configuration defines */
     23          #define SPI_SCK_PIN                       GPIO_PIN_10
     24          #define SPI_SCK_GPIO_PORT                 GPIOB
     25          #define SPI_SCK_GPIO_CLK                  1
     26          #define SPI_SCK_SOURCE                    1
     27          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     28          
     29          #define SPI_MOSI_PIN                      GPIO_PIN_3
     30          #define SPI_MOSI_GPIO_PORT                GPIOC
     31          #define SPI_MOSI_GPIO_CLK                 1
     32          #define SPI_MOSI_SOURCE                   1
     33          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     34          
     35          
     36          /* sop1hc */
     37          #define SPI1_SCK_PIN                       GPIO_PIN_5
     38          #define SPI1_SCK_GPIO_PORT                 GPIOA
     39          #define SPI1_SCK_GPIO_CLK                  1
     40          #define SPI1_SCK_SOURCE                    1
     41          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     42          
     43          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     44          #define SPI1_MOSI_GPIO_PORT                GPIOA
     45          #define SPI1_MOSI_GPIO_CLK                 1
     46          #define SPI1_MOSI_SOURCE                   1
     47          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     48          
     49          #define SPI1_MISO_PIN                      GPIO_PIN_6
     50          #define SPI1_MISO_GPIO_PORT                GPIOA
     51          #define SPI1_MISO_GPIO_CLK                 1
     52          #define SPI1_MISO_SOURCE                   1
     53          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     54          
     55          
     56          
     57          

   \                                 In section .bss, align 4
     58          uint16_t idxMic8=0;
   \                     idxMic8:
   \   00000000                      DS8 2
     59          uint16_t idxMic7=0;
     60          uint8_t pHeaderBuff[44];
     61          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
     62          uint16_t volatile cntTransFinish;
     63          
     64          /* Private macro -------------------------------------------------------------*/
     65          /* Private variables ---------------------------------------------------------*/
     66          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     67          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     68          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     69          extern WAVE_FormatTypeDef WaveFormat;
     70          extern FIL WavFile;
     71          extern AUDIO_DEMO_StateMachine AudioDemo;
     72          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     73          extern __IO uint8_t buffer_switch;
     74          extern __IO uint8_t volume;
     75          extern SPI_HandleTypeDef hspi4,hspi1;
     76          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     77          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     78          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     79          extern __IO uint16_t  I2S2_idxTmp;
     80          extern SPI_HandleTypeDef     hspi4;
     81          extern DMA_HandleTypeDef     DmaHandle;
     82          
     83          #ifndef CS43L22_PLAY
     84          extern __IO uint8_t flgDlyUpd; 
     85          extern __IO uint32_t XferCplt;
     86          extern __IO uint16_t  idxSPI5DataBuf3;
     87          #endif
     88          
     89          __IO int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
     90          __IO int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
     91          __IO int16_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
     92          __IO uint16_t TestSDO7[4*AUDIO_OUT_BUFFER_SIZE];
     93          __IO uint16_t TestSDO8[4*AUDIO_OUT_BUFFER_SIZE];
     94          __IO uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
     95          __IO uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
     96          __IO uint16_t  WaveRec_idxTest;
     97          
     98          
     99          SPI_HandleTypeDef hspi1,hspi2;
    100          SPI_HandleTypeDef spi1_ins,spi2_ins;
    101          I2S_HandleTypeDef hi2s1;
    102          I2S_HandleTypeDef hi2s2;
    103          SPI_HandleTypeDef hspi5,hspi6;
    104          DMA_HandleTypeDef hdma_spi2_tx;
    105          DMA_HandleTypeDef hdma_spi3_tx;
    106          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
    107          
    108          #if USB_STREAMING
    109          __IO uint16_t idxFrmPDMMic8;
    110          #endif
    111          
    112          uint16_t *bufPCMSens7;
    113          uint16_t *bufPCMSens8;
    114          __IO uint16_t cntPos;
   \                     cntPos:
   \   00000002                      DS8 2
   \                     hspi5:
   \   00000004                      DS8 100
   \                     bufPCMSens8:
   \   00000068                      DS8 4

   \                                 In section .bss, align 4
   \                     idxMic7:
   \   00000000                      DS8 2
    115          __IO uint16_t cntPos7;
   \                     cntPos7:
   \   00000002                      DS8 2
   \                     hspi6:
   \   00000004                      DS8 100
   \                     bufPCMSens7:
   \   00000068                      DS8 4

   \                                 In section .bss, align 4
   \                     pHeaderBuff:
   \   00000000                      DS8 44

   \                                 In section .bss, align 2
   \                     cntTransFinish:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     TestSDO12:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO34:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO56:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8_1:
   \   00000000                      DS8 8192
    116          __IO static uint16_t iBuff;
    117          __IO static uint32_t uwVolume = 70;
    118          __IO PDMFilter_InitStruct Filter[2];
    119          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
    120          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
    121          __IO int16_t   pPDM2PCM[16];
    122          __IO uint16_t cntStrt;
    123          __IO uint8_t WaveRecord_flgInt;
    124          uint8_t WaveRecord_flgIni;
    125          
    126          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
    127          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
    128          __IO uint16_t iSDO12,iSDO34,iSDO56;
    129          __IO uint8_t swtSDO7,swtSDO8;
    130          __IO uint8_t WaveRecord_flgSDO7Finish, WaveRecord_flgSDO8Finish;
    131          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
    132          __IO uint8_t I2S2_stLR, I2S2_stLROld;
    133          
    134          /* Private function prototypes -----------------------------------------------*/
    135          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    136          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    137          static void I2S1_Init(void);
    138          static void I2S2_Init(void);
    139          
    140          #pragma location=SDRAM_BANK_ADDR
    141          Mic_Array_Data Buffer1;
    142          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)
    143          Mic_Array_Data Buffer2;
    144          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)
    145          Mic_Array_Data Buffer3;
    146          

   \                                 In section .text, align 2, keep-with-next
    147          void SPI1_Ini(void)
    148          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    149            GPIO_InitTypeDef GPIO_InitStructure;
    150          
    151           
    152             	 
    153            /* Enable SCK, MOSI and MISO GPIO clocks */
    154            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40023830
   \   00000006   0xB086             SUB      SP,SP,#+24
    155            __HAL_RCC_GPIOA_CLK_ENABLE();
    156          
    157            
    158            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    159            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    160            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    161          
    162            /* SPI SCK pin configuration */
    163            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    164            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    165            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable12_1  ;; 0x40020000
   \   0000000C   0x6941             LDR      R1,[R0, #+20]
   \   0000000E   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000012   0x6141             STR      R1,[R0, #+20]
   \   00000014   0x6941             LDR      R1,[R0, #+20]
   \   00000016   0xF401 0x5180      AND      R1,R1,#0x1000
   \   0000001A   0x9100             STR      R1,[SP, #+0]
   \   0000001C   0x9900             LDR      R1,[SP, #+0]
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000024   0x6001             STR      R1,[R0, #+0]
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xA901             ADD      R1,SP,#+4
   \   0000002A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x9800             LDR      R0,[SP, #+0]
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x9002             STR      R0,[SP, #+8]
   \   00000036   0x9003             STR      R0,[SP, #+12]
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0x9004             STR      R0,[SP, #+16]
   \   0000003C   0x2005             MOVS     R0,#+5
   \   0000003E   0x9005             STR      R0,[SP, #+20]
   \   00000040   0x2020             MOVS     R0,#+32
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       HAL_GPIO_Init
    166          
    167            /* SPI  MOSI pin configuration */
    168            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   0000004A   0x2001             MOVS     R0,#+1
    169            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    170            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   0000004C   0xA901             ADD      R1,SP,#+4
   \   0000004E   0x9005             STR      R0,[SP, #+20]
   \   00000050   0x2080             MOVS     R0,#+128
   \   00000052   0x9001             STR      R0,[SP, #+4]
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       HAL_GPIO_Init
    171          
    172            /* SPI MISO pin configuration */
    173            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   0000005A   0x2001             MOVS     R0,#+1
    174            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    175            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   0000005C   0xA901             ADD      R1,SP,#+4
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x2040             MOVS     R0,#+64
   \   00000062   0x9001             STR      R0,[SP, #+4]
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       HAL_GPIO_Init
    176          
    177            /* SPI configuration -------------------------------------------------------*/
    178            //SPI_I2S_DeInit(SPI1);
    179            
    180            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \   0000006E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000072   0x6081             STR      R1,[R0, #+8]
    181            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000074   0xF44F 0x6170      MOV      R1,#+3840
   \   00000078   0x60C1             STR      R1,[R0, #+12]
    182            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x6101             STR      R1,[R0, #+16]
    183            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    184            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    185            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    186            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    187            spi1_ins.Init.CRCPolynomial = 7;
    188            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   0000007E   0x.... 0x....      LDR.W    R4,??DataTable16  ;; 0x40021000
   \   00000082   0x6141             STR      R1,[R0, #+20]
   \   00000084   0xF44F 0x7100      MOV      R1,#+512
   \   00000088   0x6181             STR      R1,[R0, #+24]
   \   0000008A   0x2128             MOVS     R1,#+40
   \   0000008C   0x61C1             STR      R1,[R0, #+28]
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x6201             STR      R1,[R0, #+32]
   \   00000092   0x2107             MOVS     R1,#+7
   \   00000094   0x62C1             STR      R1,[R0, #+44]
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x6041             STR      R1,[R0, #+4]
    189            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   0000009A   0x.... 0x....      BL       HAL_SPI_Init
    190            {
    191              /* Initialization Error */
    192              //Error_Handler();
    193            }
    194            
    195           
    196            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   0000009E   0x2008             MOVS     R0,#+8
    197            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    198            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    199            GPIO_InitStructure.Pull = GPIO_PULLUP;
    200            //GPIO_InitStructure.Alternate 
    201            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000A0   0xA901             ADD      R1,SP,#+4
   \   000000A2   0x9001             STR      R0,[SP, #+4]
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x9002             STR      R0,[SP, #+8]
   \   000000A8   0x2002             MOVS     R0,#+2
   \   000000AA   0x9004             STR      R0,[SP, #+16]
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x9003             STR      R0,[SP, #+12]
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       HAL_GPIO_Init
    202          
    203            /* Deselect : Chip Select high */
    204            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0x2108             MOVS     R1,#+8
   \   000000BA   0x4620             MOV      R0,R4
   \   000000BC   0x.... 0x....      BL       HAL_GPIO_WritePin
    205             /* sop1hc */
    206            /* Configure the SPI interrupt priority */
    207            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000C0   0x2200             MOVS     R2,#+0
   \   000000C2   0x2101             MOVS     R1,#+1
   \   000000C4   0x2023             MOVS     R0,#+35
   \   000000C6   0x.... 0x....      BL       HAL_NVIC_SetPriority
    208          
    209            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000CA   0x2023             MOVS     R0,#+35
   \   000000CC   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    210            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    211            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    212          
    213            /* Enable SPI1  */
    214            //__HAL_SPI_ENABLE(SPI1);
    215          
    216          }
   \   000000D0   0xB006             ADD      SP,SP,#+24
   \   000000D2   0xBD10             POP      {R4,PC}          ;; return
    217          

   \                                 In section .text, align 2, keep-with-next
    218          void mySPI_SendData(uint8_t adress, uint8_t data)
    219          {
   \                     mySPI_SendData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable12_2
   \   00000004   0x6812             LDR      R2,[R2, #+0]
    220           
    221          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x6893             LDR      R3,[R2, #+8]
   \   00000008   0x079B             LSLS     R3,R3,#+30
   \   0000000A   0xD5FC             BPL.N    ??mySPI_SendData_0
    222          SPI_I2S_SendData(SPI1, adress);
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable15  ;; 0x4001300c
   \   00000010   0x6018             STR      R0,[R3, #+0]
    223          
    224          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   00000012   0x6890             LDR      R0,[R2, #+8]
   \   00000014   0x07C0             LSLS     R0,R0,#+31
   \   00000016   0xD5FC             BPL.N    ??mySPI_SendData_1
    225          SPI_I2S_ReceiveData(SPI1);
   \   00000018   0x6818             LDR      R0,[R3, #+0]
    226          
    227          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   0000001A   0x6890             LDR      R0,[R2, #+8]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD4FC             BMI.N    ??mySPI_SendData_2
    228          SPI_I2S_SendData(SPI1, data);
   \   00000020   0x6019             STR      R1,[R3, #+0]
    229          
    230          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000022   0x6890             LDR      R0,[R2, #+8]
   \   00000024   0x07C0             LSLS     R0,R0,#+31
   \   00000026   0xD4FC             BMI.N    ??mySPI_SendData_3
    231          SPI_I2S_ReceiveData(SPI1);
   \   00000028   0x6818             LDR      R0,[R3, #+0]
    232           
    233          }
   \   0000002A   0x4770             BX       LR               ;; return
    234          
    235          /**
    236            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    237            * @param  None
    238            * @retval None
    239          */
    240          

   \                                 In section .text, align 2, keep-with-next
    241          void SPI1_IRQHandler(void)
    242          {  
    243                uint16_t tmpTest;
    244          	  static uint8_t stLR,stLROld;
                 	                 ^
Warning[Pe177]: variable "stLR" was declared but never referenced
    245          	
    246          	  /* SPI in mode Receiver ----------------------------------------------------*/
    247          	  if(
    248          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    249          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    250          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000004   0x69C1             LDR      R1,[R0, #+28]
   \   00000006   0x6849             LDR      R1,[R1, #+4]
   \   00000008   0x0649             LSLS     R1,R1,#+25
   \   0000000A   0xD56A             BPL.N    ??SPI1_IRQHandler_0
    251          	  {
    252          	
    253          
    254          	   tmpTest =  SPI_I2S_ReceiveData(SPI1);
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable15  ;; 0x4001300c
   \   00000010   0x6809             LDR      R1,[R1, #+0]
    255          	
    256          	   /* Left-Right Mic data */
    257          	   //stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    258          	
    259          		if (I2S2_stLR==GPIO_PIN_SET)
   \   00000012   0x7902             LDRB     R2,[R0, #+4]
   \   00000014   0x7883             LDRB     R3,[R0, #+2]
   \   00000016   0x2B01             CMP      R3,#+1
   \   00000018   0xD12E             BNE.N    ??SPI1_IRQHandler_1
    260          		{
    261          			if (stLROld==GPIO_PIN_RESET)
   \   0000001A   0xB37A             CBZ.N    R2,??SPI1_IRQHandler_2
    262          			{
    263          				SPI1_stNipple = (tmpTest);
    264          
    265          			}
    266          			else
    267          			{
    268          				 vRawSens1 = (tmpTest);
   \   0000001C   0x8101             STRH     R1,[R0, #+8]
    269             		         WaveRec_idxTest++;
   \   0000001E   0x88C1             LDRH     R1,[R0, #+6]
   \   00000020   0x1C49             ADDS     R1,R1,#+1
   \   00000022   0x80C1             STRH     R1,[R0, #+6]
    270          				   /* Recording Audio Data */						 
    271          				   switch (buffer_switch)
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable15_2
   \   00000028   0x7809             LDRB     R1,[R1, #+0]
   \   0000002A   0xB119             CBZ.N    R1,??SPI1_IRQHandler_3
   \   0000002C   0x2902             CMP      R1,#+2
   \   0000002E   0xD017             BEQ.N    ??SPI1_IRQHandler_4
   \   00000030   0xD30A             BCC.N    ??SPI1_IRQHandler_5
   \   00000032   0xE056             B.N      ??SPI1_IRQHandler_0
    272          				   {
    273          							case BUF1_PLAY:
    274          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;								
   \                     ??SPI1_IRQHandler_3: (+1)
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable15_3
   \   00000038   0x880A             LDRH     R2,[R1, #+0]
   \   0000003A   0x1C53             ADDS     R3,R2,#+1
   \   0000003C   0x800B             STRH     R3,[R1, #+0]
   \   0000003E   0xF9B0 0x1008      LDRSH    R1,[R0, #+8]
   \   00000042   0x.... 0x....      LDR.W    R3,??DataTable15_4  ;; 0xc00080a0
   \   00000046   0xE008             B.N      ??SPI1_IRQHandler_6
    275          									break;
    276          							case BUF2_PLAY:
    277          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??SPI1_IRQHandler_5: (+1)
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable15_3
   \   0000004C   0x880A             LDRH     R2,[R1, #+0]
   \   0000004E   0x1C53             ADDS     R3,R2,#+1
   \   00000050   0x800B             STRH     R3,[R1, #+0]
   \   00000052   0xF9B0 0x1008      LDRSH    R1,[R0, #+8]
   \   00000056   0x.... 0x....      LDR.W    R3,??DataTable15_5  ;; 0xc0010140
   \                     ??SPI1_IRQHandler_6: (+1)
   \   0000005A   0xF823 0x1012      STRH     R1,[R3, R2, LSL #+1]
    278          									break;
   \   0000005E   0xE040             B.N      ??SPI1_IRQHandler_0
    279          							case BUF3_PLAY:
    280          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;									
   \                     ??SPI1_IRQHandler_4: (+1)
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable15_3
   \   00000064   0x880A             LDRH     R2,[R1, #+0]
   \   00000066   0x1C53             ADDS     R3,R2,#+1
   \   00000068   0x0052             LSLS     R2,R2,#+1
   \   0000006A   0x800B             STRH     R3,[R1, #+0]
   \   0000006C   0xF9B0 0x1008      LDRSH    R1,[R0, #+8]
   \   00000070   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \   00000074   0x8011             STRH     R1,[R2, #+0]
    281          									break;
   \   00000076   0xE034             B.N      ??SPI1_IRQHandler_0
    282          							default:
    283          									break; 
    284          				   
    285          				   	}
    286          			}
    287          		}
    288          		else
    289          		{
    290          			if (stLROld==GPIO_PIN_SET)
   \                     ??SPI1_IRQHandler_1: (+1)
   \   00000078   0x2A01             CMP      R2,#+1
   \   0000007A   0xD101             BNE.N    ??SPI1_IRQHandler_7
    291          			{
    292          			  SPI1_stNipple = (tmpTest);  
   \                     ??SPI1_IRQHandler_2: (+1)
   \   0000007C   0x8281             STRH     R1,[R0, #+20]
   \   0000007E   0xE030             B.N      ??SPI1_IRQHandler_0
    293          
    294          			}
    295          			else
    296          			{
    297          			  vRawSens2 = (tmpTest);
   \                     ??SPI1_IRQHandler_7: (+1)
   \   00000080   0x8141             STRH     R1,[R0, #+10]
    298           	          WaveRec_idxTest++;
   \   00000082   0x88C1             LDRH     R1,[R0, #+6]
   \   00000084   0x1C49             ADDS     R1,R1,#+1
   \   00000086   0x80C1             STRH     R1,[R0, #+6]
    299          			  	   /* Recording Audio Data */						 
    300          				   switch (buffer_switch)
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable15_2
   \   0000008C   0x7809             LDRB     R1,[R1, #+0]
   \   0000008E   0xB119             CBZ.N    R1,??SPI1_IRQHandler_8
   \   00000090   0x2902             CMP      R1,#+2
   \   00000092   0xD019             BEQ.N    ??SPI1_IRQHandler_9
   \   00000094   0xD30C             BCC.N    ??SPI1_IRQHandler_10
   \   00000096   0xE024             B.N      ??SPI1_IRQHandler_0
    301          				   {
    302          							case BUF1_PLAY:
    303          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;								
   \                     ??SPI1_IRQHandler_8: (+1)
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   0000009C   0x880A             LDRH     R2,[R1, #+0]
   \   0000009E   0x1C53             ADDS     R3,R2,#+1
   \   000000A0   0x800B             STRH     R3,[R1, #+0]
   \   000000A2   0x.... 0x....      LDR.W    R3,??DataTable15_4  ;; 0xc00080a0
   \   000000A6   0xF9B0 0x100A      LDRSH    R1,[R0, #+10]
   \   000000AA   0xEB03 0x0242      ADD      R2,R3,R2, LSL #+1
   \   000000AE   0xE015             B.N      ??SPI1_IRQHandler_11
    304          									break;
    305          							case BUF2_PLAY:
    306          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \                     ??SPI1_IRQHandler_10: (+1)
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000000B4   0x880A             LDRH     R2,[R1, #+0]
   \   000000B6   0x1C53             ADDS     R3,R2,#+1
   \   000000B8   0x800B             STRH     R3,[R1, #+0]
   \   000000BA   0x.... 0x....      LDR.W    R3,??DataTable15_5  ;; 0xc0010140
   \   000000BE   0xF9B0 0x100A      LDRSH    R1,[R0, #+10]
   \   000000C2   0xEB03 0x0242      ADD      R2,R3,R2, LSL #+1
   \   000000C6   0xE009             B.N      ??SPI1_IRQHandler_11
    307          									break;
    308          							case BUF3_PLAY:
    309          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
   \                     ??SPI1_IRQHandler_9: (+1)
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000000CC   0x880A             LDRH     R2,[R1, #+0]
   \   000000CE   0x1C53             ADDS     R3,R2,#+1
   \   000000D0   0x0052             LSLS     R2,R2,#+1
   \   000000D2   0x800B             STRH     R3,[R1, #+0]
   \   000000D4   0xF9B0 0x100A      LDRSH    R1,[R0, #+10]
   \   000000D8   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \                     ??SPI1_IRQHandler_11: (+1)
   \   000000DC   0xF241 0x0314      MOVW     R3,#+4116
   \   000000E0   0x5299             STRH     R1,[R3, R2]
    310          									break;
    311          							default:
    312          									break; 
    313          				   
    314          				   	}
    315          			  }
    316          
    317          			} 	
    318          		}
    319          	   
    320          
    321          #if 0
    322                 if (iSDO12<4*AUDIO_OUT_BUFFER_SIZE)
    323          	   {
    324                     TestSDO12[iSDO12++]=tmpTest;
    325          	   }
    326          	   else
    327          	   {
    328                     iSDO12=0;
    329          	   }
    330          		if ((WaveRec_idxSens1 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens2 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    331          	//			  &&(stLR!=stLROld))
    332          		{
    333          	/*-------------------------------------------------------------------------------------------------------------
    334          				  
    335          		Sequence  Record Data					  Processing Data				  Player Data
    336          				  
    337          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    338          				  
    339          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    340          				  
    341          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    342          	 ---------------------------------------------------------------------------------------------------------------*/
    343          				  /* Recording Audio Data */						 
    344          				   switch (buffer_switch)
    345          				   {
    346          							case BUF1_PLAY:
    347          
    348                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    349          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    350          							    else
    351          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    352          
    353          	
    354          									break;
    355          							case BUF2_PLAY:
    356                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    357          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    358          							    else
    359          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;	
    360          
    361          									break;
    362          							case BUF3_PLAY:
    363                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    364          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    365          							    else
    366          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    367          
    368          									break;
    369          							default:
    370          									break; 
    371          				   }
    372          			
    373          		 } 
    374          #endif		
    375          
    376          		/* Update Old value */	  
    377          		stLROld=I2S2_stLR;
   \                     ??SPI1_IRQHandler_0: (+1)
   \   000000E2   0x7881             LDRB     R1,[R0, #+2]
   \   000000E4   0x7101             STRB     R1,[R0, #+4]
    378          
    379          				 
    380          } 	 
   \   000000E6   0x4770             BX       LR               ;; return
   \   000000E8                      REQUIRE Buffer2
   \   000000E8                      REQUIRE Buffer3
   \   000000E8                      REQUIRE Buffer1
    381          
    382          
    383          
    384          
    385          /**
    386            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    387            * @param  None
    388            * @retval None
    389          */
    390          

   \                                 In section .text, align 2, keep-with-next
    391          void SPI2_IRQHandler(void)
    392          {      
    393              uint16_t app;
    394              
    395          
    396            /* Check if data are available in SPI Data register */
    397             if (
    398          //	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    399          //   	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    400             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    401             	  )
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable16_2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xD400             BMI.N    ??SPI2_IRQHandler_0
   \   0000000C   0x4770             BX       LR
    402             {
    403              
    404               app = SPI_I2S_ReceiveData(SPI2);   
   \                     ??SPI2_IRQHandler_0: (+1)
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable16_3  ;; 0x4000380c
    405               //SPI_I2S_SendData(SPI2, 3333);
    406          
    407          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0xB538             PUSH     {R3-R5,LR}
   \   00000016   0x6805             LDR      R5,[R0, #+0]
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x40020000
   \   0000001C   0x.... 0x....      LDR.W    R4,??DataTable15_1
   \   00000020   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000024   0x70A0             STRB     R0,[R4, #+2]
    408          
    409          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   00000026   0x78A0             LDRB     R0,[R4, #+2]
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000002C   0xD133             BNE.N    ??SPI2_IRQHandler_1
    410          	 {
    411                  if (I2S2_stLROld==GPIO_PIN_SET)
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD032             BEQ.N    ??SPI2_IRQHandler_2
    412                  {
    413                      I2S2_stNipple = app;           
    414                  }
    415          		else
    416          		{
    417          
    418          			 vRawSens3 = app;
    419          			switch (buffer_switch)
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \   00000036   0x81E5             STRH     R5,[R4, #+14]
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0xB118             CBZ.N    R0,??SPI2_IRQHandler_3
   \   0000003C   0x2802             CMP      R0,#+2
   \   0000003E   0xD01D             BEQ.N    ??SPI2_IRQHandler_4
   \   00000040   0xD30E             BCC.N    ??SPI2_IRQHandler_5
   \   00000042   0xE059             B.N      ??SPI2_IRQHandler_6
    420          			{
    421          				case BUF1_PLAY:
    422          					Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;								
   \                     ??SPI2_IRQHandler_3: (+1)
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable16_4
   \   00000048   0x8801             LDRH     R1,[R0, #+0]
   \   0000004A   0x1C4A             ADDS     R2,R1,#+1
   \   0000004C   0x8002             STRH     R2,[R0, #+0]
   \   0000004E   0x.... 0x....      LDR.W    R2,??DataTable15_4  ;; 0xc00080a0
   \   00000052   0xEB02 0x0141      ADD      R1,R2,R1, LSL #+1
   \   00000056   0xF9B4 0x000E      LDRSH    R0,[R4, #+14]
   \   0000005A   0xF242 0x0228      MOVW     R2,#+8232
   \   0000005E   0xE04A             B.N      ??SPI2_IRQHandler_7
    423          					break;
    424          				case BUF2_PLAY:
    425          					Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \                     ??SPI2_IRQHandler_5: (+1)
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable16_4
   \   00000064   0x8801             LDRH     R1,[R0, #+0]
   \   00000066   0x1C4A             ADDS     R2,R1,#+1
   \   00000068   0x8002             STRH     R2,[R0, #+0]
   \   0000006A   0x.... 0x....      LDR.W    R2,??DataTable15_5  ;; 0xc0010140
   \   0000006E   0xEB02 0x0141      ADD      R1,R2,R1, LSL #+1
   \   00000072   0xF9B4 0x000E      LDRSH    R0,[R4, #+14]
   \   00000076   0xF242 0x0228      MOVW     R2,#+8232
   \   0000007A   0xE03C             B.N      ??SPI2_IRQHandler_7
    426          					break;
    427          				case BUF3_PLAY:
    428          					Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;									
   \                     ??SPI2_IRQHandler_4: (+1)
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable16_4
   \   00000080   0x8801             LDRH     R1,[R0, #+0]
   \   00000082   0x1C4A             ADDS     R2,R1,#+1
   \   00000084   0x0049             LSLS     R1,R1,#+1
   \   00000086   0x8002             STRH     R2,[R0, #+0]
   \   00000088   0xF9B4 0x000E      LDRSH    R0,[R4, #+14]
   \   0000008C   0xF1A1 0x4180      SUB      R1,R1,#+1073741824
   \   00000090   0xF242 0x0228      MOVW     R2,#+8232
   \   00000094   0xE02F             B.N      ??SPI2_IRQHandler_7
    429          					break;
    430          				default:
    431          					break; 
    432          			}
    433          
    434          		}
    435          	 }
    436          	 else
    437          	 {
    438                  if (I2S2_stLROld==GPIO_PIN_RESET)
   \                     ??SPI2_IRQHandler_1: (+1)
   \   00000096   0xB908             CBNZ.N   R0,??SPI2_IRQHandler_8
    439                  {
    440                      I2S2_stNipple = app;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   00000098   0x82E5             STRH     R5,[R4, #+22]
   \   0000009A   0xE02D             B.N      ??SPI2_IRQHandler_6
    441          
    442                  }
    443          		else
    444          		{
    445                      vRawSens4 =app;
    446          			switch (buffer_switch)
   \                     ??SPI2_IRQHandler_8: (+1)
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \   000000A0   0x81A5             STRH     R5,[R4, #+12]
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
   \   000000A4   0xB118             CBZ.N    R0,??SPI2_IRQHandler_9
   \   000000A6   0x2802             CMP      R0,#+2
   \   000000A8   0xD019             BEQ.N    ??SPI2_IRQHandler_10
   \   000000AA   0xD30C             BCC.N    ??SPI2_IRQHandler_11
   \   000000AC   0xE024             B.N      ??SPI2_IRQHandler_6
    447          			{	 
    448          				case BUF1_PLAY:
    449          					Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;								
   \                     ??SPI2_IRQHandler_9: (+1)
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable17
   \   000000B2   0x8801             LDRH     R1,[R0, #+0]
   \   000000B4   0x1C4A             ADDS     R2,R1,#+1
   \   000000B6   0x8002             STRH     R2,[R0, #+0]
   \   000000B8   0x.... 0x....      LDR.W    R2,??DataTable15_4  ;; 0xc00080a0
   \   000000BC   0xF9B4 0x000C      LDRSH    R0,[R4, #+12]
   \   000000C0   0xEB02 0x0141      ADD      R1,R2,R1, LSL #+1
   \   000000C4   0xE015             B.N      ??SPI2_IRQHandler_12
    450          					break;
    451          				case BUF2_PLAY:
    452          					Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \                     ??SPI2_IRQHandler_11: (+1)
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable17
   \   000000CA   0x8801             LDRH     R1,[R0, #+0]
   \   000000CC   0x1C4A             ADDS     R2,R1,#+1
   \   000000CE   0x8002             STRH     R2,[R0, #+0]
   \   000000D0   0x.... 0x....      LDR.W    R2,??DataTable15_5  ;; 0xc0010140
   \   000000D4   0xF9B4 0x000C      LDRSH    R0,[R4, #+12]
   \   000000D8   0xEB02 0x0141      ADD      R1,R2,R1, LSL #+1
   \   000000DC   0xE009             B.N      ??SPI2_IRQHandler_12
    453          					break;
    454          				case BUF3_PLAY:
    455          					Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;									
   \                     ??SPI2_IRQHandler_10: (+1)
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable17
   \   000000E2   0x8801             LDRH     R1,[R0, #+0]
   \   000000E4   0x1C4A             ADDS     R2,R1,#+1
   \   000000E6   0x0049             LSLS     R1,R1,#+1
   \   000000E8   0x8002             STRH     R2,[R0, #+0]
   \   000000EA   0xF9B4 0x000C      LDRSH    R0,[R4, #+12]
   \   000000EE   0xF1A1 0x4180      SUB      R1,R1,#+1073741824
   \                     ??SPI2_IRQHandler_12: (+1)
   \   000000F2   0xF243 0x023C      MOVW     R2,#+12348
   \                     ??SPI2_IRQHandler_7: (+1)
   \   000000F6   0x5250             STRH     R0,[R2, R1]
    456          					break;
    457          				default:
    458          					break; 
    459          			}
    460          		}
    461          	 }
    462          
    463          
    464          	 
    465          #if 0
    466          	  if (iSDO34<4*AUDIO_OUT_BUFFER_SIZE)
    467          	 {
    468          		 TestSDO34[iSDO34++]=app;
    469          	 }
    470          	 else
    471          	 {
    472          		 iSDO34=0;
    473          	 }
    474          
    475          	 if ((WaveRec_idxSens3 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens4 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    476          //             &&(I2S2_stLR!=I2S2_stLROld))
    477          	 {
    478          /*-------------------------------------------------------------------------------------------------------------
    479          			  
    480          	Sequence  Record Data                     Processing Data                 Player Data
    481          			  
    482          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    483          			  
    484          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    485          			  
    486          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    487           ---------------------------------------------------------------------------------------------------------------*/
    488          		/* Recording Audio Data */			             
    489          		 switch (buffer_switch)
    490          		 {
    491          			  case BUF1_PLAY:
    492                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    493                                Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    494          				  else
    495                                Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			  
    496          
    497          				  break;
    498          			  case BUF2_PLAY:
    499                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    500                                Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    501          				  else
    502                                Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			   
    503          				  break;
    504          			  case BUF3_PLAY:
    505                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    506                                Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    507          				  else
    508                                Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    509          				  break;
    510          			  default:
    511          				  break; 
    512          		 }
    513          		
    514          	 }          
    515          #endif		  
    516          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_6: (+1)
   \   000000F8   0x78A0             LDRB     R0,[R4, #+2]
   \   000000FA   0x70E0             STRB     R0,[R4, #+3]
    517          
    518             }
    519          
    520          }
   \   000000FC   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \   000000FE                      REQUIRE Buffer2
   \   000000FE                      REQUIRE Buffer3
   \   000000FE                      REQUIRE Buffer1
    521          
    522          

   \                                 In section .text, align 2, keep-with-next
    523          void SPI4_IRQHandler(void)
    524          {
    525            static uint8_t Main_stLR, Main_stLROld;
                                  ^
Warning[Pe177]: variable "Main_stLR" was declared but never referenced
    526          
    527          
    528            /* SPI in mode Receiver ----------------------------------------------------*/
    529            if(
    530          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    531          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    532               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xD400             BMI.N    ??SPI4_IRQHandler_0
   \   0000000C   0x4770             BX       LR
    533            {
    534          
    535                  uint16_t test;
    536                  test =  SPI_I2S_ReceiveData(SPI4);
   \                     ??SPI4_IRQHandler_0: (+1)
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable16_6  ;; 0x4001340c
   \   00000012   0xB410             PUSH     {R4}
   \   00000014   0x6801             LDR      R1,[R0, #+0]
    537          
    538                  /* Left-Right Mic data */
    539                  //Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    540          
    541                  /* STM32F746 read data from STA321MP, the data is shifted few bit     */
    542                  /* Data from STA321MP is 32bit formart                                */
    543                  /* SPI is just able to read 16 bit format                             */
    544                  /* Therefore, it needs to correct                                     */
    545                  
    546                  /* ---------------------------+++++++++++++++++++++++++++++++---------*/
    547                  /*                  ______DATAL_____              ______DATAR_____    */
    548                  /*                  _____vRawSens5__              ______vRawSens6_    */       
    549          	if (I2S2_stLR==GPIO_PIN_SET)
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000001A   0x7942             LDRB     R2,[R0, #+5]
   \   0000001C   0x7883             LDRB     R3,[R0, #+2]
   \   0000001E   0xB289             UXTH     R1,R1
   \   00000020   0x2B01             CMP      R3,#+1
   \   00000022   0xD138             BNE.N    ??SPI4_IRQHandler_1
    550          	{
    551                      if (Main_stLROld==GPIO_PIN_SET)
   \   00000024   0x2A01             CMP      R2,#+1
   \   00000026   0xD037             BEQ.N    ??SPI4_IRQHandler_2
    552                      {
    553                         SPI4_stNipple = (test);    
    554                      }
    555                      else
    556                      {
    557                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000028   0x7842             LDRB     R2,[R0, #+1]
   \   0000002A   0xF9B0 0x3018      LDRSH    R3,[R0, #+24]
    558                         if (WaveRec_idxSens5 < (2*AUDIO_OUT_BUFFER_SIZE+5))
   \   0000002E   0xF640 0x0405      MOVW     R4,#+2053
   \   00000032   0x40D1             LSRS     R1,R1,R2
   \   00000034   0x7842             LDRB     R2,[R0, #+1]
   \   00000036   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   0000003A   0xFA03 0xF202      LSL      R2,R3,R2
   \   0000003E   0x4311             ORRS     R1,R2,R1
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable16_7
   \   00000044   0x8201             STRH     R1,[R0, #+16]
   \   00000046   0x8813             LDRH     R3,[R2, #+0]
   \   00000048   0x42A3             CMP      R3,R4
   \   0000004A   0xDA5A             BGE.N    ??SPI4_IRQHandler_3
    559                         {
    560                              /*-------------------------------------------------------------------------------------------------------------                                             
    561                              Sequence  Record Data                     Processing Data                 Player Data
    562                                                
    563                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    564                                                
    565                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    566                                                
    567                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    568                               ---------------------------------------------------------------------------------------------------------------*/                     
    569                               /* Recording Audio Data */			             
    570                               switch (buffer_switch)
   \   0000004C   0x.... 0x....      LDR.W    R3,??DataTable15_2
   \   00000050   0x781B             LDRB     R3,[R3, #+0]
   \   00000052   0xB11B             CBZ.N    R3,??SPI4_IRQHandler_4
   \   00000054   0x2B02             CMP      R3,#+2
   \   00000056   0xD015             BEQ.N    ??SPI4_IRQHandler_5
   \   00000058   0xD30A             BCC.N    ??SPI4_IRQHandler_6
   \   0000005A   0xE052             B.N      ??SPI4_IRQHandler_3
    571                               {
    572                                   case BUF1_PLAY:
    573                                       Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_4: (+1)
   \   0000005C   0x8813             LDRH     R3,[R2, #+0]
   \   0000005E   0x1C5C             ADDS     R4,R3,#+1
   \   00000060   0x8014             STRH     R4,[R2, #+0]
   \   00000062   0x.... 0x....      LDR.W    R2,??DataTable15_4  ;; 0xc00080a0
   \   00000066   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000006A   0xF244 0x0350      MOVW     R3,#+16464
   \   0000006E   0xE047             B.N      ??SPI4_IRQHandler_7
    574          
    575                                       break;
    576                                   case BUF2_PLAY:
    577                                       Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_6: (+1)
   \   00000070   0x8813             LDRH     R3,[R2, #+0]
   \   00000072   0x1C5C             ADDS     R4,R3,#+1
   \   00000074   0x8014             STRH     R4,[R2, #+0]
   \   00000076   0x.... 0x....      LDR.W    R2,??DataTable17_1  ;; 0xc0010140
   \   0000007A   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000007E   0xF244 0x0350      MOVW     R3,#+16464
   \   00000082   0xE03D             B.N      ??SPI4_IRQHandler_7
    578          
    579                                       break;
    580                                   case BUF3_PLAY:
    581                                       Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_5: (+1)
   \   00000084   0x8813             LDRH     R3,[R2, #+0]
   \   00000086   0x1C5C             ADDS     R4,R3,#+1
   \   00000088   0x8014             STRH     R4,[R2, #+0]
   \   0000008A   0x005A             LSLS     R2,R3,#+1
   \   0000008C   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \   00000090   0xF244 0x0350      MOVW     R3,#+16464
   \   00000094   0xE034             B.N      ??SPI4_IRQHandler_7
    582          
    583                                       break;                          
    584                                   default:
    585                                       break;
    586                               }
    587                         }
    588          	   }
    589                  }
    590          	else
    591          	{
    592                    if (Main_stLROld==GPIO_PIN_RESET)
   \                     ??SPI4_IRQHandler_1: (+1)
   \   00000096   0xB90A             CBNZ.N   R2,??SPI4_IRQHandler_8
    593                    {
    594                        SPI4_stNipple = (test);	  
   \                     ??SPI4_IRQHandler_2: (+1)
   \   00000098   0x8301             STRH     R1,[R0, #+24]
   \   0000009A   0xE032             B.N      ??SPI4_IRQHandler_3
    595          
    596                    }
    597                    else
    598                    {
    599                         vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI4_IRQHandler_8: (+1)
   \   0000009C   0x7842             LDRB     R2,[R0, #+1]
   \   0000009E   0xF9B0 0x3018      LDRSH    R3,[R0, #+24]
    600                         if (WaveRec_idxSens6 < (2*AUDIO_OUT_BUFFER_SIZE+5))
   \   000000A2   0xF640 0x0405      MOVW     R4,#+2053
   \   000000A6   0x40D1             LSRS     R1,R1,R2
   \   000000A8   0x7842             LDRB     R2,[R0, #+1]
   \   000000AA   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   000000AE   0xFA03 0xF202      LSL      R2,R3,R2
   \   000000B2   0x4311             ORRS     R1,R2,R1
   \   000000B4   0x.... 0x....      LDR.W    R2,??DataTable16_8
   \   000000B8   0x8241             STRH     R1,[R0, #+18]
   \   000000BA   0x8813             LDRH     R3,[R2, #+0]
   \   000000BC   0x42A3             CMP      R3,R4
   \   000000BE   0xDA20             BGE.N    ??SPI4_IRQHandler_3
    601                         {
    602                              /*-------------------------------------------------------------------------------------------------------------                                             
    603                              Sequence  Record Data                     Processing Data                 Player Data
    604                                                
    605                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    606                                                
    607                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    608                                                
    609                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    610                               ---------------------------------------------------------------------------------------------------------------*/                 
    611                                /* Recording Audio Data */			             
    612                               switch (buffer_switch)
   \   000000C0   0x.... 0x....      LDR.W    R3,??DataTable15_2
   \   000000C4   0x781B             LDRB     R3,[R3, #+0]
   \   000000C6   0xB11B             CBZ.N    R3,??SPI4_IRQHandler_9
   \   000000C8   0x2B02             CMP      R3,#+2
   \   000000CA   0xD011             BEQ.N    ??SPI4_IRQHandler_10
   \   000000CC   0xD308             BCC.N    ??SPI4_IRQHandler_11
   \   000000CE   0xE018             B.N      ??SPI4_IRQHandler_3
    613                               {
    614                                   case BUF1_PLAY:
    615                                       Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_9: (+1)
   \   000000D0   0x8813             LDRH     R3,[R2, #+0]
   \   000000D2   0x1C5C             ADDS     R4,R3,#+1
   \   000000D4   0x8014             STRH     R4,[R2, #+0]
   \   000000D6   0x.... 0x....      LDR.W    R2,??DataTable15_4  ;; 0xc00080a0
   \   000000DA   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000DE   0xE00D             B.N      ??SPI4_IRQHandler_12
    616           
    617                                       break;
    618                                   case BUF2_PLAY:
    619                                       Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_11: (+1)
   \   000000E0   0x8813             LDRH     R3,[R2, #+0]
   \   000000E2   0x1C5C             ADDS     R4,R3,#+1
   \   000000E4   0x8014             STRH     R4,[R2, #+0]
   \   000000E6   0x.... 0x....      LDR.W    R2,??DataTable17_1  ;; 0xc0010140
   \   000000EA   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000EE   0xE005             B.N      ??SPI4_IRQHandler_12
    620                 
    621                                       break;
    622                                   case BUF3_PLAY:
    623                                       Buffer1.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_10: (+1)
   \   000000F0   0x8813             LDRH     R3,[R2, #+0]
   \   000000F2   0x1C5C             ADDS     R4,R3,#+1
   \   000000F4   0x8014             STRH     R4,[R2, #+0]
   \   000000F6   0x005A             LSLS     R2,R3,#+1
   \   000000F8   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \                     ??SPI4_IRQHandler_12: (+1)
   \   000000FC   0xF245 0x0364      MOVW     R3,#+20580
   \                     ??SPI4_IRQHandler_7: (+1)
   \   00000100   0x5299             STRH     R1,[R3, R2]
    624           
    625                                       break;                          
    626                                   default:
    627                                       break;
    628                               }
    629                         }
    630                    }		
    631          	}
    632          #if 0
    633          	/* The code to store data in to buffer for testing purpose */
    634          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
    635          	{
    636          		TestSDO56[iSDO56++]=test;
    637          	}
    638          	else
    639          	{
    640          		iSDO56=0;
    641          	}
    642          #endif
    643          
    644          	/* Update Old value */	  
    645          	Main_stLROld=I2S2_stLR;	  
   \                     ??SPI4_IRQHandler_3: (+1)
   \   00000102   0x7881             LDRB     R1,[R0, #+2]
   \   00000104   0x7141             STRB     R1,[R0, #+5]
    646               
    647            }      
    648          }
   \   00000106   0xBC10             POP      {R4}
   \   00000108   0x4770             BX       LR               ;; return
   \   0000010A                      REQUIRE Buffer2
   \   0000010A                      REQUIRE Buffer3
   \   0000010A                      REQUIRE Buffer1

   \                                 In section .bss, align 4
   \                     WaveRecord_flgInt:
   \   00000000                      DS8 1
   \                     SPI4_stPosShft:
   \   00000001                      DS8 1
   \                     I2S2_stLR:
   \   00000002                      DS8 1
   \                     I2S2_stLROld:
   \   00000003                      DS8 1
   \   00000004                      DS8 1
   \   00000005                      DS8 1
   \                     WaveRec_idxTest:
   \   00000006                      DS8 2
   \                     vRawSens1:
   \   00000008                      DS8 2
   \                     vRawSens2:
   \   0000000A                      DS8 2
   \                     vRawSens4:
   \   0000000C                      DS8 2
   \                     vRawSens3:
   \   0000000E                      DS8 2
   \                     vRawSens5:
   \   00000010                      DS8 2
   \                     vRawSens6:
   \   00000012                      DS8 2
   \                     SPI1_stNipple:
   \   00000014                      DS8 2
   \                     I2S2_stNipple:
   \   00000016                      DS8 2
   \                     SPI4_stNipple:
   \   00000018                      DS8 2
   \   0000001A                      DS8 2
   \                     hi2s1:
   \   0000001C                      DS8 64

   \                                 In section .bss, align 4
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hi2s2:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
   \                     hdma_spi2_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi3_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi5_rx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi6_rx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 2
   \                     idxFrmPDMMic8:
   \   00000000                      DS8 2
    649          
    650          
    651          
    652          

   \                                 In section .text, align 2, keep-with-next
    653          void SPI5_IRQHandler(void)
    654          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    655            //static uint16_t stNipple;
    656            //static uint8_t stLR, stOder;
    657          
    658            /* USER CODE BEGIN SPI5_IRQn 0 */
    659          
    660            /* USER CODE END SPI5_IRQn 0 */
    661            //HAL_SPI_IRQHandler(&hspi5);
    662            /* USER CODE BEGIN SPI5_IRQn 1 */
    663          
    664            /* USER CODE END SPI5_IRQn 1 */
    665              /* Check if data are available in SPI Data register */
    666            /* SPI in mode Receiver ----------------------------------------------------*/
    667            if(
    668               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    669               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    670               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_2
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xD432             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD52F             BPL.N    ??SPI5_IRQHandler_0
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD52C             BPL.N    ??SPI5_IRQHandler_0
    671            {
    672          
    673          
    674             uint16_t test;
    675             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x4001500c
    676             SPI5->DR = 3333;
   \   0000001E   0xF640 0x5205      MOVW     R2,#+3333
   \   00000022   0x6801             LDR      R1,[R0, #+0]
   \   00000024   0x6002             STR      R2,[R0, #+0]
    677          
    678            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000026   0x8822             LDRH     R2,[R4, #+0]
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable17_4
   \   0000002C   0xB28B             UXTH     R3,R1
   \   0000002E   0x0209             LSLS     R1,R1,#+8
   \   00000030   0xEA41 0x2113      ORR      R1,R1,R3, LSR #+8
   \   00000034   0xF820 0x1012      STRH     R1,[R0, R2, LSL #+1]
   \   00000038   0x1C51             ADDS     R1,R2,#+1
   \   0000003A   0x8021             STRH     R1,[R4, #+0]
    679            
    680            //volume = 64;
    681            
    682            if (idxMic8>=64)
   \   0000003C   0xB289             UXTH     R1,R1
   \   0000003E   0x2940             CMP      R1,#+64
   \   00000040   0xDB18             BLT.N    ??SPI5_IRQHandler_0
    683            {
    684          	if (buffer_switch != 1)
   \   00000042   0x.... 0x....      LDR.W    R5,??DataTable15_2
   \   00000046   0x6EA1             LDR      R1,[R4, #+104]
   \   00000048   0x.... 0x....      LDR.W    R2,??DataTable17_5
   \   0000004C   0x.... 0x....      LDR.W    R3,??DataTable17_6
   \   00000050   0x782D             LDRB     R5,[R5, #+0]
    685          	{
    686          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    687          						  (PDMFilter_InitStruct *)&Filter[0]);
    688          	}
    689          	else
    690          	{
    691          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    692          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \   00000052   0x1D1B             ADDS     R3,R3,#+4
   \   00000054   0x7812             LDRB     R2,[R2, #+0]
   \   00000056   0x8865             LDRH     R5,[R4, #+2]
   \   00000058   0xEB01 0x1145      ADD      R1,R1,R5, LSL #+5
   \   0000005C   0x.... 0x....      BL       PDM_Filter_64_LSB
    693          	}
    694          	idxMic8=0;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x8020             STRH     R0,[R4, #+0]
    695          	cntPos++;
   \   00000064   0x8860             LDRH     R0,[R4, #+2]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0x8060             STRH     R0,[R4, #+2]
    696          	if (cntPos>=256) cntPos=0;
   \   0000006A   0x8860             LDRH     R0,[R4, #+2]
   \   0000006C   0x28FF             CMP      R0,#+255
   \   0000006E   0xBFC4             ITT      GT 
   \   00000070   0x2000             MOVGT    R0,#+0
   \   00000072   0x8060             STRHGT   R0,[R4, #+2]
    697            }
    698              
    699            }
    700            
    701          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   00000074   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    702          
    703          /* SPI5 init function */
    704          
    705          

   \                                 In section .text, align 2, keep-with-next
    706          void SPI6_IRQHandler(void)
    707          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    708            /* SPI in mode Receiver ----------------------------------------------------*/
    709            if(
    710          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    711               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    712               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_7
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0789             LSLS     R1,R1,#+30
   \   0000000C   0xD52F             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD52C             BPL.N    ??SPI6_IRQHandler_0
    713            {
    714          
    715          
    716               uint16_t test;
    717               test =  SPI_I2S_ReceiveData(SPI6);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable17_8  ;; 0x4001540c
    718               SPI6->DR = 3333;
   \   00000018   0xF640 0x5205      MOVW     R2,#+3333
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0x6002             STR      R2,[R0, #+0]
    719          
    720              pDataMic7[idxMic7++] =	HTONS(test);
   \   00000020   0x8822             LDRH     R2,[R4, #+0]
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable17_9
   \   00000026   0xB28B             UXTH     R3,R1
   \   00000028   0x0209             LSLS     R1,R1,#+8
   \   0000002A   0xEA41 0x2113      ORR      R1,R1,R3, LSR #+8
   \   0000002E   0xF820 0x1012      STRH     R1,[R0, R2, LSL #+1]
   \   00000032   0x1C51             ADDS     R1,R2,#+1
   \   00000034   0x8021             STRH     R1,[R4, #+0]
    721          
    722              //volume = 64;
    723          
    724              if (idxMic7>=64)
   \   00000036   0xB289             UXTH     R1,R1
   \   00000038   0x2940             CMP      R1,#+64
   \   0000003A   0xDB18             BLT.N    ??SPI6_IRQHandler_0
    725              {
    726                if (buffer_switch != 1)
   \   0000003C   0x.... 0x....      LDR.W    R5,??DataTable15_2
   \   00000040   0x6EA1             LDR      R1,[R4, #+104]
   \   00000042   0x.... 0x....      LDR.W    R2,??DataTable17_5
   \   00000046   0x.... 0x....      LDR.W    R3,??DataTable17_6
   \   0000004A   0x782D             LDRB     R5,[R5, #+0]
    727                {
    728                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    729                                                          (PDMFilter_InitStruct *)&Filter[1]);
    730                }
    731                else
    732                {
    733                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    734                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \   0000004C   0x3338             ADDS     R3,R3,#+56
   \   0000004E   0x7812             LDRB     R2,[R2, #+0]
   \   00000050   0x8865             LDRH     R5,[R4, #+2]
   \   00000052   0xEB01 0x1145      ADD      R1,R1,R5, LSL #+5
   \   00000056   0x.... 0x....      BL       PDM_Filter_64_LSB
    735                }
    736                idxMic7=0;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x8020             STRH     R0,[R4, #+0]
    737                cntPos7++;
   \   0000005E   0x8860             LDRH     R0,[R4, #+2]
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \   00000062   0x8060             STRH     R0,[R4, #+2]
    738                if (cntPos7>=256) cntPos7=0;
   \   00000064   0x8860             LDRH     R0,[R4, #+2]
   \   00000066   0x28FF             CMP      R0,#+255
   \   00000068   0xBFC4             ITT      GT 
   \   0000006A   0x2000             MOVGT    R0,#+0
   \   0000006C   0x8060             STRHGT   R0,[R4, #+2]
    739              }
    740              
    741            }
    742          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   0000006E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    743          
    744          
    745          

   \                                 In section .text, align 2, keep-with-next
    746          void MIC1TO6_Init(void)
    747          {
   \                     MIC1TO6_Init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    748          	SPI5_Init();
   \   00000002   0x.... 0x....      BL       SPI5_Init
    749          	SPI6_Init();
   \   00000006   0x.... 0x....      BL       SPI6_Init
    750          	StartRecMic7_8();
   \   0000000A   0xF44F 0x5280      MOV      R2,#+4096
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable17_10
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable17_11
   \   00000016   0x.... 0x....      LDR.W    R4,??DataTable12_1  ;; 0x40020000
   \   0000001A   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   \   0000001E   0xF44F 0x5280      MOV      R2,#+4096
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable17_12
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable17_13
   \   0000002A   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable17_6
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x7001             STRB     R1,[R0, #+0]
   \   00000036   0x7041             STRB     R1,[R0, #+1]
    751          	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_0: (+1)
   \   00000038   0x2110             MOVS     R1,#+16
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000040   0x2801             CMP      R0,#+1
   \   00000042   0xD0F9             BEQ.N    ??MIC1TO6_Init_0
    752          	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_1: (+1)
   \   00000044   0x2110             MOVS     R1,#+16
   \   00000046   0x4620             MOV      R0,R4
   \   00000048   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   0000004C   0x2801             CMP      R0,#+1
   \   0000004E   0xD0F9             BEQ.N    ??MIC1TO6_Init_1
    753          	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_2: (+1)
   \   00000050   0x2110             MOVS     R1,#+16
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD0F9             BEQ.N    ??MIC1TO6_Init_2
    754          	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_3: (+1)
   \   0000005C   0x2110             MOVS     R1,#+16
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD0F9             BEQ.N    ??MIC1TO6_Init_3
    755              HAL_Delay(2);
   \   00000068   0x2002             MOVS     R0,#+2
   \   0000006A   0x.... 0x....      BL       HAL_Delay
    756          
    757          
    758            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_4: (+1)
   \   0000006E   0x2110             MOVS     R1,#+16
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000076   0x2801             CMP      R0,#+1
   \   00000078   0xD0F9             BEQ.N    ??MIC1TO6_Init_4
    759            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_5: (+1)
   \   0000007A   0x2110             MOVS     R1,#+16
   \   0000007C   0x4620             MOV      R0,R4
   \   0000007E   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD0F9             BEQ.N    ??MIC1TO6_Init_5
    760            I2S1_Init(); /* I2S1   --> SDO12 */
   \   00000086   0x.... 0x....      LDR.W    R6,??DataTable15_1
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable17_14  ;; 0x40013000
   \   0000008E   0x61F0             STR      R0,[R6, #+28]
   \   00000090   0x2020             MOVS     R0,#+32
   \   00000092   0x6270             STR      R0,[R6, #+36]
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x62B0             STR      R0,[R6, #+40]
   \   00000098   0xF44F 0x7580      MOV      R5,#+256
   \   0000009C   0x62F0             STR      R0,[R6, #+44]
   \   0000009E   0x2008             MOVS     R0,#+8
   \   000000A0   0x6370             STR      R0,[R6, #+52]
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0xF44F 0x577A      MOV      R7,#+16000
   \   000000A8   0x63B0             STR      R0,[R6, #+56]
   \   000000AA   0x6235             STR      R5,[R6, #+32]
   \   000000AC   0xF106 0x001C      ADD      R0,R6,#+28
   \   000000B0   0x6337             STR      R7,[R6, #+48]
   \   000000B2   0x.... 0x....      BL       HAL_I2S_Init
   \   000000B6   0x69F0             LDR      R0,[R6, #+28]
   \   000000B8   0x6841             LDR      R1,[R0, #+4]
   \   000000BA   0xF041 0x0140      ORR      R1,R1,#0x40
   \   000000BE   0x6041             STR      R1,[R0, #+4]
   \   000000C0   0x69C1             LDR      R1,[R0, #+28]
   \   000000C2   0xF441 0x6180      ORR      R1,R1,#0x400
   \   000000C6   0x61C1             STR      R1,[R0, #+28]
    761            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_6: (+1)
   \   000000C8   0x2110             MOVS     R1,#+16
   \   000000CA   0x4620             MOV      R0,R4
   \   000000CC   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   000000D0   0x2801             CMP      R0,#+1
   \   000000D2   0xD0F9             BEQ.N    ??MIC1TO6_Init_6
    762            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_7: (+1)
   \   000000D4   0x2110             MOVS     R1,#+16
   \   000000D6   0x4620             MOV      R0,R4
   \   000000D8   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD0F9             BEQ.N    ??MIC1TO6_Init_7
    763            I2S2_Init(); /* I2S2   --> SDO34 */
   \   000000E0   0x.... 0x....      LDR.W    R6,??DataTable16_2
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable17_15  ;; 0x40003800
   \   000000E8   0x6030             STR      R0,[R6, #+0]
   \   000000EA   0x2020             MOVS     R0,#+32
   \   000000EC   0x60B0             STR      R0,[R6, #+8]
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x60F0             STR      R0,[R6, #+12]
   \   000000F2   0x6130             STR      R0,[R6, #+16]
   \   000000F4   0x61B0             STR      R0,[R6, #+24]
   \   000000F6   0x2001             MOVS     R0,#+1
   \   000000F8   0x61F0             STR      R0,[R6, #+28]
   \   000000FA   0x4630             MOV      R0,R6
   \   000000FC   0x6075             STR      R5,[R6, #+4]
   \   000000FE   0x6177             STR      R7,[R6, #+20]
   \   00000100   0x.... 0x....      BL       HAL_I2S_Init
   \   00000104   0x6830             LDR      R0,[R6, #+0]
   \   00000106   0x6841             LDR      R1,[R0, #+4]
   \   00000108   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000010C   0x6041             STR      R1,[R0, #+4]
   \   0000010E   0x69C1             LDR      R1,[R0, #+28]
   \   00000110   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000114   0x61C1             STR      R1,[R0, #+28]
    764            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_8: (+1)
   \   00000116   0x2110             MOVS     R1,#+16
   \   00000118   0x4620             MOV      R0,R4
   \   0000011A   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   0000011E   0x2801             CMP      R0,#+1
   \   00000120   0xD0F9             BEQ.N    ??MIC1TO6_Init_8
    765            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_9: (+1)
   \   00000122   0x2110             MOVS     R1,#+16
   \   00000124   0x4620             MOV      R0,R4
   \   00000126   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   0000012A   0x2800             CMP      R0,#+0
   \   0000012C   0xD0F9             BEQ.N    ??MIC1TO6_Init_9
    766            SPI4_Init(); /* SPI4   --> SDO56 */
   \   0000012E   0xE8BD 0x40F1      POP      {R0,R4-R7,LR}
   \   00000132   0x....             B.N      SPI4_Init
    767          
    768          
    769          }
    770          

   \                                 In section .text, align 2, keep-with-next
    771          void StartRecMic7_8 (void)
    772          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    773          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0xF44F 0x5280      MOV      R2,#+4096
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable17_10
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable17_11
   \   0000000E   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    774          #if (0)
    775          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
    776          #else
    777          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000012   0xF44F 0x5280      MOV      R2,#+4096
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable17_12
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable17_13
   \   0000001E   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    778          #endif
    779          	  swtSDO7 = 0;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable17_6
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x7001             STRB     R1,[R0, #+0]
    780          	  swtSDO8 = 0;
   \   0000002A   0x7041             STRB     R1,[R0, #+1]
    781          
    782          }
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
    783          
    784          /* I2S1 init function */
    785          /* Read data of MIC12 */
    786          static void I2S1_Init(void)
    787          {
    788          #if 1
    789            hi2s1.Instance = SPI1;
    790            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
    791            hi2s1.Init.Standard = I2S_STANDARD_LSB;
    792            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    793            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    794            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    795            hi2s1.Init.CPOL = I2S_CPOL_HIGH;
    796            hi2s1.Init.ClockSource = I2S_CLOCK_EXTERNAL;
    797            HAL_I2S_Init(&hi2s1);
    798          
    799            /* Enable TXE and ERR interrupt */
    800           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
    801           
    802           __HAL_I2S_ENABLE(&hi2s1);
    803          #else
    804          	hspi1.Instance = SPI1;
    805          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    806          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    807          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    808          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    809          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    810          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    811          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    812          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    813          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    814          	hspi1.Init.CRCPolynomial = 7;
    815          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    816          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    817          	//hspi4.RxISR = SPI5_CallBack;
    818          	HAL_SPI_Init(&hspi1);
    819          
    820          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    821            /* Enable TXE, RXNE and ERR interrupt */
    822           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    823          
    824           __HAL_SPI_ENABLE(&hspi1);
    825          
    826          #endif
    827          }
    828          
    829          /* I2S2 init function */
    830          /* Read data of MIC34 */
    831          
    832          static void I2S2_Init(void)
    833          {
    834          
    835          #if 1
    836           //HAL_I2S_DeInit(&hi2s2);
    837           hi2s2.Instance = SPI2;
    838           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
    839           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
    840           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
    841           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    842           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    843           hi2s2.Init.CPOL = I2S_CPOL_LOW;
    844           hi2s2.Init.ClockSource = I2S_CLOCK_EXTERNAL;
    845          
    846           HAL_I2S_Init(&hi2s2);
    847           /* Enable TXE and ERR interrupt */
    848           __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
    849           __HAL_I2S_ENABLE(&hi2s2);
    850          
    851          #else
    852             hspi2.Instance = SPI2;
    853             hspi2.Init.Mode = SPI_MODE_SLAVE;
    854             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    855             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
    856             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
    857             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
    858             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    859             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
    860             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
    861             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    862             hspi2.Init.CRCPolynomial = 7;
    863             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    864             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    865             HAL_SPI_Init(&hspi2);
    866          
    867          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    868           /* Enable TXE, RXNE and ERR interrupt */
    869          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
    870          
    871          __HAL_SPI_ENABLE(&hspi2);
    872          
    873          #endif
    874          
    875          
    876          }
    877          
    878          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    879          void SPI4_Init(void)
    880          {
   \                     SPI4_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    881          
    882            hspi4.Instance = SPI4;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable16_5
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable17_16  ;; 0x40013400
   \   0000000A   0x6020             STR      R0,[R4, #+0]
    883            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6060             STR      R0,[R4, #+4]
    884            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000010   0xF44F 0x6080      MOV      R0,#+1024
   \   00000014   0x60A0             STR      R0,[R4, #+8]
    885            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000016   0xF44F 0x6070      MOV      R0,#+3840
   \   0000001A   0x60E0             STR      R0,[R4, #+12]
    886            hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x6120             STR      R0,[R4, #+16]
    887            hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6160             STR      R0,[R4, #+20]
    888            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000024   0xF44F 0x7000      MOV      R0,#+512
   \   00000028   0x61A0             STR      R0,[R4, #+24]
    889            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x6220             STR      R0,[R4, #+32]
    890            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0x6260             STR      R0,[R4, #+36]
    891            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000030   0x62A0             STR      R0,[R4, #+40]
    892            hspi4.Init.CRCPolynomial = 7;
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0x62E0             STR      R0,[R4, #+44]
    893            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x6320             STR      R0,[R4, #+48]
    894            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000003A   0x6360             STR      R0,[R4, #+52]
    895            HAL_SPI_Init(&hspi4);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       HAL_SPI_Init
    896          
    897            /* Enable TXE, RXNE and ERR interrupt */
    898           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x6841             LDR      R1,[R0, #+4]
   \   00000046   0xF041 0x0160      ORR      R1,R1,#0x60
   \   0000004A   0x6041             STR      R1,[R0, #+4]
    899          
    900           __HAL_SPI_ENABLE(&hspi4);
   \   0000004C   0x6801             LDR      R1,[R0, #+0]
   \   0000004E   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000052   0x6001             STR      R1,[R0, #+0]
    901          }
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
    902          
    903          

   \                                 In section .text, align 2, keep-with-next
    904          void Mic7Rec(void)
    905          {
    906              SPI5_Init();
   \                     Mic7Rec: (+1)
   \   00000000   0x....             B.N      SPI5_Init
    907          }
    908          

   \                                 In section .text, align 2, keep-with-next
    909          void Mic8Rec(void)
    910          {
    911              SPI6_Init();
   \                     Mic8Rec: (+1)
   \   00000000   0x....             B.N      ?Subroutine0
    912          }
    913          
    914          
    915          /* SPI5 init function */

   \                                 In section .text, align 4, keep-with-next
    916          void SPI5_Init(void)
    917          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    918          	
    919              /* Enable CRC module */
    920              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40023830
    921          	for (char i=0; i< 2; i++)
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable17_17
   \   0000000A   0xED2D 0x8B02      VPUSH    {D8}
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0x2502             MOVS     R5,#+2
   \   00000012   0xF44F 0x567A      MOV      R6,#+16000
   \   00000016   0xEEB2 0x8A04      VMOV.F32 S16,#10.0
   \   0000001A   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   0000001E   0xEDDF 0x....      VLDR.W   S17,??DataTable11  ;; 0x45fa0000
   \   00000022   0x6001             STR      R1,[R0, #+0]
    922          	{
    923          		/* Filter LP & HP Init */
    924          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \                     ??SPI5_Init_0: (+1)
   \   00000024   0xEDC4 0x8A01      VSTR     S17,[R4, #+4]
    925          		Filter[i].HP_HZ = 10;
    926          		Filter[i].Fs = 16000;    //sop1hc: 16000
    927          		Filter[i].Out_MicChannels = 1;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xED84 0x8A02      VSTR     S16,[R4, #+8]
   \   0000002E   0x8026             STRH     R6,[R4, #+0]
   \   00000030   0x81E0             STRH     R0,[R4, #+14]
    928          		Filter[i].In_MicChannels = 1;
   \   00000032   0x81A0             STRH     R0,[R4, #+12]
    929          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       PDM_Filter_Init
    930          	}
   \   0000003A   0x3434             ADDS     R4,R4,#+52
   \   0000003C   0x1E6D             SUBS     R5,R5,#+1
   \   0000003E   0xD1F1             BNE.N    ??SPI5_Init_0
    931          
    932          
    933            hspi5.Instance = SPI5;
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable17_2
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable17_18  ;; 0x40015000
   \   00000048   0x6041             STR      R1,[R0, #+4]
    934            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x6081             STR      R1,[R0, #+8]
    935            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000004E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000052   0x60C1             STR      R1,[R0, #+12]
    936            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000054   0xF44F 0x6170      MOV      R1,#+3840
   \   00000058   0x6101             STR      R1,[R0, #+16]
    937            hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000005A   0x2102             MOVS     R1,#+2
   \   0000005C   0x6141             STR      R1,[R0, #+20]
    938            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x6181             STR      R1,[R0, #+24]
    939            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000062   0xF44F 0x7100      MOV      R1,#+512
   \   00000066   0x61C1             STR      R1,[R0, #+28]
    940            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x6241             STR      R1,[R0, #+36]
    941            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000006C   0x6281             STR      R1,[R0, #+40]
    942            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000006E   0x62C1             STR      R1,[R0, #+44]
    943            hspi5.Init.CRCPolynomial = 7;
   \   00000070   0x2107             MOVS     R1,#+7
   \   00000072   0x6301             STR      R1,[R0, #+48]
    944            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0x6341             STR      R1,[R0, #+52]
    945            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000078   0x6381             STR      R1,[R0, #+56]
    946            //hspi5.RxISR = SPI5_CallBack;
    947            HAL_SPI_Init(&hspi5);
   \   0000007A   0x1D00             ADDS     R0,R0,#+4
   \   0000007C   0xECBD 0x8B02      VPOP     {D8}
   \   00000080   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000084   0x.... 0x....      B.W      HAL_SPI_Init
    948          
    949          
    950            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    951            /* Enable TXE, RXNE and ERR interrupt */
    952           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
    953          
    954           //__HAL_SPI_ENABLE(&hspi5);
    955          
    956          }
    957          

   \                                 In section .text, align 2, keep-with-next
    958          void SPI6_Init(void)
   \                     SPI6_Init: (+1)
   \   00000000   0xBF00             Nop      
    959          {
    960          	
    961            hspi6.Instance = SPI6;
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_7
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable17_19  ;; 0x40015400
   \   00000008   0x6041             STR      R1,[R0, #+4]
    962            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6081             STR      R1,[R0, #+8]
    963            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x60C1             STR      R1,[R0, #+12]
    964            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6101             STR      R1,[R0, #+16]
    965            hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6141             STR      R1,[R0, #+20]
    966            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6181             STR      R1,[R0, #+24]
    967            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x61C1             STR      R1,[R0, #+28]
    968            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x6241             STR      R1,[R0, #+36]
    969            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002C   0x6281             STR      R1,[R0, #+40]
    970            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000002E   0x62C1             STR      R1,[R0, #+44]
    971            hspi6.Init.CRCPolynomial = 7;
   \   00000030   0x2107             MOVS     R1,#+7
   \   00000032   0x6301             STR      R1,[R0, #+48]
    972            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x6341             STR      R1,[R0, #+52]
    973            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000038   0x6381             STR      R1,[R0, #+56]
    974            //hspi6.RxISR = SPI6_CallBack;
    975            HAL_SPI_Init(&hspi6);
   \   0000003A   0x1D00             ADDS     R0,R0,#+4
   \   0000003C   0x.... 0x....      B.W      HAL_SPI_Init
    976          
    977          
    978            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    979            /* Enable TXE, RXNE and ERR interrupt */
    980           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
    981          
    982           //__HAL_SPI_ENABLE(&hspi6);
    983          
    984          }
    985          
    986          
    987          
    988          

   \                                 In section .text, align 2, keep-with-next
    989          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
    990          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
    991          
    992            GPIO_InitTypeDef GPIO_InitStruct;
    993            if (hspi->Instance==SPI1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable17_14  ;; 0x40013000
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD131             BNE.N    ??HAL_SPI_MspInit_0
    994            {
    995          	  /* USER CODE BEGIN SPI1_MspInit 0 */
    996          	  
    997          	  /* USER CODE END SPI1_MspInit 0 */
    998          	  /* Peripheral clock enable */
    999          	  __SPI1_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable12  ;; 0x40023830
   1000          	  __GPIOA_CLK_ENABLE();
   1001          	  __GPIOC_CLK_ENABLE();
   1002          	  
   1003          	  /**I2S1 GPIO Configuration	
   1004          		PA4 	------> I2S1_WS --> LRCKO
   1005          		PA5 	------> I2S1_CK --> BICKO
   1006          		PA7 	------> I2S1_SD --> SDO12
   1007          		PC4 	------> I2S1_MCK
   1008          		*/
   1009          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
   1010          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1011          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1012          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1013          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1014          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000014   0xA901             ADD      R1,SP,#+4
   \   00000016   0x6968             LDR      R0,[R5, #+20]
   \   00000018   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   0000001C   0x6168             STR      R0,[R5, #+20]
   \   0000001E   0x6968             LDR      R0,[R5, #+20]
   \   00000020   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x6828             LDR      R0,[R5, #+0]
   \   0000002A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000002E   0x6028             STR      R0,[R5, #+0]
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x6828             LDR      R0,[R5, #+0]
   \   0000003C   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000040   0x6028             STR      R0,[R5, #+0]
   \   00000042   0x6828             LDR      R0,[R5, #+0]
   \   00000044   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   \   0000004C   0x20F0             MOVS     R0,#+240
   \   0000004E   0x9001             STR      R0,[SP, #+4]
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x9002             STR      R0,[SP, #+8]
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x9003             STR      R0,[SP, #+12]
   \   00000058   0x2003             MOVS     R0,#+3
   \   0000005A   0x9004             STR      R0,[SP, #+16]
   \   0000005C   0x2005             MOVS     R0,#+5
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x....             LDR.N    R0,??DataTable12_1  ;; 0x40020000
   \   00000062   0x.... 0x....      BL       HAL_GPIO_Init
   1015          	  
   1016          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
   1017          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1018          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
   1019          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1020          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1021          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1022          		
   1023          	  /* Peripheral interrupt init*/
   1024          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x2023             MOVS     R0,#+35
   \   0000006C   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1025          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000070   0x2023             MOVS     R0,#+35
   \   00000072   0xE1C2             B.N      ??HAL_SPI_MspInit_1
   1026          	  /* USER CODE BEGIN SPI1_MspInit 1 */
   1027          	  
   1028          	  /* USER CODE END SPI1_MspInit 1 */
   1029          
   1030            }
   1031            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable17_15  ;; 0x40003800
   \   00000078   0x4288             CMP      R0,R1
   \   0000007A   0xD149             BNE.N    ??HAL_SPI_MspInit_2
   1032            {
   1033          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1034          	  
   1035          	  /* USER CODE END SPI2_MspInit 0 */
   1036          		/* Peripheral clock enable */
   1037          		__SPI2_CLK_ENABLE();
   \   0000007C   0x....             LDR.N    R5,??DataTable12  ;; 0x40023830
   1038          		__GPIOI_CLK_ENABLE();
   1039          		__GPIOB_CLK_ENABLE();
   1040          		__GPIOC_CLK_ENABLE();
   1041          	  
   1042          		/**I2S2 GPIO Configuration	   
   1043          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1044          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1045          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1046          	  
   1047          	  
   1048          		*/
   1049          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   1050          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1051          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1052          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1053          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1054          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   0000007E   0xA901             ADD      R1,SP,#+4
   \   00000080   0x6928             LDR      R0,[R5, #+16]
   \   00000082   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   00000086   0x6128             STR      R0,[R5, #+16]
   \   00000088   0x6928             LDR      R0,[R5, #+16]
   \   0000008A   0xF400 0x4080      AND      R0,R0,#0x4000
   \   0000008E   0x9000             STR      R0,[SP, #+0]
   \   00000090   0x9800             LDR      R0,[SP, #+0]
   \   00000092   0x6828             LDR      R0,[R5, #+0]
   \   00000094   0xF440 0x7080      ORR      R0,R0,#0x100
   \   00000098   0x6028             STR      R0,[R5, #+0]
   \   0000009A   0x6828             LDR      R0,[R5, #+0]
   \   0000009C   0xF400 0x7080      AND      R0,R0,#0x100
   \   000000A0   0x9000             STR      R0,[SP, #+0]
   \   000000A2   0x9800             LDR      R0,[SP, #+0]
   \   000000A4   0x6828             LDR      R0,[R5, #+0]
   \   000000A6   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000AA   0x6028             STR      R0,[R5, #+0]
   \   000000AC   0x6828             LDR      R0,[R5, #+0]
   \   000000AE   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000B2   0x9000             STR      R0,[SP, #+0]
   \   000000B4   0x9800             LDR      R0,[SP, #+0]
   \   000000B6   0x6828             LDR      R0,[R5, #+0]
   \   000000B8   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000BC   0x6028             STR      R0,[R5, #+0]
   \   000000BE   0x6828             LDR      R0,[R5, #+0]
   \   000000C0   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000C4   0x9000             STR      R0,[SP, #+0]
   \   000000C6   0x9800             LDR      R0,[SP, #+0]
   \   000000C8   0x2002             MOVS     R0,#+2
   \   000000CA   0x9001             STR      R0,[SP, #+4]
   \   000000CC   0x9002             STR      R0,[SP, #+8]
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x9003             STR      R0,[SP, #+12]
   \   000000D2   0x2003             MOVS     R0,#+3
   \   000000D4   0x9004             STR      R0,[SP, #+16]
   \   000000D6   0x2005             MOVS     R0,#+5
   \   000000D8   0x9005             STR      R0,[SP, #+20]
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable17_20  ;; 0x40020800
   \   000000DE   0x.... 0x....      BL       HAL_GPIO_Init
   1055          	  
   1056          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   000000E2   0xF44F 0x5040      MOV      R0,#+12288
   1057          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1058          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1059          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1060          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1061          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   000000E6   0xA901             ADD      R1,SP,#+4
   \   000000E8   0x9001             STR      R0,[SP, #+4]
   \   000000EA   0x2002             MOVS     R0,#+2
   \   000000EC   0x9002             STR      R0,[SP, #+8]
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x9003             STR      R0,[SP, #+12]
   \   000000F2   0x2003             MOVS     R0,#+3
   \   000000F4   0x9004             STR      R0,[SP, #+16]
   \   000000F6   0x2005             MOVS     R0,#+5
   \   000000F8   0x9005             STR      R0,[SP, #+20]
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable17_21  ;; 0x40020400
   \   000000FE   0x.... 0x....      BL       HAL_GPIO_Init
   1062          	  
   1063          	  
   1064          		/* Peripheral interrupt init*/
   1065          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   00000102   0x2200             MOVS     R2,#+0
   \   00000104   0x2101             MOVS     R1,#+1
   \   00000106   0x2024             MOVS     R0,#+36
   \   00000108   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1066          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   0000010C   0x2024             MOVS     R0,#+36
   \   0000010E   0xE174             B.N      ??HAL_SPI_MspInit_1
   1067          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1068          	  
   1069          	  /* USER CODE END SPI2_MspInit 1 */
   1070          
   1071          
   1072            }
   1073            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable17_22  ;; 0x40003c00
   \   00000114   0x4288             CMP      R0,R1
   \   00000116   0xF040 0x808E      BNE.W    ??HAL_SPI_MspInit_3
   1074            {
   1075          	  
   1076              /**I2S3 GPIO Configuration    
   1077                 PB2     ------> I2S3_SD
   1078                 PA15     ------> I2S3_WS (LRCK)
   1079                 PB3     ------> I2S3_CK 
   1080          	   PC7    ------> MCLK
   1081              */
   1082           
   1083            /* USER CODE BEGIN SPI3_MspInit 1 */
   1084            __SPI3_CLK_ENABLE();
   \   0000011A   0x....             LDR.N    R5,??DataTable12  ;; 0x40023830
   1085            __GPIOA_CLK_ENABLE();
   1086            __GPIOB_CLK_ENABLE();
   1087          
   1088            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   1089            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1090            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1091            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1092            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1093            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   0000011C   0xA901             ADD      R1,SP,#+4
   \   0000011E   0x6928             LDR      R0,[R5, #+16]
   \   00000120   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   00000124   0x6128             STR      R0,[R5, #+16]
   \   00000126   0x6928             LDR      R0,[R5, #+16]
   \   00000128   0xF400 0x4000      AND      R0,R0,#0x8000
   \   0000012C   0x9000             STR      R0,[SP, #+0]
   \   0000012E   0x9800             LDR      R0,[SP, #+0]
   \   00000130   0x6828             LDR      R0,[R5, #+0]
   \   00000132   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000136   0x6028             STR      R0,[R5, #+0]
   \   00000138   0x6828             LDR      R0,[R5, #+0]
   \   0000013A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000013E   0x9000             STR      R0,[SP, #+0]
   \   00000140   0x9800             LDR      R0,[SP, #+0]
   \   00000142   0x6828             LDR      R0,[R5, #+0]
   \   00000144   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000148   0x6028             STR      R0,[R5, #+0]
   \   0000014A   0x6828             LDR      R0,[R5, #+0]
   \   0000014C   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000150   0x9000             STR      R0,[SP, #+0]
   \   00000152   0x9800             LDR      R0,[SP, #+0]
   \   00000154   0x200C             MOVS     R0,#+12
   \   00000156   0x9001             STR      R0,[SP, #+4]
   \   00000158   0x2002             MOVS     R0,#+2
   \   0000015A   0x9002             STR      R0,[SP, #+8]
   \   0000015C   0x2003             MOVS     R0,#+3
   \   0000015E   0x9004             STR      R0,[SP, #+16]
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0x9003             STR      R0,[SP, #+12]
   \   00000164   0x2006             MOVS     R0,#+6
   \   00000166   0x9005             STR      R0,[SP, #+20]
   \   00000168   0x.... 0x....      LDR.W    R0,??DataTable17_21  ;; 0x40020400
   \   0000016C   0x.... 0x....      BL       HAL_GPIO_Init
   1094          
   1095          
   1096            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   00000170   0xF44F 0x4000      MOV      R0,#+32768
   1097            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1098            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1099            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000174   0xA901             ADD      R1,SP,#+4
   \   00000176   0x9001             STR      R0,[SP, #+4]
   \   00000178   0x2002             MOVS     R0,#+2
   \   0000017A   0x9002             STR      R0,[SP, #+8]
   \   0000017C   0x2006             MOVS     R0,#+6
   \   0000017E   0x9005             STR      R0,[SP, #+20]
   \   00000180   0x....             LDR.N    R0,??DataTable12_1  ;; 0x40020000
   \   00000182   0x.... 0x....      BL       HAL_GPIO_Init
   1100          
   1101          #ifdef CODEC_MCLK_ENABLED
   1102            __GPIOC_CLK_ENABLE();
   \   00000186   0x6828             LDR      R0,[R5, #+0]
   1103            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   1104            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1105            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1106            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1107            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1108            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000188   0xA901             ADD      R1,SP,#+4
   \   0000018A   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000018E   0x6028             STR      R0,[R5, #+0]
   \   00000190   0x6828             LDR      R0,[R5, #+0]
   \   00000192   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000196   0x9000             STR      R0,[SP, #+0]
   \   00000198   0x9800             LDR      R0,[SP, #+0]
   \   0000019A   0x2080             MOVS     R0,#+128
   \   0000019C   0x9001             STR      R0,[SP, #+4]
   \   0000019E   0x2002             MOVS     R0,#+2
   \   000001A0   0x9002             STR      R0,[SP, #+8]
   \   000001A2   0x2003             MOVS     R0,#+3
   \   000001A4   0x9004             STR      R0,[SP, #+16]
   \   000001A6   0x2000             MOVS     R0,#+0
   \   000001A8   0x9003             STR      R0,[SP, #+12]
   \   000001AA   0x2006             MOVS     R0,#+6
   \   000001AC   0x9005             STR      R0,[SP, #+20]
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable17_20  ;; 0x40020800
   \   000001B2   0x.... 0x....      BL       HAL_GPIO_Init
   1109          
   1110          #endif /* CODEC_MCLK_ENABLED */ 
   1111          
   1112          #ifdef I2S_INTERRUPT   
   1113               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1114               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1115               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1116          
   1117               /* Enable the I2S DMA request */
   1118               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1119               //__HAL_I2S_ENABLE(&hi2s3);
   1120            	    /* Peripheral interrupt init*/
   1121          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1122          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1123          #endif
   1124          
   1125                /* Enable the DMA clock */ 
   1126          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   000001B6   0x6828             LDR      R0,[R5, #+0]
   \   000001B8   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000001BC   0x6028             STR      R0,[R5, #+0]
   \   000001BE   0x6828             LDR      R0,[R5, #+0]
   1127          
   1128                /* Configure the DMA Stream */
   1129                //HAL_DMA_DeInit(&DmaHandle);
   1130          
   1131                /* Set the parameters to be configured */ 
   1132          	  DmaHandle.Instance = DMA1_Stream7;
   \   000001C0   0x.... 0x....      LDR.W    R5,??DataTable17_23
   \   000001C4   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000001C8   0x9000             STR      R0,[SP, #+0]
   \   000001CA   0x9800             LDR      R0,[SP, #+0]
   \   000001CC   0x.... 0x....      LDR.W    R0,??DataTable17_24  ;; 0x400260b8
   \   000001D0   0x6028             STR      R0,[R5, #+0]
   1133                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   000001D2   0x2000             MOVS     R0,#+0
   \   000001D4   0x6068             STR      R0,[R5, #+4]
   1134          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   000001D6   0x2040             MOVS     R0,#+64
   \   000001D8   0x60A8             STR      R0,[R5, #+8]
   1135          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x60E8             STR      R0,[R5, #+12]
   1136          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   000001DE   0xF44F 0x6080      MOV      R0,#+1024
   \   000001E2   0x6128             STR      R0,[R5, #+16]
   1137          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   000001E4   0xF44F 0x6000      MOV      R0,#+2048
   \   000001E8   0x6168             STR      R0,[R5, #+20]
   1138                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   000001EA   0xF44F 0x5000      MOV      R0,#+8192
   \   000001EE   0x61A8             STR      R0,[R5, #+24]
   1139          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   000001F0   0x2000             MOVS     R0,#+0
   \   000001F2   0x61E8             STR      R0,[R5, #+28]
   1140                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   000001F4   0xF44F 0x3000      MOV      R0,#+131072
   \   000001F8   0x6228             STR      R0,[R5, #+32]
   1141          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   000001FA   0x2004             MOVS     R0,#+4
   \   000001FC   0x6268             STR      R0,[R5, #+36]
   1142                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   000001FE   0x2003             MOVS     R0,#+3
   \   00000200   0x62A8             STR      R0,[R5, #+40]
   1143                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   00000202   0x2000             MOVS     R0,#+0
   \   00000204   0x62E8             STR      R0,[R5, #+44]
   1144                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   00000206   0x6328             STR      R0,[R5, #+48]
   1145                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1146                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1147                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1148                //DmaHandle.XferCpltCallback = &TC_Callback;
   1149           
   1150          
   1151                /* Associate the initialized DMA handle to the the SPI handle */
   1152                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   1153                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1154          
   1155          	   /* Deinitialize the Stream for new transfer */
   1156                 HAL_DMA_DeInit(&DmaHandle);
   \   00000208   0x4628             MOV      R0,R5
   \   0000020A   0x6565             STR      R5,[R4, #+84]
   \   0000020C   0x63AC             STR      R4,[R5, #+56]
   \   0000020E   0x.... 0x....      BL       HAL_DMA_DeInit
   1157                 /* Configure the DMA Stream */
   1158          	   HAL_DMA_Init(&DmaHandle);
   \   00000212   0x4628             MOV      R0,R5
   \   00000214   0x.... 0x....      BL       HAL_DMA_Init
   1159          
   1160                /* Set Interrupt Group Priority */
   1161                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   00000218   0x2200             MOVS     R2,#+0
   \   0000021A   0x2100             MOVS     R1,#+0
   \   0000021C   0x202F             MOVS     R0,#+47
   \   0000021E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1162                /* Enable the DMA STREAM global Interrupt */
   1163                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   00000222   0x202F             MOVS     R0,#+47
   \   00000224   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1164          
   1165          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000228   0x6828             LDR      R0,[R5, #+0]
   \   0000022A   0x6801             LDR      R1,[R0, #+0]
   \   0000022C   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000230   0x6001             STR      R1,[R0, #+0]
   1166          	    
   1167            }
   1168            else if(hspi->Instance==SPI4)
   1169            {
   1170            /* USER CODE BEGIN SPI4_MspInit 0 */
   1171          
   1172            /* USER CODE END SPI4_MspInit 0 */
   1173              /* Peripheral clock enable */
   1174              __SPI4_CLK_ENABLE();
   1175              __HAL_RCC_GPIOE_CLK_ENABLE();
   1176            
   1177            
   1178              /**SPI4 GPIO Configuration    
   1179              PE2     ------> SPI4_SCK
   1180              PE4     ------> SPI4_NSS
   1181              PE5     ------> SPI4_MISO
   1182              PE6     ------> SPI4_MOSI 
   1183              */
   1184              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   1185              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1186              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1187              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1188              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   1189              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   1190          
   1191          	/* Peripheral interrupt init*/
   1192              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   1193              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   1194          
   1195            /* USER CODE BEGIN SPI4_MspInit 1 */
   1196          
   1197            /* USER CODE END SPI4_MspInit 1 */
   1198            }
   1199            else if(hspi->Instance==SPI5)
   1200            {
   1201            /* USER CODE BEGIN SPI5_MspInit 0 */
   1202          
   1203            /* USER CODE END SPI5_MspInit 0 */
   1204              /* Peripheral clock enable */
   1205              __HAL_RCC_SPI5_CLK_ENABLE();
   1206              __HAL_RCC_GPIOF_CLK_ENABLE();
   1207            
   1208              /**SPI5 GPIO Configuration    
   1209              PF7     ------> SPI5_SCK  --> PF7
   1210              PF11     ------> SPI5_MOSI --> PF9
   1211                               SPI5_MISO --> PF8
   1212                                    NSS   -->  PF6
   1213              */
   1214              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   1215              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   1216              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1217              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1218              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   1219              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   1220          
   1221          #if 0
   1222            /* Peripheral interrupt init*/
   1223              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1224              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1225          
   1226          #else
   1227          	/* Peripheral DMA init*/
   1228              __HAL_RCC_DMA2_CLK_ENABLE();
   1229          	hdma_spi5_rx.Instance = DMA2_Stream5;
   1230          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   1231          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1232          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1233          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   1234          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1235          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   1236          	hdma_spi5_rx.Init.Mode = DMA_NORMAL;
   1237          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1238          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1239          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1240          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   1241          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   1242          	HAL_DMA_Init(&hdma_spi5_rx);
   1243          
   1244              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   1245          
   1246          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1247          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   1248          
   1249          #endif
   1250            /* USER CODE END SPI5_MspInit 1 */
   1251            }
   1252            else if(hspi->Instance==SPI6)
   1253            {
   1254            /* USER CODE BEGIN SPI6_MspInit 0 */
   1255          
   1256            /* USER CODE END SPI6_MspInit 0 */
   1257              /* Peripheral clock enable */
   1258              __SPI6_CLK_ENABLE();
   1259              __HAL_RCC_GPIOG_CLK_ENABLE();
   1260            
   1261              /**SPI6 GPIO Configuration    
   1262              PG13     ------> SPI6_SCK
   1263              PG14     ------> SPI6_MOSI 
   1264              */
   1265              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   1266              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1267              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1268              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1269              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   1270              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   1271          
   1272          #if 0
   1273          	  /* Peripheral interrupt init*/
   1274              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1275              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1276          #else
   1277          	/* Peripheral DMA init*/
   1278          	__HAL_RCC_DMA2_CLK_ENABLE();
   1279          	hdma_spi6_rx.Instance = DMA2_Stream6;
   1280          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   1281          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1282          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1283          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   1284          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1285          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1286          	hdma_spi6_rx.Init.Mode = DMA_NORMAL;
   1287          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1288          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1289          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1290          	hdma_spi6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   1291          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   1292          	HAL_DMA_Init(&hdma_spi6_rx);
   1293          
   1294          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   1295          
   1296          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1297          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   1298          
   1299          #endif
   1300            }
   1301          
   1302          }
   \   00000232   0xB007             ADD      SP,SP,#+28
   \   00000234   0xBD30             POP      {R4,R5,PC}
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   00000236   0x.... 0x....      LDR.W    R1,??DataTable17_16  ;; 0x40013400
   \   0000023A   0x4288             CMP      R0,R1
   \   0000023C   0xD127             BNE.N    ??HAL_SPI_MspInit_4
   \   0000023E   0x....             LDR.N    R5,??DataTable12  ;; 0x40023830
   \   00000240   0xA901             ADD      R1,SP,#+4
   \   00000242   0x6968             LDR      R0,[R5, #+20]
   \   00000244   0xF440 0x5000      ORR      R0,R0,#0x2000
   \   00000248   0x6168             STR      R0,[R5, #+20]
   \   0000024A   0x6968             LDR      R0,[R5, #+20]
   \   0000024C   0xF400 0x5000      AND      R0,R0,#0x2000
   \   00000250   0x9000             STR      R0,[SP, #+0]
   \   00000252   0x9800             LDR      R0,[SP, #+0]
   \   00000254   0x6828             LDR      R0,[R5, #+0]
   \   00000256   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000025A   0x6028             STR      R0,[R5, #+0]
   \   0000025C   0x6828             LDR      R0,[R5, #+0]
   \   0000025E   0xF000 0x0010      AND      R0,R0,#0x10
   \   00000262   0x9000             STR      R0,[SP, #+0]
   \   00000264   0x9800             LDR      R0,[SP, #+0]
   \   00000266   0x2074             MOVS     R0,#+116
   \   00000268   0x9001             STR      R0,[SP, #+4]
   \   0000026A   0x2002             MOVS     R0,#+2
   \   0000026C   0x9002             STR      R0,[SP, #+8]
   \   0000026E   0x2000             MOVS     R0,#+0
   \   00000270   0x9003             STR      R0,[SP, #+12]
   \   00000272   0x2003             MOVS     R0,#+3
   \   00000274   0x9004             STR      R0,[SP, #+16]
   \   00000276   0x2005             MOVS     R0,#+5
   \   00000278   0x9005             STR      R0,[SP, #+20]
   \   0000027A   0x....             LDR.N    R0,??DataTable16  ;; 0x40021000
   \   0000027C   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000280   0x2200             MOVS     R2,#+0
   \   00000282   0x2102             MOVS     R1,#+2
   \   00000284   0x2054             MOVS     R0,#+84
   \   00000286   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   0000028A   0x2054             MOVS     R0,#+84
   \   0000028C   0xE0B5             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   0000028E   0x.... 0x....      LDR.W    R1,??DataTable17_18  ;; 0x40015000
   \   00000292   0x4288             CMP      R0,R1
   \   00000294   0xD157             BNE.N    ??HAL_SPI_MspInit_5
   \   00000296   0x....             LDR.N    R5,??DataTable12  ;; 0x40023830
   \   00000298   0xA901             ADD      R1,SP,#+4
   \   0000029A   0x6968             LDR      R0,[R5, #+20]
   \   0000029C   0xF440 0x1080      ORR      R0,R0,#0x100000
   \   000002A0   0x6168             STR      R0,[R5, #+20]
   \   000002A2   0x6968             LDR      R0,[R5, #+20]
   \   000002A4   0xF400 0x1080      AND      R0,R0,#0x100000
   \   000002A8   0x9000             STR      R0,[SP, #+0]
   \   000002AA   0x9800             LDR      R0,[SP, #+0]
   \   000002AC   0x6828             LDR      R0,[R5, #+0]
   \   000002AE   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000002B2   0x6028             STR      R0,[R5, #+0]
   \   000002B4   0x6828             LDR      R0,[R5, #+0]
   \   000002B6   0xF000 0x0020      AND      R0,R0,#0x20
   \   000002BA   0x9000             STR      R0,[SP, #+0]
   \   000002BC   0x9800             LDR      R0,[SP, #+0]
   \   000002BE   0xF44F 0x7070      MOV      R0,#+960
   \   000002C2   0x9001             STR      R0,[SP, #+4]
   \   000002C4   0x2012             MOVS     R0,#+18
   \   000002C6   0x9002             STR      R0,[SP, #+8]
   \   000002C8   0x2001             MOVS     R0,#+1
   \   000002CA   0x9003             STR      R0,[SP, #+12]
   \   000002CC   0x2003             MOVS     R0,#+3
   \   000002CE   0x9004             STR      R0,[SP, #+16]
   \   000002D0   0x2005             MOVS     R0,#+5
   \   000002D2   0x9005             STR      R0,[SP, #+20]
   \   000002D4   0x.... 0x....      LDR.W    R0,??DataTable17_25  ;; 0x40021400
   \   000002D8   0x.... 0x....      BL       HAL_GPIO_Init
   \   000002DC   0x6828             LDR      R0,[R5, #+0]
   \   000002DE   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000002E2   0x6028             STR      R0,[R5, #+0]
   \   000002E4   0x6828             LDR      R0,[R5, #+0]
   \   000002E6   0x.... 0x....      LDR.W    R5,??DataTable17_26
   \   000002EA   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000002EE   0x9000             STR      R0,[SP, #+0]
   \   000002F0   0x9800             LDR      R0,[SP, #+0]
   \   000002F2   0x.... 0x....      LDR.W    R0,??DataTable17_27  ;; 0x40026488
   \   000002F6   0x6028             STR      R0,[R5, #+0]
   \   000002F8   0xF04F 0x6060      MOV      R0,#+234881024
   \   000002FC   0x6068             STR      R0,[R5, #+4]
   \   000002FE   0x2000             MOVS     R0,#+0
   \   00000300   0x60A8             STR      R0,[R5, #+8]
   \   00000302   0x60E8             STR      R0,[R5, #+12]
   \   00000304   0xF44F 0x6080      MOV      R0,#+1024
   \   00000308   0x6128             STR      R0,[R5, #+16]
   \   0000030A   0xF44F 0x6000      MOV      R0,#+2048
   \   0000030E   0x6168             STR      R0,[R5, #+20]
   \   00000310   0xF44F 0x5000      MOV      R0,#+8192
   \   00000314   0x61A8             STR      R0,[R5, #+24]
   \   00000316   0x2000             MOVS     R0,#+0
   \   00000318   0x61E8             STR      R0,[R5, #+28]
   \   0000031A   0xF44F 0x3000      MOV      R0,#+131072
   \   0000031E   0x6228             STR      R0,[R5, #+32]
   \   00000320   0x2000             MOVS     R0,#+0
   \   00000322   0x6268             STR      R0,[R5, #+36]
   \   00000324   0x2003             MOVS     R0,#+3
   \   00000326   0x62A8             STR      R0,[R5, #+40]
   \   00000328   0x2000             MOVS     R0,#+0
   \   0000032A   0x62E8             STR      R0,[R5, #+44]
   \   0000032C   0x6328             STR      R0,[R5, #+48]
   \   0000032E   0x4628             MOV      R0,R5
   \   00000330   0x.... 0x....      BL       HAL_DMA_Init
   \   00000334   0x65A5             STR      R5,[R4, #+88]
   \   00000336   0x2200             MOVS     R2,#+0
   \   00000338   0x63AC             STR      R4,[R5, #+56]
   \   0000033A   0x2104             MOVS     R1,#+4
   \   0000033C   0x2044             MOVS     R0,#+68
   \   0000033E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000342   0x2044             MOVS     R0,#+68
   \   00000344   0xE059             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   00000346   0x.... 0x....      LDR.W    R1,??DataTable17_19  ;; 0x40015400
   \   0000034A   0x4288             CMP      R0,R1
   \   0000034C   0xD157             BNE.N    ??HAL_SPI_MspInit_6
   \   0000034E   0x....             LDR.N    R5,??DataTable12  ;; 0x40023830
   \   00000350   0xA901             ADD      R1,SP,#+4
   \   00000352   0x6968             LDR      R0,[R5, #+20]
   \   00000354   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   00000358   0x6168             STR      R0,[R5, #+20]
   \   0000035A   0x6968             LDR      R0,[R5, #+20]
   \   0000035C   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000360   0x9000             STR      R0,[SP, #+0]
   \   00000362   0x9800             LDR      R0,[SP, #+0]
   \   00000364   0x6828             LDR      R0,[R5, #+0]
   \   00000366   0xF040 0x0040      ORR      R0,R0,#0x40
   \   0000036A   0x6028             STR      R0,[R5, #+0]
   \   0000036C   0x6828             LDR      R0,[R5, #+0]
   \   0000036E   0xF000 0x0040      AND      R0,R0,#0x40
   \   00000372   0x9000             STR      R0,[SP, #+0]
   \   00000374   0x9800             LDR      R0,[SP, #+0]
   \   00000376   0xF44F 0x40C0      MOV      R0,#+24576
   \   0000037A   0x9001             STR      R0,[SP, #+4]
   \   0000037C   0x2002             MOVS     R0,#+2
   \   0000037E   0x9002             STR      R0,[SP, #+8]
   \   00000380   0x2000             MOVS     R0,#+0
   \   00000382   0x9003             STR      R0,[SP, #+12]
   \   00000384   0x2003             MOVS     R0,#+3
   \   00000386   0x9004             STR      R0,[SP, #+16]
   \   00000388   0x2005             MOVS     R0,#+5
   \   0000038A   0x9005             STR      R0,[SP, #+20]
   \   0000038C   0x.... 0x....      LDR.W    R0,??DataTable17_28  ;; 0x40021800
   \   00000390   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000394   0x6828             LDR      R0,[R5, #+0]
   \   00000396   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   0000039A   0x6028             STR      R0,[R5, #+0]
   \   0000039C   0x6828             LDR      R0,[R5, #+0]
   \   0000039E   0x.... 0x....      LDR.W    R5,??DataTable17_29
   \   000003A2   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000003A6   0x9000             STR      R0,[SP, #+0]
   \   000003A8   0x9800             LDR      R0,[SP, #+0]
   \   000003AA   0x.... 0x....      LDR.W    R0,??DataTable17_27  ;; 0x40026488
   \   000003AE   0x3018             ADDS     R0,R0,#+24
   \   000003B0   0x6028             STR      R0,[R5, #+0]
   \   000003B2   0xF04F 0x7000      MOV      R0,#+33554432
   \   000003B6   0x6068             STR      R0,[R5, #+4]
   \   000003B8   0x2000             MOVS     R0,#+0
   \   000003BA   0x60A8             STR      R0,[R5, #+8]
   \   000003BC   0x60E8             STR      R0,[R5, #+12]
   \   000003BE   0xF44F 0x6080      MOV      R0,#+1024
   \   000003C2   0x6128             STR      R0,[R5, #+16]
   \   000003C4   0xF44F 0x6000      MOV      R0,#+2048
   \   000003C8   0x6168             STR      R0,[R5, #+20]
   \   000003CA   0x61A8             STR      R0,[R5, #+24]
   \   000003CC   0x2000             MOVS     R0,#+0
   \   000003CE   0x61E8             STR      R0,[R5, #+28]
   \   000003D0   0xF44F 0x3000      MOV      R0,#+131072
   \   000003D4   0x6228             STR      R0,[R5, #+32]
   \   000003D6   0x2000             MOVS     R0,#+0
   \   000003D8   0x6268             STR      R0,[R5, #+36]
   \   000003DA   0x2003             MOVS     R0,#+3
   \   000003DC   0x62A8             STR      R0,[R5, #+40]
   \   000003DE   0x2000             MOVS     R0,#+0
   \   000003E0   0x62E8             STR      R0,[R5, #+44]
   \   000003E2   0x6328             STR      R0,[R5, #+48]
   \   000003E4   0x4628             MOV      R0,R5
   \   000003E6   0x.... 0x....      BL       HAL_DMA_Init
   \   000003EA   0x65A5             STR      R5,[R4, #+88]
   \   000003EC   0x2201             MOVS     R2,#+1
   \   000003EE   0x63AC             STR      R4,[R5, #+56]
   \   000003F0   0x2107             MOVS     R1,#+7
   \   000003F2   0x2045             MOVS     R0,#+69
   \   000003F4   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   000003F8   0x2045             MOVS     R0,#+69
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   000003FA   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \                     ??HAL_SPI_MspInit_6: (+1)
   \   000003FE   0xB007             ADD      SP,SP,#+28
   \   00000400   0xBD30             POP      {R4,R5,PC}       ;; return
   1303          
   1304          
   1305          
   1306          
   1307          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1308          {
   1309            /* Check the parameters */
   1310            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1311            
   1312            /* Write in the DR register the data to be sent */
   1313            SPIx->DR = Data;
   1314          }
   1315          
   1316          
   1317          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1318          {
   1319            /* Check the parameters */
   1320            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1321            
   1322            /* Return the data in the DR register */
   1323            return SPIx->DR;
   1324          }
   1325          
   1326          

   \                                 In section .text, align 2, keep-with-next
   1327          void RecordUpdBuf(void)
   1328          {
   1329          
   1330               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable15_1
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x2902             CMP      R1,#+2
   \   00000006   0xD000             BEQ.N    ??RecordUpdBuf_0
   \   00000008   0x4770             BX       LR
   1331               {
   1332                  WaveRecord_flgInt=0;
   \                     ??RecordUpdBuf_0: (+1)
   \   0000000A   0xB410             PUSH     {R4}
   \   0000000C   0x2100             MOVS     R1,#+0
   1333          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   0000000E   0x....             LDR.N    R2,??DataTable15_3
   \   00000010   0x7001             STRB     R1,[R0, #+0]
   \   00000012   0x8811             LDRH     R1,[R2, #+0]
   \   00000014   0xF5B1 0x6F80      CMP      R1,#+1024
   \   00000018   0xBFBE             ITTT     LT 
   \   0000001A   0x....             LDRLT.N  R1,??DataTable16_1
   \   0000001C   0x880B             LDRHLT   R3,[R1, #+0]
   \   0000001E   0xF5B3 0x6F80      CMPLT    R3,#+1024
   \   00000022   0xDA50             BGE.N    ??RecordUpdBuf_1
   1334          		//			  &&(stLR!=stLROld))
   1335          			{
   1336          		/*-------------------------------------------------------------------------------------------------------------
   1337          					  
   1338          			Sequence  Record Data					  Processing Data				  Player Data
   1339          					  
   1340          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1341          					  
   1342          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1343          					  
   1344          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1345          		 ---------------------------------------------------------------------------------------------------------------*/
   1346          					  /* Recording Audio Data */						 
   1347          					   switch (buffer_switch)
   \   00000024   0x....             LDR.N    R3,??DataTable15_2
   \   00000026   0x781B             LDRB     R3,[R3, #+0]
   \   00000028   0xB123             CBZ.N    R3,??RecordUpdBuf_2
   \   0000002A   0x2B02             CMP      R3,#+2
   \   0000002C   0xD00C             BEQ.N    ??RecordUpdBuf_3
   \   0000002E   0xD306             BCC.N    ??RecordUpdBuf_4
   1348          					   {
   1349          								case BUF1_PLAY:
   1350          
   1351          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   1352          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   1353          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1354          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   1355          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1356          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   1357          	
   1358          										break;
   1359          								case BUF2_PLAY:
   1360          
   1361          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   1362          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   1363          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1364          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   1365          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1366          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   1367          		
   1368          
   1369          										break;
   1370          								case BUF3_PLAY:
   1371          
   1372          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   1373          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   1374          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1375          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   1376          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1377          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   1378          										break;
   1379          								default:
   1380          										break; 
   1381          					   }
   1382          				
   1383          				}
   1384                               
   1385               	}
   1386          }
   \   00000030   0xBC10             POP      {R4}
   \   00000032   0x4770             BX       LR
   \                     ??RecordUpdBuf_2: (+1)
   \   00000034   0x8813             LDRH     R3,[R2, #+0]
   \   00000036   0x1C5C             ADDS     R4,R3,#+1
   \   00000038   0x8014             STRH     R4,[R2, #+0]
   \   0000003A   0x....             LDR.N    R2,??DataTable15_4  ;; 0xc00080a0
   \   0000003C   0xE009             B.N      ??RecordUpdBuf_5
   \                     ??RecordUpdBuf_4: (+1)
   \   0000003E   0x8813             LDRH     R3,[R2, #+0]
   \   00000040   0x1C5C             ADDS     R4,R3,#+1
   \   00000042   0x8014             STRH     R4,[R2, #+0]
   \   00000044   0x....             LDR.N    R2,??DataTable15_5  ;; 0xc0010140
   \   00000046   0xE004             B.N      ??RecordUpdBuf_5
   \                     ??RecordUpdBuf_3: (+1)
   \   00000048   0x8813             LDRH     R3,[R2, #+0]
   \   0000004A   0x1C5C             ADDS     R4,R3,#+1
   \   0000004C   0x8014             STRH     R4,[R2, #+0]
   \   0000004E   0xF04F 0x4240      MOV      R2,#-1073741824
   \                     ??RecordUpdBuf_5: (+1)
   \   00000052   0xF9B0 0x4008      LDRSH    R4,[R0, #+8]
   \   00000056   0xF822 0x4013      STRH     R4,[R2, R3, LSL #+1]
   \   0000005A   0x880B             LDRH     R3,[R1, #+0]
   \   0000005C   0x1C5C             ADDS     R4,R3,#+1
   \   0000005E   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   00000062   0x800C             STRH     R4,[R1, #+0]
   \   00000064   0xF9B0 0x100A      LDRSH    R1,[R0, #+10]
   \   00000068   0xF241 0x0414      MOVW     R4,#+4116
   \   0000006C   0x52E1             STRH     R1,[R4, R3]
   \   0000006E   0x....             LDR.N    R1,??DataTable16_4
   \   00000070   0x880B             LDRH     R3,[R1, #+0]
   \   00000072   0x1C5C             ADDS     R4,R3,#+1
   \   00000074   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   00000078   0x800C             STRH     R4,[R1, #+0]
   \   0000007A   0xF9B0 0x100E      LDRSH    R1,[R0, #+14]
   \   0000007E   0xF242 0x0428      MOVW     R4,#+8232
   \   00000082   0x52E1             STRH     R1,[R4, R3]
   \   00000084   0x....             LDR.N    R1,??DataTable17
   \   00000086   0x880B             LDRH     R3,[R1, #+0]
   \   00000088   0x1C5C             ADDS     R4,R3,#+1
   \   0000008A   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   0000008E   0x800C             STRH     R4,[R1, #+0]
   \   00000090   0xF9B0 0x100C      LDRSH    R1,[R0, #+12]
   \   00000094   0xF243 0x043C      MOVW     R4,#+12348
   \   00000098   0x52E1             STRH     R1,[R4, R3]
   \   0000009A   0x....             LDR.N    R1,??DataTable16_7
   \   0000009C   0x880B             LDRH     R3,[R1, #+0]
   \   0000009E   0x1C5C             ADDS     R4,R3,#+1
   \   000000A0   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000A4   0x800C             STRH     R4,[R1, #+0]
   \   000000A6   0xF9B0 0x1010      LDRSH    R1,[R0, #+16]
   \   000000AA   0xF244 0x0450      MOVW     R4,#+16464
   \   000000AE   0x52E1             STRH     R1,[R4, R3]
   \   000000B0   0x....             LDR.N    R1,??DataTable16_8
   \   000000B2   0x880B             LDRH     R3,[R1, #+0]
   \   000000B4   0x1C5C             ADDS     R4,R3,#+1
   \   000000B6   0x800C             STRH     R4,[R1, #+0]
   \   000000B8   0xF9B0 0x0012      LDRSH    R0,[R0, #+18]
   \   000000BC   0xEB02 0x0143      ADD      R1,R2,R3, LSL #+1
   \   000000C0   0xF245 0x0264      MOVW     R2,#+20580
   \   000000C4   0x5250             STRH     R0,[R2, R1]
   \                     ??RecordUpdBuf_1: (+1)
   \   000000C6   0xBC10             POP      {R4}
   \   000000C8   0x4770             BX       LR               ;; return
   \   000000CA                      REQUIRE Buffer2
   \   000000CA                      REQUIRE Buffer3
   \   000000CA                      REQUIRE Buffer1
   1387          
   1388          

   \                                 In section .text, align 2, keep-with-next
   1389          void DMA2_Stream5_IRQHandler(void)
   1390          {
   1391            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1392          
   1393            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1394            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_26
   \   00000004   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1395            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1396          
   1397            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1398          }
   1399          
   1400          /**
   1401          * @brief This function handles DMA2 stream6 global interrupt.
   1402          */

   \                                 In section .text, align 2, keep-with-next
   1403          void DMA2_Stream6_IRQHandler(void)
   1404          {
   1405            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1406          
   1407            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1408            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_29
   \   00000004   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1409            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1410          
   1411            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1412          }
   1413          

   \                                 In section .text, align 2, keep-with-next
   1414          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1415          {
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1416              if(hspi->Instance==SPI1)
   1417              {
   1418                  /* Copy Data to Record Buffer */
   1419          		//RecordUpdBuf();
   1420          		//XferCplt = 1;
   1421                  //Audio_Play_Out();
   1422              }
   1423              else if (hspi->Instance==SPI2)
   1424              {
   1425          
   1426              }
   1427              else if (hspi->Instance==SPI4)
   1428              {
   1429          
   1430              }
   1431          	else
   1432          	{
   1433          
   1434          	}
   1435          
   1436              if (hspi->Instance==SPI5)
   \   00000004   0x....             LDR.N    R1,??DataTable17_18  ;; 0x40015000
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD111             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1437              {
   1438                  MIC7Rec();
   \   0000000C   0x....             LDR.N    R0,??DataTable17_6
   \   0000000E   0x....             LDR.N    R3,??DataTable17_2
   \   00000010   0xF44F 0x5280      MOV      R2,#+4096
   \   00000014   0x7801             LDRB     R1,[R0, #+0]
   \   00000016   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x7081             STRB     R1,[R0, #+2]
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xBF0C             ITE      EQ 
   \   00000026   0x....             LDREQ.N  R1,??DataTable17_30
   \   00000028   0x....             LDRNE.N  R1,??DataTable17_10
   \   0000002A   0x1D18             ADDS     R0,R3,#+4
   \   0000002C   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1439              }
   1440              else
   1441              {
   1442                
   1443              }
   1444              
   1445              if (hspi->Instance==SPI6) //MIC8
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   00000030   0x6820             LDR      R0,[R4, #+0]
   \   00000032   0x....             LDR.N    R1,??DataTable17_19  ;; 0x40015400
   \   00000034   0x4288             CMP      R0,R1
   \   00000036   0xD113             BNE.N    ??HAL_SPI_RxCpltCallback_1
   1446              {
   1447          #if 0							
   1448          
   1449              if (swtSDO8==0x01)
   1450             {
   1451                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1452             }
   1453             else
   1454             {
   1455          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1456             }      
   1457             AudioUSBSend(idxFrmPDMMic8++);
   1458          
   1459             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   1460             {
   1461                 swtSDO8^=0x01;
   1462                 WaveRecord_flgSDO8Finish = 1;
   1463                 idxFrmPDMMic8 = 0;
   1464          		RESET_IDX
   1465          		XferCplt = 0; // clear DMA interrupt flag
   1466          		switch (buffer_switch)
   1467          		{
   1468          	        case BUF1_PLAY: 		
   1469          	          buffer_switch = BUF3_PLAY;
   1470          	          break;
   1471          	        case BUF2_PLAY: 
   1472          	          buffer_switch = BUF1_PLAY;		
   1473          	          break;
   1474          	        case BUF3_PLAY: 	
   1475          	          buffer_switch = BUF2_PLAY;
   1476          	          break;
   1477          	        default:
   1478          	          break;
   1479          		}
   1480          
   1481          		/* Last player Frame is finished */
   1482          		AudioPlayerUpd(); 		
   1483          		
   1484          		if (cntStrt<100) cntStrt++;		   
   1485                  
   1486             }
   1487          
   1488          
   1489          #else
   1490              MIC8Rec();
   \   00000038   0x....             LDR.N    R0,??DataTable17_6
   \   0000003A   0x....             LDR.N    R3,??DataTable17_7
   \   0000003C   0xF44F 0x5280      MOV      R2,#+4096
   \   00000040   0x7841             LDRB     R1,[R0, #+1]
   \   00000042   0xF081 0x0101      EOR      R1,R1,#0x1
   \   00000046   0x7041             STRB     R1,[R0, #+1]
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x70C1             STRB     R1,[R0, #+3]
   \   0000004C   0x7840             LDRB     R0,[R0, #+1]
   \   0000004E   0x2801             CMP      R0,#+1
   \   00000050   0xBF0C             ITE      EQ 
   \   00000052   0x....             LDREQ.N  R1,??DataTable17_31
   \   00000054   0x....             LDRNE.N  R1,??DataTable17_12
   \   00000056   0x1D18             ADDS     R0,R3,#+4
   \   00000058   0xE8BD 0x4010      POP      {R4,LR}
   \   0000005C   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1491          	
   1492          #endif
   1493          
   1494            }
   1495          }
   \                     ??HAL_SPI_RxCpltCallback_1: (+1)
   \   00000060   0xBD10             POP      {R4,PC}          ;; return
   1496          

   \                                 In section .text, align 2, keep-with-next
   1497          void PDM2PCMSDO78(void)
   1498          {
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x....             LDR.N    R0,??DataTable17_32
   \   00000006   0xB083             SUB      SP,SP,#+12
   1499          static int16_t Mic7LPOld,Mic8LPOld;
   1500          uint8_t buffer_switch_tmp;
   1501          
   1502          buffer_switch_tmp = buffer_switch;
   1503          
   1504          /*-------------------------------------------------------------------------------------------------------------
   1505          			  
   1506          	Sequence  Record Data					  Processing Data				  Player Data
   1507          			  
   1508          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1509          			  
   1510          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1511          			  
   1512          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1513           ---------------------------------------------------------------------------------------------------------------*/
   1514          
   1515              /* Data in Mic7 finished recording */
   1516              if (WaveRecord_flgSDO7Finish==1)
   \   00000008   0x....             LDR.N    R4,??DataTable17_6
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xF040 0x8086      BNE.W    ??PDM2PCMSDO78_0
   1517              {
   1518                  WaveRecord_flgSDO7Finish=0;
   \   00000016   0x2000             MOVS     R0,#+0
   1519          
   1520                  uint8_t swtSDO7_tmp;
   1521                  swtSDO7_tmp = swtSDO7;
   1522          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000018   0x2700             MOVS     R7,#+0
   \   0000001A   0x70A0             STRB     R0,[R4, #+2]
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x....             LDR.N    R5,??DataTable17_10
   \   00000020   0x....             LDR.N    R6,??DataTable17_30
   \   00000022   0x.... 0x....      LDR.W    R8,??DataTable17_33  ;; 0xc00080a0
   \   00000026   0x.... 0x....      LDR.W    R9,??DataTable17_1  ;; 0xc0010140
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0xF246 0x0B78      MOVW     R11,#+24696
   \   00000030   0xF04F 0x4A40      MOV      R10,#-1073741824
   1523          		{
   1524          	        if(swtSDO7_tmp==0x01)
   \                     ??PDM2PCMSDO78_1: (+1)
   \   00000034   0x9800             LDR      R0,[SP, #+0]
   1525          	        {
   1526          	            pDataMic7[i%64] = HTONS(TestSDO7[i]);					
                 	            ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   1527          	        }
   1528          	        else
   1529          	        {
   1530          	           pDataMic7[i%64] = HTONS(TestSDO7_1[i]);
                 	           ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000036   0x....             LDR.N    R2,??DataTable17_9
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xBF07             ITTEE    EQ 
   \   0000003C   0x8828             LDRHEQ   R0,[R5, #+0]
   \   0000003E   0x8829             LDRHEQ   R1,[R5, #+0]
   \   00000040   0x8830             LDRHNE   R0,[R6, #+0]
   \   00000042   0x8831             LDRHNE   R1,[R6, #+0]
   \   00000044   0x117B             ASRS     R3,R7,#+5
   \   00000046   0x0209             LSLS     R1,R1,#+8
   \   00000048   0xEB07 0x6393      ADD      R3,R7,R3, LSR #+26
   \   0000004C   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   00000050   0x119B             ASRS     R3,R3,#+6
   \   00000052   0xEBA7 0x1383      SUB      R3,R7,R3, LSL #+6
   \   00000056   0xF822 0x0013      STRH     R0,[R2, R3, LSL #+1]
   1531          	        }
   1532          
   1533          	        /* PDM conversion for frame of 64 inputs, 16 outputs */
   1534          	        if (i%64==63)
   \   0000005A   0x1178             ASRS     R0,R7,#+5
   \   0000005C   0xEB07 0x6090      ADD      R0,R7,R0, LSR #+26
   \   00000060   0x1180             ASRS     R0,R0,#+6
   \   00000062   0xEBA7 0x1180      SUB      R1,R7,R0, LSL #+6
   \   00000066   0x293F             CMP      R1,#+63
   \   00000068   0xD118             BNE.N    ??PDM2PCMSDO78_2
   1535          	        {
   1536          				/* Put them in processing phase */
   1537          	          /* Recording Audio Data */						 
   1538          	          switch (buffer_switch_tmp)
   \   0000006A   0x9901             LDR      R1,[SP, #+4]
   \   0000006C   0xB119             CBZ.N    R1,??PDM2PCMSDO78_3
   \   0000006E   0x2902             CMP      R1,#+2
   \   00000070   0xD00B             BEQ.N    ??PDM2PCMSDO78_4
   \   00000072   0xD305             BCC.N    ??PDM2PCMSDO78_5
   \   00000074   0xE012             B.N      ??PDM2PCMSDO78_2
   1539          	          {
   1540          			    case BUF1_PLAY:								
   1541                            PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 150 ,
   1542                            (PDMFilter_InitStruct *)&Filter[0]);						  
   \                     ??PDM2PCMSDO78_3: (+1)
   \   00000076   0x1D23             ADDS     R3,R4,#+4
   \   00000078   0x2296             MOVS     R2,#+150
   \   0000007A   0xEB08 0x1040      ADD      R0,R8,R0, LSL #+5
   \   0000007E   0xE008             B.N      ??PDM2PCMSDO78_6
   1543                            break;	              
   1544          	            case BUF2_PLAY:
   1545          					PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 150 ,
   1546          					(PDMFilter_InitStruct *)&Filter[0]);							
   \                     ??PDM2PCMSDO78_5: (+1)
   \   00000080   0x1D23             ADDS     R3,R4,#+4
   \   00000082   0x2296             MOVS     R2,#+150
   \   00000084   0xEB09 0x1040      ADD      R0,R9,R0, LSL #+5
   \   00000088   0xE003             B.N      ??PDM2PCMSDO78_6
   1547          					break;
   1548          	            case BUF3_PLAY:
   1549          					PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 150 ,
   1550          					(PDMFilter_InitStruct *)&Filter[0]);		
   \                     ??PDM2PCMSDO78_4: (+1)
   \   0000008A   0x1D23             ADDS     R3,R4,#+4
   \   0000008C   0x2296             MOVS     R2,#+150
   \   0000008E   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \                     ??PDM2PCMSDO78_6: (+1)
   \   00000092   0xEB0B 0x0100      ADD      R1,R11,R0
   \   00000096   0x....             LDR.N    R0,??DataTable17_9
   \   00000098   0x.... 0x....      BL       PDM_Filter_64_LSB
   1551          					break;
   1552          	            default:
   1553          	                break; 
   1554          	          }
   1555          	        }
   1556          	     }
   \                     ??PDM2PCMSDO78_2: (+1)
   \   0000009C   0x1C7F             ADDS     R7,R7,#+1
   \   0000009E   0x1CB6             ADDS     R6,R6,#+2
   \   000000A0   0x1CAD             ADDS     R5,R5,#+2
   \   000000A2   0xF5B7 0x5F80      CMP      R7,#+4096
   \   000000A6   0xDBC5             BLT.N    ??PDM2PCMSDO78_1
   1557                  /* LowPass Filter 
   1558                        dT = 1/16000
   1559                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1560          		*/						 
   1561          		switch (buffer_switch)
   \   000000A8   0x....             LDR.N    R0,??DataTable17_32
   \   000000AA   0x7800             LDRB     R0,[R0, #+0]
   \   000000AC   0xB118             CBZ.N    R0,??PDM2PCMSDO78_7
   \   000000AE   0x2802             CMP      R0,#+2
   \   000000B0   0xD00E             BEQ.N    ??PDM2PCMSDO78_8
   \   000000B2   0xD30A             BCC.N    ??PDM2PCMSDO78_9
   \   000000B4   0xE017             B.N      ??PDM2PCMSDO78_10
   1562          		{
   1563          			case BUF1_PLAY: 
   1564          				LowPassIIR(Buffer2.bufMIC7 ,Buffer2.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_7: (+1)
   \   000000B6   0x2004             MOVS     R0,#+4
   \   000000B8   0xEB0B 0x0108      ADD      R1,R11,R8
   \   000000BC   0x9000             STR      R0,[SP, #+0]
   \   000000BE   0xF44F 0x6380      MOV      R3,#+1024
   \   000000C2   0xF104 0x026C      ADD      R2,R4,#+108
   \   000000C6   0x4608             MOV      R0,R1
   \   000000C8   0xE00B             B.N      ??PDM2PCMSDO78_11
   1565          			    break;
   1566          			case BUF2_PLAY:
   1567          				LowPassIIR(Buffer3.bufMIC7 ,Buffer3.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_9: (+1)
   \   000000CA   0xEB0B 0x0009      ADD      R0,R11,R9
   \   000000CE   0xE001             B.N      ??PDM2PCMSDO78_12
   1568          			    break;
   1569          			case BUF3_PLAY:
   1570          			    LowPassIIR(Buffer1.bufMIC7 ,Buffer1.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);						
   \                     ??PDM2PCMSDO78_8: (+1)
   \   000000D0   0xEB0B 0x000A      ADD      R0,R11,R10
   \                     ??PDM2PCMSDO78_12: (+1)
   \   000000D4   0x2104             MOVS     R1,#+4
   \   000000D6   0xF44F 0x6380      MOV      R3,#+1024
   \   000000DA   0x9100             STR      R1,[SP, #+0]
   \   000000DC   0xF104 0x026C      ADD      R2,R4,#+108
   \   000000E0   0x4601             MOV      R1,R0
   \                     ??PDM2PCMSDO78_11: (+1)
   \   000000E2   0x.... 0x....      BL       LowPassIIR
   1571          			    break;
   1572          			default:
   1573          			break; 
   1574          		}
   1575          
   1576             switch (buffer_switch_tmp)
   \                     ??PDM2PCMSDO78_10: (+1)
   \   000000E6   0x9801             LDR      R0,[SP, #+4]
   \   000000E8   0xB118             CBZ.N    R0,??PDM2PCMSDO78_13
   \   000000EA   0x2802             CMP      R0,#+2
   \   000000EC   0xD00F             BEQ.N    ??PDM2PCMSDO78_14
   \   000000EE   0xD30B             BCC.N    ??PDM2PCMSDO78_15
   \   000000F0   0xE017             B.N      ??PDM2PCMSDO78_0
   1577            {
   1578          	case BUF1_PLAY:								
   1579          		Buffer2.bufMIC7[0]=Buffer2.bufMIC7[4];
   \                     ??PDM2PCMSDO78_13: (+1)
   \   000000F2   0xEB0B 0x0108      ADD      R1,R11,R8
   \   000000F6   0x8908             LDRH     R0,[R1, #+8]
   \   000000F8   0x8008             STRH     R0,[R1, #+0]
   1580          		Buffer2.bufMIC7[1]=Buffer2.bufMIC7[5];
   \   000000FA   0x8948             LDRH     R0,[R1, #+10]
   \   000000FC   0x8048             STRH     R0,[R1, #+2]
   1581          		Buffer2.bufMIC7[2]=Buffer2.bufMIC7[6];
   \   000000FE   0x8988             LDRH     R0,[R1, #+12]
   \   00000100   0x8088             STRH     R0,[R1, #+4]
   1582          		Buffer2.bufMIC7[3]=Buffer2.bufMIC7[7];								
   \   00000102   0x89C8             LDRH     R0,[R1, #+14]
   \   00000104   0x80C8             STRH     R0,[R1, #+6]
   1583          	    break;	              
   \   00000106   0xE00C             B.N      ??PDM2PCMSDO78_0
   1584          	case BUF2_PLAY:	
   1585          		Buffer3.bufMIC7[0]=Buffer3.bufMIC7[4];
   \                     ??PDM2PCMSDO78_15: (+1)
   \   00000108   0xEB0B 0x0009      ADD      R0,R11,R9
   \   0000010C   0xE001             B.N      ??PDM2PCMSDO78_16
   1586          		Buffer3.bufMIC7[1]=Buffer3.bufMIC7[5];
   1587          		Buffer3.bufMIC7[2]=Buffer3.bufMIC7[6];
   1588          		Buffer3.bufMIC7[3]=Buffer3.bufMIC7[7];				
   1589          	    break;
   1590          	case BUF3_PLAY:
   1591          		Buffer1.bufMIC7[0]=Buffer1.bufMIC7[4];
   \                     ??PDM2PCMSDO78_14: (+1)
   \   0000010E   0xEB0B 0x000A      ADD      R0,R11,R10
   \                     ??PDM2PCMSDO78_16: (+1)
   \   00000112   0x8901             LDRH     R1,[R0, #+8]
   \   00000114   0x8001             STRH     R1,[R0, #+0]
   1592          		Buffer1.bufMIC7[1]=Buffer1.bufMIC7[5];
   \   00000116   0x8941             LDRH     R1,[R0, #+10]
   \   00000118   0x8041             STRH     R1,[R0, #+2]
   1593          		Buffer1.bufMIC7[2]=Buffer1.bufMIC7[6];
   \   0000011A   0x8981             LDRH     R1,[R0, #+12]
   \   0000011C   0x8081             STRH     R1,[R0, #+4]
   1594          		Buffer1.bufMIC7[3]=Buffer1.bufMIC7[7];				
   \   0000011E   0x89C1             LDRH     R1,[R0, #+14]
   \   00000120   0x80C1             STRH     R1,[R0, #+6]
   1595          	    break;
   1596          	default:
   1597          	         break; 
   1598            }
   1599          
   1600          	}
   1601          #if 0
   1602                      /* Recording Audio Data */						 
   1603          		    switch (buffer_switch)//buffer_switch
   1604          		    {
   1605          		        case BUF1_PLAY:								
   1606          					        /* Update for left-right channel */
   1607          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1608          			        {
   1609          	                    Buffer2.bufMIC7[2*i+1]=  Buffer2.bufMIC7[i];
   1610                                  Buffer2.bufMIC7[2*i] = Buffer2.bufMIC7[i];
   1611          			        }
   1612          					  Buffer2.bufMIC7[0] = Buffer2.bufMIC7[4];
   1613          					  Buffer2.bufMIC7[1] = Buffer2.bufMIC7[5];
   1614          					  Buffer2.bufMIC7[2] = Buffer2.bufMIC7[6];
   1615          					  Buffer2.bufMIC7[3] = Buffer2.bufMIC7[7];
   1616          			            break;
   1617          			     case BUF2_PLAY:
   1618          			        /* Update for left-right channel */
   1619          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1620          			        {				 	
   1621          		                Buffer3.bufMIC7[2*i+1]= Buffer3.bufMIC7[i];
   1622          		                Buffer3.bufMIC7[2*i]= Buffer3.bufMIC7[i];;	
   1623          			        }
   1624          					  Buffer3.bufMIC7[0] = Buffer3.bufMIC7[4];
   1625          					  Buffer3.bufMIC7[1] = Buffer3.bufMIC7[5];
   1626          					  Buffer3.bufMIC7[2] = Buffer3.bufMIC7[6];
   1627          					  Buffer3.bufMIC7[3] = Buffer3.bufMIC7[7];					
   1628          	                break;
   1629          	            case BUF3_PLAY:
   1630          			        /* Update for left-right channel */
   1631          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1632          			        {					
   1633          	                    Buffer1.bufMIC7[2*i+1]= Buffer1.bufMIC7[i];
   1634          	                    Buffer1.bufMIC7[2*i]= Buffer1.bufMIC7[i];;	
   1635          			        }
   1636          					  Buffer1.bufMIC7[0] = Buffer1.bufMIC7[4];
   1637          					  Buffer1.bufMIC7[1] = Buffer1.bufMIC7[5];
   1638          					  Buffer1.bufMIC7[2] = Buffer1.bufMIC7[6];
   1639          					  Buffer1.bufMIC7[3] = Buffer1.bufMIC7[7];						
   1640          	                break;
   1641          	            default:
   1642          	                break; 
   1643          	        }
   1644          	    
   1645          
   1646               }
   1647              
   1648          #endif	
   1649          
   1650          	/* Data in Mic8 finished recording */
   1651          	if (WaveRecord_flgSDO8Finish==1)
   \                     ??PDM2PCMSDO78_0: (+1)
   \   00000122   0x78E0             LDRB     R0,[R4, #+3]
   \   00000124   0x2801             CMP      R0,#+1
   \   00000126   0xD17B             BNE.N    ??PDM2PCMSDO78_17
   1652          	{
   1653          		WaveRecord_flgSDO8Finish=0;
   \   00000128   0x2000             MOVS     R0,#+0
   1654          		uint8_t swtSDO8_tmp;
   1655          		swtSDO8_tmp = swtSDO8;
   1656          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   0000012A   0x2700             MOVS     R7,#+0
   \   0000012C   0x70E0             STRB     R0,[R4, #+3]
   \   0000012E   0x7860             LDRB     R0,[R4, #+1]
   \   00000130   0x....             LDR.N    R5,??DataTable17_12
   \   00000132   0x....             LDR.N    R6,??DataTable17_31
   \   00000134   0xF247 0x0B8C      MOVW     R11,#+28812
   \   00000138   0x.... 0x....      LDR.W    R8,??DataTable17_33  ;; 0xc00080a0
   \   0000013C   0x9000             STR      R0,[SP, #+0]
   \   0000013E   0x.... 0x....      LDR.W    R9,??DataTable17_1  ;; 0xc0010140
   \   00000142   0xF04F 0x4A40      MOV      R10,#-1073741824
   1657          		{
   1658                            if(swtSDO8_tmp==0x01)
   \                     ??PDM2PCMSDO78_18: (+1)
   \   00000146   0x9800             LDR      R0,[SP, #+0]
   1659                            {
   1660                               pDataMic8[i%64] = HTONS(TestSDO8[i]);
                                      ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   1661                            }
   1662                            else
   1663                            {
   1664                               pDataMic8[i%64] = HTONS(TestSDO8_1[i]);
                                      ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000148   0x....             LDR.N    R2,??DataTable17_4
   \   0000014A   0x2801             CMP      R0,#+1
   \   0000014C   0xBF07             ITTEE    EQ 
   \   0000014E   0x8828             LDRHEQ   R0,[R5, #+0]
   \   00000150   0x8829             LDRHEQ   R1,[R5, #+0]
   \   00000152   0x8830             LDRHNE   R0,[R6, #+0]
   \   00000154   0x8831             LDRHNE   R1,[R6, #+0]
   \   00000156   0x117B             ASRS     R3,R7,#+5
   \   00000158   0x0209             LSLS     R1,R1,#+8
   \   0000015A   0xEB07 0x6393      ADD      R3,R7,R3, LSR #+26
   \   0000015E   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   00000162   0x119B             ASRS     R3,R3,#+6
   \   00000164   0xEBA7 0x1383      SUB      R3,R7,R3, LSL #+6
   \   00000168   0xF822 0x0013      STRH     R0,[R2, R3, LSL #+1]
   1665                            }
   1666          		
   1667                            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1668                            if (i%64==63)
   \   0000016C   0x1178             ASRS     R0,R7,#+5
   \   0000016E   0xEB07 0x6090      ADD      R0,R7,R0, LSR #+26
   \   00000172   0x1180             ASRS     R0,R0,#+6
   \   00000174   0xEBA7 0x1180      SUB      R1,R7,R0, LSL #+6
   \   00000178   0x293F             CMP      R1,#+63
   \   0000017A   0xD11C             BNE.N    ??PDM2PCMSDO78_19
   1669                            {
   1670                                /* Recording Audio Data */						 
   1671                                switch (buffer_switch)
   \   0000017C   0x....             LDR.N    R1,??DataTable17_32
   \   0000017E   0x7809             LDRB     R1,[R1, #+0]
   \   00000180   0xB119             CBZ.N    R1,??PDM2PCMSDO78_20
   \   00000182   0x2902             CMP      R1,#+2
   \   00000184   0xD00D             BEQ.N    ??PDM2PCMSDO78_21
   \   00000186   0xD306             BCC.N    ??PDM2PCMSDO78_22
   \   00000188   0xE015             B.N      ??PDM2PCMSDO78_19
   1672                                {
   1673                                        case BUF1_PLAY: 							
   1674                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 150 ,
   1675                                                (PDMFilter_InitStruct *)&Filter[1]);
   \                     ??PDM2PCMSDO78_20: (+1)
   \   0000018A   0xF104 0x0338      ADD      R3,R4,#+56
   \   0000018E   0x2296             MOVS     R2,#+150
   \   00000190   0xEB08 0x1040      ADD      R0,R8,R0, LSL #+5
   \   00000194   0xE00A             B.N      ??PDM2PCMSDO78_23
   1676                                                break;
   1677                                        case BUF2_PLAY:
   1678                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 150 ,
   1679                                                (PDMFilter_InitStruct *)&Filter[1]);	
   \                     ??PDM2PCMSDO78_22: (+1)
   \   00000196   0xF104 0x0338      ADD      R3,R4,#+56
   \   0000019A   0x2296             MOVS     R2,#+150
   \   0000019C   0xEB09 0x1040      ADD      R0,R9,R0, LSL #+5
   \   000001A0   0xE004             B.N      ??PDM2PCMSDO78_23
   1680                                                break;
   1681                                        case BUF3_PLAY:
   1682                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 150 ,
   1683                                                (PDMFilter_InitStruct *)&Filter[1]);									
   \                     ??PDM2PCMSDO78_21: (+1)
   \   000001A2   0xF104 0x0338      ADD      R3,R4,#+56
   \   000001A6   0x2296             MOVS     R2,#+150
   \   000001A8   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \                     ??PDM2PCMSDO78_23: (+1)
   \   000001AC   0xEB0B 0x0100      ADD      R1,R11,R0
   \   000001B0   0x....             LDR.N    R0,??DataTable17_4
   \   000001B2   0x.... 0x....      BL       PDM_Filter_64_LSB
   1684                                                 break;
   1685                                        default:
   1686                                                 break; 
   1687                                }		
   1688                             }					 
   1689          		}
   \                     ??PDM2PCMSDO78_19: (+1)
   \   000001B6   0x1C7F             ADDS     R7,R7,#+1
   \   000001B8   0x1CB6             ADDS     R6,R6,#+2
   \   000001BA   0x1CAD             ADDS     R5,R5,#+2
   \   000001BC   0xF5B7 0x5F80      CMP      R7,#+4096
   \   000001C0   0xDBC1             BLT.N    ??PDM2PCMSDO78_18
   1690          
   1691                  /* LowPass Filter 
   1692                        dT = 1/16000
   1693                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1694          		*/						 
   1695          		switch (buffer_switch)
   \   000001C2   0x....             LDR.N    R0,??DataTable17_32
   \   000001C4   0x7800             LDRB     R0,[R0, #+0]
   \   000001C6   0xB118             CBZ.N    R0,??PDM2PCMSDO78_24
   \   000001C8   0x2802             CMP      R0,#+2
   \   000001CA   0xD007             BEQ.N    ??PDM2PCMSDO78_25
   \   000001CC   0xD303             BCC.N    ??PDM2PCMSDO78_26
   \   000001CE   0xE010             B.N      ??PDM2PCMSDO78_27
   1696          		{
   1697          			case BUF1_PLAY: 
   1698          				LowPassIIR(Buffer2.bufMIC8 ,Buffer2.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_24: (+1)
   \   000001D0   0xEB0B 0x0008      ADD      R0,R11,R8
   \   000001D4   0xE004             B.N      ??PDM2PCMSDO78_28
   1699          			    break;
   1700          			case BUF2_PLAY:
   1701          				LowPassIIR(Buffer3.bufMIC8 ,Buffer3.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_26: (+1)
   \   000001D6   0xEB0B 0x0009      ADD      R0,R11,R9
   \   000001DA   0xE001             B.N      ??PDM2PCMSDO78_28
   1702          			    break;
   1703          			case BUF3_PLAY:
   1704          			    LowPassIIR(Buffer1.bufMIC8 ,Buffer1.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);						
   \                     ??PDM2PCMSDO78_25: (+1)
   \   000001DC   0xEB0B 0x000A      ADD      R0,R11,R10
   \                     ??PDM2PCMSDO78_28: (+1)
   \   000001E0   0x2104             MOVS     R1,#+4
   \   000001E2   0xF44F 0x6380      MOV      R3,#+1024
   \   000001E6   0x9100             STR      R1,[SP, #+0]
   \   000001E8   0xF104 0x026E      ADD      R2,R4,#+110
   \   000001EC   0x4601             MOV      R1,R0
   \   000001EE   0x.... 0x....      BL       LowPassIIR
   1705          			    break;
   1706          			default:
   1707          			break; 
   1708          		}
   1709                    					 
   1710                    switch (buffer_switch)
   \                     ??PDM2PCMSDO78_27: (+1)
   \   000001F2   0x....             LDR.N    R0,??DataTable17_32
   \   000001F4   0x7800             LDRB     R0,[R0, #+0]
   \   000001F6   0xB118             CBZ.N    R0,??PDM2PCMSDO78_29
   \   000001F8   0x2802             CMP      R0,#+2
   \   000001FA   0xD007             BEQ.N    ??PDM2PCMSDO78_30
   \   000001FC   0xD303             BCC.N    ??PDM2PCMSDO78_31
   1711                    {
   1712                        case BUF1_PLAY: 	
   1713          					  Buffer2.bufMIC8[0] = Buffer2.bufMIC8[4];
   1714          					  Buffer2.bufMIC8[1] = Buffer2.bufMIC8[5];
   1715          					  Buffer2.bufMIC8[2] = Buffer2.bufMIC8[6];
   1716          					  Buffer2.bufMIC8[3] = Buffer2.bufMIC8[7];
   1717                                break;
   1718                        case BUF2_PLAY:
   1719            					  Buffer3.bufMIC8[0] = Buffer3.bufMIC8[4];
   1720          					  Buffer3.bufMIC8[1] = Buffer3.bufMIC8[5];
   1721          					  Buffer3.bufMIC8[2] = Buffer3.bufMIC8[6];
   1722          					  Buffer3.bufMIC8[3] = Buffer3.bufMIC8[7];
   1723                                break;
   1724                        case BUF3_PLAY:
   1725            					  Buffer1.bufMIC8[0] = Buffer1.bufMIC8[4];
   1726          					  Buffer1.bufMIC8[1] = Buffer1.bufMIC8[5];
   1727          					  Buffer1.bufMIC8[2] = Buffer1.bufMIC8[6];
   1728          					  Buffer1.bufMIC8[3] = Buffer1.bufMIC8[7];
   1729                              break;
   1730                        default:
   1731                              break; 
   1732                    }                	  
   1733             }//if (WaveRecord_flgSDO8Finish==1)
   1734          }
   \   000001FE   0x....             B.N      ?Subroutine2
   \                     ??PDM2PCMSDO78_29: (+1)
   \   00000200   0xEB0B 0x0008      ADD      R0,R11,R8
   \   00000204   0xE004             B.N      ??PDM2PCMSDO78_32
   \                     ??PDM2PCMSDO78_31: (+1)
   \   00000206   0xEB0B 0x0009      ADD      R0,R11,R9
   \   0000020A   0xE001             B.N      ??PDM2PCMSDO78_32
   \                     ??PDM2PCMSDO78_30: (+1)
   \   0000020C   0xEB0B 0x000A      ADD      R0,R11,R10
   \                     ??PDM2PCMSDO78_32: (+1)
   \   00000210   0x8901             LDRH     R1,[R0, #+8]
   \   00000212   0x8001             STRH     R1,[R0, #+0]
   \   00000214   0x8941             LDRH     R1,[R0, #+10]
   \   00000216   0x8041             STRH     R1,[R0, #+2]
   \   00000218   0x8981             LDRH     R1,[R0, #+12]
   \   0000021A   0x8081             STRH     R1,[R0, #+4]
   \   0000021C   0x89C1             LDRH     R1,[R0, #+14]
   \   0000021E   0x80C1             STRH     R1,[R0, #+6]
   \                     ??PDM2PCMSDO78_17: (+1)
   \   00000220                      REQUIRE ?Subroutine2
   \   00000220                      REQUIRE Buffer2
   \   00000220                      REQUIRE Buffer3
   \   00000220                      REQUIRE Buffer1
   \   00000220                      ;; // Fall through to label ?Subroutine2

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0xB003             ADD      SP,SP,#+12
   \   00000002   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .bss, align 4
   \                     swtSDO7:
   \   00000000                      DS8 1
   \                     swtSDO8:
   \   00000001                      DS8 1
   \                     WaveRecord_flgSDO7Finish:
   \   00000002                      DS8 1
   \                     WaveRecord_flgSDO8Finish:
   \   00000003                      DS8 1
   \                     Filter:
   \   00000004                      DS8 104
   \   0000006C                      DS8 2
   \   0000006E                      DS8 2

   \                                 In section .bss, align 4
   \                     pDataMic8:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
   \                     pDataMic7:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
   \                     cntStrt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO34:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO56:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     I2S1_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, at 0xc0000000
   \                     Buffer1:
   \   00000000                      DS8 32928

   \                                 In section .bss, at 0xc00080a0
   \                     Buffer2:
   \   00000000                      DS8 32928

   \                                 In section .bss, at 0xc0010140
   \                     Buffer3:
   \   00000000                      DS8 32928
   1735          

   \                                 In section .text, align 2, keep-with-next
   1736          void MIC7Rec (void)
   1737          {
   1738          	swtSDO7^=0x01;
   \                     MIC7Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable17_6
   1739          	WaveRecord_flgSDO7Finish = 1;
   1740          	if (swtSDO7==0x01)
   \   00000002   0x....             LDR.N    R3,??DataTable17_2
   \   00000004   0xF44F 0x5280      MOV      R2,#+4096
   \   00000008   0x7801             LDRB     R1,[R0, #+0]
   \   0000000A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000E   0x7001             STRB     R1,[R0, #+0]
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x7081             STRB     R1,[R0, #+2]
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xBF0C             ITE      EQ 
   \   0000001A   0x....             LDREQ.N  R1,??DataTable17_30
   \   0000001C   0x....             LDRNE.N  R1,??DataTable17_10
   1741          	{
   1742          		HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   1743          	}
   1744          	else
   1745          	{
   1746          		HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   0000001E   0x....             B.N      ?Subroutine1
   1747          	} 
   1748          
   1749          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x1D18             ADDS     R0,R3,#+4
   \   00000002   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1750          

   \                                 In section .text, align 4, keep-with-next
   1751          void MIC8Rec (void)
   1752          {
   1753               swtSDO8^=0x01;
   \                     MIC8Rec: (+1)
   \   00000000   0x4808             LDR.N    R0,??MIC8Rec_0+0x4
   1754              WaveRecord_flgSDO8Finish = 1;
   1755              if (swtSDO8==0x01)
   \   00000002   0x4B07             LDR.N    R3,??MIC8Rec_0
   \   00000004   0xF44F 0x5280      MOV      R2,#+4096
   \   00000008   0x7841             LDRB     R1,[R0, #+1]
   \   0000000A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000E   0x7041             STRB     R1,[R0, #+1]
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x70C1             STRB     R1,[R0, #+3]
   \   00000014   0x7840             LDRB     R0,[R0, #+1]
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xBF0C             ITE      EQ 
   \   0000001A   0x4903             LDREQ.N  R1,??MIC8Rec_0+0x8
   \   0000001C   0x4903             LDRNE.N  R1,??MIC8Rec_0+0xC
   \   0000001E   0xE007             B.N      ??MIC8Rec_1
   \                     ??MIC8Rec_0:
   \   00000020   0x........         DC32     idxMic7
   \   00000024   0x........         DC32     swtSDO7
   \   00000028   0x........         DC32     TestSDO8_1
   \   0000002C   0x........         DC32     TestSDO8
   1756              {
   1757                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   1758              }
   1759              else
   1760              {
   1761                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??MIC8Rec_1: (+1)
   \   00000030                      REQUIRE ?Subroutine1
   \   00000030                      ;; // Fall through to label ?Subroutine1
   1762          
   1763              }
   1764          
   1765          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x4001300C         DC32     0x4001300c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     WaveRecord_flgInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x........         DC32     hi2s2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   0x4001340C         DC32     0x4001340c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     idxMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x........         DC32     pDataMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x........         DC32     swtSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   0x........         DC32     idxMic7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   0x4001540C         DC32     0x4001540c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_9:
   \   00000000   0x........         DC32     pDataMic7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_10:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_11:
   \   00000000   0x........         DC32     idxMic8+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_12:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_13:
   \   00000000   0x........         DC32     idxMic7+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_14:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_15:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_16:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_17:
   \   00000000   0x........         DC32     swtSDO7+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_18:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_19:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_20:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_21:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_22:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_23:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_24:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_25:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_26:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_27:
   \   00000000   0x40026488         DC32     0x40026488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_28:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_29:
   \   00000000   0x........         DC32     hdma_spi6_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_30:
   \   00000000   0x........         DC32     TestSDO7_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_31:
   \   00000000   0x........         DC32     TestSDO8_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_32:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_33:
   \   00000000   0xC00080A0         DC32     0xc00080a0
   1766          
   1767          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DMA2_Stream5_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream6_IRQHandler
         0   -> HAL_DMA_IRQHandler
      40   HAL_SPI_MspInit
        40   -> HAL_DMA_DeInit
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
       8   HAL_SPI_RxCpltCallback
         0   -> HAL_SPI_Receive_DMA
         8   -> HAL_SPI_Receive_DMA
      24   MIC1TO6_Init
        24   -> HAL_Delay
        24   -> HAL_GPIO_ReadPin
        24   -> HAL_I2S_Init
        24   -> HAL_SPI_Receive_DMA
         0   -> SPI4_Init
        24   -> SPI5_Init
        24   -> SPI6_Init
       0   MIC7Rec
         0   -> HAL_SPI_Receive_DMA
       0   MIC8Rec
         0   -> HAL_SPI_Receive_DMA
       0   Mic7Rec
         0   -> SPI5_Init
       0   Mic8Rec
         0   -> HAL_SPI_Init
      48   PDM2PCMSDO78
        48   -> LowPassIIR
        48   -> PDM_Filter_64_LSB
       4   RecordUpdBuf
       0   SPI1_IRQHandler
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
      16   SPI2_IRQHandler
        16   -> HAL_GPIO_ReadPin
       4   SPI4_IRQHandler
       8   SPI4_Init
         8   -> HAL_SPI_Init
      16   SPI5_IRQHandler
        16   -> PDM_Filter_64_LSB
      24   SPI5_Init
         0   -> HAL_SPI_Init
        24   -> PDM_Filter_Init
      16   SPI6_IRQHandler
        16   -> PDM_Filter_64_LSB
       0   SPI6_Init
         0   -> HAL_SPI_Init
       8   StartRecMic7_8
         8   -> HAL_SPI_Receive_DMA
       0   mySPI_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_11
       4  ??DataTable17_12
       4  ??DataTable17_13
       4  ??DataTable17_14
       4  ??DataTable17_15
       4  ??DataTable17_16
       4  ??DataTable17_17
       4  ??DataTable17_18
       4  ??DataTable17_19
       4  ??DataTable17_2
       4  ??DataTable17_20
       4  ??DataTable17_21
       4  ??DataTable17_22
       4  ??DataTable17_23
       4  ??DataTable17_24
       4  ??DataTable17_25
       4  ??DataTable17_26
       4  ??DataTable17_27
       4  ??DataTable17_28
       4  ??DataTable17_29
       4  ??DataTable17_3
       4  ??DataTable17_30
       4  ??DataTable17_31
       4  ??DataTable17_32
       4  ??DataTable17_33
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable17_8
       4  ??DataTable17_9
      64  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
   32928  Buffer1
   32928  Buffer2
   32928  Buffer3
       8  DMA2_Stream5_IRQHandler
       8  DMA2_Stream6_IRQHandler
    1026  HAL_SPI_MspInit
      98  HAL_SPI_RxCpltCallback
       2  I2S1_stNipple
       1  I2S1_stPosShft
       1  I2S2_stPosShft
     308  MIC1TO6_Init
      32  MIC7Rec
      48  MIC8Rec
       2  Mic7Rec
       2  Mic8Rec
     544  PDM2PCMSDO78
     202  RecordUpdBuf
     232  SPI1_IRQHandler
     212  SPI1_Ini
     254  SPI2_IRQHandler
     266  SPI4_IRQHandler
      86  SPI4_Init
     118  SPI5_IRQHandler
     136  SPI5_Init
     112  SPI6_IRQHandler
       2  SPI6_Init
      46  StartRecMic7_8
    8192  TestSDO12
    8192  TestSDO34
    8192  TestSDO56
    8192  TestSDO7
    8192  TestSDO7_1
    8192  TestSDO8
    8192  TestSDO8_1
       1  WaveRecord_flgIni
      92  WaveRecord_flgInt
          SPI4_stPosShft
          I2S2_stLR
          I2S2_stLROld
          stLROld
          Main_stLROld
          WaveRec_idxTest
          vRawSens1
          vRawSens2
          vRawSens4
          vRawSens3
          vRawSens5
          vRawSens6
          SPI1_stNipple
          I2S2_stNipple
          SPI4_stNipple
          hi2s1
       2  cntStrt
       2  cntTransFinish
      80  hdma_spi2_tx
      80  hdma_spi3_tx
      80  hdma_spi5_rx
      80  hdma_spi6_rx
      64  hi2s2
     100  hspi1
     100  hspi2
       2  iSDO12
       2  iSDO34
       2  iSDO56
       2  idxFrmPDMMic8
     108  idxMic7
          cntPos7
          hspi6
          bufPCMSens7
     108  idxMic8
          cntPos
          hspi5
          bufPCMSens8
      44  mySPI_SendData
     128  pDataMic7
     128  pDataMic8
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins
     112  swtSDO7
          swtSDO8
          WaveRecord_flgSDO7Finish
          WaveRecord_flgSDO8Finish
          Filter
          Mic7LPOld
          Mic8LPOld

 
 58 897 bytes in section .bss
 98 784 bytes in section .bss  (abs)
  4 074 bytes in section .text
 
   4 074 bytes of CODE memory
 157 681 bytes of DATA memory

Errors: none
Warnings: 12
