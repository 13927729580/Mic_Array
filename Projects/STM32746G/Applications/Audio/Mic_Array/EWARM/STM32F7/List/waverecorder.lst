###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       15/May/2016  09:59:43
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          
      2          /*****************************************************************************
      3            *    Author: Phan Le Son                                                                                           
      4            *    Company: Autonomous.ai                                            
      5            *    email: plson03@gmail.com
      6            *****************************************************************************/
      7          
      8          
      9          
     10          /* Includes ------------------------------------------------------------------*/
     11          #include "waverecorder.h" 
     12          #include "string.h"
     13          //#include "stm32f7xx_hal_spi.h"
     14          #include "stm32f7xx_hal.h"
     15          #include "pdm_filter.h"
     16          #include "DSP.h"
     17          
     18          
     19          /* Private typedef -----------------------------------------------------------*/
     20          /* Private define ------------------------------------------------------------*/
     21          
     22          
     23          /* SPI Configuration defines */
     24          #define SPI_SCK_PIN                       GPIO_PIN_10
     25          #define SPI_SCK_GPIO_PORT                 GPIOB
     26          #define SPI_SCK_GPIO_CLK                  1
     27          #define SPI_SCK_SOURCE                    1
     28          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     29          
     30          #define SPI_MOSI_PIN                      GPIO_PIN_3
     31          #define SPI_MOSI_GPIO_PORT                GPIOC
     32          #define SPI_MOSI_GPIO_CLK                 1
     33          #define SPI_MOSI_SOURCE                   1
     34          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     35          
     36          
     37          /* sop1hc */
     38          #define SPI1_SCK_PIN                       GPIO_PIN_5
     39          #define SPI1_SCK_GPIO_PORT                 GPIOA
     40          #define SPI1_SCK_GPIO_CLK                  1
     41          #define SPI1_SCK_SOURCE                    1
     42          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     43          
     44          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     45          #define SPI1_MOSI_GPIO_PORT                GPIOA
     46          #define SPI1_MOSI_GPIO_CLK                 1
     47          #define SPI1_MOSI_SOURCE                   1
     48          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     49          
     50          #define SPI1_MISO_PIN                      GPIO_PIN_6
     51          #define SPI1_MISO_GPIO_PORT                GPIOA
     52          #define SPI1_MISO_GPIO_CLK                 1
     53          #define SPI1_MISO_SOURCE                   1
     54          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     55          
     56          
     57          
     58          

   \                                 In section .bss, align 4
     59          uint16_t idxMic8=0;
     60          uint16_t idxMic7=0;
     61          uint8_t pHeaderBuff[44];
     62          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
     63          uint16_t volatile cntTransFinish;
     64          
     65          /* Private macro -------------------------------------------------------------*/
     66          /* Private variables ---------------------------------------------------------*/
     67          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     68          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     69          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     70          extern WAVE_FormatTypeDef WaveFormat;
     71          extern FIL WavFile;
     72          extern AUDIO_DEMO_StateMachine AudioDemo;
     73          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     74          extern __IO uint8_t buffer_switch;
     75          extern __IO uint8_t volume;
     76          extern SPI_HandleTypeDef hspi4,hspi1;
     77          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     78          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     79          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     80          extern __IO uint16_t  I2S2_idxTmp;
     81          extern SPI_HandleTypeDef     hspi4;
     82          extern DMA_HandleTypeDef     DmaHandle;
     83          
     84          #ifndef CS43L22_PLAY
     85          extern __IO uint8_t flgDlyUpd; 
     86          extern __IO uint32_t XferCplt;
     87          extern __IO uint16_t  idxSPI5DataBuf3;
     88          #endif
     89          
     90          int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
     91          int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
     92          int16_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
     93          uint16_t TestSDO7[8*AUDIO_OUT_BUFFER_SIZE];
     94          uint16_t TestSDO8[8*AUDIO_OUT_BUFFER_SIZE];
     95          uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
     96          uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
     97          __IO uint16_t  WaveRec_idxTest;
     98          __IO uint8_t flgRacing;
     99          
    100          
    101          
    102          SPI_HandleTypeDef hspi1,hspi2;
    103          SPI_HandleTypeDef spi1_ins,spi2_ins;
    104          I2S_HandleTypeDef hi2s1;
    105          I2S_HandleTypeDef hi2s2;
    106          SPI_HandleTypeDef hspi5,hspi6;
   \                     hspi5:
   \   00000000                      DS8 100
   \                     hspi6:
   \   00000064                      DS8 100
    107          DMA_HandleTypeDef hdma_spi2_tx;
    108          DMA_HandleTypeDef hdma_spi3_tx;
    109          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
    110          
    111          #if USB_STREAMING
    112          __IO uint16_t idxFrmPDMMic8;
    113          #endif
    114          
    115          uint16_t *bufPCMSens7;
    116          uint16_t *bufPCMSens8;
    117          __IO uint16_t cntPos;
    118          __IO uint16_t cntPos7;
    119          __IO static uint16_t iBuff;
    120          __IO static uint32_t uwVolume = 70;
    121          __IO PDMFilter_InitStruct Filter[2];
   \                     Filter:
   \   000000C8                      DS8 104
    122          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
    123          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
    124          __IO int16_t   pPDM2PCM[16];
    125          __IO uint16_t cntStrt;
    126          __IO uint8_t WaveRecord_flgInt;
    127          __IO uint8_t WaveRecord_flgIni;
    128          
    129          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
    130          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
    131          __IO uint16_t iSDO12,iSDO34,iSDO56;
    132          __IO uint8_t swtSDO7,swtSDO8;
   \                     swtSDO7:
   \   00000130                      DS8 1
   \                     swtSDO8:
   \   00000131                      DS8 1
    133          __IO uint8_t WaveRecord_flgSDO7Finish, WaveRecord_flgSDO8Finish;
   \                     WaveRecord_flgSDO7Finish:
   \   00000132                      DS8 1
   \                     WaveRecord_flgSDO8Finish:
   \   00000133                      DS8 1
   \                     idxMic8:
   \   00000134                      DS8 2
   \                     idxMic7:
   \   00000136                      DS8 2
   \                     cntPos:
   \   00000138                      DS8 2
   \                     cntPos7:
   \   0000013A                      DS8 2
   \                     bufPCMSens7:
   \   0000013C                      DS8 4
   \                     bufPCMSens8:
   \   00000140                      DS8 4
   \                     pDataMic8:
   \   00000144                      DS8 128
   \                     pDataMic7:
   \   000001C4                      DS8 128

   \                                 In section .bss, align 4
   \                     pHeaderBuff:
   \   00000000                      DS8 44

   \                                 In section .bss, align 2
   \                     cntTransFinish:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     TestSDO12:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO34:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO56:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    134          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
    135          __IO uint8_t I2S2_stLR, I2S2_stLROld;
    136          
    137          /* Private function prototypes -----------------------------------------------*/
    138          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    139          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    140          static void I2S1_Init(void);
    141          static void I2S2_Init(void);
    142          
    143          #if EXT_RAM
    144          #pragma location=SDRAM_BANK_ADDR
    145          #endif
    146          Mic_Array_Data Buffer1;
   \                     Buffer1:
   \   00000000                      DS8 16384
    147          #if EXT_RAM
    148          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)
    149          #endif
    150          Mic_Array_Data Buffer2;
   \                     Buffer2:
   \   00004000                      DS8 16384
    151          #if EXT_RAM
    152          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)
    153          #endif
    154          Mic_Array_Data Buffer3;
   \                     Buffer3:
   \   00008000                      DS8 16384
   \                     TestSDO7:
   \   0000C000                      DS8 16384
   \                     TestSDO8:
   \   00010000                      DS8 16384

   \                                 In section .bss, align 4
   \                     TestSDO7_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8_1:
   \   00000000                      DS8 8192
    155          

   \                                 In section .text, align 2, keep-with-next
    156          void SPI1_Ini(void)
    157          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    158            GPIO_InitTypeDef GPIO_InitStructure;
    159          
    160           
    161             	 
    162            /* Enable SCK, MOSI and MISO GPIO clocks */
    163            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x40023830
    164            __HAL_RCC_GPIOA_CLK_ENABLE();
    165          
    166            
    167            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    168            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    169            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    170          
    171            /* SPI SCK pin configuration */
    172            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    173            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    174            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable15_2  ;; 0x40020000
   \   00000010   0x6941             LDR      R1,[R0, #+20]
   \   00000012   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000016   0x6141             STR      R1,[R0, #+20]
   \   00000018   0x6941             LDR      R1,[R0, #+20]
   \   0000001A   0xF401 0x5180      AND      R1,R1,#0x1000
   \   0000001E   0x9100             STR      R1,[SP, #+0]
   \   00000020   0x9900             LDR      R1,[SP, #+0]
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x9100             STR      R1,[SP, #+0]
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000002C   0x6001             STR      R1,[R0, #+0]
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xA901             ADD      R1,SP,#+4
   \   00000032   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0x9002             STR      R0,[SP, #+8]
   \   0000003E   0x9003             STR      R0,[SP, #+12]
   \   00000040   0x2003             MOVS     R0,#+3
   \   00000042   0x9004             STR      R0,[SP, #+16]
   \   00000044   0x2005             MOVS     R0,#+5
   \   00000046   0x9005             STR      R0,[SP, #+20]
   \   00000048   0x2020             MOVS     R0,#+32
   \   0000004A   0x9001             STR      R0,[SP, #+4]
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       HAL_GPIO_Init
    175          
    176            /* SPI  MOSI pin configuration */
    177            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   00000052   0x2001             MOVS     R0,#+1
    178            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    179            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   00000054   0xA901             ADD      R1,SP,#+4
   \   00000056   0x9005             STR      R0,[SP, #+20]
   \   00000058   0x2080             MOVS     R0,#+128
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x4620             MOV      R0,R4
   \   0000005E   0x.... 0x....      BL       HAL_GPIO_Init
    180          
    181            /* SPI MISO pin configuration */
    182            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   00000062   0x2001             MOVS     R0,#+1
    183            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    184            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   00000064   0xA901             ADD      R1,SP,#+4
   \   00000066   0x9005             STR      R0,[SP, #+20]
   \   00000068   0x2040             MOVS     R0,#+64
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       HAL_GPIO_Init
    185          
    186            /* SPI configuration -------------------------------------------------------*/
    187            //SPI_I2S_DeInit(SPI1);
    188            
    189            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable15_3
   \   00000076   0xF44F 0x6180      MOV      R1,#+1024
   \   0000007A   0x6081             STR      R1,[R0, #+8]
    190            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000007C   0xF44F 0x6170      MOV      R1,#+3840
   \   00000080   0x60C1             STR      R1,[R0, #+12]
    191            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x6101             STR      R1,[R0, #+16]
    192            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    193            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    194            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    195            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    196            spi1_ins.Init.CRCPolynomial = 7;
    197            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   00000086   0x.... 0x....      LDR.W    R4,??DataTable15_4  ;; 0x40021000
   \   0000008A   0x6141             STR      R1,[R0, #+20]
   \   0000008C   0xF44F 0x7100      MOV      R1,#+512
   \   00000090   0x6181             STR      R1,[R0, #+24]
   \   00000092   0x2128             MOVS     R1,#+40
   \   00000094   0x61C1             STR      R1,[R0, #+28]
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x6201             STR      R1,[R0, #+32]
   \   0000009A   0x2107             MOVS     R1,#+7
   \   0000009C   0x62C1             STR      R1,[R0, #+44]
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0x6041             STR      R1,[R0, #+4]
    198            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   000000A2   0x.... 0x....      BL       HAL_SPI_Init
    199            {
    200              /* Initialization Error */
    201              //Error_Handler();
    202            }
    203            
    204           
    205            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   000000A6   0x2008             MOVS     R0,#+8
    206            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    207            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    208            GPIO_InitStructure.Pull = GPIO_PULLUP;
    209            //GPIO_InitStructure.Alternate 
    210            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000A8   0xA901             ADD      R1,SP,#+4
   \   000000AA   0x9001             STR      R0,[SP, #+4]
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x9002             STR      R0,[SP, #+8]
   \   000000B0   0x2002             MOVS     R0,#+2
   \   000000B2   0x9004             STR      R0,[SP, #+16]
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0x9003             STR      R0,[SP, #+12]
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x.... 0x....      BL       HAL_GPIO_Init
    211          
    212            /* Deselect : Chip Select high */
    213            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000BE   0x2201             MOVS     R2,#+1
   \   000000C0   0x2108             MOVS     R1,#+8
   \   000000C2   0x4620             MOV      R0,R4
   \   000000C4   0x.... 0x....      BL       HAL_GPIO_WritePin
    214             /* sop1hc */
    215            /* Configure the SPI interrupt priority */
    216            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000C8   0x2200             MOVS     R2,#+0
   \   000000CA   0x2100             MOVS     R1,#+0
   \   000000CC   0x2023             MOVS     R0,#+35
   \   000000CE   0x.... 0x....      BL       HAL_NVIC_SetPriority
    217          
    218            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000D2   0x2023             MOVS     R0,#+35
   \   000000D4   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    219            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    220            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    221          
    222            /* Enable SPI1  */
    223            //__HAL_SPI_ENABLE(SPI1);
    224          
    225          }
   \   000000D8   0xB006             ADD      SP,SP,#+24
   \   000000DA   0xBD10             POP      {R4,PC}          ;; return
    226          

   \                                 In section .text, align 2, keep-with-next
    227          void mySPI_SendData(uint8_t adress, uint8_t data)
    228          {
   \                     mySPI_SendData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable15_3
   \   00000004   0x6812             LDR      R2,[R2, #+0]
    229           
    230          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x6893             LDR      R3,[R2, #+8]
   \   00000008   0x079B             LSLS     R3,R3,#+30
   \   0000000A   0xD5FC             BPL.N    ??mySPI_SendData_0
    231          SPI_I2S_SendData(SPI1, adress);
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable15_5  ;; 0x4001300c
   \   00000010   0x6018             STR      R0,[R3, #+0]
    232          
    233          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   00000012   0x6890             LDR      R0,[R2, #+8]
   \   00000014   0x07C0             LSLS     R0,R0,#+31
   \   00000016   0xD5FC             BPL.N    ??mySPI_SendData_1
    234          SPI_I2S_ReceiveData(SPI1);
   \   00000018   0x6818             LDR      R0,[R3, #+0]
    235          
    236          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   0000001A   0x6890             LDR      R0,[R2, #+8]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD4FC             BMI.N    ??mySPI_SendData_2
    237          SPI_I2S_SendData(SPI1, data);
   \   00000020   0x6019             STR      R1,[R3, #+0]
    238          
    239          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000022   0x6890             LDR      R0,[R2, #+8]
   \   00000024   0x07C0             LSLS     R0,R0,#+31
   \   00000026   0xD4FC             BMI.N    ??mySPI_SendData_3
    240          SPI_I2S_ReceiveData(SPI1);
   \   00000028   0x6818             LDR      R0,[R3, #+0]
    241           
    242          }
   \   0000002A   0x4770             BX       LR               ;; return
    243          
    244          /**
    245            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    246            * @param  None
    247            * @retval None
    248          */
    249          

   \                                 In section .text, align 2, keep-with-next
    250          void SPI1_IRQHandler(void)
    251          {  
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    252                int16_t tmpTest;
    253          	  static uint8_t stLR,stLROld;
                 	                 ^
Warning[Pe177]: variable "stLR" was declared but never referenced
    254          	
    255          	  /* SPI in mode Receiver ----------------------------------------------------*/
    256          	  if(
    257          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    258          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    259          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable15_6
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xF140 0x80E4      BPL.W    ??SPI1_IRQHandler_0
    260          	  {
    261          	
    262          
    263          	   tmpTest =  (int16_t)SPI_I2S_ReceiveData(SPI1);
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x4001300c
   \   00000014   0x6800             LDR      R0,[R0, #+0]
    264          	
    265          	   /* Left-Right Mic data */
    266          	   //stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    267          	
    268          		if (I2S2_stLR==GPIO_PIN_SET)
   \   00000016   0xF894 0x1085      LDRB     R1,[R4, #+133]
   \   0000001A   0xF894 0x2083      LDRB     R2,[R4, #+131]
   \   0000001E   0xB200             SXTH     R0,R0
   \   00000020   0x2A01             CMP      R2,#+1
   \   00000022   0xD168             BNE.N    ??SPI1_IRQHandler_1
    269          		{
    270          		       if(stLROld==GPIO_PIN_SET) 
   \   00000024   0x2901             CMP      R1,#+1
   \   00000026   0xF040 0x80D7      BNE.W    ??SPI1_IRQHandler_0
    271          		       {
    272          				   vRawSens1 = (tmpTest);
   \   0000002A   0xF8A4 0x008A      STRH     R0,[R4, #+138]
    273          			       WaveRec_idxTest++;
   \   0000002E   0xF8B4 0x0088      LDRH     R0,[R4, #+136]
    274          				   /* Recording Audio Data */						 
    275          #if 1
    276          					if (WaveRec_idxSens1<AUDIO_OUT_BUFFER_SIZE) 
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0xF8A4 0x0088      STRH     R0,[R4, #+136]
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable15_8
   \   00000040   0x8802             LDRH     R2,[R0, #+0]
   \   00000042   0x7809             LDRB     R1,[R1, #+0]
   \   00000044   0xF5B2 0x6F80      CMP      R2,#+1024
   \   00000048   0xDA22             BGE.N    ??SPI1_IRQHandler_2
    277          					{
    278          					   switch (buffer_switch)
   \   0000004A   0xB119             CBZ.N    R1,??SPI1_IRQHandler_3
   \   0000004C   0x2902             CMP      R1,#+2
   \   0000004E   0xD017             BEQ.N    ??SPI1_IRQHandler_4
   \   00000050   0xD30B             BCC.N    ??SPI1_IRQHandler_5
   \   00000052   0xE042             B.N      ??SPI1_IRQHandler_6
    279          					   {
    280                                                        case BUF1_PLAY:
    281                                                            Buffer2.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;								
   \                     ??SPI1_IRQHandler_3: (+1)
   \   00000054   0xF9B4 0x108A      LDRSH    R1,[R4, #+138]
   \   00000058   0x8803             LDRH     R3,[R0, #+0]
   \   0000005A   0x.... 0x....      LDR.W    R2,??DataTable16
   \   0000005E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000062   0xF502 0x4280      ADD      R2,R2,#+16384
   \   00000066   0x8011             STRH     R1,[R2, #+0]
    282                                                            break;
    283                                                        case BUF2_PLAY:
    284                                                            Buffer3.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;
    285                                                            break;
   \   00000068   0xE037             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_5: (+1)
   \   0000006A   0xF9B4 0x108A      LDRSH    R1,[R4, #+138]
   \   0000006E   0x8803             LDRH     R3,[R0, #+0]
   \   00000070   0x.... 0x....      LDR.W    R2,??DataTable16
   \   00000074   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000078   0xF502 0x4200      ADD      R2,R2,#+32768
   \   0000007C   0x8011             STRH     R1,[R2, #+0]
   \   0000007E   0xE02C             B.N      ??SPI1_IRQHandler_6
    286                                                        case BUF3_PLAY:
    287                                                            Buffer1.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;									
   \                     ??SPI1_IRQHandler_4: (+1)
   \   00000080   0xF9B4 0x108A      LDRSH    R1,[R4, #+138]
   \   00000084   0x8803             LDRH     R3,[R0, #+0]
   \   00000086   0x.... 0x....      LDR.W    R2,??DataTable16
   \   0000008A   0xF822 0x1013      STRH     R1,[R2, R3, LSL #+1]
    288                                                            break;
    289                                                        default:
    290                                                            break; 
    291          					   
    292          					   }
    293          					  
    294          					}
    295          					else
    296          #endif						
    297          					{
    298          						switch (buffer_switch)
    299          						{
    300          						    case BUF1_PLAY:
    301          						                    Buffer1.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;//vRawSens1;									
    302          						                    break;
   \   0000008E   0xE024             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_2: (+1)
   \   00000090   0xB119             CBZ.N    R1,??SPI1_IRQHandler_7
   \   00000092   0x2902             CMP      R1,#+2
   \   00000094   0xD015             BEQ.N    ??SPI1_IRQHandler_8
   \   00000096   0xD30A             BCC.N    ??SPI1_IRQHandler_9
   \   00000098   0xE01F             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_7: (+1)
   \   0000009A   0xF9B4 0x108A      LDRSH    R1,[R4, #+138]
   \   0000009E   0x8803             LDRH     R3,[R0, #+0]
   \   000000A0   0x.... 0x....      LDR.W    R2,??DataTable16
   \   000000A4   0x059B             LSLS     R3,R3,#+22
   \   000000A6   0x0D9B             LSRS     R3,R3,#+22
   \   000000A8   0xF822 0x1013      STRH     R1,[R2, R3, LSL #+1]
   \   000000AC   0xE015             B.N      ??SPI1_IRQHandler_6
    303          						    case BUF2_PLAY:
    304          						                    Buffer2.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;//vRawSens1;	
   \                     ??SPI1_IRQHandler_9: (+1)
   \   000000AE   0x8802             LDRH     R2,[R0, #+0]
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000000B4   0x0592             LSLS     R2,R2,#+22
   \   000000B6   0x0D92             LSRS     R2,R2,#+22
   \   000000B8   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000BC   0xF501 0x4180      ADD      R1,R1,#+16384
   \   000000C0   0xE008             B.N      ??SPI1_IRQHandler_10
    305          						                    break;
    306          						    case BUF3_PLAY:
    307          						                    Buffer3.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;//vRawSens1;										
   \                     ??SPI1_IRQHandler_8: (+1)
   \   000000C2   0x8802             LDRH     R2,[R0, #+0]
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000000C8   0x0592             LSLS     R2,R2,#+22
   \   000000CA   0x0D92             LSRS     R2,R2,#+22
   \   000000CC   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000D0   0xF501 0x4100      ADD      R1,R1,#+32768
   \                     ??SPI1_IRQHandler_10: (+1)
   \   000000D4   0xF9B4 0x208A      LDRSH    R2,[R4, #+138]
   \   000000D8   0x800A             STRH     R2,[R1, #+0]
    308          						                    break;
    309          						    default:
    310          						                    break; 
    311          						}
    312          					}
    313          
    314          					 WaveRec_idxSens1++;
   \                     ??SPI1_IRQHandler_6: (+1)
   \   000000DA   0x8801             LDRH     R1,[R0, #+0]
   \   000000DC   0x1C49             ADDS     R1,R1,#+1
   \   000000DE   0x8001             STRH     R1,[R0, #+0]
    315          
    316                            if ((WaveRec_idxSens1 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x01;
   \   000000E0   0x8800             LDRH     R0,[R0, #+0]
   \   000000E2   0x210F             MOVS     R1,#+15
   \   000000E4   0x4208             TST      R0,R1
   \   000000E6   0xD171             BNE.N    ??SPI1_IRQHandler_11
   \   000000E8   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000000EC   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000000F0   0xF884 0x0080      STRB     R0,[R4, #+128]
    317          
    318          			       if (flgRacing==0x3F)  SubFrameFinished();                    
   \   000000F4   0xE06A             B.N      ??SPI1_IRQHandler_11
    319          		       	}
    320          		}
    321          		else
    322          		{		
    323                    if ((stLROld==GPIO_PIN_RESET))  
   \                     ??SPI1_IRQHandler_1: (+1)
   \   000000F6   0x2900             CMP      R1,#+0
   \   000000F8   0xD16E             BNE.N    ??SPI1_IRQHandler_0
    324                    {
    325          				vRawSens2 = (tmpTest);
   \   000000FA   0xF8A4 0x008C      STRH     R0,[R4, #+140]
    326          				WaveRec_idxTest++;
   \   000000FE   0xF8B4 0x0088      LDRH     R0,[R4, #+136]
    327          #if 1				
    328          				if (WaveRec_idxSens2<AUDIO_OUT_BUFFER_SIZE)
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   00000106   0x1C40             ADDS     R0,R0,#+1
   \   00000108   0xF8A4 0x0088      STRH     R0,[R4, #+136]
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000110   0x8802             LDRH     R2,[R0, #+0]
   \   00000112   0x7809             LDRB     R1,[R1, #+0]
   \   00000114   0xF5B2 0x6F80      CMP      R2,#+1024
   \   00000118   0xDA24             BGE.N    ??SPI1_IRQHandler_12
    329          				{
    330          					/* Recording Audio Data */						 
    331          					switch (buffer_switch)
   \   0000011A   0xB119             CBZ.N    R1,??SPI1_IRQHandler_13
   \   0000011C   0x2902             CMP      R1,#+2
   \   0000011E   0xD017             BEQ.N    ??SPI1_IRQHandler_14
   \   00000120   0xD30B             BCC.N    ??SPI1_IRQHandler_15
   \   00000122   0xE046             B.N      ??SPI1_IRQHandler_16
    332          					{
    333          						case BUF1_PLAY:
    334          							Buffer2.bufMIC2[WaveRec_idxSens2] = vRawSens2;								
   \                     ??SPI1_IRQHandler_13: (+1)
   \   00000124   0xF9B4 0x108C      LDRSH    R1,[R4, #+140]
   \   00000128   0x8803             LDRH     R3,[R0, #+0]
   \   0000012A   0x.... 0x....      LDR.W    R2,??DataTable16
   \   0000012E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000132   0xF502 0x4290      ADD      R2,R2,#+18432
   \   00000136   0x8011             STRH     R1,[R2, #+0]
    335          							break;
    336          						case BUF2_PLAY:
    337          							Buffer3.bufMIC2[WaveRec_idxSens2] = vRawSens2;
    338          							break;
   \   00000138   0xE03B             B.N      ??SPI1_IRQHandler_16
   \                     ??SPI1_IRQHandler_15: (+1)
   \   0000013A   0xF9B4 0x108C      LDRSH    R1,[R4, #+140]
   \   0000013E   0x8803             LDRH     R3,[R0, #+0]
   \   00000140   0x.... 0x....      LDR.W    R2,??DataTable16
   \   00000144   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000148   0xF502 0x4208      ADD      R2,R2,#+34816
   \   0000014C   0x8011             STRH     R1,[R2, #+0]
   \   0000014E   0xE030             B.N      ??SPI1_IRQHandler_16
    339          						case BUF3_PLAY:
    340          							Buffer1.bufMIC2[WaveRec_idxSens2] = vRawSens2;									
   \                     ??SPI1_IRQHandler_14: (+1)
   \   00000150   0xF9B4 0x108C      LDRSH    R1,[R4, #+140]
   \   00000154   0x8803             LDRH     R3,[R0, #+0]
   \   00000156   0x.... 0x....      LDR.W    R2,??DataTable16
   \   0000015A   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000015E   0xF8A2 0x1800      STRH     R1,[R2, #+2048]
    341          							break;
   \   00000162   0xE026             B.N      ??SPI1_IRQHandler_16
    342          						default:
    343          							break; 
    344          
    345          				        }
    346          					
    347                           }
    348                           else
    349          #endif				 	
    350                           {
    351          
    352          					 /* Recording Audio Data */ 					  
    353          					 switch (buffer_switch)
   \                     ??SPI1_IRQHandler_12: (+1)
   \   00000164   0xB119             CBZ.N    R1,??SPI1_IRQHandler_17
   \   00000166   0x2902             CMP      R1,#+2
   \   00000168   0xD017             BEQ.N    ??SPI1_IRQHandler_18
   \   0000016A   0xD30C             BCC.N    ??SPI1_IRQHandler_19
   \   0000016C   0xE021             B.N      ??SPI1_IRQHandler_16
    354          					 {
    355          						 case BUF1_PLAY:
    356          							 Buffer1.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;								 
   \                     ??SPI1_IRQHandler_17: (+1)
   \   0000016E   0x8802             LDRH     R2,[R0, #+0]
   \   00000170   0x.... 0x....      LDR.W    R1,??DataTable16
   \   00000174   0x0592             LSLS     R2,R2,#+22
   \   00000176   0x0D92             LSRS     R2,R2,#+22
   \   00000178   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   0000017C   0xF9B4 0x208C      LDRSH    R2,[R4, #+140]
   \   00000180   0xF8A1 0x2800      STRH     R2,[R1, #+2048]
    357          							 break;
   \   00000184   0xE015             B.N      ??SPI1_IRQHandler_16
    358          						 case BUF2_PLAY:
    359          							 Buffer2.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;
   \                     ??SPI1_IRQHandler_19: (+1)
   \   00000186   0x8802             LDRH     R2,[R0, #+0]
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable16
   \   0000018C   0x0592             LSLS     R2,R2,#+22
   \   0000018E   0x0D92             LSRS     R2,R2,#+22
   \   00000190   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   00000194   0xF501 0x4190      ADD      R1,R1,#+18432
   \   00000198   0xE008             B.N      ??SPI1_IRQHandler_20
    360          							 break;
    361          						 case BUF3_PLAY:
    362          							 Buffer3.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;									 
   \                     ??SPI1_IRQHandler_18: (+1)
   \   0000019A   0x8802             LDRH     R2,[R0, #+0]
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000001A0   0x0592             LSLS     R2,R2,#+22
   \   000001A2   0x0D92             LSRS     R2,R2,#+22
   \   000001A4   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000001A8   0xF501 0x4108      ADD      R1,R1,#+34816
   \                     ??SPI1_IRQHandler_20: (+1)
   \   000001AC   0xF9B4 0x208C      LDRSH    R2,[R4, #+140]
   \   000001B0   0x800A             STRH     R2,[R1, #+0]
    363          							 break;
    364          						 default:
    365          							 break; 
    366          					
    367          					}
    368          
    369          			       }
    370          
    371          				    WaveRec_idxSens2++;
   \                     ??SPI1_IRQHandler_16: (+1)
   \   000001B2   0x8801             LDRH     R1,[R0, #+0]
   \   000001B4   0x1C49             ADDS     R1,R1,#+1
   \   000001B6   0x8001             STRH     R1,[R0, #+0]
    372          
    373          		if ((WaveRec_idxSens2 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x02;
   \   000001B8   0x8800             LDRH     R0,[R0, #+0]
   \   000001BA   0x210F             MOVS     R1,#+15
   \   000001BC   0x4208             TST      R0,R1
   \   000001BE   0xD105             BNE.N    ??SPI1_IRQHandler_11
   \   000001C0   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000001C4   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000001C8   0xF884 0x0080      STRB     R0,[R4, #+128]
    374          
    375          		if (flgRacing==0x3F)  SubFrameFinished();			      
   \                     ??SPI1_IRQHandler_11: (+1)
   \   000001CC   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000001D0   0x283F             CMP      R0,#+63
   \   000001D2   0xBF08             IT       EQ 
   \   000001D4   0x.... 0x....      BLEQ     SubFrameFinished
    376          					
    377          
    378          			  }
    379          		
    380          		} 	
    381          
    382          		
    383          	}
    384          	   
    385          
    386          #if 0
    387                 if (iSDO12<4*AUDIO_OUT_BUFFER_SIZE)
    388          	   {
    389                     TestSDO12[iSDO12++]=tmpTest;
    390          	   }
    391          	   else
    392          	   {
    393                     iSDO12=0;
    394          	   }
    395          		if ((WaveRec_idxSens1 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens2 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    396          	//			  &&(stLR!=stLROld))
    397          		{
    398          	/*-------------------------------------------------------------------------------------------------------------
    399          				  
    400          		Sequence  Record Data					  Processing Data				  Player Data
    401          				  
    402          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    403          				  
    404          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    405          				  
    406          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    407          	 ---------------------------------------------------------------------------------------------------------------*/
    408          				  /* Recording Audio Data */						 
    409          				   switch (buffer_switch)
    410          				   {
    411          							case BUF1_PLAY:
    412                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    413          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    414          							    else
    415          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    416          	
    417          									break;
    418          							case BUF2_PLAY:
    419                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    420          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    421          							    else
    422          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;	
    423          									break;
    424          							case BUF3_PLAY:
    425                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    426          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    427          							    else
    428          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    429          									break;
    430          							default:
    431          									break; 
    432          				   }
    433          			
    434          		 } 
    435          #endif		
    436          
    437          		/* Update Old value */	  
    438          		stLROld=I2S2_stLR;
   \                     ??SPI1_IRQHandler_0: (+1)
   \   000001D8   0xF894 0x0083      LDRB     R0,[R4, #+131]
   \   000001DC   0xF884 0x0085      STRB     R0,[R4, #+133]
    439          
    440          				 
    441          } 	 
   \   000001E0   0xBD10             POP      {R4,PC}          ;; return
    442          
    443          
    444          
    445          
    446          /**
    447            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    448            * @param  None
    449            * @retval None
    450          */
    451          

   \                                 In section .text, align 2, keep-with-next
    452          void SPI2_IRQHandler(void)
    453          {      
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    454              int16_t app;
    455              
    456          
    457            /* Check if data are available in SPI Data register */
    458             if (
    459          //	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    460          //   	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    461             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    462             	  )
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable15_6
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x6C20             LDR      R0,[R4, #+64]
   \   0000000A   0x6840             LDR      R0,[R0, #+4]
   \   0000000C   0x0640             LSLS     R0,R0,#+25
   \   0000000E   0xF140 0x80D7      BPL.W    ??SPI2_IRQHandler_0
    463             {
    464              
    465               app = (int16_t)SPI_I2S_ReceiveData(SPI2);   
    466               //SPI_I2S_SendData(SPI2, 3333);
    467          
    468          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x4000380c
   \   00000018   0x6805             LDR      R5,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40020000
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000022   0xF884 0x0083      STRB     R0,[R4, #+131]
    469          
    470          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   00000026   0xF894 0x0083      LDRB     R0,[R4, #+131]
   \   0000002A   0xB22D             SXTH     R5,R5
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xF894 0x0084      LDRB     R0,[R4, #+132]
   \   00000032   0xD15E             BNE.N    ??SPI2_IRQHandler_1
    471          	 {		
    472          		if ((I2S2_stLROld==GPIO_PIN_RESET)) 
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xF040 0x80BF      BNE.W    ??SPI2_IRQHandler_2
    473          		{
    474          			vRawSens4 = app;
    475          #if 1			
    476          			if (WaveRec_idxSens4< AUDIO_OUT_BUFFER_SIZE)
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable16_3
   \   0000003E   0xF8A4 0x508E      STRH     R5,[R4, #+142]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   00000046   0x8802             LDRH     R2,[R0, #+0]
   \   00000048   0x7809             LDRB     R1,[R1, #+0]
   \   0000004A   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000004E   0xDA1F             BGE.N    ??SPI2_IRQHandler_3
    477          			{
    478          				switch (buffer_switch)
   \   00000050   0xB119             CBZ.N    R1,??SPI2_IRQHandler_4
   \   00000052   0x2902             CMP      R1,#+2
   \   00000054   0xD013             BEQ.N    ??SPI2_IRQHandler_5
   \   00000056   0xD309             BCC.N    ??SPI2_IRQHandler_6
   \   00000058   0xE03D             B.N      ??SPI2_IRQHandler_7
    479          				{
    480          					case BUF1_PLAY:
    481          						Buffer2.bufMIC4[WaveRec_idxSens4] = vRawSens4;								
   \                     ??SPI2_IRQHandler_4: (+1)
   \   0000005A   0x8803             LDRH     R3,[R0, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R2,??DataTable16
   \   00000060   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000064   0xF502 0x42B0      ADD      R2,R2,#+22528
   \   00000068   0x8015             STRH     R5,[R2, #+0]
    482          						break;
    483          					case BUF2_PLAY:
    484          						Buffer3.bufMIC4[WaveRec_idxSens4] = vRawSens4;
    485          						break;
    486          					case BUF3_PLAY:
    487          						Buffer1.bufMIC4[WaveRec_idxSens4] = vRawSens4;									
    488          						break;
   \   0000006A   0xE034             B.N      ??SPI2_IRQHandler_7
   \                     ??SPI2_IRQHandler_6: (+1)
   \   0000006C   0x8803             LDRH     R3,[R0, #+0]
   \   0000006E   0x.... 0x....      LDR.W    R2,??DataTable16
   \   00000072   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000076   0xF502 0x4218      ADD      R2,R2,#+38912
   \   0000007A   0x8015             STRH     R5,[R2, #+0]
   \   0000007C   0xE02B             B.N      ??SPI2_IRQHandler_7
   \                     ??SPI2_IRQHandler_5: (+1)
   \   0000007E   0x8803             LDRH     R3,[R0, #+0]
   \   00000080   0x.... 0x....      LDR.W    R2,??DataTable16
   \   00000084   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000088   0xF502 0x52C0      ADD      R2,R2,#+6144
   \   0000008C   0x8015             STRH     R5,[R2, #+0]
   \   0000008E   0xE022             B.N      ??SPI2_IRQHandler_7
    489          					default:
    490          						break; 
    491          				}
    492          				
    493          			}			
    494          			else
    495          #endif				
    496          			{
    497          				switch (buffer_switch)
   \                     ??SPI2_IRQHandler_3: (+1)
   \   00000090   0xB119             CBZ.N    R1,??SPI2_IRQHandler_8
   \   00000092   0x2902             CMP      R1,#+2
   \   00000094   0xD015             BEQ.N    ??SPI2_IRQHandler_9
   \   00000096   0xD30A             BCC.N    ??SPI2_IRQHandler_10
   \   00000098   0xE01D             B.N      ??SPI2_IRQHandler_7
    498          				{
    499          					case BUF1_PLAY:
    500          						Buffer1.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;								
   \                     ??SPI2_IRQHandler_8: (+1)
   \   0000009A   0x8802             LDRH     R2,[R0, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000000A0   0x0592             LSLS     R2,R2,#+22
   \   000000A2   0x0D92             LSRS     R2,R2,#+22
   \   000000A4   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000A8   0xF501 0x51C0      ADD      R1,R1,#+6144
   \   000000AC   0xE012             B.N      ??SPI2_IRQHandler_11
    501          						break;
    502          					case BUF2_PLAY:
    503          						Buffer2.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;
   \                     ??SPI2_IRQHandler_10: (+1)
   \   000000AE   0x8802             LDRH     R2,[R0, #+0]
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000000B4   0x0592             LSLS     R2,R2,#+22
   \   000000B6   0x0D92             LSRS     R2,R2,#+22
   \   000000B8   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000BC   0xF501 0x41B0      ADD      R1,R1,#+22528
   \   000000C0   0xE008             B.N      ??SPI2_IRQHandler_11
    504          						break;
    505          					case BUF3_PLAY:
    506          						Buffer3.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;									
   \                     ??SPI2_IRQHandler_9: (+1)
   \   000000C2   0x8802             LDRH     R2,[R0, #+0]
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000000C8   0x0592             LSLS     R2,R2,#+22
   \   000000CA   0x0D92             LSRS     R2,R2,#+22
   \   000000CC   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000D0   0xF501 0x4118      ADD      R1,R1,#+38912
   \                     ??SPI2_IRQHandler_11: (+1)
   \   000000D4   0x800D             STRH     R5,[R1, #+0]
    507          						break;
    508          					default:
    509          						break; 
    510          				}
    511          			}
    512          
    513          		    WaveRec_idxSens4++;
   \                     ??SPI2_IRQHandler_7: (+1)
   \   000000D6   0x8801             LDRH     R1,[R0, #+0]
   \   000000D8   0x1C49             ADDS     R1,R1,#+1
   \   000000DA   0x8001             STRH     R1,[R0, #+0]
    514          
    515          			if ((WaveRec_idxSens4 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x08;
   \   000000DC   0x8800             LDRH     R0,[R0, #+0]
   \   000000DE   0x210F             MOVS     R1,#+15
   \   000000E0   0x4208             TST      R0,R1
   \   000000E2   0xD163             BNE.N    ??SPI2_IRQHandler_12
   \   000000E4   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000000E8   0xF040 0x0008      ORR      R0,R0,#0x8
   \   000000EC   0xF884 0x0080      STRB     R0,[R4, #+128]
    516          
    517          			if (flgRacing==0x3F)  SubFrameFinished();
   \   000000F0   0xE05C             B.N      ??SPI2_IRQHandler_12
    518          			
    519          		}
    520          		
    521          	 }
    522          	 else
    523          	 {
    524                      if ((I2S2_stLROld==GPIO_PIN_SET))   
   \                     ??SPI2_IRQHandler_1: (+1)
   \   000000F2   0x2801             CMP      R0,#+1
   \   000000F4   0xD160             BNE.N    ??SPI2_IRQHandler_2
    525                      {
    526                            vRawSens3 =app;
    527          #if 1
    528                            if ((WaveRec_idxSens3<AUDIO_OUT_BUFFER_SIZE))
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable16_4
   \   000000FA   0xF8A4 0x5090      STRH     R5,[R4, #+144]
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   00000102   0x8802             LDRH     R2,[R0, #+0]
   \   00000104   0x7809             LDRB     R1,[R1, #+0]
   \   00000106   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000010A   0xDA1F             BGE.N    ??SPI2_IRQHandler_13
    529                            {
    530          	                    switch (buffer_switch)
   \   0000010C   0xB119             CBZ.N    R1,??SPI2_IRQHandler_14
   \   0000010E   0x2902             CMP      R1,#+2
   \   00000110   0xD013             BEQ.N    ??SPI2_IRQHandler_15
   \   00000112   0xD309             BCC.N    ??SPI2_IRQHandler_16
   \   00000114   0xE03D             B.N      ??SPI2_IRQHandler_17
    531          	                    {	 
    532          	                        case BUF1_PLAY:
    533          	                                Buffer2.bufMIC3[WaveRec_idxSens3] = vRawSens3;								
   \                     ??SPI2_IRQHandler_14: (+1)
   \   00000116   0x8803             LDRH     R3,[R0, #+0]
   \   00000118   0x.... 0x....      LDR.W    R2,??DataTable16
   \   0000011C   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000120   0xF502 0x42A0      ADD      R2,R2,#+20480
   \   00000124   0x8015             STRH     R5,[R2, #+0]
    534          	                                break;
    535          	                        case BUF2_PLAY:
    536          	                                Buffer3.bufMIC3[WaveRec_idxSens3] = vRawSens3;
    537          	                                break;
    538          	                        case BUF3_PLAY:
    539          	                                Buffer1.bufMIC3[WaveRec_idxSens3] = vRawSens3;									
    540          	                                break;
   \   00000126   0xE034             B.N      ??SPI2_IRQHandler_17
   \                     ??SPI2_IRQHandler_16: (+1)
   \   00000128   0x8803             LDRH     R3,[R0, #+0]
   \   0000012A   0x.... 0x....      LDR.W    R2,??DataTable16
   \   0000012E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000132   0xF502 0x4210      ADD      R2,R2,#+36864
   \   00000136   0x8015             STRH     R5,[R2, #+0]
   \   00000138   0xE02B             B.N      ??SPI2_IRQHandler_17
   \                     ??SPI2_IRQHandler_15: (+1)
   \   0000013A   0x8803             LDRH     R3,[R0, #+0]
   \   0000013C   0x.... 0x....      LDR.W    R2,??DataTable16
   \   00000140   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000144   0xF502 0x5280      ADD      R2,R2,#+4096
   \   00000148   0x8015             STRH     R5,[R2, #+0]
   \   0000014A   0xE022             B.N      ??SPI2_IRQHandler_17
    541          	                        default:
    542          	                                break; 
    543          	                    }
    544          
    545          						
    546                            }
    547                            else
    548          #endif				  	
    549                            {
    550                                switch (buffer_switch)
   \                     ??SPI2_IRQHandler_13: (+1)
   \   0000014C   0xB119             CBZ.N    R1,??SPI2_IRQHandler_18
   \   0000014E   0x2902             CMP      R1,#+2
   \   00000150   0xD015             BEQ.N    ??SPI2_IRQHandler_19
   \   00000152   0xD30A             BCC.N    ??SPI2_IRQHandler_20
   \   00000154   0xE01D             B.N      ??SPI2_IRQHandler_17
    551                                {	 
    552                                    case BUF1_PLAY:
    553                                            Buffer1.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;								
   \                     ??SPI2_IRQHandler_18: (+1)
   \   00000156   0x8802             LDRH     R2,[R0, #+0]
   \   00000158   0x.... 0x....      LDR.W    R1,??DataTable16
   \   0000015C   0x0592             LSLS     R2,R2,#+22
   \   0000015E   0x0D92             LSRS     R2,R2,#+22
   \   00000160   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   00000164   0xF501 0x5180      ADD      R1,R1,#+4096
   \   00000168   0xE012             B.N      ??SPI2_IRQHandler_21
    554                                            break;
    555                                    case BUF2_PLAY:
    556                                            Buffer2.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;
   \                     ??SPI2_IRQHandler_20: (+1)
   \   0000016A   0x8802             LDRH     R2,[R0, #+0]
   \   0000016C   0x.... 0x....      LDR.W    R1,??DataTable16
   \   00000170   0x0592             LSLS     R2,R2,#+22
   \   00000172   0x0D92             LSRS     R2,R2,#+22
   \   00000174   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   00000178   0xF501 0x41A0      ADD      R1,R1,#+20480
   \   0000017C   0xE008             B.N      ??SPI2_IRQHandler_21
    557                                            break;
    558                                    case BUF3_PLAY:
    559                                            Buffer3.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;									
   \                     ??SPI2_IRQHandler_19: (+1)
   \   0000017E   0x8802             LDRH     R2,[R0, #+0]
   \   00000180   0x.... 0x....      LDR.W    R1,??DataTable16
   \   00000184   0x0592             LSLS     R2,R2,#+22
   \   00000186   0x0D92             LSRS     R2,R2,#+22
   \   00000188   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   0000018C   0xF501 0x4110      ADD      R1,R1,#+36864
   \                     ??SPI2_IRQHandler_21: (+1)
   \   00000190   0x800D             STRH     R5,[R1, #+0]
    560                                            break;
    561                                    default:
    562                                            break; 
    563                                }
    564                              }
    565          				  WaveRec_idxSens3++;
   \                     ??SPI2_IRQHandler_17: (+1)
   \   00000192   0x8801             LDRH     R1,[R0, #+0]
   \   00000194   0x1C49             ADDS     R1,R1,#+1
   \   00000196   0x8001             STRH     R1,[R0, #+0]
    566          
    567          			if ((WaveRec_idxSens3 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x04;
   \   00000198   0x8800             LDRH     R0,[R0, #+0]
   \   0000019A   0x210F             MOVS     R1,#+15
   \   0000019C   0x4208             TST      R0,R1
   \   0000019E   0xD105             BNE.N    ??SPI2_IRQHandler_12
   \   000001A0   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000001A4   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000001A8   0xF884 0x0080      STRB     R0,[R4, #+128]
    568          			if (flgRacing==0x3F)  SubFrameFinished();				  
   \                     ??SPI2_IRQHandler_12: (+1)
   \   000001AC   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000001B0   0x283F             CMP      R0,#+63
   \   000001B2   0xBF08             IT       EQ 
   \   000001B4   0x.... 0x....      BLEQ     SubFrameFinished
    569                              
    570                      }
    571          	 }//else
    572          
    573          	 
    574          #if 0
    575          	  if (iSDO34<4*AUDIO_OUT_BUFFER_SIZE)
    576          	 {
    577          		 TestSDO34[iSDO34++]=app;
    578          	 }
    579          	 else
    580          	 {
    581          		 iSDO34=0;
    582          	 }
    583          	 if ((WaveRec_idxSens3 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens4 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    584          //             &&(I2S2_stLR!=I2S2_stLROld))
    585          	 {
    586          /*-------------------------------------------------------------------------------------------------------------
    587          			  
    588          	Sequence  Record Data                     Processing Data                 Player Data
    589          			  
    590          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    591          			  
    592          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    593          			  
    594          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    595           ---------------------------------------------------------------------------------------------------------------*/
    596          		/* Recording Audio Data */			             
    597          		 switch (buffer_switch)
    598          		 {
    599          			  case BUF1_PLAY:
    600                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    601                                        Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    602                                    else
    603                                        Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			  
    604          			  break;                     
    605          			  case BUF2_PLAY:
    606                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    607                                        Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    608                                    else
    609                                        Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			   
    610          				  break;
    611          			  case BUF3_PLAY:
    612                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    613                                       Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    614          		          else
    615                                       Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    616          		          break;
    617          			  default:
    618          			     break; 
    619          		 }
    620          		
    621          	 }          
    622          #endif		  
    623          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   000001B8   0xF894 0x0083      LDRB     R0,[R4, #+131]
   \   000001BC   0xF884 0x0084      STRB     R0,[R4, #+132]
    624             }
    625          
    626          }
   \                     ??SPI2_IRQHandler_0: (+1)
   \   000001C0   0xB001             ADD      SP,SP,#+4
   \   000001C2   0xBD30             POP      {R4,R5,PC}       ;; return
    627          
    628          

   \                                 In section .text, align 2, keep-with-next
    629          void SPI4_IRQHandler(void)
    630          {
    631            static uint8_t Main_stLR, Main_stLROld;
    632          
    633          
    634            /* SPI in mode Receiver ----------------------------------------------------*/
    635            if(
    636          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    637          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    638               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xD400             BMI.N    ??SPI4_IRQHandler_0
   \   0000000C   0x4770             BX       LR
    639            {
    640          
    641                  uint16_t test;
    642                  test =  SPI_I2S_ReceiveData(SPI4);
   \                     ??SPI4_IRQHandler_0: (+1)
   \   0000000E   0xB530             PUSH     {R4,R5,LR}
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable21_1  ;; 0x4001340c
   \   00000014   0xB081             SUB      SP,SP,#+4
    643          
    644                  /* Left-Right Mic data */
    645                  Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000016   0x2110             MOVS     R1,#+16
   \   00000018   0x.... 0x....      LDR.W    R4,??DataTable15_6
   \   0000001C   0x6805             LDR      R5,[R0, #+0]
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40020000
   \   00000022   0x.... 0x....      BL       HAL_GPIO_ReadPin
    646          
    647                  /* STM32F746 read data from STA321MP, the data is shifted few bit     */
    648                  /* Data from STA321MP is 32bit formart                                */
    649                  /* SPI is just able to read 16 bit format                             */
    650                  /* Therefore, it needs to correct                                     */
    651                  
    652                  /* ---------------------------+++++++++++++++++++++++++++++++---------*/
    653                  /*                  ______DATAL_____              ______DATAR_____    */
    654                  /*                  _____vRawSens5__              ______vRawSens6_    */       
    655          	if (Main_stLR==GPIO_PIN_SET)
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xB2AD             UXTH     R5,R5
   \   0000002A   0xF884 0x0086      STRB     R0,[R4, #+134]
   \   0000002E   0xF894 0x1087      LDRB     R1,[R4, #+135]
   \   00000032   0xD163             BNE.N    ??SPI4_IRQHandler_1
    656          	{
    657                      if (Main_stLROld==GPIO_PIN_SET)
   \   00000034   0x2901             CMP      R1,#+1
   \   00000036   0xD062             BEQ.N    ??SPI4_IRQHandler_2
    658                      {
    659                         SPI4_stNipple = (test);    
    660                      }
    661                      else
    662                      {
    663                         vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
   \   00000038   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   0000003C   0xF9B4 0x1096      LDRSH    R1,[R4, #+150]
    664          #if 1		   
    665                         if (WaveRec_idxSens6 < AUDIO_OUT_BUFFER_SIZE)
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable15_7
   \   00000044   0x40C5             LSRS     R5,R5,R0
   \   00000046   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   0000004A   0xF1C0 0x0010      RSB      R0,R0,#+16
   \   0000004E   0xFA01 0xF000      LSL      R0,R1,R0
   \   00000052   0xEA40 0x0105      ORR      R1,R0,R5
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   0000005A   0xF8A4 0x1094      STRH     R1,[R4, #+148]
   \   0000005E   0x8803             LDRH     R3,[R0, #+0]
   \   00000060   0x7812             LDRB     R2,[R2, #+0]
   \   00000062   0xF5B3 0x6F80      CMP      R3,#+1024
   \   00000066   0xDA18             BGE.N    ??SPI4_IRQHandler_3
    666                         {
    667                              /*-------------------------------------------------------------------------------------------------------------                                             
    668                              Sequence  Record Data                     Processing Data                 Player Data
    669                                                
    670                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    671                                                
    672                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    673                                                
    674                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    675                               ---------------------------------------------------------------------------------------------------------------*/                     
    676                               /* Recording Audio Data */			             
    677                               switch (buffer_switch)
   \   00000068   0xB11A             CBZ.N    R2,??SPI4_IRQHandler_4
   \   0000006A   0x2A02             CMP      R2,#+2
   \   0000006C   0xD00D             BEQ.N    ??SPI4_IRQHandler_5
   \   0000006E   0xD308             BCC.N    ??SPI4_IRQHandler_6
   \   00000070   0xE036             B.N      ??SPI4_IRQHandler_7
    678                               {
    679                                   case BUF1_PLAY:
    680                                       Buffer2.bufMIC6[WaveRec_idxSens6] = vRawSens6;
   \                     ??SPI4_IRQHandler_4: (+1)
   \   00000072   0x8803             LDRH     R3,[R0, #+0]
   \   00000074   0x.... 0x....      LDR.W    R2,??DataTable24
   \   00000078   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000007C   0xF502 0x42D0      ADD      R2,R2,#+26624
   \   00000080   0xE02D             B.N      ??SPI4_IRQHandler_8
    681          
    682                                       break;
    683                                   case BUF2_PLAY:
    684                                       Buffer3.bufMIC6[WaveRec_idxSens6] = vRawSens6;
   \                     ??SPI4_IRQHandler_6: (+1)
   \   00000082   0x.... 0x....      LDR.W    R2,??DataTable24
   \   00000086   0x8803             LDRH     R3,[R0, #+0]
   \   00000088   0xE025             B.N      ??SPI4_IRQHandler_9
    685          
    686                                       break;
    687                                   case BUF3_PLAY:
    688                                       Buffer1.bufMIC6[WaveRec_idxSens6] = vRawSens6;
   \                     ??SPI4_IRQHandler_5: (+1)
   \   0000008A   0x8803             LDRH     R3,[R0, #+0]
   \   0000008C   0x.... 0x....      LDR.W    R2,??DataTable24
   \   00000090   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000094   0xF502 0x5220      ADD      R2,R2,#+10240
   \   00000098   0xE021             B.N      ??SPI4_IRQHandler_8
    689          
    690                                       break;                          
    691                                   default:
    692                                       break;
    693                               }
    694          
    695          					
    696                         }
    697                         else
    698          #endif			   	
    699                         {
    700                           /* Recording Audio Data */			             
    701                           switch (buffer_switch)
   \                     ??SPI4_IRQHandler_3: (+1)
   \   0000009A   0xB11A             CBZ.N    R2,??SPI4_IRQHandler_10
   \   0000009C   0x2A02             CMP      R2,#+2
   \   0000009E   0xD015             BEQ.N    ??SPI4_IRQHandler_11
   \   000000A0   0xD30A             BCC.N    ??SPI4_IRQHandler_12
   \   000000A2   0xE01D             B.N      ??SPI4_IRQHandler_7
    702                           {
    703                               case BUF1_PLAY:
    704                                   Buffer1.bufMIC6[WaveRec_idxSens6%AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
   \                     ??SPI4_IRQHandler_10: (+1)
   \   000000A4   0x8803             LDRH     R3,[R0, #+0]
   \   000000A6   0x.... 0x....      LDR.W    R2,??DataTable24
   \   000000AA   0x059B             LSLS     R3,R3,#+22
   \   000000AC   0x0D9B             LSRS     R3,R3,#+22
   \   000000AE   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000B2   0xF502 0x5220      ADD      R2,R2,#+10240
   \   000000B6   0xE012             B.N      ??SPI4_IRQHandler_8
    705          
    706                                   break;
    707                               case BUF2_PLAY:
    708                                   Buffer2.bufMIC6[WaveRec_idxSens6%AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
   \                     ??SPI4_IRQHandler_12: (+1)
   \   000000B8   0x8803             LDRH     R3,[R0, #+0]
   \   000000BA   0x.... 0x....      LDR.W    R2,??DataTable24
   \   000000BE   0x059B             LSLS     R3,R3,#+22
   \   000000C0   0x0D9B             LSRS     R3,R3,#+22
   \   000000C2   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000C6   0xF502 0x42D0      ADD      R2,R2,#+26624
   \   000000CA   0xE008             B.N      ??SPI4_IRQHandler_8
    709          
    710                                   break;
    711                               case BUF3_PLAY:
    712                                   Buffer3.bufMIC6[WaveRec_idxSens6%AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
   \                     ??SPI4_IRQHandler_11: (+1)
   \   000000CC   0x8803             LDRH     R3,[R0, #+0]
   \   000000CE   0x.... 0x....      LDR.W    R2,??DataTable24
   \   000000D2   0x059B             LSLS     R3,R3,#+22
   \   000000D4   0x0D9B             LSRS     R3,R3,#+22
   \                     ??SPI4_IRQHandler_9: (+1)
   \   000000D6   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000DA   0xF502 0x4228      ADD      R2,R2,#+43008
   \                     ??SPI4_IRQHandler_8: (+1)
   \   000000DE   0x8011             STRH     R1,[R2, #+0]
    713          
    714                                   break;                          
    715                               default:
    716                                   break;
    717                           }
    718                         }
    719          
    720          			    WaveRec_idxSens6++;
   \                     ??SPI4_IRQHandler_7: (+1)
   \   000000E0   0x8801             LDRH     R1,[R0, #+0]
   \   000000E2   0x1C49             ADDS     R1,R1,#+1
   \   000000E4   0x8001             STRH     R1,[R0, #+0]
    721          			if ((WaveRec_idxSens6 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x20;
   \   000000E6   0x8800             LDRH     R0,[R0, #+0]
   \   000000E8   0x210F             MOVS     R1,#+15
   \   000000EA   0x4208             TST      R0,R1
   \   000000EC   0xD170             BNE.N    ??SPI4_IRQHandler_13
   \   000000EE   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000000F2   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000000F6   0xF884 0x0080      STRB     R0,[R4, #+128]
    722          
    723          			if (flgRacing==0x3F)  SubFrameFinished();				
   \   000000FA   0xE069             B.N      ??SPI4_IRQHandler_13
    724          	   }
    725                  }
    726          	else
    727          	{
    728                    if (Main_stLROld==GPIO_PIN_RESET)
   \                     ??SPI4_IRQHandler_1: (+1)
   \   000000FC   0xB939             CBNZ.N   R1,??SPI4_IRQHandler_14
    729                    {
    730                        SPI4_stNipple = (test);	  
   \                     ??SPI4_IRQHandler_2: (+1)
   \   000000FE   0xF8A4 0x5096      STRH     R5,[R4, #+150]
    731          
    732                    }
    733                    else
    734                    {
    735                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
    736          #if 1			   
    737                         if (WaveRec_idxSens5 < AUDIO_OUT_BUFFER_SIZE)
    738                         {
    739                              /*-------------------------------------------------------------------------------------------------------------                                             
    740                              Sequence  Record Data                     Processing Data                 Player Data
    741                                                
    742                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    743                                                
    744                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    745                                                
    746                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    747                               ---------------------------------------------------------------------------------------------------------------*/                 
    748                                /* Recording Audio Data */			             
    749                               switch (buffer_switch)
    750                               {
    751                                   case BUF1_PLAY:
    752                                       Buffer2.bufMIC5[WaveRec_idxSens5] = vRawSens5;
    753           
    754                                       break;
    755                                   case BUF2_PLAY:
    756                                       Buffer3.bufMIC5[WaveRec_idxSens5] = vRawSens5;
    757                 
    758                                       break;
    759                                   case BUF3_PLAY:
    760                                       Buffer1.bufMIC5[WaveRec_idxSens5] = vRawSens5;
    761           
    762                                       break;                          
    763                                   default:
    764                                       break;
    765                               }
    766          
    767          
    768          					  
    769                         }
    770                         else
    771          #endif			   	
    772                         {
    773                            /* Recording Audio Data */						 
    774                             switch (buffer_switch)
    775                             {
    776                                     case BUF1_PLAY:
    777                                             Buffer1.bufMIC5[WaveRec_idxSens5 % AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
    778                            
    779                                             break;
    780                                     case BUF2_PLAY:
    781                                             Buffer2.bufMIC5[WaveRec_idxSens5 % AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
    782                            
    783                                             break;
    784                                     case BUF3_PLAY:
    785                                             Buffer3.bufMIC5[WaveRec_idxSens5 % AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
    786                            
    787                                             break; 						 
    788                                     default:
    789                                             break;
    790                             }
    791          
    792                          }
    793                         
    794          		       
    795          		        WaveRec_idxSens5++;
    796          			if ((WaveRec_idxSens5 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x10;
    797          
    798          			if (flgRacing==0x3F)  SubFrameFinished();			   
    799                         
    800                    }		
    801          	}
    802          #if 0
    803          	/* The code to store data in to buffer for testing purpose */
    804          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
    805          	{
    806          		TestSDO56[iSDO56++]=test;
    807          	}
    808          	else
    809          	{
    810          		iSDO56=0;
    811          	}
    812          #endif
    813          
    814          	/* Update Old value */	  
    815          	Main_stLROld=Main_stLR;	  
   \   00000102   0xF894 0x0086      LDRB     R0,[R4, #+134]
   \   00000106   0xF884 0x0087      STRB     R0,[R4, #+135]
    816               
    817            }      
    818          }
   \   0000010A   0xB001             ADD      SP,SP,#+4
   \   0000010C   0xBD30             POP      {R4,R5,PC}
   \                     ??SPI4_IRQHandler_14: (+1)
   \   0000010E   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   00000112   0xF9B4 0x1096      LDRSH    R1,[R4, #+150]
   \   00000116   0x.... 0x....      LDR.W    R2,??DataTable15_7
   \   0000011A   0x40C5             LSRS     R5,R5,R0
   \   0000011C   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   00000120   0xF1C0 0x0010      RSB      R0,R0,#+16
   \   00000124   0xFA01 0xF000      LSL      R0,R1,R0
   \   00000128   0xEA40 0x0105      ORR      R1,R0,R5
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \   00000130   0xF8A4 0x1092      STRH     R1,[R4, #+146]
   \   00000134   0x8803             LDRH     R3,[R0, #+0]
   \   00000136   0x7812             LDRB     R2,[R2, #+0]
   \   00000138   0xF5B3 0x6F80      CMP      R3,#+1024
   \   0000013C   0xDA18             BGE.N    ??SPI4_IRQHandler_15
   \   0000013E   0xB11A             CBZ.N    R2,??SPI4_IRQHandler_16
   \   00000140   0x2A02             CMP      R2,#+2
   \   00000142   0xD00D             BEQ.N    ??SPI4_IRQHandler_17
   \   00000144   0xD308             BCC.N    ??SPI4_IRQHandler_18
   \   00000146   0xE036             B.N      ??SPI4_IRQHandler_19
   \                     ??SPI4_IRQHandler_16: (+1)
   \   00000148   0x8803             LDRH     R3,[R0, #+0]
   \   0000014A   0x.... 0x....      LDR.W    R2,??DataTable24
   \   0000014E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000152   0xF502 0x42C0      ADD      R2,R2,#+24576
   \   00000156   0xE02D             B.N      ??SPI4_IRQHandler_20
   \                     ??SPI4_IRQHandler_18: (+1)
   \   00000158   0x.... 0x....      LDR.W    R2,??DataTable24
   \   0000015C   0x8803             LDRH     R3,[R0, #+0]
   \   0000015E   0xE025             B.N      ??SPI4_IRQHandler_21
   \                     ??SPI4_IRQHandler_17: (+1)
   \   00000160   0x8803             LDRH     R3,[R0, #+0]
   \   00000162   0x.... 0x....      LDR.W    R2,??DataTable24
   \   00000166   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000016A   0xF502 0x5200      ADD      R2,R2,#+8192
   \   0000016E   0xE021             B.N      ??SPI4_IRQHandler_20
   \                     ??SPI4_IRQHandler_15: (+1)
   \   00000170   0xB11A             CBZ.N    R2,??SPI4_IRQHandler_22
   \   00000172   0x2A02             CMP      R2,#+2
   \   00000174   0xD015             BEQ.N    ??SPI4_IRQHandler_23
   \   00000176   0xD30A             BCC.N    ??SPI4_IRQHandler_24
   \   00000178   0xE01D             B.N      ??SPI4_IRQHandler_19
   \                     ??SPI4_IRQHandler_22: (+1)
   \   0000017A   0x8803             LDRH     R3,[R0, #+0]
   \   0000017C   0x.... 0x....      LDR.W    R2,??DataTable24
   \   00000180   0x059B             LSLS     R3,R3,#+22
   \   00000182   0x0D9B             LSRS     R3,R3,#+22
   \   00000184   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000188   0xF502 0x5200      ADD      R2,R2,#+8192
   \   0000018C   0xE012             B.N      ??SPI4_IRQHandler_20
   \                     ??SPI4_IRQHandler_24: (+1)
   \   0000018E   0x8803             LDRH     R3,[R0, #+0]
   \   00000190   0x.... 0x....      LDR.W    R2,??DataTable24
   \   00000194   0x059B             LSLS     R3,R3,#+22
   \   00000196   0x0D9B             LSRS     R3,R3,#+22
   \   00000198   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000019C   0xF502 0x42C0      ADD      R2,R2,#+24576
   \   000001A0   0xE008             B.N      ??SPI4_IRQHandler_20
   \                     ??SPI4_IRQHandler_23: (+1)
   \   000001A2   0x8803             LDRH     R3,[R0, #+0]
   \   000001A4   0x.... 0x....      LDR.W    R2,??DataTable24
   \   000001A8   0x059B             LSLS     R3,R3,#+22
   \   000001AA   0x0D9B             LSRS     R3,R3,#+22
   \                     ??SPI4_IRQHandler_21: (+1)
   \   000001AC   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000001B0   0xF502 0x4220      ADD      R2,R2,#+40960
   \                     ??SPI4_IRQHandler_20: (+1)
   \   000001B4   0x8011             STRH     R1,[R2, #+0]
   \                     ??SPI4_IRQHandler_19: (+1)
   \   000001B6   0x8801             LDRH     R1,[R0, #+0]
   \   000001B8   0x1C49             ADDS     R1,R1,#+1
   \   000001BA   0x8001             STRH     R1,[R0, #+0]
   \   000001BC   0x8800             LDRH     R0,[R0, #+0]
   \   000001BE   0x210F             MOVS     R1,#+15
   \   000001C0   0x4208             TST      R0,R1
   \   000001C2   0xD105             BNE.N    ??SPI4_IRQHandler_13
   \   000001C4   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000001C8   0xF040 0x0010      ORR      R0,R0,#0x10
   \   000001CC   0xF884 0x0080      STRB     R0,[R4, #+128]
   \                     ??SPI4_IRQHandler_13: (+1)
   \   000001D0   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000001D4   0x283F             CMP      R0,#+63
   \   000001D6   0xBF08             IT       EQ 
   \   000001D8   0x.... 0x....      BLEQ     SubFrameFinished
   \   000001DC   0xF894 0x0086      LDRB     R0,[R4, #+134]
   \   000001E0   0xF884 0x0087      STRB     R0,[R4, #+135]
   \   000001E4   0xB001             ADD      SP,SP,#+4
   \   000001E6   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .bss, align 4
   \                     hi2s1:
   \   00000000                      DS8 64
   \                     hi2s2:
   \   00000040                      DS8 64
   \                     flgRacing:
   \   00000080                      DS8 1
   \                     WaveRecord_flgInt:
   \   00000081                      DS8 1
   \                     SPI4_stPosShft:
   \   00000082                      DS8 1
   \                     I2S2_stLR:
   \   00000083                      DS8 1
   \                     I2S2_stLROld:
   \   00000084                      DS8 1
   \   00000085                      DS8 1
   \   00000086                      DS8 1
   \   00000087                      DS8 1
   \                     WaveRec_idxTest:
   \   00000088                      DS8 2
   \                     vRawSens1:
   \   0000008A                      DS8 2
   \                     vRawSens2:
   \   0000008C                      DS8 2
   \                     vRawSens4:
   \   0000008E                      DS8 2
   \                     vRawSens3:
   \   00000090                      DS8 2
   \                     vRawSens5:
   \   00000092                      DS8 2
   \                     vRawSens6:
   \   00000094                      DS8 2
   \                     SPI4_stNipple:
   \   00000096                      DS8 2

   \                                 In section .bss, align 4
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hdma_spi2_tx:
   \   00000000                      DS8 88

   \                                 In section .bss, align 4
   \                     hdma_spi3_tx:
   \   00000000                      DS8 88

   \                                 In section .bss, align 4
   \                     hdma_spi5_rx:
   \   00000000                      DS8 88
   \                     hdma_spi6_rx:
   \   00000058                      DS8 88

   \                                 In section .bss, align 2
   \                     idxFrmPDMMic8:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
   \                     cntStrt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     SPI1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S2_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO34:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO56:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     I2S1_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1
    819          
    820          
    821          
    822          

   \                                 In section .text, align 2, keep-with-next
    823          void SPI5_IRQHandler(void)
    824          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    825            //static uint16_t stNipple;
    826            //static uint8_t stLR, stOder;
    827          
    828            /* USER CODE BEGIN SPI5_IRQn 0 */
    829          
    830            /* USER CODE END SPI5_IRQn 0 */
    831            //HAL_SPI_IRQHandler(&hspi5);
    832            /* USER CODE BEGIN SPI5_IRQn 1 */
    833          
    834            /* USER CODE END SPI5_IRQn 1 */
    835              /* Check if data are available in SPI Data register */
    836            /* SPI in mode Receiver ----------------------------------------------------*/
    837            if(
    838               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    839               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    840               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable24_2
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xD438             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD535             BPL.N    ??SPI5_IRQHandler_0
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD532             BPL.N    ??SPI5_IRQHandler_0
    841            {
    842          
    843          
    844             uint16_t test;
    845             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable24_3  ;; 0x4001500c
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
    846             //SPI5->DR = 3333;
    847          
    848            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000020   0xF8B4 0x1134      LDRH     R1,[R4, #+308]
   \   00000024   0xB282             UXTH     R2,R0
   \   00000026   0x0200             LSLS     R0,R0,#+8
   \   00000028   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   0000002C   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   00000030   0xF8A2 0x0144      STRH     R0,[R2, #+324]
   \   00000034   0x1C48             ADDS     R0,R1,#+1
   \   00000036   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    849            
    850            //volume = 64;
    851            
    852            if (idxMic8>=64)
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0x2840             CMP      R0,#+64
   \   0000003E   0xDB1F             BLT.N    ??SPI5_IRQHandler_0
    853            {
    854          	if (buffer_switch != 1)
   \   00000040   0x....             LDR.N    R2,??DataTable15_7
   \   00000042   0xF8D4 0x0140      LDR      R0,[R4, #+320]
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable24_4
   \   0000004A   0xF104 0x03C8      ADD      R3,R4,#+200
   \   0000004E   0x7812             LDRB     R2,[R2, #+0]
   \   00000050   0x780A             LDRB     R2,[R1, #+0]
   \   00000052   0xF8B4 0x1138      LDRH     R1,[R4, #+312]
   \   00000056   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   0000005A   0xF504 0x70A2      ADD      R0,R4,#+324
    855          	{
    856          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
    857          						  (PDMFilter_InitStruct *)&Filter[0]);
    858          	}
    859          	else
    860          	{
    861          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
    862          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \   0000005E   0x.... 0x....      BL       PDM_Filter_64_LSB
    863          	}
    864          	idxMic8=0;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    865          	cntPos++;
   \   00000068   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   0000006C   0x1C40             ADDS     R0,R0,#+1
   \   0000006E   0xF8A4 0x0138      STRH     R0,[R4, #+312]
    866          	if (cntPos>=256) cntPos=0;
   \   00000072   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   00000076   0x28FF             CMP      R0,#+255
   \   00000078   0xBFC4             ITT      GT 
   \   0000007A   0x2000             MOVGT    R0,#+0
   \   0000007C   0xF8A4 0x0138      STRHGT   R0,[R4, #+312]
    867            }
    868              
    869            }
    870            
    871          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   00000080   0xBD10             POP      {R4,PC}          ;; return
    872          
    873          /* SPI5 init function */
    874          
    875          

   \                                 In section .text, align 2, keep-with-next
    876          void SPI6_IRQHandler(void)
    877          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    878            /* SPI in mode Receiver ----------------------------------------------------*/
    879            if(
    880          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    881               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    882               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable24_2
   \   00000006   0x6E60             LDR      R0,[R4, #+100]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0789             LSLS     R1,R1,#+30
   \   0000000C   0xD535             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD532             BPL.N    ??SPI6_IRQHandler_0
    883            {
    884          
    885          
    886               uint16_t test;
    887               test =  SPI_I2S_ReceiveData(SPI6);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable24_5  ;; 0x4001540c
   \   00000018   0x6800             LDR      R0,[R0, #+0]
    888               //SPI6->DR = 3333;
    889          
    890              pDataMic7[idxMic7++] =	HTONS(test);
   \   0000001A   0xF8B4 0x1136      LDRH     R1,[R4, #+310]
   \   0000001E   0xB282             UXTH     R2,R0
   \   00000020   0x0200             LSLS     R0,R0,#+8
   \   00000022   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000026   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   0000002A   0xF8A2 0x01C4      STRH     R0,[R2, #+452]
   \   0000002E   0x1C48             ADDS     R0,R1,#+1
   \   00000030   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    891          
    892              //volume = 64;
    893          
    894              if (idxMic7>=64)
   \   00000034   0xB280             UXTH     R0,R0
   \   00000036   0x2840             CMP      R0,#+64
   \   00000038   0xDB1F             BLT.N    ??SPI6_IRQHandler_0
    895              {
    896                if (buffer_switch != 1)
   \   0000003A   0x....             LDR.N    R2,??DataTable15_7
   \   0000003C   0xF8D4 0x013C      LDR      R0,[R4, #+316]
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable24_4
   \   00000044   0xF104 0x03FC      ADD      R3,R4,#+252
   \   00000048   0x7812             LDRB     R2,[R2, #+0]
   \   0000004A   0x780A             LDRB     R2,[R1, #+0]
   \   0000004C   0xF8B4 0x113A      LDRH     R1,[R4, #+314]
   \   00000050   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   00000054   0xF504 0x70E2      ADD      R0,R4,#+452
    897                {
    898                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
    899                                                          (PDMFilter_InitStruct *)&Filter[1]);
    900                }
    901                else
    902                {
    903                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
    904                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \   00000058   0x.... 0x....      BL       PDM_Filter_64_LSB
    905                }
    906                idxMic7=0;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    907                cntPos7++;
   \   00000062   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0xF8A4 0x013A      STRH     R0,[R4, #+314]
    908                if (cntPos7>=256) cntPos7=0;
   \   0000006C   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000070   0x28FF             CMP      R0,#+255
   \   00000072   0xBFC4             ITT      GT 
   \   00000074   0x2000             MOVGT    R0,#+0
   \   00000076   0xF8A4 0x013A      STRHGT   R0,[R4, #+314]
    909              }
    910              
    911            }
    912          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   0000007A   0xBD10             POP      {R4,PC}          ;; return
    913          
    914          
    915          

   \                                 In section .text, align 2, keep-with-next
    916          void MIC1TO8_Init(void)
    917          {
   \                     MIC1TO8_Init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    918          
    919          
    920            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    921            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    922            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    923            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    924            //HAL_Delay(2);
    925          
    926          
    927          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    928          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    929            I2S1_Init(); /* I2S1   --> SDO12 */
   \   00000002   0x....             LDR.N    R4,??DataTable15_6
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable24_6  ;; 0x40013000
   \   00000008   0x6020             STR      R0,[R4, #+0]
   \   0000000A   0x2020             MOVS     R0,#+32
   \   0000000C   0x60A0             STR      R0,[R4, #+8]
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x60E0             STR      R0,[R4, #+12]
   \   00000012   0xF44F 0x7580      MOV      R5,#+256
   \   00000016   0x6120             STR      R0,[R4, #+16]
   \   00000018   0xF44F 0x567A      MOV      R6,#+16000
   \   0000001C   0x61A0             STR      R0,[R4, #+24]
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x61E0             STR      R0,[R4, #+28]
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x6065             STR      R5,[R4, #+4]
   \   00000026   0x6166             STR      R6,[R4, #+20]
   \   00000028   0x.... 0x....      BL       HAL_I2S_Init
    930          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    931          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    932            I2S2_Init(); /* I2S2   --> SDO34 */
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable24_7  ;; 0x40003800
   \   00000030   0x6465             STR      R5,[R4, #+68]
   \   00000032   0x6420             STR      R0,[R4, #+64]
   \   00000034   0x2020             MOVS     R0,#+32
   \   00000036   0x64A0             STR      R0,[R4, #+72]
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x64E0             STR      R0,[R4, #+76]
   \   0000003C   0x6520             STR      R0,[R4, #+80]
   \   0000003E   0x65A0             STR      R0,[R4, #+88]
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x65E0             STR      R0,[R4, #+92]
   \   00000044   0xF104 0x0040      ADD      R0,R4,#+64
   \   00000048   0x6566             STR      R6,[R4, #+84]
   \   0000004A   0x.... 0x....      BL       HAL_I2S_Init
    933          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    934          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    935            SPI4_Init(); /* SPI4   --> SDO56 */
   \   0000004E   0x.... 0x....      BL       SPI4_Init
    936            SPI5_Init();
   \   00000052   0x.... 0x....      BL       SPI5_Init
    937            SPI6_Init();  
   \   00000056   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000005A   0x....             B.N      SPI6_Init
    938          }
    939          

   \                                 In section .text, align 2, keep-with-next
    940          void StartRecMic7_8 (void)
    941          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    942          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,8*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable24_2
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable24
   \   0000000A   0xB081             SUB      SP,SP,#+4
   \   0000000C   0xF44F 0x5200      MOV      R2,#+8192
   \   00000010   0xF505 0x4140      ADD      R1,R5,#+49152
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    943          #if (0)
    944          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
    945          #else
    946          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,8*AUDIO_OUT_BUFFER_SIZE);
   \   0000001A   0xF44F 0x5200      MOV      R2,#+8192
   \   0000001E   0xF505 0x3180      ADD      R1,R5,#+65536
   \   00000022   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000026   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    947          #endif
    948          	  swtSDO7 = 1;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xF884 0x0130      STRB     R0,[R4, #+304]
    949          	  swtSDO8 = 1;
   \   00000030   0xF884 0x0131      STRB     R0,[R4, #+305]
    950          
    951          }
   \   00000034   0xB001             ADD      SP,SP,#+4
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
    952          
    953          /* I2S1 init function */
    954          /* Read data of MIC12 */
    955          static void I2S1_Init(void)
    956          {
    957          #if 1
    958            hi2s1.Instance = SPI1;
    959            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
    960            hi2s1.Init.Standard = I2S_STANDARD_LSB;
    961            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    962            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    963            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    964            hi2s1.Init.CPOL = I2S_CPOL_LOW;
    965            hi2s1.Init.ClockSource = I2S_CLOCK_SYSCLK;
    966            HAL_I2S_Init(&hi2s1);
    967          
    968          
    969          #else
    970          	hspi1.Instance = SPI1;
    971          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    972          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    973          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    974          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    975          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    976          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    977          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    978          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    979          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    980          	hspi1.Init.CRCPolynomial = 7;
    981          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    982          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    983          	//hspi4.RxISR = SPI5_CallBack;
    984          	HAL_SPI_Init(&hspi1);
    985          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    986            /* Enable TXE, RXNE and ERR interrupt */
    987           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    988           __HAL_SPI_ENABLE(&hspi1);
    989          #endif
    990          }
    991          

   \                                 In section .text, align 2, keep-with-next
    992          void I2S1_Enable(void)
    993          {
    994             /* Enable TXE and ERR interrupt */
    995           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
   \                     I2S1_Enable: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable24_8
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6841             LDR      R1,[R0, #+4]
   \   00000008   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000000C   0x6041             STR      R1,[R0, #+4]
    996           
    997           __HAL_I2S_ENABLE(&hi2s1);
   \   0000000E   0x69C1             LDR      R1,[R0, #+28]
   \   00000010   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000014   0x61C1             STR      R1,[R0, #+28]
    998          }
   \   00000016   0x4770             BX       LR               ;; return
    999          
   1000          
   1001          /* I2S2 init function */
   1002          /* Read data of MIC34 */
   1003          
   1004          static void I2S2_Init(void)
   1005          {
   1006          
   1007          #if 1
   1008           //HAL_I2S_DeInit(&hi2s2);
   1009           hi2s2.Instance = SPI2;
   1010           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
   1011           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
   1012           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
   1013           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
   1014           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
   1015           hi2s2.Init.CPOL = I2S_CPOL_LOW;
   1016           hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
   1017          
   1018           HAL_I2S_Init(&hi2s2);
   1019          
   1020          
   1021          #else
   1022             hspi2.Instance = SPI2;
   1023             hspi2.Init.Mode = SPI_MODE_SLAVE;
   1024             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
   1025             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
   1026             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
   1027             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
   1028             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   1029             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
   1030             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
   1031             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   1032             hspi2.Init.CRCPolynomial = 7;
   1033             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   1034             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   1035             HAL_SPI_Init(&hspi2);
   1036          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1037           /* Enable TXE, RXNE and ERR interrupt */
   1038          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
   1039          __HAL_SPI_ENABLE(&hspi2);
   1040          #endif
   1041          
   1042          
   1043          }
   1044          

   \                                 In section .text, align 2, keep-with-next
   1045          void I2S2_Enable(void)
   1046          {
   \                     I2S2_Enable: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable24_8
   \   00000004   0x6C00             LDR      R0,[R0, #+64]
   \   00000006   0x6841             LDR      R1,[R0, #+4]
   \   00000008   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000000C   0x6041             STR      R1,[R0, #+4]
   1047              /* Enable TXE and ERR interrupt */
   1048              __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
   1049              __HAL_I2S_ENABLE(&hi2s2);
   \   0000000E   0x69C1             LDR      R1,[R0, #+28]
   \   00000010   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000014   0x61C1             STR      R1,[R0, #+28]
   1050          }
   \   00000016   0x4770             BX       LR               ;; return
   1051          
   1052          
   1053          /* SPI4 init function */

   \                                 In section .text, align 2, keep-with-next
   1054          void SPI4_Init(void)
   1055          {
   1056          
   1057            hspi4.Instance = SPI4;
   \                     SPI4_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable24_9  ;; 0x40013400
   \   00000008   0x6001             STR      R1,[R0, #+0]
   1058            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6041             STR      R1,[R0, #+4]
   1059            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x6081             STR      R1,[R0, #+8]
   1060            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x60C1             STR      R1,[R0, #+12]
   1061            hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6101             STR      R1,[R0, #+16]
   1062            hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6141             STR      R1,[R0, #+20]
   1063            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x6181             STR      R1,[R0, #+24]
   1064            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x6201             STR      R1,[R0, #+32]
   1065            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002C   0x6241             STR      R1,[R0, #+36]
   1066            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000002E   0x6281             STR      R1,[R0, #+40]
   1067            hspi4.Init.CRCPolynomial = 7;
   \   00000030   0x2107             MOVS     R1,#+7
   \   00000032   0x62C1             STR      R1,[R0, #+44]
   1068            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x6301             STR      R1,[R0, #+48]
   1069            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000038   0x6341             STR      R1,[R0, #+52]
   1070            HAL_SPI_Init(&hspi4);
   \   0000003A   0x.... 0x....      B.W      HAL_SPI_Init
   1071          
   1072          
   1073          }
   1074          
   1075          

   \                                 In section .text, align 2, keep-with-next
   1076          void SPI4_Enable(void)
   1077          {
   1078           /* Enable TXE, RXNE and ERR interrupt */
   1079           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \                     SPI4_Enable: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6841             LDR      R1,[R0, #+4]
   \   00000008   0xF041 0x0160      ORR      R1,R1,#0x60
   \   0000000C   0x6041             STR      R1,[R0, #+4]
   1080          
   1081           __HAL_SPI_ENABLE(&hspi4);
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000014   0x6001             STR      R1,[R0, #+0]
   1082          }
   \   00000016   0x4770             BX       LR               ;; return
   1083          
   1084          
   1085          

   \                                 In section .text, align 2, keep-with-next
   1086          void Mic7Rec(void)
   1087          {
   1088              SPI5_Init();
   \                     Mic7Rec: (+1)
   \   00000000   0x....             B.N      SPI5_Init
   1089          }
   1090          

   \                                 In section .text, align 2, keep-with-next
   1091          void Mic8Rec(void)
   1092          {
   1093              SPI6_Init();
   \                     Mic8Rec: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable24_10  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6781             STR      R1,[R0, #+120]
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x67C1             STR      R1,[R0, #+124]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF8C0 0x1084      STR      R1,[R0, #+132]
   \   0000002E   0xF8C0 0x1088      STR      R1,[R0, #+136]
   \   00000032   0xF8C0 0x108C      STR      R1,[R0, #+140]
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0xF8C0 0x1090      STR      R1,[R0, #+144]
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF8C0 0x1094      STR      R1,[R0, #+148]
   \   00000042   0xF8C0 0x1098      STR      R1,[R0, #+152]
   \   00000046   0x3064             ADDS     R0,R0,#+100
   \   00000048   0x.... 0x....      B.W      HAL_SPI_Init
   1094          }
   1095          
   1096          
   1097          /* SPI5 init function */

   \                                 In section .text, align 4, keep-with-next
   1098          void SPI5_Init(void)
   1099          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   1100          	
   1101              /* Enable CRC module */
   1102              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000004   0x....             LDR.N    R0,??DataTable15_1  ;; 0x40023830
   1103          	for (char i=0; i< 2; i++)
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable24_2
   \   0000000A   0x2602             MOVS     R6,#+2
   \   0000000C   0xED2D 0x8B02      VPUSH    {D8}
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0xF104 0x05C8      ADD      R5,R4,#+200
   \   00000016   0xF44F 0x577A      MOV      R7,#+16000
   \   0000001A   0xEEB3 0x8A0E      VMOV.F32 S16,#30.0
   \   0000001E   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000022   0xEDDF 0x....      VLDR.W   S17,??DataTable15  ;; 0x45fa0000
   \   00000026   0x6001             STR      R1,[R0, #+0]
   1104          	{
   1105          		/* Filter LP & HP Init */
   1106          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \                     ??SPI5_Init_0: (+1)
   \   00000028   0xEDC5 0x8A01      VSTR     S17,[R5, #+4]
   1107          		Filter[i].HP_HZ = 30;
   1108          		Filter[i].Fs = 16000;    //sop1hc: 16000
   1109          		Filter[i].Out_MicChannels = 1;
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xED85 0x8A02      VSTR     S16,[R5, #+8]
   \   00000032   0x802F             STRH     R7,[R5, #+0]
   \   00000034   0x81E8             STRH     R0,[R5, #+14]
   1110          		Filter[i].In_MicChannels = 1;
   \   00000036   0x81A8             STRH     R0,[R5, #+12]
   1111          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   00000038   0x4628             MOV      R0,R5
   \   0000003A   0x.... 0x....      BL       PDM_Filter_Init
   1112          	}
   \   0000003E   0x3534             ADDS     R5,R5,#+52
   \   00000040   0x1E76             SUBS     R6,R6,#+1
   \   00000042   0xD1F1             BNE.N    ??SPI5_Init_0
   1113          
   1114          
   1115            hspi5.Instance = SPI5;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable24_11  ;; 0x40015000
   \   00000048   0x6020             STR      R0,[R4, #+0]
   1116            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x6060             STR      R0,[R4, #+4]
   1117            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000004E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000052   0x60A0             STR      R0,[R4, #+8]
   1118            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000054   0xF44F 0x6070      MOV      R0,#+3840
   \   00000058   0x60E0             STR      R0,[R4, #+12]
   1119            hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000005A   0x2002             MOVS     R0,#+2
   \   0000005C   0x6120             STR      R0,[R4, #+16]
   1120            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x6160             STR      R0,[R4, #+20]
   1121            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000062   0xF44F 0x7000      MOV      R0,#+512
   \   00000066   0x61A0             STR      R0,[R4, #+24]
   1122            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x6220             STR      R0,[R4, #+32]
   1123            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000006C   0x6260             STR      R0,[R4, #+36]
   1124            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000006E   0x62A0             STR      R0,[R4, #+40]
   1125            hspi5.Init.CRCPolynomial = 7;
   \   00000070   0x2007             MOVS     R0,#+7
   \   00000072   0x62E0             STR      R0,[R4, #+44]
   1126            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x6320             STR      R0,[R4, #+48]
   1127            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000078   0x6360             STR      R0,[R4, #+52]
   1128            //hspi5.RxISR = SPI5_CallBack;
   1129            HAL_SPI_Init(&hspi5);
   \   0000007A   0x4620             MOV      R0,R4
   \   0000007C   0xECBD 0x8B02      VPOP     {D8}
   \   00000080   0xB001             ADD      SP,SP,#+4
   \   00000082   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   00000086   0x.... 0x....      B.W      HAL_SPI_Init
   1130          
   1131          
   1132            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1133            /* Enable TXE, RXNE and ERR interrupt */
   1134           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1135          
   1136           //__HAL_SPI_ENABLE(&hspi5);
   1137          
   1138          }
   1139          

   \                                 In section .text, align 2, keep-with-next
   1140          void SPI6_Init(void)
   1141          {
   1142          	
   1143            hspi6.Instance = SPI6;
   \                     SPI6_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable24_10  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   1144            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   1145            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   1146            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   1147            hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   1148            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6781             STR      R1,[R0, #+120]
   1149            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x67C1             STR      R1,[R0, #+124]
   1150            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF8C0 0x1084      STR      R1,[R0, #+132]
   1151            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0xF8C0 0x1088      STR      R1,[R0, #+136]
   1152            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000032   0xF8C0 0x108C      STR      R1,[R0, #+140]
   1153            hspi6.Init.CRCPolynomial = 7;
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0xF8C0 0x1090      STR      R1,[R0, #+144]
   1154            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF8C0 0x1094      STR      R1,[R0, #+148]
   1155            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000042   0xF8C0 0x1098      STR      R1,[R0, #+152]
   1156            //hspi6.RxISR = SPI6_CallBack;
   1157            HAL_SPI_Init(&hspi6);
   \   00000046   0x3064             ADDS     R0,R0,#+100
   \   00000048   0x.... 0x....      B.W      HAL_SPI_Init
   1158          
   1159          
   1160            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1161            /* Enable TXE, RXNE and ERR interrupt */
   1162           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
   1163          
   1164           //__HAL_SPI_ENABLE(&hspi6);
   1165          
   1166          }
   1167          
   1168          
   1169          
   1170          

   \                                 In section .text, align 2, keep-with-next
   1171          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
   1172          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
   1173          
   1174            GPIO_InitTypeDef GPIO_InitStruct;
   1175            if (hspi->Instance==SPI1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable24_6  ;; 0x40013000
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD138             BNE.N    ??HAL_SPI_MspInit_0
   1176            {
   1177          	  /* USER CODE BEGIN SPI1_MspInit 0 */
   1178          	  
   1179          	  /* USER CODE END SPI1_MspInit 0 */
   1180          	  /* Peripheral clock enable */
   1181          	  __SPI1_CLK_ENABLE();
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable24_12  ;; 0x40023830
   \   00000016   0x9000             STR      R0,[SP, #+0]
   1182          	  __GPIOA_CLK_ENABLE();
   1183          	  __GPIOC_CLK_ENABLE();
   1184          	  
   1185          	  /**I2S1 GPIO Configuration	
   1186          		PA4 	------> I2S1_WS --> LRCKO
   1187          		PA5 	------> I2S1_CK --> BICKO
   1188          		PA7 	------> I2S1_SD --> SDO12
   1189          		PC4 	------> I2S1_MCK
   1190          		*/
   1191          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
   1192          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1193          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1194          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1195          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1196          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000018   0xA901             ADD      R1,SP,#+4
   \   0000001A   0x6968             LDR      R0,[R5, #+20]
   \   0000001C   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   00000020   0x6168             STR      R0,[R5, #+20]
   \   00000022   0x6968             LDR      R0,[R5, #+20]
   \   00000024   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x9800             LDR      R0,[SP, #+0]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000036   0x6028             STR      R0,[R5, #+0]
   \   00000038   0x6828             LDR      R0,[R5, #+0]
   \   0000003A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0x6828             LDR      R0,[R5, #+0]
   \   00000048   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000004C   0x6028             STR      R0,[R5, #+0]
   \   0000004E   0x6828             LDR      R0,[R5, #+0]
   \   00000050   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x20F0             MOVS     R0,#+240
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x9002             STR      R0,[SP, #+8]
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x9003             STR      R0,[SP, #+12]
   \   00000064   0x2003             MOVS     R0,#+3
   \   00000066   0x9004             STR      R0,[SP, #+16]
   \   00000068   0x2005             MOVS     R0,#+5
   \   0000006A   0x9005             STR      R0,[SP, #+20]
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable24_13  ;; 0x40020000
   \   00000070   0x.... 0x....      BL       HAL_GPIO_Init
   1197          	  
   1198          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
   1199          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1200          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
   1201          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1202          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1203          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1204          		
   1205          	  /* Peripheral interrupt init*/
   1206          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x2023             MOVS     R0,#+35
   \   0000007A   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1207          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   0000007E   0x2023             MOVS     R0,#+35
   \   00000080   0xE124             B.N      ??HAL_SPI_MspInit_1
   1208          	  /* USER CODE BEGIN SPI1_MspInit 1 */
   1209          	  
   1210          	  /* USER CODE END SPI1_MspInit 1 */
   1211          
   1212            }
   1213            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable24_7  ;; 0x40003800
   \   00000086   0x4288             CMP      R0,R1
   \   00000088   0xD152             BNE.N    ??HAL_SPI_MspInit_2
   1214            {
   1215          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1216          	  
   1217          	  /* USER CODE END SPI2_MspInit 0 */
   1218          		/* Peripheral clock enable */
   1219          		__SPI2_CLK_ENABLE();
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x.... 0x....      LDR.W    R5,??DataTable24_12  ;; 0x40023830
   \   00000090   0x9000             STR      R0,[SP, #+0]
   1220          		__GPIOI_CLK_ENABLE();
   1221          		__GPIOB_CLK_ENABLE();
   1222          		__GPIOC_CLK_ENABLE();
   1223          	  
   1224          		/**I2S2 GPIO Configuration	   
   1225          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1226          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1227          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1228          	  
   1229          	  
   1230          		*/
   1231          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   1232          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1233          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1234          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1235          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1236          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000092   0xA901             ADD      R1,SP,#+4
   \   00000094   0x6928             LDR      R0,[R5, #+16]
   \   00000096   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   0000009A   0x6128             STR      R0,[R5, #+16]
   \   0000009C   0x6928             LDR      R0,[R5, #+16]
   \   0000009E   0xF400 0x4080      AND      R0,R0,#0x4000
   \   000000A2   0x9000             STR      R0,[SP, #+0]
   \   000000A4   0x9800             LDR      R0,[SP, #+0]
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x9000             STR      R0,[SP, #+0]
   \   000000AA   0x6828             LDR      R0,[R5, #+0]
   \   000000AC   0xF440 0x7080      ORR      R0,R0,#0x100
   \   000000B0   0x6028             STR      R0,[R5, #+0]
   \   000000B2   0x6828             LDR      R0,[R5, #+0]
   \   000000B4   0xF400 0x7080      AND      R0,R0,#0x100
   \   000000B8   0x9000             STR      R0,[SP, #+0]
   \   000000BA   0x9800             LDR      R0,[SP, #+0]
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0x6828             LDR      R0,[R5, #+0]
   \   000000C2   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000C6   0x6028             STR      R0,[R5, #+0]
   \   000000C8   0x6828             LDR      R0,[R5, #+0]
   \   000000CA   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \   000000D0   0x9800             LDR      R0,[SP, #+0]
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x9000             STR      R0,[SP, #+0]
   \   000000D6   0x6828             LDR      R0,[R5, #+0]
   \   000000D8   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000DC   0x6028             STR      R0,[R5, #+0]
   \   000000DE   0x6828             LDR      R0,[R5, #+0]
   \   000000E0   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000E4   0x9000             STR      R0,[SP, #+0]
   \   000000E6   0x9800             LDR      R0,[SP, #+0]
   \   000000E8   0x2002             MOVS     R0,#+2
   \   000000EA   0x9001             STR      R0,[SP, #+4]
   \   000000EC   0x9002             STR      R0,[SP, #+8]
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x9003             STR      R0,[SP, #+12]
   \   000000F2   0x2003             MOVS     R0,#+3
   \   000000F4   0x9004             STR      R0,[SP, #+16]
   \   000000F6   0x2005             MOVS     R0,#+5
   \   000000F8   0x9005             STR      R0,[SP, #+20]
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable24_14  ;; 0x40020800
   \   000000FE   0x.... 0x....      BL       HAL_GPIO_Init
   1237          	  
   1238          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   00000102   0xF44F 0x5040      MOV      R0,#+12288
   1239          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1240          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1241          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1242          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1243          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000106   0xA901             ADD      R1,SP,#+4
   \   00000108   0x9001             STR      R0,[SP, #+4]
   \   0000010A   0x2002             MOVS     R0,#+2
   \   0000010C   0x9002             STR      R0,[SP, #+8]
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x9003             STR      R0,[SP, #+12]
   \   00000112   0x2003             MOVS     R0,#+3
   \   00000114   0x9004             STR      R0,[SP, #+16]
   \   00000116   0x2005             MOVS     R0,#+5
   \   00000118   0x9005             STR      R0,[SP, #+20]
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable24_15  ;; 0x40020400
   \   0000011E   0x.... 0x....      BL       HAL_GPIO_Init
   1244          	  
   1245          	  
   1246          		/* Peripheral interrupt init*/
   1247          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   00000122   0x2200             MOVS     R2,#+0
   \   00000124   0x2101             MOVS     R1,#+1
   \   00000126   0x2024             MOVS     R0,#+36
   \   00000128   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1248          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   0000012C   0x2024             MOVS     R0,#+36
   \   0000012E   0xE0CD             B.N      ??HAL_SPI_MspInit_1
   1249          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1250          	  
   1251          	  /* USER CODE END SPI2_MspInit 1 */
   1252          
   1253          
   1254            }
   1255            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   00000130   0x.... 0x....      LDR.W    R1,??DataTable24_16  ;; 0x40003c00
   \   00000134   0x4288             CMP      R0,R1
   \   00000136   0xF040 0x8098      BNE.W    ??HAL_SPI_MspInit_3
   1256            {
   1257          	  
   1258              /**I2S3 GPIO Configuration    
   1259                 PB2     ------> I2S3_SD
   1260                 PA15     ------> I2S3_WS (LRCK)
   1261                 PB3     ------> I2S3_CK 
   1262          	   PC7    ------> MCLK
   1263              */
   1264           
   1265            /* USER CODE BEGIN SPI3_MspInit 1 */
   1266            __SPI3_CLK_ENABLE();
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x.... 0x....      LDR.W    R5,??DataTable24_12  ;; 0x40023830
   \   00000140   0x9000             STR      R0,[SP, #+0]
   1267            __GPIOA_CLK_ENABLE();
   1268            __GPIOB_CLK_ENABLE();
   1269          
   1270            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   1271            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1272            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1273            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1274            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1275            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000142   0xA901             ADD      R1,SP,#+4
   \   00000144   0x6928             LDR      R0,[R5, #+16]
   \   00000146   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   0000014A   0x6128             STR      R0,[R5, #+16]
   \   0000014C   0x6928             LDR      R0,[R5, #+16]
   \   0000014E   0xF400 0x4000      AND      R0,R0,#0x8000
   \   00000152   0x9000             STR      R0,[SP, #+0]
   \   00000154   0x9800             LDR      R0,[SP, #+0]
   \   00000156   0x2000             MOVS     R0,#+0
   \   00000158   0x9000             STR      R0,[SP, #+0]
   \   0000015A   0x6828             LDR      R0,[R5, #+0]
   \   0000015C   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000160   0x6028             STR      R0,[R5, #+0]
   \   00000162   0x6828             LDR      R0,[R5, #+0]
   \   00000164   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000168   0x9000             STR      R0,[SP, #+0]
   \   0000016A   0x9800             LDR      R0,[SP, #+0]
   \   0000016C   0x2000             MOVS     R0,#+0
   \   0000016E   0x9000             STR      R0,[SP, #+0]
   \   00000170   0x6828             LDR      R0,[R5, #+0]
   \   00000172   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000176   0x6028             STR      R0,[R5, #+0]
   \   00000178   0x6828             LDR      R0,[R5, #+0]
   \   0000017A   0xF000 0x0002      AND      R0,R0,#0x2
   \   0000017E   0x9000             STR      R0,[SP, #+0]
   \   00000180   0x9800             LDR      R0,[SP, #+0]
   \   00000182   0x200C             MOVS     R0,#+12
   \   00000184   0x9001             STR      R0,[SP, #+4]
   \   00000186   0x2002             MOVS     R0,#+2
   \   00000188   0x9002             STR      R0,[SP, #+8]
   \   0000018A   0x2003             MOVS     R0,#+3
   \   0000018C   0x9004             STR      R0,[SP, #+16]
   \   0000018E   0x2000             MOVS     R0,#+0
   \   00000190   0x9003             STR      R0,[SP, #+12]
   \   00000192   0x2006             MOVS     R0,#+6
   \   00000194   0x9005             STR      R0,[SP, #+20]
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable24_15  ;; 0x40020400
   \   0000019A   0x.... 0x....      BL       HAL_GPIO_Init
   1276          
   1277          
   1278            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   0000019E   0xF44F 0x4000      MOV      R0,#+32768
   1279            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1280            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1281            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   000001A2   0xA901             ADD      R1,SP,#+4
   \   000001A4   0x9001             STR      R0,[SP, #+4]
   \   000001A6   0x2002             MOVS     R0,#+2
   \   000001A8   0x9002             STR      R0,[SP, #+8]
   \   000001AA   0x2006             MOVS     R0,#+6
   \   000001AC   0x9005             STR      R0,[SP, #+20]
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable24_13  ;; 0x40020000
   \   000001B2   0x.... 0x....      BL       HAL_GPIO_Init
   1282          
   1283          #ifdef CODEC_MCLK_ENABLED
   1284            __GPIOC_CLK_ENABLE();
   \   000001B6   0x2000             MOVS     R0,#+0
   1285            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   1286            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1287            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1288            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1289            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1290            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   000001B8   0xA901             ADD      R1,SP,#+4
   \   000001BA   0x9000             STR      R0,[SP, #+0]
   \   000001BC   0x6828             LDR      R0,[R5, #+0]
   \   000001BE   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000001C2   0x6028             STR      R0,[R5, #+0]
   \   000001C4   0x6828             LDR      R0,[R5, #+0]
   \   000001C6   0xF000 0x0004      AND      R0,R0,#0x4
   \   000001CA   0x9000             STR      R0,[SP, #+0]
   \   000001CC   0x9800             LDR      R0,[SP, #+0]
   \   000001CE   0x2080             MOVS     R0,#+128
   \   000001D0   0x9001             STR      R0,[SP, #+4]
   \   000001D2   0x2002             MOVS     R0,#+2
   \   000001D4   0x9002             STR      R0,[SP, #+8]
   \   000001D6   0x2003             MOVS     R0,#+3
   \   000001D8   0x9004             STR      R0,[SP, #+16]
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x9003             STR      R0,[SP, #+12]
   \   000001DE   0x2006             MOVS     R0,#+6
   \   000001E0   0x9005             STR      R0,[SP, #+20]
   \   000001E2   0x.... 0x....      LDR.W    R0,??DataTable24_14  ;; 0x40020800
   \   000001E6   0x.... 0x....      BL       HAL_GPIO_Init
   1291          
   1292          #endif /* CODEC_MCLK_ENABLED */ 
   1293          
   1294          #ifdef I2S_INTERRUPT   
   1295               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1296               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1297               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1298          
   1299               /* Enable the I2S DMA request */
   1300               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1301               //__HAL_I2S_ENABLE(&hi2s3);
   1302            	    /* Peripheral interrupt init*/
   1303          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1304          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1305          #endif
   1306          
   1307                /* Enable the DMA clock */ 
   1308          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   000001EA   0x2000             MOVS     R0,#+0
   \   000001EC   0x9000             STR      R0,[SP, #+0]
   \   000001EE   0x6828             LDR      R0,[R5, #+0]
   \   000001F0   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000001F4   0x6028             STR      R0,[R5, #+0]
   \   000001F6   0x6828             LDR      R0,[R5, #+0]
   1309          
   1310                /* Configure the DMA Stream */
   1311                //HAL_DMA_DeInit(&DmaHandle);
   1312          
   1313                /* Set the parameters to be configured */ 
   1314          	  DmaHandle.Instance = DMA1_Stream7;
   \   000001F8   0x.... 0x....      LDR.W    R5,??DataTable24_17
   \   000001FC   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000200   0x9000             STR      R0,[SP, #+0]
   \   00000202   0x9800             LDR      R0,[SP, #+0]
   \   00000204   0x.... 0x....      LDR.W    R0,??DataTable24_18  ;; 0x400260b8
   \   00000208   0x6028             STR      R0,[R5, #+0]
   1315                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   0000020A   0x2000             MOVS     R0,#+0
   \   0000020C   0x6068             STR      R0,[R5, #+4]
   1316          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   0000020E   0x2040             MOVS     R0,#+64
   \   00000210   0x60A8             STR      R0,[R5, #+8]
   1317          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   00000212   0x2000             MOVS     R0,#+0
   \   00000214   0x60E8             STR      R0,[R5, #+12]
   1318          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   00000216   0xF44F 0x6080      MOV      R0,#+1024
   \   0000021A   0x6128             STR      R0,[R5, #+16]
   1319          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   0000021C   0xF44F 0x6000      MOV      R0,#+2048
   \   00000220   0x6168             STR      R0,[R5, #+20]
   1320                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   00000222   0xF44F 0x5000      MOV      R0,#+8192
   \   00000226   0x61A8             STR      R0,[R5, #+24]
   1321          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   00000228   0x2000             MOVS     R0,#+0
   \   0000022A   0x61E8             STR      R0,[R5, #+28]
   1322                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   0000022C   0xF44F 0x3000      MOV      R0,#+131072
   \   00000230   0x6228             STR      R0,[R5, #+32]
   1323          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   00000232   0x2004             MOVS     R0,#+4
   \   00000234   0x6268             STR      R0,[R5, #+36]
   1324                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   00000236   0x2003             MOVS     R0,#+3
   \   00000238   0x62A8             STR      R0,[R5, #+40]
   1325                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   0000023A   0x2000             MOVS     R0,#+0
   \   0000023C   0x62E8             STR      R0,[R5, #+44]
   1326                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   0000023E   0x6328             STR      R0,[R5, #+48]
   1327                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1328                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1329                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1330                //DmaHandle.XferCpltCallback = &TC_Callback;
   1331           
   1332          
   1333                /* Associate the initialized DMA handle to the the SPI handle */
   1334                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   1335                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1336          
   1337          	   /* Deinitialize the Stream for new transfer */
   1338                 HAL_DMA_DeInit(&DmaHandle);
   \   00000240   0x4628             MOV      R0,R5
   \   00000242   0x6565             STR      R5,[R4, #+84]
   \   00000244   0x63AC             STR      R4,[R5, #+56]
   \   00000246   0x.... 0x....      BL       HAL_DMA_DeInit
   1339                 /* Configure the DMA Stream */
   1340          	   HAL_DMA_Init(&DmaHandle);
   \   0000024A   0x4628             MOV      R0,R5
   \   0000024C   0x.... 0x....      BL       HAL_DMA_Init
   1341          
   1342                /* Set Interrupt Group Priority */
   1343                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   00000250   0x2200             MOVS     R2,#+0
   \   00000252   0x2107             MOVS     R1,#+7
   \   00000254   0x202F             MOVS     R0,#+47
   \   00000256   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1344                /* Enable the DMA STREAM global Interrupt */
   1345                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   0000025A   0x202F             MOVS     R0,#+47
   \   0000025C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1346          
   1347          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000260   0x6828             LDR      R0,[R5, #+0]
   \   00000262   0x6801             LDR      R1,[R0, #+0]
   \   00000264   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000268   0xE115             B.N      ??HAL_SPI_MspInit_4
   1348          	    
   1349            }
   1350            else if(hspi->Instance==SPI4)
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   0000026A   0x.... 0x....      LDR.W    R1,??DataTable24_9  ;; 0x40013400
   \   0000026E   0x4288             CMP      R0,R1
   \   00000270   0xD130             BNE.N    ??HAL_SPI_MspInit_5
   1351            {
   1352            /* USER CODE BEGIN SPI4_MspInit 0 */
   1353          
   1354            /* USER CODE END SPI4_MspInit 0 */
   1355              /* Peripheral clock enable */
   1356              __SPI4_CLK_ENABLE();
   \   00000272   0x2000             MOVS     R0,#+0
   \   00000274   0x.... 0x....      LDR.W    R5,??DataTable24_12  ;; 0x40023830
   \   00000278   0x9000             STR      R0,[SP, #+0]
   1357              __HAL_RCC_GPIOE_CLK_ENABLE();
   1358            
   1359            
   1360              /**SPI4 GPIO Configuration    
   1361              PE2     ------> SPI4_SCK
   1362              PE4     ------> SPI4_NSS
   1363              PE5     ------> SPI4_MISO
   1364              PE6     ------> SPI4_MOSI 
   1365              */
   1366              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   1367              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1368              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1369              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1370              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   1371              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   \   0000027A   0xA901             ADD      R1,SP,#+4
   \   0000027C   0x6968             LDR      R0,[R5, #+20]
   \   0000027E   0xF440 0x5000      ORR      R0,R0,#0x2000
   \   00000282   0x6168             STR      R0,[R5, #+20]
   \   00000284   0x6968             LDR      R0,[R5, #+20]
   \   00000286   0xF400 0x5000      AND      R0,R0,#0x2000
   \   0000028A   0x9000             STR      R0,[SP, #+0]
   \   0000028C   0x9800             LDR      R0,[SP, #+0]
   \   0000028E   0x2000             MOVS     R0,#+0
   \   00000290   0x9000             STR      R0,[SP, #+0]
   \   00000292   0x6828             LDR      R0,[R5, #+0]
   \   00000294   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000298   0x6028             STR      R0,[R5, #+0]
   \   0000029A   0x6828             LDR      R0,[R5, #+0]
   \   0000029C   0xF000 0x0010      AND      R0,R0,#0x10
   \   000002A0   0x9000             STR      R0,[SP, #+0]
   \   000002A2   0x9800             LDR      R0,[SP, #+0]
   \   000002A4   0x2074             MOVS     R0,#+116
   \   000002A6   0x9001             STR      R0,[SP, #+4]
   \   000002A8   0x2002             MOVS     R0,#+2
   \   000002AA   0x9002             STR      R0,[SP, #+8]
   \   000002AC   0x2000             MOVS     R0,#+0
   \   000002AE   0x9003             STR      R0,[SP, #+12]
   \   000002B0   0x2003             MOVS     R0,#+3
   \   000002B2   0x9004             STR      R0,[SP, #+16]
   \   000002B4   0x2005             MOVS     R0,#+5
   \   000002B6   0x9005             STR      R0,[SP, #+20]
   \   000002B8   0x.... 0x....      LDR.W    R0,??DataTable24_19  ;; 0x40021000
   \   000002BC   0x.... 0x....      BL       HAL_GPIO_Init
   1372          
   1373          	/* Peripheral interrupt init*/
   1374              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   \   000002C0   0x2200             MOVS     R2,#+0
   \   000002C2   0x2102             MOVS     R1,#+2
   \   000002C4   0x2054             MOVS     R0,#+84
   \   000002C6   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1375              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   \   000002CA   0x2054             MOVS     R0,#+84
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   000002CC   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1376          
   1377            /* USER CODE BEGIN SPI4_MspInit 1 */
   1378          
   1379            /* USER CODE END SPI4_MspInit 1 */
   1380            }
   1381            else if(hspi->Instance==SPI5)
   1382            {
   1383            /* USER CODE BEGIN SPI5_MspInit 0 */
   1384          
   1385            /* USER CODE END SPI5_MspInit 0 */
   1386              /* Peripheral clock enable */
   1387              __HAL_RCC_SPI5_CLK_ENABLE();
   1388              __HAL_RCC_GPIOF_CLK_ENABLE();
   1389            
   1390              /**SPI5 GPIO Configuration    
   1391              PF7     ------> SPI5_SCK  --> PF7
   1392              PF11     ------> SPI5_MOSI --> PF9
   1393                               SPI5_MISO --> PF8
   1394                                    NSS   -->  PF6
   1395              */
   1396              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   1397              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   1398              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1399              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1400              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   1401              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   1402          
   1403          #if 0
   1404            /* Peripheral interrupt init*/
   1405              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1406              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1407          #else
   1408          	/* Peripheral DMA init*/
   1409              __HAL_RCC_DMA2_CLK_ENABLE();
   1410          	hdma_spi5_rx.Instance = DMA2_Stream5;
   1411          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   1412          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1413          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1414          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   1415          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1416          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   1417          	hdma_spi5_rx.Init.Mode = DMA_CIRCULAR;
   1418          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1419          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1420          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1421          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_INC4;
   1422          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_INC4;
   1423          	HAL_DMA_Init(&hdma_spi5_rx);
   1424          
   1425              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   1426          
   1427          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1428          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   1429          	  __HAL_DMA_ENABLE_IT(&hdma_spi5_rx, DMA_IT_TC);
   1430          	  __HAL_DMA_ENABLE_IT(&hdma_spi5_rx, DMA_IT_HT);
   1431          
   1432          #endif
   1433            /* USER CODE END SPI5_MspInit 1 */
   1434            }
   1435            else if(hspi->Instance==SPI6)
   1436            {
   1437            /* USER CODE BEGIN SPI6_MspInit 0 */
   1438          
   1439            /* USER CODE END SPI6_MspInit 0 */
   1440              /* Peripheral clock enable */
   1441              __SPI6_CLK_ENABLE();
   1442              __HAL_RCC_GPIOG_CLK_ENABLE();
   1443            
   1444              /**SPI6 GPIO Configuration    
   1445              PG13     ------> SPI6_SCK
   1446              PG14     ------> SPI6_MOSI 
   1447              */
   1448              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   1449              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1450              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1451              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1452              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   1453              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   1454          
   1455          #if 0
   1456          	  /* Peripheral interrupt init*/
   1457              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1458              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1459          #else
   1460          	/* Peripheral DMA init*/
   1461          	__HAL_RCC_DMA2_CLK_ENABLE();
   1462          	hdma_spi6_rx.Instance = DMA2_Stream6;
   1463          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   1464          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1465          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1466          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   1467          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1468          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1469          	hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
   1470          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1471          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1472          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1473          	hdma_spi6_rx.Init.MemBurst = DMA_PBURST_INC4;
   1474          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_INC4;
   1475          	HAL_DMA_Init(&hdma_spi6_rx);
   1476          
   1477          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   1478          
   1479          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1480          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   1481          
   1482              __HAL_DMA_ENABLE_IT(&hdma_spi6_rx, DMA_IT_TC);
   1483          	__HAL_DMA_ENABLE_IT(&hdma_spi6_rx, DMA_IT_HT);
   1484          
   1485          #endif
   1486            }
   1487          
   1488          }
   \   000002D0   0xB007             ADD      SP,SP,#+28
   \   000002D2   0xBD30             POP      {R4,R5,PC}
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   000002D4   0x.... 0x....      LDR.W    R1,??DataTable24_11  ;; 0x40015000
   \   000002D8   0x4288             CMP      R0,R1
   \   000002DA   0xD167             BNE.N    ??HAL_SPI_MspInit_6
   \   000002DC   0x2000             MOVS     R0,#+0
   \   000002DE   0x.... 0x....      LDR.W    R5,??DataTable24_12  ;; 0x40023830
   \   000002E2   0x9000             STR      R0,[SP, #+0]
   \   000002E4   0xA901             ADD      R1,SP,#+4
   \   000002E6   0x6968             LDR      R0,[R5, #+20]
   \   000002E8   0xF440 0x1080      ORR      R0,R0,#0x100000
   \   000002EC   0x6168             STR      R0,[R5, #+20]
   \   000002EE   0x6968             LDR      R0,[R5, #+20]
   \   000002F0   0xF400 0x1080      AND      R0,R0,#0x100000
   \   000002F4   0x9000             STR      R0,[SP, #+0]
   \   000002F6   0x9800             LDR      R0,[SP, #+0]
   \   000002F8   0x2000             MOVS     R0,#+0
   \   000002FA   0x9000             STR      R0,[SP, #+0]
   \   000002FC   0x6828             LDR      R0,[R5, #+0]
   \   000002FE   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000302   0x6028             STR      R0,[R5, #+0]
   \   00000304   0x6828             LDR      R0,[R5, #+0]
   \   00000306   0xF000 0x0020      AND      R0,R0,#0x20
   \   0000030A   0x9000             STR      R0,[SP, #+0]
   \   0000030C   0x9800             LDR      R0,[SP, #+0]
   \   0000030E   0xF44F 0x7070      MOV      R0,#+960
   \   00000312   0x9001             STR      R0,[SP, #+4]
   \   00000314   0x2012             MOVS     R0,#+18
   \   00000316   0x9002             STR      R0,[SP, #+8]
   \   00000318   0x2001             MOVS     R0,#+1
   \   0000031A   0x9003             STR      R0,[SP, #+12]
   \   0000031C   0x2003             MOVS     R0,#+3
   \   0000031E   0x9004             STR      R0,[SP, #+16]
   \   00000320   0x2005             MOVS     R0,#+5
   \   00000322   0x9005             STR      R0,[SP, #+20]
   \   00000324   0x.... 0x....      LDR.W    R0,??DataTable24_20  ;; 0x40021400
   \   00000328   0x.... 0x....      BL       HAL_GPIO_Init
   \   0000032C   0x2000             MOVS     R0,#+0
   \   0000032E   0x9000             STR      R0,[SP, #+0]
   \   00000330   0x6828             LDR      R0,[R5, #+0]
   \   00000332   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   00000336   0x6028             STR      R0,[R5, #+0]
   \   00000338   0x6828             LDR      R0,[R5, #+0]
   \   0000033A   0x.... 0x....      LDR.W    R5,??DataTable24_21
   \   0000033E   0xF400 0x0080      AND      R0,R0,#0x400000
   \   00000342   0x9000             STR      R0,[SP, #+0]
   \   00000344   0x9800             LDR      R0,[SP, #+0]
   \   00000346   0x.... 0x....      LDR.W    R0,??DataTable24_18  ;; 0x400260b8
   \   0000034A   0xF500 0x7074      ADD      R0,R0,#+976
   \   0000034E   0x6028             STR      R0,[R5, #+0]
   \   00000350   0xF04F 0x6060      MOV      R0,#+234881024
   \   00000354   0x6068             STR      R0,[R5, #+4]
   \   00000356   0x2000             MOVS     R0,#+0
   \   00000358   0x60A8             STR      R0,[R5, #+8]
   \   0000035A   0x60E8             STR      R0,[R5, #+12]
   \   0000035C   0xF44F 0x6080      MOV      R0,#+1024
   \   00000360   0x6128             STR      R0,[R5, #+16]
   \   00000362   0xF44F 0x6000      MOV      R0,#+2048
   \   00000366   0x6168             STR      R0,[R5, #+20]
   \   00000368   0xF44F 0x5000      MOV      R0,#+8192
   \   0000036C   0x61A8             STR      R0,[R5, #+24]
   \   0000036E   0xF44F 0x7080      MOV      R0,#+256
   \   00000372   0x61E8             STR      R0,[R5, #+28]
   \   00000374   0xF44F 0x3000      MOV      R0,#+131072
   \   00000378   0x6228             STR      R0,[R5, #+32]
   \   0000037A   0x2000             MOVS     R0,#+0
   \   0000037C   0x6268             STR      R0,[R5, #+36]
   \   0000037E   0x2003             MOVS     R0,#+3
   \   00000380   0x62A8             STR      R0,[R5, #+40]
   \   00000382   0xF44F 0x0000      MOV      R0,#+8388608
   \   00000386   0x62E8             STR      R0,[R5, #+44]
   \   00000388   0xF44F 0x1000      MOV      R0,#+2097152
   \   0000038C   0x6328             STR      R0,[R5, #+48]
   \   0000038E   0x4628             MOV      R0,R5
   \   00000390   0x.... 0x....      BL       HAL_DMA_Init
   \   00000394   0x65A5             STR      R5,[R4, #+88]
   \   00000396   0x2200             MOVS     R2,#+0
   \   00000398   0x63AC             STR      R4,[R5, #+56]
   \   0000039A   0x2104             MOVS     R1,#+4
   \   0000039C   0x2044             MOVS     R0,#+68
   \   0000039E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   000003A2   0x2044             MOVS     R0,#+68
   \   000003A4   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   000003A8   0x6828             LDR      R0,[R5, #+0]
   \   000003AA   0xE06D             B.N      ??HAL_SPI_MspInit_7
   \                     ??HAL_SPI_MspInit_6: (+1)
   \   000003AC   0x.... 0x....      LDR.W    R1,??DataTable24_10  ;; 0x40015400
   \   000003B0   0x4288             CMP      R0,R1
   \   000003B2   0xD171             BNE.N    ??HAL_SPI_MspInit_8
   \   000003B4   0x2000             MOVS     R0,#+0
   \   000003B6   0x.... 0x....      LDR.W    R5,??DataTable24_12  ;; 0x40023830
   \   000003BA   0x9000             STR      R0,[SP, #+0]
   \   000003BC   0xA901             ADD      R1,SP,#+4
   \   000003BE   0x6968             LDR      R0,[R5, #+20]
   \   000003C0   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000003C4   0x6168             STR      R0,[R5, #+20]
   \   000003C6   0x6968             LDR      R0,[R5, #+20]
   \   000003C8   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000003CC   0x9000             STR      R0,[SP, #+0]
   \   000003CE   0x9800             LDR      R0,[SP, #+0]
   \   000003D0   0x2000             MOVS     R0,#+0
   \   000003D2   0x9000             STR      R0,[SP, #+0]
   \   000003D4   0x6828             LDR      R0,[R5, #+0]
   \   000003D6   0xF040 0x0040      ORR      R0,R0,#0x40
   \   000003DA   0x6028             STR      R0,[R5, #+0]
   \   000003DC   0x6828             LDR      R0,[R5, #+0]
   \   000003DE   0xF000 0x0040      AND      R0,R0,#0x40
   \   000003E2   0x9000             STR      R0,[SP, #+0]
   \   000003E4   0x9800             LDR      R0,[SP, #+0]
   \   000003E6   0xF44F 0x40C0      MOV      R0,#+24576
   \   000003EA   0x9001             STR      R0,[SP, #+4]
   \   000003EC   0x2002             MOVS     R0,#+2
   \   000003EE   0x9002             STR      R0,[SP, #+8]
   \   000003F0   0x2000             MOVS     R0,#+0
   \   000003F2   0x9003             STR      R0,[SP, #+12]
   \   000003F4   0x2003             MOVS     R0,#+3
   \   000003F6   0x9004             STR      R0,[SP, #+16]
   \   000003F8   0x2005             MOVS     R0,#+5
   \   000003FA   0x9005             STR      R0,[SP, #+20]
   \   000003FC   0x.... 0x....      LDR.W    R0,??DataTable24_22  ;; 0x40021800
   \   00000400   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000404   0x2000             MOVS     R0,#+0
   \   00000406   0x9000             STR      R0,[SP, #+0]
   \   00000408   0x6828             LDR      R0,[R5, #+0]
   \   0000040A   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   0000040E   0x6028             STR      R0,[R5, #+0]
   \   00000410   0x6828             LDR      R0,[R5, #+0]
   \   00000412   0x.... 0x....      LDR.W    R5,??DataTable24_21
   \   00000416   0xF400 0x0080      AND      R0,R0,#0x400000
   \   0000041A   0x9000             STR      R0,[SP, #+0]
   \   0000041C   0x9800             LDR      R0,[SP, #+0]
   \   0000041E   0x.... 0x....      LDR.W    R0,??DataTable24_18  ;; 0x400260b8
   \   00000422   0xF500 0x707A      ADD      R0,R0,#+1000
   \   00000426   0x65A8             STR      R0,[R5, #+88]
   \   00000428   0xF04F 0x7000      MOV      R0,#+33554432
   \   0000042C   0x65E8             STR      R0,[R5, #+92]
   \   0000042E   0x2000             MOVS     R0,#+0
   \   00000430   0x6628             STR      R0,[R5, #+96]
   \   00000432   0x6668             STR      R0,[R5, #+100]
   \   00000434   0xF44F 0x6080      MOV      R0,#+1024
   \   00000438   0x66A8             STR      R0,[R5, #+104]
   \   0000043A   0xF44F 0x6000      MOV      R0,#+2048
   \   0000043E   0x66E8             STR      R0,[R5, #+108]
   \   00000440   0x6728             STR      R0,[R5, #+112]
   \   00000442   0xF44F 0x7080      MOV      R0,#+256
   \   00000446   0x6768             STR      R0,[R5, #+116]
   \   00000448   0xF44F 0x3000      MOV      R0,#+131072
   \   0000044C   0x67A8             STR      R0,[R5, #+120]
   \   0000044E   0x2000             MOVS     R0,#+0
   \   00000450   0x67E8             STR      R0,[R5, #+124]
   \   00000452   0x2003             MOVS     R0,#+3
   \   00000454   0xF8C5 0x0080      STR      R0,[R5, #+128]
   \   00000458   0xF44F 0x1000      MOV      R0,#+2097152
   \   0000045C   0xF8C5 0x0084      STR      R0,[R5, #+132]
   \   00000460   0xF8C5 0x0088      STR      R0,[R5, #+136]
   \   00000464   0xF105 0x0058      ADD      R0,R5,#+88
   \   00000468   0x.... 0x....      BL       HAL_DMA_Init
   \   0000046C   0xF105 0x0058      ADD      R0,R5,#+88
   \   00000470   0x2201             MOVS     R2,#+1
   \   00000472   0x65A0             STR      R0,[R4, #+88]
   \   00000474   0x2107             MOVS     R1,#+7
   \   00000476   0xF8C5 0x4090      STR      R4,[R5, #+144]
   \   0000047A   0x2045             MOVS     R0,#+69
   \   0000047C   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000480   0x2045             MOVS     R0,#+69
   \   00000482   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   00000486   0x6DA8             LDR      R0,[R5, #+88]
   \                     ??HAL_SPI_MspInit_7: (+1)
   \   00000488   0x6801             LDR      R1,[R0, #+0]
   \   0000048A   0xF041 0x0110      ORR      R1,R1,#0x10
   \   0000048E   0x6001             STR      R1,[R0, #+0]
   \   00000490   0x6801             LDR      R1,[R0, #+0]
   \   00000492   0xF041 0x0108      ORR      R1,R1,#0x8
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   00000496   0x6001             STR      R1,[R0, #+0]
   \                     ??HAL_SPI_MspInit_8: (+1)
   \   00000498   0xB007             ADD      SP,SP,#+28
   \   0000049A   0xBD30             POP      {R4,R5,PC}       ;; return
   1489          
   1490          
   1491          
   1492          
   1493          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1494          {
   1495            /* Check the parameters */
   1496            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1497            
   1498            /* Write in the DR register the data to be sent */
   1499            SPIx->DR = Data;
   1500          }
   1501          
   1502          
   1503          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1504          {
   1505            /* Check the parameters */
   1506            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1507            
   1508            /* Return the data in the DR register */
   1509            return SPIx->DR;
   1510          }
   1511          
   1512          

   \                                 In section .text, align 2, keep-with-next
   1513          void RecordUpdBuf(void)
   1514          {
   1515          
   1516               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable24_8
   \   00000004   0xF890 0x1081      LDRB     R1,[R0, #+129]
   \   00000008   0x2902             CMP      R1,#+2
   \   0000000A   0xF040 0x8100      BNE.W    ??RecordUpdBuf_0
   1517               {
   1518                  WaveRecord_flgInt=0;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xF880 0x1081      STRB     R1,[R0, #+129]
   1519          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable24_23
   \   00000018   0x880A             LDRH     R2,[R1, #+0]
   \   0000001A   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000001E   0xBFBE             ITTT     LT 
   \   00000020   0x.... 0x....      LDRLT.W  R2,??DataTable24_24
   \   00000024   0x8813             LDRHLT   R3,[R2, #+0]
   \   00000026   0xF5B3 0x6F80      CMPLT    R3,#+1024
   \   0000002A   0xF280 0x80F0      BGE.W    ??RecordUpdBuf_0
   1520          		//			  &&(stLR!=stLROld))
   1521          			{
   1522          		/*-------------------------------------------------------------------------------------------------------------
   1523          					  
   1524          			Sequence  Record Data					  Processing Data				  Player Data
   1525          					  
   1526          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1527          					  
   1528          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1529          					  
   1530          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1531          		 ---------------------------------------------------------------------------------------------------------------*/
   1532          					  /* Recording Audio Data */						 
   1533          					   switch (buffer_switch)
   \   0000002E   0x.... 0x....      LDR.W    R3,??DataTable24_25
   \   00000032   0x781B             LDRB     R3,[R3, #+0]
   \   00000034   0xB123             CBZ.N    R3,??RecordUpdBuf_1
   \   00000036   0x2B02             CMP      R3,#+2
   \   00000038   0xF000 0x80A0      BEQ.W    ??RecordUpdBuf_2
   \   0000003C   0xD350             BCC.N    ??RecordUpdBuf_3
   \   0000003E   0x4770             BX       LR
   1534          					   {
   1535          								case BUF1_PLAY:
   1536          
   1537          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_1: (+1)
   \   00000040   0x880B             LDRH     R3,[R1, #+0]
   \   00000042   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000046   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   0000004A   0x....             LDR.N    R1,??DataTable24
   \   0000004C   0xF9B0 0xC08A      LDRSH    R12,[R0, #+138]
   \   00000050   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000054   0xF503 0x4380      ADD      R3,R3,#+16384
   \   00000058   0xF8A3 0xC000      STRH     R12,[R3, #+0]
   1538          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   0000005C   0x8813             LDRH     R3,[R2, #+0]
   \   0000005E   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000062   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000066   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000006A   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   0000006E   0xF503 0x4390      ADD      R3,R3,#+18432
   \   00000072   0x801A             STRH     R2,[R3, #+0]
   1539          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   00000074   0x.... 0x....      LDR.W    R2,??DataTable24_26
   \   00000078   0x8813             LDRH     R3,[R2, #+0]
   \   0000007A   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000007E   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000082   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000086   0xF9B0 0x2090      LDRSH    R2,[R0, #+144]
   \   0000008A   0xF503 0x43A0      ADD      R3,R3,#+20480
   \   0000008E   0x801A             STRH     R2,[R3, #+0]
   1540          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   00000090   0x.... 0x....      LDR.W    R2,??DataTable24_27
   \   00000094   0x8813             LDRH     R3,[R2, #+0]
   \   00000096   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000009A   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   0000009E   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000000A2   0xF9B0 0x208E      LDRSH    R2,[R0, #+142]
   \   000000A6   0xF503 0x43B0      ADD      R3,R3,#+22528
   \   000000AA   0x801A             STRH     R2,[R3, #+0]
   1541          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000000AC   0x....             LDR.N    R2,??DataTable24_1
   \   000000AE   0x8813             LDRH     R3,[R2, #+0]
   \   000000B0   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000B4   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000000B8   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000000BC   0xF9B0 0x2092      LDRSH    R2,[R0, #+146]
   \   000000C0   0xF503 0x43C0      ADD      R3,R3,#+24576
   \   000000C4   0x801A             STRH     R2,[R3, #+0]
   1542          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   000000C6   0x....             LDR.N    R2,??DataTable21_2
   \   000000C8   0x8813             LDRH     R3,[R2, #+0]
   \   000000CA   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000CE   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000000D2   0xF9B0 0x0094      LDRSH    R0,[R0, #+148]
   \   000000D6   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   000000DA   0xF501 0x41D0      ADD      R1,R1,#+26624
   \   000000DE   0xE095             B.N      ??RecordUpdBuf_4
   1543          	
   1544          										break;
   1545          								case BUF2_PLAY:
   1546          
   1547          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_3: (+1)
   \   000000E0   0x880B             LDRH     R3,[R1, #+0]
   \   000000E2   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000E6   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000EA   0x....             LDR.N    R1,??DataTable24
   \   000000EC   0xF9B0 0xC08A      LDRSH    R12,[R0, #+138]
   \   000000F0   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000000F4   0xF503 0x4300      ADD      R3,R3,#+32768
   \   000000F8   0xF8A3 0xC000      STRH     R12,[R3, #+0]
   1548          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   000000FC   0x8813             LDRH     R3,[R2, #+0]
   \   000000FE   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000102   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000106   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000010A   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   0000010E   0xF503 0x4308      ADD      R3,R3,#+34816
   \   00000112   0x801A             STRH     R2,[R3, #+0]
   1549          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   00000114   0x....             LDR.N    R2,??DataTable24_26
   \   00000116   0x8813             LDRH     R3,[R2, #+0]
   \   00000118   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000011C   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000120   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000124   0xF9B0 0x2090      LDRSH    R2,[R0, #+144]
   \   00000128   0xF503 0x4310      ADD      R3,R3,#+36864
   \   0000012C   0x801A             STRH     R2,[R3, #+0]
   1550          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   0000012E   0x....             LDR.N    R2,??DataTable24_27
   \   00000130   0x8813             LDRH     R3,[R2, #+0]
   \   00000132   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000136   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   0000013A   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000013E   0xF9B0 0x208E      LDRSH    R2,[R0, #+142]
   \   00000142   0xF503 0x4318      ADD      R3,R3,#+38912
   \   00000146   0x801A             STRH     R2,[R3, #+0]
   1551          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   00000148   0x....             LDR.N    R2,??DataTable24_1
   \   0000014A   0x8813             LDRH     R3,[R2, #+0]
   \   0000014C   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000150   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000154   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000158   0xF9B0 0x2092      LDRSH    R2,[R0, #+146]
   \   0000015C   0xF503 0x4320      ADD      R3,R3,#+40960
   \   00000160   0x801A             STRH     R2,[R3, #+0]
   1552          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   00000162   0x....             LDR.N    R2,??DataTable21_2
   \   00000164   0x8813             LDRH     R3,[R2, #+0]
   \   00000166   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000016A   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000016E   0xF9B0 0x0094      LDRSH    R0,[R0, #+148]
   \   00000172   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   00000176   0xF501 0x4128      ADD      R1,R1,#+43008
   \   0000017A   0xE047             B.N      ??RecordUpdBuf_4
   1553          		
   1554          
   1555          										break;
   1556          								case BUF3_PLAY:
   1557          
   1558          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_2: (+1)
   \   0000017C   0x880B             LDRH     R3,[R1, #+0]
   \   0000017E   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000182   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   00000186   0xF9B0 0xC08A      LDRSH    R12,[R0, #+138]
   \   0000018A   0x....             LDR.N    R1,??DataTable24
   \   0000018C   0xF821 0xC013      STRH     R12,[R1, R3, LSL #+1]
   1559          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   00000190   0x8813             LDRH     R3,[R2, #+0]
   \   00000192   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000196   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   0000019A   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000019E   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   000001A2   0xF8A3 0x2800      STRH     R2,[R3, #+2048]
   1560          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   000001A6   0x....             LDR.N    R2,??DataTable24_26
   \   000001A8   0x8813             LDRH     R3,[R2, #+0]
   \   000001AA   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001AE   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000001B2   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001B6   0xF9B0 0x2090      LDRSH    R2,[R0, #+144]
   \   000001BA   0xF503 0x5380      ADD      R3,R3,#+4096
   \   000001BE   0x801A             STRH     R2,[R3, #+0]
   1561          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \   000001C0   0x....             LDR.N    R2,??DataTable24_27
   \   000001C2   0x8813             LDRH     R3,[R2, #+0]
   \   000001C4   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001C8   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000001CC   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001D0   0xF9B0 0x208E      LDRSH    R2,[R0, #+142]
   \   000001D4   0xF503 0x53C0      ADD      R3,R3,#+6144
   \   000001D8   0x801A             STRH     R2,[R3, #+0]
   1562          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000001DA   0x....             LDR.N    R2,??DataTable24_1
   \   000001DC   0x8813             LDRH     R3,[R2, #+0]
   \   000001DE   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001E2   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000001E6   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001EA   0xF9B0 0x2092      LDRSH    R2,[R0, #+146]
   \   000001EE   0xF503 0x5300      ADD      R3,R3,#+8192
   \   000001F2   0x801A             STRH     R2,[R3, #+0]
   1563          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   \   000001F4   0x....             LDR.N    R2,??DataTable21_2
   \   000001F6   0x8813             LDRH     R3,[R2, #+0]
   \   000001F8   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001FC   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000200   0xF9B0 0x0094      LDRSH    R0,[R0, #+148]
   \   00000204   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   00000208   0xF501 0x5120      ADD      R1,R1,#+10240
   \                     ??RecordUpdBuf_4: (+1)
   \   0000020C   0x8008             STRH     R0,[R1, #+0]
   1564          										break;
   1565          								default:
   1566          										break; 
   1567          					   }
   1568          				
   1569          				}
   1570                               
   1571               	}
   1572          }
   \                     ??RecordUpdBuf_0: (+1)
   \   0000020E   0x4770             BX       LR               ;; return
   1573          
   1574          

   \                                 In section .text, align 2, keep-with-next
   1575          void DMA2_Stream5_IRQHandler(void)
   1576          {
   1577            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1578          
   1579            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1580            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable24_21
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1581            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1582          
   1583            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1584          }
   1585          
   1586          /**
   1587          * @brief This function handles DMA2 stream6 global interrupt.
   1588          */

   \                                 In section .text, align 2, keep-with-next
   1589          void DMA2_Stream6_IRQHandler(void)
   1590          {
   1591            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1592          
   1593            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1594            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable24_28
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1595            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1596          
   1597            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1598          }
   1599          

   \                                 In section .text, align 2, keep-with-next
   1600          void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
   1601          {
   1602          
   1603              if (hspi->Instance==SPI5) //MIC8
   \                     HAL_SPI_RxHalfCpltCallback: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x....             LDR.N    R2,??DataTable24_11  ;; 0x40015000
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0xD108             BNE.N    ??HAL_SPI_RxHalfCpltCallback_0
   1604              {
   1605                 swtSDO7=0x00;
   \   00000008   0x....             LDR.N    R1,??DataTable24_2
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0xF881 0x2130      STRB     R2,[R1, #+304]
   1606                 WaveRecord_flgSDO7Finish = 1;
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0xF881 0x2132      STRB     R2,[R1, #+306]
   1607            	   WaveRecord_flgSDO8Finish = 1;
   \   00000016   0xF881 0x2133      STRB     R2,[R1, #+307]
   1608              
   1609              }
   1610              if (hspi->Instance==SPI6)
   \                     ??HAL_SPI_RxHalfCpltCallback_0: (+1)
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x....             LDR.N    R1,??DataTable24_10  ;; 0x40015400
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xD103             BNE.N    ??HAL_SPI_RxHalfCpltCallback_1
   1611          	{
   1612          		swtSDO8=0x00;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR.N    R1,??DataTable24_2
   \   00000026   0xF881 0x0131      STRB     R0,[R1, #+305]
   1613                  
   1614          
   1615          	}
   1616          
   1617          }
   \                     ??HAL_SPI_RxHalfCpltCallback_1: (+1)
   \   0000002A   0x4770             BX       LR               ;; return
   1618          

   \                                 In section .text, align 2, keep-with-next
   1619          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1620          {
   1621              if(hspi->Instance==SPI1)
   1622              {
   1623                  /* Copy Data to Record Buffer */
   1624          		//RecordUpdBuf();
   1625          		//XferCplt = 1;
   1626                  //Audio_Play_Out();
   1627              }
   1628              else if (hspi->Instance==SPI2)
   1629              {
   1630          
   1631              }
   1632              else if (hspi->Instance==SPI4)
   1633              {
   1634          
   1635              }
   1636          	else
   1637          	{
   1638          
   1639          	}
   1640          
   1641              if (hspi->Instance==SPI5)
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x....             LDR.N    R2,??DataTable24_11  ;; 0x40015000
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0xD107             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1642              {
   1643          		swtSDO7=0x01;
   \   00000008   0x....             LDR.N    R1,??DataTable24_2
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0xF881 0x2130      STRB     R2,[R1, #+304]
   1644          		WaveRecord_flgSDO7Finish = 1;
   \   00000010   0xF881 0x2132      STRB     R2,[R1, #+306]
   1645                 WaveRecord_flgSDO8Finish = 1;
   \   00000014   0xF881 0x2133      STRB     R2,[R1, #+307]
   1646              }
   1647              else
   1648              {
   1649                
   1650              }
   1651              
   1652              if (hspi->Instance==SPI6) //MIC8
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x....             LDR.N    R1,??DataTable24_10  ;; 0x40015400
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD103             BNE.N    ??HAL_SPI_RxCpltCallback_1
   1653              {
   1654          #if 0							
   1655              if (swtSDO8==0x01)
   1656             {
   1657                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1658             }
   1659             else
   1660             {
   1661          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1662             }      
   1663             AudioUSBSend(idxFrmPDMMic8++);
   1664             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   1665             {
   1666                 swtSDO8^=0x01;
   1667                 WaveRecord_flgSDO8Finish = 1;
   1668                 idxFrmPDMMic8 = 0;
   1669          		RESET_IDX
   1670          		XferCplt = 0; // clear DMA interrupt flag
   1671          		switch (buffer_switch)
   1672          		{
   1673          	        case BUF1_PLAY: 		
   1674          	          buffer_switch = BUF3_PLAY;
   1675          	          break;
   1676          	        case BUF2_PLAY: 
   1677          	          buffer_switch = BUF1_PLAY;		
   1678          	          break;
   1679          	        case BUF3_PLAY: 	
   1680          	          buffer_switch = BUF2_PLAY;
   1681          	          break;
   1682          	        default:
   1683          	          break;
   1684          		}
   1685          		/* Last player Frame is finished */
   1686          		AudioPlayerUpd(); 		
   1687          		
   1688          		if (cntStrt<100) cntStrt++;		   
   1689                  
   1690             }
   1691          #else
   1692          
   1693          	//MIC7Rec();
   1694          	//MIC8Rec();   
   1695              swtSDO8 =0x01;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x....             LDR.N    R1,??DataTable24_2
   \   00000024   0xF881 0x0131      STRB     R0,[R1, #+305]
   1696              	
   1697          	
   1698          #endif
   1699          
   1700            }
   1701          }
   \                     ??HAL_SPI_RxCpltCallback_1: (+1)
   \   00000028   0x4770             BX       LR               ;; return
   1702          

   \                                 In section .text, align 4, keep-with-next
   1703          void PDM2PCMSDO78(void)
   1704          {
   1705          static int16_t Mic7LPOld,Mic8LPOld;
                                ^
Warning[Pe177]: variable "Mic7LPOld" was declared but never referenced

  static int16_t Mic7LPOld,Mic8LPOld;
                           ^
"D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",1705  Warning[Pe177]: 
          variable "Mic8LPOld" was declared but never referenced
   1706          uint8_t buffer_switch_tmp;
   1707          
   1708          buffer_switch_tmp = buffer_switch;
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable24_25
   \   00000002   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   1709          
   1710          /*-------------------------------------------------------------------------------------------------------------
   1711          			  
   1712          	Sequence  Record Data					  Processing Data				  Player Data
   1713          			  
   1714          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1715          			  
   1716          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1717          			  
   1718          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1719           ---------------------------------------------------------------------------------------------------------------*/
   1720          	/* Data in Mic8 finished recording */
   1721          
   1722              /* Data in Mic7 finished recording */
   1723              if ((WaveRecord_flgSDO7Finish==1)&&(WaveRecord_flgSDO8Finish==1))
   \   00000006   0x.... 0x....      LDR.W    R8,??DataTable24_2
   \   0000000A   0x7804             LDRB     R4,[R0, #+0]
   \   0000000C   0xF898 0x0132      LDRB     R0,[R8, #+306]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xBF04             ITT      EQ 
   \   00000014   0xF898 0x0133      LDRBEQ   R0,[R8, #+307]
   \   00000018   0x2801             CMPEQ    R0,#+1
   \   0000001A   0xF040 0x8082      BNE.W    ??PDM2PCMSDO78_0
   1724              {
   1725          		
   1726                  WaveRecord_flgSDO7Finish=0;
   \   0000001E   0x2000             MOVS     R0,#+0
   1727                  WaveRecord_flgSDO8Finish=0;
   1728          
   1729          		
   1730                  for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000020   0x.... 0x....      LDR.W    R9,??DataTable24
   \   00000024   0xF888 0x0132      STRB     R0,[R8, #+306]
   \   00000028   0xF05F 0x0600      MOVS.W   R6,#+0
   \   0000002C   0xF888 0x0133      STRB     R0,[R8, #+307]
   \   00000030   0xF509 0x4540      ADD      R5,R9,#+49152
   \   00000034   0xF509 0x3780      ADD      R7,R9,#+65536
   1731                  {
   1732          	        if(swtSDO7==0x00)
   \                     ??PDM2PCMSDO78_1: (+1)
   \   00000038   0xF898 0x0130      LDRB     R0,[R8, #+304]
   \   0000003C   0xB980             CBNZ.N   R0,??PDM2PCMSDO78_2
   1733          	        {
   1734          	            pDataMic7[i%64] = HTONS(TestSDO7[i]);	
   \   0000003E   0x1170             ASRS     R0,R6,#+5
   \   00000040   0x8829             LDRH     R1,[R5, #+0]
   \   00000042   0xEB06 0x6090      ADD      R0,R6,R0, LSR #+26
   \   00000046   0x1180             ASRS     R0,R0,#+6
   \   00000048   0xEBA6 0x1080      SUB      R0,R6,R0, LSL #+6
   \   0000004C   0x460A             MOV      R2,R1
   \   0000004E   0x0209             LSLS     R1,R1,#+8
   \   00000050   0xEB08 0x0040      ADD      R0,R8,R0, LSL #+1
   \   00000054   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   00000058   0xF8A0 0x11C4      STRH     R1,[R0, #+452]
   1735          	            pDataMic8[i%64] = HTONS(TestSDO8[i]);
   \   0000005C   0x8839             LDRH     R1,[R7, #+0]
   \   0000005E   0xE011             B.N      ??PDM2PCMSDO78_3
   1736          	        }
   1737          	        else
   1738          	        {
   1739          	            pDataMic7[i%64] = HTONS(TestSDO7[4*AUDIO_OUT_BUFFER_SIZE + i]);
   \                     ??PDM2PCMSDO78_2: (+1)
   \   00000060   0xF44F 0x5100      MOV      R1,#+8192
   \   00000064   0x1170             ASRS     R0,R6,#+5
   \   00000066   0xEB06 0x6090      ADD      R0,R6,R0, LSR #+26
   \   0000006A   0x5B4A             LDRH     R2,[R1, R5]
   \   0000006C   0x1180             ASRS     R0,R0,#+6
   \   0000006E   0xEBA6 0x1080      SUB      R0,R6,R0, LSL #+6
   \   00000072   0x4613             MOV      R3,R2
   \   00000074   0x0212             LSLS     R2,R2,#+8
   \   00000076   0xEB08 0x0040      ADD      R0,R8,R0, LSL #+1
   \   0000007A   0xEA42 0x2213      ORR      R2,R2,R3, LSR #+8
   \   0000007E   0xF8A0 0x21C4      STRH     R2,[R0, #+452]
   1740          	            pDataMic8[i%64] = HTONS(TestSDO8[4*AUDIO_OUT_BUFFER_SIZE + i]);
   \   00000082   0x5BC9             LDRH     R1,[R1, R7]
   \                     ??PDM2PCMSDO78_3: (+1)
   \   00000084   0x460A             MOV      R2,R1
   \   00000086   0x0209             LSLS     R1,R1,#+8
   \   00000088   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   0000008C   0xF8A0 0x1144      STRH     R1,[R0, #+324]
   1741          	        }
   1742          
   1743          	        /* PDM conversion for frame of 64 inputs, 16 outputs */
   1744          	        if (i%64==63)
   \   00000090   0x1170             ASRS     R0,R6,#+5
   \   00000092   0xEB06 0x6090      ADD      R0,R6,R0, LSR #+26
   \   00000096   0x1180             ASRS     R0,R0,#+6
   \   00000098   0xEBA6 0x1180      SUB      R1,R6,R0, LSL #+6
   \   0000009C   0x293F             CMP      R1,#+63
   \   0000009E   0xD13A             BNE.N    ??PDM2PCMSDO78_4
   1745          	        {
   1746          				/* Put them in processing phase */
   1747          	          /* Recording Audio Data */						 
   1748          	          switch (buffer_switch_tmp)
   \   000000A0   0xB11C             CBZ.N    R4,??PDM2PCMSDO78_5
   \   000000A2   0x2C02             CMP      R4,#+2
   \   000000A4   0xD023             BEQ.N    ??PDM2PCMSDO78_6
   \   000000A6   0xD311             BCC.N    ??PDM2PCMSDO78_7
   \   000000A8   0xE035             B.N      ??PDM2PCMSDO78_4
   1749          	          {
   1750          			              case BUF1_PLAY:								
   1751                                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 24 ,
   1752                                        (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_5: (+1)
   \   000000AA   0xEB09 0x1A40      ADD      R10,R9,R0, LSL #+5
   \   000000AE   0xF108 0x03C8      ADD      R3,R8,#+200
   \   000000B2   0x2218             MOVS     R2,#+24
   \   000000B4   0xF508 0x70E2      ADD      R0,R8,#+452
   \   000000B8   0xF50A 0x4130      ADD      R1,R10,#+45056
   \   000000BC   0x.... 0x....      BL       PDM_Filter_64_LSB
   1753                                        PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 24 ,
   1754                                        (PDMFilter_InitStruct *)&Filter[1]);				  
   \   000000C0   0xF108 0x03FC      ADD      R3,R8,#+252
   \   000000C4   0x2218             MOVS     R2,#+24
   \   000000C6   0xF50A 0x4138      ADD      R1,R10,#+47104
   \   000000CA   0xE020             B.N      ??PDM2PCMSDO78_8
   1755                                         break;	               
   1756                                    case BUF2_PLAY:
   1757                                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 24 ,
   1758                                        (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_7: (+1)
   \   000000CC   0xEB09 0x1A40      ADD      R10,R9,R0, LSL #+5
   \   000000D0   0xF108 0x03C8      ADD      R3,R8,#+200
   \   000000D4   0x2218             MOVS     R2,#+24
   \   000000D6   0xF508 0x70E2      ADD      R0,R8,#+452
   \   000000DA   0xF50A 0x5140      ADD      R1,R10,#+12288
   \   000000DE   0x.... 0x....      BL       PDM_Filter_64_LSB
   1759                                        PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 24 ,
   1760                                        (PDMFilter_InitStruct *)&Filter[1]);	
   \   000000E2   0xF108 0x03FC      ADD      R3,R8,#+252
   \   000000E6   0x2218             MOVS     R2,#+24
   \   000000E8   0xF50A 0x5160      ADD      R1,R10,#+14336
   \   000000EC   0xE00F             B.N      ??PDM2PCMSDO78_8
   1761                                        break;
   1762                                    case BUF3_PLAY:
   1763                                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 24 ,
   1764                                        (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_6: (+1)
   \   000000EE   0xEB09 0x1A40      ADD      R10,R9,R0, LSL #+5
   \   000000F2   0xF108 0x03C8      ADD      R3,R8,#+200
   \   000000F6   0x2218             MOVS     R2,#+24
   \   000000F8   0xF508 0x70E2      ADD      R0,R8,#+452
   \   000000FC   0xF50A 0x41E0      ADD      R1,R10,#+28672
   \   00000100   0x.... 0x....      BL       PDM_Filter_64_LSB
   1765                                        PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 24 ,
   1766                                        (PDMFilter_InitStruct *)&Filter[1]);					
   \   00000104   0xF108 0x03FC      ADD      R3,R8,#+252
   \   00000108   0x2218             MOVS     R2,#+24
   \   0000010A   0xF50A 0x41F0      ADD      R1,R10,#+30720
   \                     ??PDM2PCMSDO78_8: (+1)
   \   0000010E   0xF508 0x70A2      ADD      R0,R8,#+324
   \   00000112   0x.... 0x....      BL       PDM_Filter_64_LSB
   1767                                        break;
   1768                                    default:
   1769                                        break; 
   1770          	          }
   1771          	        }
   1772          
   1773          // 			if (i%4==0) Buffer2.bufMIC8[i/4] = (i/4)*10;
   1774          	     }
   \                     ??PDM2PCMSDO78_4: (+1)
   \   00000116   0x1C76             ADDS     R6,R6,#+1
   \   00000118   0x1CBF             ADDS     R7,R7,#+2
   \   0000011A   0x1CAD             ADDS     R5,R5,#+2
   \   0000011C   0xF5B6 0x5F80      CMP      R6,#+4096
   \   00000120   0xDB8A             BLT.N    ??PDM2PCMSDO78_1
   1775          //		switch (buffer_switch)
   1776          //		{
   1777          //			case BUF1_PLAY: 				
   1778          //				Buffer3.bufMIC7[0]=Buffer3.bufMIC7[2];
   1779          //				Buffer3.bufMIC8[0]=Buffer3.bufMIC8[2];
   1780          //				Buffer3.bufMIC7[1]=Buffer3.bufMIC7[2];
   1781          //				Buffer3.bufMIC8[1]=Buffer3.bufMIC8[2];				
   1782          //			    break;
   1783          //			case BUF2_PLAY:
   1784          //
   1785          //				Buffer1.bufMIC7[0]=Buffer1.bufMIC7[2];
   1786          //				Buffer1.bufMIC8[0]=Buffer1.bufMIC8[2];
   1787          //				Buffer1.bufMIC7[1]=Buffer1.bufMIC7[2];
   1788          //				Buffer1.bufMIC8[1]=Buffer1.bufMIC8[2];				
   1789          //				break;
   1790          //			case BUF3_PLAY:
   1791          //				
   1792          //				Buffer2.bufMIC7[0]=Buffer2.bufMIC7[2];
   1793          //				Buffer2.bufMIC8[0]=Buffer2.bufMIC8[2];				
   1794          //				Buffer2.bufMIC7[1]=Buffer2.bufMIC7[2];
   1795          //				Buffer2.bufMIC8[1]=Buffer2.bufMIC8[2];				
   1796          //			    break;
   1797          //			default:
   1798          //			break; 
   1799          //		}	
   1800          #if 0		
   1801                  /* LowPass Filter 
   1802                        dT = 1/16000
   1803                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1804          		*/						 
   1805          		switch (buffer_switch)
   1806          		{
   1807          			case BUF1_PLAY: 
   1808          				LowPassIIR(Buffer2.bufMIC7 ,Buffer2.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1809          				LowPassIIR(Buffer2.bufMIC8 ,Buffer2.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1810          			    break;
   1811          			case BUF2_PLAY:
   1812          				LowPassIIR(Buffer3.bufMIC7 ,Buffer3.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1813          				LowPassIIR(Buffer3.bufMIC8 ,Buffer3.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1814          			    break;
   1815          			case BUF3_PLAY:
   1816          			    LowPassIIR(Buffer1.bufMIC7 ,Buffer1.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);	
   1817          				LowPassIIR(Buffer1.bufMIC8 ,Buffer1.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1818          			    break;
   1819          			default:
   1820          			break; 
   1821          		}	
   1822          #endif		
   1823             }//if (WaveRecord_flgSDO8Finish==1)
   1824          }
   \                     ??PDM2PCMSDO78_0: (+1)
   \   00000122   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1825          

   \                                 In section .text, align 2, keep-with-next
   1826          void MIC7Rec (void)
   1827          {
   1828          	swtSDO7=0x01;
   \                     MIC7Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable24_2
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF880 0x1130      STRB     R1,[R0, #+304]
   1829          	WaveRecord_flgSDO7Finish = 1;
   \   00000008   0xF880 0x1132      STRB     R1,[R0, #+306]
   1830          	//HAL_SPI_DMAStop(&hspi5);
   1831          //	if (swtSDO7==0x01)
   1832          //	{
   1833          //          HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   1834          //	}
   1835          //	else
   1836          //	{
   1837          //          HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   1838          //	} 
   1839          
   1840          }
   \   0000000C   0x4770             BX       LR               ;; return
   1841          

   \                                 In section .text, align 2, keep-with-next
   1842          void MIC8Rec (void)
   1843          {
   1844               swtSDO8^=0x01;
   \                     MIC8Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable24_2
   \   00000002   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   00000006   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000A   0xF880 0x1131      STRB     R1,[R0, #+305]
   1845              WaveRecord_flgSDO8Finish = 1;
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0xF880 0x1133      STRB     R1,[R0, #+307]
   1846          	//HAL_SPI_DMAStop(&hspi6);
   1847          //    if (swtSDO8==0x01)
   1848          //    {
   1849          //        HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   1850          //    }
   1851          //    else
   1852          //    {
   1853          //        HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   1854          //
   1855          //    }
   1856          
   1857          }
   \   00000014   0x4770             BX       LR               ;; return
   1858          

   \                                 In section .text, align 2, keep-with-next
   1859          uint8_t CheckEnergyEqual(int16_t * Channel_Ref, int16_t * Channel, int16_t len)
   1860          {
   1861              int64_t Energy_Ref=0;
   1862              int64_t Energy = 0;
   1863              float facEnergy;
   1864              for (int16_t i=0;i++;i<len)
                                          ^
Warning[Pe174]: expression has no effect

                 vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                 ^
"D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",663  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

                 vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                 ^
"D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",735  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

  		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
  		^
"D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",856  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

  		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
  		^
"D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",861  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

                PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                ^
"D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",898  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

                PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                ^
"D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",903  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement
   1865              {
   1866                  Energy_Ref += Channel_Ref[i]*Channel_Ref[i];
   1867                  Energy += Channel[i]*Channel[i];
   1868              }
   1869              
   1870              facEnergy = Energy_Ref/MAX(Energy,0.001);
   1871              
   1872              if ((facEnergy>1.1)||(facEnergy<0.9))
   1873              {
   1874                   return 1; 
   \                     CheckEnergyEqual: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1875              }
   1876              
   1877              return 0;
   1878            
   1879          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \   00000000   0x4001300C         DC32     0x4001300c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x4001340C         DC32     0x4001340c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \   00000000   0x4001540C         DC32     0x4001540c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_6:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_7:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_8:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_9:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_10:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_11:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_12:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_13:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_14:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_15:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_16:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_17:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_18:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_19:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_20:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_21:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_22:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_23:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_24:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_25:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_26:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_27:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_28:
   \   00000000   0x........         DC32     hdma_spi5_rx+0x58
   1880          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CheckEnergyEqual
       0   DMA2_Stream5_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream6_IRQHandler
         0   -> HAL_DMA_IRQHandler
      40   HAL_SPI_MspInit
        40   -> HAL_DMA_DeInit
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
       0   HAL_SPI_RxCpltCallback
       0   HAL_SPI_RxHalfCpltCallback
       0   I2S1_Enable
       0   I2S2_Enable
      16   MIC1TO8_Init
        16   -> HAL_I2S_Init
        16   -> SPI4_Init
        16   -> SPI5_Init
         0   -> SPI6_Init
       0   MIC7Rec
       0   MIC8Rec
       0   Mic7Rec
         0   -> SPI5_Init
       0   Mic8Rec
         0   -> HAL_SPI_Init
      32   PDM2PCMSDO78
        32   -> PDM_Filter_64_LSB
       0   RecordUpdBuf
       8   SPI1_IRQHandler
         8   -> SubFrameFinished
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
      16   SPI2_IRQHandler
        16   -> HAL_GPIO_ReadPin
        16   -> SubFrameFinished
       0   SPI4_Enable
      16   SPI4_IRQHandler
        16   -> HAL_GPIO_ReadPin
        16   -> SubFrameFinished
       0   SPI4_Init
         0   -> HAL_SPI_Init
       8   SPI5_IRQHandler
         8   -> PDM_Filter_64_LSB
      32   SPI5_Init
         0   -> HAL_SPI_Init
        32   -> PDM_Filter_Init
       8   SPI6_IRQHandler
         8   -> PDM_Filter_64_LSB
       0   SPI6_Init
         0   -> HAL_SPI_Init
      16   StartRecMic7_8
        16   -> HAL_SPI_Receive_DMA
       0   mySPI_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_2
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_10
       4  ??DataTable24_11
       4  ??DataTable24_12
       4  ??DataTable24_13
       4  ??DataTable24_14
       4  ??DataTable24_15
       4  ??DataTable24_16
       4  ??DataTable24_17
       4  ??DataTable24_18
       4  ??DataTable24_19
       4  ??DataTable24_2
       4  ??DataTable24_20
       4  ??DataTable24_21
       4  ??DataTable24_22
       4  ??DataTable24_23
       4  ??DataTable24_24
       4  ??DataTable24_25
       4  ??DataTable24_26
       4  ??DataTable24_27
       4  ??DataTable24_28
       4  ??DataTable24_3
       4  ??DataTable24_4
       4  ??DataTable24_5
       4  ??DataTable24_6
       4  ??DataTable24_7
       4  ??DataTable24_8
       4  ??DataTable24_9
   81920  Buffer1
          Buffer2
          Buffer3
          TestSDO7
          TestSDO8
       4  CheckEnergyEqual
       6  DMA2_Stream5_IRQHandler
       6  DMA2_Stream6_IRQHandler
    1180  HAL_SPI_MspInit
      42  HAL_SPI_RxCpltCallback
      44  HAL_SPI_RxHalfCpltCallback
      24  I2S1_Enable
       2  I2S1_stNipple
       1  I2S1_stPosShft
      24  I2S2_Enable
       2  I2S2_stNipple
       1  I2S2_stPosShft
      92  MIC1TO8_Init
      14  MIC7Rec
      22  MIC8Rec
       2  Mic7Rec
      76  Mic8Rec
     294  PDM2PCMSDO78
     528  RecordUpdBuf
     482  SPI1_IRQHandler
     220  SPI1_Ini
       2  SPI1_stNipple
     452  SPI2_IRQHandler
      24  SPI4_Enable
     488  SPI4_IRQHandler
      62  SPI4_Init
     130  SPI5_IRQHandler
     138  SPI5_Init
     124  SPI6_IRQHandler
      76  SPI6_Init
      56  StartRecMic7_8
    8192  TestSDO12
    8192  TestSDO34
    8192  TestSDO56
    8192  TestSDO7_1
    8192  TestSDO8_1
       1  WaveRecord_flgIni
       2  cntStrt
       2  cntTransFinish
      88  hdma_spi2_tx
      88  hdma_spi3_tx
     176  hdma_spi5_rx
          hdma_spi6_rx
     152  hi2s1
          hi2s2
          flgRacing
          WaveRecord_flgInt
          SPI4_stPosShft
          I2S2_stLR
          I2S2_stLROld
          stLROld
          Main_stLR
          Main_stLROld
          WaveRec_idxTest
          vRawSens1
          vRawSens2
          vRawSens4
          vRawSens3
          vRawSens5
          vRawSens6
          SPI4_stNipple
     100  hspi1
     100  hspi2
     580  hspi5
          hspi6
          Filter
          swtSDO7
          swtSDO8
          WaveRecord_flgSDO7Finish
          WaveRecord_flgSDO8Finish
          idxMic8
          idxMic7
          cntPos
          cntPos7
          bufPCMSens7
          bufPCMSens8
          pDataMic8
          pDataMic7
       2  iSDO12
       2  iSDO34
       2  iSDO56
       2  idxFrmPDMMic8
      44  mySPI_SendData
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins

 
 124 461 bytes in section .bss
   4 838 bytes in section .text
 
   4 838 bytes of CODE memory
 124 461 bytes of DATA memory

Errors: none
Warnings: 10
