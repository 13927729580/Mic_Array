###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/Apr/2016  18:05:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          
      8          
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "waverecorder.h" 
     11          #include "string.h"
     12          //#include "stm32f7xx_hal_spi.h"
     13          #include "stm32f7xx_hal.h"
     14          #include "pdm_filter.h"
     15          #include "DSP.h"
     16          
     17          
     18          /* Private typedef -----------------------------------------------------------*/
     19          /* Private define ------------------------------------------------------------*/
     20          
     21          
     22          /* SPI Configuration defines */
     23          #define SPI_SCK_PIN                       GPIO_PIN_10
     24          #define SPI_SCK_GPIO_PORT                 GPIOB
     25          #define SPI_SCK_GPIO_CLK                  1
     26          #define SPI_SCK_SOURCE                    1
     27          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     28          
     29          #define SPI_MOSI_PIN                      GPIO_PIN_3
     30          #define SPI_MOSI_GPIO_PORT                GPIOC
     31          #define SPI_MOSI_GPIO_CLK                 1
     32          #define SPI_MOSI_SOURCE                   1
     33          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     34          
     35          
     36          /* sop1hc */
     37          #define SPI1_SCK_PIN                       GPIO_PIN_5
     38          #define SPI1_SCK_GPIO_PORT                 GPIOA
     39          #define SPI1_SCK_GPIO_CLK                  1
     40          #define SPI1_SCK_SOURCE                    1
     41          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     42          
     43          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     44          #define SPI1_MOSI_GPIO_PORT                GPIOA
     45          #define SPI1_MOSI_GPIO_CLK                 1
     46          #define SPI1_MOSI_SOURCE                   1
     47          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     48          
     49          #define SPI1_MISO_PIN                      GPIO_PIN_6
     50          #define SPI1_MISO_GPIO_PORT                GPIOA
     51          #define SPI1_MISO_GPIO_CLK                 1
     52          #define SPI1_MISO_SOURCE                   1
     53          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     54          
     55          
     56          
     57          

   \                                 In section .bss, align 4
     58          uint16_t idxMic8=0;
     59          uint16_t idxMic7=0;
     60          uint8_t pHeaderBuff[44];
     61          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
     62          uint16_t volatile cntTransFinish;
     63          
     64          /* Private macro -------------------------------------------------------------*/
     65          /* Private variables ---------------------------------------------------------*/
     66          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     67          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     68          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     69          extern WAVE_FormatTypeDef WaveFormat;
     70          extern FIL WavFile;
     71          extern AUDIO_DEMO_StateMachine AudioDemo;
     72          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     73          extern __IO uint8_t buffer_switch;
     74          extern __IO uint8_t volume;
     75          extern SPI_HandleTypeDef hspi4,hspi1;
     76          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     77          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     78          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     79          extern __IO uint16_t  I2S2_idxTmp;
     80          extern SPI_HandleTypeDef     hspi4;
     81          extern DMA_HandleTypeDef     DmaHandle;
     82          
     83          #ifndef CS43L22_PLAY
     84          extern __IO uint8_t flgDlyUpd; 
     85          extern __IO uint32_t XferCplt;
     86          extern __IO uint16_t  idxSPI5DataBuf3;
     87          #endif
     88          
     89          int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
     90          int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
     91          int16_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
     92          uint16_t TestSDO7[4*AUDIO_OUT_BUFFER_SIZE];
     93          uint16_t TestSDO8[4*AUDIO_OUT_BUFFER_SIZE];
     94          uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
     95          uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
     96          __IO uint16_t  WaveRec_idxTest;
     97          __IO uint8_t flgRacing;
     98          
     99          
    100          SPI_HandleTypeDef hspi1,hspi2;
    101          SPI_HandleTypeDef spi1_ins,spi2_ins;
    102          I2S_HandleTypeDef hi2s1;
    103          I2S_HandleTypeDef hi2s2;
    104          SPI_HandleTypeDef hspi5,hspi6;
   \                     hspi5:
   \   00000000                      DS8 100
   \                     hspi6:
   \   00000064                      DS8 100
    105          DMA_HandleTypeDef hdma_spi2_tx;
    106          DMA_HandleTypeDef hdma_spi3_tx;
    107          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
    108          
    109          #if USB_STREAMING
    110          __IO uint16_t idxFrmPDMMic8;
    111          #endif
    112          
    113          uint16_t *bufPCMSens7;
    114          uint16_t *bufPCMSens8;
    115          __IO uint16_t cntPos;
    116          __IO uint16_t cntPos7;
    117          __IO static uint16_t iBuff;
    118          __IO static uint32_t uwVolume = 70;
    119          __IO PDMFilter_InitStruct Filter[2];
   \                     Filter:
   \   000000C8                      DS8 104
    120          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
    121          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
    122          __IO int16_t   pPDM2PCM[16];
    123          __IO uint16_t cntStrt;
    124          __IO uint8_t WaveRecord_flgInt;
    125          uint8_t WaveRecord_flgIni;
    126          
    127          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
    128          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
    129          __IO uint16_t iSDO12,iSDO34,iSDO56;
    130          __IO uint8_t swtSDO7,swtSDO8;
   \                     swtSDO7:
   \   00000130                      DS8 1
   \                     swtSDO8:
   \   00000131                      DS8 1
    131          __IO uint8_t WaveRecord_flgSDO7Finish, WaveRecord_flgSDO8Finish;
   \                     WaveRecord_flgSDO7Finish:
   \   00000132                      DS8 1
   \                     WaveRecord_flgSDO8Finish:
   \   00000133                      DS8 1
   \                     idxMic8:
   \   00000134                      DS8 2
   \                     idxMic7:
   \   00000136                      DS8 2
   \                     cntPos:
   \   00000138                      DS8 2
   \                     cntPos7:
   \   0000013A                      DS8 2
   \                     bufPCMSens7:
   \   0000013C                      DS8 4
   \                     bufPCMSens8:
   \   00000140                      DS8 4
   \                     pDataMic8:
   \   00000144                      DS8 128
   \                     pDataMic7:
   \   000001C4                      DS8 128

   \                                 In section .bss, align 4
   \                     pHeaderBuff:
   \   00000000                      DS8 44

   \                                 In section .bss, align 2
   \                     cntTransFinish:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     TestSDO12:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO34:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO56:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8_1:
   \   00000000                      DS8 8192
    132          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
    133          __IO uint8_t I2S2_stLR, I2S2_stLROld;
    134          
    135          /* Private function prototypes -----------------------------------------------*/
    136          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    137          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    138          static void I2S1_Init(void);
    139          static void I2S2_Init(void);
    140          
    141          #if EXT_RAM
    142          #pragma location=SDRAM_BANK_ADDR
    143          #endif
    144          Mic_Array_Data Buffer1;
    145          #if EXT_RAM
    146          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)
    147          #endif
    148          Mic_Array_Data Buffer2;
    149          #if EXT_RAM
    150          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)
    151          #endif
    152          Mic_Array_Data Buffer3;
    153          

   \                                 In section .text, align 2, keep-with-next
    154          void SPI1_Ini(void)
    155          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    156            GPIO_InitTypeDef GPIO_InitStructure;
    157          
    158           
    159             	 
    160            /* Enable SCK, MOSI and MISO GPIO clocks */
    161            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40023830
    162            __HAL_RCC_GPIOA_CLK_ENABLE();
    163          
    164            
    165            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    166            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    167            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    168          
    169            /* SPI SCK pin configuration */
    170            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    171            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    172            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable13_1  ;; 0x40020000
   \   00000010   0x6941             LDR      R1,[R0, #+20]
   \   00000012   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000016   0x6141             STR      R1,[R0, #+20]
   \   00000018   0x6941             LDR      R1,[R0, #+20]
   \   0000001A   0xF401 0x5180      AND      R1,R1,#0x1000
   \   0000001E   0x9100             STR      R1,[SP, #+0]
   \   00000020   0x9900             LDR      R1,[SP, #+0]
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x9100             STR      R1,[SP, #+0]
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000002C   0x6001             STR      R1,[R0, #+0]
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xA901             ADD      R1,SP,#+4
   \   00000032   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0x9002             STR      R0,[SP, #+8]
   \   0000003E   0x9003             STR      R0,[SP, #+12]
   \   00000040   0x2003             MOVS     R0,#+3
   \   00000042   0x9004             STR      R0,[SP, #+16]
   \   00000044   0x2005             MOVS     R0,#+5
   \   00000046   0x9005             STR      R0,[SP, #+20]
   \   00000048   0x2020             MOVS     R0,#+32
   \   0000004A   0x9001             STR      R0,[SP, #+4]
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       HAL_GPIO_Init
    173          
    174            /* SPI  MOSI pin configuration */
    175            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   00000052   0x2001             MOVS     R0,#+1
    176            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    177            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   00000054   0xA901             ADD      R1,SP,#+4
   \   00000056   0x9005             STR      R0,[SP, #+20]
   \   00000058   0x2080             MOVS     R0,#+128
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x4620             MOV      R0,R4
   \   0000005E   0x.... 0x....      BL       HAL_GPIO_Init
    178          
    179            /* SPI MISO pin configuration */
    180            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   00000062   0x2001             MOVS     R0,#+1
    181            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    182            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   00000064   0xA901             ADD      R1,SP,#+4
   \   00000066   0x9005             STR      R0,[SP, #+20]
   \   00000068   0x2040             MOVS     R0,#+64
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       HAL_GPIO_Init
    183          
    184            /* SPI configuration -------------------------------------------------------*/
    185            //SPI_I2S_DeInit(SPI1);
    186            
    187            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   00000076   0xF44F 0x6180      MOV      R1,#+1024
   \   0000007A   0x6081             STR      R1,[R0, #+8]
    188            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000007C   0xF44F 0x6170      MOV      R1,#+3840
   \   00000080   0x60C1             STR      R1,[R0, #+12]
    189            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x6101             STR      R1,[R0, #+16]
    190            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    191            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    192            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    193            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    194            spi1_ins.Init.CRCPolynomial = 7;
    195            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   00000086   0x.... 0x....      LDR.W    R4,??DataTable17  ;; 0x40021000
   \   0000008A   0x6141             STR      R1,[R0, #+20]
   \   0000008C   0xF44F 0x7100      MOV      R1,#+512
   \   00000090   0x6181             STR      R1,[R0, #+24]
   \   00000092   0x2128             MOVS     R1,#+40
   \   00000094   0x61C1             STR      R1,[R0, #+28]
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x6201             STR      R1,[R0, #+32]
   \   0000009A   0x2107             MOVS     R1,#+7
   \   0000009C   0x62C1             STR      R1,[R0, #+44]
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0x6041             STR      R1,[R0, #+4]
    196            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   000000A2   0x.... 0x....      BL       HAL_SPI_Init
    197            {
    198              /* Initialization Error */
    199              //Error_Handler();
    200            }
    201            
    202           
    203            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   000000A6   0x2008             MOVS     R0,#+8
    204            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    205            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    206            GPIO_InitStructure.Pull = GPIO_PULLUP;
    207            //GPIO_InitStructure.Alternate 
    208            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000A8   0xA901             ADD      R1,SP,#+4
   \   000000AA   0x9001             STR      R0,[SP, #+4]
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x9002             STR      R0,[SP, #+8]
   \   000000B0   0x2002             MOVS     R0,#+2
   \   000000B2   0x9004             STR      R0,[SP, #+16]
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0x9003             STR      R0,[SP, #+12]
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x.... 0x....      BL       HAL_GPIO_Init
    209          
    210            /* Deselect : Chip Select high */
    211            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000BE   0x2201             MOVS     R2,#+1
   \   000000C0   0x2108             MOVS     R1,#+8
   \   000000C2   0x4620             MOV      R0,R4
   \   000000C4   0x.... 0x....      BL       HAL_GPIO_WritePin
    212             /* sop1hc */
    213            /* Configure the SPI interrupt priority */
    214            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000C8   0x2200             MOVS     R2,#+0
   \   000000CA   0x2100             MOVS     R1,#+0
   \   000000CC   0x2023             MOVS     R0,#+35
   \   000000CE   0x.... 0x....      BL       HAL_NVIC_SetPriority
    215          
    216            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000D2   0x2023             MOVS     R0,#+35
   \   000000D4   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    217            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    218            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    219          
    220            /* Enable SPI1  */
    221            //__HAL_SPI_ENABLE(SPI1);
    222          
    223          }
   \   000000D8   0xB006             ADD      SP,SP,#+24
   \   000000DA   0xBD10             POP      {R4,PC}          ;; return
    224          

   \                                 In section .text, align 2, keep-with-next
    225          void mySPI_SendData(uint8_t adress, uint8_t data)
    226          {
   \                     mySPI_SendData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   00000004   0x6812             LDR      R2,[R2, #+0]
    227           
    228          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x6893             LDR      R3,[R2, #+8]
   \   00000008   0x079B             LSLS     R3,R3,#+30
   \   0000000A   0xD5FC             BPL.N    ??mySPI_SendData_0
    229          SPI_I2S_SendData(SPI1, adress);
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable13_3  ;; 0x4001300c
   \   00000010   0x6018             STR      R0,[R3, #+0]
    230          
    231          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   00000012   0x6890             LDR      R0,[R2, #+8]
   \   00000014   0x07C0             LSLS     R0,R0,#+31
   \   00000016   0xD5FC             BPL.N    ??mySPI_SendData_1
    232          SPI_I2S_ReceiveData(SPI1);
   \   00000018   0x6818             LDR      R0,[R3, #+0]
    233          
    234          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   0000001A   0x6890             LDR      R0,[R2, #+8]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD4FC             BMI.N    ??mySPI_SendData_2
    235          SPI_I2S_SendData(SPI1, data);
   \   00000020   0x6019             STR      R1,[R3, #+0]
    236          
    237          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000022   0x6890             LDR      R0,[R2, #+8]
   \   00000024   0x07C0             LSLS     R0,R0,#+31
   \   00000026   0xD4FC             BMI.N    ??mySPI_SendData_3
    238          SPI_I2S_ReceiveData(SPI1);
   \   00000028   0x6818             LDR      R0,[R3, #+0]
    239           
    240          }
   \   0000002A   0x4770             BX       LR               ;; return
    241          
    242          /**
    243            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    244            * @param  None
    245            * @retval None
    246          */
    247          

   \                                 In section .text, align 2, keep-with-next
    248          	void SPI1_IRQHandler(void)
    249          {  
    250                int16_t tmpTest;
    251          	  static uint8_t stLR,stLROld;
                 	                 ^
Warning[Pe177]: variable "stLR" was declared but never referenced
    252          	
    253          	  /* SPI in mode Receiver ----------------------------------------------------*/
    254          	  if(
    255          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    256          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    257          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable13_4
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x6849             LDR      R1,[R1, #+4]
   \   00000008   0x0649             LSLS     R1,R1,#+25
   \   0000000A   0xD57C             BPL.N    ??SPI1_IRQHandler_0
    258          	  {
    259          	
    260          
    261          	   tmpTest =  (int16_t)SPI_I2S_ReceiveData(SPI1);
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable13_3  ;; 0x4001300c
   \   00000010   0x6809             LDR      R1,[R1, #+0]
    262          	
    263          	   /* Left-Right Mic data */
    264          	   //stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    265          	
    266          		if (I2S2_stLR==GPIO_PIN_SET)
   \   00000012   0xF890 0x2084      LDRB     R2,[R0, #+132]
   \   00000016   0xF890 0x3082      LDRB     R3,[R0, #+130]
   \   0000001A   0xB209             SXTH     R1,R1
   \   0000001C   0x2B01             CMP      R3,#+1
   \   0000001E   0xD137             BNE.N    ??SPI1_IRQHandler_1
    267          		{
    268          		       if(stLROld==GPIO_PIN_SET) 
   \   00000020   0x2A01             CMP      R2,#+1
   \   00000022   0xD170             BNE.N    ??SPI1_IRQHandler_0
    269          		       {
    270          				   vRawSens1 = (tmpTest);
   \   00000024   0xF8A0 0x1088      STRH     R1,[R0, #+136]
    271          			       WaveRec_idxTest++;
   \   00000028   0xF8B0 0x1086      LDRH     R1,[R0, #+134]
   \   0000002C   0x1C49             ADDS     R1,R1,#+1
   \   0000002E   0xF8A0 0x1086      STRH     R1,[R0, #+134]
    272          				   /* Recording Audio Data */						 
    273          					if (WaveRec_idxSens1<AUDIO_OUT_BUFFER_SIZE) 
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable13_5
   \   00000036   0x880A             LDRH     R2,[R1, #+0]
   \   00000038   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000003C   0xDA60             BGE.N    ??SPI1_IRQHandler_2
    274          					{
    275          					   switch (buffer_switch)
   \   0000003E   0x.... 0x....      LDR.W    R2,??DataTable13_6
   \   00000042   0x7812             LDRB     R2,[R2, #+0]
   \   00000044   0xB11A             CBZ.N    R2,??SPI1_IRQHandler_3
   \   00000046   0x2A02             CMP      R2,#+2
   \   00000048   0xD019             BEQ.N    ??SPI1_IRQHandler_4
   \   0000004A   0xD30C             BCC.N    ??SPI1_IRQHandler_5
   \   0000004C   0xE058             B.N      ??SPI1_IRQHandler_2
    276          					   {
    277                                                        case BUF1_PLAY:
    278                                                            Buffer2.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;								
   \                     ??SPI1_IRQHandler_3: (+1)
   \   0000004E   0xF9B0 0x2088      LDRSH    R2,[R0, #+136]
   \   00000052   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   00000056   0x.... 0x....      LDR.W    R3,??DataTable17_1
   \   0000005A   0xEB03 0x034C      ADD      R3,R3,R12, LSL #+1
   \   0000005E   0xF503 0x4380      ADD      R3,R3,#+16384
   \   00000062   0x801A             STRH     R2,[R3, #+0]
    279                                                            break;
    280                                                        case BUF2_PLAY:
    281                                                            Buffer3.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;
    282                                                            break;
   \   00000064   0xE04C             B.N      ??SPI1_IRQHandler_2
   \                     ??SPI1_IRQHandler_5: (+1)
   \   00000066   0xF9B0 0x2088      LDRSH    R2,[R0, #+136]
   \   0000006A   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   0000006E   0x.... 0x....      LDR.W    R3,??DataTable17_1
   \   00000072   0xEB03 0x034C      ADD      R3,R3,R12, LSL #+1
   \   00000076   0xF503 0x4300      ADD      R3,R3,#+32768
   \   0000007A   0x801A             STRH     R2,[R3, #+0]
   \   0000007C   0xE040             B.N      ??SPI1_IRQHandler_2
    283                                                        case BUF3_PLAY:
    284                                                            Buffer1.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;									
   \                     ??SPI1_IRQHandler_4: (+1)
   \   0000007E   0xF9B0 0x2088      LDRSH    R2,[R0, #+136]
   \   00000082   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   00000086   0x.... 0x....      LDR.W    R3,??DataTable17_1
   \   0000008A   0xF823 0x201C      STRH     R2,[R3, R12, LSL #+1]
    285                                                            break;
    286                                                        default:
    287                                                            break; 
    288          					   
    289          					   }
    290          					  
    291          					}
    292          //					else
    293          //					{
    294          //						switch (buffer_switch)
    295          //						{
    296          //						    case BUF1_PLAY:
    297          //						                    Buffer1.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;//vRawSens1;									
    298          //						                    break;
    299          //						    case BUF2_PLAY:
    300          //						                    Buffer2.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;//vRawSens1;	
    301          //						                    break;
    302          //						    case BUF3_PLAY:
    303          //						                    Buffer3.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;//vRawSens1;										
    304          //						                    break;
    305          //						    default:
    306          //						                    break; 
    307          //						}
    308          //					}
    309          
    310          					 WaveRec_idxSens1++;
   \   0000008E   0xE037             B.N      ??SPI1_IRQHandler_2
    311          
    312          //			      if ((WaveRec_idxSens1 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x01;
    313          //
    314          //			       if (flgRacing==0x3F)  SubFrameFinished();                    
    315          		       	}
    316          		}
    317          		else
    318          		{		
    319                    if ((stLROld==GPIO_PIN_RESET))  
   \                     ??SPI1_IRQHandler_1: (+1)
   \   00000090   0xBBCA             CBNZ.N   R2,??SPI1_IRQHandler_0
    320                    {
    321          				vRawSens2 = (tmpTest);
   \   00000092   0xF8A0 0x108A      STRH     R1,[R0, #+138]
    322          				WaveRec_idxTest++;
   \   00000096   0xF8B0 0x1086      LDRH     R1,[R0, #+134]
   \   0000009A   0x1C49             ADDS     R1,R1,#+1
   \   0000009C   0xF8A0 0x1086      STRH     R1,[R0, #+134]
    323          				if (WaveRec_idxSens2<AUDIO_OUT_BUFFER_SIZE)
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable15
   \   000000A4   0x880A             LDRH     R2,[R1, #+0]
   \   000000A6   0xF5B2 0x6F80      CMP      R2,#+1024
   \   000000AA   0xDA29             BGE.N    ??SPI1_IRQHandler_2
    324          				{
    325          					/* Recording Audio Data */						 
    326          					switch (buffer_switch)
   \   000000AC   0x.... 0x....      LDR.W    R2,??DataTable13_6
   \   000000B0   0x7812             LDRB     R2,[R2, #+0]
   \   000000B2   0xB11A             CBZ.N    R2,??SPI1_IRQHandler_6
   \   000000B4   0x2A02             CMP      R2,#+2
   \   000000B6   0xD019             BEQ.N    ??SPI1_IRQHandler_7
   \   000000B8   0xD30C             BCC.N    ??SPI1_IRQHandler_8
   \   000000BA   0xE021             B.N      ??SPI1_IRQHandler_2
    327          					{
    328          						case BUF1_PLAY:
    329          							Buffer2.bufMIC2[WaveRec_idxSens2] = vRawSens2;								
   \                     ??SPI1_IRQHandler_6: (+1)
   \   000000BC   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   000000C0   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   000000C4   0x.... 0x....      LDR.W    R3,??DataTable17_1
   \   000000C8   0xEB03 0x034C      ADD      R3,R3,R12, LSL #+1
   \   000000CC   0xF503 0x4390      ADD      R3,R3,#+18432
   \   000000D0   0x801A             STRH     R2,[R3, #+0]
    330          							break;
    331          						case BUF2_PLAY:
    332          							Buffer3.bufMIC2[WaveRec_idxSens2] = vRawSens2;
    333          							break;
   \   000000D2   0xE015             B.N      ??SPI1_IRQHandler_2
   \                     ??SPI1_IRQHandler_8: (+1)
   \   000000D4   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   000000D8   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   000000DC   0x.... 0x....      LDR.W    R3,??DataTable17_1
   \   000000E0   0xEB03 0x034C      ADD      R3,R3,R12, LSL #+1
   \   000000E4   0xF503 0x4308      ADD      R3,R3,#+34816
   \   000000E8   0x801A             STRH     R2,[R3, #+0]
   \   000000EA   0xE009             B.N      ??SPI1_IRQHandler_2
    334          						case BUF3_PLAY:
    335          							Buffer1.bufMIC2[WaveRec_idxSens2] = vRawSens2;									
   \                     ??SPI1_IRQHandler_7: (+1)
   \   000000EC   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   000000F0   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   000000F4   0x.... 0x....      LDR.W    R3,??DataTable17_1
   \   000000F8   0xEB03 0x034C      ADD      R3,R3,R12, LSL #+1
   \   000000FC   0xF8A3 0x2800      STRH     R2,[R3, #+2048]
    336          							break;
    337          						default:
    338          							break; 
    339          
    340          				        }
    341          					
    342                           }
    343          //                 else
    344          //                 {
    345          //
    346          //					 /* Recording Audio Data */ 					  
    347          //					 switch (buffer_switch)
    348          //					 {
    349          //						 case BUF1_PLAY:
    350          //							 Buffer1.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;								 
    351          //							 break;
    352          //						 case BUF2_PLAY:
    353          //							 Buffer2.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;
    354          //							 break;
    355          //						 case BUF3_PLAY:
    356          //							 Buffer3.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;									 
    357          //							 break;
    358          //						 default:
    359          //							 break; 
    360          //					
    361          //					}
    362          //
    363          //			       }
    364          
    365          				    WaveRec_idxSens2++;
   \                     ??SPI1_IRQHandler_2: (+1)
   \   00000100   0x880A             LDRH     R2,[R1, #+0]
   \   00000102   0x1C52             ADDS     R2,R2,#+1
   \   00000104   0x800A             STRH     R2,[R1, #+0]
    366          
    367          //			if ((WaveRec_idxSens2 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x02;
    368          //
    369          //			if (flgRacing==0x3F)  SubFrameFinished();			      
    370          					
    371          
    372          			  }
    373          		
    374          		} 	
    375          
    376          		
    377          	}
    378          	   
    379          
    380          #if 0
    381                 if (iSDO12<4*AUDIO_OUT_BUFFER_SIZE)
    382          	   {
    383                     TestSDO12[iSDO12++]=tmpTest;
    384          	   }
    385          	   else
    386          	   {
    387                     iSDO12=0;
    388          	   }
    389          		if ((WaveRec_idxSens1 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens2 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    390          	//			  &&(stLR!=stLROld))
    391          		{
    392          	/*-------------------------------------------------------------------------------------------------------------
    393          				  
    394          		Sequence  Record Data					  Processing Data				  Player Data
    395          				  
    396          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    397          				  
    398          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    399          				  
    400          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    401          	 ---------------------------------------------------------------------------------------------------------------*/
    402          				  /* Recording Audio Data */						 
    403          				   switch (buffer_switch)
    404          				   {
    405          							case BUF1_PLAY:
    406                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    407          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    408          							    else
    409          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    410          	
    411          									break;
    412          							case BUF2_PLAY:
    413                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    414          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    415          							    else
    416          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;	
    417          									break;
    418          							case BUF3_PLAY:
    419                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    420          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    421          							    else
    422          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    423          									break;
    424          							default:
    425          									break; 
    426          				   }
    427          			
    428          		 } 
    429          #endif		
    430          
    431          		/* Update Old value */	  
    432          		stLROld=I2S2_stLR;
   \                     ??SPI1_IRQHandler_0: (+1)
   \   00000106   0xF890 0x1082      LDRB     R1,[R0, #+130]
   \   0000010A   0xF880 0x1084      STRB     R1,[R0, #+132]
    433          
    434          				 
    435          } 	 
   \   0000010E   0x4770             BX       LR               ;; return
    436          
    437          
    438          
    439          
    440          /**
    441            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    442            * @param  None
    443            * @retval None
    444          */
    445          

   \                                 In section .text, align 2, keep-with-next
    446          void SPI2_IRQHandler(void)
    447          {      
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    448              int16_t app;
    449              
    450          
    451            /* Check if data are available in SPI Data register */
    452             if (
    453          //	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    454          //   	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    455             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    456             	  )
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable13_4
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x6C20             LDR      R0,[R4, #+64]
   \   0000000A   0x6840             LDR      R0,[R0, #+4]
   \   0000000C   0x0640             LSLS     R0,R0,#+25
   \   0000000E   0xD56E             BPL.N    ??SPI2_IRQHandler_0
    457             {
    458              
    459               app = (int16_t)SPI_I2S_ReceiveData(SPI2);   
    460               //SPI_I2S_SendData(SPI2, 3333);
    461          
    462          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000010   0x2110             MOVS     R1,#+16
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x4000380c
   \   00000016   0x6805             LDR      R5,[R0, #+0]
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   0000001C   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000020   0xF884 0x0082      STRB     R0,[R4, #+130]
    463          
    464          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   00000024   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   00000028   0xB22D             SXTH     R5,R5
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xF894 0x0083      LDRB     R0,[R4, #+131]
   \   00000030   0xD12C             BNE.N    ??SPI2_IRQHandler_1
    465          	 {		
    466          		if ((I2S2_stLROld==GPIO_PIN_RESET)) 
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD157             BNE.N    ??SPI2_IRQHandler_2
    467          		{
    468          			vRawSens3 = app;
    469          			if (WaveRec_idxSens3 < AUDIO_OUT_BUFFER_SIZE)
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   0000003A   0xF8A4 0x508E      STRH     R5,[R4, #+142]
   \   0000003E   0x8801             LDRH     R1,[R0, #+0]
   \   00000040   0xF5B1 0x6F80      CMP      R1,#+1024
   \   00000044   0xDA4C             BGE.N    ??SPI2_IRQHandler_3
    470          			{
    471          				switch (buffer_switch)
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable13_6
   \   0000004A   0x7809             LDRB     R1,[R1, #+0]
   \   0000004C   0xB119             CBZ.N    R1,??SPI2_IRQHandler_4
   \   0000004E   0x2902             CMP      R1,#+2
   \   00000050   0xD013             BEQ.N    ??SPI2_IRQHandler_5
   \   00000052   0xD309             BCC.N    ??SPI2_IRQHandler_6
   \   00000054   0xE044             B.N      ??SPI2_IRQHandler_3
    472          				{
    473          					case BUF1_PLAY:
    474          						Buffer2.bufMIC3[WaveRec_idxSens3] = vRawSens3;								
   \                     ??SPI2_IRQHandler_4: (+1)
   \   00000056   0x8803             LDRH     R3,[R0, #+0]
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable17_1
   \   0000005C   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000060   0xF502 0x42A0      ADD      R2,R2,#+20480
   \   00000064   0x8015             STRH     R5,[R2, #+0]
    475          						break;
    476          					case BUF2_PLAY:
    477          						Buffer3.bufMIC3[WaveRec_idxSens3] = vRawSens3;
    478          						break;
    479          					case BUF3_PLAY:
    480          						Buffer1.bufMIC3[WaveRec_idxSens3] = vRawSens3;									
    481          						break;
    482          					default:
    483          						break; 
    484          				}
    485          				
    486          			}
    487          //			else
    488          //			{
    489          //				switch (buffer_switch)
    490          //				{
    491          //					case BUF1_PLAY:
    492          //						Buffer1.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;								
    493          //						break;
    494          //					case BUF2_PLAY:
    495          //						Buffer2.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;
    496          //						break;
    497          //					case BUF3_PLAY:
    498          //						Buffer3.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;									
    499          //						break;
    500          //					default:
    501          //						break; 
    502          //				}
    503          //			}
    504          
    505          		    WaveRec_idxSens3++;
   \   00000066   0xE03B             B.N      ??SPI2_IRQHandler_3
   \                     ??SPI2_IRQHandler_6: (+1)
   \   00000068   0x8803             LDRH     R3,[R0, #+0]
   \   0000006A   0x.... 0x....      LDR.W    R2,??DataTable17_1
   \   0000006E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000072   0xF502 0x4210      ADD      R2,R2,#+36864
   \   00000076   0x8015             STRH     R5,[R2, #+0]
   \   00000078   0xE032             B.N      ??SPI2_IRQHandler_3
   \                     ??SPI2_IRQHandler_5: (+1)
   \   0000007A   0x8803             LDRH     R3,[R0, #+0]
   \   0000007C   0x.... 0x....      LDR.W    R2,??DataTable17_1
   \   00000080   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000084   0xF502 0x5280      ADD      R2,R2,#+4096
   \   00000088   0x8015             STRH     R5,[R2, #+0]
   \   0000008A   0xE029             B.N      ??SPI2_IRQHandler_3
    506          
    507          //			if ((WaveRec_idxSens3 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x04;
    508          //
    509          //			if (flgRacing==0x3F)  SubFrameFinished();
    510          			
    511          		}
    512          		
    513          	 }
    514          	 else
    515          	 {
    516                      if ((I2S2_stLROld==GPIO_PIN_SET))   
   \                     ??SPI2_IRQHandler_1: (+1)
   \   0000008C   0x2801             CMP      R0,#+1
   \   0000008E   0xD12A             BNE.N    ??SPI2_IRQHandler_2
    517                      {
    518                            vRawSens4 =app;
    519                            if ((WaveRec_idxSens4<AUDIO_OUT_BUFFER_SIZE))
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable17_4
   \   00000094   0xF8A4 0x508C      STRH     R5,[R4, #+140]
   \   00000098   0x8801             LDRH     R1,[R0, #+0]
   \   0000009A   0xF5B1 0x6F80      CMP      R1,#+1024
   \   0000009E   0xDA1F             BGE.N    ??SPI2_IRQHandler_3
    520                            {
    521          	                    switch (buffer_switch)
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable13_6
   \   000000A4   0x7809             LDRB     R1,[R1, #+0]
   \   000000A6   0xB119             CBZ.N    R1,??SPI2_IRQHandler_7
   \   000000A8   0x2902             CMP      R1,#+2
   \   000000AA   0xD011             BEQ.N    ??SPI2_IRQHandler_8
   \   000000AC   0xD308             BCC.N    ??SPI2_IRQHandler_9
   \   000000AE   0xE017             B.N      ??SPI2_IRQHandler_3
    522          	                    {	 
    523          	                        case BUF1_PLAY:
    524          	                                Buffer2.bufMIC4[WaveRec_idxSens4] = vRawSens4;								
   \                     ??SPI2_IRQHandler_7: (+1)
   \   000000B0   0x8803             LDRH     R3,[R0, #+0]
   \   000000B2   0x.... 0x....      LDR.W    R2,??DataTable17_1
   \   000000B6   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000BA   0xF502 0x42B0      ADD      R2,R2,#+22528
   \   000000BE   0xE00E             B.N      ??SPI2_IRQHandler_10
    525          	                                break;
    526          	                        case BUF2_PLAY:
    527          	                                Buffer3.bufMIC4[WaveRec_idxSens4] = vRawSens4;
   \                     ??SPI2_IRQHandler_9: (+1)
   \   000000C0   0x8803             LDRH     R3,[R0, #+0]
   \   000000C2   0x.... 0x....      LDR.W    R2,??DataTable17_1
   \   000000C6   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000CA   0xF502 0x4218      ADD      R2,R2,#+38912
   \   000000CE   0xE006             B.N      ??SPI2_IRQHandler_10
    528          	                                break;
    529          	                        case BUF3_PLAY:
    530          	                                Buffer1.bufMIC4[WaveRec_idxSens4] = vRawSens4;									
   \                     ??SPI2_IRQHandler_8: (+1)
   \   000000D0   0x8803             LDRH     R3,[R0, #+0]
   \   000000D2   0x.... 0x....      LDR.W    R2,??DataTable17_1
   \   000000D6   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000DA   0xF502 0x52C0      ADD      R2,R2,#+6144
   \                     ??SPI2_IRQHandler_10: (+1)
   \   000000DE   0x8015             STRH     R5,[R2, #+0]
    531          	                                break;
    532          	                        default:
    533          	                                break; 
    534          	                    }
    535          
    536          						
    537                            }
    538          //                  else
    539          //                  {
    540          //                      switch (buffer_switch)
    541          //                      {	 
    542          //                          case BUF1_PLAY:
    543          //                                  Buffer1.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;								
    544          //                                  break;
    545          //                          case BUF2_PLAY:
    546          //                                  Buffer2.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;
    547          //                                  break;
    548          //                          case BUF3_PLAY:
    549          //                                  Buffer3.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;									
    550          //                                  break;
    551          //                          default:
    552          //                                  break; 
    553          //                      }
    554          //                    }
    555          				  WaveRec_idxSens4++;
   \                     ??SPI2_IRQHandler_3: (+1)
   \   000000E0   0x8801             LDRH     R1,[R0, #+0]
   \   000000E2   0x1C49             ADDS     R1,R1,#+1
   \   000000E4   0x8001             STRH     R1,[R0, #+0]
    556          
    557          //			if ((WaveRec_idxSens4 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x08;
    558          //			if (flgRacing==0x3F)  SubFrameFinished();				  
    559                              
    560                      }
    561          	 }//else
    562          
    563          	 
    564          #if 0
    565          	  if (iSDO34<4*AUDIO_OUT_BUFFER_SIZE)
    566          	 {
    567          		 TestSDO34[iSDO34++]=app;
    568          	 }
    569          	 else
    570          	 {
    571          		 iSDO34=0;
    572          	 }
    573          	 if ((WaveRec_idxSens3 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens4 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    574          //             &&(I2S2_stLR!=I2S2_stLROld))
    575          	 {
    576          /*-------------------------------------------------------------------------------------------------------------
    577          			  
    578          	Sequence  Record Data                     Processing Data                 Player Data
    579          			  
    580          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    581          			  
    582          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    583          			  
    584          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    585           ---------------------------------------------------------------------------------------------------------------*/
    586          		/* Recording Audio Data */			             
    587          		 switch (buffer_switch)
    588          		 {
    589          			  case BUF1_PLAY:
    590                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    591                                        Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    592                                    else
    593                                        Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			  
    594          			  break;                     
    595          			  case BUF2_PLAY:
    596                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    597                                        Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    598                                    else
    599                                        Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			   
    600          				  break;
    601          			  case BUF3_PLAY:
    602                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    603                                       Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    604          		          else
    605                                       Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    606          		          break;
    607          			  default:
    608          			     break; 
    609          		 }
    610          		
    611          	 }          
    612          #endif		  
    613          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   000000E6   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   000000EA   0xF884 0x0083      STRB     R0,[R4, #+131]
    614             }
    615          
    616          }
   \                     ??SPI2_IRQHandler_0: (+1)
   \   000000EE   0xB001             ADD      SP,SP,#+4
   \   000000F0   0xBD30             POP      {R4,R5,PC}       ;; return
    617          
    618          

   \                                 In section .text, align 2, keep-with-next
    619          void SPI4_IRQHandler(void)
    620          {
    621            static uint8_t Main_stLR, Main_stLROld;
    622          
    623          
    624            /* SPI in mode Receiver ----------------------------------------------------*/
    625            if(
    626          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    627          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    628               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_5
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xD400             BMI.N    ??SPI4_IRQHandler_0
   \   0000000C   0x4770             BX       LR
    629            {
    630          
    631                  uint16_t test;
    632                  test =  SPI_I2S_ReceiveData(SPI4);
   \                     ??SPI4_IRQHandler_0: (+1)
   \   0000000E   0xB530             PUSH     {R4,R5,LR}
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable17_6  ;; 0x4001340c
   \   00000014   0xB081             SUB      SP,SP,#+4
    633          
    634                  /* Left-Right Mic data */
    635                  Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000016   0x2110             MOVS     R1,#+16
   \   00000018   0x6804             LDR      R4,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_ReadPin
    636          
    637                  /* STM32F746 read data from STA321MP, the data is shifted few bit     */
    638                  /* Data from STA321MP is 32bit formart                                */
    639                  /* SPI is just able to read 16 bit format                             */
    640                  /* Therefore, it needs to correct                                     */
    641                  
    642                  /* ---------------------------+++++++++++++++++++++++++++++++---------*/
    643                  /*                  ______DATAL_____              ______DATAR_____    */
    644                  /*                  _____vRawSens5__              ______vRawSens6_    */       
    645          	if (Main_stLR==GPIO_PIN_SET)
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable13_4
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xB2A4             UXTH     R4,R4
   \   0000002A   0xF891 0x2085      LDRB     R2,[R1, #+133]
   \   0000002E   0xD139             BNE.N    ??SPI4_IRQHandler_1
    646          	{
    647                      if (Main_stLROld==GPIO_PIN_SET)
   \   00000030   0x2A01             CMP      R2,#+1
   \   00000032   0xD038             BEQ.N    ??SPI4_IRQHandler_2
    648                      {
    649                         SPI4_stNipple = (test);    
    650                      }
    651                      else
    652                      {
    653                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
   \   00000034   0xF891 0x2081      LDRB     R2,[R1, #+129]
   \   00000038   0xF9B1 0x3094      LDRSH    R3,[R1, #+148]
   \   0000003C   0x40D4             LSRS     R4,R4,R2
   \   0000003E   0xF891 0x2081      LDRB     R2,[R1, #+129]
   \   00000042   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   00000046   0xFA03 0xF202      LSL      R2,R3,R2
   \   0000004A   0xEA42 0x0304      ORR      R3,R2,R4
    654                         if (WaveRec_idxSens5 < AUDIO_OUT_BUFFER_SIZE)
   \   0000004E   0x.... 0x....      LDR.W    R2,??DataTable17_7
   \   00000052   0xF8A1 0x3090      STRH     R3,[R1, #+144]
   \   00000056   0x8814             LDRH     R4,[R2, #+0]
   \   00000058   0xF5B4 0x6F80      CMP      R4,#+1024
   \   0000005C   0xDA5E             BGE.N    ??SPI4_IRQHandler_3
    655                         {
    656                              /*-------------------------------------------------------------------------------------------------------------                                             
    657                              Sequence  Record Data                     Processing Data                 Player Data
    658                                                
    659                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    660                                                
    661                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    662                                                
    663                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    664                               ---------------------------------------------------------------------------------------------------------------*/                     
    665                               /* Recording Audio Data */			             
    666                               switch (buffer_switch)
   \   0000005E   0x.... 0x....      LDR.W    R4,??DataTable13_6
   \   00000062   0x7824             LDRB     R4,[R4, #+0]
   \   00000064   0xB11C             CBZ.N    R4,??SPI4_IRQHandler_4
   \   00000066   0x2C02             CMP      R4,#+2
   \   00000068   0xD013             BEQ.N    ??SPI4_IRQHandler_5
   \   0000006A   0xD309             BCC.N    ??SPI4_IRQHandler_6
   \   0000006C   0xE056             B.N      ??SPI4_IRQHandler_3
    667                               {
    668                                   case BUF1_PLAY:
    669                                       Buffer2.bufMIC5[WaveRec_idxSens5] = vRawSens5;
   \                     ??SPI4_IRQHandler_4: (+1)
   \   0000006E   0x8815             LDRH     R5,[R2, #+0]
   \   00000070   0x.... 0x....      LDR.W    R4,??DataTable20
   \   00000074   0xEB04 0x0445      ADD      R4,R4,R5, LSL #+1
   \   00000078   0xF504 0x44C0      ADD      R4,R4,#+24576
   \   0000007C   0x8023             STRH     R3,[R4, #+0]
    670          
    671                                       break;
    672                                   case BUF2_PLAY:
    673                                       Buffer3.bufMIC5[WaveRec_idxSens5] = vRawSens5;
    674          
    675                                       break;
    676                                   case BUF3_PLAY:
    677                                       Buffer1.bufMIC5[WaveRec_idxSens5] = vRawSens5;
    678          
    679                                       break;                          
    680                                   default:
    681                                       break;
    682                               }
    683          
    684          					
    685                         }
    686          //               else
    687          //               {
    688          //                 /* Recording Audio Data */			             
    689          //                 switch (buffer_switch)
    690          //                 {
    691          //                     case BUF1_PLAY:
    692          //                         Buffer1.bufMIC5[WaveRec_idxSens5%AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
    693          //
    694          //                         break;
    695          //                     case BUF2_PLAY:
    696          //                         Buffer2.bufMIC5[WaveRec_idxSens5%AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
    697          //
    698          //                         break;
    699          //                     case BUF3_PLAY:
    700          //                         Buffer3.bufMIC5[WaveRec_idxSens5%AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
    701          //
    702          //                         break;                          
    703          //                     default:
    704          //                         break;
    705          //                 }
    706          //               }
    707          
    708          			    WaveRec_idxSens5++;
   \   0000007E   0xE04D             B.N      ??SPI4_IRQHandler_3
   \                     ??SPI4_IRQHandler_6: (+1)
   \   00000080   0x8815             LDRH     R5,[R2, #+0]
   \   00000082   0x.... 0x....      LDR.W    R4,??DataTable20
   \   00000086   0xEB04 0x0445      ADD      R4,R4,R5, LSL #+1
   \   0000008A   0xF504 0x4420      ADD      R4,R4,#+40960
   \   0000008E   0x8023             STRH     R3,[R4, #+0]
   \   00000090   0xE044             B.N      ??SPI4_IRQHandler_3
   \                     ??SPI4_IRQHandler_5: (+1)
   \   00000092   0x8815             LDRH     R5,[R2, #+0]
   \   00000094   0x.... 0x....      LDR.W    R4,??DataTable20
   \   00000098   0xEB04 0x0445      ADD      R4,R4,R5, LSL #+1
   \   0000009C   0xF504 0x5400      ADD      R4,R4,#+8192
   \   000000A0   0x8023             STRH     R3,[R4, #+0]
   \   000000A2   0xE03B             B.N      ??SPI4_IRQHandler_3
    709          //			if ((WaveRec_idxSens5 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x10;
    710          //
    711          //			if (flgRacing==0x3F)  SubFrameFinished();				
    712          	   }
    713                  }
    714          	else
    715          	{
    716                    if (Main_stLROld==GPIO_PIN_RESET)
   \                     ??SPI4_IRQHandler_1: (+1)
   \   000000A4   0xB92A             CBNZ.N   R2,??SPI4_IRQHandler_7
    717                    {
    718                        SPI4_stNipple = (test);	  
   \                     ??SPI4_IRQHandler_2: (+1)
   \   000000A6   0xF8A1 0x4094      STRH     R4,[R1, #+148]
    719          
    720                    }
    721                    else
    722                    {
    723                         vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
    724                         if (WaveRec_idxSens6 < AUDIO_OUT_BUFFER_SIZE)
    725                         {
    726                              /*-------------------------------------------------------------------------------------------------------------                                             
    727                              Sequence  Record Data                     Processing Data                 Player Data
    728                                                
    729                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    730                                                
    731                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    732                                                
    733                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    734                               ---------------------------------------------------------------------------------------------------------------*/                 
    735                                /* Recording Audio Data */			             
    736                               switch (buffer_switch)
    737                               {
    738                                   case BUF1_PLAY:
    739                                       Buffer2.bufMIC6[WaveRec_idxSens6] = vRawSens6;
    740           
    741                                       break;
    742                                   case BUF2_PLAY:
    743                                       Buffer3.bufMIC6[WaveRec_idxSens6] = vRawSens6;
    744                 
    745                                       break;
    746                                   case BUF3_PLAY:
    747                                       Buffer1.bufMIC6[WaveRec_idxSens6] = vRawSens6;
    748           
    749                                       break;                          
    750                                   default:
    751                                       break;
    752                               }
    753          
    754          
    755          					  
    756                         }
    757          //               else
    758          //               {
    759          //                  /* Recording Audio Data */						 
    760          //                   switch (buffer_switch)
    761          //                   {
    762          //                           case BUF1_PLAY:
    763          //                                   Buffer1.bufMIC6[WaveRec_idxSens6 % AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
    764          //                  
    765          //                                   break;
    766          //                           case BUF2_PLAY:
    767          //                                   Buffer2.bufMIC6[WaveRec_idxSens6 % AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
    768          //                  
    769          //                                   break;
    770          //                           case BUF3_PLAY:
    771          //                                   Buffer3.bufMIC6[WaveRec_idxSens6 % AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
    772          //                  
    773          //                                   break; 						 
    774          //                           default:
    775          //                                   break;
    776          //                   }
    777          //
    778          //                }
    779                         
    780          		       
    781          		        WaveRec_idxSens6++;
    782          //			if ((WaveRec_idxSens6 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x20;
    783          //
    784          //			if (flgRacing==0x3F)  SubFrameFinished();			   
    785                         
    786                    }		
    787          	}
    788          #if 0
    789          	/* The code to store data in to buffer for testing purpose */
    790          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
    791          	{
    792          		TestSDO56[iSDO56++]=test;
    793          	}
    794          	else
    795          	{
    796          		iSDO56=0;
    797          	}
    798          #endif
    799          
    800          	/* Update Old value */	  
    801          	Main_stLROld=Main_stLR;	  
   \   000000AA   0xF881 0x0085      STRB     R0,[R1, #+133]
    802               
    803            }      
    804          }
   \   000000AE   0xB001             ADD      SP,SP,#+4
   \   000000B0   0xBD30             POP      {R4,R5,PC}
   \                     ??SPI4_IRQHandler_7: (+1)
   \   000000B2   0xF891 0x2081      LDRB     R2,[R1, #+129]
   \   000000B6   0xF9B1 0x3094      LDRSH    R3,[R1, #+148]
   \   000000BA   0x40D4             LSRS     R4,R4,R2
   \   000000BC   0xF891 0x2081      LDRB     R2,[R1, #+129]
   \   000000C0   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   000000C4   0xFA03 0xF202      LSL      R2,R3,R2
   \   000000C8   0xEA42 0x0304      ORR      R3,R2,R4
   \   000000CC   0x.... 0x....      LDR.W    R2,??DataTable19
   \   000000D0   0xF8A1 0x3092      STRH     R3,[R1, #+146]
   \   000000D4   0x8814             LDRH     R4,[R2, #+0]
   \   000000D6   0xF5B4 0x6F80      CMP      R4,#+1024
   \   000000DA   0xDA1F             BGE.N    ??SPI4_IRQHandler_3
   \   000000DC   0x.... 0x....      LDR.W    R4,??DataTable13_6
   \   000000E0   0x7824             LDRB     R4,[R4, #+0]
   \   000000E2   0xB11C             CBZ.N    R4,??SPI4_IRQHandler_8
   \   000000E4   0x2C02             CMP      R4,#+2
   \   000000E6   0xD011             BEQ.N    ??SPI4_IRQHandler_9
   \   000000E8   0xD308             BCC.N    ??SPI4_IRQHandler_10
   \   000000EA   0xE017             B.N      ??SPI4_IRQHandler_3
   \                     ??SPI4_IRQHandler_8: (+1)
   \   000000EC   0x8815             LDRH     R5,[R2, #+0]
   \   000000EE   0x.... 0x....      LDR.W    R4,??DataTable20
   \   000000F2   0xEB04 0x0445      ADD      R4,R4,R5, LSL #+1
   \   000000F6   0xF504 0x44D0      ADD      R4,R4,#+26624
   \   000000FA   0xE00E             B.N      ??SPI4_IRQHandler_11
   \                     ??SPI4_IRQHandler_10: (+1)
   \   000000FC   0x8815             LDRH     R5,[R2, #+0]
   \   000000FE   0x.... 0x....      LDR.W    R4,??DataTable20
   \   00000102   0xEB04 0x0445      ADD      R4,R4,R5, LSL #+1
   \   00000106   0xF504 0x4428      ADD      R4,R4,#+43008
   \   0000010A   0xE006             B.N      ??SPI4_IRQHandler_11
   \                     ??SPI4_IRQHandler_9: (+1)
   \   0000010C   0x8815             LDRH     R5,[R2, #+0]
   \   0000010E   0x.... 0x....      LDR.W    R4,??DataTable20
   \   00000112   0xEB04 0x0445      ADD      R4,R4,R5, LSL #+1
   \   00000116   0xF504 0x5420      ADD      R4,R4,#+10240
   \                     ??SPI4_IRQHandler_11: (+1)
   \   0000011A   0x8023             STRH     R3,[R4, #+0]
   \                     ??SPI4_IRQHandler_3: (+1)
   \   0000011C   0x8813             LDRH     R3,[R2, #+0]
   \   0000011E   0x1C5B             ADDS     R3,R3,#+1
   \   00000120   0x8013             STRH     R3,[R2, #+0]
   \   00000122   0xF881 0x0085      STRB     R0,[R1, #+133]
   \   00000126   0xB001             ADD      SP,SP,#+4
   \   00000128   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .bss, align 4
   \                     hi2s1:
   \   00000000                      DS8 64
   \                     hi2s2:
   \   00000040                      DS8 64
   \                     WaveRecord_flgInt:
   \   00000080                      DS8 1
   \                     SPI4_stPosShft:
   \   00000081                      DS8 1
   \                     I2S2_stLR:
   \   00000082                      DS8 1
   \                     I2S2_stLROld:
   \   00000083                      DS8 1
   \   00000084                      DS8 1
   \   00000085                      DS8 1
   \                     WaveRec_idxTest:
   \   00000086                      DS8 2
   \                     vRawSens1:
   \   00000088                      DS8 2
   \                     vRawSens2:
   \   0000008A                      DS8 2
   \                     vRawSens4:
   \   0000008C                      DS8 2
   \                     vRawSens3:
   \   0000008E                      DS8 2
   \                     vRawSens5:
   \   00000090                      DS8 2
   \                     vRawSens6:
   \   00000092                      DS8 2
   \                     SPI4_stNipple:
   \   00000094                      DS8 2

   \                                 In section .bss, align 1
   \                     flgRacing:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hdma_spi2_tx:
   \   00000000                      DS8 88

   \                                 In section .bss, align 4
   \                     hdma_spi3_tx:
   \   00000000                      DS8 88

   \                                 In section .bss, align 4
   \                     hdma_spi5_rx:
   \   00000000                      DS8 88
   \                     hdma_spi6_rx:
   \   00000058                      DS8 88

   \                                 In section .bss, align 2
   \                     idxFrmPDMMic8:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
   \                     cntStrt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     SPI1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S2_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO34:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO56:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     I2S1_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     Buffer1:
   \   00000000                      DS8 16384
   \                     Buffer2:
   \   00004000                      DS8 16384
   \                     Buffer3:
   \   00008000                      DS8 16384

   \                                 In section .bss, align 1
   \   00000000                      DS8 1
    805          
    806          
    807          
    808          

   \                                 In section .text, align 2, keep-with-next
    809          void SPI5_IRQHandler(void)
    810          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    811            //static uint16_t stNipple;
    812            //static uint8_t stLR, stOder;
    813          
    814            /* USER CODE BEGIN SPI5_IRQn 0 */
    815          
    816            /* USER CODE END SPI5_IRQn 0 */
    817            //HAL_SPI_IRQHandler(&hspi5);
    818            /* USER CODE BEGIN SPI5_IRQn 1 */
    819          
    820            /* USER CODE END SPI5_IRQn 1 */
    821              /* Check if data are available in SPI Data register */
    822            /* SPI in mode Receiver ----------------------------------------------------*/
    823            if(
    824               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    825               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    826               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xD439             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD536             BPL.N    ??SPI5_IRQHandler_0
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD533             BPL.N    ??SPI5_IRQHandler_0
    827            {
    828          
    829          
    830             uint16_t test;
    831             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x4001500c
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
    832             //SPI5->DR = 3333;
    833          
    834            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000020   0xF8B4 0x1134      LDRH     R1,[R4, #+308]
   \   00000024   0xB282             UXTH     R2,R0
   \   00000026   0x0200             LSLS     R0,R0,#+8
   \   00000028   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   0000002C   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   00000030   0xF8A2 0x0144      STRH     R0,[R2, #+324]
   \   00000034   0x1C48             ADDS     R0,R1,#+1
   \   00000036   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    835            
    836            //volume = 64;
    837            
    838            if (idxMic8>=64)
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0x2840             CMP      R0,#+64
   \   0000003E   0xDB20             BLT.N    ??SPI5_IRQHandler_0
    839            {
    840          	if (buffer_switch != 1)
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable13_6
   \   00000044   0xF8D4 0x0140      LDR      R0,[R4, #+320]
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable20_3
   \   0000004C   0xF104 0x03C8      ADD      R3,R4,#+200
   \   00000050   0x7812             LDRB     R2,[R2, #+0]
   \   00000052   0x780A             LDRB     R2,[R1, #+0]
   \   00000054   0xF8B4 0x1138      LDRH     R1,[R4, #+312]
   \   00000058   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   0000005C   0xF504 0x70A2      ADD      R0,R4,#+324
    841          	{
    842          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
    843          						  (PDMFilter_InitStruct *)&Filter[0]);
    844          	}
    845          	else
    846          	{
    847          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
    848          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \   00000060   0x.... 0x....      BL       PDM_Filter_64_LSB
    849          	}
    850          	idxMic8=0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    851          	cntPos++;
   \   0000006A   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0xF8A4 0x0138      STRH     R0,[R4, #+312]
    852          	if (cntPos>=256) cntPos=0;
   \   00000074   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   00000078   0x28FF             CMP      R0,#+255
   \   0000007A   0xBFC4             ITT      GT 
   \   0000007C   0x2000             MOVGT    R0,#+0
   \   0000007E   0xF8A4 0x0138      STRHGT   R0,[R4, #+312]
    853            }
    854              
    855            }
    856            
    857          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   00000082   0xBD10             POP      {R4,PC}          ;; return
    858          
    859          /* SPI5 init function */
    860          
    861          

   \                                 In section .text, align 2, keep-with-next
    862          void SPI6_IRQHandler(void)
    863          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    864            /* SPI in mode Receiver ----------------------------------------------------*/
    865            if(
    866          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    867               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    868               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   00000006   0x6E60             LDR      R0,[R4, #+100]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0789             LSLS     R1,R1,#+30
   \   0000000C   0xD536             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD533             BPL.N    ??SPI6_IRQHandler_0
    869            {
    870          
    871          
    872               uint16_t test;
    873               test =  SPI_I2S_ReceiveData(SPI6);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable20_4  ;; 0x4001540c
   \   00000018   0x6800             LDR      R0,[R0, #+0]
    874               //SPI6->DR = 3333;
    875          
    876              pDataMic7[idxMic7++] =	HTONS(test);
   \   0000001A   0xF8B4 0x1136      LDRH     R1,[R4, #+310]
   \   0000001E   0xB282             UXTH     R2,R0
   \   00000020   0x0200             LSLS     R0,R0,#+8
   \   00000022   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000026   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   0000002A   0xF8A2 0x01C4      STRH     R0,[R2, #+452]
   \   0000002E   0x1C48             ADDS     R0,R1,#+1
   \   00000030   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    877          
    878              //volume = 64;
    879          
    880              if (idxMic7>=64)
   \   00000034   0xB280             UXTH     R0,R0
   \   00000036   0x2840             CMP      R0,#+64
   \   00000038   0xDB20             BLT.N    ??SPI6_IRQHandler_0
    881              {
    882                if (buffer_switch != 1)
   \   0000003A   0x.... 0x....      LDR.W    R2,??DataTable13_6
   \   0000003E   0xF8D4 0x013C      LDR      R0,[R4, #+316]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable20_3
   \   00000046   0xF104 0x03FC      ADD      R3,R4,#+252
   \   0000004A   0x7812             LDRB     R2,[R2, #+0]
   \   0000004C   0x780A             LDRB     R2,[R1, #+0]
   \   0000004E   0xF8B4 0x113A      LDRH     R1,[R4, #+314]
   \   00000052   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   00000056   0xF504 0x70E2      ADD      R0,R4,#+452
    883                {
    884                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
    885                                                          (PDMFilter_InitStruct *)&Filter[1]);
    886                }
    887                else
    888                {
    889                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
    890                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \   0000005A   0x.... 0x....      BL       PDM_Filter_64_LSB
    891                }
    892                idxMic7=0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    893                cntPos7++;
   \   00000064   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0xF8A4 0x013A      STRH     R0,[R4, #+314]
    894                if (cntPos7>=256) cntPos7=0;
   \   0000006E   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000072   0x28FF             CMP      R0,#+255
   \   00000074   0xBFC4             ITT      GT 
   \   00000076   0x2000             MOVGT    R0,#+0
   \   00000078   0xF8A4 0x013A      STRHGT   R0,[R4, #+314]
    895              }
    896              
    897            }
    898          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   0000007C   0xBD10             POP      {R4,PC}          ;; return
    899          
    900          
    901          

   \                                 In section .text, align 2, keep-with-next
    902          void MIC1TO8_Init(void)
    903          {
   \                     MIC1TO8_Init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    904          
    905          
    906            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    907            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    908            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    909            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    910            //HAL_Delay(2);
    911          
    912          
    913          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    914          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    915            I2S1_Init(); /* I2S1   --> SDO12 */
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable13_4
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable20_5  ;; 0x40013000
   \   0000000A   0x6020             STR      R0,[R4, #+0]
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0x60A0             STR      R0,[R4, #+8]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x60E0             STR      R0,[R4, #+12]
   \   00000014   0xF44F 0x7580      MOV      R5,#+256
   \   00000018   0x6120             STR      R0,[R4, #+16]
   \   0000001A   0xF44F 0x567A      MOV      R6,#+16000
   \   0000001E   0x61A0             STR      R0,[R4, #+24]
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0x61E0             STR      R0,[R4, #+28]
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x6065             STR      R5,[R4, #+4]
   \   00000028   0x6166             STR      R6,[R4, #+20]
   \   0000002A   0x.... 0x....      BL       HAL_I2S_Init
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x6841             LDR      R1,[R0, #+4]
   \   00000032   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000036   0x6041             STR      R1,[R0, #+4]
   \   00000038   0x69C1             LDR      R1,[R0, #+28]
   \   0000003A   0xF441 0x6180      ORR      R1,R1,#0x400
   \   0000003E   0x61C1             STR      R1,[R0, #+28]
    916          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    917          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    918            I2S2_Init(); /* I2S2   --> SDO34 */
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable20_6  ;; 0x40003800
   \   00000044   0x6420             STR      R0,[R4, #+64]
   \   00000046   0x2020             MOVS     R0,#+32
   \   00000048   0x64A0             STR      R0,[R4, #+72]
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x64E0             STR      R0,[R4, #+76]
   \   0000004E   0x6520             STR      R0,[R4, #+80]
   \   00000050   0x65A0             STR      R0,[R4, #+88]
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x65E0             STR      R0,[R4, #+92]
   \   00000056   0xF104 0x0040      ADD      R0,R4,#+64
   \   0000005A   0x6465             STR      R5,[R4, #+68]
   \   0000005C   0x6566             STR      R6,[R4, #+84]
   \   0000005E   0x.... 0x....      BL       HAL_I2S_Init
   \   00000062   0x6C20             LDR      R0,[R4, #+64]
   \   00000064   0x6841             LDR      R1,[R0, #+4]
   \   00000066   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000006A   0x6041             STR      R1,[R0, #+4]
   \   0000006C   0x69C1             LDR      R1,[R0, #+28]
   \   0000006E   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000072   0x61C1             STR      R1,[R0, #+28]
    919          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    920          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    921            SPI4_Init(); /* SPI4   --> SDO56 */
   \   00000074   0x.... 0x....      BL       SPI4_Init
    922            SPI5_Init();
   \   00000078   0x.... 0x....      BL       SPI5_Init
    923            SPI6_Init();  
   \   0000007C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000080   0x....             B.N      SPI6_Init
    924          }
    925          

   \                                 In section .text, align 2, keep-with-next
    926          void StartRecMic7_8 (void)
    927          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    928          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   00000006   0xF44F 0x5280      MOV      R2,#+4096
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    929          #if (0)
    930          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
    931          #else
    932          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000014   0xF44F 0x5280      MOV      R2,#+4096
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   0000001C   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000020   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    933          #endif
    934          	  swtSDO7 = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF884 0x0130      STRB     R0,[R4, #+304]
    935          	  swtSDO8 = 0;
   \   0000002A   0xF884 0x0131      STRB     R0,[R4, #+305]
    936          
    937          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    938          
    939          /* I2S1 init function */
    940          /* Read data of MIC12 */
    941          static void I2S1_Init(void)
    942          {
    943          #if 1
    944            hi2s1.Instance = SPI1;
    945            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
    946            hi2s1.Init.Standard = I2S_STANDARD_LSB;
    947            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    948            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    949            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    950            hi2s1.Init.CPOL = I2S_CPOL_LOW;
    951            hi2s1.Init.ClockSource = I2S_CLOCK_SYSCLK;
    952            HAL_I2S_Init(&hi2s1);
    953          
    954            /* Enable TXE and ERR interrupt */
    955           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
    956           
    957           __HAL_I2S_ENABLE(&hi2s1);
    958          #else
    959          	hspi1.Instance = SPI1;
    960          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    961          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    962          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    963          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    964          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    965          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    966          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    967          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    968          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    969          	hspi1.Init.CRCPolynomial = 7;
    970          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    971          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    972          	//hspi4.RxISR = SPI5_CallBack;
    973          	HAL_SPI_Init(&hspi1);
    974          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    975            /* Enable TXE, RXNE and ERR interrupt */
    976           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    977           __HAL_SPI_ENABLE(&hspi1);
    978          #endif
    979          }
    980          
    981          /* I2S2 init function */
    982          /* Read data of MIC34 */
    983          
    984          static void I2S2_Init(void)
    985          {
    986          
    987          #if 1
    988           //HAL_I2S_DeInit(&hi2s2);
    989           hi2s2.Instance = SPI2;
    990           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
    991           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
    992           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
    993           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    994           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    995           hi2s2.Init.CPOL = I2S_CPOL_LOW;
    996           hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
    997          
    998           HAL_I2S_Init(&hi2s2);
    999           /* Enable TXE and ERR interrupt */
   1000           __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
   1001           __HAL_I2S_ENABLE(&hi2s2);
   1002          
   1003          #else
   1004             hspi2.Instance = SPI2;
   1005             hspi2.Init.Mode = SPI_MODE_SLAVE;
   1006             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
   1007             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
   1008             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
   1009             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
   1010             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   1011             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
   1012             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
   1013             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   1014             hspi2.Init.CRCPolynomial = 7;
   1015             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   1016             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   1017             HAL_SPI_Init(&hspi2);
   1018          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1019           /* Enable TXE, RXNE and ERR interrupt */
   1020          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
   1021          __HAL_SPI_ENABLE(&hspi2);
   1022          #endif
   1023          
   1024          
   1025          }
   1026          
   1027          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
   1028          void SPI4_Init(void)
   1029          {
   \                     SPI4_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1030          
   1031            hspi4.Instance = SPI4;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_5
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable20_9  ;; 0x40013400
   \   0000000A   0x6020             STR      R0,[R4, #+0]
   1032            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6060             STR      R0,[R4, #+4]
   1033            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000010   0xF44F 0x6080      MOV      R0,#+1024
   \   00000014   0x60A0             STR      R0,[R4, #+8]
   1034            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000016   0xF44F 0x6070      MOV      R0,#+3840
   \   0000001A   0x60E0             STR      R0,[R4, #+12]
   1035            hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x6120             STR      R0,[R4, #+16]
   1036            hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6160             STR      R0,[R4, #+20]
   1037            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000024   0xF44F 0x7000      MOV      R0,#+512
   \   00000028   0x61A0             STR      R0,[R4, #+24]
   1038            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x6220             STR      R0,[R4, #+32]
   1039            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0x6260             STR      R0,[R4, #+36]
   1040            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000030   0x62A0             STR      R0,[R4, #+40]
   1041            hspi4.Init.CRCPolynomial = 7;
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0x62E0             STR      R0,[R4, #+44]
   1042            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x6320             STR      R0,[R4, #+48]
   1043            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000003A   0x6360             STR      R0,[R4, #+52]
   1044            HAL_SPI_Init(&hspi4);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       HAL_SPI_Init
   1045          
   1046            /* Enable TXE, RXNE and ERR interrupt */
   1047           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x6841             LDR      R1,[R0, #+4]
   \   00000046   0xF041 0x0160      ORR      R1,R1,#0x60
   \   0000004A   0x6041             STR      R1,[R0, #+4]
   1048          
   1049           __HAL_SPI_ENABLE(&hspi4);
   \   0000004C   0x6801             LDR      R1,[R0, #+0]
   \   0000004E   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000052   0x6001             STR      R1,[R0, #+0]
   1050          }
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
   1051          
   1052          

   \                                 In section .text, align 2, keep-with-next
   1053          void Mic7Rec(void)
   1054          {
   1055              SPI5_Init();
   \                     Mic7Rec: (+1)
   \   00000000   0x....             B.N      SPI5_Init
   1056          }
   1057          

   \                                 In section .text, align 2, keep-with-next
   1058          void Mic8Rec(void)
   1059          {
   1060              SPI6_Init();
   \                     Mic8Rec: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable20_10  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6781             STR      R1,[R0, #+120]
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x67C1             STR      R1,[R0, #+124]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF8C0 0x1084      STR      R1,[R0, #+132]
   \   0000002E   0xF8C0 0x1088      STR      R1,[R0, #+136]
   \   00000032   0xF8C0 0x108C      STR      R1,[R0, #+140]
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0xF8C0 0x1090      STR      R1,[R0, #+144]
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF8C0 0x1094      STR      R1,[R0, #+148]
   \   00000042   0xF8C0 0x1098      STR      R1,[R0, #+152]
   \   00000046   0x3064             ADDS     R0,R0,#+100
   \   00000048   0x.... 0x....      B.W      HAL_SPI_Init
   1061          }
   1062          
   1063          
   1064          /* SPI5 init function */

   \                                 In section .text, align 4, keep-with-next
   1065          void SPI5_Init(void)
   1066          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   1067          	
   1068              /* Enable CRC module */
   1069              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40023830
   1070          	for (char i=0; i< 2; i++)
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   0000000C   0x2602             MOVS     R6,#+2
   \   0000000E   0xED2D 0x8B02      VPUSH    {D8}
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xF104 0x05C8      ADD      R5,R4,#+200
   \   00000018   0xF44F 0x577A      MOV      R7,#+16000
   \   0000001C   0xEEB3 0x8A0E      VMOV.F32 S16,#30.0
   \   00000020   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000024   0xEDDF 0x....      VLDR.W   S17,??DataTable12  ;; 0x45fa0000
   \   00000028   0xF8C0 0x1000      STR.W    R1,[R0, #+0]
   1071          	{
   1072          		/* Filter LP & HP Init */
   1073          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \                     ??SPI5_Init_0: (+1)
   \   0000002C   0xEDC5 0x8A01      VSTR     S17,[R5, #+4]
   1074          		Filter[i].HP_HZ = 30;
   1075          		Filter[i].Fs = 16000;    //sop1hc: 16000
   1076          		Filter[i].Out_MicChannels = 1;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xED85 0x8A02      VSTR     S16,[R5, #+8]
   \   00000036   0x802F             STRH     R7,[R5, #+0]
   \   00000038   0x81E8             STRH     R0,[R5, #+14]
   1077          		Filter[i].In_MicChannels = 1;
   \   0000003A   0x81A8             STRH     R0,[R5, #+12]
   1078          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   0000003C   0x4628             MOV      R0,R5
   \   0000003E   0x.... 0x....      BL       PDM_Filter_Init
   1079          	}
   \   00000042   0x3534             ADDS     R5,R5,#+52
   \   00000044   0x1E76             SUBS     R6,R6,#+1
   \   00000046   0xD1F1             BNE.N    ??SPI5_Init_0
   1080          
   1081          
   1082            hspi5.Instance = SPI5;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable20_11  ;; 0x40015000
   \   0000004C   0x6020             STR      R0,[R4, #+0]
   1083            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x6060             STR      R0,[R4, #+4]
   1084            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000052   0xF44F 0x6080      MOV      R0,#+1024
   \   00000056   0x60A0             STR      R0,[R4, #+8]
   1085            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000058   0xF44F 0x6070      MOV      R0,#+3840
   \   0000005C   0x60E0             STR      R0,[R4, #+12]
   1086            hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0x6120             STR      R0,[R4, #+16]
   1087            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x6160             STR      R0,[R4, #+20]
   1088            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000066   0xF44F 0x7000      MOV      R0,#+512
   \   0000006A   0x61A0             STR      R0,[R4, #+24]
   1089            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x6220             STR      R0,[R4, #+32]
   1090            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   00000070   0x6260             STR      R0,[R4, #+36]
   1091            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000072   0x62A0             STR      R0,[R4, #+40]
   1092            hspi5.Init.CRCPolynomial = 7;
   \   00000074   0x2007             MOVS     R0,#+7
   \   00000076   0x62E0             STR      R0,[R4, #+44]
   1093            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x6320             STR      R0,[R4, #+48]
   1094            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000007C   0x6360             STR      R0,[R4, #+52]
   1095            //hspi5.RxISR = SPI5_CallBack;
   1096            HAL_SPI_Init(&hspi5);
   \   0000007E   0x4620             MOV      R0,R4
   \   00000080   0xECBD 0x8B02      VPOP     {D8}
   \   00000084   0xB001             ADD      SP,SP,#+4
   \   00000086   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   0000008A   0x.... 0x....      B.W      HAL_SPI_Init
   1097          
   1098          
   1099            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1100            /* Enable TXE, RXNE and ERR interrupt */
   1101           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1102          
   1103           //__HAL_SPI_ENABLE(&hspi5);
   1104          
   1105          }
   1106          

   \                                 In section .text, align 2, keep-with-next
   1107          void SPI6_Init(void)
   1108          {
   1109          	
   1110            hspi6.Instance = SPI6;
   \                     SPI6_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable20_10  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   1111            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   1112            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   1113            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   1114            hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   1115            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6781             STR      R1,[R0, #+120]
   1116            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x67C1             STR      R1,[R0, #+124]
   1117            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF8C0 0x1084      STR      R1,[R0, #+132]
   1118            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0xF8C0 0x1088      STR      R1,[R0, #+136]
   1119            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000032   0xF8C0 0x108C      STR      R1,[R0, #+140]
   1120            hspi6.Init.CRCPolynomial = 7;
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0xF8C0 0x1090      STR      R1,[R0, #+144]
   1121            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF8C0 0x1094      STR      R1,[R0, #+148]
   1122            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000042   0xF8C0 0x1098      STR      R1,[R0, #+152]
   1123            //hspi6.RxISR = SPI6_CallBack;
   1124            HAL_SPI_Init(&hspi6);
   \   00000046   0x3064             ADDS     R0,R0,#+100
   \   00000048   0x.... 0x....      B.W      HAL_SPI_Init
   1125          
   1126          
   1127            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1128            /* Enable TXE, RXNE and ERR interrupt */
   1129           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
   1130          
   1131           //__HAL_SPI_ENABLE(&hspi6);
   1132          
   1133          }
   1134          
   1135          
   1136          
   1137          

   \                                 In section .text, align 2, keep-with-next
   1138          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
   1139          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
   1140          
   1141            GPIO_InitTypeDef GPIO_InitStruct;
   1142            if (hspi->Instance==SPI1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable20_5  ;; 0x40013000
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD138             BNE.N    ??HAL_SPI_MspInit_0
   1143            {
   1144          	  /* USER CODE BEGIN SPI1_MspInit 0 */
   1145          	  
   1146          	  /* USER CODE END SPI1_MspInit 0 */
   1147          	  /* Peripheral clock enable */
   1148          	  __SPI1_CLK_ENABLE();
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable13  ;; 0x40023830
   \   00000016   0x9000             STR      R0,[SP, #+0]
   1149          	  __GPIOA_CLK_ENABLE();
   1150          	  __GPIOC_CLK_ENABLE();
   1151          	  
   1152          	  /**I2S1 GPIO Configuration	
   1153          		PA4 	------> I2S1_WS --> LRCKO
   1154          		PA5 	------> I2S1_CK --> BICKO
   1155          		PA7 	------> I2S1_SD --> SDO12
   1156          		PC4 	------> I2S1_MCK
   1157          		*/
   1158          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
   1159          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1160          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1161          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1162          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1163          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000018   0xA901             ADD      R1,SP,#+4
   \   0000001A   0x6968             LDR      R0,[R5, #+20]
   \   0000001C   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   00000020   0x6168             STR      R0,[R5, #+20]
   \   00000022   0x6968             LDR      R0,[R5, #+20]
   \   00000024   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x9800             LDR      R0,[SP, #+0]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000036   0x6028             STR      R0,[R5, #+0]
   \   00000038   0x6828             LDR      R0,[R5, #+0]
   \   0000003A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0x6828             LDR      R0,[R5, #+0]
   \   00000048   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000004C   0x6028             STR      R0,[R5, #+0]
   \   0000004E   0x6828             LDR      R0,[R5, #+0]
   \   00000050   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x20F0             MOVS     R0,#+240
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x9002             STR      R0,[SP, #+8]
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x9003             STR      R0,[SP, #+12]
   \   00000064   0x2003             MOVS     R0,#+3
   \   00000066   0x9004             STR      R0,[SP, #+16]
   \   00000068   0x2005             MOVS     R0,#+5
   \   0000006A   0x9005             STR      R0,[SP, #+20]
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   00000070   0x.... 0x....      BL       HAL_GPIO_Init
   1164          	  
   1165          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
   1166          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1167          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
   1168          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1169          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1170          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1171          		
   1172          	  /* Peripheral interrupt init*/
   1173          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x2023             MOVS     R0,#+35
   \   0000007A   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1174          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   0000007E   0x2023             MOVS     R0,#+35
   \   00000080   0xE1F4             B.N      ??HAL_SPI_MspInit_1
   1175          	  /* USER CODE BEGIN SPI1_MspInit 1 */
   1176          	  
   1177          	  /* USER CODE END SPI1_MspInit 1 */
   1178          
   1179            }
   1180            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable20_6  ;; 0x40003800
   \   00000086   0x4288             CMP      R0,R1
   \   00000088   0xD152             BNE.N    ??HAL_SPI_MspInit_2
   1181            {
   1182          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1183          	  
   1184          	  /* USER CODE END SPI2_MspInit 0 */
   1185          		/* Peripheral clock enable */
   1186          		__SPI2_CLK_ENABLE();
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x.... 0x....      LDR.W    R5,??DataTable13  ;; 0x40023830
   \   00000090   0x9000             STR      R0,[SP, #+0]
   1187          		__GPIOI_CLK_ENABLE();
   1188          		__GPIOB_CLK_ENABLE();
   1189          		__GPIOC_CLK_ENABLE();
   1190          	  
   1191          		/**I2S2 GPIO Configuration	   
   1192          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1193          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1194          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1195          	  
   1196          	  
   1197          		*/
   1198          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   1199          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1200          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1201          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1202          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1203          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000092   0xA901             ADD      R1,SP,#+4
   \   00000094   0x6928             LDR      R0,[R5, #+16]
   \   00000096   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   0000009A   0x6128             STR      R0,[R5, #+16]
   \   0000009C   0x6928             LDR      R0,[R5, #+16]
   \   0000009E   0xF400 0x4080      AND      R0,R0,#0x4000
   \   000000A2   0x9000             STR      R0,[SP, #+0]
   \   000000A4   0x9800             LDR      R0,[SP, #+0]
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x9000             STR      R0,[SP, #+0]
   \   000000AA   0x6828             LDR      R0,[R5, #+0]
   \   000000AC   0xF440 0x7080      ORR      R0,R0,#0x100
   \   000000B0   0x6028             STR      R0,[R5, #+0]
   \   000000B2   0x6828             LDR      R0,[R5, #+0]
   \   000000B4   0xF400 0x7080      AND      R0,R0,#0x100
   \   000000B8   0x9000             STR      R0,[SP, #+0]
   \   000000BA   0x9800             LDR      R0,[SP, #+0]
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0x6828             LDR      R0,[R5, #+0]
   \   000000C2   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000C6   0x6028             STR      R0,[R5, #+0]
   \   000000C8   0x6828             LDR      R0,[R5, #+0]
   \   000000CA   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \   000000D0   0x9800             LDR      R0,[SP, #+0]
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x9000             STR      R0,[SP, #+0]
   \   000000D6   0x6828             LDR      R0,[R5, #+0]
   \   000000D8   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000DC   0x6028             STR      R0,[R5, #+0]
   \   000000DE   0x6828             LDR      R0,[R5, #+0]
   \   000000E0   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000E4   0x9000             STR      R0,[SP, #+0]
   \   000000E6   0x9800             LDR      R0,[SP, #+0]
   \   000000E8   0x2002             MOVS     R0,#+2
   \   000000EA   0x9001             STR      R0,[SP, #+4]
   \   000000EC   0x9002             STR      R0,[SP, #+8]
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x9003             STR      R0,[SP, #+12]
   \   000000F2   0x2003             MOVS     R0,#+3
   \   000000F4   0x9004             STR      R0,[SP, #+16]
   \   000000F6   0x2005             MOVS     R0,#+5
   \   000000F8   0x9005             STR      R0,[SP, #+20]
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable20_12  ;; 0x40020800
   \   000000FE   0x.... 0x....      BL       HAL_GPIO_Init
   1204          	  
   1205          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   00000102   0xF44F 0x5040      MOV      R0,#+12288
   1206          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1207          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1208          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1209          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1210          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000106   0xA901             ADD      R1,SP,#+4
   \   00000108   0x9001             STR      R0,[SP, #+4]
   \   0000010A   0x2002             MOVS     R0,#+2
   \   0000010C   0x9002             STR      R0,[SP, #+8]
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x9003             STR      R0,[SP, #+12]
   \   00000112   0x2003             MOVS     R0,#+3
   \   00000114   0x9004             STR      R0,[SP, #+16]
   \   00000116   0x2005             MOVS     R0,#+5
   \   00000118   0x9005             STR      R0,[SP, #+20]
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable20_13  ;; 0x40020400
   \   0000011E   0x.... 0x....      BL       HAL_GPIO_Init
   1211          	  
   1212          	  
   1213          		/* Peripheral interrupt init*/
   1214          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   00000122   0x2200             MOVS     R2,#+0
   \   00000124   0x2101             MOVS     R1,#+1
   \   00000126   0x2024             MOVS     R0,#+36
   \   00000128   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1215          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   0000012C   0x2024             MOVS     R0,#+36
   \   0000012E   0xE19D             B.N      ??HAL_SPI_MspInit_1
   1216          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1217          	  
   1218          	  /* USER CODE END SPI2_MspInit 1 */
   1219          
   1220          
   1221            }
   1222            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   00000130   0x.... 0x....      LDR.W    R1,??DataTable20_14  ;; 0x40003c00
   \   00000134   0x4288             CMP      R0,R1
   \   00000136   0xF040 0x8098      BNE.W    ??HAL_SPI_MspInit_3
   1223            {
   1224          	  
   1225              /**I2S3 GPIO Configuration    
   1226                 PB2     ------> I2S3_SD
   1227                 PA15     ------> I2S3_WS (LRCK)
   1228                 PB3     ------> I2S3_CK 
   1229          	   PC7    ------> MCLK
   1230              */
   1231           
   1232            /* USER CODE BEGIN SPI3_MspInit 1 */
   1233            __SPI3_CLK_ENABLE();
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   0000013E   0x9000             STR      R0,[SP, #+0]
   1234            __GPIOA_CLK_ENABLE();
   1235            __GPIOB_CLK_ENABLE();
   1236          
   1237            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   1238            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1239            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1240            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1241            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1242            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000140   0xA901             ADD      R1,SP,#+4
   \   00000142   0x6928             LDR      R0,[R5, #+16]
   \   00000144   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   00000148   0x6128             STR      R0,[R5, #+16]
   \   0000014A   0x6928             LDR      R0,[R5, #+16]
   \   0000014C   0xF400 0x4000      AND      R0,R0,#0x8000
   \   00000150   0x9000             STR      R0,[SP, #+0]
   \   00000152   0x9800             LDR      R0,[SP, #+0]
   \   00000154   0x2000             MOVS     R0,#+0
   \   00000156   0x9000             STR      R0,[SP, #+0]
   \   00000158   0x6828             LDR      R0,[R5, #+0]
   \   0000015A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000015E   0x6028             STR      R0,[R5, #+0]
   \   00000160   0x6828             LDR      R0,[R5, #+0]
   \   00000162   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000166   0x9000             STR      R0,[SP, #+0]
   \   00000168   0x9800             LDR      R0,[SP, #+0]
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0x9000             STR      R0,[SP, #+0]
   \   0000016E   0x6828             LDR      R0,[R5, #+0]
   \   00000170   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000174   0x6028             STR      R0,[R5, #+0]
   \   00000176   0x6828             LDR      R0,[R5, #+0]
   \   00000178   0xF000 0x0002      AND      R0,R0,#0x2
   \   0000017C   0x9000             STR      R0,[SP, #+0]
   \   0000017E   0x9800             LDR      R0,[SP, #+0]
   \   00000180   0x200C             MOVS     R0,#+12
   \   00000182   0x9001             STR      R0,[SP, #+4]
   \   00000184   0x2002             MOVS     R0,#+2
   \   00000186   0x9002             STR      R0,[SP, #+8]
   \   00000188   0x2003             MOVS     R0,#+3
   \   0000018A   0x9004             STR      R0,[SP, #+16]
   \   0000018C   0x2000             MOVS     R0,#+0
   \   0000018E   0x9003             STR      R0,[SP, #+12]
   \   00000190   0x2006             MOVS     R0,#+6
   \   00000192   0x9005             STR      R0,[SP, #+20]
   \   00000194   0x.... 0x....      LDR.W    R0,??DataTable20_13  ;; 0x40020400
   \   00000198   0x.... 0x....      BL       HAL_GPIO_Init
   1243          
   1244          
   1245            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   0000019C   0xF44F 0x4000      MOV      R0,#+32768
   1246            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1247            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1248            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   000001A0   0xA901             ADD      R1,SP,#+4
   \   000001A2   0x9001             STR      R0,[SP, #+4]
   \   000001A4   0x2002             MOVS     R0,#+2
   \   000001A6   0x9002             STR      R0,[SP, #+8]
   \   000001A8   0x2006             MOVS     R0,#+6
   \   000001AA   0x9005             STR      R0,[SP, #+20]
   \   000001AC   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40020000
   \   000001AE   0x.... 0x....      BL       HAL_GPIO_Init
   1249          
   1250          #ifdef CODEC_MCLK_ENABLED
   1251            __GPIOC_CLK_ENABLE();
   \   000001B2   0x2000             MOVS     R0,#+0
   1252            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   1253            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1254            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1255            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1256            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1257            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   000001B4   0xA901             ADD      R1,SP,#+4
   \   000001B6   0x9000             STR      R0,[SP, #+0]
   \   000001B8   0x6828             LDR      R0,[R5, #+0]
   \   000001BA   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000001BE   0x6028             STR      R0,[R5, #+0]
   \   000001C0   0x6828             LDR      R0,[R5, #+0]
   \   000001C2   0xF000 0x0004      AND      R0,R0,#0x4
   \   000001C6   0x9000             STR      R0,[SP, #+0]
   \   000001C8   0x9800             LDR      R0,[SP, #+0]
   \   000001CA   0x2080             MOVS     R0,#+128
   \   000001CC   0x9001             STR      R0,[SP, #+4]
   \   000001CE   0x2002             MOVS     R0,#+2
   \   000001D0   0x9002             STR      R0,[SP, #+8]
   \   000001D2   0x2003             MOVS     R0,#+3
   \   000001D4   0x9004             STR      R0,[SP, #+16]
   \   000001D6   0x2000             MOVS     R0,#+0
   \   000001D8   0x9003             STR      R0,[SP, #+12]
   \   000001DA   0x2006             MOVS     R0,#+6
   \   000001DC   0x9005             STR      R0,[SP, #+20]
   \   000001DE   0x.... 0x....      LDR.W    R0,??DataTable20_12  ;; 0x40020800
   \   000001E2   0x.... 0x....      BL       HAL_GPIO_Init
   1258          
   1259          #endif /* CODEC_MCLK_ENABLED */ 
   1260          
   1261          #ifdef I2S_INTERRUPT   
   1262               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1263               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1264               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1265          
   1266               /* Enable the I2S DMA request */
   1267               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1268               //__HAL_I2S_ENABLE(&hi2s3);
   1269            	    /* Peripheral interrupt init*/
   1270          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1271          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1272          #endif
   1273          
   1274                /* Enable the DMA clock */ 
   1275          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   000001E6   0x2000             MOVS     R0,#+0
   \   000001E8   0x9000             STR      R0,[SP, #+0]
   \   000001EA   0x6828             LDR      R0,[R5, #+0]
   \   000001EC   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000001F0   0x6028             STR      R0,[R5, #+0]
   \   000001F2   0x6828             LDR      R0,[R5, #+0]
   1276          
   1277                /* Configure the DMA Stream */
   1278                //HAL_DMA_DeInit(&DmaHandle);
   1279          
   1280                /* Set the parameters to be configured */ 
   1281          	  DmaHandle.Instance = DMA1_Stream7;
   \   000001F4   0x.... 0x....      LDR.W    R5,??DataTable20_15
   \   000001F8   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000001FC   0x9000             STR      R0,[SP, #+0]
   \   000001FE   0x9800             LDR      R0,[SP, #+0]
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable20_16  ;; 0x400260b8
   \   00000204   0x6028             STR      R0,[R5, #+0]
   1282                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   00000206   0x2000             MOVS     R0,#+0
   \   00000208   0x6068             STR      R0,[R5, #+4]
   1283          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   0000020A   0x2040             MOVS     R0,#+64
   \   0000020C   0x60A8             STR      R0,[R5, #+8]
   1284          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   0000020E   0x2000             MOVS     R0,#+0
   \   00000210   0x60E8             STR      R0,[R5, #+12]
   1285          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   00000212   0xF44F 0x6080      MOV      R0,#+1024
   \   00000216   0x6128             STR      R0,[R5, #+16]
   1286          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   00000218   0xF44F 0x6000      MOV      R0,#+2048
   \   0000021C   0x6168             STR      R0,[R5, #+20]
   1287                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   0000021E   0xF44F 0x5000      MOV      R0,#+8192
   \   00000222   0x61A8             STR      R0,[R5, #+24]
   1288          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   00000224   0x2000             MOVS     R0,#+0
   \   00000226   0x61E8             STR      R0,[R5, #+28]
   1289                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   00000228   0xF44F 0x3000      MOV      R0,#+131072
   \   0000022C   0x6228             STR      R0,[R5, #+32]
   1290          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   0000022E   0x2004             MOVS     R0,#+4
   \   00000230   0x6268             STR      R0,[R5, #+36]
   1291                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   00000232   0x2003             MOVS     R0,#+3
   \   00000234   0x62A8             STR      R0,[R5, #+40]
   1292                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   00000236   0x2000             MOVS     R0,#+0
   \   00000238   0x62E8             STR      R0,[R5, #+44]
   1293                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   0000023A   0x6328             STR      R0,[R5, #+48]
   1294                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1295                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1296                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1297                //DmaHandle.XferCpltCallback = &TC_Callback;
   1298           
   1299          
   1300                /* Associate the initialized DMA handle to the the SPI handle */
   1301                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   1302                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1303          
   1304          	   /* Deinitialize the Stream for new transfer */
   1305                 HAL_DMA_DeInit(&DmaHandle);
   \   0000023C   0x4628             MOV      R0,R5
   \   0000023E   0x6565             STR      R5,[R4, #+84]
   \   00000240   0x63AC             STR      R4,[R5, #+56]
   \   00000242   0x.... 0x....      BL       HAL_DMA_DeInit
   1306                 /* Configure the DMA Stream */
   1307          	   HAL_DMA_Init(&DmaHandle);
   \   00000246   0x4628             MOV      R0,R5
   \   00000248   0x.... 0x....      BL       HAL_DMA_Init
   1308          
   1309                /* Set Interrupt Group Priority */
   1310                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   0000024C   0x2200             MOVS     R2,#+0
   \   0000024E   0x2100             MOVS     R1,#+0
   \   00000250   0x202F             MOVS     R0,#+47
   \   00000252   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1311                /* Enable the DMA STREAM global Interrupt */
   1312                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   00000256   0x202F             MOVS     R0,#+47
   \   00000258   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1313          
   1314          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   0000025C   0x6828             LDR      R0,[R5, #+0]
   \   0000025E   0x6801             LDR      R1,[R0, #+0]
   \   00000260   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000264   0x6001             STR      R1,[R0, #+0]
   1315          	    
   1316            }
   1317            else if(hspi->Instance==SPI4)
   1318            {
   1319            /* USER CODE BEGIN SPI4_MspInit 0 */
   1320          
   1321            /* USER CODE END SPI4_MspInit 0 */
   1322              /* Peripheral clock enable */
   1323              __SPI4_CLK_ENABLE();
   1324              __HAL_RCC_GPIOE_CLK_ENABLE();
   1325            
   1326            
   1327              /**SPI4 GPIO Configuration    
   1328              PE2     ------> SPI4_SCK
   1329              PE4     ------> SPI4_NSS
   1330              PE5     ------> SPI4_MISO
   1331              PE6     ------> SPI4_MOSI 
   1332              */
   1333              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   1334              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1335              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1336              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1337              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   1338              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   1339          
   1340          	/* Peripheral interrupt init*/
   1341              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   1342              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   1343          
   1344            /* USER CODE BEGIN SPI4_MspInit 1 */
   1345          
   1346            /* USER CODE END SPI4_MspInit 1 */
   1347            }
   1348            else if(hspi->Instance==SPI5)
   1349            {
   1350            /* USER CODE BEGIN SPI5_MspInit 0 */
   1351          
   1352            /* USER CODE END SPI5_MspInit 0 */
   1353              /* Peripheral clock enable */
   1354              __HAL_RCC_SPI5_CLK_ENABLE();
   1355              __HAL_RCC_GPIOF_CLK_ENABLE();
   1356            
   1357              /**SPI5 GPIO Configuration    
   1358              PF7     ------> SPI5_SCK  --> PF7
   1359              PF11     ------> SPI5_MOSI --> PF9
   1360                               SPI5_MISO --> PF8
   1361                                    NSS   -->  PF6
   1362              */
   1363              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   1364              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   1365              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1366              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1367              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   1368              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   1369          
   1370          #if 0
   1371            /* Peripheral interrupt init*/
   1372              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1373              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1374          #else
   1375          	/* Peripheral DMA init*/
   1376              __HAL_RCC_DMA2_CLK_ENABLE();
   1377          	hdma_spi5_rx.Instance = DMA2_Stream5;
   1378          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   1379          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1380          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1381          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   1382          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1383          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   1384          	hdma_spi5_rx.Init.Mode = DMA_NORMAL;
   1385          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1386          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1387          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1388          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_INC4;
   1389          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_INC4;
   1390          	HAL_DMA_Init(&hdma_spi5_rx);
   1391          
   1392              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   1393          
   1394          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1395          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   1396          
   1397          #endif
   1398            /* USER CODE END SPI5_MspInit 1 */
   1399            }
   1400            else if(hspi->Instance==SPI6)
   1401            {
   1402            /* USER CODE BEGIN SPI6_MspInit 0 */
   1403          
   1404            /* USER CODE END SPI6_MspInit 0 */
   1405              /* Peripheral clock enable */
   1406              __SPI6_CLK_ENABLE();
   1407              __HAL_RCC_GPIOG_CLK_ENABLE();
   1408            
   1409              /**SPI6 GPIO Configuration    
   1410              PG13     ------> SPI6_SCK
   1411              PG14     ------> SPI6_MOSI 
   1412              */
   1413              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   1414              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1415              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1416              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1417              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   1418              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   1419          
   1420          #if 0
   1421          	  /* Peripheral interrupt init*/
   1422              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1423              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1424          #else
   1425          	/* Peripheral DMA init*/
   1426          	__HAL_RCC_DMA2_CLK_ENABLE();
   1427          	hdma_spi6_rx.Instance = DMA2_Stream6;
   1428          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   1429          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1430          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1431          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   1432          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1433          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1434          	hdma_spi6_rx.Init.Mode = DMA_NORMAL;
   1435          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1436          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1437          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1438          	hdma_spi6_rx.Init.MemBurst = DMA_PBURST_INC4;
   1439          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_INC4;
   1440          	HAL_DMA_Init(&hdma_spi6_rx);
   1441          
   1442          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   1443          
   1444          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1445          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   1446          
   1447          #endif
   1448            }
   1449          
   1450          }
   \   00000266   0xB007             ADD      SP,SP,#+28
   \   00000268   0xBD30             POP      {R4,R5,PC}
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   0000026A   0x.... 0x....      LDR.W    R1,??DataTable20_9  ;; 0x40013400
   \   0000026E   0x4288             CMP      R0,R1
   \   00000270   0xD12C             BNE.N    ??HAL_SPI_MspInit_4
   \   00000272   0x2000             MOVS     R0,#+0
   \   00000274   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   00000276   0x9000             STR      R0,[SP, #+0]
   \   00000278   0xA901             ADD      R1,SP,#+4
   \   0000027A   0x6968             LDR      R0,[R5, #+20]
   \   0000027C   0xF440 0x5000      ORR      R0,R0,#0x2000
   \   00000280   0x6168             STR      R0,[R5, #+20]
   \   00000282   0x6968             LDR      R0,[R5, #+20]
   \   00000284   0xF400 0x5000      AND      R0,R0,#0x2000
   \   00000288   0x9000             STR      R0,[SP, #+0]
   \   0000028A   0x9800             LDR      R0,[SP, #+0]
   \   0000028C   0x2000             MOVS     R0,#+0
   \   0000028E   0x9000             STR      R0,[SP, #+0]
   \   00000290   0x6828             LDR      R0,[R5, #+0]
   \   00000292   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000296   0x6028             STR      R0,[R5, #+0]
   \   00000298   0x6828             LDR      R0,[R5, #+0]
   \   0000029A   0xF000 0x0010      AND      R0,R0,#0x10
   \   0000029E   0x9000             STR      R0,[SP, #+0]
   \   000002A0   0x9800             LDR      R0,[SP, #+0]
   \   000002A2   0x2074             MOVS     R0,#+116
   \   000002A4   0x9001             STR      R0,[SP, #+4]
   \   000002A6   0x2002             MOVS     R0,#+2
   \   000002A8   0x9002             STR      R0,[SP, #+8]
   \   000002AA   0x2000             MOVS     R0,#+0
   \   000002AC   0x9003             STR      R0,[SP, #+12]
   \   000002AE   0x2003             MOVS     R0,#+3
   \   000002B0   0x9004             STR      R0,[SP, #+16]
   \   000002B2   0x2005             MOVS     R0,#+5
   \   000002B4   0x9005             STR      R0,[SP, #+20]
   \   000002B6   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x40021000
   \   000002BA   0x.... 0x....      BL       HAL_GPIO_Init
   \   000002BE   0x2200             MOVS     R2,#+0
   \   000002C0   0x2102             MOVS     R1,#+2
   \   000002C2   0x2054             MOVS     R0,#+84
   \   000002C4   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   000002C8   0x2054             MOVS     R0,#+84
   \   000002CA   0xE0CF             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   000002CC   0x.... 0x....      LDR.W    R1,??DataTable20_11  ;; 0x40015000
   \   000002D0   0x4288             CMP      R0,R1
   \   000002D2   0xD162             BNE.N    ??HAL_SPI_MspInit_5
   \   000002D4   0x2000             MOVS     R0,#+0
   \   000002D6   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   000002D8   0x9000             STR      R0,[SP, #+0]
   \   000002DA   0xA901             ADD      R1,SP,#+4
   \   000002DC   0x6968             LDR      R0,[R5, #+20]
   \   000002DE   0xF440 0x1080      ORR      R0,R0,#0x100000
   \   000002E2   0x6168             STR      R0,[R5, #+20]
   \   000002E4   0x6968             LDR      R0,[R5, #+20]
   \   000002E6   0xF400 0x1080      AND      R0,R0,#0x100000
   \   000002EA   0x9000             STR      R0,[SP, #+0]
   \   000002EC   0x9800             LDR      R0,[SP, #+0]
   \   000002EE   0x2000             MOVS     R0,#+0
   \   000002F0   0x9000             STR      R0,[SP, #+0]
   \   000002F2   0x6828             LDR      R0,[R5, #+0]
   \   000002F4   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000002F8   0x6028             STR      R0,[R5, #+0]
   \   000002FA   0x6828             LDR      R0,[R5, #+0]
   \   000002FC   0xF000 0x0020      AND      R0,R0,#0x20
   \   00000300   0x9000             STR      R0,[SP, #+0]
   \   00000302   0x9800             LDR      R0,[SP, #+0]
   \   00000304   0xF44F 0x7070      MOV      R0,#+960
   \   00000308   0x9001             STR      R0,[SP, #+4]
   \   0000030A   0x2012             MOVS     R0,#+18
   \   0000030C   0x9002             STR      R0,[SP, #+8]
   \   0000030E   0x2001             MOVS     R0,#+1
   \   00000310   0x9003             STR      R0,[SP, #+12]
   \   00000312   0x2003             MOVS     R0,#+3
   \   00000314   0x9004             STR      R0,[SP, #+16]
   \   00000316   0x2005             MOVS     R0,#+5
   \   00000318   0x9005             STR      R0,[SP, #+20]
   \   0000031A   0x.... 0x....      LDR.W    R0,??DataTable20_17  ;; 0x40021400
   \   0000031E   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000322   0x2000             MOVS     R0,#+0
   \   00000324   0x9000             STR      R0,[SP, #+0]
   \   00000326   0x6828             LDR      R0,[R5, #+0]
   \   00000328   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   0000032C   0x6028             STR      R0,[R5, #+0]
   \   0000032E   0x6828             LDR      R0,[R5, #+0]
   \   00000330   0x.... 0x....      LDR.W    R5,??DataTable20_18
   \   00000334   0xF400 0x0080      AND      R0,R0,#0x400000
   \   00000338   0x9000             STR      R0,[SP, #+0]
   \   0000033A   0x9800             LDR      R0,[SP, #+0]
   \   0000033C   0x.... 0x....      LDR.W    R0,??DataTable20_16  ;; 0x400260b8
   \   00000340   0xF500 0x7074      ADD      R0,R0,#+976
   \   00000344   0x6028             STR      R0,[R5, #+0]
   \   00000346   0xF04F 0x6060      MOV      R0,#+234881024
   \   0000034A   0x6068             STR      R0,[R5, #+4]
   \   0000034C   0x2000             MOVS     R0,#+0
   \   0000034E   0x60A8             STR      R0,[R5, #+8]
   \   00000350   0x60E8             STR      R0,[R5, #+12]
   \   00000352   0xF44F 0x6080      MOV      R0,#+1024
   \   00000356   0x6128             STR      R0,[R5, #+16]
   \   00000358   0xF44F 0x6000      MOV      R0,#+2048
   \   0000035C   0x6168             STR      R0,[R5, #+20]
   \   0000035E   0xF44F 0x5000      MOV      R0,#+8192
   \   00000362   0x61A8             STR      R0,[R5, #+24]
   \   00000364   0x2000             MOVS     R0,#+0
   \   00000366   0x61E8             STR      R0,[R5, #+28]
   \   00000368   0xF44F 0x3000      MOV      R0,#+131072
   \   0000036C   0x6228             STR      R0,[R5, #+32]
   \   0000036E   0x2000             MOVS     R0,#+0
   \   00000370   0x6268             STR      R0,[R5, #+36]
   \   00000372   0x2003             MOVS     R0,#+3
   \   00000374   0x62A8             STR      R0,[R5, #+40]
   \   00000376   0xF44F 0x0000      MOV      R0,#+8388608
   \   0000037A   0x62E8             STR      R0,[R5, #+44]
   \   0000037C   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000380   0x6328             STR      R0,[R5, #+48]
   \   00000382   0x4628             MOV      R0,R5
   \   00000384   0x.... 0x....      BL       HAL_DMA_Init
   \   00000388   0x65A5             STR      R5,[R4, #+88]
   \   0000038A   0x2200             MOVS     R2,#+0
   \   0000038C   0x63AC             STR      R4,[R5, #+56]
   \   0000038E   0x2104             MOVS     R1,#+4
   \   00000390   0x2044             MOVS     R0,#+68
   \   00000392   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000396   0x2044             MOVS     R0,#+68
   \   00000398   0xE068             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   0000039A   0x.... 0x....      LDR.W    R1,??DataTable20_10  ;; 0x40015400
   \   0000039E   0x4288             CMP      R0,R1
   \   000003A0   0xD166             BNE.N    ??HAL_SPI_MspInit_6
   \   000003A2   0x2000             MOVS     R0,#+0
   \   000003A4   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   000003A6   0x9000             STR      R0,[SP, #+0]
   \   000003A8   0xA901             ADD      R1,SP,#+4
   \   000003AA   0x6968             LDR      R0,[R5, #+20]
   \   000003AC   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000003B0   0x6168             STR      R0,[R5, #+20]
   \   000003B2   0x6968             LDR      R0,[R5, #+20]
   \   000003B4   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000003B8   0x9000             STR      R0,[SP, #+0]
   \   000003BA   0x9800             LDR      R0,[SP, #+0]
   \   000003BC   0x2000             MOVS     R0,#+0
   \   000003BE   0x9000             STR      R0,[SP, #+0]
   \   000003C0   0x6828             LDR      R0,[R5, #+0]
   \   000003C2   0xF040 0x0040      ORR      R0,R0,#0x40
   \   000003C6   0x6028             STR      R0,[R5, #+0]
   \   000003C8   0x6828             LDR      R0,[R5, #+0]
   \   000003CA   0xF000 0x0040      AND      R0,R0,#0x40
   \   000003CE   0x9000             STR      R0,[SP, #+0]
   \   000003D0   0x9800             LDR      R0,[SP, #+0]
   \   000003D2   0xF44F 0x40C0      MOV      R0,#+24576
   \   000003D6   0x9001             STR      R0,[SP, #+4]
   \   000003D8   0x2002             MOVS     R0,#+2
   \   000003DA   0x9002             STR      R0,[SP, #+8]
   \   000003DC   0x2000             MOVS     R0,#+0
   \   000003DE   0x9003             STR      R0,[SP, #+12]
   \   000003E0   0x2003             MOVS     R0,#+3
   \   000003E2   0x9004             STR      R0,[SP, #+16]
   \   000003E4   0x2005             MOVS     R0,#+5
   \   000003E6   0x9005             STR      R0,[SP, #+20]
   \   000003E8   0x.... 0x....      LDR.W    R0,??DataTable20_19  ;; 0x40021800
   \   000003EC   0x.... 0x....      BL       HAL_GPIO_Init
   \   000003F0   0x2000             MOVS     R0,#+0
   \   000003F2   0x9000             STR      R0,[SP, #+0]
   \   000003F4   0x6828             LDR      R0,[R5, #+0]
   \   000003F6   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000003FA   0x6028             STR      R0,[R5, #+0]
   \   000003FC   0x6828             LDR      R0,[R5, #+0]
   \   000003FE   0x.... 0x....      LDR.W    R5,??DataTable20_18
   \   00000402   0xF400 0x0080      AND      R0,R0,#0x400000
   \   00000406   0x9000             STR      R0,[SP, #+0]
   \   00000408   0x9800             LDR      R0,[SP, #+0]
   \   0000040A   0x.... 0x....      LDR.W    R0,??DataTable20_16  ;; 0x400260b8
   \   0000040E   0xF500 0x707A      ADD      R0,R0,#+1000
   \   00000412   0x65A8             STR      R0,[R5, #+88]
   \   00000414   0xF04F 0x7000      MOV      R0,#+33554432
   \   00000418   0x65E8             STR      R0,[R5, #+92]
   \   0000041A   0x2000             MOVS     R0,#+0
   \   0000041C   0x6628             STR      R0,[R5, #+96]
   \   0000041E   0x6668             STR      R0,[R5, #+100]
   \   00000420   0xF44F 0x6080      MOV      R0,#+1024
   \   00000424   0x66A8             STR      R0,[R5, #+104]
   \   00000426   0xF44F 0x6000      MOV      R0,#+2048
   \   0000042A   0x66E8             STR      R0,[R5, #+108]
   \   0000042C   0x6728             STR      R0,[R5, #+112]
   \   0000042E   0x2000             MOVS     R0,#+0
   \   00000430   0x6768             STR      R0,[R5, #+116]
   \   00000432   0xF44F 0x3000      MOV      R0,#+131072
   \   00000436   0x67A8             STR      R0,[R5, #+120]
   \   00000438   0x2000             MOVS     R0,#+0
   \   0000043A   0x67E8             STR      R0,[R5, #+124]
   \   0000043C   0x2003             MOVS     R0,#+3
   \   0000043E   0xF8C5 0x0080      STR      R0,[R5, #+128]
   \   00000442   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000446   0xF8C5 0x0084      STR      R0,[R5, #+132]
   \   0000044A   0xF8C5 0x0088      STR      R0,[R5, #+136]
   \   0000044E   0xF105 0x0058      ADD      R0,R5,#+88
   \   00000452   0x.... 0x....      BL       HAL_DMA_Init
   \   00000456   0xF105 0x0058      ADD      R0,R5,#+88
   \   0000045A   0x2201             MOVS     R2,#+1
   \   0000045C   0x65A0             STR      R0,[R4, #+88]
   \   0000045E   0x2103             MOVS     R1,#+3
   \   00000460   0xF8C5 0x4090      STR      R4,[R5, #+144]
   \   00000464   0x2045             MOVS     R0,#+69
   \   00000466   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   0000046A   0x2045             MOVS     R0,#+69
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   0000046C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \                     ??HAL_SPI_MspInit_6: (+1)
   \   00000470   0xB007             ADD      SP,SP,#+28
   \   00000472   0xBD30             POP      {R4,R5,PC}       ;; return
   1451          
   1452          
   1453          
   1454          
   1455          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1456          {
   1457            /* Check the parameters */
   1458            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1459            
   1460            /* Write in the DR register the data to be sent */
   1461            SPIx->DR = Data;
   1462          }
   1463          
   1464          
   1465          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1466          {
   1467            /* Check the parameters */
   1468            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1469            
   1470            /* Return the data in the DR register */
   1471            return SPIx->DR;
   1472          }
   1473          
   1474          

   \                                 In section .text, align 2, keep-with-next
   1475          void RecordUpdBuf(void)
   1476          {
   1477          
   1478               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_20
   \   00000004   0xF890 0x1080      LDRB     R1,[R0, #+128]
   \   00000008   0x2902             CMP      R1,#+2
   \   0000000A   0xF040 0x80FD      BNE.W    ??RecordUpdBuf_0
   1479               {
   1480                  WaveRecord_flgInt=0;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xF880 0x1080      STRB     R1,[R0, #+128]
   1481          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable20_21
   \   00000018   0x880A             LDRH     R2,[R1, #+0]
   \   0000001A   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000001E   0xBFBE             ITTT     LT 
   \   00000020   0x....             LDRLT.N  R2,??DataTable15
   \   00000022   0x8813             LDRHLT   R3,[R2, #+0]
   \   00000024   0xF5B3 0x6F80      CMPLT    R3,#+1024
   \   00000028   0xF280 0x80EE      BGE.W    ??RecordUpdBuf_0
   1482          		//			  &&(stLR!=stLROld))
   1483          			{
   1484          		/*-------------------------------------------------------------------------------------------------------------
   1485          					  
   1486          			Sequence  Record Data					  Processing Data				  Player Data
   1487          					  
   1488          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1489          					  
   1490          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1491          					  
   1492          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1493          		 ---------------------------------------------------------------------------------------------------------------*/
   1494          					  /* Recording Audio Data */						 
   1495          					   switch (buffer_switch)
   \   0000002C   0x.... 0x....      LDR.W    R3,??DataTable20_22
   \   00000030   0x781B             LDRB     R3,[R3, #+0]
   \   00000032   0xB123             CBZ.N    R3,??RecordUpdBuf_1
   \   00000034   0x2B02             CMP      R3,#+2
   \   00000036   0xF000 0x809E      BEQ.W    ??RecordUpdBuf_2
   \   0000003A   0xD34E             BCC.N    ??RecordUpdBuf_3
   \   0000003C   0x4770             BX       LR
   1496          					   {
   1497          								case BUF1_PLAY:
   1498          
   1499          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_1: (+1)
   \   0000003E   0x880B             LDRH     R3,[R1, #+0]
   \   00000040   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000044   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   00000048   0x....             LDR.N    R1,??DataTable17_1
   \   0000004A   0xF9B0 0xC088      LDRSH    R12,[R0, #+136]
   \   0000004E   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000052   0xF503 0x4380      ADD      R3,R3,#+16384
   \   00000056   0xF8A3 0xC000      STRH     R12,[R3, #+0]
   1500          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   0000005A   0x8813             LDRH     R3,[R2, #+0]
   \   0000005C   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000060   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000064   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000068   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   0000006C   0xF503 0x4390      ADD      R3,R3,#+18432
   \   00000070   0x801A             STRH     R2,[R3, #+0]
   1501          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   00000072   0x....             LDR.N    R2,??DataTable17_3
   \   00000074   0x8813             LDRH     R3,[R2, #+0]
   \   00000076   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000007A   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   0000007E   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000082   0xF9B0 0x208E      LDRSH    R2,[R0, #+142]
   \   00000086   0xF503 0x43A0      ADD      R3,R3,#+20480
   \   0000008A   0x801A             STRH     R2,[R3, #+0]
   1502          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   0000008C   0x....             LDR.N    R2,??DataTable17_4
   \   0000008E   0x8813             LDRH     R3,[R2, #+0]
   \   00000090   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000094   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000098   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000009C   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   000000A0   0xF503 0x43B0      ADD      R3,R3,#+22528
   \   000000A4   0x801A             STRH     R2,[R3, #+0]
   1503          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000000A6   0x....             LDR.N    R2,??DataTable17_7
   \   000000A8   0x8813             LDRH     R3,[R2, #+0]
   \   000000AA   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000AE   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000000B2   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000000B6   0xF9B0 0x2090      LDRSH    R2,[R0, #+144]
   \   000000BA   0xF503 0x43C0      ADD      R3,R3,#+24576
   \   000000BE   0x801A             STRH     R2,[R3, #+0]
   1504          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   000000C0   0x....             LDR.N    R2,??DataTable19
   \   000000C2   0x8813             LDRH     R3,[R2, #+0]
   \   000000C4   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000C8   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000000CC   0xF9B0 0x0092      LDRSH    R0,[R0, #+146]
   \   000000D0   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   000000D4   0xF501 0x41D0      ADD      R1,R1,#+26624
   \   000000D8   0xE095             B.N      ??RecordUpdBuf_4
   1505          	
   1506          										break;
   1507          								case BUF2_PLAY:
   1508          
   1509          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_3: (+1)
   \   000000DA   0x880B             LDRH     R3,[R1, #+0]
   \   000000DC   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000E0   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000E4   0x....             LDR.N    R1,??DataTable17_1
   \   000000E6   0xF9B0 0xC088      LDRSH    R12,[R0, #+136]
   \   000000EA   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000000EE   0xF503 0x4300      ADD      R3,R3,#+32768
   \   000000F2   0xF8A3 0xC000      STRH     R12,[R3, #+0]
   1510          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   000000F6   0x8813             LDRH     R3,[R2, #+0]
   \   000000F8   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000FC   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000100   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000104   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   00000108   0xF503 0x4308      ADD      R3,R3,#+34816
   \   0000010C   0x801A             STRH     R2,[R3, #+0]
   1511          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   0000010E   0x....             LDR.N    R2,??DataTable17_3
   \   00000110   0x8813             LDRH     R3,[R2, #+0]
   \   00000112   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000116   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   0000011A   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000011E   0xF9B0 0x208E      LDRSH    R2,[R0, #+142]
   \   00000122   0xF503 0x4310      ADD      R3,R3,#+36864
   \   00000126   0x801A             STRH     R2,[R3, #+0]
   1512          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   00000128   0x....             LDR.N    R2,??DataTable17_4
   \   0000012A   0x8813             LDRH     R3,[R2, #+0]
   \   0000012C   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000130   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000134   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000138   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   0000013C   0xF503 0x4318      ADD      R3,R3,#+38912
   \   00000140   0x801A             STRH     R2,[R3, #+0]
   1513          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   00000142   0x....             LDR.N    R2,??DataTable17_7
   \   00000144   0x8813             LDRH     R3,[R2, #+0]
   \   00000146   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000014A   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   0000014E   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000152   0xF9B0 0x2090      LDRSH    R2,[R0, #+144]
   \   00000156   0xF503 0x4320      ADD      R3,R3,#+40960
   \   0000015A   0x801A             STRH     R2,[R3, #+0]
   1514          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   0000015C   0x....             LDR.N    R2,??DataTable19
   \   0000015E   0x8813             LDRH     R3,[R2, #+0]
   \   00000160   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000164   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000168   0xF9B0 0x0092      LDRSH    R0,[R0, #+146]
   \   0000016C   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   00000170   0xF501 0x4128      ADD      R1,R1,#+43008
   \   00000174   0xE047             B.N      ??RecordUpdBuf_4
   1515          		
   1516          
   1517          										break;
   1518          								case BUF3_PLAY:
   1519          
   1520          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_2: (+1)
   \   00000176   0x880B             LDRH     R3,[R1, #+0]
   \   00000178   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000017C   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   00000180   0xF9B0 0xC088      LDRSH    R12,[R0, #+136]
   \   00000184   0x....             LDR.N    R1,??DataTable17_1
   \   00000186   0xF821 0xC013      STRH     R12,[R1, R3, LSL #+1]
   1521          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   0000018A   0x8813             LDRH     R3,[R2, #+0]
   \   0000018C   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000190   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000194   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000198   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   0000019C   0xF8A3 0x2800      STRH     R2,[R3, #+2048]
   1522          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   000001A0   0x....             LDR.N    R2,??DataTable17_3
   \   000001A2   0x8813             LDRH     R3,[R2, #+0]
   \   000001A4   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001A8   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000001AC   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001B0   0xF9B0 0x208E      LDRSH    R2,[R0, #+142]
   \   000001B4   0xF503 0x5380      ADD      R3,R3,#+4096
   \   000001B8   0x801A             STRH     R2,[R3, #+0]
   1523          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \   000001BA   0x....             LDR.N    R2,??DataTable17_4
   \   000001BC   0x8813             LDRH     R3,[R2, #+0]
   \   000001BE   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001C2   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000001C6   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001CA   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   000001CE   0xF503 0x53C0      ADD      R3,R3,#+6144
   \   000001D2   0x801A             STRH     R2,[R3, #+0]
   1524          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000001D4   0x....             LDR.N    R2,??DataTable17_7
   \   000001D6   0x8813             LDRH     R3,[R2, #+0]
   \   000001D8   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001DC   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000001E0   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001E4   0xF9B0 0x2090      LDRSH    R2,[R0, #+144]
   \   000001E8   0xF503 0x5300      ADD      R3,R3,#+8192
   \   000001EC   0x801A             STRH     R2,[R3, #+0]
   1525          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   \   000001EE   0x....             LDR.N    R2,??DataTable19
   \   000001F0   0x8813             LDRH     R3,[R2, #+0]
   \   000001F2   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001F6   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001FA   0xF9B0 0x0092      LDRSH    R0,[R0, #+146]
   \   000001FE   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   00000202   0xF501 0x5120      ADD      R1,R1,#+10240
   \                     ??RecordUpdBuf_4: (+1)
   \   00000206   0x8008             STRH     R0,[R1, #+0]
   1526          										break;
   1527          								default:
   1528          										break; 
   1529          					   }
   1530          				
   1531          				}
   1532                               
   1533               	}
   1534          }
   \                     ??RecordUpdBuf_0: (+1)
   \   00000208   0x4770             BX       LR               ;; return
   1535          
   1536          

   \                                 In section .text, align 2, keep-with-next
   1537          void DMA2_Stream5_IRQHandler(void)
   1538          {
   1539            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1540          
   1541            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1542            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_18
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1543            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1544          
   1545            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1546          }
   1547          
   1548          /**
   1549          * @brief This function handles DMA2 stream6 global interrupt.
   1550          */

   \                                 In section .text, align 2, keep-with-next
   1551          void DMA2_Stream6_IRQHandler(void)
   1552          {
   1553            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1554          
   1555            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1556            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_23
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1557            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1558          
   1559            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1560          }
   1561          

   \                                 In section .text, align 2, keep-with-next
   1562          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1563          {
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1564              if(hspi->Instance==SPI1)
   1565              {
   1566                  /* Copy Data to Record Buffer */
   1567          		//RecordUpdBuf();
   1568          		//XferCplt = 1;
   1569                  //Audio_Play_Out();
   1570              }
   1571              else if (hspi->Instance==SPI2)
   1572              {
   1573          
   1574              }
   1575              else if (hspi->Instance==SPI4)
   1576              {
   1577          
   1578              }
   1579          	else
   1580          	{
   1581          
   1582          	}
   1583          
   1584              if (hspi->Instance==SPI5)
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable20_11  ;; 0x40015000
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD12B             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1585              {
   1586                  MIC7Rec();
   \   0000000A   0x....             LDR.N    R4,??DataTable20_1
   \   0000000C   0xF44F 0x5280      MOV      R2,#+4096
   \   00000010   0xF894 0x0130      LDRB     R0,[R4, #+304]
   \   00000014   0xF080 0x0001      EOR      R0,R0,#0x1
   \   00000018   0xF884 0x0130      STRB     R0,[R4, #+304]
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xF884 0x0132      STRB     R0,[R4, #+306]
   \   00000022   0xF894 0x0130      LDRB     R0,[R4, #+304]
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0xBF0C             ITE      EQ 
   \   0000002C   0x....             LDREQ.N  R1,??DataTable20_24
   \   0000002E   0x....             LDRNE.N  R1,??DataTable20_7
   \   00000030   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1587          		MIC8Rec();
   \   00000034   0xF894 0x0131      LDRB     R0,[R4, #+305]
   \   00000038   0xF44F 0x5280      MOV      R2,#+4096
   \   0000003C   0xF080 0x0001      EOR      R0,R0,#0x1
   \   00000040   0xF884 0x0131      STRB     R0,[R4, #+305]
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xF884 0x0133      STRB     R0,[R4, #+307]
   \   0000004A   0xF894 0x0131      LDRB     R0,[R4, #+305]
   \   0000004E   0x2801             CMP      R0,#+1
   \   00000050   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000054   0xBF0C             ITE      EQ 
   \   00000056   0x....             LDREQ.N  R1,??DataTable20_25
   \   00000058   0x....             LDRNE.N  R1,??DataTable20_8
   \   0000005A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000005E   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1588              }
   1589              else
   1590              {
   1591                
   1592              }
   1593              
   1594              if (hspi->Instance==SPI6) //MIC8
   1595              {
   1596          #if 0							
   1597              if (swtSDO8==0x01)
   1598             {
   1599                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1600             }
   1601             else
   1602             {
   1603          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1604             }      
   1605             AudioUSBSend(idxFrmPDMMic8++);
   1606             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   1607             {
   1608                 swtSDO8^=0x01;
   1609                 WaveRecord_flgSDO8Finish = 1;
   1610                 idxFrmPDMMic8 = 0;
   1611          		RESET_IDX
   1612          		XferCplt = 0; // clear DMA interrupt flag
   1613          		switch (buffer_switch)
   1614          		{
   1615          	        case BUF1_PLAY: 		
   1616          	          buffer_switch = BUF3_PLAY;
   1617          	          break;
   1618          	        case BUF2_PLAY: 
   1619          	          buffer_switch = BUF1_PLAY;		
   1620          	          break;
   1621          	        case BUF3_PLAY: 	
   1622          	          buffer_switch = BUF2_PLAY;
   1623          	          break;
   1624          	        default:
   1625          	          break;
   1626          		}
   1627          		/* Last player Frame is finished */
   1628          		AudioPlayerUpd(); 		
   1629          		
   1630          		if (cntStrt<100) cntStrt++;		   
   1631                  
   1632             }
   1633          #else
   1634              
   1635          	
   1636          #endif
   1637          
   1638            }
   1639          }
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   00000062   0xBD10             POP      {R4,PC}          ;; return
   1640          

   \                                 In section .text, align 2, keep-with-next
   1641          void PDM2PCMSDO78(void)
   1642          {
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x....             LDR.N    R0,??DataTable20_22
   \   00000006   0xB083             SUB      SP,SP,#+12
   1643          static int16_t Mic7LPOld,Mic8LPOld;
                                ^
Warning[Pe177]: variable "Mic7LPOld" was declared but never referenced

  static int16_t Mic7LPOld,Mic8LPOld;
                           ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",1643  Warning[Pe177]: 
          variable "Mic8LPOld" was declared but never referenced

                 vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
                 ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",653  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

                 vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                 ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",723  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

  		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
  		^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",842  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

  		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
  		^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",847  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

                PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",884  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

                PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",889  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement
   1644          uint8_t buffer_switch_tmp;
   1645          
   1646          buffer_switch_tmp = buffer_switch;
   1647          
   1648          /*-------------------------------------------------------------------------------------------------------------
   1649          			  
   1650          	Sequence  Record Data					  Processing Data				  Player Data
   1651          			  
   1652          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1653          			  
   1654          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1655          			  
   1656          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1657           ---------------------------------------------------------------------------------------------------------------*/
   1658          	/* Data in Mic8 finished recording */
   1659          
   1660              /* Data in Mic7 finished recording */
   1661              if ((WaveRecord_flgSDO7Finish==1)&&(WaveRecord_flgSDO8Finish==1))
   \   00000008   0x.... 0x....      LDR.W    R11,??DataTable20_1
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0xF89B 0x0132      LDRB     R0,[R11, #+306]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xBF04             ITT      EQ 
   \   00000018   0xF89B 0x0133      LDRBEQ   R0,[R11, #+307]
   \   0000001C   0x2801             CMPEQ    R0,#+1
   \   0000001E   0xF040 0x80A3      BNE.W    ??PDM2PCMSDO78_0
   1662              {
   1663          		
   1664                  WaveRecord_flgSDO7Finish=0;
   \   00000022   0x2000             MOVS     R0,#+0
   1665                  WaveRecord_flgSDO8Finish=0;
   1666                  uint8_t swtSDO7_tmp;
   1667                  swtSDO7_tmp = swtSDO7;
   1668          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000024   0x2400             MOVS     R4,#+0
   \   00000026   0xF88B 0x0132      STRB     R0,[R11, #+306]
   \   0000002A   0x....             LDR.N    R5,??DataTable20_7
   \   0000002C   0xF88B 0x0133      STRB     R0,[R11, #+307]
   \   00000030   0xF89B 0x0130      LDRB     R0,[R11, #+304]
   \   00000034   0x....             LDR.N    R6,??DataTable20_8
   \   00000036   0x....             LDR.N    R7,??DataTable20_24
   \   00000038   0x.... 0x....      LDR.W    R8,??DataTable20_25
   \   0000003C   0x.... 0x....      LDR.W    R9,??DataTable20
   \   00000040   0x9000             STR      R0,[SP, #+0]
   1669          		{
   1670          	        if(swtSDO7_tmp==0x01)
   \                     ??PDM2PCMSDO78_1: (+1)
   \   00000042   0x9800             LDR      R0,[SP, #+0]
   \   00000044   0x2801             CMP      R0,#+1
   \   00000046   0xD110             BNE.N    ??PDM2PCMSDO78_2
   1671          	        {
   1672                              pDataMic7[i%64] = HTONS(TestSDO7[i]);	
   \   00000048   0x1160             ASRS     R0,R4,#+5
   \   0000004A   0x8829             LDRH     R1,[R5, #+0]
   \   0000004C   0xEB04 0x6090      ADD      R0,R4,R0, LSR #+26
   \   00000050   0x1180             ASRS     R0,R0,#+6
   \   00000052   0xEBA4 0x1080      SUB      R0,R4,R0, LSL #+6
   \   00000056   0x460A             MOV      R2,R1
   \   00000058   0x0209             LSLS     R1,R1,#+8
   \   0000005A   0xEB0B 0x0040      ADD      R0,R11,R0, LSL #+1
   \   0000005E   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   00000062   0xF8A0 0x11C4      STRH     R1,[R0, #+452]
   1673                              pDataMic8[i%64] = HTONS(TestSDO8[i]);
   \   00000066   0x8831             LDRH     R1,[R6, #+0]
   \   00000068   0xE010             B.N      ??PDM2PCMSDO78_3
   1674          	        }
   1675          	        else
   1676          	        {
   1677          		           pDataMic7[i%64] = HTONS(TestSDO7_1[i]);
   \                     ??PDM2PCMSDO78_2: (+1)
   \   0000006A   0x1160             ASRS     R0,R4,#+5
   \   0000006C   0x8839             LDRH     R1,[R7, #+0]
   \   0000006E   0xEB04 0x6090      ADD      R0,R4,R0, LSR #+26
   \   00000072   0x1180             ASRS     R0,R0,#+6
   \   00000074   0xEBA4 0x1080      SUB      R0,R4,R0, LSL #+6
   \   00000078   0x460A             MOV      R2,R1
   \   0000007A   0x0209             LSLS     R1,R1,#+8
   \   0000007C   0xEB0B 0x0040      ADD      R0,R11,R0, LSL #+1
   \   00000080   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   00000084   0xF8A0 0x11C4      STRH     R1,[R0, #+452]
   1678          				   pDataMic8[i%64] = HTONS(TestSDO8_1[i]);
   \   00000088   0xF8B8 0x1000      LDRH     R1,[R8, #+0]
   \                     ??PDM2PCMSDO78_3: (+1)
   \   0000008C   0x460A             MOV      R2,R1
   \   0000008E   0x0209             LSLS     R1,R1,#+8
   \   00000090   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   00000094   0xF8A0 0x1144      STRH     R1,[R0, #+324]
   1679          	        }
   1680          
   1681          	        /* PDM conversion for frame of 64 inputs, 16 outputs */
   1682          	        if (i%64==63)
   \   00000098   0x1160             ASRS     R0,R4,#+5
   \   0000009A   0xEB04 0x6090      ADD      R0,R4,R0, LSR #+26
   \   0000009E   0x1180             ASRS     R0,R0,#+6
   \   000000A0   0xEBA4 0x1180      SUB      R1,R4,R0, LSL #+6
   \   000000A4   0x293F             CMP      R1,#+63
   \   000000A6   0xD13B             BNE.N    ??PDM2PCMSDO78_4
   1683          	        {
   1684          				/* Put them in processing phase */
   1685          	          /* Recording Audio Data */						 
   1686          	          switch (buffer_switch_tmp)
   \   000000A8   0x9901             LDR      R1,[SP, #+4]
   \   000000AA   0xB119             CBZ.N    R1,??PDM2PCMSDO78_5
   \   000000AC   0x2902             CMP      R1,#+2
   \   000000AE   0xD023             BEQ.N    ??PDM2PCMSDO78_6
   \   000000B0   0xD311             BCC.N    ??PDM2PCMSDO78_7
   \   000000B2   0xE035             B.N      ??PDM2PCMSDO78_4
   1687          	          {
   1688          			              case BUF1_PLAY:								
   1689                                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 48 ,
   1690                                        (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_5: (+1)
   \   000000B4   0xEB09 0x1A40      ADD      R10,R9,R0, LSL #+5
   \   000000B8   0xF10B 0x03C8      ADD      R3,R11,#+200
   \   000000BC   0x2230             MOVS     R2,#+48
   \   000000BE   0xF50B 0x70E2      ADD      R0,R11,#+452
   \   000000C2   0xF50A 0x41E0      ADD      R1,R10,#+28672
   \   000000C6   0x.... 0x....      BL       PDM_Filter_64_LSB
   1691                                        PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 48 ,
   1692                                        (PDMFilter_InitStruct *)&Filter[1]);				  
   \   000000CA   0xF10B 0x03FC      ADD      R3,R11,#+252
   \   000000CE   0x2230             MOVS     R2,#+48
   \   000000D0   0xF50A 0x41F0      ADD      R1,R10,#+30720
   \   000000D4   0xE020             B.N      ??PDM2PCMSDO78_8
   1693                                         break;	               
   1694                                    case BUF2_PLAY:
   1695                                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 48 ,
   1696                                        (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_7: (+1)
   \   000000D6   0xEB09 0x1A40      ADD      R10,R9,R0, LSL #+5
   \   000000DA   0xF10B 0x03C8      ADD      R3,R11,#+200
   \   000000DE   0x2230             MOVS     R2,#+48
   \   000000E0   0xF50B 0x70E2      ADD      R0,R11,#+452
   \   000000E4   0xF50A 0x4130      ADD      R1,R10,#+45056
   \   000000E8   0x.... 0x....      BL       PDM_Filter_64_LSB
   1697                                        PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 48 ,
   1698                                        (PDMFilter_InitStruct *)&Filter[1]);	
   \   000000EC   0xF10B 0x03FC      ADD      R3,R11,#+252
   \   000000F0   0x2230             MOVS     R2,#+48
   \   000000F2   0xF50A 0x4138      ADD      R1,R10,#+47104
   \   000000F6   0xE00F             B.N      ??PDM2PCMSDO78_8
   1699                                        break;
   1700                                    case BUF3_PLAY:
   1701                                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 48 ,
   1702                                        (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_6: (+1)
   \   000000F8   0xEB09 0x1A40      ADD      R10,R9,R0, LSL #+5
   \   000000FC   0xF10B 0x03C8      ADD      R3,R11,#+200
   \   00000100   0x2230             MOVS     R2,#+48
   \   00000102   0xF50B 0x70E2      ADD      R0,R11,#+452
   \   00000106   0xF50A 0x5140      ADD      R1,R10,#+12288
   \   0000010A   0x.... 0x....      BL       PDM_Filter_64_LSB
   1703                                        PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 48 ,
   1704                                        (PDMFilter_InitStruct *)&Filter[1]);					
   \   0000010E   0xF10B 0x03FC      ADD      R3,R11,#+252
   \   00000112   0x2230             MOVS     R2,#+48
   \   00000114   0xF50A 0x5160      ADD      R1,R10,#+14336
   \                     ??PDM2PCMSDO78_8: (+1)
   \   00000118   0xF50B 0x70A2      ADD      R0,R11,#+324
   \   0000011C   0x.... 0x....      BL       PDM_Filter_64_LSB
   1705                                        break;
   1706                                    default:
   1707                                        break; 
   1708          	          }
   1709          	        }
   1710          
   1711          // 			if (i%4==0) Buffer2.bufMIC8[i/4] = (i/4)*10;
   1712          	     }
   \                     ??PDM2PCMSDO78_4: (+1)
   \   00000120   0x1C64             ADDS     R4,R4,#+1
   \   00000122   0x1CBF             ADDS     R7,R7,#+2
   \   00000124   0x1CB6             ADDS     R6,R6,#+2
   \   00000126   0x1CAD             ADDS     R5,R5,#+2
   \   00000128   0xF5B4 0x5F80      CMP      R4,#+4096
   \   0000012C   0xF108 0x0802      ADD      R8,R8,#+2
   \   00000130   0xDB87             BLT.N    ??PDM2PCMSDO78_1
   1713          		switch (buffer_switch)
   \   00000132   0x....             LDR.N    R0,??DataTable20_22
   \   00000134   0x7800             LDRB     R0,[R0, #+0]
   \   00000136   0xB128             CBZ.N    R0,??PDM2PCMSDO78_9
   \   00000138   0x2802             CMP      R0,#+2
   \   0000013A   0xD009             BEQ.N    ??PDM2PCMSDO78_10
   \   0000013C   0xD305             BCC.N    ??PDM2PCMSDO78_11
   1714          		{
   1715          			case BUF1_PLAY: 				
   1716          				Buffer2.bufMIC7[0]=Buffer2.bufMIC7[2];
   1717          				Buffer2.bufMIC8[0]=Buffer2.bufMIC8[2];
   1718          				Buffer2.bufMIC7[1]=Buffer2.bufMIC7[2];
   1719          				Buffer2.bufMIC8[1]=Buffer2.bufMIC8[2];				
   1720          			    break;
   1721          			case BUF2_PLAY:
   1722          
   1723          				Buffer3.bufMIC7[0]=Buffer3.bufMIC7[2];
   1724          				Buffer3.bufMIC8[0]=Buffer3.bufMIC8[2];
   1725          				Buffer3.bufMIC7[1]=Buffer3.bufMIC7[2];
   1726          				Buffer3.bufMIC8[1]=Buffer3.bufMIC8[2];				
   1727          				break;
   1728          			case BUF3_PLAY:
   1729          				
   1730          				Buffer1.bufMIC7[0]=Buffer1.bufMIC7[2];
   1731          				Buffer1.bufMIC8[0]=Buffer1.bufMIC8[2];				
   1732          				Buffer1.bufMIC7[1]=Buffer1.bufMIC7[2];
   1733          				Buffer1.bufMIC8[1]=Buffer1.bufMIC8[2];				
   1734          			    break;
   1735          			default:
   1736          			break; 
   1737          		}	
   1738          #if 0		
   1739                  /* LowPass Filter 
   1740                        dT = 1/16000
   1741                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1742          		*/						 
   1743          		switch (buffer_switch)
   1744          		{
   1745          			case BUF1_PLAY: 
   1746          				LowPassIIR(Buffer2.bufMIC7 ,Buffer2.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1747          				LowPassIIR(Buffer2.bufMIC8 ,Buffer2.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1748          			    break;
   1749          			case BUF2_PLAY:
   1750          				LowPassIIR(Buffer3.bufMIC7 ,Buffer3.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1751          				LowPassIIR(Buffer3.bufMIC8 ,Buffer3.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1752          			    break;
   1753          			case BUF3_PLAY:
   1754          			    LowPassIIR(Buffer1.bufMIC7 ,Buffer1.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);	
   1755          				LowPassIIR(Buffer1.bufMIC8 ,Buffer1.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1756          			    break;
   1757          			default:
   1758          			break; 
   1759          		}	
   1760          #endif		
   1761             }//if (WaveRecord_flgSDO8Finish==1)
   1762          }
   \   0000013E   0xB003             ADD      SP,SP,#+12
   \   00000140   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??PDM2PCMSDO78_9: (+1)
   \   00000144   0xF509 0x40E0      ADD      R0,R9,#+28672
   \   00000148   0xE004             B.N      ??PDM2PCMSDO78_12
   \                     ??PDM2PCMSDO78_11: (+1)
   \   0000014A   0xF509 0x4030      ADD      R0,R9,#+45056
   \   0000014E   0xE001             B.N      ??PDM2PCMSDO78_12
   \                     ??PDM2PCMSDO78_10: (+1)
   \   00000150   0xF509 0x5040      ADD      R0,R9,#+12288
   \                     ??PDM2PCMSDO78_12: (+1)
   \   00000154   0xF9B0 0x1004      LDRSH    R1,[R0, #+4]
   \   00000158   0x8001             STRH     R1,[R0, #+0]
   \   0000015A   0xF9B0 0x2804      LDRSH    R2,[R0, #+2052]
   \   0000015E   0xF8A0 0x2800      STRH     R2,[R0, #+2048]
   \   00000162   0x8041             STRH     R1,[R0, #+2]
   \   00000164   0xF8A0 0x2802      STRH     R2,[R0, #+2050]
   \                     ??PDM2PCMSDO78_0: (+1)
   \   00000168   0xB003             ADD      SP,SP,#+12
   \   0000016A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1763          

   \                                 In section .text, align 2, keep-with-next
   1764          void MIC7Rec (void)
   1765          {
   1766          	swtSDO7^=0x01;
   \                     MIC7Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_1
   1767          	WaveRecord_flgSDO7Finish = 1;
   1768          	//HAL_SPI_DMAStop(&hspi5);
   1769          	if (swtSDO7==0x01)
   \   00000002   0xF44F 0x5280      MOV      R2,#+4096
   \   00000006   0xF890 0x1130      LDRB     R1,[R0, #+304]
   \   0000000A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000E   0xF880 0x1130      STRB     R1,[R0, #+304]
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0xF880 0x1132      STRB     R1,[R0, #+306]
   \   00000018   0xF890 0x1130      LDRB     R1,[R0, #+304]
   \   0000001C   0x2901             CMP      R1,#+1
   \   0000001E   0xBF0C             ITE      EQ 
   \   00000020   0x....             LDREQ.N  R1,??DataTable20_24
   \   00000022   0x....             LDRNE.N  R1,??DataTable20_7
   1770          	{
   1771                    HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   1772          	}
   1773          	else
   1774          	{
   1775                    HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000024   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1776          	} 
   1777          
   1778          }
   1779          

   \                                 In section .text, align 2, keep-with-next
   1780          void MIC8Rec (void)
   1781          {
   1782               swtSDO8^=0x01;
   \                     MIC8Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_1
   1783              WaveRecord_flgSDO8Finish = 1;
   1784          	//HAL_SPI_DMAStop(&hspi6);
   1785              if (swtSDO8==0x01)
   \   00000002   0xF44F 0x5280      MOV      R2,#+4096
   \   00000006   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   0000000A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000E   0xF880 0x1131      STRB     R1,[R0, #+305]
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0xF880 0x1133      STRB     R1,[R0, #+307]
   \   00000018   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   0000001C   0x2901             CMP      R1,#+1
   \   0000001E   0xBF0C             ITE      EQ 
   \   00000020   0x....             LDREQ.N  R1,??DataTable20_25
   \   00000022   0x....             LDRNE.N  R1,??DataTable20_8
   1786              {
   1787                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   1788              }
   1789              else
   1790              {
   1791                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000024   0x3064             ADDS     R0,R0,#+100
   \   00000026   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1792          
   1793              }
   1794          
   1795          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x4001300C         DC32     0x4001300c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x4001340C         DC32     0x4001340c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x4001540C         DC32     0x4001540c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_10:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_11:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_12:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_13:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_14:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_15:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_16:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_17:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_18:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_19:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_20:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_21:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_22:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_23:
   \   00000000   0x........         DC32     hdma_spi5_rx+0x58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_24:
   \   00000000   0x........         DC32     TestSDO7_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_25:
   \   00000000   0x........         DC32     TestSDO8_1
   1796          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DMA2_Stream5_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream6_IRQHandler
         0   -> HAL_DMA_IRQHandler
      40   HAL_SPI_MspInit
        40   -> HAL_DMA_DeInit
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
       8   HAL_SPI_RxCpltCallback
         0   -> HAL_SPI_Receive_DMA
         8   -> HAL_SPI_Receive_DMA
      16   MIC1TO8_Init
        16   -> HAL_I2S_Init
        16   -> SPI4_Init
        16   -> SPI5_Init
         0   -> SPI6_Init
       0   MIC7Rec
         0   -> HAL_SPI_Receive_DMA
       0   MIC8Rec
         0   -> HAL_SPI_Receive_DMA
       0   Mic7Rec
         0   -> SPI5_Init
       0   Mic8Rec
         0   -> HAL_SPI_Init
      48   PDM2PCMSDO78
        48   -> PDM_Filter_64_LSB
       0   RecordUpdBuf
       0   SPI1_IRQHandler
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
      16   SPI2_IRQHandler
        16   -> HAL_GPIO_ReadPin
      16   SPI4_IRQHandler
        16   -> HAL_GPIO_ReadPin
       8   SPI4_Init
         8   -> HAL_SPI_Init
       8   SPI5_IRQHandler
         8   -> PDM_Filter_64_LSB
      32   SPI5_Init
         0   -> HAL_SPI_Init
        32   -> PDM_Filter_Init
       8   SPI6_IRQHandler
         8   -> PDM_Filter_64_LSB
       0   SPI6_Init
         0   -> HAL_SPI_Init
       8   StartRecMic7_8
         8   -> HAL_SPI_Receive_DMA
       0   mySPI_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable15
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable19
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_13
       4  ??DataTable20_14
       4  ??DataTable20_15
       4  ??DataTable20_16
       4  ??DataTable20_17
       4  ??DataTable20_18
       4  ??DataTable20_19
       4  ??DataTable20_2
       4  ??DataTable20_20
       4  ??DataTable20_21
       4  ??DataTable20_22
       4  ??DataTable20_23
       4  ??DataTable20_24
       4  ??DataTable20_25
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
   49152  Buffer1
          Buffer2
          Buffer3
       6  DMA2_Stream5_IRQHandler
       6  DMA2_Stream6_IRQHandler
    1140  HAL_SPI_MspInit
     100  HAL_SPI_RxCpltCallback
       2  I2S1_stNipple
       1  I2S1_stPosShft
       2  I2S2_stNipple
       1  I2S2_stPosShft
     130  MIC1TO8_Init
      40  MIC7Rec
      42  MIC8Rec
       1  Main_stLR
       2  Mic7Rec
      76  Mic8Rec
     366  PDM2PCMSDO78
     522  RecordUpdBuf
     272  SPI1_IRQHandler
     220  SPI1_Ini
       2  SPI1_stNipple
     242  SPI2_IRQHandler
     298  SPI4_IRQHandler
      86  SPI4_Init
     132  SPI5_IRQHandler
     142  SPI5_Init
     126  SPI6_IRQHandler
      76  SPI6_Init
      48  StartRecMic7_8
    8192  TestSDO12
    8192  TestSDO34
    8192  TestSDO56
    8192  TestSDO7
    8192  TestSDO7_1
    8192  TestSDO8
    8192  TestSDO8_1
       1  WaveRecord_flgIni
       2  cntStrt
       2  cntTransFinish
       1  flgRacing
      88  hdma_spi2_tx
      88  hdma_spi3_tx
     176  hdma_spi5_rx
          hdma_spi6_rx
     150  hi2s1
          hi2s2
          WaveRecord_flgInt
          SPI4_stPosShft
          I2S2_stLR
          I2S2_stLROld
          stLROld
          Main_stLROld
          WaveRec_idxTest
          vRawSens1
          vRawSens2
          vRawSens4
          vRawSens3
          vRawSens5
          vRawSens6
          SPI4_stNipple
     100  hspi1
     100  hspi2
     580  hspi5
          hspi6
          Filter
          swtSDO7
          swtSDO8
          WaveRecord_flgSDO7Finish
          WaveRecord_flgSDO8Finish
          idxMic8
          idxMic7
          cntPos
          cntPos7
          bufPCMSens7
          bufPCMSens8
          pDataMic8
          pDataMic7
       2  iSDO12
       2  iSDO34
       2  iSDO56
       2  idxFrmPDMMic8
      44  mySPI_SendData
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins

 
 108 077 bytes in section .bss
   4 292 bytes in section .text
 
   4 292 bytes of CODE memory
 108 077 bytes of DATA memory

Errors: none
Warnings: 9
