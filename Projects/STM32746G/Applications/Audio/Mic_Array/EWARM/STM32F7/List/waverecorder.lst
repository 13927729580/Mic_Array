###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       25/Feb/2016  12:02:40
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          
      2          /* Includes ------------------------------------------------------------------*/
      3          #include "waverecorder.h" 
      4          #include "string.h"
      5          //#include "stm32f7xx_hal_spi.h"
      6          #include "stm32f7xx_hal.h"
      7          #include "pdm_filter.h"
      8          
      9          
     10          /* Private typedef -----------------------------------------------------------*/
     11          /* Private define ------------------------------------------------------------*/
     12          #define TOUCH_RECORD_XMIN       300
     13          #define TOUCH_RECORD_XMAX       340
     14          #define TOUCH_RECORD_YMIN       212
     15          #define TOUCH_RECORD_YMAX       252
     16          
     17          #define TOUCH_STOP_XMIN         205
     18          #define TOUCH_STOP_XMAX         245
     19          #define TOUCH_STOP_YMIN         212
     20          #define TOUCH_STOP_YMAX         252
     21          
     22          #define TOUCH_PAUSE_XMIN        125
     23          #define TOUCH_PAUSE_XMAX        149
     24          #define TOUCH_PAUSE_YMIN        212
     25          #define TOUCH_PAUSE_YMAX        252
     26          
     27          #define TOUCH_VOL_MINUS_XMIN    20
     28          #define TOUCH_VOL_MINUS_XMAX    70
     29          #define TOUCH_VOL_MINUS_YMIN    212
     30          #define TOUCH_VOL_MINUS_YMAX    252
     31          
     32          #define TOUCH_VOL_PLUS_XMIN     402
     33          #define TOUCH_VOL_PLUS_XMAX     452
     34          #define TOUCH_VOL_PLUS_YMIN     212
     35          #define TOUCH_VOL_PLUS_YMAX     252
     36          
     37          
     38          
     39          /* SPI Configuration defines */
     40          #define SPI_SCK_PIN                       GPIO_PIN_10
     41          #define SPI_SCK_GPIO_PORT                 GPIOB
     42          #define SPI_SCK_GPIO_CLK                  1
     43          #define SPI_SCK_SOURCE                    1
     44          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     45          
     46          #define SPI_MOSI_PIN                      GPIO_PIN_3
     47          #define SPI_MOSI_GPIO_PORT                GPIOC
     48          #define SPI_MOSI_GPIO_CLK                 1
     49          #define SPI_MOSI_SOURCE                   1
     50          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     51          
     52          
     53          /* sop1hc */
     54          #define SPI1_SCK_PIN                       GPIO_PIN_5
     55          #define SPI1_SCK_GPIO_PORT                 GPIOA
     56          #define SPI1_SCK_GPIO_CLK                  1
     57          #define SPI1_SCK_SOURCE                    1
     58          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     59          
     60          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     61          #define SPI1_MOSI_GPIO_PORT                GPIOA
     62          #define SPI1_MOSI_GPIO_CLK                 1
     63          #define SPI1_MOSI_SOURCE                   1
     64          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     65          
     66          #define SPI1_MISO_PIN                      GPIO_PIN_6
     67          #define SPI1_MISO_GPIO_PORT                GPIOA
     68          #define SPI1_MISO_GPIO_CLK                 1
     69          #define SPI1_MISO_SOURCE                   1
     70          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     71          
     72          
     73          
     74          

   \                                 In section .bss, align 4
     75          uint16_t idxMic8=0;
     76          uint16_t idxMic7=0;
     77          uint8_t pHeaderBuff[44];
     78          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
     79          uint16_t volatile cntTransFinish;
     80          
     81          /* Private macro -------------------------------------------------------------*/
     82          /* Private variables ---------------------------------------------------------*/
     83          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     84          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     85          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     86          extern WAVE_FormatTypeDef WaveFormat;
     87          extern FIL WavFile;
     88          extern AUDIO_DEMO_StateMachine AudioDemo;
     89          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     90          extern __IO uint8_t buffer_switch;
     91          extern __IO uint8_t volume;
     92          extern SPI_HandleTypeDef hspi4,hspi1;
     93          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     94          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     95          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     96          extern __IO uint16_t  I2S2_idxTmp;
     97          extern SPI_HandleTypeDef     hspi4;
     98          extern DMA_HandleTypeDef     DmaHandle;
     99          
    100          #ifndef CS43L22_PLAY
    101          extern __IO uint8_t flgDlyUpd; 
    102          extern __IO uint32_t XferCplt;
    103          extern __IO uint16_t  idxSPI5DataBuf3;
    104          #endif
    105          
    106          __IO int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
    107          __IO int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
    108          __IO int16_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
    109          __IO uint16_t TestSDO7[4*AUDIO_OUT_BUFFER_SIZE];
    110          __IO uint16_t TestSDO8[4*AUDIO_OUT_BUFFER_SIZE];
    111          __IO uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
    112          __IO uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
    113          __IO uint16_t  WaveRec_idxTest;
    114          
    115          
    116          SPI_HandleTypeDef hspi1,hspi2;
    117          SPI_HandleTypeDef spi1_ins,spi2_ins;
    118          I2S_HandleTypeDef hi2s1;
    119          I2S_HandleTypeDef hi2s2;
    120          SPI_HandleTypeDef hspi5,hspi6;
   \                     hspi5:
   \   00000000                      DS8 100
   \                     hspi6:
   \   00000064                      DS8 100
    121          DMA_HandleTypeDef hdma_spi2_tx;
    122          DMA_HandleTypeDef hdma_spi3_tx;
    123          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
    124          
    125          #if USB_STREAMING
    126          __IO uint16_t idxFrmPDMMic8;
    127          #endif
    128          
    129          uint16_t *bufPCMSens7;
    130          uint16_t *bufPCMSens8;
    131          __IO uint16_t cntPos;
    132          __IO uint16_t cntPos7;
    133          __IO static uint16_t iBuff;
    134          __IO static uint32_t uwVolume = 70;
    135          __IO PDMFilter_InitStruct Filter[2];
   \                     Filter:
   \   000000C8                      DS8 104
    136          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
    137          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
    138          __IO int16_t   pPDM2PCM[16];
    139          __IO uint16_t cntStrt;
    140          __IO uint8_t WaveRecord_flgInt;
    141          uint8_t WaveRecord_flgIni;
    142          
    143          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
    144          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
    145          __IO uint16_t iSDO12,iSDO34,iSDO56;
    146          __IO uint8_t swtSDO7,swtSDO8;
   \                     swtSDO7:
   \   00000130                      DS8 1
   \                     swtSDO8:
   \   00000131                      DS8 1
    147          __IO uint8_t WaveRecord_flgSDO7Finish,WaveRecord_flgSDO8Finish;
   \                     WaveRecord_flgSDO7Finish:
   \   00000132                      DS8 1
   \                     WaveRecord_flgSDO8Finish:
   \   00000133                      DS8 1
   \                     idxMic8:
   \   00000134                      DS8 2
   \                     idxMic7:
   \   00000136                      DS8 2
   \                     cntPos:
   \   00000138                      DS8 2
   \                     cntPos7:
   \   0000013A                      DS8 2
   \                     bufPCMSens7:
   \   0000013C                      DS8 4
   \                     bufPCMSens8:
   \   00000140                      DS8 4
   \                     pDataMic8:
   \   00000144                      DS8 128
   \                     pDataMic7:
   \   000001C4                      DS8 128

   \                                 In section .bss, align 4
   \                     pHeaderBuff:
   \   00000000                      DS8 44

   \                                 In section .bss, align 2
   \                     cntTransFinish:
   \   00000000                      DS8 2
    148          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
    149          
    150          /* Private function prototypes -----------------------------------------------*/
    151          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    152          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    153          static void I2S1_Init(void);
    154          static void I2S2_Init(void);
    155          
    156          #pragma location=SDRAM_BANK_ADDR
    157          Mic_Array_Data Buffer1;
    158          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)
    159          Mic_Array_Data Buffer2;
    160          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)
    161          Mic_Array_Data Buffer3;
    162          

   \                                 In section .text, align 2, keep-with-next
    163          void SPI1_Ini(void)
    164          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    165            GPIO_InitTypeDef GPIO_InitStructure;
    166          
    167           
    168             	 
    169            /* Enable SCK, MOSI and MISO GPIO clocks */
    170            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40023830
   \   00000006   0xB086             SUB      SP,SP,#+24
    171            __HAL_RCC_GPIOA_CLK_ENABLE();
    172          
    173            
    174            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    175            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    176            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    177          
    178            /* SPI SCK pin configuration */
    179            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    180            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    181            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable13_1  ;; 0x40020000
   \   0000000C   0x6941             LDR      R1,[R0, #+20]
   \   0000000E   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000012   0x6141             STR      R1,[R0, #+20]
   \   00000014   0x6941             LDR      R1,[R0, #+20]
   \   00000016   0xF401 0x5180      AND      R1,R1,#0x1000
   \   0000001A   0x9100             STR      R1,[SP, #+0]
   \   0000001C   0x9900             LDR      R1,[SP, #+0]
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000024   0x6001             STR      R1,[R0, #+0]
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xA901             ADD      R1,SP,#+4
   \   0000002A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x9800             LDR      R0,[SP, #+0]
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x9002             STR      R0,[SP, #+8]
   \   00000036   0x9003             STR      R0,[SP, #+12]
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0x9004             STR      R0,[SP, #+16]
   \   0000003C   0x2005             MOVS     R0,#+5
   \   0000003E   0x9005             STR      R0,[SP, #+20]
   \   00000040   0x2020             MOVS     R0,#+32
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       HAL_GPIO_Init
    182          
    183            /* SPI  MOSI pin configuration */
    184            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   0000004A   0x2001             MOVS     R0,#+1
    185            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    186            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   0000004C   0xA901             ADD      R1,SP,#+4
   \   0000004E   0x9005             STR      R0,[SP, #+20]
   \   00000050   0x2080             MOVS     R0,#+128
   \   00000052   0x9001             STR      R0,[SP, #+4]
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       HAL_GPIO_Init
    187          
    188            /* SPI MISO pin configuration */
    189            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   0000005A   0x2001             MOVS     R0,#+1
    190            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    191            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   0000005C   0xA901             ADD      R1,SP,#+4
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x2040             MOVS     R0,#+64
   \   00000062   0x9001             STR      R0,[SP, #+4]
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       HAL_GPIO_Init
    192          
    193            /* SPI configuration -------------------------------------------------------*/
    194            //SPI_I2S_DeInit(SPI1);
    195            
    196            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   0000006E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000072   0x6081             STR      R1,[R0, #+8]
    197            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000074   0xF44F 0x6170      MOV      R1,#+3840
   \   00000078   0x60C1             STR      R1,[R0, #+12]
    198            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x6101             STR      R1,[R0, #+16]
    199            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    200            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    201            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    202            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    203            spi1_ins.Init.CRCPolynomial = 7;
    204            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   0000007E   0x.... 0x....      LDR.W    R4,??DataTable17  ;; 0x40021000
   \   00000082   0x6141             STR      R1,[R0, #+20]
   \   00000084   0xF44F 0x7100      MOV      R1,#+512
   \   00000088   0x6181             STR      R1,[R0, #+24]
   \   0000008A   0x2128             MOVS     R1,#+40
   \   0000008C   0x61C1             STR      R1,[R0, #+28]
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x6201             STR      R1,[R0, #+32]
   \   00000092   0x2107             MOVS     R1,#+7
   \   00000094   0x62C1             STR      R1,[R0, #+44]
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x6041             STR      R1,[R0, #+4]
    205            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   0000009A   0x.... 0x....      BL       HAL_SPI_Init
    206            {
    207              /* Initialization Error */
    208              //Error_Handler();
    209            }
    210            
    211           
    212            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   0000009E   0x2008             MOVS     R0,#+8
    213            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    214            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    215            GPIO_InitStructure.Pull = GPIO_PULLUP;
    216            //GPIO_InitStructure.Alternate 
    217            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000A0   0xA901             ADD      R1,SP,#+4
   \   000000A2   0x9001             STR      R0,[SP, #+4]
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x9002             STR      R0,[SP, #+8]
   \   000000A8   0x2002             MOVS     R0,#+2
   \   000000AA   0x9004             STR      R0,[SP, #+16]
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x9003             STR      R0,[SP, #+12]
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       HAL_GPIO_Init
    218          
    219            /* Deselect : Chip Select high */
    220            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0x2108             MOVS     R1,#+8
   \   000000BA   0x4620             MOV      R0,R4
   \   000000BC   0x.... 0x....      BL       HAL_GPIO_WritePin
    221             /* sop1hc */
    222            /* Configure the SPI interrupt priority */
    223            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000C0   0x2200             MOVS     R2,#+0
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x2023             MOVS     R0,#+35
   \   000000C6   0x.... 0x....      BL       HAL_NVIC_SetPriority
    224          
    225            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000CA   0x2023             MOVS     R0,#+35
   \   000000CC   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    226            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    227            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    228          
    229            /* Enable SPI1  */
    230            //__HAL_SPI_ENABLE(SPI1);
    231          
    232          }
   \   000000D0   0xB006             ADD      SP,SP,#+24
   \   000000D2   0xBD10             POP      {R4,PC}          ;; return
    233          

   \                                 In section .text, align 2, keep-with-next
    234          void mySPI_SendData(uint8_t adress, uint8_t data)
    235          {
   \                     mySPI_SendData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   00000004   0x6812             LDR      R2,[R2, #+0]
    236           
    237          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x6893             LDR      R3,[R2, #+8]
   \   00000008   0x079B             LSLS     R3,R3,#+30
   \   0000000A   0xD5FC             BPL.N    ??mySPI_SendData_0
    238          SPI_I2S_SendData(SPI1, adress);
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable16  ;; 0x4001300c
   \   00000010   0x6018             STR      R0,[R3, #+0]
    239          
    240          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   00000012   0x6890             LDR      R0,[R2, #+8]
   \   00000014   0x07C0             LSLS     R0,R0,#+31
   \   00000016   0xD5FC             BPL.N    ??mySPI_SendData_1
    241          SPI_I2S_ReceiveData(SPI1);
   \   00000018   0x6818             LDR      R0,[R3, #+0]
    242          
    243          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   0000001A   0x6890             LDR      R0,[R2, #+8]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD4FC             BMI.N    ??mySPI_SendData_2
    244          SPI_I2S_SendData(SPI1, data);
   \   00000020   0x6019             STR      R1,[R3, #+0]
    245          
    246          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000022   0x6890             LDR      R0,[R2, #+8]
   \   00000024   0x07C0             LSLS     R0,R0,#+31
   \   00000026   0xD4FC             BMI.N    ??mySPI_SendData_3
    247          SPI_I2S_ReceiveData(SPI1);
   \   00000028   0x6818             LDR      R0,[R3, #+0]
    248           
    249          }
   \   0000002A   0x4770             BX       LR               ;; return
    250          
    251          /**
    252            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    253            * @param  None
    254            * @retval None
    255          */
    256          

   \                                 In section .text, align 2, keep-with-next
    257          void SPI1_IRQHandler(void)
    258          {  
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    259                uint16_t tmpTest;
    260          	  static uint8_t stLR,stLROld;
    261          	
    262          	  /* SPI in mode Receiver ----------------------------------------------------*/
    263          	  if(
    264          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    265          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    266          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable16_1
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xD563             BPL.N    ??SPI1_IRQHandler_0
    267          	  {
    268          	
    269          
    270          	   tmpTest =  SPI_I2S_ReceiveData(SPI1);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4001300c
    271          	
    272          	   /* Left-Right Mic data */
    273          	   stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x6805             LDR      R5,[R0, #+0]
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   0000001A   0x.... 0x....      BL       HAL_GPIO_ReadPin
    274          	
    275          		if (stLR==GPIO_PIN_SET)
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xF894 0x1081      LDRB     R1,[R4, #+129]
   \   00000024   0xD103             BNE.N    ??SPI1_IRQHandler_1
    276          		{
    277          			if (stLROld==GPIO_PIN_RESET)
   \   00000026   0xB121             CBZ.N    R1,??SPI1_IRQHandler_2
    278          			{
    279          				SPI1_stNipple = (tmpTest);
    280          
    281          			}
    282          			else
    283          			{
    284          				 vRawSens1 = (tmpTest);
   \   00000028   0xF8A4 0x5084      STRH     R5,[R4, #+132]
    285             		         WaveRec_idxTest++;
   \   0000002C   0xE006             B.N      ??SPI1_IRQHandler_3
    286          			   
    287          			}
    288          		}
    289          		else
    290          		{
    291          			if (stLROld==GPIO_PIN_SET)
   \                     ??SPI1_IRQHandler_1: (+1)
   \   0000002E   0x2901             CMP      R1,#+1
   \   00000030   0xD102             BNE.N    ??SPI1_IRQHandler_4
    292          			{
    293          			  SPI1_stNipple = (tmpTest);  
   \                     ??SPI1_IRQHandler_2: (+1)
   \   00000032   0xF8A4 0x5090      STRH     R5,[R4, #+144]
   \   00000036   0xE006             B.N      ??SPI1_IRQHandler_5
    294          
    295          			}
    296          			else
    297          			{
    298          			  vRawSens2 = (tmpTest);
   \                     ??SPI1_IRQHandler_4: (+1)
   \   00000038   0xF8A4 0x5086      STRH     R5,[R4, #+134]
    299           	          WaveRec_idxTest++;
   \                     ??SPI1_IRQHandler_3: (+1)
   \   0000003C   0xF8B4 0x1082      LDRH     R1,[R4, #+130]
   \   00000040   0x1C49             ADDS     R1,R1,#+1
   \   00000042   0xF8A4 0x1082      STRH     R1,[R4, #+130]
    300          
    301          			} 	
    302          		}
    303          	   
    304          	   if (iSDO12<4*AUDIO_OUT_BUFFER_SIZE)
   \                     ??SPI1_IRQHandler_5: (+1)
   \   00000046   0xF8B4 0x1092      LDRH     R1,[R4, #+146]
   \   0000004A   0xF5B1 0x5F80      CMP      R1,#+4096
   \   0000004E   0xDA09             BGE.N    ??SPI1_IRQHandler_6
    305          	   {
    306                     TestSDO12[iSDO12++]=tmpTest;
   \   00000050   0xF8B4 0x1092      LDRH     R1,[R4, #+146]
   \   00000054   0x1C4A             ADDS     R2,R1,#+1
   \   00000056   0xEB04 0x0141      ADD      R1,R4,R1, LSL #+1
   \   0000005A   0xF8A4 0x2092      STRH     R2,[R4, #+146]
   \   0000005E   0xF8A1 0x5094      STRH     R5,[R1, #+148]
   \   00000062   0xE002             B.N      ??SPI1_IRQHandler_7
    307          	   }
    308          	   else
    309          	   {
    310                     iSDO12=0;
   \                     ??SPI1_IRQHandler_6: (+1)
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0xF8A4 0x1092      STRH     R1,[R4, #+146]
    311          	   }
    312          #if 1
    313          		if ((WaveRec_idxSens1 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens2 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
   \                     ??SPI1_IRQHandler_7: (+1)
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable16_2
   \   0000006E   0xF640 0x0305      MOVW     R3,#+2053
   \   00000072   0x880A             LDRH     R2,[R1, #+0]
   \   00000074   0x429A             CMP      R2,R3
   \   00000076   0xBFBE             ITTT     LT 
   \   00000078   0x.... 0x....      LDRLT.W  R2,??DataTable17_1
   \   0000007C   0x8815             LDRHLT   R5,[R2, #+0]
   \   0000007E   0x429D             CMPLT    R5,R3
   \   00000080   0xDA27             BGE.N    ??SPI1_IRQHandler_8
    314          	//			  &&(stLR!=stLROld))
    315          		{
    316          	/*-------------------------------------------------------------------------------------------------------------
    317          				  
    318          		Sequence  Record Data					  Processing Data				  Player Data
    319          				  
    320          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    321          				  
    322          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    323          				  
    324          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    325          	 ---------------------------------------------------------------------------------------------------------------*/
    326          				  /* Recording Audio Data */						 
    327          				   switch (buffer_switch)
   \   00000082   0x.... 0x....      LDR.W    R3,??DataTable17_2
   \   00000086   0x781B             LDRB     R3,[R3, #+0]
   \   00000088   0xB11B             CBZ.N    R3,??SPI1_IRQHandler_9
   \   0000008A   0x2B02             CMP      R3,#+2
   \   0000008C   0xD009             BEQ.N    ??SPI1_IRQHandler_10
   \   0000008E   0xD304             BCC.N    ??SPI1_IRQHandler_11
   \   00000090   0xE01F             B.N      ??SPI1_IRQHandler_8
    328          				   {
    329          							case BUF1_PLAY:
    330          
    331                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
                                                 ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI1_IRQHandler_9: (+1)
   \   00000092   0x8813             LDRH     R3,[R2, #+0]
   \   00000094   0x.... 0x....      LDR.W    R5,??DataTable17_3  ;; 0xc00080a0
   \   00000098   0xE006             B.N      ??SPI1_IRQHandler_12
    332          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    333          							    else
    334          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    335          
    336          	
    337          									break;
    338          							case BUF2_PLAY:
    339                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
                                                 ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI1_IRQHandler_11: (+1)
   \   0000009A   0x8813             LDRH     R3,[R2, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R5,??DataTable17_4  ;; 0xc0010140
   \   000000A0   0xE002             B.N      ??SPI1_IRQHandler_12
    340          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    341          							    else
    342          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;	
    343          
    344          									break;
    345          							case BUF3_PLAY:
    346                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
                                                 ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI1_IRQHandler_10: (+1)
   \   000000A2   0x8813             LDRH     R3,[R2, #+0]
   \   000000A4   0xF04F 0x4540      MOV      R5,#-1073741824
   \                     ??SPI1_IRQHandler_12: (+1)
   \   000000A8   0x880E             LDRH     R6,[R1, #+0]
   \   000000AA   0x42B3             CMP      R3,R6
   \   000000AC   0xD307             BCC.N    ??SPI1_IRQHandler_13
    347          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \   000000AE   0x880A             LDRH     R2,[R1, #+0]
   \   000000B0   0x1C53             ADDS     R3,R2,#+1
   \   000000B2   0x800B             STRH     R3,[R1, #+0]
   \   000000B4   0xF9B4 0x1084      LDRSH    R1,[R4, #+132]
   \   000000B8   0xF825 0x1012      STRH     R1,[R5, R2, LSL #+1]
   \   000000BC   0xE009             B.N      ??SPI1_IRQHandler_8
    348          							    else
    349          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
   \                     ??SPI1_IRQHandler_13: (+1)
   \   000000BE   0x8811             LDRH     R1,[R2, #+0]
   \   000000C0   0x1C4B             ADDS     R3,R1,#+1
   \   000000C2   0xEB05 0x0141      ADD      R1,R5,R1, LSL #+1
   \   000000C6   0x8013             STRH     R3,[R2, #+0]
   \   000000C8   0xF9B4 0x2086      LDRSH    R2,[R4, #+134]
   \   000000CC   0xF241 0x0314      MOVW     R3,#+4116
   \   000000D0   0x525A             STRH     R2,[R3, R1]
    350          
    351          									break;
    352          							default:
    353          									break; 
    354          				   }
    355          			
    356          		 } 
    357          #endif		
    358          
    359          		/* Update Old value */	  
    360          		stLROld=stLR;
   \                     ??SPI1_IRQHandler_8: (+1)
   \   000000D2   0xF884 0x0081      STRB     R0,[R4, #+129]
    361          
    362          
    363              }
    364          				 
    365          } 	 
   \                     ??SPI1_IRQHandler_0: (+1)
   \   000000D6   0xBD70             POP      {R4-R6,PC}       ;; return
   \   000000D8                      REQUIRE Buffer2
   \   000000D8                      REQUIRE Buffer3
   \   000000D8                      REQUIRE Buffer1

   \                                 In section .bss, align 4
   \                     hi2s1:
   \   00000000                      DS8 64
   \                     hi2s2:
   \   00000040                      DS8 64
   \                     WaveRecord_flgInt:
   \   00000080                      DS8 1
   \   00000081                      DS8 1
   \                     WaveRec_idxTest:
   \   00000082                      DS8 2
   \                     vRawSens1:
   \   00000084                      DS8 2
   \                     vRawSens2:
   \   00000086                      DS8 2
   \                     vRawSens4:
   \   00000088                      DS8 2
   \                     vRawSens3:
   \   0000008A                      DS8 2
   \                     vRawSens5:
   \   0000008C                      DS8 2
   \                     vRawSens6:
   \   0000008E                      DS8 2
   \                     SPI1_stNipple:
   \   00000090                      DS8 2
   \                     iSDO12:
   \   00000092                      DS8 2
   \                     TestSDO12:
   \   00000094                      DS8 8192
    366          
    367          
    368          
    369          
    370          /**
    371            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    372            * @param  None
    373            * @retval None
    374          */
    375          

   \                                 In section .text, align 2, keep-with-next
    376          void SPI2_IRQHandler(void)
    377          {      
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    378              uint16_t app;
    379              static uint8_t I2S2_stLR, I2S2_stLROld;
    380          
    381            /* Check if data are available in SPI Data register */
    382             if (
    383          //	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    384          //   	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    385             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    386             	  )
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable16_1
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x6C20             LDR      R0,[R4, #+64]
   \   0000000A   0x6840             LDR      R0,[R0, #+4]
   \   0000000C   0x0640             LSLS     R0,R0,#+25
   \   0000000E   0xD55B             BPL.N    ??SPI2_IRQHandler_0
    387             {
    388              
    389               app = SPI_I2S_ReceiveData(SPI2);   
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable17_5  ;; 0x4000380c
    390               //SPI_I2S_SendData(SPI2, 3333);
    391          
    392          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000014   0x2110             MOVS     R1,#+16
   \   00000016   0x6805             LDR      R5,[R0, #+0]
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   0000001C   0x.... 0x....      BL       HAL_GPIO_ReadPin
    393          
    394          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable17_6
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0x780A             LDRB     R2,[R1, #+0]
   \   00000028   0xD104             BNE.N    ??SPI2_IRQHandler_1
    395          	 {
    396                  if (I2S2_stLROld==GPIO_PIN_SET)
   \   0000002A   0x2A01             CMP      R2,#+1
   \   0000002C   0xD003             BEQ.N    ??SPI2_IRQHandler_2
    397                  {
    398                      I2S2_stNipple = app;           
    399                  }
    400          		else
    401          		{
    402          
    403          			 vRawSens3 = app;
   \   0000002E   0xF8A4 0x508A      STRH     R5,[R4, #+138]
   \   00000032   0xE004             B.N      ??SPI2_IRQHandler_3
    404          
    405          		}
    406          	 }
    407          	 else
    408          	 {
    409                  if (I2S2_stLROld==GPIO_PIN_RESET)
   \                     ??SPI2_IRQHandler_1: (+1)
   \   00000034   0xB90A             CBNZ.N   R2,??SPI2_IRQHandler_4
    410                  {
    411                      I2S2_stNipple = app;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   00000036   0x804D             STRH     R5,[R1, #+2]
   \   00000038   0xE001             B.N      ??SPI2_IRQHandler_3
    412          
    413                  }
    414          		else
    415          		{
    416                      vRawSens4 =app;
   \                     ??SPI2_IRQHandler_4: (+1)
   \   0000003A   0xF8A4 0x5088      STRH     R5,[R4, #+136]
    417          		
    418          		}
    419          	 }
    420          
    421          	 	if (iSDO34<4*AUDIO_OUT_BUFFER_SIZE)
   \                     ??SPI2_IRQHandler_3: (+1)
   \   0000003E   0x888A             LDRH     R2,[R1, #+4]
   \   00000040   0xF5B2 0x5F80      CMP      R2,#+4096
   \   00000044   0xDA06             BGE.N    ??SPI2_IRQHandler_5
    422          	   {
    423                     TestSDO34[iSDO34++]=app;
   \   00000046   0x888A             LDRH     R2,[R1, #+4]
   \   00000048   0x1C53             ADDS     R3,R2,#+1
   \   0000004A   0xEB01 0x0242      ADD      R2,R1,R2, LSL #+1
   \   0000004E   0x808B             STRH     R3,[R1, #+4]
   \   00000050   0x8115             STRH     R5,[R2, #+8]
   \   00000052   0xE001             B.N      ??SPI2_IRQHandler_6
    424          	   }
    425          	   else
    426          	   {
    427                     iSDO34=0;
   \                     ??SPI2_IRQHandler_5: (+1)
   \   00000054   0x2200             MOVS     R2,#+0
   \   00000056   0x808A             STRH     R2,[R1, #+4]
    428          	   }
    429          	 
    430          #if 1
    431          	 if ((WaveRec_idxSens3 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens4 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
   \                     ??SPI2_IRQHandler_6: (+1)
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable17_7
   \   0000005C   0xF640 0x0505      MOVW     R5,#+2053
   \   00000060   0x8813             LDRH     R3,[R2, #+0]
   \   00000062   0x42AB             CMP      R3,R5
   \   00000064   0xBFBE             ITTT     LT 
   \   00000066   0x.... 0x....      LDRLT.W  R3,??DataTable17_8
   \   0000006A   0x881E             LDRHLT   R6,[R3, #+0]
   \   0000006C   0x42AE             CMPLT    R6,R5
   \   0000006E   0xDA2A             BGE.N    ??SPI2_IRQHandler_7
    432          //             &&(I2S2_stLR!=I2S2_stLROld))
    433          	 {
    434          /*-------------------------------------------------------------------------------------------------------------
    435          			  
    436          	Sequence  Record Data                     Processing Data                 Player Data
    437          			  
    438          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    439          			  
    440          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    441          			  
    442          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    443           ---------------------------------------------------------------------------------------------------------------*/
    444          		/* Recording Audio Data */			             
    445          		 switch (buffer_switch)
   \   00000070   0x.... 0x....      LDR.W    R5,??DataTable17_2
   \   00000074   0x782D             LDRB     R5,[R5, #+0]
   \   00000076   0xB11D             CBZ.N    R5,??SPI2_IRQHandler_8
   \   00000078   0x2D02             CMP      R5,#+2
   \   0000007A   0xD009             BEQ.N    ??SPI2_IRQHandler_9
   \   0000007C   0xD304             BCC.N    ??SPI2_IRQHandler_10
   \   0000007E   0xE022             B.N      ??SPI2_IRQHandler_7
    446          		 {
    447          			  case BUF1_PLAY:
    448                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
                                   ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI2_IRQHandler_8: (+1)
   \   00000080   0x881D             LDRH     R5,[R3, #+0]
   \   00000082   0x.... 0x....      LDR.W    R6,??DataTable17_3  ;; 0xc00080a0
   \   00000086   0xE006             B.N      ??SPI2_IRQHandler_11
    449                                Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    450          				  else
    451                                Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			  
    452          
    453          				  break;
    454          			  case BUF2_PLAY:
    455                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
                                   ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI2_IRQHandler_10: (+1)
   \   00000088   0x881D             LDRH     R5,[R3, #+0]
   \   0000008A   0x.... 0x....      LDR.W    R6,??DataTable17_4  ;; 0xc0010140
   \   0000008E   0xE002             B.N      ??SPI2_IRQHandler_11
    456                                Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    457          				  else
    458                                Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			   
    459          				  break;
    460          			  case BUF3_PLAY:
    461                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
                                   ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI2_IRQHandler_9: (+1)
   \   00000090   0x881D             LDRH     R5,[R3, #+0]
   \   00000092   0xF04F 0x4640      MOV      R6,#-1073741824
   \                     ??SPI2_IRQHandler_11: (+1)
   \   00000096   0x8817             LDRH     R7,[R2, #+0]
   \   00000098   0x42BD             CMP      R5,R7
   \   0000009A   0xD30A             BCC.N    ??SPI2_IRQHandler_12
    462                                Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   0000009C   0x8813             LDRH     R3,[R2, #+0]
   \   0000009E   0x1C5D             ADDS     R5,R3,#+1
   \   000000A0   0xEB06 0x0343      ADD      R3,R6,R3, LSL #+1
   \   000000A4   0x8015             STRH     R5,[R2, #+0]
   \   000000A6   0xF9B4 0x208A      LDRSH    R2,[R4, #+138]
   \   000000AA   0xF242 0x0428      MOVW     R4,#+8232
   \   000000AE   0x52E2             STRH     R2,[R4, R3]
   \   000000B0   0xE009             B.N      ??SPI2_IRQHandler_7
    463          				  else
    464                                Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \                     ??SPI2_IRQHandler_12: (+1)
   \   000000B2   0x881A             LDRH     R2,[R3, #+0]
   \   000000B4   0x1C55             ADDS     R5,R2,#+1
   \   000000B6   0xEB06 0x0242      ADD      R2,R6,R2, LSL #+1
   \   000000BA   0x801D             STRH     R5,[R3, #+0]
   \   000000BC   0xF9B4 0x3088      LDRSH    R3,[R4, #+136]
   \   000000C0   0xF243 0x043C      MOVW     R4,#+12348
   \   000000C4   0x52A3             STRH     R3,[R4, R2]
    465          				  break;
    466          			  default:
    467          				  break; 
    468          		 }
    469          		
    470          	 }          
    471          #endif		  
    472          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_7: (+1)
   \   000000C6   0x7008             STRB     R0,[R1, #+0]
    473          
    474             }
    475          
    476          }
   \                     ??SPI2_IRQHandler_0: (+1)
   \   000000C8   0xB001             ADD      SP,SP,#+4
   \   000000CA   0xBDF0             POP      {R4-R7,PC}       ;; return
   \   000000CC                      REQUIRE Buffer2
   \   000000CC                      REQUIRE Buffer3
   \   000000CC                      REQUIRE Buffer1

   \                                 In section .bss, align 4
   \                     ??I2S2_stLROld:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \                     I2S2_stNipple:
   \   00000002                      DS8 2
   \                     iSDO34:
   \   00000004                      DS8 2
   \   00000006                      DS8 2
   \                     TestSDO34:
   \   00000008                      DS8 8192
    477          
    478          

   \                                 In section .text, align 2, keep-with-next
    479          void SPI4_IRQHandler(void)
    480          {
    481            static uint8_t Main_stLR, Main_stLROld;
    482          
    483          
    484            /* SPI in mode Receiver ----------------------------------------------------*/
    485            if(
    486          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    487          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    488               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_9
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xD400             BMI.N    ??SPI4_IRQHandler_0
   \   0000000C   0x4770             BX       LR
    489            {
    490          
    491                  uint16_t test;
    492                  test =  SPI_I2S_ReceiveData(SPI4);
   \                     ??SPI4_IRQHandler_0: (+1)
   \   0000000E   0xB5F0             PUSH     {R4-R7,LR}
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x4001340c
   \   00000014   0xB081             SUB      SP,SP,#+4
    493          
    494                  /* Left-Right Mic data */
    495                  Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000016   0x2110             MOVS     R1,#+16
   \   00000018   0x6804             LDR      R4,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_ReadPin
    496          
    497                  /* STM32F746 read data from STA321MP, the data is shifted few bit     */
    498                  /* Data from STA321MP is 32bit formart                                */
    499                  /* SPI is just able to read 16 bit format                             */
    500                  /* Therefore, it needs to correct                                     */
    501                  
    502                  /* ---------------------------+++++++++++++++++++++++++++++++---------*/
    503                  /*                  ______DATAL_____              ______DATAR_____    */
    504                  /*                  _____vRawSens5__              ______vRawSens6_    */       
    505          	if (Main_stLR==GPIO_PIN_SET)
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable17_11
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xB2A4             UXTH     R4,R4
   \   0000002A   0x784A             LDRB     R2,[R1, #+1]
   \   0000002C   0xD135             BNE.N    ??SPI4_IRQHandler_1
    506          	{
    507                      if (Main_stLROld==GPIO_PIN_SET)
   \   0000002E   0x2A01             CMP      R2,#+1
   \   00000030   0xD034             BEQ.N    ??SPI4_IRQHandler_2
    508                      {
    509                         SPI4_stNipple = (test);    
    510                      }
    511                      else
    512                      {
    513                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000032   0x780A             LDRB     R2,[R1, #+0]
   \   00000034   0xF9B1 0x3002      LDRSH    R3,[R1, #+2]
    514                         if (WaveRec_idxSens5 < (2*AUDIO_OUT_BUFFER_SIZE+5))
   \   00000038   0xF640 0x0605      MOVW     R6,#+2053
   \   0000003C   0xFA24 0xF502      LSR      R5,R4,R2
   \   00000040   0x780A             LDRB     R2,[R1, #+0]
   \   00000042   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   00000046   0xFA03 0xF202      LSL      R2,R3,R2
   \   0000004A   0x432A             ORRS     R2,R2,R5
   \   0000004C   0x.... 0x....      LDR.W    R3,??DataTable16_1
   \   00000050   0xF8A3 0x208C      STRH     R2,[R3, #+140]
   \   00000054   0x.... 0x....      LDR.W    R3,??DataTable17_12
   \   00000058   0x881D             LDRH     R5,[R3, #+0]
   \   0000005A   0x42B5             CMP      R5,R6
   \   0000005C   0xDA60             BGE.N    ??SPI4_IRQHandler_3
    515                         {
    516                              /*-------------------------------------------------------------------------------------------------------------                                             
    517                              Sequence  Record Data                     Processing Data                 Player Data
    518                                                
    519                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    520                                                
    521                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    522                                                
    523                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    524                               ---------------------------------------------------------------------------------------------------------------*/                     
    525                               /* Recording Audio Data */			             
    526                               switch (buffer_switch)
   \   0000005E   0x.... 0x....      LDR.W    R5,??DataTable17_2
   \   00000062   0x782D             LDRB     R5,[R5, #+0]
   \   00000064   0xB11D             CBZ.N    R5,??SPI4_IRQHandler_4
   \   00000066   0x2D02             CMP      R5,#+2
   \   00000068   0xD011             BEQ.N    ??SPI4_IRQHandler_5
   \   0000006A   0xD308             BCC.N    ??SPI4_IRQHandler_6
   \   0000006C   0xE058             B.N      ??SPI4_IRQHandler_3
    527                               {
    528                                   case BUF1_PLAY:
    529                                       Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_4: (+1)
   \   0000006E   0x881F             LDRH     R7,[R3, #+0]
   \   00000070   0x.... 0x....      LDR.W    R6,??DataTable17_3  ;; 0xc00080a0
   \   00000074   0x1C7D             ADDS     R5,R7,#+1
   \   00000076   0x801D             STRH     R5,[R3, #+0]
   \   00000078   0xF244 0x0550      MOVW     R5,#+16464
   \   0000007C   0xE045             B.N      ??SPI4_IRQHandler_7
    530                                       Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
    531                                       break;
    532                                   case BUF2_PLAY:
    533                                       Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_6: (+1)
   \   0000007E   0x881F             LDRH     R7,[R3, #+0]
   \   00000080   0x.... 0x....      LDR.W    R6,??DataTable18  ;; 0xc0010140
   \   00000084   0x1C7D             ADDS     R5,R7,#+1
   \   00000086   0x801D             STRH     R5,[R3, #+0]
   \   00000088   0xF244 0x0550      MOVW     R5,#+16464
   \   0000008C   0xE03D             B.N      ??SPI4_IRQHandler_7
    534                                       Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
    535                                       break;
    536                                   case BUF3_PLAY:
    537                                       Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_5: (+1)
   \   0000008E   0x881F             LDRH     R7,[R3, #+0]
   \   00000090   0x1C7D             ADDS     R5,R7,#+1
   \   00000092   0x801D             STRH     R5,[R3, #+0]
   \   00000094   0xF244 0x0550      MOVW     R5,#+16464
   \   00000098   0xE035             B.N      ??SPI4_IRQHandler_8
    538                                       Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
    539                                       break;                          
    540                                   default:
    541                                       break;
    542                               }
    543                         }
    544          	   }
    545                  }
    546          	else
    547          	{
    548                    if (Main_stLROld==GPIO_PIN_RESET)
   \                     ??SPI4_IRQHandler_1: (+1)
   \   0000009A   0xB90A             CBNZ.N   R2,??SPI4_IRQHandler_9
    549                    {
    550                        SPI4_stNipple = (test);	  
   \                     ??SPI4_IRQHandler_2: (+1)
   \   0000009C   0x804C             STRH     R4,[R1, #+2]
   \   0000009E   0xE03F             B.N      ??SPI4_IRQHandler_3
    551          
    552                    }
    553                    else
    554                    {
    555                         vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI4_IRQHandler_9: (+1)
   \   000000A0   0x780A             LDRB     R2,[R1, #+0]
   \   000000A2   0xF9B1 0x3002      LDRSH    R3,[R1, #+2]
    556                         if (WaveRec_idxSens6 < (2*AUDIO_OUT_BUFFER_SIZE+5))
   \   000000A6   0xF640 0x0605      MOVW     R6,#+2053
   \   000000AA   0xFA24 0xF502      LSR      R5,R4,R2
   \   000000AE   0x780A             LDRB     R2,[R1, #+0]
   \   000000B0   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   000000B4   0xFA03 0xF202      LSL      R2,R3,R2
   \   000000B8   0x432A             ORRS     R2,R2,R5
   \   000000BA   0x.... 0x....      LDR.W    R3,??DataTable16_1
   \   000000BE   0xF8A3 0x208E      STRH     R2,[R3, #+142]
   \   000000C2   0x.... 0x....      LDR.W    R3,??DataTable17_13
   \   000000C6   0x881D             LDRH     R5,[R3, #+0]
   \   000000C8   0x42B5             CMP      R5,R6
   \   000000CA   0xDA29             BGE.N    ??SPI4_IRQHandler_3
    557                         {
    558                              /*-------------------------------------------------------------------------------------------------------------                                             
    559                              Sequence  Record Data                     Processing Data                 Player Data
    560                                                
    561                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    562                                                
    563                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    564                                                
    565                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    566                               ---------------------------------------------------------------------------------------------------------------*/                 
    567                                /* Recording Audio Data */			             
    568                               switch (buffer_switch)
   \   000000CC   0x.... 0x....      LDR.W    R5,??DataTable17_2
   \   000000D0   0x782D             LDRB     R5,[R5, #+0]
   \   000000D2   0xB11D             CBZ.N    R5,??SPI4_IRQHandler_10
   \   000000D4   0x2D02             CMP      R5,#+2
   \   000000D6   0xD011             BEQ.N    ??SPI4_IRQHandler_11
   \   000000D8   0xD308             BCC.N    ??SPI4_IRQHandler_12
   \   000000DA   0xE021             B.N      ??SPI4_IRQHandler_3
    569                               {
    570                                   case BUF1_PLAY:
    571                                       Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_10: (+1)
   \   000000DC   0x881F             LDRH     R7,[R3, #+0]
   \   000000DE   0x.... 0x....      LDR.W    R6,??DataTable17_3  ;; 0xc00080a0
   \   000000E2   0x1C7D             ADDS     R5,R7,#+1
   \   000000E4   0x801D             STRH     R5,[R3, #+0]
   \   000000E6   0xF245 0x0564      MOVW     R5,#+20580
   \   000000EA   0xE00E             B.N      ??SPI4_IRQHandler_7
    572                                       Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
    573                                       break;
    574                                   case BUF2_PLAY:
    575                                       Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_12: (+1)
   \   000000EC   0x881F             LDRH     R7,[R3, #+0]
   \   000000EE   0x.... 0x....      LDR.W    R6,??DataTable18  ;; 0xc0010140
   \   000000F2   0x1C7D             ADDS     R5,R7,#+1
   \   000000F4   0x801D             STRH     R5,[R3, #+0]
   \   000000F6   0xF245 0x0564      MOVW     R5,#+20580
   \   000000FA   0xE006             B.N      ??SPI4_IRQHandler_7
    576                                       Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
    577                                       break;
    578                                   case BUF3_PLAY:
    579                                       Buffer1.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_11: (+1)
   \   000000FC   0x881F             LDRH     R7,[R3, #+0]
   \   000000FE   0x1C7D             ADDS     R5,R7,#+1
   \   00000100   0x801D             STRH     R5,[R3, #+0]
   \   00000102   0xF245 0x0564      MOVW     R5,#+20580
   \                     ??SPI4_IRQHandler_8: (+1)
   \   00000106   0xF04F 0x4640      MOV      R6,#-1073741824
   \                     ??SPI4_IRQHandler_7: (+1)
   \   0000010A   0xEB06 0x0747      ADD      R7,R6,R7, LSL #+1
   \   0000010E   0x53EA             STRH     R2,[R5, R7]
    580                                       Buffer1.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   00000110   0x881F             LDRH     R7,[R3, #+0]
   \   00000112   0xF107 0x0C01      ADD      R12,R7,#+1
   \   00000116   0xF8A3 0xC000      STRH     R12,[R3, #+0]
   \   0000011A   0xEB06 0x0347      ADD      R3,R6,R7, LSL #+1
   \   0000011E   0x52EA             STRH     R2,[R5, R3]
    581                                       break;                          
    582                                   default:
    583                                       break;
    584                               }
    585                         }
    586                    }		
    587          	}
    588          
    589          	/* The code to store data in to buffer for testing purpose */
    590          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
   \                     ??SPI4_IRQHandler_3: (+1)
   \   00000120   0x888A             LDRH     R2,[R1, #+4]
   \   00000122   0xF5B2 0x5F80      CMP      R2,#+4096
   \   00000126   0xDA08             BGE.N    ??SPI4_IRQHandler_13
    591          	{
    592          		TestSDO56[iSDO56++]=test;
   \   00000128   0x888A             LDRH     R2,[R1, #+4]
   \   0000012A   0x1C53             ADDS     R3,R2,#+1
   \   0000012C   0xEB01 0x0242      ADD      R2,R1,R2, LSL #+1
   \   00000130   0x808B             STRH     R3,[R1, #+4]
   \   00000132   0x8114             STRH     R4,[R2, #+8]
    593          	}
    594          	else
    595          	{
    596          		iSDO56=0;
    597          	}
    598          
    599          
    600          	/* Update Old value */	  
    601          	Main_stLROld=Main_stLR;	  
   \   00000134   0x7048             STRB     R0,[R1, #+1]
    602               
    603            }      
    604          }
   \   00000136   0xB001             ADD      SP,SP,#+4
   \   00000138   0xBDF0             POP      {R4-R7,PC}
   \                     ??SPI4_IRQHandler_13: (+1)
   \   0000013A   0x2200             MOVS     R2,#+0
   \   0000013C   0x808A             STRH     R2,[R1, #+4]
   \   0000013E   0x7048             STRB     R0,[R1, #+1]
   \   00000140   0xB001             ADD      SP,SP,#+4
   \   00000142   0xBDF0             POP      {R4-R7,PC}       ;; return
   \   00000144                      REQUIRE Buffer2
   \   00000144                      REQUIRE Buffer3
   \   00000144                      REQUIRE Buffer1

   \                                 In section .bss, align 4
   \                     SPI4_stPosShft:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \                     SPI4_stNipple:
   \   00000002                      DS8 2
   \                     iSDO56:
   \   00000004                      DS8 2
   \   00000006                      DS8 2
   \                     TestSDO56:
   \   00000008                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hdma_spi2_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi3_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi5_rx:
   \   00000000                      DS8 80
   \                     hdma_spi6_rx:
   \   00000050                      DS8 80

   \                                 In section .bss, align 2
   \                     idxFrmPDMMic8:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
   \                     cntStrt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     I2S1_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, at 0xc0000000
   \                     Buffer1:
   \   00000000                      DS8 32928

   \                                 In section .bss, at 0xc00080a0
   \                     Buffer2:
   \   00000000                      DS8 32928

   \                                 In section .bss, at 0xc0010140
   \                     Buffer3:
   \   00000000                      DS8 32928

   \                                 In section .bss, align 1
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \   00000000                      DS8 1
    605          
    606          
    607          
    608          

   \                                 In section .text, align 2, keep-with-next
    609          void SPI5_IRQHandler(void)
    610          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    611            //static uint16_t stNipple;
    612            //static uint8_t stLR, stOder;
    613          
    614            /* USER CODE BEGIN SPI5_IRQn 0 */
    615          
    616            /* USER CODE END SPI5_IRQn 0 */
    617            //HAL_SPI_IRQHandler(&hspi5);
    618            /* USER CODE BEGIN SPI5_IRQn 1 */
    619          
    620            /* USER CODE END SPI5_IRQn 1 */
    621              /* Check if data are available in SPI Data register */
    622            /* SPI in mode Receiver ----------------------------------------------------*/
    623            if(
    624               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    625               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    626               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_14
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xD43C             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD539             BPL.N    ??SPI5_IRQHandler_0
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD536             BPL.N    ??SPI5_IRQHandler_0
    627            {
    628          
    629          
    630             uint16_t test;
    631             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable17_15  ;; 0x4001500c
    632             SPI5->DR = 3333;
   \   0000001E   0xF640 0x5205      MOVW     R2,#+3333
   \   00000022   0x6801             LDR      R1,[R0, #+0]
   \   00000024   0x6002             STR      R2,[R0, #+0]
    633          
    634            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000026   0xF8B4 0x0134      LDRH     R0,[R4, #+308]
   \   0000002A   0xB28A             UXTH     R2,R1
   \   0000002C   0x0209             LSLS     R1,R1,#+8
   \   0000002E   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   00000032   0xEB04 0x0240      ADD      R2,R4,R0, LSL #+1
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0xF8A2 0x1144      STRH     R1,[R2, #+324]
   \   0000003C   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    635            
    636            //volume = 64;
    637            
    638            if (idxMic8>=64)
   \   00000040   0xB280             UXTH     R0,R0
   \   00000042   0x2840             CMP      R0,#+64
   \   00000044   0xDB20             BLT.N    ??SPI5_IRQHandler_0
    639            {
    640          	if (buffer_switch != 1)
   \   00000046   0x.... 0x....      LDR.W    R2,??DataTable17_2
   \   0000004A   0xF8D4 0x0140      LDR      R0,[R4, #+320]
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable18_1
   \   00000052   0xF104 0x03C8      ADD      R3,R4,#+200
   \   00000056   0x7812             LDRB     R2,[R2, #+0]
   \   00000058   0x780A             LDRB     R2,[R1, #+0]
   \   0000005A   0xF8B4 0x1138      LDRH     R1,[R4, #+312]
   \   0000005E   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   00000062   0xF504 0x70A2      ADD      R0,R4,#+324
    641          	{
    642          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    643          						  (PDMFilter_InitStruct *)&Filter[0]);
    644          	}
    645          	else
    646          	{
    647          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    648          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \   00000066   0x.... 0x....      BL       PDM_Filter_64_LSB
    649          	}
    650          	idxMic8=0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    651          	cntPos++;
   \   00000070   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   00000074   0x1C40             ADDS     R0,R0,#+1
   \   00000076   0xF8A4 0x0138      STRH     R0,[R4, #+312]
    652          	if (cntPos>=256) cntPos=0;
   \   0000007A   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   0000007E   0x28FF             CMP      R0,#+255
   \   00000080   0xBFC4             ITT      GT 
   \   00000082   0x2000             MOVGT    R0,#+0
   \   00000084   0xF8A4 0x0138      STRHGT   R0,[R4, #+312]
    653            }
    654              
    655            }
    656            
    657          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   00000088   0xBD10             POP      {R4,PC}          ;; return
    658          
    659          /* SPI5 init function */
    660          
    661          

   \                                 In section .text, align 2, keep-with-next
    662          void SPI6_IRQHandler(void)
    663          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    664            /* SPI in mode Receiver ----------------------------------------------------*/
    665            if(
    666          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    667               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    668               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_14
   \   00000006   0x6E60             LDR      R0,[R4, #+100]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0789             LSLS     R1,R1,#+30
   \   0000000C   0xD539             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD536             BPL.N    ??SPI6_IRQHandler_0
    669            {
    670          
    671          
    672               uint16_t test;
    673               test =  SPI_I2S_ReceiveData(SPI6);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable18_2  ;; 0x4001540c
    674               SPI6->DR = 3333;
   \   00000018   0xF640 0x5205      MOVW     R2,#+3333
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0x6002             STR      R2,[R0, #+0]
    675          
    676              pDataMic7[idxMic7++] =	HTONS(test);
   \   00000020   0xF8B4 0x0136      LDRH     R0,[R4, #+310]
   \   00000024   0xB28A             UXTH     R2,R1
   \   00000026   0x0209             LSLS     R1,R1,#+8
   \   00000028   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   0000002C   0xEB04 0x0240      ADD      R2,R4,R0, LSL #+1
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0xF8A2 0x11C4      STRH     R1,[R2, #+452]
   \   00000036   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    677          
    678              //volume = 64;
    679          
    680              if (idxMic7>=64)
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0x2840             CMP      R0,#+64
   \   0000003E   0xDB20             BLT.N    ??SPI6_IRQHandler_0
    681              {
    682                if (buffer_switch != 1)
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable17_2
   \   00000044   0xF8D4 0x013C      LDR      R0,[R4, #+316]
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable18_1
   \   0000004C   0xF104 0x03FC      ADD      R3,R4,#+252
   \   00000050   0x7812             LDRB     R2,[R2, #+0]
   \   00000052   0x780A             LDRB     R2,[R1, #+0]
   \   00000054   0xF8B4 0x113A      LDRH     R1,[R4, #+314]
   \   00000058   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   0000005C   0xF504 0x70E2      ADD      R0,R4,#+452
    683                {
    684                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    685                                                          (PDMFilter_InitStruct *)&Filter[1]);
    686                }
    687                else
    688                {
    689                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    690                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \   00000060   0x.... 0x....      BL       PDM_Filter_64_LSB
    691                }
    692                idxMic7=0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    693                cntPos7++;
   \   0000006A   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0xF8A4 0x013A      STRH     R0,[R4, #+314]
    694                if (cntPos7>=256) cntPos7=0;
   \   00000074   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000078   0x28FF             CMP      R0,#+255
   \   0000007A   0xBFC4             ITT      GT 
   \   0000007C   0x2000             MOVGT    R0,#+0
   \   0000007E   0xF8A4 0x013A      STRHGT   R0,[R4, #+314]
    695              }
    696              
    697            }
    698          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   00000082   0xBD10             POP      {R4,PC}          ;; return
    699          
    700          
    701          

   \                                 In section .text, align 2, keep-with-next
    702          void MIC1TO6_Init(void)
    703          {
   \                     MIC1TO6_Init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable13_1  ;; 0x40020000
    704            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_0: (+1)
   \   00000008   0x2110             MOVS     R1,#+16
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD0F9             BEQ.N    ??MIC1TO6_Init_0
    705            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_1: (+1)
   \   00000014   0x2110             MOVS     R1,#+16
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD0F9             BEQ.N    ??MIC1TO6_Init_1
    706            I2S1_Init(); /* I2S1   --> SDO12 */
   \   00000020   0x.... 0x....      LDR.W    R5,??DataTable16_1
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable18_3  ;; 0x40013000
   \   00000028   0x6028             STR      R0,[R5, #+0]
   \   0000002A   0x2020             MOVS     R0,#+32
   \   0000002C   0x60A8             STR      R0,[R5, #+8]
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x60E8             STR      R0,[R5, #+12]
   \   00000032   0xF44F 0x7680      MOV      R6,#+256
   \   00000036   0x6128             STR      R0,[R5, #+16]
   \   00000038   0xF44F 0x577A      MOV      R7,#+16000
   \   0000003C   0x61A8             STR      R0,[R5, #+24]
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x61E8             STR      R0,[R5, #+28]
   \   00000042   0x4628             MOV      R0,R5
   \   00000044   0x606E             STR      R6,[R5, #+4]
   \   00000046   0x616F             STR      R7,[R5, #+20]
   \   00000048   0x.... 0x....      BL       HAL_I2S_Init
   \   0000004C   0x6828             LDR      R0,[R5, #+0]
   \   0000004E   0x6841             LDR      R1,[R0, #+4]
   \   00000050   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000054   0x6041             STR      R1,[R0, #+4]
   \   00000056   0x69C1             LDR      R1,[R0, #+28]
   \   00000058   0xF441 0x6180      ORR      R1,R1,#0x400
   \   0000005C   0x61C1             STR      R1,[R0, #+28]
    707            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_2: (+1)
   \   0000005E   0x2110             MOVS     R1,#+16
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xD0F9             BEQ.N    ??MIC1TO6_Init_2
    708            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_3: (+1)
   \   0000006A   0x2110             MOVS     R1,#+16
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD0F9             BEQ.N    ??MIC1TO6_Init_3
    709            I2S2_Init(); /* I2S2   --> SDO34 */
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable18_4  ;; 0x40003800
   \   0000007A   0x646E             STR      R6,[R5, #+68]
   \   0000007C   0x6428             STR      R0,[R5, #+64]
   \   0000007E   0x2020             MOVS     R0,#+32
   \   00000080   0x64A8             STR      R0,[R5, #+72]
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x64E8             STR      R0,[R5, #+76]
   \   00000086   0x6528             STR      R0,[R5, #+80]
   \   00000088   0x65A8             STR      R0,[R5, #+88]
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0x65E8             STR      R0,[R5, #+92]
   \   0000008E   0xF105 0x0040      ADD      R0,R5,#+64
   \   00000092   0x656F             STR      R7,[R5, #+84]
   \   00000094   0x.... 0x....      BL       HAL_I2S_Init
   \   00000098   0x6C28             LDR      R0,[R5, #+64]
   \   0000009A   0x6841             LDR      R1,[R0, #+4]
   \   0000009C   0xF041 0x0140      ORR      R1,R1,#0x40
   \   000000A0   0x6041             STR      R1,[R0, #+4]
   \   000000A2   0x69C1             LDR      R1,[R0, #+28]
   \   000000A4   0xF441 0x6180      ORR      R1,R1,#0x400
   \   000000A8   0x61C1             STR      R1,[R0, #+28]
    710            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_4: (+1)
   \   000000AA   0x2110             MOVS     R1,#+16
   \   000000AC   0x4620             MOV      R0,R4
   \   000000AE   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   000000B2   0x2801             CMP      R0,#+1
   \   000000B4   0xD0F9             BEQ.N    ??MIC1TO6_Init_4
    711            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_5: (+1)
   \   000000B6   0x2110             MOVS     R1,#+16
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD0F9             BEQ.N    ??MIC1TO6_Init_5
    712            SPI4_Init(); /* SPI4   --> SDO56 */
   \   000000C2   0x.... 0x....      BL       SPI4_Init
    713          
    714            SPI5_Init();
   \   000000C6   0x.... 0x....      BL       SPI5_Init
    715            SPI6_Init();
   \   000000CA   0xB001             ADD      SP,SP,#+4
   \   000000CC   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   000000D0   0x....             B.N      SPI6_Init
    716          
    717            //StartRecMic7_8();
    718          }
    719          

   \                                 In section .text, align 2, keep-with-next
    720          void StartRecMic7_8 (void)
    721          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    722          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_14
   \   00000006   0xF44F 0x5280      MOV      R2,#+4096
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable18_5
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    723          #if (0)
    724          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
    725          #else
    726          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000014   0xF44F 0x5280      MOV      R2,#+4096
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable18_6
   \   0000001C   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000020   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    727          #endif
    728          	  swtSDO7 = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF884 0x0130      STRB     R0,[R4, #+304]
    729          	  swtSDO8 = 0;
   \   0000002A   0xF884 0x0131      STRB     R0,[R4, #+305]
    730          
    731          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    732          
    733          /* I2S1 init function */
    734          /* Read data of MIC12 */
    735          static void I2S1_Init(void)
    736          {
    737          #if 1
    738            hi2s1.Instance = SPI1;
    739            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
    740            hi2s1.Init.Standard = I2S_STANDARD_LSB;
    741            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    742            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    743            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    744            hi2s1.Init.CPOL = I2S_CPOL_LOW;
    745            hi2s1.Init.ClockSource = I2S_CLOCK_EXTERNAL;
    746            HAL_I2S_Init(&hi2s1);
    747          
    748            /* Enable TXE and ERR interrupt */
    749           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
    750           
    751           __HAL_I2S_ENABLE(&hi2s1);
    752          #else
    753          	hspi1.Instance = SPI1;
    754          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    755          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    756          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    757          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    758          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    759          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    760          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    761          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    762          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    763          	hspi1.Init.CRCPolynomial = 7;
    764          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    765          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    766          	//hspi4.RxISR = SPI5_CallBack;
    767          	HAL_SPI_Init(&hspi1);
    768          
    769          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    770            /* Enable TXE, RXNE and ERR interrupt */
    771           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    772          
    773           __HAL_SPI_ENABLE(&hspi1);
    774          
    775          #endif
    776          }
    777          
    778          /* I2S2 init function */
    779          /* Read data of MIC34 */
    780          
    781          static void I2S2_Init(void)
    782          {
    783          
    784          #if 1
    785           //HAL_I2S_DeInit(&hi2s2);
    786           hi2s2.Instance = SPI2;
    787           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
    788           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
    789           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
    790           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    791           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    792           hi2s2.Init.CPOL = I2S_CPOL_LOW;
    793           hi2s2.Init.ClockSource = I2S_CLOCK_EXTERNAL;
    794          
    795           HAL_I2S_Init(&hi2s2);
    796           /* Enable TXE and ERR interrupt */
    797           __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
    798           __HAL_I2S_ENABLE(&hi2s2);
    799          
    800          #else
    801             hspi2.Instance = SPI2;
    802             hspi2.Init.Mode = SPI_MODE_SLAVE;
    803             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    804             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
    805             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
    806             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
    807             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    808             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
    809             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
    810             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    811             hspi2.Init.CRCPolynomial = 7;
    812             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    813             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    814             HAL_SPI_Init(&hspi2);
    815          
    816          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    817           /* Enable TXE, RXNE and ERR interrupt */
    818          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
    819          
    820          __HAL_SPI_ENABLE(&hspi2);
    821          
    822          #endif
    823          
    824          
    825          }
    826          
    827          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    828          void SPI4_Init(void)
    829          {
   \                     SPI4_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    830          
    831            hspi4.Instance = SPI4;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_9
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18_7  ;; 0x40013400
   \   0000000A   0x6020             STR      R0,[R4, #+0]
    832            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6060             STR      R0,[R4, #+4]
    833            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000010   0xF44F 0x6080      MOV      R0,#+1024
   \   00000014   0x60A0             STR      R0,[R4, #+8]
    834            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000016   0xF44F 0x6070      MOV      R0,#+3840
   \   0000001A   0x60E0             STR      R0,[R4, #+12]
    835            hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x6120             STR      R0,[R4, #+16]
    836            hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6160             STR      R0,[R4, #+20]
    837            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000024   0xF44F 0x7000      MOV      R0,#+512
   \   00000028   0x61A0             STR      R0,[R4, #+24]
    838            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x6220             STR      R0,[R4, #+32]
    839            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0x6260             STR      R0,[R4, #+36]
    840            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000030   0x62A0             STR      R0,[R4, #+40]
    841            hspi4.Init.CRCPolynomial = 7;
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0x62E0             STR      R0,[R4, #+44]
    842            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x6320             STR      R0,[R4, #+48]
    843            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000003A   0x6360             STR      R0,[R4, #+52]
    844            HAL_SPI_Init(&hspi4);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       HAL_SPI_Init
    845          
    846            /* Enable TXE, RXNE and ERR interrupt */
    847           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x6841             LDR      R1,[R0, #+4]
   \   00000046   0xF041 0x0160      ORR      R1,R1,#0x60
   \   0000004A   0x6041             STR      R1,[R0, #+4]
    848          
    849           __HAL_SPI_ENABLE(&hspi4);
   \   0000004C   0x6801             LDR      R1,[R0, #+0]
   \   0000004E   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000052   0x6001             STR      R1,[R0, #+0]
    850          }
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
    851          
    852          

   \                                 In section .text, align 2, keep-with-next
    853          void Mic7Rec(void)
    854          {
    855              SPI5_Init();
   \                     Mic7Rec: (+1)
   \   00000000   0x....             B.N      SPI5_Init
    856          }
    857          

   \                                 In section .text, align 2, keep-with-next
    858          void Mic8Rec(void)
    859          {
    860              SPI6_Init();
   \                     Mic8Rec: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_14
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable18_8  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   \   0000001E   0x6781             STR      R1,[R0, #+120]
   \   00000020   0xF44F 0x7100      MOV      R1,#+512
   \   00000024   0x67C1             STR      R1,[R0, #+124]
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0xF8C0 0x1084      STR      R1,[R0, #+132]
   \   0000002C   0xF8C0 0x1088      STR      R1,[R0, #+136]
   \   00000030   0xF8C0 0x108C      STR      R1,[R0, #+140]
   \   00000034   0x2107             MOVS     R1,#+7
   \   00000036   0xF8C0 0x1090      STR      R1,[R0, #+144]
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xF8C0 0x1094      STR      R1,[R0, #+148]
   \   00000040   0xF8C0 0x1098      STR      R1,[R0, #+152]
   \   00000044   0x3064             ADDS     R0,R0,#+100
   \   00000046   0x.... 0x....      B.W      HAL_SPI_Init
    861          }
    862          
    863          
    864          /* SPI5 init function */

   \                                 In section .text, align 4, keep-with-next
    865          void SPI5_Init(void)
    866          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    867          	
    868              /* Enable CRC module */
    869              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40023830
    870          	for (char i=0; i< 2; i++)
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable17_14
   \   0000000C   0x2602             MOVS     R6,#+2
   \   0000000E   0xED2D 0x8B02      VPUSH    {D8}
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xF104 0x05C8      ADD      R5,R4,#+200
   \   00000018   0xF44F 0x577A      MOV      R7,#+16000
   \   0000001C   0xEEB2 0x8A04      VMOV.F32 S16,#10.0
   \   00000020   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000024   0xEDDF 0x....      VLDR.W   S17,??DataTable12  ;; 0x45fa0000
   \   00000028   0xF8C0 0x1000      STR.W    R1,[R0, #+0]
    871          	{
    872          		/* Filter LP & HP Init */
    873          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \                     ??SPI5_Init_0: (+1)
   \   0000002C   0xEDC5 0x8A01      VSTR     S17,[R5, #+4]
    874          		Filter[i].HP_HZ = 10;
    875          		Filter[i].Fs = 16000;    //sop1hc: 16000
    876          		Filter[i].Out_MicChannels = 1;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xED85 0x8A02      VSTR     S16,[R5, #+8]
   \   00000036   0x802F             STRH     R7,[R5, #+0]
   \   00000038   0x81E8             STRH     R0,[R5, #+14]
    877          		Filter[i].In_MicChannels = 1;
   \   0000003A   0x81A8             STRH     R0,[R5, #+12]
    878          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   0000003C   0x4628             MOV      R0,R5
   \   0000003E   0x.... 0x....      BL       PDM_Filter_Init
    879          	}
   \   00000042   0x3534             ADDS     R5,R5,#+52
   \   00000044   0x1E76             SUBS     R6,R6,#+1
   \   00000046   0xD1F1             BNE.N    ??SPI5_Init_0
    880          
    881          
    882            hspi5.Instance = SPI5;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable18_9  ;; 0x40015000
   \   0000004C   0x6020             STR      R0,[R4, #+0]
    883            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x6060             STR      R0,[R4, #+4]
    884            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000052   0xF44F 0x6080      MOV      R0,#+1024
   \   00000056   0x60A0             STR      R0,[R4, #+8]
    885            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000058   0xF44F 0x6070      MOV      R0,#+3840
   \   0000005C   0x60E0             STR      R0,[R4, #+12]
    886            hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x6120             STR      R0,[R4, #+16]
    887            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000062   0x6160             STR      R0,[R4, #+20]
    888            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000064   0xF44F 0x7000      MOV      R0,#+512
   \   00000068   0x61A0             STR      R0,[R4, #+24]
    889            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x6220             STR      R0,[R4, #+32]
    890            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000006E   0x6260             STR      R0,[R4, #+36]
    891            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000070   0x62A0             STR      R0,[R4, #+40]
    892            hspi5.Init.CRCPolynomial = 7;
   \   00000072   0x2007             MOVS     R0,#+7
   \   00000074   0x62E0             STR      R0,[R4, #+44]
    893            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x6320             STR      R0,[R4, #+48]
    894            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000007A   0x6360             STR      R0,[R4, #+52]
    895            //hspi5.RxISR = SPI5_CallBack;
    896            HAL_SPI_Init(&hspi5);
   \   0000007C   0x4620             MOV      R0,R4
   \   0000007E   0xECBD 0x8B02      VPOP     {D8}
   \   00000082   0xB001             ADD      SP,SP,#+4
   \   00000084   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   00000088   0x.... 0x....      B.W      HAL_SPI_Init
    897          
    898          
    899            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    900            /* Enable TXE, RXNE and ERR interrupt */
    901           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
    902          
    903           //__HAL_SPI_ENABLE(&hspi5);
    904          
    905          }
    906          

   \                                 In section .text, align 2, keep-with-next
    907          void SPI6_Init(void)
    908          {
    909          	
    910            hspi6.Instance = SPI6;
   \                     SPI6_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_14
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable18_8  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
    911            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
    912            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
    913            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
    914            hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6741             STR      R1,[R0, #+116]
    915            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001E   0x6781             STR      R1,[R0, #+120]
    916            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000020   0xF44F 0x7100      MOV      R1,#+512
   \   00000024   0x67C1             STR      R1,[R0, #+124]
    917            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0xF8C0 0x1084      STR      R1,[R0, #+132]
    918            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002C   0xF8C0 0x1088      STR      R1,[R0, #+136]
    919            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000030   0xF8C0 0x108C      STR      R1,[R0, #+140]
    920            hspi6.Init.CRCPolynomial = 7;
   \   00000034   0x2107             MOVS     R1,#+7
   \   00000036   0xF8C0 0x1090      STR      R1,[R0, #+144]
    921            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xF8C0 0x1094      STR      R1,[R0, #+148]
    922            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000040   0xF8C0 0x1098      STR      R1,[R0, #+152]
    923            //hspi6.RxISR = SPI6_CallBack;
    924            HAL_SPI_Init(&hspi6);
   \   00000044   0x3064             ADDS     R0,R0,#+100
   \   00000046   0x.... 0x....      B.W      HAL_SPI_Init
    925          
    926          
    927            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    928            /* Enable TXE, RXNE and ERR interrupt */
    929           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
    930          
    931           //__HAL_SPI_ENABLE(&hspi6);
    932          
    933          }
    934          
    935          
    936          
    937          

   \                                 In section .text, align 2, keep-with-next
    938          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
    939          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
    940          
    941            GPIO_InitTypeDef GPIO_InitStruct;
    942            if (hspi->Instance==SPI1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable18_3  ;; 0x40013000
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD131             BNE.N    ??HAL_SPI_MspInit_0
    943            {
    944          	  /* USER CODE BEGIN SPI1_MspInit 0 */
    945          	  
    946          	  /* USER CODE END SPI1_MspInit 0 */
    947          	  /* Peripheral clock enable */
    948          	  __SPI1_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable13  ;; 0x40023830
    949          	  __GPIOA_CLK_ENABLE();
    950          	  __GPIOC_CLK_ENABLE();
    951          	  
    952          	  /**I2S1 GPIO Configuration	
    953          		PA4 	------> I2S1_WS --> LRCKO
    954          		PA5 	------> I2S1_CK --> BICKO
    955          		PA7 	------> I2S1_SD --> SDO12
    956          		PC4 	------> I2S1_MCK
    957          		*/
    958          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    959          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    960          		GPIO_InitStruct.Pull = GPIO_NOPULL;
    961          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    962          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    963          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000014   0xA901             ADD      R1,SP,#+4
   \   00000016   0x6968             LDR      R0,[R5, #+20]
   \   00000018   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   0000001C   0x6168             STR      R0,[R5, #+20]
   \   0000001E   0x6968             LDR      R0,[R5, #+20]
   \   00000020   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x6828             LDR      R0,[R5, #+0]
   \   0000002A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000002E   0x6028             STR      R0,[R5, #+0]
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x6828             LDR      R0,[R5, #+0]
   \   0000003C   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000040   0x6028             STR      R0,[R5, #+0]
   \   00000042   0x6828             LDR      R0,[R5, #+0]
   \   00000044   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   \   0000004C   0x20F0             MOVS     R0,#+240
   \   0000004E   0x9001             STR      R0,[SP, #+4]
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x9002             STR      R0,[SP, #+8]
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x9003             STR      R0,[SP, #+12]
   \   00000058   0x2003             MOVS     R0,#+3
   \   0000005A   0x9004             STR      R0,[SP, #+16]
   \   0000005C   0x2005             MOVS     R0,#+5
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40020000
   \   00000062   0x.... 0x....      BL       HAL_GPIO_Init
    964          	  
    965          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
    966          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    967          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
    968          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    969          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    970          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
    971          		
    972          	  /* Peripheral interrupt init*/
    973          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x2023             MOVS     R0,#+35
   \   0000006C   0x.... 0x....      BL       HAL_NVIC_SetPriority
    974          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000070   0x2023             MOVS     R0,#+35
   \   00000072   0xE1CA             B.N      ??HAL_SPI_MspInit_1
    975          	  /* USER CODE BEGIN SPI1_MspInit 1 */
    976          	  
    977          	  /* USER CODE END SPI1_MspInit 1 */
    978          
    979            }
    980            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable18_4  ;; 0x40003800
   \   00000078   0x4288             CMP      R0,R1
   \   0000007A   0xD149             BNE.N    ??HAL_SPI_MspInit_2
    981            {
    982          	  /* USER CODE BEGIN SPI2_MspInit 0 */
    983          	  
    984          	  /* USER CODE END SPI2_MspInit 0 */
    985          		/* Peripheral clock enable */
    986          		__SPI2_CLK_ENABLE();
   \   0000007C   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
    987          		__GPIOI_CLK_ENABLE();
    988          		__GPIOB_CLK_ENABLE();
    989          		__GPIOC_CLK_ENABLE();
    990          	  
    991          		/**I2S2 GPIO Configuration	   
    992          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
    993          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
    994          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
    995          	  
    996          	  
    997          		*/
    998          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
    999          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1000          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1001          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1002          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1003          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   0000007E   0xA901             ADD      R1,SP,#+4
   \   00000080   0x6928             LDR      R0,[R5, #+16]
   \   00000082   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   00000086   0x6128             STR      R0,[R5, #+16]
   \   00000088   0x6928             LDR      R0,[R5, #+16]
   \   0000008A   0xF400 0x4080      AND      R0,R0,#0x4000
   \   0000008E   0x9000             STR      R0,[SP, #+0]
   \   00000090   0x9800             LDR      R0,[SP, #+0]
   \   00000092   0x6828             LDR      R0,[R5, #+0]
   \   00000094   0xF440 0x7080      ORR      R0,R0,#0x100
   \   00000098   0x6028             STR      R0,[R5, #+0]
   \   0000009A   0x6828             LDR      R0,[R5, #+0]
   \   0000009C   0xF400 0x7080      AND      R0,R0,#0x100
   \   000000A0   0x9000             STR      R0,[SP, #+0]
   \   000000A2   0x9800             LDR      R0,[SP, #+0]
   \   000000A4   0x6828             LDR      R0,[R5, #+0]
   \   000000A6   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000AA   0x6028             STR      R0,[R5, #+0]
   \   000000AC   0x6828             LDR      R0,[R5, #+0]
   \   000000AE   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000B2   0x9000             STR      R0,[SP, #+0]
   \   000000B4   0x9800             LDR      R0,[SP, #+0]
   \   000000B6   0x6828             LDR      R0,[R5, #+0]
   \   000000B8   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000BC   0x6028             STR      R0,[R5, #+0]
   \   000000BE   0x6828             LDR      R0,[R5, #+0]
   \   000000C0   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000C4   0x9000             STR      R0,[SP, #+0]
   \   000000C6   0x9800             LDR      R0,[SP, #+0]
   \   000000C8   0x2002             MOVS     R0,#+2
   \   000000CA   0x9001             STR      R0,[SP, #+4]
   \   000000CC   0x9002             STR      R0,[SP, #+8]
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x9003             STR      R0,[SP, #+12]
   \   000000D2   0x2003             MOVS     R0,#+3
   \   000000D4   0x9004             STR      R0,[SP, #+16]
   \   000000D6   0x2005             MOVS     R0,#+5
   \   000000D8   0x9005             STR      R0,[SP, #+20]
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable18_10  ;; 0x40020800
   \   000000DE   0x.... 0x....      BL       HAL_GPIO_Init
   1004          	  
   1005          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   000000E2   0xF44F 0x5040      MOV      R0,#+12288
   1006          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1007          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1008          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1009          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1010          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   000000E6   0xA901             ADD      R1,SP,#+4
   \   000000E8   0x9001             STR      R0,[SP, #+4]
   \   000000EA   0x2002             MOVS     R0,#+2
   \   000000EC   0x9002             STR      R0,[SP, #+8]
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x9003             STR      R0,[SP, #+12]
   \   000000F2   0x2003             MOVS     R0,#+3
   \   000000F4   0x9004             STR      R0,[SP, #+16]
   \   000000F6   0x2005             MOVS     R0,#+5
   \   000000F8   0x9005             STR      R0,[SP, #+20]
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable18_11  ;; 0x40020400
   \   000000FE   0x.... 0x....      BL       HAL_GPIO_Init
   1011          	  
   1012          	  
   1013          		/* Peripheral interrupt init*/
   1014          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   00000102   0x2200             MOVS     R2,#+0
   \   00000104   0x2101             MOVS     R1,#+1
   \   00000106   0x2024             MOVS     R0,#+36
   \   00000108   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1015          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   0000010C   0x2024             MOVS     R0,#+36
   \   0000010E   0xE17C             B.N      ??HAL_SPI_MspInit_1
   1016          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1017          	  
   1018          	  /* USER CODE END SPI2_MspInit 1 */
   1019          
   1020          
   1021            }
   1022            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable18_12  ;; 0x40003c00
   \   00000114   0x4288             CMP      R0,R1
   \   00000116   0xF040 0x808E      BNE.W    ??HAL_SPI_MspInit_3
   1023            {
   1024          	  
   1025              /**I2S3 GPIO Configuration    
   1026                 PB2     ------> I2S3_SD
   1027                 PA15     ------> I2S3_WS (LRCK)
   1028                 PB3     ------> I2S3_CK 
   1029          	   PC7    ------> MCLK
   1030              */
   1031           
   1032            /* USER CODE BEGIN SPI3_MspInit 1 */
   1033            __SPI3_CLK_ENABLE();
   \   0000011A   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   1034            __GPIOA_CLK_ENABLE();
   1035            __GPIOB_CLK_ENABLE();
   1036          
   1037            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   1038            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1039            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1040            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1041            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1042            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   0000011C   0xA901             ADD      R1,SP,#+4
   \   0000011E   0x6928             LDR      R0,[R5, #+16]
   \   00000120   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   00000124   0x6128             STR      R0,[R5, #+16]
   \   00000126   0x6928             LDR      R0,[R5, #+16]
   \   00000128   0xF400 0x4000      AND      R0,R0,#0x8000
   \   0000012C   0x9000             STR      R0,[SP, #+0]
   \   0000012E   0x9800             LDR      R0,[SP, #+0]
   \   00000130   0x6828             LDR      R0,[R5, #+0]
   \   00000132   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000136   0x6028             STR      R0,[R5, #+0]
   \   00000138   0x6828             LDR      R0,[R5, #+0]
   \   0000013A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000013E   0x9000             STR      R0,[SP, #+0]
   \   00000140   0x9800             LDR      R0,[SP, #+0]
   \   00000142   0x6828             LDR      R0,[R5, #+0]
   \   00000144   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000148   0x6028             STR      R0,[R5, #+0]
   \   0000014A   0x6828             LDR      R0,[R5, #+0]
   \   0000014C   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000150   0x9000             STR      R0,[SP, #+0]
   \   00000152   0x9800             LDR      R0,[SP, #+0]
   \   00000154   0x200C             MOVS     R0,#+12
   \   00000156   0x9001             STR      R0,[SP, #+4]
   \   00000158   0x2002             MOVS     R0,#+2
   \   0000015A   0x9002             STR      R0,[SP, #+8]
   \   0000015C   0x2003             MOVS     R0,#+3
   \   0000015E   0x9004             STR      R0,[SP, #+16]
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0x9003             STR      R0,[SP, #+12]
   \   00000164   0x2006             MOVS     R0,#+6
   \   00000166   0x9005             STR      R0,[SP, #+20]
   \   00000168   0x.... 0x....      LDR.W    R0,??DataTable18_11  ;; 0x40020400
   \   0000016C   0x.... 0x....      BL       HAL_GPIO_Init
   1043          
   1044          
   1045            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   00000170   0xF44F 0x4000      MOV      R0,#+32768
   1046            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1047            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1048            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000174   0xA901             ADD      R1,SP,#+4
   \   00000176   0x9001             STR      R0,[SP, #+4]
   \   00000178   0x2002             MOVS     R0,#+2
   \   0000017A   0x9002             STR      R0,[SP, #+8]
   \   0000017C   0x2006             MOVS     R0,#+6
   \   0000017E   0x9005             STR      R0,[SP, #+20]
   \   00000180   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40020000
   \   00000182   0x.... 0x....      BL       HAL_GPIO_Init
   1049          
   1050          #ifdef CODEC_MCLK_ENABLED
   1051            __GPIOC_CLK_ENABLE();
   \   00000186   0x6828             LDR      R0,[R5, #+0]
   1052            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   1053            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1054            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1055            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1056            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1057            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000188   0xA901             ADD      R1,SP,#+4
   \   0000018A   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000018E   0x6028             STR      R0,[R5, #+0]
   \   00000190   0x6828             LDR      R0,[R5, #+0]
   \   00000192   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000196   0x9000             STR      R0,[SP, #+0]
   \   00000198   0x9800             LDR      R0,[SP, #+0]
   \   0000019A   0x2080             MOVS     R0,#+128
   \   0000019C   0x9001             STR      R0,[SP, #+4]
   \   0000019E   0x2002             MOVS     R0,#+2
   \   000001A0   0x9002             STR      R0,[SP, #+8]
   \   000001A2   0x2003             MOVS     R0,#+3
   \   000001A4   0x9004             STR      R0,[SP, #+16]
   \   000001A6   0x2000             MOVS     R0,#+0
   \   000001A8   0x9003             STR      R0,[SP, #+12]
   \   000001AA   0x2006             MOVS     R0,#+6
   \   000001AC   0x9005             STR      R0,[SP, #+20]
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable18_10  ;; 0x40020800
   \   000001B2   0x.... 0x....      BL       HAL_GPIO_Init
   1058          
   1059          #endif /* CODEC_MCLK_ENABLED */ 
   1060          
   1061          #ifdef I2S_INTERRUPT   
   1062               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1063               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1064               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1065          
   1066               /* Enable the I2S DMA request */
   1067               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1068               //__HAL_I2S_ENABLE(&hi2s3);
   1069            	    /* Peripheral interrupt init*/
   1070          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1071          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1072          #endif
   1073          
   1074                /* Enable the DMA clock */ 
   1075          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   000001B6   0x6828             LDR      R0,[R5, #+0]
   \   000001B8   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000001BC   0x6028             STR      R0,[R5, #+0]
   \   000001BE   0x6828             LDR      R0,[R5, #+0]
   1076          
   1077                /* Configure the DMA Stream */
   1078                //HAL_DMA_DeInit(&DmaHandle);
   1079          
   1080                /* Set the parameters to be configured */ 
   1081          	  DmaHandle.Instance = DMA1_Stream7;
   \   000001C0   0x.... 0x....      LDR.W    R5,??DataTable18_13
   \   000001C4   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000001C8   0x9000             STR      R0,[SP, #+0]
   \   000001CA   0x9800             LDR      R0,[SP, #+0]
   \   000001CC   0x.... 0x....      LDR.W    R0,??DataTable18_14  ;; 0x400260b8
   \   000001D0   0x6028             STR      R0,[R5, #+0]
   1082                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   000001D2   0x2000             MOVS     R0,#+0
   \   000001D4   0x6068             STR      R0,[R5, #+4]
   1083          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   000001D6   0x2040             MOVS     R0,#+64
   \   000001D8   0x60A8             STR      R0,[R5, #+8]
   1084          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x60E8             STR      R0,[R5, #+12]
   1085          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   000001DE   0xF44F 0x6080      MOV      R0,#+1024
   \   000001E2   0x6128             STR      R0,[R5, #+16]
   1086          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   000001E4   0xF44F 0x6000      MOV      R0,#+2048
   \   000001E8   0x6168             STR      R0,[R5, #+20]
   1087                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   000001EA   0xF44F 0x5000      MOV      R0,#+8192
   \   000001EE   0x61A8             STR      R0,[R5, #+24]
   1088          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   000001F0   0x2000             MOVS     R0,#+0
   \   000001F2   0x61E8             STR      R0,[R5, #+28]
   1089                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   000001F4   0xF44F 0x3000      MOV      R0,#+131072
   \   000001F8   0x6228             STR      R0,[R5, #+32]
   1090          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   000001FA   0x2004             MOVS     R0,#+4
   \   000001FC   0x6268             STR      R0,[R5, #+36]
   1091                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   000001FE   0x2003             MOVS     R0,#+3
   \   00000200   0x62A8             STR      R0,[R5, #+40]
   1092                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   00000202   0x2000             MOVS     R0,#+0
   \   00000204   0x62E8             STR      R0,[R5, #+44]
   1093                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   00000206   0x6328             STR      R0,[R5, #+48]
   1094                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1095                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1096                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1097                //DmaHandle.XferCpltCallback = &TC_Callback;
   1098           
   1099          
   1100                /* Associate the initialized DMA handle to the the SPI handle */
   1101                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   1102                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1103          
   1104          	   /* Deinitialize the Stream for new transfer */
   1105                 HAL_DMA_DeInit(&DmaHandle);
   \   00000208   0x4628             MOV      R0,R5
   \   0000020A   0x6565             STR      R5,[R4, #+84]
   \   0000020C   0x63AC             STR      R4,[R5, #+56]
   \   0000020E   0x.... 0x....      BL       HAL_DMA_DeInit
   1106                 /* Configure the DMA Stream */
   1107          	   HAL_DMA_Init(&DmaHandle);
   \   00000212   0x4628             MOV      R0,R5
   \   00000214   0x.... 0x....      BL       HAL_DMA_Init
   1108          
   1109                /* Set Interrupt Group Priority */
   1110                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   00000218   0x2200             MOVS     R2,#+0
   \   0000021A   0x2105             MOVS     R1,#+5
   \   0000021C   0x202F             MOVS     R0,#+47
   \   0000021E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1111                /* Enable the DMA STREAM global Interrupt */
   1112                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   00000222   0x202F             MOVS     R0,#+47
   \   00000224   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1113          
   1114          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000228   0x6828             LDR      R0,[R5, #+0]
   \   0000022A   0x6801             LDR      R1,[R0, #+0]
   \   0000022C   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000230   0x6001             STR      R1,[R0, #+0]
   1115          	    
   1116            }
   1117            else if(hspi->Instance==SPI4)
   1118            {
   1119            /* USER CODE BEGIN SPI4_MspInit 0 */
   1120          
   1121            /* USER CODE END SPI4_MspInit 0 */
   1122              /* Peripheral clock enable */
   1123              __SPI4_CLK_ENABLE();
   1124              __HAL_RCC_GPIOE_CLK_ENABLE();
   1125            
   1126            
   1127              /**SPI4 GPIO Configuration    
   1128              PE2     ------> SPI4_SCK
   1129              PE4     ------> SPI4_NSS
   1130              PE5     ------> SPI4_MISO
   1131              PE6     ------> SPI4_MOSI 
   1132              */
   1133              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   1134              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1135              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1136              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1137              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   1138              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   1139          
   1140          	/* Peripheral interrupt init*/
   1141              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   1142              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   1143          
   1144            /* USER CODE BEGIN SPI4_MspInit 1 */
   1145          
   1146            /* USER CODE END SPI4_MspInit 1 */
   1147            }
   1148            else if(hspi->Instance==SPI5)
   1149            {
   1150            /* USER CODE BEGIN SPI5_MspInit 0 */
   1151          
   1152            /* USER CODE END SPI5_MspInit 0 */
   1153              /* Peripheral clock enable */
   1154              __HAL_RCC_SPI5_CLK_ENABLE();
   1155              __HAL_RCC_GPIOF_CLK_ENABLE();
   1156            
   1157              /**SPI5 GPIO Configuration    
   1158              PF7     ------> SPI5_SCK  --> PF7
   1159              PF11     ------> SPI5_MOSI --> PF9
   1160                               SPI5_MISO --> PF8
   1161                                    NSS   -->  PF6
   1162              */
   1163              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   1164              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   1165              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1166              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1167              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   1168              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   1169          
   1170          #if 0
   1171            /* Peripheral interrupt init*/
   1172              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1173              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1174          
   1175          #else
   1176          	/* Peripheral DMA init*/
   1177              __HAL_RCC_DMA2_CLK_ENABLE();
   1178          	hdma_spi5_rx.Instance = DMA2_Stream5;
   1179          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   1180          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1181          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1182          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   1183          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1184          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   1185          	hdma_spi5_rx.Init.Mode = DMA_NORMAL;
   1186          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1187          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1188          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1189          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   1190          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   1191          	HAL_DMA_Init(&hdma_spi5_rx);
   1192          
   1193              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   1194          
   1195          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1196          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   1197          
   1198          #endif
   1199            /* USER CODE END SPI5_MspInit 1 */
   1200            }
   1201            else if(hspi->Instance==SPI6)
   1202            {
   1203            /* USER CODE BEGIN SPI6_MspInit 0 */
   1204          
   1205            /* USER CODE END SPI6_MspInit 0 */
   1206              /* Peripheral clock enable */
   1207              __SPI6_CLK_ENABLE();
   1208              __HAL_RCC_GPIOG_CLK_ENABLE();
   1209            
   1210              /**SPI6 GPIO Configuration    
   1211              PG13     ------> SPI6_SCK
   1212              PG14     ------> SPI6_MOSI 
   1213              */
   1214              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   1215              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1216              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1217              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1218              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   1219              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   1220          
   1221          #if 0
   1222          	  /* Peripheral interrupt init*/
   1223              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1224              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1225          #else
   1226          	/* Peripheral DMA init*/
   1227          	__HAL_RCC_DMA2_CLK_ENABLE();
   1228          	hdma_spi6_rx.Instance = DMA2_Stream6;
   1229          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   1230          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1231          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1232          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   1233          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1234          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1235          	hdma_spi6_rx.Init.Mode = DMA_NORMAL;
   1236          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1237          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1238          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1239          	hdma_spi6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   1240          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   1241          	HAL_DMA_Init(&hdma_spi6_rx);
   1242          
   1243          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   1244          
   1245          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1246          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   1247          
   1248          #endif
   1249            }
   1250          
   1251          }
   \   00000232   0xB007             ADD      SP,SP,#+28
   \   00000234   0xBD30             POP      {R4,R5,PC}
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   00000236   0x.... 0x....      LDR.W    R1,??DataTable18_7  ;; 0x40013400
   \   0000023A   0x4288             CMP      R0,R1
   \   0000023C   0xD127             BNE.N    ??HAL_SPI_MspInit_4
   \   0000023E   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   00000240   0xA901             ADD      R1,SP,#+4
   \   00000242   0x6968             LDR      R0,[R5, #+20]
   \   00000244   0xF440 0x5000      ORR      R0,R0,#0x2000
   \   00000248   0x6168             STR      R0,[R5, #+20]
   \   0000024A   0x6968             LDR      R0,[R5, #+20]
   \   0000024C   0xF400 0x5000      AND      R0,R0,#0x2000
   \   00000250   0x9000             STR      R0,[SP, #+0]
   \   00000252   0x9800             LDR      R0,[SP, #+0]
   \   00000254   0x6828             LDR      R0,[R5, #+0]
   \   00000256   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000025A   0x6028             STR      R0,[R5, #+0]
   \   0000025C   0x6828             LDR      R0,[R5, #+0]
   \   0000025E   0xF000 0x0010      AND      R0,R0,#0x10
   \   00000262   0x9000             STR      R0,[SP, #+0]
   \   00000264   0x9800             LDR      R0,[SP, #+0]
   \   00000266   0x2074             MOVS     R0,#+116
   \   00000268   0x9001             STR      R0,[SP, #+4]
   \   0000026A   0x2002             MOVS     R0,#+2
   \   0000026C   0x9002             STR      R0,[SP, #+8]
   \   0000026E   0x2000             MOVS     R0,#+0
   \   00000270   0x9003             STR      R0,[SP, #+12]
   \   00000272   0x2003             MOVS     R0,#+3
   \   00000274   0x9004             STR      R0,[SP, #+16]
   \   00000276   0x2005             MOVS     R0,#+5
   \   00000278   0x9005             STR      R0,[SP, #+20]
   \   0000027A   0x....             LDR.N    R0,??DataTable17  ;; 0x40021000
   \   0000027C   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000280   0x2200             MOVS     R2,#+0
   \   00000282   0x2102             MOVS     R1,#+2
   \   00000284   0x2054             MOVS     R0,#+84
   \   00000286   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   0000028A   0x2054             MOVS     R0,#+84
   \   0000028C   0xE0BD             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   0000028E   0x.... 0x....      LDR.W    R1,??DataTable18_9  ;; 0x40015000
   \   00000292   0x4288             CMP      R0,R1
   \   00000294   0xD159             BNE.N    ??HAL_SPI_MspInit_5
   \   00000296   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   00000298   0xA901             ADD      R1,SP,#+4
   \   0000029A   0x6968             LDR      R0,[R5, #+20]
   \   0000029C   0xF440 0x1080      ORR      R0,R0,#0x100000
   \   000002A0   0x6168             STR      R0,[R5, #+20]
   \   000002A2   0x6968             LDR      R0,[R5, #+20]
   \   000002A4   0xF400 0x1080      AND      R0,R0,#0x100000
   \   000002A8   0x9000             STR      R0,[SP, #+0]
   \   000002AA   0x9800             LDR      R0,[SP, #+0]
   \   000002AC   0x6828             LDR      R0,[R5, #+0]
   \   000002AE   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000002B2   0x6028             STR      R0,[R5, #+0]
   \   000002B4   0x6828             LDR      R0,[R5, #+0]
   \   000002B6   0xF000 0x0020      AND      R0,R0,#0x20
   \   000002BA   0x9000             STR      R0,[SP, #+0]
   \   000002BC   0x9800             LDR      R0,[SP, #+0]
   \   000002BE   0xF44F 0x7070      MOV      R0,#+960
   \   000002C2   0x9001             STR      R0,[SP, #+4]
   \   000002C4   0x2012             MOVS     R0,#+18
   \   000002C6   0x9002             STR      R0,[SP, #+8]
   \   000002C8   0x2001             MOVS     R0,#+1
   \   000002CA   0x9003             STR      R0,[SP, #+12]
   \   000002CC   0x2003             MOVS     R0,#+3
   \   000002CE   0x9004             STR      R0,[SP, #+16]
   \   000002D0   0x2005             MOVS     R0,#+5
   \   000002D2   0x9005             STR      R0,[SP, #+20]
   \   000002D4   0x.... 0x....      LDR.W    R0,??DataTable18_15  ;; 0x40021400
   \   000002D8   0x.... 0x....      BL       HAL_GPIO_Init
   \   000002DC   0x6828             LDR      R0,[R5, #+0]
   \   000002DE   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000002E2   0x6028             STR      R0,[R5, #+0]
   \   000002E4   0x6828             LDR      R0,[R5, #+0]
   \   000002E6   0x.... 0x....      LDR.W    R5,??DataTable18_16
   \   000002EA   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000002EE   0x9000             STR      R0,[SP, #+0]
   \   000002F0   0x9800             LDR      R0,[SP, #+0]
   \   000002F2   0x.... 0x....      LDR.W    R0,??DataTable18_14  ;; 0x400260b8
   \   000002F6   0xF500 0x7074      ADD      R0,R0,#+976
   \   000002FA   0x6028             STR      R0,[R5, #+0]
   \   000002FC   0xF04F 0x6060      MOV      R0,#+234881024
   \   00000300   0x6068             STR      R0,[R5, #+4]
   \   00000302   0x2000             MOVS     R0,#+0
   \   00000304   0x60A8             STR      R0,[R5, #+8]
   \   00000306   0x60E8             STR      R0,[R5, #+12]
   \   00000308   0xF44F 0x6080      MOV      R0,#+1024
   \   0000030C   0x6128             STR      R0,[R5, #+16]
   \   0000030E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000312   0x6168             STR      R0,[R5, #+20]
   \   00000314   0xF44F 0x5000      MOV      R0,#+8192
   \   00000318   0x61A8             STR      R0,[R5, #+24]
   \   0000031A   0x2000             MOVS     R0,#+0
   \   0000031C   0x61E8             STR      R0,[R5, #+28]
   \   0000031E   0xF44F 0x3000      MOV      R0,#+131072
   \   00000322   0x6228             STR      R0,[R5, #+32]
   \   00000324   0x2000             MOVS     R0,#+0
   \   00000326   0x6268             STR      R0,[R5, #+36]
   \   00000328   0x2003             MOVS     R0,#+3
   \   0000032A   0x62A8             STR      R0,[R5, #+40]
   \   0000032C   0x2000             MOVS     R0,#+0
   \   0000032E   0x62E8             STR      R0,[R5, #+44]
   \   00000330   0x6328             STR      R0,[R5, #+48]
   \   00000332   0x4628             MOV      R0,R5
   \   00000334   0x.... 0x....      BL       HAL_DMA_Init
   \   00000338   0x65A5             STR      R5,[R4, #+88]
   \   0000033A   0x2200             MOVS     R2,#+0
   \   0000033C   0x63AC             STR      R4,[R5, #+56]
   \   0000033E   0x2104             MOVS     R1,#+4
   \   00000340   0x2044             MOVS     R0,#+68
   \   00000342   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000346   0x2044             MOVS     R0,#+68
   \   00000348   0xE05F             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   0000034A   0x.... 0x....      LDR.W    R1,??DataTable18_8  ;; 0x40015400
   \   0000034E   0x4288             CMP      R0,R1
   \   00000350   0xD15D             BNE.N    ??HAL_SPI_MspInit_6
   \   00000352   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   00000354   0xA901             ADD      R1,SP,#+4
   \   00000356   0x6968             LDR      R0,[R5, #+20]
   \   00000358   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   0000035C   0x6168             STR      R0,[R5, #+20]
   \   0000035E   0x6968             LDR      R0,[R5, #+20]
   \   00000360   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000364   0x9000             STR      R0,[SP, #+0]
   \   00000366   0x9800             LDR      R0,[SP, #+0]
   \   00000368   0x6828             LDR      R0,[R5, #+0]
   \   0000036A   0xF040 0x0040      ORR      R0,R0,#0x40
   \   0000036E   0x6028             STR      R0,[R5, #+0]
   \   00000370   0x6828             LDR      R0,[R5, #+0]
   \   00000372   0xF000 0x0040      AND      R0,R0,#0x40
   \   00000376   0x9000             STR      R0,[SP, #+0]
   \   00000378   0x9800             LDR      R0,[SP, #+0]
   \   0000037A   0xF44F 0x40C0      MOV      R0,#+24576
   \   0000037E   0x9001             STR      R0,[SP, #+4]
   \   00000380   0x2002             MOVS     R0,#+2
   \   00000382   0x9002             STR      R0,[SP, #+8]
   \   00000384   0x2000             MOVS     R0,#+0
   \   00000386   0x9003             STR      R0,[SP, #+12]
   \   00000388   0x2003             MOVS     R0,#+3
   \   0000038A   0x9004             STR      R0,[SP, #+16]
   \   0000038C   0x2005             MOVS     R0,#+5
   \   0000038E   0x9005             STR      R0,[SP, #+20]
   \   00000390   0x.... 0x....      LDR.W    R0,??DataTable18_17  ;; 0x40021800
   \   00000394   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000398   0x6828             LDR      R0,[R5, #+0]
   \   0000039A   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   0000039E   0x6028             STR      R0,[R5, #+0]
   \   000003A0   0x6828             LDR      R0,[R5, #+0]
   \   000003A2   0x.... 0x....      LDR.W    R5,??DataTable18_16
   \   000003A6   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000003AA   0x9000             STR      R0,[SP, #+0]
   \   000003AC   0x9800             LDR      R0,[SP, #+0]
   \   000003AE   0x.... 0x....      LDR.W    R0,??DataTable18_14  ;; 0x400260b8
   \   000003B2   0xF500 0x707A      ADD      R0,R0,#+1000
   \   000003B6   0x6528             STR      R0,[R5, #+80]
   \   000003B8   0xF04F 0x7000      MOV      R0,#+33554432
   \   000003BC   0x6568             STR      R0,[R5, #+84]
   \   000003BE   0x2000             MOVS     R0,#+0
   \   000003C0   0x65A8             STR      R0,[R5, #+88]
   \   000003C2   0x65E8             STR      R0,[R5, #+92]
   \   000003C4   0xF44F 0x6080      MOV      R0,#+1024
   \   000003C8   0x6628             STR      R0,[R5, #+96]
   \   000003CA   0xF44F 0x6000      MOV      R0,#+2048
   \   000003CE   0x6668             STR      R0,[R5, #+100]
   \   000003D0   0x66A8             STR      R0,[R5, #+104]
   \   000003D2   0x2000             MOVS     R0,#+0
   \   000003D4   0x66E8             STR      R0,[R5, #+108]
   \   000003D6   0xF44F 0x3000      MOV      R0,#+131072
   \   000003DA   0x6728             STR      R0,[R5, #+112]
   \   000003DC   0x2000             MOVS     R0,#+0
   \   000003DE   0x6768             STR      R0,[R5, #+116]
   \   000003E0   0x2003             MOVS     R0,#+3
   \   000003E2   0x67A8             STR      R0,[R5, #+120]
   \   000003E4   0x2000             MOVS     R0,#+0
   \   000003E6   0x67E8             STR      R0,[R5, #+124]
   \   000003E8   0xF8C5 0x0080      STR      R0,[R5, #+128]
   \   000003EC   0xF105 0x0050      ADD      R0,R5,#+80
   \   000003F0   0x.... 0x....      BL       HAL_DMA_Init
   \   000003F4   0xF105 0x0050      ADD      R0,R5,#+80
   \   000003F8   0x2201             MOVS     R2,#+1
   \   000003FA   0x65A0             STR      R0,[R4, #+88]
   \   000003FC   0x2107             MOVS     R1,#+7
   \   000003FE   0xF8C5 0x4088      STR      R4,[R5, #+136]
   \   00000402   0x2045             MOVS     R0,#+69
   \   00000404   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000408   0x2045             MOVS     R0,#+69
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   0000040A   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \                     ??HAL_SPI_MspInit_6: (+1)
   \   0000040E   0xB007             ADD      SP,SP,#+28
   \   00000410   0xBD30             POP      {R4,R5,PC}       ;; return
   1252          
   1253          
   1254          
   1255          
   1256          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1257          {
   1258            /* Check the parameters */
   1259            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1260            
   1261            /* Write in the DR register the data to be sent */
   1262            SPIx->DR = Data;
   1263          }
   1264          
   1265          
   1266          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1267          {
   1268            /* Check the parameters */
   1269            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1270            
   1271            /* Return the data in the DR register */
   1272            return SPIx->DR;
   1273          }
   1274          
   1275          

   \                                 In section .text, align 2, keep-with-next
   1276          void RecordUpdBuf(void)
   1277          {
   1278          
   1279               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable16_1
   \   00000002   0xF890 0x1080      LDRB     R1,[R0, #+128]
   \   00000006   0x2902             CMP      R1,#+2
   \   00000008   0xD170             BNE.N    ??RecordUpdBuf_0
   1280               {
   1281                  WaveRecord_flgInt=0;
   \   0000000A   0x2100             MOVS     R1,#+0
   1282          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   0000000C   0x....             LDR.N    R2,??DataTable16_2
   \   0000000E   0xF880 0x1080      STRB     R1,[R0, #+128]
   \   00000012   0x8811             LDRH     R1,[R2, #+0]
   \   00000014   0xF5B1 0x6F80      CMP      R1,#+1024
   \   00000018   0xBFBE             ITTT     LT 
   \   0000001A   0x....             LDRLT.N  R1,??DataTable17_1
   \   0000001C   0x880B             LDRHLT   R3,[R1, #+0]
   \   0000001E   0xF5B3 0x6F80      CMPLT    R3,#+1024
   \   00000022   0xDA63             BGE.N    ??RecordUpdBuf_0
   1283          		//			  &&(stLR!=stLROld))
   1284          			{
   1285          		/*-------------------------------------------------------------------------------------------------------------
   1286          					  
   1287          			Sequence  Record Data					  Processing Data				  Player Data
   1288          					  
   1289          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1290          					  
   1291          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1292          					  
   1293          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1294          		 ---------------------------------------------------------------------------------------------------------------*/
   1295          					  /* Recording Audio Data */						 
   1296          					   switch (buffer_switch)
   \   00000024   0x....             LDR.N    R3,??DataTable17_2
   \   00000026   0x781B             LDRB     R3,[R3, #+0]
   \   00000028   0xB11B             CBZ.N    R3,??RecordUpdBuf_1
   \   0000002A   0x2B02             CMP      R3,#+2
   \   0000002C   0xD00F             BEQ.N    ??RecordUpdBuf_2
   \   0000002E   0xD307             BCC.N    ??RecordUpdBuf_3
   \   00000030   0x4770             BX       LR
   1297          					   {
   1298          								case BUF1_PLAY:
   1299          
   1300          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_1: (+1)
   \   00000032   0x8813             LDRH     R3,[R2, #+0]
   \   00000034   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000038   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000003C   0x....             LDR.N    R2,??DataTable17_3  ;; 0xc00080a0
   \   0000003E   0xE00D             B.N      ??RecordUpdBuf_4
   1301          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   1302          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1303          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   1304          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1305          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   1306          	
   1307          										break;
   1308          								case BUF2_PLAY:
   1309          
   1310          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_3: (+1)
   \   00000040   0x8813             LDRH     R3,[R2, #+0]
   \   00000042   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000046   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000004A   0x....             LDR.N    R2,??DataTable17_4  ;; 0xc0010140
   \   0000004C   0xE006             B.N      ??RecordUpdBuf_4
   1311          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   1312          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1313          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   1314          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1315          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   1316          		
   1317          
   1318          										break;
   1319          								case BUF3_PLAY:
   1320          
   1321          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_2: (+1)
   \   0000004E   0x8813             LDRH     R3,[R2, #+0]
   \   00000050   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000054   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000058   0xF04F 0x4240      MOV      R2,#-1073741824
   \                     ??RecordUpdBuf_4: (+1)
   \   0000005C   0xF9B0 0xC084      LDRSH    R12,[R0, #+132]
   \   00000060   0xF822 0xC013      STRH     R12,[R2, R3, LSL #+1]
   1322          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   00000064   0x880B             LDRH     R3,[R1, #+0]
   \   00000066   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000006A   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   0000006E   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   00000072   0xF9B0 0x1086      LDRSH    R1,[R0, #+134]
   \   00000076   0xF241 0x0C14      MOVW     R12,#+4116
   \   0000007A   0xF82C 0x1003      STRH     R1,[R12, R3]
   1323          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   0000007E   0x....             LDR.N    R1,??DataTable17_7
   \   00000080   0x880B             LDRH     R3,[R1, #+0]
   \   00000082   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000086   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   0000008A   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   0000008E   0xF9B0 0x108A      LDRSH    R1,[R0, #+138]
   \   00000092   0xF242 0x0C28      MOVW     R12,#+8232
   \   00000096   0xF82C 0x1003      STRH     R1,[R12, R3]
   1324          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \   0000009A   0x....             LDR.N    R1,??DataTable17_8
   \   0000009C   0x880B             LDRH     R3,[R1, #+0]
   \   0000009E   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000A2   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000A6   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000AA   0xF9B0 0x1088      LDRSH    R1,[R0, #+136]
   \   000000AE   0xF243 0x0C3C      MOVW     R12,#+12348
   \   000000B2   0xF82C 0x1003      STRH     R1,[R12, R3]
   1325          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000000B6   0x....             LDR.N    R1,??DataTable17_12
   \   000000B8   0x880B             LDRH     R3,[R1, #+0]
   \   000000BA   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000BE   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000C2   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000C6   0xF9B0 0x108C      LDRSH    R1,[R0, #+140]
   \   000000CA   0xF244 0x0C50      MOVW     R12,#+16464
   \   000000CE   0xF82C 0x1003      STRH     R1,[R12, R3]
   1326          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   \   000000D2   0x....             LDR.N    R1,??DataTable17_13
   \   000000D4   0x880B             LDRH     R3,[R1, #+0]
   \   000000D6   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000DA   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000DE   0xF9B0 0x008E      LDRSH    R0,[R0, #+142]
   \   000000E2   0xEB02 0x0143      ADD      R1,R2,R3, LSL #+1
   \   000000E6   0xF245 0x0264      MOVW     R2,#+20580
   \   000000EA   0x5250             STRH     R0,[R2, R1]
   1327          										break;
   1328          								default:
   1329          										break; 
   1330          					   }
   1331          				
   1332          				}
   1333                               
   1334               	}
   1335          }
   \                     ??RecordUpdBuf_0: (+1)
   \   000000EC   0x4770             BX       LR               ;; return
   \   000000EE                      REQUIRE Buffer2
   \   000000EE                      REQUIRE Buffer3
   \   000000EE                      REQUIRE Buffer1
   1336          
   1337          

   \                                 In section .text, align 2, keep-with-next
   1338          void DMA2_Stream5_IRQHandler(void)
   1339          {
   1340            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1341          
   1342            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1343            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable18_16
   \   00000004   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1344            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1345          
   1346            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1347          }
   1348          
   1349          /**
   1350          * @brief This function handles DMA2 stream6 global interrupt.
   1351          */

   \                                 In section .text, align 2, keep-with-next
   1352          void DMA2_Stream6_IRQHandler(void)
   1353          {
   1354            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1355          
   1356            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1357            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable18_18
   \   00000004   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1358            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1359          
   1360            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1361          }
   1362          

   \                                 In section .text, align 2, keep-with-next
   1363          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1364          {
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1365              if(hspi->Instance==SPI1)
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable18_3  ;; 0x40013000
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xBF1F             ITTTT    NE 
   \   0000000E   0x.... 0x....      LDRNE.W  R1,??DataTable18_4  ;; 0x40003800
   \   00000012   0x4288             CMPNE    R0,R1
   \   00000014   0x.... 0x....      LDRNE.W  R1,??DataTable18_7  ;; 0x40013400
   \   00000018   0x4288             CMPNE    R0,R1
   1366              {
   1367                  /* Copy Data to Record Buffer */
   1368          		//RecordUpdBuf();
   1369          		//XferCplt = 1;
   1370                  //Audio_Play_Out();
   1371              }
   1372              else if (hspi->Instance==SPI2)
   1373              {
   1374          
   1375              }
   1376              else if (hspi->Instance==SPI4)
   \   0000001A   0xD037             BEQ.N    ??HAL_SPI_RxCpltCallback_0
   1377              {
   1378          
   1379              }
   1380              else if (hspi->Instance==SPI5)
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable18_9  ;; 0x40015000
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD115             BNE.N    ??HAL_SPI_RxCpltCallback_1
   1381              {
   1382                  swtSDO7^=0x01;
   \   00000024   0x....             LDR.N    R0,??DataTable17_14
   1383                  WaveRecord_flgSDO7Finish = 1;
   1384                  if (swtSDO7==0x01)
   \   00000026   0xF44F 0x5280      MOV      R2,#+4096
   \   0000002A   0xF890 0x1130      LDRB     R1,[R0, #+304]
   \   0000002E   0xF081 0x0101      EOR      R1,R1,#0x1
   \   00000032   0xF880 0x1130      STRB     R1,[R0, #+304]
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0xF880 0x1132      STRB     R1,[R0, #+306]
   \   0000003C   0xF890 0x1130      LDRB     R1,[R0, #+304]
   \   00000040   0x2901             CMP      R1,#+1
   \   00000042   0xBF0C             ITE      EQ 
   \   00000044   0x.... 0x....      LDREQ.W  R1,??DataTable18_19
   \   00000048   0x.... 0x....      LDRNE.W  R1,??DataTable18_5
   1385                  {
   1386                      HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   1387                  }
   1388                  else
   1389                  {
   1390                      HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   0000004C   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1391                  }
   1392              }
   1393              else
   1394              {
   1395                
   1396              }
   1397              
   1398              if (hspi->Instance==SPI6) //MIC8
   \                     ??HAL_SPI_RxCpltCallback_1: (+1)
   \   00000050   0x6820             LDR      R0,[R4, #+0]
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable18_8  ;; 0x40015400
   \   00000056   0x4288             CMP      R0,R1
   \   00000058   0xD118             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1399              {
   1400          #if 0							
   1401          
   1402              if (swtSDO8==0x01)
   1403             {
   1404                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1405             }
   1406             else
   1407             {
   1408          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1409             }      
   1410             AudioUSBSend(idxFrmPDMMic8++);
   1411          
   1412             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   1413             {
   1414                 swtSDO8^=0x01;
   1415          	   WaveRecord_flgSDO8Finish = 1;
   1416                 idxFrmPDMMic8 = 0;
   1417          		RESET_IDX
   1418          		XferCplt = 0; // clear DMA interrupt flag
   1419          		switch (buffer_switch)
   1420          		{
   1421          	        case BUF1_PLAY: 		
   1422          	          buffer_switch = BUF3_PLAY;
   1423          	          break;
   1424          	        case BUF2_PLAY: 
   1425          	          buffer_switch = BUF1_PLAY;		
   1426          	          break;
   1427          	        case BUF3_PLAY: 	
   1428          	          buffer_switch = BUF2_PLAY;
   1429          	          break;
   1430          	        default:
   1431          	          break;
   1432          		}
   1433          
   1434          		/* Last player Frame is finished */
   1435          		AudioPlayerUpd(); 		
   1436          		
   1437          		if (cntStrt<100) cntStrt++;		   
   1438             }
   1439          
   1440          
   1441          #else
   1442              swtSDO8^=0x01;
   \   0000005A   0x....             LDR.N    R0,??DataTable17_14
   1443              WaveRecord_flgSDO8Finish = 1;
   1444              if (swtSDO8==0x01)
   \   0000005C   0xF44F 0x5280      MOV      R2,#+4096
   \   00000060   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   00000064   0xF081 0x0101      EOR      R1,R1,#0x1
   \   00000068   0xF880 0x1131      STRB     R1,[R0, #+305]
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0xF880 0x1133      STRB     R1,[R0, #+307]
   \   00000072   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   00000076   0x2901             CMP      R1,#+1
   \   00000078   0xBF0C             ITE      EQ 
   \   0000007A   0x.... 0x....      LDREQ.W  R1,??DataTable18_20
   \   0000007E   0x.... 0x....      LDRNE.W  R1,??DataTable18_6
   1445              {
   1446                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   1447              }
   1448              else
   1449              {
   1450                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000082   0x3064             ADDS     R0,R0,#+100
   \   00000084   0xE8BD 0x4010      POP      {R4,LR}
   \   00000088   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1451          
   1452              }
   1453          #endif
   1454          
   1455            }
   1456          }
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   0000008C   0xBD10             POP      {R4,PC}          ;; return
   1457          

   \                                 In section .text, align 4, keep-with-next
   1458          void PDM2PCMSDO78(void)
   1459          {
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   1460          /*-------------------------------------------------------------------------------------------------------------
   1461          			  
   1462          	Sequence  Record Data					  Processing Data				  Player Data
   1463          			  
   1464          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1465          			  
   1466          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1467          			  
   1468          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1469           ---------------------------------------------------------------------------------------------------------------*/
   1470          
   1471              /* Data in Mic7 finished recording */
   1472              if (WaveRecord_flgSDO7Finish==1)
   \   00000004   0x.... 0x....      LDR.W    R11,??DataTable18_21
   \   00000008   0xB081             SUB      SP,SP,#+4
   \   0000000A   0xF89B 0x0132      LDRB     R0,[R11, #+306]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xF040 0x80BA      BNE.W    ??PDM2PCMSDO78_0
   1473              {
   1474                  WaveRecord_flgSDO7Finish=0;
   \   00000014   0x2000             MOVS     R0,#+0
   1475          
   1476          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000016   0x2400             MOVS     R4,#+0
   \   00000018   0xF88B 0x0132      STRB     R0,[R11, #+306]
   \   0000001C   0x....             LDR.N    R5,??DataTable18_5
   \   0000001E   0x....             LDR.N    R6,??DataTable18_19
   \   00000020   0x.... 0x....      LDR.W    R8,??DataTable18_22  ;; 0xc00080a0
   \   00000024   0x.... 0x....      LDR.W    R9,??DataTable18  ;; 0xc0010140
   \   00000028   0xF246 0x0778      MOVW     R7,#+24696
   \   0000002C   0xF04F 0x4A40      MOV      R10,#-1073741824
   1477          		{
   1478          	            if(swtSDO7==0x01)
   \                     ??PDM2PCMSDO78_1: (+1)
   \   00000030   0xF89B 0x0130      LDRB     R0,[R11, #+304]
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xBF07             ITTEE    EQ 
   \   00000038   0x8828             LDRHEQ   R0,[R5, #+0]
   \   0000003A   0x8829             LDRHEQ   R1,[R5, #+0]
   \   0000003C   0x8830             LDRHNE   R0,[R6, #+0]
   \   0000003E   0x8831             LDRHNE   R1,[R6, #+0]
   1479          	            {
   1480          	                pDataMic7[i%64] = HTONS(TestSDO7[i]);
                 	                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   1481          	            }
   1482          	            else
   1483          	            {
   1484          	               pDataMic7[i%64] = HTONS(TestSDO7_1[i]);
                 	               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000040   0x1162             ASRS     R2,R4,#+5
   \   00000042   0x0209             LSLS     R1,R1,#+8
   \   00000044   0xEB04 0x6292      ADD      R2,R4,R2, LSR #+26
   \   00000048   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   0000004C   0x1192             ASRS     R2,R2,#+6
   \   0000004E   0xEBA4 0x1282      SUB      R2,R4,R2, LSL #+6
   \   00000052   0xEB0B 0x0242      ADD      R2,R11,R2, LSL #+1
   \   00000056   0xF8A2 0x01C4      STRH     R0,[R2, #+452]
   1485          
   1486          	            }
   1487          
   1488          	            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1489          	            if (i%64==63)
   \   0000005A   0x1160             ASRS     R0,R4,#+5
   \   0000005C   0xEB04 0x6090      ADD      R0,R4,R0, LSR #+26
   \   00000060   0x1180             ASRS     R0,R0,#+6
   \   00000062   0xEBA4 0x1180      SUB      R1,R4,R0, LSL #+6
   \   00000066   0x293F             CMP      R1,#+63
   \   00000068   0xD11C             BNE.N    ??PDM2PCMSDO78_2
   1490          	            {
   1491          	              /* Recording Audio Data */						 
   1492          	              switch (buffer_switch)
   \   0000006A   0x....             LDR.N    R1,??DataTable18_23
   \   0000006C   0x7809             LDRB     R1,[R1, #+0]
   \   0000006E   0xB119             CBZ.N    R1,??PDM2PCMSDO78_3
   \   00000070   0x2902             CMP      R1,#+2
   \   00000072   0xD00D             BEQ.N    ??PDM2PCMSDO78_4
   \   00000074   0xD306             BCC.N    ??PDM2PCMSDO78_5
   \   00000076   0xE015             B.N      ??PDM2PCMSDO78_2
   1493          	              {
   1494          	                case BUF1_PLAY:								
   1495          	                      PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 100 ,
   1496          	                      (PDMFilter_InitStruct *)&Filter[0]);
   \                     ??PDM2PCMSDO78_3: (+1)
   \   00000078   0xF10B 0x03C8      ADD      R3,R11,#+200
   \   0000007C   0x2264             MOVS     R2,#+100
   \   0000007E   0xEB08 0x1040      ADD      R0,R8,R0, LSL #+5
   \   00000082   0xE00A             B.N      ??PDM2PCMSDO78_6
   1497          	                      break;
   1498          	                case BUF2_PLAY:
   1499          	                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 100 ,
   1500          	                        (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_5: (+1)
   \   00000084   0xF10B 0x03C8      ADD      R3,R11,#+200
   \   00000088   0x2264             MOVS     R2,#+100
   \   0000008A   0xEB09 0x1040      ADD      R0,R9,R0, LSL #+5
   \   0000008E   0xE004             B.N      ??PDM2PCMSDO78_6
   1501          	                        break;
   1502          	                case BUF3_PLAY:
   1503          	                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 100 ,
   1504          	                        (PDMFilter_InitStruct *)&Filter[0]);									
   \                     ??PDM2PCMSDO78_4: (+1)
   \   00000090   0xF10B 0x03C8      ADD      R3,R11,#+200
   \   00000094   0x2264             MOVS     R2,#+100
   \   00000096   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \                     ??PDM2PCMSDO78_6: (+1)
   \   0000009A   0x1839             ADDS     R1,R7,R0
   \   0000009C   0xF50B 0x70E2      ADD      R0,R11,#+452
   \   000000A0   0x.... 0x....      BL       PDM_Filter_64_LSB
   1505          	                         break;
   1506          	                default:
   1507          	                         break; 
   1508          	              }
   1509          		        }
   1510          	      }//if (WaveRecord_flgSDO7Finish==1)
   \                     ??PDM2PCMSDO78_2: (+1)
   \   000000A4   0x1C64             ADDS     R4,R4,#+1
   \   000000A6   0x1CB6             ADDS     R6,R6,#+2
   \   000000A8   0x1CAD             ADDS     R5,R5,#+2
   \   000000AA   0xF5B4 0x5F80      CMP      R4,#+4096
   \   000000AE   0xDBBF             BLT.N    ??PDM2PCMSDO78_1
   1511          
   1512          
   1513                      /* Recording Audio Data */						 
   1514          		    switch (buffer_switch)
   \   000000B0   0x....             LDR.N    R0,??DataTable18_23
   \   000000B2   0x7800             LDRB     R0,[R0, #+0]
   \   000000B4   0xB118             CBZ.N    R0,??PDM2PCMSDO78_7
   \   000000B6   0x2802             CMP      R0,#+2
   \   000000B8   0xD045             BEQ.N    ??PDM2PCMSDO78_8
   \   000000BA   0xD322             BCC.N    ??PDM2PCMSDO78_9
   \   000000BC   0xE064             B.N      ??PDM2PCMSDO78_0
   1515          		    {
   1516          		        case BUF1_PLAY:								
   1517          					        /* Update for left-right channel */
   1518          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>=0;i--)
   \                     ??PDM2PCMSDO78_7: (+1)
   \   000000BE   0xF508 0x40D0      ADD      R0,R8,#+26624
   \   000000C2   0xF508 0x41E0      ADD      R1,R8,#+28672
   \   000000C6   0x3076             ADDS     R0,R0,#+118
   \   000000C8   0x3174             ADDS     R1,R1,#+116
   \   000000CA   0xF240 0x32FF      MOVW     R2,#+1023
   1519          			        {
   1520          	                    Buffer2.bufMIC7[2*i+1]=  Buffer2.bufMIC7[i];
   \                     ??PDM2PCMSDO78_10: (+1)
   \   000000CE   0x8803             LDRH     R3,[R0, #+0]
   1521          			            if (i!=0) Buffer2.bufMIC7[2*i] = Buffer2.bufMIC7[i];
   \   000000D0   0x1E52             SUBS     R2,R2,#+1
   \   000000D2   0x804B             STRH     R3,[R1, #+2]
   \   000000D4   0xF830 0x3902      LDRH     R3,[R0], #-2
   \   000000D8   0xF821 0x3904      STRH     R3,[R1], #-4
   \   000000DC   0xD1F7             BNE.N    ??PDM2PCMSDO78_10
   \   000000DE   0xEB07 0x0108      ADD      R1,R7,R8
   \   000000E2   0x460A             MOV      R2,R1
   \   000000E4   0x2000             MOVS     R0,#+0
   \   000000E6   0x880B             LDRH     R3,[R1, #+0]
   \   000000E8   0x8053             STRH     R3,[R2, #+2]
   \   000000EA   0xE004             B.N      ??PDM2PCMSDO78_11
   \                     ??PDM2PCMSDO78_12: (+1)
   \   000000EC   0x880B             LDRH     R3,[R1, #+0]
   \   000000EE   0x8053             STRH     R3,[R2, #+2]
   \   000000F0   0xBF1C             ITT      NE 
   \   000000F2   0x880B             LDRHNE   R3,[R1, #+0]
   \   000000F4   0x8013             STRHNE   R3,[R2, #+0]
   1522          			        }
   \                     ??PDM2PCMSDO78_11: (+1)
   \   000000F6   0x1E40             SUBS     R0,R0,#+1
   \   000000F8   0x1F12             SUBS     R2,R2,#+4
   \   000000FA   0x1E89             SUBS     R1,R1,#+2
   \   000000FC   0x2800             CMP      R0,#+0
   \   000000FE   0xD5F5             BPL.N    ??PDM2PCMSDO78_12
   \   00000100   0xE042             B.N      ??PDM2PCMSDO78_0
   1523          			            break;
   1524          			     case BUF2_PLAY:
   1525          			        /* Update for left-right channel */
   1526          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>=0;i--)
   \                     ??PDM2PCMSDO78_9: (+1)
   \   00000102   0xF509 0x40D0      ADD      R0,R9,#+26624
   \   00000106   0xF509 0x41E0      ADD      R1,R9,#+28672
   \   0000010A   0x3076             ADDS     R0,R0,#+118
   \   0000010C   0x3174             ADDS     R1,R1,#+116
   \   0000010E   0xF240 0x32FF      MOVW     R2,#+1023
   1527          			        {				 	
   1528          		                Buffer3.bufMIC7[2*i+1]= Buffer3.bufMIC7[i];
   \                     ??PDM2PCMSDO78_13: (+1)
   \   00000112   0x8803             LDRH     R3,[R0, #+0]
   1529          		                if (i!=0) Buffer3.bufMIC7[2*i]= Buffer3.bufMIC7[i];;	
   \   00000114   0x1E52             SUBS     R2,R2,#+1
   \   00000116   0x804B             STRH     R3,[R1, #+2]
   \   00000118   0xF830 0x3902      LDRH     R3,[R0], #-2
   \   0000011C   0xF821 0x3904      STRH     R3,[R1], #-4
   \   00000120   0xD1F7             BNE.N    ??PDM2PCMSDO78_13
   \   00000122   0xEB07 0x0109      ADD      R1,R7,R9
   \   00000126   0x460A             MOV      R2,R1
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0x880B             LDRH     R3,[R1, #+0]
   \   0000012C   0x8053             STRH     R3,[R2, #+2]
   \   0000012E   0xE004             B.N      ??PDM2PCMSDO78_14
   \                     ??PDM2PCMSDO78_15: (+1)
   \   00000130   0x880B             LDRH     R3,[R1, #+0]
   \   00000132   0x8053             STRH     R3,[R2, #+2]
   \   00000134   0xBF1C             ITT      NE 
   \   00000136   0x880B             LDRHNE   R3,[R1, #+0]
   \   00000138   0x8013             STRHNE   R3,[R2, #+0]
   1530          			        }
   \                     ??PDM2PCMSDO78_14: (+1)
   \   0000013A   0x1E40             SUBS     R0,R0,#+1
   \   0000013C   0x1F12             SUBS     R2,R2,#+4
   \   0000013E   0x1E89             SUBS     R1,R1,#+2
   \   00000140   0x2800             CMP      R0,#+0
   \   00000142   0xD5F5             BPL.N    ??PDM2PCMSDO78_15
   \   00000144   0xE020             B.N      ??PDM2PCMSDO78_0
   1531          	                break;
   1532          	            case BUF3_PLAY:
   1533          			        /* Update for left-right channel */
   1534          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>=0;i--)
   \                     ??PDM2PCMSDO78_8: (+1)
   \   00000146   0xF50A 0x40D0      ADD      R0,R10,#+26624
   \   0000014A   0xF50A 0x41E0      ADD      R1,R10,#+28672
   \   0000014E   0x3076             ADDS     R0,R0,#+118
   \   00000150   0x3174             ADDS     R1,R1,#+116
   \   00000152   0xF240 0x32FF      MOVW     R2,#+1023
   1535          			        {					
   1536          	                    Buffer1.bufMIC7[2*i+1]= Buffer1.bufMIC7[i];
   \                     ??PDM2PCMSDO78_16: (+1)
   \   00000156   0x8803             LDRH     R3,[R0, #+0]
   1537          	                    if (i!=0) Buffer1.bufMIC7[2*i]= Buffer1.bufMIC7[i];;	
   \   00000158   0x1E52             SUBS     R2,R2,#+1
   \   0000015A   0x804B             STRH     R3,[R1, #+2]
   \   0000015C   0xF830 0x3902      LDRH     R3,[R0], #-2
   \   00000160   0xF821 0x3904      STRH     R3,[R1], #-4
   \   00000164   0xD1F7             BNE.N    ??PDM2PCMSDO78_16
   \   00000166   0xEB07 0x010A      ADD      R1,R7,R10
   \   0000016A   0x460A             MOV      R2,R1
   \   0000016C   0x2000             MOVS     R0,#+0
   \   0000016E   0x880B             LDRH     R3,[R1, #+0]
   \   00000170   0x8053             STRH     R3,[R2, #+2]
   \   00000172   0xE004             B.N      ??PDM2PCMSDO78_17
   \                     ??PDM2PCMSDO78_18: (+1)
   \   00000174   0x880B             LDRH     R3,[R1, #+0]
   \   00000176   0x8053             STRH     R3,[R2, #+2]
   \   00000178   0xBF1C             ITT      NE 
   \   0000017A   0x880B             LDRHNE   R3,[R1, #+0]
   \   0000017C   0x8013             STRHNE   R3,[R2, #+0]
   1538          			        }
   \                     ??PDM2PCMSDO78_17: (+1)
   \   0000017E   0x1E40             SUBS     R0,R0,#+1
   \   00000180   0x1F12             SUBS     R2,R2,#+4
   \   00000182   0x1E89             SUBS     R1,R1,#+2
   \   00000184   0x2800             CMP      R0,#+0
   \   00000186   0xD5F5             BPL.N    ??PDM2PCMSDO78_18
   1539          	                break;
   1540          	            default:
   1541          	                break; 
   1542          	        }
   1543          	    
   1544          
   1545               }
   1546              
   1547          
   1548          	/* Data in Mic8 finished recording */
   1549          	if (WaveRecord_flgSDO8Finish==1)
   \                     ??PDM2PCMSDO78_0: (+1)
   \   00000188   0xF89B 0x0133      LDRB     R0,[R11, #+307]
   \   0000018C   0x2801             CMP      R0,#+1
   \   0000018E   0xF040 0x80C1      BNE.W    ??PDM2PCMSDO78_19
   1550          	{
   1551          		WaveRecord_flgSDO8Finish=0;
   \   00000192   0x2000             MOVS     R0,#+0
   1552          		
   1553          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000194   0x2400             MOVS     R4,#+0
   \   00000196   0xF88B 0x0133      STRB     R0,[R11, #+307]
   \   0000019A   0x....             LDR.N    R5,??DataTable18_6
   \   0000019C   0x.... 0x....      LDR.W    R6,??DataTable18_20
   \   000001A0   0xF247 0x078C      MOVW     R7,#+28812
   \   000001A4   0x.... 0x....      LDR.W    R8,??DataTable18_22  ;; 0xc00080a0
   \   000001A8   0x.... 0x....      LDR.W    R9,??DataTable18  ;; 0xc0010140
   \   000001AC   0xF04F 0x4A40      MOV      R10,#-1073741824
   1554          		{
   1555                            if(swtSDO8==0x01)
   \                     ??PDM2PCMSDO78_20: (+1)
   \   000001B0   0xF89B 0x0131      LDRB     R0,[R11, #+305]
   \   000001B4   0x2801             CMP      R0,#+1
   \   000001B6   0xBF07             ITTEE    EQ 
   \   000001B8   0x8828             LDRHEQ   R0,[R5, #+0]
   \   000001BA   0x8829             LDRHEQ   R1,[R5, #+0]
   \   000001BC   0x8830             LDRHNE   R0,[R6, #+0]
   \   000001BE   0x8831             LDRHNE   R1,[R6, #+0]
   1556                            {
   1557                               pDataMic8[i%64] = HTONS(TestSDO8[i]);
                                      ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   1558                            }
   1559                            else
   1560                            {
   1561                               pDataMic8[i%64] = HTONS(TestSDO8_1[i]);
                                      ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   000001C0   0x1162             ASRS     R2,R4,#+5
   \   000001C2   0x0209             LSLS     R1,R1,#+8
   \   000001C4   0xEB04 0x6292      ADD      R2,R4,R2, LSR #+26
   \   000001C8   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   000001CC   0x1192             ASRS     R2,R2,#+6
   \   000001CE   0xEBA4 0x1282      SUB      R2,R4,R2, LSL #+6
   \   000001D2   0xEB0B 0x0242      ADD      R2,R11,R2, LSL #+1
   \   000001D6   0xF8A2 0x0144      STRH     R0,[R2, #+324]
   1562                            }
   1563          		
   1564                            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1565                            if (i%64==63)
   \   000001DA   0x1160             ASRS     R0,R4,#+5
   \   000001DC   0xEB04 0x6090      ADD      R0,R4,R0, LSR #+26
   \   000001E0   0x1180             ASRS     R0,R0,#+6
   \   000001E2   0xEBA4 0x1180      SUB      R1,R4,R0, LSL #+6
   \   000001E6   0x293F             CMP      R1,#+63
   \   000001E8   0xD11C             BNE.N    ??PDM2PCMSDO78_21
   1566                            {
   1567                                /* Recording Audio Data */						 
   1568                                switch (buffer_switch)
   \   000001EA   0x....             LDR.N    R1,??DataTable18_23
   \   000001EC   0x7809             LDRB     R1,[R1, #+0]
   \   000001EE   0xB119             CBZ.N    R1,??PDM2PCMSDO78_22
   \   000001F0   0x2902             CMP      R1,#+2
   \   000001F2   0xD00D             BEQ.N    ??PDM2PCMSDO78_23
   \   000001F4   0xD306             BCC.N    ??PDM2PCMSDO78_24
   \   000001F6   0xE015             B.N      ??PDM2PCMSDO78_21
   1569                                {
   1570                                        case BUF1_PLAY: 							
   1571                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 80 ,
   1572                                                (PDMFilter_InitStruct *)&Filter[1]);
   \                     ??PDM2PCMSDO78_22: (+1)
   \   000001F8   0xF10B 0x03FC      ADD      R3,R11,#+252
   \   000001FC   0x2250             MOVS     R2,#+80
   \   000001FE   0xEB08 0x1040      ADD      R0,R8,R0, LSL #+5
   \   00000202   0xE00A             B.N      ??PDM2PCMSDO78_25
   1573                                                break;
   1574                                        case BUF2_PLAY:
   1575                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 80 ,
   1576                                                (PDMFilter_InitStruct *)&Filter[1]);	
   \                     ??PDM2PCMSDO78_24: (+1)
   \   00000204   0xF10B 0x03FC      ADD      R3,R11,#+252
   \   00000208   0x2250             MOVS     R2,#+80
   \   0000020A   0xEB09 0x1040      ADD      R0,R9,R0, LSL #+5
   \   0000020E   0xE004             B.N      ??PDM2PCMSDO78_25
   1577                                                break;
   1578                                        case BUF3_PLAY:
   1579                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 80 ,
   1580                                                (PDMFilter_InitStruct *)&Filter[1]);									
   \                     ??PDM2PCMSDO78_23: (+1)
   \   00000210   0xF10B 0x03FC      ADD      R3,R11,#+252
   \   00000214   0x2250             MOVS     R2,#+80
   \   00000216   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \                     ??PDM2PCMSDO78_25: (+1)
   \   0000021A   0x1839             ADDS     R1,R7,R0
   \   0000021C   0xF50B 0x70A2      ADD      R0,R11,#+324
   \   00000220   0x.... 0x....      BL       PDM_Filter_64_LSB
   1581                                                 break;
   1582                                        default:
   1583                                                 break; 
   1584                                }		
   1585                             }					 
   1586          		}
   \                     ??PDM2PCMSDO78_21: (+1)
   \   00000224   0x1C64             ADDS     R4,R4,#+1
   \   00000226   0x1CB6             ADDS     R6,R6,#+2
   \   00000228   0x1CAD             ADDS     R5,R5,#+2
   \   0000022A   0xF5B4 0x5F80      CMP      R4,#+4096
   \   0000022E   0xDBBF             BLT.N    ??PDM2PCMSDO78_20
   1587                          
   1588                    /* Recording Audio Data */						 
   1589                    switch (buffer_switch)
   \   00000230   0x....             LDR.N    R0,??DataTable18_23
   \   00000232   0x7800             LDRB     R0,[R0, #+0]
   \   00000234   0xB128             CBZ.N    R0,??PDM2PCMSDO78_26
   \   00000236   0x2802             CMP      R0,#+2
   \   00000238   0xD04B             BEQ.N    ??PDM2PCMSDO78_27
   \   0000023A   0xD326             BCC.N    ??PDM2PCMSDO78_28
   1590                    {
   1591                        case BUF1_PLAY: 	
   1592                                /* Update for left-right channel */
   1593                                for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>=0;i--)
   1594                                {
   1595                                    Buffer2.bufMIC8[2*i+1]=  Buffer2.bufMIC8[i];
   1596                                    if (i!=0) Buffer2.bufMIC8[2*i] = Buffer2.bufMIC8[i];
   1597                                }
   1598                                break;
   1599                        case BUF2_PLAY:
   1600                                /* Update for left-right channel */
   1601                                for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>=0;i--)
   1602                                {
   1603                                    Buffer3.bufMIC8[2*i+1]= Buffer3.bufMIC8[i];
   1604                                    if (i!=0) Buffer3.bufMIC8[2*i]= Buffer3.bufMIC8[i];;	
   1605                                }
   1606                                break;
   1607                        case BUF3_PLAY:
   1608                              /* Update for left-right channel */
   1609                              for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>=0;i--)
   1610                              {					
   1611                                  Buffer1.bufMIC8[2*i+1]= Buffer1.bufMIC8[i];
   1612                                  if (i!=0) Buffer1.bufMIC8[2*i]= Buffer1.bufMIC8[i];
   1613                              }
   1614                              break;
   1615                        default:
   1616                              break; 
   1617                    }                
   1618             }//if (WaveRecord_flgSDO8Finish==1)
   1619          }
   \   0000023C   0xB001             ADD      SP,SP,#+4
   \   0000023E   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??PDM2PCMSDO78_26: (+1)
   \   00000242   0xF508 0x40F0      ADD      R0,R8,#+30720
   \   00000246   0xF508 0x4100      ADD      R1,R8,#+32768
   \   0000024A   0x308A             ADDS     R0,R0,#+138
   \   0000024C   0x3188             ADDS     R1,R1,#+136
   \   0000024E   0xF240 0x32FF      MOVW     R2,#+1023
   \                     ??PDM2PCMSDO78_29: (+1)
   \   00000252   0x8803             LDRH     R3,[R0, #+0]
   \   00000254   0x1E52             SUBS     R2,R2,#+1
   \   00000256   0x804B             STRH     R3,[R1, #+2]
   \   00000258   0xF830 0x3902      LDRH     R3,[R0], #-2
   \   0000025C   0xF821 0x3904      STRH     R3,[R1], #-4
   \   00000260   0xD1F7             BNE.N    ??PDM2PCMSDO78_29
   \   00000262   0xEB07 0x0108      ADD      R1,R7,R8
   \   00000266   0x460A             MOV      R2,R1
   \   00000268   0x2000             MOVS     R0,#+0
   \   0000026A   0x880B             LDRH     R3,[R1, #+0]
   \   0000026C   0x8053             STRH     R3,[R2, #+2]
   \   0000026E   0xE004             B.N      ??PDM2PCMSDO78_30
   \                     ??PDM2PCMSDO78_31: (+1)
   \   00000270   0x880B             LDRH     R3,[R1, #+0]
   \   00000272   0x8053             STRH     R3,[R2, #+2]
   \   00000274   0xBF1C             ITT      NE 
   \   00000276   0x880B             LDRHNE   R3,[R1, #+0]
   \   00000278   0x8013             STRHNE   R3,[R2, #+0]
   \                     ??PDM2PCMSDO78_30: (+1)
   \   0000027A   0x1E40             SUBS     R0,R0,#+1
   \   0000027C   0x1F12             SUBS     R2,R2,#+4
   \   0000027E   0x1E89             SUBS     R1,R1,#+2
   \   00000280   0x2800             CMP      R0,#+0
   \   00000282   0xD5F5             BPL.N    ??PDM2PCMSDO78_31
   \   00000284   0xB001             ADD      SP,SP,#+4
   \   00000286   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??PDM2PCMSDO78_28: (+1)
   \   0000028A   0xF509 0x40F0      ADD      R0,R9,#+30720
   \   0000028E   0xF509 0x4100      ADD      R1,R9,#+32768
   \   00000292   0x308A             ADDS     R0,R0,#+138
   \   00000294   0x3188             ADDS     R1,R1,#+136
   \   00000296   0xF240 0x32FF      MOVW     R2,#+1023
   \                     ??PDM2PCMSDO78_32: (+1)
   \   0000029A   0x8803             LDRH     R3,[R0, #+0]
   \   0000029C   0x1E52             SUBS     R2,R2,#+1
   \   0000029E   0x804B             STRH     R3,[R1, #+2]
   \   000002A0   0xF830 0x3902      LDRH     R3,[R0], #-2
   \   000002A4   0xF821 0x3904      STRH     R3,[R1], #-4
   \   000002A8   0xD1F7             BNE.N    ??PDM2PCMSDO78_32
   \   000002AA   0xEB07 0x0109      ADD      R1,R7,R9
   \   000002AE   0x460A             MOV      R2,R1
   \   000002B0   0x2000             MOVS     R0,#+0
   \   000002B2   0x880B             LDRH     R3,[R1, #+0]
   \   000002B4   0x8053             STRH     R3,[R2, #+2]
   \   000002B6   0xE004             B.N      ??PDM2PCMSDO78_33
   \                     ??PDM2PCMSDO78_34: (+1)
   \   000002B8   0x880B             LDRH     R3,[R1, #+0]
   \   000002BA   0x8053             STRH     R3,[R2, #+2]
   \   000002BC   0xBF1C             ITT      NE 
   \   000002BE   0x880B             LDRHNE   R3,[R1, #+0]
   \   000002C0   0x8013             STRHNE   R3,[R2, #+0]
   \                     ??PDM2PCMSDO78_33: (+1)
   \   000002C2   0x1E40             SUBS     R0,R0,#+1
   \   000002C4   0x1F12             SUBS     R2,R2,#+4
   \   000002C6   0x1E89             SUBS     R1,R1,#+2
   \   000002C8   0x2800             CMP      R0,#+0
   \   000002CA   0xD5F5             BPL.N    ??PDM2PCMSDO78_34
   \   000002CC   0xB001             ADD      SP,SP,#+4
   \   000002CE   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??PDM2PCMSDO78_27: (+1)
   \   000002D2   0xF50A 0x40F0      ADD      R0,R10,#+30720
   \   000002D6   0xF50A 0x4100      ADD      R1,R10,#+32768
   \   000002DA   0x308A             ADDS     R0,R0,#+138
   \   000002DC   0x3188             ADDS     R1,R1,#+136
   \   000002DE   0xF240 0x32FF      MOVW     R2,#+1023
   \                     ??PDM2PCMSDO78_35: (+1)
   \   000002E2   0x8803             LDRH     R3,[R0, #+0]
   \   000002E4   0x1E52             SUBS     R2,R2,#+1
   \   000002E6   0x804B             STRH     R3,[R1, #+2]
   \   000002E8   0xF830 0x3902      LDRH     R3,[R0], #-2
   \   000002EC   0xF821 0x3904      STRH     R3,[R1], #-4
   \   000002F0   0xD1F7             BNE.N    ??PDM2PCMSDO78_35
   \   000002F2   0xEB07 0x010A      ADD      R1,R7,R10
   \   000002F6   0x460A             MOV      R2,R1
   \   000002F8   0x2000             MOVS     R0,#+0
   \   000002FA   0x880B             LDRH     R3,[R1, #+0]
   \   000002FC   0x8053             STRH     R3,[R2, #+2]
   \   000002FE   0xE004             B.N      ??PDM2PCMSDO78_36
   \                     ??PDM2PCMSDO78_37: (+1)
   \   00000300   0x880B             LDRH     R3,[R1, #+0]
   \   00000302   0x8053             STRH     R3,[R2, #+2]
   \   00000304   0xBF1C             ITT      NE 
   \   00000306   0x880B             LDRHNE   R3,[R1, #+0]
   \   00000308   0x8013             STRHNE   R3,[R2, #+0]
   \                     ??PDM2PCMSDO78_36: (+1)
   \   0000030A   0x1E40             SUBS     R0,R0,#+1
   \   0000030C   0x1F12             SUBS     R2,R2,#+4
   \   0000030E   0x1E89             SUBS     R1,R1,#+2
   \   00000310   0x2800             CMP      R0,#+0
   \   00000312   0xD5F5             BPL.N    ??PDM2PCMSDO78_37
   \                     ??PDM2PCMSDO78_19: (+1)
   \   00000314   0xB001             ADD      SP,SP,#+4
   \   00000316   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \   0000031A                      REQUIRE Buffer2
   \   0000031A                      REQUIRE Buffer3
   \   0000031A                      REQUIRE Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x4001300C         DC32     0x4001300c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x........         DC32     ??I2S2_stLROld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_9:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_10:
   \   00000000   0x4001340C         DC32     0x4001340c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_11:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_12:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_13:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_14:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_15:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x4001540C         DC32     0x4001540c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_9:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_10:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_11:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_12:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_13:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_14:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_15:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_16:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_17:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_18:
   \   00000000   0x........         DC32     hdma_spi5_rx+0x50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_19:
   \   00000000   0x........         DC32     TestSDO7_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_20:
   \   00000000   0x........         DC32     TestSDO8_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_21:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_22:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_23:
   \   00000000   0x........         DC32     buffer_switch
   1620          
   1621          
   1622          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DMA2_Stream5_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream6_IRQHandler
         0   -> HAL_DMA_IRQHandler
      40   HAL_SPI_MspInit
        40   -> HAL_DMA_DeInit
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
       8   HAL_SPI_RxCpltCallback
         0   -> HAL_SPI_Receive_DMA
         8   -> HAL_SPI_Receive_DMA
      24   MIC1TO6_Init
        24   -> HAL_GPIO_ReadPin
        24   -> HAL_I2S_Init
        24   -> SPI4_Init
        24   -> SPI5_Init
         0   -> SPI6_Init
       0   Mic7Rec
         0   -> SPI5_Init
       0   Mic8Rec
         0   -> HAL_SPI_Init
      40   PDM2PCMSDO78
        40   -> PDM_Filter_64_LSB
       0   RecordUpdBuf
      16   SPI1_IRQHandler
        16   -> HAL_GPIO_ReadPin
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
      24   SPI2_IRQHandler
        24   -> HAL_GPIO_ReadPin
      24   SPI4_IRQHandler
        24   -> HAL_GPIO_ReadPin
       8   SPI4_Init
         8   -> HAL_SPI_Init
       8   SPI5_IRQHandler
         8   -> PDM_Filter_64_LSB
      32   SPI5_Init
         0   -> HAL_SPI_Init
        32   -> PDM_Filter_Init
       8   SPI6_IRQHandler
         8   -> PDM_Filter_64_LSB
       0   SPI6_Init
         0   -> HAL_SPI_Init
       8   StartRecMic7_8
         8   -> HAL_SPI_Receive_DMA
       0   mySPI_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_11
       4  ??DataTable17_12
       4  ??DataTable17_13
       4  ??DataTable17_14
       4  ??DataTable17_15
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable17_8
       4  ??DataTable17_9
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_10
       4  ??DataTable18_11
       4  ??DataTable18_12
       4  ??DataTable18_13
       4  ??DataTable18_14
       4  ??DataTable18_15
       4  ??DataTable18_16
       4  ??DataTable18_17
       4  ??DataTable18_18
       4  ??DataTable18_19
       4  ??DataTable18_2
       4  ??DataTable18_20
       4  ??DataTable18_21
       4  ??DataTable18_22
       4  ??DataTable18_23
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable18_8
       4  ??DataTable18_9
   32928  Buffer1
   32928  Buffer2
   32928  Buffer3
       8  DMA2_Stream5_IRQHandler
       8  DMA2_Stream6_IRQHandler
    1042  HAL_SPI_MspInit
     142  HAL_SPI_RxCpltCallback
       2  I2S1_stNipple
       1  I2S1_stPosShft
       1  I2S2_stLR
    8200  I2S2_stLROld
          I2S2_stNipple
          iSDO34
          TestSDO34
       1  I2S2_stPosShft
     210  MIC1TO6_Init
       1  Main_stLR
       2  Mic7Rec
      74  Mic8Rec
     794  PDM2PCMSDO78
     238  RecordUpdBuf
     216  SPI1_IRQHandler
     212  SPI1_Ini
     204  SPI2_IRQHandler
     324  SPI4_IRQHandler
      86  SPI4_Init
    8200  SPI4_stPosShft
          Main_stLROld
          SPI4_stNipple
          iSDO56
          TestSDO56
     138  SPI5_IRQHandler
     140  SPI5_Init
     132  SPI6_IRQHandler
      74  SPI6_Init
      48  StartRecMic7_8
    8192  TestSDO7
    8192  TestSDO7_1
    8192  TestSDO8
    8192  TestSDO8_1
       1  WaveRecord_flgIni
       2  cntStrt
       2  cntTransFinish
      80  hdma_spi2_tx
      80  hdma_spi3_tx
     160  hdma_spi5_rx
          hdma_spi6_rx
    8340  hi2s1
          hi2s2
          WaveRecord_flgInt
          stLROld
          WaveRec_idxTest
          vRawSens1
          vRawSens2
          vRawSens4
          vRawSens3
          vRawSens5
          vRawSens6
          SPI1_stNipple
          iSDO12
          TestSDO12
     100  hspi1
     100  hspi2
     580  hspi5
          hspi6
          Filter
          swtSDO7
          swtSDO8
          WaveRecord_flgSDO7Finish
          WaveRecord_flgSDO8Finish
          idxMic8
          idxMic7
          cntPos
          cntPos7
          bufPCMSens7
          bufPCMSens8
          pDataMic8
          pDataMic7
       2  idxFrmPDMMic8
      44  mySPI_SendData
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins
       1  stLR

 
 58 898 bytes in section .bss
 98 784 bytes in section .bss  (abs)
  4 324 bytes in section .text
 
   4 324 bytes of CODE memory
 157 682 bytes of DATA memory

Errors: none
Warnings: 16
