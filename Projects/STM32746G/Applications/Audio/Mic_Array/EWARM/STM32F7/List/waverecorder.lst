###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       08/Apr/2016  18:41:58
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          
      8          
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "waverecorder.h" 
     11          #include "string.h"
     12          //#include "stm32f7xx_hal_spi.h"
     13          #include "stm32f7xx_hal.h"
     14          #include "pdm_filter.h"
     15          #include "DSP.h"
     16          
     17          
     18          /* Private typedef -----------------------------------------------------------*/
     19          /* Private define ------------------------------------------------------------*/
     20          
     21          
     22          /* SPI Configuration defines */
     23          #define SPI_SCK_PIN                       GPIO_PIN_10
     24          #define SPI_SCK_GPIO_PORT                 GPIOB
     25          #define SPI_SCK_GPIO_CLK                  1
     26          #define SPI_SCK_SOURCE                    1
     27          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     28          
     29          #define SPI_MOSI_PIN                      GPIO_PIN_3
     30          #define SPI_MOSI_GPIO_PORT                GPIOC
     31          #define SPI_MOSI_GPIO_CLK                 1
     32          #define SPI_MOSI_SOURCE                   1
     33          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     34          
     35          
     36          /* sop1hc */
     37          #define SPI1_SCK_PIN                       GPIO_PIN_5
     38          #define SPI1_SCK_GPIO_PORT                 GPIOA
     39          #define SPI1_SCK_GPIO_CLK                  1
     40          #define SPI1_SCK_SOURCE                    1
     41          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     42          
     43          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     44          #define SPI1_MOSI_GPIO_PORT                GPIOA
     45          #define SPI1_MOSI_GPIO_CLK                 1
     46          #define SPI1_MOSI_SOURCE                   1
     47          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     48          
     49          #define SPI1_MISO_PIN                      GPIO_PIN_6
     50          #define SPI1_MISO_GPIO_PORT                GPIOA
     51          #define SPI1_MISO_GPIO_CLK                 1
     52          #define SPI1_MISO_SOURCE                   1
     53          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     54          
     55          
     56          
     57          

   \                                 In section .bss, align 4
     58          uint16_t idxMic8=0;
     59          uint16_t idxMic7=0;
     60          uint8_t pHeaderBuff[44];
     61          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
     62          uint16_t volatile cntTransFinish;
     63          
     64          /* Private macro -------------------------------------------------------------*/
     65          /* Private variables ---------------------------------------------------------*/
     66          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     67          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     68          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     69          extern WAVE_FormatTypeDef WaveFormat;
     70          extern FIL WavFile;
     71          extern AUDIO_DEMO_StateMachine AudioDemo;
     72          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     73          extern __IO uint8_t buffer_switch;
     74          extern __IO uint8_t volume;
     75          extern SPI_HandleTypeDef hspi4,hspi1;
     76          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     77          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     78          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     79          extern __IO uint16_t  I2S2_idxTmp;
     80          extern SPI_HandleTypeDef     hspi4;
     81          extern DMA_HandleTypeDef     DmaHandle;
     82          
     83          #ifndef CS43L22_PLAY
     84          extern __IO uint8_t flgDlyUpd; 
     85          extern __IO uint32_t XferCplt;
     86          extern __IO uint16_t  idxSPI5DataBuf3;
     87          #endif
     88          
     89          int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
     90          int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
     91          int16_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
     92          uint16_t TestSDO7[8*AUDIO_OUT_BUFFER_SIZE];
     93          uint16_t TestSDO8[8*AUDIO_OUT_BUFFER_SIZE];
     94          uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
     95          uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
     96          __IO uint16_t  WaveRec_idxTest;
     97          __IO uint8_t flgRacing;
     98          
     99          
    100          
    101          SPI_HandleTypeDef hspi1,hspi2;
    102          SPI_HandleTypeDef spi1_ins,spi2_ins;
    103          I2S_HandleTypeDef hi2s1;
    104          I2S_HandleTypeDef hi2s2;
    105          SPI_HandleTypeDef hspi5,hspi6;
   \                     hspi5:
   \   00000000                      DS8 100
   \                     hspi6:
   \   00000064                      DS8 100
    106          DMA_HandleTypeDef hdma_spi2_tx;
    107          DMA_HandleTypeDef hdma_spi3_tx;
    108          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
    109          
    110          #if USB_STREAMING
    111          __IO uint16_t idxFrmPDMMic8;
    112          #endif
    113          
    114          uint16_t *bufPCMSens7;
    115          uint16_t *bufPCMSens8;
    116          __IO uint16_t cntPos;
    117          __IO uint16_t cntPos7;
    118          __IO static uint16_t iBuff;
    119          __IO static uint32_t uwVolume = 70;
    120          __IO PDMFilter_InitStruct Filter[2];
   \                     Filter:
   \   000000C8                      DS8 104
    121          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
    122          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
    123          __IO int16_t   pPDM2PCM[16];
    124          __IO uint16_t cntStrt;
    125          __IO uint8_t WaveRecord_flgInt;
    126          uint8_t WaveRecord_flgIni;
    127          
    128          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
    129          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
    130          __IO uint16_t iSDO12,iSDO34,iSDO56;
    131          __IO uint8_t swtSDO7,swtSDO8;
   \                     swtSDO7:
   \   00000130                      DS8 1
   \                     swtSDO8:
   \   00000131                      DS8 1
    132          __IO uint8_t WaveRecord_flgSDO7Finish, WaveRecord_flgSDO8Finish;
   \                     WaveRecord_flgSDO7Finish:
   \   00000132                      DS8 1
   \                     WaveRecord_flgSDO8Finish:
   \   00000133                      DS8 1
   \                     idxMic8:
   \   00000134                      DS8 2
   \                     idxMic7:
   \   00000136                      DS8 2
   \                     cntPos:
   \   00000138                      DS8 2
   \                     cntPos7:
   \   0000013A                      DS8 2
   \                     bufPCMSens7:
   \   0000013C                      DS8 4
   \                     bufPCMSens8:
   \   00000140                      DS8 4
   \                     pDataMic8:
   \   00000144                      DS8 128
   \                     pDataMic7:
   \   000001C4                      DS8 128

   \                                 In section .bss, align 4
   \                     pHeaderBuff:
   \   00000000                      DS8 44

   \                                 In section .bss, align 2
   \                     cntTransFinish:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     TestSDO12:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO34:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO56:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    133          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
    134          __IO uint8_t I2S2_stLR, I2S2_stLROld;
    135          
    136          /* Private function prototypes -----------------------------------------------*/
    137          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    138          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    139          static void I2S1_Init(void);
    140          static void I2S2_Init(void);
    141          
    142          #if EXT_RAM
    143          #pragma location=SDRAM_BANK_ADDR
    144          #endif
    145          Mic_Array_Data Buffer1;
   \                     Buffer1:
   \   00000000                      DS8 16384
    146          #if EXT_RAM
    147          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)
    148          #endif
    149          Mic_Array_Data Buffer2;
   \                     Buffer2:
   \   00004000                      DS8 16384
    150          #if EXT_RAM
    151          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)
    152          #endif
    153          Mic_Array_Data Buffer3;
   \                     Buffer3:
   \   00008000                      DS8 16384
   \                     TestSDO7:
   \   0000C000                      DS8 16384
   \                     TestSDO8:
   \   00010000                      DS8 16384

   \                                 In section .bss, align 4
   \                     TestSDO7_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8_1:
   \   00000000                      DS8 8192
    154          

   \                                 In section .text, align 2, keep-with-next
    155          void SPI1_Ini(void)
    156          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    157            GPIO_InitTypeDef GPIO_InitStructure;
    158          
    159           
    160             	 
    161            /* Enable SCK, MOSI and MISO GPIO clocks */
    162            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40023830
    163            __HAL_RCC_GPIOA_CLK_ENABLE();
    164          
    165            
    166            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    167            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    168            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    169          
    170            /* SPI SCK pin configuration */
    171            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    172            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    173            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable13_1  ;; 0x40020000
   \   00000010   0x6941             LDR      R1,[R0, #+20]
   \   00000012   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000016   0x6141             STR      R1,[R0, #+20]
   \   00000018   0x6941             LDR      R1,[R0, #+20]
   \   0000001A   0xF401 0x5180      AND      R1,R1,#0x1000
   \   0000001E   0x9100             STR      R1,[SP, #+0]
   \   00000020   0x9900             LDR      R1,[SP, #+0]
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x9100             STR      R1,[SP, #+0]
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000002C   0x6001             STR      R1,[R0, #+0]
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xA901             ADD      R1,SP,#+4
   \   00000032   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0x9002             STR      R0,[SP, #+8]
   \   0000003E   0x9003             STR      R0,[SP, #+12]
   \   00000040   0x2003             MOVS     R0,#+3
   \   00000042   0x9004             STR      R0,[SP, #+16]
   \   00000044   0x2005             MOVS     R0,#+5
   \   00000046   0x9005             STR      R0,[SP, #+20]
   \   00000048   0x2020             MOVS     R0,#+32
   \   0000004A   0x9001             STR      R0,[SP, #+4]
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       HAL_GPIO_Init
    174          
    175            /* SPI  MOSI pin configuration */
    176            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   00000052   0x2001             MOVS     R0,#+1
    177            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    178            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   00000054   0xA901             ADD      R1,SP,#+4
   \   00000056   0x9005             STR      R0,[SP, #+20]
   \   00000058   0x2080             MOVS     R0,#+128
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x4620             MOV      R0,R4
   \   0000005E   0x.... 0x....      BL       HAL_GPIO_Init
    179          
    180            /* SPI MISO pin configuration */
    181            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   00000062   0x2001             MOVS     R0,#+1
    182            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    183            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   00000064   0xA901             ADD      R1,SP,#+4
   \   00000066   0x9005             STR      R0,[SP, #+20]
   \   00000068   0x2040             MOVS     R0,#+64
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       HAL_GPIO_Init
    184          
    185            /* SPI configuration -------------------------------------------------------*/
    186            //SPI_I2S_DeInit(SPI1);
    187            
    188            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   00000076   0xF44F 0x6180      MOV      R1,#+1024
   \   0000007A   0x6081             STR      R1,[R0, #+8]
    189            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000007C   0xF44F 0x6170      MOV      R1,#+3840
   \   00000080   0x60C1             STR      R1,[R0, #+12]
    190            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x6101             STR      R1,[R0, #+16]
    191            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    192            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    193            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    194            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    195            spi1_ins.Init.CRCPolynomial = 7;
    196            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   00000086   0x.... 0x....      LDR.W    R4,??DataTable18  ;; 0x40021000
   \   0000008A   0x6141             STR      R1,[R0, #+20]
   \   0000008C   0xF44F 0x7100      MOV      R1,#+512
   \   00000090   0x6181             STR      R1,[R0, #+24]
   \   00000092   0x2128             MOVS     R1,#+40
   \   00000094   0x61C1             STR      R1,[R0, #+28]
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x6201             STR      R1,[R0, #+32]
   \   0000009A   0x2107             MOVS     R1,#+7
   \   0000009C   0x62C1             STR      R1,[R0, #+44]
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0x6041             STR      R1,[R0, #+4]
    197            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   000000A2   0x.... 0x....      BL       HAL_SPI_Init
    198            {
    199              /* Initialization Error */
    200              //Error_Handler();
    201            }
    202            
    203           
    204            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   000000A6   0x2008             MOVS     R0,#+8
    205            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    206            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    207            GPIO_InitStructure.Pull = GPIO_PULLUP;
    208            //GPIO_InitStructure.Alternate 
    209            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000A8   0xA901             ADD      R1,SP,#+4
   \   000000AA   0x9001             STR      R0,[SP, #+4]
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x9002             STR      R0,[SP, #+8]
   \   000000B0   0x2002             MOVS     R0,#+2
   \   000000B2   0x9004             STR      R0,[SP, #+16]
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0x9003             STR      R0,[SP, #+12]
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x.... 0x....      BL       HAL_GPIO_Init
    210          
    211            /* Deselect : Chip Select high */
    212            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000BE   0x2201             MOVS     R2,#+1
   \   000000C0   0x2108             MOVS     R1,#+8
   \   000000C2   0x4620             MOV      R0,R4
   \   000000C4   0x.... 0x....      BL       HAL_GPIO_WritePin
    213             /* sop1hc */
    214            /* Configure the SPI interrupt priority */
    215            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000C8   0x2200             MOVS     R2,#+0
   \   000000CA   0x2100             MOVS     R1,#+0
   \   000000CC   0x2023             MOVS     R0,#+35
   \   000000CE   0x.... 0x....      BL       HAL_NVIC_SetPriority
    216          
    217            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000D2   0x2023             MOVS     R0,#+35
   \   000000D4   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    218            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    219            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    220          
    221            /* Enable SPI1  */
    222            //__HAL_SPI_ENABLE(SPI1);
    223          
    224          }
   \   000000D8   0xB006             ADD      SP,SP,#+24
   \   000000DA   0xBD10             POP      {R4,PC}          ;; return
    225          

   \                                 In section .text, align 2, keep-with-next
    226          void mySPI_SendData(uint8_t adress, uint8_t data)
    227          {
   \                     mySPI_SendData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   00000004   0x6812             LDR      R2,[R2, #+0]
    228           
    229          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x6893             LDR      R3,[R2, #+8]
   \   00000008   0x079B             LSLS     R3,R3,#+30
   \   0000000A   0xD5FC             BPL.N    ??mySPI_SendData_0
    230          SPI_I2S_SendData(SPI1, adress);
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable13_3  ;; 0x4001300c
   \   00000010   0x6018             STR      R0,[R3, #+0]
    231          
    232          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   00000012   0x6890             LDR      R0,[R2, #+8]
   \   00000014   0x07C0             LSLS     R0,R0,#+31
   \   00000016   0xD5FC             BPL.N    ??mySPI_SendData_1
    233          SPI_I2S_ReceiveData(SPI1);
   \   00000018   0x6818             LDR      R0,[R3, #+0]
    234          
    235          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   0000001A   0x6890             LDR      R0,[R2, #+8]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD4FC             BMI.N    ??mySPI_SendData_2
    236          SPI_I2S_SendData(SPI1, data);
   \   00000020   0x6019             STR      R1,[R3, #+0]
    237          
    238          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000022   0x6890             LDR      R0,[R2, #+8]
   \   00000024   0x07C0             LSLS     R0,R0,#+31
   \   00000026   0xD4FC             BMI.N    ??mySPI_SendData_3
    239          SPI_I2S_ReceiveData(SPI1);
   \   00000028   0x6818             LDR      R0,[R3, #+0]
    240           
    241          }
   \   0000002A   0x4770             BX       LR               ;; return
    242          
    243          /**
    244            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    245            * @param  None
    246            * @retval None
    247          */
    248          

   \                                 In section .text, align 2, keep-with-next
    249          	void SPI1_IRQHandler(void)
    250          {  
    251                int16_t tmpTest;
    252          	  static uint8_t stLR,stLROld;
                 	                 ^
Warning[Pe177]: variable "stLR" was declared but never referenced
    253          	
    254          	  /* SPI in mode Receiver ----------------------------------------------------*/
    255          	  if(
    256          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    257          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    258          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable13_4
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x6849             LDR      R1,[R1, #+4]
   \   00000008   0x0649             LSLS     R1,R1,#+25
   \   0000000A   0xD57C             BPL.N    ??SPI1_IRQHandler_0
    259          	  {
    260          	
    261          
    262          	   tmpTest =  (int16_t)SPI_I2S_ReceiveData(SPI1);
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable13_3  ;; 0x4001300c
   \   00000010   0x6809             LDR      R1,[R1, #+0]
    263          	
    264          	   /* Left-Right Mic data */
    265          	   //stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    266          	
    267          		if (I2S2_stLR==GPIO_PIN_SET)
   \   00000012   0xF890 0x2084      LDRB     R2,[R0, #+132]
   \   00000016   0xF890 0x3082      LDRB     R3,[R0, #+130]
   \   0000001A   0xB209             SXTH     R1,R1
   \   0000001C   0x2B01             CMP      R3,#+1
   \   0000001E   0xD137             BNE.N    ??SPI1_IRQHandler_1
    268          		{
    269          		       if(stLROld==GPIO_PIN_SET) 
   \   00000020   0x2A01             CMP      R2,#+1
   \   00000022   0xD170             BNE.N    ??SPI1_IRQHandler_0
    270          		       {
    271          				   vRawSens1 = (tmpTest);
   \   00000024   0xF8A0 0x1088      STRH     R1,[R0, #+136]
    272          			       WaveRec_idxTest++;
   \   00000028   0xF8B0 0x1086      LDRH     R1,[R0, #+134]
   \   0000002C   0x1C49             ADDS     R1,R1,#+1
   \   0000002E   0xF8A0 0x1086      STRH     R1,[R0, #+134]
    273          				   /* Recording Audio Data */						 
    274          					if (WaveRec_idxSens1<AUDIO_OUT_BUFFER_SIZE) 
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable13_5
   \   00000036   0x880A             LDRH     R2,[R1, #+0]
   \   00000038   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000003C   0xDA60             BGE.N    ??SPI1_IRQHandler_2
    275          					{
    276          					   switch (buffer_switch)
   \   0000003E   0x.... 0x....      LDR.W    R2,??DataTable13_6
   \   00000042   0x7812             LDRB     R2,[R2, #+0]
   \   00000044   0xB11A             CBZ.N    R2,??SPI1_IRQHandler_3
   \   00000046   0x2A02             CMP      R2,#+2
   \   00000048   0xD019             BEQ.N    ??SPI1_IRQHandler_4
   \   0000004A   0xD30C             BCC.N    ??SPI1_IRQHandler_5
   \   0000004C   0xE058             B.N      ??SPI1_IRQHandler_2
    277          					   {
    278                                                        case BUF1_PLAY:
    279                                                            Buffer2.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;								
   \                     ??SPI1_IRQHandler_3: (+1)
   \   0000004E   0xF9B0 0x2088      LDRSH    R2,[R0, #+136]
   \   00000052   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   00000056   0x.... 0x....      LDR.W    R3,??DataTable18_1
   \   0000005A   0xEB03 0x034C      ADD      R3,R3,R12, LSL #+1
   \   0000005E   0xF503 0x4380      ADD      R3,R3,#+16384
   \   00000062   0x801A             STRH     R2,[R3, #+0]
    280                                                            break;
    281                                                        case BUF2_PLAY:
    282                                                            Buffer3.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;
    283                                                            break;
   \   00000064   0xE04C             B.N      ??SPI1_IRQHandler_2
   \                     ??SPI1_IRQHandler_5: (+1)
   \   00000066   0xF9B0 0x2088      LDRSH    R2,[R0, #+136]
   \   0000006A   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   0000006E   0x.... 0x....      LDR.W    R3,??DataTable18_1
   \   00000072   0xEB03 0x034C      ADD      R3,R3,R12, LSL #+1
   \   00000076   0xF503 0x4300      ADD      R3,R3,#+32768
   \   0000007A   0x801A             STRH     R2,[R3, #+0]
   \   0000007C   0xE040             B.N      ??SPI1_IRQHandler_2
    284                                                        case BUF3_PLAY:
    285                                                            Buffer1.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;									
   \                     ??SPI1_IRQHandler_4: (+1)
   \   0000007E   0xF9B0 0x2088      LDRSH    R2,[R0, #+136]
   \   00000082   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   00000086   0x.... 0x....      LDR.W    R3,??DataTable18_1
   \   0000008A   0xF823 0x201C      STRH     R2,[R3, R12, LSL #+1]
    286                                                            break;
    287                                                        default:
    288                                                            break; 
    289          					   
    290          					   }
    291          					  
    292          					}
    293          //					else
    294          //					{
    295          //						switch (buffer_switch)
    296          //						{
    297          //						    case BUF1_PLAY:
    298          //						                    Buffer1.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;//vRawSens1;									
    299          //						                    break;
    300          //						    case BUF2_PLAY:
    301          //						                    Buffer2.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;//vRawSens1;	
    302          //						                    break;
    303          //						    case BUF3_PLAY:
    304          //						                    Buffer3.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;//vRawSens1;										
    305          //						                    break;
    306          //						    default:
    307          //						                    break; 
    308          //						}
    309          //					}
    310          
    311          					 WaveRec_idxSens1++;
   \   0000008E   0xE037             B.N      ??SPI1_IRQHandler_2
    312          
    313          //			      if ((WaveRec_idxSens1 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x01;
    314          //
    315          //			       if (flgRacing==0x3F)  SubFrameFinished();                    
    316          		       	}
    317          		}
    318          		else
    319          		{		
    320                    if ((stLROld==GPIO_PIN_RESET))  
   \                     ??SPI1_IRQHandler_1: (+1)
   \   00000090   0xBBCA             CBNZ.N   R2,??SPI1_IRQHandler_0
    321                    {
    322          				vRawSens2 = (tmpTest);
   \   00000092   0xF8A0 0x108A      STRH     R1,[R0, #+138]
    323          				WaveRec_idxTest++;
   \   00000096   0xF8B0 0x1086      LDRH     R1,[R0, #+134]
   \   0000009A   0x1C49             ADDS     R1,R1,#+1
   \   0000009C   0xF8A0 0x1086      STRH     R1,[R0, #+134]
    324          				if (WaveRec_idxSens2<AUDIO_OUT_BUFFER_SIZE)
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable14
   \   000000A4   0x880A             LDRH     R2,[R1, #+0]
   \   000000A6   0xF5B2 0x6F80      CMP      R2,#+1024
   \   000000AA   0xDA29             BGE.N    ??SPI1_IRQHandler_2
    325          				{
    326          					/* Recording Audio Data */						 
    327          					switch (buffer_switch)
   \   000000AC   0x.... 0x....      LDR.W    R2,??DataTable13_6
   \   000000B0   0x7812             LDRB     R2,[R2, #+0]
   \   000000B2   0xB11A             CBZ.N    R2,??SPI1_IRQHandler_6
   \   000000B4   0x2A02             CMP      R2,#+2
   \   000000B6   0xD019             BEQ.N    ??SPI1_IRQHandler_7
   \   000000B8   0xD30C             BCC.N    ??SPI1_IRQHandler_8
   \   000000BA   0xE021             B.N      ??SPI1_IRQHandler_2
    328          					{
    329          						case BUF1_PLAY:
    330          							Buffer2.bufMIC2[WaveRec_idxSens2] = vRawSens2;								
   \                     ??SPI1_IRQHandler_6: (+1)
   \   000000BC   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   000000C0   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   000000C4   0x.... 0x....      LDR.W    R3,??DataTable18_1
   \   000000C8   0xEB03 0x034C      ADD      R3,R3,R12, LSL #+1
   \   000000CC   0xF503 0x4390      ADD      R3,R3,#+18432
   \   000000D0   0x801A             STRH     R2,[R3, #+0]
    331          							break;
    332          						case BUF2_PLAY:
    333          							Buffer3.bufMIC2[WaveRec_idxSens2] = vRawSens2;
    334          							break;
   \   000000D2   0xE015             B.N      ??SPI1_IRQHandler_2
   \                     ??SPI1_IRQHandler_8: (+1)
   \   000000D4   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   000000D8   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   000000DC   0x.... 0x....      LDR.W    R3,??DataTable18_1
   \   000000E0   0xEB03 0x034C      ADD      R3,R3,R12, LSL #+1
   \   000000E4   0xF503 0x4308      ADD      R3,R3,#+34816
   \   000000E8   0x801A             STRH     R2,[R3, #+0]
   \   000000EA   0xE009             B.N      ??SPI1_IRQHandler_2
    335          						case BUF3_PLAY:
    336          							Buffer1.bufMIC2[WaveRec_idxSens2] = vRawSens2;									
   \                     ??SPI1_IRQHandler_7: (+1)
   \   000000EC   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   000000F0   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   000000F4   0x.... 0x....      LDR.W    R3,??DataTable18_1
   \   000000F8   0xEB03 0x034C      ADD      R3,R3,R12, LSL #+1
   \   000000FC   0xF8A3 0x2800      STRH     R2,[R3, #+2048]
    337          							break;
    338          						default:
    339          							break; 
    340          
    341          				        }
    342          					
    343                           }
    344          //                 else
    345          //                 {
    346          //
    347          //					 /* Recording Audio Data */ 					  
    348          //					 switch (buffer_switch)
    349          //					 {
    350          //						 case BUF1_PLAY:
    351          //							 Buffer1.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;								 
    352          //							 break;
    353          //						 case BUF2_PLAY:
    354          //							 Buffer2.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;
    355          //							 break;
    356          //						 case BUF3_PLAY:
    357          //							 Buffer3.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;									 
    358          //							 break;
    359          //						 default:
    360          //							 break; 
    361          //					
    362          //					}
    363          //
    364          //			       }
    365          
    366          				    WaveRec_idxSens2++;
   \                     ??SPI1_IRQHandler_2: (+1)
   \   00000100   0x880A             LDRH     R2,[R1, #+0]
   \   00000102   0x1C52             ADDS     R2,R2,#+1
   \   00000104   0x800A             STRH     R2,[R1, #+0]
    367          
    368          //			if ((WaveRec_idxSens2 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x02;
    369          //
    370          //			if (flgRacing==0x3F)  SubFrameFinished();			      
    371          					
    372          
    373          			  }
    374          		
    375          		} 	
    376          
    377          		
    378          	}
    379          	   
    380          
    381          #if 0
    382                 if (iSDO12<4*AUDIO_OUT_BUFFER_SIZE)
    383          	   {
    384                     TestSDO12[iSDO12++]=tmpTest;
    385          	   }
    386          	   else
    387          	   {
    388                     iSDO12=0;
    389          	   }
    390          		if ((WaveRec_idxSens1 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens2 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    391          	//			  &&(stLR!=stLROld))
    392          		{
    393          	/*-------------------------------------------------------------------------------------------------------------
    394          				  
    395          		Sequence  Record Data					  Processing Data				  Player Data
    396          				  
    397          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    398          				  
    399          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    400          				  
    401          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    402          	 ---------------------------------------------------------------------------------------------------------------*/
    403          				  /* Recording Audio Data */						 
    404          				   switch (buffer_switch)
    405          				   {
    406          							case BUF1_PLAY:
    407                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    408          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    409          							    else
    410          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    411          	
    412          									break;
    413          							case BUF2_PLAY:
    414                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    415          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    416          							    else
    417          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;	
    418          									break;
    419          							case BUF3_PLAY:
    420                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    421          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    422          							    else
    423          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    424          									break;
    425          							default:
    426          									break; 
    427          				   }
    428          			
    429          		 } 
    430          #endif		
    431          
    432          		/* Update Old value */	  
    433          		stLROld=I2S2_stLR;
   \                     ??SPI1_IRQHandler_0: (+1)
   \   00000106   0xF890 0x1082      LDRB     R1,[R0, #+130]
   \   0000010A   0xF880 0x1084      STRB     R1,[R0, #+132]
    434          
    435          				 
    436          } 	 
   \   0000010E   0x4770             BX       LR               ;; return
    437          
    438          
    439          
    440          
    441          /**
    442            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    443            * @param  None
    444            * @retval None
    445          */
    446          

   \                                 In section .text, align 2, keep-with-next
    447          void SPI2_IRQHandler(void)
    448          {      
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    449              int16_t app;
    450              
    451          
    452            /* Check if data are available in SPI Data register */
    453             if (
    454          //	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    455          //   	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    456             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    457             	  )
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable13_4
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x6C20             LDR      R0,[R4, #+64]
   \   0000000A   0x6840             LDR      R0,[R0, #+4]
   \   0000000C   0x0640             LSLS     R0,R0,#+25
   \   0000000E   0xD56E             BPL.N    ??SPI2_IRQHandler_0
    458             {
    459              
    460               app = (int16_t)SPI_I2S_ReceiveData(SPI2);   
    461               //SPI_I2S_SendData(SPI2, 3333);
    462          
    463          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000010   0x2110             MOVS     R1,#+16
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable18_2  ;; 0x4000380c
   \   00000016   0x6805             LDR      R5,[R0, #+0]
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   0000001C   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000020   0xF884 0x0082      STRB     R0,[R4, #+130]
    464          
    465          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   00000024   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   00000028   0xB22D             SXTH     R5,R5
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xF894 0x0083      LDRB     R0,[R4, #+131]
   \   00000030   0xD12C             BNE.N    ??SPI2_IRQHandler_1
    466          	 {		
    467          		if ((I2S2_stLROld==GPIO_PIN_RESET)) 
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD157             BNE.N    ??SPI2_IRQHandler_2
    468          		{
    469          			vRawSens3 = app;
    470          			if (WaveRec_idxSens3 < AUDIO_OUT_BUFFER_SIZE)
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable18_3
   \   0000003A   0xF8A4 0x508E      STRH     R5,[R4, #+142]
   \   0000003E   0x8801             LDRH     R1,[R0, #+0]
   \   00000040   0xF5B1 0x6F80      CMP      R1,#+1024
   \   00000044   0xDA4C             BGE.N    ??SPI2_IRQHandler_3
    471          			{
    472          				switch (buffer_switch)
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable13_6
   \   0000004A   0x7809             LDRB     R1,[R1, #+0]
   \   0000004C   0xB119             CBZ.N    R1,??SPI2_IRQHandler_4
   \   0000004E   0x2902             CMP      R1,#+2
   \   00000050   0xD013             BEQ.N    ??SPI2_IRQHandler_5
   \   00000052   0xD309             BCC.N    ??SPI2_IRQHandler_6
   \   00000054   0xE044             B.N      ??SPI2_IRQHandler_3
    473          				{
    474          					case BUF1_PLAY:
    475          						Buffer2.bufMIC3[WaveRec_idxSens3] = vRawSens3;								
   \                     ??SPI2_IRQHandler_4: (+1)
   \   00000056   0x8803             LDRH     R3,[R0, #+0]
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable21
   \   0000005C   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000060   0xF502 0x42A0      ADD      R2,R2,#+20480
   \   00000064   0x8015             STRH     R5,[R2, #+0]
    476          						break;
    477          					case BUF2_PLAY:
    478          						Buffer3.bufMIC3[WaveRec_idxSens3] = vRawSens3;
    479          						break;
    480          					case BUF3_PLAY:
    481          						Buffer1.bufMIC3[WaveRec_idxSens3] = vRawSens3;									
    482          						break;
    483          					default:
    484          						break; 
    485          				}
    486          				
    487          			}
    488          //			else
    489          //			{
    490          //				switch (buffer_switch)
    491          //				{
    492          //					case BUF1_PLAY:
    493          //						Buffer1.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;								
    494          //						break;
    495          //					case BUF2_PLAY:
    496          //						Buffer2.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;
    497          //						break;
    498          //					case BUF3_PLAY:
    499          //						Buffer3.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;									
    500          //						break;
    501          //					default:
    502          //						break; 
    503          //				}
    504          //			}
    505          
    506          		    WaveRec_idxSens3++;
   \   00000066   0xE03B             B.N      ??SPI2_IRQHandler_3
   \                     ??SPI2_IRQHandler_6: (+1)
   \   00000068   0x8803             LDRH     R3,[R0, #+0]
   \   0000006A   0x.... 0x....      LDR.W    R2,??DataTable21
   \   0000006E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000072   0xF502 0x4210      ADD      R2,R2,#+36864
   \   00000076   0x8015             STRH     R5,[R2, #+0]
   \   00000078   0xE032             B.N      ??SPI2_IRQHandler_3
   \                     ??SPI2_IRQHandler_5: (+1)
   \   0000007A   0x8803             LDRH     R3,[R0, #+0]
   \   0000007C   0x.... 0x....      LDR.W    R2,??DataTable21
   \   00000080   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000084   0xF502 0x5280      ADD      R2,R2,#+4096
   \   00000088   0x8015             STRH     R5,[R2, #+0]
   \   0000008A   0xE029             B.N      ??SPI2_IRQHandler_3
    507          
    508          //			if ((WaveRec_idxSens3 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x04;
    509          //
    510          //			if (flgRacing==0x3F)  SubFrameFinished();
    511          			
    512          		}
    513          		
    514          	 }
    515          	 else
    516          	 {
    517                      if ((I2S2_stLROld==GPIO_PIN_SET))   
   \                     ??SPI2_IRQHandler_1: (+1)
   \   0000008C   0x2801             CMP      R0,#+1
   \   0000008E   0xD12A             BNE.N    ??SPI2_IRQHandler_2
    518                      {
    519                            vRawSens4 =app;
    520                            if ((WaveRec_idxSens4<AUDIO_OUT_BUFFER_SIZE))
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable18_4
   \   00000094   0xF8A4 0x508C      STRH     R5,[R4, #+140]
   \   00000098   0x8801             LDRH     R1,[R0, #+0]
   \   0000009A   0xF5B1 0x6F80      CMP      R1,#+1024
   \   0000009E   0xDA1F             BGE.N    ??SPI2_IRQHandler_3
    521                            {
    522          	                    switch (buffer_switch)
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable13_6
   \   000000A4   0x7809             LDRB     R1,[R1, #+0]
   \   000000A6   0xB119             CBZ.N    R1,??SPI2_IRQHandler_7
   \   000000A8   0x2902             CMP      R1,#+2
   \   000000AA   0xD011             BEQ.N    ??SPI2_IRQHandler_8
   \   000000AC   0xD308             BCC.N    ??SPI2_IRQHandler_9
   \   000000AE   0xE017             B.N      ??SPI2_IRQHandler_3
    523          	                    {	 
    524          	                        case BUF1_PLAY:
    525          	                                Buffer2.bufMIC4[WaveRec_idxSens4] = vRawSens4;								
   \                     ??SPI2_IRQHandler_7: (+1)
   \   000000B0   0x8803             LDRH     R3,[R0, #+0]
   \   000000B2   0x.... 0x....      LDR.W    R2,??DataTable21
   \   000000B6   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000BA   0xF502 0x42B0      ADD      R2,R2,#+22528
   \   000000BE   0xE00E             B.N      ??SPI2_IRQHandler_10
    526          	                                break;
    527          	                        case BUF2_PLAY:
    528          	                                Buffer3.bufMIC4[WaveRec_idxSens4] = vRawSens4;
   \                     ??SPI2_IRQHandler_9: (+1)
   \   000000C0   0x8803             LDRH     R3,[R0, #+0]
   \   000000C2   0x.... 0x....      LDR.W    R2,??DataTable21
   \   000000C6   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000CA   0xF502 0x4218      ADD      R2,R2,#+38912
   \   000000CE   0xE006             B.N      ??SPI2_IRQHandler_10
    529          	                                break;
    530          	                        case BUF3_PLAY:
    531          	                                Buffer1.bufMIC4[WaveRec_idxSens4] = vRawSens4;									
   \                     ??SPI2_IRQHandler_8: (+1)
   \   000000D0   0x8803             LDRH     R3,[R0, #+0]
   \   000000D2   0x.... 0x....      LDR.W    R2,??DataTable21
   \   000000D6   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000DA   0xF502 0x52C0      ADD      R2,R2,#+6144
   \                     ??SPI2_IRQHandler_10: (+1)
   \   000000DE   0x8015             STRH     R5,[R2, #+0]
    532          	                                break;
    533          	                        default:
    534          	                                break; 
    535          	                    }
    536          
    537          						
    538                            }
    539          //                  else
    540          //                  {
    541          //                      switch (buffer_switch)
    542          //                      {	 
    543          //                          case BUF1_PLAY:
    544          //                                  Buffer1.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;								
    545          //                                  break;
    546          //                          case BUF2_PLAY:
    547          //                                  Buffer2.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;
    548          //                                  break;
    549          //                          case BUF3_PLAY:
    550          //                                  Buffer3.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;									
    551          //                                  break;
    552          //                          default:
    553          //                                  break; 
    554          //                      }
    555          //                    }
    556          				  WaveRec_idxSens4++;
   \                     ??SPI2_IRQHandler_3: (+1)
   \   000000E0   0x8801             LDRH     R1,[R0, #+0]
   \   000000E2   0x1C49             ADDS     R1,R1,#+1
   \   000000E4   0x8001             STRH     R1,[R0, #+0]
    557          
    558          //			if ((WaveRec_idxSens4 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x08;
    559          //			if (flgRacing==0x3F)  SubFrameFinished();				  
    560                              
    561                      }
    562          	 }//else
    563          
    564          	 
    565          #if 0
    566          	  if (iSDO34<4*AUDIO_OUT_BUFFER_SIZE)
    567          	 {
    568          		 TestSDO34[iSDO34++]=app;
    569          	 }
    570          	 else
    571          	 {
    572          		 iSDO34=0;
    573          	 }
    574          	 if ((WaveRec_idxSens3 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens4 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    575          //             &&(I2S2_stLR!=I2S2_stLROld))
    576          	 {
    577          /*-------------------------------------------------------------------------------------------------------------
    578          			  
    579          	Sequence  Record Data                     Processing Data                 Player Data
    580          			  
    581          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    582          			  
    583          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    584          			  
    585          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    586           ---------------------------------------------------------------------------------------------------------------*/
    587          		/* Recording Audio Data */			             
    588          		 switch (buffer_switch)
    589          		 {
    590          			  case BUF1_PLAY:
    591                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    592                                        Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    593                                    else
    594                                        Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			  
    595          			  break;                     
    596          			  case BUF2_PLAY:
    597                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    598                                        Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    599                                    else
    600                                        Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			   
    601          				  break;
    602          			  case BUF3_PLAY:
    603                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    604                                       Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    605          		          else
    606                                       Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    607          		          break;
    608          			  default:
    609          			     break; 
    610          		 }
    611          		
    612          	 }          
    613          #endif		  
    614          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   000000E6   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   000000EA   0xF884 0x0083      STRB     R0,[R4, #+131]
    615             }
    616          
    617          }
   \                     ??SPI2_IRQHandler_0: (+1)
   \   000000EE   0xB001             ADD      SP,SP,#+4
   \   000000F0   0xBD30             POP      {R4,R5,PC}       ;; return
    618          
    619          

   \                                 In section .text, align 2, keep-with-next
    620          void SPI4_IRQHandler(void)
    621          {
    622            static uint8_t Main_stLR, Main_stLROld;
    623          
    624          
    625            /* SPI in mode Receiver ----------------------------------------------------*/
    626            if(
    627          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    628          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    629               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable18_5
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xD400             BMI.N    ??SPI4_IRQHandler_0
   \   0000000C   0x4770             BX       LR
    630            {
    631          
    632                  uint16_t test;
    633                  test =  SPI_I2S_ReceiveData(SPI4);
   \                     ??SPI4_IRQHandler_0: (+1)
   \   0000000E   0xB530             PUSH     {R4,R5,LR}
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x4001340c
   \   00000014   0xB081             SUB      SP,SP,#+4
    634          
    635                  /* Left-Right Mic data */
    636                  Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000016   0x2110             MOVS     R1,#+16
   \   00000018   0x6804             LDR      R4,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_ReadPin
    637          
    638                  /* STM32F746 read data from STA321MP, the data is shifted few bit     */
    639                  /* Data from STA321MP is 32bit formart                                */
    640                  /* SPI is just able to read 16 bit format                             */
    641                  /* Therefore, it needs to correct                                     */
    642                  
    643                  /* ---------------------------+++++++++++++++++++++++++++++++---------*/
    644                  /*                  ______DATAL_____              ______DATAR_____    */
    645                  /*                  _____vRawSens5__              ______vRawSens6_    */       
    646          	if (Main_stLR==GPIO_PIN_SET)
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable13_4
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xB2A4             UXTH     R4,R4
   \   0000002A   0xF891 0x2085      LDRB     R2,[R1, #+133]
   \   0000002E   0xD139             BNE.N    ??SPI4_IRQHandler_1
    647          	{
    648                      if (Main_stLROld==GPIO_PIN_SET)
   \   00000030   0x2A01             CMP      R2,#+1
   \   00000032   0xD038             BEQ.N    ??SPI4_IRQHandler_2
    649                      {
    650                         SPI4_stNipple = (test);    
    651                      }
    652                      else
    653                      {
    654                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
   \   00000034   0xF891 0x2081      LDRB     R2,[R1, #+129]
   \   00000038   0xF9B1 0x3094      LDRSH    R3,[R1, #+148]
   \   0000003C   0x40D4             LSRS     R4,R4,R2
   \   0000003E   0xF891 0x2081      LDRB     R2,[R1, #+129]
   \   00000042   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   00000046   0xFA03 0xF202      LSL      R2,R3,R2
   \   0000004A   0xEA42 0x0304      ORR      R3,R2,R4
    655                         if (WaveRec_idxSens5 < AUDIO_OUT_BUFFER_SIZE)
   \   0000004E   0x.... 0x....      LDR.W    R2,??DataTable21_1
   \   00000052   0xF8A1 0x3090      STRH     R3,[R1, #+144]
   \   00000056   0x8814             LDRH     R4,[R2, #+0]
   \   00000058   0xF5B4 0x6F80      CMP      R4,#+1024
   \   0000005C   0xDA5E             BGE.N    ??SPI4_IRQHandler_3
    656                         {
    657                              /*-------------------------------------------------------------------------------------------------------------                                             
    658                              Sequence  Record Data                     Processing Data                 Player Data
    659                                                
    660                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    661                                                
    662                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    663                                                
    664                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    665                               ---------------------------------------------------------------------------------------------------------------*/                     
    666                               /* Recording Audio Data */			             
    667                               switch (buffer_switch)
   \   0000005E   0x.... 0x....      LDR.W    R4,??DataTable13_6
   \   00000062   0x7824             LDRB     R4,[R4, #+0]
   \   00000064   0xB11C             CBZ.N    R4,??SPI4_IRQHandler_4
   \   00000066   0x2C02             CMP      R4,#+2
   \   00000068   0xD013             BEQ.N    ??SPI4_IRQHandler_5
   \   0000006A   0xD309             BCC.N    ??SPI4_IRQHandler_6
   \   0000006C   0xE056             B.N      ??SPI4_IRQHandler_3
    668                               {
    669                                   case BUF1_PLAY:
    670                                       Buffer2.bufMIC5[WaveRec_idxSens5] = vRawSens5;
   \                     ??SPI4_IRQHandler_4: (+1)
   \   0000006E   0x8815             LDRH     R5,[R2, #+0]
   \   00000070   0x.... 0x....      LDR.W    R4,??DataTable21
   \   00000074   0xEB04 0x0445      ADD      R4,R4,R5, LSL #+1
   \   00000078   0xF504 0x44C0      ADD      R4,R4,#+24576
   \   0000007C   0x8023             STRH     R3,[R4, #+0]
    671          
    672                                       break;
    673                                   case BUF2_PLAY:
    674                                       Buffer3.bufMIC5[WaveRec_idxSens5] = vRawSens5;
    675          
    676                                       break;
    677                                   case BUF3_PLAY:
    678                                       Buffer1.bufMIC5[WaveRec_idxSens5] = vRawSens5;
    679          
    680                                       break;                          
    681                                   default:
    682                                       break;
    683                               }
    684          
    685          					
    686                         }
    687          //               else
    688          //               {
    689          //                 /* Recording Audio Data */			             
    690          //                 switch (buffer_switch)
    691          //                 {
    692          //                     case BUF1_PLAY:
    693          //                         Buffer1.bufMIC5[WaveRec_idxSens5%AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
    694          //
    695          //                         break;
    696          //                     case BUF2_PLAY:
    697          //                         Buffer2.bufMIC5[WaveRec_idxSens5%AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
    698          //
    699          //                         break;
    700          //                     case BUF3_PLAY:
    701          //                         Buffer3.bufMIC5[WaveRec_idxSens5%AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
    702          //
    703          //                         break;                          
    704          //                     default:
    705          //                         break;
    706          //                 }
    707          //               }
    708          
    709          			    WaveRec_idxSens5++;
   \   0000007E   0xE04D             B.N      ??SPI4_IRQHandler_3
   \                     ??SPI4_IRQHandler_6: (+1)
   \   00000080   0x8815             LDRH     R5,[R2, #+0]
   \   00000082   0x.... 0x....      LDR.W    R4,??DataTable21
   \   00000086   0xEB04 0x0445      ADD      R4,R4,R5, LSL #+1
   \   0000008A   0xF504 0x4420      ADD      R4,R4,#+40960
   \   0000008E   0x8023             STRH     R3,[R4, #+0]
   \   00000090   0xE044             B.N      ??SPI4_IRQHandler_3
   \                     ??SPI4_IRQHandler_5: (+1)
   \   00000092   0x8815             LDRH     R5,[R2, #+0]
   \   00000094   0x.... 0x....      LDR.W    R4,??DataTable21
   \   00000098   0xEB04 0x0445      ADD      R4,R4,R5, LSL #+1
   \   0000009C   0xF504 0x5400      ADD      R4,R4,#+8192
   \   000000A0   0x8023             STRH     R3,[R4, #+0]
   \   000000A2   0xE03B             B.N      ??SPI4_IRQHandler_3
    710          //			if ((WaveRec_idxSens5 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x10;
    711          //
    712          //			if (flgRacing==0x3F)  SubFrameFinished();				
    713          	   }
    714                  }
    715          	else
    716          	{
    717                    if (Main_stLROld==GPIO_PIN_RESET)
   \                     ??SPI4_IRQHandler_1: (+1)
   \   000000A4   0xB92A             CBNZ.N   R2,??SPI4_IRQHandler_7
    718                    {
    719                        SPI4_stNipple = (test);	  
   \                     ??SPI4_IRQHandler_2: (+1)
   \   000000A6   0xF8A1 0x4094      STRH     R4,[R1, #+148]
    720          
    721                    }
    722                    else
    723                    {
    724                         vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
    725                         if (WaveRec_idxSens6 < AUDIO_OUT_BUFFER_SIZE)
    726                         {
    727                              /*-------------------------------------------------------------------------------------------------------------                                             
    728                              Sequence  Record Data                     Processing Data                 Player Data
    729                                                
    730                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    731                                                
    732                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    733                                                
    734                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    735                               ---------------------------------------------------------------------------------------------------------------*/                 
    736                                /* Recording Audio Data */			             
    737                               switch (buffer_switch)
    738                               {
    739                                   case BUF1_PLAY:
    740                                       Buffer2.bufMIC6[WaveRec_idxSens6] = vRawSens6;
    741           
    742                                       break;
    743                                   case BUF2_PLAY:
    744                                       Buffer3.bufMIC6[WaveRec_idxSens6] = vRawSens6;
    745                 
    746                                       break;
    747                                   case BUF3_PLAY:
    748                                       Buffer1.bufMIC6[WaveRec_idxSens6] = vRawSens6;
    749           
    750                                       break;                          
    751                                   default:
    752                                       break;
    753                               }
    754          
    755          
    756          					  
    757                         }
    758          //               else
    759          //               {
    760          //                  /* Recording Audio Data */						 
    761          //                   switch (buffer_switch)
    762          //                   {
    763          //                           case BUF1_PLAY:
    764          //                                   Buffer1.bufMIC6[WaveRec_idxSens6 % AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
    765          //                  
    766          //                                   break;
    767          //                           case BUF2_PLAY:
    768          //                                   Buffer2.bufMIC6[WaveRec_idxSens6 % AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
    769          //                  
    770          //                                   break;
    771          //                           case BUF3_PLAY:
    772          //                                   Buffer3.bufMIC6[WaveRec_idxSens6 % AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
    773          //                  
    774          //                                   break; 						 
    775          //                           default:
    776          //                                   break;
    777          //                   }
    778          //
    779          //                }
    780                         
    781          		       
    782          		        WaveRec_idxSens6++;
    783          //			if ((WaveRec_idxSens6 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x20;
    784          //
    785          //			if (flgRacing==0x3F)  SubFrameFinished();			   
    786                         
    787                    }		
    788          	}
    789          #if 0
    790          	/* The code to store data in to buffer for testing purpose */
    791          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
    792          	{
    793          		TestSDO56[iSDO56++]=test;
    794          	}
    795          	else
    796          	{
    797          		iSDO56=0;
    798          	}
    799          #endif
    800          
    801          	/* Update Old value */	  
    802          	Main_stLROld=Main_stLR;	  
   \   000000AA   0xF881 0x0085      STRB     R0,[R1, #+133]
    803               
    804            }      
    805          }
   \   000000AE   0xB001             ADD      SP,SP,#+4
   \   000000B0   0xBD30             POP      {R4,R5,PC}
   \                     ??SPI4_IRQHandler_7: (+1)
   \   000000B2   0xF891 0x2081      LDRB     R2,[R1, #+129]
   \   000000B6   0xF9B1 0x3094      LDRSH    R3,[R1, #+148]
   \   000000BA   0x40D4             LSRS     R4,R4,R2
   \   000000BC   0xF891 0x2081      LDRB     R2,[R1, #+129]
   \   000000C0   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   000000C4   0xFA03 0xF202      LSL      R2,R3,R2
   \   000000C8   0xEA42 0x0304      ORR      R3,R2,R4
   \   000000CC   0x.... 0x....      LDR.W    R2,??DataTable21_2
   \   000000D0   0xF8A1 0x3092      STRH     R3,[R1, #+146]
   \   000000D4   0x8814             LDRH     R4,[R2, #+0]
   \   000000D6   0xF5B4 0x6F80      CMP      R4,#+1024
   \   000000DA   0xDA1F             BGE.N    ??SPI4_IRQHandler_3
   \   000000DC   0x.... 0x....      LDR.W    R4,??DataTable13_6
   \   000000E0   0x7824             LDRB     R4,[R4, #+0]
   \   000000E2   0xB11C             CBZ.N    R4,??SPI4_IRQHandler_8
   \   000000E4   0x2C02             CMP      R4,#+2
   \   000000E6   0xD011             BEQ.N    ??SPI4_IRQHandler_9
   \   000000E8   0xD308             BCC.N    ??SPI4_IRQHandler_10
   \   000000EA   0xE017             B.N      ??SPI4_IRQHandler_3
   \                     ??SPI4_IRQHandler_8: (+1)
   \   000000EC   0x8815             LDRH     R5,[R2, #+0]
   \   000000EE   0x.... 0x....      LDR.W    R4,??DataTable21
   \   000000F2   0xEB04 0x0445      ADD      R4,R4,R5, LSL #+1
   \   000000F6   0xF504 0x44D0      ADD      R4,R4,#+26624
   \   000000FA   0xE00E             B.N      ??SPI4_IRQHandler_11
   \                     ??SPI4_IRQHandler_10: (+1)
   \   000000FC   0x8815             LDRH     R5,[R2, #+0]
   \   000000FE   0x.... 0x....      LDR.W    R4,??DataTable21
   \   00000102   0xEB04 0x0445      ADD      R4,R4,R5, LSL #+1
   \   00000106   0xF504 0x4428      ADD      R4,R4,#+43008
   \   0000010A   0xE006             B.N      ??SPI4_IRQHandler_11
   \                     ??SPI4_IRQHandler_9: (+1)
   \   0000010C   0x8815             LDRH     R5,[R2, #+0]
   \   0000010E   0x.... 0x....      LDR.W    R4,??DataTable21
   \   00000112   0xEB04 0x0445      ADD      R4,R4,R5, LSL #+1
   \   00000116   0xF504 0x5420      ADD      R4,R4,#+10240
   \                     ??SPI4_IRQHandler_11: (+1)
   \   0000011A   0x8023             STRH     R3,[R4, #+0]
   \                     ??SPI4_IRQHandler_3: (+1)
   \   0000011C   0x8813             LDRH     R3,[R2, #+0]
   \   0000011E   0x1C5B             ADDS     R3,R3,#+1
   \   00000120   0x8013             STRH     R3,[R2, #+0]
   \   00000122   0xF881 0x0085      STRB     R0,[R1, #+133]
   \   00000126   0xB001             ADD      SP,SP,#+4
   \   00000128   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .bss, align 4
   \                     hi2s1:
   \   00000000                      DS8 64
   \                     hi2s2:
   \   00000040                      DS8 64
   \                     WaveRecord_flgInt:
   \   00000080                      DS8 1
   \                     SPI4_stPosShft:
   \   00000081                      DS8 1
   \                     I2S2_stLR:
   \   00000082                      DS8 1
   \                     I2S2_stLROld:
   \   00000083                      DS8 1
   \   00000084                      DS8 1
   \   00000085                      DS8 1
   \                     WaveRec_idxTest:
   \   00000086                      DS8 2
   \                     vRawSens1:
   \   00000088                      DS8 2
   \                     vRawSens2:
   \   0000008A                      DS8 2
   \                     vRawSens4:
   \   0000008C                      DS8 2
   \                     vRawSens3:
   \   0000008E                      DS8 2
   \                     vRawSens5:
   \   00000090                      DS8 2
   \                     vRawSens6:
   \   00000092                      DS8 2
   \                     SPI4_stNipple:
   \   00000094                      DS8 2

   \                                 In section .bss, align 1
   \                     flgRacing:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hdma_spi2_tx:
   \   00000000                      DS8 88

   \                                 In section .bss, align 4
   \                     hdma_spi3_tx:
   \   00000000                      DS8 88

   \                                 In section .bss, align 4
   \                     hdma_spi5_rx:
   \   00000000                      DS8 88
   \                     hdma_spi6_rx:
   \   00000058                      DS8 88

   \                                 In section .bss, align 2
   \                     idxFrmPDMMic8:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
   \                     cntStrt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     SPI1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S2_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO34:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO56:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     I2S1_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \   00000000                      DS8 1
    806          
    807          
    808          
    809          

   \                                 In section .text, align 2, keep-with-next
    810          void SPI5_IRQHandler(void)
    811          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    812            //static uint16_t stNipple;
    813            //static uint8_t stLR, stOder;
    814          
    815            /* USER CODE BEGIN SPI5_IRQn 0 */
    816          
    817            /* USER CODE END SPI5_IRQn 0 */
    818            //HAL_SPI_IRQHandler(&hspi5);
    819            /* USER CODE BEGIN SPI5_IRQn 1 */
    820          
    821            /* USER CODE END SPI5_IRQn 1 */
    822              /* Check if data are available in SPI Data register */
    823            /* SPI in mode Receiver ----------------------------------------------------*/
    824            if(
    825               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    826               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    827               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable21_3
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xD439             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD536             BPL.N    ??SPI5_IRQHandler_0
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD533             BPL.N    ??SPI5_IRQHandler_0
    828            {
    829          
    830          
    831             uint16_t test;
    832             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable21_4  ;; 0x4001500c
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
    833             //SPI5->DR = 3333;
    834          
    835            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000020   0xF8B4 0x1134      LDRH     R1,[R4, #+308]
   \   00000024   0xB282             UXTH     R2,R0
   \   00000026   0x0200             LSLS     R0,R0,#+8
   \   00000028   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   0000002C   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   00000030   0xF8A2 0x0144      STRH     R0,[R2, #+324]
   \   00000034   0x1C48             ADDS     R0,R1,#+1
   \   00000036   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    836            
    837            //volume = 64;
    838            
    839            if (idxMic8>=64)
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0x2840             CMP      R0,#+64
   \   0000003E   0xDB20             BLT.N    ??SPI5_IRQHandler_0
    840            {
    841          	if (buffer_switch != 1)
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable13_6
   \   00000044   0xF8D4 0x0140      LDR      R0,[R4, #+320]
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable21_5
   \   0000004C   0xF104 0x03C8      ADD      R3,R4,#+200
   \   00000050   0x7812             LDRB     R2,[R2, #+0]
   \   00000052   0x780A             LDRB     R2,[R1, #+0]
   \   00000054   0xF8B4 0x1138      LDRH     R1,[R4, #+312]
   \   00000058   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   0000005C   0xF504 0x70A2      ADD      R0,R4,#+324
    842          	{
    843          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
    844          						  (PDMFilter_InitStruct *)&Filter[0]);
    845          	}
    846          	else
    847          	{
    848          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
    849          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \   00000060   0x.... 0x....      BL       PDM_Filter_64_LSB
    850          	}
    851          	idxMic8=0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    852          	cntPos++;
   \   0000006A   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0xF8A4 0x0138      STRH     R0,[R4, #+312]
    853          	if (cntPos>=256) cntPos=0;
   \   00000074   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   00000078   0x28FF             CMP      R0,#+255
   \   0000007A   0xBFC4             ITT      GT 
   \   0000007C   0x2000             MOVGT    R0,#+0
   \   0000007E   0xF8A4 0x0138      STRHGT   R0,[R4, #+312]
    854            }
    855              
    856            }
    857            
    858          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   00000082   0xBD10             POP      {R4,PC}          ;; return
    859          
    860          /* SPI5 init function */
    861          
    862          

   \                                 In section .text, align 2, keep-with-next
    863          void SPI6_IRQHandler(void)
    864          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    865            /* SPI in mode Receiver ----------------------------------------------------*/
    866            if(
    867          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    868               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    869               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable21_3
   \   00000006   0x6E60             LDR      R0,[R4, #+100]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0789             LSLS     R1,R1,#+30
   \   0000000C   0xD536             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD533             BPL.N    ??SPI6_IRQHandler_0
    870            {
    871          
    872          
    873               uint16_t test;
    874               test =  SPI_I2S_ReceiveData(SPI6);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable21_6  ;; 0x4001540c
   \   00000018   0x6800             LDR      R0,[R0, #+0]
    875               //SPI6->DR = 3333;
    876          
    877              pDataMic7[idxMic7++] =	HTONS(test);
   \   0000001A   0xF8B4 0x1136      LDRH     R1,[R4, #+310]
   \   0000001E   0xB282             UXTH     R2,R0
   \   00000020   0x0200             LSLS     R0,R0,#+8
   \   00000022   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000026   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   0000002A   0xF8A2 0x01C4      STRH     R0,[R2, #+452]
   \   0000002E   0x1C48             ADDS     R0,R1,#+1
   \   00000030   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    878          
    879              //volume = 64;
    880          
    881              if (idxMic7>=64)
   \   00000034   0xB280             UXTH     R0,R0
   \   00000036   0x2840             CMP      R0,#+64
   \   00000038   0xDB20             BLT.N    ??SPI6_IRQHandler_0
    882              {
    883                if (buffer_switch != 1)
   \   0000003A   0x.... 0x....      LDR.W    R2,??DataTable13_6
   \   0000003E   0xF8D4 0x013C      LDR      R0,[R4, #+316]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable21_5
   \   00000046   0xF104 0x03FC      ADD      R3,R4,#+252
   \   0000004A   0x7812             LDRB     R2,[R2, #+0]
   \   0000004C   0x780A             LDRB     R2,[R1, #+0]
   \   0000004E   0xF8B4 0x113A      LDRH     R1,[R4, #+314]
   \   00000052   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   00000056   0xF504 0x70E2      ADD      R0,R4,#+452
    884                {
    885                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
    886                                                          (PDMFilter_InitStruct *)&Filter[1]);
    887                }
    888                else
    889                {
    890                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
    891                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \   0000005A   0x.... 0x....      BL       PDM_Filter_64_LSB
    892                }
    893                idxMic7=0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    894                cntPos7++;
   \   00000064   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0xF8A4 0x013A      STRH     R0,[R4, #+314]
    895                if (cntPos7>=256) cntPos7=0;
   \   0000006E   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000072   0x28FF             CMP      R0,#+255
   \   00000074   0xBFC4             ITT      GT 
   \   00000076   0x2000             MOVGT    R0,#+0
   \   00000078   0xF8A4 0x013A      STRHGT   R0,[R4, #+314]
    896              }
    897              
    898            }
    899          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   0000007C   0xBD10             POP      {R4,PC}          ;; return
    900          
    901          
    902          

   \                                 In section .text, align 2, keep-with-next
    903          void MIC1TO8_Init(void)
    904          {
   \                     MIC1TO8_Init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    905          
    906          
    907            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    908            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    909            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    910            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    911            //HAL_Delay(2);
    912          
    913          
    914          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    915          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    916            I2S1_Init(); /* I2S1   --> SDO12 */
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable13_4
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable21_7  ;; 0x40013000
   \   0000000A   0x6020             STR      R0,[R4, #+0]
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0x60A0             STR      R0,[R4, #+8]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x60E0             STR      R0,[R4, #+12]
   \   00000014   0xF44F 0x7580      MOV      R5,#+256
   \   00000018   0x6120             STR      R0,[R4, #+16]
   \   0000001A   0xF44F 0x567A      MOV      R6,#+16000
   \   0000001E   0x61A0             STR      R0,[R4, #+24]
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0x61E0             STR      R0,[R4, #+28]
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x6065             STR      R5,[R4, #+4]
   \   00000028   0x6166             STR      R6,[R4, #+20]
   \   0000002A   0x.... 0x....      BL       HAL_I2S_Init
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x6841             LDR      R1,[R0, #+4]
   \   00000032   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000036   0x6041             STR      R1,[R0, #+4]
   \   00000038   0x69C1             LDR      R1,[R0, #+28]
   \   0000003A   0xF441 0x6180      ORR      R1,R1,#0x400
   \   0000003E   0x61C1             STR      R1,[R0, #+28]
    917          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    918          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    919            I2S2_Init(); /* I2S2   --> SDO34 */
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable21_8  ;; 0x40003800
   \   00000044   0x6420             STR      R0,[R4, #+64]
   \   00000046   0x2020             MOVS     R0,#+32
   \   00000048   0x64A0             STR      R0,[R4, #+72]
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x64E0             STR      R0,[R4, #+76]
   \   0000004E   0x6520             STR      R0,[R4, #+80]
   \   00000050   0x65A0             STR      R0,[R4, #+88]
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x65E0             STR      R0,[R4, #+92]
   \   00000056   0xF104 0x0040      ADD      R0,R4,#+64
   \   0000005A   0x6465             STR      R5,[R4, #+68]
   \   0000005C   0x6566             STR      R6,[R4, #+84]
   \   0000005E   0x.... 0x....      BL       HAL_I2S_Init
   \   00000062   0x6C20             LDR      R0,[R4, #+64]
   \   00000064   0x6841             LDR      R1,[R0, #+4]
   \   00000066   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000006A   0x6041             STR      R1,[R0, #+4]
   \   0000006C   0x69C1             LDR      R1,[R0, #+28]
   \   0000006E   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000072   0x61C1             STR      R1,[R0, #+28]
    920          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    921          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    922            SPI4_Init(); /* SPI4   --> SDO56 */
   \   00000074   0x.... 0x....      BL       SPI4_Init
    923            SPI5_Init();
   \   00000078   0x.... 0x....      BL       SPI5_Init
    924            SPI6_Init();  
   \   0000007C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000080   0x....             B.N      SPI6_Init
    925          }
    926          

   \                                 In section .text, align 2, keep-with-next
    927          void StartRecMic7_8 (void)
    928          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    929          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,8*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable21_3
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable21
   \   0000000A   0xB081             SUB      SP,SP,#+4
   \   0000000C   0xF44F 0x5200      MOV      R2,#+8192
   \   00000010   0xF505 0x4140      ADD      R1,R5,#+49152
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    930          #if (0)
    931          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
    932          #else
    933          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,8*AUDIO_OUT_BUFFER_SIZE);
   \   0000001A   0xF44F 0x5200      MOV      R2,#+8192
   \   0000001E   0xF505 0x3180      ADD      R1,R5,#+65536
   \   00000022   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000026   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    934          #endif
    935          	  swtSDO7 = 1;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xF884 0x0130      STRB     R0,[R4, #+304]
    936          	  swtSDO8 = 1;
   \   00000030   0xF884 0x0131      STRB     R0,[R4, #+305]
    937          
    938          }
   \   00000034   0xB001             ADD      SP,SP,#+4
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
    939          
    940          /* I2S1 init function */
    941          /* Read data of MIC12 */
    942          static void I2S1_Init(void)
    943          {
    944          #if 1
    945            hi2s1.Instance = SPI1;
    946            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
    947            hi2s1.Init.Standard = I2S_STANDARD_LSB;
    948            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    949            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    950            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    951            hi2s1.Init.CPOL = I2S_CPOL_LOW;
    952            hi2s1.Init.ClockSource = I2S_CLOCK_SYSCLK;
    953            HAL_I2S_Init(&hi2s1);
    954          
    955            /* Enable TXE and ERR interrupt */
    956           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
    957           
    958           __HAL_I2S_ENABLE(&hi2s1);
    959          #else
    960          	hspi1.Instance = SPI1;
    961          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    962          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    963          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    964          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    965          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    966          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    967          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    968          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    969          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    970          	hspi1.Init.CRCPolynomial = 7;
    971          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    972          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    973          	//hspi4.RxISR = SPI5_CallBack;
    974          	HAL_SPI_Init(&hspi1);
    975          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    976            /* Enable TXE, RXNE and ERR interrupt */
    977           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    978           __HAL_SPI_ENABLE(&hspi1);
    979          #endif
    980          }
    981          
    982          /* I2S2 init function */
    983          /* Read data of MIC34 */
    984          
    985          static void I2S2_Init(void)
    986          {
    987          
    988          #if 1
    989           //HAL_I2S_DeInit(&hi2s2);
    990           hi2s2.Instance = SPI2;
    991           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
    992           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
    993           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
    994           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    995           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    996           hi2s2.Init.CPOL = I2S_CPOL_LOW;
    997           hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
    998          
    999           HAL_I2S_Init(&hi2s2);
   1000           /* Enable TXE and ERR interrupt */
   1001           __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
   1002           __HAL_I2S_ENABLE(&hi2s2);
   1003          
   1004          #else
   1005             hspi2.Instance = SPI2;
   1006             hspi2.Init.Mode = SPI_MODE_SLAVE;
   1007             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
   1008             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
   1009             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
   1010             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
   1011             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   1012             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
   1013             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
   1014             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   1015             hspi2.Init.CRCPolynomial = 7;
   1016             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   1017             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   1018             HAL_SPI_Init(&hspi2);
   1019          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1020           /* Enable TXE, RXNE and ERR interrupt */
   1021          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
   1022          __HAL_SPI_ENABLE(&hspi2);
   1023          #endif
   1024          
   1025          
   1026          }
   1027          
   1028          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
   1029          void SPI4_Init(void)
   1030          {
   \                     SPI4_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1031          
   1032            hspi4.Instance = SPI4;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable18_5
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable21_9  ;; 0x40013400
   \   0000000A   0x6020             STR      R0,[R4, #+0]
   1033            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6060             STR      R0,[R4, #+4]
   1034            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000010   0xF44F 0x6080      MOV      R0,#+1024
   \   00000014   0x60A0             STR      R0,[R4, #+8]
   1035            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000016   0xF44F 0x6070      MOV      R0,#+3840
   \   0000001A   0x60E0             STR      R0,[R4, #+12]
   1036            hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x6120             STR      R0,[R4, #+16]
   1037            hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6160             STR      R0,[R4, #+20]
   1038            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000024   0xF44F 0x7000      MOV      R0,#+512
   \   00000028   0x61A0             STR      R0,[R4, #+24]
   1039            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x6220             STR      R0,[R4, #+32]
   1040            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0x6260             STR      R0,[R4, #+36]
   1041            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000030   0x62A0             STR      R0,[R4, #+40]
   1042            hspi4.Init.CRCPolynomial = 7;
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0x62E0             STR      R0,[R4, #+44]
   1043            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x6320             STR      R0,[R4, #+48]
   1044            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000003A   0x6360             STR      R0,[R4, #+52]
   1045            HAL_SPI_Init(&hspi4);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       HAL_SPI_Init
   1046          
   1047            /* Enable TXE, RXNE and ERR interrupt */
   1048           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x6841             LDR      R1,[R0, #+4]
   \   00000046   0xF041 0x0160      ORR      R1,R1,#0x60
   \   0000004A   0x6041             STR      R1,[R0, #+4]
   1049          
   1050           __HAL_SPI_ENABLE(&hspi4);
   \   0000004C   0x6801             LDR      R1,[R0, #+0]
   \   0000004E   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000052   0x6001             STR      R1,[R0, #+0]
   1051          }
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
   1052          
   1053          

   \                                 In section .text, align 2, keep-with-next
   1054          void Mic7Rec(void)
   1055          {
   1056              SPI5_Init();
   \                     Mic7Rec: (+1)
   \   00000000   0x....             B.N      SPI5_Init
   1057          }
   1058          

   \                                 In section .text, align 2, keep-with-next
   1059          void Mic8Rec(void)
   1060          {
   1061              SPI6_Init();
   \                     Mic8Rec: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21_3
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable21_10  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6781             STR      R1,[R0, #+120]
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x67C1             STR      R1,[R0, #+124]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF8C0 0x1084      STR      R1,[R0, #+132]
   \   0000002E   0xF8C0 0x1088      STR      R1,[R0, #+136]
   \   00000032   0xF8C0 0x108C      STR      R1,[R0, #+140]
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0xF8C0 0x1090      STR      R1,[R0, #+144]
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF8C0 0x1094      STR      R1,[R0, #+148]
   \   00000042   0xF8C0 0x1098      STR      R1,[R0, #+152]
   \   00000046   0x3064             ADDS     R0,R0,#+100
   \   00000048   0x.... 0x....      B.W      HAL_SPI_Init
   1062          }
   1063          
   1064          
   1065          /* SPI5 init function */

   \                                 In section .text, align 4, keep-with-next
   1066          void SPI5_Init(void)
   1067          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   1068          	
   1069              /* Enable CRC module */
   1070              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40023830
   1071          	for (char i=0; i< 2; i++)
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable21_3
   \   0000000C   0x2602             MOVS     R6,#+2
   \   0000000E   0xED2D 0x8B02      VPUSH    {D8}
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xF104 0x05C8      ADD      R5,R4,#+200
   \   00000018   0xF44F 0x577A      MOV      R7,#+16000
   \   0000001C   0xEEB3 0x8A0E      VMOV.F32 S16,#30.0
   \   00000020   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000024   0xEDDF 0x....      VLDR.W   S17,??DataTable12  ;; 0x45fa0000
   \   00000028   0xF8C0 0x1000      STR.W    R1,[R0, #+0]
   1072          	{
   1073          		/* Filter LP & HP Init */
   1074          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \                     ??SPI5_Init_0: (+1)
   \   0000002C   0xEDC5 0x8A01      VSTR     S17,[R5, #+4]
   1075          		Filter[i].HP_HZ = 30;
   1076          		Filter[i].Fs = 16000;    //sop1hc: 16000
   1077          		Filter[i].Out_MicChannels = 1;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xED85 0x8A02      VSTR     S16,[R5, #+8]
   \   00000036   0x802F             STRH     R7,[R5, #+0]
   \   00000038   0x81E8             STRH     R0,[R5, #+14]
   1078          		Filter[i].In_MicChannels = 1;
   \   0000003A   0x81A8             STRH     R0,[R5, #+12]
   1079          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   0000003C   0x4628             MOV      R0,R5
   \   0000003E   0x.... 0x....      BL       PDM_Filter_Init
   1080          	}
   \   00000042   0x3534             ADDS     R5,R5,#+52
   \   00000044   0x1E76             SUBS     R6,R6,#+1
   \   00000046   0xD1F1             BNE.N    ??SPI5_Init_0
   1081          
   1082          
   1083            hspi5.Instance = SPI5;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable21_11  ;; 0x40015000
   \   0000004C   0x6020             STR      R0,[R4, #+0]
   1084            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x6060             STR      R0,[R4, #+4]
   1085            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000052   0xF44F 0x6080      MOV      R0,#+1024
   \   00000056   0x60A0             STR      R0,[R4, #+8]
   1086            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000058   0xF44F 0x6070      MOV      R0,#+3840
   \   0000005C   0x60E0             STR      R0,[R4, #+12]
   1087            hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0x6120             STR      R0,[R4, #+16]
   1088            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x6160             STR      R0,[R4, #+20]
   1089            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000066   0xF44F 0x7000      MOV      R0,#+512
   \   0000006A   0x61A0             STR      R0,[R4, #+24]
   1090            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x6220             STR      R0,[R4, #+32]
   1091            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   00000070   0x6260             STR      R0,[R4, #+36]
   1092            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000072   0x62A0             STR      R0,[R4, #+40]
   1093            hspi5.Init.CRCPolynomial = 7;
   \   00000074   0x2007             MOVS     R0,#+7
   \   00000076   0x62E0             STR      R0,[R4, #+44]
   1094            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x6320             STR      R0,[R4, #+48]
   1095            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000007C   0x6360             STR      R0,[R4, #+52]
   1096            //hspi5.RxISR = SPI5_CallBack;
   1097            HAL_SPI_Init(&hspi5);
   \   0000007E   0x4620             MOV      R0,R4
   \   00000080   0xECBD 0x8B02      VPOP     {D8}
   \   00000084   0xB001             ADD      SP,SP,#+4
   \   00000086   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   0000008A   0x.... 0x....      B.W      HAL_SPI_Init
   1098          
   1099          
   1100            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1101            /* Enable TXE, RXNE and ERR interrupt */
   1102           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1103          
   1104           //__HAL_SPI_ENABLE(&hspi5);
   1105          
   1106          }
   1107          

   \                                 In section .text, align 2, keep-with-next
   1108          void SPI6_Init(void)
   1109          {
   1110          	
   1111            hspi6.Instance = SPI6;
   \                     SPI6_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21_3
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable21_10  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   1112            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   1113            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   1114            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   1115            hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   1116            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6781             STR      R1,[R0, #+120]
   1117            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x67C1             STR      R1,[R0, #+124]
   1118            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF8C0 0x1084      STR      R1,[R0, #+132]
   1119            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0xF8C0 0x1088      STR      R1,[R0, #+136]
   1120            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000032   0xF8C0 0x108C      STR      R1,[R0, #+140]
   1121            hspi6.Init.CRCPolynomial = 7;
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0xF8C0 0x1090      STR      R1,[R0, #+144]
   1122            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF8C0 0x1094      STR      R1,[R0, #+148]
   1123            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000042   0xF8C0 0x1098      STR      R1,[R0, #+152]
   1124            //hspi6.RxISR = SPI6_CallBack;
   1125            HAL_SPI_Init(&hspi6);
   \   00000046   0x3064             ADDS     R0,R0,#+100
   \   00000048   0x.... 0x....      B.W      HAL_SPI_Init
   1126          
   1127          
   1128            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1129            /* Enable TXE, RXNE and ERR interrupt */
   1130           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
   1131          
   1132           //__HAL_SPI_ENABLE(&hspi6);
   1133          
   1134          }
   1135          
   1136          
   1137          
   1138          

   \                                 In section .text, align 2, keep-with-next
   1139          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
   1140          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
   1141          
   1142            GPIO_InitTypeDef GPIO_InitStruct;
   1143            if (hspi->Instance==SPI1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable21_7  ;; 0x40013000
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD138             BNE.N    ??HAL_SPI_MspInit_0
   1144            {
   1145          	  /* USER CODE BEGIN SPI1_MspInit 0 */
   1146          	  
   1147          	  /* USER CODE END SPI1_MspInit 0 */
   1148          	  /* Peripheral clock enable */
   1149          	  __SPI1_CLK_ENABLE();
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable13  ;; 0x40023830
   \   00000016   0x9000             STR      R0,[SP, #+0]
   1150          	  __GPIOA_CLK_ENABLE();
   1151          	  __GPIOC_CLK_ENABLE();
   1152          	  
   1153          	  /**I2S1 GPIO Configuration	
   1154          		PA4 	------> I2S1_WS --> LRCKO
   1155          		PA5 	------> I2S1_CK --> BICKO
   1156          		PA7 	------> I2S1_SD --> SDO12
   1157          		PC4 	------> I2S1_MCK
   1158          		*/
   1159          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
   1160          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1161          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1162          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1163          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1164          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000018   0xA901             ADD      R1,SP,#+4
   \   0000001A   0x6968             LDR      R0,[R5, #+20]
   \   0000001C   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   00000020   0x6168             STR      R0,[R5, #+20]
   \   00000022   0x6968             LDR      R0,[R5, #+20]
   \   00000024   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x9800             LDR      R0,[SP, #+0]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000036   0x6028             STR      R0,[R5, #+0]
   \   00000038   0x6828             LDR      R0,[R5, #+0]
   \   0000003A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0x6828             LDR      R0,[R5, #+0]
   \   00000048   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000004C   0x6028             STR      R0,[R5, #+0]
   \   0000004E   0x6828             LDR      R0,[R5, #+0]
   \   00000050   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x20F0             MOVS     R0,#+240
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x9002             STR      R0,[SP, #+8]
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x9003             STR      R0,[SP, #+12]
   \   00000064   0x2003             MOVS     R0,#+3
   \   00000066   0x9004             STR      R0,[SP, #+16]
   \   00000068   0x2005             MOVS     R0,#+5
   \   0000006A   0x9005             STR      R0,[SP, #+20]
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40020000
   \   00000070   0x.... 0x....      BL       HAL_GPIO_Init
   1165          	  
   1166          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
   1167          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1168          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
   1169          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1170          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1171          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1172          		
   1173          	  /* Peripheral interrupt init*/
   1174          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x2023             MOVS     R0,#+35
   \   0000007A   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1175          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   0000007E   0x2023             MOVS     R0,#+35
   \   00000080   0xE121             B.N      ??HAL_SPI_MspInit_1
   1176          	  /* USER CODE BEGIN SPI1_MspInit 1 */
   1177          	  
   1178          	  /* USER CODE END SPI1_MspInit 1 */
   1179          
   1180            }
   1181            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable21_8  ;; 0x40003800
   \   00000086   0x4288             CMP      R0,R1
   \   00000088   0xD152             BNE.N    ??HAL_SPI_MspInit_2
   1182            {
   1183          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1184          	  
   1185          	  /* USER CODE END SPI2_MspInit 0 */
   1186          		/* Peripheral clock enable */
   1187          		__SPI2_CLK_ENABLE();
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x.... 0x....      LDR.W    R5,??DataTable13  ;; 0x40023830
   \   00000090   0x9000             STR      R0,[SP, #+0]
   1188          		__GPIOI_CLK_ENABLE();
   1189          		__GPIOB_CLK_ENABLE();
   1190          		__GPIOC_CLK_ENABLE();
   1191          	  
   1192          		/**I2S2 GPIO Configuration	   
   1193          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1194          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1195          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1196          	  
   1197          	  
   1198          		*/
   1199          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   1200          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1201          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1202          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1203          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1204          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000092   0xA901             ADD      R1,SP,#+4
   \   00000094   0x6928             LDR      R0,[R5, #+16]
   \   00000096   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   0000009A   0x6128             STR      R0,[R5, #+16]
   \   0000009C   0x6928             LDR      R0,[R5, #+16]
   \   0000009E   0xF400 0x4080      AND      R0,R0,#0x4000
   \   000000A2   0x9000             STR      R0,[SP, #+0]
   \   000000A4   0x9800             LDR      R0,[SP, #+0]
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x9000             STR      R0,[SP, #+0]
   \   000000AA   0x6828             LDR      R0,[R5, #+0]
   \   000000AC   0xF440 0x7080      ORR      R0,R0,#0x100
   \   000000B0   0x6028             STR      R0,[R5, #+0]
   \   000000B2   0x6828             LDR      R0,[R5, #+0]
   \   000000B4   0xF400 0x7080      AND      R0,R0,#0x100
   \   000000B8   0x9000             STR      R0,[SP, #+0]
   \   000000BA   0x9800             LDR      R0,[SP, #+0]
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0x6828             LDR      R0,[R5, #+0]
   \   000000C2   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000C6   0x6028             STR      R0,[R5, #+0]
   \   000000C8   0x6828             LDR      R0,[R5, #+0]
   \   000000CA   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \   000000D0   0x9800             LDR      R0,[SP, #+0]
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x9000             STR      R0,[SP, #+0]
   \   000000D6   0x6828             LDR      R0,[R5, #+0]
   \   000000D8   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000DC   0x6028             STR      R0,[R5, #+0]
   \   000000DE   0x6828             LDR      R0,[R5, #+0]
   \   000000E0   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000E4   0x9000             STR      R0,[SP, #+0]
   \   000000E6   0x9800             LDR      R0,[SP, #+0]
   \   000000E8   0x2002             MOVS     R0,#+2
   \   000000EA   0x9001             STR      R0,[SP, #+4]
   \   000000EC   0x9002             STR      R0,[SP, #+8]
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x9003             STR      R0,[SP, #+12]
   \   000000F2   0x2003             MOVS     R0,#+3
   \   000000F4   0x9004             STR      R0,[SP, #+16]
   \   000000F6   0x2005             MOVS     R0,#+5
   \   000000F8   0x9005             STR      R0,[SP, #+20]
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable21_12  ;; 0x40020800
   \   000000FE   0x.... 0x....      BL       HAL_GPIO_Init
   1205          	  
   1206          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   00000102   0xF44F 0x5040      MOV      R0,#+12288
   1207          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1208          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1209          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1210          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1211          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000106   0xA901             ADD      R1,SP,#+4
   \   00000108   0x9001             STR      R0,[SP, #+4]
   \   0000010A   0x2002             MOVS     R0,#+2
   \   0000010C   0x9002             STR      R0,[SP, #+8]
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x9003             STR      R0,[SP, #+12]
   \   00000112   0x2003             MOVS     R0,#+3
   \   00000114   0x9004             STR      R0,[SP, #+16]
   \   00000116   0x2005             MOVS     R0,#+5
   \   00000118   0x9005             STR      R0,[SP, #+20]
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable21_13  ;; 0x40020400
   \   0000011E   0x.... 0x....      BL       HAL_GPIO_Init
   1212          	  
   1213          	  
   1214          		/* Peripheral interrupt init*/
   1215          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   00000122   0x2200             MOVS     R2,#+0
   \   00000124   0x2101             MOVS     R1,#+1
   \   00000126   0x2024             MOVS     R0,#+36
   \   00000128   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1216          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   0000012C   0x2024             MOVS     R0,#+36
   \   0000012E   0xE0CA             B.N      ??HAL_SPI_MspInit_1
   1217          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1218          	  
   1219          	  /* USER CODE END SPI2_MspInit 1 */
   1220          
   1221          
   1222            }
   1223            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   00000130   0x.... 0x....      LDR.W    R1,??DataTable21_14  ;; 0x40003c00
   \   00000134   0x4288             CMP      R0,R1
   \   00000136   0xF040 0x8096      BNE.W    ??HAL_SPI_MspInit_3
   1224            {
   1225          	  
   1226              /**I2S3 GPIO Configuration    
   1227                 PB2     ------> I2S3_SD
   1228                 PA15     ------> I2S3_WS (LRCK)
   1229                 PB3     ------> I2S3_CK 
   1230          	   PC7    ------> MCLK
   1231              */
   1232           
   1233            /* USER CODE BEGIN SPI3_MspInit 1 */
   1234            __SPI3_CLK_ENABLE();
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   0000013E   0x9000             STR      R0,[SP, #+0]
   1235            __GPIOA_CLK_ENABLE();
   1236            __GPIOB_CLK_ENABLE();
   1237          
   1238            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   1239            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1240            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1241            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1242            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1243            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000140   0xA901             ADD      R1,SP,#+4
   \   00000142   0x6928             LDR      R0,[R5, #+16]
   \   00000144   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   00000148   0x6128             STR      R0,[R5, #+16]
   \   0000014A   0x6928             LDR      R0,[R5, #+16]
   \   0000014C   0xF400 0x4000      AND      R0,R0,#0x8000
   \   00000150   0x9000             STR      R0,[SP, #+0]
   \   00000152   0x9800             LDR      R0,[SP, #+0]
   \   00000154   0x2000             MOVS     R0,#+0
   \   00000156   0x9000             STR      R0,[SP, #+0]
   \   00000158   0x6828             LDR      R0,[R5, #+0]
   \   0000015A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000015E   0x6028             STR      R0,[R5, #+0]
   \   00000160   0x6828             LDR      R0,[R5, #+0]
   \   00000162   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000166   0x9000             STR      R0,[SP, #+0]
   \   00000168   0x9800             LDR      R0,[SP, #+0]
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0x9000             STR      R0,[SP, #+0]
   \   0000016E   0x6828             LDR      R0,[R5, #+0]
   \   00000170   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000174   0x6028             STR      R0,[R5, #+0]
   \   00000176   0x6828             LDR      R0,[R5, #+0]
   \   00000178   0xF000 0x0002      AND      R0,R0,#0x2
   \   0000017C   0x9000             STR      R0,[SP, #+0]
   \   0000017E   0x9800             LDR      R0,[SP, #+0]
   \   00000180   0x200C             MOVS     R0,#+12
   \   00000182   0x9001             STR      R0,[SP, #+4]
   \   00000184   0x2002             MOVS     R0,#+2
   \   00000186   0x9002             STR      R0,[SP, #+8]
   \   00000188   0x2003             MOVS     R0,#+3
   \   0000018A   0x9004             STR      R0,[SP, #+16]
   \   0000018C   0x2000             MOVS     R0,#+0
   \   0000018E   0x9003             STR      R0,[SP, #+12]
   \   00000190   0x2006             MOVS     R0,#+6
   \   00000192   0x9005             STR      R0,[SP, #+20]
   \   00000194   0x.... 0x....      LDR.W    R0,??DataTable21_13  ;; 0x40020400
   \   00000198   0x.... 0x....      BL       HAL_GPIO_Init
   1244          
   1245          
   1246            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   0000019C   0xF44F 0x4000      MOV      R0,#+32768
   1247            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1248            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1249            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   000001A0   0xA901             ADD      R1,SP,#+4
   \   000001A2   0x9001             STR      R0,[SP, #+4]
   \   000001A4   0x2002             MOVS     R0,#+2
   \   000001A6   0x9002             STR      R0,[SP, #+8]
   \   000001A8   0x2006             MOVS     R0,#+6
   \   000001AA   0x9005             STR      R0,[SP, #+20]
   \   000001AC   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40020000
   \   000001AE   0x.... 0x....      BL       HAL_GPIO_Init
   1250          
   1251          #ifdef CODEC_MCLK_ENABLED
   1252            __GPIOC_CLK_ENABLE();
   \   000001B2   0x2000             MOVS     R0,#+0
   1253            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   1254            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1255            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1256            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1257            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1258            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   000001B4   0xA901             ADD      R1,SP,#+4
   \   000001B6   0x9000             STR      R0,[SP, #+0]
   \   000001B8   0x6828             LDR      R0,[R5, #+0]
   \   000001BA   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000001BE   0x6028             STR      R0,[R5, #+0]
   \   000001C0   0x6828             LDR      R0,[R5, #+0]
   \   000001C2   0xF000 0x0004      AND      R0,R0,#0x4
   \   000001C6   0x9000             STR      R0,[SP, #+0]
   \   000001C8   0x9800             LDR      R0,[SP, #+0]
   \   000001CA   0x2080             MOVS     R0,#+128
   \   000001CC   0x9001             STR      R0,[SP, #+4]
   \   000001CE   0x2002             MOVS     R0,#+2
   \   000001D0   0x9002             STR      R0,[SP, #+8]
   \   000001D2   0x2003             MOVS     R0,#+3
   \   000001D4   0x9004             STR      R0,[SP, #+16]
   \   000001D6   0x2000             MOVS     R0,#+0
   \   000001D8   0x9003             STR      R0,[SP, #+12]
   \   000001DA   0x2006             MOVS     R0,#+6
   \   000001DC   0x9005             STR      R0,[SP, #+20]
   \   000001DE   0x.... 0x....      LDR.W    R0,??DataTable21_12  ;; 0x40020800
   \   000001E2   0x.... 0x....      BL       HAL_GPIO_Init
   1259          
   1260          #endif /* CODEC_MCLK_ENABLED */ 
   1261          
   1262          #ifdef I2S_INTERRUPT   
   1263               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1264               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1265               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1266          
   1267               /* Enable the I2S DMA request */
   1268               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1269               //__HAL_I2S_ENABLE(&hi2s3);
   1270            	    /* Peripheral interrupt init*/
   1271          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1272          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1273          #endif
   1274          
   1275                /* Enable the DMA clock */ 
   1276          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   000001E6   0x2000             MOVS     R0,#+0
   \   000001E8   0x9000             STR      R0,[SP, #+0]
   \   000001EA   0x6828             LDR      R0,[R5, #+0]
   \   000001EC   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000001F0   0x6028             STR      R0,[R5, #+0]
   \   000001F2   0x6828             LDR      R0,[R5, #+0]
   1277          
   1278                /* Configure the DMA Stream */
   1279                //HAL_DMA_DeInit(&DmaHandle);
   1280          
   1281                /* Set the parameters to be configured */ 
   1282          	  DmaHandle.Instance = DMA1_Stream7;
   \   000001F4   0x.... 0x....      LDR.W    R5,??DataTable21_15
   \   000001F8   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000001FC   0x9000             STR      R0,[SP, #+0]
   \   000001FE   0x9800             LDR      R0,[SP, #+0]
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable21_16  ;; 0x400260b8
   \   00000204   0x6028             STR      R0,[R5, #+0]
   1283                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   00000206   0x2000             MOVS     R0,#+0
   \   00000208   0x6068             STR      R0,[R5, #+4]
   1284          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   0000020A   0x2040             MOVS     R0,#+64
   \   0000020C   0x60A8             STR      R0,[R5, #+8]
   1285          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   0000020E   0x2000             MOVS     R0,#+0
   \   00000210   0x60E8             STR      R0,[R5, #+12]
   1286          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   00000212   0xF44F 0x6080      MOV      R0,#+1024
   \   00000216   0x6128             STR      R0,[R5, #+16]
   1287          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   00000218   0xF44F 0x6000      MOV      R0,#+2048
   \   0000021C   0x6168             STR      R0,[R5, #+20]
   1288                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   0000021E   0xF44F 0x5000      MOV      R0,#+8192
   \   00000222   0x61A8             STR      R0,[R5, #+24]
   1289          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   00000224   0x2000             MOVS     R0,#+0
   \   00000226   0x61E8             STR      R0,[R5, #+28]
   1290                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   00000228   0xF44F 0x3000      MOV      R0,#+131072
   \   0000022C   0x6228             STR      R0,[R5, #+32]
   1291          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   0000022E   0x2004             MOVS     R0,#+4
   \   00000230   0x6268             STR      R0,[R5, #+36]
   1292                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   00000232   0x2003             MOVS     R0,#+3
   \   00000234   0x62A8             STR      R0,[R5, #+40]
   1293                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   00000236   0x2000             MOVS     R0,#+0
   \   00000238   0x62E8             STR      R0,[R5, #+44]
   1294                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   0000023A   0x6328             STR      R0,[R5, #+48]
   1295                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1296                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1297                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1298                //DmaHandle.XferCpltCallback = &TC_Callback;
   1299           
   1300          
   1301                /* Associate the initialized DMA handle to the the SPI handle */
   1302                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   1303                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1304          
   1305          	   /* Deinitialize the Stream for new transfer */
   1306                 HAL_DMA_DeInit(&DmaHandle);
   \   0000023C   0x4628             MOV      R0,R5
   \   0000023E   0x6565             STR      R5,[R4, #+84]
   \   00000240   0x63AC             STR      R4,[R5, #+56]
   \   00000242   0x.... 0x....      BL       HAL_DMA_DeInit
   1307                 /* Configure the DMA Stream */
   1308          	   HAL_DMA_Init(&DmaHandle);
   \   00000246   0x4628             MOV      R0,R5
   \   00000248   0x.... 0x....      BL       HAL_DMA_Init
   1309          
   1310                /* Set Interrupt Group Priority */
   1311                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   0000024C   0x2200             MOVS     R2,#+0
   \   0000024E   0x2100             MOVS     R1,#+0
   \   00000250   0x202F             MOVS     R0,#+47
   \   00000252   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1312                /* Enable the DMA STREAM global Interrupt */
   1313                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   00000256   0x202F             MOVS     R0,#+47
   \   00000258   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1314          
   1315          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   0000025C   0x6828             LDR      R0,[R5, #+0]
   \   0000025E   0x6801             LDR      R1,[R0, #+0]
   \   00000260   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000264   0xE112             B.N      ??HAL_SPI_MspInit_4
   1316          	    
   1317            }
   1318            else if(hspi->Instance==SPI4)
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   00000266   0x.... 0x....      LDR.W    R1,??DataTable21_9  ;; 0x40013400
   \   0000026A   0x4288             CMP      R0,R1
   \   0000026C   0xD12F             BNE.N    ??HAL_SPI_MspInit_5
   1319            {
   1320            /* USER CODE BEGIN SPI4_MspInit 0 */
   1321          
   1322            /* USER CODE END SPI4_MspInit 0 */
   1323              /* Peripheral clock enable */
   1324              __SPI4_CLK_ENABLE();
   \   0000026E   0x2000             MOVS     R0,#+0
   \   00000270   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   00000272   0x9000             STR      R0,[SP, #+0]
   1325              __HAL_RCC_GPIOE_CLK_ENABLE();
   1326            
   1327            
   1328              /**SPI4 GPIO Configuration    
   1329              PE2     ------> SPI4_SCK
   1330              PE4     ------> SPI4_NSS
   1331              PE5     ------> SPI4_MISO
   1332              PE6     ------> SPI4_MOSI 
   1333              */
   1334              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   1335              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1336              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1337              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1338              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   1339              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   \   00000274   0xA901             ADD      R1,SP,#+4
   \   00000276   0x6968             LDR      R0,[R5, #+20]
   \   00000278   0xF440 0x5000      ORR      R0,R0,#0x2000
   \   0000027C   0x6168             STR      R0,[R5, #+20]
   \   0000027E   0x6968             LDR      R0,[R5, #+20]
   \   00000280   0xF400 0x5000      AND      R0,R0,#0x2000
   \   00000284   0x9000             STR      R0,[SP, #+0]
   \   00000286   0x9800             LDR      R0,[SP, #+0]
   \   00000288   0x2000             MOVS     R0,#+0
   \   0000028A   0x9000             STR      R0,[SP, #+0]
   \   0000028C   0x6828             LDR      R0,[R5, #+0]
   \   0000028E   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000292   0x6028             STR      R0,[R5, #+0]
   \   00000294   0x6828             LDR      R0,[R5, #+0]
   \   00000296   0xF000 0x0010      AND      R0,R0,#0x10
   \   0000029A   0x9000             STR      R0,[SP, #+0]
   \   0000029C   0x9800             LDR      R0,[SP, #+0]
   \   0000029E   0x2074             MOVS     R0,#+116
   \   000002A0   0x9001             STR      R0,[SP, #+4]
   \   000002A2   0x2002             MOVS     R0,#+2
   \   000002A4   0x9002             STR      R0,[SP, #+8]
   \   000002A6   0x2000             MOVS     R0,#+0
   \   000002A8   0x9003             STR      R0,[SP, #+12]
   \   000002AA   0x2003             MOVS     R0,#+3
   \   000002AC   0x9004             STR      R0,[SP, #+16]
   \   000002AE   0x2005             MOVS     R0,#+5
   \   000002B0   0x9005             STR      R0,[SP, #+20]
   \   000002B2   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40021000
   \   000002B6   0x.... 0x....      BL       HAL_GPIO_Init
   1340          
   1341          	/* Peripheral interrupt init*/
   1342              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   \   000002BA   0x2200             MOVS     R2,#+0
   \   000002BC   0x2102             MOVS     R1,#+2
   \   000002BE   0x2054             MOVS     R0,#+84
   \   000002C0   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1343              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   \   000002C4   0x2054             MOVS     R0,#+84
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   000002C6   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1344          
   1345            /* USER CODE BEGIN SPI4_MspInit 1 */
   1346          
   1347            /* USER CODE END SPI4_MspInit 1 */
   1348            }
   1349            else if(hspi->Instance==SPI5)
   1350            {
   1351            /* USER CODE BEGIN SPI5_MspInit 0 */
   1352          
   1353            /* USER CODE END SPI5_MspInit 0 */
   1354              /* Peripheral clock enable */
   1355              __HAL_RCC_SPI5_CLK_ENABLE();
   1356              __HAL_RCC_GPIOF_CLK_ENABLE();
   1357            
   1358              /**SPI5 GPIO Configuration    
   1359              PF7     ------> SPI5_SCK  --> PF7
   1360              PF11     ------> SPI5_MOSI --> PF9
   1361                               SPI5_MISO --> PF8
   1362                                    NSS   -->  PF6
   1363              */
   1364              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   1365              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   1366              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1367              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1368              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   1369              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   1370          
   1371          #if 0
   1372            /* Peripheral interrupt init*/
   1373              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1374              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1375          #else
   1376          	/* Peripheral DMA init*/
   1377              __HAL_RCC_DMA2_CLK_ENABLE();
   1378          	hdma_spi5_rx.Instance = DMA2_Stream5;
   1379          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   1380          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1381          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1382          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   1383          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1384          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   1385          	hdma_spi5_rx.Init.Mode = DMA_CIRCULAR;
   1386          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1387          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1388          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1389          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_INC4;
   1390          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_INC4;
   1391          	HAL_DMA_Init(&hdma_spi5_rx);
   1392          
   1393              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   1394          
   1395          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1396          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   1397          	  __HAL_DMA_ENABLE_IT(&hdma_spi5_rx, DMA_IT_TC);
   1398          	  __HAL_DMA_ENABLE_IT(&hdma_spi5_rx, DMA_IT_HT);
   1399          
   1400          #endif
   1401            /* USER CODE END SPI5_MspInit 1 */
   1402            }
   1403            else if(hspi->Instance==SPI6)
   1404            {
   1405            /* USER CODE BEGIN SPI6_MspInit 0 */
   1406          
   1407            /* USER CODE END SPI6_MspInit 0 */
   1408              /* Peripheral clock enable */
   1409              __SPI6_CLK_ENABLE();
   1410              __HAL_RCC_GPIOG_CLK_ENABLE();
   1411            
   1412              /**SPI6 GPIO Configuration    
   1413              PG13     ------> SPI6_SCK
   1414              PG14     ------> SPI6_MOSI 
   1415              */
   1416              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   1417              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1418              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1419              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1420              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   1421              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   1422          
   1423          #if 0
   1424          	  /* Peripheral interrupt init*/
   1425              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1426              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1427          #else
   1428          	/* Peripheral DMA init*/
   1429          	__HAL_RCC_DMA2_CLK_ENABLE();
   1430          	hdma_spi6_rx.Instance = DMA2_Stream6;
   1431          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   1432          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1433          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1434          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   1435          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1436          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1437          	hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
   1438          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1439          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1440          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1441          	hdma_spi6_rx.Init.MemBurst = DMA_PBURST_INC4;
   1442          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_INC4;
   1443          	HAL_DMA_Init(&hdma_spi6_rx);
   1444          
   1445          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   1446          
   1447          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1448          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   1449          
   1450              __HAL_DMA_ENABLE_IT(&hdma_spi6_rx, DMA_IT_TC);
   1451          	__HAL_DMA_ENABLE_IT(&hdma_spi6_rx, DMA_IT_HT);
   1452          
   1453          #endif
   1454            }
   1455          
   1456          }
   \   000002CA   0xB007             ADD      SP,SP,#+28
   \   000002CC   0xBD30             POP      {R4,R5,PC}
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   000002CE   0x.... 0x....      LDR.W    R1,??DataTable21_11  ;; 0x40015000
   \   000002D2   0x4288             CMP      R0,R1
   \   000002D4   0xD166             BNE.N    ??HAL_SPI_MspInit_6
   \   000002D6   0x2000             MOVS     R0,#+0
   \   000002D8   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   000002DA   0x9000             STR      R0,[SP, #+0]
   \   000002DC   0xA901             ADD      R1,SP,#+4
   \   000002DE   0x6968             LDR      R0,[R5, #+20]
   \   000002E0   0xF440 0x1080      ORR      R0,R0,#0x100000
   \   000002E4   0x6168             STR      R0,[R5, #+20]
   \   000002E6   0x6968             LDR      R0,[R5, #+20]
   \   000002E8   0xF400 0x1080      AND      R0,R0,#0x100000
   \   000002EC   0x9000             STR      R0,[SP, #+0]
   \   000002EE   0x9800             LDR      R0,[SP, #+0]
   \   000002F0   0x2000             MOVS     R0,#+0
   \   000002F2   0x9000             STR      R0,[SP, #+0]
   \   000002F4   0x6828             LDR      R0,[R5, #+0]
   \   000002F6   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000002FA   0x6028             STR      R0,[R5, #+0]
   \   000002FC   0x6828             LDR      R0,[R5, #+0]
   \   000002FE   0xF000 0x0020      AND      R0,R0,#0x20
   \   00000302   0x9000             STR      R0,[SP, #+0]
   \   00000304   0x9800             LDR      R0,[SP, #+0]
   \   00000306   0xF44F 0x7070      MOV      R0,#+960
   \   0000030A   0x9001             STR      R0,[SP, #+4]
   \   0000030C   0x2012             MOVS     R0,#+18
   \   0000030E   0x9002             STR      R0,[SP, #+8]
   \   00000310   0x2001             MOVS     R0,#+1
   \   00000312   0x9003             STR      R0,[SP, #+12]
   \   00000314   0x2003             MOVS     R0,#+3
   \   00000316   0x9004             STR      R0,[SP, #+16]
   \   00000318   0x2005             MOVS     R0,#+5
   \   0000031A   0x9005             STR      R0,[SP, #+20]
   \   0000031C   0x.... 0x....      LDR.W    R0,??DataTable21_17  ;; 0x40021400
   \   00000320   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000324   0x2000             MOVS     R0,#+0
   \   00000326   0x9000             STR      R0,[SP, #+0]
   \   00000328   0x6828             LDR      R0,[R5, #+0]
   \   0000032A   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   0000032E   0x6028             STR      R0,[R5, #+0]
   \   00000330   0x6828             LDR      R0,[R5, #+0]
   \   00000332   0x.... 0x....      LDR.W    R5,??DataTable21_18
   \   00000336   0xF400 0x0080      AND      R0,R0,#0x400000
   \   0000033A   0x9000             STR      R0,[SP, #+0]
   \   0000033C   0x9800             LDR      R0,[SP, #+0]
   \   0000033E   0x.... 0x....      LDR.W    R0,??DataTable21_16  ;; 0x400260b8
   \   00000342   0xF500 0x7074      ADD      R0,R0,#+976
   \   00000346   0x6028             STR      R0,[R5, #+0]
   \   00000348   0xF04F 0x6060      MOV      R0,#+234881024
   \   0000034C   0x6068             STR      R0,[R5, #+4]
   \   0000034E   0x2000             MOVS     R0,#+0
   \   00000350   0x60A8             STR      R0,[R5, #+8]
   \   00000352   0x60E8             STR      R0,[R5, #+12]
   \   00000354   0xF44F 0x6080      MOV      R0,#+1024
   \   00000358   0x6128             STR      R0,[R5, #+16]
   \   0000035A   0xF44F 0x6000      MOV      R0,#+2048
   \   0000035E   0x6168             STR      R0,[R5, #+20]
   \   00000360   0xF44F 0x5000      MOV      R0,#+8192
   \   00000364   0x61A8             STR      R0,[R5, #+24]
   \   00000366   0xF44F 0x7080      MOV      R0,#+256
   \   0000036A   0x61E8             STR      R0,[R5, #+28]
   \   0000036C   0xF44F 0x3000      MOV      R0,#+131072
   \   00000370   0x6228             STR      R0,[R5, #+32]
   \   00000372   0x2000             MOVS     R0,#+0
   \   00000374   0x6268             STR      R0,[R5, #+36]
   \   00000376   0x2003             MOVS     R0,#+3
   \   00000378   0x62A8             STR      R0,[R5, #+40]
   \   0000037A   0xF44F 0x0000      MOV      R0,#+8388608
   \   0000037E   0x62E8             STR      R0,[R5, #+44]
   \   00000380   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000384   0x6328             STR      R0,[R5, #+48]
   \   00000386   0x4628             MOV      R0,R5
   \   00000388   0x.... 0x....      BL       HAL_DMA_Init
   \   0000038C   0x65A5             STR      R5,[R4, #+88]
   \   0000038E   0x2200             MOVS     R2,#+0
   \   00000390   0x63AC             STR      R4,[R5, #+56]
   \   00000392   0x2104             MOVS     R1,#+4
   \   00000394   0x2044             MOVS     R0,#+68
   \   00000396   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   0000039A   0x2044             MOVS     R0,#+68
   \   0000039C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   000003A0   0x6828             LDR      R0,[R5, #+0]
   \   000003A2   0xE06C             B.N      ??HAL_SPI_MspInit_7
   \                     ??HAL_SPI_MspInit_6: (+1)
   \   000003A4   0x.... 0x....      LDR.W    R1,??DataTable21_10  ;; 0x40015400
   \   000003A8   0x4288             CMP      R0,R1
   \   000003AA   0xD170             BNE.N    ??HAL_SPI_MspInit_8
   \   000003AC   0x2000             MOVS     R0,#+0
   \   000003AE   0x....             LDR.N    R5,??DataTable13  ;; 0x40023830
   \   000003B0   0x9000             STR      R0,[SP, #+0]
   \   000003B2   0xA901             ADD      R1,SP,#+4
   \   000003B4   0x6968             LDR      R0,[R5, #+20]
   \   000003B6   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000003BA   0x6168             STR      R0,[R5, #+20]
   \   000003BC   0x6968             LDR      R0,[R5, #+20]
   \   000003BE   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000003C2   0x9000             STR      R0,[SP, #+0]
   \   000003C4   0x9800             LDR      R0,[SP, #+0]
   \   000003C6   0x2000             MOVS     R0,#+0
   \   000003C8   0x9000             STR      R0,[SP, #+0]
   \   000003CA   0x6828             LDR      R0,[R5, #+0]
   \   000003CC   0xF040 0x0040      ORR      R0,R0,#0x40
   \   000003D0   0x6028             STR      R0,[R5, #+0]
   \   000003D2   0x6828             LDR      R0,[R5, #+0]
   \   000003D4   0xF000 0x0040      AND      R0,R0,#0x40
   \   000003D8   0x9000             STR      R0,[SP, #+0]
   \   000003DA   0x9800             LDR      R0,[SP, #+0]
   \   000003DC   0xF44F 0x40C0      MOV      R0,#+24576
   \   000003E0   0x9001             STR      R0,[SP, #+4]
   \   000003E2   0x2002             MOVS     R0,#+2
   \   000003E4   0x9002             STR      R0,[SP, #+8]
   \   000003E6   0x2000             MOVS     R0,#+0
   \   000003E8   0x9003             STR      R0,[SP, #+12]
   \   000003EA   0x2003             MOVS     R0,#+3
   \   000003EC   0x9004             STR      R0,[SP, #+16]
   \   000003EE   0x2005             MOVS     R0,#+5
   \   000003F0   0x9005             STR      R0,[SP, #+20]
   \   000003F2   0x.... 0x....      LDR.W    R0,??DataTable21_19  ;; 0x40021800
   \   000003F6   0x.... 0x....      BL       HAL_GPIO_Init
   \   000003FA   0x2000             MOVS     R0,#+0
   \   000003FC   0x9000             STR      R0,[SP, #+0]
   \   000003FE   0x6828             LDR      R0,[R5, #+0]
   \   00000400   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   00000404   0x6028             STR      R0,[R5, #+0]
   \   00000406   0x6828             LDR      R0,[R5, #+0]
   \   00000408   0x.... 0x....      LDR.W    R5,??DataTable21_18
   \   0000040C   0xF400 0x0080      AND      R0,R0,#0x400000
   \   00000410   0x9000             STR      R0,[SP, #+0]
   \   00000412   0x9800             LDR      R0,[SP, #+0]
   \   00000414   0x.... 0x....      LDR.W    R0,??DataTable21_16  ;; 0x400260b8
   \   00000418   0xF500 0x707A      ADD      R0,R0,#+1000
   \   0000041C   0x65A8             STR      R0,[R5, #+88]
   \   0000041E   0xF04F 0x7000      MOV      R0,#+33554432
   \   00000422   0x65E8             STR      R0,[R5, #+92]
   \   00000424   0x2000             MOVS     R0,#+0
   \   00000426   0x6628             STR      R0,[R5, #+96]
   \   00000428   0x6668             STR      R0,[R5, #+100]
   \   0000042A   0xF44F 0x6080      MOV      R0,#+1024
   \   0000042E   0x66A8             STR      R0,[R5, #+104]
   \   00000430   0xF44F 0x6000      MOV      R0,#+2048
   \   00000434   0x66E8             STR      R0,[R5, #+108]
   \   00000436   0x6728             STR      R0,[R5, #+112]
   \   00000438   0xF44F 0x7080      MOV      R0,#+256
   \   0000043C   0x6768             STR      R0,[R5, #+116]
   \   0000043E   0xF44F 0x3000      MOV      R0,#+131072
   \   00000442   0x67A8             STR      R0,[R5, #+120]
   \   00000444   0x2000             MOVS     R0,#+0
   \   00000446   0x67E8             STR      R0,[R5, #+124]
   \   00000448   0x2003             MOVS     R0,#+3
   \   0000044A   0xF8C5 0x0080      STR      R0,[R5, #+128]
   \   0000044E   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000452   0xF8C5 0x0084      STR      R0,[R5, #+132]
   \   00000456   0xF8C5 0x0088      STR      R0,[R5, #+136]
   \   0000045A   0xF105 0x0058      ADD      R0,R5,#+88
   \   0000045E   0x.... 0x....      BL       HAL_DMA_Init
   \   00000462   0xF105 0x0058      ADD      R0,R5,#+88
   \   00000466   0x2201             MOVS     R2,#+1
   \   00000468   0x65A0             STR      R0,[R4, #+88]
   \   0000046A   0x2103             MOVS     R1,#+3
   \   0000046C   0xF8C5 0x4090      STR      R4,[R5, #+144]
   \   00000470   0x2045             MOVS     R0,#+69
   \   00000472   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000476   0x2045             MOVS     R0,#+69
   \   00000478   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   0000047C   0x6DA8             LDR      R0,[R5, #+88]
   \                     ??HAL_SPI_MspInit_7: (+1)
   \   0000047E   0x6801             LDR      R1,[R0, #+0]
   \   00000480   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000484   0x6001             STR      R1,[R0, #+0]
   \   00000486   0x6801             LDR      R1,[R0, #+0]
   \   00000488   0xF041 0x0108      ORR      R1,R1,#0x8
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   0000048C   0x6001             STR      R1,[R0, #+0]
   \                     ??HAL_SPI_MspInit_8: (+1)
   \   0000048E   0xB007             ADD      SP,SP,#+28
   \   00000490   0xBD30             POP      {R4,R5,PC}       ;; return
   1457          
   1458          
   1459          
   1460          
   1461          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1462          {
   1463            /* Check the parameters */
   1464            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1465            
   1466            /* Write in the DR register the data to be sent */
   1467            SPIx->DR = Data;
   1468          }
   1469          
   1470          
   1471          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1472          {
   1473            /* Check the parameters */
   1474            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1475            
   1476            /* Return the data in the DR register */
   1477            return SPIx->DR;
   1478          }
   1479          
   1480          

   \                                 In section .text, align 2, keep-with-next
   1481          void RecordUpdBuf(void)
   1482          {
   1483          
   1484               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable21_20
   \   00000004   0xF890 0x1080      LDRB     R1,[R0, #+128]
   \   00000008   0x2902             CMP      R1,#+2
   \   0000000A   0xF040 0x80FD      BNE.W    ??RecordUpdBuf_0
   1485               {
   1486                  WaveRecord_flgInt=0;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xF880 0x1080      STRB     R1,[R0, #+128]
   1487          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable21_21
   \   00000018   0x880A             LDRH     R2,[R1, #+0]
   \   0000001A   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000001E   0xBFBE             ITTT     LT 
   \   00000020   0x....             LDRLT.N  R2,??DataTable14
   \   00000022   0x8813             LDRHLT   R3,[R2, #+0]
   \   00000024   0xF5B3 0x6F80      CMPLT    R3,#+1024
   \   00000028   0xF280 0x80EE      BGE.W    ??RecordUpdBuf_0
   1488          		//			  &&(stLR!=stLROld))
   1489          			{
   1490          		/*-------------------------------------------------------------------------------------------------------------
   1491          					  
   1492          			Sequence  Record Data					  Processing Data				  Player Data
   1493          					  
   1494          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1495          					  
   1496          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1497          					  
   1498          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1499          		 ---------------------------------------------------------------------------------------------------------------*/
   1500          					  /* Recording Audio Data */						 
   1501          					   switch (buffer_switch)
   \   0000002C   0x.... 0x....      LDR.W    R3,??DataTable21_22
   \   00000030   0x781B             LDRB     R3,[R3, #+0]
   \   00000032   0xB123             CBZ.N    R3,??RecordUpdBuf_1
   \   00000034   0x2B02             CMP      R3,#+2
   \   00000036   0xF000 0x809E      BEQ.W    ??RecordUpdBuf_2
   \   0000003A   0xD34E             BCC.N    ??RecordUpdBuf_3
   \   0000003C   0x4770             BX       LR
   1502          					   {
   1503          								case BUF1_PLAY:
   1504          
   1505          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_1: (+1)
   \   0000003E   0x880B             LDRH     R3,[R1, #+0]
   \   00000040   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000044   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   00000048   0x....             LDR.N    R1,??DataTable18_1
   \   0000004A   0xF9B0 0xC088      LDRSH    R12,[R0, #+136]
   \   0000004E   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000052   0xF503 0x4380      ADD      R3,R3,#+16384
   \   00000056   0xF8A3 0xC000      STRH     R12,[R3, #+0]
   1506          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   0000005A   0x8813             LDRH     R3,[R2, #+0]
   \   0000005C   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000060   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000064   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000068   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   0000006C   0xF503 0x4390      ADD      R3,R3,#+18432
   \   00000070   0x801A             STRH     R2,[R3, #+0]
   1507          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   00000072   0x....             LDR.N    R2,??DataTable18_3
   \   00000074   0x8813             LDRH     R3,[R2, #+0]
   \   00000076   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000007A   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   0000007E   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000082   0xF9B0 0x208E      LDRSH    R2,[R0, #+142]
   \   00000086   0xF503 0x43A0      ADD      R3,R3,#+20480
   \   0000008A   0x801A             STRH     R2,[R3, #+0]
   1508          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   0000008C   0x....             LDR.N    R2,??DataTable18_4
   \   0000008E   0x8813             LDRH     R3,[R2, #+0]
   \   00000090   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000094   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000098   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000009C   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   000000A0   0xF503 0x43B0      ADD      R3,R3,#+22528
   \   000000A4   0x801A             STRH     R2,[R3, #+0]
   1509          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000000A6   0x....             LDR.N    R2,??DataTable21_1
   \   000000A8   0x8813             LDRH     R3,[R2, #+0]
   \   000000AA   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000AE   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000000B2   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000000B6   0xF9B0 0x2090      LDRSH    R2,[R0, #+144]
   \   000000BA   0xF503 0x43C0      ADD      R3,R3,#+24576
   \   000000BE   0x801A             STRH     R2,[R3, #+0]
   1510          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   000000C0   0x....             LDR.N    R2,??DataTable21_2
   \   000000C2   0x8813             LDRH     R3,[R2, #+0]
   \   000000C4   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000C8   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000000CC   0xF9B0 0x0092      LDRSH    R0,[R0, #+146]
   \   000000D0   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   000000D4   0xF501 0x41D0      ADD      R1,R1,#+26624
   \   000000D8   0xE095             B.N      ??RecordUpdBuf_4
   1511          	
   1512          										break;
   1513          								case BUF2_PLAY:
   1514          
   1515          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_3: (+1)
   \   000000DA   0x880B             LDRH     R3,[R1, #+0]
   \   000000DC   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000E0   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000E4   0x....             LDR.N    R1,??DataTable18_1
   \   000000E6   0xF9B0 0xC088      LDRSH    R12,[R0, #+136]
   \   000000EA   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000000EE   0xF503 0x4300      ADD      R3,R3,#+32768
   \   000000F2   0xF8A3 0xC000      STRH     R12,[R3, #+0]
   1516          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   000000F6   0x8813             LDRH     R3,[R2, #+0]
   \   000000F8   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000FC   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000100   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000104   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   00000108   0xF503 0x4308      ADD      R3,R3,#+34816
   \   0000010C   0x801A             STRH     R2,[R3, #+0]
   1517          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   0000010E   0x....             LDR.N    R2,??DataTable18_3
   \   00000110   0x8813             LDRH     R3,[R2, #+0]
   \   00000112   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000116   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   0000011A   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000011E   0xF9B0 0x208E      LDRSH    R2,[R0, #+142]
   \   00000122   0xF503 0x4310      ADD      R3,R3,#+36864
   \   00000126   0x801A             STRH     R2,[R3, #+0]
   1518          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   00000128   0x....             LDR.N    R2,??DataTable18_4
   \   0000012A   0x8813             LDRH     R3,[R2, #+0]
   \   0000012C   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000130   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000134   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000138   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   0000013C   0xF503 0x4318      ADD      R3,R3,#+38912
   \   00000140   0x801A             STRH     R2,[R3, #+0]
   1519          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   00000142   0x....             LDR.N    R2,??DataTable21_1
   \   00000144   0x8813             LDRH     R3,[R2, #+0]
   \   00000146   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000014A   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   0000014E   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000152   0xF9B0 0x2090      LDRSH    R2,[R0, #+144]
   \   00000156   0xF503 0x4320      ADD      R3,R3,#+40960
   \   0000015A   0x801A             STRH     R2,[R3, #+0]
   1520          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   0000015C   0x....             LDR.N    R2,??DataTable21_2
   \   0000015E   0x8813             LDRH     R3,[R2, #+0]
   \   00000160   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000164   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000168   0xF9B0 0x0092      LDRSH    R0,[R0, #+146]
   \   0000016C   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   00000170   0xF501 0x4128      ADD      R1,R1,#+43008
   \   00000174   0xE047             B.N      ??RecordUpdBuf_4
   1521          		
   1522          
   1523          										break;
   1524          								case BUF3_PLAY:
   1525          
   1526          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_2: (+1)
   \   00000176   0x880B             LDRH     R3,[R1, #+0]
   \   00000178   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000017C   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   00000180   0xF9B0 0xC088      LDRSH    R12,[R0, #+136]
   \   00000184   0x....             LDR.N    R1,??DataTable18_1
   \   00000186   0xF821 0xC013      STRH     R12,[R1, R3, LSL #+1]
   1527          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   0000018A   0x8813             LDRH     R3,[R2, #+0]
   \   0000018C   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000190   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000194   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000198   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   0000019C   0xF8A3 0x2800      STRH     R2,[R3, #+2048]
   1528          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   000001A0   0x....             LDR.N    R2,??DataTable18_3
   \   000001A2   0x8813             LDRH     R3,[R2, #+0]
   \   000001A4   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001A8   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000001AC   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001B0   0xF9B0 0x208E      LDRSH    R2,[R0, #+142]
   \   000001B4   0xF503 0x5380      ADD      R3,R3,#+4096
   \   000001B8   0x801A             STRH     R2,[R3, #+0]
   1529          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \   000001BA   0x....             LDR.N    R2,??DataTable18_4
   \   000001BC   0x8813             LDRH     R3,[R2, #+0]
   \   000001BE   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001C2   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000001C6   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001CA   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   000001CE   0xF503 0x53C0      ADD      R3,R3,#+6144
   \   000001D2   0x801A             STRH     R2,[R3, #+0]
   1530          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000001D4   0x....             LDR.N    R2,??DataTable21_1
   \   000001D6   0x8813             LDRH     R3,[R2, #+0]
   \   000001D8   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001DC   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   000001E0   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001E4   0xF9B0 0x2090      LDRSH    R2,[R0, #+144]
   \   000001E8   0xF503 0x5300      ADD      R3,R3,#+8192
   \   000001EC   0x801A             STRH     R2,[R3, #+0]
   1531          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   \   000001EE   0x....             LDR.N    R2,??DataTable21_2
   \   000001F0   0x8813             LDRH     R3,[R2, #+0]
   \   000001F2   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000001F6   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000001FA   0xF9B0 0x0092      LDRSH    R0,[R0, #+146]
   \   000001FE   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   00000202   0xF501 0x5120      ADD      R1,R1,#+10240
   \                     ??RecordUpdBuf_4: (+1)
   \   00000206   0x8008             STRH     R0,[R1, #+0]
   1532          										break;
   1533          								default:
   1534          										break; 
   1535          					   }
   1536          				
   1537          				}
   1538                               
   1539               	}
   1540          }
   \                     ??RecordUpdBuf_0: (+1)
   \   00000208   0x4770             BX       LR               ;; return
   1541          
   1542          

   \                                 In section .text, align 2, keep-with-next
   1543          void DMA2_Stream5_IRQHandler(void)
   1544          {
   1545            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1546          
   1547            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1548            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable21_18
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1549            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1550          
   1551            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1552          }
   1553          
   1554          /**
   1555          * @brief This function handles DMA2 stream6 global interrupt.
   1556          */

   \                                 In section .text, align 2, keep-with-next
   1557          void DMA2_Stream6_IRQHandler(void)
   1558          {
   1559            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1560          
   1561            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1562            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable21_23
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1563            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1564          
   1565            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1566          }
   1567          

   \                                 In section .text, align 2, keep-with-next
   1568          void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
   1569          {
   1570          
   1571              if (hspi->Instance==SPI6) //MIC8
   \                     HAL_SPI_RxHalfCpltCallback: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x....             LDR.N    R1,??DataTable21_10  ;; 0x40015400
   \   00000004   0x4288             CMP      R0,R1
   \   00000006   0xD108             BNE.N    ??HAL_SPI_RxHalfCpltCallback_0
   1572              {
   1573                 swtSDO7=0x00;
   \   00000008   0x....             LDR.N    R0,??DataTable21_3
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0xF880 0x1130      STRB     R1,[R0, #+304]
   1574                 WaveRecord_flgSDO7Finish = 1;
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0xF880 0x1132      STRB     R1,[R0, #+306]
   1575                 WaveRecord_flgSDO8Finish = 1;
   \   00000016   0xF880 0x1133      STRB     R1,[R0, #+307]
   1576              }
   1577          
   1578          }
   \                     ??HAL_SPI_RxHalfCpltCallback_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
   1579          

   \                                 In section .text, align 2, keep-with-next
   1580          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1581          {
   1582              if(hspi->Instance==SPI1)
   1583              {
   1584                  /* Copy Data to Record Buffer */
   1585          		//RecordUpdBuf();
   1586          		//XferCplt = 1;
   1587                  //Audio_Play_Out();
   1588              }
   1589              else if (hspi->Instance==SPI2)
   1590              {
   1591          
   1592              }
   1593              else if (hspi->Instance==SPI4)
   1594              {
   1595          
   1596              }
   1597          	else
   1598          	{
   1599          
   1600          	}
   1601          
   1602              if (hspi->Instance==SPI5)
   1603              {
   1604          
   1605              }
   1606              else
   1607              {
   1608                
   1609              }
   1610              
   1611              if (hspi->Instance==SPI6) //MIC8
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x....             LDR.N    R1,??DataTable21_10  ;; 0x40015400
   \   00000004   0x4288             CMP      R0,R1
   \   00000006   0xD107             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1612              {
   1613          #if 0							
   1614              if (swtSDO8==0x01)
   1615             {
   1616                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1617             }
   1618             else
   1619             {
   1620          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1621             }      
   1622             AudioUSBSend(idxFrmPDMMic8++);
   1623             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   1624             {
   1625                 swtSDO8^=0x01;
   1626                 WaveRecord_flgSDO8Finish = 1;
   1627                 idxFrmPDMMic8 = 0;
   1628          		RESET_IDX
   1629          		XferCplt = 0; // clear DMA interrupt flag
   1630          		switch (buffer_switch)
   1631          		{
   1632          	        case BUF1_PLAY: 		
   1633          	          buffer_switch = BUF3_PLAY;
   1634          	          break;
   1635          	        case BUF2_PLAY: 
   1636          	          buffer_switch = BUF1_PLAY;		
   1637          	          break;
   1638          	        case BUF3_PLAY: 	
   1639          	          buffer_switch = BUF2_PLAY;
   1640          	          break;
   1641          	        default:
   1642          	          break;
   1643          		}
   1644          		/* Last player Frame is finished */
   1645          		AudioPlayerUpd(); 		
   1646          		
   1647          		if (cntStrt<100) cntStrt++;		   
   1648                  
   1649             }
   1650          #else
   1651          
   1652          	//MIC7Rec();
   1653          	//MIC8Rec();   
   1654          	swtSDO7=0x01;
   \   00000008   0x....             LDR.N    R0,??DataTable21_3
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0xF880 0x1130      STRB     R1,[R0, #+304]
   1655          	WaveRecord_flgSDO7Finish = 1;
   \   00000010   0xF880 0x1132      STRB     R1,[R0, #+306]
   1656          	WaveRecord_flgSDO8Finish = 1;
   \   00000014   0xF880 0x1133      STRB     R1,[R0, #+307]
   1657          	
   1658          #endif
   1659          
   1660            }
   1661          }
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   00000018   0x4770             BX       LR               ;; return
   1662          

   \                                 In section .text, align 4, keep-with-next
   1663          void PDM2PCMSDO78(void)
   1664          {
   1665          static int16_t Mic7LPOld,Mic8LPOld;
                                ^
Warning[Pe177]: variable "Mic7LPOld" was declared but never referenced

  static int16_t Mic7LPOld,Mic8LPOld;
                           ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",1665  Warning[Pe177]: 
          variable "Mic8LPOld" was declared but never referenced

                 vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
                 ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",654  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

                 vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                 ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",724  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

  		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
  		^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",843  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

  		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
  		^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",848  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

                PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",885  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

                PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c",890  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement
   1666          uint8_t buffer_switch_tmp;
   1667          
   1668          buffer_switch_tmp = buffer_switch;
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable21_22
   \   00000002   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   1669          
   1670          /*-------------------------------------------------------------------------------------------------------------
   1671          			  
   1672          	Sequence  Record Data					  Processing Data				  Player Data
   1673          			  
   1674          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1675          			  
   1676          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1677          			  
   1678          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1679           ---------------------------------------------------------------------------------------------------------------*/
   1680          	/* Data in Mic8 finished recording */
   1681          
   1682              /* Data in Mic7 finished recording */
   1683              if ((WaveRecord_flgSDO7Finish==1)&&(WaveRecord_flgSDO8Finish==1))
   \   00000006   0x.... 0x....      LDR.W    R8,??DataTable21_3
   \   0000000A   0x7804             LDRB     R4,[R0, #+0]
   \   0000000C   0xF898 0x0132      LDRB     R0,[R8, #+306]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xBF04             ITT      EQ 
   \   00000014   0xF898 0x0133      LDRBEQ   R0,[R8, #+307]
   \   00000018   0x2801             CMPEQ    R0,#+1
   \   0000001A   0xF040 0x8082      BNE.W    ??PDM2PCMSDO78_0
   1684              {
   1685          		
   1686                  WaveRecord_flgSDO7Finish=0;
   \   0000001E   0x2000             MOVS     R0,#+0
   1687                  WaveRecord_flgSDO8Finish=0;
   1688          
   1689          		
   1690                  for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000020   0x.... 0x....      LDR.W    R9,??DataTable21
   \   00000024   0xF888 0x0132      STRB     R0,[R8, #+306]
   \   00000028   0xF05F 0x0600      MOVS.W   R6,#+0
   \   0000002C   0xF888 0x0133      STRB     R0,[R8, #+307]
   \   00000030   0xF509 0x4540      ADD      R5,R9,#+49152
   \   00000034   0xF509 0x3780      ADD      R7,R9,#+65536
   1691                  {
   1692          	        if(swtSDO7==0x00)
   \                     ??PDM2PCMSDO78_1: (+1)
   \   00000038   0xF898 0x0130      LDRB     R0,[R8, #+304]
   \   0000003C   0xB980             CBNZ.N   R0,??PDM2PCMSDO78_2
   1693          	        {
   1694          	            pDataMic7[i%64] = HTONS(TestSDO7[i]);	
   \   0000003E   0x1170             ASRS     R0,R6,#+5
   \   00000040   0x8829             LDRH     R1,[R5, #+0]
   \   00000042   0xEB06 0x6090      ADD      R0,R6,R0, LSR #+26
   \   00000046   0x1180             ASRS     R0,R0,#+6
   \   00000048   0xEBA6 0x1080      SUB      R0,R6,R0, LSL #+6
   \   0000004C   0x460A             MOV      R2,R1
   \   0000004E   0x0209             LSLS     R1,R1,#+8
   \   00000050   0xEB08 0x0040      ADD      R0,R8,R0, LSL #+1
   \   00000054   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   00000058   0xF8A0 0x11C4      STRH     R1,[R0, #+452]
   1695          	            pDataMic8[i%64] = HTONS(TestSDO8[i]);
   \   0000005C   0x8839             LDRH     R1,[R7, #+0]
   \   0000005E   0xE011             B.N      ??PDM2PCMSDO78_3
   1696          	        }
   1697          	        else
   1698          	        {
   1699          	            pDataMic7[i%64] = HTONS(TestSDO7[4*AUDIO_OUT_BUFFER_SIZE + i]);
   \                     ??PDM2PCMSDO78_2: (+1)
   \   00000060   0xF44F 0x5100      MOV      R1,#+8192
   \   00000064   0x1170             ASRS     R0,R6,#+5
   \   00000066   0xEB06 0x6090      ADD      R0,R6,R0, LSR #+26
   \   0000006A   0x5B4A             LDRH     R2,[R1, R5]
   \   0000006C   0x1180             ASRS     R0,R0,#+6
   \   0000006E   0xEBA6 0x1080      SUB      R0,R6,R0, LSL #+6
   \   00000072   0x4613             MOV      R3,R2
   \   00000074   0x0212             LSLS     R2,R2,#+8
   \   00000076   0xEB08 0x0040      ADD      R0,R8,R0, LSL #+1
   \   0000007A   0xEA42 0x2213      ORR      R2,R2,R3, LSR #+8
   \   0000007E   0xF8A0 0x21C4      STRH     R2,[R0, #+452]
   1700          	            pDataMic8[i%64] = HTONS(TestSDO8[4*AUDIO_OUT_BUFFER_SIZE + i]);
   \   00000082   0x5BC9             LDRH     R1,[R1, R7]
   \                     ??PDM2PCMSDO78_3: (+1)
   \   00000084   0x460A             MOV      R2,R1
   \   00000086   0x0209             LSLS     R1,R1,#+8
   \   00000088   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   0000008C   0xF8A0 0x1144      STRH     R1,[R0, #+324]
   1701          	        }
   1702          
   1703          	        /* PDM conversion for frame of 64 inputs, 16 outputs */
   1704          	        if (i%64==63)
   \   00000090   0x1170             ASRS     R0,R6,#+5
   \   00000092   0xEB06 0x6090      ADD      R0,R6,R0, LSR #+26
   \   00000096   0x1180             ASRS     R0,R0,#+6
   \   00000098   0xEBA6 0x1180      SUB      R1,R6,R0, LSL #+6
   \   0000009C   0x293F             CMP      R1,#+63
   \   0000009E   0xD13A             BNE.N    ??PDM2PCMSDO78_4
   1705          	        {
   1706          				/* Put them in processing phase */
   1707          	          /* Recording Audio Data */						 
   1708          	          switch (buffer_switch_tmp)
   \   000000A0   0xB11C             CBZ.N    R4,??PDM2PCMSDO78_5
   \   000000A2   0x2C02             CMP      R4,#+2
   \   000000A4   0xD023             BEQ.N    ??PDM2PCMSDO78_6
   \   000000A6   0xD311             BCC.N    ??PDM2PCMSDO78_7
   \   000000A8   0xE035             B.N      ??PDM2PCMSDO78_4
   1709          	          {
   1710          			              case BUF1_PLAY:								
   1711                                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 48 ,
   1712                                        (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_5: (+1)
   \   000000AA   0xEB09 0x1A40      ADD      R10,R9,R0, LSL #+5
   \   000000AE   0xF108 0x03C8      ADD      R3,R8,#+200
   \   000000B2   0x2230             MOVS     R2,#+48
   \   000000B4   0xF508 0x70E2      ADD      R0,R8,#+452
   \   000000B8   0xF50A 0x4130      ADD      R1,R10,#+45056
   \   000000BC   0x.... 0x....      BL       PDM_Filter_64_LSB
   1713                                        PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 48 ,
   1714                                        (PDMFilter_InitStruct *)&Filter[1]);				  
   \   000000C0   0xF108 0x03FC      ADD      R3,R8,#+252
   \   000000C4   0x2230             MOVS     R2,#+48
   \   000000C6   0xF50A 0x4138      ADD      R1,R10,#+47104
   \   000000CA   0xE020             B.N      ??PDM2PCMSDO78_8
   1715                                         break;	               
   1716                                    case BUF2_PLAY:
   1717                                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 48 ,
   1718                                        (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_7: (+1)
   \   000000CC   0xEB09 0x1A40      ADD      R10,R9,R0, LSL #+5
   \   000000D0   0xF108 0x03C8      ADD      R3,R8,#+200
   \   000000D4   0x2230             MOVS     R2,#+48
   \   000000D6   0xF508 0x70E2      ADD      R0,R8,#+452
   \   000000DA   0xF50A 0x5140      ADD      R1,R10,#+12288
   \   000000DE   0x.... 0x....      BL       PDM_Filter_64_LSB
   1719                                        PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 48 ,
   1720                                        (PDMFilter_InitStruct *)&Filter[1]);	
   \   000000E2   0xF108 0x03FC      ADD      R3,R8,#+252
   \   000000E6   0x2230             MOVS     R2,#+48
   \   000000E8   0xF50A 0x5160      ADD      R1,R10,#+14336
   \   000000EC   0xE00F             B.N      ??PDM2PCMSDO78_8
   1721                                        break;
   1722                                    case BUF3_PLAY:
   1723                                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 48 ,
   1724                                        (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_6: (+1)
   \   000000EE   0xEB09 0x1A40      ADD      R10,R9,R0, LSL #+5
   \   000000F2   0xF108 0x03C8      ADD      R3,R8,#+200
   \   000000F6   0x2230             MOVS     R2,#+48
   \   000000F8   0xF508 0x70E2      ADD      R0,R8,#+452
   \   000000FC   0xF50A 0x41E0      ADD      R1,R10,#+28672
   \   00000100   0x.... 0x....      BL       PDM_Filter_64_LSB
   1725                                        PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 48 ,
   1726                                        (PDMFilter_InitStruct *)&Filter[1]);					
   \   00000104   0xF108 0x03FC      ADD      R3,R8,#+252
   \   00000108   0x2230             MOVS     R2,#+48
   \   0000010A   0xF50A 0x41F0      ADD      R1,R10,#+30720
   \                     ??PDM2PCMSDO78_8: (+1)
   \   0000010E   0xF508 0x70A2      ADD      R0,R8,#+324
   \   00000112   0x.... 0x....      BL       PDM_Filter_64_LSB
   1727                                        break;
   1728                                    default:
   1729                                        break; 
   1730          	          }
   1731          	        }
   1732          
   1733          // 			if (i%4==0) Buffer2.bufMIC8[i/4] = (i/4)*10;
   1734          	     }
   \                     ??PDM2PCMSDO78_4: (+1)
   \   00000116   0x1C76             ADDS     R6,R6,#+1
   \   00000118   0x1CBF             ADDS     R7,R7,#+2
   \   0000011A   0x1CAD             ADDS     R5,R5,#+2
   \   0000011C   0xF5B6 0x5F80      CMP      R6,#+4096
   \   00000120   0xDB8A             BLT.N    ??PDM2PCMSDO78_1
   1735          //		switch (buffer_switch)
   1736          //		{
   1737          //			case BUF1_PLAY: 				
   1738          //				Buffer3.bufMIC7[0]=Buffer3.bufMIC7[2];
   1739          //				Buffer3.bufMIC8[0]=Buffer3.bufMIC8[2];
   1740          //				Buffer3.bufMIC7[1]=Buffer3.bufMIC7[2];
   1741          //				Buffer3.bufMIC8[1]=Buffer3.bufMIC8[2];				
   1742          //			    break;
   1743          //			case BUF2_PLAY:
   1744          //
   1745          //				Buffer1.bufMIC7[0]=Buffer1.bufMIC7[2];
   1746          //				Buffer1.bufMIC8[0]=Buffer1.bufMIC8[2];
   1747          //				Buffer1.bufMIC7[1]=Buffer1.bufMIC7[2];
   1748          //				Buffer1.bufMIC8[1]=Buffer1.bufMIC8[2];				
   1749          //				break;
   1750          //			case BUF3_PLAY:
   1751          //				
   1752          //				Buffer2.bufMIC7[0]=Buffer2.bufMIC7[2];
   1753          //				Buffer2.bufMIC8[0]=Buffer2.bufMIC8[2];				
   1754          //				Buffer2.bufMIC7[1]=Buffer2.bufMIC7[2];
   1755          //				Buffer2.bufMIC8[1]=Buffer2.bufMIC8[2];				
   1756          //			    break;
   1757          //			default:
   1758          //			break; 
   1759          //		}	
   1760          #if 0		
   1761                  /* LowPass Filter 
   1762                        dT = 1/16000
   1763                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1764          		*/						 
   1765          		switch (buffer_switch)
   1766          		{
   1767          			case BUF1_PLAY: 
   1768          				LowPassIIR(Buffer2.bufMIC7 ,Buffer2.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1769          				LowPassIIR(Buffer2.bufMIC8 ,Buffer2.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1770          			    break;
   1771          			case BUF2_PLAY:
   1772          				LowPassIIR(Buffer3.bufMIC7 ,Buffer3.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1773          				LowPassIIR(Buffer3.bufMIC8 ,Buffer3.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1774          			    break;
   1775          			case BUF3_PLAY:
   1776          			    LowPassIIR(Buffer1.bufMIC7 ,Buffer1.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);	
   1777          				LowPassIIR(Buffer1.bufMIC8 ,Buffer1.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   1778          			    break;
   1779          			default:
   1780          			break; 
   1781          		}	
   1782          #endif		
   1783             }//if (WaveRecord_flgSDO8Finish==1)
   1784          }
   \                     ??PDM2PCMSDO78_0: (+1)
   \   00000122   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1785          

   \                                 In section .text, align 2, keep-with-next
   1786          void MIC7Rec (void)
   1787          {
   1788          	swtSDO7=0x01;
   \                     MIC7Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable21_3
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF880 0x1130      STRB     R1,[R0, #+304]
   1789          	WaveRecord_flgSDO7Finish = 1;
   \   00000008   0xF880 0x1132      STRB     R1,[R0, #+306]
   1790          	//HAL_SPI_DMAStop(&hspi5);
   1791          //	if (swtSDO7==0x01)
   1792          //	{
   1793          //          HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   1794          //	}
   1795          //	else
   1796          //	{
   1797          //          HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   1798          //	} 
   1799          
   1800          }
   \   0000000C   0x4770             BX       LR               ;; return
   1801          

   \                                 In section .text, align 2, keep-with-next
   1802          void MIC8Rec (void)
   1803          {
   1804               swtSDO8^=0x01;
   \                     MIC8Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable21_3
   \   00000002   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   00000006   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000A   0xF880 0x1131      STRB     R1,[R0, #+305]
   1805              WaveRecord_flgSDO8Finish = 1;
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0xF880 0x1133      STRB     R1,[R0, #+307]
   1806          	//HAL_SPI_DMAStop(&hspi6);
   1807          //    if (swtSDO8==0x01)
   1808          //    {
   1809          //        HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   1810          //    }
   1811          //    else
   1812          //    {
   1813          //        HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   1814          //
   1815          //    }
   1816          
   1817          }
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x4001300C         DC32     0x4001300c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x4001340C         DC32     0x4001340c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_3:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_4:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_5:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_6:
   \   00000000   0x4001540C         DC32     0x4001540c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_7:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_8:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_9:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_10:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_11:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_12:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_13:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_14:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_15:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_16:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_17:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_18:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_19:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_20:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_21:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_22:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_23:
   \   00000000   0x........         DC32     hdma_spi5_rx+0x58
   1818          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DMA2_Stream5_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream6_IRQHandler
         0   -> HAL_DMA_IRQHandler
      40   HAL_SPI_MspInit
        40   -> HAL_DMA_DeInit
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
       0   HAL_SPI_RxCpltCallback
       0   HAL_SPI_RxHalfCpltCallback
      16   MIC1TO8_Init
        16   -> HAL_I2S_Init
        16   -> SPI4_Init
        16   -> SPI5_Init
         0   -> SPI6_Init
       0   MIC7Rec
       0   MIC8Rec
       0   Mic7Rec
         0   -> SPI5_Init
       0   Mic8Rec
         0   -> HAL_SPI_Init
      32   PDM2PCMSDO78
        32   -> PDM_Filter_64_LSB
       0   RecordUpdBuf
       0   SPI1_IRQHandler
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
      16   SPI2_IRQHandler
        16   -> HAL_GPIO_ReadPin
      16   SPI4_IRQHandler
        16   -> HAL_GPIO_ReadPin
       8   SPI4_Init
         8   -> HAL_SPI_Init
       8   SPI5_IRQHandler
         8   -> PDM_Filter_64_LSB
      32   SPI5_Init
         0   -> HAL_SPI_Init
        32   -> PDM_Filter_Init
       8   SPI6_IRQHandler
         8   -> PDM_Filter_64_LSB
       0   SPI6_Init
         0   -> HAL_SPI_Init
      16   StartRecMic7_8
        16   -> HAL_SPI_Receive_DMA
       0   mySPI_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable14
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable19
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_10
       4  ??DataTable21_11
       4  ??DataTable21_12
       4  ??DataTable21_13
       4  ??DataTable21_14
       4  ??DataTable21_15
       4  ??DataTable21_16
       4  ??DataTable21_17
       4  ??DataTable21_18
       4  ??DataTable21_19
       4  ??DataTable21_2
       4  ??DataTable21_20
       4  ??DataTable21_21
       4  ??DataTable21_22
       4  ??DataTable21_23
       4  ??DataTable21_3
       4  ??DataTable21_4
       4  ??DataTable21_5
       4  ??DataTable21_6
       4  ??DataTable21_7
       4  ??DataTable21_8
       4  ??DataTable21_9
   81920  Buffer1
          Buffer2
          Buffer3
          TestSDO7
          TestSDO8
       6  DMA2_Stream5_IRQHandler
       6  DMA2_Stream6_IRQHandler
    1170  HAL_SPI_MspInit
      26  HAL_SPI_RxCpltCallback
      28  HAL_SPI_RxHalfCpltCallback
       2  I2S1_stNipple
       1  I2S1_stPosShft
       2  I2S2_stNipple
       1  I2S2_stPosShft
     130  MIC1TO8_Init
      14  MIC7Rec
      22  MIC8Rec
       1  Main_stLR
       2  Mic7Rec
      76  Mic8Rec
     294  PDM2PCMSDO78
     522  RecordUpdBuf
     272  SPI1_IRQHandler
     220  SPI1_Ini
       2  SPI1_stNipple
     242  SPI2_IRQHandler
     298  SPI4_IRQHandler
      86  SPI4_Init
     132  SPI5_IRQHandler
     142  SPI5_Init
     126  SPI6_IRQHandler
      76  SPI6_Init
      56  StartRecMic7_8
    8192  TestSDO12
    8192  TestSDO34
    8192  TestSDO56
    8192  TestSDO7_1
    8192  TestSDO8_1
       1  WaveRecord_flgIni
       2  cntStrt
       2  cntTransFinish
       1  flgRacing
      88  hdma_spi2_tx
      88  hdma_spi3_tx
     176  hdma_spi5_rx
          hdma_spi6_rx
     150  hi2s1
          hi2s2
          WaveRecord_flgInt
          SPI4_stPosShft
          I2S2_stLR
          I2S2_stLROld
          stLROld
          Main_stLROld
          WaveRec_idxTest
          vRawSens1
          vRawSens2
          vRawSens4
          vRawSens3
          vRawSens5
          vRawSens6
          SPI4_stNipple
     100  hspi1
     100  hspi2
     580  hspi5
          hspi6
          Filter
          swtSDO7
          swtSDO8
          WaveRecord_flgSDO7Finish
          WaveRecord_flgSDO8Finish
          idxMic8
          idxMic7
          cntPos
          cntPos7
          bufPCMSens7
          bufPCMSens8
          pDataMic8
          pDataMic7
       2  iSDO12
       2  iSDO34
       2  iSDO56
       2  idxFrmPDMMic8
      44  mySPI_SendData
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins

 
 124 461 bytes in section .bss
   4 150 bytes in section .text
 
   4 150 bytes of CODE memory
 124 461 bytes of DATA memory

Errors: none
Warnings: 9
