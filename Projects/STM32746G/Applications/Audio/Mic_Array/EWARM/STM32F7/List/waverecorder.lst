###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       21/Jan/2016  18:08:47
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -Ohz --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          
      2          /* Includes ------------------------------------------------------------------*/
      3          #include "waverecorder.h" 
      4          #include "string.h"
      5          //#include "stm32f7xx_hal_spi.h"
      6          #include "stm32f7xx_hal.h"
      7          #include "pdm_filter.h"
      8          
      9          
     10          /* Private typedef -----------------------------------------------------------*/
     11          /* Private define ------------------------------------------------------------*/
     12          #define TOUCH_RECORD_XMIN       300
     13          #define TOUCH_RECORD_XMAX       340
     14          #define TOUCH_RECORD_YMIN       212
     15          #define TOUCH_RECORD_YMAX       252
     16          
     17          #define TOUCH_STOP_XMIN         205
     18          #define TOUCH_STOP_XMAX         245
     19          #define TOUCH_STOP_YMIN         212
     20          #define TOUCH_STOP_YMAX         252
     21          
     22          #define TOUCH_PAUSE_XMIN        125
     23          #define TOUCH_PAUSE_XMAX        149
     24          #define TOUCH_PAUSE_YMIN        212
     25          #define TOUCH_PAUSE_YMAX        252
     26          
     27          #define TOUCH_VOL_MINUS_XMIN    20
     28          #define TOUCH_VOL_MINUS_XMAX    70
     29          #define TOUCH_VOL_MINUS_YMIN    212
     30          #define TOUCH_VOL_MINUS_YMAX    252
     31          
     32          #define TOUCH_VOL_PLUS_XMIN     402
     33          #define TOUCH_VOL_PLUS_XMAX     452
     34          #define TOUCH_VOL_PLUS_YMIN     212
     35          #define TOUCH_VOL_PLUS_YMAX     252
     36          
     37          
     38          
     39          /* SPI Configuration defines */
     40          #define SPI_SCK_PIN                       GPIO_PIN_10
     41          #define SPI_SCK_GPIO_PORT                 GPIOB
     42          #define SPI_SCK_GPIO_CLK                  1
     43          #define SPI_SCK_SOURCE                    1
     44          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     45          
     46          #define SPI_MOSI_PIN                      GPIO_PIN_3
     47          #define SPI_MOSI_GPIO_PORT                GPIOC
     48          #define SPI_MOSI_GPIO_CLK                 1
     49          #define SPI_MOSI_SOURCE                   1
     50          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     51          
     52          
     53          /* sop1hc */
     54          #define SPI1_SCK_PIN                       GPIO_PIN_5
     55          #define SPI1_SCK_GPIO_PORT                 GPIOA
     56          #define SPI1_SCK_GPIO_CLK                  1
     57          #define SPI1_SCK_SOURCE                    1
     58          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     59          
     60          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     61          #define SPI1_MOSI_GPIO_PORT                GPIOA
     62          #define SPI1_MOSI_GPIO_CLK                 1
     63          #define SPI1_MOSI_SOURCE                   1
     64          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     65          
     66          #define SPI1_MISO_PIN                      GPIO_PIN_6
     67          #define SPI1_MISO_GPIO_PORT                GPIOA
     68          #define SPI1_MISO_GPIO_CLK                 1
     69          #define SPI1_MISO_SOURCE                   1
     70          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     71          
     72          
     73          #define AUDIO_REC_SPI1_IRQHANDLER          SPI1_IRQHandler
     74          #define AUDIO_REC_SPI2_IRQHANDLER          SPI2_IRQHandler
     75          #define AUDIO_REC_SPI3_IRQHANDLER          SPI3_IRQHandler
     76          
     77          
     78          

   \                                 In section .bss, align 4
     79          uint16_t idxMic8=0;
   \                     idxMic8:
   \   00000000                      DS8 2
     80          uint16_t idxMic7=0;
     81          uint8_t pHeaderBuff[44];
     82          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
     83          uint16_t volatile cntTransFinish;
     84          
     85          /* Private macro -------------------------------------------------------------*/
     86          /* Private variables ---------------------------------------------------------*/
     87          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     88          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     89          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     90          extern WAVE_FormatTypeDef WaveFormat;
     91          extern FIL WavFile;
     92          extern AUDIO_DEMO_StateMachine AudioDemo;
     93          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     94          extern __IO uint8_t buffer_switch;
     95          extern __IO uint8_t volume;
     96          extern SPI_HandleTypeDef hspi4;
     97          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     98          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     99          
    100          
    101          SPI_HandleTypeDef spi1_ins;
    102          SPI_HandleTypeDef spi2_ins;
    103          I2S_HandleTypeDef hi2s1;
    104          I2S_HandleTypeDef hi2s2;
    105          SPI_HandleTypeDef hspi5,hspi6;
    106          DMA_HandleTypeDef hdma_spi2_tx;
    107          DMA_HandleTypeDef hdma_spi3_tx;
    108          Mic_Array_Data Buffer1,Buffer2,Buffer3;
    109          uint16_t *bufPCMSens7;
    110          uint16_t *bufPCMSens8;
    111          __IO uint16_t cntPos;
   \                     cntPos:
   \   00000002                      DS8 2
    112          __IO uint16_t cntPos7;
    113          //static uint16_t pDataI2S2[1024];
    114          __IO static uint16_t iBuff;
    115          __IO static uint32_t uwVolume = 70;
    116          __IO PDMFilter_InitStruct Filter[2];
    117          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
   \                     pDataMic8:
   \   00000004                      DS8 128
   \                     bufPCMSens8:
   \   00000084                      DS8 4

   \                                 In section .bss, align 4
   \                     idxMic7:
   \   00000000                      DS8 2
   \                     cntPos7:
   \   00000002                      DS8 2
    118          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
   \                     pDataMic7:
   \   00000004                      DS8 128
   \                     bufPCMSens7:
   \   00000084                      DS8 4

   \                                 In section .bss, align 4
   \                     pHeaderBuff:
   \   00000000                      DS8 44

   \                                 In section .bss, align 2
   \                     cntTransFinish:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100
    119          __IO uint16_t cntStrt;
    120          uint8_t WaveRecord_flgIni;
    121          
    122          
    123          /* Private function prototypes -----------------------------------------------*/
    124          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    125          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    126          static void I2S1_Init(void);
    127          static void I2S2_Init(void);
    128          
    129          
    130          
    131          
    132          /* Private functions ---------------------------------------------------------*/
    133          

   \                                 In section .text, align 2, keep-with-next
    134          void Audio_Streaming_Ini(void)
    135          {
    136          
    137          }
   \                     Audio_Streaming_Ini: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    138          

   \                                 In section .text, align 2, keep-with-next
    139          void Audio_Streaming(void)
    140          {
   \                     Audio_Streaming: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    141          
    142          
    143          	/*------------------------------------------------------------------------------------------*/
    144          
    145          	/*-----------------------------PLAY FROM SAI------------------------------------------------*/
    146          
    147          	if(BufferCtlPlayOut.state == BUFFER_OFFSET_HALF)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable9
   \   00000006   0xF894 0x0400      LDRB     R0,[R4, #+1024]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD10A             BNE.N    ??Audio_Streaming_0
    148              {
    149          
    150          		 BufferCtlPlayOut.state = BUFFER_OFFSET_NONE;
   \   0000000E   0x2000             MOVS     R0,#+0
    151          
    152          		 //BSP_LCD_DisplayStringAtLine(18,(uint8_t *)BufferCtlPlayOut.buff);
    153          		 if (cntTransFinish==0)
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable9_1
   \   00000014   0xF884 0x0400      STRB     R0,[R4, #+1024]
   \   00000018   0x8828             LDRH     R0,[R5, #+0]
   \   0000001A   0xB950             CBNZ.N   R0,??Audio_Streaming_1
    154          		 {
    155          		     I2S_Init();
   \   0000001C   0x.... 0x....      BL       I2S_Init
    156          			 cntTransFinish = 1;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x8028             STRH     R0,[R5, #+0]
    157          		 }
    158          	
    159          	}
    160          
    161          	if(BufferCtlPlayOut.state == BUFFER_OFFSET_FULL)
   \                     ??Audio_Streaming_0: (+1)
   \   00000024   0xF894 0x0400      LDRB     R0,[R4, #+1024]
   \   00000028   0x2802             CMP      R0,#+2
   \   0000002A   0xBF04             ITT      EQ 
   \   0000002C   0x2000             MOVEQ    R0,#+0
   \   0000002E   0xF884 0x0400      STRBEQ   R0,[R4, #+1024]
    162              {
    163                   /* copy from Buffer1 to BufferCtlPlayOut */
    164                   //memcpy(&BufferCtlPlayOut.buff[0],&Buffer1.pcm_buff[0],2*AUDIO_OUT_BUFFER_SIZE);
    165          		 BufferCtlPlayOut.state = BUFFER_OFFSET_NONE;
    166          
    167          
    168          
    169                   		/*Adjust the Audio frequency */
    170                   //PlayerIni(DEFAULT_AUDIO_IN_FREQ);//WaveFormat.SampleRate
    171          				 /* Record process*/
    172                   //BSP_AUDIO_IN_Record((uint16_t*)&BufferCtlRecIn.pcm_buff[0], AUDIO_OUT_BUFFER_SIZE);    
    173          		 //BSP_LCD_DisplayStringAtLine(19,(uint8_t *)BufferCtlPlayOut.buff);
    174          	
    175          	}
    176          
    177          	/* -------------------------------------------------------------------------------------------*/
    178          	
    179          	
    180          }
   \                     ??Audio_Streaming_1: (+1)
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    181          
    182          

   \                                 In section .text, align 2, keep-with-next
    183          void SPI1_Ini(void)
    184          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    185            GPIO_InitTypeDef GPIO_InitStructure;
    186          
    187           
    188             	 
    189            /* Enable SCK, MOSI and MISO GPIO clocks */
    190            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable9_2  ;; 0x40023830
   \   00000006   0xB086             SUB      SP,SP,#+24
    191            __HAL_RCC_GPIOA_CLK_ENABLE();
    192          
    193            
    194            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    195            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    196            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    197          
    198            /* SPI SCK pin configuration */
    199            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    200            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    201            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable9_3  ;; 0x40020000
   \   0000000C   0x6941             LDR      R1,[R0, #+20]
   \   0000000E   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000012   0x6141             STR      R1,[R0, #+20]
   \   00000014   0x6941             LDR      R1,[R0, #+20]
   \   00000016   0xF401 0x5180      AND      R1,R1,#0x1000
   \   0000001A   0x9100             STR      R1,[SP, #+0]
   \   0000001C   0x9900             LDR      R1,[SP, #+0]
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000024   0x6001             STR      R1,[R0, #+0]
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xA901             ADD      R1,SP,#+4
   \   0000002A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x9800             LDR      R0,[SP, #+0]
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x9002             STR      R0,[SP, #+8]
   \   00000036   0x9003             STR      R0,[SP, #+12]
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0x9004             STR      R0,[SP, #+16]
   \   0000003C   0x2005             MOVS     R0,#+5
   \   0000003E   0x9005             STR      R0,[SP, #+20]
   \   00000040   0x2020             MOVS     R0,#+32
   \   00000042   0x.... 0x....      BL       ?Subroutine3
    202          
    203            /* SPI  MOSI pin configuration */
    204            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
    205            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    206            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   00000048   0xA901             ADD      R1,SP,#+4
   \   0000004A   0x9005             STR      R0,[SP, #+20]
   \   0000004C   0x2080             MOVS     R0,#+128
   \   0000004E   0x.... 0x....      BL       ?Subroutine3
    207          
    208            /* SPI MISO pin configuration */
    209            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000052   0x2001             MOVS     R0,#+1
    210            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    211            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   00000054   0xA901             ADD      R1,SP,#+4
   \   00000056   0x9005             STR      R0,[SP, #+20]
   \   00000058   0x2040             MOVS     R0,#+64
   \   0000005A   0x.... 0x....      BL       ?Subroutine3
    212          
    213            /* SPI configuration -------------------------------------------------------*/
    214            //SPI_I2S_DeInit(SPI1);
    215            
    216            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \                     ??CrossCallReturnLabel_4: (+1)
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   00000062   0xF44F 0x6180      MOV      R1,#+1024
   \   00000066   0x6081             STR      R1,[R0, #+8]
    217            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000068   0xF44F 0x6170      MOV      R1,#+3840
   \   0000006C   0x60C1             STR      R1,[R0, #+12]
    218            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x6101             STR      R1,[R0, #+16]
    219            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    220            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    221            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    222            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    223            spi1_ins.Init.CRCPolynomial = 7;
    224            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   00000072   0x.... 0x....      LDR.W    R4,??DataTable9_5  ;; 0x40021000
   \   00000076   0x6141             STR      R1,[R0, #+20]
   \   00000078   0xF44F 0x7100      MOV      R1,#+512
   \   0000007C   0x6181             STR      R1,[R0, #+24]
   \   0000007E   0x2128             MOVS     R1,#+40
   \   00000080   0x61C1             STR      R1,[R0, #+28]
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x6201             STR      R1,[R0, #+32]
   \   00000086   0x2107             MOVS     R1,#+7
   \   00000088   0x62C1             STR      R1,[R0, #+44]
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x6041             STR      R1,[R0, #+4]
    225            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   0000008E   0x.... 0x....      BL       HAL_SPI_Init
    226            {
    227              /* Initialization Error */
    228              //Error_Handler();
    229            }
    230            
    231           
    232            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   00000092   0x2008             MOVS     R0,#+8
    233            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    234            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    235            GPIO_InitStructure.Pull = GPIO_PULLUP;
    236            //GPIO_InitStructure.Alternate 
    237            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   00000094   0xA901             ADD      R1,SP,#+4
   \   00000096   0x9001             STR      R0,[SP, #+4]
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x9002             STR      R0,[SP, #+8]
   \   0000009C   0x2002             MOVS     R0,#+2
   \   0000009E   0x9004             STR      R0,[SP, #+16]
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0x9003             STR      R0,[SP, #+12]
   \   000000A4   0x4620             MOV      R0,R4
   \   000000A6   0x.... 0x....      BL       HAL_GPIO_Init
    238          
    239            /* Deselect : Chip Select high */
    240            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000AA   0x2201             MOVS     R2,#+1
   \   000000AC   0x2108             MOVS     R1,#+8
   \   000000AE   0x4620             MOV      R0,R4
   \   000000B0   0x.... 0x....      BL       HAL_GPIO_WritePin
    241             /* sop1hc */
    242            /* Configure the SPI interrupt priority */
    243            HAL_NVIC_SetPriority(SPI1_IRQn, 0, 1);
   \   000000B4   0x2201             MOVS     R2,#+1
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x2023             MOVS     R0,#+35
   \   000000BA   0x.... 0x....      BL       HAL_NVIC_SetPriority
    244            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000BE   0x2023             MOVS     R0,#+35
   \   000000C0   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    245            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    246            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    247          
    248            /* Enable SPI1  */
    249            //__HAL_SPI_ENABLE(SPI1);
    250          
    251          }
   \   000000C4   0xB006             ADD      SP,SP,#+24
   \   000000C6   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x9001             STR      R0,[SP, #+4]
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      B.W      HAL_GPIO_Init
    252          

   \                                 In section .text, align 2, keep-with-next
    253          void mySPI_SendData(uint8_t adress, uint8_t data)
    254          {
   \                     mySPI_SendData: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable9_4
    255           
    256          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000008   0x6829             LDR      R1,[R5, #+0]
   \   0000000A   0x6889             LDR      R1,[R1, #+8]
   \   0000000C   0x0789             LSLS     R1,R1,#+30
   \   0000000E   0xD5FB             BPL.N    ??mySPI_SendData_0
    257          SPI_I2S_SendData(SPI1, adress);
   \   00000010   0x.... 0x....      LDR.W    R6,??DataTable9_6  ;; 0x40013000
   \   00000014   0x4601             MOV      R1,R0
   \   00000016   0x4630             MOV      R0,R6
   \   00000018   0x.... 0x....      BL       SPI_I2S_SendData
   \   0000001C   0x6828             LDR      R0,[R5, #+0]
    258          
    259          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   0000001E   0x6881             LDR      R1,[R0, #+8]
   \   00000020   0x07C9             LSLS     R1,R1,#+31
   \   00000022   0xD5FC             BPL.N    ??mySPI_SendData_1
    260          SPI_I2S_ReceiveData(SPI1);
   \   00000024   0x68F1             LDR      R1,[R6, #+12]
    261          
    262          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   00000026   0x6881             LDR      R1,[R0, #+8]
   \   00000028   0x0789             LSLS     R1,R1,#+30
   \   0000002A   0xD4FC             BMI.N    ??mySPI_SendData_2
    263          SPI_I2S_SendData(SPI1, data);
   \   0000002C   0x4621             MOV      R1,R4
   \   0000002E   0x4630             MOV      R0,R6
   \   00000030   0x.... 0x....      BL       SPI_I2S_SendData
    264          
    265          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000034   0x6828             LDR      R0,[R5, #+0]
   \   00000036   0x6880             LDR      R0,[R0, #+8]
   \   00000038   0x07C0             LSLS     R0,R0,#+31
   \   0000003A   0xD4FB             BMI.N    ??mySPI_SendData_3
    266          SPI_I2S_ReceiveData(SPI1);
   \   0000003C   0x68F0             LDR      R0,[R6, #+12]
    267           
    268          }
   \   0000003E   0xBD70             POP      {R4-R6,PC}       ;; return
    269          
    270          /**
    271            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    272            * @param  None
    273            * @retval None
    274          */
    275          

   \                                 In section .text, align 2, keep-with-next
    276          void SPI1_IRQHandler(void)
    277          {  
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    278          	  static uint16_t vRawSens1,vRawSens2;	
    279          	  static int16_t stNipple;
    280          	  static uint8_t stLR,stLROld,PosShft;
    281          
    282          	  /* USER CODE BEGIN SPI5_IRQn 0 */
    283          	
    284          	  /* USER CODE END SPI5_IRQn 0 */
    285          	  //HAL_SPI_IRQHandler(&hspi5);
    286          	  /* USER CODE BEGIN SPI5_IRQn 1 */
    287          	
    288          	  /* USER CODE END SPI5_IRQn 1 */
    289          		/* Check if data are available in SPI Data register */
    290          	  /* SPI in mode Receiver ----------------------------------------------------*/
    291          	  if(
    292          	  //   (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    293          	  //   (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    294          		 (__HAL_SPI_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable9_7
   \   00000006   0x6960             LDR      R0,[R4, #+20]
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xD568             BPL.N    ??SPI1_IRQHandler_0
    295          	  {
    296          	
    297          	   uint16_t test;
    298          	   test =  SPI_I2S_ReceiveData(SPI1);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable9_8  ;; 0x4001300c
    299          	
    300          	   /* Left-Right Mic data */
    301          	   stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x6805             LDR      R5,[R0, #+0]
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x40020000
   \   0000001A   0x.... 0x....      BL       HAL_GPIO_ReadPin
    302          	
    303          		if (stLR==GPIO_PIN_SET)
   \   0000001E   0x78A1             LDRB     R1,[R4, #+2]
   \   00000020   0xB2AD             UXTH     R5,R5
   \   00000022   0xF9B4 0x300C      LDRSH    R3,[R4, #+12]
   \   00000026   0xF1C1 0x0610      RSB      R6,R1,#+16
   \   0000002A   0xFA25 0xF201      LSR      R2,R5,R1
   \   0000002E   0x40B3             LSLS     R3,R3,R6
   \   00000030   0x431A             ORRS     R2,R3,R2
   \   00000032   0x2801             CMP      R0,#+1
   \   00000034   0x7863             LDRB     R3,[R4, #+1]
   \   00000036   0xD102             BNE.N    ??SPI1_IRQHandler_1
    304          		{
    305          				if (stLROld==GPIO_PIN_RESET)
   \   00000038   0xB92B             CBNZ.N   R3,??SPI1_IRQHandler_2
    306          				{
    307          					  vRawSens1 =((test>>PosShft)|(stNipple<<(SDOLEN-PosShft)));												   
   \   0000003A   0x8122             STRH     R2,[R4, #+8]
   \   0000003C   0xE004             B.N      ??SPI1_IRQHandler_3
    308          				}
    309          				else
    310          				{
    311          					 stNipple = (test);
    312          					 //temp1 = idxSPI5DataBuf3;
    313          					 //BufferTest[temp1] =test;
    314          					 //if (idxSPI5DataBuf3<AUDIO_OUT_BUFFER_SIZE-1) idxSPI5DataBuf3++;
    315          				   
    316          				}
    317          		}
    318          		else
    319          		{
    320          			  if (stLROld==GPIO_PIN_SET)
   \                     ??SPI1_IRQHandler_1: (+1)
   \   0000003E   0x2B01             CMP      R3,#+1
   \   00000040   0xBF08             IT       EQ 
   \   00000042   0x8162             STRHEQ   R2,[R4, #+10]
    321          			  {
    322          				  vRawSens2 =((test>>PosShft)|(stNipple<<(SDOLEN-PosShft)));
   \   00000044   0xD000             BEQ.N    ??SPI1_IRQHandler_3
    323          			  }
    324          			  else
    325          			  {
    326          				  stNipple = (test);
   \                     ??SPI1_IRQHandler_2: (+1)
   \   00000046   0x81A5             STRH     R5,[R4, #+12]
    327          				  //temp1 = idxSPI5DataBuf3;
    328          				  //BufferTest[temp1] =stNipple;
    329          				  //if (idxSPI5DataBuf3<AUDIO_OUT_BUFFER_SIZE-1) idxSPI5DataBuf3++;
    330          				  
    331          				  /* Calculate the number of bits need to be shifted */
    332          				  //if (idxSPI5DataBuf3<30)
    333          				  //{
    334          				  //  for(char i=0;i<16;i++)
    335          				  //  {
    336          				  //	  if (ValBit(stNipple,i)!=0) 
    337          				  //	  {
    338          				  //			 PosShft = MAX(PosShft,i+1);
    339          				  //	  }
    340          				  //  }
    341          				  //}
    342          				  //else
    343          				  //{
    344          				  //	// This flag is TRUE when SW starts 	
    345          				  //	flgSTAIni=1;
    346          				  //}			  
    347          			  } 	
    348          		}
    349          	
    350          		 if (cntStrt==5)
   \                     ??SPI1_IRQHandler_3: (+1)
   \   00000048   0x88E2             LDRH     R2,[R4, #+6]
   \   0000004A   0x2A05             CMP      R2,#+5
   \   0000004C   0xD110             BNE.N    ??SPI1_IRQHandler_4
    351          		 {
    352          					   if ((WaveRecord_flgIni<20))
   \   0000004E   0x7822             LDRB     R2,[R4, #+0]
   \   00000050   0x2A14             CMP      R2,#+20
   \   00000052   0xDA0D             BGE.N    ??SPI1_IRQHandler_4
    353          					   {
    354          						  for(char i=0;i<20;i++)
   \   00000054   0x2200             MOVS     R2,#+0
    355          						  {
    356          							  if (ValBit(stNipple,i)!=0) 
   \                     ??SPI1_IRQHandler_5: (+1)
   \   00000056   0xF9B4 0x300C      LDRSH    R3,[R4, #+12]
   \   0000005A   0x4113             ASRS     R3,R3,R2
   \   0000005C   0x07DB             LSLS     R3,R3,#+31
   \   0000005E   0xD504             BPL.N    ??SPI1_IRQHandler_6
    357          							  {
    358          								 PosShft = MAX(PosShft,i+1);
   \   00000060   0x1C53             ADDS     R3,R2,#+1
   \   00000062   0xB2C9             UXTB     R1,R1
   \   00000064   0x428B             CMP      R3,R1
   \   00000066   0xBFA8             IT       GE 
   \   00000068   0x1C51             ADDGE    R1,R2,#+1
    359          								 //I2S2_stPosShft = 5;
    360          							  }
    361          						  }
   \                     ??SPI1_IRQHandler_6: (+1)
   \   0000006A   0x1C52             ADDS     R2,R2,#+1
   \   0000006C   0x2A14             CMP      R2,#+20
   \   0000006E   0xDBF2             BLT.N    ??SPI1_IRQHandler_5
    362          							
    363          					   }
    364          		 }
    365          		 else
    366          		 {
    367          					  
    368          		 }	  
    369          		if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE-2))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE-2)))
   \                     ??SPI1_IRQHandler_4: (+1)
   \   00000070   0x.... 0x....      LDR.W    R2,??DataTable9_9
   \   00000074   0x70A1             STRB     R1,[R4, #+2]
   \   00000076   0xF240 0x33FE      MOVW     R3,#+1022
   \   0000007A   0x8811             LDRH     R1,[R2, #+0]
   \   0000007C   0x4299             CMP      R1,R3
   \   0000007E   0xBFBE             ITTT     LT 
   \   00000080   0x.... 0x....      LDRLT.W  R1,??DataTable9_10
   \   00000084   0x880D             LDRHLT   R5,[R1, #+0]
   \   00000086   0x429D             CMPLT    R5,R3
   \   00000088   0xDA29             BGE.N    ??SPI1_IRQHandler_7
    370          	//			  &&(stLR!=stLROld))
    371          		{
    372          	/*-------------------------------------------------------------------------------------------------------------
    373          				  
    374          		Sequence  Record Data					  Processing Data				  Player Data
    375          				  
    376          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    377          				  
    378          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    379          				  
    380          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    381          	 ---------------------------------------------------------------------------------------------------------------*/
    382          				  /* Recording Audio Data */						 
    383          				   switch (buffer_switch)
   \   0000008A   0x.... 0x....      LDR.W    R7,??DataTable9_11
   \   0000008E   0x8963             LDRH     R3,[R4, #+10]
   \   00000090   0x8926             LDRH     R6,[R4, #+8]
   \   00000092   0x.... 0x....      LDR.W    R5,??DataTable9_12
   \   00000096   0x783F             LDRB     R7,[R7, #+0]
   \   00000098   0xB11F             CBZ.N    R7,??SPI1_IRQHandler_8
   \   0000009A   0x2F02             CMP      R7,#+2
   \   0000009C   0xD014             BEQ.N    ??SPI1_IRQHandler_9
   \   0000009E   0xD309             BCC.N    ??SPI1_IRQHandler_10
   \   000000A0   0xE01D             B.N      ??SPI1_IRQHandler_7
    384          				   {
    385          							case BUF1_PLAY:
    386          #if MAIN_FFT
    387          									//Data is updated to Buffer2
    388          									if ((stLR==GPIO_PIN_SET)&&(stLROld==GPIO_PIN_RESET))
    389          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    390          									if ((stLR==GPIO_PIN_RESET)&&(stLROld==GPIO_PIN_SET))
    391          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
    392          	
    393          #else
    394          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??SPI1_IRQHandler_8: (+1)
   \   000000A2   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_13: (+1)
   \   000000A6   0xF243 0x0778      MOVW     R7,#+12408
   \   000000AA   0x.... 0x....      BL       ?Subroutine5
    395          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \                     ??CrossCallReturnLabel_10: (+1)
   \   000000AE   0xF643 0x028C      MOVW     R2,#+14476
   \   000000B2   0xE007             B.N      ??SPI1_IRQHandler_11
    396          #endif
    397          	
    398          									break;
    399          							case BUF2_PLAY:
    400          #if MAIN_FFT
    401          									//Data is updated to Buffer3				 
    402          									if ((stLR==GPIO_PIN_SET)&&(stLROld==GPIO_PIN_RESET))
    403          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    404          									if ((stLR==GPIO_PIN_RESET)&&(stLROld==GPIO_PIN_SET))
    405          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
    406          #else
    407          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??SPI1_IRQHandler_10: (+1)
   \   000000B4   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_14: (+1)
   \   000000B8   0xF246 0x07F0      MOVW     R7,#+24816
   \   000000BC   0x.... 0x....      BL       ?Subroutine5
    408          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \                     ??CrossCallReturnLabel_11: (+1)
   \   000000C0   0xF646 0x1204      MOVW     R2,#+26884
   \                     ??SPI1_IRQHandler_11: (+1)
   \   000000C4   0x5253             STRH     R3,[R2, R1]
    409          	
    410          #endif
    411          									break;
   \   000000C6   0xE00A             B.N      ??SPI1_IRQHandler_7
    412          							case BUF3_PLAY:
    413          #if MAIN_FFT
    414          	
    415          									//Data is update to Buffer1 	 
    416          									if ((stLR==GPIO_PIN_SET)&&(stLROld==GPIO_PIN_RESET))
    417          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    418          									if ((stLR==GPIO_PIN_RESET)&&(stLROld==GPIO_PIN_SET))
    419          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
    420          #else
    421          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??SPI1_IRQHandler_9: (+1)
   \   000000C8   0x8817             LDRH     R7,[R2, #+0]
   \   000000CA   0xF107 0x0C01      ADD      R12,R7,#+1
   \   000000CE   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   000000D2   0xF825 0x6017      STRH     R6,[R5, R7, LSL #+1]
    422          									Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   000000D6   0x.... 0x....      BL       ??Subroutine5_0
   \                     ??CrossCallReturnLabel_12: (+1)
   \   000000DA   0xF8A1 0x3814      STRH     R3,[R1, #+2068]
    423          #endif
    424          									break;
    425          							default:
    426          									break; 
    427          				   }
    428          			
    429          		 } 
    430          		
    431          		/* Update Old value */	  
    432          		stLROld=stLR;	  
   \                     ??SPI1_IRQHandler_7: (+1)
   \   000000DE   0x7060             STRB     R0,[R4, #+1]
    433          		 
    434          	  } 	 
    435          
    436          }
   \                     ??SPI1_IRQHandler_0: (+1)
   \   000000E0   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0x8817             LDRH     R7,[R2, #+0]
   \   00000002   0xF107 0x0C01      ADD      R12,R7,#+1
   \   00000006   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   0000000A   0xEB05 0x0247      ADD      R2,R5,R7, LSL #+1
   \   0000000E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x52BE             STRH     R6,[R7, R2]
   \                     ??Subroutine5_0: (+1)
   \   00000002   0x880A             LDRH     R2,[R1, #+0]
   \   00000004   0x1C56             ADDS     R6,R2,#+1
   \   00000006   0x800E             STRH     R6,[R1, #+0]
   \   00000008   0xEB05 0x0142      ADD      R1,R5,R2, LSL #+1
   \   0000000C   0x4770             BX       LR
    437          
    438          
    439          /**
    440            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    441            * @param  None
    442            * @retval None
    443          */
    444          

   \                                 In section .text, align 2, keep-with-next
    445          void SPI2_IRQHandler(void)
    446          {      
    447              uint16_t app;
    448              static uint16_t vRawSens3,vRawSens4;
    449              static int16_t I2S2_stNipple;
    450              static uint8_t I2S2_stLR, I2S2_stLROld, I2S2_stPosShft;
    451          
    452            /* Check if data are available in SPI Data register */
    453             if (
    454             	    //(__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    455             	    (__HAL_SPI_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    456             	  )
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable9_13
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x0640             LSLS     R0,R0,#+25
   \   00000008   0xD400             BMI.N    ??SPI2_IRQHandler_0
   \   0000000A   0x4770             BX       LR
    457             {
    458              
    459               app = SPI_I2S_ReceiveData(SPI2);   
    460               //SPI_I2S_SendData(SPI2, 3333);
    461          
    462          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \                     ??SPI2_IRQHandler_0: (+1)
   \   0000000C   0x2110             MOVS     R1,#+16
   \   0000000E   0x....             LDR.N    R0,??DataTable9_14  ;; 0x4000380c
   \   00000010   0xB5F8             PUSH     {R3-R7,LR}
   \   00000012   0x6804             LDR      R4,[R0, #+0]
   \   00000014   0x....             LDR.N    R0,??DataTable9_3  ;; 0x40020000
   \   00000016   0x.... 0x....      BL       HAL_GPIO_ReadPin
    463          
    464          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   0000001A   0x....             LDR.N    R1,??DataTable9_7
   \   0000001C   0xB2A4             UXTH     R4,R4
   \   0000001E   0x790A             LDRB     R2,[R1, #+4]
   \   00000020   0xF9B1 0x5012      LDRSH    R5,[R1, #+18]
   \   00000024   0xF1C2 0x0610      RSB      R6,R2,#+16
   \   00000028   0xFA24 0xF302      LSR      R3,R4,R2
   \   0000002C   0x40B5             LSLS     R5,R5,R6
   \   0000002E   0x432B             ORRS     R3,R5,R3
   \   00000030   0x2801             CMP      R0,#+1
   \   00000032   0x78CD             LDRB     R5,[R1, #+3]
   \   00000034   0xD102             BNE.N    ??SPI2_IRQHandler_1
    465          	 {
    466                  if (I2S2_stLROld==GPIO_PIN_RESET)
   \   00000036   0xB92D             CBNZ.N   R5,??SPI2_IRQHandler_2
    467                  {
    468                      vRawSens3= ((app>>I2S2_stPosShft)|(I2S2_stNipple<<(SDOLEN-I2S2_stPosShft)));
   \   00000038   0x81CB             STRH     R3,[R1, #+14]
   \   0000003A   0xE004             B.N      ??SPI2_IRQHandler_3
    469                  }
    470          		else
    471          		{
    472                      I2S2_stNipple = app;
    473          			//temp = I2S2_idxTmp;
    474                      //pDataI2S2_3[temp]= I2S2_stNipple;
    475          			//if(I2S2_idxTmp < AUDIO_OUT_BUFFER_SIZE-1) I2S2_idxTmp++;
    476          
    477          		}
    478          	 }
    479          	 else
    480          	 {
    481                  if (I2S2_stLROld==GPIO_PIN_SET)
   \                     ??SPI2_IRQHandler_1: (+1)
   \   0000003C   0x2D01             CMP      R5,#+1
   \   0000003E   0xBF08             IT       EQ 
   \   00000040   0x820B             STRHEQ   R3,[R1, #+16]
    482                  {
    483                      vRawSens4 =((app>>I2S2_stPosShft)|(I2S2_stNipple<<(SDOLEN-I2S2_stPosShft)));
   \   00000042   0xD000             BEQ.N    ??SPI2_IRQHandler_3
    484                  }
    485          		else
    486          		{
    487                      I2S2_stNipple = app;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   00000044   0x824C             STRH     R4,[R1, #+18]
    488          			//temp = I2S2_idxTmp;
    489                      //pDataI2S2_3[temp]= I2S2_stNipple;
    490          			//if(I2S2_idxTmp < AUDIO_OUT_BUFFER_SIZE-1) I2S2_idxTmp++;
    491          		
    492          		}
    493          	 }
    494          
    495          
    496          	 if (cntStrt==5)
   \                     ??SPI2_IRQHandler_3: (+1)
   \   00000046   0x88CB             LDRH     R3,[R1, #+6]
   \   00000048   0x2B05             CMP      R3,#+5
   \   0000004A   0xD112             BNE.N    ??SPI2_IRQHandler_4
    497          	 {
    498                             if ((WaveRecord_flgIni<20))
   \   0000004C   0x780B             LDRB     R3,[R1, #+0]
   \   0000004E   0x2B14             CMP      R3,#+20
   \   00000050   0xDA0D             BGE.N    ??SPI2_IRQHandler_5
    499                             {
    500                                for(char i=0;i<10;i++)
   \   00000052   0x2400             MOVS     R4,#+0
    501                                {
    502                                    if (ValBit(I2S2_stNipple,i)!=0) 
   \                     ??SPI2_IRQHandler_6: (+1)
   \   00000054   0xF9B1 0x5012      LDRSH    R5,[R1, #+18]
   \   00000058   0x4125             ASRS     R5,R5,R4
   \   0000005A   0x07ED             LSLS     R5,R5,#+31
   \   0000005C   0xD504             BPL.N    ??SPI2_IRQHandler_7
    503                                    {
    504                                       I2S2_stPosShft = MAX(I2S2_stPosShft,i+1);
   \   0000005E   0x1C65             ADDS     R5,R4,#+1
   \   00000060   0xB2D2             UXTB     R2,R2
   \   00000062   0x4295             CMP      R5,R2
   \   00000064   0xBFA8             IT       GE 
   \   00000066   0x1C62             ADDGE    R2,R4,#+1
    505                                       //I2S2_stPosShft = 5;
    506                                    }
    507                                }
   \                     ??SPI2_IRQHandler_7: (+1)
   \   00000068   0x1C64             ADDS     R4,R4,#+1
   \   0000006A   0x2C0A             CMP      R4,#+10
   \   0000006C   0xDBF2             BLT.N    ??SPI2_IRQHandler_6
    508                                  
    509                             }
    510          		  WaveRecord_flgIni++;
   \                     ??SPI2_IRQHandler_5: (+1)
   \   0000006E   0x1C5B             ADDS     R3,R3,#+1
   \   00000070   0x700B             STRB     R3,[R1, #+0]
    511          	 }
    512          	 else
    513          	 {
    514               	          //WaveRecord_flgIni=0;
    515          	 }
    516          	 
    517          
    518          	 if ((WaveRec_idxSens3 < (AUDIO_OUT_BUFFER_SIZE-1))&&(WaveRec_idxSens4 < (AUDIO_OUT_BUFFER_SIZE-1)))
   \                     ??SPI2_IRQHandler_4: (+1)
   \   00000072   0x....             LDR.N    R3,??DataTable9_15
   \   00000074   0x710A             STRB     R2,[R1, #+4]
   \   00000076   0xF240 0x34FF      MOVW     R4,#+1023
   \   0000007A   0x881A             LDRH     R2,[R3, #+0]
   \   0000007C   0x42A2             CMP      R2,R4
   \   0000007E   0xBFBE             ITTT     LT 
   \   00000080   0x....             LDRLT.N  R2,??DataTable9_16
   \   00000082   0x8815             LDRHLT   R5,[R2, #+0]
   \   00000084   0x42A5             CMPLT    R5,R4
   \   00000086   0xDA24             BGE.N    ??SPI2_IRQHandler_8
    519          //             &&(I2S2_stLR!=I2S2_stLROld))
    520          	 {
    521          /*-------------------------------------------------------------------------------------------------------------
    522          			  
    523          	Sequence  Record Data                     Processing Data                 Player Data
    524          			  
    525          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    526          			  
    527          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    528          			  
    529          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    530           ---------------------------------------------------------------------------------------------------------------*/
    531          		/* Recording Audio Data */			             
    532          		 switch (buffer_switch)
   \   00000088   0x....             LDR.N    R7,??DataTable9_11
   \   0000008A   0x8A0C             LDRH     R4,[R1, #+16]
   \   0000008C   0x89CE             LDRH     R6,[R1, #+14]
   \   0000008E   0x....             LDR.N    R5,??DataTable9_12
   \   00000090   0x783F             LDRB     R7,[R7, #+0]
   \   00000092   0xB11F             CBZ.N    R7,??SPI2_IRQHandler_9
   \   00000094   0x2F02             CMP      R7,#+2
   \   00000096   0xD013             BEQ.N    ??SPI2_IRQHandler_10
   \   00000098   0xD309             BCC.N    ??SPI2_IRQHandler_11
   \   0000009A   0xE01A             B.N      ??SPI2_IRQHandler_8
    533          		 {
    534          			  case BUF1_PLAY:
    535          				  //Data is updated to Buffer2
    536          				  //PDM_Filter_64_LSB((uint8_t *)InternalBuffer, (uint16_t *)(buffer2+cntPos*PCM_OUT_SIZE), volume , (PDMFilter_InitStruct *)&Filter[0]);
    537          #if MAIN_FFT
    538          				  if ((I2S2_stLR==GPIO_PIN_SET)&&(I2S2_stLROld==GPIO_PIN_RESET))
    539          				      Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    540          				  if ((I2S2_stLR==GPIO_PIN_RESET)&&(I2S2_stLROld==GPIO_PIN_SET))
    541          				      Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    542          #else
    543                            Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \                     ??SPI2_IRQHandler_9: (+1)
   \   0000009C   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_7: (+1)
   \   000000A0   0xF244 0x07A0      MOVW     R7,#+16544
   \   000000A4   0x.... 0x....      BL       ?Subroutine7
    544                            Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \                     ??CrossCallReturnLabel_15: (+1)
   \   000000A8   0xF644 0x03B4      MOVW     R3,#+18612
   \   000000AC   0xE010             B.N      ??SPI2_IRQHandler_12
    545          #endif 
    546          				  break;
    547          			  case BUF2_PLAY:
    548          				  //Data is updated to Buffer3
    549          				  //PDM_Filter_64_LSB((uint8_t *)InternalBuffer, (uint16_t *)(buffer3+cntPos*PCM_OUT_SIZE), volume , (PDMFilter_InitStruct *)&Filter[0]);
    550          #if MAIN_FFT
    551          				  if ((I2S2_stLR==GPIO_PIN_SET)&&(I2S2_stLROld==GPIO_PIN_RESET))
    552          				      Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    553          				  if ((I2S2_stLR==GPIO_PIN_RESET)&&(I2S2_stLROld==GPIO_PIN_SET))
    554          				      Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    555          #else
    556                             Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \                     ??SPI2_IRQHandler_11: (+1)
   \   000000AE   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_8: (+1)
   \   000000B2   0xF247 0x1718      MOVW     R7,#+28952
   \   000000B6   0x.... 0x....      BL       ?Subroutine7
    557                             Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \                     ??CrossCallReturnLabel_16: (+1)
   \   000000BA   0xF647 0x132C      MOVW     R3,#+31020
   \   000000BE   0xE007             B.N      ??SPI2_IRQHandler_12
    558          #endif
    559          				  break;
    560          			  case BUF3_PLAY:
    561          				  //Data is update to Buffer1
    562          				  //PDM_Filter_64_LSB((uint8_t *)InternalBuffer, (uint16_t *)(buffer1+cntPos*PCM_OUT_SIZE), volume , (PDMFilter_InitStruct *)&Filter[0]);
    563          #if MAIN_FFT
    564          				  if ((I2S2_stLR==GPIO_PIN_SET)&&(I2S2_stLROld==GPIO_PIN_RESET))
    565               				  Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    566            				  if ((I2S2_stLR==GPIO_PIN_RESET)&&(I2S2_stLROld==GPIO_PIN_SET))
    567               				  Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
    568          #else
    569                            Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \                     ??SPI2_IRQHandler_10: (+1)
   \   000000C0   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_9: (+1)
   \   000000C4   0xF241 0x0728      MOVW     R7,#+4136
   \   000000C8   0x.... 0x....      BL       ?Subroutine7
    570                            Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \                     ??CrossCallReturnLabel_17: (+1)
   \   000000CC   0xF641 0x033C      MOVW     R3,#+6204
   \                     ??SPI2_IRQHandler_12: (+1)
   \   000000D0   0x529C             STRH     R4,[R3, R2]
    571          
    572          #endif
    573          				  break;
    574          			  default:
    575          				  break; 
    576          		 }
    577          		
    578          	 }          
    579          		  
    580          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_8: (+1)
   \   000000D2   0x70C8             STRB     R0,[R1, #+3]
    581          
    582             }
    583          
    584          }
   \   000000D4   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0x52FE             STRH     R6,[R7, R3]
   \   00000002   0x8813             LDRH     R3,[R2, #+0]
   \   00000004   0x1C5E             ADDS     R6,R3,#+1
   \   00000006   0x8016             STRH     R6,[R2, #+0]
   \   00000008   0xEB05 0x0243      ADD      R2,R5,R3, LSL #+1
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x881F             LDRH     R7,[R3, #+0]
   \   00000002   0xF107 0x0C01      ADD      R12,R7,#+1
   \   00000006   0xF8A3 0xC000      STRH     R12,[R3, #+0]
   \   0000000A   0xEB05 0x0347      ADD      R3,R5,R7, LSL #+1
   \   0000000E   0x4770             BX       LR

   \                                 In section .bss, align 4
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 1
   \   00000003                      DS8 1
   \   00000004                      DS8 1
   \   00000005                      DS8 1
   \                     cntStrt:
   \   00000006                      DS8 2
   \   00000008                      DS8 2
   \   0000000A                      DS8 2
   \   0000000C                      DS8 2
   \   0000000E                      DS8 2
   \   00000010                      DS8 2
   \   00000012                      DS8 2
   \                     hi2s1:
   \   00000014                      DS8 64

   \                                 In section .bss, align 4
   \                     hi2s2:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
   \                     hspi5:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi6:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hdma_spi2_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi3_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     Buffer1:
   \   00000000                      DS8 12408
   \                     Buffer2:
   \   00003078                      DS8 12408
   \                     Buffer3:
   \   000060F0                      DS8 12408

   \                                 In section .bss, align 4
   \                     Filter:
   \   00000000                      DS8 104

   \                                 In section .bss, align 1
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \   00000000                      DS8 1
    585          
    586          
    587          
    588          
    589          
    590          
    591          
    592          

   \                                 In section .text, align 2, keep-with-next
    593          void I2S_Init(void)
    594          {
   \                     I2S_Init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    595            I2S1_Init();
   \   00000002   0x....             LDR.N    R4,??DataTable9_7
   \   00000004   0x....             LDR.N    R0,??DataTable9_6  ;; 0x40013000
   \   00000006   0x6160             STR      R0,[R4, #+20]
   \   00000008   0xF44F 0x7080      MOV      R0,#+256
   \   0000000C   0x61A0             STR      R0,[R4, #+24]
   \   0000000E   0x2020             MOVS     R0,#+32
   \   00000010   0x61E0             STR      R0,[R4, #+28]
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x6220             STR      R0,[R4, #+32]
   \   00000016   0xF44F 0x557A      MOV      R5,#+16000
   \   0000001A   0x6260             STR      R0,[R4, #+36]
   \   0000001C   0x62E0             STR      R0,[R4, #+44]
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x6320             STR      R0,[R4, #+48]
   \   00000022   0xF104 0x0014      ADD      R0,R4,#+20
   \   00000026   0x62A5             STR      R5,[R4, #+40]
   \   00000028   0x.... 0x....      BL       HAL_I2S_Init
   \   0000002C   0x6960             LDR      R0,[R4, #+20]
    596            I2S2_Init(); //-->DISCOVERY BOARD: PI_1:LED
   \   0000002E   0x....             LDR.N    R4,??DataTable9_13
   \   00000030   0x6841             LDR      R1,[R0, #+4]
   \   00000032   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000036   0x6041             STR      R1,[R0, #+4]
   \   00000038   0x69C1             LDR      R1,[R0, #+28]
   \   0000003A   0xF441 0x6180      ORR      R1,R1,#0x400
   \   0000003E   0x61C1             STR      R1,[R0, #+28]
   \   00000040   0x....             LDR.N    R0,??DataTable9_17  ;; 0x40003800
   \   00000042   0x6020             STR      R0,[R4, #+0]
   \   00000044   0xF44F 0x7040      MOV      R0,#+768
   \   00000048   0x6060             STR      R0,[R4, #+4]
   \   0000004A   0x2020             MOVS     R0,#+32
   \   0000004C   0x60A0             STR      R0,[R4, #+8]
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x60E0             STR      R0,[R4, #+12]
   \   00000052   0x6120             STR      R0,[R4, #+16]
   \   00000054   0x61A0             STR      R0,[R4, #+24]
   \   00000056   0x2002             MOVS     R0,#+2
   \   00000058   0x61E0             STR      R0,[R4, #+28]
   \   0000005A   0x4620             MOV      R0,R4
   \   0000005C   0x6165             STR      R5,[R4, #+20]
   \   0000005E   0x.... 0x....      BL       HAL_I2S_Init
   \   00000062   0x6820             LDR      R0,[R4, #+0]
   \   00000064   0x69C1             LDR      R1,[R0, #+28]
   \   00000066   0xF441 0x6180      ORR      R1,R1,#0x400
   \   0000006A   0x61C1             STR      R1,[R0, #+28]
    597            //I2S3_Init(); --> Play out
    598          
    599          }
   \   0000006C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    600          
    601          

   \                                 In section .text, align 2, keep-with-next
    602          void I2S_Proc(void)
    603          {
    604          
    605              //uint16_t Size_I2S2=128;
    606          	//uint32_t TimeOut=100;
    607          
    608              /* Read from I2S1 */
    609              //HAL_I2S_Receive(&hi2s2,pDataI2S2,Size_I2S2,TimeOut);
    610              //HAL_I2S_Receive_IT(&hi2s2,pDataI2S2,Size_I2S2);
    611            
    612          
    613              /* Read from I2S2 */
    614          
    615              /* Read from I2S3 */
    616          
    617              /* LCD show */
    618          
    619          
    620          }
   \                     I2S_Proc: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    621          
    622          
    623          
    624          /** Pinout Configuration
    625          */

   \                                 In section .text, align 2, keep-with-next
    626          void GPIO_CLK_Init(void)
    627          {
    628          
    629            /* GPIO Ports Clock Enable */
    630            __GPIOE_CLK_ENABLE();
   \                     GPIO_CLK_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable9_2  ;; 0x40023830
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0xF041 0x0110      ORR      R1,R1,#0x10
   \   0000000A   0x6001             STR      R1,[R0, #+0]
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0xF001 0x0110      AND      R1,R1,#0x10
   \   00000012   0x9100             STR      R1,[SP, #+0]
   \   00000014   0x9900             LDR      R1,[SP, #+0]
    631            __GPIOC_CLK_ENABLE();
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   \   00000018   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000001C   0x6001             STR      R1,[R0, #+0]
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0xF001 0x0104      AND      R1,R1,#0x4
   \   00000024   0x9100             STR      R1,[SP, #+0]
   \   00000026   0x9900             LDR      R1,[SP, #+0]
    632            __GPIOA_CLK_ENABLE();
   \   00000028   0x6801             LDR      R1,[R0, #+0]
   \   0000002A   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000002E   0x6001             STR      R1,[R0, #+0]
   \   00000030   0x6801             LDR      R1,[R0, #+0]
   \   00000032   0xF001 0x0101      AND      R1,R1,#0x1
   \   00000036   0x9100             STR      R1,[SP, #+0]
   \   00000038   0x9900             LDR      R1,[SP, #+0]
    633            __GPIOB_CLK_ENABLE();
   \   0000003A   0x6801             LDR      R1,[R0, #+0]
   \   0000003C   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000040   0x6001             STR      R1,[R0, #+0]
   \   00000042   0x6801             LDR      R1,[R0, #+0]
   \   00000044   0xF001 0x0102      AND      R1,R1,#0x2
   \   00000048   0x9100             STR      R1,[SP, #+0]
   \   0000004A   0x9900             LDR      R1,[SP, #+0]
    634            __GPIOI_CLK_ENABLE();
   \   0000004C   0x6801             LDR      R1,[R0, #+0]
   \   0000004E   0xF441 0x7180      ORR      R1,R1,#0x100
   \   00000052   0x6001             STR      R1,[R0, #+0]
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0xF400 0x7080      AND      R0,R0,#0x100
   \   0000005A   0x9000             STR      R0,[SP, #+0]
   \   0000005C   0x9800             LDR      R0,[SP, #+0]
    635          
    636          }
   \   0000005E   0xB001             ADD      SP,SP,#+4
   \   00000060   0x4770             BX       LR               ;; return
    637          
    638          
    639          
    640          /* I2S1 init function */
    641          /* Read data of MIC12 */
    642          static void I2S1_Init(void)
    643          {
    644          
    645            hi2s1.Instance = SPI1;
    646            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
    647            hi2s1.Init.Standard = I2S_STANDARD_LSB;
    648            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    649            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    650            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    651            hi2s1.Init.CPOL = I2S_CPOL_LOW;
    652            hi2s1.Init.ClockSource = I2S_CLOCK_SYSCLK;
    653            HAL_I2S_Init(&hi2s1);
    654          
    655               /* Enable TXE and ERR interrupt */
    656           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
    657           
    658           __HAL_I2S_ENABLE(&hi2s1);
    659          }
    660          
    661          /* I2S2 init function */
    662          /* Read data of MIC34 */
    663          
    664          static void I2S2_Init(void)
    665          {
    666            //HAL_I2S_DeInit(&hi2s2);
    667            hi2s2.Instance = SPI2;
    668            hi2s2.Init.Mode = I2S_MODE_MASTER_RX;//I2S_MODE_MASTER_RX
    669            hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
    670            hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
    671            hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    672            hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    673            hi2s2.Init.CPOL = I2S_CPOL_LOW;
    674            hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
    675          
    676            HAL_I2S_Init(&hi2s2);
    677             /* Enable TXE and ERR interrupt */
    678           //__HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
    679           
    680           __HAL_I2S_ENABLE(&hi2s2);
    681          
    682          }
    683          
    684          

   \                                 In section .text, align 2, keep-with-next
    685          void Mic7Rec(void)
    686          {
    687              MX_SPI5_Init();
   \                     Mic7Rec: (+1)
   \   00000000   0x....             B.N      MX_SPI5_Init
    688          }
    689          

   \                                 In section .text, align 2, keep-with-next
    690          void Mic8Rec(void)
    691          {
    692              MX_SPI6_Init();
   \                     Mic8Rec: (+1)
   \   00000000   0x....             B.N      MX_SPI6_Init
    693          }
    694          
    695          
    696          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    697          void MX_SPI5_Init(void)
    698          {
    699          	
    700              /* Enable CRC module */
    701              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \                     MX_SPI5_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable9_2  ;; 0x40023830
   \   00000002   0xB510             PUSH     {R4,LR}
   \   00000004   0x6801             LDR      R1,[R0, #+0]
    702          	for (char i=0; i< 1; i++)
    703          	{
    704          		/* Filter LP & HP Init */
    705          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
    706          		Filter[i].HP_HZ = 10;
    707          		Filter[i].Fs = 16000;    //sop1hc: 16000
    708          		Filter[i].Out_MicChannels = 1;
    709          		Filter[i].In_MicChannels = 1;
   \   00000006   0x....             LDR.N    R4,??DataTable9_18
   \   00000008   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   0000000C   0x6001             STR      R1,[R0, #+0]
   \   0000000E   0x....             LDR.N    R0,??DataTable9_19
   \   00000010   0x....             LDR.N    R1,??DataTable9_20  ;; 0x45fa0000
   \   00000012   0x6041             STR      R1,[R0, #+4]
   \   00000014   0x....             LDR.N    R1,??DataTable9_21  ;; 0x41200000
   \   00000016   0x6081             STR      R1,[R0, #+8]
   \   00000018   0xF44F 0x517A      MOV      R1,#+16000
   \   0000001C   0x8001             STRH     R1,[R0, #+0]
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x81C1             STRH     R1,[R0, #+14]
   \   00000022   0x8181             STRH     R1,[R0, #+12]
    710          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   00000024   0x.... 0x....      BL       PDM_Filter_Init
    711          	}
    712          
    713          
    714            hspi5.Instance = SPI5;
   \   00000028   0x....             LDR.N    R0,??DataTable9_22  ;; 0x40015000
   \   0000002A   0x6020             STR      R0,[R4, #+0]
    715            hspi5.Init.Mode = SPI_MODE_MASTER;
   \   0000002C   0xF44F 0x7082      MOV      R0,#+260
   \   00000030   0x6060             STR      R0,[R4, #+4]
    716            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000032   0xF44F 0x6080      MOV      R0,#+1024
   \   00000036   0x....             B.N      ?Subroutine0
    717            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
    718            hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
    719            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
    720            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    721            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
    722            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
    723            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    724            hspi5.Init.CRCPolynomial = 7;
    725            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    726            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    727            //hspi5.RxISR = SPI5_CallBack;
    728            HAL_SPI_Init(&hspi5);
    729          
    730          
    731            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    732            /* Enable TXE, RXNE and ERR interrupt */
    733           __HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
    734          
    735           __HAL_SPI_ENABLE(&hspi5);
    736          
    737          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x60A0             STR      R0,[R4, #+8]
   \   00000002   0xF44F 0x6070      MOV      R0,#+3840
   \   00000006   0x60E0             STR      R0,[R4, #+12]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x6120             STR      R0,[R4, #+16]
   \   0000000C   0x6160             STR      R0,[R4, #+20]
   \   0000000E   0xF44F 0x7000      MOV      R0,#+512
   \   00000012   0x61A0             STR      R0,[R4, #+24]
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x6220             STR      R0,[R4, #+32]
   \   00000018   0x6260             STR      R0,[R4, #+36]
   \   0000001A   0x62A0             STR      R0,[R4, #+40]
   \   0000001C   0x2007             MOVS     R0,#+7
   \   0000001E   0x62E0             STR      R0,[R4, #+44]
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6320             STR      R0,[R4, #+48]
   \   00000024   0x6360             STR      R0,[R4, #+52]
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       HAL_SPI_Init
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x6841             LDR      R1,[R0, #+4]
   \   00000030   0xF041 0x0160      ORR      R1,R1,#0x60
   \   00000034   0x6041             STR      R1,[R0, #+4]
   \   00000036   0x6801             LDR      R1,[R0, #+0]
   \   00000038   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000003C   0x6001             STR      R1,[R0, #+0]
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    738          
    739          

   \                                 In section .text, align 2, keep-with-next
    740          void SPI5_IRQHandler(void)
    741          {
    742            //static uint16_t stNipple;
    743            //static uint8_t stLR, stOder;
    744          
    745            /* USER CODE BEGIN SPI5_IRQn 0 */
    746          
    747            /* USER CODE END SPI5_IRQn 0 */
    748            //HAL_SPI_IRQHandler(&hspi5);
    749            /* USER CODE BEGIN SPI5_IRQn 1 */
    750          
    751            /* USER CODE END SPI5_IRQn 1 */
    752              /* Check if data are available in SPI Data register */
    753            /* SPI in mode Receiver ----------------------------------------------------*/
    754            if(
    755               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    756               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    757               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable9_18
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6881             LDR      R1,[R0, #+8]
   \   00000006   0x0649             LSLS     R1,R1,#+25
   \   00000008   0xD500             BPL.N    ??SPI5_IRQHandler_0
   \   0000000A   0x4770             BX       LR
   \                     ??SPI5_IRQHandler_0: (+1)
   \   0000000C   0xB510             PUSH     {R4,LR}
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD517             BPL.N    ??SPI5_IRQHandler_1
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD514             BPL.N    ??SPI5_IRQHandler_1
    758            {
    759          
    760          
    761             uint16_t test;
    762             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x....             LDR.N    R0,??DataTable9_23  ;; 0x4001500c
    763             SPI5->DR = 3333;
   \   0000001C   0xF640 0x5205      MOVW     R2,#+3333
    764             //SPI_I2S_SendData(SPI5,0);
    765             //BSP_LED_Toggle(LED1);
    766             //if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==GPIO_PIN_SET)
    767          #if 0
    768                stOder^=0x01;
    769                if(stOder==0x00)
    770                {
    771          
    772                    //BSP_LED_On(LED1);  
    773                    stLR^=0x01;
    774                    if (stLR==0x01)
    775                    {
    776                      if (stkBuffer1.offset + idxSPI5DataBuf1 < AUDIO_OUT_BUFFER_SIZE-2) 
    777                      {
    778                         stkBuffer1.pcm_buff[stkBuffer1.offset + idxSPI5DataBuf1++] =((test>>4)|(stNipple<<12));
    779                                     stkBuffer1.pcm_buff[stkBuffer1.offset + idxSPI5DataBuf1++] =((test>>4)|(stNipple<<12));
    780                      }
    781                    }
    782                    else
    783                    {
    784                       if (stkBuffer2.offset + idxSPI5DataBuf2 < AUDIO_OUT_BUFFER_SIZE-2)
    785                       {
    786                         stkBuffer2.pcm_buff[stkBuffer2.offset + idxSPI5DataBuf2++] = ((test>>4)|(stNipple<<12));
    787                                     stkBuffer2.pcm_buff[stkBuffer2.offset + idxSPI5DataBuf2++] = ((test>>4)|(stNipple<<12));
    788                       }
    789          
    790                    }
    791          			  
    792                }
    793          	  else
    794          	  {
    795          	      //stkBuffer1.pcm_buff[idxSPI5DataBuf++] = 0;
    796          	      //BSP_LED_Off(LED1);  
    797                     stNipple = (test);
    798          		  stkBuffer3.pcm_buff[stkBuffer2.offset + idxSPI5DataBuf2] = stNipple;
    799          	  }
    800          
    801          
    802          	  
    803             	}
    804              //else
    805              {
    806               // BSP_LED_Off(LED1);
    807              }
    808          #endif 
    809            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000020   0x....             LDR.N    R4,??DataTable9_24
   \   00000022   0x.... 0x....      BL       ?Subroutine1
    810            
    811            //volume = 64;
    812            
    813            if (idxMic8>=64)
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000026   0xDB0D             BLT.N    ??SPI5_IRQHandler_1
    814            {
    815          	if (buffer_switch != 1)
   \   00000028   0x....             LDR.N    R2,??DataTable9_11
   \   0000002A   0xF8D4 0x0084      LDR      R0,[R4, #+132]
   \   0000002E   0x....             LDR.N    R1,??DataTable9_25
   \   00000030   0x....             LDR.N    R3,??DataTable9_19
   \   00000032   0x7812             LDRB     R2,[R2, #+0]
   \   00000034   0x780A             LDRB     R2,[R1, #+0]
   \   00000036   0x.... 0x....      BL       ?Subroutine8
    816          	{
    817          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    818          						  (PDMFilter_InitStruct *)&Filter[0]);
    819          	}
    820          	else
    821          	{
    822          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    823          						  (PDMFilter_InitStruct *)&Filter[0]);   
    824          	}
    825          	idxMic8=0;
   \                     ??CrossCallReturnLabel_19: (+1)
   \   0000003A   0x.... 0x....      BL       ?Subroutine2
    826          	cntPos++;
    827          	if (cntPos>=256) cntPos=0;
   \                     ??CrossCallReturnLabel_2: (+1)
   \   0000003E   0xBFC4             ITT      GT 
   \   00000040   0x2000             MOVGT    R0,#+0
   \   00000042   0x8060             STRHGT   R0,[R4, #+2]
    828            }
    829              
    830            }
    831            
    832          }
   \                     ??SPI5_IRQHandler_1: (+1)
   \   00000044   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \   00000000   0x8861             LDRH     R1,[R4, #+2]
   \   00000002   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   00000006   0x1D20             ADDS     R0,R4,#+4
   \   00000008   0x.... 0x....      B.W      PDM_Filter_64_LSB

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x8020             STRH     R0,[R4, #+0]
   \   00000004   0x8860             LDRH     R0,[R4, #+2]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x8060             STRH     R0,[R4, #+2]
   \   0000000A   0x8860             LDRH     R0,[R4, #+2]
   \   0000000C   0x28FF             CMP      R0,#+255
   \   0000000E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x6002             STR      R2,[R0, #+0]
   \   00000004   0x8820             LDRH     R0,[R4, #+0]
   \   00000006   0xB28A             UXTH     R2,R1
   \   00000008   0x0209             LSLS     R1,R1,#+8
   \   0000000A   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   0000000E   0xEB04 0x0240      ADD      R2,R4,R0, LSL #+1
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x8091             STRH     R1,[R2, #+4]
   \   00000016   0x8020             STRH     R0,[R4, #+0]
   \   00000018   0xB280             UXTH     R0,R0
   \   0000001A   0x2840             CMP      R0,#+64
   \   0000001C   0x4770             BX       LR
    833          
    834          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    835          void MX_SPI6_Init(void)
    836          {
   \                     MX_SPI6_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    837          	
    838            hspi6.Instance = SPI6;
   \   00000002   0x....             LDR.N    R4,??DataTable9_26
   \   00000004   0x....             LDR.N    R0,??DataTable9_27  ;; 0x40015400
   \   00000006   0x6020             STR      R0,[R4, #+0]
    839            hspi6.Init.Mode = SPI_MODE_MASTER;
   \   00000008   0xF44F 0x7082      MOV      R0,#+260
   \   0000000C   0x6060             STR      R0,[R4, #+4]
    840            hspi6.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010                      REQUIRE ?Subroutine0
   \   00000010                      ;; // Fall through to label ?Subroutine0
    841            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
    842            hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
    843            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
    844            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    845            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
    846            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
    847            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    848            hspi6.Init.CRCPolynomial = 7;
    849            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    850            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    851            //hspi6.RxISR = SPI6_CallBack;
    852            HAL_SPI_Init(&hspi6);
    853          
    854          
    855            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    856            /* Enable TXE, RXNE and ERR interrupt */
    857           __HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
    858          
    859           __HAL_SPI_ENABLE(&hspi6);
    860          
    861          }
    862          
    863          

   \                                 In section .text, align 2, keep-with-next
    864          void SPI6_IRQHandler(void)
    865          {
    866            /* SPI in mode Receiver ----------------------------------------------------*/
    867            if(
    868          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    869               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    870               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable9_26
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6881             LDR      R1,[R0, #+8]
   \   00000006   0x0789             LSLS     R1,R1,#+30
   \   00000008   0xD400             BMI.N    ??SPI6_IRQHandler_0
   \   0000000A   0x4770             BX       LR
   \                     ??SPI6_IRQHandler_0: (+1)
   \   0000000C   0xB510             PUSH     {R4,LR}
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD516             BPL.N    ??SPI6_IRQHandler_1
    871            {
    872          
    873          
    874               uint16_t test;
    875               test =  SPI_I2S_ReceiveData(SPI6);
   \   00000014   0x....             LDR.N    R0,??DataTable9_28  ;; 0x4001540c
    876               SPI6->DR = 3333;
   \   00000016   0xF640 0x5205      MOVW     R2,#+3333
    877          
    878              pDataMic7[idxMic7++] =	HTONS(test);
   \   0000001A   0x....             LDR.N    R4,??DataTable9_29
   \   0000001C   0x.... 0x....      BL       ?Subroutine1
    879          
    880              //volume = 64;
    881          
    882              if (idxMic7>=64)
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000020   0xDB0F             BLT.N    ??SPI6_IRQHandler_1
    883              {
    884                if (buffer_switch != 1)
   \   00000022   0x....             LDR.N    R3,??DataTable9_11
   \   00000024   0xF8D4 0x0084      LDR      R0,[R4, #+132]
   \   00000028   0x....             LDR.N    R2,??DataTable9_25
   \   0000002A   0x....             LDR.N    R1,??DataTable9_19
   \   0000002C   0x781B             LDRB     R3,[R3, #+0]
   \   0000002E   0x7812             LDRB     R2,[R2, #+0]
   \   00000030   0xF101 0x0334      ADD      R3,R1,#+52
   \   00000034   0x.... 0x....      BL       ?Subroutine8
    885                {
    886                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    887                                                          (PDMFilter_InitStruct *)&Filter[1]);
    888                }
    889                else
    890                {
    891                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    892                                                          (PDMFilter_InitStruct *)&Filter[1]);   
    893                }
    894                idxMic7=0;
   \                     ??CrossCallReturnLabel_18: (+1)
   \   00000038   0x.... 0x....      BL       ?Subroutine2
    895                cntPos7++;
    896                if (cntPos7>=256) cntPos7=0;
   \                     ??CrossCallReturnLabel_3: (+1)
   \   0000003C   0xBFC4             ITT      GT 
   \   0000003E   0x2000             MOVGT    R0,#+0
   \   00000040   0x8060             STRHGT   R0,[R4, #+2]
    897              }
    898              
    899            }
    900          }
   \                     ??SPI6_IRQHandler_1: (+1)
   \   00000042   0xBD10             POP      {R4,PC}          ;; return
    901          
    902          

   \                                 In section .text, align 2, keep-with-next
    903          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
    904          {
    905            /* Check the parameters */
    906            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
    907            
    908            /* Write in the DR register the data to be sent */
    909            SPIx->DR = Data;
   \                     SPI_I2S_SendData: (+1)
   \   00000000   0x60C1             STR      R1,[R0, #+12]
    910          }
   \   00000002   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     BufferCtlPlayOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     cntTransFinish

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     WaveRecord_flgIni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x4001300C         DC32     0x4001300c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \   00000000   0x........         DC32     hi2s2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_14:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_15:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_16:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_17:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_18:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_19:
   \   00000000   0x........         DC32     Filter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_20:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_21:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_22:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_23:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_24:
   \   00000000   0x........         DC32     idxMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_25:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_26:
   \   00000000   0x........         DC32     hspi6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_27:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_28:
   \   00000000   0x4001540C         DC32     0x4001540c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_29:
   \   00000000   0x........         DC32     idxMic7
    911          
    912          
    913          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
    914          {
    915            /* Check the parameters */
    916            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
    917            
    918            /* Return the data in the DR register */
    919            return SPIx->DR;
    920          }
    921          
    922          
    923          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Audio_Streaming
        16   -> I2S_Init
       0   Audio_Streaming_Ini
       4   GPIO_CLK_Init
      16   I2S_Init
        16   -> HAL_I2S_Init
       0   I2S_Proc
       8   MX_SPI5_Init
         8   -> HAL_SPI_Init
         8   -> PDM_Filter_Init
       8   MX_SPI6_Init
         8   -> HAL_SPI_Init
       0   Mic7Rec
         0   -> MX_SPI5_Init
       0   Mic8Rec
         0   -> MX_SPI6_Init
      24   SPI1_IRQHandler
        24   -> HAL_GPIO_ReadPin
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
      24   SPI2_IRQHandler
        24   -> HAL_GPIO_ReadPin
       8   SPI5_IRQHandler
         8   -> PDM_Filter_64_LSB
       8   SPI6_IRQHandler
         8   -> PDM_Filter_64_LSB
       0   SPI_I2S_SendData
      16   mySPI_SendData
        16   -> SPI_I2S_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_15
       4  ??DataTable9_16
       4  ??DataTable9_17
       4  ??DataTable9_18
       4  ??DataTable9_19
       4  ??DataTable9_2
       4  ??DataTable9_20
       4  ??DataTable9_21
       4  ??DataTable9_22
       4  ??DataTable9_23
       4  ??DataTable9_24
       4  ??DataTable9_25
       4  ??DataTable9_26
       4  ??DataTable9_27
       4  ??DataTable9_28
       4  ??DataTable9_29
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      64  ?Subroutine0
      30  ?Subroutine1
      16  ?Subroutine2
       8  ?Subroutine3
      16  ?Subroutine4
      14  ?Subroutine5
      16  ?Subroutine6
      14  ?Subroutine7
      12  ?Subroutine8
      52  Audio_Streaming
       2  Audio_Streaming_Ini
   37224  Buffer1
          Buffer2
          Buffer3
     104  Filter
      98  GPIO_CLK_Init
       1  I2S2_stLR
     110  I2S_Init
       2  I2S_Proc
      56  MX_SPI5_Init
      16  MX_SPI6_Init
       2  Mic7Rec
       2  Mic8Rec
     226  SPI1_IRQHandler
     200  SPI1_Ini
     214  SPI2_IRQHandler
      70  SPI5_IRQHandler
      68  SPI6_IRQHandler
       4  SPI_I2S_SendData
      84  WaveRecord_flgIni
          stLROld
          PosShft
          I2S2_stLROld
          I2S2_stPosShft
          cntStrt
          vRawSens1
          vRawSens2
          stNipple
          vRawSens3
          vRawSens4
          I2S2_stNipple
          hi2s1
       2  cntTransFinish
      80  hdma_spi2_tx
      80  hdma_spi3_tx
      64  hi2s2
     100  hspi5
     100  hspi6
     136  idxMic7
          cntPos7
          pDataMic7
          bufPCMSens7
     136  idxMic8
          cntPos
          pDataMic8
          bufPCMSens8
      64  mySPI_SendData
      44  pHeaderBuff
     100  spi1_ins
     100  spi2_ins
       1  stLR

 
 38 356 bytes in section .bss
  1 496 bytes in section .text
 
  1 496 bytes of CODE memory
 38 356 bytes of DATA memory

Errors: none
Warnings: 4
