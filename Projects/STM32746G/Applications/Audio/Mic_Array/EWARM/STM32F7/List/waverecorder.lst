###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       30/Mar/2016  19:08:28
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          
      8          
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "waverecorder.h" 
     11          #include "string.h"
     12          //#include "stm32f7xx_hal_spi.h"
     13          #include "stm32f7xx_hal.h"
     14          #include "pdm_filter.h"
     15          #include "DSP.h"
     16          
     17          
     18          /* Private typedef -----------------------------------------------------------*/
     19          /* Private define ------------------------------------------------------------*/
     20          
     21          
     22          /* SPI Configuration defines */
     23          #define SPI_SCK_PIN                       GPIO_PIN_10
     24          #define SPI_SCK_GPIO_PORT                 GPIOB
     25          #define SPI_SCK_GPIO_CLK                  1
     26          #define SPI_SCK_SOURCE                    1
     27          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     28          
     29          #define SPI_MOSI_PIN                      GPIO_PIN_3
     30          #define SPI_MOSI_GPIO_PORT                GPIOC
     31          #define SPI_MOSI_GPIO_CLK                 1
     32          #define SPI_MOSI_SOURCE                   1
     33          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     34          
     35          
     36          /* sop1hc */
     37          #define SPI1_SCK_PIN                       GPIO_PIN_5
     38          #define SPI1_SCK_GPIO_PORT                 GPIOA
     39          #define SPI1_SCK_GPIO_CLK                  1
     40          #define SPI1_SCK_SOURCE                    1
     41          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     42          
     43          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     44          #define SPI1_MOSI_GPIO_PORT                GPIOA
     45          #define SPI1_MOSI_GPIO_CLK                 1
     46          #define SPI1_MOSI_SOURCE                   1
     47          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     48          
     49          #define SPI1_MISO_PIN                      GPIO_PIN_6
     50          #define SPI1_MISO_GPIO_PORT                GPIOA
     51          #define SPI1_MISO_GPIO_CLK                 1
     52          #define SPI1_MISO_SOURCE                   1
     53          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     54          
     55          
     56          
     57          
     58          uint16_t idxMic8=0;
     59          uint16_t idxMic7=0;
     60          uint8_t pHeaderBuff[44];
     61          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
     62          uint16_t volatile cntTransFinish;
     63          
     64          /* Private macro -------------------------------------------------------------*/
     65          /* Private variables ---------------------------------------------------------*/
     66          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     67          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     68          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     69          extern WAVE_FormatTypeDef WaveFormat;
     70          extern FIL WavFile;
     71          extern AUDIO_DEMO_StateMachine AudioDemo;
     72          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     73          extern __IO uint8_t buffer_switch;
     74          extern __IO uint8_t volume;
     75          extern SPI_HandleTypeDef hspi4,hspi1;
     76          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     77          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     78          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     79          extern __IO uint16_t  I2S2_idxTmp;
     80          extern SPI_HandleTypeDef     hspi4;
     81          extern DMA_HandleTypeDef     DmaHandle;
     82          
     83          #ifndef CS43L22_PLAY
     84          extern __IO uint8_t flgDlyUpd; 
     85          extern __IO uint32_t XferCplt;
     86          extern __IO uint16_t  idxSPI5DataBuf3;
     87          #endif
     88          
     89          int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
     90          int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
     91          int16_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
     92          uint16_t TestSDO7[4*AUDIO_OUT_BUFFER_SIZE];
     93          uint16_t TestSDO8[4*AUDIO_OUT_BUFFER_SIZE];
     94          uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
     95          uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
     96          __IO uint16_t  WaveRec_idxTest;
     97          
     98          
     99          SPI_HandleTypeDef hspi1,hspi2;
    100          SPI_HandleTypeDef spi1_ins,spi2_ins;
    101          I2S_HandleTypeDef hi2s1;
    102          I2S_HandleTypeDef hi2s2;
    103          SPI_HandleTypeDef hspi5,hspi6;
    104          DMA_HandleTypeDef hdma_spi2_tx;
    105          DMA_HandleTypeDef hdma_spi3_tx;
    106          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
    107          
    108          #if USB_STREAMING
    109          __IO uint16_t idxFrmPDMMic8;
    110          #endif
    111          
    112          uint16_t *bufPCMSens7;
    113          uint16_t *bufPCMSens8;
    114          __IO uint16_t cntPos;
    115          __IO uint16_t cntPos7;
    116          __IO static uint16_t iBuff;
    117          __IO static uint32_t uwVolume = 70;
    118          __IO PDMFilter_InitStruct Filter[2];
    119          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
    120          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
    121          __IO int16_t   pPDM2PCM[16];
    122          __IO uint16_t cntStrt;
    123          __IO uint8_t WaveRecord_flgInt;
    124          uint8_t WaveRecord_flgIni;
    125          
    126          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
    127          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
    128          __IO uint16_t iSDO12,iSDO34,iSDO56;
    129          __IO uint8_t swtSDO7,swtSDO8;
    130          __IO uint8_t WaveRecord_flgSDO7Finish, WaveRecord_flgSDO8Finish;
    131          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
    132          __IO uint8_t I2S2_stLR, I2S2_stLROld;
    133          
    134          /* Private function prototypes -----------------------------------------------*/
    135          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    136          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    137          static void I2S1_Init(void);
    138          static void I2S2_Init(void);
    139          
    140          #if EXT_RAM
    141          #pragma location=SDRAM_BANK_ADDR
    142          #endif
    143          Mic_Array_Data Buffer1;
    144          #if EXT_RAM
    145          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)
    146          #endif
    147          Mic_Array_Data Buffer2;
    148          #if EXT_RAM
    149          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)
    150          #endif
    151          Mic_Array_Data Buffer3;
    152          

   \                                 In section .text, align 2, keep-with-next
    153          void SPI1_Ini(void)
    154          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    155            GPIO_InitTypeDef GPIO_InitStructure;
    156          
    157           
    158             	 
    159            /* Enable SCK, MOSI and MISO GPIO clocks */
    160            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x40023830
   \   00000006   0xB086             SUB      SP,SP,#+24
    161            __HAL_RCC_GPIOA_CLK_ENABLE();
    162          
    163            
    164            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    165            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    166            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    167          
    168            /* SPI SCK pin configuration */
    169            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    170            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    171            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable12_2  ;; 0x40020000
   \   0000000C   0x6941             LDR      R1,[R0, #+20]
   \   0000000E   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000012   0x6141             STR      R1,[R0, #+20]
   \   00000014   0x6941             LDR      R1,[R0, #+20]
   \   00000016   0xF401 0x5180      AND      R1,R1,#0x1000
   \   0000001A   0x9100             STR      R1,[SP, #+0]
   \   0000001C   0x9900             LDR      R1,[SP, #+0]
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000024   0x6001             STR      R1,[R0, #+0]
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xA901             ADD      R1,SP,#+4
   \   0000002A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x9800             LDR      R0,[SP, #+0]
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x9002             STR      R0,[SP, #+8]
   \   00000036   0x9003             STR      R0,[SP, #+12]
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0x9004             STR      R0,[SP, #+16]
   \   0000003C   0x2005             MOVS     R0,#+5
   \   0000003E   0x9005             STR      R0,[SP, #+20]
   \   00000040   0x2020             MOVS     R0,#+32
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       HAL_GPIO_Init
    172          
    173            /* SPI  MOSI pin configuration */
    174            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   0000004A   0x2001             MOVS     R0,#+1
    175            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    176            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   0000004C   0xA901             ADD      R1,SP,#+4
   \   0000004E   0x9005             STR      R0,[SP, #+20]
   \   00000050   0x2080             MOVS     R0,#+128
   \   00000052   0x9001             STR      R0,[SP, #+4]
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       HAL_GPIO_Init
    177          
    178            /* SPI MISO pin configuration */
    179            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   0000005A   0x2001             MOVS     R0,#+1
    180            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    181            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   0000005C   0xA901             ADD      R1,SP,#+4
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x2040             MOVS     R0,#+64
   \   00000062   0x9001             STR      R0,[SP, #+4]
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       HAL_GPIO_Init
    182          
    183            /* SPI configuration -------------------------------------------------------*/
    184            //SPI_I2S_DeInit(SPI1);
    185            
    186            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   0000006E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000072   0x6081             STR      R1,[R0, #+8]
    187            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000074   0xF44F 0x6170      MOV      R1,#+3840
   \   00000078   0x60C1             STR      R1,[R0, #+12]
    188            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x6101             STR      R1,[R0, #+16]
    189            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    190            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    191            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    192            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    193            spi1_ins.Init.CRCPolynomial = 7;
    194            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   0000007E   0x.... 0x....      LDR.W    R4,??DataTable16  ;; 0x40021000
   \   00000082   0x6141             STR      R1,[R0, #+20]
   \   00000084   0xF44F 0x7100      MOV      R1,#+512
   \   00000088   0x6181             STR      R1,[R0, #+24]
   \   0000008A   0x2128             MOVS     R1,#+40
   \   0000008C   0x61C1             STR      R1,[R0, #+28]
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x6201             STR      R1,[R0, #+32]
   \   00000092   0x2107             MOVS     R1,#+7
   \   00000094   0x62C1             STR      R1,[R0, #+44]
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x6041             STR      R1,[R0, #+4]
    195            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   0000009A   0x.... 0x....      BL       HAL_SPI_Init
    196            {
    197              /* Initialization Error */
    198              //Error_Handler();
    199            }
    200            
    201           
    202            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   0000009E   0x2008             MOVS     R0,#+8
    203            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    204            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    205            GPIO_InitStructure.Pull = GPIO_PULLUP;
    206            //GPIO_InitStructure.Alternate 
    207            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000A0   0xA901             ADD      R1,SP,#+4
   \   000000A2   0x9001             STR      R0,[SP, #+4]
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x9002             STR      R0,[SP, #+8]
   \   000000A8   0x2002             MOVS     R0,#+2
   \   000000AA   0x9004             STR      R0,[SP, #+16]
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x9003             STR      R0,[SP, #+12]
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       HAL_GPIO_Init
    208          
    209            /* Deselect : Chip Select high */
    210            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0x2108             MOVS     R1,#+8
   \   000000BA   0x4620             MOV      R0,R4
   \   000000BC   0x.... 0x....      BL       HAL_GPIO_WritePin
    211             /* sop1hc */
    212            /* Configure the SPI interrupt priority */
    213            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000C0   0x2200             MOVS     R2,#+0
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x2023             MOVS     R0,#+35
   \   000000C6   0x.... 0x....      BL       HAL_NVIC_SetPriority
    214          
    215            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000CA   0x2023             MOVS     R0,#+35
   \   000000CC   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    216            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    217            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    218          
    219            /* Enable SPI1  */
    220            //__HAL_SPI_ENABLE(SPI1);
    221          
    222          }
   \   000000D0   0xB006             ADD      SP,SP,#+24
   \   000000D2   0xBD10             POP      {R4,PC}          ;; return
    223          

   \                                 In section .text, align 2, keep-with-next
    224          void mySPI_SendData(uint8_t adress, uint8_t data)
    225          {
   \                     mySPI_SendData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable12_3
   \   00000004   0x6812             LDR      R2,[R2, #+0]
    226           
    227          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x6893             LDR      R3,[R2, #+8]
   \   00000008   0x079B             LSLS     R3,R3,#+30
   \   0000000A   0xD5FC             BPL.N    ??mySPI_SendData_0
    228          SPI_I2S_SendData(SPI1, adress);
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable13  ;; 0x4001300c
   \   00000010   0x6018             STR      R0,[R3, #+0]
    229          
    230          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   00000012   0x6890             LDR      R0,[R2, #+8]
   \   00000014   0x07C0             LSLS     R0,R0,#+31
   \   00000016   0xD5FC             BPL.N    ??mySPI_SendData_1
    231          SPI_I2S_ReceiveData(SPI1);
   \   00000018   0x6818             LDR      R0,[R3, #+0]
    232          
    233          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   0000001A   0x6890             LDR      R0,[R2, #+8]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD4FC             BMI.N    ??mySPI_SendData_2
    234          SPI_I2S_SendData(SPI1, data);
   \   00000020   0x6019             STR      R1,[R3, #+0]
    235          
    236          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000022   0x6890             LDR      R0,[R2, #+8]
   \   00000024   0x07C0             LSLS     R0,R0,#+31
   \   00000026   0xD4FC             BMI.N    ??mySPI_SendData_3
    237          SPI_I2S_ReceiveData(SPI1);
   \   00000028   0x6818             LDR      R0,[R3, #+0]
    238           
    239          }
   \   0000002A   0x4770             BX       LR               ;; return
    240          
    241          /**
    242            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    243            * @param  None
    244            * @retval None
    245          */
    246          

   \                                 In section .text, align 2, keep-with-next
    247          void SPI1_IRQHandler(void)
    248          {  
    249                int16_t tmpTest;
    250          	  static uint8_t stLR,stLROld;
                 	                 ^
Warning[Pe177]: variable "stLR" was declared but never referenced
    251          	
    252          	  /* SPI in mode Receiver ----------------------------------------------------*/
    253          	  if(
    254          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    255          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    256          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x6849             LDR      R1,[R1, #+4]
   \   00000008   0x0649             LSLS     R1,R1,#+25
   \   0000000A   0xF140 0x80B6      BPL.W    ??SPI1_IRQHandler_0
    257          	  {
    258          	
    259          
    260          	   tmpTest =  (int16_t)SPI_I2S_ReceiveData(SPI1);
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable13  ;; 0x4001300c
   \   00000012   0x6809             LDR      R1,[R1, #+0]
    261          	
    262          	   /* Left-Right Mic data */
    263          	   //stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    264          	
    265          		if (I2S2_stLR==GPIO_PIN_SET)
   \   00000014   0xF890 0x2084      LDRB     R2,[R0, #+132]
   \   00000018   0xF890 0x3082      LDRB     R3,[R0, #+130]
   \   0000001C   0xB209             SXTH     R1,R1
   \   0000001E   0x2B01             CMP      R3,#+1
   \   00000020   0xD151             BNE.N    ??SPI1_IRQHandler_1
    266          		{
    267          		       if(stLROld==GPIO_PIN_SET) 
   \   00000022   0x2A01             CMP      R2,#+1
   \   00000024   0xF040 0x80A9      BNE.W    ??SPI1_IRQHandler_0
    268          		       {
    269          				   vRawSens1 = (tmpTest);
   \   00000028   0xF8A0 0x108A      STRH     R1,[R0, #+138]
    270          			       WaveRec_idxTest++;
   \   0000002C   0xF8B0 0x1088      LDRH     R1,[R0, #+136]
    271          				   /* Recording Audio Data */						 
    272          					if (WaveRec_idxSens1<AUDIO_OUT_BUFFER_SIZE) 
   \   00000030   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   00000034   0x1C49             ADDS     R1,R1,#+1
   \   00000036   0xF8A0 0x1088      STRH     R1,[R0, #+136]
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   0000003E   0x880B             LDRH     R3,[R1, #+0]
   \   00000040   0x7812             LDRB     R2,[R2, #+0]
   \   00000042   0xF5B3 0x6F80      CMP      R3,#+1024
   \   00000046   0xDA1E             BGE.N    ??SPI1_IRQHandler_2
    273          					{
    274          					   switch (buffer_switch)
   \   00000048   0xB11A             CBZ.N    R2,??SPI1_IRQHandler_3
   \   0000004A   0x2A02             CMP      R2,#+2
   \   0000004C   0xD013             BEQ.N    ??SPI1_IRQHandler_4
   \   0000004E   0xD309             BCC.N    ??SPI1_IRQHandler_5
   \   00000050   0xE090             B.N      ??SPI1_IRQHandler_6
    275          					   {
    276          							case BUF1_PLAY:
    277          									Buffer2.bufMIC1[WaveRec_idxSens1] = vRawSens1;								
   \                     ??SPI1_IRQHandler_3: (+1)
   \   00000052   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   00000056   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   0000005A   0x.... 0x....      LDR.W    R3,??DataTable13_4  ;; 0xc00080a0
   \   0000005E   0xF823 0x201C      STRH     R2,[R3, R12, LSL #+1]
    278          									break;
    279          							case BUF2_PLAY:
    280          									Buffer3.bufMIC1[WaveRec_idxSens1] = vRawSens1;
    281          									break;
    282          							case BUF3_PLAY:
    283          									Buffer1.bufMIC1[WaveRec_idxSens1] = vRawSens1;									
    284          									break;
    285          							default:
    286          									break; 
    287          					   
    288          					   }
    289          					}
    290          					else
    291          					{
    292          						switch (buffer_switch)
    293          						{
    294          						    case BUF1_PLAY:
    295          						                    Buffer1.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;								
    296          						                    break;
    297          						    case BUF2_PLAY:
    298          						                    Buffer2.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;
    299          						                    break;
    300          						    case BUF3_PLAY:
    301          						                    Buffer3.bufMIC1[WaveRec_idxSens1%AUDIO_OUT_BUFFER_SIZE] = vRawSens1;									
    302          						                    break;
    303          						    default:
    304          						                    break; 
    305          						}
    306          					}
    307          					WaveRec_idxSens1++;
   \   00000062   0xE087             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_5: (+1)
   \   00000064   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   00000068   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   0000006C   0x.... 0x....      LDR.W    R3,??DataTable17  ;; 0xc0010140
   \   00000070   0xF823 0x201C      STRH     R2,[R3, R12, LSL #+1]
   \   00000074   0xE07E             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_4: (+1)
   \   00000076   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   0000007A   0x880B             LDRH     R3,[R1, #+0]
   \   0000007C   0x005B             LSLS     R3,R3,#+1
   \   0000007E   0xF1A3 0x4380      SUB      R3,R3,#+1073741824
   \   00000082   0x801A             STRH     R2,[R3, #+0]
   \   00000084   0xE076             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_2: (+1)
   \   00000086   0xB11A             CBZ.N    R2,??SPI1_IRQHandler_7
   \   00000088   0x2A02             CMP      R2,#+2
   \   0000008A   0xD00F             BEQ.N    ??SPI1_IRQHandler_8
   \   0000008C   0xD309             BCC.N    ??SPI1_IRQHandler_9
   \   0000008E   0xE071             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_7: (+1)
   \   00000090   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   00000094   0x880B             LDRH     R3,[R1, #+0]
   \   00000096   0x059B             LSLS     R3,R3,#+22
   \   00000098   0x0D5B             LSRS     R3,R3,#+21
   \   0000009A   0xF1A3 0x4380      SUB      R3,R3,#+1073741824
   \   0000009E   0x801A             STRH     R2,[R3, #+0]
   \   000000A0   0xE068             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_9: (+1)
   \   000000A2   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   000000A6   0x.... 0x....      LDR.W    R3,??DataTable13_4  ;; 0xc00080a0
   \   000000AA   0xE003             B.N      ??SPI1_IRQHandler_10
   \                     ??SPI1_IRQHandler_8: (+1)
   \   000000AC   0xF9B0 0x208A      LDRSH    R2,[R0, #+138]
   \   000000B0   0x.... 0x....      LDR.W    R3,??DataTable17  ;; 0xc0010140
   \                     ??SPI1_IRQHandler_10: (+1)
   \   000000B4   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   000000B8   0xEA4F 0x5C8C      LSL      R12,R12,#+22
   \   000000BC   0xEA4F 0x5C9C      LSR      R12,R12,#+22
   \   000000C0   0xF823 0x201C      STRH     R2,[R3, R12, LSL #+1]
   \   000000C4   0xE056             B.N      ??SPI1_IRQHandler_6
    308                              
    309          		       	}
    310          		}
    311          		else
    312          		{		
    313                    if ((stLROld==GPIO_PIN_RESET))  
   \                     ??SPI1_IRQHandler_1: (+1)
   \   000000C6   0x2A00             CMP      R2,#+0
   \   000000C8   0xD157             BNE.N    ??SPI1_IRQHandler_0
    314                    {
    315          				vRawSens2 = (tmpTest);
   \   000000CA   0xF8A0 0x108C      STRH     R1,[R0, #+140]
    316          				WaveRec_idxTest++;
   \   000000CE   0xF8B0 0x1088      LDRH     R1,[R0, #+136]
    317          				if (WaveRec_idxSens2<AUDIO_OUT_BUFFER_SIZE)
   \   000000D2   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   000000D6   0x1C49             ADDS     R1,R1,#+1
   \   000000D8   0xF8A0 0x1088      STRH     R1,[R0, #+136]
   \   000000DC   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000000E0   0x880B             LDRH     R3,[R1, #+0]
   \   000000E2   0x7812             LDRB     R2,[R2, #+0]
   \   000000E4   0xF5B3 0x6F80      CMP      R3,#+1024
   \   000000E8   0xDA29             BGE.N    ??SPI1_IRQHandler_11
    318          				{
    319          					/* Recording Audio Data */						 
    320          					switch (buffer_switch)
   \   000000EA   0xB11A             CBZ.N    R2,??SPI1_IRQHandler_12
   \   000000EC   0x2A02             CMP      R2,#+2
   \   000000EE   0xD01B             BEQ.N    ??SPI1_IRQHandler_13
   \   000000F0   0xD30D             BCC.N    ??SPI1_IRQHandler_14
   \   000000F2   0xE03F             B.N      ??SPI1_IRQHandler_6
    321          					{
    322          						case BUF1_PLAY:
    323          							Buffer2.bufMIC2[WaveRec_idxSens2] = vRawSens2;								
   \                     ??SPI1_IRQHandler_12: (+1)
   \   000000F4   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   000000F8   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   000000FC   0x.... 0x....      LDR.W    R3,??DataTable13_4  ;; 0xc00080a0
   \   00000100   0xEB03 0x034C      ADD      R3,R3,R12, LSL #+1
   \   00000104   0xF241 0x0C14      MOVW     R12,#+4116
   \   00000108   0xF82C 0x2003      STRH     R2,[R12, R3]
    324          							break;
    325          						case BUF2_PLAY:
    326          							Buffer3.bufMIC2[WaveRec_idxSens2] = vRawSens2;
    327          							break;
    328          						case BUF3_PLAY:
    329          							Buffer1.bufMIC2[WaveRec_idxSens2] = vRawSens2;									
    330          							break;
   \   0000010C   0xE032             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_14: (+1)
   \   0000010E   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   00000112   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   00000116   0x.... 0x....      LDR.W    R3,??DataTable17  ;; 0xc0010140
   \   0000011A   0xEB03 0x034C      ADD      R3,R3,R12, LSL #+1
   \   0000011E   0xF241 0x0C14      MOVW     R12,#+4116
   \   00000122   0xF82C 0x2003      STRH     R2,[R12, R3]
   \   00000126   0xE025             B.N      ??SPI1_IRQHandler_6
   \                     ??SPI1_IRQHandler_13: (+1)
   \   00000128   0xF9B0 0x208C      LDRSH    R2,[R0, #+140]
   \   0000012C   0x880B             LDRH     R3,[R1, #+0]
   \   0000012E   0xF241 0x0C14      MOVW     R12,#+4116
   \   00000132   0x005B             LSLS     R3,R3,#+1
   \   00000134   0xF1A3 0x4380      SUB      R3,R3,#+1073741824
   \   00000138   0xF82C 0x2003      STRH     R2,[R12, R3]
   \   0000013C   0xE01A             B.N      ??SPI1_IRQHandler_6
    331          						default:
    332          							break; 
    333          
    334          				        }
    335                           }
    336                           else
    337                           {
    338          
    339          					 /* Recording Audio Data */ 					  
    340          					 switch (buffer_switch)
   \                     ??SPI1_IRQHandler_11: (+1)
   \   0000013E   0xB11A             CBZ.N    R2,??SPI1_IRQHandler_15
   \   00000140   0x2A02             CMP      R2,#+2
   \   00000142   0xD00A             BEQ.N    ??SPI1_IRQHandler_16
   \   00000144   0xD306             BCC.N    ??SPI1_IRQHandler_17
   \   00000146   0xE015             B.N      ??SPI1_IRQHandler_6
    341          					 {
    342          						 case BUF1_PLAY:
    343          							 Buffer1.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;								 
   \                     ??SPI1_IRQHandler_15: (+1)
   \   00000148   0x880A             LDRH     R2,[R1, #+0]
   \   0000014A   0x0592             LSLS     R2,R2,#+22
   \   0000014C   0x0D52             LSRS     R2,R2,#+21
   \   0000014E   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \   00000152   0xE009             B.N      ??SPI1_IRQHandler_18
    344          							 break;
    345          						 case BUF2_PLAY:
    346          							 Buffer2.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;
   \                     ??SPI1_IRQHandler_17: (+1)
   \   00000154   0x.... 0x....      LDR.W    R2,??DataTable13_4  ;; 0xc00080a0
   \   00000158   0xE001             B.N      ??SPI1_IRQHandler_19
    347          							 break;
    348          						 case BUF3_PLAY:
    349          							 Buffer3.bufMIC2[WaveRec_idxSens2%AUDIO_OUT_BUFFER_SIZE] = vRawSens2;									 
   \                     ??SPI1_IRQHandler_16: (+1)
   \   0000015A   0x.... 0x....      LDR.W    R2,??DataTable17  ;; 0xc0010140
   \                     ??SPI1_IRQHandler_19: (+1)
   \   0000015E   0x880B             LDRH     R3,[R1, #+0]
   \   00000160   0x059B             LSLS     R3,R3,#+22
   \   00000162   0x0D9B             LSRS     R3,R3,#+22
   \   00000164   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \                     ??SPI1_IRQHandler_18: (+1)
   \   00000168   0xF9B0 0xC08C      LDRSH    R12,[R0, #+140]
   \   0000016C   0xF241 0x0314      MOVW     R3,#+4116
   \   00000170   0xF823 0xC002      STRH     R12,[R3, R2]
    350          							 break;
    351          						 default:
    352          							 break; 
    353          					
    354          					}
    355          
    356          			       }
    357          
    358          			       WaveRec_idxSens2++;
   \                     ??SPI1_IRQHandler_6: (+1)
   \   00000174   0x880A             LDRH     R2,[R1, #+0]
   \   00000176   0x1C52             ADDS     R2,R2,#+1
   \   00000178   0x800A             STRH     R2,[R1, #+0]
    359          					
    360          
    361          			  }
    362          		
    363          		} 	
    364          
    365          		
    366          	}
    367          	   
    368          
    369          #if 0
    370                 if (iSDO12<4*AUDIO_OUT_BUFFER_SIZE)
    371          	   {
    372                     TestSDO12[iSDO12++]=tmpTest;
    373          	   }
    374          	   else
    375          	   {
    376                     iSDO12=0;
    377          	   }
    378          		if ((WaveRec_idxSens1 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens2 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    379          	//			  &&(stLR!=stLROld))
    380          		{
    381          	/*-------------------------------------------------------------------------------------------------------------
    382          				  
    383          		Sequence  Record Data					  Processing Data				  Player Data
    384          				  
    385          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    386          				  
    387          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    388          				  
    389          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    390          	 ---------------------------------------------------------------------------------------------------------------*/
    391          				  /* Recording Audio Data */						 
    392          				   switch (buffer_switch)
    393          				   {
    394          							case BUF1_PLAY:
    395          
    396                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    397          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    398          							    else
    399          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    400          
    401          	
    402          									break;
    403          							case BUF2_PLAY:
    404                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    405          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    406          							    else
    407          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;	
    408          
    409          									break;
    410          							case BUF3_PLAY:
    411                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    412          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    413          							    else
    414          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    415          
    416          									break;
    417          							default:
    418          									break; 
    419          				   }
    420          			
    421          		 } 
    422          #endif		
    423          
    424          		/* Update Old value */	  
    425          		stLROld=I2S2_stLR;
   \                     ??SPI1_IRQHandler_0: (+1)
   \   0000017A   0xF890 0x1082      LDRB     R1,[R0, #+130]
   \   0000017E   0xF880 0x1084      STRB     R1,[R0, #+132]
    426          
    427          				 
    428          } 	 
   \   00000182   0x4770             BX       LR               ;; return
   \   00000184                      REQUIRE Buffer2
   \   00000184                      REQUIRE Buffer3
   \   00000184                      REQUIRE Buffer1
    429          
    430          
    431          
    432          
    433          /**
    434            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    435            * @param  None
    436            * @retval None
    437          */
    438          

   \                                 In section .text, align 2, keep-with-next
    439          void SPI2_IRQHandler(void)
    440          {      
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    441              int16_t app;
    442              
    443          
    444            /* Check if data are available in SPI Data register */
    445             if (
    446          //	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    447          //   	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    448             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    449             	  )
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable13_1
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x6C20             LDR      R0,[R4, #+64]
   \   0000000A   0x6840             LDR      R0,[R0, #+4]
   \   0000000C   0x0640             LSLS     R0,R0,#+25
   \   0000000E   0xF140 0x80A5      BPL.W    ??SPI2_IRQHandler_0
    450             {
    451              
    452               app = (int16_t)SPI_I2S_ReceiveData(SPI2);   
    453               //SPI_I2S_SendData(SPI2, 3333);
    454          
    455          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x4000380c
   \   00000018   0x6805             LDR      R5,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x40020000
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000022   0xF884 0x0082      STRB     R0,[R4, #+130]
    456          
    457          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   00000026   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   0000002A   0xB22D             SXTH     R5,R5
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xF894 0x0083      LDRB     R0,[R4, #+131]
   \   00000032   0xD148             BNE.N    ??SPI2_IRQHandler_1
    458          	 {		
    459          		if ((I2S2_stLROld==GPIO_PIN_RESET)) 
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xF040 0x808D      BNE.W    ??SPI2_IRQHandler_2
    460          		{
    461          			vRawSens3 = app;
    462          			if (WaveRec_idxSens3 < AUDIO_OUT_BUFFER_SIZE)
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable17_2
   \   0000003E   0xF8A4 0x5090      STRH     R5,[R4, #+144]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable13_2
   \   00000046   0x8802             LDRH     R2,[R0, #+0]
   \   00000048   0x7809             LDRB     R1,[R1, #+0]
   \   0000004A   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000004E   0xDA1E             BGE.N    ??SPI2_IRQHandler_3
    463          			{
    464          				switch (buffer_switch)
   \   00000050   0xB119             CBZ.N    R1,??SPI2_IRQHandler_4
   \   00000052   0x2902             CMP      R1,#+2
   \   00000054   0xD013             BEQ.N    ??SPI2_IRQHandler_5
   \   00000056   0xD309             BCC.N    ??SPI2_IRQHandler_6
   \   00000058   0xE079             B.N      ??SPI2_IRQHandler_7
    465          				{
    466          					case BUF1_PLAY:
    467          						Buffer2.bufMIC3[WaveRec_idxSens3] = vRawSens3;								
   \                     ??SPI2_IRQHandler_4: (+1)
   \   0000005A   0x8803             LDRH     R3,[R0, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R2,??DataTable13_4  ;; 0xc00080a0
   \   00000060   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000064   0xF242 0x0328      MOVW     R3,#+8232
   \   00000068   0x529D             STRH     R5,[R3, R2]
    468          						break;
    469          					case BUF2_PLAY:
    470          						Buffer3.bufMIC3[WaveRec_idxSens3] = vRawSens3;
    471          						break;
    472          					case BUF3_PLAY:
    473          						Buffer1.bufMIC3[WaveRec_idxSens3] = vRawSens3;									
    474          						break;
   \   0000006A   0xE070             B.N      ??SPI2_IRQHandler_7
   \                     ??SPI2_IRQHandler_6: (+1)
   \   0000006C   0x8803             LDRH     R3,[R0, #+0]
   \   0000006E   0x.... 0x....      LDR.W    R2,??DataTable17  ;; 0xc0010140
   \   00000072   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000076   0xF242 0x0328      MOVW     R3,#+8232
   \   0000007A   0x529D             STRH     R5,[R3, R2]
   \   0000007C   0xE067             B.N      ??SPI2_IRQHandler_7
   \                     ??SPI2_IRQHandler_5: (+1)
   \   0000007E   0x8802             LDRH     R2,[R0, #+0]
   \   00000080   0xF242 0x0328      MOVW     R3,#+8232
   \   00000084   0x0052             LSLS     R2,R2,#+1
   \   00000086   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \   0000008A   0x529D             STRH     R5,[R3, R2]
   \   0000008C   0xE05F             B.N      ??SPI2_IRQHandler_7
    475          					default:
    476          						break; 
    477          				}
    478          			}
    479          			else
    480          			{
    481          				switch (buffer_switch)
   \                     ??SPI2_IRQHandler_3: (+1)
   \   0000008E   0xB119             CBZ.N    R1,??SPI2_IRQHandler_8
   \   00000090   0x2902             CMP      R1,#+2
   \   00000092   0xD00D             BEQ.N    ??SPI2_IRQHandler_9
   \   00000094   0xD309             BCC.N    ??SPI2_IRQHandler_10
   \   00000096   0xE05A             B.N      ??SPI2_IRQHandler_7
    482          				{
    483          					case BUF1_PLAY:
    484          						Buffer1.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;								
   \                     ??SPI2_IRQHandler_8: (+1)
   \   00000098   0x8801             LDRH     R1,[R0, #+0]
   \   0000009A   0xF242 0x0228      MOVW     R2,#+8232
   \   0000009E   0x0589             LSLS     R1,R1,#+22
   \   000000A0   0x0D49             LSRS     R1,R1,#+21
   \   000000A2   0xF1A1 0x4180      SUB      R1,R1,#+1073741824
   \   000000A6   0x5255             STRH     R5,[R2, R1]
    485          						break;
    486          					case BUF2_PLAY:
    487          						Buffer2.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;
    488          						break;
    489          					case BUF3_PLAY:
    490          						Buffer3.bufMIC3[WaveRec_idxSens3%AUDIO_OUT_BUFFER_SIZE] = vRawSens3;									
    491          						break;
    492          					default:
    493          						break; 
    494          				}
    495          			}
    496          
    497          			WaveRec_idxSens3++;
   \   000000A8   0xE051             B.N      ??SPI2_IRQHandler_7
   \                     ??SPI2_IRQHandler_10: (+1)
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable13_4  ;; 0xc00080a0
   \   000000AE   0xE001             B.N      ??SPI2_IRQHandler_11
   \                     ??SPI2_IRQHandler_9: (+1)
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable17  ;; 0xc0010140
   \                     ??SPI2_IRQHandler_11: (+1)
   \   000000B4   0x8802             LDRH     R2,[R0, #+0]
   \   000000B6   0x0592             LSLS     R2,R2,#+22
   \   000000B8   0x0D92             LSRS     R2,R2,#+22
   \   000000BA   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000BE   0xF242 0x0228      MOVW     R2,#+8232
   \   000000C2   0x5255             STRH     R5,[R2, R1]
   \   000000C4   0xE043             B.N      ??SPI2_IRQHandler_7
    498          		}
    499          		
    500          	 }
    501          	 else
    502          	 {
    503                      if ((I2S2_stLROld==GPIO_PIN_SET))   
   \                     ??SPI2_IRQHandler_1: (+1)
   \   000000C6   0x2801             CMP      R0,#+1
   \   000000C8   0xD144             BNE.N    ??SPI2_IRQHandler_2
    504                      {
    505                            vRawSens4 =app;
    506                            if ((WaveRec_idxSens4<AUDIO_OUT_BUFFER_SIZE))
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable17_3
   \   000000CE   0xF8A4 0x508E      STRH     R5,[R4, #+142]
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable13_2
   \   000000D6   0x8802             LDRH     R2,[R0, #+0]
   \   000000D8   0x7809             LDRB     R1,[R1, #+0]
   \   000000DA   0xF5B2 0x6F80      CMP      R2,#+1024
   \   000000DE   0xDA1E             BGE.N    ??SPI2_IRQHandler_12
    507                            {
    508          	                    switch (buffer_switch)
   \   000000E0   0xB119             CBZ.N    R1,??SPI2_IRQHandler_13
   \   000000E2   0x2902             CMP      R1,#+2
   \   000000E4   0xD013             BEQ.N    ??SPI2_IRQHandler_14
   \   000000E6   0xD309             BCC.N    ??SPI2_IRQHandler_15
   \   000000E8   0xE031             B.N      ??SPI2_IRQHandler_7
    509          	                    {	 
    510          	                        case BUF1_PLAY:
    511          	                                Buffer2.bufMIC4[WaveRec_idxSens4] = vRawSens4;								
   \                     ??SPI2_IRQHandler_13: (+1)
   \   000000EA   0x8803             LDRH     R3,[R0, #+0]
   \   000000EC   0x.... 0x....      LDR.W    R2,??DataTable13_4  ;; 0xc00080a0
   \   000000F0   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000F4   0xF243 0x033C      MOVW     R3,#+12348
   \   000000F8   0x529D             STRH     R5,[R3, R2]
    512          	                                break;
    513          	                        case BUF2_PLAY:
    514          	                                Buffer3.bufMIC4[WaveRec_idxSens4] = vRawSens4;
    515          	                                break;
    516          	                        case BUF3_PLAY:
    517          	                                Buffer1.bufMIC4[WaveRec_idxSens4] = vRawSens4;									
    518          	                                break;
   \   000000FA   0xE028             B.N      ??SPI2_IRQHandler_7
   \                     ??SPI2_IRQHandler_15: (+1)
   \   000000FC   0x8803             LDRH     R3,[R0, #+0]
   \   000000FE   0x.... 0x....      LDR.W    R2,??DataTable17  ;; 0xc0010140
   \   00000102   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000106   0xF243 0x033C      MOVW     R3,#+12348
   \   0000010A   0x529D             STRH     R5,[R3, R2]
   \   0000010C   0xE01F             B.N      ??SPI2_IRQHandler_7
   \                     ??SPI2_IRQHandler_14: (+1)
   \   0000010E   0x8802             LDRH     R2,[R0, #+0]
   \   00000110   0xF243 0x033C      MOVW     R3,#+12348
   \   00000114   0x0052             LSLS     R2,R2,#+1
   \   00000116   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \   0000011A   0x529D             STRH     R5,[R3, R2]
   \   0000011C   0xE017             B.N      ??SPI2_IRQHandler_7
    519          	                        default:
    520          	                                break; 
    521          	                    }
    522                            }
    523                            else
    524                            {
    525                                switch (buffer_switch)
   \                     ??SPI2_IRQHandler_12: (+1)
   \   0000011E   0xB119             CBZ.N    R1,??SPI2_IRQHandler_16
   \   00000120   0x2902             CMP      R1,#+2
   \   00000122   0xD00A             BEQ.N    ??SPI2_IRQHandler_17
   \   00000124   0xD306             BCC.N    ??SPI2_IRQHandler_18
   \   00000126   0xE012             B.N      ??SPI2_IRQHandler_7
    526                                {	 
    527                                    case BUF1_PLAY:
    528                                            Buffer1.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;								
   \                     ??SPI2_IRQHandler_16: (+1)
   \   00000128   0x8801             LDRH     R1,[R0, #+0]
   \   0000012A   0x0589             LSLS     R1,R1,#+22
   \   0000012C   0x0D49             LSRS     R1,R1,#+21
   \   0000012E   0xF1A1 0x4180      SUB      R1,R1,#+1073741824
   \   00000132   0xE009             B.N      ??SPI2_IRQHandler_19
    529                                            break;
    530                                    case BUF2_PLAY:
    531                                            Buffer2.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;
   \                     ??SPI2_IRQHandler_18: (+1)
   \   00000134   0x.... 0x....      LDR.W    R1,??DataTable13_4  ;; 0xc00080a0
   \   00000138   0xE001             B.N      ??SPI2_IRQHandler_20
    532                                            break;
    533                                    case BUF3_PLAY:
    534                                            Buffer3.bufMIC4[WaveRec_idxSens4%AUDIO_OUT_BUFFER_SIZE] = vRawSens4;									
   \                     ??SPI2_IRQHandler_17: (+1)
   \   0000013A   0x.... 0x....      LDR.W    R1,??DataTable17  ;; 0xc0010140
   \                     ??SPI2_IRQHandler_20: (+1)
   \   0000013E   0x8802             LDRH     R2,[R0, #+0]
   \   00000140   0x0592             LSLS     R2,R2,#+22
   \   00000142   0x0D92             LSRS     R2,R2,#+22
   \   00000144   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \                     ??SPI2_IRQHandler_19: (+1)
   \   00000148   0xF243 0x023C      MOVW     R2,#+12348
   \   0000014C   0x5255             STRH     R5,[R2, R1]
    535                                            break;
    536                                    default:
    537                                            break; 
    538                                }
    539                              }
    540                              WaveRec_idxSens4++;
   \                     ??SPI2_IRQHandler_7: (+1)
   \   0000014E   0x8801             LDRH     R1,[R0, #+0]
   \   00000150   0x1C49             ADDS     R1,R1,#+1
   \   00000152   0x8001             STRH     R1,[R0, #+0]
    541                      }
    542          	 }//else
    543          
    544          	 
    545          #if 0
    546          	  if (iSDO34<4*AUDIO_OUT_BUFFER_SIZE)
    547          	 {
    548          		 TestSDO34[iSDO34++]=app;
    549          	 }
    550          	 else
    551          	 {
    552          		 iSDO34=0;
    553          	 }
    554          
    555          	 if ((WaveRec_idxSens3 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens4 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    556          //             &&(I2S2_stLR!=I2S2_stLROld))
    557          	 {
    558          /*-------------------------------------------------------------------------------------------------------------
    559          			  
    560          	Sequence  Record Data                     Processing Data                 Player Data
    561          			  
    562          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    563          			  
    564          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    565          			  
    566          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    567           ---------------------------------------------------------------------------------------------------------------*/
    568          		/* Recording Audio Data */			             
    569          		 switch (buffer_switch)
    570          		 {
    571          			  case BUF1_PLAY:
    572                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    573                                        Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    574                                    else
    575                                        Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			  
    576          			  break;                     
    577          			  case BUF2_PLAY:
    578                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    579                                        Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    580                                    else
    581                                        Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			   
    582          				  break;
    583          			  case BUF3_PLAY:
    584                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    585                                       Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    586          		          else
    587                                       Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    588          		          break;
    589          			  default:
    590          			     break; 
    591          		 }
    592          		
    593          	 }          
    594          #endif		  
    595          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   00000154   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   00000158   0xF884 0x0083      STRB     R0,[R4, #+131]
    596             }
    597          
    598          }
   \                     ??SPI2_IRQHandler_0: (+1)
   \   0000015C   0xB001             ADD      SP,SP,#+4
   \   0000015E   0xBD30             POP      {R4,R5,PC}       ;; return
   \   00000160                      REQUIRE Buffer2
   \   00000160                      REQUIRE Buffer3
   \   00000160                      REQUIRE Buffer1
    599          
    600          

   \                                 In section .text, align 2, keep-with-next
    601          void SPI4_IRQHandler(void)
    602          {
    603            static uint8_t Main_stLR, Main_stLROld;
    604          
    605          
    606            /* SPI in mode Receiver ----------------------------------------------------*/
    607            if(
    608          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    609          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    610               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17_4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xD400             BMI.N    ??SPI4_IRQHandler_0
   \   0000000C   0x4770             BX       LR
    611            {
    612          
    613                  uint16_t test;
    614                  test =  SPI_I2S_ReceiveData(SPI4);
   \                     ??SPI4_IRQHandler_0: (+1)
   \   0000000E   0xB530             PUSH     {R4,R5,LR}
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable17_5  ;; 0x4001340c
   \   00000014   0xB081             SUB      SP,SP,#+4
    615          
    616                  /* Left-Right Mic data */
    617                  Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   00000016   0x2110             MOVS     R1,#+16
   \   00000018   0x.... 0x....      LDR.W    R4,??DataTable13_1
   \   0000001C   0x6805             LDR      R5,[R0, #+0]
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x40020000
   \   00000022   0x.... 0x....      BL       HAL_GPIO_ReadPin
    618          
    619                  /* STM32F746 read data from STA321MP, the data is shifted few bit     */
    620                  /* Data from STA321MP is 32bit formart                                */
    621                  /* SPI is just able to read 16 bit format                             */
    622                  /* Therefore, it needs to correct                                     */
    623                  
    624                  /* ---------------------------+++++++++++++++++++++++++++++++---------*/
    625                  /*                  ______DATAL_____              ______DATAR_____    */
    626                  /*                  _____vRawSens5__              ______vRawSens6_    */       
    627          	if (Main_stLR==GPIO_PIN_SET)
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xB2AD             UXTH     R5,R5
   \   0000002A   0xF884 0x0085      STRB     R0,[R4, #+133]
   \   0000002E   0xF894 0x1086      LDRB     R1,[R4, #+134]
   \   00000032   0xD15C             BNE.N    ??SPI4_IRQHandler_1
    628          	{
    629                      if (Main_stLROld==GPIO_PIN_SET)
   \   00000034   0x2901             CMP      R1,#+1
   \   00000036   0xD05B             BEQ.N    ??SPI4_IRQHandler_2
    630                      {
    631                         SPI4_stNipple = (test);    
    632                      }
    633                      else
    634                      {
    635                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000038   0xF894 0x0081      LDRB     R0,[R4, #+129]
   \   0000003C   0xF9B4 0x1096      LDRSH    R1,[R4, #+150]
    636                         if (WaveRec_idxSens5 < AUDIO_OUT_BUFFER_SIZE)
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   00000044   0x40C5             LSRS     R5,R5,R0
   \   00000046   0xF894 0x0081      LDRB     R0,[R4, #+129]
   \   0000004A   0xF1C0 0x0010      RSB      R0,R0,#+16
   \   0000004E   0xFA01 0xF000      LSL      R0,R1,R0
   \   00000052   0xEA40 0x0105      ORR      R1,R0,R5
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable17_6
   \   0000005A   0xF8A4 0x1092      STRH     R1,[R4, #+146]
   \   0000005E   0x8803             LDRH     R3,[R0, #+0]
   \   00000060   0x7812             LDRB     R2,[R2, #+0]
   \   00000062   0xF5B3 0x6F80      CMP      R3,#+1024
   \   00000066   0xDA19             BGE.N    ??SPI4_IRQHandler_3
    637                         {
    638                              /*-------------------------------------------------------------------------------------------------------------                                             
    639                              Sequence  Record Data                     Processing Data                 Player Data
    640                                                
    641                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    642                                                
    643                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    644                                                
    645                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    646                               ---------------------------------------------------------------------------------------------------------------*/                     
    647                               /* Recording Audio Data */			             
    648                               switch (buffer_switch)
   \   00000068   0xB15A             CBZ.N    R2,??SPI4_IRQHandler_4
   \   0000006A   0x2A02             CMP      R2,#+2
   \   0000006C   0xD011             BEQ.N    ??SPI4_IRQHandler_5
   \   0000006E   0xD30C             BCC.N    ??SPI4_IRQHandler_6
    649                               {
    650                                   case BUF1_PLAY:
    651                                       Buffer2.bufMIC5[WaveRec_idxSens5] = vRawSens5;
    652          
    653                                       break;
    654                                   case BUF2_PLAY:
    655                                       Buffer3.bufMIC5[WaveRec_idxSens5] = vRawSens5;
    656          
    657                                       break;
    658                                   case BUF3_PLAY:
    659                                       Buffer1.bufMIC5[WaveRec_idxSens5] = vRawSens5;
    660          
    661                                       break;                          
    662                                   default:
    663                                       break;
    664                               }
    665                         }
    666                         else
    667                         {
    668                           /* Recording Audio Data */			             
    669                           switch (buffer_switch)
    670                           {
    671                               case BUF1_PLAY:
    672                                   Buffer1.bufMIC5[WaveRec_idxSens5%AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
    673          
    674                                   break;
    675                               case BUF2_PLAY:
    676                                   Buffer2.bufMIC5[WaveRec_idxSens5%AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
    677          
    678                                   break;
    679                               case BUF3_PLAY:
    680                                   Buffer3.bufMIC5[WaveRec_idxSens5%AUDIO_OUT_BUFFER_SIZE] = vRawSens5;
    681          
    682                                   break;                          
    683                               default:
    684                                   break;
    685                           }
    686                         }
    687          	          WaveRec_idxSens5++;
   \   00000070   0x8801             LDRH     R1,[R0, #+0]
   \   00000072   0x1C49             ADDS     R1,R1,#+1
   \   00000074   0x8001             STRH     R1,[R0, #+0]
    688          	   }
    689                  }
    690          	else
    691          	{
    692                    if (Main_stLROld==GPIO_PIN_RESET)
    693                    {
    694                        SPI4_stNipple = (test);	  
    695          
    696                    }
    697                    else
    698                    {
    699                         vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    700                         if (WaveRec_idxSens6 < AUDIO_OUT_BUFFER_SIZE)
    701                         {
    702                              /*-------------------------------------------------------------------------------------------------------------                                             
    703                              Sequence  Record Data                     Processing Data                 Player Data
    704                                                
    705                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    706                                                
    707                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    708                                                
    709                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    710                               ---------------------------------------------------------------------------------------------------------------*/                 
    711                                /* Recording Audio Data */			             
    712                               switch (buffer_switch)
    713                               {
    714                                   case BUF1_PLAY:
    715                                       Buffer2.bufMIC6[WaveRec_idxSens6] = vRawSens6;
    716           
    717                                       break;
    718                                   case BUF2_PLAY:
    719                                       Buffer3.bufMIC6[WaveRec_idxSens6] = vRawSens6;
    720                 
    721                                       break;
    722                                   case BUF3_PLAY:
    723                                       Buffer1.bufMIC6[WaveRec_idxSens6] = vRawSens6;
    724           
    725                                       break;                          
    726                                   default:
    727                                       break;
    728                               }
    729          
    730          					  
    731                         }
    732                         else
    733                         {
    734                            /* Recording Audio Data */						 
    735                             switch (buffer_switch)
    736                             {
    737                                     case BUF1_PLAY:
    738                                             Buffer1.bufMIC6[WaveRec_idxSens6 % AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
    739                            
    740                                             break;
    741                                     case BUF2_PLAY:
    742                                             Buffer2.bufMIC6[WaveRec_idxSens6 % AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
    743                            
    744                                             break;
    745                                     case BUF3_PLAY:
    746                                             Buffer3.bufMIC6[WaveRec_idxSens6 % AUDIO_OUT_BUFFER_SIZE] = vRawSens6;
    747                            
    748                                             break; 						 
    749                                     default:
    750                                             break;
    751                             }
    752          
    753                          }
    754                          WaveRec_idxSens6++;
    755          		
    756                         if ((WaveRec_idxSens6 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) SubFrameFinished();
    757                    }		
    758          	}
    759          #if 0
    760          	/* The code to store data in to buffer for testing purpose */
    761          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
    762          	{
    763          		TestSDO56[iSDO56++]=test;
    764          	}
    765          	else
    766          	{
    767          		iSDO56=0;
    768          	}
    769          #endif
    770          
    771          	/* Update Old value */	  
    772          	Main_stLROld=Main_stLR;	  
   \   00000076   0xF894 0x0085      LDRB     R0,[R4, #+133]
   \   0000007A   0xF884 0x0086      STRB     R0,[R4, #+134]
    773               
    774            }      
    775          }
   \   0000007E   0xB001             ADD      SP,SP,#+4
   \   00000080   0xBD30             POP      {R4,R5,PC}
   \                     ??SPI4_IRQHandler_4: (+1)
   \   00000082   0x.... 0x....      LDR.W    R2,??DataTable13_4  ;; 0xc00080a0
   \   00000086   0x8803             LDRH     R3,[R0, #+0]
   \   00000088   0xE023             B.N      ??SPI4_IRQHandler_7
   \                     ??SPI4_IRQHandler_6: (+1)
   \   0000008A   0x.... 0x....      LDR.W    R2,??DataTable20  ;; 0xc0010140
   \   0000008E   0x8803             LDRH     R3,[R0, #+0]
   \   00000090   0xE01F             B.N      ??SPI4_IRQHandler_7
   \                     ??SPI4_IRQHandler_5: (+1)
   \   00000092   0x8802             LDRH     R2,[R0, #+0]
   \   00000094   0x0052             LSLS     R2,R2,#+1
   \   00000096   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \   0000009A   0xE01C             B.N      ??SPI4_IRQHandler_8
   \                     ??SPI4_IRQHandler_3: (+1)
   \   0000009C   0xB15A             CBZ.N    R2,??SPI4_IRQHandler_9
   \   0000009E   0x2A02             CMP      R2,#+2
   \   000000A0   0xD012             BEQ.N    ??SPI4_IRQHandler_10
   \   000000A2   0xD30E             BCC.N    ??SPI4_IRQHandler_11
   \   000000A4   0x8801             LDRH     R1,[R0, #+0]
   \   000000A6   0x1C49             ADDS     R1,R1,#+1
   \   000000A8   0x8001             STRH     R1,[R0, #+0]
   \   000000AA   0xF894 0x0085      LDRB     R0,[R4, #+133]
   \   000000AE   0xF884 0x0086      STRB     R0,[R4, #+134]
   \   000000B2   0xB001             ADD      SP,SP,#+4
   \   000000B4   0xBD30             POP      {R4,R5,PC}
   \                     ??SPI4_IRQHandler_9: (+1)
   \   000000B6   0x8802             LDRH     R2,[R0, #+0]
   \   000000B8   0x0592             LSLS     R2,R2,#+22
   \   000000BA   0x0D52             LSRS     R2,R2,#+21
   \   000000BC   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \   000000C0   0xE009             B.N      ??SPI4_IRQHandler_8
   \                     ??SPI4_IRQHandler_11: (+1)
   \   000000C2   0x.... 0x....      LDR.W    R2,??DataTable13_4  ;; 0xc00080a0
   \   000000C6   0xE001             B.N      ??SPI4_IRQHandler_12
   \                     ??SPI4_IRQHandler_10: (+1)
   \   000000C8   0x.... 0x....      LDR.W    R2,??DataTable20  ;; 0xc0010140
   \                     ??SPI4_IRQHandler_12: (+1)
   \   000000CC   0x8803             LDRH     R3,[R0, #+0]
   \   000000CE   0x059B             LSLS     R3,R3,#+22
   \   000000D0   0x0D9B             LSRS     R3,R3,#+22
   \                     ??SPI4_IRQHandler_7: (+1)
   \   000000D2   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \                     ??SPI4_IRQHandler_8: (+1)
   \   000000D6   0xF244 0x0350      MOVW     R3,#+16464
   \   000000DA   0x5299             STRH     R1,[R3, R2]
   \   000000DC   0x8801             LDRH     R1,[R0, #+0]
   \   000000DE   0x1C49             ADDS     R1,R1,#+1
   \   000000E0   0x8001             STRH     R1,[R0, #+0]
   \   000000E2   0xF894 0x0085      LDRB     R0,[R4, #+133]
   \   000000E6   0xF884 0x0086      STRB     R0,[R4, #+134]
   \   000000EA   0xB001             ADD      SP,SP,#+4
   \   000000EC   0xBD30             POP      {R4,R5,PC}
   \                     ??SPI4_IRQHandler_1: (+1)
   \   000000EE   0xB939             CBNZ.N   R1,??SPI4_IRQHandler_13
   \                     ??SPI4_IRQHandler_2: (+1)
   \   000000F0   0xF8A4 0x5096      STRH     R5,[R4, #+150]
   \   000000F4   0xF894 0x0085      LDRB     R0,[R4, #+133]
   \   000000F8   0xF884 0x0086      STRB     R0,[R4, #+134]
   \   000000FC   0xB001             ADD      SP,SP,#+4
   \   000000FE   0xBD30             POP      {R4,R5,PC}
   \                     ??SPI4_IRQHandler_13: (+1)
   \   00000100   0xF894 0x0081      LDRB     R0,[R4, #+129]
   \   00000104   0xF9B4 0x1096      LDRSH    R1,[R4, #+150]
   \   00000108   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   0000010C   0x40C5             LSRS     R5,R5,R0
   \   0000010E   0xF894 0x0081      LDRB     R0,[R4, #+129]
   \   00000112   0xF1C0 0x0010      RSB      R0,R0,#+16
   \   00000116   0xFA01 0xF000      LSL      R0,R1,R0
   \   0000011A   0xEA40 0x0105      ORR      R1,R0,R5
   \   0000011E   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000122   0xF8A4 0x1094      STRH     R1,[R4, #+148]
   \   00000126   0x8803             LDRH     R3,[R0, #+0]
   \   00000128   0x7812             LDRB     R2,[R2, #+0]
   \   0000012A   0xF5B3 0x6F80      CMP      R3,#+1024
   \   0000012E   0xDA11             BGE.N    ??SPI4_IRQHandler_14
   \   00000130   0xB11A             CBZ.N    R2,??SPI4_IRQHandler_15
   \   00000132   0x2A02             CMP      R2,#+2
   \   00000134   0xD009             BEQ.N    ??SPI4_IRQHandler_16
   \   00000136   0xD304             BCC.N    ??SPI4_IRQHandler_17
   \   00000138   0xE024             B.N      ??SPI4_IRQHandler_18
   \                     ??SPI4_IRQHandler_15: (+1)
   \   0000013A   0x.... 0x....      LDR.W    R2,??DataTable13_4  ;; 0xc00080a0
   \   0000013E   0x8803             LDRH     R3,[R0, #+0]
   \   00000140   0xE01B             B.N      ??SPI4_IRQHandler_19
   \                     ??SPI4_IRQHandler_17: (+1)
   \   00000142   0x.... 0x....      LDR.W    R2,??DataTable20  ;; 0xc0010140
   \   00000146   0x8803             LDRH     R3,[R0, #+0]
   \   00000148   0xE017             B.N      ??SPI4_IRQHandler_19
   \                     ??SPI4_IRQHandler_16: (+1)
   \   0000014A   0x8802             LDRH     R2,[R0, #+0]
   \   0000014C   0x0052             LSLS     R2,R2,#+1
   \   0000014E   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \   00000152   0xE014             B.N      ??SPI4_IRQHandler_20
   \                     ??SPI4_IRQHandler_14: (+1)
   \   00000154   0xB11A             CBZ.N    R2,??SPI4_IRQHandler_21
   \   00000156   0x2A02             CMP      R2,#+2
   \   00000158   0xD00A             BEQ.N    ??SPI4_IRQHandler_22
   \   0000015A   0xD306             BCC.N    ??SPI4_IRQHandler_23
   \   0000015C   0xE012             B.N      ??SPI4_IRQHandler_18
   \                     ??SPI4_IRQHandler_21: (+1)
   \   0000015E   0x8802             LDRH     R2,[R0, #+0]
   \   00000160   0x0592             LSLS     R2,R2,#+22
   \   00000162   0x0D52             LSRS     R2,R2,#+21
   \   00000164   0xF1A2 0x4280      SUB      R2,R2,#+1073741824
   \   00000168   0xE009             B.N      ??SPI4_IRQHandler_20
   \                     ??SPI4_IRQHandler_23: (+1)
   \   0000016A   0x.... 0x....      LDR.W    R2,??DataTable13_4  ;; 0xc00080a0
   \   0000016E   0xE001             B.N      ??SPI4_IRQHandler_24
   \                     ??SPI4_IRQHandler_22: (+1)
   \   00000170   0x.... 0x....      LDR.W    R2,??DataTable20  ;; 0xc0010140
   \                     ??SPI4_IRQHandler_24: (+1)
   \   00000174   0x8803             LDRH     R3,[R0, #+0]
   \   00000176   0x059B             LSLS     R3,R3,#+22
   \   00000178   0x0D9B             LSRS     R3,R3,#+22
   \                     ??SPI4_IRQHandler_19: (+1)
   \   0000017A   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \                     ??SPI4_IRQHandler_20: (+1)
   \   0000017E   0xF245 0x0364      MOVW     R3,#+20580
   \   00000182   0x5299             STRH     R1,[R3, R2]
   \                     ??SPI4_IRQHandler_18: (+1)
   \   00000184   0x8801             LDRH     R1,[R0, #+0]
   \   00000186   0x1C49             ADDS     R1,R1,#+1
   \   00000188   0x8001             STRH     R1,[R0, #+0]
   \   0000018A   0x8800             LDRH     R0,[R0, #+0]
   \   0000018C   0x210F             MOVS     R1,#+15
   \   0000018E   0x4208             TST      R0,R1
   \   00000190   0xBF08             IT       EQ 
   \   00000192   0x.... 0x....      BLEQ     SubFrameFinished
   \   00000196   0xF894 0x0085      LDRB     R0,[R4, #+133]
   \   0000019A   0xF884 0x0086      STRB     R0,[R4, #+134]
   \   0000019E   0xB001             ADD      SP,SP,#+4
   \   000001A0   0xBD30             POP      {R4,R5,PC}       ;; return
   \   000001A2                      REQUIRE Buffer2
   \   000001A2                      REQUIRE Buffer3
   \   000001A2                      REQUIRE Buffer1
    776          
    777          
    778          
    779          

   \                                 In section .text, align 2, keep-with-next
    780          void SPI5_IRQHandler(void)
    781          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    782            //static uint16_t stNipple;
    783            //static uint8_t stLR, stOder;
    784          
    785            /* USER CODE BEGIN SPI5_IRQn 0 */
    786          
    787            /* USER CODE END SPI5_IRQn 0 */
    788            //HAL_SPI_IRQHandler(&hspi5);
    789            /* USER CODE BEGIN SPI5_IRQn 1 */
    790          
    791            /* USER CODE END SPI5_IRQn 1 */
    792              /* Check if data are available in SPI Data register */
    793            /* SPI in mode Receiver ----------------------------------------------------*/
    794            if(
    795               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    796               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    797               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xD439             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD536             BPL.N    ??SPI5_IRQHandler_0
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD533             BPL.N    ??SPI5_IRQHandler_0
    798            {
    799          
    800          
    801             uint16_t test;
    802             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x4001500c
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
    803             //SPI5->DR = 3333;
    804          
    805            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000020   0xF8B4 0x1134      LDRH     R1,[R4, #+308]
   \   00000024   0xB282             UXTH     R2,R0
   \   00000026   0x0200             LSLS     R0,R0,#+8
   \   00000028   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   0000002C   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   00000030   0xF8A2 0x0144      STRH     R0,[R2, #+324]
   \   00000034   0x1C48             ADDS     R0,R1,#+1
   \   00000036   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    806            
    807            //volume = 64;
    808            
    809            if (idxMic8>=64)
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0x2840             CMP      R0,#+64
   \   0000003E   0xDB20             BLT.N    ??SPI5_IRQHandler_0
    810            {
    811          	if (buffer_switch != 1)
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   00000044   0xF8D4 0x0140      LDR      R0,[R4, #+320]
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable20_3
   \   0000004C   0xF104 0x03C8      ADD      R3,R4,#+200
   \   00000050   0x7812             LDRB     R2,[R2, #+0]
   \   00000052   0x780A             LDRB     R2,[R1, #+0]
   \   00000054   0xF8B4 0x1138      LDRH     R1,[R4, #+312]
   \   00000058   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   0000005C   0xF504 0x70A2      ADD      R0,R4,#+324
    812          	{
    813          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    814          						  (PDMFilter_InitStruct *)&Filter[0]);
    815          	}
    816          	else
    817          	{
    818          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    819          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \   00000060   0x.... 0x....      BL       PDM_Filter_64_LSB
    820          	}
    821          	idxMic8=0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    822          	cntPos++;
   \   0000006A   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0xF8A4 0x0138      STRH     R0,[R4, #+312]
    823          	if (cntPos>=256) cntPos=0;
   \   00000074   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   00000078   0x28FF             CMP      R0,#+255
   \   0000007A   0xBFC4             ITT      GT 
   \   0000007C   0x2000             MOVGT    R0,#+0
   \   0000007E   0xF8A4 0x0138      STRHGT   R0,[R4, #+312]
    824            }
    825              
    826            }
    827            
    828          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   00000082   0xBD10             POP      {R4,PC}          ;; return
    829          
    830          /* SPI5 init function */
    831          
    832          

   \                                 In section .text, align 2, keep-with-next
    833          void SPI6_IRQHandler(void)
    834          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    835            /* SPI in mode Receiver ----------------------------------------------------*/
    836            if(
    837          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    838               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    839               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   00000006   0x6E60             LDR      R0,[R4, #+100]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0789             LSLS     R1,R1,#+30
   \   0000000C   0xD536             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD533             BPL.N    ??SPI6_IRQHandler_0
    840            {
    841          
    842          
    843               uint16_t test;
    844               test =  SPI_I2S_ReceiveData(SPI6);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable20_4  ;; 0x4001540c
   \   00000018   0x6800             LDR      R0,[R0, #+0]
    845               //SPI6->DR = 3333;
    846          
    847              pDataMic7[idxMic7++] =	HTONS(test);
   \   0000001A   0xF8B4 0x1136      LDRH     R1,[R4, #+310]
   \   0000001E   0xB282             UXTH     R2,R0
   \   00000020   0x0200             LSLS     R0,R0,#+8
   \   00000022   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000026   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   0000002A   0xF8A2 0x01C4      STRH     R0,[R2, #+452]
   \   0000002E   0x1C48             ADDS     R0,R1,#+1
   \   00000030   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    848          
    849              //volume = 64;
    850          
    851              if (idxMic7>=64)
   \   00000034   0xB280             UXTH     R0,R0
   \   00000036   0x2840             CMP      R0,#+64
   \   00000038   0xDB20             BLT.N    ??SPI6_IRQHandler_0
    852              {
    853                if (buffer_switch != 1)
   \   0000003A   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   0000003E   0xF8D4 0x013C      LDR      R0,[R4, #+316]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable20_3
   \   00000046   0xF104 0x03FC      ADD      R3,R4,#+252
   \   0000004A   0x7812             LDRB     R2,[R2, #+0]
   \   0000004C   0x780A             LDRB     R2,[R1, #+0]
   \   0000004E   0xF8B4 0x113A      LDRH     R1,[R4, #+314]
   \   00000052   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   00000056   0xF504 0x70E2      ADD      R0,R4,#+452
    854                {
    855                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    856                                                          (PDMFilter_InitStruct *)&Filter[1]);
    857                }
    858                else
    859                {
    860                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    861                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \   0000005A   0x.... 0x....      BL       PDM_Filter_64_LSB
    862                }
    863                idxMic7=0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    864                cntPos7++;
   \   00000064   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0xF8A4 0x013A      STRH     R0,[R4, #+314]
    865                if (cntPos7>=256) cntPos7=0;
   \   0000006E   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000072   0x28FF             CMP      R0,#+255
   \   00000074   0xBFC4             ITT      GT 
   \   00000076   0x2000             MOVGT    R0,#+0
   \   00000078   0xF8A4 0x013A      STRHGT   R0,[R4, #+314]
    866              }
    867              
    868            }
    869          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   0000007C   0xBD10             POP      {R4,PC}          ;; return
    870          
    871          
    872          

   \                                 In section .text, align 2, keep-with-next
    873          void MIC1TO8_Init(void)
    874          {
   \                     MIC1TO8_Init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    875          
    876          
    877            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    878            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    879            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    880            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    881            //HAL_Delay(2);
    882          
    883          
    884            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    885            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    886            I2S1_Init(); /* I2S1   --> SDO12 */
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable13_1
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable20_5  ;; 0x40013000
   \   0000000A   0x6020             STR      R0,[R4, #+0]
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0x60A0             STR      R0,[R4, #+8]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x60E0             STR      R0,[R4, #+12]
   \   00000014   0xF44F 0x7580      MOV      R5,#+256
   \   00000018   0x6120             STR      R0,[R4, #+16]
   \   0000001A   0xF44F 0x567A      MOV      R6,#+16000
   \   0000001E   0x61A0             STR      R0,[R4, #+24]
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0x61E0             STR      R0,[R4, #+28]
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x6065             STR      R5,[R4, #+4]
   \   00000028   0x6166             STR      R6,[R4, #+20]
   \   0000002A   0x.... 0x....      BL       HAL_I2S_Init
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x6841             LDR      R1,[R0, #+4]
   \   00000032   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000036   0x6041             STR      R1,[R0, #+4]
   \   00000038   0x69C1             LDR      R1,[R0, #+28]
   \   0000003A   0xF441 0x6180      ORR      R1,R1,#0x400
   \   0000003E   0x61C1             STR      R1,[R0, #+28]
    887            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    888            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    889            I2S2_Init(); /* I2S2   --> SDO34 */
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable20_6  ;; 0x40003800
   \   00000044   0x6420             STR      R0,[R4, #+64]
   \   00000046   0x2020             MOVS     R0,#+32
   \   00000048   0x64A0             STR      R0,[R4, #+72]
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x64E0             STR      R0,[R4, #+76]
   \   0000004E   0x6520             STR      R0,[R4, #+80]
   \   00000050   0x65A0             STR      R0,[R4, #+88]
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x65E0             STR      R0,[R4, #+92]
   \   00000056   0xF104 0x0040      ADD      R0,R4,#+64
   \   0000005A   0x6465             STR      R5,[R4, #+68]
   \   0000005C   0x6566             STR      R6,[R4, #+84]
   \   0000005E   0x.... 0x....      BL       HAL_I2S_Init
   \   00000062   0x6C20             LDR      R0,[R4, #+64]
   \   00000064   0x6841             LDR      R1,[R0, #+4]
   \   00000066   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000006A   0x6041             STR      R1,[R0, #+4]
   \   0000006C   0x69C1             LDR      R1,[R0, #+28]
   \   0000006E   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000072   0x61C1             STR      R1,[R0, #+28]
    890            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    891            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    892            SPI4_Init(); /* SPI4   --> SDO56 */
   \   00000074   0x.... 0x....      BL       SPI4_Init
    893            SPI5_Init();
   \   00000078   0x.... 0x....      BL       SPI5_Init
    894            SPI6_Init();  
   \   0000007C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000080   0x....             B.N      SPI6_Init
    895          }
    896          

   \                                 In section .text, align 2, keep-with-next
    897          void StartRecMic7_8 (void)
    898          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    899          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   00000006   0xF44F 0x5280      MOV      R2,#+4096
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    900          #if (0)
    901          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
    902          #else
    903          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000014   0xF44F 0x5280      MOV      R2,#+4096
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   0000001C   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000020   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    904          #endif
    905          	  swtSDO7 = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF884 0x0130      STRB     R0,[R4, #+304]
    906          	  swtSDO8 = 0;
   \   0000002A   0xF884 0x0131      STRB     R0,[R4, #+305]
    907          
    908          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    909          
    910          /* I2S1 init function */
    911          /* Read data of MIC12 */
    912          static void I2S1_Init(void)
    913          {
    914          #if 1
    915            hi2s1.Instance = SPI1;
    916            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
    917            hi2s1.Init.Standard = I2S_STANDARD_LSB;
    918            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    919            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    920            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    921            hi2s1.Init.CPOL = I2S_CPOL_LOW;
    922            hi2s1.Init.ClockSource = I2S_CLOCK_SYSCLK;
    923            HAL_I2S_Init(&hi2s1);
    924          
    925            /* Enable TXE and ERR interrupt */
    926           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
    927           
    928           __HAL_I2S_ENABLE(&hi2s1);
    929          #else
    930          	hspi1.Instance = SPI1;
    931          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    932          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    933          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    934          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    935          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    936          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    937          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    938          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    939          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    940          	hspi1.Init.CRCPolynomial = 7;
    941          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    942          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    943          	//hspi4.RxISR = SPI5_CallBack;
    944          	HAL_SPI_Init(&hspi1);
    945          
    946          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    947            /* Enable TXE, RXNE and ERR interrupt */
    948           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    949          
    950           __HAL_SPI_ENABLE(&hspi1);
    951          
    952          #endif
    953          }
    954          
    955          /* I2S2 init function */
    956          /* Read data of MIC34 */
    957          
    958          static void I2S2_Init(void)
    959          {
    960          
    961          #if 1
    962           //HAL_I2S_DeInit(&hi2s2);
    963           hi2s2.Instance = SPI2;
    964           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
    965           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
    966           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
    967           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    968           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    969           hi2s2.Init.CPOL = I2S_CPOL_LOW;
    970           hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
    971          
    972           HAL_I2S_Init(&hi2s2);
    973           /* Enable TXE and ERR interrupt */
    974           __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
    975           __HAL_I2S_ENABLE(&hi2s2);
    976          
    977          #else
    978             hspi2.Instance = SPI2;
    979             hspi2.Init.Mode = SPI_MODE_SLAVE;
    980             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    981             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
    982             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
    983             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
    984             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    985             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
    986             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
    987             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    988             hspi2.Init.CRCPolynomial = 7;
    989             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    990             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    991             HAL_SPI_Init(&hspi2);
    992          
    993          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    994           /* Enable TXE, RXNE and ERR interrupt */
    995          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
    996          
    997          __HAL_SPI_ENABLE(&hspi2);
    998          
    999          #endif
   1000          
   1001          
   1002          }
   1003          
   1004          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
   1005          void SPI4_Init(void)
   1006          {
   \                     SPI4_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1007          
   1008            hspi4.Instance = SPI4;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_4
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable20_9  ;; 0x40013400
   \   0000000A   0x6020             STR      R0,[R4, #+0]
   1009            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6060             STR      R0,[R4, #+4]
   1010            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000010   0xF44F 0x6080      MOV      R0,#+1024
   \   00000014   0x60A0             STR      R0,[R4, #+8]
   1011            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000016   0xF44F 0x6070      MOV      R0,#+3840
   \   0000001A   0x60E0             STR      R0,[R4, #+12]
   1012            hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x6120             STR      R0,[R4, #+16]
   1013            hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6160             STR      R0,[R4, #+20]
   1014            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000024   0xF44F 0x7000      MOV      R0,#+512
   \   00000028   0x61A0             STR      R0,[R4, #+24]
   1015            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x6220             STR      R0,[R4, #+32]
   1016            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0x6260             STR      R0,[R4, #+36]
   1017            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000030   0x62A0             STR      R0,[R4, #+40]
   1018            hspi4.Init.CRCPolynomial = 7;
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0x62E0             STR      R0,[R4, #+44]
   1019            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x6320             STR      R0,[R4, #+48]
   1020            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000003A   0x6360             STR      R0,[R4, #+52]
   1021            HAL_SPI_Init(&hspi4);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       HAL_SPI_Init
   1022          
   1023            /* Enable TXE, RXNE and ERR interrupt */
   1024           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x6841             LDR      R1,[R0, #+4]
   \   00000046   0xF041 0x0160      ORR      R1,R1,#0x60
   \   0000004A   0x6041             STR      R1,[R0, #+4]
   1025          
   1026           __HAL_SPI_ENABLE(&hspi4);
   \   0000004C   0x6801             LDR      R1,[R0, #+0]
   \   0000004E   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000052   0x6001             STR      R1,[R0, #+0]
   1027          }
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
   1028          
   1029          

   \                                 In section .text, align 2, keep-with-next
   1030          void Mic7Rec(void)
   1031          {
   1032              SPI5_Init();
   \                     Mic7Rec: (+1)
   \   00000000   0x....             B.N      SPI5_Init
   1033          }
   1034          

   \                                 In section .text, align 2, keep-with-next
   1035          void Mic8Rec(void)
   1036          {
   1037              SPI6_Init();
   \                     Mic8Rec: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable20_10  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6781             STR      R1,[R0, #+120]
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x67C1             STR      R1,[R0, #+124]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF8C0 0x1084      STR      R1,[R0, #+132]
   \   0000002E   0xF8C0 0x1088      STR      R1,[R0, #+136]
   \   00000032   0xF8C0 0x108C      STR      R1,[R0, #+140]
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0xF8C0 0x1090      STR      R1,[R0, #+144]
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF8C0 0x1094      STR      R1,[R0, #+148]
   \   00000042   0xF8C0 0x1098      STR      R1,[R0, #+152]
   \   00000046   0x3064             ADDS     R0,R0,#+100
   \   00000048   0x.... 0x....      B.W      HAL_SPI_Init
   1038          }
   1039          
   1040          
   1041          /* SPI5 init function */

   \                                 In section .text, align 4, keep-with-next
   1042          void SPI5_Init(void)
   1043          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   1044          	
   1045              /* Enable CRC module */
   1046              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000004   0x....             LDR.N    R0,??DataTable12_1  ;; 0x40023830
   1047          	for (char i=0; i< 2; i++)
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   0000000A   0x2602             MOVS     R6,#+2
   \   0000000C   0xED2D 0x8B02      VPUSH    {D8}
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0xF104 0x05C8      ADD      R5,R4,#+200
   \   00000016   0xF44F 0x577A      MOV      R7,#+16000
   \   0000001A   0xEEB2 0x8A04      VMOV.F32 S16,#10.0
   \   0000001E   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000022   0xEDDF 0x....      VLDR.W   S17,??DataTable12  ;; 0x45fa0000
   \   00000026   0x6001             STR      R1,[R0, #+0]
   1048          	{
   1049          		/* Filter LP & HP Init */
   1050          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \                     ??SPI5_Init_0: (+1)
   \   00000028   0xEDC5 0x8A01      VSTR     S17,[R5, #+4]
   1051          		Filter[i].HP_HZ = 10;
   1052          		Filter[i].Fs = 16000;    //sop1hc: 16000
   1053          		Filter[i].Out_MicChannels = 1;
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xED85 0x8A02      VSTR     S16,[R5, #+8]
   \   00000032   0x802F             STRH     R7,[R5, #+0]
   \   00000034   0x81E8             STRH     R0,[R5, #+14]
   1054          		Filter[i].In_MicChannels = 1;
   \   00000036   0x81A8             STRH     R0,[R5, #+12]
   1055          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   00000038   0x4628             MOV      R0,R5
   \   0000003A   0x.... 0x....      BL       PDM_Filter_Init
   1056          	}
   \   0000003E   0x3534             ADDS     R5,R5,#+52
   \   00000040   0x1E76             SUBS     R6,R6,#+1
   \   00000042   0xD1F1             BNE.N    ??SPI5_Init_0
   1057          
   1058          
   1059            hspi5.Instance = SPI5;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable20_11  ;; 0x40015000
   \   00000048   0x6020             STR      R0,[R4, #+0]
   1060            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x6060             STR      R0,[R4, #+4]
   1061            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000004E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000052   0x60A0             STR      R0,[R4, #+8]
   1062            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000054   0xF44F 0x6070      MOV      R0,#+3840
   \   00000058   0x60E0             STR      R0,[R4, #+12]
   1063            hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000005A   0x2002             MOVS     R0,#+2
   \   0000005C   0x6120             STR      R0,[R4, #+16]
   1064            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x6160             STR      R0,[R4, #+20]
   1065            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000062   0xF44F 0x7000      MOV      R0,#+512
   \   00000066   0x61A0             STR      R0,[R4, #+24]
   1066            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x6220             STR      R0,[R4, #+32]
   1067            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000006C   0x6260             STR      R0,[R4, #+36]
   1068            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000006E   0x62A0             STR      R0,[R4, #+40]
   1069            hspi5.Init.CRCPolynomial = 7;
   \   00000070   0x2007             MOVS     R0,#+7
   \   00000072   0x62E0             STR      R0,[R4, #+44]
   1070            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x6320             STR      R0,[R4, #+48]
   1071            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000078   0x6360             STR      R0,[R4, #+52]
   1072            //hspi5.RxISR = SPI5_CallBack;
   1073            HAL_SPI_Init(&hspi5);
   \   0000007A   0x4620             MOV      R0,R4
   \   0000007C   0xECBD 0x8B02      VPOP     {D8}
   \   00000080   0xB001             ADD      SP,SP,#+4
   \   00000082   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   00000086   0x.... 0x....      B.W      HAL_SPI_Init
   1074          
   1075          
   1076            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1077            /* Enable TXE, RXNE and ERR interrupt */
   1078           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1079          
   1080           //__HAL_SPI_ENABLE(&hspi5);
   1081          
   1082          }
   1083          

   \                                 In section .text, align 2, keep-with-next
   1084          void SPI6_Init(void)
   1085          {
   1086          	
   1087            hspi6.Instance = SPI6;
   \                     SPI6_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable20_10  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   1088            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   1089            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   1090            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   1091            hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   1092            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6781             STR      R1,[R0, #+120]
   1093            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x67C1             STR      R1,[R0, #+124]
   1094            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF8C0 0x1084      STR      R1,[R0, #+132]
   1095            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0xF8C0 0x1088      STR      R1,[R0, #+136]
   1096            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000032   0xF8C0 0x108C      STR      R1,[R0, #+140]
   1097            hspi6.Init.CRCPolynomial = 7;
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0xF8C0 0x1090      STR      R1,[R0, #+144]
   1098            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF8C0 0x1094      STR      R1,[R0, #+148]
   1099            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000042   0xF8C0 0x1098      STR      R1,[R0, #+152]
   1100            //hspi6.RxISR = SPI6_CallBack;
   1101            HAL_SPI_Init(&hspi6);
   \   00000046   0x3064             ADDS     R0,R0,#+100
   \   00000048   0x.... 0x....      B.W      HAL_SPI_Init
   1102          
   1103          
   1104            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
   1105            /* Enable TXE, RXNE and ERR interrupt */
   1106           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
   1107          
   1108           //__HAL_SPI_ENABLE(&hspi6);
   1109          
   1110          }
   1111          
   1112          
   1113          
   1114          

   \                                 In section .text, align 2, keep-with-next
   1115          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
   1116          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
   1117          
   1118            GPIO_InitTypeDef GPIO_InitStruct;
   1119            if (hspi->Instance==SPI1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable20_5  ;; 0x40013000
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD132             BNE.N    ??HAL_SPI_MspInit_0
   1120            {
   1121          	  /* USER CODE BEGIN SPI1_MspInit 0 */
   1122          	  
   1123          	  /* USER CODE END SPI1_MspInit 0 */
   1124          	  /* Peripheral clock enable */
   1125          	  __SPI1_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable20_12  ;; 0x40023830
   1126          	  __GPIOA_CLK_ENABLE();
   1127          	  __GPIOC_CLK_ENABLE();
   1128          	  
   1129          	  /**I2S1 GPIO Configuration	
   1130          		PA4 	------> I2S1_WS --> LRCKO
   1131          		PA5 	------> I2S1_CK --> BICKO
   1132          		PA7 	------> I2S1_SD --> SDO12
   1133          		PC4 	------> I2S1_MCK
   1134          		*/
   1135          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
   1136          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1137          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1138          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1139          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1140          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000014   0xA901             ADD      R1,SP,#+4
   \   00000016   0x6968             LDR      R0,[R5, #+20]
   \   00000018   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   0000001C   0x6168             STR      R0,[R5, #+20]
   \   0000001E   0x6968             LDR      R0,[R5, #+20]
   \   00000020   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x6828             LDR      R0,[R5, #+0]
   \   0000002A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000002E   0x6028             STR      R0,[R5, #+0]
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x6828             LDR      R0,[R5, #+0]
   \   0000003C   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000040   0x6028             STR      R0,[R5, #+0]
   \   00000042   0x6828             LDR      R0,[R5, #+0]
   \   00000044   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   \   0000004C   0x20F0             MOVS     R0,#+240
   \   0000004E   0x9001             STR      R0,[SP, #+4]
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x9002             STR      R0,[SP, #+8]
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x9003             STR      R0,[SP, #+12]
   \   00000058   0x2003             MOVS     R0,#+3
   \   0000005A   0x9004             STR      R0,[SP, #+16]
   \   0000005C   0x2005             MOVS     R0,#+5
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable20_13  ;; 0x40020000
   \   00000064   0x.... 0x....      BL       HAL_GPIO_Init
   1141          	  
   1142          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
   1143          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1144          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
   1145          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1146          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1147          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1148          		
   1149          	  /* Peripheral interrupt init*/
   1150          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000068   0x2200             MOVS     R2,#+0
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x2023             MOVS     R0,#+35
   \   0000006E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1151          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000072   0x2023             MOVS     R0,#+35
   \   00000074   0xE1D0             B.N      ??HAL_SPI_MspInit_1
   1152          	  /* USER CODE BEGIN SPI1_MspInit 1 */
   1153          	  
   1154          	  /* USER CODE END SPI1_MspInit 1 */
   1155          
   1156            }
   1157            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable20_6  ;; 0x40003800
   \   0000007A   0x4288             CMP      R0,R1
   \   0000007C   0xD14A             BNE.N    ??HAL_SPI_MspInit_2
   1158            {
   1159          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1160          	  
   1161          	  /* USER CODE END SPI2_MspInit 0 */
   1162          		/* Peripheral clock enable */
   1163          		__SPI2_CLK_ENABLE();
   \   0000007E   0x.... 0x....      LDR.W    R5,??DataTable20_12  ;; 0x40023830
   1164          		__GPIOI_CLK_ENABLE();
   1165          		__GPIOB_CLK_ENABLE();
   1166          		__GPIOC_CLK_ENABLE();
   1167          	  
   1168          		/**I2S2 GPIO Configuration	   
   1169          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1170          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1171          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1172          	  
   1173          	  
   1174          		*/
   1175          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   1176          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1177          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1178          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1179          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1180          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000082   0xA901             ADD      R1,SP,#+4
   \   00000084   0x6928             LDR      R0,[R5, #+16]
   \   00000086   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   0000008A   0x6128             STR      R0,[R5, #+16]
   \   0000008C   0x6928             LDR      R0,[R5, #+16]
   \   0000008E   0xF400 0x4080      AND      R0,R0,#0x4000
   \   00000092   0x9000             STR      R0,[SP, #+0]
   \   00000094   0x9800             LDR      R0,[SP, #+0]
   \   00000096   0x6828             LDR      R0,[R5, #+0]
   \   00000098   0xF440 0x7080      ORR      R0,R0,#0x100
   \   0000009C   0x6028             STR      R0,[R5, #+0]
   \   0000009E   0x6828             LDR      R0,[R5, #+0]
   \   000000A0   0xF400 0x7080      AND      R0,R0,#0x100
   \   000000A4   0x9000             STR      R0,[SP, #+0]
   \   000000A6   0x9800             LDR      R0,[SP, #+0]
   \   000000A8   0x6828             LDR      R0,[R5, #+0]
   \   000000AA   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000AE   0x6028             STR      R0,[R5, #+0]
   \   000000B0   0x6828             LDR      R0,[R5, #+0]
   \   000000B2   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000B6   0x9000             STR      R0,[SP, #+0]
   \   000000B8   0x9800             LDR      R0,[SP, #+0]
   \   000000BA   0x6828             LDR      R0,[R5, #+0]
   \   000000BC   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000C0   0x6028             STR      R0,[R5, #+0]
   \   000000C2   0x6828             LDR      R0,[R5, #+0]
   \   000000C4   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000C8   0x9000             STR      R0,[SP, #+0]
   \   000000CA   0x9800             LDR      R0,[SP, #+0]
   \   000000CC   0x2002             MOVS     R0,#+2
   \   000000CE   0x9001             STR      R0,[SP, #+4]
   \   000000D0   0x9002             STR      R0,[SP, #+8]
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x9003             STR      R0,[SP, #+12]
   \   000000D6   0x2003             MOVS     R0,#+3
   \   000000D8   0x9004             STR      R0,[SP, #+16]
   \   000000DA   0x2005             MOVS     R0,#+5
   \   000000DC   0x9005             STR      R0,[SP, #+20]
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable20_14  ;; 0x40020800
   \   000000E2   0x.... 0x....      BL       HAL_GPIO_Init
   1181          	  
   1182          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   000000E6   0xF44F 0x5040      MOV      R0,#+12288
   1183          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1184          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1185          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1186          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1187          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   000000EA   0xA901             ADD      R1,SP,#+4
   \   000000EC   0x9001             STR      R0,[SP, #+4]
   \   000000EE   0x2002             MOVS     R0,#+2
   \   000000F0   0x9002             STR      R0,[SP, #+8]
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0x9003             STR      R0,[SP, #+12]
   \   000000F6   0x2003             MOVS     R0,#+3
   \   000000F8   0x9004             STR      R0,[SP, #+16]
   \   000000FA   0x2005             MOVS     R0,#+5
   \   000000FC   0x9005             STR      R0,[SP, #+20]
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable20_15  ;; 0x40020400
   \   00000102   0x.... 0x....      BL       HAL_GPIO_Init
   1188          	  
   1189          	  
   1190          		/* Peripheral interrupt init*/
   1191          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   00000106   0x2200             MOVS     R2,#+0
   \   00000108   0x2101             MOVS     R1,#+1
   \   0000010A   0x2024             MOVS     R0,#+36
   \   0000010C   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1192          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   00000110   0x2024             MOVS     R0,#+36
   \   00000112   0xE181             B.N      ??HAL_SPI_MspInit_1
   1193          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1194          	  
   1195          	  /* USER CODE END SPI2_MspInit 1 */
   1196          
   1197          
   1198            }
   1199            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable20_16  ;; 0x40003c00
   \   00000118   0x4288             CMP      R0,R1
   \   0000011A   0xF040 0x8090      BNE.W    ??HAL_SPI_MspInit_3
   1200            {
   1201          	  
   1202              /**I2S3 GPIO Configuration    
   1203                 PB2     ------> I2S3_SD
   1204                 PA15     ------> I2S3_WS (LRCK)
   1205                 PB3     ------> I2S3_CK 
   1206          	   PC7    ------> MCLK
   1207              */
   1208           
   1209            /* USER CODE BEGIN SPI3_MspInit 1 */
   1210            __SPI3_CLK_ENABLE();
   \   0000011E   0x.... 0x....      LDR.W    R5,??DataTable20_12  ;; 0x40023830
   1211            __GPIOA_CLK_ENABLE();
   1212            __GPIOB_CLK_ENABLE();
   1213          
   1214            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   1215            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1216            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1217            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1218            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1219            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000122   0xA901             ADD      R1,SP,#+4
   \   00000124   0x6928             LDR      R0,[R5, #+16]
   \   00000126   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   0000012A   0x6128             STR      R0,[R5, #+16]
   \   0000012C   0x6928             LDR      R0,[R5, #+16]
   \   0000012E   0xF400 0x4000      AND      R0,R0,#0x8000
   \   00000132   0x9000             STR      R0,[SP, #+0]
   \   00000134   0x9800             LDR      R0,[SP, #+0]
   \   00000136   0x6828             LDR      R0,[R5, #+0]
   \   00000138   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000013C   0x6028             STR      R0,[R5, #+0]
   \   0000013E   0x6828             LDR      R0,[R5, #+0]
   \   00000140   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000144   0x9000             STR      R0,[SP, #+0]
   \   00000146   0x9800             LDR      R0,[SP, #+0]
   \   00000148   0x6828             LDR      R0,[R5, #+0]
   \   0000014A   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000014E   0x6028             STR      R0,[R5, #+0]
   \   00000150   0x6828             LDR      R0,[R5, #+0]
   \   00000152   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000156   0x9000             STR      R0,[SP, #+0]
   \   00000158   0x9800             LDR      R0,[SP, #+0]
   \   0000015A   0x200C             MOVS     R0,#+12
   \   0000015C   0x9001             STR      R0,[SP, #+4]
   \   0000015E   0x2002             MOVS     R0,#+2
   \   00000160   0x9002             STR      R0,[SP, #+8]
   \   00000162   0x2003             MOVS     R0,#+3
   \   00000164   0x9004             STR      R0,[SP, #+16]
   \   00000166   0x2000             MOVS     R0,#+0
   \   00000168   0x9003             STR      R0,[SP, #+12]
   \   0000016A   0x2006             MOVS     R0,#+6
   \   0000016C   0x9005             STR      R0,[SP, #+20]
   \   0000016E   0x.... 0x....      LDR.W    R0,??DataTable20_15  ;; 0x40020400
   \   00000172   0x.... 0x....      BL       HAL_GPIO_Init
   1220          
   1221          
   1222            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   00000176   0xF44F 0x4000      MOV      R0,#+32768
   1223            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1224            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1225            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   0000017A   0xA901             ADD      R1,SP,#+4
   \   0000017C   0x9001             STR      R0,[SP, #+4]
   \   0000017E   0x2002             MOVS     R0,#+2
   \   00000180   0x9002             STR      R0,[SP, #+8]
   \   00000182   0x2006             MOVS     R0,#+6
   \   00000184   0x9005             STR      R0,[SP, #+20]
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable20_13  ;; 0x40020000
   \   0000018A   0x.... 0x....      BL       HAL_GPIO_Init
   1226          
   1227          #ifdef CODEC_MCLK_ENABLED
   1228            __GPIOC_CLK_ENABLE();
   \   0000018E   0x6828             LDR      R0,[R5, #+0]
   1229            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   1230            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1231            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1232            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1233            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1234            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000190   0xA901             ADD      R1,SP,#+4
   \   00000192   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000196   0x6028             STR      R0,[R5, #+0]
   \   00000198   0x6828             LDR      R0,[R5, #+0]
   \   0000019A   0xF000 0x0004      AND      R0,R0,#0x4
   \   0000019E   0x9000             STR      R0,[SP, #+0]
   \   000001A0   0x9800             LDR      R0,[SP, #+0]
   \   000001A2   0x2080             MOVS     R0,#+128
   \   000001A4   0x9001             STR      R0,[SP, #+4]
   \   000001A6   0x2002             MOVS     R0,#+2
   \   000001A8   0x9002             STR      R0,[SP, #+8]
   \   000001AA   0x2003             MOVS     R0,#+3
   \   000001AC   0x9004             STR      R0,[SP, #+16]
   \   000001AE   0x2000             MOVS     R0,#+0
   \   000001B0   0x9003             STR      R0,[SP, #+12]
   \   000001B2   0x2006             MOVS     R0,#+6
   \   000001B4   0x9005             STR      R0,[SP, #+20]
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable20_14  ;; 0x40020800
   \   000001BA   0x.... 0x....      BL       HAL_GPIO_Init
   1235          
   1236          #endif /* CODEC_MCLK_ENABLED */ 
   1237          
   1238          #ifdef I2S_INTERRUPT   
   1239               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1240               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1241               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1242          
   1243               /* Enable the I2S DMA request */
   1244               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1245               //__HAL_I2S_ENABLE(&hi2s3);
   1246            	    /* Peripheral interrupt init*/
   1247          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1248          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1249          #endif
   1250          
   1251                /* Enable the DMA clock */ 
   1252          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   000001BE   0x6828             LDR      R0,[R5, #+0]
   \   000001C0   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000001C4   0x6028             STR      R0,[R5, #+0]
   \   000001C6   0x6828             LDR      R0,[R5, #+0]
   1253          
   1254                /* Configure the DMA Stream */
   1255                //HAL_DMA_DeInit(&DmaHandle);
   1256          
   1257                /* Set the parameters to be configured */ 
   1258          	  DmaHandle.Instance = DMA1_Stream7;
   \   000001C8   0x.... 0x....      LDR.W    R5,??DataTable20_17
   \   000001CC   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000001D0   0x9000             STR      R0,[SP, #+0]
   \   000001D2   0x9800             LDR      R0,[SP, #+0]
   \   000001D4   0x.... 0x....      LDR.W    R0,??DataTable20_18  ;; 0x400260b8
   \   000001D8   0x6028             STR      R0,[R5, #+0]
   1259                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x6068             STR      R0,[R5, #+4]
   1260          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   000001DE   0x2040             MOVS     R0,#+64
   \   000001E0   0x60A8             STR      R0,[R5, #+8]
   1261          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   000001E2   0x2000             MOVS     R0,#+0
   \   000001E4   0x60E8             STR      R0,[R5, #+12]
   1262          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   000001E6   0xF44F 0x6080      MOV      R0,#+1024
   \   000001EA   0x6128             STR      R0,[R5, #+16]
   1263          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   000001EC   0xF44F 0x6000      MOV      R0,#+2048
   \   000001F0   0x6168             STR      R0,[R5, #+20]
   1264                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   000001F2   0xF44F 0x5000      MOV      R0,#+8192
   \   000001F6   0x61A8             STR      R0,[R5, #+24]
   1265          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   000001F8   0x2000             MOVS     R0,#+0
   \   000001FA   0x61E8             STR      R0,[R5, #+28]
   1266                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   000001FC   0xF44F 0x3000      MOV      R0,#+131072
   \   00000200   0x6228             STR      R0,[R5, #+32]
   1267          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   00000202   0x2004             MOVS     R0,#+4
   \   00000204   0x6268             STR      R0,[R5, #+36]
   1268                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   00000206   0x2003             MOVS     R0,#+3
   \   00000208   0x62A8             STR      R0,[R5, #+40]
   1269                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   0000020A   0x2000             MOVS     R0,#+0
   \   0000020C   0x62E8             STR      R0,[R5, #+44]
   1270                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   0000020E   0x6328             STR      R0,[R5, #+48]
   1271                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1272                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1273                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1274                //DmaHandle.XferCpltCallback = &TC_Callback;
   1275           
   1276          
   1277                /* Associate the initialized DMA handle to the the SPI handle */
   1278                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   1279                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1280          
   1281          	   /* Deinitialize the Stream for new transfer */
   1282                 HAL_DMA_DeInit(&DmaHandle);
   \   00000210   0x4628             MOV      R0,R5
   \   00000212   0x6565             STR      R5,[R4, #+84]
   \   00000214   0x63AC             STR      R4,[R5, #+56]
   \   00000216   0x.... 0x....      BL       HAL_DMA_DeInit
   1283                 /* Configure the DMA Stream */
   1284          	   HAL_DMA_Init(&DmaHandle);
   \   0000021A   0x4628             MOV      R0,R5
   \   0000021C   0x.... 0x....      BL       HAL_DMA_Init
   1285          
   1286                /* Set Interrupt Group Priority */
   1287                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   00000220   0x2200             MOVS     R2,#+0
   \   00000222   0x2100             MOVS     R1,#+0
   \   00000224   0x202F             MOVS     R0,#+47
   \   00000226   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1288                /* Enable the DMA STREAM global Interrupt */
   1289                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   0000022A   0x202F             MOVS     R0,#+47
   \   0000022C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1290          
   1291          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000230   0x6828             LDR      R0,[R5, #+0]
   \   00000232   0x6801             LDR      R1,[R0, #+0]
   \   00000234   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000238   0x6001             STR      R1,[R0, #+0]
   1292          	    
   1293            }
   1294            else if(hspi->Instance==SPI4)
   1295            {
   1296            /* USER CODE BEGIN SPI4_MspInit 0 */
   1297          
   1298            /* USER CODE END SPI4_MspInit 0 */
   1299              /* Peripheral clock enable */
   1300              __SPI4_CLK_ENABLE();
   1301              __HAL_RCC_GPIOE_CLK_ENABLE();
   1302            
   1303            
   1304              /**SPI4 GPIO Configuration    
   1305              PE2     ------> SPI4_SCK
   1306              PE4     ------> SPI4_NSS
   1307              PE5     ------> SPI4_MISO
   1308              PE6     ------> SPI4_MOSI 
   1309              */
   1310              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   1311              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1312              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1313              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1314              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   1315              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   1316          
   1317          	/* Peripheral interrupt init*/
   1318              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   1319              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   1320          
   1321            /* USER CODE BEGIN SPI4_MspInit 1 */
   1322          
   1323            /* USER CODE END SPI4_MspInit 1 */
   1324            }
   1325            else if(hspi->Instance==SPI5)
   1326            {
   1327            /* USER CODE BEGIN SPI5_MspInit 0 */
   1328          
   1329            /* USER CODE END SPI5_MspInit 0 */
   1330              /* Peripheral clock enable */
   1331              __HAL_RCC_SPI5_CLK_ENABLE();
   1332              __HAL_RCC_GPIOF_CLK_ENABLE();
   1333            
   1334              /**SPI5 GPIO Configuration    
   1335              PF7     ------> SPI5_SCK  --> PF7
   1336              PF11     ------> SPI5_MOSI --> PF9
   1337                               SPI5_MISO --> PF8
   1338                                    NSS   -->  PF6
   1339              */
   1340              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   1341              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   1342              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1343              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1344              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   1345              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   1346          
   1347          #if 0
   1348            /* Peripheral interrupt init*/
   1349              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1350              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1351          
   1352          #else
   1353          	/* Peripheral DMA init*/
   1354              __HAL_RCC_DMA2_CLK_ENABLE();
   1355          	hdma_spi5_rx.Instance = DMA2_Stream5;
   1356          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   1357          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1358          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1359          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   1360          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1361          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   1362          	hdma_spi5_rx.Init.Mode = DMA_NORMAL;
   1363          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1364          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1365          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1366          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   1367          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   1368          	HAL_DMA_Init(&hdma_spi5_rx);
   1369          
   1370              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   1371          
   1372          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1373          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   1374          
   1375          #endif
   1376            /* USER CODE END SPI5_MspInit 1 */
   1377            }
   1378            else if(hspi->Instance==SPI6)
   1379            {
   1380            /* USER CODE BEGIN SPI6_MspInit 0 */
   1381          
   1382            /* USER CODE END SPI6_MspInit 0 */
   1383              /* Peripheral clock enable */
   1384              __SPI6_CLK_ENABLE();
   1385              __HAL_RCC_GPIOG_CLK_ENABLE();
   1386            
   1387              /**SPI6 GPIO Configuration    
   1388              PG13     ------> SPI6_SCK
   1389              PG14     ------> SPI6_MOSI 
   1390              */
   1391              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   1392              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1393              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1394              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1395              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   1396              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   1397          
   1398          #if 0
   1399          	  /* Peripheral interrupt init*/
   1400              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1401              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1402          #else
   1403          	/* Peripheral DMA init*/
   1404          	__HAL_RCC_DMA2_CLK_ENABLE();
   1405          	hdma_spi6_rx.Instance = DMA2_Stream6;
   1406          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   1407          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1408          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1409          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   1410          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1411          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1412          	hdma_spi6_rx.Init.Mode = DMA_NORMAL;
   1413          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1414          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1415          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1416          	hdma_spi6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   1417          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   1418          	HAL_DMA_Init(&hdma_spi6_rx);
   1419          
   1420          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   1421          
   1422          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1423          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   1424          
   1425          #endif
   1426            }
   1427          
   1428          }
   \   0000023A   0xB007             ADD      SP,SP,#+28
   \   0000023C   0xBD30             POP      {R4,R5,PC}
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   0000023E   0x.... 0x....      LDR.W    R1,??DataTable20_9  ;; 0x40013400
   \   00000242   0x4288             CMP      R0,R1
   \   00000244   0xD128             BNE.N    ??HAL_SPI_MspInit_4
   \   00000246   0x.... 0x....      LDR.W    R5,??DataTable20_12  ;; 0x40023830
   \   0000024A   0xA901             ADD      R1,SP,#+4
   \   0000024C   0x6968             LDR      R0,[R5, #+20]
   \   0000024E   0xF440 0x5000      ORR      R0,R0,#0x2000
   \   00000252   0x6168             STR      R0,[R5, #+20]
   \   00000254   0x6968             LDR      R0,[R5, #+20]
   \   00000256   0xF400 0x5000      AND      R0,R0,#0x2000
   \   0000025A   0x9000             STR      R0,[SP, #+0]
   \   0000025C   0x9800             LDR      R0,[SP, #+0]
   \   0000025E   0x6828             LDR      R0,[R5, #+0]
   \   00000260   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000264   0x6028             STR      R0,[R5, #+0]
   \   00000266   0x6828             LDR      R0,[R5, #+0]
   \   00000268   0xF000 0x0010      AND      R0,R0,#0x10
   \   0000026C   0x9000             STR      R0,[SP, #+0]
   \   0000026E   0x9800             LDR      R0,[SP, #+0]
   \   00000270   0x2074             MOVS     R0,#+116
   \   00000272   0x9001             STR      R0,[SP, #+4]
   \   00000274   0x2002             MOVS     R0,#+2
   \   00000276   0x9002             STR      R0,[SP, #+8]
   \   00000278   0x2000             MOVS     R0,#+0
   \   0000027A   0x9003             STR      R0,[SP, #+12]
   \   0000027C   0x2003             MOVS     R0,#+3
   \   0000027E   0x9004             STR      R0,[SP, #+16]
   \   00000280   0x2005             MOVS     R0,#+5
   \   00000282   0x9005             STR      R0,[SP, #+20]
   \   00000284   0x....             LDR.N    R0,??DataTable16  ;; 0x40021000
   \   00000286   0x.... 0x....      BL       HAL_GPIO_Init
   \   0000028A   0x2200             MOVS     R2,#+0
   \   0000028C   0x2102             MOVS     R1,#+2
   \   0000028E   0x2054             MOVS     R0,#+84
   \   00000290   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000294   0x2054             MOVS     R0,#+84
   \   00000296   0xE0BF             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   00000298   0x.... 0x....      LDR.W    R1,??DataTable20_11  ;; 0x40015000
   \   0000029C   0x4288             CMP      R0,R1
   \   0000029E   0xD15A             BNE.N    ??HAL_SPI_MspInit_5
   \   000002A0   0x.... 0x....      LDR.W    R5,??DataTable20_12  ;; 0x40023830
   \   000002A4   0xA901             ADD      R1,SP,#+4
   \   000002A6   0x6968             LDR      R0,[R5, #+20]
   \   000002A8   0xF440 0x1080      ORR      R0,R0,#0x100000
   \   000002AC   0x6168             STR      R0,[R5, #+20]
   \   000002AE   0x6968             LDR      R0,[R5, #+20]
   \   000002B0   0xF400 0x1080      AND      R0,R0,#0x100000
   \   000002B4   0x9000             STR      R0,[SP, #+0]
   \   000002B6   0x9800             LDR      R0,[SP, #+0]
   \   000002B8   0x6828             LDR      R0,[R5, #+0]
   \   000002BA   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000002BE   0x6028             STR      R0,[R5, #+0]
   \   000002C0   0x6828             LDR      R0,[R5, #+0]
   \   000002C2   0xF000 0x0020      AND      R0,R0,#0x20
   \   000002C6   0x9000             STR      R0,[SP, #+0]
   \   000002C8   0x9800             LDR      R0,[SP, #+0]
   \   000002CA   0xF44F 0x7070      MOV      R0,#+960
   \   000002CE   0x9001             STR      R0,[SP, #+4]
   \   000002D0   0x2012             MOVS     R0,#+18
   \   000002D2   0x9002             STR      R0,[SP, #+8]
   \   000002D4   0x2001             MOVS     R0,#+1
   \   000002D6   0x9003             STR      R0,[SP, #+12]
   \   000002D8   0x2003             MOVS     R0,#+3
   \   000002DA   0x9004             STR      R0,[SP, #+16]
   \   000002DC   0x2005             MOVS     R0,#+5
   \   000002DE   0x9005             STR      R0,[SP, #+20]
   \   000002E0   0x.... 0x....      LDR.W    R0,??DataTable20_19  ;; 0x40021400
   \   000002E4   0x.... 0x....      BL       HAL_GPIO_Init
   \   000002E8   0x6828             LDR      R0,[R5, #+0]
   \   000002EA   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000002EE   0x6028             STR      R0,[R5, #+0]
   \   000002F0   0x6828             LDR      R0,[R5, #+0]
   \   000002F2   0x.... 0x....      LDR.W    R5,??DataTable20_20
   \   000002F6   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000002FA   0x9000             STR      R0,[SP, #+0]
   \   000002FC   0x9800             LDR      R0,[SP, #+0]
   \   000002FE   0x.... 0x....      LDR.W    R0,??DataTable20_18  ;; 0x400260b8
   \   00000302   0xF500 0x7074      ADD      R0,R0,#+976
   \   00000306   0x6028             STR      R0,[R5, #+0]
   \   00000308   0xF04F 0x6060      MOV      R0,#+234881024
   \   0000030C   0x6068             STR      R0,[R5, #+4]
   \   0000030E   0x2000             MOVS     R0,#+0
   \   00000310   0x60A8             STR      R0,[R5, #+8]
   \   00000312   0x60E8             STR      R0,[R5, #+12]
   \   00000314   0xF44F 0x6080      MOV      R0,#+1024
   \   00000318   0x6128             STR      R0,[R5, #+16]
   \   0000031A   0xF44F 0x6000      MOV      R0,#+2048
   \   0000031E   0x6168             STR      R0,[R5, #+20]
   \   00000320   0xF44F 0x5000      MOV      R0,#+8192
   \   00000324   0x61A8             STR      R0,[R5, #+24]
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x61E8             STR      R0,[R5, #+28]
   \   0000032A   0xF44F 0x3000      MOV      R0,#+131072
   \   0000032E   0x6228             STR      R0,[R5, #+32]
   \   00000330   0x2000             MOVS     R0,#+0
   \   00000332   0x6268             STR      R0,[R5, #+36]
   \   00000334   0x2003             MOVS     R0,#+3
   \   00000336   0x62A8             STR      R0,[R5, #+40]
   \   00000338   0x2000             MOVS     R0,#+0
   \   0000033A   0x62E8             STR      R0,[R5, #+44]
   \   0000033C   0x6328             STR      R0,[R5, #+48]
   \   0000033E   0x4628             MOV      R0,R5
   \   00000340   0x.... 0x....      BL       HAL_DMA_Init
   \   00000344   0x65A5             STR      R5,[R4, #+88]
   \   00000346   0x2200             MOVS     R2,#+0
   \   00000348   0x63AC             STR      R4,[R5, #+56]
   \   0000034A   0x2104             MOVS     R1,#+4
   \   0000034C   0x2044             MOVS     R0,#+68
   \   0000034E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000352   0x2044             MOVS     R0,#+68
   \   00000354   0xE060             B.N      ??HAL_SPI_MspInit_1
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   00000356   0x.... 0x....      LDR.W    R1,??DataTable20_10  ;; 0x40015400
   \   0000035A   0x4288             CMP      R0,R1
   \   0000035C   0xD15E             BNE.N    ??HAL_SPI_MspInit_6
   \   0000035E   0x.... 0x....      LDR.W    R5,??DataTable20_12  ;; 0x40023830
   \   00000362   0xA901             ADD      R1,SP,#+4
   \   00000364   0x6968             LDR      R0,[R5, #+20]
   \   00000366   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   0000036A   0x6168             STR      R0,[R5, #+20]
   \   0000036C   0x6968             LDR      R0,[R5, #+20]
   \   0000036E   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000372   0x9000             STR      R0,[SP, #+0]
   \   00000374   0x9800             LDR      R0,[SP, #+0]
   \   00000376   0x6828             LDR      R0,[R5, #+0]
   \   00000378   0xF040 0x0040      ORR      R0,R0,#0x40
   \   0000037C   0x6028             STR      R0,[R5, #+0]
   \   0000037E   0x6828             LDR      R0,[R5, #+0]
   \   00000380   0xF000 0x0040      AND      R0,R0,#0x40
   \   00000384   0x9000             STR      R0,[SP, #+0]
   \   00000386   0x9800             LDR      R0,[SP, #+0]
   \   00000388   0xF44F 0x40C0      MOV      R0,#+24576
   \   0000038C   0x9001             STR      R0,[SP, #+4]
   \   0000038E   0x2002             MOVS     R0,#+2
   \   00000390   0x9002             STR      R0,[SP, #+8]
   \   00000392   0x2000             MOVS     R0,#+0
   \   00000394   0x9003             STR      R0,[SP, #+12]
   \   00000396   0x2003             MOVS     R0,#+3
   \   00000398   0x9004             STR      R0,[SP, #+16]
   \   0000039A   0x2005             MOVS     R0,#+5
   \   0000039C   0x9005             STR      R0,[SP, #+20]
   \   0000039E   0x.... 0x....      LDR.W    R0,??DataTable20_21  ;; 0x40021800
   \   000003A2   0x.... 0x....      BL       HAL_GPIO_Init
   \   000003A6   0x6828             LDR      R0,[R5, #+0]
   \   000003A8   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000003AC   0x6028             STR      R0,[R5, #+0]
   \   000003AE   0x6828             LDR      R0,[R5, #+0]
   \   000003B0   0x.... 0x....      LDR.W    R5,??DataTable20_20
   \   000003B4   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000003B8   0x9000             STR      R0,[SP, #+0]
   \   000003BA   0x9800             LDR      R0,[SP, #+0]
   \   000003BC   0x.... 0x....      LDR.W    R0,??DataTable20_18  ;; 0x400260b8
   \   000003C0   0xF500 0x707A      ADD      R0,R0,#+1000
   \   000003C4   0x6528             STR      R0,[R5, #+80]
   \   000003C6   0xF04F 0x7000      MOV      R0,#+33554432
   \   000003CA   0x6568             STR      R0,[R5, #+84]
   \   000003CC   0x2000             MOVS     R0,#+0
   \   000003CE   0x65A8             STR      R0,[R5, #+88]
   \   000003D0   0x65E8             STR      R0,[R5, #+92]
   \   000003D2   0xF44F 0x6080      MOV      R0,#+1024
   \   000003D6   0x6628             STR      R0,[R5, #+96]
   \   000003D8   0xF44F 0x6000      MOV      R0,#+2048
   \   000003DC   0x6668             STR      R0,[R5, #+100]
   \   000003DE   0x66A8             STR      R0,[R5, #+104]
   \   000003E0   0x2000             MOVS     R0,#+0
   \   000003E2   0x66E8             STR      R0,[R5, #+108]
   \   000003E4   0xF44F 0x3000      MOV      R0,#+131072
   \   000003E8   0x6728             STR      R0,[R5, #+112]
   \   000003EA   0x2000             MOVS     R0,#+0
   \   000003EC   0x6768             STR      R0,[R5, #+116]
   \   000003EE   0x2003             MOVS     R0,#+3
   \   000003F0   0x67A8             STR      R0,[R5, #+120]
   \   000003F2   0x2000             MOVS     R0,#+0
   \   000003F4   0x67E8             STR      R0,[R5, #+124]
   \   000003F6   0xF8C5 0x0080      STR      R0,[R5, #+128]
   \   000003FA   0xF105 0x0050      ADD      R0,R5,#+80
   \   000003FE   0x.... 0x....      BL       HAL_DMA_Init
   \   00000402   0xF105 0x0050      ADD      R0,R5,#+80
   \   00000406   0x2201             MOVS     R2,#+1
   \   00000408   0x65A0             STR      R0,[R4, #+88]
   \   0000040A   0x2107             MOVS     R1,#+7
   \   0000040C   0xF8C5 0x4088      STR      R4,[R5, #+136]
   \   00000410   0x2045             MOVS     R0,#+69
   \   00000412   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   00000416   0x2045             MOVS     R0,#+69
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   00000418   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \                     ??HAL_SPI_MspInit_6: (+1)
   \   0000041C   0xB007             ADD      SP,SP,#+28
   \   0000041E   0xBD30             POP      {R4,R5,PC}       ;; return
   1429          
   1430          
   1431          
   1432          
   1433          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1434          {
   1435            /* Check the parameters */
   1436            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1437            
   1438            /* Write in the DR register the data to be sent */
   1439            SPIx->DR = Data;
   1440          }
   1441          
   1442          
   1443          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1444          {
   1445            /* Check the parameters */
   1446            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1447            
   1448            /* Return the data in the DR register */
   1449            return SPIx->DR;
   1450          }
   1451          
   1452          

   \                                 In section .text, align 2, keep-with-next
   1453          void RecordUpdBuf(void)
   1454          {
   1455          
   1456               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_22
   \   00000004   0xF890 0x1080      LDRB     R1,[R0, #+128]
   \   00000008   0x2902             CMP      R1,#+2
   \   0000000A   0xD173             BNE.N    ??RecordUpdBuf_0
   1457               {
   1458                  WaveRecord_flgInt=0;
   \   0000000C   0x2100             MOVS     R1,#+0
   1459          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable20_23
   \   00000012   0xF880 0x1080      STRB     R1,[R0, #+128]
   \   00000016   0x8811             LDRH     R1,[R2, #+0]
   \   00000018   0xF5B1 0x6F80      CMP      R1,#+1024
   \   0000001C   0xBFBE             ITTT     LT 
   \   0000001E   0x....             LDRLT.N  R1,??DataTable16_1
   \   00000020   0x880B             LDRHLT   R3,[R1, #+0]
   \   00000022   0xF5B3 0x6F80      CMPLT    R3,#+1024
   \   00000026   0xDA65             BGE.N    ??RecordUpdBuf_0
   1460          		//			  &&(stLR!=stLROld))
   1461          			{
   1462          		/*-------------------------------------------------------------------------------------------------------------
   1463          					  
   1464          			Sequence  Record Data					  Processing Data				  Player Data
   1465          					  
   1466          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1467          					  
   1468          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1469          					  
   1470          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1471          		 ---------------------------------------------------------------------------------------------------------------*/
   1472          					  /* Recording Audio Data */						 
   1473          					   switch (buffer_switch)
   \   00000028   0x.... 0x....      LDR.W    R3,??DataTable20_24
   \   0000002C   0x781B             LDRB     R3,[R3, #+0]
   \   0000002E   0xB11B             CBZ.N    R3,??RecordUpdBuf_1
   \   00000030   0x2B02             CMP      R3,#+2
   \   00000032   0xD010             BEQ.N    ??RecordUpdBuf_2
   \   00000034   0xD308             BCC.N    ??RecordUpdBuf_3
   \   00000036   0x4770             BX       LR
   1474          					   {
   1475          								case BUF1_PLAY:
   1476          
   1477          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_1: (+1)
   \   00000038   0x8813             LDRH     R3,[R2, #+0]
   \   0000003A   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000003E   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000042   0x.... 0x....      LDR.W    R2,??DataTable20_25  ;; 0xc00080a0
   \   00000046   0xE00D             B.N      ??RecordUpdBuf_4
   1478          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   1479          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1480          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   1481          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1482          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   1483          	
   1484          										break;
   1485          								case BUF2_PLAY:
   1486          
   1487          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_3: (+1)
   \   00000048   0x8813             LDRH     R3,[R2, #+0]
   \   0000004A   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000004E   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000052   0x....             LDR.N    R2,??DataTable17  ;; 0xc0010140
   \   00000054   0xE006             B.N      ??RecordUpdBuf_4
   1488          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   1489          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1490          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   1491          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1492          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   1493          		
   1494          
   1495          										break;
   1496          								case BUF3_PLAY:
   1497          
   1498          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_2: (+1)
   \   00000056   0x8813             LDRH     R3,[R2, #+0]
   \   00000058   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000005C   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000060   0xF04F 0x4240      MOV      R2,#-1073741824
   \                     ??RecordUpdBuf_4: (+1)
   \   00000064   0xF9B0 0xC08A      LDRSH    R12,[R0, #+138]
   \   00000068   0xF822 0xC013      STRH     R12,[R2, R3, LSL #+1]
   1499          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   0000006C   0x880B             LDRH     R3,[R1, #+0]
   \   0000006E   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000072   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   00000076   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   0000007A   0xF9B0 0x108C      LDRSH    R1,[R0, #+140]
   \   0000007E   0xF241 0x0C14      MOVW     R12,#+4116
   \   00000082   0xF82C 0x1003      STRH     R1,[R12, R3]
   1500          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   00000086   0x....             LDR.N    R1,??DataTable17_2
   \   00000088   0x880B             LDRH     R3,[R1, #+0]
   \   0000008A   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000008E   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   00000092   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   00000096   0xF9B0 0x1090      LDRSH    R1,[R0, #+144]
   \   0000009A   0xF242 0x0C28      MOVW     R12,#+8232
   \   0000009E   0xF82C 0x1003      STRH     R1,[R12, R3]
   1501          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \   000000A2   0x....             LDR.N    R1,??DataTable17_3
   \   000000A4   0x880B             LDRH     R3,[R1, #+0]
   \   000000A6   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000AA   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000AE   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000B2   0xF9B0 0x108E      LDRSH    R1,[R0, #+142]
   \   000000B6   0xF243 0x0C3C      MOVW     R12,#+12348
   \   000000BA   0xF82C 0x1003      STRH     R1,[R12, R3]
   1502          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000000BE   0x....             LDR.N    R1,??DataTable17_6
   \   000000C0   0x880B             LDRH     R3,[R1, #+0]
   \   000000C2   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000C6   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000CA   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000CE   0xF9B0 0x1092      LDRSH    R1,[R0, #+146]
   \   000000D2   0xF244 0x0C50      MOVW     R12,#+16464
   \   000000D6   0xF82C 0x1003      STRH     R1,[R12, R3]
   1503          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   \   000000DA   0x....             LDR.N    R1,??DataTable19
   \   000000DC   0x880B             LDRH     R3,[R1, #+0]
   \   000000DE   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000E2   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000E6   0xF9B0 0x0094      LDRSH    R0,[R0, #+148]
   \   000000EA   0xEB02 0x0143      ADD      R1,R2,R3, LSL #+1
   \   000000EE   0xF245 0x0264      MOVW     R2,#+20580
   \   000000F2   0x5250             STRH     R0,[R2, R1]
   1504          										break;
   1505          								default:
   1506          										break; 
   1507          					   }
   1508          				
   1509          				}
   1510                               
   1511               	}
   1512          }
   \                     ??RecordUpdBuf_0: (+1)
   \   000000F4   0x4770             BX       LR               ;; return
   \   000000F6                      REQUIRE Buffer2
   \   000000F6                      REQUIRE Buffer3
   \   000000F6                      REQUIRE Buffer1
   1513          
   1514          

   \                                 In section .text, align 2, keep-with-next
   1515          void DMA2_Stream5_IRQHandler(void)
   1516          {
   1517            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1518          
   1519            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1520            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_20
   \   00000004   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1521            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1522          
   1523            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1524          }
   1525          
   1526          /**
   1527          * @brief This function handles DMA2 stream6 global interrupt.
   1528          */

   \                                 In section .text, align 2, keep-with-next
   1529          void DMA2_Stream6_IRQHandler(void)
   1530          {
   1531            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1532          
   1533            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1534            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_26
   \   00000004   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1535            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1536          
   1537            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1538          }
   1539          

   \                                 In section .text, align 2, keep-with-next
   1540          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1541          {
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1542              if(hspi->Instance==SPI1)
   1543              {
   1544                  /* Copy Data to Record Buffer */
   1545          		//RecordUpdBuf();
   1546          		//XferCplt = 1;
   1547                  //Audio_Play_Out();
   1548              }
   1549              else if (hspi->Instance==SPI2)
   1550              {
   1551          
   1552              }
   1553              else if (hspi->Instance==SPI4)
   1554              {
   1555          
   1556              }
   1557          	else
   1558          	{
   1559          
   1560          	}
   1561          
   1562              if (hspi->Instance==SPI5)
   \   00000004   0x....             LDR.N    R1,??DataTable20_11  ;; 0x40015000
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD113             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1563              {
   1564                  MIC7Rec();
   \   0000000C   0x....             LDR.N    R0,??DataTable20_1
   \   0000000E   0xF44F 0x5280      MOV      R2,#+4096
   \   00000012   0xF890 0x1130      LDRB     R1,[R0, #+304]
   \   00000016   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000001A   0xF880 0x1130      STRB     R1,[R0, #+304]
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0xF880 0x1132      STRB     R1,[R0, #+306]
   \   00000024   0xF890 0x1130      LDRB     R1,[R0, #+304]
   \   00000028   0x2901             CMP      R1,#+1
   \   0000002A   0xBF0C             ITE      EQ 
   \   0000002C   0x....             LDREQ.N  R1,??DataTable20_27
   \   0000002E   0x....             LDRNE.N  R1,??DataTable20_7
   \   00000030   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1565              }
   1566              else
   1567              {
   1568                
   1569              }
   1570              
   1571              if (hspi->Instance==SPI6) //MIC8
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0x....             LDR.N    R1,??DataTable20_10  ;; 0x40015400
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xD116             BNE.N    ??HAL_SPI_RxCpltCallback_1
   1572              {
   1573          #if 0							
   1574          
   1575              if (swtSDO8==0x01)
   1576             {
   1577                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1578             }
   1579             else
   1580             {
   1581          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1582             }      
   1583             AudioUSBSend(idxFrmPDMMic8++);
   1584          
   1585             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   1586             {
   1587                 swtSDO8^=0x01;
   1588                 WaveRecord_flgSDO8Finish = 1;
   1589                 idxFrmPDMMic8 = 0;
   1590          		RESET_IDX
   1591          		XferCplt = 0; // clear DMA interrupt flag
   1592          		switch (buffer_switch)
   1593          		{
   1594          	        case BUF1_PLAY: 		
   1595          	          buffer_switch = BUF3_PLAY;
   1596          	          break;
   1597          	        case BUF2_PLAY: 
   1598          	          buffer_switch = BUF1_PLAY;		
   1599          	          break;
   1600          	        case BUF3_PLAY: 	
   1601          	          buffer_switch = BUF2_PLAY;
   1602          	          break;
   1603          	        default:
   1604          	          break;
   1605          		}
   1606          
   1607          		/* Last player Frame is finished */
   1608          		AudioPlayerUpd(); 		
   1609          		
   1610          		if (cntStrt<100) cntStrt++;		   
   1611                  
   1612             }
   1613          
   1614          
   1615          #else
   1616              MIC8Rec();
   \   0000003C   0x....             LDR.N    R0,??DataTable20_1
   \   0000003E   0xF44F 0x5280      MOV      R2,#+4096
   \   00000042   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   00000046   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000004A   0xF880 0x1131      STRB     R1,[R0, #+305]
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0xF880 0x1133      STRB     R1,[R0, #+307]
   \   00000054   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   00000058   0x2901             CMP      R1,#+1
   \   0000005A   0xBF0C             ITE      EQ 
   \   0000005C   0x....             LDREQ.N  R1,??DataTable20_28
   \   0000005E   0x....             LDRNE.N  R1,??DataTable20_8
   \   00000060   0x3064             ADDS     R0,R0,#+100
   \   00000062   0xE8BD 0x4010      POP      {R4,LR}
   \   00000066   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1617          	
   1618          #endif
   1619          
   1620            }
   1621          }
   \                     ??HAL_SPI_RxCpltCallback_1: (+1)
   \   0000006A   0xBD10             POP      {R4,PC}          ;; return
   1622          

   \                                 In section .text, align 2, keep-with-next
   1623          void PDM2PCMSDO78(void)
   1624          {
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x....             LDR.N    R0,??DataTable20_24
   \   00000006   0xB083             SUB      SP,SP,#+12
   1625          static int16_t Mic7LPOld,Mic8LPOld;
   1626          uint8_t buffer_switch_tmp;
   1627          
   1628          buffer_switch_tmp = buffer_switch;
   1629          
   1630          /*-------------------------------------------------------------------------------------------------------------
   1631          			  
   1632          	Sequence  Record Data					  Processing Data				  Player Data
   1633          			  
   1634          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1635          			  
   1636          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1637          			  
   1638          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1639           ---------------------------------------------------------------------------------------------------------------*/
   1640          
   1641              /* Data in Mic7 finished recording */
   1642              if (WaveRecord_flgSDO7Finish==1)
   \   00000008   0x.... 0x....      LDR.W    R11,??DataTable20_1
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0xF89B 0x0132      LDRB     R0,[R11, #+306]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xF040 0x808B      BNE.W    ??PDM2PCMSDO78_0
   1643              {
   1644                  WaveRecord_flgSDO7Finish=0;
   \   0000001A   0x2000             MOVS     R0,#+0
   1645          
   1646                  uint8_t swtSDO7_tmp;
   1647                  swtSDO7_tmp = swtSDO7;
   1648          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   0000001C   0x2400             MOVS     R4,#+0
   \   0000001E   0xF88B 0x0132      STRB     R0,[R11, #+306]
   \   00000022   0xF89B 0x0130      LDRB     R0,[R11, #+304]
   \   00000026   0x....             LDR.N    R5,??DataTable20_7
   \   00000028   0x....             LDR.N    R6,??DataTable20_27
   \   0000002A   0x.... 0x....      LDR.W    R8,??DataTable20_25  ;; 0xc00080a0
   \   0000002E   0x.... 0x....      LDR.W    R9,??DataTable20  ;; 0xc0010140
   \   00000032   0x9000             STR      R0,[SP, #+0]
   \   00000034   0xF246 0x0778      MOVW     R7,#+24696
   \   00000038   0xF04F 0x4A40      MOV      R10,#-1073741824
   1649          		{
   1650          	        if(swtSDO7_tmp==0x01)
   \                     ??PDM2PCMSDO78_1: (+1)
   \   0000003C   0x9800             LDR      R0,[SP, #+0]
   \   0000003E   0x2801             CMP      R0,#+1
   \   00000040   0xBF0C             ITE      EQ 
   \   00000042   0x8828             LDRHEQ   R0,[R5, #+0]
   \   00000044   0x8830             LDRHNE   R0,[R6, #+0]
   1651          	        {
   1652          	            pDataMic7[i%64] = HTONS(TestSDO7[i]);					
   1653          	        }
   1654          	        else
   1655          	        {
   1656          	           pDataMic7[i%64] = HTONS(TestSDO7_1[i]);
   \   00000046   0x1161             ASRS     R1,R4,#+5
   \   00000048   0x4602             MOV      R2,R0
   \   0000004A   0xEB04 0x6191      ADD      R1,R4,R1, LSR #+26
   \   0000004E   0x0200             LSLS     R0,R0,#+8
   \   00000050   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000054   0x1189             ASRS     R1,R1,#+6
   \   00000056   0xEBA4 0x1181      SUB      R1,R4,R1, LSL #+6
   \   0000005A   0xEB0B 0x0141      ADD      R1,R11,R1, LSL #+1
   \   0000005E   0xF8A1 0x01C4      STRH     R0,[R1, #+452]
   1657          	        }
   1658          
   1659          	        /* PDM conversion for frame of 64 inputs, 16 outputs */
   1660          	        if (i%64==63)
   \   00000062   0x1160             ASRS     R0,R4,#+5
   \   00000064   0xEB04 0x6090      ADD      R0,R4,R0, LSR #+26
   \   00000068   0x1180             ASRS     R0,R0,#+6
   \   0000006A   0xEBA4 0x1180      SUB      R1,R4,R0, LSL #+6
   \   0000006E   0x293F             CMP      R1,#+63
   \   00000070   0xD11B             BNE.N    ??PDM2PCMSDO78_2
   1661          	        {
   1662          				/* Put them in processing phase */
   1663          	          /* Recording Audio Data */						 
   1664          	          switch (buffer_switch_tmp)
   \   00000072   0x9901             LDR      R1,[SP, #+4]
   \   00000074   0xB119             CBZ.N    R1,??PDM2PCMSDO78_3
   \   00000076   0x2902             CMP      R1,#+2
   \   00000078   0xD00D             BEQ.N    ??PDM2PCMSDO78_4
   \   0000007A   0xD306             BCC.N    ??PDM2PCMSDO78_5
   \   0000007C   0xE015             B.N      ??PDM2PCMSDO78_2
   1665          	          {
   1666          			    case BUF1_PLAY:								
   1667                            PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 54 ,
   1668                            (PDMFilter_InitStruct *)&Filter[0]);						  
   \                     ??PDM2PCMSDO78_3: (+1)
   \   0000007E   0xF10B 0x03C8      ADD      R3,R11,#+200
   \   00000082   0x2236             MOVS     R2,#+54
   \   00000084   0xEB08 0x1040      ADD      R0,R8,R0, LSL #+5
   \   00000088   0xE00A             B.N      ??PDM2PCMSDO78_6
   1669                            break;	              
   1670          	            case BUF2_PLAY:
   1671          					PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 54 ,
   1672          					(PDMFilter_InitStruct *)&Filter[0]);							
   \                     ??PDM2PCMSDO78_5: (+1)
   \   0000008A   0xF10B 0x03C8      ADD      R3,R11,#+200
   \   0000008E   0x2236             MOVS     R2,#+54
   \   00000090   0xEB09 0x1040      ADD      R0,R9,R0, LSL #+5
   \   00000094   0xE004             B.N      ??PDM2PCMSDO78_6
   1673          					break;
   1674          	            case BUF3_PLAY:
   1675          					PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 54 ,
   1676          					(PDMFilter_InitStruct *)&Filter[0]);		
   \                     ??PDM2PCMSDO78_4: (+1)
   \   00000096   0xF10B 0x03C8      ADD      R3,R11,#+200
   \   0000009A   0x2236             MOVS     R2,#+54
   \   0000009C   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \                     ??PDM2PCMSDO78_6: (+1)
   \   000000A0   0x1839             ADDS     R1,R7,R0
   \   000000A2   0xF50B 0x70E2      ADD      R0,R11,#+452
   \   000000A6   0x.... 0x....      BL       PDM_Filter_64_LSB
   1677          					break;
   1678          	            default:
   1679          	                break; 
   1680          	          }
   1681          	        }
   1682          	     }
   \                     ??PDM2PCMSDO78_2: (+1)
   \   000000AA   0x1C64             ADDS     R4,R4,#+1
   \   000000AC   0x1CB6             ADDS     R6,R6,#+2
   \   000000AE   0x1CAD             ADDS     R5,R5,#+2
   \   000000B0   0xF5B4 0x5F80      CMP      R4,#+4096
   \   000000B4   0xDBC2             BLT.N    ??PDM2PCMSDO78_1
   1683                  /* LowPass Filter 
   1684                        dT = 1/16000
   1685                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1686          		*/						 
   1687          		switch (buffer_switch)
   \   000000B6   0x....             LDR.N    R0,??DataTable20_24
   \   000000B8   0x7800             LDRB     R0,[R0, #+0]
   \   000000BA   0xB118             CBZ.N    R0,??PDM2PCMSDO78_7
   \   000000BC   0x2802             CMP      R0,#+2
   \   000000BE   0xD00E             BEQ.N    ??PDM2PCMSDO78_8
   \   000000C0   0xD30A             BCC.N    ??PDM2PCMSDO78_9
   \   000000C2   0xE017             B.N      ??PDM2PCMSDO78_10
   1688          		{
   1689          			case BUF1_PLAY: 
   1690          				LowPassIIR(Buffer2.bufMIC7 ,Buffer2.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_7: (+1)
   \   000000C4   0x2004             MOVS     R0,#+4
   \   000000C6   0xEB07 0x0108      ADD      R1,R7,R8
   \   000000CA   0x9000             STR      R0,[SP, #+0]
   \   000000CC   0xF44F 0x6380      MOV      R3,#+1024
   \   000000D0   0xF50B 0x7211      ADD      R2,R11,#+580
   \   000000D4   0x4608             MOV      R0,R1
   \   000000D6   0xE00B             B.N      ??PDM2PCMSDO78_11
   1691          			    break;
   1692          			case BUF2_PLAY:
   1693          				LowPassIIR(Buffer3.bufMIC7 ,Buffer3.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_9: (+1)
   \   000000D8   0xEB07 0x0009      ADD      R0,R7,R9
   \   000000DC   0xE001             B.N      ??PDM2PCMSDO78_12
   1694          			    break;
   1695          			case BUF3_PLAY:
   1696          			    LowPassIIR(Buffer1.bufMIC7 ,Buffer1.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);						
   \                     ??PDM2PCMSDO78_8: (+1)
   \   000000DE   0xEB07 0x000A      ADD      R0,R7,R10
   \                     ??PDM2PCMSDO78_12: (+1)
   \   000000E2   0x2104             MOVS     R1,#+4
   \   000000E4   0xF44F 0x6380      MOV      R3,#+1024
   \   000000E8   0x9100             STR      R1,[SP, #+0]
   \   000000EA   0xF50B 0x7211      ADD      R2,R11,#+580
   \   000000EE   0x4601             MOV      R1,R0
   \                     ??PDM2PCMSDO78_11: (+1)
   \   000000F0   0x.... 0x....      BL       LowPassIIR
   1697          			    break;
   1698          			default:
   1699          			break; 
   1700          		}
   1701          
   1702             switch (buffer_switch_tmp)//buffer_switch_tmp
   \                     ??PDM2PCMSDO78_10: (+1)
   \   000000F4   0x9801             LDR      R0,[SP, #+4]
   \   000000F6   0xB118             CBZ.N    R0,??PDM2PCMSDO78_13
   \   000000F8   0x2802             CMP      R0,#+2
   \   000000FA   0xD00F             BEQ.N    ??PDM2PCMSDO78_14
   \   000000FC   0xD30B             BCC.N    ??PDM2PCMSDO78_15
   \   000000FE   0xE017             B.N      ??PDM2PCMSDO78_0
   1703            {
   1704          	case BUF1_PLAY:								
   1705          		Buffer2.bufMIC7[0]=Buffer2.bufMIC7[4];
   \                     ??PDM2PCMSDO78_13: (+1)
   \   00000100   0xEB07 0x0108      ADD      R1,R7,R8
   \   00000104   0x8908             LDRH     R0,[R1, #+8]
   \   00000106   0x8008             STRH     R0,[R1, #+0]
   1706          		Buffer2.bufMIC7[1]=Buffer2.bufMIC7[5];
   \   00000108   0x8948             LDRH     R0,[R1, #+10]
   \   0000010A   0x8048             STRH     R0,[R1, #+2]
   1707          		Buffer2.bufMIC7[2]=Buffer2.bufMIC7[6];
   \   0000010C   0x8988             LDRH     R0,[R1, #+12]
   \   0000010E   0x8088             STRH     R0,[R1, #+4]
   1708          		Buffer2.bufMIC7[3]=Buffer2.bufMIC7[7];								
   \   00000110   0x89C8             LDRH     R0,[R1, #+14]
   \   00000112   0x80C8             STRH     R0,[R1, #+6]
   1709          	    break;	              
   \   00000114   0xE00C             B.N      ??PDM2PCMSDO78_0
   1710          	case BUF2_PLAY:	
   1711          		Buffer3.bufMIC7[0]=Buffer3.bufMIC7[4];
   \                     ??PDM2PCMSDO78_15: (+1)
   \   00000116   0xEB07 0x0009      ADD      R0,R7,R9
   \   0000011A   0xE001             B.N      ??PDM2PCMSDO78_16
   1712          		Buffer3.bufMIC7[1]=Buffer3.bufMIC7[5];
   1713          		Buffer3.bufMIC7[2]=Buffer3.bufMIC7[6];
   1714          		Buffer3.bufMIC7[3]=Buffer3.bufMIC7[7];				
   1715          	    break;
   1716          	case BUF3_PLAY:
   1717          		Buffer1.bufMIC7[0]=Buffer1.bufMIC7[4];
   \                     ??PDM2PCMSDO78_14: (+1)
   \   0000011C   0xEB07 0x000A      ADD      R0,R7,R10
   \                     ??PDM2PCMSDO78_16: (+1)
   \   00000120   0x8901             LDRH     R1,[R0, #+8]
   \   00000122   0x8001             STRH     R1,[R0, #+0]
   1718          		Buffer1.bufMIC7[1]=Buffer1.bufMIC7[5];
   \   00000124   0x8941             LDRH     R1,[R0, #+10]
   \   00000126   0x8041             STRH     R1,[R0, #+2]
   1719          		Buffer1.bufMIC7[2]=Buffer1.bufMIC7[6];
   \   00000128   0x8981             LDRH     R1,[R0, #+12]
   \   0000012A   0x8081             STRH     R1,[R0, #+4]
   1720          		Buffer1.bufMIC7[3]=Buffer1.bufMIC7[7];				
   \   0000012C   0x89C1             LDRH     R1,[R0, #+14]
   \   0000012E   0x80C1             STRH     R1,[R0, #+6]
   1721          	    break;
   1722          	default:
   1723          	         break; 
   1724            }
   1725          
   1726          	}
   1727          #if 0
   1728                      /* Recording Audio Data */						 
   1729          		    switch (buffer_switch)//buffer_switch
   1730          		    {
   1731          		        case BUF1_PLAY:								
   1732          					        /* Update for left-right channel */
   1733          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1734          			        {
   1735          	                    Buffer2.bufMIC7[2*i+1]=  Buffer2.bufMIC7[i];
   1736                                  Buffer2.bufMIC7[2*i] = Buffer2.bufMIC7[i];
   1737          			        }
   1738          					  Buffer2.bufMIC7[0] = Buffer2.bufMIC7[4];
   1739          					  Buffer2.bufMIC7[1] = Buffer2.bufMIC7[5];
   1740          					  Buffer2.bufMIC7[2] = Buffer2.bufMIC7[6];
   1741          					  Buffer2.bufMIC7[3] = Buffer2.bufMIC7[7];
   1742          			            break;
   1743          			     case BUF2_PLAY:
   1744          			        /* Update for left-right channel */
   1745          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1746          			        {				 	
   1747          		                Buffer3.bufMIC7[2*i+1]= Buffer3.bufMIC7[i];
   1748          		                Buffer3.bufMIC7[2*i]= Buffer3.bufMIC7[i];;	
   1749          			        }
   1750          					  Buffer3.bufMIC7[0] = Buffer3.bufMIC7[4];
   1751          					  Buffer3.bufMIC7[1] = Buffer3.bufMIC7[5];
   1752          					  Buffer3.bufMIC7[2] = Buffer3.bufMIC7[6];
   1753          					  Buffer3.bufMIC7[3] = Buffer3.bufMIC7[7];					
   1754          	                break;
   1755          	            case BUF3_PLAY:
   1756          			        /* Update for left-right channel */
   1757          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1758          			        {					
   1759          	                    Buffer1.bufMIC7[2*i+1]= Buffer1.bufMIC7[i];
   1760          	                    Buffer1.bufMIC7[2*i]= Buffer1.bufMIC7[i];;	
   1761          			        }
   1762          					  Buffer1.bufMIC7[0] = Buffer1.bufMIC7[4];
   1763          					  Buffer1.bufMIC7[1] = Buffer1.bufMIC7[5];
   1764          					  Buffer1.bufMIC7[2] = Buffer1.bufMIC7[6];
   1765          					  Buffer1.bufMIC7[3] = Buffer1.bufMIC7[7];						
   1766          	                break;
   1767          	            default:
   1768          	                break; 
   1769          	        }
   1770          	    
   1771          
   1772               }
   1773              
   1774          #endif	
   1775          
   1776          	/* Data in Mic8 finished recording */
   1777          	if (WaveRecord_flgSDO8Finish==1)
   \                     ??PDM2PCMSDO78_0: (+1)
   \   00000130   0xF89B 0x0133      LDRB     R0,[R11, #+307]
   \   00000134   0x2801             CMP      R0,#+1
   \   00000136   0xF040 0x8080      BNE.W    ??PDM2PCMSDO78_17
   1778          	{
   1779          		WaveRecord_flgSDO8Finish=0;
   \   0000013A   0x2000             MOVS     R0,#+0
   1780          		uint8_t swtSDO8_tmp;
   1781          		swtSDO8_tmp = swtSDO8;
   1782          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   0000013C   0x2400             MOVS     R4,#+0
   \   0000013E   0xF88B 0x0133      STRB     R0,[R11, #+307]
   \   00000142   0xF89B 0x0131      LDRB     R0,[R11, #+305]
   \   00000146   0x....             LDR.N    R5,??DataTable20_8
   \   00000148   0x....             LDR.N    R6,??DataTable20_28
   \   0000014A   0xF247 0x078C      MOVW     R7,#+28812
   \   0000014E   0x.... 0x....      LDR.W    R8,??DataTable20_25  ;; 0xc00080a0
   \   00000152   0x9000             STR      R0,[SP, #+0]
   \   00000154   0x.... 0x....      LDR.W    R9,??DataTable20  ;; 0xc0010140
   \   00000158   0xF04F 0x4A40      MOV      R10,#-1073741824
   1783          		{
   1784                            if(swtSDO8_tmp==0x01)
   \                     ??PDM2PCMSDO78_18: (+1)
   \   0000015C   0x9800             LDR      R0,[SP, #+0]
   \   0000015E   0x2801             CMP      R0,#+1
   \   00000160   0xBF0C             ITE      EQ 
   \   00000162   0x8828             LDRHEQ   R0,[R5, #+0]
   \   00000164   0x8830             LDRHNE   R0,[R6, #+0]
   1785                            {
   1786                               pDataMic8[i%64] = HTONS(TestSDO8[i]);
   1787                            }
   1788                            else
   1789                            {
   1790                               pDataMic8[i%64] = HTONS(TestSDO8_1[i]);
   \   00000166   0x1161             ASRS     R1,R4,#+5
   \   00000168   0x4602             MOV      R2,R0
   \   0000016A   0xEB04 0x6191      ADD      R1,R4,R1, LSR #+26
   \   0000016E   0x0200             LSLS     R0,R0,#+8
   \   00000170   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000174   0x1189             ASRS     R1,R1,#+6
   \   00000176   0xEBA4 0x1181      SUB      R1,R4,R1, LSL #+6
   \   0000017A   0xEB0B 0x0141      ADD      R1,R11,R1, LSL #+1
   \   0000017E   0xF8A1 0x0144      STRH     R0,[R1, #+324]
   1791                            }
   1792          		
   1793                            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1794                            if (i%64==63)
   \   00000182   0x1160             ASRS     R0,R4,#+5
   \   00000184   0xEB04 0x6090      ADD      R0,R4,R0, LSR #+26
   \   00000188   0x1180             ASRS     R0,R0,#+6
   \   0000018A   0xEBA4 0x1180      SUB      R1,R4,R0, LSL #+6
   \   0000018E   0x293F             CMP      R1,#+63
   \   00000190   0xD11C             BNE.N    ??PDM2PCMSDO78_19
   1795                            {
   1796                                /* Recording Audio Data */						 
   1797                                switch (buffer_switch)
   \   00000192   0x....             LDR.N    R1,??DataTable20_24
   \   00000194   0x7809             LDRB     R1,[R1, #+0]
   \   00000196   0xB119             CBZ.N    R1,??PDM2PCMSDO78_20
   \   00000198   0x2902             CMP      R1,#+2
   \   0000019A   0xD00D             BEQ.N    ??PDM2PCMSDO78_21
   \   0000019C   0xD306             BCC.N    ??PDM2PCMSDO78_22
   \   0000019E   0xE015             B.N      ??PDM2PCMSDO78_19
   1798                                {
   1799                                        case BUF1_PLAY: 							
   1800                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 54 ,
   1801                                                (PDMFilter_InitStruct *)&Filter[1]);
   \                     ??PDM2PCMSDO78_20: (+1)
   \   000001A0   0xF10B 0x03FC      ADD      R3,R11,#+252
   \   000001A4   0x2236             MOVS     R2,#+54
   \   000001A6   0xEB08 0x1040      ADD      R0,R8,R0, LSL #+5
   \   000001AA   0xE00A             B.N      ??PDM2PCMSDO78_23
   1802                                                break;
   1803                                        case BUF2_PLAY:
   1804                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 54 ,
   1805                                                (PDMFilter_InitStruct *)&Filter[1]);	
   \                     ??PDM2PCMSDO78_22: (+1)
   \   000001AC   0xF10B 0x03FC      ADD      R3,R11,#+252
   \   000001B0   0x2236             MOVS     R2,#+54
   \   000001B2   0xEB09 0x1040      ADD      R0,R9,R0, LSL #+5
   \   000001B6   0xE004             B.N      ??PDM2PCMSDO78_23
   1806                                                break;
   1807                                        case BUF3_PLAY:
   1808                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 54 ,
   1809                                                (PDMFilter_InitStruct *)&Filter[1]);									
   \                     ??PDM2PCMSDO78_21: (+1)
   \   000001B8   0xF10B 0x03FC      ADD      R3,R11,#+252
   \   000001BC   0x2236             MOVS     R2,#+54
   \   000001BE   0xEB0A 0x1040      ADD      R0,R10,R0, LSL #+5
   \                     ??PDM2PCMSDO78_23: (+1)
   \   000001C2   0x1839             ADDS     R1,R7,R0
   \   000001C4   0xF50B 0x70A2      ADD      R0,R11,#+324
   \   000001C8   0x.... 0x....      BL       PDM_Filter_64_LSB
   1810                                                 break;
   1811                                        default:
   1812                                                 break; 
   1813                                }		
   1814                             }					 
   1815          		}
   \                     ??PDM2PCMSDO78_19: (+1)
   \   000001CC   0x1C64             ADDS     R4,R4,#+1
   \   000001CE   0x1CB6             ADDS     R6,R6,#+2
   \   000001D0   0x1CAD             ADDS     R5,R5,#+2
   \   000001D2   0xF5B4 0x5F80      CMP      R4,#+4096
   \   000001D6   0xDBC1             BLT.N    ??PDM2PCMSDO78_18
   1816          
   1817                  /* LowPass Filter 
   1818                        dT = 1/16000
   1819                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1820          		*/						 
   1821          		switch (buffer_switch)
   \   000001D8   0x....             LDR.N    R0,??DataTable20_24
   \   000001DA   0x7800             LDRB     R0,[R0, #+0]
   \   000001DC   0xB118             CBZ.N    R0,??PDM2PCMSDO78_24
   \   000001DE   0x2802             CMP      R0,#+2
   \   000001E0   0xD007             BEQ.N    ??PDM2PCMSDO78_25
   \   000001E2   0xD303             BCC.N    ??PDM2PCMSDO78_26
   \   000001E4   0xE010             B.N      ??PDM2PCMSDO78_27
   1822          		{
   1823          			case BUF1_PLAY: 
   1824          				LowPassIIR(Buffer2.bufMIC8 ,Buffer2.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_24: (+1)
   \   000001E6   0xEB07 0x0008      ADD      R0,R7,R8
   \   000001EA   0xE004             B.N      ??PDM2PCMSDO78_28
   1825          			    break;
   1826          			case BUF2_PLAY:
   1827          				LowPassIIR(Buffer3.bufMIC8 ,Buffer3.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_26: (+1)
   \   000001EC   0xEB07 0x0009      ADD      R0,R7,R9
   \   000001F0   0xE001             B.N      ??PDM2PCMSDO78_28
   1828          			    break;
   1829          			case BUF3_PLAY:
   1830          			    LowPassIIR(Buffer1.bufMIC8 ,Buffer1.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);						
   \                     ??PDM2PCMSDO78_25: (+1)
   \   000001F2   0xEB07 0x000A      ADD      R0,R7,R10
   \                     ??PDM2PCMSDO78_28: (+1)
   \   000001F6   0x2104             MOVS     R1,#+4
   \   000001F8   0xF44F 0x6380      MOV      R3,#+1024
   \   000001FC   0x9100             STR      R1,[SP, #+0]
   \   000001FE   0xF20B 0x2246      ADDW     R2,R11,#+582
   \   00000202   0x4601             MOV      R1,R0
   \   00000204   0x.... 0x....      BL       LowPassIIR
   1831          			    break;
   1832          			default:
   1833          			break; 
   1834          		}
   1835                    					 
   1836                    switch (buffer_switch)//buffer_switch
   \                     ??PDM2PCMSDO78_27: (+1)
   \   00000208   0x....             LDR.N    R0,??DataTable20_24
   \   0000020A   0x7800             LDRB     R0,[R0, #+0]
   \   0000020C   0xB128             CBZ.N    R0,??PDM2PCMSDO78_29
   \   0000020E   0x2802             CMP      R0,#+2
   \   00000210   0xD009             BEQ.N    ??PDM2PCMSDO78_30
   \   00000212   0xD305             BCC.N    ??PDM2PCMSDO78_31
   1837                    {
   1838                        case BUF1_PLAY: 	
   1839          					  Buffer2.bufMIC8[0] = Buffer2.bufMIC8[4];
   1840          					  Buffer2.bufMIC8[1] = Buffer2.bufMIC8[5];
   1841          					  Buffer2.bufMIC8[2] = Buffer2.bufMIC8[6];
   1842          					  Buffer2.bufMIC8[3] = Buffer2.bufMIC8[7];
   1843                                break;
   1844                        case BUF2_PLAY:
   1845            					  Buffer3.bufMIC8[0] = Buffer3.bufMIC8[4];
   1846          					  Buffer3.bufMIC8[1] = Buffer3.bufMIC8[5];
   1847          					  Buffer3.bufMIC8[2] = Buffer3.bufMIC8[6];
   1848          					  Buffer3.bufMIC8[3] = Buffer3.bufMIC8[7];
   1849                                break;
   1850                        case BUF3_PLAY:
   1851            					  Buffer1.bufMIC8[0] = Buffer1.bufMIC8[4];
   1852          					  Buffer1.bufMIC8[1] = Buffer1.bufMIC8[5];
   1853          					  Buffer1.bufMIC8[2] = Buffer1.bufMIC8[6];
   1854          					  Buffer1.bufMIC8[3] = Buffer1.bufMIC8[7];
   1855                              break;
   1856                        default:
   1857                              break; 
   1858                    }                	  
   1859             }//if (WaveRecord_flgSDO8Finish==1)
   1860          }
   \   00000214   0xB003             ADD      SP,SP,#+12
   \   00000216   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??PDM2PCMSDO78_29: (+1)
   \   0000021A   0xEB07 0x0008      ADD      R0,R7,R8
   \   0000021E   0xE004             B.N      ??PDM2PCMSDO78_32
   \                     ??PDM2PCMSDO78_31: (+1)
   \   00000220   0xEB07 0x0009      ADD      R0,R7,R9
   \   00000224   0xE001             B.N      ??PDM2PCMSDO78_32
   \                     ??PDM2PCMSDO78_30: (+1)
   \   00000226   0xEB07 0x000A      ADD      R0,R7,R10
   \                     ??PDM2PCMSDO78_32: (+1)
   \   0000022A   0x8901             LDRH     R1,[R0, #+8]
   \   0000022C   0x8001             STRH     R1,[R0, #+0]
   \   0000022E   0x8941             LDRH     R1,[R0, #+10]
   \   00000230   0x8041             STRH     R1,[R0, #+2]
   \   00000232   0x8981             LDRH     R1,[R0, #+12]
   \   00000234   0x8081             STRH     R1,[R0, #+4]
   \   00000236   0x89C1             LDRH     R1,[R0, #+14]
   \   00000238   0x80C1             STRH     R1,[R0, #+6]
   \                     ??PDM2PCMSDO78_17: (+1)
   \   0000023A   0xB003             ADD      SP,SP,#+12
   \   0000023C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \   00000240                      REQUIRE Buffer2
   \   00000240                      REQUIRE Buffer3
   \   00000240                      REQUIRE Buffer1

   \                                 In section .bss, align 4
   \                     hspi5:
   \   00000000                      DS8 100
   \                     hspi6:
   \   00000064                      DS8 100
   \                     Filter:
   \   000000C8                      DS8 104
   \                     swtSDO7:
   \   00000130                      DS8 1
   \                     swtSDO8:
   \   00000131                      DS8 1
   \                     WaveRecord_flgSDO7Finish:
   \   00000132                      DS8 1
   \                     WaveRecord_flgSDO8Finish:
   \   00000133                      DS8 1
   \                     idxMic8:
   \   00000134                      DS8 2
   \                     idxMic7:
   \   00000136                      DS8 2
   \                     cntPos:
   \   00000138                      DS8 2
   \                     cntPos7:
   \   0000013A                      DS8 2
   \                     bufPCMSens7:
   \   0000013C                      DS8 4
   \                     bufPCMSens8:
   \   00000140                      DS8 4
   \                     pDataMic8:
   \   00000144                      DS8 128
   \                     pDataMic7:
   \   000001C4                      DS8 128
   \   00000244                      DS8 2
   \   00000246                      DS8 2

   \                                 In section .bss, align 4
   \                     pHeaderBuff:
   \   00000000                      DS8 44

   \                                 In section .bss, align 2
   \                     cntTransFinish:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     TestSDO12:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO34:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO56:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     hi2s1:
   \   00000000                      DS8 64
   \                     hi2s2:
   \   00000040                      DS8 64
   \                     WaveRecord_flgInt:
   \   00000080                      DS8 1
   \                     SPI4_stPosShft:
   \   00000081                      DS8 1
   \                     I2S2_stLR:
   \   00000082                      DS8 1
   \                     I2S2_stLROld:
   \   00000083                      DS8 1
   \   00000084                      DS8 1
   \   00000085                      DS8 1
   \   00000086                      DS8 1
   \   00000087                      DS8 1
   \                     WaveRec_idxTest:
   \   00000088                      DS8 2
   \                     vRawSens1:
   \   0000008A                      DS8 2
   \                     vRawSens2:
   \   0000008C                      DS8 2
   \                     vRawSens4:
   \   0000008E                      DS8 2
   \                     vRawSens3:
   \   00000090                      DS8 2
   \                     vRawSens5:
   \   00000092                      DS8 2
   \                     vRawSens6:
   \   00000094                      DS8 2
   \                     SPI4_stNipple:
   \   00000096                      DS8 2

   \                                 In section .bss, align 4
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hdma_spi2_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi3_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi5_rx:
   \   00000000                      DS8 80
   \                     hdma_spi6_rx:
   \   00000050                      DS8 80

   \                                 In section .bss, align 2
   \                     idxFrmPDMMic8:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
   \                     cntStrt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     SPI1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S2_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO34:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO56:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     I2S1_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, at 0xc0000000
   \                     Buffer1:
   \   00000000                      DS8 32928

   \                                 In section .bss, at 0xc00080a0
   \                     Buffer2:
   \   00000000                      DS8 32928

   \                                 In section .bss, at 0xc0010140
   \                     Buffer3:
   \   00000000                      DS8 32928
   1861          

   \                                 In section .text, align 2, keep-with-next
   1862          void MIC7Rec (void)
   1863          {
   1864          	swtSDO7^=0x01;
   \                     MIC7Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_1
   1865          	WaveRecord_flgSDO7Finish = 1;
   1866          	if (swtSDO7==0x01)
   \   00000002   0xF44F 0x5280      MOV      R2,#+4096
   \   00000006   0xF890 0x1130      LDRB     R1,[R0, #+304]
   \   0000000A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000E   0xF880 0x1130      STRB     R1,[R0, #+304]
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0xF880 0x1132      STRB     R1,[R0, #+306]
   \   00000018   0xF890 0x1130      LDRB     R1,[R0, #+304]
   \   0000001C   0x2901             CMP      R1,#+1
   \   0000001E   0xBF0C             ITE      EQ 
   \   00000020   0x....             LDREQ.N  R1,??DataTable20_27
   \   00000022   0x....             LDRNE.N  R1,??DataTable20_7
   1867          	{
   1868          		HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   1869          	}
   1870          	else
   1871          	{
   1872          		HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000024   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1873          	} 
   1874          
   1875          }
   1876          

   \                                 In section .text, align 2, keep-with-next
   1877          void MIC8Rec (void)
   1878          {
   1879               swtSDO8^=0x01;
   \                     MIC8Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_1
   1880              WaveRecord_flgSDO8Finish = 1;
   1881              if (swtSDO8==0x01)
   \   00000002   0xF44F 0x5280      MOV      R2,#+4096
   \   00000006   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   0000000A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000E   0xF880 0x1131      STRB     R1,[R0, #+305]
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0xF880 0x1133      STRB     R1,[R0, #+307]
   \   00000018   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   0000001C   0x2901             CMP      R1,#+1
   \   0000001E   0xBF0C             ITE      EQ 
   \   00000020   0x....             LDREQ.N  R1,??DataTable20_28
   \   00000022   0x....             LDRNE.N  R1,??DataTable20_8
   1882              {
   1883                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   1884              }
   1885              else
   1886              {
   1887                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000024   0x3064             ADDS     R0,R0,#+100
   \   00000026   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1888          
   1889              }
   1890          
   1891          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x4001300C         DC32     0x4001300c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x4001340C         DC32     0x4001340c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x4001540C         DC32     0x4001540c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_10:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_11:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_12:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_13:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_14:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_15:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_16:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_17:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_18:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_19:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_20:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_21:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_22:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_23:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_24:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_25:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_26:
   \   00000000   0x........         DC32     hdma_spi5_rx+0x50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_27:
   \   00000000   0x........         DC32     TestSDO7_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_28:
   \   00000000   0x........         DC32     TestSDO8_1
   1892          
   1893          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DMA2_Stream5_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream6_IRQHandler
         0   -> HAL_DMA_IRQHandler
      40   HAL_SPI_MspInit
        40   -> HAL_DMA_DeInit
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
       8   HAL_SPI_RxCpltCallback
         0   -> HAL_SPI_Receive_DMA
         8   -> HAL_SPI_Receive_DMA
      16   MIC1TO8_Init
        16   -> HAL_I2S_Init
        16   -> SPI4_Init
        16   -> SPI5_Init
         0   -> SPI6_Init
       0   MIC7Rec
         0   -> HAL_SPI_Receive_DMA
       0   MIC8Rec
         0   -> HAL_SPI_Receive_DMA
       0   Mic7Rec
         0   -> SPI5_Init
       0   Mic8Rec
         0   -> HAL_SPI_Init
      48   PDM2PCMSDO78
        48   -> LowPassIIR
        48   -> PDM_Filter_64_LSB
       0   RecordUpdBuf
       0   SPI1_IRQHandler
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
      16   SPI2_IRQHandler
        16   -> HAL_GPIO_ReadPin
      16   SPI4_IRQHandler
        16   -> HAL_GPIO_ReadPin
        16   -> SubFrameFinished
       8   SPI4_Init
         8   -> HAL_SPI_Init
       8   SPI5_IRQHandler
         8   -> PDM_Filter_64_LSB
      32   SPI5_Init
         0   -> HAL_SPI_Init
        32   -> PDM_Filter_Init
       8   SPI6_IRQHandler
         8   -> PDM_Filter_64_LSB
       0   SPI6_Init
         0   -> HAL_SPI_Init
       8   StartRecMic7_8
         8   -> HAL_SPI_Receive_DMA
       0   mySPI_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable19
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_13
       4  ??DataTable20_14
       4  ??DataTable20_15
       4  ??DataTable20_16
       4  ??DataTable20_17
       4  ??DataTable20_18
       4  ??DataTable20_19
       4  ??DataTable20_2
       4  ??DataTable20_20
       4  ??DataTable20_21
       4  ??DataTable20_22
       4  ??DataTable20_23
       4  ??DataTable20_24
       4  ??DataTable20_25
       4  ??DataTable20_26
       4  ??DataTable20_27
       4  ??DataTable20_28
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
   32928  Buffer1
   32928  Buffer2
   32928  Buffer3
       8  DMA2_Stream5_IRQHandler
       8  DMA2_Stream6_IRQHandler
    1056  HAL_SPI_MspInit
     108  HAL_SPI_RxCpltCallback
       2  I2S1_stNipple
       1  I2S1_stPosShft
       2  I2S2_stNipple
       1  I2S2_stPosShft
     130  MIC1TO8_Init
      40  MIC7Rec
      42  MIC8Rec
       2  Mic7Rec
      76  Mic8Rec
     576  PDM2PCMSDO78
     246  RecordUpdBuf
     388  SPI1_IRQHandler
     212  SPI1_Ini
       2  SPI1_stNipple
     352  SPI2_IRQHandler
     418  SPI4_IRQHandler
      86  SPI4_Init
     132  SPI5_IRQHandler
     138  SPI5_Init
     126  SPI6_IRQHandler
      76  SPI6_Init
      48  StartRecMic7_8
    8192  TestSDO12
    8192  TestSDO34
    8192  TestSDO56
    8192  TestSDO7
    8192  TestSDO7_1
    8192  TestSDO8
    8192  TestSDO8_1
       1  WaveRecord_flgIni
       2  cntStrt
       2  cntTransFinish
      80  hdma_spi2_tx
      80  hdma_spi3_tx
     160  hdma_spi5_rx
          hdma_spi6_rx
     152  hi2s1
          hi2s2
          WaveRecord_flgInt
          SPI4_stPosShft
          I2S2_stLR
          I2S2_stLROld
          stLROld
          Main_stLR
          Main_stLROld
          WaveRec_idxTest
          vRawSens1
          vRawSens2
          vRawSens4
          vRawSens3
          vRawSens5
          vRawSens6
          SPI4_stNipple
     100  hspi1
     100  hspi2
     584  hspi5
          hspi6
          Filter
          swtSDO7
          swtSDO8
          WaveRecord_flgSDO7Finish
          WaveRecord_flgSDO8Finish
          idxMic8
          idxMic7
          cntPos
          cntPos7
          bufPCMSens7
          bufPCMSens8
          pDataMic8
          pDataMic7
          Mic7LPOld
          Mic8LPOld
       2  iSDO12
       2  iSDO34
       2  iSDO56
       2  idxFrmPDMMic8
      44  mySPI_SendData
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins

 
 58 897 bytes in section .bss
 98 784 bytes in section .bss  (abs)
  4 504 bytes in section .text
 
   4 504 bytes of CODE memory
 157 681 bytes of DATA memory

Errors: none
Warnings: 7
