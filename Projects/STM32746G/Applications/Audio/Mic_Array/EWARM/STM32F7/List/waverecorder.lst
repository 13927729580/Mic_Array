###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       28/Feb/2016  13:29:04
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          
      2          /* Includes ------------------------------------------------------------------*/
      3          #include "waverecorder.h" 
      4          #include "string.h"
      5          //#include "stm32f7xx_hal_spi.h"
      6          #include "stm32f7xx_hal.h"
      7          #include "pdm_filter.h"
      8          
      9          
     10          /* Private typedef -----------------------------------------------------------*/
     11          /* Private define ------------------------------------------------------------*/
     12          #define TOUCH_RECORD_XMIN       300
     13          #define TOUCH_RECORD_XMAX       340
     14          #define TOUCH_RECORD_YMIN       212
     15          #define TOUCH_RECORD_YMAX       252
     16          
     17          #define TOUCH_STOP_XMIN         205
     18          #define TOUCH_STOP_XMAX         245
     19          #define TOUCH_STOP_YMIN         212
     20          #define TOUCH_STOP_YMAX         252
     21          
     22          #define TOUCH_PAUSE_XMIN        125
     23          #define TOUCH_PAUSE_XMAX        149
     24          #define TOUCH_PAUSE_YMIN        212
     25          #define TOUCH_PAUSE_YMAX        252
     26          
     27          #define TOUCH_VOL_MINUS_XMIN    20
     28          #define TOUCH_VOL_MINUS_XMAX    70
     29          #define TOUCH_VOL_MINUS_YMIN    212
     30          #define TOUCH_VOL_MINUS_YMAX    252
     31          
     32          #define TOUCH_VOL_PLUS_XMIN     402
     33          #define TOUCH_VOL_PLUS_XMAX     452
     34          #define TOUCH_VOL_PLUS_YMIN     212
     35          #define TOUCH_VOL_PLUS_YMAX     252
     36          
     37          
     38          
     39          /* SPI Configuration defines */
     40          #define SPI_SCK_PIN                       GPIO_PIN_10
     41          #define SPI_SCK_GPIO_PORT                 GPIOB
     42          #define SPI_SCK_GPIO_CLK                  1
     43          #define SPI_SCK_SOURCE                    1
     44          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     45          
     46          #define SPI_MOSI_PIN                      GPIO_PIN_3
     47          #define SPI_MOSI_GPIO_PORT                GPIOC
     48          #define SPI_MOSI_GPIO_CLK                 1
     49          #define SPI_MOSI_SOURCE                   1
     50          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     51          
     52          
     53          /* sop1hc */
     54          #define SPI1_SCK_PIN                       GPIO_PIN_5
     55          #define SPI1_SCK_GPIO_PORT                 GPIOA
     56          #define SPI1_SCK_GPIO_CLK                  1
     57          #define SPI1_SCK_SOURCE                    1
     58          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     59          
     60          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     61          #define SPI1_MOSI_GPIO_PORT                GPIOA
     62          #define SPI1_MOSI_GPIO_CLK                 1
     63          #define SPI1_MOSI_SOURCE                   1
     64          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     65          
     66          #define SPI1_MISO_PIN                      GPIO_PIN_6
     67          #define SPI1_MISO_GPIO_PORT                GPIOA
     68          #define SPI1_MISO_GPIO_CLK                 1
     69          #define SPI1_MISO_SOURCE                   1
     70          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     71          
     72          
     73          
     74          

   \                                 In section .bss, align 2
     75          uint16_t idxMic8=0;
   \                     idxMic8:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     76          uint16_t idxMic7=0;
   \                     idxMic7:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     77          uint8_t pHeaderBuff[44];
   \                     pHeaderBuff:
   \   00000000                      DS8 44
     78          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];

   \                                 In section .bss, align 2
     79          uint16_t volatile cntTransFinish;
   \                     cntTransFinish:
   \   00000000                      DS8 2
     80          
     81          /* Private macro -------------------------------------------------------------*/
     82          /* Private variables ---------------------------------------------------------*/
     83          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     84          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     85          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     86          extern WAVE_FormatTypeDef WaveFormat;
     87          extern FIL WavFile;
     88          extern AUDIO_DEMO_StateMachine AudioDemo;
     89          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     90          extern __IO uint8_t buffer_switch;
     91          extern __IO uint8_t volume;
     92          extern SPI_HandleTypeDef hspi4,hspi1;
     93          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     94          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     95          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     96          extern __IO uint16_t  I2S2_idxTmp;
     97          extern SPI_HandleTypeDef     hspi4;
     98          extern DMA_HandleTypeDef     DmaHandle;
     99          
    100          #ifndef CS43L22_PLAY
    101          extern __IO uint8_t flgDlyUpd; 
    102          extern __IO uint32_t XferCplt;
    103          extern __IO uint16_t  idxSPI5DataBuf3;
    104          #endif
    105          

   \                                 In section .bss, align 4
    106          __IO int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO12:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    107          __IO int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO34:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    108          __IO int16_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO56:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    109          __IO uint16_t TestSDO7[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO7:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    110          __IO uint16_t TestSDO8[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO8:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    111          __IO uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO7_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    112          __IO uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO8_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 2
    113          __IO uint16_t  WaveRec_idxTest;
   \                     WaveRec_idxTest:
   \   00000000                      DS8 2
    114          
    115          

   \                                 In section .bss, align 4
    116          SPI_HandleTypeDef hspi1,hspi2;
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
    117          SPI_HandleTypeDef spi1_ins,spi2_ins;
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
    118          I2S_HandleTypeDef hi2s1;
   \                     hi2s1:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
    119          I2S_HandleTypeDef hi2s2;
   \                     hi2s2:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
    120          SPI_HandleTypeDef hspi5,hspi6;
   \                     hspi5:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi6:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
    121          DMA_HandleTypeDef hdma_spi2_tx;
   \                     hdma_spi2_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
    122          DMA_HandleTypeDef hdma_spi3_tx;
   \                     hdma_spi3_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
    123          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
   \                     hdma_spi5_rx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi6_rx:
   \   00000000                      DS8 80
    124          
    125          #if USB_STREAMING

   \                                 In section .bss, align 2
    126          __IO uint16_t idxFrmPDMMic8;
   \                     idxFrmPDMMic8:
   \   00000000                      DS8 2
    127          #endif
    128          

   \                                 In section .bss, align 4
    129          uint16_t *bufPCMSens7;
   \                     bufPCMSens7:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    130          uint16_t *bufPCMSens8;
   \                     bufPCMSens8:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
    131          __IO uint16_t cntPos;
   \                     cntPos:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    132          __IO uint16_t cntPos7;
   \                     cntPos7:
   \   00000000                      DS8 2
    133          __IO static uint16_t iBuff;
    134          __IO static uint32_t uwVolume = 70;

   \                                 In section .bss, align 4
    135          __IO PDMFilter_InitStruct Filter[2];
   \                     Filter:
   \   00000000                      DS8 104

   \                                 In section .bss, align 4
    136          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
   \                     pDataMic8:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
    137          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
   \                     pDataMic7:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
    138          __IO int16_t   pPDM2PCM[16];
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
    139          __IO uint16_t cntStrt;
   \                     cntStrt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
    140          __IO uint8_t WaveRecord_flgInt;
   \                     WaveRecord_flgInt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    141          uint8_t WaveRecord_flgIni;
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1
    142          

   \                                 In section .bss, align 2
    143          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
   \                     vRawSens1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     vRawSens2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     vRawSens4:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     vRawSens3:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     vRawSens5:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     vRawSens6:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    144          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
   \                     SPI1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S2_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     SPI4_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    145          __IO uint16_t iSDO12,iSDO34,iSDO56;
   \                     iSDO12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO34:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO56:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
    146          __IO uint8_t swtSDO7,swtSDO8;
   \                     swtSDO7:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     swtSDO8:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    147          __IO uint8_t WaveRecord_flgSDO7Finish,WaveRecord_flgSDO8Finish;
   \                     WaveRecord_flgSDO7Finish:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     WaveRecord_flgSDO8Finish:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    148          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
   \                     I2S1_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     SPI4_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    149          __IO uint8_t I2S2_stLR, I2S2_stLROld;
   \                     I2S2_stLR:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stLROld:
   \   00000000                      DS8 1
    150          
    151          /* Private function prototypes -----------------------------------------------*/
    152          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    153          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    154          static void I2S1_Init(void);
    155          static void I2S2_Init(void);
    156          
    157          #pragma location=SDRAM_BANK_ADDR

   \                                 In section .bss, at 0xc0000000
    158          Mic_Array_Data Buffer1;
   \                     Buffer1:
   \   00000000                      DS8 32928
    159          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)

   \                                 In section .bss, at 0xc00080a0
    160          Mic_Array_Data Buffer2;
   \                     Buffer2:
   \   00000000                      DS8 32928
    161          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)

   \                                 In section .bss, at 0xc0010140
    162          Mic_Array_Data Buffer3;
   \                     Buffer3:
   \   00000000                      DS8 32928
    163          

   \                                 In section .text, align 2, keep-with-next
    164          void SPI1_Ini(void)
    165          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    166            GPIO_InitTypeDef GPIO_InitStructure;
    167          
    168           
    169             	 
    170            /* Enable SCK, MOSI and MISO GPIO clocks */
    171            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40023844
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable12  ;; 0x40023844
   \   00000012   0x6008             STR      R0,[R1, #+0]
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40023844
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF410 0x5080      ANDS     R0,R0,#0x1000
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x9800             LDR      R0,[SP, #+0]
    172            __HAL_RCC_GPIOA_CLK_ENABLE();
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x40023830
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable12_1  ;; 0x40023830
   \   00000030   0x6008             STR      R0,[R1, #+0]
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x40023830
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000003C   0x9000             STR      R0,[SP, #+0]
   \   0000003E   0x9800             LDR      R0,[SP, #+0]
    173          
    174            
    175            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x9002             STR      R0,[SP, #+8]
    176            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0x9003             STR      R0,[SP, #+12]
    177            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
   \   00000048   0x2003             MOVS     R0,#+3
   \   0000004A   0x9004             STR      R0,[SP, #+16]
    178          
    179            /* SPI SCK pin configuration */
    180            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
   \   0000004C   0x2005             MOVS     R0,#+5
   \   0000004E   0x9005             STR      R0,[SP, #+20]
    181            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
   \   00000050   0x2020             MOVS     R0,#+32
   \   00000052   0x9001             STR      R0,[SP, #+4]
    182            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   00000054   0xA901             ADD      R1,SP,#+4
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40020000
   \   0000005A   0x.... 0x....      BL       HAL_GPIO_Init
    183          
    184            /* SPI  MOSI pin configuration */
    185            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x9005             STR      R0,[SP, #+20]
    186            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
   \   00000062   0x2080             MOVS     R0,#+128
   \   00000064   0x9001             STR      R0,[SP, #+4]
    187            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   00000066   0xA901             ADD      R1,SP,#+4
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40020000
   \   0000006C   0x.... 0x....      BL       HAL_GPIO_Init
    188          
    189            /* SPI MISO pin configuration */
    190            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x9005             STR      R0,[SP, #+20]
    191            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
   \   00000074   0x2040             MOVS     R0,#+64
   \   00000076   0x9001             STR      R0,[SP, #+4]
    192            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   00000078   0xA901             ADD      R1,SP,#+4
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40020000
   \   0000007E   0x.... 0x....      BL       HAL_GPIO_Init
    193          
    194            /* SPI configuration -------------------------------------------------------*/
    195            //SPI_I2S_DeInit(SPI1);
    196            
    197            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   00000082   0xF44F 0x6080      MOV      R0,#+1024
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   0000008A   0x6088             STR      R0,[R1, #+8]
    198            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000008C   0xF44F 0x6070      MOV      R0,#+3840
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000094   0x60C8             STR      R0,[R1, #+12]
    199            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   0000009C   0x6108             STR      R0,[R1, #+16]
    200            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000A4   0x6148             STR      R0,[R1, #+20]
    201            spi1_ins.Init.NSS = SPI_NSS_SOFT;
   \   000000A6   0xF44F 0x7000      MOV      R0,#+512
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000AE   0x6188             STR      R0,[R1, #+24]
    202            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
   \   000000B0   0x2028             MOVS     R0,#+40
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000B6   0x61C8             STR      R0,[R1, #+28]
    203            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000BE   0x6208             STR      R0,[R1, #+32]
    204            spi1_ins.Init.CRCPolynomial = 7;
   \   000000C0   0x2007             MOVS     R0,#+7
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000C6   0x62C8             STR      R0,[R1, #+44]
    205            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000CE   0x6048             STR      R0,[R1, #+4]
    206            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   000000D4   0x.... 0x....      BL       HAL_SPI_Init
    207            {
    208              /* Initialization Error */
    209              //Error_Handler();
    210            }
    211            
    212           
    213            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   000000D8   0x2008             MOVS     R0,#+8
   \   000000DA   0x9001             STR      R0,[SP, #+4]
    214            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0x9002             STR      R0,[SP, #+8]
    215            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
   \   000000E0   0x2002             MOVS     R0,#+2
   \   000000E2   0x9004             STR      R0,[SP, #+16]
    216            GPIO_InitStructure.Pull = GPIO_PULLUP;
   \   000000E4   0x2001             MOVS     R0,#+1
   \   000000E6   0x9003             STR      R0,[SP, #+12]
    217            //GPIO_InitStructure.Alternate 
    218            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000E8   0xA901             ADD      R1,SP,#+4
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable13_2  ;; 0x40021000
   \   000000EE   0x.... 0x....      BL       HAL_GPIO_Init
    219          
    220            /* Deselect : Chip Select high */
    221            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000F2   0x2201             MOVS     R2,#+1
   \   000000F4   0x2108             MOVS     R1,#+8
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable13_2  ;; 0x40021000
   \   000000FA   0x.... 0x....      BL       HAL_GPIO_WritePin
    222             /* sop1hc */
    223            /* Configure the SPI interrupt priority */
    224            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000FE   0x2200             MOVS     R2,#+0
   \   00000100   0x2101             MOVS     R1,#+1
   \   00000102   0x2023             MOVS     R0,#+35
   \   00000104   0x.... 0x....      BL       HAL_NVIC_SetPriority
    225          
    226            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000108   0x2023             MOVS     R0,#+35
   \   0000010A   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    227            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    228            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    229          
    230            /* Enable SPI1  */
    231            //__HAL_SPI_ENABLE(SPI1);
    232          
    233          }
   \   0000010E   0xB007             ADD      SP,SP,#+28
   \   00000110   0xBD00             POP      {PC}             ;; return
    234          

   \                                 In section .text, align 2, keep-with-next
    235          void mySPI_SendData(uint8_t adress, uint8_t data)
    236          {
   \                     mySPI_SendData: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    237           
    238          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x6880             LDR      R0,[R0, #+8]
   \   0000000E   0x0780             LSLS     R0,R0,#+30
   \   00000010   0xD5F9             BPL.N    ??mySPI_SendData_0
    239          SPI_I2S_SendData(SPI1, adress);
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable13_3  ;; 0x40013000
   \   0000001C   0x.... 0x....      BL       SPI_I2S_SendData
    240          
    241          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x6880             LDR      R0,[R0, #+8]
   \   00000028   0x07C0             LSLS     R0,R0,#+31
   \   0000002A   0xD5F9             BPL.N    ??mySPI_SendData_1
    242          SPI_I2S_ReceiveData(SPI1);
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable13_3  ;; 0x40013000
   \   00000030   0x.... 0x....      BL       SPI_I2S_ReceiveData
    243          
    244          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x6880             LDR      R0,[R0, #+8]
   \   0000003C   0x0780             LSLS     R0,R0,#+30
   \   0000003E   0xD4F9             BMI.N    ??mySPI_SendData_2
    245          SPI_I2S_SendData(SPI1, data);
   \   00000040   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000042   0x0029             MOVS     R1,R5
   \   00000044   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable13_3  ;; 0x40013000
   \   0000004A   0x.... 0x....      BL       SPI_I2S_SendData
    246          
    247          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x6880             LDR      R0,[R0, #+8]
   \   00000056   0x07C0             LSLS     R0,R0,#+31
   \   00000058   0xD4F9             BMI.N    ??mySPI_SendData_3
    248          SPI_I2S_ReceiveData(SPI1);
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable13_3  ;; 0x40013000
   \   0000005E   0x.... 0x....      BL       SPI_I2S_ReceiveData
    249           
    250          }
   \   00000062   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    251          
    252          /**
    253            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    254            * @param  None
    255            * @retval None
    256          */
    257          

   \                                 In section .text, align 2, keep-with-next
    258          void SPI1_IRQHandler(void)
    259          {  
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    260                uint16_t tmpTest;
    261          	  static uint8_t stLR,stLROld;
                 	                 ^
Warning[Pe177]: variable "stLR" was declared but never referenced
    262          	
    263          	  /* SPI in mode Receiver ----------------------------------------------------*/
    264          	  if(
    265          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    266          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    267          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13_4
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xF140 0x80B1      BPL.W    ??SPI1_IRQHandler_0
    268          	  {
    269          	
    270          
    271          	   tmpTest =  SPI_I2S_ReceiveData(SPI1);
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable13_3  ;; 0x40013000
   \   00000014   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000018   0x0004             MOVS     R4,R0
    272          	
    273          	   /* Left-Right Mic data */
    274          	   //stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    275          	
    276          		if (I2S2_stLR==GPIO_PIN_SET)
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD14F             BNE.N    ??SPI1_IRQHandler_1
    277          		{
    278          			if (stLROld==GPIO_PIN_RESET)
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable13_6
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD103             BNE.N    ??SPI1_IRQHandler_2
    279          			{
    280          				SPI1_stNipple = (tmpTest);
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable13_7
   \   00000032   0x8004             STRH     R4,[R0, #+0]
   \   00000034   0xE09D             B.N      ??SPI1_IRQHandler_0
    281          
    282          			}
    283          			else
    284          			{
    285          				 vRawSens1 = (tmpTest);
   \                     ??SPI1_IRQHandler_2: (+1)
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable13_8
   \   0000003A   0x8004             STRH     R4,[R0, #+0]
    286             		         WaveRec_idxTest++;
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000040   0x8800             LDRH     R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable13_9
   \   00000048   0x8008             STRH     R0,[R1, #+0]
    287          				   /* Recording Audio Data */						 
    288          				   switch (buffer_switch)
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD003             BEQ.N    ??SPI1_IRQHandler_3
   \   00000054   0x2802             CMP      R0,#+2
   \   00000056   0xD023             BEQ.N    ??SPI1_IRQHandler_4
   \   00000058   0xD311             BCC.N    ??SPI1_IRQHandler_5
   \   0000005A   0xE032             B.N      ??SPI1_IRQHandler_6
    289          				   {
    290          							case BUF1_PLAY:
    291          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;								
   \                     ??SPI1_IRQHandler_3: (+1)
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable13_11
   \   00000060   0x8800             LDRH     R0,[R0, #+0]
   \   00000062   0x1C41             ADDS     R1,R0,#+1
   \   00000064   0x.... 0x....      LDR.W    R2,??DataTable13_11
   \   00000068   0x8011             STRH     R1,[R2, #+0]
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable13_8
   \   0000006E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000072   0x.... 0x....      LDR.W    R2,??DataTable13_12  ;; 0xc00080a0
   \   00000076   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000078   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
    292          									break;
   \   0000007C   0xE079             B.N      ??SPI1_IRQHandler_0
    293          							case BUF2_PLAY:
    294          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??SPI1_IRQHandler_5: (+1)
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable13_11
   \   00000082   0x8800             LDRH     R0,[R0, #+0]
   \   00000084   0x1C41             ADDS     R1,R0,#+1
   \   00000086   0x.... 0x....      LDR.W    R2,??DataTable13_11
   \   0000008A   0x8011             STRH     R1,[R2, #+0]
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable13_8
   \   00000090   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000094   0x.... 0x....      LDR.W    R2,??DataTable13_13  ;; 0xc0010140
   \   00000098   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000009A   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
    295          									break;
   \   0000009E   0xE068             B.N      ??SPI1_IRQHandler_0
    296          							case BUF3_PLAY:
    297          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;									
   \                     ??SPI1_IRQHandler_4: (+1)
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable13_11
   \   000000A4   0x8800             LDRH     R0,[R0, #+0]
   \   000000A6   0x1C41             ADDS     R1,R0,#+1
   \   000000A8   0x.... 0x....      LDR.W    R2,??DataTable13_11
   \   000000AC   0x8011             STRH     R1,[R2, #+0]
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable13_8
   \   000000B2   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000B6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B8   0x0040             LSLS     R0,R0,#+1
   \   000000BA   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000000BE   0x8001             STRH     R1,[R0, #+0]
    298          									break;
   \   000000C0   0xE057             B.N      ??SPI1_IRQHandler_0
    299          							default:
    300          									break; 
   \                     ??SPI1_IRQHandler_6: (+1)
   \   000000C2   0xE056             B.N      ??SPI1_IRQHandler_0
    301          				   
    302          				   	}
    303          			}
    304          		}
    305          		else
    306          		{
    307          			if (stLROld==GPIO_PIN_SET)
   \                     ??SPI1_IRQHandler_1: (+1)
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable13_6
   \   000000C8   0x7800             LDRB     R0,[R0, #+0]
   \   000000CA   0x2801             CMP      R0,#+1
   \   000000CC   0xD103             BNE.N    ??SPI1_IRQHandler_7
    308          			{
    309          			  SPI1_stNipple = (tmpTest);  
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable13_7
   \   000000D2   0x8004             STRH     R4,[R0, #+0]
   \   000000D4   0xE04D             B.N      ??SPI1_IRQHandler_0
    310          
    311          			}
    312          			else
    313          			{
    314          			  vRawSens2 = (tmpTest);
   \                     ??SPI1_IRQHandler_7: (+1)
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable13_14
   \   000000DA   0x8004             STRH     R4,[R0, #+0]
    315           	          WaveRec_idxTest++;
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   000000E0   0x8800             LDRH     R0,[R0, #+0]
   \   000000E2   0x1C40             ADDS     R0,R0,#+1
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable13_9
   \   000000E8   0x8008             STRH     R0,[R1, #+0]
    316          			  	   /* Recording Audio Data */						 
    317          				   switch (buffer_switch)
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   000000EE   0x7800             LDRB     R0,[R0, #+0]
   \   000000F0   0x2800             CMP      R0,#+0
   \   000000F2   0xD003             BEQ.N    ??SPI1_IRQHandler_8
   \   000000F4   0x2802             CMP      R0,#+2
   \   000000F6   0xD029             BEQ.N    ??SPI1_IRQHandler_9
   \   000000F8   0xD314             BCC.N    ??SPI1_IRQHandler_10
   \   000000FA   0xE03A             B.N      ??SPI1_IRQHandler_11
    318          				   {
    319          							case BUF1_PLAY:
    320          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;								
   \                     ??SPI1_IRQHandler_8: (+1)
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable13_15
   \   00000100   0x8800             LDRH     R0,[R0, #+0]
   \   00000102   0x1C41             ADDS     R1,R0,#+1
   \   00000104   0x.... 0x....      LDR.W    R2,??DataTable13_15
   \   00000108   0x8011             STRH     R1,[R2, #+0]
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable13_14
   \   0000010E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000112   0x.... 0x....      LDR.W    R2,??DataTable13_12  ;; 0xc00080a0
   \   00000116   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000118   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   0000011C   0xF241 0x0214      MOVW     R2,#+4116
   \   00000120   0x5211             STRH     R1,[R2, R0]
    321          									break;
   \   00000122   0xE026             B.N      ??SPI1_IRQHandler_0
    322          							case BUF2_PLAY:
    323          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \                     ??SPI1_IRQHandler_10: (+1)
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable13_15
   \   00000128   0x8800             LDRH     R0,[R0, #+0]
   \   0000012A   0x1C41             ADDS     R1,R0,#+1
   \   0000012C   0x.... 0x....      LDR.W    R2,??DataTable13_15
   \   00000130   0x8011             STRH     R1,[R2, #+0]
   \   00000132   0x.... 0x....      LDR.W    R1,??DataTable13_14
   \   00000136   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000013A   0x.... 0x....      LDR.W    R2,??DataTable13_13  ;; 0xc0010140
   \   0000013E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000140   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   00000144   0xF241 0x0214      MOVW     R2,#+4116
   \   00000148   0x5211             STRH     R1,[R2, R0]
    324          									break;
   \   0000014A   0xE012             B.N      ??SPI1_IRQHandler_0
    325          							case BUF3_PLAY:
    326          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
   \                     ??SPI1_IRQHandler_9: (+1)
   \   0000014C   0x.... 0x....      LDR.W    R0,??DataTable13_15
   \   00000150   0x8800             LDRH     R0,[R0, #+0]
   \   00000152   0x1C41             ADDS     R1,R0,#+1
   \   00000154   0x.... 0x....      LDR.W    R2,??DataTable13_15
   \   00000158   0x8011             STRH     R1,[R2, #+0]
   \   0000015A   0x.... 0x....      LDR.W    R1,??DataTable13_14
   \   0000015E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000162   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000164   0x0040             LSLS     R0,R0,#+1
   \   00000166   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000016A   0xF241 0x0214      MOVW     R2,#+4116
   \   0000016E   0x5211             STRH     R1,[R2, R0]
    327          									break;
   \   00000170   0xE7FF             B.N      ??SPI1_IRQHandler_0
    328          							default:
    329          									break; 
    330          				   
    331          				   	}
    332          			  }
    333          
    334          			} 	
    335          		}
    336          	   
    337          
    338          #if 0
    339                 if (iSDO12<4*AUDIO_OUT_BUFFER_SIZE)
    340          	   {
    341                     TestSDO12[iSDO12++]=tmpTest;
    342          	   }
    343          	   else
    344          	   {
    345                     iSDO12=0;
    346          	   }
    347          		if ((WaveRec_idxSens1 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens2 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    348          	//			  &&(stLR!=stLROld))
    349          		{
    350          	/*-------------------------------------------------------------------------------------------------------------
    351          				  
    352          		Sequence  Record Data					  Processing Data				  Player Data
    353          				  
    354          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    355          				  
    356          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    357          				  
    358          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    359          	 ---------------------------------------------------------------------------------------------------------------*/
    360          				  /* Recording Audio Data */						 
    361          				   switch (buffer_switch)
    362          				   {
    363          							case BUF1_PLAY:
    364          
    365                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    366          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    367          							    else
    368          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    369          
    370          	
    371          									break;
    372          							case BUF2_PLAY:
    373                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    374          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    375          							    else
    376          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;	
    377          
    378          									break;
    379          							case BUF3_PLAY:
    380                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    381          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    382          							    else
    383          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    384          
    385          									break;
    386          							default:
    387          									break; 
    388          				   }
    389          			
    390          		 } 
    391          #endif		
    392          
    393          		/* Update Old value */	  
    394          		stLROld=I2S2_stLR;
   \                     ??SPI1_IRQHandler_11: (+1)
   \                     ??SPI1_IRQHandler_0: (+1)
   \   00000172   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   00000176   0x7800             LDRB     R0,[R0, #+0]
   \   00000178   0x.... 0x....      LDR.W    R1,??DataTable13_6
   \   0000017C   0x7008             STRB     R0,[R1, #+0]
    395          
    396          				 
    397          } 	 
   \   0000017E   0xBD10             POP      {R4,PC}          ;; return
   \   00000180                      REQUIRE Buffer2
   \   00000180                      REQUIRE Buffer3
   \   00000180                      REQUIRE Buffer1

   \                                 In section .bss, align 1
   \                     ??stLROld:
   \   00000000                      DS8 1
    398          
    399          
    400          
    401          
    402          /**
    403            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    404            * @param  None
    405            * @retval None
    406          */
    407          

   \                                 In section .text, align 2, keep-with-next
    408          void SPI2_IRQHandler(void)
    409          {      
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    410              uint16_t app;
    411              
    412          
    413            /* Check if data are available in SPI Data register */
    414             if (
    415          //	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    416          //   	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    417             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    418             	  )
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13_16
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xF140 0x80B9      BPL.W    ??SPI2_IRQHandler_0
    419             {
    420              
    421               app = SPI_I2S_ReceiveData(SPI2);   
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable13_17  ;; 0x40003800
   \   00000014   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000018   0x0004             MOVS     R4,R0
    422               //SPI_I2S_SendData(SPI2, 3333);
    423          
    424          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   0000001A   0x2110             MOVS     R1,#+16
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40020000
   \   00000020   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable13_5
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    425          
    426          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2801             CMP      R0,#+1
   \   00000032   0xD150             BNE.N    ??SPI2_IRQHandler_1
    427          	 {
    428                  if (I2S2_stLROld==GPIO_PIN_SET)
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xD103             BNE.N    ??SPI2_IRQHandler_2
    429                  {
    430                      I2S2_stNipple = app;           
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable13_19
   \   00000042   0x8004             STRH     R4,[R0, #+0]
   \   00000044   0xE097             B.N      ??SPI2_IRQHandler_3
    431                  }
    432          		else
    433          		{
    434          
    435          			 vRawSens3 = app;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable13_20
   \   0000004A   0x8004             STRH     R4,[R0, #+0]
    436          			switch (buffer_switch)
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   00000050   0x7800             LDRB     R0,[R0, #+0]
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD003             BEQ.N    ??SPI2_IRQHandler_4
   \   00000056   0x2802             CMP      R0,#+2
   \   00000058   0xD029             BEQ.N    ??SPI2_IRQHandler_5
   \   0000005A   0xD314             BCC.N    ??SPI2_IRQHandler_6
   \   0000005C   0xE03A             B.N      ??SPI2_IRQHandler_7
    437          			{
    438          				case BUF1_PLAY:
    439          					Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;								
   \                     ??SPI2_IRQHandler_4: (+1)
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable13_21
   \   00000062   0x8800             LDRH     R0,[R0, #+0]
   \   00000064   0x1C41             ADDS     R1,R0,#+1
   \   00000066   0x.... 0x....      LDR.W    R2,??DataTable13_21
   \   0000006A   0x8011             STRH     R1,[R2, #+0]
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable13_20
   \   00000070   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000074   0x.... 0x....      LDR.W    R2,??DataTable13_12  ;; 0xc00080a0
   \   00000078   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000007A   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   0000007E   0xF242 0x0228      MOVW     R2,#+8232
   \   00000082   0x5211             STRH     R1,[R2, R0]
    440          					break;
   \   00000084   0xE077             B.N      ??SPI2_IRQHandler_3
    441          				case BUF2_PLAY:
    442          					Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \                     ??SPI2_IRQHandler_6: (+1)
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable13_21
   \   0000008A   0x8800             LDRH     R0,[R0, #+0]
   \   0000008C   0x1C41             ADDS     R1,R0,#+1
   \   0000008E   0x.... 0x....      LDR.W    R2,??DataTable13_21
   \   00000092   0x8011             STRH     R1,[R2, #+0]
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable13_20
   \   00000098   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R2,??DataTable13_13  ;; 0xc0010140
   \   000000A0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A2   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000000A6   0xF242 0x0228      MOVW     R2,#+8232
   \   000000AA   0x5211             STRH     R1,[R2, R0]
    443          					break;
   \   000000AC   0xE063             B.N      ??SPI2_IRQHandler_3
    444          				case BUF3_PLAY:
    445          					Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;									
   \                     ??SPI2_IRQHandler_5: (+1)
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable13_21
   \   000000B2   0x8800             LDRH     R0,[R0, #+0]
   \   000000B4   0x1C41             ADDS     R1,R0,#+1
   \   000000B6   0x.... 0x....      LDR.W    R2,??DataTable13_21
   \   000000BA   0x8011             STRH     R1,[R2, #+0]
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable13_20
   \   000000C0   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000C4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000C6   0x0040             LSLS     R0,R0,#+1
   \   000000C8   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000000CC   0xF242 0x0228      MOVW     R2,#+8232
   \   000000D0   0x5211             STRH     R1,[R2, R0]
    446          					break;
   \   000000D2   0xE050             B.N      ??SPI2_IRQHandler_3
    447          				default:
    448          					break; 
   \                     ??SPI2_IRQHandler_7: (+1)
   \   000000D4   0xE04F             B.N      ??SPI2_IRQHandler_3
    449          			}
    450          
    451          		}
    452          	 }
    453          	 else
    454          	 {
    455                  if (I2S2_stLROld==GPIO_PIN_RESET)
   \                     ??SPI2_IRQHandler_1: (+1)
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable13_18
   \   000000DA   0x7800             LDRB     R0,[R0, #+0]
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD103             BNE.N    ??SPI2_IRQHandler_8
    456                  {
    457                      I2S2_stNipple = app;
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable13_19
   \   000000E4   0x8004             STRH     R4,[R0, #+0]
   \   000000E6   0xE046             B.N      ??SPI2_IRQHandler_3
    458          
    459                  }
    460          		else
    461          		{
    462                      vRawSens4 =app;
   \                     ??SPI2_IRQHandler_8: (+1)
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable13_22
   \   000000EC   0x8004             STRH     R4,[R0, #+0]
    463          			switch (buffer_switch)
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   000000F2   0x7800             LDRB     R0,[R0, #+0]
   \   000000F4   0x2800             CMP      R0,#+0
   \   000000F6   0xD003             BEQ.N    ??SPI2_IRQHandler_9
   \   000000F8   0x2802             CMP      R0,#+2
   \   000000FA   0xD029             BEQ.N    ??SPI2_IRQHandler_10
   \   000000FC   0xD314             BCC.N    ??SPI2_IRQHandler_11
   \   000000FE   0xE03A             B.N      ??SPI2_IRQHandler_12
    464          			{	 
    465          				case BUF1_PLAY:
    466          					Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;								
   \                     ??SPI2_IRQHandler_9: (+1)
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable13_23
   \   00000104   0x8800             LDRH     R0,[R0, #+0]
   \   00000106   0x1C41             ADDS     R1,R0,#+1
   \   00000108   0x.... 0x....      LDR.W    R2,??DataTable13_23
   \   0000010C   0x8011             STRH     R1,[R2, #+0]
   \   0000010E   0x.... 0x....      LDR.W    R1,??DataTable13_22
   \   00000112   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000116   0x.... 0x....      LDR.W    R2,??DataTable13_12  ;; 0xc00080a0
   \   0000011A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000011C   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   00000120   0xF243 0x023C      MOVW     R2,#+12348
   \   00000124   0x5211             STRH     R1,[R2, R0]
    467          					break;
   \   00000126   0xE026             B.N      ??SPI2_IRQHandler_3
    468          				case BUF2_PLAY:
    469          					Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \                     ??SPI2_IRQHandler_11: (+1)
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable13_23
   \   0000012C   0x8800             LDRH     R0,[R0, #+0]
   \   0000012E   0x1C41             ADDS     R1,R0,#+1
   \   00000130   0x.... 0x....      LDR.W    R2,??DataTable13_23
   \   00000134   0x8011             STRH     R1,[R2, #+0]
   \   00000136   0x.... 0x....      LDR.W    R1,??DataTable13_22
   \   0000013A   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000013E   0x.... 0x....      LDR.W    R2,??DataTable13_13  ;; 0xc0010140
   \   00000142   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000144   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   00000148   0xF243 0x023C      MOVW     R2,#+12348
   \   0000014C   0x5211             STRH     R1,[R2, R0]
    470          					break;
   \   0000014E   0xE012             B.N      ??SPI2_IRQHandler_3
    471          				case BUF3_PLAY:
    472          					Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;									
   \                     ??SPI2_IRQHandler_10: (+1)
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable13_23
   \   00000154   0x8800             LDRH     R0,[R0, #+0]
   \   00000156   0x1C41             ADDS     R1,R0,#+1
   \   00000158   0x.... 0x....      LDR.W    R2,??DataTable13_23
   \   0000015C   0x8011             STRH     R1,[R2, #+0]
   \   0000015E   0x.... 0x....      LDR.W    R1,??DataTable13_22
   \   00000162   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000166   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000168   0x0040             LSLS     R0,R0,#+1
   \   0000016A   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000016E   0xF243 0x023C      MOVW     R2,#+12348
   \   00000172   0x5211             STRH     R1,[R2, R0]
    473          					break;
   \   00000174   0xE7FF             B.N      ??SPI2_IRQHandler_3
    474          				default:
    475          					break; 
    476          			}
    477          		}
    478          	 }
    479          
    480          
    481          	 
    482          #if 0
    483          	  if (iSDO34<4*AUDIO_OUT_BUFFER_SIZE)
    484          	 {
    485          		 TestSDO34[iSDO34++]=app;
    486          	 }
    487          	 else
    488          	 {
    489          		 iSDO34=0;
    490          	 }
    491          
    492          	 if ((WaveRec_idxSens3 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens4 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    493          //             &&(I2S2_stLR!=I2S2_stLROld))
    494          	 {
    495          /*-------------------------------------------------------------------------------------------------------------
    496          			  
    497          	Sequence  Record Data                     Processing Data                 Player Data
    498          			  
    499          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    500          			  
    501          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    502          			  
    503          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    504           ---------------------------------------------------------------------------------------------------------------*/
    505          		/* Recording Audio Data */			             
    506          		 switch (buffer_switch)
    507          		 {
    508          			  case BUF1_PLAY:
    509                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    510                                Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    511          				  else
    512                                Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			  
    513          
    514          				  break;
    515          			  case BUF2_PLAY:
    516                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    517                                Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    518          				  else
    519                                Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			   
    520          				  break;
    521          			  case BUF3_PLAY:
    522                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    523                                Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    524          				  else
    525                                Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    526          				  break;
    527          			  default:
    528          				  break; 
    529          		 }
    530          		
    531          	 }          
    532          #endif		  
    533          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_12: (+1)
   \                     ??SPI2_IRQHandler_3: (+1)
   \   00000176   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   0000017A   0x7800             LDRB     R0,[R0, #+0]
   \   0000017C   0x.... 0x....      LDR.W    R1,??DataTable13_18
   \   00000180   0x7008             STRB     R0,[R1, #+0]
    534          
    535             }
    536          
    537          }
   \                     ??SPI2_IRQHandler_0: (+1)
   \   00000182   0xBD10             POP      {R4,PC}          ;; return
   \   00000184                      REQUIRE Buffer2
   \   00000184                      REQUIRE Buffer3
   \   00000184                      REQUIRE Buffer1
    538          
    539          

   \                                 In section .text, align 2, keep-with-next
    540          void SPI4_IRQHandler(void)
    541          {
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    542            static uint8_t Main_stLR, Main_stLROld;
    543          
    544          
    545            /* SPI in mode Receiver ----------------------------------------------------*/
    546            if(
    547          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    548          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    549               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13_24
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xF140 0x80EE      BPL.W    ??SPI4_IRQHandler_0
    550            {
    551          
    552                  uint16_t test;
    553                  test =  SPI_I2S_ReceiveData(SPI4);
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable13_25  ;; 0x40013400
   \   00000014   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000018   0x0004             MOVS     R4,R0
    554          
    555                  /* Left-Right Mic data */
    556                  Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   0000001A   0x2110             MOVS     R1,#+16
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x40020000
   \   00000020   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable13_26
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    557          
    558                  /* STM32F746 read data from STA321MP, the data is shifted few bit     */
    559                  /* Data from STA321MP is 32bit formart                                */
    560                  /* SPI is just able to read 16 bit format                             */
    561                  /* Therefore, it needs to correct                                     */
    562                  
    563                  /* ---------------------------+++++++++++++++++++++++++++++++---------*/
    564                  /*                  ______DATAL_____              ______DATAR_____    */
    565                  /*                  _____vRawSens5__              ______vRawSens6_    */       
    566          	if (Main_stLR==GPIO_PIN_SET)
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable13_26
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2801             CMP      R0,#+1
   \   00000032   0xD16B             BNE.N    ??SPI4_IRQHandler_1
    567          	{
    568                      if (Main_stLROld==GPIO_PIN_SET)
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xD103             BNE.N    ??SPI4_IRQHandler_2
    569                      {
    570                         SPI4_stNipple = (test);    
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable13_27
   \   00000042   0x8004             STRH     R4,[R0, #+0]
   \   00000044   0xE0CC             B.N      ??SPI4_IRQHandler_3
    571                      }
    572                      else
    573                      {
    574                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI4_IRQHandler_2: (+1)
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable13_27
   \   00000050   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000054   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000056   0x0022             MOVS     R2,R4
   \   00000058   0x4102             ASRS     R2,R2,R0
   \   0000005A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0xF1D0 0x0010      RSBS     R0,R0,#+16
   \   00000066   0xFA11 0xF000      LSLS     R0,R1,R0
   \   0000006A   0x4310             ORRS     R0,R0,R2
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable13_29
   \   00000070   0x8008             STRH     R0,[R1, #+0]
    575                         if (WaveRec_idxSens5 < (2*AUDIO_OUT_BUFFER_SIZE+5))
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable13_30
   \   00000076   0x8800             LDRH     R0,[R0, #+0]
   \   00000078   0xF640 0x0105      MOVW     R1,#+2053
   \   0000007C   0x4288             CMP      R0,R1
   \   0000007E   0xF280 0x80AF      BGE.W    ??SPI4_IRQHandler_3
    576                         {
    577                              /*-------------------------------------------------------------------------------------------------------------                                             
    578                              Sequence  Record Data                     Processing Data                 Player Data
    579                                                
    580                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    581                                                
    582                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    583                                                
    584                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    585                               ---------------------------------------------------------------------------------------------------------------*/                     
    586                               /* Recording Audio Data */			             
    587                               switch (buffer_switch)
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD003             BEQ.N    ??SPI4_IRQHandler_4
   \   0000008C   0x2802             CMP      R0,#+2
   \   0000008E   0xD029             BEQ.N    ??SPI4_IRQHandler_5
   \   00000090   0xD314             BCC.N    ??SPI4_IRQHandler_6
   \   00000092   0xE03A             B.N      ??SPI4_IRQHandler_7
    588                               {
    589                                   case BUF1_PLAY:
    590                                       Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_4: (+1)
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable13_30
   \   00000098   0x8800             LDRH     R0,[R0, #+0]
   \   0000009A   0x1C41             ADDS     R1,R0,#+1
   \   0000009C   0x.... 0x....      LDR.W    R2,??DataTable13_30
   \   000000A0   0x8011             STRH     R1,[R2, #+0]
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable13_29
   \   000000A6   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000AA   0x.... 0x....      LDR.W    R2,??DataTable13_12  ;; 0xc00080a0
   \   000000AE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B0   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000000B4   0xF244 0x0250      MOVW     R2,#+16464
   \   000000B8   0x5211             STRH     R1,[R2, R0]
    591          
    592                                       break;
   \   000000BA   0xE091             B.N      ??SPI4_IRQHandler_3
    593                                   case BUF2_PLAY:
    594                                       Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_6: (+1)
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable13_30
   \   000000C0   0x8800             LDRH     R0,[R0, #+0]
   \   000000C2   0x1C41             ADDS     R1,R0,#+1
   \   000000C4   0x.... 0x....      LDR.W    R2,??DataTable13_30
   \   000000C8   0x8011             STRH     R1,[R2, #+0]
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable13_29
   \   000000CE   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000D2   0x.... 0x....      LDR.W    R2,??DataTable13_13  ;; 0xc0010140
   \   000000D6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000D8   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000000DC   0xF244 0x0250      MOVW     R2,#+16464
   \   000000E0   0x5211             STRH     R1,[R2, R0]
    595          
    596                                       break;
   \   000000E2   0xE07D             B.N      ??SPI4_IRQHandler_3
    597                                   case BUF3_PLAY:
    598                                       Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_5: (+1)
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable13_30
   \   000000E8   0x8800             LDRH     R0,[R0, #+0]
   \   000000EA   0x1C41             ADDS     R1,R0,#+1
   \   000000EC   0x.... 0x....      LDR.W    R2,??DataTable13_30
   \   000000F0   0x8011             STRH     R1,[R2, #+0]
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable13_29
   \   000000F6   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000FA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000FC   0x0040             LSLS     R0,R0,#+1
   \   000000FE   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000102   0xF244 0x0250      MOVW     R2,#+16464
   \   00000106   0x5211             STRH     R1,[R2, R0]
    599          
    600                                       break;                          
   \   00000108   0xE06A             B.N      ??SPI4_IRQHandler_3
    601                                   default:
    602                                       break;
   \                     ??SPI4_IRQHandler_7: (+1)
   \   0000010A   0xE069             B.N      ??SPI4_IRQHandler_3
    603                               }
    604                         }
    605          	   }
    606                  }
    607          	else
    608          	{
    609                    if (Main_stLROld==GPIO_PIN_RESET)
   \                     ??SPI4_IRQHandler_1: (+1)
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000110   0x7800             LDRB     R0,[R0, #+0]
   \   00000112   0x2800             CMP      R0,#+0
   \   00000114   0xD103             BNE.N    ??SPI4_IRQHandler_8
    610                    {
    611                        SPI4_stNipple = (test);	  
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable13_27
   \   0000011A   0x8004             STRH     R4,[R0, #+0]
   \   0000011C   0xE060             B.N      ??SPI4_IRQHandler_3
    612          
    613                    }
    614                    else
    615                    {
    616                         vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI4_IRQHandler_8: (+1)
   \   0000011E   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   00000122   0x7800             LDRB     R0,[R0, #+0]
   \   00000124   0x.... 0x....      LDR.W    R1,??DataTable13_27
   \   00000128   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000012C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000012E   0x0022             MOVS     R2,R4
   \   00000130   0x4102             ASRS     R2,R2,R0
   \   00000132   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable13_28
   \   00000138   0x7800             LDRB     R0,[R0, #+0]
   \   0000013A   0xF1D0 0x0010      RSBS     R0,R0,#+16
   \   0000013E   0xFA11 0xF000      LSLS     R0,R1,R0
   \   00000142   0x4310             ORRS     R0,R0,R2
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable14_1
   \   00000148   0x8008             STRH     R0,[R1, #+0]
    617                         if (WaveRec_idxSens6 < (2*AUDIO_OUT_BUFFER_SIZE+5))
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable14_2
   \   0000014E   0x8800             LDRH     R0,[R0, #+0]
   \   00000150   0xF640 0x0105      MOVW     R1,#+2053
   \   00000154   0x4288             CMP      R0,R1
   \   00000156   0xDA43             BGE.N    ??SPI4_IRQHandler_3
    618                         {
    619                              /*-------------------------------------------------------------------------------------------------------------                                             
    620                              Sequence  Record Data                     Processing Data                 Player Data
    621                                                
    622                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    623                                                
    624                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    625                                                
    626                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    627                               ---------------------------------------------------------------------------------------------------------------*/                 
    628                                /* Recording Audio Data */			             
    629                               switch (buffer_switch)
   \   00000158   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   0000015C   0x7800             LDRB     R0,[R0, #+0]
   \   0000015E   0x2800             CMP      R0,#+0
   \   00000160   0xD003             BEQ.N    ??SPI4_IRQHandler_9
   \   00000162   0x2802             CMP      R0,#+2
   \   00000164   0xD029             BEQ.N    ??SPI4_IRQHandler_10
   \   00000166   0xD314             BCC.N    ??SPI4_IRQHandler_11
   \   00000168   0xE03A             B.N      ??SPI4_IRQHandler_12
    630                               {
    631                                   case BUF1_PLAY:
    632                                       Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_9: (+1)
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable14_2
   \   0000016E   0x8800             LDRH     R0,[R0, #+0]
   \   00000170   0x1C41             ADDS     R1,R0,#+1
   \   00000172   0x.... 0x....      LDR.W    R2,??DataTable14_2
   \   00000176   0x8011             STRH     R1,[R2, #+0]
   \   00000178   0x.... 0x....      LDR.W    R1,??DataTable14_1
   \   0000017C   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000180   0x.... 0x....      LDR.W    R2,??DataTable13_12  ;; 0xc00080a0
   \   00000184   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000186   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   0000018A   0xF245 0x0264      MOVW     R2,#+20580
   \   0000018E   0x5211             STRH     R1,[R2, R0]
    633           
    634                                       break;
   \   00000190   0xE026             B.N      ??SPI4_IRQHandler_3
    635                                   case BUF2_PLAY:
    636                                       Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_11: (+1)
   \   00000192   0x.... 0x....      LDR.W    R0,??DataTable14_2
   \   00000196   0x8800             LDRH     R0,[R0, #+0]
   \   00000198   0x1C41             ADDS     R1,R0,#+1
   \   0000019A   0x.... 0x....      LDR.W    R2,??DataTable14_2
   \   0000019E   0x8011             STRH     R1,[R2, #+0]
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable14_1
   \   000001A4   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001A8   0x.... 0x....      LDR.W    R2,??DataTable13_13  ;; 0xc0010140
   \   000001AC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001AE   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000001B2   0xF245 0x0264      MOVW     R2,#+20580
   \   000001B6   0x5211             STRH     R1,[R2, R0]
    637                 
    638                                       break;
   \   000001B8   0xE012             B.N      ??SPI4_IRQHandler_3
    639                                   case BUF3_PLAY:
    640                                       Buffer1.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_10: (+1)
   \   000001BA   0x.... 0x....      LDR.W    R0,??DataTable14_2
   \   000001BE   0x8800             LDRH     R0,[R0, #+0]
   \   000001C0   0x1C41             ADDS     R1,R0,#+1
   \   000001C2   0x.... 0x....      LDR.W    R2,??DataTable14_2
   \   000001C6   0x8011             STRH     R1,[R2, #+0]
   \   000001C8   0x.... 0x....      LDR.W    R1,??DataTable14_1
   \   000001CC   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001D0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001D2   0x0040             LSLS     R0,R0,#+1
   \   000001D4   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000001D8   0xF245 0x0264      MOVW     R2,#+20580
   \   000001DC   0x5211             STRH     R1,[R2, R0]
    641           
    642                                       break;                          
   \   000001DE   0xE7FF             B.N      ??SPI4_IRQHandler_3
    643                                   default:
    644                                       break;
    645                               }
    646                         }
    647                    }		
    648          	}
    649          #if 0
    650          	/* The code to store data in to buffer for testing purpose */
    651          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
    652          	{
    653          		TestSDO56[iSDO56++]=test;
    654          	}
    655          	else
    656          	{
    657          		iSDO56=0;
    658          	}
    659          #endif
    660          
    661          	/* Update Old value */	  
    662          	Main_stLROld=Main_stLR;	  
   \                     ??SPI4_IRQHandler_12: (+1)
   \                     ??SPI4_IRQHandler_3: (+1)
   \   000001E0   0x.... 0x....      LDR.W    R0,??DataTable13_26
   \   000001E4   0x7800             LDRB     R0,[R0, #+0]
   \   000001E6   0x.... 0x....      LDR.W    R1,??DataTable14
   \   000001EA   0x7008             STRB     R0,[R1, #+0]
    663               
    664            }      
    665          }
   \                     ??SPI4_IRQHandler_0: (+1)
   \   000001EC   0xBD10             POP      {R4,PC}          ;; return
   \   000001EE                      REQUIRE Buffer2
   \   000001EE                      REQUIRE Buffer3
   \   000001EE                      REQUIRE Buffer1

   \                                 In section .bss, align 1
   \                     ??Main_stLR:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??Main_stLROld:
   \   00000000                      DS8 1
    666          
    667          
    668          
    669          

   \                                 In section .text, align 2, keep-with-next
    670          void SPI5_IRQHandler(void)
    671          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    672            //static uint16_t stNipple;
    673            //static uint8_t stLR, stOder;
    674          
    675            /* USER CODE BEGIN SPI5_IRQn 0 */
    676          
    677            /* USER CODE END SPI5_IRQn 0 */
    678            //HAL_SPI_IRQHandler(&hspi5);
    679            /* USER CODE BEGIN SPI5_IRQn 1 */
    680          
    681            /* USER CODE END SPI5_IRQn 1 */
    682              /* Check if data are available in SPI Data register */
    683            /* SPI in mode Receiver ----------------------------------------------------*/
    684            if(
    685               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    686               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    687               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6880             LDR      R0,[R0, #+8]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xD46D             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x6880             LDR      R0,[R0, #+8]
   \   00000016   0x07C0             LSLS     R0,R0,#+31
   \   00000018   0xD567             BPL.N    ??SPI5_IRQHandler_0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0x0640             LSLS     R0,R0,#+25
   \   00000024   0xD561             BPL.N    ??SPI5_IRQHandler_0
    688            {
    689          
    690          
    691             uint16_t test;
    692             test =  SPI_I2S_ReceiveData(SPI5);
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable14_4  ;; 0x40015000
   \   0000002A   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000002E   0x0004             MOVS     R4,R0
    693             SPI5->DR = 3333;
   \   00000030   0xF640 0x5005      MOVW     R0,#+3333
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable14_5  ;; 0x4001500c
   \   00000038   0x6008             STR      R0,[R1, #+0]
    694          
    695            pDataMic8[idxMic8++] =	HTONS(test);
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003E   0x0221             LSLS     R1,R4,#+8
   \   00000040   0xEA51 0x2010      ORRS     R0,R1,R0, LSR #+8
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable14_6
   \   00000048   0x.... 0x....      LDR.W    R2,??DataTable14_7
   \   0000004C   0x8812             LDRH     R2,[R2, #+0]
   \   0000004E   0xF821 0x0012      STRH     R0,[R1, R2, LSL #+1]
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   00000056   0x8800             LDRH     R0,[R0, #+0]
   \   00000058   0x1C40             ADDS     R0,R0,#+1
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   0000005E   0x8008             STRH     R0,[R1, #+0]
    696            
    697            //volume = 64;
    698            
    699            if (idxMic8>=64)
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   00000064   0x8800             LDRH     R0,[R0, #+0]
   \   00000066   0x2840             CMP      R0,#+64
   \   00000068   0xDB3F             BLT.N    ??SPI5_IRQHandler_0
    700            {
    701          	if (buffer_switch != 1)
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   0000006E   0x7800             LDRB     R0,[R0, #+0]
   \   00000070   0x2801             CMP      R0,#+1
   \   00000072   0xD013             BEQ.N    ??SPI5_IRQHandler_1
    702          	{
    703          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    704          						  (PDMFilter_InitStruct *)&Filter[0]);
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable14_8
   \   00000078   0x7802             LDRB     R2,[R0, #+0]
   \   0000007A   0x.... 0x....      LDR.W    R3,??DataTable14_9
   \   0000007E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000080   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable16
   \   0000008C   0x8809             LDRH     R1,[R1, #+0]
   \   0000008E   0xEB10 0x1141      ADDS     R1,R0,R1, LSL #+5
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   00000096   0x.... 0x....      BL       PDM_Filter_64_LSB
   \   0000009A   0xE012             B.N      ??SPI5_IRQHandler_2
    705          	}
    706          	else
    707          	{
    708          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    709          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \                     ??SPI5_IRQHandler_1: (+1)
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable14_8
   \   000000A0   0x7802             LDRB     R2,[R0, #+0]
   \   000000A2   0x.... 0x....      LDR.W    R3,??DataTable14_9
   \   000000A6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000A8   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   000000AE   0x6800             LDR      R0,[R0, #+0]
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000000B4   0x8809             LDRH     R1,[R1, #+0]
   \   000000B6   0xEB10 0x1141      ADDS     R1,R0,R1, LSL #+5
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   000000BE   0x.... 0x....      BL       PDM_Filter_64_LSB
    710          	}
    711          	idxMic8=0;
   \                     ??SPI5_IRQHandler_2: (+1)
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   000000C8   0x8008             STRH     R0,[R1, #+0]
    712          	cntPos++;
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable16
   \   000000CE   0x8800             LDRH     R0,[R0, #+0]
   \   000000D0   0x1C40             ADDS     R0,R0,#+1
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000000D6   0x8008             STRH     R0,[R1, #+0]
    713          	if (cntPos>=256) cntPos=0;
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable16
   \   000000DC   0x8800             LDRH     R0,[R0, #+0]
   \   000000DE   0x28FF             CMP      R0,#+255
   \   000000E0   0xDD03             BLE.N    ??SPI5_IRQHandler_0
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000000E8   0x8008             STRH     R0,[R1, #+0]
    714            }
    715              
    716            }
    717            
    718          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   000000EA   0xBD10             POP      {R4,PC}          ;; return
    719          
    720          /* SPI5 init function */
    721          
    722          

   \                                 In section .text, align 2, keep-with-next
    723          void SPI6_IRQHandler(void)
    724          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    725            /* SPI in mode Receiver ----------------------------------------------------*/
    726            if(
    727          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    728               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    729               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14_11
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6880             LDR      R0,[R0, #+8]
   \   0000000A   0x0780             LSLS     R0,R0,#+30
   \   0000000C   0xD567             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_11
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0600             LSLS     R0,R0,#+24
   \   00000018   0xD561             BPL.N    ??SPI6_IRQHandler_0
    730            {
    731          
    732          
    733               uint16_t test;
    734               test =  SPI_I2S_ReceiveData(SPI6);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable14_12  ;; 0x40015400
   \   0000001E   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000022   0x0004             MOVS     R4,R0
    735               SPI6->DR = 3333;
   \   00000024   0xF640 0x5005      MOVW     R0,#+3333
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable14_13  ;; 0x4001540c
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    736          
    737              pDataMic7[idxMic7++] =	HTONS(test);
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000032   0x0221             LSLS     R1,R4,#+8
   \   00000034   0xEA51 0x2010      ORRS     R0,R1,R0, LSR #+8
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   0000003C   0x.... 0x....      LDR.W    R2,??DataTable14_15
   \   00000040   0x8812             LDRH     R2,[R2, #+0]
   \   00000042   0xF821 0x0012      STRH     R0,[R1, R2, LSL #+1]
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable14_15
   \   0000004A   0x8800             LDRH     R0,[R0, #+0]
   \   0000004C   0x1C40             ADDS     R0,R0,#+1
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable14_15
   \   00000052   0x8008             STRH     R0,[R1, #+0]
    738          
    739              //volume = 64;
    740          
    741              if (idxMic7>=64)
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable14_15
   \   00000058   0x8800             LDRH     R0,[R0, #+0]
   \   0000005A   0x2840             CMP      R0,#+64
   \   0000005C   0xDB3F             BLT.N    ??SPI6_IRQHandler_0
    742              {
    743                if (buffer_switch != 1)
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD013             BEQ.N    ??SPI6_IRQHandler_1
    744                {
    745                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    746                                                          (PDMFilter_InitStruct *)&Filter[1]);
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable14_8
   \   0000006C   0x7802             LDRB     R2,[R0, #+0]
   \   0000006E   0x.... 0x....      LDR.W    R3,??DataTable14_16
   \   00000072   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000074   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable14_17
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable17
   \   00000080   0x8809             LDRH     R1,[R1, #+0]
   \   00000082   0xEB10 0x1141      ADDS     R1,R0,R1, LSL #+5
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable14_14
   \   0000008A   0x.... 0x....      BL       PDM_Filter_64_LSB
   \   0000008E   0xE012             B.N      ??SPI6_IRQHandler_2
    747                }
    748                else
    749                {
    750                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    751                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \                     ??SPI6_IRQHandler_1: (+1)
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable14_8
   \   00000094   0x7802             LDRB     R2,[R0, #+0]
   \   00000096   0x.... 0x....      LDR.W    R3,??DataTable14_16
   \   0000009A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000009C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable14_17
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable17
   \   000000A8   0x8809             LDRH     R1,[R1, #+0]
   \   000000AA   0xEB10 0x1141      ADDS     R1,R0,R1, LSL #+5
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable14_14
   \   000000B2   0x.... 0x....      BL       PDM_Filter_64_LSB
    752                }
    753                idxMic7=0;
   \                     ??SPI6_IRQHandler_2: (+1)
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x.... 0x....      LDR.W    R1,??DataTable14_15
   \   000000BC   0x8008             STRH     R0,[R1, #+0]
    754                cntPos7++;
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable17
   \   000000C2   0x8800             LDRH     R0,[R0, #+0]
   \   000000C4   0x1C40             ADDS     R0,R0,#+1
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable17
   \   000000CA   0x8008             STRH     R0,[R1, #+0]
    755                if (cntPos7>=256) cntPos7=0;
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable17
   \   000000D0   0x8800             LDRH     R0,[R0, #+0]
   \   000000D2   0x28FF             CMP      R0,#+255
   \   000000D4   0xDD03             BLE.N    ??SPI6_IRQHandler_0
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable17
   \   000000DC   0x8008             STRH     R0,[R1, #+0]
    756              }
    757              
    758            }
    759          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   000000DE   0xBD10             POP      {R4,PC}          ;; return
    760          
    761          
    762          

   \                                 In section .text, align 2, keep-with-next
    763          void MIC1TO6_Init(void)
    764          {
   \                     MIC1TO6_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    765          	SPI5_Init();
   \   00000002   0x.... 0x....      BL       SPI5_Init
    766          	SPI6_Init();
   \   00000006   0x.... 0x....      BL       SPI6_Init
    767          	StartRecMic7_8();
   \   0000000A   0x.... 0x....      BL       StartRecMic7_8
    768          	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_0: (+1)
   \   0000000E   0x2110             MOVS     R1,#+16
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40020000
   \   00000014   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD0F8             BEQ.N    ??MIC1TO6_Init_0
    769          	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_1: (+1)
   \   0000001C   0x2110             MOVS     R1,#+16
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40020000
   \   00000022   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xD0F8             BEQ.N    ??MIC1TO6_Init_1
    770          	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_2: (+1)
   \   0000002A   0x2110             MOVS     R1,#+16
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40020000
   \   00000030   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD0F8             BEQ.N    ??MIC1TO6_Init_2
    771          	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_3: (+1)
   \   00000038   0x2110             MOVS     R1,#+16
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40020000
   \   0000003E   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000042   0x2801             CMP      R0,#+1
   \   00000044   0xD0F8             BEQ.N    ??MIC1TO6_Init_3
    772              HAL_Delay(2);
   \   00000046   0x2002             MOVS     R0,#+2
   \   00000048   0x.... 0x....      BL       HAL_Delay
    773          
    774          
    775            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_4: (+1)
   \   0000004C   0x2110             MOVS     R1,#+16
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40020000
   \   00000052   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000056   0x2801             CMP      R0,#+1
   \   00000058   0xD0F8             BEQ.N    ??MIC1TO6_Init_4
    776            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_5: (+1)
   \   0000005A   0x2110             MOVS     R1,#+16
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40020000
   \   00000060   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD0F8             BEQ.N    ??MIC1TO6_Init_5
    777            I2S1_Init(); /* I2S1   --> SDO12 */
   \   00000068   0x.... 0x....      BL       I2S1_Init
    778            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_6: (+1)
   \   0000006C   0x2110             MOVS     R1,#+16
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40020000
   \   00000072   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000076   0x2801             CMP      R0,#+1
   \   00000078   0xD0F8             BEQ.N    ??MIC1TO6_Init_6
    779            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_7: (+1)
   \   0000007A   0x2110             MOVS     R1,#+16
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40020000
   \   00000080   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD0F8             BEQ.N    ??MIC1TO6_Init_7
    780            I2S2_Init(); /* I2S2   --> SDO34 */
   \   00000088   0x.... 0x....      BL       I2S2_Init
    781            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_8: (+1)
   \   0000008C   0x2110             MOVS     R1,#+16
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40020000
   \   00000092   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000096   0x2801             CMP      R0,#+1
   \   00000098   0xD0F8             BEQ.N    ??MIC1TO6_Init_8
    782            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_9: (+1)
   \   0000009A   0x2110             MOVS     R1,#+16
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40020000
   \   000000A0   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD0F8             BEQ.N    ??MIC1TO6_Init_9
    783            SPI4_Init(); /* SPI4   --> SDO56 */
   \   000000A8   0x.... 0x....      BL       SPI4_Init
    784          
    785          
    786          }
   \   000000AC   0xBD01             POP      {R0,PC}          ;; return
    787          

   \                                 In section .text, align 2, keep-with-next
    788          void StartRecMic7_8 (void)
    789          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    790          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0xF44F 0x5280      MOV      R2,#+4096
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable17_1
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   0000000E   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    791          #if (0)
    792          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
    793          #else
    794          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000012   0xF44F 0x5280      MOV      R2,#+4096
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable14_11
   \   0000001E   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    795          #endif
    796          	  swtSDO7 = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable17_3
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    797          	  swtSDO8 = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable18_1
   \   00000030   0x7008             STRB     R0,[R1, #+0]
    798          
    799          }
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
    800          
    801          /* I2S1 init function */
    802          /* Read data of MIC12 */

   \                                 In section .text, align 2, keep-with-next
    803          static void I2S1_Init(void)
    804          {
   \                     I2S1_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    805          #if 1
    806            hi2s1.Instance = SPI1;
   \   00000002   0x....             LDR.N    R0,??DataTable13_3  ;; 0x40013000
   \   00000004   0x....             LDR.N    R1,??DataTable13_4
   \   00000006   0x6008             STR      R0,[R1, #+0]
    807            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
   \   00000008   0xF44F 0x7080      MOV      R0,#+256
   \   0000000C   0x....             LDR.N    R1,??DataTable13_4
   \   0000000E   0x6048             STR      R0,[R1, #+4]
    808            hi2s1.Init.Standard = I2S_STANDARD_LSB;
   \   00000010   0x2020             MOVS     R0,#+32
   \   00000012   0x....             LDR.N    R1,??DataTable13_4
   \   00000014   0x6088             STR      R0,[R1, #+8]
    809            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable13_4
   \   0000001A   0x60C8             STR      R0,[R1, #+12]
    810            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR.N    R1,??DataTable13_4
   \   00000020   0x6108             STR      R0,[R1, #+16]
    811            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
   \   00000022   0xF44F 0x507A      MOV      R0,#+16000
   \   00000026   0x....             LDR.N    R1,??DataTable13_4
   \   00000028   0x6148             STR      R0,[R1, #+20]
    812            hi2s1.Init.CPOL = I2S_CPOL_HIGH;
   \   0000002A   0x2008             MOVS     R0,#+8
   \   0000002C   0x....             LDR.N    R1,??DataTable13_4
   \   0000002E   0x6188             STR      R0,[R1, #+24]
    813            hi2s1.Init.ClockSource = I2S_CLOCK_EXTERNAL;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x....             LDR.N    R1,??DataTable13_4
   \   00000034   0x61C8             STR      R0,[R1, #+28]
    814            HAL_I2S_Init(&hi2s1);
   \   00000036   0x....             LDR.N    R0,??DataTable13_4
   \   00000038   0x.... 0x....      BL       HAL_I2S_Init
    815          
    816            /* Enable TXE and ERR interrupt */
    817           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
   \   0000003C   0x....             LDR.N    R0,??DataTable13_4
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x6840             LDR      R0,[R0, #+4]
   \   00000042   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000046   0x....             LDR.N    R1,??DataTable13_4
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x6048             STR      R0,[R1, #+4]
    818           
    819           __HAL_I2S_ENABLE(&hi2s1);
   \   0000004C   0x....             LDR.N    R0,??DataTable13_4
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x69C0             LDR      R0,[R0, #+28]
   \   00000052   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000056   0x....             LDR.N    R1,??DataTable13_4
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0x61C8             STR      R0,[R1, #+28]
    820          #else
    821          	hspi1.Instance = SPI1;
    822          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    823          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    824          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    825          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    826          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    827          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    828          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    829          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    830          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    831          	hspi1.Init.CRCPolynomial = 7;
    832          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    833          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    834          	//hspi4.RxISR = SPI5_CallBack;
    835          	HAL_SPI_Init(&hspi1);
    836          
    837          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    838            /* Enable TXE, RXNE and ERR interrupt */
    839           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    840          
    841           __HAL_SPI_ENABLE(&hspi1);
    842          
    843          #endif
    844          }
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return
    845          
    846          /* I2S2 init function */
    847          /* Read data of MIC34 */
    848          

   \                                 In section .text, align 2, keep-with-next
    849          static void I2S2_Init(void)
    850          {
   \                     I2S2_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    851          
    852          #if 1
    853           //HAL_I2S_DeInit(&hi2s2);
    854           hi2s2.Instance = SPI2;
   \   00000002   0x....             LDR.N    R0,??DataTable13_17  ;; 0x40003800
   \   00000004   0x....             LDR.N    R1,??DataTable13_16
   \   00000006   0x6008             STR      R0,[R1, #+0]
    855           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
   \   00000008   0xF44F 0x7080      MOV      R0,#+256
   \   0000000C   0x....             LDR.N    R1,??DataTable13_16
   \   0000000E   0x6048             STR      R0,[R1, #+4]
    856           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
   \   00000010   0x2020             MOVS     R0,#+32
   \   00000012   0x....             LDR.N    R1,??DataTable13_16
   \   00000014   0x6088             STR      R0,[R1, #+8]
    857           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable13_16
   \   0000001A   0x60C8             STR      R0,[R1, #+12]
    858           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR.N    R1,??DataTable13_16
   \   00000020   0x6108             STR      R0,[R1, #+16]
    859           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
   \   00000022   0xF44F 0x507A      MOV      R0,#+16000
   \   00000026   0x....             LDR.N    R1,??DataTable13_16
   \   00000028   0x6148             STR      R0,[R1, #+20]
    860           hi2s2.Init.CPOL = I2S_CPOL_LOW;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR.N    R1,??DataTable13_16
   \   0000002E   0x6188             STR      R0,[R1, #+24]
    861           hi2s2.Init.ClockSource = I2S_CLOCK_EXTERNAL;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x....             LDR.N    R1,??DataTable13_16
   \   00000034   0x61C8             STR      R0,[R1, #+28]
    862          
    863           HAL_I2S_Init(&hi2s2);
   \   00000036   0x....             LDR.N    R0,??DataTable13_16
   \   00000038   0x.... 0x....      BL       HAL_I2S_Init
    864           /* Enable TXE and ERR interrupt */
    865           __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
   \   0000003C   0x....             LDR.N    R0,??DataTable13_16
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x6840             LDR      R0,[R0, #+4]
   \   00000042   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000046   0x....             LDR.N    R1,??DataTable13_16
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x6048             STR      R0,[R1, #+4]
    866           __HAL_I2S_ENABLE(&hi2s2);
   \   0000004C   0x....             LDR.N    R0,??DataTable13_16
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x69C0             LDR      R0,[R0, #+28]
   \   00000052   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000056   0x....             LDR.N    R1,??DataTable13_16
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0x61C8             STR      R0,[R1, #+28]
    867          
    868          #else
    869             hspi2.Instance = SPI2;
    870             hspi2.Init.Mode = SPI_MODE_SLAVE;
    871             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    872             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
    873             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
    874             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
    875             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    876             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
    877             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
    878             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    879             hspi2.Init.CRCPolynomial = 7;
    880             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    881             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    882             HAL_SPI_Init(&hspi2);
    883          
    884          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    885           /* Enable TXE, RXNE and ERR interrupt */
    886          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
    887          
    888          __HAL_SPI_ENABLE(&hspi2);
    889          
    890          #endif
    891          
    892          
    893          }
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return
    894          
    895          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    896          void SPI4_Init(void)
    897          {
   \                     SPI4_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    898          
    899            hspi4.Instance = SPI4;
   \   00000002   0x....             LDR.N    R0,??DataTable13_25  ;; 0x40013400
   \   00000004   0x....             LDR.N    R1,??DataTable13_24
   \   00000006   0x6008             STR      R0,[R1, #+0]
    900            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable13_24
   \   0000000C   0x6048             STR      R0,[R1, #+4]
    901            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000012   0x....             LDR.N    R1,??DataTable13_24
   \   00000014   0x6088             STR      R0,[R1, #+8]
    902            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000016   0xF44F 0x6070      MOV      R0,#+3840
   \   0000001A   0x....             LDR.N    R1,??DataTable13_24
   \   0000001C   0x60C8             STR      R0,[R1, #+12]
    903            hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x....             LDR.N    R1,??DataTable13_24
   \   00000022   0x6108             STR      R0,[R1, #+16]
    904            hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR.N    R1,??DataTable13_24
   \   00000028   0x6148             STR      R0,[R1, #+20]
    905            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   0000002A   0xF44F 0x7000      MOV      R0,#+512
   \   0000002E   0x....             LDR.N    R1,??DataTable13_24
   \   00000030   0x6188             STR      R0,[R1, #+24]
    906            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR.N    R1,??DataTable13_24
   \   00000036   0x6208             STR      R0,[R1, #+32]
    907            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x....             LDR.N    R1,??DataTable13_24
   \   0000003C   0x6248             STR      R0,[R1, #+36]
    908            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable13_24
   \   00000042   0x6288             STR      R0,[R1, #+40]
    909            hspi4.Init.CRCPolynomial = 7;
   \   00000044   0x2007             MOVS     R0,#+7
   \   00000046   0x....             LDR.N    R1,??DataTable13_24
   \   00000048   0x62C8             STR      R0,[R1, #+44]
    910            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR.N    R1,??DataTable13_24
   \   0000004E   0x6308             STR      R0,[R1, #+48]
    911            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x....             LDR.N    R1,??DataTable13_24
   \   00000054   0x6348             STR      R0,[R1, #+52]
    912            HAL_SPI_Init(&hspi4);
   \   00000056   0x....             LDR.N    R0,??DataTable13_24
   \   00000058   0x.... 0x....      BL       HAL_SPI_Init
    913          
    914            /* Enable TXE, RXNE and ERR interrupt */
    915           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \   0000005C   0x....             LDR.N    R0,??DataTable13_24
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x6840             LDR      R0,[R0, #+4]
   \   00000062   0xF050 0x0060      ORRS     R0,R0,#0x60
   \   00000066   0x....             LDR.N    R1,??DataTable13_24
   \   00000068   0x6809             LDR      R1,[R1, #+0]
   \   0000006A   0x6048             STR      R0,[R1, #+4]
    916          
    917           __HAL_SPI_ENABLE(&hspi4);
   \   0000006C   0x....             LDR.N    R0,??DataTable13_24
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000076   0x....             LDR.N    R1,??DataTable13_24
   \   00000078   0x6809             LDR      R1,[R1, #+0]
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    918          }
   \   0000007C   0xBD01             POP      {R0,PC}          ;; return
    919          
    920          

   \                                 In section .text, align 2, keep-with-next
    921          void Mic7Rec(void)
    922          {
   \                     Mic7Rec: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    923              SPI5_Init();
   \   00000002   0x.... 0x....      BL       SPI5_Init
    924          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    925          

   \                                 In section .text, align 2, keep-with-next
    926          void Mic8Rec(void)
    927          {
   \                     Mic8Rec: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    928              SPI6_Init();
   \   00000002   0x.... 0x....      BL       SPI6_Init
    929          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    930          
    931          
    932          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    933          void SPI5_Init(void)
    934          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    935          	
    936              /* Enable CRC module */
    937              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000002   0x....             LDR.N    R0,??DataTable12_1  ;; 0x40023830
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000000A   0x....             LDR.N    R1,??DataTable12_1  ;; 0x40023830
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    938          	for (char i=0; i< 2; i++)
   \   0000000E   0x2400             MOVS     R4,#+0
   \                     ??SPI5_Init_0: (+1)
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xDA34             BGE.N    ??SPI5_Init_1
    939          	{
    940          		/* Filter LP & HP Init */
    941          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable14_9
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2134             MOVS     R1,#+52
   \   0000001E   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable18_2  ;; 0x45fa0000
   \   00000026   0x6041             STR      R1,[R0, #+4]
    942          		Filter[i].HP_HZ = 10;
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable14_9
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2134             MOVS     R1,#+52
   \   00000030   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable18_3  ;; 0x41200000
   \   00000038   0x6081             STR      R1,[R0, #+8]
    943          		Filter[i].Fs = 16000;    //sop1hc: 16000
   \   0000003A   0xF44F 0x507A      MOV      R0,#+16000
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   00000042   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000044   0x2234             MOVS     R2,#+52
   \   00000046   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   0000004A   0x8008             STRH     R0,[R1, #+0]
    944          		Filter[i].Out_MicChannels = 1;
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x2234             MOVS     R2,#+52
   \   00000056   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   0000005A   0x81C8             STRH     R0,[R1, #+14]
    945          		Filter[i].In_MicChannels = 1;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0x2234             MOVS     R2,#+52
   \   00000066   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   0000006A   0x8188             STRH     R0,[R1, #+12]
    946          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable14_9
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x2134             MOVS     R1,#+52
   \   00000074   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000078   0x.... 0x....      BL       PDM_Filter_Init
    947          	}
   \   0000007C   0x1C64             ADDS     R4,R4,#+1
   \   0000007E   0xE7C7             B.N      ??SPI5_Init_0
    948          
    949          
    950            hspi5.Instance = SPI5;
   \                     ??SPI5_Init_1: (+1)
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable14_4  ;; 0x40015000
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   00000088   0x6008             STR      R0,[R1, #+0]
    951            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   00000090   0x6048             STR      R0,[R1, #+4]
    952            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000092   0xF44F 0x6080      MOV      R0,#+1024
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   0000009A   0x6088             STR      R0,[R1, #+8]
    953            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000009C   0xF44F 0x6070      MOV      R0,#+3840
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   000000A4   0x60C8             STR      R0,[R1, #+12]
    954            hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   000000A6   0x2002             MOVS     R0,#+2
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   000000AC   0x6108             STR      R0,[R1, #+16]
    955            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   000000B4   0x6148             STR      R0,[R1, #+20]
    956            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   000000B6   0xF44F 0x7000      MOV      R0,#+512
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   000000BE   0x6188             STR      R0,[R1, #+24]
    957            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   000000C6   0x6208             STR      R0,[R1, #+32]
    958            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   000000CE   0x6248             STR      R0,[R1, #+36]
    959            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   000000D6   0x6288             STR      R0,[R1, #+40]
    960            hspi5.Init.CRCPolynomial = 7;
   \   000000D8   0x2007             MOVS     R0,#+7
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   000000DE   0x62C8             STR      R0,[R1, #+44]
    961            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   000000E6   0x6308             STR      R0,[R1, #+48]
    962            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable14_3
   \   000000EE   0x6348             STR      R0,[R1, #+52]
    963            //hspi5.RxISR = SPI5_CallBack;
    964            HAL_SPI_Init(&hspi5);
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   000000F4   0x.... 0x....      BL       HAL_SPI_Init
    965          
    966          
    967            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    968            /* Enable TXE, RXNE and ERR interrupt */
    969           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
    970          
    971           //__HAL_SPI_ENABLE(&hspi5);
    972          
    973          }
   \   000000F8   0xBD10             POP      {R4,PC}          ;; return
    974          

   \                                 In section .text, align 2, keep-with-next
    975          void SPI6_Init(void)
    976          {
   \                     SPI6_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    977          	
    978            hspi6.Instance = SPI6;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14_12  ;; 0x40015400
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    979            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   00000012   0x6048             STR      R0,[R1, #+4]
    980            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000014   0xF44F 0x6080      MOV      R0,#+1024
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   0000001C   0x6088             STR      R0,[R1, #+8]
    981            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000001E   0xF44F 0x6070      MOV      R0,#+3840
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   00000026   0x60C8             STR      R0,[R1, #+12]
    982            hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   0000002E   0x6108             STR      R0,[R1, #+16]
    983            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   00000036   0x6148             STR      R0,[R1, #+20]
    984            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000038   0xF44F 0x7000      MOV      R0,#+512
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   00000040   0x6188             STR      R0,[R1, #+24]
    985            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   00000048   0x6208             STR      R0,[R1, #+32]
    986            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   00000050   0x6248             STR      R0,[R1, #+36]
    987            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   00000058   0x6288             STR      R0,[R1, #+40]
    988            hspi6.Init.CRCPolynomial = 7;
   \   0000005A   0x2007             MOVS     R0,#+7
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   00000060   0x62C8             STR      R0,[R1, #+44]
    989            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   00000068   0x6308             STR      R0,[R1, #+48]
    990            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   00000070   0x6348             STR      R0,[R1, #+52]
    991            //hspi6.RxISR = SPI6_CallBack;
    992            HAL_SPI_Init(&hspi6);
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable14_11
   \   00000076   0x.... 0x....      BL       HAL_SPI_Init
    993          
    994          
    995            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    996            /* Enable TXE, RXNE and ERR interrupt */
    997           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
    998          
    999           //__HAL_SPI_ENABLE(&hspi6);
   1000          
   1001          }
   \   0000007A   0xBD01             POP      {R0,PC}          ;; return
   1002          
   1003          
   1004          
   1005          

   \                                 In section .text, align 2, keep-with-next
   1006          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
   1007          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   1008          
   1009            GPIO_InitTypeDef GPIO_InitStruct;
   1010            if (hspi->Instance==SPI1)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable18_4  ;; 0x40013000
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD144             BNE.N    ??HAL_SPI_MspInit_0
   1011            {
   1012          	  /* USER CODE BEGIN SPI1_MspInit 0 */
   1013          	  
   1014          	  /* USER CODE END SPI1_MspInit 0 */
   1015          	  /* Peripheral clock enable */
   1016          	  __SPI1_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable18_5  ;; 0x40023844
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable18_5  ;; 0x40023844
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable18_5  ;; 0x40023844
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF410 0x5080      ANDS     R0,R0,#0x1000
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
   1017          	  __GPIOA_CLK_ENABLE();
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   1018          	  __GPIOC_CLK_ENABLE();
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   0000005A   0x6008             STR      R0,[R1, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0x9800             LDR      R0,[SP, #+0]
   1019          	  
   1020          	  /**I2S1 GPIO Configuration	
   1021          		PA4 	------> I2S1_WS --> LRCKO
   1022          		PA5 	------> I2S1_CK --> BICKO
   1023          		PA7 	------> I2S1_SD --> SDO12
   1024          		PC4 	------> I2S1_MCK
   1025          		*/
   1026          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
   \   0000006A   0x20F0             MOVS     R0,#+240
   \   0000006C   0x9001             STR      R0,[SP, #+4]
   1027          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000006E   0x2002             MOVS     R0,#+2
   \   00000070   0x9002             STR      R0,[SP, #+8]
   1028          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x9003             STR      R0,[SP, #+12]
   1029          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000076   0x2003             MOVS     R0,#+3
   \   00000078   0x9004             STR      R0,[SP, #+16]
   1030          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   \   0000007A   0x2005             MOVS     R0,#+5
   \   0000007C   0x9005             STR      R0,[SP, #+20]
   1031          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   0000007E   0xA901             ADD      R1,SP,#+4
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40020000
   \   00000084   0x.... 0x....      BL       HAL_GPIO_Init
   1032          	  
   1033          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
   1034          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1035          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
   1036          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1037          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1038          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1039          		
   1040          	  /* Peripheral interrupt init*/
   1041          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000088   0x2200             MOVS     R2,#+0
   \   0000008A   0x2101             MOVS     R1,#+1
   \   0000008C   0x2023             MOVS     R0,#+35
   \   0000008E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1042          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000092   0x2023             MOVS     R0,#+35
   \   00000094   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   00000098   0xE295             B.N      ??HAL_SPI_MspInit_1
   1043          	  /* USER CODE BEGIN SPI1_MspInit 1 */
   1044          	  
   1045          	  /* USER CODE END SPI1_MspInit 1 */
   1046          
   1047            }
   1048            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   0000009A   0x6820             LDR      R0,[R4, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable18_7  ;; 0x40003800
   \   000000A0   0x4288             CMP      R0,R1
   \   000000A2   0xD163             BNE.N    ??HAL_SPI_MspInit_2
   1049            {
   1050          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1051          	  
   1052          	  /* USER CODE END SPI2_MspInit 0 */
   1053          		/* Peripheral clock enable */
   1054          		__SPI2_CLK_ENABLE();
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable18_8  ;; 0x40023840
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable18_8  ;; 0x40023840
   \   000000B2   0x6008             STR      R0,[R1, #+0]
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable18_8  ;; 0x40023840
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0xF410 0x4080      ANDS     R0,R0,#0x4000
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0x9800             LDR      R0,[SP, #+0]
   1055          		__GPIOI_CLK_ENABLE();
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   000000D0   0x6008             STR      R0,[R1, #+0]
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0xF410 0x7080      ANDS     R0,R0,#0x100
   \   000000DC   0x9000             STR      R0,[SP, #+0]
   \   000000DE   0x9800             LDR      R0,[SP, #+0]
   1056          		__GPIOB_CLK_ENABLE();
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   000000EE   0x6008             STR      R0,[R1, #+0]
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   000000FA   0x9000             STR      R0,[SP, #+0]
   \   000000FC   0x9800             LDR      R0,[SP, #+0]
   1057          		__GPIOC_CLK_ENABLE();
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000102   0x6800             LDR      R0,[R0, #+0]
   \   00000104   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   0000010C   0x6008             STR      R0,[R1, #+0]
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000118   0x9000             STR      R0,[SP, #+0]
   \   0000011A   0x9800             LDR      R0,[SP, #+0]
   1058          	  
   1059          		/**I2S2 GPIO Configuration	   
   1060          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1061          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1062          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1063          	  
   1064          	  
   1065          		*/
   1066          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   \   0000011C   0x2002             MOVS     R0,#+2
   \   0000011E   0x9001             STR      R0,[SP, #+4]
   1067          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000120   0x2002             MOVS     R0,#+2
   \   00000122   0x9002             STR      R0,[SP, #+8]
   1068          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x9003             STR      R0,[SP, #+12]
   1069          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000128   0x2003             MOVS     R0,#+3
   \   0000012A   0x9004             STR      R0,[SP, #+16]
   1070          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   \   0000012C   0x2005             MOVS     R0,#+5
   \   0000012E   0x9005             STR      R0,[SP, #+20]
   1071          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000130   0xA901             ADD      R1,SP,#+4
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x40020800
   \   00000136   0x.... 0x....      BL       HAL_GPIO_Init
   1072          	  
   1073          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   0000013A   0xF44F 0x5040      MOV      R0,#+12288
   \   0000013E   0x9001             STR      R0,[SP, #+4]
   1074          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000140   0x2002             MOVS     R0,#+2
   \   00000142   0x9002             STR      R0,[SP, #+8]
   1075          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000144   0x2000             MOVS     R0,#+0
   \   00000146   0x9003             STR      R0,[SP, #+12]
   1076          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000148   0x2003             MOVS     R0,#+3
   \   0000014A   0x9004             STR      R0,[SP, #+16]
   1077          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   \   0000014C   0x2005             MOVS     R0,#+5
   \   0000014E   0x9005             STR      R0,[SP, #+20]
   1078          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000150   0xA901             ADD      R1,SP,#+4
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable19_1  ;; 0x40020400
   \   00000156   0x.... 0x....      BL       HAL_GPIO_Init
   1079          	  
   1080          	  
   1081          		/* Peripheral interrupt init*/
   1082          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   0000015A   0x2200             MOVS     R2,#+0
   \   0000015C   0x2101             MOVS     R1,#+1
   \   0000015E   0x2024             MOVS     R0,#+36
   \   00000160   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1083          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   00000164   0x2024             MOVS     R0,#+36
   \   00000166   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   0000016A   0xE22C             B.N      ??HAL_SPI_MspInit_1
   1084          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1085          	  
   1086          	  /* USER CODE END SPI2_MspInit 1 */
   1087          
   1088          
   1089            }
   1090            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   0000016C   0x6820             LDR      R0,[R4, #+0]
   \   0000016E   0x.... 0x....      LDR.W    R1,??DataTable19_2  ;; 0x40003c00
   \   00000172   0x4288             CMP      R0,R1
   \   00000174   0xF040 0x80CF      BNE.W    ??HAL_SPI_MspInit_3
   1091            {
   1092          	  
   1093              /**I2S3 GPIO Configuration    
   1094                 PB2     ------> I2S3_SD
   1095                 PA15     ------> I2S3_WS (LRCK)
   1096                 PB3     ------> I2S3_CK 
   1097          	   PC7    ------> MCLK
   1098              */
   1099           
   1100            /* USER CODE BEGIN SPI3_MspInit 1 */
   1101            __SPI3_CLK_ENABLE();
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable18_8  ;; 0x40023840
   \   0000017C   0x6800             LDR      R0,[R0, #+0]
   \   0000017E   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   00000182   0x.... 0x....      LDR.W    R1,??DataTable18_8  ;; 0x40023840
   \   00000186   0x6008             STR      R0,[R1, #+0]
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable18_8  ;; 0x40023840
   \   0000018C   0x6800             LDR      R0,[R0, #+0]
   \   0000018E   0xF410 0x4000      ANDS     R0,R0,#0x8000
   \   00000192   0x9000             STR      R0,[SP, #+0]
   \   00000194   0x9800             LDR      R0,[SP, #+0]
   1102            __GPIOA_CLK_ENABLE();
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   0000019A   0x6800             LDR      R0,[R0, #+0]
   \   0000019C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   000001A4   0x6008             STR      R0,[R1, #+0]
   \   000001A6   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   000001AA   0x6800             LDR      R0,[R0, #+0]
   \   000001AC   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000001B0   0x9000             STR      R0,[SP, #+0]
   \   000001B2   0x9800             LDR      R0,[SP, #+0]
   1103            __GPIOB_CLK_ENABLE();
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   000001B8   0x6800             LDR      R0,[R0, #+0]
   \   000001BA   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000001BE   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   000001C2   0x6008             STR      R0,[R1, #+0]
   \   000001C4   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   000001C8   0x6800             LDR      R0,[R0, #+0]
   \   000001CA   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   000001CE   0x9000             STR      R0,[SP, #+0]
   \   000001D0   0x9800             LDR      R0,[SP, #+0]
   1104          
   1105            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   \   000001D2   0x200C             MOVS     R0,#+12
   \   000001D4   0x9001             STR      R0,[SP, #+4]
   1106            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   000001D6   0x2002             MOVS     R0,#+2
   \   000001D8   0x9002             STR      R0,[SP, #+8]
   1107            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000001DA   0x2003             MOVS     R0,#+3
   \   000001DC   0x9004             STR      R0,[SP, #+16]
   1108            GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   000001DE   0x2000             MOVS     R0,#+0
   \   000001E0   0x9003             STR      R0,[SP, #+12]
   1109            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   \   000001E2   0x2006             MOVS     R0,#+6
   \   000001E4   0x9005             STR      R0,[SP, #+20]
   1110            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   000001E6   0xA901             ADD      R1,SP,#+4
   \   000001E8   0x.... 0x....      LDR.W    R0,??DataTable19_1  ;; 0x40020400
   \   000001EC   0x.... 0x....      BL       HAL_GPIO_Init
   1111          
   1112          
   1113            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   000001F0   0xF44F 0x4000      MOV      R0,#+32768
   \   000001F4   0x9001             STR      R0,[SP, #+4]
   1114            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   000001F6   0x2002             MOVS     R0,#+2
   \   000001F8   0x9002             STR      R0,[SP, #+8]
   1115            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   \   000001FA   0x2006             MOVS     R0,#+6
   \   000001FC   0x9005             STR      R0,[SP, #+20]
   1116            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   000001FE   0xA901             ADD      R1,SP,#+4
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40020000
   \   00000204   0x.... 0x....      BL       HAL_GPIO_Init
   1117          
   1118          #ifdef CODEC_MCLK_ENABLED
   1119            __GPIOC_CLK_ENABLE();
   \   00000208   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   0000020C   0x6800             LDR      R0,[R0, #+0]
   \   0000020E   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000212   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   00000216   0x6008             STR      R0,[R1, #+0]
   \   00000218   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   0000021C   0x6800             LDR      R0,[R0, #+0]
   \   0000021E   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000222   0x9000             STR      R0,[SP, #+0]
   \   00000224   0x9800             LDR      R0,[SP, #+0]
   1120            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   \   00000226   0x2080             MOVS     R0,#+128
   \   00000228   0x9001             STR      R0,[SP, #+4]
   1121            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000022A   0x2002             MOVS     R0,#+2
   \   0000022C   0x9002             STR      R0,[SP, #+8]
   1122            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   0000022E   0x2003             MOVS     R0,#+3
   \   00000230   0x9004             STR      R0,[SP, #+16]
   1123            GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000232   0x2000             MOVS     R0,#+0
   \   00000234   0x9003             STR      R0,[SP, #+12]
   1124            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   \   00000236   0x2006             MOVS     R0,#+6
   \   00000238   0x9005             STR      R0,[SP, #+20]
   1125            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   0000023A   0xA901             ADD      R1,SP,#+4
   \   0000023C   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x40020800
   \   00000240   0x.... 0x....      BL       HAL_GPIO_Init
   1126          
   1127          #endif /* CODEC_MCLK_ENABLED */ 
   1128          
   1129          #ifdef I2S_INTERRUPT   
   1130               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1131               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1132               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1133          
   1134               /* Enable the I2S DMA request */
   1135               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1136               //__HAL_I2S_ENABLE(&hi2s3);
   1137            	    /* Peripheral interrupt init*/
   1138          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1139          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1140          #endif
   1141          
   1142                /* Enable the DMA clock */ 
   1143          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   00000244   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000248   0x6800             LDR      R0,[R0, #+0]
   \   0000024A   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   0000024E   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   00000252   0x6008             STR      R0,[R1, #+0]
   \   00000254   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000258   0x6800             LDR      R0,[R0, #+0]
   \   0000025A   0xF410 0x1000      ANDS     R0,R0,#0x200000
   \   0000025E   0x9000             STR      R0,[SP, #+0]
   \   00000260   0x9800             LDR      R0,[SP, #+0]
   1144          
   1145                /* Configure the DMA Stream */
   1146                //HAL_DMA_DeInit(&DmaHandle);
   1147          
   1148                /* Set the parameters to be configured */ 
   1149          	  DmaHandle.Instance = DMA1_Stream7;
   \   00000262   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0x400260b8
   \   00000266   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   0000026A   0x6008             STR      R0,[R1, #+0]
   1150                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   0000026C   0x2000             MOVS     R0,#+0
   \   0000026E   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   00000272   0x6048             STR      R0,[R1, #+4]
   1151          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   00000274   0x2040             MOVS     R0,#+64
   \   00000276   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   0000027A   0x6088             STR      R0,[R1, #+8]
   1152          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   0000027C   0x2000             MOVS     R0,#+0
   \   0000027E   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   00000282   0x60C8             STR      R0,[R1, #+12]
   1153          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   00000284   0xF44F 0x6080      MOV      R0,#+1024
   \   00000288   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   0000028C   0x6108             STR      R0,[R1, #+16]
   1154          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   0000028E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000292   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   00000296   0x6148             STR      R0,[R1, #+20]
   1155                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   00000298   0xF44F 0x5000      MOV      R0,#+8192
   \   0000029C   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   000002A0   0x6188             STR      R0,[R1, #+24]
   1156          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   000002A2   0x2000             MOVS     R0,#+0
   \   000002A4   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   000002A8   0x61C8             STR      R0,[R1, #+28]
   1157                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   000002AA   0xF45F 0x3000      MOVS     R0,#+131072
   \   000002AE   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   000002B2   0x6208             STR      R0,[R1, #+32]
   1158          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   000002B4   0x2004             MOVS     R0,#+4
   \   000002B6   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   000002BA   0x6248             STR      R0,[R1, #+36]
   1159                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   000002BC   0x2003             MOVS     R0,#+3
   \   000002BE   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   000002C2   0x6288             STR      R0,[R1, #+40]
   1160                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   000002C4   0x2000             MOVS     R0,#+0
   \   000002C6   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   000002CA   0x62C8             STR      R0,[R1, #+44]
   1161                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   000002CC   0x2000             MOVS     R0,#+0
   \   000002CE   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   000002D2   0x6308             STR      R0,[R1, #+48]
   1162                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1163                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1164                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1165                //DmaHandle.XferCpltCallback = &TC_Callback;
   1166           
   1167          
   1168                /* Associate the initialized DMA handle to the the SPI handle */
   1169                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   \   000002D4   0x.... 0x....      LDR.W    R0,??DataTable19_4
   \   000002D8   0x6560             STR      R0,[R4, #+84]
   \   000002DA   0x.... 0x....      LDR.W    R0,??DataTable19_4
   \   000002DE   0x6384             STR      R4,[R0, #+56]
   1170                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1171          
   1172          	   /* Deinitialize the Stream for new transfer */
   1173                 HAL_DMA_DeInit(&DmaHandle);
   \   000002E0   0x.... 0x....      LDR.W    R0,??DataTable19_4
   \   000002E4   0x.... 0x....      BL       HAL_DMA_DeInit
   1174                 /* Configure the DMA Stream */
   1175          	   HAL_DMA_Init(&DmaHandle);
   \   000002E8   0x.... 0x....      LDR.W    R0,??DataTable19_4
   \   000002EC   0x.... 0x....      BL       HAL_DMA_Init
   1176          
   1177                /* Set Interrupt Group Priority */
   1178                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   000002F0   0x2200             MOVS     R2,#+0
   \   000002F2   0x2103             MOVS     R1,#+3
   \   000002F4   0x202F             MOVS     R0,#+47
   \   000002F6   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1179                /* Enable the DMA STREAM global Interrupt */
   1180                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   000002FA   0x202F             MOVS     R0,#+47
   \   000002FC   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1181          
   1182          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000300   0x.... 0x....      LDR.W    R0,??DataTable19_4
   \   00000304   0x6800             LDR      R0,[R0, #+0]
   \   00000306   0x6800             LDR      R0,[R0, #+0]
   \   00000308   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000030C   0x.... 0x....      LDR.W    R1,??DataTable19_4
   \   00000310   0x6809             LDR      R1,[R1, #+0]
   \   00000312   0x6008             STR      R0,[R1, #+0]
   \   00000314   0xE157             B.N      ??HAL_SPI_MspInit_1
   1183          	    
   1184            }
   1185            else if(hspi->Instance==SPI4)
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   00000316   0x6820             LDR      R0,[R4, #+0]
   \   00000318   0x.... 0x....      LDR.W    R1,??DataTable19_5  ;; 0x40013400
   \   0000031C   0x4288             CMP      R0,R1
   \   0000031E   0xD135             BNE.N    ??HAL_SPI_MspInit_4
   1186            {
   1187            /* USER CODE BEGIN SPI4_MspInit 0 */
   1188          
   1189            /* USER CODE END SPI4_MspInit 0 */
   1190              /* Peripheral clock enable */
   1191              __SPI4_CLK_ENABLE();
   \   00000320   0x.... 0x....      LDR.W    R0,??DataTable18_5  ;; 0x40023844
   \   00000324   0x6800             LDR      R0,[R0, #+0]
   \   00000326   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   0000032A   0x.... 0x....      LDR.W    R1,??DataTable18_5  ;; 0x40023844
   \   0000032E   0x6008             STR      R0,[R1, #+0]
   \   00000330   0x.... 0x....      LDR.W    R0,??DataTable18_5  ;; 0x40023844
   \   00000334   0x6800             LDR      R0,[R0, #+0]
   \   00000336   0xF410 0x5000      ANDS     R0,R0,#0x2000
   \   0000033A   0x9000             STR      R0,[SP, #+0]
   \   0000033C   0x9800             LDR      R0,[SP, #+0]
   1192              __HAL_RCC_GPIOE_CLK_ENABLE();
   \   0000033E   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000342   0x6800             LDR      R0,[R0, #+0]
   \   00000344   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000348   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   0000034C   0x6008             STR      R0,[R1, #+0]
   \   0000034E   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000352   0x6800             LDR      R0,[R0, #+0]
   \   00000354   0xF010 0x0010      ANDS     R0,R0,#0x10
   \   00000358   0x9000             STR      R0,[SP, #+0]
   \   0000035A   0x9800             LDR      R0,[SP, #+0]
   1193            
   1194            
   1195              /**SPI4 GPIO Configuration    
   1196              PE2     ------> SPI4_SCK
   1197              PE4     ------> SPI4_NSS
   1198              PE5     ------> SPI4_MISO
   1199              PE6     ------> SPI4_MOSI 
   1200              */
   1201              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   \   0000035C   0x2074             MOVS     R0,#+116
   \   0000035E   0x9001             STR      R0,[SP, #+4]
   1202              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000360   0x2002             MOVS     R0,#+2
   \   00000362   0x9002             STR      R0,[SP, #+8]
   1203              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000364   0x2000             MOVS     R0,#+0
   \   00000366   0x9003             STR      R0,[SP, #+12]
   1204              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000368   0x2003             MOVS     R0,#+3
   \   0000036A   0x9004             STR      R0,[SP, #+16]
   1205              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   \   0000036C   0x2005             MOVS     R0,#+5
   \   0000036E   0x9005             STR      R0,[SP, #+20]
   1206              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   \   00000370   0xA901             ADD      R1,SP,#+4
   \   00000372   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x40021000
   \   00000376   0x.... 0x....      BL       HAL_GPIO_Init
   1207          
   1208          	/* Peripheral interrupt init*/
   1209              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   \   0000037A   0x2200             MOVS     R2,#+0
   \   0000037C   0x2102             MOVS     R1,#+2
   \   0000037E   0x2054             MOVS     R0,#+84
   \   00000380   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1210              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   \   00000384   0x2054             MOVS     R0,#+84
   \   00000386   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   0000038A   0xE11C             B.N      ??HAL_SPI_MspInit_1
   1211          
   1212            /* USER CODE BEGIN SPI4_MspInit 1 */
   1213          
   1214            /* USER CODE END SPI4_MspInit 1 */
   1215            }
   1216            else if(hspi->Instance==SPI5)
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   0000038C   0x6820             LDR      R0,[R4, #+0]
   \   0000038E   0x....             LDR.N    R1,??DataTable14_4  ;; 0x40015000
   \   00000390   0x4288             CMP      R0,R1
   \   00000392   0xF040 0x808A      BNE.W    ??HAL_SPI_MspInit_5
   1217            {
   1218            /* USER CODE BEGIN SPI5_MspInit 0 */
   1219          
   1220            /* USER CODE END SPI5_MspInit 0 */
   1221              /* Peripheral clock enable */
   1222              __HAL_RCC_SPI5_CLK_ENABLE();
   \   00000396   0x.... 0x....      LDR.W    R0,??DataTable18_5  ;; 0x40023844
   \   0000039A   0x6800             LDR      R0,[R0, #+0]
   \   0000039C   0xF450 0x1080      ORRS     R0,R0,#0x100000
   \   000003A0   0x.... 0x....      LDR.W    R1,??DataTable18_5  ;; 0x40023844
   \   000003A4   0x6008             STR      R0,[R1, #+0]
   \   000003A6   0x.... 0x....      LDR.W    R0,??DataTable18_5  ;; 0x40023844
   \   000003AA   0x6800             LDR      R0,[R0, #+0]
   \   000003AC   0xF410 0x1080      ANDS     R0,R0,#0x100000
   \   000003B0   0x9000             STR      R0,[SP, #+0]
   \   000003B2   0x9800             LDR      R0,[SP, #+0]
   1223              __HAL_RCC_GPIOF_CLK_ENABLE();
   \   000003B4   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   000003B8   0x6800             LDR      R0,[R0, #+0]
   \   000003BA   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000003BE   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   000003C2   0x6008             STR      R0,[R1, #+0]
   \   000003C4   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   000003C8   0x6800             LDR      R0,[R0, #+0]
   \   000003CA   0xF010 0x0020      ANDS     R0,R0,#0x20
   \   000003CE   0x9000             STR      R0,[SP, #+0]
   \   000003D0   0x9800             LDR      R0,[SP, #+0]
   1224            
   1225              /**SPI5 GPIO Configuration    
   1226              PF7     ------> SPI5_SCK  --> PF7
   1227              PF11     ------> SPI5_MOSI --> PF9
   1228                               SPI5_MISO --> PF8
   1229                                    NSS   -->  PF6
   1230              */
   1231              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   \   000003D2   0xF44F 0x7070      MOV      R0,#+960
   \   000003D6   0x9001             STR      R0,[SP, #+4]
   1232              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \   000003D8   0x2012             MOVS     R0,#+18
   \   000003DA   0x9002             STR      R0,[SP, #+8]
   1233              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   000003DC   0x2001             MOVS     R0,#+1
   \   000003DE   0x9003             STR      R0,[SP, #+12]
   1234              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000003E0   0x2003             MOVS     R0,#+3
   \   000003E2   0x9004             STR      R0,[SP, #+16]
   1235              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   \   000003E4   0x2005             MOVS     R0,#+5
   \   000003E6   0x9005             STR      R0,[SP, #+20]
   1236              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   \   000003E8   0xA901             ADD      R1,SP,#+4
   \   000003EA   0x.... 0x....      LDR.W    R0,??DataTable19_7  ;; 0x40021400
   \   000003EE   0x.... 0x....      BL       HAL_GPIO_Init
   1237          
   1238          #if 0
   1239            /* Peripheral interrupt init*/
   1240              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1241              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1242          
   1243          #else
   1244          	/* Peripheral DMA init*/
   1245              __HAL_RCC_DMA2_CLK_ENABLE();
   \   000003F2   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   000003F6   0x6800             LDR      R0,[R0, #+0]
   \   000003F8   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   000003FC   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   00000400   0x6008             STR      R0,[R1, #+0]
   \   00000402   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000406   0x6800             LDR      R0,[R0, #+0]
   \   00000408   0xF410 0x0080      ANDS     R0,R0,#0x400000
   \   0000040C   0x9000             STR      R0,[SP, #+0]
   \   0000040E   0x9800             LDR      R0,[SP, #+0]
   1246          	hdma_spi5_rx.Instance = DMA2_Stream5;
   \   00000410   0x.... 0x....      LDR.W    R0,??DataTable19_8  ;; 0x40026488
   \   00000414   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   00000418   0x6008             STR      R0,[R1, #+0]
   1247          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   \   0000041A   0xF05F 0x6060      MOVS     R0,#+234881024
   \   0000041E   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   00000422   0x6048             STR      R0,[R1, #+4]
   1248          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \   00000424   0x2000             MOVS     R0,#+0
   \   00000426   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   0000042A   0x6088             STR      R0,[R1, #+8]
   1249          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   \   0000042C   0x2000             MOVS     R0,#+0
   \   0000042E   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   00000432   0x60C8             STR      R0,[R1, #+12]
   1250          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   \   00000434   0xF44F 0x6080      MOV      R0,#+1024
   \   00000438   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   0000043C   0x6108             STR      R0,[R1, #+16]
   1251          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   0000043E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000442   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   00000446   0x6148             STR      R0,[R1, #+20]
   1252          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   \   00000448   0xF44F 0x5000      MOV      R0,#+8192
   \   0000044C   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   00000450   0x6188             STR      R0,[R1, #+24]
   1253          	hdma_spi5_rx.Init.Mode = DMA_NORMAL;
   \   00000452   0x2000             MOVS     R0,#+0
   \   00000454   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   00000458   0x61C8             STR      R0,[R1, #+28]
   1254          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   \   0000045A   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000045E   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   00000462   0x6208             STR      R0,[R1, #+32]
   1255          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   \   00000464   0x2000             MOVS     R0,#+0
   \   00000466   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   0000046A   0x6248             STR      R0,[R1, #+36]
   1256          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   0000046C   0x2003             MOVS     R0,#+3
   \   0000046E   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   00000472   0x6288             STR      R0,[R1, #+40]
   1257          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   \   00000474   0x2000             MOVS     R0,#+0
   \   00000476   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   0000047A   0x62C8             STR      R0,[R1, #+44]
   1258          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   \   0000047C   0x2000             MOVS     R0,#+0
   \   0000047E   0x.... 0x....      LDR.W    R1,??DataTable19_9
   \   00000482   0x6308             STR      R0,[R1, #+48]
   1259          	HAL_DMA_Init(&hdma_spi5_rx);
   \   00000484   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000488   0x.... 0x....      BL       HAL_DMA_Init
   1260          
   1261              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   \   0000048C   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000490   0x65A0             STR      R0,[R4, #+88]
   \   00000492   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000496   0x6384             STR      R4,[R0, #+56]
   1262          
   1263          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   \   00000498   0x2200             MOVS     R2,#+0
   \   0000049A   0x2104             MOVS     R1,#+4
   \   0000049C   0x2044             MOVS     R0,#+68
   \   0000049E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1264          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   \   000004A2   0x2044             MOVS     R0,#+68
   \   000004A4   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   000004A8   0xE08D             B.N      ??HAL_SPI_MspInit_1
   1265          
   1266          #endif
   1267            /* USER CODE END SPI5_MspInit 1 */
   1268            }
   1269            else if(hspi->Instance==SPI6)
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   000004AA   0x6820             LDR      R0,[R4, #+0]
   \   000004AC   0x....             LDR.N    R1,??DataTable14_12  ;; 0x40015400
   \   000004AE   0x4288             CMP      R0,R1
   \   000004B0   0xF040 0x8089      BNE.W    ??HAL_SPI_MspInit_1
   1270            {
   1271            /* USER CODE BEGIN SPI6_MspInit 0 */
   1272          
   1273            /* USER CODE END SPI6_MspInit 0 */
   1274              /* Peripheral clock enable */
   1275              __SPI6_CLK_ENABLE();
   \   000004B4   0x.... 0x....      LDR.W    R0,??DataTable18_5  ;; 0x40023844
   \   000004B8   0x6800             LDR      R0,[R0, #+0]
   \   000004BA   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   000004BE   0x.... 0x....      LDR.W    R1,??DataTable18_5  ;; 0x40023844
   \   000004C2   0x6008             STR      R0,[R1, #+0]
   \   000004C4   0x.... 0x....      LDR.W    R0,??DataTable18_5  ;; 0x40023844
   \   000004C8   0x6800             LDR      R0,[R0, #+0]
   \   000004CA   0xF410 0x1000      ANDS     R0,R0,#0x200000
   \   000004CE   0x9000             STR      R0,[SP, #+0]
   \   000004D0   0x9800             LDR      R0,[SP, #+0]
   1276              __HAL_RCC_GPIOG_CLK_ENABLE();
   \   000004D2   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   000004D6   0x6800             LDR      R0,[R0, #+0]
   \   000004D8   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   000004DC   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   000004E0   0x6008             STR      R0,[R1, #+0]
   \   000004E2   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   000004E6   0x6800             LDR      R0,[R0, #+0]
   \   000004E8   0xF010 0x0040      ANDS     R0,R0,#0x40
   \   000004EC   0x9000             STR      R0,[SP, #+0]
   \   000004EE   0x9800             LDR      R0,[SP, #+0]
   1277            
   1278              /**SPI6 GPIO Configuration    
   1279              PG13     ------> SPI6_SCK
   1280              PG14     ------> SPI6_MOSI 
   1281              */
   1282              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   \   000004F0   0xF44F 0x40C0      MOV      R0,#+24576
   \   000004F4   0x9001             STR      R0,[SP, #+4]
   1283              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   000004F6   0x2002             MOVS     R0,#+2
   \   000004F8   0x9002             STR      R0,[SP, #+8]
   1284              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   000004FA   0x2000             MOVS     R0,#+0
   \   000004FC   0x9003             STR      R0,[SP, #+12]
   1285              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000004FE   0x2003             MOVS     R0,#+3
   \   00000500   0x9004             STR      R0,[SP, #+16]
   1286              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   \   00000502   0x2005             MOVS     R0,#+5
   \   00000504   0x9005             STR      R0,[SP, #+20]
   1287              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   \   00000506   0xA901             ADD      R1,SP,#+4
   \   00000508   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x40021800
   \   0000050C   0x.... 0x....      BL       HAL_GPIO_Init
   1288          
   1289          #if 0
   1290          	  /* Peripheral interrupt init*/
   1291              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1292              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1293          #else
   1294          	/* Peripheral DMA init*/
   1295          	__HAL_RCC_DMA2_CLK_ENABLE();
   \   00000510   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000514   0x6800             LDR      R0,[R0, #+0]
   \   00000516   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   0000051A   0x.... 0x....      LDR.W    R1,??DataTable18_6  ;; 0x40023830
   \   0000051E   0x6008             STR      R0,[R1, #+0]
   \   00000520   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0x40023830
   \   00000524   0x6800             LDR      R0,[R0, #+0]
   \   00000526   0xF410 0x0080      ANDS     R0,R0,#0x400000
   \   0000052A   0x9000             STR      R0,[SP, #+0]
   \   0000052C   0x9800             LDR      R0,[SP, #+0]
   1296          	hdma_spi6_rx.Instance = DMA2_Stream6;
   \   0000052E   0x.... 0x....      LDR.W    R0,??DataTable19_11  ;; 0x400264a0
   \   00000532   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   00000536   0x6008             STR      R0,[R1, #+0]
   1297          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   \   00000538   0xF05F 0x7000      MOVS     R0,#+33554432
   \   0000053C   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   00000540   0x6048             STR      R0,[R1, #+4]
   1298          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \   00000542   0x2000             MOVS     R0,#+0
   \   00000544   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   00000548   0x6088             STR      R0,[R1, #+8]
   1299          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   \   0000054A   0x2000             MOVS     R0,#+0
   \   0000054C   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   00000550   0x60C8             STR      R0,[R1, #+12]
   1300          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   \   00000552   0xF44F 0x6080      MOV      R0,#+1024
   \   00000556   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   0000055A   0x6108             STR      R0,[R1, #+16]
   1301          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   0000055C   0xF44F 0x6000      MOV      R0,#+2048
   \   00000560   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   00000564   0x6148             STR      R0,[R1, #+20]
   1302          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   00000566   0xF44F 0x6000      MOV      R0,#+2048
   \   0000056A   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   0000056E   0x6188             STR      R0,[R1, #+24]
   1303          	hdma_spi6_rx.Init.Mode = DMA_NORMAL;
   \   00000570   0x2000             MOVS     R0,#+0
   \   00000572   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   00000576   0x61C8             STR      R0,[R1, #+28]
   1304          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   \   00000578   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000057C   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   00000580   0x6208             STR      R0,[R1, #+32]
   1305          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   \   00000582   0x2000             MOVS     R0,#+0
   \   00000584   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   00000588   0x6248             STR      R0,[R1, #+36]
   1306          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   0000058A   0x2003             MOVS     R0,#+3
   \   0000058C   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   00000590   0x6288             STR      R0,[R1, #+40]
   1307          	hdma_spi6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   \   00000592   0x2000             MOVS     R0,#+0
   \   00000594   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   00000598   0x62C8             STR      R0,[R1, #+44]
   1308          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   \   0000059A   0x2000             MOVS     R0,#+0
   \   0000059C   0x.... 0x....      LDR.W    R1,??DataTable19_12
   \   000005A0   0x6308             STR      R0,[R1, #+48]
   1309          	HAL_DMA_Init(&hdma_spi6_rx);
   \   000005A2   0x.... 0x....      LDR.W    R0,??DataTable19_12
   \   000005A6   0x.... 0x....      BL       HAL_DMA_Init
   1310          
   1311          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   \   000005AA   0x.... 0x....      LDR.W    R0,??DataTable19_12
   \   000005AE   0x65A0             STR      R0,[R4, #+88]
   \   000005B0   0x.... 0x....      LDR.W    R0,??DataTable19_12
   \   000005B4   0x6384             STR      R4,[R0, #+56]
   1312          
   1313          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   \   000005B6   0x2201             MOVS     R2,#+1
   \   000005B8   0x2107             MOVS     R1,#+7
   \   000005BA   0x2045             MOVS     R0,#+69
   \   000005BC   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1314          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   \   000005C0   0x2045             MOVS     R0,#+69
   \   000005C2   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1315          
   1316          #endif
   1317            }
   1318          
   1319          }
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   000005C6   0xB006             ADD      SP,SP,#+24
   \   000005C8   0xBD10             POP      {R4,PC}          ;; return
   1320          
   1321          
   1322          
   1323          

   \                                 In section .text, align 2, keep-with-next
   1324          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1325          {
   1326            /* Check the parameters */
   1327            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1328            
   1329            /* Write in the DR register the data to be sent */
   1330            SPIx->DR = Data;
   \                     SPI_I2S_SendData: (+1)
   \   00000000   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000002   0x60C1             STR      R1,[R0, #+12]
   1331          }
   \   00000004   0x4770             BX       LR               ;; return
   1332          
   1333          

   \                                 In section .text, align 2, keep-with-next
   1334          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1335          {
   1336            /* Check the parameters */
   1337            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1338            
   1339            /* Return the data in the DR register */
   1340            return SPIx->DR;
   \                     SPI_I2S_ReceiveData: (+1)
   \   00000000   0x68C0             LDR      R0,[R0, #+12]
   \   00000002   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0x4770             BX       LR               ;; return
   1341          }
   1342          
   1343          

   \                                 In section .text, align 2, keep-with-next
   1344          void RecordUpdBuf(void)
   1345          {
   1346          
   1347               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable19_13
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xF040 0x8167      BNE.W    ??RecordUpdBuf_0
   1348               {
   1349                  WaveRecord_flgInt=0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable19_13
   \   00000012   0x7008             STRB     R0,[R1, #+0]
   1350          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19_14
   \   00000018   0x8800             LDRH     R0,[R0, #+0]
   \   0000001A   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000001E   0xF280 0x815C      BGE.W    ??RecordUpdBuf_0
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable19_15
   \   00000026   0x8800             LDRH     R0,[R0, #+0]
   \   00000028   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000002C   0xF280 0x8155      BGE.W    ??RecordUpdBuf_0
   1351          		//			  &&(stLR!=stLROld))
   1352          			{
   1353          		/*-------------------------------------------------------------------------------------------------------------
   1354          					  
   1355          			Sequence  Record Data					  Processing Data				  Player Data
   1356          					  
   1357          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1358          					  
   1359          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1360          					  
   1361          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1362          		 ---------------------------------------------------------------------------------------------------------------*/
   1363          					  /* Recording Audio Data */						 
   1364          					   switch (buffer_switch)
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable19_16
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD004             BEQ.N    ??RecordUpdBuf_1
   \   0000003A   0x2802             CMP      R0,#+2
   \   0000003C   0xF000 0x80E2      BEQ.W    ??RecordUpdBuf_2
   \   00000040   0xD370             BCC.N    ??RecordUpdBuf_3
   \   00000042   0xE14A             B.N      ??RecordUpdBuf_4
   1365          					   {
   1366          								case BUF1_PLAY:
   1367          
   1368          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_1: (+1)
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable19_14
   \   00000048   0x8800             LDRH     R0,[R0, #+0]
   \   0000004A   0x1C41             ADDS     R1,R0,#+1
   \   0000004C   0x.... 0x....      LDR.W    R2,??DataTable19_14
   \   00000050   0x8011             STRH     R1,[R2, #+0]
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable19_17
   \   00000056   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000005A   0x.... 0x....      LDR.W    R2,??DataTable19_18  ;; 0xc00080a0
   \   0000005E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000060   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
   1369          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable19_15
   \   00000068   0x8800             LDRH     R0,[R0, #+0]
   \   0000006A   0x1C41             ADDS     R1,R0,#+1
   \   0000006C   0x.... 0x....      LDR.W    R2,??DataTable19_15
   \   00000070   0x8011             STRH     R1,[R2, #+0]
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable19_19
   \   00000076   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000007A   0x.... 0x....      LDR.W    R2,??DataTable19_18  ;; 0xc00080a0
   \   0000007E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000080   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   00000084   0xF241 0x0214      MOVW     R2,#+4116
   \   00000088   0x5211             STRH     R1,[R2, R0]
   1370          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable19_20
   \   0000008E   0x8800             LDRH     R0,[R0, #+0]
   \   00000090   0x1C41             ADDS     R1,R0,#+1
   \   00000092   0x.... 0x....      LDR.W    R2,??DataTable19_20
   \   00000096   0x8011             STRH     R1,[R2, #+0]
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable19_21
   \   0000009C   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000A0   0x.... 0x....      LDR.W    R2,??DataTable19_18  ;; 0xc00080a0
   \   000000A4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A6   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000000AA   0xF242 0x0228      MOVW     R2,#+8232
   \   000000AE   0x5211             STRH     R1,[R2, R0]
   1371          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable19_22
   \   000000B4   0x8800             LDRH     R0,[R0, #+0]
   \   000000B6   0x1C41             ADDS     R1,R0,#+1
   \   000000B8   0x.... 0x....      LDR.W    R2,??DataTable19_22
   \   000000BC   0x8011             STRH     R1,[R2, #+0]
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable19_23
   \   000000C2   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000C6   0x.... 0x....      LDR.W    R2,??DataTable19_18  ;; 0xc00080a0
   \   000000CA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CC   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000000D0   0xF243 0x023C      MOVW     R2,#+12348
   \   000000D4   0x5211             STRH     R1,[R2, R0]
   1372          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable19_24
   \   000000DA   0x8800             LDRH     R0,[R0, #+0]
   \   000000DC   0x1C41             ADDS     R1,R0,#+1
   \   000000DE   0x.... 0x....      LDR.W    R2,??DataTable19_24
   \   000000E2   0x8011             STRH     R1,[R2, #+0]
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable19_25
   \   000000E8   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000EC   0x.... 0x....      LDR.W    R2,??DataTable19_18  ;; 0xc00080a0
   \   000000F0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F2   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000000F6   0xF244 0x0250      MOVW     R2,#+16464
   \   000000FA   0x5211             STRH     R1,[R2, R0]
   1373          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable19_26
   \   00000100   0x8800             LDRH     R0,[R0, #+0]
   \   00000102   0x1C41             ADDS     R1,R0,#+1
   \   00000104   0x.... 0x....      LDR.W    R2,??DataTable19_26
   \   00000108   0x8011             STRH     R1,[R2, #+0]
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable19_27
   \   0000010E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000112   0x.... 0x....      LDR.W    R2,??DataTable19_18  ;; 0xc00080a0
   \   00000116   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000118   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   0000011C   0xF245 0x0264      MOVW     R2,#+20580
   \   00000120   0x5211             STRH     R1,[R2, R0]
   1374          	
   1375          										break;
   \   00000122   0xE0DA             B.N      ??RecordUpdBuf_0
   1376          								case BUF2_PLAY:
   1377          
   1378          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_3: (+1)
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable19_14
   \   00000128   0x8800             LDRH     R0,[R0, #+0]
   \   0000012A   0x1C41             ADDS     R1,R0,#+1
   \   0000012C   0x.... 0x....      LDR.W    R2,??DataTable19_14
   \   00000130   0x8011             STRH     R1,[R2, #+0]
   \   00000132   0x.... 0x....      LDR.W    R1,??DataTable19_17
   \   00000136   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000013A   0x.... 0x....      LDR.W    R2,??DataTable19_28  ;; 0xc0010140
   \   0000013E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000140   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
   1379          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable19_15
   \   00000148   0x8800             LDRH     R0,[R0, #+0]
   \   0000014A   0x1C41             ADDS     R1,R0,#+1
   \   0000014C   0x.... 0x....      LDR.W    R2,??DataTable19_15
   \   00000150   0x8011             STRH     R1,[R2, #+0]
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable19_19
   \   00000156   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000015A   0x.... 0x....      LDR.W    R2,??DataTable19_28  ;; 0xc0010140
   \   0000015E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000160   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   00000164   0xF241 0x0214      MOVW     R2,#+4116
   \   00000168   0x5211             STRH     R1,[R2, R0]
   1380          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable19_20
   \   0000016E   0x8800             LDRH     R0,[R0, #+0]
   \   00000170   0x1C41             ADDS     R1,R0,#+1
   \   00000172   0x.... 0x....      LDR.W    R2,??DataTable19_20
   \   00000176   0x8011             STRH     R1,[R2, #+0]
   \   00000178   0x.... 0x....      LDR.W    R1,??DataTable19_21
   \   0000017C   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000180   0x.... 0x....      LDR.W    R2,??DataTable19_28  ;; 0xc0010140
   \   00000184   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000186   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   0000018A   0xF242 0x0228      MOVW     R2,#+8232
   \   0000018E   0x5211             STRH     R1,[R2, R0]
   1381          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   00000190   0x.... 0x....      LDR.W    R0,??DataTable19_22
   \   00000194   0x8800             LDRH     R0,[R0, #+0]
   \   00000196   0x1C41             ADDS     R1,R0,#+1
   \   00000198   0x.... 0x....      LDR.W    R2,??DataTable19_22
   \   0000019C   0x8011             STRH     R1,[R2, #+0]
   \   0000019E   0x.... 0x....      LDR.W    R1,??DataTable19_23
   \   000001A2   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001A6   0x.... 0x....      LDR.W    R2,??DataTable19_28  ;; 0xc0010140
   \   000001AA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001AC   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000001B0   0xF243 0x023C      MOVW     R2,#+12348
   \   000001B4   0x5211             STRH     R1,[R2, R0]
   1382          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable19_24
   \   000001BA   0x8800             LDRH     R0,[R0, #+0]
   \   000001BC   0x1C41             ADDS     R1,R0,#+1
   \   000001BE   0x.... 0x....      LDR.W    R2,??DataTable19_24
   \   000001C2   0x8011             STRH     R1,[R2, #+0]
   \   000001C4   0x.... 0x....      LDR.W    R1,??DataTable19_25
   \   000001C8   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001CC   0x.... 0x....      LDR.W    R2,??DataTable19_28  ;; 0xc0010140
   \   000001D0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001D2   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000001D6   0xF244 0x0250      MOVW     R2,#+16464
   \   000001DA   0x5211             STRH     R1,[R2, R0]
   1383          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   000001DC   0x.... 0x....      LDR.W    R0,??DataTable19_26
   \   000001E0   0x8800             LDRH     R0,[R0, #+0]
   \   000001E2   0x1C41             ADDS     R1,R0,#+1
   \   000001E4   0x.... 0x....      LDR.W    R2,??DataTable19_26
   \   000001E8   0x8011             STRH     R1,[R2, #+0]
   \   000001EA   0x.... 0x....      LDR.W    R1,??DataTable19_27
   \   000001EE   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001F2   0x.... 0x....      LDR.W    R2,??DataTable19_28  ;; 0xc0010140
   \   000001F6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001F8   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000001FC   0xF245 0x0264      MOVW     R2,#+20580
   \   00000200   0x5211             STRH     R1,[R2, R0]
   1384          		
   1385          
   1386          										break;
   \   00000202   0xE06A             B.N      ??RecordUpdBuf_0
   1387          								case BUF3_PLAY:
   1388          
   1389          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_2: (+1)
   \   00000204   0x.... 0x....      LDR.W    R0,??DataTable19_14
   \   00000208   0x8800             LDRH     R0,[R0, #+0]
   \   0000020A   0x1C41             ADDS     R1,R0,#+1
   \   0000020C   0x.... 0x....      LDR.W    R2,??DataTable19_14
   \   00000210   0x8011             STRH     R1,[R2, #+0]
   \   00000212   0x.... 0x....      LDR.W    R1,??DataTable19_17
   \   00000216   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000021A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000021C   0x0040             LSLS     R0,R0,#+1
   \   0000021E   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000222   0x8001             STRH     R1,[R0, #+0]
   1390          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   00000224   0x.... 0x....      LDR.W    R0,??DataTable19_15
   \   00000228   0x8800             LDRH     R0,[R0, #+0]
   \   0000022A   0x1C41             ADDS     R1,R0,#+1
   \   0000022C   0x.... 0x....      LDR.W    R2,??DataTable19_15
   \   00000230   0x8011             STRH     R1,[R2, #+0]
   \   00000232   0x.... 0x....      LDR.W    R1,??DataTable19_19
   \   00000236   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000023A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000023C   0x0040             LSLS     R0,R0,#+1
   \   0000023E   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000242   0xF241 0x0214      MOVW     R2,#+4116
   \   00000246   0x5211             STRH     R1,[R2, R0]
   1391          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   00000248   0x.... 0x....      LDR.W    R0,??DataTable19_20
   \   0000024C   0x8800             LDRH     R0,[R0, #+0]
   \   0000024E   0x1C41             ADDS     R1,R0,#+1
   \   00000250   0x.... 0x....      LDR.W    R2,??DataTable19_20
   \   00000254   0x8011             STRH     R1,[R2, #+0]
   \   00000256   0x.... 0x....      LDR.W    R1,??DataTable19_21
   \   0000025A   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000025E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000260   0x0040             LSLS     R0,R0,#+1
   \   00000262   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000266   0xF242 0x0228      MOVW     R2,#+8232
   \   0000026A   0x5211             STRH     R1,[R2, R0]
   1392          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \   0000026C   0x.... 0x....      LDR.W    R0,??DataTable19_22
   \   00000270   0x8800             LDRH     R0,[R0, #+0]
   \   00000272   0x1C41             ADDS     R1,R0,#+1
   \   00000274   0x.... 0x....      LDR.W    R2,??DataTable19_22
   \   00000278   0x8011             STRH     R1,[R2, #+0]
   \   0000027A   0x.... 0x....      LDR.W    R1,??DataTable19_23
   \   0000027E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000282   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000284   0x0040             LSLS     R0,R0,#+1
   \   00000286   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000028A   0xF243 0x023C      MOVW     R2,#+12348
   \   0000028E   0x5211             STRH     R1,[R2, R0]
   1393          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   00000290   0x.... 0x....      LDR.W    R0,??DataTable19_24
   \   00000294   0x8800             LDRH     R0,[R0, #+0]
   \   00000296   0x1C41             ADDS     R1,R0,#+1
   \   00000298   0x.... 0x....      LDR.W    R2,??DataTable19_24
   \   0000029C   0x8011             STRH     R1,[R2, #+0]
   \   0000029E   0x.... 0x....      LDR.W    R1,??DataTable19_25
   \   000002A2   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000002A6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000002A8   0x0040             LSLS     R0,R0,#+1
   \   000002AA   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000002AE   0xF244 0x0250      MOVW     R2,#+16464
   \   000002B2   0x5211             STRH     R1,[R2, R0]
   1394          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   \   000002B4   0x.... 0x....      LDR.W    R0,??DataTable19_26
   \   000002B8   0x8800             LDRH     R0,[R0, #+0]
   \   000002BA   0x1C41             ADDS     R1,R0,#+1
   \   000002BC   0x.... 0x....      LDR.W    R2,??DataTable19_26
   \   000002C0   0x8011             STRH     R1,[R2, #+0]
   \   000002C2   0x.... 0x....      LDR.W    R1,??DataTable19_27
   \   000002C6   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000002CA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000002CC   0x0040             LSLS     R0,R0,#+1
   \   000002CE   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000002D2   0xF245 0x0264      MOVW     R2,#+20580
   \   000002D6   0x5211             STRH     R1,[R2, R0]
   1395          										break;
   \   000002D8   0xE7FF             B.N      ??RecordUpdBuf_0
   1396          								default:
   1397          										break; 
   1398          					   }
   1399          				
   1400          				}
   1401                               
   1402               	}
   1403          }
   \                     ??RecordUpdBuf_4: (+1)
   \                     ??RecordUpdBuf_0: (+1)
   \   000002DA   0x4770             BX       LR               ;; return
   \   000002DC                      REQUIRE Buffer2
   \   000002DC                      REQUIRE Buffer3
   \   000002DC                      REQUIRE Buffer1
   1404          
   1405          

   \                                 In section .text, align 2, keep-with-next
   1406          void DMA2_Stream5_IRQHandler(void)
   1407          {
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1408            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1409          
   1410            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1411            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable19_9
   \   00000006   0x.... 0x....      BL       HAL_DMA_IRQHandler
   1412            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1413          
   1414            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1415          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
   1416          
   1417          /**
   1418          * @brief This function handles DMA2 stream6 global interrupt.
   1419          */

   \                                 In section .text, align 2, keep-with-next
   1420          void DMA2_Stream6_IRQHandler(void)
   1421          {
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1422            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1423          
   1424            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1425            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable19_12
   \   00000006   0x.... 0x....      BL       HAL_DMA_IRQHandler
   1426            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1427          
   1428            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1429          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
   1430          

   \                                 In section .text, align 2, keep-with-next
   1431          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1432          {
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1433              if(hspi->Instance==SPI1)
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable18_4  ;; 0x40013000
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD02F             BEQ.N    ??HAL_SPI_RxCpltCallback_0
   1434              {
   1435                  /* Copy Data to Record Buffer */
   1436          		//RecordUpdBuf();
   1437          		//XferCplt = 1;
   1438                  //Audio_Play_Out();
   1439              }
   1440              else if (hspi->Instance==SPI2)
   \   0000000C   0x6820             LDR      R0,[R4, #+0]
   \   0000000E   0x....             LDR.N    R1,??DataTable18_7  ;; 0x40003800
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xD02B             BEQ.N    ??HAL_SPI_RxCpltCallback_0
   1441              {
   1442          
   1443              }
   1444              else if (hspi->Instance==SPI4)
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable19_5  ;; 0x40013400
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD026             BEQ.N    ??HAL_SPI_RxCpltCallback_0
   1445              {
   1446          
   1447              }
   1448              else if (hspi->Instance==SPI5)
   \   0000001E   0x6820             LDR      R0,[R4, #+0]
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable19_29  ;; 0x40015000
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD121             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1449              {
   1450                  swtSDO7^=0x01;
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable19_30
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0xF090 0x0001      EORS     R0,R0,#0x1
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable19_30
   \   00000036   0x7008             STRB     R0,[R1, #+0]
   1451                  WaveRecord_flgSDO7Finish = 1;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable19_31
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
   1452                  if (swtSDO7==0x01)
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable19_30
   \   00000044   0x7800             LDRB     R0,[R0, #+0]
   \   00000046   0x2801             CMP      R0,#+1
   \   00000048   0xD108             BNE.N    ??HAL_SPI_RxCpltCallback_1
   1453                  {
   1454                      HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   \   0000004A   0xF44F 0x5280      MOV      R2,#+4096
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable19_32
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable19_33
   \   00000056   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   \   0000005A   0xE007             B.N      ??HAL_SPI_RxCpltCallback_0
   1455                  }
   1456                  else
   1457                  {
   1458                      HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??HAL_SPI_RxCpltCallback_1: (+1)
   \   0000005C   0xF44F 0x5280      MOV      R2,#+4096
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable19_34
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable19_33
   \   00000068   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1459                  }        
   1460              }
   1461              else
   1462              {
   1463                
   1464              }
   1465              
   1466              if (hspi->Instance==SPI6) //MIC8
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   0000006C   0x6820             LDR      R0,[R4, #+0]
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable19_35  ;; 0x40015400
   \   00000072   0x4288             CMP      R0,R1
   \   00000074   0xD11E             BNE.N    ??HAL_SPI_RxCpltCallback_2
   1467              {
   1468          #if 0							
   1469          
   1470              if (swtSDO8==0x01)
   1471             {
   1472                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1473             }
   1474             else
   1475             {
   1476          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1477             }      
   1478             AudioUSBSend(idxFrmPDMMic8++);
   1479          
   1480             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   1481             {
   1482                 swtSDO8^=0x01;
   1483                 WaveRecord_flgSDO8Finish = 1;
   1484                 idxFrmPDMMic8 = 0;
   1485          		RESET_IDX
   1486          		XferCplt = 0; // clear DMA interrupt flag
   1487          		switch (buffer_switch)
   1488          		{
   1489          	        case BUF1_PLAY: 		
   1490          	          buffer_switch = BUF3_PLAY;
   1491          	          break;
   1492          	        case BUF2_PLAY: 
   1493          	          buffer_switch = BUF1_PLAY;		
   1494          	          break;
   1495          	        case BUF3_PLAY: 	
   1496          	          buffer_switch = BUF2_PLAY;
   1497          	          break;
   1498          	        default:
   1499          	          break;
   1500          		}
   1501          
   1502          		/* Last player Frame is finished */
   1503          		AudioPlayerUpd(); 		
   1504          		
   1505          		if (cntStrt<100) cntStrt++;		   
   1506                  
   1507             }
   1508          
   1509          
   1510          #else
   1511              swtSDO8^=0x01;
   \   00000076   0x....             LDR.N    R0,??DataTable18_1
   \   00000078   0x7800             LDRB     R0,[R0, #+0]
   \   0000007A   0xF090 0x0001      EORS     R0,R0,#0x1
   \   0000007E   0x....             LDR.N    R1,??DataTable18_1
   \   00000080   0x7008             STRB     R0,[R1, #+0]
   1512              WaveRecord_flgSDO8Finish = 1;
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable19_36
   \   00000088   0x7008             STRB     R0,[R1, #+0]
   1513              if (swtSDO8==0x01)
   \   0000008A   0x....             LDR.N    R0,??DataTable18_1
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0x2801             CMP      R0,#+1
   \   00000090   0xD108             BNE.N    ??HAL_SPI_RxCpltCallback_3
   1514              {
   1515                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000092   0xF44F 0x5280      MOV      R2,#+4096
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable19_37
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable19_38
   \   0000009E   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   \   000000A2   0xE007             B.N      ??HAL_SPI_RxCpltCallback_2
   1516              }
   1517              else
   1518              {
   1519                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??HAL_SPI_RxCpltCallback_3: (+1)
   \   000000A4   0xF44F 0x5280      MOV      R2,#+4096
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable19_39
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable19_38
   \   000000B0   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1520          
   1521              }
   1522          #endif
   1523          
   1524            }
   1525          }
   \                     ??HAL_SPI_RxCpltCallback_2: (+1)
   \   000000B4   0xBD10             POP      {R4,PC}          ;; return
   1526          

   \                                 In section .text, align 2, keep-with-next
   1527          void PDM2PCMSDO78(void)
   1528          {
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1529          
   1530          uint8_t buffer_switch_tmp;
   1531          
   1532          buffer_switch_tmp = buffer_switch;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable19_16
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x0004             MOVS     R4,R0
   1533          
   1534          /*-------------------------------------------------------------------------------------------------------------
   1535          			  
   1536          	Sequence  Record Data					  Processing Data				  Player Data
   1537          			  
   1538          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1539          			  
   1540          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1541          			  
   1542          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1543           ---------------------------------------------------------------------------------------------------------------*/
   1544          
   1545              /* Data in Mic7 finished recording */
   1546              if (WaveRecord_flgSDO7Finish==1)
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable19_31
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xF040 0x81B5      BNE.W    ??PDM2PCMSDO78_0
   1547              {
   1548                  WaveRecord_flgSDO7Finish=0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable19_31
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
   1549          
   1550          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   0000001E   0x2500             MOVS     R5,#+0
   \                     ??PDM2PCMSDO78_1: (+1)
   \   00000020   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000022   0xF5B5 0x5F80      CMP      R5,#+4096
   \   00000026   0xF280 0x80D0      BGE.W    ??PDM2PCMSDO78_2
   1551          		{
   1552          	            if(swtSDO7==0x01)
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable19_30
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2801             CMP      R0,#+1
   \   00000032   0xD130             BNE.N    ??PDM2PCMSDO78_3
   1553          	            {
   1554          	                pDataMic7[i%64] = HTONS(TestSDO7[i]);
                 	                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable19_34
   \   00000038   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000003A   0xF830 0x0015      LDRH     R0,[R0, R5, LSL #+1]
   \   0000003E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable19_34
   \   00000044   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000046   0xF831 0x1015      LDRH     R1,[R1, R5, LSL #+1]
   \   0000004A   0x0209             LSLS     R1,R1,#+8
   \   0000004C   0xEA51 0x2010      ORRS     R0,R1,R0, LSR #+8
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable19_40
   \   00000054   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000056   0x2240             MOVS     R2,#+64
   \   00000058   0xFB95 0xF3F2      SDIV     R3,R5,R2
   \   0000005C   0xFB03 0x5312      MLS      R3,R3,R2,R5
   \   00000060   0xF821 0x0013      STRH     R0,[R1, R3, LSL #+1]
   1555          					pDataMic8[i%64] = HTONS(TestSDO8[i]);
                 					^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable19_39
   \   00000068   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000006A   0xF830 0x0015      LDRH     R0,[R0, R5, LSL #+1]
   \   0000006E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable19_39
   \   00000074   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000076   0xF831 0x1015      LDRH     R1,[R1, R5, LSL #+1]
   \   0000007A   0x0209             LSLS     R1,R1,#+8
   \   0000007C   0xEA51 0x2010      ORRS     R0,R1,R0, LSR #+8
   \   00000080   0x.... 0x....      LDR.W    R1,??DataTable19_41
   \   00000084   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000086   0x2240             MOVS     R2,#+64
   \   00000088   0xFB95 0xF3F2      SDIV     R3,R5,R2
   \   0000008C   0xFB03 0x5312      MLS      R3,R3,R2,R5
   \   00000090   0xF821 0x0013      STRH     R0,[R1, R3, LSL #+1]
   \   00000094   0xE02B             B.N      ??PDM2PCMSDO78_4
   1556          	            }
   1557          	            else
   1558          	            {
   1559          	               pDataMic7[i%64] = HTONS(TestSDO7_1[i]);
                 	               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??PDM2PCMSDO78_3: (+1)
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable19_32
   \   0000009A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000009C   0xF830 0x0015      LDRH     R0,[R0, R5, LSL #+1]
   \   000000A0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A2   0x....             LDR.N    R1,??DataTable19_32
   \   000000A4   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A6   0xF831 0x1015      LDRH     R1,[R1, R5, LSL #+1]
   \   000000AA   0x0209             LSLS     R1,R1,#+8
   \   000000AC   0xEA51 0x2010      ORRS     R0,R1,R0, LSR #+8
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable19_40
   \   000000B4   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B6   0x2240             MOVS     R2,#+64
   \   000000B8   0xFB95 0xF3F2      SDIV     R3,R5,R2
   \   000000BC   0xFB03 0x5312      MLS      R3,R3,R2,R5
   \   000000C0   0xF821 0x0013      STRH     R0,[R1, R3, LSL #+1]
   1560          				   pDataMic8[i%64] = HTONS(TestSDO8_1[i]);
                 				   ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   000000C4   0x....             LDR.N    R0,??DataTable19_37
   \   000000C6   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000C8   0xF830 0x0015      LDRH     R0,[R0, R5, LSL #+1]
   \   000000CC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CE   0x....             LDR.N    R1,??DataTable19_37
   \   000000D0   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000D2   0xF831 0x1015      LDRH     R1,[R1, R5, LSL #+1]
   \   000000D6   0x0209             LSLS     R1,R1,#+8
   \   000000D8   0xEA51 0x2010      ORRS     R0,R1,R0, LSR #+8
   \   000000DC   0x....             LDR.N    R1,??DataTable19_41
   \   000000DE   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000E0   0x2240             MOVS     R2,#+64
   \   000000E2   0xFB95 0xF3F2      SDIV     R3,R5,R2
   \   000000E6   0xFB03 0x5312      MLS      R3,R3,R2,R5
   \   000000EA   0xF821 0x0013      STRH     R0,[R1, R3, LSL #+1]
   1561          
   1562          	            }
   1563          
   1564          	            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1565          	            if (i%64==63)
   \                     ??PDM2PCMSDO78_4: (+1)
   \   000000EE   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000F0   0x2040             MOVS     R0,#+64
   \   000000F2   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   000000F6   0xFB01 0x5110      MLS      R1,R1,R0,R5
   \   000000FA   0x293F             CMP      R1,#+63
   \   000000FC   0xD163             BNE.N    ??PDM2PCMSDO78_5
   1566          	            {
   1567          					/* Put them in processing phase */
   1568          	              /* Recording Audio Data */						 
   1569          	              switch (buffer_switch_tmp)
   \   000000FE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000100   0x2C00             CMP      R4,#+0
   \   00000102   0xD003             BEQ.N    ??PDM2PCMSDO78_6
   \   00000104   0x2C02             CMP      R4,#+2
   \   00000106   0xD03F             BEQ.N    ??PDM2PCMSDO78_7
   \   00000108   0xD31F             BCC.N    ??PDM2PCMSDO78_8
   \   0000010A   0xE05C             B.N      ??PDM2PCMSDO78_9
   1570          	              {
   1571          				    case BUF1_PLAY:								
   1572          	                      PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 150 ,
   1573          	                      (PDMFilter_InitStruct *)&Filter[0]);
   \                     ??PDM2PCMSDO78_6: (+1)
   \   0000010C   0x....             LDR.N    R3,??DataTable19_42
   \   0000010E   0x2296             MOVS     R2,#+150
   \   00000110   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000112   0x2040             MOVS     R0,#+64
   \   00000114   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   00000118   0x....             LDR.N    R1,??DataTable19_18  ;; 0xc00080a0
   \   0000011A   0xEB11 0x1040      ADDS     R0,R1,R0, LSL #+5
   \   0000011E   0xF500 0x41C0      ADD      R1,R0,#+24576
   \   00000122   0x3178             ADDS     R1,R1,#+120
   \   00000124   0x....             LDR.N    R0,??DataTable19_40
   \   00000126   0x.... 0x....      BL       PDM_Filter_64_LSB
   1574                                    PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 150 ,
   1575                                    (PDMFilter_InitStruct *)&Filter[1]);						  
   \   0000012A   0x....             LDR.N    R3,??DataTable19_43
   \   0000012C   0x2296             MOVS     R2,#+150
   \   0000012E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000130   0x2040             MOVS     R0,#+64
   \   00000132   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   00000136   0x....             LDR.N    R1,??DataTable19_18  ;; 0xc00080a0
   \   00000138   0xEB11 0x1040      ADDS     R0,R1,R0, LSL #+5
   \   0000013C   0xF500 0x41E0      ADD      R1,R0,#+28672
   \   00000140   0x318C             ADDS     R1,R1,#+140
   \   00000142   0x....             LDR.N    R0,??DataTable19_41
   \   00000144   0x.... 0x....      BL       PDM_Filter_64_LSB
   1576          	                      break;	              
   \   00000148   0xE03D             B.N      ??PDM2PCMSDO78_5
   1577          	                case BUF2_PLAY:
   1578          		                  PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 150 ,
   1579          		                  (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_8: (+1)
   \   0000014A   0x....             LDR.N    R3,??DataTable19_42
   \   0000014C   0x2296             MOVS     R2,#+150
   \   0000014E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000150   0x2040             MOVS     R0,#+64
   \   00000152   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   00000156   0x....             LDR.N    R1,??DataTable19_28  ;; 0xc0010140
   \   00000158   0xEB11 0x1040      ADDS     R0,R1,R0, LSL #+5
   \   0000015C   0xF500 0x41C0      ADD      R1,R0,#+24576
   \   00000160   0x3178             ADDS     R1,R1,#+120
   \   00000162   0x....             LDR.N    R0,??DataTable19_40
   \   00000164   0x.... 0x....      BL       PDM_Filter_64_LSB
   1580                                    PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 150 ,
   1581                                    (PDMFilter_InitStruct *)&Filter[1]);							
   \   00000168   0x....             LDR.N    R3,??DataTable19_43
   \   0000016A   0x2296             MOVS     R2,#+150
   \   0000016C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000016E   0x2040             MOVS     R0,#+64
   \   00000170   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   00000174   0x....             LDR.N    R1,??DataTable19_28  ;; 0xc0010140
   \   00000176   0xEB11 0x1040      ADDS     R0,R1,R0, LSL #+5
   \   0000017A   0xF500 0x41E0      ADD      R1,R0,#+28672
   \   0000017E   0x318C             ADDS     R1,R1,#+140
   \   00000180   0x....             LDR.N    R0,??DataTable19_41
   \   00000182   0x.... 0x....      BL       PDM_Filter_64_LSB
   1582          	                        break;
   \   00000186   0xE01E             B.N      ??PDM2PCMSDO78_5
   1583          	                case BUF3_PLAY:
   1584          	                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 150 ,
   1585          	                        (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_7: (+1)
   \   00000188   0x....             LDR.N    R3,??DataTable19_42
   \   0000018A   0x2296             MOVS     R2,#+150
   \   0000018C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000018E   0x2040             MOVS     R0,#+64
   \   00000190   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   00000194   0x0140             LSLS     R0,R0,#+5
   \   00000196   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000019A   0xF500 0x41C0      ADD      R1,R0,#+24576
   \   0000019E   0x3178             ADDS     R1,R1,#+120
   \   000001A0   0x....             LDR.N    R0,??DataTable19_40
   \   000001A2   0x.... 0x....      BL       PDM_Filter_64_LSB
   1586          							PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 150 ,
   1587          							(PDMFilter_InitStruct *)&Filter[1]);	
   \   000001A6   0x....             LDR.N    R3,??DataTable19_43
   \   000001A8   0x2296             MOVS     R2,#+150
   \   000001AA   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001AC   0x2040             MOVS     R0,#+64
   \   000001AE   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \   000001B2   0x0140             LSLS     R0,R0,#+5
   \   000001B4   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000001B8   0xF500 0x41E0      ADD      R1,R0,#+28672
   \   000001BC   0x318C             ADDS     R1,R1,#+140
   \   000001BE   0x....             LDR.N    R0,??DataTable19_41
   \   000001C0   0x.... 0x....      BL       PDM_Filter_64_LSB
   1588          	                         break;
   \   000001C4   0xE7FF             B.N      ??PDM2PCMSDO78_5
   1589          
   1590          	                default:
   1591          	                         break; 
   1592          	              }
   1593          		        }
   1594          	      }//if (WaveRecord_flgSDO7Finish==1)
   \                     ??PDM2PCMSDO78_9: (+1)
   \                     ??PDM2PCMSDO78_5: (+1)
   \   000001C6   0x1C6D             ADDS     R5,R5,#+1
   \   000001C8   0xE72A             B.N      ??PDM2PCMSDO78_1
   1595          
   1596            	      switch (buffer_switch_tmp)
   \                     ??PDM2PCMSDO78_2: (+1)
   \   000001CA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001CC   0x2C00             CMP      R4,#+0
   \   000001CE   0xD004             BEQ.N    ??PDM2PCMSDO78_10
   \   000001D0   0x2C02             CMP      R4,#+2
   \   000001D2   0xF000 0x8084      BEQ.W    ??PDM2PCMSDO78_11
   \   000001D6   0xD341             BCC.N    ??PDM2PCMSDO78_12
   \   000001D8   0xE0D2             B.N      ??PDM2PCMSDO78_13
   1597                    {
   1598          			case BUF1_PLAY:								
   1599          				Buffer2.bufMIC7[0]=Buffer2.bufMIC7[4];
   \                     ??PDM2PCMSDO78_10: (+1)
   \   000001DA   0x....             LDR.N    R0,??DataTable19_18  ;; 0xc00080a0
   \   000001DC   0xF510 0x40C1      ADDS     R0,R0,#+24704
   \   000001E0   0x8800             LDRH     R0,[R0, #+0]
   \   000001E2   0x....             LDR.N    R1,??DataTable19_18  ;; 0xc00080a0
   \   000001E4   0xF246 0x0278      MOVW     R2,#+24696
   \   000001E8   0x5250             STRH     R0,[R2, R1]
   1600          				Buffer2.bufMIC7[1]=Buffer2.bufMIC7[5];
   \   000001EA   0x....             LDR.N    R0,??DataTable19_18  ;; 0xc00080a0
   \   000001EC   0xF246 0x0182      MOVW     R1,#+24706
   \   000001F0   0x5A08             LDRH     R0,[R1, R0]
   \   000001F2   0x....             LDR.N    R1,??DataTable19_18  ;; 0xc00080a0
   \   000001F4   0xF246 0x027A      MOVW     R2,#+24698
   \   000001F8   0x5250             STRH     R0,[R2, R1]
   1601          				Buffer2.bufMIC7[2]=Buffer2.bufMIC7[6];
   \   000001FA   0x....             LDR.N    R0,??DataTable19_18  ;; 0xc00080a0
   \   000001FC   0xF246 0x0184      MOVW     R1,#+24708
   \   00000200   0x5A08             LDRH     R0,[R1, R0]
   \   00000202   0x....             LDR.N    R1,??DataTable19_18  ;; 0xc00080a0
   \   00000204   0xF246 0x027C      MOVW     R2,#+24700
   \   00000208   0x5250             STRH     R0,[R2, R1]
   1602          				Buffer2.bufMIC7[3]=Buffer2.bufMIC7[7];				
   \   0000020A   0x....             LDR.N    R0,??DataTable19_18  ;; 0xc00080a0
   \   0000020C   0xF246 0x0186      MOVW     R1,#+24710
   \   00000210   0x5A08             LDRH     R0,[R1, R0]
   \   00000212   0x....             LDR.N    R1,??DataTable19_18  ;; 0xc00080a0
   \   00000214   0xF246 0x027E      MOVW     R2,#+24702
   \   00000218   0x5250             STRH     R0,[R2, R1]
   1603          				Buffer2.bufMIC8[0]=Buffer2.bufMIC8[4];
   \   0000021A   0x....             LDR.N    R0,??DataTable19_18  ;; 0xc00080a0
   \   0000021C   0xF247 0x0194      MOVW     R1,#+28820
   \   00000220   0x5A08             LDRH     R0,[R1, R0]
   \   00000222   0x....             LDR.N    R1,??DataTable19_18  ;; 0xc00080a0
   \   00000224   0xF247 0x028C      MOVW     R2,#+28812
   \   00000228   0x5250             STRH     R0,[R2, R1]
   1604          				Buffer2.bufMIC8[1]=Buffer2.bufMIC8[5];
   \   0000022A   0x....             LDR.N    R0,??DataTable19_18  ;; 0xc00080a0
   \   0000022C   0xF247 0x0196      MOVW     R1,#+28822
   \   00000230   0x5A08             LDRH     R0,[R1, R0]
   \   00000232   0x....             LDR.N    R1,??DataTable19_18  ;; 0xc00080a0
   \   00000234   0xF247 0x028E      MOVW     R2,#+28814
   \   00000238   0x5250             STRH     R0,[R2, R1]
   1605          				Buffer2.bufMIC8[2]=Buffer2.bufMIC8[6];
   \   0000023A   0x....             LDR.N    R0,??DataTable19_18  ;; 0xc00080a0
   \   0000023C   0xF247 0x0198      MOVW     R1,#+28824
   \   00000240   0x5A08             LDRH     R0,[R1, R0]
   \   00000242   0x....             LDR.N    R1,??DataTable19_18  ;; 0xc00080a0
   \   00000244   0xF247 0x0290      MOVW     R2,#+28816
   \   00000248   0x5250             STRH     R0,[R2, R1]
   1606          				Buffer2.bufMIC8[3]=Buffer2.bufMIC8[7];				
   \   0000024A   0x....             LDR.N    R0,??DataTable19_18  ;; 0xc00080a0
   \   0000024C   0xF247 0x019A      MOVW     R1,#+28826
   \   00000250   0x5A08             LDRH     R0,[R1, R0]
   \   00000252   0x....             LDR.N    R1,??DataTable19_18  ;; 0xc00080a0
   \   00000254   0xF247 0x0292      MOVW     R2,#+28818
   \   00000258   0x5250             STRH     R0,[R2, R1]
   1607          			    break;	              
   \   0000025A   0xE091             B.N      ??PDM2PCMSDO78_0
   1608          			case BUF2_PLAY:	
   1609          				Buffer3.bufMIC7[0]=Buffer3.bufMIC7[4];
   \                     ??PDM2PCMSDO78_12: (+1)
   \   0000025C   0x....             LDR.N    R0,??DataTable19_28  ;; 0xc0010140
   \   0000025E   0xF510 0x40C1      ADDS     R0,R0,#+24704
   \   00000262   0x8800             LDRH     R0,[R0, #+0]
   \   00000264   0x....             LDR.N    R1,??DataTable19_28  ;; 0xc0010140
   \   00000266   0xF246 0x0278      MOVW     R2,#+24696
   \   0000026A   0x5250             STRH     R0,[R2, R1]
   1610          				Buffer3.bufMIC7[1]=Buffer3.bufMIC7[5];
   \   0000026C   0x....             LDR.N    R0,??DataTable19_28  ;; 0xc0010140
   \   0000026E   0xF246 0x0182      MOVW     R1,#+24706
   \   00000272   0x5A08             LDRH     R0,[R1, R0]
   \   00000274   0x....             LDR.N    R1,??DataTable19_28  ;; 0xc0010140
   \   00000276   0xF246 0x027A      MOVW     R2,#+24698
   \   0000027A   0x5250             STRH     R0,[R2, R1]
   1611          				Buffer3.bufMIC7[2]=Buffer3.bufMIC7[6];
   \   0000027C   0x....             LDR.N    R0,??DataTable19_28  ;; 0xc0010140
   \   0000027E   0xF246 0x0184      MOVW     R1,#+24708
   \   00000282   0x5A08             LDRH     R0,[R1, R0]
   \   00000284   0x....             LDR.N    R1,??DataTable19_28  ;; 0xc0010140
   \   00000286   0xF246 0x027C      MOVW     R2,#+24700
   \   0000028A   0x5250             STRH     R0,[R2, R1]
   1612          				Buffer3.bufMIC7[3]=Buffer3.bufMIC7[7];				
   \   0000028C   0x....             LDR.N    R0,??DataTable19_28  ;; 0xc0010140
   \   0000028E   0xF246 0x0186      MOVW     R1,#+24710
   \   00000292   0x5A08             LDRH     R0,[R1, R0]
   \   00000294   0x....             LDR.N    R1,??DataTable19_28  ;; 0xc0010140
   \   00000296   0xF246 0x027E      MOVW     R2,#+24702
   \   0000029A   0x5250             STRH     R0,[R2, R1]
   1613          				Buffer3.bufMIC8[0]=Buffer3.bufMIC8[4];
   \   0000029C   0x....             LDR.N    R0,??DataTable19_28  ;; 0xc0010140
   \   0000029E   0xF247 0x0194      MOVW     R1,#+28820
   \   000002A2   0x5A08             LDRH     R0,[R1, R0]
   \   000002A4   0x....             LDR.N    R1,??DataTable19_28  ;; 0xc0010140
   \   000002A6   0xF247 0x028C      MOVW     R2,#+28812
   \   000002AA   0x5250             STRH     R0,[R2, R1]
   1614          				Buffer3.bufMIC8[1]=Buffer3.bufMIC8[5];
   \   000002AC   0x....             LDR.N    R0,??DataTable19_28  ;; 0xc0010140
   \   000002AE   0xF247 0x0196      MOVW     R1,#+28822
   \   000002B2   0x5A08             LDRH     R0,[R1, R0]
   \   000002B4   0x....             LDR.N    R1,??DataTable19_28  ;; 0xc0010140
   \   000002B6   0xF247 0x028E      MOVW     R2,#+28814
   \   000002BA   0x5250             STRH     R0,[R2, R1]
   1615          				Buffer3.bufMIC8[2]=Buffer3.bufMIC8[6];
   \   000002BC   0x....             LDR.N    R0,??DataTable19_28  ;; 0xc0010140
   \   000002BE   0xF247 0x0198      MOVW     R1,#+28824
   \   000002C2   0x5A08             LDRH     R0,[R1, R0]
   \   000002C4   0x....             LDR.N    R1,??DataTable19_28  ;; 0xc0010140
   \   000002C6   0xF247 0x0290      MOVW     R2,#+28816
   \   000002CA   0x5250             STRH     R0,[R2, R1]
   1616          				Buffer3.bufMIC8[3]=Buffer3.bufMIC8[7];
   \   000002CC   0x....             LDR.N    R0,??DataTable19_28  ;; 0xc0010140
   \   000002CE   0xF247 0x019A      MOVW     R1,#+28826
   \   000002D2   0x5A08             LDRH     R0,[R1, R0]
   \   000002D4   0x....             LDR.N    R1,??DataTable19_28  ;; 0xc0010140
   \   000002D6   0xF247 0x0292      MOVW     R2,#+28818
   \   000002DA   0x5250             STRH     R0,[R2, R1]
   1617          
   1618          			    break;
   \   000002DC   0xE050             B.N      ??PDM2PCMSDO78_0
   1619          			case BUF3_PLAY:
   1620          				Buffer1.bufMIC7[0]=Buffer1.bufMIC7[4];
   \                     ??PDM2PCMSDO78_11: (+1)
   \   000002DE   0xF44F 0x40C1      MOV      R0,#+24704
   \   000002E2   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000002E6   0x8800             LDRH     R0,[R0, #+0]
   \   000002E8   0xF246 0x0178      MOVW     R1,#+24696
   \   000002EC   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   000002F0   0x8008             STRH     R0,[R1, #+0]
   1621          				Buffer1.bufMIC7[1]=Buffer1.bufMIC7[5];
   \   000002F2   0xF246 0x0082      MOVW     R0,#+24706
   \   000002F6   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000002FA   0x8800             LDRH     R0,[R0, #+0]
   \   000002FC   0xF246 0x017A      MOVW     R1,#+24698
   \   00000300   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   00000304   0x8008             STRH     R0,[R1, #+0]
   1622          				Buffer1.bufMIC7[2]=Buffer1.bufMIC7[6];
   \   00000306   0xF246 0x0084      MOVW     R0,#+24708
   \   0000030A   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000030E   0x8800             LDRH     R0,[R0, #+0]
   \   00000310   0xF246 0x017C      MOVW     R1,#+24700
   \   00000314   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   00000318   0x8008             STRH     R0,[R1, #+0]
   1623          				Buffer1.bufMIC7[3]=Buffer1.bufMIC7[7];				
   \   0000031A   0xF246 0x0086      MOVW     R0,#+24710
   \   0000031E   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000322   0x8800             LDRH     R0,[R0, #+0]
   \   00000324   0xF246 0x017E      MOVW     R1,#+24702
   \   00000328   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   0000032C   0x8008             STRH     R0,[R1, #+0]
   1624          				Buffer1.bufMIC8[0]=Buffer1.bufMIC8[4];
   \   0000032E   0xF247 0x0094      MOVW     R0,#+28820
   \   00000332   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000336   0x8800             LDRH     R0,[R0, #+0]
   \   00000338   0xF247 0x018C      MOVW     R1,#+28812
   \   0000033C   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   00000340   0x8008             STRH     R0,[R1, #+0]
   1625          				Buffer1.bufMIC8[1]=Buffer1.bufMIC8[5];
   \   00000342   0xF247 0x0096      MOVW     R0,#+28822
   \   00000346   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000034A   0x8800             LDRH     R0,[R0, #+0]
   \   0000034C   0xF247 0x018E      MOVW     R1,#+28814
   \   00000350   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   00000354   0x8008             STRH     R0,[R1, #+0]
   1626          				Buffer1.bufMIC8[2]=Buffer1.bufMIC8[6];
   \   00000356   0xF247 0x0098      MOVW     R0,#+28824
   \   0000035A   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000035E   0x8800             LDRH     R0,[R0, #+0]
   \   00000360   0xF247 0x0190      MOVW     R1,#+28816
   \   00000364   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   00000368   0x8008             STRH     R0,[R1, #+0]
   1627          				Buffer1.bufMIC8[3]=Buffer1.bufMIC8[7];
   \   0000036A   0xF247 0x009A      MOVW     R0,#+28826
   \   0000036E   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000372   0x8800             LDRH     R0,[R0, #+0]
   \   00000374   0xF247 0x0192      MOVW     R1,#+28818
   \   00000378   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   0000037C   0x8008             STRH     R0,[R1, #+0]
   1628          
   1629          			    break;
   \   0000037E   0xE7FF             B.N      ??PDM2PCMSDO78_0
   1630          			default:
   1631          			         break; 
   1632                    }
   1633          
   1634          #if 0
   1635                      /* Recording Audio Data */						 
   1636          		    switch (buffer_switch)//buffer_switch
   1637          		    {
   1638          		        case BUF1_PLAY:								
   1639          					        /* Update for left-right channel */
   1640          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1641          			        {
   1642          	                    Buffer2.bufMIC7[2*i+1]=  Buffer2.bufMIC7[i];
   1643                                  Buffer2.bufMIC7[2*i] = Buffer2.bufMIC7[i];
   1644          			        }
   1645          					  Buffer2.bufMIC7[0] = Buffer2.bufMIC7[4];
   1646          					  Buffer2.bufMIC7[1] = Buffer2.bufMIC7[5];
   1647          					  Buffer2.bufMIC7[2] = Buffer2.bufMIC7[6];
   1648          					  Buffer2.bufMIC7[3] = Buffer2.bufMIC7[7];
   1649          			            break;
   1650          			     case BUF2_PLAY:
   1651          			        /* Update for left-right channel */
   1652          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1653          			        {				 	
   1654          		                Buffer3.bufMIC7[2*i+1]= Buffer3.bufMIC7[i];
   1655          		                Buffer3.bufMIC7[2*i]= Buffer3.bufMIC7[i];;	
   1656          			        }
   1657          					  Buffer3.bufMIC7[0] = Buffer3.bufMIC7[4];
   1658          					  Buffer3.bufMIC7[1] = Buffer3.bufMIC7[5];
   1659          					  Buffer3.bufMIC7[2] = Buffer3.bufMIC7[6];
   1660          					  Buffer3.bufMIC7[3] = Buffer3.bufMIC7[7];					
   1661          	                break;
   1662          	            case BUF3_PLAY:
   1663          			        /* Update for left-right channel */
   1664          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1665          			        {					
   1666          	                    Buffer1.bufMIC7[2*i+1]= Buffer1.bufMIC7[i];
   1667          	                    Buffer1.bufMIC7[2*i]= Buffer1.bufMIC7[i];;	
   1668          			        }
   1669          					  Buffer1.bufMIC7[0] = Buffer1.bufMIC7[4];
   1670          					  Buffer1.bufMIC7[1] = Buffer1.bufMIC7[5];
   1671          					  Buffer1.bufMIC7[2] = Buffer1.bufMIC7[6];
   1672          					  Buffer1.bufMIC7[3] = Buffer1.bufMIC7[7];						
   1673          	                break;
   1674          	            default:
   1675          	                break; 
   1676          	        }
   1677          	    
   1678          
   1679               }
   1680              
   1681          
   1682          	/* Data in Mic8 finished recording */
   1683          	if (WaveRecord_flgSDO8Finish==1)
   1684          	{
   1685          		WaveRecord_flgSDO8Finish=0;
   1686          		
   1687          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   1688          		{
   1689                            if(swtSDO8==0x01)
   1690                            {
   1691                               pDataMic8[i%64] = HTONS(TestSDO8[i]);
   1692                            }
   1693                            else
   1694                            {
   1695                               pDataMic8[i%64] = HTONS(TestSDO8_1[i]);
   1696                            }
   1697          		
   1698                            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1699                            if (i%64==63)
   1700                            {
   1701                                /* Recording Audio Data */						 
   1702                                switch (buffer_switch)
   1703                                {
   1704                                        case BUF1_PLAY: 							
   1705                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 150 ,
   1706                                                (PDMFilter_InitStruct *)&Filter[1]);
   1707                                                break;
   1708                                        case BUF2_PLAY:
   1709                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 150 ,
   1710                                                (PDMFilter_InitStruct *)&Filter[1]);	
   1711                                                break;
   1712                                        case BUF3_PLAY:
   1713                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 150 ,
   1714                                                (PDMFilter_InitStruct *)&Filter[1]);									
   1715                                                 break;
   1716                                        default:
   1717                                                 break; 
   1718                                }		
   1719                             }					 
   1720          		}
   1721                         
   1722                    /* Recording Audio Data */						 
   1723                    switch (buffer_switch)
   1724                    {
   1725                        case BUF1_PLAY: 	
   1726                                /* Update for left-right channel */
   1727                                for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1728                                {
   1729                                    Buffer2.bufMIC8[2*i+1]=  Buffer2.bufMIC8[i];
   1730                                    Buffer2.bufMIC8[2*i] = Buffer2.bufMIC8[i];
   1731                                }
   1732          					  Buffer2.bufMIC8[0] = Buffer2.bufMIC8[4];
   1733          					  Buffer2.bufMIC8[1] = Buffer2.bufMIC8[5];
   1734          					  Buffer2.bufMIC8[2] = Buffer2.bufMIC8[6];
   1735          					  Buffer2.bufMIC8[3] = Buffer2.bufMIC8[7];
   1736                                break;
   1737                        case BUF2_PLAY:
   1738                                /* Update for left-right channel */
   1739                                for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1740                                {
   1741                                    Buffer3.bufMIC8[2*i+1]= Buffer3.bufMIC8[i];
   1742          						  Buffer3.bufMIC8[2*i]= Buffer3.bufMIC8[i];;	
   1743                                }
   1744            					  Buffer3.bufMIC8[0] = Buffer3.bufMIC8[4];
   1745          					  Buffer3.bufMIC8[1] = Buffer3.bufMIC8[5];
   1746          					  Buffer3.bufMIC8[2] = Buffer3.bufMIC8[6];
   1747          					  Buffer3.bufMIC8[3] = Buffer3.bufMIC8[7];
   1748                                break;
   1749                        case BUF3_PLAY:
   1750                              /* Update for left-right channel */
   1751                              for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1752                              {					
   1753                                  Buffer1.bufMIC8[2*i+1]= Buffer1.bufMIC8[i];
   1754                                  Buffer1.bufMIC8[2*i]= Buffer1.bufMIC8[i];
   1755                              }
   1756            					  Buffer1.bufMIC8[0] = Buffer1.bufMIC8[4];
   1757          					  Buffer1.bufMIC8[1] = Buffer1.bufMIC8[5];
   1758          					  Buffer1.bufMIC8[2] = Buffer1.bufMIC8[6];
   1759          					  Buffer1.bufMIC8[3] = Buffer1.bufMIC8[7];
   1760                              break;
   1761                        default:
   1762                              break; 
   1763                    }                
   1764          #endif		  
   1765             }//if (WaveRecord_flgSDO8Finish==1)
   1766          }
   \                     ??PDM2PCMSDO78_13: (+1)
   \                     ??PDM2PCMSDO78_0: (+1)
   \   00000380   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \   00000382                      REQUIRE Buffer2
   \   00000382                      REQUIRE Buffer3
   \   00000382                      REQUIRE Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x40023844         DC32     0x40023844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x........         DC32     I2S2_stLR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     ??stLROld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x........         DC32     SPI1_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x........         DC32     vRawSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x........         DC32     WaveRec_idxTest

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \   00000000   0x........         DC32     vRawSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_16:
   \   00000000   0x........         DC32     hi2s2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_17:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_18:
   \   00000000   0x........         DC32     I2S2_stLROld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_19:
   \   00000000   0x........         DC32     I2S2_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_20:
   \   00000000   0x........         DC32     vRawSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_21:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_22:
   \   00000000   0x........         DC32     vRawSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_23:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_24:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_25:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_26:
   \   00000000   0x........         DC32     ??Main_stLR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_27:
   \   00000000   0x........         DC32     SPI4_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_28:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_29:
   \   00000000   0x........         DC32     vRawSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_30:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     ??Main_stLROld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     vRawSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     pDataMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x........         DC32     idxMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x........         DC32     Filter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x........         DC32     bufPCMSens8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \   00000000   0x........         DC32     hspi6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \   00000000   0x4001540C         DC32     0x4001540c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \   00000000   0x........         DC32     pDataMic7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \   00000000   0x........         DC32     idxMic7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \   00000000   0x........         DC32     Filter+0x34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \   00000000   0x........         DC32     bufPCMSens7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     cntPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     cntPos7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     swtSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     swtSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x40023844         DC32     0x40023844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_6:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_7:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_8:
   \   00000000   0x40026488         DC32     0x40026488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_9:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_10:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_11:
   \   00000000   0x400264A0         DC32     0x400264a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_12:
   \   00000000   0x........         DC32     hdma_spi6_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_13:
   \   00000000   0x........         DC32     WaveRecord_flgInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_14:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_15:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_16:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_17:
   \   00000000   0x........         DC32     vRawSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_18:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_19:
   \   00000000   0x........         DC32     vRawSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_20:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_21:
   \   00000000   0x........         DC32     vRawSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_22:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_23:
   \   00000000   0x........         DC32     vRawSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_24:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_25:
   \   00000000   0x........         DC32     vRawSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_26:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_27:
   \   00000000   0x........         DC32     vRawSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_28:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_29:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_30:
   \   00000000   0x........         DC32     swtSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_31:
   \   00000000   0x........         DC32     WaveRecord_flgSDO7Finish

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_32:
   \   00000000   0x........         DC32     TestSDO7_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_33:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_34:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_35:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_36:
   \   00000000   0x........         DC32     WaveRecord_flgSDO8Finish

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_37:
   \   00000000   0x........         DC32     TestSDO8_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_38:
   \   00000000   0x........         DC32     hspi6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_39:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_40:
   \   00000000   0x........         DC32     pDataMic7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_41:
   \   00000000   0x........         DC32     pDataMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_42:
   \   00000000   0x........         DC32     Filter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_43:
   \   00000000   0x........         DC32     Filter+0x34
   1767          
   1768          
   1769          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DMA2_Stream5_IRQHandler
         8   -> HAL_DMA_IRQHandler
       8   DMA2_Stream6_IRQHandler
         8   -> HAL_DMA_IRQHandler
      32   HAL_SPI_MspInit
        32   -> HAL_DMA_DeInit
        32   -> HAL_DMA_Init
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       8   HAL_SPI_RxCpltCallback
         8   -> HAL_SPI_Receive_DMA
       8   I2S1_Init
         8   -> HAL_I2S_Init
       8   I2S2_Init
         8   -> HAL_I2S_Init
       8   MIC1TO6_Init
         8   -> HAL_Delay
         8   -> HAL_GPIO_ReadPin
         8   -> I2S1_Init
         8   -> I2S2_Init
         8   -> SPI4_Init
         8   -> SPI5_Init
         8   -> SPI6_Init
         8   -> StartRecMic7_8
       8   Mic7Rec
         8   -> SPI5_Init
       8   Mic8Rec
         8   -> SPI6_Init
      16   PDM2PCMSDO78
        16   -> PDM_Filter_64_LSB
       0   RecordUpdBuf
       8   SPI1_IRQHandler
         8   -> SPI_I2S_ReceiveData
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
       8   SPI2_IRQHandler
         8   -> HAL_GPIO_ReadPin
         8   -> SPI_I2S_ReceiveData
       8   SPI4_IRQHandler
         8   -> HAL_GPIO_ReadPin
         8   -> SPI_I2S_ReceiveData
       8   SPI4_Init
         8   -> HAL_SPI_Init
       8   SPI5_IRQHandler
         8   -> PDM_Filter_64_LSB
         8   -> SPI_I2S_ReceiveData
       8   SPI5_Init
         8   -> HAL_SPI_Init
         8   -> PDM_Filter_Init
       8   SPI6_IRQHandler
         8   -> PDM_Filter_64_LSB
         8   -> SPI_I2S_ReceiveData
       8   SPI6_Init
         8   -> HAL_SPI_Init
       0   SPI_I2S_ReceiveData
       0   SPI_I2S_SendData
       8   StartRecMic7_8
         8   -> HAL_SPI_Receive_DMA
      16   mySPI_SendData
        16   -> SPI_I2S_ReceiveData
        16   -> SPI_I2S_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_15
       4  ??DataTable13_16
       4  ??DataTable13_17
       4  ??DataTable13_18
       4  ??DataTable13_19
       4  ??DataTable13_2
       4  ??DataTable13_20
       4  ??DataTable13_21
       4  ??DataTable13_22
       4  ??DataTable13_23
       4  ??DataTable13_24
       4  ??DataTable13_25
       4  ??DataTable13_26
       4  ??DataTable13_27
       4  ??DataTable13_28
       4  ??DataTable13_29
       4  ??DataTable13_3
       4  ??DataTable13_30
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
       4  ??DataTable16
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable18_8
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_10
       4  ??DataTable19_11
       4  ??DataTable19_12
       4  ??DataTable19_13
       4  ??DataTable19_14
       4  ??DataTable19_15
       4  ??DataTable19_16
       4  ??DataTable19_17
       4  ??DataTable19_18
       4  ??DataTable19_19
       4  ??DataTable19_2
       4  ??DataTable19_20
       4  ??DataTable19_21
       4  ??DataTable19_22
       4  ??DataTable19_23
       4  ??DataTable19_24
       4  ??DataTable19_25
       4  ??DataTable19_26
       4  ??DataTable19_27
       4  ??DataTable19_28
       4  ??DataTable19_29
       4  ??DataTable19_3
       4  ??DataTable19_30
       4  ??DataTable19_31
       4  ??DataTable19_32
       4  ??DataTable19_33
       4  ??DataTable19_34
       4  ??DataTable19_35
       4  ??DataTable19_36
       4  ??DataTable19_37
       4  ??DataTable19_38
       4  ??DataTable19_39
       4  ??DataTable19_4
       4  ??DataTable19_40
       4  ??DataTable19_41
       4  ??DataTable19_42
       4  ??DataTable19_43
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
   32928  Buffer1
   32928  Buffer2
   32928  Buffer3
      12  DMA2_Stream5_IRQHandler
      12  DMA2_Stream6_IRQHandler
     104  Filter
    1482  HAL_SPI_MspInit
     182  HAL_SPI_RxCpltCallback
      94  I2S1_Init
       2  I2S1_stNipple
       1  I2S1_stPosShft
      94  I2S2_Init
       1  I2S2_stLR
       1  I2S2_stLROld
       2  I2S2_stNipple
       1  I2S2_stPosShft
     174  MIC1TO6_Init
       1  Main_stLR
       1  Main_stLROld
       8  Mic7Rec
       8  Mic8Rec
     898  PDM2PCMSDO78
     732  RecordUpdBuf
     384  SPI1_IRQHandler
     274  SPI1_Ini
       2  SPI1_stNipple
     388  SPI2_IRQHandler
     494  SPI4_IRQHandler
     126  SPI4_Init
       2  SPI4_stNipple
       1  SPI4_stPosShft
     236  SPI5_IRQHandler
     250  SPI5_Init
     224  SPI6_IRQHandler
     124  SPI6_Init
       6  SPI_I2S_ReceiveData
       6  SPI_I2S_SendData
      52  StartRecMic7_8
    8192  TestSDO12
    8192  TestSDO34
    8192  TestSDO56
    8192  TestSDO7
    8192  TestSDO7_1
    8192  TestSDO8
    8192  TestSDO8_1
       2  WaveRec_idxTest
       1  WaveRecord_flgIni
       1  WaveRecord_flgInt
       1  WaveRecord_flgSDO7Finish
       1  WaveRecord_flgSDO8Finish
       4  bufPCMSens7
       4  bufPCMSens8
       2  cntPos
       2  cntPos7
       2  cntStrt
       2  cntTransFinish
      80  hdma_spi2_tx
      80  hdma_spi3_tx
      80  hdma_spi5_rx
      80  hdma_spi6_rx
      64  hi2s1
      64  hi2s2
     100  hspi1
     100  hspi2
     100  hspi5
     100  hspi6
       2  iSDO12
       2  iSDO34
       2  iSDO56
       2  idxFrmPDMMic8
       2  idxMic7
       2  idxMic8
     100  mySPI_SendData
     128  pDataMic7
     128  pDataMic8
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins
       1  stLROld
       1  swtSDO7
       1  swtSDO8
       2  vRawSens1
       2  vRawSens2
       2  vRawSens3
       2  vRawSens4
       2  vRawSens5
       2  vRawSens6

 
 58 892 bytes in section .bss
 98 784 bytes in section .bss  (abs)
  6 796 bytes in section .text
 
   6 796 bytes of CODE memory
 157 676 bytes of DATA memory

Errors: none
Warnings: 11
