###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       29/Mar/2016  20:13:52
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          
      8          
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "waverecorder.h" 
     11          #include "string.h"
     12          //#include "stm32f7xx_hal_spi.h"
     13          #include "stm32f7xx_hal.h"
     14          #include "pdm_filter.h"
     15          #include "DSP.h"
     16          
     17          
     18          /* Private typedef -----------------------------------------------------------*/
     19          /* Private define ------------------------------------------------------------*/
     20          
     21          
     22          /* SPI Configuration defines */
     23          #define SPI_SCK_PIN                       GPIO_PIN_10
     24          #define SPI_SCK_GPIO_PORT                 GPIOB
     25          #define SPI_SCK_GPIO_CLK                  1
     26          #define SPI_SCK_SOURCE                    1
     27          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     28          
     29          #define SPI_MOSI_PIN                      GPIO_PIN_3
     30          #define SPI_MOSI_GPIO_PORT                GPIOC
     31          #define SPI_MOSI_GPIO_CLK                 1
     32          #define SPI_MOSI_SOURCE                   1
     33          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     34          
     35          
     36          /* sop1hc */
     37          #define SPI1_SCK_PIN                       GPIO_PIN_5
     38          #define SPI1_SCK_GPIO_PORT                 GPIOA
     39          #define SPI1_SCK_GPIO_CLK                  1
     40          #define SPI1_SCK_SOURCE                    1
     41          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     42          
     43          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     44          #define SPI1_MOSI_GPIO_PORT                GPIOA
     45          #define SPI1_MOSI_GPIO_CLK                 1
     46          #define SPI1_MOSI_SOURCE                   1
     47          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     48          
     49          #define SPI1_MISO_PIN                      GPIO_PIN_6
     50          #define SPI1_MISO_GPIO_PORT                GPIOA
     51          #define SPI1_MISO_GPIO_CLK                 1
     52          #define SPI1_MISO_SOURCE                   1
     53          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     54          
     55          
     56          
     57          

   \                                 In section .bss, align 2
     58          uint16_t idxMic8=0;
   \                     idxMic8:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     59          uint16_t idxMic7=0;
   \                     idxMic7:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     60          uint8_t pHeaderBuff[44];
   \                     pHeaderBuff:
   \   00000000                      DS8 44
     61          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];

   \                                 In section .bss, align 2
     62          uint16_t volatile cntTransFinish;
   \                     cntTransFinish:
   \   00000000                      DS8 2
     63          
     64          /* Private macro -------------------------------------------------------------*/
     65          /* Private variables ---------------------------------------------------------*/
     66          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     67          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     68          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     69          extern WAVE_FormatTypeDef WaveFormat;
     70          extern FIL WavFile;
     71          extern AUDIO_DEMO_StateMachine AudioDemo;
     72          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     73          extern __IO uint8_t buffer_switch;
     74          extern __IO uint8_t volume;
     75          extern SPI_HandleTypeDef hspi4,hspi1;
     76          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     77          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     78          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     79          extern __IO uint16_t  I2S2_idxTmp;
     80          extern SPI_HandleTypeDef     hspi4;
     81          extern DMA_HandleTypeDef     DmaHandle;
     82          
     83          #ifndef CS43L22_PLAY
     84          extern __IO uint8_t flgDlyUpd; 
     85          extern __IO uint32_t XferCplt;
     86          extern __IO uint16_t  idxSPI5DataBuf3;
     87          #endif
     88          

   \                                 In section .bss, align 4
     89          int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO12:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
     90          int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO34:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
     91          int16_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO56:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
     92          uint16_t TestSDO7[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO7:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
     93          uint16_t TestSDO8[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO8:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
     94          uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO7_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
     95          uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
   \                     TestSDO8_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 2
     96          __IO uint16_t  WaveRec_idxTest;
   \                     WaveRec_idxTest:
   \   00000000                      DS8 2
     97          
     98          

   \                                 In section .bss, align 4
     99          SPI_HandleTypeDef hspi1,hspi2;
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
    100          SPI_HandleTypeDef spi1_ins,spi2_ins;
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
    101          I2S_HandleTypeDef hi2s1;
   \                     hi2s1:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
    102          I2S_HandleTypeDef hi2s2;
   \                     hi2s2:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
    103          SPI_HandleTypeDef hspi5,hspi6;
   \                     hspi5:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi6:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
    104          DMA_HandleTypeDef hdma_spi2_tx;
   \                     hdma_spi2_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
    105          DMA_HandleTypeDef hdma_spi3_tx;
   \                     hdma_spi3_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
    106          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
   \                     hdma_spi5_rx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi6_rx:
   \   00000000                      DS8 80
    107          
    108          #if USB_STREAMING

   \                                 In section .bss, align 2
    109          __IO uint16_t idxFrmPDMMic8;
   \                     idxFrmPDMMic8:
   \   00000000                      DS8 2
    110          #endif
    111          

   \                                 In section .bss, align 4
    112          uint16_t *bufPCMSens7;
   \                     bufPCMSens7:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    113          uint16_t *bufPCMSens8;
   \                     bufPCMSens8:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
    114          __IO uint16_t cntPos;
   \                     cntPos:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    115          __IO uint16_t cntPos7;
   \                     cntPos7:
   \   00000000                      DS8 2
    116          __IO static uint16_t iBuff;
    117          __IO static uint32_t uwVolume = 70;

   \                                 In section .bss, align 4
    118          __IO PDMFilter_InitStruct Filter[2];
   \                     Filter:
   \   00000000                      DS8 104

   \                                 In section .bss, align 4
    119          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
   \                     pDataMic8:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
    120          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
   \                     pDataMic7:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
    121          __IO int16_t   pPDM2PCM[16];
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
    122          __IO uint16_t cntStrt;
   \                     cntStrt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
    123          __IO uint8_t WaveRecord_flgInt;
   \                     WaveRecord_flgInt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    124          uint8_t WaveRecord_flgIni;
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1
    125          

   \                                 In section .bss, align 2
    126          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
   \                     vRawSens1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     vRawSens2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     vRawSens4:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     vRawSens3:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     vRawSens5:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     vRawSens6:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    127          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
   \                     SPI1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S2_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     SPI4_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    128          __IO uint16_t iSDO12,iSDO34,iSDO56;
   \                     iSDO12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO34:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO56:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
    129          __IO uint8_t swtSDO7,swtSDO8;
   \                     swtSDO7:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     swtSDO8:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    130          __IO uint8_t WaveRecord_flgSDO7Finish, WaveRecord_flgSDO8Finish;
   \                     WaveRecord_flgSDO7Finish:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     WaveRecord_flgSDO8Finish:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    131          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
   \                     I2S1_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     SPI4_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    132          __IO uint8_t I2S2_stLR, I2S2_stLROld;
   \                     I2S2_stLR:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stLROld:
   \   00000000                      DS8 1
    133          
    134          /* Private function prototypes -----------------------------------------------*/
    135          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    136          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    137          static void I2S1_Init(void);
    138          static void I2S2_Init(void);
    139          
    140          #if EXT_RAM
    141          #pragma location=SDRAM_BANK_ADDR
    142          #endif

   \                                 In section .bss, at 0xc0000000
    143          Mic_Array_Data Buffer1;
   \                     Buffer1:
   \   00000000                      DS8 32928
    144          #if EXT_RAM
    145          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)
    146          #endif

   \                                 In section .bss, at 0xc00080a0
    147          Mic_Array_Data Buffer2;
   \                     Buffer2:
   \   00000000                      DS8 32928
    148          #if EXT_RAM
    149          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)
    150          #endif

   \                                 In section .bss, at 0xc0010140
    151          Mic_Array_Data Buffer3;
   \                     Buffer3:
   \   00000000                      DS8 32928
    152          

   \                                 In section .text, align 2, keep-with-next
    153          void SPI1_Ini(void)
    154          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    155            GPIO_InitTypeDef GPIO_InitStructure;
    156          
    157           
    158             	 
    159            /* Enable SCK, MOSI and MISO GPIO clocks */
    160            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40023844
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable12  ;; 0x40023844
   \   00000012   0x6008             STR      R0,[R1, #+0]
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40023844
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF410 0x5080      ANDS     R0,R0,#0x1000
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x9800             LDR      R0,[SP, #+0]
    161            __HAL_RCC_GPIOA_CLK_ENABLE();
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x40023830
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable12_1  ;; 0x40023830
   \   00000030   0x6008             STR      R0,[R1, #+0]
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable12_1  ;; 0x40023830
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000003C   0x9000             STR      R0,[SP, #+0]
   \   0000003E   0x9800             LDR      R0,[SP, #+0]
    162          
    163            
    164            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x9002             STR      R0,[SP, #+8]
    165            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0x9003             STR      R0,[SP, #+12]
    166            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
   \   00000048   0x2003             MOVS     R0,#+3
   \   0000004A   0x9004             STR      R0,[SP, #+16]
    167          
    168            /* SPI SCK pin configuration */
    169            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
   \   0000004C   0x2005             MOVS     R0,#+5
   \   0000004E   0x9005             STR      R0,[SP, #+20]
    170            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
   \   00000050   0x2020             MOVS     R0,#+32
   \   00000052   0x9001             STR      R0,[SP, #+4]
    171            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   00000054   0xA901             ADD      R1,SP,#+4
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x40020000
   \   0000005A   0x.... 0x....      BL       HAL_GPIO_Init
    172          
    173            /* SPI  MOSI pin configuration */
    174            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x9005             STR      R0,[SP, #+20]
    175            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
   \   00000062   0x2080             MOVS     R0,#+128
   \   00000064   0x9001             STR      R0,[SP, #+4]
    176            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   00000066   0xA901             ADD      R1,SP,#+4
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x40020000
   \   0000006C   0x.... 0x....      BL       HAL_GPIO_Init
    177          
    178            /* SPI MISO pin configuration */
    179            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x9005             STR      R0,[SP, #+20]
    180            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
   \   00000074   0x2040             MOVS     R0,#+64
   \   00000076   0x9001             STR      R0,[SP, #+4]
    181            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   00000078   0xA901             ADD      R1,SP,#+4
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x40020000
   \   0000007E   0x.... 0x....      BL       HAL_GPIO_Init
    182          
    183            /* SPI configuration -------------------------------------------------------*/
    184            //SPI_I2S_DeInit(SPI1);
    185            
    186            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   00000082   0xF44F 0x6080      MOV      R0,#+1024
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   0000008A   0x6088             STR      R0,[R1, #+8]
    187            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000008C   0xF44F 0x6070      MOV      R0,#+3840
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   00000094   0x60C8             STR      R0,[R1, #+12]
    188            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   0000009C   0x6108             STR      R0,[R1, #+16]
    189            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   000000A4   0x6148             STR      R0,[R1, #+20]
    190            spi1_ins.Init.NSS = SPI_NSS_SOFT;
   \   000000A6   0xF44F 0x7000      MOV      R0,#+512
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   000000AE   0x6188             STR      R0,[R1, #+24]
    191            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
   \   000000B0   0x2028             MOVS     R0,#+40
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   000000B6   0x61C8             STR      R0,[R1, #+28]
    192            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   000000BE   0x6208             STR      R0,[R1, #+32]
    193            spi1_ins.Init.CRCPolynomial = 7;
   \   000000C0   0x2007             MOVS     R0,#+7
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   000000C6   0x62C8             STR      R0,[R1, #+44]
    194            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable12_3
   \   000000CE   0x6048             STR      R0,[R1, #+4]
    195            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   000000D4   0x.... 0x....      BL       HAL_SPI_Init
    196            {
    197              /* Initialization Error */
    198              //Error_Handler();
    199            }
    200            
    201           
    202            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   000000D8   0x2008             MOVS     R0,#+8
   \   000000DA   0x9001             STR      R0,[SP, #+4]
    203            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0x9002             STR      R0,[SP, #+8]
    204            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
   \   000000E0   0x2002             MOVS     R0,#+2
   \   000000E2   0x9004             STR      R0,[SP, #+16]
    205            GPIO_InitStructure.Pull = GPIO_PULLUP;
   \   000000E4   0x2001             MOVS     R0,#+1
   \   000000E6   0x9003             STR      R0,[SP, #+12]
    206            //GPIO_InitStructure.Alternate 
    207            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000E8   0xA901             ADD      R1,SP,#+4
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable12_4  ;; 0x40021000
   \   000000EE   0x.... 0x....      BL       HAL_GPIO_Init
    208          
    209            /* Deselect : Chip Select high */
    210            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000F2   0x2201             MOVS     R2,#+1
   \   000000F4   0x2108             MOVS     R1,#+8
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable12_4  ;; 0x40021000
   \   000000FA   0x.... 0x....      BL       HAL_GPIO_WritePin
    211             /* sop1hc */
    212            /* Configure the SPI interrupt priority */
    213            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000FE   0x2200             MOVS     R2,#+0
   \   00000100   0x2100             MOVS     R1,#+0
   \   00000102   0x2023             MOVS     R0,#+35
   \   00000104   0x.... 0x....      BL       HAL_NVIC_SetPriority
    214          
    215            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000108   0x2023             MOVS     R0,#+35
   \   0000010A   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    216            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    217            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    218          
    219            /* Enable SPI1  */
    220            //__HAL_SPI_ENABLE(SPI1);
    221          
    222          }
   \   0000010E   0xB007             ADD      SP,SP,#+28
   \   00000110   0xBD00             POP      {PC}             ;; return
    223          

   \                                 In section .text, align 2, keep-with-next
    224          void mySPI_SendData(uint8_t adress, uint8_t data)
    225          {
   \                     mySPI_SendData: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    226           
    227          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x6880             LDR      R0,[R0, #+8]
   \   0000000E   0x0780             LSLS     R0,R0,#+30
   \   00000010   0xD5F9             BPL.N    ??mySPI_SendData_0
    228          SPI_I2S_SendData(SPI1, adress);
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable12_5  ;; 0x40013000
   \   0000001C   0x.... 0x....      BL       SPI_I2S_SendData
    229          
    230          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x6880             LDR      R0,[R0, #+8]
   \   00000028   0x07C0             LSLS     R0,R0,#+31
   \   0000002A   0xD5F9             BPL.N    ??mySPI_SendData_1
    231          SPI_I2S_ReceiveData(SPI1);
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable12_5  ;; 0x40013000
   \   00000030   0x.... 0x....      BL       SPI_I2S_ReceiveData
    232          
    233          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x6880             LDR      R0,[R0, #+8]
   \   0000003C   0x0780             LSLS     R0,R0,#+30
   \   0000003E   0xD4F9             BMI.N    ??mySPI_SendData_2
    234          SPI_I2S_SendData(SPI1, data);
   \   00000040   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000042   0x0029             MOVS     R1,R5
   \   00000044   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable12_5  ;; 0x40013000
   \   0000004A   0x.... 0x....      BL       SPI_I2S_SendData
    235          
    236          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable12_3
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x6880             LDR      R0,[R0, #+8]
   \   00000056   0x07C0             LSLS     R0,R0,#+31
   \   00000058   0xD4F9             BMI.N    ??mySPI_SendData_3
    237          SPI_I2S_ReceiveData(SPI1);
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable12_5  ;; 0x40013000
   \   0000005E   0x.... 0x....      BL       SPI_I2S_ReceiveData
    238           
    239          }
   \   00000062   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    240          
    241          /**
    242            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    243            * @param  None
    244            * @retval None
    245          */
    246          

   \                                 In section .text, align 2, keep-with-next
    247          void SPI1_IRQHandler(void)
    248          {  
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    249                int16_t tmpTest;
    250          	  static uint8_t stLR,stLROld;
                 	                 ^
Warning[Pe177]: variable "stLR" was declared but never referenced
    251          	
    252          	  /* SPI in mode Receiver ----------------------------------------------------*/
    253          	  if(
    254          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    255          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    256          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12_6
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xF140 0x80B7      BPL.W    ??SPI1_IRQHandler_0
    257          	  {
    258          	
    259          
    260          	   tmpTest =  (int16_t)SPI_I2S_ReceiveData(SPI1);
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable12_5  ;; 0x40013000
   \   00000014   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000018   0x0004             MOVS     R4,R0
    261          	
    262          	   /* Left-Right Mic data */
    263          	   //stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    264          	
    265          		if (I2S2_stLR==GPIO_PIN_SET)
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable12_7
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD153             BNE.N    ??SPI1_IRQHandler_1
    266          		{
    267          		       if((stLROld==GPIO_PIN_SET)&&(WaveRec_idxSens1<2*AUDIO_OUT_BUFFER_SIZE))  
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable12_8
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xF040 0x80A7      BNE.W    ??SPI1_IRQHandler_0
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   00000034   0x8800             LDRH     R0,[R0, #+0]
   \   00000036   0xF5B0 0x6F00      CMP      R0,#+2048
   \   0000003A   0xF280 0x80A0      BGE.W    ??SPI1_IRQHandler_0
    268          		       {
    269          				   vRawSens1 = (tmpTest);
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable12_10
   \   00000042   0x8004             STRH     R4,[R0, #+0]
    270          			       WaveRec_idxTest++;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   00000048   0x8800             LDRH     R0,[R0, #+0]
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable12_11
   \   00000050   0x8008             STRH     R0,[R1, #+0]
    271          				   /* Recording Audio Data */						 
    272          				   switch (buffer_switch)
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD003             BEQ.N    ??SPI1_IRQHandler_2
   \   0000005C   0x2802             CMP      R0,#+2
   \   0000005E   0xD023             BEQ.N    ??SPI1_IRQHandler_3
   \   00000060   0xD311             BCC.N    ??SPI1_IRQHandler_4
   \   00000062   0xE032             B.N      ??SPI1_IRQHandler_5
    273          				   {
    274          						case BUF1_PLAY:
    275          								Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;								
   \                     ??SPI1_IRQHandler_2: (+1)
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   00000068   0x8800             LDRH     R0,[R0, #+0]
   \   0000006A   0x1C41             ADDS     R1,R0,#+1
   \   0000006C   0x.... 0x....      LDR.W    R2,??DataTable12_9
   \   00000070   0x8011             STRH     R1,[R2, #+0]
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable12_10
   \   00000076   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000007A   0x.... 0x....      LDR.W    R2,??DataTable12_13  ;; 0xc00080a0
   \   0000007E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000080   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
    276          								break;
   \   00000084   0xE07B             B.N      ??SPI1_IRQHandler_0
    277          						case BUF2_PLAY:
    278          								Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??SPI1_IRQHandler_4: (+1)
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   0000008A   0x8800             LDRH     R0,[R0, #+0]
   \   0000008C   0x1C41             ADDS     R1,R0,#+1
   \   0000008E   0x.... 0x....      LDR.W    R2,??DataTable12_9
   \   00000092   0x8011             STRH     R1,[R2, #+0]
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable12_10
   \   00000098   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R2,??DataTable12_14  ;; 0xc0010140
   \   000000A0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A2   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
    279          								break;
   \   000000A6   0xE06A             B.N      ??SPI1_IRQHandler_0
    280          						case BUF3_PLAY:
    281          								Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;									
   \                     ??SPI1_IRQHandler_3: (+1)
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   000000AC   0x8800             LDRH     R0,[R0, #+0]
   \   000000AE   0x1C41             ADDS     R1,R0,#+1
   \   000000B0   0x.... 0x....      LDR.W    R2,??DataTable12_9
   \   000000B4   0x8011             STRH     R1,[R2, #+0]
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable12_10
   \   000000BA   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000BE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000C0   0x0040             LSLS     R0,R0,#+1
   \   000000C2   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000000C6   0x8001             STRH     R1,[R0, #+0]
    282          								break;
   \   000000C8   0xE059             B.N      ??SPI1_IRQHandler_0
    283          						default:
    284          								break; 
   \                     ??SPI1_IRQHandler_5: (+1)
   \   000000CA   0xE058             B.N      ??SPI1_IRQHandler_0
    285          				   
    286          				   	}
    287                                             
    288                              
    289          		       	}
    290          		}
    291          		else
    292          		{		
    293          			if ((stLROld==GPIO_PIN_RESET)&&(WaveRec_idxSens1<2*AUDIO_OUT_BUFFER_SIZE))  
   \                     ??SPI1_IRQHandler_1: (+1)
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable12_8
   \   000000D0   0x7800             LDRB     R0,[R0, #+0]
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD153             BNE.N    ??SPI1_IRQHandler_0
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   000000DA   0x8800             LDRH     R0,[R0, #+0]
   \   000000DC   0xF5B0 0x6F00      CMP      R0,#+2048
   \   000000E0   0xDA4D             BGE.N    ??SPI1_IRQHandler_0
    294          			{
    295          				vRawSens2 = (tmpTest);
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable12_15
   \   000000E6   0x8004             STRH     R4,[R0, #+0]
    296          				WaveRec_idxTest++;
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable12_11
   \   000000EC   0x8800             LDRH     R0,[R0, #+0]
   \   000000EE   0x1C40             ADDS     R0,R0,#+1
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable12_11
   \   000000F4   0x8008             STRH     R0,[R1, #+0]
    297          				/* Recording Audio Data */						 
    298          				switch (buffer_switch)
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   000000FA   0x7800             LDRB     R0,[R0, #+0]
   \   000000FC   0x2800             CMP      R0,#+0
   \   000000FE   0xD003             BEQ.N    ??SPI1_IRQHandler_6
   \   00000100   0x2802             CMP      R0,#+2
   \   00000102   0xD029             BEQ.N    ??SPI1_IRQHandler_7
   \   00000104   0xD314             BCC.N    ??SPI1_IRQHandler_8
   \   00000106   0xE03A             B.N      ??SPI1_IRQHandler_9
    299          				{
    300          					case BUF1_PLAY:
    301          						Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;								
   \                     ??SPI1_IRQHandler_6: (+1)
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable12_16
   \   0000010C   0x8800             LDRH     R0,[R0, #+0]
   \   0000010E   0x1C41             ADDS     R1,R0,#+1
   \   00000110   0x.... 0x....      LDR.W    R2,??DataTable12_16
   \   00000114   0x8011             STRH     R1,[R2, #+0]
   \   00000116   0x.... 0x....      LDR.W    R1,??DataTable12_15
   \   0000011A   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000011E   0x.... 0x....      LDR.W    R2,??DataTable12_13  ;; 0xc00080a0
   \   00000122   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000124   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   00000128   0xF241 0x0214      MOVW     R2,#+4116
   \   0000012C   0x5211             STRH     R1,[R2, R0]
    302          						break;
   \   0000012E   0xE026             B.N      ??SPI1_IRQHandler_0
    303          					case BUF2_PLAY:
    304          						Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \                     ??SPI1_IRQHandler_8: (+1)
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable12_16
   \   00000134   0x8800             LDRH     R0,[R0, #+0]
   \   00000136   0x1C41             ADDS     R1,R0,#+1
   \   00000138   0x.... 0x....      LDR.W    R2,??DataTable12_16
   \   0000013C   0x8011             STRH     R1,[R2, #+0]
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable12_15
   \   00000142   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000146   0x.... 0x....      LDR.W    R2,??DataTable12_14  ;; 0xc0010140
   \   0000014A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000014C   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   00000150   0xF241 0x0214      MOVW     R2,#+4116
   \   00000154   0x5211             STRH     R1,[R2, R0]
    305          						break;
   \   00000156   0xE012             B.N      ??SPI1_IRQHandler_0
    306          					case BUF3_PLAY:
    307          						Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
   \                     ??SPI1_IRQHandler_7: (+1)
   \   00000158   0x.... 0x....      LDR.W    R0,??DataTable12_16
   \   0000015C   0x8800             LDRH     R0,[R0, #+0]
   \   0000015E   0x1C41             ADDS     R1,R0,#+1
   \   00000160   0x.... 0x....      LDR.W    R2,??DataTable12_16
   \   00000164   0x8011             STRH     R1,[R2, #+0]
   \   00000166   0x.... 0x....      LDR.W    R1,??DataTable12_15
   \   0000016A   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000016E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000170   0x0040             LSLS     R0,R0,#+1
   \   00000172   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000176   0xF241 0x0214      MOVW     R2,#+4116
   \   0000017A   0x5211             STRH     R1,[R2, R0]
    308          						break;
   \   0000017C   0xE7FF             B.N      ??SPI1_IRQHandler_0
    309          					default:
    310          						break; 
    311          
    312          			   }
    313          
    314          			}
    315          		
    316          		} 	
    317          
    318          		
    319          	}
    320          	   
    321          
    322          #if 0
    323                 if (iSDO12<4*AUDIO_OUT_BUFFER_SIZE)
    324          	   {
    325                     TestSDO12[iSDO12++]=tmpTest;
    326          	   }
    327          	   else
    328          	   {
    329                     iSDO12=0;
    330          	   }
    331          		if ((WaveRec_idxSens1 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens2 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    332          	//			  &&(stLR!=stLROld))
    333          		{
    334          	/*-------------------------------------------------------------------------------------------------------------
    335          				  
    336          		Sequence  Record Data					  Processing Data				  Player Data
    337          				  
    338          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    339          				  
    340          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    341          				  
    342          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    343          	 ---------------------------------------------------------------------------------------------------------------*/
    344          				  /* Recording Audio Data */						 
    345          				   switch (buffer_switch)
    346          				   {
    347          							case BUF1_PLAY:
    348          
    349                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    350          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    351          							    else
    352          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    353          
    354          	
    355          									break;
    356          							case BUF2_PLAY:
    357                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    358          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    359          							    else
    360          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;	
    361          
    362          									break;
    363          							case BUF3_PLAY:
    364                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    365          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    366          							    else
    367          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    368          
    369          									break;
    370          							default:
    371          									break; 
    372          				   }
    373          			
    374          		 } 
    375          #endif		
    376          
    377          		/* Update Old value */	  
    378          		stLROld=I2S2_stLR;
   \                     ??SPI1_IRQHandler_9: (+1)
   \                     ??SPI1_IRQHandler_0: (+1)
   \   0000017E   0x.... 0x....      LDR.W    R0,??DataTable12_7
   \   00000182   0x7800             LDRB     R0,[R0, #+0]
   \   00000184   0x.... 0x....      LDR.W    R1,??DataTable12_8
   \   00000188   0x7008             STRB     R0,[R1, #+0]
    379          
    380          				 
    381          } 	 
   \   0000018A   0xBD10             POP      {R4,PC}          ;; return
   \   0000018C                      REQUIRE Buffer2
   \   0000018C                      REQUIRE Buffer3
   \   0000018C                      REQUIRE Buffer1

   \                                 In section .bss, align 1
   \                     ??stLROld:
   \   00000000                      DS8 1
    382          
    383          
    384          
    385          
    386          /**
    387            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    388            * @param  None
    389            * @retval None
    390          */
    391          

   \                                 In section .text, align 2, keep-with-next
    392          void SPI2_IRQHandler(void)
    393          {      
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    394              int16_t app;
    395              
    396          
    397            /* Check if data are available in SPI Data register */
    398             if (
    399          //	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    400          //   	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    401             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    402             	  )
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12_17
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xF140 0x80BF      BPL.W    ??SPI2_IRQHandler_0
    403             {
    404              
    405               app = (int16_t)SPI_I2S_ReceiveData(SPI2);   
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable12_18  ;; 0x40003800
   \   00000014   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000018   0x0004             MOVS     R4,R0
    406               //SPI_I2S_SendData(SPI2, 3333);
    407          
    408          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   0000001A   0x2110             MOVS     R1,#+16
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x40020000
   \   00000020   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable12_7
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    409          
    410          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable12_7
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2801             CMP      R0,#+1
   \   00000032   0xD154             BNE.N    ??SPI2_IRQHandler_1
    411          	 {		
    412          		if ((I2S2_stLROld==GPIO_PIN_RESET)&&(WaveRec_idxSens3<2*AUDIO_OUT_BUFFER_SIZE)) 
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable12_19
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xF040 0x80A1      BNE.W    ??SPI2_IRQHandler_2
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable12_20
   \   00000044   0x8800             LDRH     R0,[R0, #+0]
   \   00000046   0xF5B0 0x6F00      CMP      R0,#+2048
   \   0000004A   0xF280 0x809A      BGE.W    ??SPI2_IRQHandler_2
    413          		{
    414          			vRawSens3 = app;
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable12_21
   \   00000052   0x8004             STRH     R4,[R0, #+0]
    415          			switch (buffer_switch)
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD003             BEQ.N    ??SPI2_IRQHandler_3
   \   0000005E   0x2802             CMP      R0,#+2
   \   00000060   0xD029             BEQ.N    ??SPI2_IRQHandler_4
   \   00000062   0xD314             BCC.N    ??SPI2_IRQHandler_5
   \   00000064   0xE03A             B.N      ??SPI2_IRQHandler_6
    416          			{
    417          				case BUF1_PLAY:
    418          					Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;								
   \                     ??SPI2_IRQHandler_3: (+1)
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable12_20
   \   0000006A   0x8800             LDRH     R0,[R0, #+0]
   \   0000006C   0x1C41             ADDS     R1,R0,#+1
   \   0000006E   0x.... 0x....      LDR.W    R2,??DataTable12_20
   \   00000072   0x8011             STRH     R1,[R2, #+0]
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   00000078   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000007C   0x.... 0x....      LDR.W    R2,??DataTable12_13  ;; 0xc00080a0
   \   00000080   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000082   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   00000086   0xF242 0x0228      MOVW     R2,#+8232
   \   0000008A   0x5211             STRH     R1,[R2, R0]
    419          					break;
   \   0000008C   0xE079             B.N      ??SPI2_IRQHandler_2
    420          				case BUF2_PLAY:
    421          					Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \                     ??SPI2_IRQHandler_5: (+1)
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable12_20
   \   00000092   0x8800             LDRH     R0,[R0, #+0]
   \   00000094   0x1C41             ADDS     R1,R0,#+1
   \   00000096   0x.... 0x....      LDR.W    R2,??DataTable12_20
   \   0000009A   0x8011             STRH     R1,[R2, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   000000A0   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000A4   0x.... 0x....      LDR.W    R2,??DataTable12_14  ;; 0xc0010140
   \   000000A8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000AA   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000000AE   0xF242 0x0228      MOVW     R2,#+8232
   \   000000B2   0x5211             STRH     R1,[R2, R0]
    422          					break;
   \   000000B4   0xE065             B.N      ??SPI2_IRQHandler_2
    423          				case BUF3_PLAY:
    424          					Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;									
   \                     ??SPI2_IRQHandler_4: (+1)
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable12_20
   \   000000BA   0x8800             LDRH     R0,[R0, #+0]
   \   000000BC   0x1C41             ADDS     R1,R0,#+1
   \   000000BE   0x.... 0x....      LDR.W    R2,??DataTable12_20
   \   000000C2   0x8011             STRH     R1,[R2, #+0]
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable12_21
   \   000000C8   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000CC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CE   0x0040             LSLS     R0,R0,#+1
   \   000000D0   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000000D4   0xF242 0x0228      MOVW     R2,#+8232
   \   000000D8   0x5211             STRH     R1,[R2, R0]
    425          					break;
   \   000000DA   0xE052             B.N      ??SPI2_IRQHandler_2
    426          				default:
    427          					break; 
   \                     ??SPI2_IRQHandler_6: (+1)
   \   000000DC   0xE051             B.N      ??SPI2_IRQHandler_2
    428          			}
    429          		}
    430          		
    431          	 }
    432          	 else
    433          	 {
    434                      if ((I2S2_stLROld==GPIO_PIN_SET)&&(WaveRec_idxSens4<2*AUDIO_OUT_BUFFER_SIZE))   
   \                     ??SPI2_IRQHandler_1: (+1)
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable12_19
   \   000000E2   0x7800             LDRB     R0,[R0, #+0]
   \   000000E4   0x2801             CMP      R0,#+1
   \   000000E6   0xD14C             BNE.N    ??SPI2_IRQHandler_2
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable12_22
   \   000000EC   0x8800             LDRH     R0,[R0, #+0]
   \   000000EE   0xF5B0 0x6F00      CMP      R0,#+2048
   \   000000F2   0xDA46             BGE.N    ??SPI2_IRQHandler_2
    435                      {
    436          				vRawSens4 =app;
   \   000000F4   0x.... 0x....      LDR.W    R0,??DataTable12_23
   \   000000F8   0x8004             STRH     R4,[R0, #+0]
    437          				switch (buffer_switch)
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   000000FE   0x7800             LDRB     R0,[R0, #+0]
   \   00000100   0x2800             CMP      R0,#+0
   \   00000102   0xD003             BEQ.N    ??SPI2_IRQHandler_7
   \   00000104   0x2802             CMP      R0,#+2
   \   00000106   0xD029             BEQ.N    ??SPI2_IRQHandler_8
   \   00000108   0xD314             BCC.N    ??SPI2_IRQHandler_9
   \   0000010A   0xE03A             B.N      ??SPI2_IRQHandler_10
    438          				{	 
    439          					case BUF1_PLAY:
    440          						Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;								
   \                     ??SPI2_IRQHandler_7: (+1)
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable12_22
   \   00000110   0x8800             LDRH     R0,[R0, #+0]
   \   00000112   0x1C41             ADDS     R1,R0,#+1
   \   00000114   0x.... 0x....      LDR.W    R2,??DataTable12_22
   \   00000118   0x8011             STRH     R1,[R2, #+0]
   \   0000011A   0x.... 0x....      LDR.W    R1,??DataTable12_23
   \   0000011E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000122   0x.... 0x....      LDR.W    R2,??DataTable12_13  ;; 0xc00080a0
   \   00000126   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000128   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   0000012C   0xF243 0x023C      MOVW     R2,#+12348
   \   00000130   0x5211             STRH     R1,[R2, R0]
    441          						break;
   \   00000132   0xE026             B.N      ??SPI2_IRQHandler_2
    442          					case BUF2_PLAY:
    443          						Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \                     ??SPI2_IRQHandler_9: (+1)
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable12_22
   \   00000138   0x8800             LDRH     R0,[R0, #+0]
   \   0000013A   0x1C41             ADDS     R1,R0,#+1
   \   0000013C   0x.... 0x....      LDR.W    R2,??DataTable12_22
   \   00000140   0x8011             STRH     R1,[R2, #+0]
   \   00000142   0x.... 0x....      LDR.W    R1,??DataTable12_23
   \   00000146   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000014A   0x.... 0x....      LDR.W    R2,??DataTable12_14  ;; 0xc0010140
   \   0000014E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000150   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   00000154   0xF243 0x023C      MOVW     R2,#+12348
   \   00000158   0x5211             STRH     R1,[R2, R0]
    444          						break;
   \   0000015A   0xE012             B.N      ??SPI2_IRQHandler_2
    445          					case BUF3_PLAY:
    446          						Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;									
   \                     ??SPI2_IRQHandler_8: (+1)
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable12_22
   \   00000160   0x8800             LDRH     R0,[R0, #+0]
   \   00000162   0x1C41             ADDS     R1,R0,#+1
   \   00000164   0x.... 0x....      LDR.W    R2,??DataTable12_22
   \   00000168   0x8011             STRH     R1,[R2, #+0]
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable12_23
   \   0000016E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000172   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000174   0x0040             LSLS     R0,R0,#+1
   \   00000176   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000017A   0xF243 0x023C      MOVW     R2,#+12348
   \   0000017E   0x5211             STRH     R1,[R2, R0]
    447          						break;
   \   00000180   0xE7FF             B.N      ??SPI2_IRQHandler_2
    448          					default:
    449          						break; 
    450          				}
    451                      }
    452          	 }
    453          
    454          
    455          	 
    456          #if 0
    457          	  if (iSDO34<4*AUDIO_OUT_BUFFER_SIZE)
    458          	 {
    459          		 TestSDO34[iSDO34++]=app;
    460          	 }
    461          	 else
    462          	 {
    463          		 iSDO34=0;
    464          	 }
    465          
    466          	 if ((WaveRec_idxSens3 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens4 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    467          //             &&(I2S2_stLR!=I2S2_stLROld))
    468          	 {
    469          /*-------------------------------------------------------------------------------------------------------------
    470          			  
    471          	Sequence  Record Data                     Processing Data                 Player Data
    472          			  
    473          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    474          			  
    475          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    476          			  
    477          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    478           ---------------------------------------------------------------------------------------------------------------*/
    479          		/* Recording Audio Data */			             
    480          		 switch (buffer_switch)
    481          		 {
    482          			  case BUF1_PLAY:
    483                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    484                                        Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    485                                    else
    486                                        Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			  
    487          			  break;                     
    488          			  case BUF2_PLAY:
    489                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    490                                        Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    491                                    else
    492                                        Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			   
    493          				  break;
    494          			  case BUF3_PLAY:
    495                                    if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    496                                       Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    497          		          else
    498                                       Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    499          		          break;
    500          			  default:
    501          			     break; 
    502          		 }
    503          		
    504          	 }          
    505          #endif		  
    506          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_10: (+1)
   \                     ??SPI2_IRQHandler_2: (+1)
   \   00000182   0x.... 0x....      LDR.W    R0,??DataTable12_7
   \   00000186   0x7800             LDRB     R0,[R0, #+0]
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable12_19
   \   0000018C   0x7008             STRB     R0,[R1, #+0]
    507          
    508             }
    509          
    510          }
   \                     ??SPI2_IRQHandler_0: (+1)
   \   0000018E   0xBD10             POP      {R4,PC}          ;; return
   \   00000190                      REQUIRE Buffer2
   \   00000190                      REQUIRE Buffer3
   \   00000190                      REQUIRE Buffer1
    511          
    512          

   \                                 In section .text, align 2, keep-with-next
    513          void SPI4_IRQHandler(void)
    514          {
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    515            static uint8_t Main_stLR, Main_stLROld;
    516          
    517          
    518            /* SPI in mode Receiver ----------------------------------------------------*/
    519            if(
    520          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    521          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    522               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable12_24
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xF140 0x80FA      BPL.W    ??SPI4_IRQHandler_0
    523            {
    524          
    525                  uint16_t test;
    526                  test =  SPI_I2S_ReceiveData(SPI4);
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable12_25  ;; 0x40013400
   \   00000014   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000018   0x0004             MOVS     R4,R0
    527          
    528                  /* Left-Right Mic data */
    529                  Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   0000001A   0x2110             MOVS     R1,#+16
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x40020000
   \   00000020   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable12_26
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    530          
    531                  /* STM32F746 read data from STA321MP, the data is shifted few bit     */
    532                  /* Data from STA321MP is 32bit formart                                */
    533                  /* SPI is just able to read 16 bit format                             */
    534                  /* Therefore, it needs to correct                                     */
    535                  
    536                  /* ---------------------------+++++++++++++++++++++++++++++++---------*/
    537                  /*                  ______DATAL_____              ______DATAR_____    */
    538                  /*                  _____vRawSens5__              ______vRawSens6_    */       
    539          	if (Main_stLR==GPIO_PIN_SET)
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable12_26
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2801             CMP      R0,#+1
   \   00000032   0xD16B             BNE.N    ??SPI4_IRQHandler_1
    540          	{
    541                      if (Main_stLROld==GPIO_PIN_SET)
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable13
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xD103             BNE.N    ??SPI4_IRQHandler_2
    542                      {
    543                         SPI4_stNipple = (test);    
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable12_27
   \   00000042   0x8004             STRH     R4,[R0, #+0]
   \   00000044   0xE0D8             B.N      ??SPI4_IRQHandler_3
    544                      }
    545                      else
    546                      {
    547                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI4_IRQHandler_2: (+1)
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable12_28
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable12_27
   \   00000050   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000054   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000056   0x0022             MOVS     R2,R4
   \   00000058   0x4102             ASRS     R2,R2,R0
   \   0000005A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable12_28
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0xF1D0 0x0010      RSBS     R0,R0,#+16
   \   00000066   0xFA11 0xF000      LSLS     R0,R1,R0
   \   0000006A   0x4310             ORRS     R0,R0,R2
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   00000070   0x8008             STRH     R0,[R1, #+0]
    548                         if (WaveRec_idxSens5 < (2*AUDIO_OUT_BUFFER_SIZE+5))
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable12_30
   \   00000076   0x8800             LDRH     R0,[R0, #+0]
   \   00000078   0xF640 0x0105      MOVW     R1,#+2053
   \   0000007C   0x4288             CMP      R0,R1
   \   0000007E   0xF280 0x80BB      BGE.W    ??SPI4_IRQHandler_3
    549                         {
    550                              /*-------------------------------------------------------------------------------------------------------------                                             
    551                              Sequence  Record Data                     Processing Data                 Player Data
    552                                                
    553                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    554                                                
    555                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    556                                                
    557                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    558                               ---------------------------------------------------------------------------------------------------------------*/                     
    559                               /* Recording Audio Data */			             
    560                               switch (buffer_switch)
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD003             BEQ.N    ??SPI4_IRQHandler_4
   \   0000008C   0x2802             CMP      R0,#+2
   \   0000008E   0xD029             BEQ.N    ??SPI4_IRQHandler_5
   \   00000090   0xD314             BCC.N    ??SPI4_IRQHandler_6
   \   00000092   0xE03A             B.N      ??SPI4_IRQHandler_7
    561                               {
    562                                   case BUF1_PLAY:
    563                                       Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_4: (+1)
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable12_30
   \   00000098   0x8800             LDRH     R0,[R0, #+0]
   \   0000009A   0x1C41             ADDS     R1,R0,#+1
   \   0000009C   0x.... 0x....      LDR.W    R2,??DataTable12_30
   \   000000A0   0x8011             STRH     R1,[R2, #+0]
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   000000A6   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000AA   0x.... 0x....      LDR.W    R2,??DataTable12_13  ;; 0xc00080a0
   \   000000AE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B0   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000000B4   0xF244 0x0250      MOVW     R2,#+16464
   \   000000B8   0x5211             STRH     R1,[R2, R0]
    564          
    565                                       break;
   \   000000BA   0xE09D             B.N      ??SPI4_IRQHandler_3
    566                                   case BUF2_PLAY:
    567                                       Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_6: (+1)
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable12_30
   \   000000C0   0x8800             LDRH     R0,[R0, #+0]
   \   000000C2   0x1C41             ADDS     R1,R0,#+1
   \   000000C4   0x.... 0x....      LDR.W    R2,??DataTable12_30
   \   000000C8   0x8011             STRH     R1,[R2, #+0]
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   000000CE   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000D2   0x.... 0x....      LDR.W    R2,??DataTable12_14  ;; 0xc0010140
   \   000000D6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000D8   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000000DC   0xF244 0x0250      MOVW     R2,#+16464
   \   000000E0   0x5211             STRH     R1,[R2, R0]
    568          
    569                                       break;
   \   000000E2   0xE089             B.N      ??SPI4_IRQHandler_3
    570                                   case BUF3_PLAY:
    571                                       Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_5: (+1)
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable12_30
   \   000000E8   0x8800             LDRH     R0,[R0, #+0]
   \   000000EA   0x1C41             ADDS     R1,R0,#+1
   \   000000EC   0x.... 0x....      LDR.W    R2,??DataTable12_30
   \   000000F0   0x8011             STRH     R1,[R2, #+0]
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable12_29
   \   000000F6   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000FA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000FC   0x0040             LSLS     R0,R0,#+1
   \   000000FE   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000102   0xF244 0x0250      MOVW     R2,#+16464
   \   00000106   0x5211             STRH     R1,[R2, R0]
    572          
    573                                       break;                          
   \   00000108   0xE076             B.N      ??SPI4_IRQHandler_3
    574                                   default:
    575                                       break;
   \                     ??SPI4_IRQHandler_7: (+1)
   \   0000010A   0xE075             B.N      ??SPI4_IRQHandler_3
    576                               }
    577                         }
    578          	   }
    579                  }
    580          	else
    581          	{
    582                    if (Main_stLROld==GPIO_PIN_RESET)
   \                     ??SPI4_IRQHandler_1: (+1)
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable13
   \   00000110   0x7800             LDRB     R0,[R0, #+0]
   \   00000112   0x2800             CMP      R0,#+0
   \   00000114   0xD103             BNE.N    ??SPI4_IRQHandler_8
    583                    {
    584                        SPI4_stNipple = (test);	  
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable12_27
   \   0000011A   0x8004             STRH     R4,[R0, #+0]
   \   0000011C   0xE06C             B.N      ??SPI4_IRQHandler_3
    585          
    586                    }
    587                    else
    588                    {
    589                         vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI4_IRQHandler_8: (+1)
   \   0000011E   0x.... 0x....      LDR.W    R0,??DataTable12_28
   \   00000122   0x7800             LDRB     R0,[R0, #+0]
   \   00000124   0x.... 0x....      LDR.W    R1,??DataTable12_27
   \   00000128   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000012C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000012E   0x0022             MOVS     R2,R4
   \   00000130   0x4102             ASRS     R2,R2,R0
   \   00000132   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable12_28
   \   00000138   0x7800             LDRB     R0,[R0, #+0]
   \   0000013A   0xF1D0 0x0010      RSBS     R0,R0,#+16
   \   0000013E   0xFA11 0xF000      LSLS     R0,R1,R0
   \   00000142   0x4310             ORRS     R0,R0,R2
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000148   0x8008             STRH     R0,[R1, #+0]
    590                         if (WaveRec_idxSens6 < (2*AUDIO_OUT_BUFFER_SIZE+5))
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   0000014E   0x8800             LDRH     R0,[R0, #+0]
   \   00000150   0xF640 0x0105      MOVW     R1,#+2053
   \   00000154   0x4288             CMP      R0,R1
   \   00000156   0xDA4F             BGE.N    ??SPI4_IRQHandler_3
    591                         {
    592                              /*-------------------------------------------------------------------------------------------------------------                                             
    593                              Sequence  Record Data                     Processing Data                 Player Data
    594                                                
    595                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    596                                                
    597                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    598                                                
    599                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    600                               ---------------------------------------------------------------------------------------------------------------*/                 
    601                                /* Recording Audio Data */			             
    602                               switch (buffer_switch)
   \   00000158   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   0000015C   0x7800             LDRB     R0,[R0, #+0]
   \   0000015E   0x2800             CMP      R0,#+0
   \   00000160   0xD003             BEQ.N    ??SPI4_IRQHandler_9
   \   00000162   0x2802             CMP      R0,#+2
   \   00000164   0xD029             BEQ.N    ??SPI4_IRQHandler_10
   \   00000166   0xD314             BCC.N    ??SPI4_IRQHandler_11
   \   00000168   0xE03A             B.N      ??SPI4_IRQHandler_12
    603                               {
    604                                   case BUF1_PLAY:
    605                                       Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_9: (+1)
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   0000016E   0x8800             LDRH     R0,[R0, #+0]
   \   00000170   0x1C41             ADDS     R1,R0,#+1
   \   00000172   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   00000176   0x8011             STRH     R1,[R2, #+0]
   \   00000178   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   0000017C   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000180   0x.... 0x....      LDR.W    R2,??DataTable12_13  ;; 0xc00080a0
   \   00000184   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000186   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   0000018A   0xF245 0x0264      MOVW     R2,#+20580
   \   0000018E   0x5211             STRH     R1,[R2, R0]
    606           
    607                                       break;
   \   00000190   0xE026             B.N      ??SPI4_IRQHandler_13
    608                                   case BUF2_PLAY:
    609                                       Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_11: (+1)
   \   00000192   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   00000196   0x8800             LDRH     R0,[R0, #+0]
   \   00000198   0x1C41             ADDS     R1,R0,#+1
   \   0000019A   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   0000019E   0x8011             STRH     R1,[R2, #+0]
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000001A4   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001A8   0x.... 0x....      LDR.W    R2,??DataTable12_14  ;; 0xc0010140
   \   000001AC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001AE   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000001B2   0xF245 0x0264      MOVW     R2,#+20580
   \   000001B6   0x5211             STRH     R1,[R2, R0]
    610                 
    611                                       break;
   \   000001B8   0xE012             B.N      ??SPI4_IRQHandler_13
    612                                   case BUF3_PLAY:
    613                                       Buffer1.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_10: (+1)
   \   000001BA   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   000001BE   0x8800             LDRH     R0,[R0, #+0]
   \   000001C0   0x1C41             ADDS     R1,R0,#+1
   \   000001C2   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   000001C6   0x8011             STRH     R1,[R2, #+0]
   \   000001C8   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000001CC   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001D0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001D2   0x0040             LSLS     R0,R0,#+1
   \   000001D4   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000001D8   0xF245 0x0264      MOVW     R2,#+20580
   \   000001DC   0x5211             STRH     R1,[R2, R0]
    614           
    615                                       break;                          
   \   000001DE   0xE7FF             B.N      ??SPI4_IRQHandler_13
    616                                   default:
    617                                       break;
    618                               }
    619          
    620          					  if ((WaveRec_idxSens6 % (2*AUDIO_SAMPLING_FREQUENCY/1000)==0)) SubFrameFinished();
   \                     ??SPI4_IRQHandler_12: (+1)
   \                     ??SPI4_IRQHandler_13: (+1)
   \   000001E0   0x.... 0x....      LDR.W    R0,??DataTable13_2
   \   000001E4   0x8800             LDRH     R0,[R0, #+0]
   \   000001E6   0x2120             MOVS     R1,#+32
   \   000001E8   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000001EC   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000001F0   0x2A00             CMP      R2,#+0
   \   000001F2   0xD101             BNE.N    ??SPI4_IRQHandler_3
   \   000001F4   0x.... 0x....      BL       SubFrameFinished
    621                         }
    622                    }		
    623          	}
    624          #if 0
    625          	/* The code to store data in to buffer for testing purpose */
    626          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
    627          	{
    628          		TestSDO56[iSDO56++]=test;
    629          	}
    630          	else
    631          	{
    632          		iSDO56=0;
    633          	}
    634          #endif
    635          
    636          	/* Update Old value */	  
    637          	Main_stLROld=Main_stLR;	  
   \                     ??SPI4_IRQHandler_3: (+1)
   \   000001F8   0x.... 0x....      LDR.W    R0,??DataTable12_26
   \   000001FC   0x7800             LDRB     R0,[R0, #+0]
   \   000001FE   0x.... 0x....      LDR.W    R1,??DataTable13
   \   00000202   0x7008             STRB     R0,[R1, #+0]
    638               
    639            }      
    640          }
   \                     ??SPI4_IRQHandler_0: (+1)
   \   00000204   0xBD10             POP      {R4,PC}          ;; return
   \   00000206                      REQUIRE Buffer2
   \   00000206                      REQUIRE Buffer3
   \   00000206                      REQUIRE Buffer1

   \                                 In section .bss, align 1
   \                     ??Main_stLR:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??Main_stLROld:
   \   00000000                      DS8 1
    641          
    642          
    643          
    644          

   \                                 In section .text, align 2, keep-with-next
    645          void SPI5_IRQHandler(void)
    646          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    647            //static uint16_t stNipple;
    648            //static uint8_t stLR, stOder;
    649          
    650            /* USER CODE BEGIN SPI5_IRQn 0 */
    651          
    652            /* USER CODE END SPI5_IRQn 0 */
    653            //HAL_SPI_IRQHandler(&hspi5);
    654            /* USER CODE BEGIN SPI5_IRQn 1 */
    655          
    656            /* USER CODE END SPI5_IRQn 1 */
    657              /* Check if data are available in SPI Data register */
    658            /* SPI in mode Receiver ----------------------------------------------------*/
    659            if(
    660               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    661               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    662               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13_3
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6880             LDR      R0,[R0, #+8]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xD468             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable13_3
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x6880             LDR      R0,[R0, #+8]
   \   00000016   0x07C0             LSLS     R0,R0,#+31
   \   00000018   0xD562             BPL.N    ??SPI5_IRQHandler_0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable13_3
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0x0640             LSLS     R0,R0,#+25
   \   00000024   0xD55C             BPL.N    ??SPI5_IRQHandler_0
    663            {
    664          
    665          
    666             uint16_t test;
    667             test =  SPI_I2S_ReceiveData(SPI5);
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable13_4  ;; 0x40015000
   \   0000002A   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000002E   0x0004             MOVS     R4,R0
    668             //SPI5->DR = 3333;
    669          
    670            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000034   0x0221             LSLS     R1,R4,#+8
   \   00000036   0xEA51 0x2010      ORRS     R0,R1,R0, LSR #+8
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable13_5
   \   0000003E   0x.... 0x....      LDR.W    R2,??DataTable13_6
   \   00000042   0x8812             LDRH     R2,[R2, #+0]
   \   00000044   0xF821 0x0012      STRH     R0,[R1, R2, LSL #+1]
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable13_6
   \   0000004C   0x8800             LDRH     R0,[R0, #+0]
   \   0000004E   0x1C40             ADDS     R0,R0,#+1
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable13_6
   \   00000054   0x8008             STRH     R0,[R1, #+0]
    671            
    672            //volume = 64;
    673            
    674            if (idxMic8>=64)
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable13_6
   \   0000005A   0x8800             LDRH     R0,[R0, #+0]
   \   0000005C   0x2840             CMP      R0,#+64
   \   0000005E   0xDB3F             BLT.N    ??SPI5_IRQHandler_0
    675            {
    676          	if (buffer_switch != 1)
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   00000064   0x7800             LDRB     R0,[R0, #+0]
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xD013             BEQ.N    ??SPI5_IRQHandler_1
    677          	{
    678          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    679          						  (PDMFilter_InitStruct *)&Filter[0]);
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable13_7
   \   0000006E   0x7802             LDRB     R2,[R0, #+0]
   \   00000070   0x.... 0x....      LDR.W    R3,??DataTable13_8
   \   00000074   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000076   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable17
   \   00000082   0x8809             LDRH     R1,[R1, #+0]
   \   00000084   0xEB10 0x1141      ADDS     R1,R0,R1, LSL #+5
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   0000008C   0x.... 0x....      BL       PDM_Filter_64_LSB
   \   00000090   0xE012             B.N      ??SPI5_IRQHandler_2
    680          	}
    681          	else
    682          	{
    683          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    684          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \                     ??SPI5_IRQHandler_1: (+1)
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable13_7
   \   00000096   0x7802             LDRB     R2,[R0, #+0]
   \   00000098   0x.... 0x....      LDR.W    R3,??DataTable13_8
   \   0000009C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000009E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable17
   \   000000AA   0x8809             LDRH     R1,[R1, #+0]
   \   000000AC   0xEB10 0x1141      ADDS     R1,R0,R1, LSL #+5
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   000000B4   0x.... 0x....      BL       PDM_Filter_64_LSB
    685          	}
    686          	idxMic8=0;
   \                     ??SPI5_IRQHandler_2: (+1)
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable13_6
   \   000000BE   0x8008             STRH     R0,[R1, #+0]
    687          	cntPos++;
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable17
   \   000000C4   0x8800             LDRH     R0,[R0, #+0]
   \   000000C6   0x1C40             ADDS     R0,R0,#+1
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable17
   \   000000CC   0x8008             STRH     R0,[R1, #+0]
    688          	if (cntPos>=256) cntPos=0;
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable17
   \   000000D2   0x8800             LDRH     R0,[R0, #+0]
   \   000000D4   0x28FF             CMP      R0,#+255
   \   000000D6   0xDD03             BLE.N    ??SPI5_IRQHandler_0
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable17
   \   000000DE   0x8008             STRH     R0,[R1, #+0]
    689            }
    690              
    691            }
    692            
    693          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   000000E0   0xBD10             POP      {R4,PC}          ;; return
    694          
    695          /* SPI5 init function */
    696          
    697          

   \                                 In section .text, align 2, keep-with-next
    698          void SPI6_IRQHandler(void)
    699          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    700            /* SPI in mode Receiver ----------------------------------------------------*/
    701            if(
    702          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    703               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    704               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6880             LDR      R0,[R0, #+8]
   \   0000000A   0x0780             LSLS     R0,R0,#+30
   \   0000000C   0xD562             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0600             LSLS     R0,R0,#+24
   \   00000018   0xD55C             BPL.N    ??SPI6_IRQHandler_0
    705            {
    706          
    707          
    708               uint16_t test;
    709               test =  SPI_I2S_ReceiveData(SPI6);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40015400
   \   0000001E   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000022   0x0004             MOVS     R4,R0
    710               //SPI6->DR = 3333;
    711          
    712              pDataMic7[idxMic7++] =	HTONS(test);
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   0x0221             LSLS     R1,R4,#+8
   \   0000002A   0xEA51 0x2010      ORRS     R0,R1,R0, LSR #+8
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable13_12
   \   00000032   0x.... 0x....      LDR.W    R2,??DataTable13_13
   \   00000036   0x8812             LDRH     R2,[R2, #+0]
   \   00000038   0xF821 0x0012      STRH     R0,[R1, R2, LSL #+1]
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable13_13
   \   00000040   0x8800             LDRH     R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable13_13
   \   00000048   0x8008             STRH     R0,[R1, #+0]
    713          
    714              //volume = 64;
    715          
    716              if (idxMic7>=64)
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable13_13
   \   0000004E   0x8800             LDRH     R0,[R0, #+0]
   \   00000050   0x2840             CMP      R0,#+64
   \   00000052   0xDB3F             BLT.N    ??SPI6_IRQHandler_0
    717              {
    718                if (buffer_switch != 1)
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable12_12
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0x2801             CMP      R0,#+1
   \   0000005C   0xD013             BEQ.N    ??SPI6_IRQHandler_1
    719                {
    720                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    721                                                          (PDMFilter_InitStruct *)&Filter[1]);
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable13_7
   \   00000062   0x7802             LDRB     R2,[R0, #+0]
   \   00000064   0x.... 0x....      LDR.W    R3,??DataTable13_14
   \   00000068   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000006A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable17_1
   \   00000076   0x8809             LDRH     R1,[R1, #+0]
   \   00000078   0xEB10 0x1141      ADDS     R1,R0,R1, LSL #+5
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable13_12
   \   00000080   0x.... 0x....      BL       PDM_Filter_64_LSB
   \   00000084   0xE012             B.N      ??SPI6_IRQHandler_2
    722                }
    723                else
    724                {
    725                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    726                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \                     ??SPI6_IRQHandler_1: (+1)
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable13_7
   \   0000008A   0x7802             LDRB     R2,[R0, #+0]
   \   0000008C   0x.... 0x....      LDR.W    R3,??DataTable13_14
   \   00000090   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000092   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable17_1
   \   0000009E   0x8809             LDRH     R1,[R1, #+0]
   \   000000A0   0xEB10 0x1141      ADDS     R1,R0,R1, LSL #+5
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable13_12
   \   000000A8   0x.... 0x....      BL       PDM_Filter_64_LSB
    727                }
    728                idxMic7=0;
   \                     ??SPI6_IRQHandler_2: (+1)
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable13_13
   \   000000B2   0x8008             STRH     R0,[R1, #+0]
    729                cntPos7++;
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   000000B8   0x8800             LDRH     R0,[R0, #+0]
   \   000000BA   0x1C40             ADDS     R0,R0,#+1
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable17_1
   \   000000C0   0x8008             STRH     R0,[R1, #+0]
    730                if (cntPos7>=256) cntPos7=0;
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   000000C6   0x8800             LDRH     R0,[R0, #+0]
   \   000000C8   0x28FF             CMP      R0,#+255
   \   000000CA   0xDD03             BLE.N    ??SPI6_IRQHandler_0
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable17_1
   \   000000D2   0x8008             STRH     R0,[R1, #+0]
    731              }
    732              
    733            }
    734          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   000000D4   0xBD10             POP      {R4,PC}          ;; return
    735          
    736          
    737          

   \                                 In section .text, align 2, keep-with-next
    738          void MIC1TO8_Init(void)
    739          {
   \                     MIC1TO8_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    740          
    741          
    742            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    743            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    744            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    745            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    746            //HAL_Delay(2);
    747          
    748          
    749            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    750            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    751            I2S1_Init(); /* I2S1   --> SDO12 */
   \   00000002   0x.... 0x....      BL       I2S1_Init
    752            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    753            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    754            I2S2_Init(); /* I2S2   --> SDO34 */
   \   00000006   0x.... 0x....      BL       I2S2_Init
    755            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    756            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    757            SPI4_Init(); /* SPI4   --> SDO56 */
   \   0000000A   0x.... 0x....      BL       SPI4_Init
    758            SPI5_Init();
   \   0000000E   0x.... 0x....      BL       SPI5_Init
    759            SPI6_Init();
   \   00000012   0x.... 0x....      BL       SPI6_Init
    760            StartRecMic7_8();
   \   00000016   0x.... 0x....      BL       StartRecMic7_8
    761          
    762          
    763          
    764          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    765          

   \                                 In section .text, align 2, keep-with-next
    766          void StartRecMic7_8 (void)
    767          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    768          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0xF44F 0x5280      MOV      R2,#+4096
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable17_2
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable13_3
   \   0000000E   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    769          #if (0)
    770          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
    771          #else
    772          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000012   0xF44F 0x5280      MOV      R2,#+4096
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable17_3
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   0000001E   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    773          #endif
    774          	  swtSDO7 = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable17_4
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    775          	  swtSDO8 = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable17_5
   \   00000030   0x7008             STRB     R0,[R1, #+0]
    776          
    777          }
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
    778          
    779          /* I2S1 init function */
    780          /* Read data of MIC12 */

   \                                 In section .text, align 2, keep-with-next
    781          static void I2S1_Init(void)
    782          {
   \                     I2S1_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    783          #if 1
    784            hi2s1.Instance = SPI1;
   \   00000002   0x....             LDR.N    R0,??DataTable12_5  ;; 0x40013000
   \   00000004   0x....             LDR.N    R1,??DataTable12_6
   \   00000006   0x6008             STR      R0,[R1, #+0]
    785            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
   \   00000008   0xF44F 0x7080      MOV      R0,#+256
   \   0000000C   0x....             LDR.N    R1,??DataTable12_6
   \   0000000E   0x6048             STR      R0,[R1, #+4]
    786            hi2s1.Init.Standard = I2S_STANDARD_LSB;
   \   00000010   0x2020             MOVS     R0,#+32
   \   00000012   0x....             LDR.N    R1,??DataTable12_6
   \   00000014   0x6088             STR      R0,[R1, #+8]
    787            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable12_6
   \   0000001A   0x60C8             STR      R0,[R1, #+12]
    788            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR.N    R1,??DataTable12_6
   \   00000020   0x6108             STR      R0,[R1, #+16]
    789            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
   \   00000022   0xF44F 0x507A      MOV      R0,#+16000
   \   00000026   0x....             LDR.N    R1,??DataTable12_6
   \   00000028   0x6148             STR      R0,[R1, #+20]
    790            hi2s1.Init.CPOL = I2S_CPOL_LOW;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR.N    R1,??DataTable12_6
   \   0000002E   0x6188             STR      R0,[R1, #+24]
    791            hi2s1.Init.ClockSource = I2S_CLOCK_SYSCLK;
   \   00000030   0x2002             MOVS     R0,#+2
   \   00000032   0x....             LDR.N    R1,??DataTable12_6
   \   00000034   0x61C8             STR      R0,[R1, #+28]
    792            HAL_I2S_Init(&hi2s1);
   \   00000036   0x....             LDR.N    R0,??DataTable12_6
   \   00000038   0x.... 0x....      BL       HAL_I2S_Init
    793          
    794            /* Enable TXE and ERR interrupt */
    795           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
   \   0000003C   0x....             LDR.N    R0,??DataTable12_6
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x6840             LDR      R0,[R0, #+4]
   \   00000042   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000046   0x....             LDR.N    R1,??DataTable12_6
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x6048             STR      R0,[R1, #+4]
    796           
    797           __HAL_I2S_ENABLE(&hi2s1);
   \   0000004C   0x....             LDR.N    R0,??DataTable12_6
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x69C0             LDR      R0,[R0, #+28]
   \   00000052   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000056   0x....             LDR.N    R1,??DataTable12_6
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0x61C8             STR      R0,[R1, #+28]
    798          #else
    799          	hspi1.Instance = SPI1;
    800          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    801          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    802          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    803          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    804          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    805          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    806          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    807          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    808          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    809          	hspi1.Init.CRCPolynomial = 7;
    810          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    811          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    812          	//hspi4.RxISR = SPI5_CallBack;
    813          	HAL_SPI_Init(&hspi1);
    814          
    815          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    816            /* Enable TXE, RXNE and ERR interrupt */
    817           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    818          
    819           __HAL_SPI_ENABLE(&hspi1);
    820          
    821          #endif
    822          }
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return
    823          
    824          /* I2S2 init function */
    825          /* Read data of MIC34 */
    826          

   \                                 In section .text, align 2, keep-with-next
    827          static void I2S2_Init(void)
    828          {
   \                     I2S2_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    829          
    830          #if 1
    831           //HAL_I2S_DeInit(&hi2s2);
    832           hi2s2.Instance = SPI2;
   \   00000002   0x....             LDR.N    R0,??DataTable12_18  ;; 0x40003800
   \   00000004   0x....             LDR.N    R1,??DataTable12_17
   \   00000006   0x6008             STR      R0,[R1, #+0]
    833           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
   \   00000008   0xF44F 0x7080      MOV      R0,#+256
   \   0000000C   0x....             LDR.N    R1,??DataTable12_17
   \   0000000E   0x6048             STR      R0,[R1, #+4]
    834           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
   \   00000010   0x2020             MOVS     R0,#+32
   \   00000012   0x....             LDR.N    R1,??DataTable12_17
   \   00000014   0x6088             STR      R0,[R1, #+8]
    835           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable12_17
   \   0000001A   0x60C8             STR      R0,[R1, #+12]
    836           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR.N    R1,??DataTable12_17
   \   00000020   0x6108             STR      R0,[R1, #+16]
    837           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
   \   00000022   0xF44F 0x507A      MOV      R0,#+16000
   \   00000026   0x....             LDR.N    R1,??DataTable12_17
   \   00000028   0x6148             STR      R0,[R1, #+20]
    838           hi2s2.Init.CPOL = I2S_CPOL_LOW;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR.N    R1,??DataTable12_17
   \   0000002E   0x6188             STR      R0,[R1, #+24]
    839           hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
   \   00000030   0x2002             MOVS     R0,#+2
   \   00000032   0x....             LDR.N    R1,??DataTable12_17
   \   00000034   0x61C8             STR      R0,[R1, #+28]
    840          
    841           HAL_I2S_Init(&hi2s2);
   \   00000036   0x....             LDR.N    R0,??DataTable12_17
   \   00000038   0x.... 0x....      BL       HAL_I2S_Init
    842           /* Enable TXE and ERR interrupt */
    843           __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
   \   0000003C   0x....             LDR.N    R0,??DataTable12_17
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x6840             LDR      R0,[R0, #+4]
   \   00000042   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000046   0x....             LDR.N    R1,??DataTable12_17
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x6048             STR      R0,[R1, #+4]
    844           __HAL_I2S_ENABLE(&hi2s2);
   \   0000004C   0x....             LDR.N    R0,??DataTable12_17
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x69C0             LDR      R0,[R0, #+28]
   \   00000052   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000056   0x....             LDR.N    R1,??DataTable12_17
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0x61C8             STR      R0,[R1, #+28]
    845          
    846          #else
    847             hspi2.Instance = SPI2;
    848             hspi2.Init.Mode = SPI_MODE_SLAVE;
    849             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    850             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
    851             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
    852             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
    853             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    854             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
    855             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
    856             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    857             hspi2.Init.CRCPolynomial = 7;
    858             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    859             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    860             HAL_SPI_Init(&hspi2);
    861          
    862          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    863           /* Enable TXE, RXNE and ERR interrupt */
    864          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
    865          
    866          __HAL_SPI_ENABLE(&hspi2);
    867          
    868          #endif
    869          
    870          
    871          }
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return
    872          
    873          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    874          void SPI4_Init(void)
    875          {
   \                     SPI4_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    876          
    877            hspi4.Instance = SPI4;
   \   00000002   0x....             LDR.N    R0,??DataTable12_25  ;; 0x40013400
   \   00000004   0x....             LDR.N    R1,??DataTable12_24
   \   00000006   0x6008             STR      R0,[R1, #+0]
    878            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable12_24
   \   0000000C   0x6048             STR      R0,[R1, #+4]
    879            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000012   0x....             LDR.N    R1,??DataTable12_24
   \   00000014   0x6088             STR      R0,[R1, #+8]
    880            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000016   0xF44F 0x6070      MOV      R0,#+3840
   \   0000001A   0x....             LDR.N    R1,??DataTable12_24
   \   0000001C   0x60C8             STR      R0,[R1, #+12]
    881            hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x....             LDR.N    R1,??DataTable12_24
   \   00000022   0x6108             STR      R0,[R1, #+16]
    882            hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR.N    R1,??DataTable12_24
   \   00000028   0x6148             STR      R0,[R1, #+20]
    883            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   0000002A   0xF44F 0x7000      MOV      R0,#+512
   \   0000002E   0x....             LDR.N    R1,??DataTable12_24
   \   00000030   0x6188             STR      R0,[R1, #+24]
    884            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR.N    R1,??DataTable12_24
   \   00000036   0x6208             STR      R0,[R1, #+32]
    885            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x....             LDR.N    R1,??DataTable12_24
   \   0000003C   0x6248             STR      R0,[R1, #+36]
    886            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable12_24
   \   00000042   0x6288             STR      R0,[R1, #+40]
    887            hspi4.Init.CRCPolynomial = 7;
   \   00000044   0x2007             MOVS     R0,#+7
   \   00000046   0x....             LDR.N    R1,??DataTable12_24
   \   00000048   0x62C8             STR      R0,[R1, #+44]
    888            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR.N    R1,??DataTable12_24
   \   0000004E   0x6308             STR      R0,[R1, #+48]
    889            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x....             LDR.N    R1,??DataTable12_24
   \   00000054   0x6348             STR      R0,[R1, #+52]
    890            HAL_SPI_Init(&hspi4);
   \   00000056   0x....             LDR.N    R0,??DataTable12_24
   \   00000058   0x.... 0x....      BL       HAL_SPI_Init
    891          
    892            /* Enable TXE, RXNE and ERR interrupt */
    893           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \   0000005C   0x....             LDR.N    R0,??DataTable12_24
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x6840             LDR      R0,[R0, #+4]
   \   00000062   0xF050 0x0060      ORRS     R0,R0,#0x60
   \   00000066   0x....             LDR.N    R1,??DataTable12_24
   \   00000068   0x6809             LDR      R1,[R1, #+0]
   \   0000006A   0x6048             STR      R0,[R1, #+4]
    894          
    895           __HAL_SPI_ENABLE(&hspi4);
   \   0000006C   0x....             LDR.N    R0,??DataTable12_24
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000076   0x....             LDR.N    R1,??DataTable12_24
   \   00000078   0x6809             LDR      R1,[R1, #+0]
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    896          }
   \   0000007C   0xBD01             POP      {R0,PC}          ;; return
    897          
    898          

   \                                 In section .text, align 2, keep-with-next
    899          void Mic7Rec(void)
    900          {
   \                     Mic7Rec: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    901              SPI5_Init();
   \   00000002   0x.... 0x....      BL       SPI5_Init
    902          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    903          

   \                                 In section .text, align 2, keep-with-next
    904          void Mic8Rec(void)
    905          {
   \                     Mic8Rec: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    906              SPI6_Init();
   \   00000002   0x.... 0x....      BL       SPI6_Init
    907          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    908          
    909          
    910          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    911          void SPI5_Init(void)
    912          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    913          	
    914              /* Enable CRC module */
    915              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000002   0x....             LDR.N    R0,??DataTable12_1  ;; 0x40023830
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000000A   0x....             LDR.N    R1,??DataTable12_1  ;; 0x40023830
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    916          	for (char i=0; i< 2; i++)
   \   0000000E   0x2400             MOVS     R4,#+0
   \                     ??SPI5_Init_0: (+1)
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xDA34             BGE.N    ??SPI5_Init_1
    917          	{
    918          		/* Filter LP & HP Init */
    919          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable13_8
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2134             MOVS     R1,#+52
   \   0000001E   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable17_6  ;; 0x45fa0000
   \   00000026   0x6041             STR      R1,[R0, #+4]
    920          		Filter[i].HP_HZ = 10;
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable13_8
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2134             MOVS     R1,#+52
   \   00000030   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable17_7  ;; 0x41200000
   \   00000038   0x6081             STR      R1,[R0, #+8]
    921          		Filter[i].Fs = 16000;    //sop1hc: 16000
   \   0000003A   0xF44F 0x507A      MOV      R0,#+16000
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable13_8
   \   00000042   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000044   0x2234             MOVS     R2,#+52
   \   00000046   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   0000004A   0x8008             STRH     R0,[R1, #+0]
    922          		Filter[i].Out_MicChannels = 1;
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable13_8
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x2234             MOVS     R2,#+52
   \   00000056   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   0000005A   0x81C8             STRH     R0,[R1, #+14]
    923          		Filter[i].In_MicChannels = 1;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable13_8
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0x2234             MOVS     R2,#+52
   \   00000066   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   0000006A   0x8188             STRH     R0,[R1, #+12]
    924          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable13_8
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x2134             MOVS     R1,#+52
   \   00000074   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000078   0x.... 0x....      BL       PDM_Filter_Init
    925          	}
   \   0000007C   0x1C64             ADDS     R4,R4,#+1
   \   0000007E   0xE7C7             B.N      ??SPI5_Init_0
    926          
    927          
    928            hspi5.Instance = SPI5;
   \                     ??SPI5_Init_1: (+1)
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable13_4  ;; 0x40015000
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   00000088   0x6008             STR      R0,[R1, #+0]
    929            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   00000090   0x6048             STR      R0,[R1, #+4]
    930            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000092   0xF44F 0x6080      MOV      R0,#+1024
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   0000009A   0x6088             STR      R0,[R1, #+8]
    931            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000009C   0xF44F 0x6070      MOV      R0,#+3840
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   000000A4   0x60C8             STR      R0,[R1, #+12]
    932            hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   000000A6   0x2002             MOVS     R0,#+2
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   000000AC   0x6108             STR      R0,[R1, #+16]
    933            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   000000B4   0x6148             STR      R0,[R1, #+20]
    934            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   000000B6   0xF44F 0x7000      MOV      R0,#+512
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   000000BE   0x6188             STR      R0,[R1, #+24]
    935            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   000000C6   0x6208             STR      R0,[R1, #+32]
    936            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   000000CE   0x6248             STR      R0,[R1, #+36]
    937            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   000000D6   0x6288             STR      R0,[R1, #+40]
    938            hspi5.Init.CRCPolynomial = 7;
   \   000000D8   0x2007             MOVS     R0,#+7
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   000000DE   0x62C8             STR      R0,[R1, #+44]
    939            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   000000E6   0x6308             STR      R0,[R1, #+48]
    940            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable13_3
   \   000000EE   0x6348             STR      R0,[R1, #+52]
    941            //hspi5.RxISR = SPI5_CallBack;
    942            HAL_SPI_Init(&hspi5);
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable13_3
   \   000000F4   0x.... 0x....      BL       HAL_SPI_Init
    943          
    944          
    945            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    946            /* Enable TXE, RXNE and ERR interrupt */
    947           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
    948          
    949           //__HAL_SPI_ENABLE(&hspi5);
    950          
    951          }
   \   000000F8   0xBD10             POP      {R4,PC}          ;; return
    952          

   \                                 In section .text, align 2, keep-with-next
    953          void SPI6_Init(void)
    954          {
   \                     SPI6_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    955          	
    956            hspi6.Instance = SPI6;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40015400
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    957            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   00000012   0x6048             STR      R0,[R1, #+4]
    958            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000014   0xF44F 0x6080      MOV      R0,#+1024
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   0000001C   0x6088             STR      R0,[R1, #+8]
    959            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000001E   0xF44F 0x6070      MOV      R0,#+3840
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   00000026   0x60C8             STR      R0,[R1, #+12]
    960            hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   0000002E   0x6108             STR      R0,[R1, #+16]
    961            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   00000036   0x6148             STR      R0,[R1, #+20]
    962            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000038   0xF44F 0x7000      MOV      R0,#+512
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   00000040   0x6188             STR      R0,[R1, #+24]
    963            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   00000048   0x6208             STR      R0,[R1, #+32]
    964            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   00000050   0x6248             STR      R0,[R1, #+36]
    965            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   00000058   0x6288             STR      R0,[R1, #+40]
    966            hspi6.Init.CRCPolynomial = 7;
   \   0000005A   0x2007             MOVS     R0,#+7
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   00000060   0x62C8             STR      R0,[R1, #+44]
    967            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   00000068   0x6308             STR      R0,[R1, #+48]
    968            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   00000070   0x6348             STR      R0,[R1, #+52]
    969            //hspi6.RxISR = SPI6_CallBack;
    970            HAL_SPI_Init(&hspi6);
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   00000076   0x.... 0x....      BL       HAL_SPI_Init
    971          
    972          
    973            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    974            /* Enable TXE, RXNE and ERR interrupt */
    975           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
    976          
    977           //__HAL_SPI_ENABLE(&hspi6);
    978          
    979          }
   \   0000007A   0xBD01             POP      {R0,PC}          ;; return
    980          
    981          
    982          
    983          

   \                                 In section .text, align 2, keep-with-next
    984          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
    985          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    986          
    987            GPIO_InitTypeDef GPIO_InitStruct;
    988            if (hspi->Instance==SPI1)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable17_8  ;; 0x40013000
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD144             BNE.N    ??HAL_SPI_MspInit_0
    989            {
    990          	  /* USER CODE BEGIN SPI1_MspInit 0 */
    991          	  
    992          	  /* USER CODE END SPI1_MspInit 0 */
    993          	  /* Peripheral clock enable */
    994          	  __SPI1_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable17_9  ;; 0x40023844
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable17_9  ;; 0x40023844
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable17_9  ;; 0x40023844
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF410 0x5080      ANDS     R0,R0,#0x1000
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
    995          	  __GPIOA_CLK_ENABLE();
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
    996          	  __GPIOC_CLK_ENABLE();
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   0000005A   0x6008             STR      R0,[R1, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0x9800             LDR      R0,[SP, #+0]
    997          	  
    998          	  /**I2S1 GPIO Configuration	
    999          		PA4 	------> I2S1_WS --> LRCKO
   1000          		PA5 	------> I2S1_CK --> BICKO
   1001          		PA7 	------> I2S1_SD --> SDO12
   1002          		PC4 	------> I2S1_MCK
   1003          		*/
   1004          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
   \   0000006A   0x20F0             MOVS     R0,#+240
   \   0000006C   0x9001             STR      R0,[SP, #+4]
   1005          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000006E   0x2002             MOVS     R0,#+2
   \   00000070   0x9002             STR      R0,[SP, #+8]
   1006          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x9003             STR      R0,[SP, #+12]
   1007          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000076   0x2003             MOVS     R0,#+3
   \   00000078   0x9004             STR      R0,[SP, #+16]
   1008          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   \   0000007A   0x2005             MOVS     R0,#+5
   \   0000007C   0x9005             STR      R0,[SP, #+20]
   1009          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   0000007E   0xA901             ADD      R1,SP,#+4
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable17_11  ;; 0x40020000
   \   00000084   0x.... 0x....      BL       HAL_GPIO_Init
   1010          	  
   1011          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
   1012          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1013          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
   1014          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1015          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1016          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1017          		
   1018          	  /* Peripheral interrupt init*/
   1019          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000088   0x2200             MOVS     R2,#+0
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x2023             MOVS     R0,#+35
   \   0000008E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1020          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000092   0x2023             MOVS     R0,#+35
   \   00000094   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   00000098   0xE295             B.N      ??HAL_SPI_MspInit_1
   1021          	  /* USER CODE BEGIN SPI1_MspInit 1 */
   1022          	  
   1023          	  /* USER CODE END SPI1_MspInit 1 */
   1024          
   1025            }
   1026            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   0000009A   0x6820             LDR      R0,[R4, #+0]
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable17_12  ;; 0x40003800
   \   000000A0   0x4288             CMP      R0,R1
   \   000000A2   0xD163             BNE.N    ??HAL_SPI_MspInit_2
   1027            {
   1028          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1029          	  
   1030          	  /* USER CODE END SPI2_MspInit 0 */
   1031          		/* Peripheral clock enable */
   1032          		__SPI2_CLK_ENABLE();
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable17_13  ;; 0x40023840
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable17_13  ;; 0x40023840
   \   000000B2   0x6008             STR      R0,[R1, #+0]
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable17_13  ;; 0x40023840
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0xF410 0x4080      ANDS     R0,R0,#0x4000
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0x9800             LDR      R0,[SP, #+0]
   1033          		__GPIOI_CLK_ENABLE();
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   000000D0   0x6008             STR      R0,[R1, #+0]
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0xF410 0x7080      ANDS     R0,R0,#0x100
   \   000000DC   0x9000             STR      R0,[SP, #+0]
   \   000000DE   0x9800             LDR      R0,[SP, #+0]
   1034          		__GPIOB_CLK_ENABLE();
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   000000EE   0x6008             STR      R0,[R1, #+0]
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   000000FA   0x9000             STR      R0,[SP, #+0]
   \   000000FC   0x9800             LDR      R0,[SP, #+0]
   1035          		__GPIOC_CLK_ENABLE();
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000102   0x6800             LDR      R0,[R0, #+0]
   \   00000104   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   0000010C   0x6008             STR      R0,[R1, #+0]
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000118   0x9000             STR      R0,[SP, #+0]
   \   0000011A   0x9800             LDR      R0,[SP, #+0]
   1036          	  
   1037          		/**I2S2 GPIO Configuration	   
   1038          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1039          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1040          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1041          	  
   1042          	  
   1043          		*/
   1044          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   \   0000011C   0x2002             MOVS     R0,#+2
   \   0000011E   0x9001             STR      R0,[SP, #+4]
   1045          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000120   0x2002             MOVS     R0,#+2
   \   00000122   0x9002             STR      R0,[SP, #+8]
   1046          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x9003             STR      R0,[SP, #+12]
   1047          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000128   0x2003             MOVS     R0,#+3
   \   0000012A   0x9004             STR      R0,[SP, #+16]
   1048          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   \   0000012C   0x2005             MOVS     R0,#+5
   \   0000012E   0x9005             STR      R0,[SP, #+20]
   1049          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000130   0xA901             ADD      R1,SP,#+4
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable17_14  ;; 0x40020800
   \   00000136   0x.... 0x....      BL       HAL_GPIO_Init
   1050          	  
   1051          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   0000013A   0xF44F 0x5040      MOV      R0,#+12288
   \   0000013E   0x9001             STR      R0,[SP, #+4]
   1052          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000140   0x2002             MOVS     R0,#+2
   \   00000142   0x9002             STR      R0,[SP, #+8]
   1053          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000144   0x2000             MOVS     R0,#+0
   \   00000146   0x9003             STR      R0,[SP, #+12]
   1054          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000148   0x2003             MOVS     R0,#+3
   \   0000014A   0x9004             STR      R0,[SP, #+16]
   1055          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   \   0000014C   0x2005             MOVS     R0,#+5
   \   0000014E   0x9005             STR      R0,[SP, #+20]
   1056          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000150   0xA901             ADD      R1,SP,#+4
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable17_15  ;; 0x40020400
   \   00000156   0x.... 0x....      BL       HAL_GPIO_Init
   1057          	  
   1058          	  
   1059          		/* Peripheral interrupt init*/
   1060          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   0000015A   0x2200             MOVS     R2,#+0
   \   0000015C   0x2101             MOVS     R1,#+1
   \   0000015E   0x2024             MOVS     R0,#+36
   \   00000160   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1061          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   00000164   0x2024             MOVS     R0,#+36
   \   00000166   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   0000016A   0xE22C             B.N      ??HAL_SPI_MspInit_1
   1062          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1063          	  
   1064          	  /* USER CODE END SPI2_MspInit 1 */
   1065          
   1066          
   1067            }
   1068            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   0000016C   0x6820             LDR      R0,[R4, #+0]
   \   0000016E   0x.... 0x....      LDR.W    R1,??DataTable17_16  ;; 0x40003c00
   \   00000172   0x4288             CMP      R0,R1
   \   00000174   0xF040 0x80CF      BNE.W    ??HAL_SPI_MspInit_3
   1069            {
   1070          	  
   1071              /**I2S3 GPIO Configuration    
   1072                 PB2     ------> I2S3_SD
   1073                 PA15     ------> I2S3_WS (LRCK)
   1074                 PB3     ------> I2S3_CK 
   1075          	   PC7    ------> MCLK
   1076              */
   1077           
   1078            /* USER CODE BEGIN SPI3_MspInit 1 */
   1079            __SPI3_CLK_ENABLE();
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable17_13  ;; 0x40023840
   \   0000017C   0x6800             LDR      R0,[R0, #+0]
   \   0000017E   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   00000182   0x.... 0x....      LDR.W    R1,??DataTable17_13  ;; 0x40023840
   \   00000186   0x6008             STR      R0,[R1, #+0]
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable17_13  ;; 0x40023840
   \   0000018C   0x6800             LDR      R0,[R0, #+0]
   \   0000018E   0xF410 0x4000      ANDS     R0,R0,#0x8000
   \   00000192   0x9000             STR      R0,[SP, #+0]
   \   00000194   0x9800             LDR      R0,[SP, #+0]
   1080            __GPIOA_CLK_ENABLE();
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   0000019A   0x6800             LDR      R0,[R0, #+0]
   \   0000019C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   000001A4   0x6008             STR      R0,[R1, #+0]
   \   000001A6   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   000001AA   0x6800             LDR      R0,[R0, #+0]
   \   000001AC   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000001B0   0x9000             STR      R0,[SP, #+0]
   \   000001B2   0x9800             LDR      R0,[SP, #+0]
   1081            __GPIOB_CLK_ENABLE();
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   000001B8   0x6800             LDR      R0,[R0, #+0]
   \   000001BA   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000001BE   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   000001C2   0x6008             STR      R0,[R1, #+0]
   \   000001C4   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   000001C8   0x6800             LDR      R0,[R0, #+0]
   \   000001CA   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   000001CE   0x9000             STR      R0,[SP, #+0]
   \   000001D0   0x9800             LDR      R0,[SP, #+0]
   1082          
   1083            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   \   000001D2   0x200C             MOVS     R0,#+12
   \   000001D4   0x9001             STR      R0,[SP, #+4]
   1084            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   000001D6   0x2002             MOVS     R0,#+2
   \   000001D8   0x9002             STR      R0,[SP, #+8]
   1085            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000001DA   0x2003             MOVS     R0,#+3
   \   000001DC   0x9004             STR      R0,[SP, #+16]
   1086            GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   000001DE   0x2000             MOVS     R0,#+0
   \   000001E0   0x9003             STR      R0,[SP, #+12]
   1087            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   \   000001E2   0x2006             MOVS     R0,#+6
   \   000001E4   0x9005             STR      R0,[SP, #+20]
   1088            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   000001E6   0xA901             ADD      R1,SP,#+4
   \   000001E8   0x.... 0x....      LDR.W    R0,??DataTable17_15  ;; 0x40020400
   \   000001EC   0x.... 0x....      BL       HAL_GPIO_Init
   1089          
   1090          
   1091            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   000001F0   0xF44F 0x4000      MOV      R0,#+32768
   \   000001F4   0x9001             STR      R0,[SP, #+4]
   1092            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   000001F6   0x2002             MOVS     R0,#+2
   \   000001F8   0x9002             STR      R0,[SP, #+8]
   1093            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   \   000001FA   0x2006             MOVS     R0,#+6
   \   000001FC   0x9005             STR      R0,[SP, #+20]
   1094            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   000001FE   0xA901             ADD      R1,SP,#+4
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable17_11  ;; 0x40020000
   \   00000204   0x.... 0x....      BL       HAL_GPIO_Init
   1095          
   1096          #ifdef CODEC_MCLK_ENABLED
   1097            __GPIOC_CLK_ENABLE();
   \   00000208   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   0000020C   0x6800             LDR      R0,[R0, #+0]
   \   0000020E   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000212   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   00000216   0x6008             STR      R0,[R1, #+0]
   \   00000218   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   0000021C   0x6800             LDR      R0,[R0, #+0]
   \   0000021E   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000222   0x9000             STR      R0,[SP, #+0]
   \   00000224   0x9800             LDR      R0,[SP, #+0]
   1098            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   \   00000226   0x2080             MOVS     R0,#+128
   \   00000228   0x9001             STR      R0,[SP, #+4]
   1099            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000022A   0x2002             MOVS     R0,#+2
   \   0000022C   0x9002             STR      R0,[SP, #+8]
   1100            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   0000022E   0x2003             MOVS     R0,#+3
   \   00000230   0x9004             STR      R0,[SP, #+16]
   1101            GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000232   0x2000             MOVS     R0,#+0
   \   00000234   0x9003             STR      R0,[SP, #+12]
   1102            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   \   00000236   0x2006             MOVS     R0,#+6
   \   00000238   0x9005             STR      R0,[SP, #+20]
   1103            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   0000023A   0xA901             ADD      R1,SP,#+4
   \   0000023C   0x.... 0x....      LDR.W    R0,??DataTable17_14  ;; 0x40020800
   \   00000240   0x.... 0x....      BL       HAL_GPIO_Init
   1104          
   1105          #endif /* CODEC_MCLK_ENABLED */ 
   1106          
   1107          #ifdef I2S_INTERRUPT   
   1108               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1109               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1110               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1111          
   1112               /* Enable the I2S DMA request */
   1113               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1114               //__HAL_I2S_ENABLE(&hi2s3);
   1115            	    /* Peripheral interrupt init*/
   1116          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1117          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1118          #endif
   1119          
   1120                /* Enable the DMA clock */ 
   1121          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   00000244   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000248   0x6800             LDR      R0,[R0, #+0]
   \   0000024A   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   0000024E   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   00000252   0x6008             STR      R0,[R1, #+0]
   \   00000254   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000258   0x6800             LDR      R0,[R0, #+0]
   \   0000025A   0xF410 0x1000      ANDS     R0,R0,#0x200000
   \   0000025E   0x9000             STR      R0,[SP, #+0]
   \   00000260   0x9800             LDR      R0,[SP, #+0]
   1122          
   1123                /* Configure the DMA Stream */
   1124                //HAL_DMA_DeInit(&DmaHandle);
   1125          
   1126                /* Set the parameters to be configured */ 
   1127          	  DmaHandle.Instance = DMA1_Stream7;
   \   00000262   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400260b8
   \   00000266   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   0000026A   0x6008             STR      R0,[R1, #+0]
   1128                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   0000026C   0x2000             MOVS     R0,#+0
   \   0000026E   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   00000272   0x6048             STR      R0,[R1, #+4]
   1129          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   00000274   0x2040             MOVS     R0,#+64
   \   00000276   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   0000027A   0x6088             STR      R0,[R1, #+8]
   1130          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   0000027C   0x2000             MOVS     R0,#+0
   \   0000027E   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   00000282   0x60C8             STR      R0,[R1, #+12]
   1131          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   00000284   0xF44F 0x6080      MOV      R0,#+1024
   \   00000288   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   0000028C   0x6108             STR      R0,[R1, #+16]
   1132          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   0000028E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000292   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   00000296   0x6148             STR      R0,[R1, #+20]
   1133                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   00000298   0xF44F 0x5000      MOV      R0,#+8192
   \   0000029C   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   000002A0   0x6188             STR      R0,[R1, #+24]
   1134          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   000002A2   0x2000             MOVS     R0,#+0
   \   000002A4   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   000002A8   0x61C8             STR      R0,[R1, #+28]
   1135                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   000002AA   0xF45F 0x3000      MOVS     R0,#+131072
   \   000002AE   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   000002B2   0x6208             STR      R0,[R1, #+32]
   1136          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   000002B4   0x2004             MOVS     R0,#+4
   \   000002B6   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   000002BA   0x6248             STR      R0,[R1, #+36]
   1137                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   000002BC   0x2003             MOVS     R0,#+3
   \   000002BE   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   000002C2   0x6288             STR      R0,[R1, #+40]
   1138                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   000002C4   0x2000             MOVS     R0,#+0
   \   000002C6   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   000002CA   0x62C8             STR      R0,[R1, #+44]
   1139                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   000002CC   0x2000             MOVS     R0,#+0
   \   000002CE   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   000002D2   0x6308             STR      R0,[R1, #+48]
   1140                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1141                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1142                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1143                //DmaHandle.XferCpltCallback = &TC_Callback;
   1144           
   1145          
   1146                /* Associate the initialized DMA handle to the the SPI handle */
   1147                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   \   000002D4   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   000002D8   0x6560             STR      R0,[R4, #+84]
   \   000002DA   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   000002DE   0x6384             STR      R4,[R0, #+56]
   1148                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1149          
   1150          	   /* Deinitialize the Stream for new transfer */
   1151                 HAL_DMA_DeInit(&DmaHandle);
   \   000002E0   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   000002E4   0x.... 0x....      BL       HAL_DMA_DeInit
   1152                 /* Configure the DMA Stream */
   1153          	   HAL_DMA_Init(&DmaHandle);
   \   000002E8   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   000002EC   0x.... 0x....      BL       HAL_DMA_Init
   1154          
   1155                /* Set Interrupt Group Priority */
   1156                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   000002F0   0x2200             MOVS     R2,#+0
   \   000002F2   0x2100             MOVS     R1,#+0
   \   000002F4   0x202F             MOVS     R0,#+47
   \   000002F6   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1157                /* Enable the DMA STREAM global Interrupt */
   1158                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   000002FA   0x202F             MOVS     R0,#+47
   \   000002FC   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1159          
   1160          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000300   0x.... 0x....      LDR.W    R0,??DataTable19_1
   \   00000304   0x6800             LDR      R0,[R0, #+0]
   \   00000306   0x6800             LDR      R0,[R0, #+0]
   \   00000308   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000030C   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   00000310   0x6809             LDR      R1,[R1, #+0]
   \   00000312   0x6008             STR      R0,[R1, #+0]
   \   00000314   0xE157             B.N      ??HAL_SPI_MspInit_1
   1161          	    
   1162            }
   1163            else if(hspi->Instance==SPI4)
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   00000316   0x6820             LDR      R0,[R4, #+0]
   \   00000318   0x.... 0x....      LDR.W    R1,??DataTable20  ;; 0x40013400
   \   0000031C   0x4288             CMP      R0,R1
   \   0000031E   0xD135             BNE.N    ??HAL_SPI_MspInit_4
   1164            {
   1165            /* USER CODE BEGIN SPI4_MspInit 0 */
   1166          
   1167            /* USER CODE END SPI4_MspInit 0 */
   1168              /* Peripheral clock enable */
   1169              __SPI4_CLK_ENABLE();
   \   00000320   0x.... 0x....      LDR.W    R0,??DataTable17_9  ;; 0x40023844
   \   00000324   0x6800             LDR      R0,[R0, #+0]
   \   00000326   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   0000032A   0x.... 0x....      LDR.W    R1,??DataTable17_9  ;; 0x40023844
   \   0000032E   0x6008             STR      R0,[R1, #+0]
   \   00000330   0x.... 0x....      LDR.W    R0,??DataTable17_9  ;; 0x40023844
   \   00000334   0x6800             LDR      R0,[R0, #+0]
   \   00000336   0xF410 0x5000      ANDS     R0,R0,#0x2000
   \   0000033A   0x9000             STR      R0,[SP, #+0]
   \   0000033C   0x9800             LDR      R0,[SP, #+0]
   1170              __HAL_RCC_GPIOE_CLK_ENABLE();
   \   0000033E   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000342   0x6800             LDR      R0,[R0, #+0]
   \   00000344   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000348   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   0000034C   0x6008             STR      R0,[R1, #+0]
   \   0000034E   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000352   0x6800             LDR      R0,[R0, #+0]
   \   00000354   0xF010 0x0010      ANDS     R0,R0,#0x10
   \   00000358   0x9000             STR      R0,[SP, #+0]
   \   0000035A   0x9800             LDR      R0,[SP, #+0]
   1171            
   1172            
   1173              /**SPI4 GPIO Configuration    
   1174              PE2     ------> SPI4_SCK
   1175              PE4     ------> SPI4_NSS
   1176              PE5     ------> SPI4_MISO
   1177              PE6     ------> SPI4_MOSI 
   1178              */
   1179              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   \   0000035C   0x2074             MOVS     R0,#+116
   \   0000035E   0x9001             STR      R0,[SP, #+4]
   1180              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000360   0x2002             MOVS     R0,#+2
   \   00000362   0x9002             STR      R0,[SP, #+8]
   1181              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000364   0x2000             MOVS     R0,#+0
   \   00000366   0x9003             STR      R0,[SP, #+12]
   1182              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000368   0x2003             MOVS     R0,#+3
   \   0000036A   0x9004             STR      R0,[SP, #+16]
   1183              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   \   0000036C   0x2005             MOVS     R0,#+5
   \   0000036E   0x9005             STR      R0,[SP, #+20]
   1184              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   \   00000370   0xA901             ADD      R1,SP,#+4
   \   00000372   0x.... 0x....      LDR.W    R0,??DataTable20_1  ;; 0x40021000
   \   00000376   0x.... 0x....      BL       HAL_GPIO_Init
   1185          
   1186          	/* Peripheral interrupt init*/
   1187              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   \   0000037A   0x2200             MOVS     R2,#+0
   \   0000037C   0x2102             MOVS     R1,#+2
   \   0000037E   0x2054             MOVS     R0,#+84
   \   00000380   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1188              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   \   00000384   0x2054             MOVS     R0,#+84
   \   00000386   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   0000038A   0xE11C             B.N      ??HAL_SPI_MspInit_1
   1189          
   1190            /* USER CODE BEGIN SPI4_MspInit 1 */
   1191          
   1192            /* USER CODE END SPI4_MspInit 1 */
   1193            }
   1194            else if(hspi->Instance==SPI5)
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   0000038C   0x6820             LDR      R0,[R4, #+0]
   \   0000038E   0x....             LDR.N    R1,??DataTable13_4  ;; 0x40015000
   \   00000390   0x4288             CMP      R0,R1
   \   00000392   0xF040 0x808A      BNE.W    ??HAL_SPI_MspInit_5
   1195            {
   1196            /* USER CODE BEGIN SPI5_MspInit 0 */
   1197          
   1198            /* USER CODE END SPI5_MspInit 0 */
   1199              /* Peripheral clock enable */
   1200              __HAL_RCC_SPI5_CLK_ENABLE();
   \   00000396   0x.... 0x....      LDR.W    R0,??DataTable17_9  ;; 0x40023844
   \   0000039A   0x6800             LDR      R0,[R0, #+0]
   \   0000039C   0xF450 0x1080      ORRS     R0,R0,#0x100000
   \   000003A0   0x.... 0x....      LDR.W    R1,??DataTable17_9  ;; 0x40023844
   \   000003A4   0x6008             STR      R0,[R1, #+0]
   \   000003A6   0x.... 0x....      LDR.W    R0,??DataTable17_9  ;; 0x40023844
   \   000003AA   0x6800             LDR      R0,[R0, #+0]
   \   000003AC   0xF410 0x1080      ANDS     R0,R0,#0x100000
   \   000003B0   0x9000             STR      R0,[SP, #+0]
   \   000003B2   0x9800             LDR      R0,[SP, #+0]
   1201              __HAL_RCC_GPIOF_CLK_ENABLE();
   \   000003B4   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   000003B8   0x6800             LDR      R0,[R0, #+0]
   \   000003BA   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000003BE   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   000003C2   0x6008             STR      R0,[R1, #+0]
   \   000003C4   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   000003C8   0x6800             LDR      R0,[R0, #+0]
   \   000003CA   0xF010 0x0020      ANDS     R0,R0,#0x20
   \   000003CE   0x9000             STR      R0,[SP, #+0]
   \   000003D0   0x9800             LDR      R0,[SP, #+0]
   1202            
   1203              /**SPI5 GPIO Configuration    
   1204              PF7     ------> SPI5_SCK  --> PF7
   1205              PF11     ------> SPI5_MOSI --> PF9
   1206                               SPI5_MISO --> PF8
   1207                                    NSS   -->  PF6
   1208              */
   1209              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   \   000003D2   0xF44F 0x7070      MOV      R0,#+960
   \   000003D6   0x9001             STR      R0,[SP, #+4]
   1210              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \   000003D8   0x2012             MOVS     R0,#+18
   \   000003DA   0x9002             STR      R0,[SP, #+8]
   1211              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   000003DC   0x2001             MOVS     R0,#+1
   \   000003DE   0x9003             STR      R0,[SP, #+12]
   1212              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000003E0   0x2003             MOVS     R0,#+3
   \   000003E2   0x9004             STR      R0,[SP, #+16]
   1213              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   \   000003E4   0x2005             MOVS     R0,#+5
   \   000003E6   0x9005             STR      R0,[SP, #+20]
   1214              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   \   000003E8   0xA901             ADD      R1,SP,#+4
   \   000003EA   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x40021400
   \   000003EE   0x.... 0x....      BL       HAL_GPIO_Init
   1215          
   1216          #if 0
   1217            /* Peripheral interrupt init*/
   1218              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1219              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1220          
   1221          #else
   1222          	/* Peripheral DMA init*/
   1223              __HAL_RCC_DMA2_CLK_ENABLE();
   \   000003F2   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   000003F6   0x6800             LDR      R0,[R0, #+0]
   \   000003F8   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   000003FC   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   00000400   0x6008             STR      R0,[R1, #+0]
   \   00000402   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000406   0x6800             LDR      R0,[R0, #+0]
   \   00000408   0xF410 0x0080      ANDS     R0,R0,#0x400000
   \   0000040C   0x9000             STR      R0,[SP, #+0]
   \   0000040E   0x9800             LDR      R0,[SP, #+0]
   1224          	hdma_spi5_rx.Instance = DMA2_Stream5;
   \   00000410   0x.... 0x....      LDR.W    R0,??DataTable20_3  ;; 0x40026488
   \   00000414   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000418   0x6008             STR      R0,[R1, #+0]
   1225          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   \   0000041A   0xF05F 0x6060      MOVS     R0,#+234881024
   \   0000041E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000422   0x6048             STR      R0,[R1, #+4]
   1226          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \   00000424   0x2000             MOVS     R0,#+0
   \   00000426   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000042A   0x6088             STR      R0,[R1, #+8]
   1227          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   \   0000042C   0x2000             MOVS     R0,#+0
   \   0000042E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000432   0x60C8             STR      R0,[R1, #+12]
   1228          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   \   00000434   0xF44F 0x6080      MOV      R0,#+1024
   \   00000438   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000043C   0x6108             STR      R0,[R1, #+16]
   1229          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   0000043E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000442   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000446   0x6148             STR      R0,[R1, #+20]
   1230          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   \   00000448   0xF44F 0x5000      MOV      R0,#+8192
   \   0000044C   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000450   0x6188             STR      R0,[R1, #+24]
   1231          	hdma_spi5_rx.Init.Mode = DMA_NORMAL;
   \   00000452   0x2000             MOVS     R0,#+0
   \   00000454   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000458   0x61C8             STR      R0,[R1, #+28]
   1232          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   \   0000045A   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000045E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000462   0x6208             STR      R0,[R1, #+32]
   1233          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   \   00000464   0x2000             MOVS     R0,#+0
   \   00000466   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000046A   0x6248             STR      R0,[R1, #+36]
   1234          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   0000046C   0x2003             MOVS     R0,#+3
   \   0000046E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000472   0x6288             STR      R0,[R1, #+40]
   1235          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   \   00000474   0x2000             MOVS     R0,#+0
   \   00000476   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000047A   0x62C8             STR      R0,[R1, #+44]
   1236          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   \   0000047C   0x2000             MOVS     R0,#+0
   \   0000047E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000482   0x6308             STR      R0,[R1, #+48]
   1237          	HAL_DMA_Init(&hdma_spi5_rx);
   \   00000484   0x.... 0x....      LDR.W    R0,??DataTable20_4
   \   00000488   0x.... 0x....      BL       HAL_DMA_Init
   1238          
   1239              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   \   0000048C   0x.... 0x....      LDR.W    R0,??DataTable20_4
   \   00000490   0x65A0             STR      R0,[R4, #+88]
   \   00000492   0x.... 0x....      LDR.W    R0,??DataTable20_4
   \   00000496   0x6384             STR      R4,[R0, #+56]
   1240          
   1241          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   \   00000498   0x2200             MOVS     R2,#+0
   \   0000049A   0x2104             MOVS     R1,#+4
   \   0000049C   0x2044             MOVS     R0,#+68
   \   0000049E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1242          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   \   000004A2   0x2044             MOVS     R0,#+68
   \   000004A4   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   000004A8   0xE08D             B.N      ??HAL_SPI_MspInit_1
   1243          
   1244          #endif
   1245            /* USER CODE END SPI5_MspInit 1 */
   1246            }
   1247            else if(hspi->Instance==SPI6)
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   000004AA   0x6820             LDR      R0,[R4, #+0]
   \   000004AC   0x....             LDR.N    R1,??DataTable13_11  ;; 0x40015400
   \   000004AE   0x4288             CMP      R0,R1
   \   000004B0   0xF040 0x8089      BNE.W    ??HAL_SPI_MspInit_1
   1248            {
   1249            /* USER CODE BEGIN SPI6_MspInit 0 */
   1250          
   1251            /* USER CODE END SPI6_MspInit 0 */
   1252              /* Peripheral clock enable */
   1253              __SPI6_CLK_ENABLE();
   \   000004B4   0x.... 0x....      LDR.W    R0,??DataTable17_9  ;; 0x40023844
   \   000004B8   0x6800             LDR      R0,[R0, #+0]
   \   000004BA   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \   000004BE   0x.... 0x....      LDR.W    R1,??DataTable17_9  ;; 0x40023844
   \   000004C2   0x6008             STR      R0,[R1, #+0]
   \   000004C4   0x.... 0x....      LDR.W    R0,??DataTable17_9  ;; 0x40023844
   \   000004C8   0x6800             LDR      R0,[R0, #+0]
   \   000004CA   0xF410 0x1000      ANDS     R0,R0,#0x200000
   \   000004CE   0x9000             STR      R0,[SP, #+0]
   \   000004D0   0x9800             LDR      R0,[SP, #+0]
   1254              __HAL_RCC_GPIOG_CLK_ENABLE();
   \   000004D2   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   000004D6   0x6800             LDR      R0,[R0, #+0]
   \   000004D8   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   000004DC   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   000004E0   0x6008             STR      R0,[R1, #+0]
   \   000004E2   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   000004E6   0x6800             LDR      R0,[R0, #+0]
   \   000004E8   0xF010 0x0040      ANDS     R0,R0,#0x40
   \   000004EC   0x9000             STR      R0,[SP, #+0]
   \   000004EE   0x9800             LDR      R0,[SP, #+0]
   1255            
   1256              /**SPI6 GPIO Configuration    
   1257              PG13     ------> SPI6_SCK
   1258              PG14     ------> SPI6_MOSI 
   1259              */
   1260              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   \   000004F0   0xF44F 0x40C0      MOV      R0,#+24576
   \   000004F4   0x9001             STR      R0,[SP, #+4]
   1261              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   000004F6   0x2002             MOVS     R0,#+2
   \   000004F8   0x9002             STR      R0,[SP, #+8]
   1262              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   000004FA   0x2000             MOVS     R0,#+0
   \   000004FC   0x9003             STR      R0,[SP, #+12]
   1263              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000004FE   0x2003             MOVS     R0,#+3
   \   00000500   0x9004             STR      R0,[SP, #+16]
   1264              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   \   00000502   0x2005             MOVS     R0,#+5
   \   00000504   0x9005             STR      R0,[SP, #+20]
   1265              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   \   00000506   0xA901             ADD      R1,SP,#+4
   \   00000508   0x.... 0x....      LDR.W    R0,??DataTable20_5  ;; 0x40021800
   \   0000050C   0x.... 0x....      BL       HAL_GPIO_Init
   1266          
   1267          #if 0
   1268          	  /* Peripheral interrupt init*/
   1269              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1270              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1271          #else
   1272          	/* Peripheral DMA init*/
   1273          	__HAL_RCC_DMA2_CLK_ENABLE();
   \   00000510   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000514   0x6800             LDR      R0,[R0, #+0]
   \   00000516   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   0000051A   0x.... 0x....      LDR.W    R1,??DataTable17_10  ;; 0x40023830
   \   0000051E   0x6008             STR      R0,[R1, #+0]
   \   00000520   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x40023830
   \   00000524   0x6800             LDR      R0,[R0, #+0]
   \   00000526   0xF410 0x0080      ANDS     R0,R0,#0x400000
   \   0000052A   0x9000             STR      R0,[SP, #+0]
   \   0000052C   0x9800             LDR      R0,[SP, #+0]
   1274          	hdma_spi6_rx.Instance = DMA2_Stream6;
   \   0000052E   0x.... 0x....      LDR.W    R0,??DataTable20_6  ;; 0x400264a0
   \   00000532   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000536   0x6008             STR      R0,[R1, #+0]
   1275          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   \   00000538   0xF05F 0x7000      MOVS     R0,#+33554432
   \   0000053C   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000540   0x6048             STR      R0,[R1, #+4]
   1276          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \   00000542   0x2000             MOVS     R0,#+0
   \   00000544   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000548   0x6088             STR      R0,[R1, #+8]
   1277          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   \   0000054A   0x2000             MOVS     R0,#+0
   \   0000054C   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000550   0x60C8             STR      R0,[R1, #+12]
   1278          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   \   00000552   0xF44F 0x6080      MOV      R0,#+1024
   \   00000556   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   0000055A   0x6108             STR      R0,[R1, #+16]
   1279          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   0000055C   0xF44F 0x6000      MOV      R0,#+2048
   \   00000560   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000564   0x6148             STR      R0,[R1, #+20]
   1280          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   00000566   0xF44F 0x6000      MOV      R0,#+2048
   \   0000056A   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   0000056E   0x6188             STR      R0,[R1, #+24]
   1281          	hdma_spi6_rx.Init.Mode = DMA_NORMAL;
   \   00000570   0x2000             MOVS     R0,#+0
   \   00000572   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000576   0x61C8             STR      R0,[R1, #+28]
   1282          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   \   00000578   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000057C   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000580   0x6208             STR      R0,[R1, #+32]
   1283          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   \   00000582   0x2000             MOVS     R0,#+0
   \   00000584   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000588   0x6248             STR      R0,[R1, #+36]
   1284          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   0000058A   0x2003             MOVS     R0,#+3
   \   0000058C   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000590   0x6288             STR      R0,[R1, #+40]
   1285          	hdma_spi6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   \   00000592   0x2000             MOVS     R0,#+0
   \   00000594   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000598   0x62C8             STR      R0,[R1, #+44]
   1286          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   \   0000059A   0x2000             MOVS     R0,#+0
   \   0000059C   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   000005A0   0x6308             STR      R0,[R1, #+48]
   1287          	HAL_DMA_Init(&hdma_spi6_rx);
   \   000005A2   0x.... 0x....      LDR.W    R0,??DataTable20_7
   \   000005A6   0x.... 0x....      BL       HAL_DMA_Init
   1288          
   1289          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   \   000005AA   0x.... 0x....      LDR.W    R0,??DataTable20_7
   \   000005AE   0x65A0             STR      R0,[R4, #+88]
   \   000005B0   0x.... 0x....      LDR.W    R0,??DataTable20_7
   \   000005B4   0x6384             STR      R4,[R0, #+56]
   1290          
   1291          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   \   000005B6   0x2201             MOVS     R2,#+1
   \   000005B8   0x2107             MOVS     R1,#+7
   \   000005BA   0x2045             MOVS     R0,#+69
   \   000005BC   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1292          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   \   000005C0   0x2045             MOVS     R0,#+69
   \   000005C2   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1293          
   1294          #endif
   1295            }
   1296          
   1297          }
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   000005C6   0xB006             ADD      SP,SP,#+24
   \   000005C8   0xBD10             POP      {R4,PC}          ;; return
   1298          
   1299          
   1300          
   1301          

   \                                 In section .text, align 2, keep-with-next
   1302          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1303          {
   1304            /* Check the parameters */
   1305            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1306            
   1307            /* Write in the DR register the data to be sent */
   1308            SPIx->DR = Data;
   \                     SPI_I2S_SendData: (+1)
   \   00000000   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000002   0x60C1             STR      R1,[R0, #+12]
   1309          }
   \   00000004   0x4770             BX       LR               ;; return
   1310          
   1311          

   \                                 In section .text, align 2, keep-with-next
   1312          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1313          {
   1314            /* Check the parameters */
   1315            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1316            
   1317            /* Return the data in the DR register */
   1318            return SPIx->DR;
   \                     SPI_I2S_ReceiveData: (+1)
   \   00000000   0x68C0             LDR      R0,[R0, #+12]
   \   00000002   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0x4770             BX       LR               ;; return
   1319          }
   1320          
   1321          

   \                                 In section .text, align 2, keep-with-next
   1322          void RecordUpdBuf(void)
   1323          {
   1324          
   1325               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_8
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xF040 0x8167      BNE.W    ??RecordUpdBuf_0
   1326               {
   1327                  WaveRecord_flgInt=0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   00000012   0x7008             STRB     R0,[R1, #+0]
   1328          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable20_9
   \   00000018   0x8800             LDRH     R0,[R0, #+0]
   \   0000001A   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000001E   0xF280 0x815C      BGE.W    ??RecordUpdBuf_0
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   00000026   0x8800             LDRH     R0,[R0, #+0]
   \   00000028   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000002C   0xF280 0x8155      BGE.W    ??RecordUpdBuf_0
   1329          		//			  &&(stLR!=stLROld))
   1330          			{
   1331          		/*-------------------------------------------------------------------------------------------------------------
   1332          					  
   1333          			Sequence  Record Data					  Processing Data				  Player Data
   1334          					  
   1335          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1336          					  
   1337          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1338          					  
   1339          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1340          		 ---------------------------------------------------------------------------------------------------------------*/
   1341          					  /* Recording Audio Data */						 
   1342          					   switch (buffer_switch)
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable20_11
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD004             BEQ.N    ??RecordUpdBuf_1
   \   0000003A   0x2802             CMP      R0,#+2
   \   0000003C   0xF000 0x80E2      BEQ.W    ??RecordUpdBuf_2
   \   00000040   0xD370             BCC.N    ??RecordUpdBuf_3
   \   00000042   0xE14A             B.N      ??RecordUpdBuf_4
   1343          					   {
   1344          								case BUF1_PLAY:
   1345          
   1346          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_1: (+1)
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable20_9
   \   00000048   0x8800             LDRH     R0,[R0, #+0]
   \   0000004A   0x1C41             ADDS     R1,R0,#+1
   \   0000004C   0x.... 0x....      LDR.W    R2,??DataTable20_9
   \   00000050   0x8011             STRH     R1,[R2, #+0]
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable20_12
   \   00000056   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000005A   0x.... 0x....      LDR.W    R2,??DataTable20_13  ;; 0xc00080a0
   \   0000005E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000060   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
   1347          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   00000068   0x8800             LDRH     R0,[R0, #+0]
   \   0000006A   0x1C41             ADDS     R1,R0,#+1
   \   0000006C   0x.... 0x....      LDR.W    R2,??DataTable20_10
   \   00000070   0x8011             STRH     R1,[R2, #+0]
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable20_14
   \   00000076   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000007A   0x.... 0x....      LDR.W    R2,??DataTable20_13  ;; 0xc00080a0
   \   0000007E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000080   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   00000084   0xF241 0x0214      MOVW     R2,#+4116
   \   00000088   0x5211             STRH     R1,[R2, R0]
   1348          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable20_15
   \   0000008E   0x8800             LDRH     R0,[R0, #+0]
   \   00000090   0x1C41             ADDS     R1,R0,#+1
   \   00000092   0x.... 0x....      LDR.W    R2,??DataTable20_15
   \   00000096   0x8011             STRH     R1,[R2, #+0]
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable20_16
   \   0000009C   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000A0   0x.... 0x....      LDR.W    R2,??DataTable20_13  ;; 0xc00080a0
   \   000000A4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A6   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000000AA   0xF242 0x0228      MOVW     R2,#+8232
   \   000000AE   0x5211             STRH     R1,[R2, R0]
   1349          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable20_17
   \   000000B4   0x8800             LDRH     R0,[R0, #+0]
   \   000000B6   0x1C41             ADDS     R1,R0,#+1
   \   000000B8   0x.... 0x....      LDR.W    R2,??DataTable20_17
   \   000000BC   0x8011             STRH     R1,[R2, #+0]
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable20_18
   \   000000C2   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000C6   0x.... 0x....      LDR.W    R2,??DataTable20_13  ;; 0xc00080a0
   \   000000CA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CC   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000000D0   0xF243 0x023C      MOVW     R2,#+12348
   \   000000D4   0x5211             STRH     R1,[R2, R0]
   1350          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable20_19
   \   000000DA   0x8800             LDRH     R0,[R0, #+0]
   \   000000DC   0x1C41             ADDS     R1,R0,#+1
   \   000000DE   0x.... 0x....      LDR.W    R2,??DataTable20_19
   \   000000E2   0x8011             STRH     R1,[R2, #+0]
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable20_20
   \   000000E8   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000000EC   0x.... 0x....      LDR.W    R2,??DataTable20_13  ;; 0xc00080a0
   \   000000F0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F2   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000000F6   0xF244 0x0250      MOVW     R2,#+16464
   \   000000FA   0x5211             STRH     R1,[R2, R0]
   1351          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable20_21
   \   00000100   0x8800             LDRH     R0,[R0, #+0]
   \   00000102   0x1C41             ADDS     R1,R0,#+1
   \   00000104   0x.... 0x....      LDR.W    R2,??DataTable20_21
   \   00000108   0x8011             STRH     R1,[R2, #+0]
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable20_22
   \   0000010E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000112   0x.... 0x....      LDR.W    R2,??DataTable20_13  ;; 0xc00080a0
   \   00000116   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000118   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   0000011C   0xF245 0x0264      MOVW     R2,#+20580
   \   00000120   0x5211             STRH     R1,[R2, R0]
   1352          	
   1353          										break;
   \   00000122   0xE0DA             B.N      ??RecordUpdBuf_0
   1354          								case BUF2_PLAY:
   1355          
   1356          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_3: (+1)
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable20_9
   \   00000128   0x8800             LDRH     R0,[R0, #+0]
   \   0000012A   0x1C41             ADDS     R1,R0,#+1
   \   0000012C   0x.... 0x....      LDR.W    R2,??DataTable20_9
   \   00000130   0x8011             STRH     R1,[R2, #+0]
   \   00000132   0x.... 0x....      LDR.W    R1,??DataTable20_12
   \   00000136   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000013A   0x.... 0x....      LDR.W    R2,??DataTable20_23  ;; 0xc0010140
   \   0000013E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000140   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
   1357          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   00000148   0x8800             LDRH     R0,[R0, #+0]
   \   0000014A   0x1C41             ADDS     R1,R0,#+1
   \   0000014C   0x.... 0x....      LDR.W    R2,??DataTable20_10
   \   00000150   0x8011             STRH     R1,[R2, #+0]
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable20_14
   \   00000156   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000015A   0x.... 0x....      LDR.W    R2,??DataTable20_23  ;; 0xc0010140
   \   0000015E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000160   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   00000164   0xF241 0x0214      MOVW     R2,#+4116
   \   00000168   0x5211             STRH     R1,[R2, R0]
   1358          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable20_15
   \   0000016E   0x8800             LDRH     R0,[R0, #+0]
   \   00000170   0x1C41             ADDS     R1,R0,#+1
   \   00000172   0x.... 0x....      LDR.W    R2,??DataTable20_15
   \   00000176   0x8011             STRH     R1,[R2, #+0]
   \   00000178   0x.... 0x....      LDR.W    R1,??DataTable20_16
   \   0000017C   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000180   0x.... 0x....      LDR.W    R2,??DataTable20_23  ;; 0xc0010140
   \   00000184   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000186   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   0000018A   0xF242 0x0228      MOVW     R2,#+8232
   \   0000018E   0x5211             STRH     R1,[R2, R0]
   1359          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   00000190   0x.... 0x....      LDR.W    R0,??DataTable20_17
   \   00000194   0x8800             LDRH     R0,[R0, #+0]
   \   00000196   0x1C41             ADDS     R1,R0,#+1
   \   00000198   0x.... 0x....      LDR.W    R2,??DataTable20_17
   \   0000019C   0x8011             STRH     R1,[R2, #+0]
   \   0000019E   0x.... 0x....      LDR.W    R1,??DataTable20_18
   \   000001A2   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001A6   0x.... 0x....      LDR.W    R2,??DataTable20_23  ;; 0xc0010140
   \   000001AA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001AC   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000001B0   0xF243 0x023C      MOVW     R2,#+12348
   \   000001B4   0x5211             STRH     R1,[R2, R0]
   1360          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable20_19
   \   000001BA   0x8800             LDRH     R0,[R0, #+0]
   \   000001BC   0x1C41             ADDS     R1,R0,#+1
   \   000001BE   0x.... 0x....      LDR.W    R2,??DataTable20_19
   \   000001C2   0x8011             STRH     R1,[R2, #+0]
   \   000001C4   0x.... 0x....      LDR.W    R1,??DataTable20_20
   \   000001C8   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001CC   0x.... 0x....      LDR.W    R2,??DataTable20_23  ;; 0xc0010140
   \   000001D0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001D2   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000001D6   0xF244 0x0250      MOVW     R2,#+16464
   \   000001DA   0x5211             STRH     R1,[R2, R0]
   1361          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   000001DC   0x.... 0x....      LDR.W    R0,??DataTable20_21
   \   000001E0   0x8800             LDRH     R0,[R0, #+0]
   \   000001E2   0x1C41             ADDS     R1,R0,#+1
   \   000001E4   0x.... 0x....      LDR.W    R2,??DataTable20_21
   \   000001E8   0x8011             STRH     R1,[R2, #+0]
   \   000001EA   0x.... 0x....      LDR.W    R1,??DataTable20_22
   \   000001EE   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001F2   0x.... 0x....      LDR.W    R2,??DataTable20_23  ;; 0xc0010140
   \   000001F6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001F8   0xEB12 0x0040      ADDS     R0,R2,R0, LSL #+1
   \   000001FC   0xF245 0x0264      MOVW     R2,#+20580
   \   00000200   0x5211             STRH     R1,[R2, R0]
   1362          		
   1363          
   1364          										break;
   \   00000202   0xE06A             B.N      ??RecordUpdBuf_0
   1365          								case BUF3_PLAY:
   1366          
   1367          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_2: (+1)
   \   00000204   0x.... 0x....      LDR.W    R0,??DataTable20_9
   \   00000208   0x8800             LDRH     R0,[R0, #+0]
   \   0000020A   0x1C41             ADDS     R1,R0,#+1
   \   0000020C   0x.... 0x....      LDR.W    R2,??DataTable20_9
   \   00000210   0x8011             STRH     R1,[R2, #+0]
   \   00000212   0x.... 0x....      LDR.W    R1,??DataTable20_12
   \   00000216   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000021A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000021C   0x0040             LSLS     R0,R0,#+1
   \   0000021E   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000222   0x8001             STRH     R1,[R0, #+0]
   1368          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   00000224   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   00000228   0x8800             LDRH     R0,[R0, #+0]
   \   0000022A   0x1C41             ADDS     R1,R0,#+1
   \   0000022C   0x.... 0x....      LDR.W    R2,??DataTable20_10
   \   00000230   0x8011             STRH     R1,[R2, #+0]
   \   00000232   0x.... 0x....      LDR.W    R1,??DataTable20_14
   \   00000236   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000023A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000023C   0x0040             LSLS     R0,R0,#+1
   \   0000023E   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000242   0xF241 0x0214      MOVW     R2,#+4116
   \   00000246   0x5211             STRH     R1,[R2, R0]
   1369          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   00000248   0x.... 0x....      LDR.W    R0,??DataTable20_15
   \   0000024C   0x8800             LDRH     R0,[R0, #+0]
   \   0000024E   0x1C41             ADDS     R1,R0,#+1
   \   00000250   0x.... 0x....      LDR.W    R2,??DataTable20_15
   \   00000254   0x8011             STRH     R1,[R2, #+0]
   \   00000256   0x.... 0x....      LDR.W    R1,??DataTable20_16
   \   0000025A   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   0000025E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000260   0x0040             LSLS     R0,R0,#+1
   \   00000262   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000266   0xF242 0x0228      MOVW     R2,#+8232
   \   0000026A   0x5211             STRH     R1,[R2, R0]
   1370          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \   0000026C   0x.... 0x....      LDR.W    R0,??DataTable20_17
   \   00000270   0x8800             LDRH     R0,[R0, #+0]
   \   00000272   0x1C41             ADDS     R1,R0,#+1
   \   00000274   0x.... 0x....      LDR.W    R2,??DataTable20_17
   \   00000278   0x8011             STRH     R1,[R2, #+0]
   \   0000027A   0x.... 0x....      LDR.W    R1,??DataTable20_18
   \   0000027E   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   00000282   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000284   0x0040             LSLS     R0,R0,#+1
   \   00000286   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000028A   0xF243 0x023C      MOVW     R2,#+12348
   \   0000028E   0x5211             STRH     R1,[R2, R0]
   1371          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   00000290   0x.... 0x....      LDR.W    R0,??DataTable20_19
   \   00000294   0x8800             LDRH     R0,[R0, #+0]
   \   00000296   0x1C41             ADDS     R1,R0,#+1
   \   00000298   0x.... 0x....      LDR.W    R2,??DataTable20_19
   \   0000029C   0x8011             STRH     R1,[R2, #+0]
   \   0000029E   0x.... 0x....      LDR.W    R1,??DataTable20_20
   \   000002A2   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000002A6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000002A8   0x0040             LSLS     R0,R0,#+1
   \   000002AA   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000002AE   0xF244 0x0250      MOVW     R2,#+16464
   \   000002B2   0x5211             STRH     R1,[R2, R0]
   1372          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   \   000002B4   0x.... 0x....      LDR.W    R0,??DataTable20_21
   \   000002B8   0x8800             LDRH     R0,[R0, #+0]
   \   000002BA   0x1C41             ADDS     R1,R0,#+1
   \   000002BC   0x.... 0x....      LDR.W    R2,??DataTable20_21
   \   000002C0   0x8011             STRH     R1,[R2, #+0]
   \   000002C2   0x.... 0x....      LDR.W    R1,??DataTable20_22
   \   000002C6   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000002CA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000002CC   0x0040             LSLS     R0,R0,#+1
   \   000002CE   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000002D2   0xF245 0x0264      MOVW     R2,#+20580
   \   000002D6   0x5211             STRH     R1,[R2, R0]
   1373          										break;
   \   000002D8   0xE7FF             B.N      ??RecordUpdBuf_0
   1374          								default:
   1375          										break; 
   1376          					   }
   1377          				
   1378          				}
   1379                               
   1380               	}
   1381          }
   \                     ??RecordUpdBuf_4: (+1)
   \                     ??RecordUpdBuf_0: (+1)
   \   000002DA   0x4770             BX       LR               ;; return
   \   000002DC                      REQUIRE Buffer2
   \   000002DC                      REQUIRE Buffer3
   \   000002DC                      REQUIRE Buffer1
   1382          
   1383          

   \                                 In section .text, align 2, keep-with-next
   1384          void DMA2_Stream5_IRQHandler(void)
   1385          {
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1386            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1387          
   1388            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1389            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable20_4
   \   00000006   0x.... 0x....      BL       HAL_DMA_IRQHandler
   1390            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1391          
   1392            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1393          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
   1394          
   1395          /**
   1396          * @brief This function handles DMA2 stream6 global interrupt.
   1397          */

   \                                 In section .text, align 2, keep-with-next
   1398          void DMA2_Stream6_IRQHandler(void)
   1399          {
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1400            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1401          
   1402            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1403            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable20_7
   \   00000006   0x.... 0x....      BL       HAL_DMA_IRQHandler
   1404            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1405          
   1406            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1407          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
   1408          

   \                                 In section .text, align 2, keep-with-next
   1409          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1410          {
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1411              if(hspi->Instance==SPI1)
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable17_8  ;; 0x40013000
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD002             BEQ.N    ??HAL_SPI_RxCpltCallback_0
   1412              {
   1413                  /* Copy Data to Record Buffer */
   1414          		//RecordUpdBuf();
   1415          		//XferCplt = 1;
   1416                  //Audio_Play_Out();
   1417              }
   1418              else if (hspi->Instance==SPI2)
   \   0000000C   0x6820             LDR      R0,[R4, #+0]
   \   0000000E   0x....             LDR.N    R1,??DataTable17_12  ;; 0x40003800
   \   00000010   0x4288             CMP      R0,R1
   1419              {
   1420          
   1421              }
   1422              else if (hspi->Instance==SPI4)
   1423              {
   1424          
   1425              }
   1426          	else
   1427          	{
   1428          
   1429          	}
   1430          
   1431              if (hspi->Instance==SPI5)
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   00000012   0x6820             LDR      R0,[R4, #+0]
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable20_24  ;; 0x40015000
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xD101             BNE.N    ??HAL_SPI_RxCpltCallback_1
   1432              {
   1433                  MIC7Rec();
   \   0000001C   0x.... 0x....      BL       MIC7Rec
   1434              }
   1435              else
   1436              {
   1437                
   1438              }
   1439              
   1440              if (hspi->Instance==SPI6) //MIC8
   \                     ??HAL_SPI_RxCpltCallback_1: (+1)
   \   00000020   0x6820             LDR      R0,[R4, #+0]
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable20_25  ;; 0x40015400
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD101             BNE.N    ??HAL_SPI_RxCpltCallback_2
   1441              {
   1442          #if 0							
   1443          
   1444              if (swtSDO8==0x01)
   1445             {
   1446                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1447             }
   1448             else
   1449             {
   1450          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1451             }      
   1452             AudioUSBSend(idxFrmPDMMic8++);
   1453          
   1454             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   1455             {
   1456                 swtSDO8^=0x01;
   1457                 WaveRecord_flgSDO8Finish = 1;
   1458                 idxFrmPDMMic8 = 0;
   1459          		RESET_IDX
   1460          		XferCplt = 0; // clear DMA interrupt flag
   1461          		switch (buffer_switch)
   1462          		{
   1463          	        case BUF1_PLAY: 		
   1464          	          buffer_switch = BUF3_PLAY;
   1465          	          break;
   1466          	        case BUF2_PLAY: 
   1467          	          buffer_switch = BUF1_PLAY;		
   1468          	          break;
   1469          	        case BUF3_PLAY: 	
   1470          	          buffer_switch = BUF2_PLAY;
   1471          	          break;
   1472          	        default:
   1473          	          break;
   1474          		}
   1475          
   1476          		/* Last player Frame is finished */
   1477          		AudioPlayerUpd(); 		
   1478          		
   1479          		if (cntStrt<100) cntStrt++;		   
   1480                  
   1481             }
   1482          
   1483          
   1484          #else
   1485              MIC8Rec();
   \   0000002A   0x.... 0x....      BL       MIC8Rec
   1486          	
   1487          #endif
   1488          
   1489            }
   1490          }
   \                     ??HAL_SPI_RxCpltCallback_2: (+1)
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
   1491          

   \                                 In section .text, align 2, keep-with-next
   1492          void PDM2PCMSDO78(void)
   1493          {
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1494          static int16_t Mic7LPOld,Mic8LPOld;
   1495          uint8_t buffer_switch_tmp;
   1496          
   1497          buffer_switch_tmp = buffer_switch;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable20_11
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x0004             MOVS     R4,R0
   1498          
   1499          /*-------------------------------------------------------------------------------------------------------------
   1500          			  
   1501          	Sequence  Record Data					  Processing Data				  Player Data
   1502          			  
   1503          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1504          			  
   1505          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1506          			  
   1507          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1508           ---------------------------------------------------------------------------------------------------------------*/
   1509          
   1510              /* Data in Mic7 finished recording */
   1511              if (WaveRecord_flgSDO7Finish==1)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable20_26
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xF040 0x814C      BNE.W    ??PDM2PCMSDO78_0
   1512              {
   1513                  WaveRecord_flgSDO7Finish=0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable20_26
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
   1514          
   1515                  uint8_t swtSDO7_tmp;
   1516                  swtSDO7_tmp = swtSDO7;
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable20_27
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0x0005             MOVS     R5,R0
   1517          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000028   0x2600             MOVS     R6,#+0
   \                     ??PDM2PCMSDO78_1: (+1)
   \   0000002A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000002C   0xF5B6 0x5F80      CMP      R6,#+4096
   \   00000030   0xDA7C             BGE.N    ??PDM2PCMSDO78_2
   1518          		{
   1519          	        if(swtSDO7_tmp==0x01)
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x2D01             CMP      R5,#+1
   \   00000036   0xD118             BNE.N    ??PDM2PCMSDO78_3
   1520          	        {
   1521          	            pDataMic7[i%64] = HTONS(TestSDO7[i]);					
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable20_28
   \   0000003C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000003E   0xF830 0x0016      LDRH     R0,[R0, R6, LSL #+1]
   \   00000042   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable20_28
   \   00000048   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000004A   0xF831 0x1016      LDRH     R1,[R1, R6, LSL #+1]
   \   0000004E   0x0209             LSLS     R1,R1,#+8
   \   00000050   0xEA51 0x2010      ORRS     R0,R1,R0, LSR #+8
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable20_29
   \   00000058   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000005A   0x2240             MOVS     R2,#+64
   \   0000005C   0xFB96 0xF3F2      SDIV     R3,R6,R2
   \   00000060   0xFB03 0x6312      MLS      R3,R3,R2,R6
   \   00000064   0xF821 0x0013      STRH     R0,[R1, R3, LSL #+1]
   \   00000068   0xE017             B.N      ??PDM2PCMSDO78_4
   1522          	        }
   1523          	        else
   1524          	        {
   1525          	           pDataMic7[i%64] = HTONS(TestSDO7_1[i]);
   \                     ??PDM2PCMSDO78_3: (+1)
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable20_30
   \   0000006E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000070   0xF830 0x0016      LDRH     R0,[R0, R6, LSL #+1]
   \   00000074   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable20_30
   \   0000007A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000007C   0xF831 0x1016      LDRH     R1,[R1, R6, LSL #+1]
   \   00000080   0x0209             LSLS     R1,R1,#+8
   \   00000082   0xEA51 0x2010      ORRS     R0,R1,R0, LSR #+8
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable20_29
   \   0000008A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000008C   0x2240             MOVS     R2,#+64
   \   0000008E   0xFB96 0xF3F2      SDIV     R3,R6,R2
   \   00000092   0xFB03 0x6312      MLS      R3,R3,R2,R6
   \   00000096   0xF821 0x0013      STRH     R0,[R1, R3, LSL #+1]
   1526          	        }
   1527          
   1528          	        /* PDM conversion for frame of 64 inputs, 16 outputs */
   1529          	        if (i%64==63)
   \                     ??PDM2PCMSDO78_4: (+1)
   \   0000009A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000009C   0x2040             MOVS     R0,#+64
   \   0000009E   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   000000A2   0xFB01 0x6110      MLS      R1,R1,R0,R6
   \   000000A6   0x293F             CMP      R1,#+63
   \   000000A8   0xD13E             BNE.N    ??PDM2PCMSDO78_5
   1530          	        {
   1531          				/* Put them in processing phase */
   1532          	          /* Recording Audio Data */						 
   1533          	          switch (buffer_switch_tmp)
   \   000000AA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AC   0x2C00             CMP      R4,#+0
   \   000000AE   0xD003             BEQ.N    ??PDM2PCMSDO78_6
   \   000000B0   0x2C02             CMP      R4,#+2
   \   000000B2   0xD027             BEQ.N    ??PDM2PCMSDO78_7
   \   000000B4   0xD313             BCC.N    ??PDM2PCMSDO78_8
   \   000000B6   0xE037             B.N      ??PDM2PCMSDO78_9
   1534          	          {
   1535          			    case BUF1_PLAY:								
   1536                            PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 54 ,
   1537                            (PDMFilter_InitStruct *)&Filter[0]);						  
   \                     ??PDM2PCMSDO78_6: (+1)
   \   000000B8   0x.... 0x....      LDR.W    R3,??DataTable20_31
   \   000000BC   0x2236             MOVS     R2,#+54
   \   000000BE   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000C0   0x2040             MOVS     R0,#+64
   \   000000C2   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable20_13  ;; 0xc00080a0
   \   000000CA   0xEB11 0x1040      ADDS     R0,R1,R0, LSL #+5
   \   000000CE   0xF500 0x41C0      ADD      R1,R0,#+24576
   \   000000D2   0x3178             ADDS     R1,R1,#+120
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable20_29
   \   000000D8   0x.... 0x....      BL       PDM_Filter_64_LSB
   1538                            break;	              
   \   000000DC   0xE024             B.N      ??PDM2PCMSDO78_5
   1539          	            case BUF2_PLAY:
   1540          					PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 54 ,
   1541          					(PDMFilter_InitStruct *)&Filter[0]);							
   \                     ??PDM2PCMSDO78_8: (+1)
   \   000000DE   0x.... 0x....      LDR.W    R3,??DataTable20_31
   \   000000E2   0x2236             MOVS     R2,#+54
   \   000000E4   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000E6   0x2040             MOVS     R0,#+64
   \   000000E8   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable20_23  ;; 0xc0010140
   \   000000F0   0xEB11 0x1040      ADDS     R0,R1,R0, LSL #+5
   \   000000F4   0xF500 0x41C0      ADD      R1,R0,#+24576
   \   000000F8   0x3178             ADDS     R1,R1,#+120
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable20_29
   \   000000FE   0x.... 0x....      BL       PDM_Filter_64_LSB
   1542          					break;
   \   00000102   0xE011             B.N      ??PDM2PCMSDO78_5
   1543          	            case BUF3_PLAY:
   1544          					PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 54 ,
   1545          					(PDMFilter_InitStruct *)&Filter[0]);		
   \                     ??PDM2PCMSDO78_7: (+1)
   \   00000104   0x.... 0x....      LDR.W    R3,??DataTable20_31
   \   00000108   0x2236             MOVS     R2,#+54
   \   0000010A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000010C   0x2040             MOVS     R0,#+64
   \   0000010E   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   00000112   0x0140             LSLS     R0,R0,#+5
   \   00000114   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000118   0xF500 0x41C0      ADD      R1,R0,#+24576
   \   0000011C   0x3178             ADDS     R1,R1,#+120
   \   0000011E   0x.... 0x....      LDR.W    R0,??DataTable20_29
   \   00000122   0x.... 0x....      BL       PDM_Filter_64_LSB
   1546          					break;
   \   00000126   0xE7FF             B.N      ??PDM2PCMSDO78_5
   1547          	            default:
   1548          	                break; 
   1549          	          }
   1550          	        }
   1551          	     }
   \                     ??PDM2PCMSDO78_9: (+1)
   \                     ??PDM2PCMSDO78_5: (+1)
   \   00000128   0x1C76             ADDS     R6,R6,#+1
   \   0000012A   0xE77E             B.N      ??PDM2PCMSDO78_1
   1552                  /* LowPass Filter 
   1553                        dT = 1/16000
   1554                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1555          		*/						 
   1556          		switch (buffer_switch)
   \                     ??PDM2PCMSDO78_2: (+1)
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable20_11
   \   00000130   0x7800             LDRB     R0,[R0, #+0]
   \   00000132   0x2800             CMP      R0,#+0
   \   00000134   0xD003             BEQ.N    ??PDM2PCMSDO78_10
   \   00000136   0x2802             CMP      R0,#+2
   \   00000138   0xD027             BEQ.N    ??PDM2PCMSDO78_11
   \   0000013A   0xD313             BCC.N    ??PDM2PCMSDO78_12
   \   0000013C   0xE036             B.N      ??PDM2PCMSDO78_13
   1557          		{
   1558          			case BUF1_PLAY: 
   1559          				LowPassIIR(Buffer2.bufMIC7 ,Buffer2.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_10: (+1)
   \   0000013E   0x2004             MOVS     R0,#+4
   \   00000140   0x9000             STR      R0,[SP, #+0]
   \   00000142   0xF44F 0x6380      MOV      R3,#+1024
   \   00000146   0x.... 0x....      LDR.W    R2,??DataTable20_32
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable20_13  ;; 0xc00080a0
   \   0000014E   0xF500 0x41C0      ADD      R1,R0,#+24576
   \   00000152   0x3178             ADDS     R1,R1,#+120
   \   00000154   0x.... 0x....      LDR.W    R0,??DataTable20_13  ;; 0xc00080a0
   \   00000158   0xF500 0x40C0      ADD      R0,R0,#+24576
   \   0000015C   0x3078             ADDS     R0,R0,#+120
   \   0000015E   0x.... 0x....      BL       LowPassIIR
   1560          			    break;
   \   00000162   0xE023             B.N      ??PDM2PCMSDO78_14
   1561          			case BUF2_PLAY:
   1562          				LowPassIIR(Buffer3.bufMIC7 ,Buffer3.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_12: (+1)
   \   00000164   0x2004             MOVS     R0,#+4
   \   00000166   0x9000             STR      R0,[SP, #+0]
   \   00000168   0xF44F 0x6380      MOV      R3,#+1024
   \   0000016C   0x.... 0x....      LDR.W    R2,??DataTable20_32
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable20_23  ;; 0xc0010140
   \   00000174   0xF500 0x41C0      ADD      R1,R0,#+24576
   \   00000178   0x3178             ADDS     R1,R1,#+120
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable20_23  ;; 0xc0010140
   \   0000017E   0xF500 0x40C0      ADD      R0,R0,#+24576
   \   00000182   0x3078             ADDS     R0,R0,#+120
   \   00000184   0x.... 0x....      BL       LowPassIIR
   1563          			    break;
   \   00000188   0xE010             B.N      ??PDM2PCMSDO78_14
   1564          			case BUF3_PLAY:
   1565          			    LowPassIIR(Buffer1.bufMIC7 ,Buffer1.bufMIC7 ,&Mic7LPOld,AUDIO_OUT_BUFFER_SIZE,4);						
   \                     ??PDM2PCMSDO78_11: (+1)
   \   0000018A   0x2004             MOVS     R0,#+4
   \   0000018C   0x9000             STR      R0,[SP, #+0]
   \   0000018E   0xF44F 0x6380      MOV      R3,#+1024
   \   00000192   0x.... 0x....      LDR.W    R2,??DataTable20_32
   \   00000196   0xF246 0x0078      MOVW     R0,#+24696
   \   0000019A   0xF1B0 0x4180      SUBS     R1,R0,#+1073741824
   \   0000019E   0xF246 0x0078      MOVW     R0,#+24696
   \   000001A2   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000001A6   0x.... 0x....      BL       LowPassIIR
   1566          			    break;
   \   000001AA   0xE7FF             B.N      ??PDM2PCMSDO78_14
   1567          			default:
   1568          			break; 
   1569          		}
   1570          
   1571             switch (buffer_switch_tmp)//buffer_switch_tmp
   \                     ??PDM2PCMSDO78_13: (+1)
   \                     ??PDM2PCMSDO78_14: (+1)
   \   000001AC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001AE   0x2C00             CMP      R4,#+0
   \   000001B0   0xD003             BEQ.N    ??PDM2PCMSDO78_15
   \   000001B2   0x2C02             CMP      R4,#+2
   \   000001B4   0xD053             BEQ.N    ??PDM2PCMSDO78_16
   \   000001B6   0xD329             BCC.N    ??PDM2PCMSDO78_17
   \   000001B8   0xE07A             B.N      ??PDM2PCMSDO78_18
   1572            {
   1573          	case BUF1_PLAY:								
   1574          		Buffer2.bufMIC7[0]=Buffer2.bufMIC7[4];
   \                     ??PDM2PCMSDO78_15: (+1)
   \   000001BA   0x.... 0x....      LDR.W    R0,??DataTable20_13  ;; 0xc00080a0
   \   000001BE   0xF510 0x40C1      ADDS     R0,R0,#+24704
   \   000001C2   0x8800             LDRH     R0,[R0, #+0]
   \   000001C4   0x.... 0x....      LDR.W    R1,??DataTable20_13  ;; 0xc00080a0
   \   000001C8   0xF246 0x0278      MOVW     R2,#+24696
   \   000001CC   0x5250             STRH     R0,[R2, R1]
   1575          		Buffer2.bufMIC7[1]=Buffer2.bufMIC7[5];
   \   000001CE   0x.... 0x....      LDR.W    R0,??DataTable20_13  ;; 0xc00080a0
   \   000001D2   0xF246 0x0182      MOVW     R1,#+24706
   \   000001D6   0x5A08             LDRH     R0,[R1, R0]
   \   000001D8   0x.... 0x....      LDR.W    R1,??DataTable20_13  ;; 0xc00080a0
   \   000001DC   0xF246 0x027A      MOVW     R2,#+24698
   \   000001E0   0x5250             STRH     R0,[R2, R1]
   1576          		Buffer2.bufMIC7[2]=Buffer2.bufMIC7[6];
   \   000001E2   0x.... 0x....      LDR.W    R0,??DataTable20_13  ;; 0xc00080a0
   \   000001E6   0xF246 0x0184      MOVW     R1,#+24708
   \   000001EA   0x5A08             LDRH     R0,[R1, R0]
   \   000001EC   0x.... 0x....      LDR.W    R1,??DataTable20_13  ;; 0xc00080a0
   \   000001F0   0xF246 0x027C      MOVW     R2,#+24700
   \   000001F4   0x5250             STRH     R0,[R2, R1]
   1577          		Buffer2.bufMIC7[3]=Buffer2.bufMIC7[7];								
   \   000001F6   0x.... 0x....      LDR.W    R0,??DataTable20_13  ;; 0xc00080a0
   \   000001FA   0xF246 0x0186      MOVW     R1,#+24710
   \   000001FE   0x5A08             LDRH     R0,[R1, R0]
   \   00000200   0x.... 0x....      LDR.W    R1,??DataTable20_13  ;; 0xc00080a0
   \   00000204   0xF246 0x027E      MOVW     R2,#+24702
   \   00000208   0x5250             STRH     R0,[R2, R1]
   1578          	    break;	              
   \   0000020A   0xE051             B.N      ??PDM2PCMSDO78_0
   1579          	case BUF2_PLAY:	
   1580          		Buffer3.bufMIC7[0]=Buffer3.bufMIC7[4];
   \                     ??PDM2PCMSDO78_17: (+1)
   \   0000020C   0x.... 0x....      LDR.W    R0,??DataTable20_23  ;; 0xc0010140
   \   00000210   0xF510 0x40C1      ADDS     R0,R0,#+24704
   \   00000214   0x8800             LDRH     R0,[R0, #+0]
   \   00000216   0x.... 0x....      LDR.W    R1,??DataTable20_23  ;; 0xc0010140
   \   0000021A   0xF246 0x0278      MOVW     R2,#+24696
   \   0000021E   0x5250             STRH     R0,[R2, R1]
   1581          		Buffer3.bufMIC7[1]=Buffer3.bufMIC7[5];
   \   00000220   0x.... 0x....      LDR.W    R0,??DataTable20_23  ;; 0xc0010140
   \   00000224   0xF246 0x0182      MOVW     R1,#+24706
   \   00000228   0x5A08             LDRH     R0,[R1, R0]
   \   0000022A   0x.... 0x....      LDR.W    R1,??DataTable20_23  ;; 0xc0010140
   \   0000022E   0xF246 0x027A      MOVW     R2,#+24698
   \   00000232   0x5250             STRH     R0,[R2, R1]
   1582          		Buffer3.bufMIC7[2]=Buffer3.bufMIC7[6];
   \   00000234   0x.... 0x....      LDR.W    R0,??DataTable20_23  ;; 0xc0010140
   \   00000238   0xF246 0x0184      MOVW     R1,#+24708
   \   0000023C   0x5A08             LDRH     R0,[R1, R0]
   \   0000023E   0x.... 0x....      LDR.W    R1,??DataTable20_23  ;; 0xc0010140
   \   00000242   0xF246 0x027C      MOVW     R2,#+24700
   \   00000246   0x5250             STRH     R0,[R2, R1]
   1583          		Buffer3.bufMIC7[3]=Buffer3.bufMIC7[7];				
   \   00000248   0x.... 0x....      LDR.W    R0,??DataTable20_23  ;; 0xc0010140
   \   0000024C   0xF246 0x0186      MOVW     R1,#+24710
   \   00000250   0x5A08             LDRH     R0,[R1, R0]
   \   00000252   0x.... 0x....      LDR.W    R1,??DataTable20_23  ;; 0xc0010140
   \   00000256   0xF246 0x027E      MOVW     R2,#+24702
   \   0000025A   0x5250             STRH     R0,[R2, R1]
   1584          	    break;
   \   0000025C   0xE028             B.N      ??PDM2PCMSDO78_0
   1585          	case BUF3_PLAY:
   1586          		Buffer1.bufMIC7[0]=Buffer1.bufMIC7[4];
   \                     ??PDM2PCMSDO78_16: (+1)
   \   0000025E   0xF44F 0x40C1      MOV      R0,#+24704
   \   00000262   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000266   0x8800             LDRH     R0,[R0, #+0]
   \   00000268   0xF246 0x0178      MOVW     R1,#+24696
   \   0000026C   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   00000270   0x8008             STRH     R0,[R1, #+0]
   1587          		Buffer1.bufMIC7[1]=Buffer1.bufMIC7[5];
   \   00000272   0xF246 0x0082      MOVW     R0,#+24706
   \   00000276   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000027A   0x8800             LDRH     R0,[R0, #+0]
   \   0000027C   0xF246 0x017A      MOVW     R1,#+24698
   \   00000280   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   00000284   0x8008             STRH     R0,[R1, #+0]
   1588          		Buffer1.bufMIC7[2]=Buffer1.bufMIC7[6];
   \   00000286   0xF246 0x0084      MOVW     R0,#+24708
   \   0000028A   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   0000028E   0x8800             LDRH     R0,[R0, #+0]
   \   00000290   0xF246 0x017C      MOVW     R1,#+24700
   \   00000294   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   00000298   0x8008             STRH     R0,[R1, #+0]
   1589          		Buffer1.bufMIC7[3]=Buffer1.bufMIC7[7];				
   \   0000029A   0xF246 0x0086      MOVW     R0,#+24710
   \   0000029E   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000002A2   0x8800             LDRH     R0,[R0, #+0]
   \   000002A4   0xF246 0x017E      MOVW     R1,#+24702
   \   000002A8   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   000002AC   0x8008             STRH     R0,[R1, #+0]
   1590          	    break;
   \   000002AE   0xE7FF             B.N      ??PDM2PCMSDO78_0
   1591          	default:
   1592          	         break; 
   1593            }
   1594          
   1595          	}
   1596          #if 0
   1597                      /* Recording Audio Data */						 
   1598          		    switch (buffer_switch)//buffer_switch
   1599          		    {
   1600          		        case BUF1_PLAY:								
   1601          					        /* Update for left-right channel */
   1602          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1603          			        {
   1604          	                    Buffer2.bufMIC7[2*i+1]=  Buffer2.bufMIC7[i];
   1605                                  Buffer2.bufMIC7[2*i] = Buffer2.bufMIC7[i];
   1606          			        }
   1607          					  Buffer2.bufMIC7[0] = Buffer2.bufMIC7[4];
   1608          					  Buffer2.bufMIC7[1] = Buffer2.bufMIC7[5];
   1609          					  Buffer2.bufMIC7[2] = Buffer2.bufMIC7[6];
   1610          					  Buffer2.bufMIC7[3] = Buffer2.bufMIC7[7];
   1611          			            break;
   1612          			     case BUF2_PLAY:
   1613          			        /* Update for left-right channel */
   1614          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1615          			        {				 	
   1616          		                Buffer3.bufMIC7[2*i+1]= Buffer3.bufMIC7[i];
   1617          		                Buffer3.bufMIC7[2*i]= Buffer3.bufMIC7[i];;	
   1618          			        }
   1619          					  Buffer3.bufMIC7[0] = Buffer3.bufMIC7[4];
   1620          					  Buffer3.bufMIC7[1] = Buffer3.bufMIC7[5];
   1621          					  Buffer3.bufMIC7[2] = Buffer3.bufMIC7[6];
   1622          					  Buffer3.bufMIC7[3] = Buffer3.bufMIC7[7];					
   1623          	                break;
   1624          	            case BUF3_PLAY:
   1625          			        /* Update for left-right channel */
   1626          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1627          			        {					
   1628          	                    Buffer1.bufMIC7[2*i+1]= Buffer1.bufMIC7[i];
   1629          	                    Buffer1.bufMIC7[2*i]= Buffer1.bufMIC7[i];;	
   1630          			        }
   1631          					  Buffer1.bufMIC7[0] = Buffer1.bufMIC7[4];
   1632          					  Buffer1.bufMIC7[1] = Buffer1.bufMIC7[5];
   1633          					  Buffer1.bufMIC7[2] = Buffer1.bufMIC7[6];
   1634          					  Buffer1.bufMIC7[3] = Buffer1.bufMIC7[7];						
   1635          	                break;
   1636          	            default:
   1637          	                break; 
   1638          	        }
   1639          	    
   1640          
   1641               }
   1642              
   1643          #endif	
   1644          
   1645          	/* Data in Mic8 finished recording */
   1646          	if (WaveRecord_flgSDO8Finish==1)
   \                     ??PDM2PCMSDO78_18: (+1)
   \                     ??PDM2PCMSDO78_0: (+1)
   \   000002B0   0x.... 0x....      LDR.W    R0,??DataTable20_33
   \   000002B4   0x7800             LDRB     R0,[R0, #+0]
   \   000002B6   0x2801             CMP      R0,#+1
   \   000002B8   0xF040 0x8128      BNE.W    ??PDM2PCMSDO78_19
   1647          	{
   1648          		WaveRecord_flgSDO8Finish=0;
   \   000002BC   0x2000             MOVS     R0,#+0
   \   000002BE   0x.... 0x....      LDR.W    R1,??DataTable20_33
   \   000002C2   0x7008             STRB     R0,[R1, #+0]
   1649          		uint8_t swtSDO8_tmp;
   1650          		swtSDO8_tmp = swtSDO8;
   \   000002C4   0x.... 0x....      LDR.W    R0,??DataTable20_34
   \   000002C8   0x7800             LDRB     R0,[R0, #+0]
   \   000002CA   0x0005             MOVS     R5,R0
   1651          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   000002CC   0x2600             MOVS     R6,#+0
   \                     ??PDM2PCMSDO78_20: (+1)
   \   000002CE   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000002D0   0xF5B6 0x5F80      CMP      R6,#+4096
   \   000002D4   0xDA6F             BGE.N    ??PDM2PCMSDO78_21
   1652          		{
   1653                            if(swtSDO8_tmp==0x01)
   \   000002D6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002D8   0x2D01             CMP      R5,#+1
   \   000002DA   0xD115             BNE.N    ??PDM2PCMSDO78_22
   1654                            {
   1655                               pDataMic8[i%64] = HTONS(TestSDO8[i]);
   \   000002DC   0x....             LDR.N    R0,??DataTable20_35
   \   000002DE   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000002E0   0xF830 0x0016      LDRH     R0,[R0, R6, LSL #+1]
   \   000002E4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000002E6   0x....             LDR.N    R1,??DataTable20_35
   \   000002E8   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000002EA   0xF831 0x1016      LDRH     R1,[R1, R6, LSL #+1]
   \   000002EE   0x0209             LSLS     R1,R1,#+8
   \   000002F0   0xEA51 0x2010      ORRS     R0,R1,R0, LSR #+8
   \   000002F4   0x....             LDR.N    R1,??DataTable20_36
   \   000002F6   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000002F8   0x2240             MOVS     R2,#+64
   \   000002FA   0xFB96 0xF3F2      SDIV     R3,R6,R2
   \   000002FE   0xFB03 0x6312      MLS      R3,R3,R2,R6
   \   00000302   0xF821 0x0013      STRH     R0,[R1, R3, LSL #+1]
   \   00000306   0xE014             B.N      ??PDM2PCMSDO78_23
   1656                            }
   1657                            else
   1658                            {
   1659                               pDataMic8[i%64] = HTONS(TestSDO8_1[i]);
   \                     ??PDM2PCMSDO78_22: (+1)
   \   00000308   0x....             LDR.N    R0,??DataTable20_37
   \   0000030A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000030C   0xF830 0x0016      LDRH     R0,[R0, R6, LSL #+1]
   \   00000310   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000312   0x....             LDR.N    R1,??DataTable20_37
   \   00000314   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000316   0xF831 0x1016      LDRH     R1,[R1, R6, LSL #+1]
   \   0000031A   0x0209             LSLS     R1,R1,#+8
   \   0000031C   0xEA51 0x2010      ORRS     R0,R1,R0, LSR #+8
   \   00000320   0x....             LDR.N    R1,??DataTable20_36
   \   00000322   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000324   0x2240             MOVS     R2,#+64
   \   00000326   0xFB96 0xF3F2      SDIV     R3,R6,R2
   \   0000032A   0xFB03 0x6312      MLS      R3,R3,R2,R6
   \   0000032E   0xF821 0x0013      STRH     R0,[R1, R3, LSL #+1]
   1660                            }
   1661          		
   1662                            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1663                            if (i%64==63)
   \                     ??PDM2PCMSDO78_23: (+1)
   \   00000332   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000334   0x2040             MOVS     R0,#+64
   \   00000336   0xFB96 0xF1F0      SDIV     R1,R6,R0
   \   0000033A   0xFB01 0x6110      MLS      R1,R1,R0,R6
   \   0000033E   0x293F             CMP      R1,#+63
   \   00000340   0xD137             BNE.N    ??PDM2PCMSDO78_24
   1664                            {
   1665                                /* Recording Audio Data */						 
   1666                                switch (buffer_switch)
   \   00000342   0x....             LDR.N    R0,??DataTable20_11
   \   00000344   0x7800             LDRB     R0,[R0, #+0]
   \   00000346   0x2800             CMP      R0,#+0
   \   00000348   0xD003             BEQ.N    ??PDM2PCMSDO78_25
   \   0000034A   0x2802             CMP      R0,#+2
   \   0000034C   0xD021             BEQ.N    ??PDM2PCMSDO78_26
   \   0000034E   0xD310             BCC.N    ??PDM2PCMSDO78_27
   \   00000350   0xE02F             B.N      ??PDM2PCMSDO78_28
   1667                                {
   1668                                        case BUF1_PLAY: 							
   1669                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 54 ,
   1670                                                (PDMFilter_InitStruct *)&Filter[1]);
   \                     ??PDM2PCMSDO78_25: (+1)
   \   00000352   0x....             LDR.N    R3,??DataTable20_38
   \   00000354   0x2236             MOVS     R2,#+54
   \   00000356   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000358   0x2040             MOVS     R0,#+64
   \   0000035A   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   0000035E   0x....             LDR.N    R1,??DataTable20_13  ;; 0xc00080a0
   \   00000360   0xEB11 0x1040      ADDS     R0,R1,R0, LSL #+5
   \   00000364   0xF500 0x41E0      ADD      R1,R0,#+28672
   \   00000368   0x318C             ADDS     R1,R1,#+140
   \   0000036A   0x....             LDR.N    R0,??DataTable20_36
   \   0000036C   0x.... 0x....      BL       PDM_Filter_64_LSB
   1671                                                break;
   \   00000370   0xE01F             B.N      ??PDM2PCMSDO78_24
   1672                                        case BUF2_PLAY:
   1673                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 54 ,
   1674                                                (PDMFilter_InitStruct *)&Filter[1]);	
   \                     ??PDM2PCMSDO78_27: (+1)
   \   00000372   0x....             LDR.N    R3,??DataTable20_38
   \   00000374   0x2236             MOVS     R2,#+54
   \   00000376   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000378   0x2040             MOVS     R0,#+64
   \   0000037A   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   0000037E   0x....             LDR.N    R1,??DataTable20_23  ;; 0xc0010140
   \   00000380   0xEB11 0x1040      ADDS     R0,R1,R0, LSL #+5
   \   00000384   0xF500 0x41E0      ADD      R1,R0,#+28672
   \   00000388   0x318C             ADDS     R1,R1,#+140
   \   0000038A   0x....             LDR.N    R0,??DataTable20_36
   \   0000038C   0x.... 0x....      BL       PDM_Filter_64_LSB
   1675                                                break;
   \   00000390   0xE00F             B.N      ??PDM2PCMSDO78_24
   1676                                        case BUF3_PLAY:
   1677                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 54 ,
   1678                                                (PDMFilter_InitStruct *)&Filter[1]);									
   \                     ??PDM2PCMSDO78_26: (+1)
   \   00000392   0x....             LDR.N    R3,??DataTable20_38
   \   00000394   0x2236             MOVS     R2,#+54
   \   00000396   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000398   0x2040             MOVS     R0,#+64
   \   0000039A   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   0000039E   0x0140             LSLS     R0,R0,#+5
   \   000003A0   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000003A4   0xF500 0x41E0      ADD      R1,R0,#+28672
   \   000003A8   0x318C             ADDS     R1,R1,#+140
   \   000003AA   0x....             LDR.N    R0,??DataTable20_36
   \   000003AC   0x.... 0x....      BL       PDM_Filter_64_LSB
   1679                                                 break;
   \   000003B0   0xE7FF             B.N      ??PDM2PCMSDO78_24
   1680                                        default:
   1681                                                 break; 
   1682                                }		
   1683                             }					 
   1684          		}
   \                     ??PDM2PCMSDO78_28: (+1)
   \                     ??PDM2PCMSDO78_24: (+1)
   \   000003B2   0x1C76             ADDS     R6,R6,#+1
   \   000003B4   0xE78B             B.N      ??PDM2PCMSDO78_20
   1685          
   1686                  /* LowPass Filter 
   1687                        dT = 1/16000
   1688                        K = T/dT  => T = dT*K = 1/16000*2 = 1/fc => fc = 8000
   1689          		*/						 
   1690          		switch (buffer_switch)
   \                     ??PDM2PCMSDO78_21: (+1)
   \   000003B6   0x....             LDR.N    R0,??DataTable20_11
   \   000003B8   0x7800             LDRB     R0,[R0, #+0]
   \   000003BA   0x2800             CMP      R0,#+0
   \   000003BC   0xD003             BEQ.N    ??PDM2PCMSDO78_29
   \   000003BE   0x2802             CMP      R0,#+2
   \   000003C0   0xD021             BEQ.N    ??PDM2PCMSDO78_30
   \   000003C2   0xD310             BCC.N    ??PDM2PCMSDO78_31
   \   000003C4   0xE02F             B.N      ??PDM2PCMSDO78_32
   1691          		{
   1692          			case BUF1_PLAY: 
   1693          				LowPassIIR(Buffer2.bufMIC8 ,Buffer2.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_29: (+1)
   \   000003C6   0x2004             MOVS     R0,#+4
   \   000003C8   0x9000             STR      R0,[SP, #+0]
   \   000003CA   0xF44F 0x6380      MOV      R3,#+1024
   \   000003CE   0x....             LDR.N    R2,??DataTable20_39
   \   000003D0   0x....             LDR.N    R0,??DataTable20_13  ;; 0xc00080a0
   \   000003D2   0xF500 0x41E0      ADD      R1,R0,#+28672
   \   000003D6   0x318C             ADDS     R1,R1,#+140
   \   000003D8   0x....             LDR.N    R0,??DataTable20_13  ;; 0xc00080a0
   \   000003DA   0xF500 0x40E0      ADD      R0,R0,#+28672
   \   000003DE   0x308C             ADDS     R0,R0,#+140
   \   000003E0   0x.... 0x....      BL       LowPassIIR
   1694          			    break;
   \   000003E4   0xE01F             B.N      ??PDM2PCMSDO78_33
   1695          			case BUF2_PLAY:
   1696          				LowPassIIR(Buffer3.bufMIC8 ,Buffer3.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);
   \                     ??PDM2PCMSDO78_31: (+1)
   \   000003E6   0x2004             MOVS     R0,#+4
   \   000003E8   0x9000             STR      R0,[SP, #+0]
   \   000003EA   0xF44F 0x6380      MOV      R3,#+1024
   \   000003EE   0x....             LDR.N    R2,??DataTable20_39
   \   000003F0   0x....             LDR.N    R0,??DataTable20_23  ;; 0xc0010140
   \   000003F2   0xF500 0x41E0      ADD      R1,R0,#+28672
   \   000003F6   0x318C             ADDS     R1,R1,#+140
   \   000003F8   0x....             LDR.N    R0,??DataTable20_23  ;; 0xc0010140
   \   000003FA   0xF500 0x40E0      ADD      R0,R0,#+28672
   \   000003FE   0x308C             ADDS     R0,R0,#+140
   \   00000400   0x.... 0x....      BL       LowPassIIR
   1697          			    break;
   \   00000404   0xE00F             B.N      ??PDM2PCMSDO78_33
   1698          			case BUF3_PLAY:
   1699          			    LowPassIIR(Buffer1.bufMIC8 ,Buffer1.bufMIC8 ,&Mic8LPOld,AUDIO_OUT_BUFFER_SIZE,4);						
   \                     ??PDM2PCMSDO78_30: (+1)
   \   00000406   0x2004             MOVS     R0,#+4
   \   00000408   0x9000             STR      R0,[SP, #+0]
   \   0000040A   0xF44F 0x6380      MOV      R3,#+1024
   \   0000040E   0x....             LDR.N    R2,??DataTable20_39
   \   00000410   0xF247 0x008C      MOVW     R0,#+28812
   \   00000414   0xF1B0 0x4180      SUBS     R1,R0,#+1073741824
   \   00000418   0xF247 0x008C      MOVW     R0,#+28812
   \   0000041C   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   00000420   0x.... 0x....      BL       LowPassIIR
   1700          			    break;
   \   00000424   0xE7FF             B.N      ??PDM2PCMSDO78_33
   1701          			default:
   1702          			break; 
   1703          		}
   1704                    					 
   1705                    switch (buffer_switch)//buffer_switch
   \                     ??PDM2PCMSDO78_32: (+1)
   \                     ??PDM2PCMSDO78_33: (+1)
   \   00000426   0x....             LDR.N    R0,??DataTable20_11
   \   00000428   0x7800             LDRB     R0,[R0, #+0]
   \   0000042A   0x2800             CMP      R0,#+0
   \   0000042C   0xD003             BEQ.N    ??PDM2PCMSDO78_34
   \   0000042E   0x2802             CMP      R0,#+2
   \   00000430   0xD043             BEQ.N    ??PDM2PCMSDO78_35
   \   00000432   0xD321             BCC.N    ??PDM2PCMSDO78_36
   \   00000434   0xE06A             B.N      ??PDM2PCMSDO78_37
   1706                    {
   1707                        case BUF1_PLAY: 	
   1708          					  Buffer2.bufMIC8[0] = Buffer2.bufMIC8[4];
   \                     ??PDM2PCMSDO78_34: (+1)
   \   00000436   0x....             LDR.N    R0,??DataTable20_13  ;; 0xc00080a0
   \   00000438   0xF247 0x0194      MOVW     R1,#+28820
   \   0000043C   0x5A08             LDRH     R0,[R1, R0]
   \   0000043E   0x....             LDR.N    R1,??DataTable20_13  ;; 0xc00080a0
   \   00000440   0xF247 0x028C      MOVW     R2,#+28812
   \   00000444   0x5250             STRH     R0,[R2, R1]
   1709          					  Buffer2.bufMIC8[1] = Buffer2.bufMIC8[5];
   \   00000446   0x....             LDR.N    R0,??DataTable20_13  ;; 0xc00080a0
   \   00000448   0xF247 0x0196      MOVW     R1,#+28822
   \   0000044C   0x5A08             LDRH     R0,[R1, R0]
   \   0000044E   0x....             LDR.N    R1,??DataTable20_13  ;; 0xc00080a0
   \   00000450   0xF247 0x028E      MOVW     R2,#+28814
   \   00000454   0x5250             STRH     R0,[R2, R1]
   1710          					  Buffer2.bufMIC8[2] = Buffer2.bufMIC8[6];
   \   00000456   0x....             LDR.N    R0,??DataTable20_13  ;; 0xc00080a0
   \   00000458   0xF247 0x0198      MOVW     R1,#+28824
   \   0000045C   0x5A08             LDRH     R0,[R1, R0]
   \   0000045E   0x....             LDR.N    R1,??DataTable20_13  ;; 0xc00080a0
   \   00000460   0xF247 0x0290      MOVW     R2,#+28816
   \   00000464   0x5250             STRH     R0,[R2, R1]
   1711          					  Buffer2.bufMIC8[3] = Buffer2.bufMIC8[7];
   \   00000466   0x....             LDR.N    R0,??DataTable20_13  ;; 0xc00080a0
   \   00000468   0xF247 0x019A      MOVW     R1,#+28826
   \   0000046C   0x5A08             LDRH     R0,[R1, R0]
   \   0000046E   0x....             LDR.N    R1,??DataTable20_13  ;; 0xc00080a0
   \   00000470   0xF247 0x0292      MOVW     R2,#+28818
   \   00000474   0x5250             STRH     R0,[R2, R1]
   1712                                break;
   \   00000476   0xE049             B.N      ??PDM2PCMSDO78_19
   1713                        case BUF2_PLAY:
   1714            					  Buffer3.bufMIC8[0] = Buffer3.bufMIC8[4];
   \                     ??PDM2PCMSDO78_36: (+1)
   \   00000478   0x....             LDR.N    R0,??DataTable20_23  ;; 0xc0010140
   \   0000047A   0xF247 0x0194      MOVW     R1,#+28820
   \   0000047E   0x5A08             LDRH     R0,[R1, R0]
   \   00000480   0x....             LDR.N    R1,??DataTable20_23  ;; 0xc0010140
   \   00000482   0xF247 0x028C      MOVW     R2,#+28812
   \   00000486   0x5250             STRH     R0,[R2, R1]
   1715          					  Buffer3.bufMIC8[1] = Buffer3.bufMIC8[5];
   \   00000488   0x....             LDR.N    R0,??DataTable20_23  ;; 0xc0010140
   \   0000048A   0xF247 0x0196      MOVW     R1,#+28822
   \   0000048E   0x5A08             LDRH     R0,[R1, R0]
   \   00000490   0x....             LDR.N    R1,??DataTable20_23  ;; 0xc0010140
   \   00000492   0xF247 0x028E      MOVW     R2,#+28814
   \   00000496   0x5250             STRH     R0,[R2, R1]
   1716          					  Buffer3.bufMIC8[2] = Buffer3.bufMIC8[6];
   \   00000498   0x....             LDR.N    R0,??DataTable20_23  ;; 0xc0010140
   \   0000049A   0xF247 0x0198      MOVW     R1,#+28824
   \   0000049E   0x5A08             LDRH     R0,[R1, R0]
   \   000004A0   0x....             LDR.N    R1,??DataTable20_23  ;; 0xc0010140
   \   000004A2   0xF247 0x0290      MOVW     R2,#+28816
   \   000004A6   0x5250             STRH     R0,[R2, R1]
   1717          					  Buffer3.bufMIC8[3] = Buffer3.bufMIC8[7];
   \   000004A8   0x....             LDR.N    R0,??DataTable20_23  ;; 0xc0010140
   \   000004AA   0xF247 0x019A      MOVW     R1,#+28826
   \   000004AE   0x5A08             LDRH     R0,[R1, R0]
   \   000004B0   0x....             LDR.N    R1,??DataTable20_23  ;; 0xc0010140
   \   000004B2   0xF247 0x0292      MOVW     R2,#+28818
   \   000004B6   0x5250             STRH     R0,[R2, R1]
   1718                                break;
   \   000004B8   0xE028             B.N      ??PDM2PCMSDO78_19
   1719                        case BUF3_PLAY:
   1720            					  Buffer1.bufMIC8[0] = Buffer1.bufMIC8[4];
   \                     ??PDM2PCMSDO78_35: (+1)
   \   000004BA   0xF247 0x0094      MOVW     R0,#+28820
   \   000004BE   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000004C2   0x8800             LDRH     R0,[R0, #+0]
   \   000004C4   0xF247 0x018C      MOVW     R1,#+28812
   \   000004C8   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   000004CC   0x8008             STRH     R0,[R1, #+0]
   1721          					  Buffer1.bufMIC8[1] = Buffer1.bufMIC8[5];
   \   000004CE   0xF247 0x0096      MOVW     R0,#+28822
   \   000004D2   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000004D6   0x8800             LDRH     R0,[R0, #+0]
   \   000004D8   0xF247 0x018E      MOVW     R1,#+28814
   \   000004DC   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   000004E0   0x8008             STRH     R0,[R1, #+0]
   1722          					  Buffer1.bufMIC8[2] = Buffer1.bufMIC8[6];
   \   000004E2   0xF247 0x0098      MOVW     R0,#+28824
   \   000004E6   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000004EA   0x8800             LDRH     R0,[R0, #+0]
   \   000004EC   0xF247 0x0190      MOVW     R1,#+28816
   \   000004F0   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   000004F4   0x8008             STRH     R0,[R1, #+0]
   1723          					  Buffer1.bufMIC8[3] = Buffer1.bufMIC8[7];
   \   000004F6   0xF247 0x009A      MOVW     R0,#+28826
   \   000004FA   0xF1B0 0x4080      SUBS     R0,R0,#+1073741824
   \   000004FE   0x8800             LDRH     R0,[R0, #+0]
   \   00000500   0xF247 0x0192      MOVW     R1,#+28818
   \   00000504   0xF1B1 0x4180      SUBS     R1,R1,#+1073741824
   \   00000508   0x8008             STRH     R0,[R1, #+0]
   1724                              break;
   \   0000050A   0xE7FF             B.N      ??PDM2PCMSDO78_19
   1725                        default:
   1726                              break; 
   1727                    }                	  
   1728             }//if (WaveRecord_flgSDO8Finish==1)
   1729          }
   \                     ??PDM2PCMSDO78_37: (+1)
   \                     ??PDM2PCMSDO78_19: (+1)
   \   0000050C   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
   \   0000050E                      REQUIRE Buffer2
   \   0000050E                      REQUIRE Buffer3
   \   0000050E                      REQUIRE Buffer1

   \                                 In section .bss, align 2
   \                     ??Mic7LPOld:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     ??Mic8LPOld:
   \   00000000                      DS8 2
   1730          

   \                                 In section .text, align 2, keep-with-next
   1731          void MIC7Rec (void)
   1732          {
   \                     MIC7Rec: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1733          	swtSDO7^=0x01;
   \   00000002   0x....             LDR.N    R0,??DataTable20_27
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF090 0x0001      EORS     R0,R0,#0x1
   \   0000000A   0x....             LDR.N    R1,??DataTable20_27
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
   1734          	WaveRecord_flgSDO7Finish = 1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable20_26
   \   00000012   0x7008             STRB     R0,[R1, #+0]
   1735          	if (swtSDO7==0x01)
   \   00000014   0x....             LDR.N    R0,??DataTable20_27
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD106             BNE.N    ??MIC7Rec_0
   1736          	{
   1737          		HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   \   0000001C   0xF44F 0x5280      MOV      R2,#+4096
   \   00000020   0x....             LDR.N    R1,??DataTable20_30
   \   00000022   0x....             LDR.N    R0,??DataTable20_40
   \   00000024   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   \   00000028   0xE005             B.N      ??MIC7Rec_1
   1738          	}
   1739          	else
   1740          	{
   1741          		HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??MIC7Rec_0: (+1)
   \   0000002A   0xF44F 0x5280      MOV      R2,#+4096
   \   0000002E   0x....             LDR.N    R1,??DataTable20_28
   \   00000030   0x....             LDR.N    R0,??DataTable20_40
   \   00000032   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1742          	} 
   1743          
   1744          }
   \                     ??MIC7Rec_1: (+1)
   \   00000036   0xBD01             POP      {R0,PC}          ;; return
   1745          

   \                                 In section .text, align 2, keep-with-next
   1746          void MIC8Rec (void)
   1747          {
   \                     MIC8Rec: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1748               swtSDO8^=0x01;
   \   00000002   0x....             LDR.N    R0,??DataTable20_34
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF090 0x0001      EORS     R0,R0,#0x1
   \   0000000A   0x....             LDR.N    R1,??DataTable20_34
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
   1749              WaveRecord_flgSDO8Finish = 1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable20_33
   \   00000012   0x7008             STRB     R0,[R1, #+0]
   1750              if (swtSDO8==0x01)
   \   00000014   0x....             LDR.N    R0,??DataTable20_34
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD106             BNE.N    ??MIC8Rec_0
   1751              {
   1752                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   \   0000001C   0xF44F 0x5280      MOV      R2,#+4096
   \   00000020   0x....             LDR.N    R1,??DataTable20_37
   \   00000022   0x....             LDR.N    R0,??DataTable20_41
   \   00000024   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   \   00000028   0xE005             B.N      ??MIC8Rec_1
   1753              }
   1754              else
   1755              {
   1756                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??MIC8Rec_0: (+1)
   \   0000002A   0xF44F 0x5280      MOV      R2,#+4096
   \   0000002E   0x....             LDR.N    R1,??DataTable20_35
   \   00000030   0x....             LDR.N    R0,??DataTable20_41
   \   00000032   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1757          
   1758              }
   1759          
   1760          }
   \                     ??MIC8Rec_1: (+1)
   \   00000036   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x40023844         DC32     0x40023844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x........         DC32     I2S2_stLR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x........         DC32     ??stLROld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x........         DC32     vRawSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x........         DC32     WaveRec_idxTest

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x........         DC32     vRawSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x........         DC32     hi2s2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \   00000000   0x........         DC32     I2S2_stLROld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_20:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_21:
   \   00000000   0x........         DC32     vRawSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_22:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_23:
   \   00000000   0x........         DC32     vRawSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_24:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_25:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_26:
   \   00000000   0x........         DC32     ??Main_stLR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_27:
   \   00000000   0x........         DC32     SPI4_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_28:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_29:
   \   00000000   0x........         DC32     vRawSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_30:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     ??Main_stLROld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     vRawSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x........         DC32     pDataMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     idxMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x........         DC32     Filter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x........         DC32     bufPCMSens8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0x........         DC32     hspi6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \   00000000   0x........         DC32     pDataMic7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \   00000000   0x........         DC32     idxMic7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \   00000000   0x........         DC32     Filter+0x34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     bufPCMSens7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     cntPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     cntPos7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x........         DC32     swtSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x........         DC32     swtSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_9:
   \   00000000   0x40023844         DC32     0x40023844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_10:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_11:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_12:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_13:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_14:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_15:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_16:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x40026488         DC32     0x40026488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x400264A0         DC32     0x400264a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x........         DC32     hdma_spi6_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x........         DC32     WaveRecord_flgInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_10:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_11:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_12:
   \   00000000   0x........         DC32     vRawSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_13:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_14:
   \   00000000   0x........         DC32     vRawSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_15:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_16:
   \   00000000   0x........         DC32     vRawSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_17:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_18:
   \   00000000   0x........         DC32     vRawSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_19:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_20:
   \   00000000   0x........         DC32     vRawSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_21:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_22:
   \   00000000   0x........         DC32     vRawSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_23:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_24:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_25:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_26:
   \   00000000   0x........         DC32     WaveRecord_flgSDO7Finish

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_27:
   \   00000000   0x........         DC32     swtSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_28:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_29:
   \   00000000   0x........         DC32     pDataMic7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_30:
   \   00000000   0x........         DC32     TestSDO7_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_31:
   \   00000000   0x........         DC32     Filter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_32:
   \   00000000   0x........         DC32     ??Mic7LPOld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_33:
   \   00000000   0x........         DC32     WaveRecord_flgSDO8Finish

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_34:
   \   00000000   0x........         DC32     swtSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_35:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_36:
   \   00000000   0x........         DC32     pDataMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_37:
   \   00000000   0x........         DC32     TestSDO8_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_38:
   \   00000000   0x........         DC32     Filter+0x34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_39:
   \   00000000   0x........         DC32     ??Mic8LPOld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_40:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_41:
   \   00000000   0x........         DC32     hspi6
   1761          
   1762          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DMA2_Stream5_IRQHandler
         8   -> HAL_DMA_IRQHandler
       8   DMA2_Stream6_IRQHandler
         8   -> HAL_DMA_IRQHandler
      32   HAL_SPI_MspInit
        32   -> HAL_DMA_DeInit
        32   -> HAL_DMA_Init
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       8   HAL_SPI_RxCpltCallback
         8   -> MIC7Rec
         8   -> MIC8Rec
       8   I2S1_Init
         8   -> HAL_I2S_Init
       8   I2S2_Init
         8   -> HAL_I2S_Init
       8   MIC1TO8_Init
         8   -> I2S1_Init
         8   -> I2S2_Init
         8   -> SPI4_Init
         8   -> SPI5_Init
         8   -> SPI6_Init
         8   -> StartRecMic7_8
       8   MIC7Rec
         8   -> HAL_SPI_Receive_DMA
       8   MIC8Rec
         8   -> HAL_SPI_Receive_DMA
       8   Mic7Rec
         8   -> SPI5_Init
       8   Mic8Rec
         8   -> SPI6_Init
      24   PDM2PCMSDO78
        24   -> LowPassIIR
        24   -> PDM_Filter_64_LSB
       0   RecordUpdBuf
       8   SPI1_IRQHandler
         8   -> SPI_I2S_ReceiveData
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
       8   SPI2_IRQHandler
         8   -> HAL_GPIO_ReadPin
         8   -> SPI_I2S_ReceiveData
       8   SPI4_IRQHandler
         8   -> HAL_GPIO_ReadPin
         8   -> SPI_I2S_ReceiveData
         8   -> SubFrameFinished
       8   SPI4_Init
         8   -> HAL_SPI_Init
       8   SPI5_IRQHandler
         8   -> PDM_Filter_64_LSB
         8   -> SPI_I2S_ReceiveData
       8   SPI5_Init
         8   -> HAL_SPI_Init
         8   -> PDM_Filter_Init
       8   SPI6_IRQHandler
         8   -> PDM_Filter_64_LSB
         8   -> SPI_I2S_ReceiveData
       8   SPI6_Init
         8   -> HAL_SPI_Init
       0   SPI_I2S_ReceiveData
       0   SPI_I2S_SendData
       8   StartRecMic7_8
         8   -> HAL_SPI_Receive_DMA
      16   mySPI_SendData
        16   -> SPI_I2S_ReceiveData
        16   -> SPI_I2S_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_30
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
       4  ??DataTable14
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_11
       4  ??DataTable17_12
       4  ??DataTable17_13
       4  ??DataTable17_14
       4  ??DataTable17_15
       4  ??DataTable17_16
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable17_8
       4  ??DataTable17_9
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_13
       4  ??DataTable20_14
       4  ??DataTable20_15
       4  ??DataTable20_16
       4  ??DataTable20_17
       4  ??DataTable20_18
       4  ??DataTable20_19
       4  ??DataTable20_2
       4  ??DataTable20_20
       4  ??DataTable20_21
       4  ??DataTable20_22
       4  ??DataTable20_23
       4  ??DataTable20_24
       4  ??DataTable20_25
       4  ??DataTable20_26
       4  ??DataTable20_27
       4  ??DataTable20_28
       4  ??DataTable20_29
       4  ??DataTable20_3
       4  ??DataTable20_30
       4  ??DataTable20_31
       4  ??DataTable20_32
       4  ??DataTable20_33
       4  ??DataTable20_34
       4  ??DataTable20_35
       4  ??DataTable20_36
       4  ??DataTable20_37
       4  ??DataTable20_38
       4  ??DataTable20_39
       4  ??DataTable20_4
       4  ??DataTable20_40
       4  ??DataTable20_41
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
   32928  Buffer1
   32928  Buffer2
   32928  Buffer3
      12  DMA2_Stream5_IRQHandler
      12  DMA2_Stream6_IRQHandler
     104  Filter
    1482  HAL_SPI_MspInit
      48  HAL_SPI_RxCpltCallback
      94  I2S1_Init
       2  I2S1_stNipple
       1  I2S1_stPosShft
      94  I2S2_Init
       1  I2S2_stLR
       1  I2S2_stLROld
       2  I2S2_stNipple
       1  I2S2_stPosShft
      28  MIC1TO8_Init
      56  MIC7Rec
      56  MIC8Rec
       1  Main_stLR
       1  Main_stLROld
       2  Mic7LPOld
       8  Mic7Rec
       2  Mic8LPOld
       8  Mic8Rec
    1294  PDM2PCMSDO78
     732  RecordUpdBuf
     396  SPI1_IRQHandler
     274  SPI1_Ini
       2  SPI1_stNipple
     400  SPI2_IRQHandler
     518  SPI4_IRQHandler
     126  SPI4_Init
       2  SPI4_stNipple
       1  SPI4_stPosShft
     226  SPI5_IRQHandler
     250  SPI5_Init
     214  SPI6_IRQHandler
     124  SPI6_Init
       6  SPI_I2S_ReceiveData
       6  SPI_I2S_SendData
      52  StartRecMic7_8
    8192  TestSDO12
    8192  TestSDO34
    8192  TestSDO56
    8192  TestSDO7
    8192  TestSDO7_1
    8192  TestSDO8
    8192  TestSDO8_1
       2  WaveRec_idxTest
       1  WaveRecord_flgIni
       1  WaveRecord_flgInt
       1  WaveRecord_flgSDO7Finish
       1  WaveRecord_flgSDO8Finish
       4  bufPCMSens7
       4  bufPCMSens8
       2  cntPos
       2  cntPos7
       2  cntStrt
       2  cntTransFinish
      80  hdma_spi2_tx
      80  hdma_spi3_tx
      80  hdma_spi5_rx
      80  hdma_spi6_rx
      64  hi2s1
      64  hi2s2
     100  hspi1
     100  hspi2
     100  hspi5
     100  hspi6
       2  iSDO12
       2  iSDO34
       2  iSDO56
       2  idxFrmPDMMic8
       2  idxMic7
       2  idxMic8
     100  mySPI_SendData
     128  pDataMic7
     128  pDataMic8
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins
       1  stLROld
       1  swtSDO7
       1  swtSDO8
       2  vRawSens1
       2  vRawSens2
       2  vRawSens3
       2  vRawSens4
       2  vRawSens5
       2  vRawSens6

 
 58 896 bytes in section .bss
 98 784 bytes in section .bss  (abs)
  7 048 bytes in section .text
 
   7 048 bytes of CODE memory
 157 680 bytes of DATA memory

Errors: none
Warnings: 7
