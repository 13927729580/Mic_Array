###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       27/Feb/2016  00:34:53
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Om --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

H:\PhanLeSon\ActivNoise\Microphone\F7\Mic_Array_Project\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          
      2          /* Includes ------------------------------------------------------------------*/
      3          #include "waverecorder.h" 
      4          #include "string.h"
      5          //#include "stm32f7xx_hal_spi.h"
      6          #include "stm32f7xx_hal.h"
      7          #include "pdm_filter.h"
      8          
      9          
     10          /* Private typedef -----------------------------------------------------------*/
     11          /* Private define ------------------------------------------------------------*/
     12          #define TOUCH_RECORD_XMIN       300
     13          #define TOUCH_RECORD_XMAX       340
     14          #define TOUCH_RECORD_YMIN       212
     15          #define TOUCH_RECORD_YMAX       252
     16          
     17          #define TOUCH_STOP_XMIN         205
     18          #define TOUCH_STOP_XMAX         245
     19          #define TOUCH_STOP_YMIN         212
     20          #define TOUCH_STOP_YMAX         252
     21          
     22          #define TOUCH_PAUSE_XMIN        125
     23          #define TOUCH_PAUSE_XMAX        149
     24          #define TOUCH_PAUSE_YMIN        212
     25          #define TOUCH_PAUSE_YMAX        252
     26          
     27          #define TOUCH_VOL_MINUS_XMIN    20
     28          #define TOUCH_VOL_MINUS_XMAX    70
     29          #define TOUCH_VOL_MINUS_YMIN    212
     30          #define TOUCH_VOL_MINUS_YMAX    252
     31          
     32          #define TOUCH_VOL_PLUS_XMIN     402
     33          #define TOUCH_VOL_PLUS_XMAX     452
     34          #define TOUCH_VOL_PLUS_YMIN     212
     35          #define TOUCH_VOL_PLUS_YMAX     252
     36          
     37          
     38          
     39          /* SPI Configuration defines */
     40          #define SPI_SCK_PIN                       GPIO_PIN_10
     41          #define SPI_SCK_GPIO_PORT                 GPIOB
     42          #define SPI_SCK_GPIO_CLK                  1
     43          #define SPI_SCK_SOURCE                    1
     44          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     45          
     46          #define SPI_MOSI_PIN                      GPIO_PIN_3
     47          #define SPI_MOSI_GPIO_PORT                GPIOC
     48          #define SPI_MOSI_GPIO_CLK                 1
     49          #define SPI_MOSI_SOURCE                   1
     50          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     51          
     52          
     53          /* sop1hc */
     54          #define SPI1_SCK_PIN                       GPIO_PIN_5
     55          #define SPI1_SCK_GPIO_PORT                 GPIOA
     56          #define SPI1_SCK_GPIO_CLK                  1
     57          #define SPI1_SCK_SOURCE                    1
     58          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     59          
     60          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     61          #define SPI1_MOSI_GPIO_PORT                GPIOA
     62          #define SPI1_MOSI_GPIO_CLK                 1
     63          #define SPI1_MOSI_SOURCE                   1
     64          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     65          
     66          #define SPI1_MISO_PIN                      GPIO_PIN_6
     67          #define SPI1_MISO_GPIO_PORT                GPIOA
     68          #define SPI1_MISO_GPIO_CLK                 1
     69          #define SPI1_MISO_SOURCE                   1
     70          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     71          
     72          
     73          
     74          

   \                                 In section .bss, align 4
     75          uint16_t idxMic8=0;
   \                     idxMic8:
   \   00000000                      DS8 2
     76          uint16_t idxMic7=0;
     77          uint8_t pHeaderBuff[44];
     78          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
     79          uint16_t volatile cntTransFinish;
     80          
     81          /* Private macro -------------------------------------------------------------*/
     82          /* Private variables ---------------------------------------------------------*/
     83          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     84          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     85          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     86          extern WAVE_FormatTypeDef WaveFormat;
     87          extern FIL WavFile;
     88          extern AUDIO_DEMO_StateMachine AudioDemo;
     89          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     90          extern __IO uint8_t buffer_switch;
     91          extern __IO uint8_t volume;
     92          extern SPI_HandleTypeDef hspi4,hspi1;
     93          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     94          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     95          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     96          extern __IO uint16_t  I2S2_idxTmp;
     97          extern SPI_HandleTypeDef     hspi4;
     98          extern DMA_HandleTypeDef     DmaHandle;
     99          
    100          #ifndef CS43L22_PLAY
    101          extern __IO uint8_t flgDlyUpd; 
    102          extern __IO uint32_t XferCplt;
    103          extern __IO uint16_t  idxSPI5DataBuf3;
    104          #endif
    105          
    106          __IO int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
    107          __IO int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
    108          __IO int16_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
    109          __IO uint16_t TestSDO7[4*AUDIO_OUT_BUFFER_SIZE];
    110          __IO uint16_t TestSDO8[4*AUDIO_OUT_BUFFER_SIZE];
    111          __IO uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
    112          __IO uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
    113          __IO uint16_t  WaveRec_idxTest;
    114          
    115          
    116          SPI_HandleTypeDef hspi1,hspi2;
    117          SPI_HandleTypeDef spi1_ins,spi2_ins;
    118          I2S_HandleTypeDef hi2s1;
    119          I2S_HandleTypeDef hi2s2;
    120          SPI_HandleTypeDef hspi5,hspi6;
    121          DMA_HandleTypeDef hdma_spi2_tx;
    122          DMA_HandleTypeDef hdma_spi3_tx;
    123          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
    124          
    125          #if USB_STREAMING
    126          __IO uint16_t idxFrmPDMMic8;
    127          #endif
    128          
    129          uint16_t *bufPCMSens7;
    130          uint16_t *bufPCMSens8;
    131          __IO uint16_t cntPos;
   \                     cntPos:
   \   00000002                      DS8 2
   \                     hspi5:
   \   00000004                      DS8 100
   \                     bufPCMSens8:
   \   00000068                      DS8 4

   \                                 In section .bss, align 4
   \                     idxMic7:
   \   00000000                      DS8 2
    132          __IO uint16_t cntPos7;
   \                     cntPos7:
   \   00000002                      DS8 2
   \                     hspi6:
   \   00000004                      DS8 100
   \                     bufPCMSens7:
   \   00000068                      DS8 4

   \                                 In section .bss, align 4
   \                     pHeaderBuff:
   \   00000000                      DS8 44

   \                                 In section .bss, align 2
   \                     cntTransFinish:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     TestSDO12:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO34:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO56:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO7_1:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
   \                     TestSDO8_1:
   \   00000000                      DS8 8192
    133          __IO static uint16_t iBuff;
    134          __IO static uint32_t uwVolume = 70;
    135          __IO PDMFilter_InitStruct Filter[2];
    136          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
    137          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
    138          __IO int16_t   pPDM2PCM[16];
    139          __IO uint16_t cntStrt;
    140          __IO uint8_t WaveRecord_flgInt;
    141          uint8_t WaveRecord_flgIni;
    142          
    143          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
    144          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
    145          __IO uint16_t iSDO12,iSDO34,iSDO56;
    146          __IO uint8_t swtSDO7,swtSDO8;
    147          __IO uint8_t WaveRecord_flgSDO7Finish,WaveRecord_flgSDO8Finish;
    148          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
    149          __IO uint8_t I2S2_stLR, I2S2_stLROld;
    150          
    151          /* Private function prototypes -----------------------------------------------*/
    152          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    153          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    154          static void I2S1_Init(void);
    155          static void I2S2_Init(void);
    156          
    157          #pragma location=SDRAM_BANK_ADDR
    158          Mic_Array_Data Buffer1;
    159          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)
    160          Mic_Array_Data Buffer2;
    161          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)
    162          Mic_Array_Data Buffer3;
    163          

   \                                 In section .text, align 2, keep-with-next
    164          void SPI1_Ini(void)
    165          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    166            GPIO_InitTypeDef GPIO_InitStructure;
    167          
    168           
    169             	 
    170            /* Enable SCK, MOSI and MISO GPIO clocks */
    171            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable14  ;; 0x40023830
   \   00000008   0x6941             LDR      R1,[R0, #+20]
   \   0000000A   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   0000000E   0x6141             STR      R1,[R0, #+20]
   \   00000010   0x6941             LDR      R1,[R0, #+20]
   \   00000012   0xF401 0x5180      AND      R1,R1,#0x1000
   \   00000016   0x9100             STR      R1,[SP, #+0]
   \   00000018   0x9900             LDR      R1,[SP, #+0]
    172            __HAL_RCC_GPIOA_CLK_ENABLE();
   \   0000001A   0x6801             LDR      R1,[R0, #+0]
   \   0000001C   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000020   0x6001             STR      R1,[R0, #+0]
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x9800             LDR      R0,[SP, #+0]
    173          
    174            
    175            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0x9002             STR      R0,[SP, #+8]
    176            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
   \   00000030   0x9003             STR      R0,[SP, #+12]
    177            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x9004             STR      R0,[SP, #+16]
    178          
    179            /* SPI SCK pin configuration */
    180            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
   \   00000036   0x2005             MOVS     R0,#+5
   \   00000038   0x9005             STR      R0,[SP, #+20]
    181            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
   \   0000003A   0x2020             MOVS     R0,#+32
   \   0000003C   0x9001             STR      R0,[SP, #+4]
    182            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   0000003E   0x.... 0x....      LDR.W    R4,??DataTable14_1  ;; 0x40020000
   \   00000042   0xA901             ADD      R1,SP,#+4
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       HAL_GPIO_Init
    183          
    184            /* SPI  MOSI pin configuration */
    185            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x9005             STR      R0,[SP, #+20]
    186            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
   \   0000004E   0x2080             MOVS     R0,#+128
   \   00000050   0x9001             STR      R0,[SP, #+4]
    187            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   00000052   0xA901             ADD      R1,SP,#+4
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       HAL_GPIO_Init
    188          
    189            /* SPI MISO pin configuration */
    190            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x9005             STR      R0,[SP, #+20]
    191            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
   \   0000005E   0x2040             MOVS     R0,#+64
   \   00000060   0x9001             STR      R0,[SP, #+4]
    192            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   00000062   0xA901             ADD      R1,SP,#+4
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       HAL_GPIO_Init
    193          
    194            /* SPI configuration -------------------------------------------------------*/
    195            //SPI_I2S_DeInit(SPI1);
    196            
    197            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable14_2
   \   0000006E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000072   0x6081             STR      R1,[R0, #+8]
    198            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000074   0xF44F 0x6170      MOV      R1,#+3840
   \   00000078   0x60C1             STR      R1,[R0, #+12]
    199            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x6101             STR      R1,[R0, #+16]
    200            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000007E   0x6141             STR      R1,[R0, #+20]
    201            spi1_ins.Init.NSS = SPI_NSS_SOFT;
   \   00000080   0xF44F 0x7100      MOV      R1,#+512
   \   00000084   0x6181             STR      R1,[R0, #+24]
    202            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
   \   00000086   0x2128             MOVS     R1,#+40
   \   00000088   0x61C1             STR      R1,[R0, #+28]
    203            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x6201             STR      R1,[R0, #+32]
    204            spi1_ins.Init.CRCPolynomial = 7;
   \   0000008E   0x2107             MOVS     R1,#+7
   \   00000090   0x62C1             STR      R1,[R0, #+44]
    205            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x6041             STR      R1,[R0, #+4]
    206            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   00000096   0x.... 0x....      BL       HAL_SPI_Init
    207            {
    208              /* Initialization Error */
    209              //Error_Handler();
    210            }
    211            
    212           
    213            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   0000009A   0x2008             MOVS     R0,#+8
   \   0000009C   0x9001             STR      R0,[SP, #+4]
    214            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0x9002             STR      R0,[SP, #+8]
    215            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
   \   000000A2   0x2002             MOVS     R0,#+2
   \   000000A4   0x9004             STR      R0,[SP, #+16]
    216            GPIO_InitStructure.Pull = GPIO_PULLUP;
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x9003             STR      R0,[SP, #+12]
    217            //GPIO_InitStructure.Alternate 
    218            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000AA   0x.... 0x....      LDR.W    R4,??DataTable18  ;; 0x40021000
   \   000000AE   0xA901             ADD      R1,SP,#+4
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       HAL_GPIO_Init
    219          
    220            /* Deselect : Chip Select high */
    221            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0x2108             MOVS     R1,#+8
   \   000000BA   0x4620             MOV      R0,R4
   \   000000BC   0x.... 0x....      BL       HAL_GPIO_WritePin
    222             /* sop1hc */
    223            /* Configure the SPI interrupt priority */
    224            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000C0   0x2200             MOVS     R2,#+0
   \   000000C2   0x2101             MOVS     R1,#+1
   \   000000C4   0x2023             MOVS     R0,#+35
   \   000000C6   0x.... 0x....      BL       HAL_NVIC_SetPriority
    225          
    226            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000CA   0x2023             MOVS     R0,#+35
   \   000000CC   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    227            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    228            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    229          
    230            /* Enable SPI1  */
    231            //__HAL_SPI_ENABLE(SPI1);
    232          
    233          }
   \   000000D0   0xB006             ADD      SP,SP,#+24
   \   000000D2   0xBD10             POP      {R4,PC}          ;; return
    234          

   \                                 In section .text, align 2, keep-with-next
    235          void mySPI_SendData(uint8_t adress, uint8_t data)
    236          {
   \                     mySPI_SendData: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable14_2
    237           
    238          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000008   0x6829             LDR      R1,[R5, #+0]
   \   0000000A   0x6889             LDR      R1,[R1, #+8]
   \   0000000C   0x0789             LSLS     R1,R1,#+30
   \   0000000E   0xD5FB             BPL.N    ??mySPI_SendData_0
    239          SPI_I2S_SendData(SPI1, adress);
   \   00000010   0x.... 0x....      LDR.W    R6,??DataTable14_3  ;; 0x40013000
   \   00000014   0x4601             MOV      R1,R0
   \   00000016   0x4630             MOV      R0,R6
   \   00000018   0x.... 0x....      BL       SPI_I2S_SendData
   \   0000001C   0x682F             LDR      R7,[R5, #+0]
    240          
    241          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   0000001E   0x68B8             LDR      R0,[R7, #+8]
   \   00000020   0x07C0             LSLS     R0,R0,#+31
   \   00000022   0xD5FC             BPL.N    ??mySPI_SendData_1
    242          SPI_I2S_ReceiveData(SPI1);
   \   00000024   0x4630             MOV      R0,R6
   \   00000026   0x.... 0x....      BL       SPI_I2S_ReceiveData
    243          
    244          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   0000002A   0x68B8             LDR      R0,[R7, #+8]
   \   0000002C   0x0780             LSLS     R0,R0,#+30
   \   0000002E   0xD4FC             BMI.N    ??mySPI_SendData_2
    245          SPI_I2S_SendData(SPI1, data);
   \   00000030   0x4621             MOV      R1,R4
   \   00000032   0x4630             MOV      R0,R6
   \   00000034   0x.... 0x....      BL       SPI_I2S_SendData
    246          
    247          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000038   0x6828             LDR      R0,[R5, #+0]
   \   0000003A   0x6880             LDR      R0,[R0, #+8]
   \   0000003C   0x07C0             LSLS     R0,R0,#+31
   \   0000003E   0xD4FB             BMI.N    ??mySPI_SendData_3
    248          SPI_I2S_ReceiveData(SPI1);
   \   00000040   0x4630             MOV      R0,R6
   \   00000042   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   00000046   0x.... 0x....      B.W      SPI_I2S_ReceiveData
    249           
    250          }
    251          
    252          /**
    253            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    254            * @param  None
    255            * @retval None
    256          */
    257          

   \                                 In section .text, align 2, keep-with-next
    258          void SPI1_IRQHandler(void)
    259          {  
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    260                uint16_t tmpTest;
    261          	  static uint8_t stLR,stLROld;
                 	                 ^
Warning[Pe177]: variable "stLR" was declared but never referenced
    262          	
    263          	  /* SPI in mode Receiver ----------------------------------------------------*/
    264          	  if(
    265          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    266          //	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    267          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable14_4
   \   00000006   0x69E0             LDR      R0,[R4, #+28]
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xD56B             BPL.N    ??SPI1_IRQHandler_0
    268          	  {
    269          	
    270          
    271          	   tmpTest =  SPI_I2S_ReceiveData(SPI1);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_3  ;; 0x40013000
   \   00000012   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000016   0x4601             MOV      R1,R0
    272          	
    273          	   /* Left-Right Mic data */
    274          	   //stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    275          	
    276          		if (I2S2_stLR==GPIO_PIN_SET)
   \   00000018   0x7922             LDRB     R2,[R4, #+4]
   \   0000001A   0x78A3             LDRB     R3,[R4, #+2]
   \   0000001C   0x2B01             CMP      R3,#+1
   \   0000001E   0xD12C             BNE.N    ??SPI1_IRQHandler_1
    277          		{
    278          			if (stLROld==GPIO_PIN_RESET)
   \   00000020   0x2A00             CMP      R2,#+0
   \   00000022   0xD02C             BEQ.N    ??SPI1_IRQHandler_2
    279          			{
    280          				SPI1_stNipple = (tmpTest);
    281          
    282          			}
    283          			else
    284          			{
    285          				 vRawSens1 = (tmpTest);
   \   00000024   0x8161             STRH     R1,[R4, #+10]
    286             		         WaveRec_idxTest++;
   \   00000026   0x8921             LDRH     R1,[R4, #+8]
   \   00000028   0x1C49             ADDS     R1,R1,#+1
   \   0000002A   0x8121             STRH     R1,[R4, #+8]
    287          				   /* Recording Audio Data */						 
    288          				   switch (buffer_switch)
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable14_5
   \   00000030   0x7809             LDRB     R1,[R1, #+0]
   \   00000032   0x2900             CMP      R1,#+0
   \   00000034   0xD003             BEQ.N    ??SPI1_IRQHandler_3
   \   00000036   0x2902             CMP      R1,#+2
   \   00000038   0xD015             BEQ.N    ??SPI1_IRQHandler_4
   \   0000003A   0xD30A             BCC.N    ??SPI1_IRQHandler_5
   \   0000003C   0xE053             B.N      ??SPI1_IRQHandler_0
    289          				   {
    290          							case BUF1_PLAY:
    291          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;								
   \                     ??SPI1_IRQHandler_3: (+1)
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable14_6
   \   00000042   0x880A             LDRH     R2,[R1, #+0]
   \   00000044   0x1C53             ADDS     R3,R2,#+1
   \   00000046   0x800B             STRH     R3,[R1, #+0]
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable14_7  ;; 0xc00080a0
   \   0000004C   0xF821 0x0012      STRH     R0,[R1, R2, LSL #+1]
    292          									break;
   \   00000050   0xE049             B.N      ??SPI1_IRQHandler_0
    293          							case BUF2_PLAY:
    294          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??SPI1_IRQHandler_5: (+1)
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable14_6
   \   00000056   0x880A             LDRH     R2,[R1, #+0]
   \   00000058   0x1C53             ADDS     R3,R2,#+1
   \   0000005A   0x800B             STRH     R3,[R1, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable14_8  ;; 0xc0010140
   \   00000060   0xF821 0x0012      STRH     R0,[R1, R2, LSL #+1]
    295          									break;
   \   00000064   0xE03F             B.N      ??SPI1_IRQHandler_0
    296          							case BUF3_PLAY:
    297          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;									
   \                     ??SPI1_IRQHandler_4: (+1)
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable14_6
   \   0000006A   0x880A             LDRH     R2,[R1, #+0]
   \   0000006C   0x1C53             ADDS     R3,R2,#+1
   \   0000006E   0x800B             STRH     R3,[R1, #+0]
   \   00000070   0x0051             LSLS     R1,R2,#+1
   \   00000072   0xF1A1 0x4180      SUB      R1,R1,#+1073741824
   \   00000076   0x8008             STRH     R0,[R1, #+0]
    298          									break;
   \   00000078   0xE035             B.N      ??SPI1_IRQHandler_0
    299          							default:
    300          									break; 
    301          				   
    302          				   	}
    303          			}
    304          		}
    305          		else
    306          		{
    307          			if (stLROld==GPIO_PIN_SET)
   \                     ??SPI1_IRQHandler_1: (+1)
   \   0000007A   0x2A01             CMP      R2,#+1
   \   0000007C   0xD101             BNE.N    ??SPI1_IRQHandler_6
    308          			{
    309          			  SPI1_stNipple = (tmpTest);  
   \                     ??SPI1_IRQHandler_2: (+1)
   \   0000007E   0x82E1             STRH     R1,[R4, #+22]
   \   00000080   0xE031             B.N      ??SPI1_IRQHandler_0
    310          
    311          			}
    312          			else
    313          			{
    314          			  vRawSens2 = (tmpTest);
   \                     ??SPI1_IRQHandler_6: (+1)
   \   00000082   0x81A1             STRH     R1,[R4, #+12]
    315           	          WaveRec_idxTest++;
   \   00000084   0x8921             LDRH     R1,[R4, #+8]
   \   00000086   0x1C49             ADDS     R1,R1,#+1
   \   00000088   0x8121             STRH     R1,[R4, #+8]
    316          			  	   /* Recording Audio Data */						 
    317          				   switch (buffer_switch)
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable14_5
   \   0000008E   0x7809             LDRB     R1,[R1, #+0]
   \   00000090   0x2900             CMP      R1,#+0
   \   00000092   0xD003             BEQ.N    ??SPI1_IRQHandler_7
   \   00000094   0x2902             CMP      R1,#+2
   \   00000096   0xD01B             BEQ.N    ??SPI1_IRQHandler_8
   \   00000098   0xD30D             BCC.N    ??SPI1_IRQHandler_9
   \   0000009A   0xE024             B.N      ??SPI1_IRQHandler_0
    318          				   {
    319          							case BUF1_PLAY:
    320          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;								
   \                     ??SPI1_IRQHandler_7: (+1)
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable18_1
   \   000000A0   0x880A             LDRH     R2,[R1, #+0]
   \   000000A2   0x1C53             ADDS     R3,R2,#+1
   \   000000A4   0x800B             STRH     R3,[R1, #+0]
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable14_7  ;; 0xc00080a0
   \   000000AA   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000AE   0xF241 0x0214      MOVW     R2,#+4116
   \   000000B2   0x5250             STRH     R0,[R2, R1]
    321          									break;
   \   000000B4   0xE017             B.N      ??SPI1_IRQHandler_0
    322          							case BUF2_PLAY:
    323          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \                     ??SPI1_IRQHandler_9: (+1)
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable18_1
   \   000000BA   0x880A             LDRH     R2,[R1, #+0]
   \   000000BC   0x1C53             ADDS     R3,R2,#+1
   \   000000BE   0x800B             STRH     R3,[R1, #+0]
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable14_8  ;; 0xc0010140
   \   000000C4   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   000000C8   0xF241 0x0214      MOVW     R2,#+4116
   \   000000CC   0x5250             STRH     R0,[R2, R1]
    324          									break;
   \   000000CE   0xE00A             B.N      ??SPI1_IRQHandler_0
    325          							case BUF3_PLAY:
    326          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
   \                     ??SPI1_IRQHandler_8: (+1)
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable18_1
   \   000000D4   0x880A             LDRH     R2,[R1, #+0]
   \   000000D6   0x1C53             ADDS     R3,R2,#+1
   \   000000D8   0x800B             STRH     R3,[R1, #+0]
   \   000000DA   0x0051             LSLS     R1,R2,#+1
   \   000000DC   0xF1A1 0x4180      SUB      R1,R1,#+1073741824
   \   000000E0   0xF241 0x0214      MOVW     R2,#+4116
   \   000000E4   0x5250             STRH     R0,[R2, R1]
    327          									break;
    328          							default:
    329          									break; 
    330          				   
    331          				   	}
    332          			  }
    333          
    334          			} 	
    335          		}
    336          	   
    337          
    338          #if 0
    339                 if (iSDO12<4*AUDIO_OUT_BUFFER_SIZE)
    340          	   {
    341                     TestSDO12[iSDO12++]=tmpTest;
    342          	   }
    343          	   else
    344          	   {
    345                     iSDO12=0;
    346          	   }
    347          		if ((WaveRec_idxSens1 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens2 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    348          	//			  &&(stLR!=stLROld))
    349          		{
    350          	/*-------------------------------------------------------------------------------------------------------------
    351          				  
    352          		Sequence  Record Data					  Processing Data				  Player Data
    353          				  
    354          		1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
    355          				  
    356          		2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
    357          				  
    358          		3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
    359          	 ---------------------------------------------------------------------------------------------------------------*/
    360          				  /* Recording Audio Data */						 
    361          				   switch (buffer_switch)
    362          				   {
    363          							case BUF1_PLAY:
    364          
    365                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    366          									Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    367          							    else
    368          									Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    369          
    370          	
    371          									break;
    372          							case BUF2_PLAY:
    373                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    374          									Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    375          							    else
    376          									Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;	
    377          
    378          									break;
    379          							case BUF3_PLAY:
    380                                          if (WaveRec_idxSens1<=WaveRec_idxSens2)
    381          									Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
    382          							    else
    383          									Buffer1.bufMIC2[WaveRec_idxSens2++] = vRawSens2;									
    384          
    385          									break;
    386          							default:
    387          									break; 
    388          				   }
    389          			
    390          		 } 
    391          #endif		
    392          
    393          		/* Update Old value */	  
    394          		stLROld=I2S2_stLR;
   \                     ??SPI1_IRQHandler_0: (+1)
   \   000000E6   0x78A0             LDRB     R0,[R4, #+2]
   \   000000E8   0x7120             STRB     R0,[R4, #+4]
    395          
    396          				 
    397          } 	 
   \   000000EA   0xBD10             POP      {R4,PC}          ;; return
   \   000000EC                      REQUIRE Buffer2
   \   000000EC                      REQUIRE Buffer3
   \   000000EC                      REQUIRE Buffer1
    398          
    399          
    400          
    401          
    402          /**
    403            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    404            * @param  None
    405            * @retval None
    406          */
    407          

   \                                 In section .text, align 2, keep-with-next
    408          void SPI2_IRQHandler(void)
    409          {      
    410              uint16_t app;
    411              
    412          
    413            /* Check if data are available in SPI Data register */
    414             if (
    415          //	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    416          //   	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    417             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    418             	  )
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable17
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xD400             BMI.N    ??SPI2_IRQHandler_0
   \   0000000C   0x4770             BX       LR
    419             {
    420              
    421               app = SPI_I2S_ReceiveData(SPI2);   
   \                     ??SPI2_IRQHandler_0: (+1)
   \   0000000E   0xB570             PUSH     {R4-R6,LR}
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x40003800
   \   00000014   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000018   0x4605             MOV      R5,R0
   \   0000001A   0x462E             MOV      R6,R5
    422               //SPI_I2S_SendData(SPI2, 3333);
    423          
    424          	 I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   0000001C   0x.... 0x....      LDR.W    R4,??DataTable14_4
   \   00000020   0x2110             MOVS     R1,#+16
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable14_1  ;; 0x40020000
   \   00000026   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   0000002A   0x70A0             STRB     R0,[R4, #+2]
    425          
    426          	 if (I2S2_stLR==GPIO_PIN_SET)
   \   0000002C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0x78E0             LDRB     R0,[R4, #+3]
   \   00000032   0xD131             BNE.N    ??SPI2_IRQHandler_1
    427          	 {
    428                  if (I2S2_stLROld==GPIO_PIN_SET)
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD031             BEQ.N    ??SPI2_IRQHandler_2
    429                  {
    430                      I2S2_stNipple = app;           
    431                  }
    432          		else
    433          		{
    434          
    435          			 vRawSens3 = app;
   \   00000038   0x8226             STRH     R6,[R4, #+16]
    436          			switch (buffer_switch)
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable14_5
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD003             BEQ.N    ??SPI2_IRQHandler_3
   \   00000044   0x2802             CMP      R0,#+2
   \   00000046   0xD01B             BEQ.N    ??SPI2_IRQHandler_4
   \   00000048   0xD30D             BCC.N    ??SPI2_IRQHandler_5
   \   0000004A   0xE058             B.N      ??SPI2_IRQHandler_6
    437          			{
    438          				case BUF1_PLAY:
    439          					Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;								
   \                     ??SPI2_IRQHandler_3: (+1)
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable17_2
   \   00000050   0x8801             LDRH     R1,[R0, #+0]
   \   00000052   0x1C4A             ADDS     R2,R1,#+1
   \   00000054   0x8002             STRH     R2,[R0, #+0]
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0xc00080a0
   \   0000005A   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \   0000005E   0xF242 0x0128      MOVW     R1,#+8232
   \   00000062   0x520D             STRH     R5,[R1, R0]
    440          					break;
   \   00000064   0xE04B             B.N      ??SPI2_IRQHandler_6
    441          				case BUF2_PLAY:
    442          					Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \                     ??SPI2_IRQHandler_5: (+1)
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable17_2
   \   0000006A   0x8801             LDRH     R1,[R0, #+0]
   \   0000006C   0x1C4A             ADDS     R2,R1,#+1
   \   0000006E   0x8002             STRH     R2,[R0, #+0]
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable14_8  ;; 0xc0010140
   \   00000074   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \   00000078   0xF242 0x0128      MOVW     R1,#+8232
   \   0000007C   0x520D             STRH     R5,[R1, R0]
    443          					break;
   \   0000007E   0xE03E             B.N      ??SPI2_IRQHandler_6
    444          				case BUF3_PLAY:
    445          					Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;									
   \                     ??SPI2_IRQHandler_4: (+1)
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable17_2
   \   00000084   0x8801             LDRH     R1,[R0, #+0]
   \   00000086   0x1C4A             ADDS     R2,R1,#+1
   \   00000088   0x8002             STRH     R2,[R0, #+0]
   \   0000008A   0x0048             LSLS     R0,R1,#+1
   \   0000008C   0xF1A0 0x4080      SUB      R0,R0,#+1073741824
   \   00000090   0xF242 0x0128      MOVW     R1,#+8232
   \   00000094   0x520D             STRH     R5,[R1, R0]
    446          					break;
   \   00000096   0xE032             B.N      ??SPI2_IRQHandler_6
    447          				default:
    448          					break; 
    449          			}
    450          
    451          		}
    452          	 }
    453          	 else
    454          	 {
    455                  if (I2S2_stLROld==GPIO_PIN_RESET)
   \                     ??SPI2_IRQHandler_1: (+1)
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD101             BNE.N    ??SPI2_IRQHandler_7
    456                  {
    457                      I2S2_stNipple = app;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   0000009C   0x8326             STRH     R6,[R4, #+24]
   \   0000009E   0xE02E             B.N      ??SPI2_IRQHandler_6
    458          
    459                  }
    460          		else
    461          		{
    462                      vRawSens4 =app;
   \                     ??SPI2_IRQHandler_7: (+1)
   \   000000A0   0x81E6             STRH     R6,[R4, #+14]
    463          			switch (buffer_switch)
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable14_5
   \   000000A6   0x7800             LDRB     R0,[R0, #+0]
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD003             BEQ.N    ??SPI2_IRQHandler_8
   \   000000AC   0x2802             CMP      R0,#+2
   \   000000AE   0xD01B             BEQ.N    ??SPI2_IRQHandler_9
   \   000000B0   0xD30D             BCC.N    ??SPI2_IRQHandler_10
   \   000000B2   0xE024             B.N      ??SPI2_IRQHandler_6
    464          			{	 
    465          				case BUF1_PLAY:
    466          					Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;								
   \                     ??SPI2_IRQHandler_8: (+1)
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable19
   \   000000B8   0x8801             LDRH     R1,[R0, #+0]
   \   000000BA   0x1C4A             ADDS     R2,R1,#+1
   \   000000BC   0x8002             STRH     R2,[R0, #+0]
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0xc00080a0
   \   000000C2   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \   000000C6   0xF243 0x013C      MOVW     R1,#+12348
   \   000000CA   0x520D             STRH     R5,[R1, R0]
    467          					break;
   \   000000CC   0xE017             B.N      ??SPI2_IRQHandler_6
    468          				case BUF2_PLAY:
    469          					Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \                     ??SPI2_IRQHandler_10: (+1)
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable19
   \   000000D2   0x8801             LDRH     R1,[R0, #+0]
   \   000000D4   0x1C4A             ADDS     R2,R1,#+1
   \   000000D6   0x8002             STRH     R2,[R0, #+0]
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable14_8  ;; 0xc0010140
   \   000000DC   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \   000000E0   0xF243 0x013C      MOVW     R1,#+12348
   \   000000E4   0x520D             STRH     R5,[R1, R0]
    470          					break;
   \   000000E6   0xE00A             B.N      ??SPI2_IRQHandler_6
    471          				case BUF3_PLAY:
    472          					Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;									
   \                     ??SPI2_IRQHandler_9: (+1)
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable19
   \   000000EC   0x8801             LDRH     R1,[R0, #+0]
   \   000000EE   0x1C4A             ADDS     R2,R1,#+1
   \   000000F0   0x8002             STRH     R2,[R0, #+0]
   \   000000F2   0x0048             LSLS     R0,R1,#+1
   \   000000F4   0xF1A0 0x4080      SUB      R0,R0,#+1073741824
   \   000000F8   0xF243 0x013C      MOVW     R1,#+12348
   \   000000FC   0x520D             STRH     R5,[R1, R0]
    473          					break;
    474          				default:
    475          					break; 
    476          			}
    477          		}
    478          	 }
    479          
    480          
    481          	 
    482          #if 0
    483          	  if (iSDO34<4*AUDIO_OUT_BUFFER_SIZE)
    484          	 {
    485          		 TestSDO34[iSDO34++]=app;
    486          	 }
    487          	 else
    488          	 {
    489          		 iSDO34=0;
    490          	 }
    491          
    492          	 if ((WaveRec_idxSens3 < (2*AUDIO_OUT_BUFFER_SIZE+5))&&(WaveRec_idxSens4 < (2*AUDIO_OUT_BUFFER_SIZE+5)))
    493          //             &&(I2S2_stLR!=I2S2_stLROld))
    494          	 {
    495          /*-------------------------------------------------------------------------------------------------------------
    496          			  
    497          	Sequence  Record Data                     Processing Data                 Player Data
    498          			  
    499          	1-------  Buffer1                         Buffer2                         Buffer3 (BUF3_PLAY)
    500          			  
    501          	2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    502          			  
    503          	3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    504           ---------------------------------------------------------------------------------------------------------------*/
    505          		/* Recording Audio Data */			             
    506          		 switch (buffer_switch)
    507          		 {
    508          			  case BUF1_PLAY:
    509                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    510                                Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    511          				  else
    512                                Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			  
    513          
    514          				  break;
    515          			  case BUF2_PLAY:
    516                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    517                                Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    518          				  else
    519                                Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;			   
    520          				  break;
    521          			  case BUF3_PLAY:
    522                            if (WaveRec_idxSens3<=WaveRec_idxSens4) 
    523                                Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
    524          				  else
    525                                Buffer1.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
    526          				  break;
    527          			  default:
    528          				  break; 
    529          		 }
    530          		
    531          	 }          
    532          #endif		  
    533          	 I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_6: (+1)
   \   000000FE   0x78A0             LDRB     R0,[R4, #+2]
   \   00000100   0x70E0             STRB     R0,[R4, #+3]
    534          
    535             }
    536          
    537          }
   \   00000102   0xBD70             POP      {R4-R6,PC}       ;; return
   \   00000104                      REQUIRE Buffer2
   \   00000104                      REQUIRE Buffer3
   \   00000104                      REQUIRE Buffer1
    538          
    539          

   \                                 In section .text, align 2, keep-with-next
    540          void SPI4_IRQHandler(void)
    541          {
    542            static uint8_t Main_stLR, Main_stLROld;
    543          
    544          
    545            /* SPI in mode Receiver ----------------------------------------------------*/
    546            if(
    547          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    548          //    (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    549               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable18_2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x0640             LSLS     R0,R0,#+25
   \   0000000A   0xD400             BMI.N    ??SPI4_IRQHandler_0
   \   0000000C   0x4770             BX       LR
    550            {
    551          
    552                  uint16_t test;
    553                  test =  SPI_I2S_ReceiveData(SPI4);
   \                     ??SPI4_IRQHandler_0: (+1)
   \   0000000E   0xB538             PUSH     {R3-R5,LR}
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable18_3  ;; 0x40013400
   \   00000014   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000018   0x4604             MOV      R4,R0
    554          
    555                  /* Left-Right Mic data */
    556                  Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
   \   0000001A   0x2110             MOVS     R1,#+16
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable14_1  ;; 0x40020000
   \   00000020   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable14_4
   \   00000028   0x7148             STRB     R0,[R1, #+5]
    557          
    558                  /* STM32F746 read data from STA321MP, the data is shifted few bit     */
    559                  /* Data from STA321MP is 32bit formart                                */
    560                  /* SPI is just able to read 16 bit format                             */
    561                  /* Therefore, it needs to correct                                     */
    562                  
    563                  /* ---------------------------+++++++++++++++++++++++++++++++---------*/
    564                  /*                  ______DATAL_____              ______DATAR_____    */
    565                  /*                  _____vRawSens5__              ______vRawSens6_    */       
    566          	if (Main_stLR==GPIO_PIN_SET)
   \   0000002A   0x798A             LDRB     R2,[R1, #+6]
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xD13C             BNE.N    ??SPI4_IRQHandler_1
    567          	{
    568                      if (Main_stLROld==GPIO_PIN_SET)
   \   00000030   0x2A01             CMP      R2,#+1
   \   00000032   0xD03C             BEQ.N    ??SPI4_IRQHandler_2
    569                      {
    570                         SPI4_stNipple = (test);    
    571                      }
    572                      else
    573                      {
    574                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));	
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   00000034   0x784A             LDRB     R2,[R1, #+1]
   \   00000036   0xF9B1 0x301A      LDRSH    R3,[R1, #+26]
   \   0000003A   0x4114             ASRS     R4,R4,R2
   \   0000003C   0x784A             LDRB     R2,[R1, #+1]
   \   0000003E   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   00000042   0xFA03 0xF202      LSL      R2,R3,R2
   \   00000046   0x4322             ORRS     R2,R2,R4
   \   00000048   0x824A             STRH     R2,[R1, #+18]
    575                         if (WaveRec_idxSens5 < (2*AUDIO_OUT_BUFFER_SIZE+5))
   \   0000004A   0x.... 0x....      LDR.W    R3,??DataTable18_4
   \   0000004E   0x881C             LDRH     R4,[R3, #+0]
   \   00000050   0xF640 0x0505      MOVW     R5,#+2053
   \   00000054   0x42AC             CMP      R4,R5
   \   00000056   0xDA66             BGE.N    ??SPI4_IRQHandler_3
    576                         {
    577                              /*-------------------------------------------------------------------------------------------------------------                                             
    578                              Sequence  Record Data                     Processing Data                 Player Data
    579                                                
    580                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    581                                                
    582                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    583                                                
    584                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    585                               ---------------------------------------------------------------------------------------------------------------*/                     
    586                               /* Recording Audio Data */			             
    587                               switch (buffer_switch)
   \   00000058   0x.... 0x....      LDR.W    R4,??DataTable14_5
   \   0000005C   0x7824             LDRB     R4,[R4, #+0]
   \   0000005E   0x2C00             CMP      R4,#+0
   \   00000060   0xD003             BEQ.N    ??SPI4_IRQHandler_4
   \   00000062   0x2C02             CMP      R4,#+2
   \   00000064   0xD017             BEQ.N    ??SPI4_IRQHandler_5
   \   00000066   0xD30B             BCC.N    ??SPI4_IRQHandler_6
   \   00000068   0xE05D             B.N      ??SPI4_IRQHandler_3
    588                               {
    589                                   case BUF1_PLAY:
    590                                       Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_4: (+1)
   \   0000006A   0x881C             LDRH     R4,[R3, #+0]
   \   0000006C   0x1C65             ADDS     R5,R4,#+1
   \   0000006E   0x801D             STRH     R5,[R3, #+0]
   \   00000070   0x.... 0x....      LDR.W    R3,??DataTable14_7  ;; 0xc00080a0
   \   00000074   0xEB03 0x0344      ADD      R3,R3,R4, LSL #+1
   \   00000078   0xF244 0x0450      MOVW     R4,#+16464
   \   0000007C   0x52E2             STRH     R2,[R4, R3]
    591          
    592                                       break;
   \   0000007E   0xE052             B.N      ??SPI4_IRQHandler_3
    593                                   case BUF2_PLAY:
    594                                       Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_6: (+1)
   \   00000080   0x881C             LDRH     R4,[R3, #+0]
   \   00000082   0x1C65             ADDS     R5,R4,#+1
   \   00000084   0x801D             STRH     R5,[R3, #+0]
   \   00000086   0x.... 0x....      LDR.W    R3,??DataTable19_1  ;; 0xc0010140
   \   0000008A   0xEB03 0x0344      ADD      R3,R3,R4, LSL #+1
   \   0000008E   0xF244 0x0450      MOVW     R4,#+16464
   \   00000092   0x52E2             STRH     R2,[R4, R3]
    595          
    596                                       break;
   \   00000094   0xE047             B.N      ??SPI4_IRQHandler_3
    597                                   case BUF3_PLAY:
    598                                       Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \                     ??SPI4_IRQHandler_5: (+1)
   \   00000096   0x881C             LDRH     R4,[R3, #+0]
   \   00000098   0x1C65             ADDS     R5,R4,#+1
   \   0000009A   0x801D             STRH     R5,[R3, #+0]
   \   0000009C   0x0063             LSLS     R3,R4,#+1
   \   0000009E   0xF1A3 0x4380      SUB      R3,R3,#+1073741824
   \   000000A2   0xF244 0x0450      MOVW     R4,#+16464
   \   000000A6   0x52E2             STRH     R2,[R4, R3]
    599          
    600                                       break;                          
   \   000000A8   0xE03D             B.N      ??SPI4_IRQHandler_3
    601                                   default:
    602                                       break;
    603                               }
    604                         }
    605          	   }
    606                  }
    607          	else
    608          	{
    609                    if (Main_stLROld==GPIO_PIN_RESET)
   \                     ??SPI4_IRQHandler_1: (+1)
   \   000000AA   0x2A00             CMP      R2,#+0
   \   000000AC   0xD101             BNE.N    ??SPI4_IRQHandler_7
    610                    {
    611                        SPI4_stNipple = (test);	  
   \                     ??SPI4_IRQHandler_2: (+1)
   \   000000AE   0x834C             STRH     R4,[R1, #+26]
   \   000000B0   0xE039             B.N      ??SPI4_IRQHandler_3
    612          
    613                    }
    614                    else
    615                    {
    616                         vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI4_IRQHandler_7: (+1)
   \   000000B2   0x784A             LDRB     R2,[R1, #+1]
   \   000000B4   0xF9B1 0x301A      LDRSH    R3,[R1, #+26]
   \   000000B8   0x4114             ASRS     R4,R4,R2
   \   000000BA   0x784A             LDRB     R2,[R1, #+1]
   \   000000BC   0xF1C2 0x0210      RSB      R2,R2,#+16
   \   000000C0   0xFA03 0xF202      LSL      R2,R3,R2
   \   000000C4   0x4322             ORRS     R2,R2,R4
   \   000000C6   0x828A             STRH     R2,[R1, #+20]
    617                         if (WaveRec_idxSens6 < (2*AUDIO_OUT_BUFFER_SIZE+5))
   \   000000C8   0x.... 0x....      LDR.W    R3,??DataTable18_5
   \   000000CC   0x881C             LDRH     R4,[R3, #+0]
   \   000000CE   0xF640 0x0505      MOVW     R5,#+2053
   \   000000D2   0x42AC             CMP      R4,R5
   \   000000D4   0xDA27             BGE.N    ??SPI4_IRQHandler_3
    618                         {
    619                              /*-------------------------------------------------------------------------------------------------------------                                             
    620                              Sequence  Record Data                     Processing Data                 Player Data
    621                                                
    622                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    623                                                
    624                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    625                                                
    626                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    627                               ---------------------------------------------------------------------------------------------------------------*/                 
    628                                /* Recording Audio Data */			             
    629                               switch (buffer_switch)
   \   000000D6   0x.... 0x....      LDR.W    R4,??DataTable14_5
   \   000000DA   0x7824             LDRB     R4,[R4, #+0]
   \   000000DC   0x2C00             CMP      R4,#+0
   \   000000DE   0xD003             BEQ.N    ??SPI4_IRQHandler_8
   \   000000E0   0x2C02             CMP      R4,#+2
   \   000000E2   0xD017             BEQ.N    ??SPI4_IRQHandler_9
   \   000000E4   0xD30B             BCC.N    ??SPI4_IRQHandler_10
   \   000000E6   0xE01E             B.N      ??SPI4_IRQHandler_3
    630                               {
    631                                   case BUF1_PLAY:
    632                                       Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_8: (+1)
   \   000000E8   0x881C             LDRH     R4,[R3, #+0]
   \   000000EA   0x1C65             ADDS     R5,R4,#+1
   \   000000EC   0x801D             STRH     R5,[R3, #+0]
   \   000000EE   0x.... 0x....      LDR.W    R3,??DataTable14_7  ;; 0xc00080a0
   \   000000F2   0xEB03 0x0344      ADD      R3,R3,R4, LSL #+1
   \   000000F6   0xF245 0x0464      MOVW     R4,#+20580
   \   000000FA   0x52E2             STRH     R2,[R4, R3]
    633           
    634                                       break;
   \   000000FC   0xE013             B.N      ??SPI4_IRQHandler_3
    635                                   case BUF2_PLAY:
    636                                       Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_10: (+1)
   \   000000FE   0x881C             LDRH     R4,[R3, #+0]
   \   00000100   0x1C65             ADDS     R5,R4,#+1
   \   00000102   0x801D             STRH     R5,[R3, #+0]
   \   00000104   0x.... 0x....      LDR.W    R3,??DataTable19_1  ;; 0xc0010140
   \   00000108   0xEB03 0x0344      ADD      R3,R3,R4, LSL #+1
   \   0000010C   0xF245 0x0464      MOVW     R4,#+20580
   \   00000110   0x52E2             STRH     R2,[R4, R3]
    637                 
    638                                       break;
   \   00000112   0xE008             B.N      ??SPI4_IRQHandler_3
    639                                   case BUF3_PLAY:
    640                                       Buffer1.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \                     ??SPI4_IRQHandler_9: (+1)
   \   00000114   0x881C             LDRH     R4,[R3, #+0]
   \   00000116   0x1C65             ADDS     R5,R4,#+1
   \   00000118   0x801D             STRH     R5,[R3, #+0]
   \   0000011A   0x0063             LSLS     R3,R4,#+1
   \   0000011C   0xF1A3 0x4380      SUB      R3,R3,#+1073741824
   \   00000120   0xF245 0x0464      MOVW     R4,#+20580
   \   00000124   0x52E2             STRH     R2,[R4, R3]
    641           
    642                                       break;                          
    643                                   default:
    644                                       break;
    645                               }
    646                         }
    647                    }		
    648          	}
    649          #if 0
    650          	/* The code to store data in to buffer for testing purpose */
    651          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
    652          	{
    653          		TestSDO56[iSDO56++]=test;
    654          	}
    655          	else
    656          	{
    657          		iSDO56=0;
    658          	}
    659          #endif
    660          
    661          	/* Update Old value */	  
    662          	Main_stLROld=Main_stLR;	  
   \                     ??SPI4_IRQHandler_3: (+1)
   \   00000126   0x7188             STRB     R0,[R1, #+6]
    663               
    664            }      
    665          }
   \   00000128   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \   0000012A                      REQUIRE Buffer2
   \   0000012A                      REQUIRE Buffer3
   \   0000012A                      REQUIRE Buffer1

   \                                 In section .bss, align 4
   \                     WaveRecord_flgInt:
   \   00000000                      DS8 1
   \                     SPI4_stPosShft:
   \   00000001                      DS8 1
   \                     I2S2_stLR:
   \   00000002                      DS8 1
   \                     I2S2_stLROld:
   \   00000003                      DS8 1
   \   00000004                      DS8 1
   \   00000005                      DS8 1
   \   00000006                      DS8 1
   \   00000007                      DS8 1
   \                     WaveRec_idxTest:
   \   00000008                      DS8 2
   \                     vRawSens1:
   \   0000000A                      DS8 2
   \                     vRawSens2:
   \   0000000C                      DS8 2
   \                     vRawSens4:
   \   0000000E                      DS8 2
   \                     vRawSens3:
   \   00000010                      DS8 2
   \                     vRawSens5:
   \   00000012                      DS8 2
   \                     vRawSens6:
   \   00000014                      DS8 2
   \                     SPI1_stNipple:
   \   00000016                      DS8 2
   \                     I2S2_stNipple:
   \   00000018                      DS8 2
   \                     SPI4_stNipple:
   \   0000001A                      DS8 2
   \                     hi2s1:
   \   0000001C                      DS8 64

   \                                 In section .bss, align 4
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hi2s2:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
   \                     hdma_spi2_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi3_tx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi5_rx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \                     hdma_spi6_rx:
   \   00000000                      DS8 80

   \                                 In section .bss, align 2
   \                     idxFrmPDMMic8:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     Filter:
   \   00000000                      DS8 104

   \                                 In section .bss, align 4
   \                     pDataMic8:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
   \                     pDataMic7:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
   \                     cntStrt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO34:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO56:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     swtSDO7:
   \   00000000                      DS8 1
   \                     swtSDO8:
   \   00000001                      DS8 1
   \                     WaveRecord_flgSDO7Finish:
   \   00000002                      DS8 1
   \                     WaveRecord_flgSDO8Finish:
   \   00000003                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S1_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, at 0xc0000000
   \                     Buffer1:
   \   00000000                      DS8 32928

   \                                 In section .bss, at 0xc00080a0
   \                     Buffer2:
   \   00000000                      DS8 32928

   \                                 In section .bss, at 0xc0010140
   \                     Buffer3:
   \   00000000                      DS8 32928
    666          
    667          
    668          
    669          

   \                                 In section .text, align 2, keep-with-next
    670          void SPI5_IRQHandler(void)
    671          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    672            //static uint16_t stNipple;
    673            //static uint8_t stLR, stOder;
    674          
    675            /* USER CODE BEGIN SPI5_IRQn 0 */
    676          
    677            /* USER CODE END SPI5_IRQn 0 */
    678            //HAL_SPI_IRQHandler(&hspi5);
    679            /* USER CODE BEGIN SPI5_IRQn 1 */
    680          
    681            /* USER CODE END SPI5_IRQn 1 */
    682              /* Check if data are available in SPI Data register */
    683            /* SPI in mode Receiver ----------------------------------------------------*/
    684            if(
    685               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    686               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    687               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable19_2
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xD439             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD536             BPL.N    ??SPI5_IRQHandler_0
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD533             BPL.N    ??SPI5_IRQHandler_0
    688            {
    689          
    690          
    691             uint16_t test;
    692             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x.... 0x....      LDR.W    R5,??DataTable19_3  ;; 0x40015000
   \   0000001E   0x4628             MOV      R0,R5
   \   00000020   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000024   0x4601             MOV      R1,R0
    693             SPI5->DR = 3333;
   \   00000026   0xF640 0x5005      MOVW     R0,#+3333
   \   0000002A   0x60E8             STR      R0,[R5, #+12]
    694          
    695            pDataMic8[idxMic8++] =	HTONS(test);
   \   0000002C   0x8822             LDRH     R2,[R4, #+0]
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable19_4
   \   00000032   0x120B             ASRS     R3,R1,#+8
   \   00000034   0xB2DB             UXTB     R3,R3
   \   00000036   0xEA43 0x2101      ORR      R1,R3,R1, LSL #+8
   \   0000003A   0xF820 0x1012      STRH     R1,[R0, R2, LSL #+1]
   \   0000003E   0x1C51             ADDS     R1,R2,#+1
   \   00000040   0x8021             STRH     R1,[R4, #+0]
    696            
    697            //volume = 64;
    698            
    699            if (idxMic8>=64)
   \   00000042   0xB289             UXTH     R1,R1
   \   00000044   0x2940             CMP      R1,#+64
   \   00000046   0xDB1C             BLT.N    ??SPI5_IRQHandler_0
    700            {
    701          	if (buffer_switch != 1)
   \   00000048   0x6EA1             LDR      R1,[R4, #+104]
   \   0000004A   0x.... 0x....      LDR.W    R3,??DataTable19_5
   \   0000004E   0x.... 0x....      LDR.W    R2,??DataTable19_6
   \   00000052   0x.... 0x....      LDR.W    R5,??DataTable19_7
   \   00000056   0x782D             LDRB     R5,[R5, #+0]
   \   00000058   0x2D01             CMP      R5,#+1
   \   0000005A   0x7812             LDRB     R2,[R2, #+0]
   \   0000005C   0x8865             LDRH     R5,[R4, #+2]
   \   0000005E   0xEB01 0x1145      ADD      R1,R1,R5, LSL #+5
   \   00000062   0xD002             BEQ.N    ??SPI5_IRQHandler_1
    702          	{
    703          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    704          						  (PDMFilter_InitStruct *)&Filter[0]);
   \   00000064   0x.... 0x....      BL       PDM_Filter_64_LSB
   \   00000068   0xE001             B.N      ??SPI5_IRQHandler_2
    705          	}
    706          	else
    707          	{
    708          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    709          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \                     ??SPI5_IRQHandler_1: (+1)
   \   0000006A   0x.... 0x....      BL       PDM_Filter_64_LSB
    710          	}
    711          	idxMic8=0;
   \                     ??SPI5_IRQHandler_2: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x8020             STRH     R0,[R4, #+0]
    712          	cntPos++;
   \   00000072   0x8860             LDRH     R0,[R4, #+2]
   \   00000074   0x1C40             ADDS     R0,R0,#+1
   \   00000076   0x8060             STRH     R0,[R4, #+2]
    713          	if (cntPos>=256) cntPos=0;
   \   00000078   0x8860             LDRH     R0,[R4, #+2]
   \   0000007A   0x28FF             CMP      R0,#+255
   \   0000007C   0xDD01             BLE.N    ??SPI5_IRQHandler_0
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x8060             STRH     R0,[R4, #+2]
    714            }
    715              
    716            }
    717            
    718          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   00000082   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    719          
    720          /* SPI5 init function */
    721          
    722          

   \                                 In section .text, align 2, keep-with-next
    723          void SPI6_IRQHandler(void)
    724          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    725            /* SPI in mode Receiver ----------------------------------------------------*/
    726            if(
    727          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    728               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    729               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable19_8
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0789             LSLS     R1,R1,#+30
   \   0000000C   0xD53B             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD538             BPL.N    ??SPI6_IRQHandler_0
    730            {
    731          
    732          
    733               uint16_t test;
    734               test =  SPI_I2S_ReceiveData(SPI6);
   \   00000014   0x.... 0x....      LDR.W    R5,??DataTable19_9  ;; 0x40015400
   \   00000018   0x4628             MOV      R0,R5
   \   0000001A   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000001E   0x4601             MOV      R1,R0
    735               SPI6->DR = 3333;
   \   00000020   0xF640 0x5005      MOVW     R0,#+3333
   \   00000024   0x60E8             STR      R0,[R5, #+12]
    736          
    737              pDataMic7[idxMic7++] =	HTONS(test);
   \   00000026   0x8822             LDRH     R2,[R4, #+0]
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable19_10
   \   0000002C   0x120B             ASRS     R3,R1,#+8
   \   0000002E   0xB2DB             UXTB     R3,R3
   \   00000030   0xEA43 0x2101      ORR      R1,R3,R1, LSL #+8
   \   00000034   0xF820 0x1012      STRH     R1,[R0, R2, LSL #+1]
   \   00000038   0x1C51             ADDS     R1,R2,#+1
   \   0000003A   0x8021             STRH     R1,[R4, #+0]
    738          
    739              //volume = 64;
    740          
    741              if (idxMic7>=64)
   \   0000003C   0xB289             UXTH     R1,R1
   \   0000003E   0x2940             CMP      R1,#+64
   \   00000040   0xDB21             BLT.N    ??SPI6_IRQHandler_0
    742              {
    743                if (buffer_switch != 1)
   \   00000042   0x6EA1             LDR      R1,[R4, #+104]
   \   00000044   0x.... 0x....      LDR.W    R3,??DataTable19_5
   \   00000048   0x.... 0x....      LDR.W    R2,??DataTable19_6
   \   0000004C   0x.... 0x....      LDR.W    R5,??DataTable19_7
   \   00000050   0x782D             LDRB     R5,[R5, #+0]
   \   00000052   0x2D01             CMP      R5,#+1
   \   00000054   0x7812             LDRB     R2,[R2, #+0]
   \   00000056   0xD006             BEQ.N    ??SPI6_IRQHandler_1
    744                {
    745                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    746                                                          (PDMFilter_InitStruct *)&Filter[1]);
   \   00000058   0x3334             ADDS     R3,R3,#+52
   \   0000005A   0x8865             LDRH     R5,[R4, #+2]
   \   0000005C   0xEB01 0x1145      ADD      R1,R1,R5, LSL #+5
   \   00000060   0x.... 0x....      BL       PDM_Filter_64_LSB
   \   00000064   0xE005             B.N      ??SPI6_IRQHandler_2
    747                }
    748                else
    749                {
    750                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    751                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \                     ??SPI6_IRQHandler_1: (+1)
   \   00000066   0x3334             ADDS     R3,R3,#+52
   \   00000068   0x8865             LDRH     R5,[R4, #+2]
   \   0000006A   0xEB01 0x1145      ADD      R1,R1,R5, LSL #+5
   \   0000006E   0x.... 0x....      BL       PDM_Filter_64_LSB
    752                }
    753                idxMic7=0;
   \                     ??SPI6_IRQHandler_2: (+1)
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x8020             STRH     R0,[R4, #+0]
    754                cntPos7++;
   \   00000076   0x8860             LDRH     R0,[R4, #+2]
   \   00000078   0x1C40             ADDS     R0,R0,#+1
   \   0000007A   0x8060             STRH     R0,[R4, #+2]
    755                if (cntPos7>=256) cntPos7=0;
   \   0000007C   0x8860             LDRH     R0,[R4, #+2]
   \   0000007E   0x28FF             CMP      R0,#+255
   \   00000080   0xDD01             BLE.N    ??SPI6_IRQHandler_0
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x8060             STRH     R0,[R4, #+2]
    756              }
    757              
    758            }
    759          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   00000086   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    760          
    761          
    762          

   \                                 In section .text, align 2, keep-with-next
    763          void MIC1TO6_Init(void)
    764          {
   \                     MIC1TO6_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable14_1  ;; 0x40020000
    765            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_0: (+1)
   \   00000006   0x2110             MOVS     R1,#+16
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD0F9             BEQ.N    ??MIC1TO6_Init_0
    766            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_1: (+1)
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD0F9             BEQ.N    ??MIC1TO6_Init_1
    767            I2S1_Init(); /* I2S1   --> SDO12 */
   \   0000001E   0x.... 0x....      BL       I2S1_Init
    768            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_2: (+1)
   \   00000022   0x2110             MOVS     R1,#+16
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xD0F9             BEQ.N    ??MIC1TO6_Init_2
    769            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_3: (+1)
   \   0000002E   0x2110             MOVS     R1,#+16
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD0F9             BEQ.N    ??MIC1TO6_Init_3
    770            I2S2_Init(); /* I2S2   --> SDO34 */
   \   0000003A   0x.... 0x....      BL       I2S2_Init
    771            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   \                     ??MIC1TO6_Init_4: (+1)
   \   0000003E   0x2110             MOVS     R1,#+16
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000046   0x2801             CMP      R0,#+1
   \   00000048   0xD0F9             BEQ.N    ??MIC1TO6_Init_4
    772            while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   \                     ??MIC1TO6_Init_5: (+1)
   \   0000004A   0x2110             MOVS     R1,#+16
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD0F9             BEQ.N    ??MIC1TO6_Init_5
    773            SPI4_Init(); /* SPI4   --> SDO56 */
   \   00000056   0x.... 0x....      BL       SPI4_Init
    774          
    775            SPI5_Init();
   \   0000005A   0x.... 0x....      BL       SPI5_Init
    776            SPI6_Init();
   \   0000005E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000062   0x....             B.N      SPI6_Init
    777          
    778            //StartRecMic7_8();
    779          }
    780          

   \                                 In section .text, align 2, keep-with-next
    781          void StartRecMic7_8 (void)
    782          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    783          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0xF44F 0x5280      MOV      R2,#+4096
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable19_11
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable19_12
   \   0000000E   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    784          #if (0)
    785          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
    786          #else
    787          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000012   0xF44F 0x5280      MOV      R2,#+4096
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable19_13
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable19_14
   \   0000001E   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    788          #endif
    789          	  swtSDO7 = 0;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable19_15
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x7001             STRB     R1,[R0, #+0]
    790          	  swtSDO8 = 0;
   \   0000002A   0x7041             STRB     R1,[R0, #+1]
    791          
    792          }
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
    793          
    794          /* I2S1 init function */
    795          /* Read data of MIC12 */

   \                                 In section .text, align 2, keep-with-next
    796          static void I2S1_Init(void)
    797          {
   \                     I2S1_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    798          #if 1
    799            hi2s1.Instance = SPI1;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable14_4
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19_16  ;; 0x40013000
   \   0000000A   0x61E0             STR      R0,[R4, #+28]
    800            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
   \   0000000C   0xF44F 0x7080      MOV      R0,#+256
   \   00000010   0x6220             STR      R0,[R4, #+32]
    801            hi2s1.Init.Standard = I2S_STANDARD_LSB;
   \   00000012   0x2020             MOVS     R0,#+32
   \   00000014   0x6260             STR      R0,[R4, #+36]
    802            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x62A0             STR      R0,[R4, #+40]
    803            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
   \   0000001A   0x62E0             STR      R0,[R4, #+44]
    804            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
   \   0000001C   0xF44F 0x507A      MOV      R0,#+16000
   \   00000020   0x6320             STR      R0,[R4, #+48]
    805            hi2s1.Init.CPOL = I2S_CPOL_HIGH;
   \   00000022   0x2008             MOVS     R0,#+8
   \   00000024   0x6360             STR      R0,[R4, #+52]
    806            hi2s1.Init.ClockSource = I2S_CLOCK_EXTERNAL;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x63A0             STR      R0,[R4, #+56]
    807            HAL_I2S_Init(&hi2s1);
   \   0000002A   0xF104 0x001C      ADD      R0,R4,#+28
   \   0000002E   0x.... 0x....      BL       HAL_I2S_Init
    808          
    809            /* Enable TXE and ERR interrupt */
    810           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
   \   00000032   0x69E0             LDR      R0,[R4, #+28]
   \   00000034   0x6841             LDR      R1,[R0, #+4]
   \   00000036   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000003A   0x6041             STR      R1,[R0, #+4]
    811           
    812           __HAL_I2S_ENABLE(&hi2s1);
   \   0000003C   0x69E0             LDR      R0,[R4, #+28]
   \   0000003E   0x69C1             LDR      R1,[R0, #+28]
   \   00000040   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000044   0x61C1             STR      R1,[R0, #+28]
    813          #else
    814          	hspi1.Instance = SPI1;
    815          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    816          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    817          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    818          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    819          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    820          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    821          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    822          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    823          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    824          	hspi1.Init.CRCPolynomial = 7;
    825          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    826          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    827          	//hspi4.RxISR = SPI5_CallBack;
    828          	HAL_SPI_Init(&hspi1);
    829          
    830          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    831            /* Enable TXE, RXNE and ERR interrupt */
    832           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    833          
    834           __HAL_SPI_ENABLE(&hspi1);
    835          
    836          #endif
    837          }
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
    838          
    839          /* I2S2 init function */
    840          /* Read data of MIC34 */
    841          

   \                                 In section .text, align 2, keep-with-next
    842          static void I2S2_Init(void)
    843          {
   \                     I2S2_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    844          
    845          #if 1
    846           //HAL_I2S_DeInit(&hi2s2);
    847           hi2s2.Instance = SPI2;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19_17  ;; 0x40003800
   \   0000000A   0x6020             STR      R0,[R4, #+0]
    848           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
   \   0000000C   0xF44F 0x7080      MOV      R0,#+256
   \   00000010   0x6060             STR      R0,[R4, #+4]
    849           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
   \   00000012   0x2020             MOVS     R0,#+32
   \   00000014   0x60A0             STR      R0,[R4, #+8]
    850           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x60E0             STR      R0,[R4, #+12]
    851           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
   \   0000001A   0x6120             STR      R0,[R4, #+16]
    852           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
   \   0000001C   0xF44F 0x507A      MOV      R0,#+16000
   \   00000020   0x6160             STR      R0,[R4, #+20]
    853           hi2s2.Init.CPOL = I2S_CPOL_LOW;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x61A0             STR      R0,[R4, #+24]
    854           hi2s2.Init.ClockSource = I2S_CLOCK_EXTERNAL;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x61E0             STR      R0,[R4, #+28]
    855          
    856           HAL_I2S_Init(&hi2s2);
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       HAL_I2S_Init
    857           /* Enable TXE and ERR interrupt */
    858           __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
   \   00000030   0x6820             LDR      R0,[R4, #+0]
   \   00000032   0x6841             LDR      R1,[R0, #+4]
   \   00000034   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000038   0x6041             STR      R1,[R0, #+4]
    859           __HAL_I2S_ENABLE(&hi2s2);
   \   0000003A   0x6820             LDR      R0,[R4, #+0]
   \   0000003C   0x69C1             LDR      R1,[R0, #+28]
   \   0000003E   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000042   0x61C1             STR      R1,[R0, #+28]
    860          
    861          #else
    862             hspi2.Instance = SPI2;
    863             hspi2.Init.Mode = SPI_MODE_SLAVE;
    864             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    865             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
    866             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
    867             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
    868             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    869             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
    870             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
    871             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    872             hspi2.Init.CRCPolynomial = 7;
    873             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    874             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    875             HAL_SPI_Init(&hspi2);
    876          
    877          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    878           /* Enable TXE, RXNE and ERR interrupt */
    879          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
    880          
    881          __HAL_SPI_ENABLE(&hspi2);
    882          
    883          #endif
    884          
    885          
    886          }
   \   00000044   0xBD10             POP      {R4,PC}          ;; return
    887          
    888          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    889          void SPI4_Init(void)
    890          {
   \                     SPI4_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    891          
    892            hspi4.Instance = SPI4;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable18_2
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18_3  ;; 0x40013400
   \   0000000A   0x6020             STR      R0,[R4, #+0]
    893            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6060             STR      R0,[R4, #+4]
    894            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   00000010   0xF44F 0x6080      MOV      R0,#+1024
   \   00000014   0x60A0             STR      R0,[R4, #+8]
    895            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000016   0xF44F 0x6070      MOV      R0,#+3840
   \   0000001A   0x60E0             STR      R0,[R4, #+12]
    896            hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x6120             STR      R0,[R4, #+16]
    897            hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6160             STR      R0,[R4, #+20]
    898            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000024   0xF44F 0x7000      MOV      R0,#+512
   \   00000028   0x61A0             STR      R0,[R4, #+24]
    899            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x6220             STR      R0,[R4, #+32]
    900            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002E   0x6260             STR      R0,[R4, #+36]
    901            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000030   0x62A0             STR      R0,[R4, #+40]
    902            hspi4.Init.CRCPolynomial = 7;
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0x62E0             STR      R0,[R4, #+44]
    903            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x6320             STR      R0,[R4, #+48]
    904            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   0000003A   0x6360             STR      R0,[R4, #+52]
    905            HAL_SPI_Init(&hspi4);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       HAL_SPI_Init
    906          
    907            /* Enable TXE, RXNE and ERR interrupt */
    908           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x6841             LDR      R1,[R0, #+4]
   \   00000046   0xF041 0x0160      ORR      R1,R1,#0x60
   \   0000004A   0x6041             STR      R1,[R0, #+4]
    909          
    910           __HAL_SPI_ENABLE(&hspi4);
   \   0000004C   0x6820             LDR      R0,[R4, #+0]
   \   0000004E   0x6801             LDR      R1,[R0, #+0]
   \   00000050   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000054   0x6001             STR      R1,[R0, #+0]
    911          }
   \   00000056   0xBD10             POP      {R4,PC}          ;; return
    912          
    913          

   \                                 In section .text, align 2, keep-with-next
    914          void Mic7Rec(void)
    915          {
    916              SPI5_Init();
   \                     Mic7Rec: (+1)
   \   00000000   0x....             B.N      SPI5_Init
    917          }
    918          

   \                                 In section .text, align 2, keep-with-next
    919          void Mic8Rec(void)
    920          {
    921              SPI6_Init();
   \                     Mic8Rec: (+1)
   \   00000000   0x....             B.N      SPI6_Init
    922          }
    923          
    924          
    925          /* SPI5 init function */

   \                                 In section .text, align 2, keep-with-next
    926          void SPI5_Init(void)
    927          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    928          	
    929              /* Enable CRC module */
    930              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14  ;; 0x40023830
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    931          	for (char i=0; i< 2; i++)
   \   0000000E   0x2400             MOVS     R4,#+0
   \   00000010   0xE013             B.N      ??SPI5_Init_0
    932          	{
    933          		/* Filter LP & HP Init */
    934          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \                     ??SPI5_Init_1: (+1)
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable19_5
   \   00000016   0x2134             MOVS     R1,#+52
   \   00000018   0xFB11 0x0004      SMLABB   R0,R1,R4,R0
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable19_18  ;; 0x45fa0000
   \   00000020   0x6041             STR      R1,[R0, #+4]
    935          		Filter[i].HP_HZ = 10;
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable19_19  ;; 0x41200000
   \   00000026   0x6081             STR      R1,[R0, #+8]
    936          		Filter[i].Fs = 16000;    //sop1hc: 16000
   \   00000028   0xF44F 0x517A      MOV      R1,#+16000
   \   0000002C   0x8001             STRH     R1,[R0, #+0]
    937          		Filter[i].Out_MicChannels = 1;
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x81C1             STRH     R1,[R0, #+14]
    938          		Filter[i].In_MicChannels = 1;
   \   00000032   0x8181             STRH     R1,[R0, #+12]
    939          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   00000034   0x.... 0x....      BL       PDM_Filter_Init
    940          	}
   \   00000038   0x1C64             ADDS     R4,R4,#+1
   \                     ??SPI5_Init_0: (+1)
   \   0000003A   0x2C02             CMP      R4,#+2
   \   0000003C   0xDBE9             BLT.N    ??SPI5_Init_1
    941          
    942          
    943            hspi5.Instance = SPI5;
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x40015000
   \   00000046   0x6041             STR      R1,[R0, #+4]
    944            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0x6081             STR      R1,[R0, #+8]
    945            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000004C   0xF44F 0x6180      MOV      R1,#+1024
   \   00000050   0x60C1             STR      R1,[R0, #+12]
    946            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000052   0xF44F 0x6170      MOV      R1,#+3840
   \   00000056   0x6101             STR      R1,[R0, #+16]
    947            hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x6141             STR      R1,[R0, #+20]
    948            hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000005C   0x6181             STR      R1,[R0, #+24]
    949            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   0000005E   0xF44F 0x7100      MOV      R1,#+512
   \   00000062   0x61C1             STR      R1,[R0, #+28]
    950            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x6241             STR      R1,[R0, #+36]
    951            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   00000068   0x6281             STR      R1,[R0, #+40]
    952            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000006A   0x62C1             STR      R1,[R0, #+44]
    953            hspi5.Init.CRCPolynomial = 7;
   \   0000006C   0x2107             MOVS     R1,#+7
   \   0000006E   0x6301             STR      R1,[R0, #+48]
    954            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000070   0x2100             MOVS     R1,#+0
   \   00000072   0x6341             STR      R1,[R0, #+52]
    955            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000074   0x6381             STR      R1,[R0, #+56]
    956            //hspi5.RxISR = SPI5_CallBack;
    957            HAL_SPI_Init(&hspi5);
   \   00000076   0x1D00             ADDS     R0,R0,#+4
   \   00000078   0xE8BD 0x4010      POP      {R4,LR}
   \   0000007C   0x.... 0x....      B.W      HAL_SPI_Init
    958          
    959          
    960            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    961            /* Enable TXE, RXNE and ERR interrupt */
    962           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
    963          
    964           //__HAL_SPI_ENABLE(&hspi5);
    965          
    966          }
    967          

   \                                 In section .text, align 2, keep-with-next
    968          void SPI6_Init(void)
    969          {
    970          	
    971            hspi6.Instance = SPI6;
   \                     SPI6_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable19_8
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable19_9  ;; 0x40015400
   \   00000008   0x6041             STR      R1,[R0, #+4]
    972            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6081             STR      R1,[R0, #+8]
    973            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x60C1             STR      R1,[R0, #+12]
    974            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6101             STR      R1,[R0, #+16]
    975            hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6141             STR      R1,[R0, #+20]
    976            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001E   0x6181             STR      R1,[R0, #+24]
    977            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000020   0xF44F 0x7100      MOV      R1,#+512
   \   00000024   0x61C1             STR      R1,[R0, #+28]
    978            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x6241             STR      R1,[R0, #+36]
    979            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002A   0x6281             STR      R1,[R0, #+40]
    980            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000002C   0x62C1             STR      R1,[R0, #+44]
    981            hspi6.Init.CRCPolynomial = 7;
   \   0000002E   0x2107             MOVS     R1,#+7
   \   00000030   0x6301             STR      R1,[R0, #+48]
    982            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x6341             STR      R1,[R0, #+52]
    983            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000036   0x6381             STR      R1,[R0, #+56]
    984            //hspi6.RxISR = SPI6_CallBack;
    985            HAL_SPI_Init(&hspi6);
   \   00000038   0x1D00             ADDS     R0,R0,#+4
   \   0000003A   0x.... 0x....      B.W      HAL_SPI_Init
    986          
    987          
    988            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    989            /* Enable TXE, RXNE and ERR interrupt */
    990           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
    991          
    992           //__HAL_SPI_ENABLE(&hspi6);
    993          
    994          }
    995          
    996          
    997          
    998          

   \                                 In section .text, align 2, keep-with-next
    999          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
   1000          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
   1001          
   1002            GPIO_InitTypeDef GPIO_InitStruct;
   1003            if (hspi->Instance==SPI1)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable14_3  ;; 0x40013000
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD133             BNE.N    ??HAL_SPI_MspInit_0
   1004            {
   1005          	  /* USER CODE BEGIN SPI1_MspInit 0 */
   1006          	  
   1007          	  /* USER CODE END SPI1_MspInit 0 */
   1008          	  /* Peripheral clock enable */
   1009          	  __SPI1_CLK_ENABLE();
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable14  ;; 0x40023830
   \   00000014   0x6968             LDR      R0,[R5, #+20]
   \   00000016   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   0000001A   0x6168             STR      R0,[R5, #+20]
   \   0000001C   0x6968             LDR      R0,[R5, #+20]
   \   0000001E   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   1010          	  __GPIOA_CLK_ENABLE();
   \   00000026   0x6828             LDR      R0,[R5, #+0]
   \   00000028   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000002C   0x6028             STR      R0,[R5, #+0]
   \   0000002E   0x6828             LDR      R0,[R5, #+0]
   \   00000030   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0x9800             LDR      R0,[SP, #+0]
   1011          	  __GPIOC_CLK_ENABLE();
   \   00000038   0x6828             LDR      R0,[R5, #+0]
   \   0000003A   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000003E   0x6028             STR      R0,[R5, #+0]
   \   00000040   0x6828             LDR      R0,[R5, #+0]
   \   00000042   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000046   0x9000             STR      R0,[SP, #+0]
   \   00000048   0x9800             LDR      R0,[SP, #+0]
   1012          	  
   1013          	  /**I2S1 GPIO Configuration	
   1014          		PA4 	------> I2S1_WS --> LRCKO
   1015          		PA5 	------> I2S1_CK --> BICKO
   1016          		PA7 	------> I2S1_SD --> SDO12
   1017          		PC4 	------> I2S1_MCK
   1018          		*/
   1019          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
   \   0000004A   0x20F0             MOVS     R0,#+240
   \   0000004C   0x9001             STR      R0,[SP, #+4]
   1020          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0x9002             STR      R0,[SP, #+8]
   1021          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x9003             STR      R0,[SP, #+12]
   1022          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000056   0x2003             MOVS     R0,#+3
   \   00000058   0x9004             STR      R0,[SP, #+16]
   1023          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   \   0000005A   0x2005             MOVS     R0,#+5
   \   0000005C   0x9005             STR      R0,[SP, #+20]
   1024          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   0000005E   0xA901             ADD      R1,SP,#+4
   \   00000060   0x....             LDR.N    R0,??DataTable14_1  ;; 0x40020000
   \   00000062   0x.... 0x....      BL       HAL_GPIO_Init
   1025          	  
   1026          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
   1027          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1028          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
   1029          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1030          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1031          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1032          		
   1033          	  /* Peripheral interrupt init*/
   1034          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x2023             MOVS     R0,#+35
   \   0000006C   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1035          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   00000070   0x2023             MOVS     R0,#+35
   \   00000072   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   00000076   0xE1CA             B.N      ??HAL_SPI_MspInit_1
   1036          	  /* USER CODE BEGIN SPI1_MspInit 1 */
   1037          	  
   1038          	  /* USER CODE END SPI1_MspInit 1 */
   1039          
   1040            }
   1041            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable17_1  ;; 0x40003800
   \   0000007C   0x4288             CMP      R0,R1
   \   0000007E   0xD14B             BNE.N    ??HAL_SPI_MspInit_2
   1042            {
   1043          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1044          	  
   1045          	  /* USER CODE END SPI2_MspInit 0 */
   1046          		/* Peripheral clock enable */
   1047          		__SPI2_CLK_ENABLE();
   \   00000080   0x....             LDR.N    R5,??DataTable14  ;; 0x40023830
   \   00000082   0x6928             LDR      R0,[R5, #+16]
   \   00000084   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   00000088   0x6128             STR      R0,[R5, #+16]
   \   0000008A   0x6928             LDR      R0,[R5, #+16]
   \   0000008C   0xF400 0x4080      AND      R0,R0,#0x4000
   \   00000090   0x9000             STR      R0,[SP, #+0]
   \   00000092   0x9800             LDR      R0,[SP, #+0]
   1048          		__GPIOI_CLK_ENABLE();
   \   00000094   0x6828             LDR      R0,[R5, #+0]
   \   00000096   0xF440 0x7080      ORR      R0,R0,#0x100
   \   0000009A   0x6028             STR      R0,[R5, #+0]
   \   0000009C   0x6828             LDR      R0,[R5, #+0]
   \   0000009E   0xF400 0x7080      AND      R0,R0,#0x100
   \   000000A2   0x9000             STR      R0,[SP, #+0]
   \   000000A4   0x9800             LDR      R0,[SP, #+0]
   1049          		__GPIOB_CLK_ENABLE();
   \   000000A6   0x6828             LDR      R0,[R5, #+0]
   \   000000A8   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000AC   0x6028             STR      R0,[R5, #+0]
   \   000000AE   0x6828             LDR      R0,[R5, #+0]
   \   000000B0   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000B4   0x9000             STR      R0,[SP, #+0]
   \   000000B6   0x9800             LDR      R0,[SP, #+0]
   1050          		__GPIOC_CLK_ENABLE();
   \   000000B8   0x6828             LDR      R0,[R5, #+0]
   \   000000BA   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000BE   0x6028             STR      R0,[R5, #+0]
   \   000000C0   0x6828             LDR      R0,[R5, #+0]
   \   000000C2   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000C6   0x9000             STR      R0,[SP, #+0]
   \   000000C8   0x9800             LDR      R0,[SP, #+0]
   1051          	  
   1052          		/**I2S2 GPIO Configuration	   
   1053          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1054          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1055          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1056          	  
   1057          	  
   1058          		*/
   1059          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   \   000000CA   0x2002             MOVS     R0,#+2
   \   000000CC   0x9001             STR      R0,[SP, #+4]
   1060          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   000000CE   0x9002             STR      R0,[SP, #+8]
   1061          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x9003             STR      R0,[SP, #+12]
   1062          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000000D4   0x2003             MOVS     R0,#+3
   \   000000D6   0x9004             STR      R0,[SP, #+16]
   1063          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   \   000000D8   0x2005             MOVS     R0,#+5
   \   000000DA   0x9005             STR      R0,[SP, #+20]
   1064          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   000000DC   0xA901             ADD      R1,SP,#+4
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable19_20  ;; 0x40020800
   \   000000E2   0x.... 0x....      BL       HAL_GPIO_Init
   1065          	  
   1066          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   000000E6   0xF44F 0x5040      MOV      R0,#+12288
   \   000000EA   0x9001             STR      R0,[SP, #+4]
   1067          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   000000EC   0x2002             MOVS     R0,#+2
   \   000000EE   0x9002             STR      R0,[SP, #+8]
   1068          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0x9003             STR      R0,[SP, #+12]
   1069          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000000F4   0x2003             MOVS     R0,#+3
   \   000000F6   0x9004             STR      R0,[SP, #+16]
   1070          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   \   000000F8   0x2005             MOVS     R0,#+5
   \   000000FA   0x9005             STR      R0,[SP, #+20]
   1071          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   000000FC   0xA901             ADD      R1,SP,#+4
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable19_21  ;; 0x40020400
   \   00000102   0x.... 0x....      BL       HAL_GPIO_Init
   1072          	  
   1073          	  
   1074          		/* Peripheral interrupt init*/
   1075          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   00000106   0x2200             MOVS     R2,#+0
   \   00000108   0x2101             MOVS     R1,#+1
   \   0000010A   0x2024             MOVS     R0,#+36
   \   0000010C   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1076          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   00000110   0x2024             MOVS     R0,#+36
   \   00000112   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   00000116   0xE17A             B.N      ??HAL_SPI_MspInit_1
   1077          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1078          	  
   1079          	  /* USER CODE END SPI2_MspInit 1 */
   1080          
   1081          
   1082            }
   1083            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   00000118   0x.... 0x....      LDR.W    R1,??DataTable19_22  ;; 0x40003c00
   \   0000011C   0x4288             CMP      R0,R1
   \   0000011E   0xF040 0x808D      BNE.W    ??HAL_SPI_MspInit_3
   1084            {
   1085          	  
   1086              /**I2S3 GPIO Configuration    
   1087                 PB2     ------> I2S3_SD
   1088                 PA15     ------> I2S3_WS (LRCK)
   1089                 PB3     ------> I2S3_CK 
   1090          	   PC7    ------> MCLK
   1091              */
   1092           
   1093            /* USER CODE BEGIN SPI3_MspInit 1 */
   1094            __SPI3_CLK_ENABLE();
   \   00000122   0x....             LDR.N    R5,??DataTable14  ;; 0x40023830
   \   00000124   0x6928             LDR      R0,[R5, #+16]
   \   00000126   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   0000012A   0x6128             STR      R0,[R5, #+16]
   \   0000012C   0x6928             LDR      R0,[R5, #+16]
   \   0000012E   0xF400 0x4000      AND      R0,R0,#0x8000
   \   00000132   0x9000             STR      R0,[SP, #+0]
   \   00000134   0x9800             LDR      R0,[SP, #+0]
   1095            __GPIOA_CLK_ENABLE();
   \   00000136   0x6828             LDR      R0,[R5, #+0]
   \   00000138   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000013C   0x6028             STR      R0,[R5, #+0]
   \   0000013E   0x6828             LDR      R0,[R5, #+0]
   \   00000140   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000144   0x9000             STR      R0,[SP, #+0]
   \   00000146   0x9800             LDR      R0,[SP, #+0]
   1096            __GPIOB_CLK_ENABLE();
   \   00000148   0x6828             LDR      R0,[R5, #+0]
   \   0000014A   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000014E   0x6028             STR      R0,[R5, #+0]
   \   00000150   0x6828             LDR      R0,[R5, #+0]
   \   00000152   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000156   0x9000             STR      R0,[SP, #+0]
   \   00000158   0x9800             LDR      R0,[SP, #+0]
   1097          
   1098            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   \   0000015A   0x200C             MOVS     R0,#+12
   \   0000015C   0x9001             STR      R0,[SP, #+4]
   1099            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000015E   0x2002             MOVS     R0,#+2
   \   00000160   0x9002             STR      R0,[SP, #+8]
   1100            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000162   0x2003             MOVS     R0,#+3
   \   00000164   0x9004             STR      R0,[SP, #+16]
   1101            GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000166   0x2000             MOVS     R0,#+0
   \   00000168   0x9003             STR      R0,[SP, #+12]
   1102            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   \   0000016A   0x2006             MOVS     R0,#+6
   \   0000016C   0x9005             STR      R0,[SP, #+20]
   1103            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   0000016E   0xA901             ADD      R1,SP,#+4
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable19_21  ;; 0x40020400
   \   00000174   0x.... 0x....      BL       HAL_GPIO_Init
   1104          
   1105          
   1106            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   00000178   0xF44F 0x4000      MOV      R0,#+32768
   \   0000017C   0x9001             STR      R0,[SP, #+4]
   1107            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000017E   0x2002             MOVS     R0,#+2
   \   00000180   0x9002             STR      R0,[SP, #+8]
   1108            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   \   00000182   0x2006             MOVS     R0,#+6
   \   00000184   0x9005             STR      R0,[SP, #+20]
   1109            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000186   0xA901             ADD      R1,SP,#+4
   \   00000188   0x....             LDR.N    R0,??DataTable14_1  ;; 0x40020000
   \   0000018A   0x.... 0x....      BL       HAL_GPIO_Init
   1110          
   1111          #ifdef CODEC_MCLK_ENABLED
   1112            __GPIOC_CLK_ENABLE();
   \   0000018E   0x6828             LDR      R0,[R5, #+0]
   \   00000190   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000194   0x6028             STR      R0,[R5, #+0]
   \   00000196   0x6828             LDR      R0,[R5, #+0]
   \   00000198   0xF000 0x0004      AND      R0,R0,#0x4
   \   0000019C   0x9000             STR      R0,[SP, #+0]
   \   0000019E   0x9800             LDR      R0,[SP, #+0]
   1113            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   \   000001A0   0x2080             MOVS     R0,#+128
   \   000001A2   0x9001             STR      R0,[SP, #+4]
   1114            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   000001A4   0x2002             MOVS     R0,#+2
   \   000001A6   0x9002             STR      R0,[SP, #+8]
   1115            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000001A8   0x2003             MOVS     R0,#+3
   \   000001AA   0x9004             STR      R0,[SP, #+16]
   1116            GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   000001AC   0x2000             MOVS     R0,#+0
   \   000001AE   0x9003             STR      R0,[SP, #+12]
   1117            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   \   000001B0   0x2006             MOVS     R0,#+6
   \   000001B2   0x9005             STR      R0,[SP, #+20]
   1118            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   000001B4   0xA901             ADD      R1,SP,#+4
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable19_20  ;; 0x40020800
   \   000001BA   0x.... 0x....      BL       HAL_GPIO_Init
   1119          
   1120          #endif /* CODEC_MCLK_ENABLED */ 
   1121          
   1122          #ifdef I2S_INTERRUPT   
   1123               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1124               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1125               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1126          
   1127               /* Enable the I2S DMA request */
   1128               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1129               //__HAL_I2S_ENABLE(&hi2s3);
   1130            	    /* Peripheral interrupt init*/
   1131          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1132          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1133          #endif
   1134          
   1135                /* Enable the DMA clock */ 
   1136          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   000001BE   0x6828             LDR      R0,[R5, #+0]
   \   000001C0   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000001C4   0x6028             STR      R0,[R5, #+0]
   \   000001C6   0x6828             LDR      R0,[R5, #+0]
   \   000001C8   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000001CC   0x9000             STR      R0,[SP, #+0]
   \   000001CE   0x9800             LDR      R0,[SP, #+0]
   1137          
   1138                /* Configure the DMA Stream */
   1139                //HAL_DMA_DeInit(&DmaHandle);
   1140          
   1141                /* Set the parameters to be configured */ 
   1142          	  DmaHandle.Instance = DMA1_Stream7;
   \   000001D0   0x.... 0x....      LDR.W    R5,??DataTable19_23
   \   000001D4   0x.... 0x....      LDR.W    R0,??DataTable19_24  ;; 0x400260b8
   \   000001D8   0x6028             STR      R0,[R5, #+0]
   1143                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x6068             STR      R0,[R5, #+4]
   1144          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   000001DE   0x2040             MOVS     R0,#+64
   \   000001E0   0x60A8             STR      R0,[R5, #+8]
   1145          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   000001E2   0x2000             MOVS     R0,#+0
   \   000001E4   0x60E8             STR      R0,[R5, #+12]
   1146          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   000001E6   0xF44F 0x6080      MOV      R0,#+1024
   \   000001EA   0x6128             STR      R0,[R5, #+16]
   1147          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   000001EC   0xF44F 0x6000      MOV      R0,#+2048
   \   000001F0   0x6168             STR      R0,[R5, #+20]
   1148                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   000001F2   0xF44F 0x5000      MOV      R0,#+8192
   \   000001F6   0x61A8             STR      R0,[R5, #+24]
   1149          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   000001F8   0x2000             MOVS     R0,#+0
   \   000001FA   0x61E8             STR      R0,[R5, #+28]
   1150                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   000001FC   0xF44F 0x3000      MOV      R0,#+131072
   \   00000200   0x6228             STR      R0,[R5, #+32]
   1151          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   00000202   0x2004             MOVS     R0,#+4
   \   00000204   0x6268             STR      R0,[R5, #+36]
   1152                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   00000206   0x2003             MOVS     R0,#+3
   \   00000208   0x62A8             STR      R0,[R5, #+40]
   1153                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   0000020A   0x2000             MOVS     R0,#+0
   \   0000020C   0x62E8             STR      R0,[R5, #+44]
   1154                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   0000020E   0x6328             STR      R0,[R5, #+48]
   1155                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1156                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1157                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1158                //DmaHandle.XferCpltCallback = &TC_Callback;
   1159           
   1160          
   1161                /* Associate the initialized DMA handle to the the SPI handle */
   1162                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   \   00000210   0x6565             STR      R5,[R4, #+84]
   \   00000212   0x63AC             STR      R4,[R5, #+56]
   1163                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1164          
   1165          	   /* Deinitialize the Stream for new transfer */
   1166                 HAL_DMA_DeInit(&DmaHandle);
   \   00000214   0x4628             MOV      R0,R5
   \   00000216   0x.... 0x....      BL       HAL_DMA_DeInit
   1167                 /* Configure the DMA Stream */
   1168          	   HAL_DMA_Init(&DmaHandle);
   \   0000021A   0x4628             MOV      R0,R5
   \   0000021C   0x.... 0x....      BL       HAL_DMA_Init
   1169          
   1170                /* Set Interrupt Group Priority */
   1171                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   00000220   0x2200             MOVS     R2,#+0
   \   00000222   0x2103             MOVS     R1,#+3
   \   00000224   0x202F             MOVS     R0,#+47
   \   00000226   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1172                /* Enable the DMA STREAM global Interrupt */
   1173                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   0000022A   0x202F             MOVS     R0,#+47
   \   0000022C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1174          
   1175          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000230   0x6828             LDR      R0,[R5, #+0]
   \   00000232   0x6801             LDR      R1,[R0, #+0]
   \   00000234   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000238   0x6001             STR      R1,[R0, #+0]
   \   0000023A   0xE0E8             B.N      ??HAL_SPI_MspInit_1
   1176          	    
   1177            }
   1178            else if(hspi->Instance==SPI4)
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   0000023C   0x.... 0x....      LDR.W    R1,??DataTable18_3  ;; 0x40013400
   \   00000240   0x4288             CMP      R0,R1
   \   00000242   0xD12A             BNE.N    ??HAL_SPI_MspInit_4
   1179            {
   1180            /* USER CODE BEGIN SPI4_MspInit 0 */
   1181          
   1182            /* USER CODE END SPI4_MspInit 0 */
   1183              /* Peripheral clock enable */
   1184              __SPI4_CLK_ENABLE();
   \   00000244   0x....             LDR.N    R5,??DataTable14  ;; 0x40023830
   \   00000246   0x6968             LDR      R0,[R5, #+20]
   \   00000248   0xF440 0x5000      ORR      R0,R0,#0x2000
   \   0000024C   0x6168             STR      R0,[R5, #+20]
   \   0000024E   0x6968             LDR      R0,[R5, #+20]
   \   00000250   0xF400 0x5000      AND      R0,R0,#0x2000
   \   00000254   0x9000             STR      R0,[SP, #+0]
   \   00000256   0x9800             LDR      R0,[SP, #+0]
   1185              __HAL_RCC_GPIOE_CLK_ENABLE();
   \   00000258   0x6828             LDR      R0,[R5, #+0]
   \   0000025A   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000025E   0x6028             STR      R0,[R5, #+0]
   \   00000260   0x6828             LDR      R0,[R5, #+0]
   \   00000262   0xF000 0x0010      AND      R0,R0,#0x10
   \   00000266   0x9000             STR      R0,[SP, #+0]
   \   00000268   0x9800             LDR      R0,[SP, #+0]
   1186            
   1187            
   1188              /**SPI4 GPIO Configuration    
   1189              PE2     ------> SPI4_SCK
   1190              PE4     ------> SPI4_NSS
   1191              PE5     ------> SPI4_MISO
   1192              PE6     ------> SPI4_MOSI 
   1193              */
   1194              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   \   0000026A   0x2074             MOVS     R0,#+116
   \   0000026C   0x9001             STR      R0,[SP, #+4]
   1195              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000026E   0x2002             MOVS     R0,#+2
   \   00000270   0x9002             STR      R0,[SP, #+8]
   1196              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000272   0x2000             MOVS     R0,#+0
   \   00000274   0x9003             STR      R0,[SP, #+12]
   1197              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000276   0x2003             MOVS     R0,#+3
   \   00000278   0x9004             STR      R0,[SP, #+16]
   1198              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   \   0000027A   0x2005             MOVS     R0,#+5
   \   0000027C   0x9005             STR      R0,[SP, #+20]
   1199              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   \   0000027E   0xA901             ADD      R1,SP,#+4
   \   00000280   0x.... 0x....      LDR.W    R0,??DataTable18  ;; 0x40021000
   \   00000284   0x.... 0x....      BL       HAL_GPIO_Init
   1200          
   1201          	/* Peripheral interrupt init*/
   1202              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   \   00000288   0x2200             MOVS     R2,#+0
   \   0000028A   0x2102             MOVS     R1,#+2
   \   0000028C   0x2054             MOVS     R0,#+84
   \   0000028E   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1203              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   \   00000292   0x2054             MOVS     R0,#+84
   \   00000294   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   00000298   0xE0B9             B.N      ??HAL_SPI_MspInit_1
   1204          
   1205            /* USER CODE BEGIN SPI4_MspInit 1 */
   1206          
   1207            /* USER CODE END SPI4_MspInit 1 */
   1208            }
   1209            else if(hspi->Instance==SPI5)
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   0000029A   0x.... 0x....      LDR.W    R1,??DataTable19_3  ;; 0x40015000
   \   0000029E   0x4288             CMP      R0,R1
   \   000002A0   0xD159             BNE.N    ??HAL_SPI_MspInit_5
   1210            {
   1211            /* USER CODE BEGIN SPI5_MspInit 0 */
   1212          
   1213            /* USER CODE END SPI5_MspInit 0 */
   1214              /* Peripheral clock enable */
   1215              __HAL_RCC_SPI5_CLK_ENABLE();
   \   000002A2   0x....             LDR.N    R5,??DataTable14  ;; 0x40023830
   \   000002A4   0x6968             LDR      R0,[R5, #+20]
   \   000002A6   0xF440 0x1080      ORR      R0,R0,#0x100000
   \   000002AA   0x6168             STR      R0,[R5, #+20]
   \   000002AC   0x6968             LDR      R0,[R5, #+20]
   \   000002AE   0xF400 0x1080      AND      R0,R0,#0x100000
   \   000002B2   0x9000             STR      R0,[SP, #+0]
   \   000002B4   0x9800             LDR      R0,[SP, #+0]
   1216              __HAL_RCC_GPIOF_CLK_ENABLE();
   \   000002B6   0x6828             LDR      R0,[R5, #+0]
   \   000002B8   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000002BC   0x6028             STR      R0,[R5, #+0]
   \   000002BE   0x6828             LDR      R0,[R5, #+0]
   \   000002C0   0xF000 0x0020      AND      R0,R0,#0x20
   \   000002C4   0x9000             STR      R0,[SP, #+0]
   \   000002C6   0x9800             LDR      R0,[SP, #+0]
   1217            
   1218              /**SPI5 GPIO Configuration    
   1219              PF7     ------> SPI5_SCK  --> PF7
   1220              PF11     ------> SPI5_MOSI --> PF9
   1221                               SPI5_MISO --> PF8
   1222                                    NSS   -->  PF6
   1223              */
   1224              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   \   000002C8   0xF44F 0x7070      MOV      R0,#+960
   \   000002CC   0x9001             STR      R0,[SP, #+4]
   1225              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \   000002CE   0x2012             MOVS     R0,#+18
   \   000002D0   0x9002             STR      R0,[SP, #+8]
   1226              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \   000002D2   0x2001             MOVS     R0,#+1
   \   000002D4   0x9003             STR      R0,[SP, #+12]
   1227              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   000002D6   0x2003             MOVS     R0,#+3
   \   000002D8   0x9004             STR      R0,[SP, #+16]
   1228              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   \   000002DA   0x2005             MOVS     R0,#+5
   \   000002DC   0x9005             STR      R0,[SP, #+20]
   1229              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   \   000002DE   0xA901             ADD      R1,SP,#+4
   \   000002E0   0x.... 0x....      LDR.W    R0,??DataTable19_25  ;; 0x40021400
   \   000002E4   0x.... 0x....      BL       HAL_GPIO_Init
   1230          
   1231          #if 0
   1232            /* Peripheral interrupt init*/
   1233              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1234              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1235          
   1236          #else
   1237          	/* Peripheral DMA init*/
   1238              __HAL_RCC_DMA2_CLK_ENABLE();
   \   000002E8   0x6828             LDR      R0,[R5, #+0]
   \   000002EA   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000002EE   0x6028             STR      R0,[R5, #+0]
   \   000002F0   0x6828             LDR      R0,[R5, #+0]
   \   000002F2   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000002F6   0x9000             STR      R0,[SP, #+0]
   \   000002F8   0x9800             LDR      R0,[SP, #+0]
   1239          	hdma_spi5_rx.Instance = DMA2_Stream5;
   \   000002FA   0x.... 0x....      LDR.W    R5,??DataTable19_26
   \   000002FE   0x.... 0x....      LDR.W    R0,??DataTable19_27  ;; 0x40026488
   \   00000302   0x6028             STR      R0,[R5, #+0]
   1240          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   \   00000304   0xF04F 0x6060      MOV      R0,#+234881024
   \   00000308   0x6068             STR      R0,[R5, #+4]
   1241          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \   0000030A   0x2000             MOVS     R0,#+0
   \   0000030C   0x60A8             STR      R0,[R5, #+8]
   1242          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   \   0000030E   0x60E8             STR      R0,[R5, #+12]
   1243          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   \   00000310   0xF44F 0x6080      MOV      R0,#+1024
   \   00000314   0x6128             STR      R0,[R5, #+16]
   1244          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   00000316   0xF44F 0x6000      MOV      R0,#+2048
   \   0000031A   0x6168             STR      R0,[R5, #+20]
   1245          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   \   0000031C   0xF44F 0x5000      MOV      R0,#+8192
   \   00000320   0x61A8             STR      R0,[R5, #+24]
   1246          	hdma_spi5_rx.Init.Mode = DMA_NORMAL;
   \   00000322   0x2000             MOVS     R0,#+0
   \   00000324   0x61E8             STR      R0,[R5, #+28]
   1247          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   \   00000326   0xF44F 0x3000      MOV      R0,#+131072
   \   0000032A   0x6228             STR      R0,[R5, #+32]
   1248          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   \   0000032C   0x2000             MOVS     R0,#+0
   \   0000032E   0x6268             STR      R0,[R5, #+36]
   1249          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   00000330   0x2003             MOVS     R0,#+3
   \   00000332   0x62A8             STR      R0,[R5, #+40]
   1250          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   \   00000334   0x2000             MOVS     R0,#+0
   \   00000336   0x62E8             STR      R0,[R5, #+44]
   1251          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   \   00000338   0x6328             STR      R0,[R5, #+48]
   1252          	HAL_DMA_Init(&hdma_spi5_rx);
   \   0000033A   0x4628             MOV      R0,R5
   \   0000033C   0x.... 0x....      BL       HAL_DMA_Init
   1253          
   1254              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   \   00000340   0x65A5             STR      R5,[R4, #+88]
   \   00000342   0x63AC             STR      R4,[R5, #+56]
   1255          
   1256          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   \   00000344   0x2200             MOVS     R2,#+0
   \   00000346   0x2104             MOVS     R1,#+4
   \   00000348   0x2044             MOVS     R0,#+68
   \   0000034A   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1257          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   \   0000034E   0x2044             MOVS     R0,#+68
   \   00000350   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   00000354   0xE05B             B.N      ??HAL_SPI_MspInit_1
   1258          
   1259          #endif
   1260            /* USER CODE END SPI5_MspInit 1 */
   1261            }
   1262            else if(hspi->Instance==SPI6)
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   00000356   0x.... 0x....      LDR.W    R1,??DataTable19_9  ;; 0x40015400
   \   0000035A   0x4288             CMP      R0,R1
   \   0000035C   0xD157             BNE.N    ??HAL_SPI_MspInit_1
   1263            {
   1264            /* USER CODE BEGIN SPI6_MspInit 0 */
   1265          
   1266            /* USER CODE END SPI6_MspInit 0 */
   1267              /* Peripheral clock enable */
   1268              __SPI6_CLK_ENABLE();
   \   0000035E   0x....             LDR.N    R5,??DataTable14  ;; 0x40023830
   \   00000360   0x6968             LDR      R0,[R5, #+20]
   \   00000362   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   00000366   0x6168             STR      R0,[R5, #+20]
   \   00000368   0x6968             LDR      R0,[R5, #+20]
   \   0000036A   0xF400 0x1000      AND      R0,R0,#0x200000
   \   0000036E   0x9000             STR      R0,[SP, #+0]
   \   00000370   0x9800             LDR      R0,[SP, #+0]
   1269              __HAL_RCC_GPIOG_CLK_ENABLE();
   \   00000372   0x6828             LDR      R0,[R5, #+0]
   \   00000374   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000378   0x6028             STR      R0,[R5, #+0]
   \   0000037A   0x6828             LDR      R0,[R5, #+0]
   \   0000037C   0xF000 0x0040      AND      R0,R0,#0x40
   \   00000380   0x9000             STR      R0,[SP, #+0]
   \   00000382   0x9800             LDR      R0,[SP, #+0]
   1270            
   1271              /**SPI6 GPIO Configuration    
   1272              PG13     ------> SPI6_SCK
   1273              PG14     ------> SPI6_MOSI 
   1274              */
   1275              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   \   00000384   0xF44F 0x40C0      MOV      R0,#+24576
   \   00000388   0x9001             STR      R0,[SP, #+4]
   1276              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   0000038A   0x2002             MOVS     R0,#+2
   \   0000038C   0x9002             STR      R0,[SP, #+8]
   1277              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   0000038E   0x2000             MOVS     R0,#+0
   \   00000390   0x9003             STR      R0,[SP, #+12]
   1278              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   \   00000392   0x2003             MOVS     R0,#+3
   \   00000394   0x9004             STR      R0,[SP, #+16]
   1279              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   \   00000396   0x2005             MOVS     R0,#+5
   \   00000398   0x9005             STR      R0,[SP, #+20]
   1280              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   \   0000039A   0xA901             ADD      R1,SP,#+4
   \   0000039C   0x.... 0x....      LDR.W    R0,??DataTable19_28  ;; 0x40021800
   \   000003A0   0x.... 0x....      BL       HAL_GPIO_Init
   1281          
   1282          #if 0
   1283          	  /* Peripheral interrupt init*/
   1284              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1285              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1286          #else
   1287          	/* Peripheral DMA init*/
   1288          	__HAL_RCC_DMA2_CLK_ENABLE();
   \   000003A4   0x6828             LDR      R0,[R5, #+0]
   \   000003A6   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000003AA   0x6028             STR      R0,[R5, #+0]
   \   000003AC   0x6828             LDR      R0,[R5, #+0]
   \   000003AE   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000003B2   0x9000             STR      R0,[SP, #+0]
   \   000003B4   0x9800             LDR      R0,[SP, #+0]
   1289          	hdma_spi6_rx.Instance = DMA2_Stream6;
   \   000003B6   0x.... 0x....      LDR.W    R5,??DataTable19_29
   \   000003BA   0x.... 0x....      LDR.W    R0,??DataTable19_27  ;; 0x40026488
   \   000003BE   0x3018             ADDS     R0,R0,#+24
   \   000003C0   0x6028             STR      R0,[R5, #+0]
   1290          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   \   000003C2   0xF04F 0x7000      MOV      R0,#+33554432
   \   000003C6   0x6068             STR      R0,[R5, #+4]
   1291          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \   000003C8   0x2000             MOVS     R0,#+0
   \   000003CA   0x60A8             STR      R0,[R5, #+8]
   1292          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   \   000003CC   0x60E8             STR      R0,[R5, #+12]
   1293          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   \   000003CE   0xF44F 0x6080      MOV      R0,#+1024
   \   000003D2   0x6128             STR      R0,[R5, #+16]
   1294          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   000003D4   0xF44F 0x6000      MOV      R0,#+2048
   \   000003D8   0x6168             STR      R0,[R5, #+20]
   1295          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   000003DA   0x61A8             STR      R0,[R5, #+24]
   1296          	hdma_spi6_rx.Init.Mode = DMA_NORMAL;
   \   000003DC   0x2000             MOVS     R0,#+0
   \   000003DE   0x61E8             STR      R0,[R5, #+28]
   1297          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   \   000003E0   0xF44F 0x3000      MOV      R0,#+131072
   \   000003E4   0x6228             STR      R0,[R5, #+32]
   1298          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   \   000003E6   0x2000             MOVS     R0,#+0
   \   000003E8   0x6268             STR      R0,[R5, #+36]
   1299          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   000003EA   0x2003             MOVS     R0,#+3
   \   000003EC   0x62A8             STR      R0,[R5, #+40]
   1300          	hdma_spi6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   \   000003EE   0x2000             MOVS     R0,#+0
   \   000003F0   0x62E8             STR      R0,[R5, #+44]
   1301          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   \   000003F2   0x6328             STR      R0,[R5, #+48]
   1302          	HAL_DMA_Init(&hdma_spi6_rx);
   \   000003F4   0x4628             MOV      R0,R5
   \   000003F6   0x.... 0x....      BL       HAL_DMA_Init
   1303          
   1304          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   \   000003FA   0x65A5             STR      R5,[R4, #+88]
   \   000003FC   0x63AC             STR      R4,[R5, #+56]
   1305          
   1306          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   \   000003FE   0x2201             MOVS     R2,#+1
   \   00000400   0x2107             MOVS     R1,#+7
   \   00000402   0x2045             MOVS     R0,#+69
   \   00000404   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1307          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   \   00000408   0x2045             MOVS     R0,#+69
   \   0000040A   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1308          
   1309          #endif
   1310            }
   1311          
   1312          }
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   0000040E   0xB007             ADD      SP,SP,#+28
   \   00000410   0xBD30             POP      {R4,R5,PC}       ;; return
   1313          
   1314          
   1315          
   1316          

   \                                 In section .text, align 2, keep-with-next
   1317          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1318          {
   1319            /* Check the parameters */
   1320            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1321            
   1322            /* Write in the DR register the data to be sent */
   1323            SPIx->DR = Data;
   \                     SPI_I2S_SendData: (+1)
   \   00000000   0x60C1             STR      R1,[R0, #+12]
   1324          }
   \   00000002   0x4770             BX       LR               ;; return
   1325          
   1326          

   \                                 In section .text, align 2, keep-with-next
   1327          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1328          {
   1329            /* Check the parameters */
   1330            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1331            
   1332            /* Return the data in the DR register */
   1333            return SPIx->DR;
   \                     SPI_I2S_ReceiveData: (+1)
   \   00000000   0x68C0             LDR      R0,[R0, #+12]
   \   00000002   0xB280             UXTH     R0,R0
   \   00000004   0x4770             BX       LR               ;; return
   1334          }
   1335          
   1336          

   \                                 In section .text, align 2, keep-with-next
   1337          void RecordUpdBuf(void)
   1338          {
   1339          
   1340               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable19_30
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x2902             CMP      R1,#+2
   \   00000008   0xD000             BEQ.N    ??RecordUpdBuf_0
   \   0000000A   0x4770             BX       LR
   1341               {
   1342                  WaveRecord_flgInt=0;
   \                     ??RecordUpdBuf_0: (+1)
   \   0000000C   0xB410             PUSH     {R4}
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x7001             STRB     R1,[R0, #+0]
   1343          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   00000012   0x.... 0x....      LDR.W    R2,??DataTable19_31
   \   00000016   0x8811             LDRH     R1,[R2, #+0]
   \   00000018   0xF5B1 0x6F80      CMP      R1,#+1024
   \   0000001C   0xF280 0x80CF      BGE.W    ??RecordUpdBuf_1
   \   00000020   0x....             LDR.N    R1,??DataTable18_1
   \   00000022   0x880B             LDRH     R3,[R1, #+0]
   \   00000024   0xF5B3 0x6F80      CMP      R3,#+1024
   \   00000028   0xF280 0x80C9      BGE.W    ??RecordUpdBuf_1
   1344          		//			  &&(stLR!=stLROld))
   1345          			{
   1346          		/*-------------------------------------------------------------------------------------------------------------
   1347          					  
   1348          			Sequence  Record Data					  Processing Data				  Player Data
   1349          					  
   1350          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1351          					  
   1352          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1353          					  
   1354          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1355          		 ---------------------------------------------------------------------------------------------------------------*/
   1356          					  /* Recording Audio Data */						 
   1357          					   switch (buffer_switch)
   \   0000002C   0x.... 0x....      LDR.W    R3,??DataTable19_7
   \   00000030   0x781B             LDRB     R3,[R3, #+0]
   \   00000032   0x2B00             CMP      R3,#+0
   \   00000034   0xD004             BEQ.N    ??RecordUpdBuf_2
   \   00000036   0x2B02             CMP      R3,#+2
   \   00000038   0xF000 0x8082      BEQ.W    ??RecordUpdBuf_3
   \   0000003C   0xD341             BCC.N    ??RecordUpdBuf_4
   \   0000003E   0xE0BE             B.N      ??RecordUpdBuf_1
   1358          					   {
   1359          								case BUF1_PLAY:
   1360          
   1361          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_2: (+1)
   \   00000040   0x8813             LDRH     R3,[R2, #+0]
   \   00000042   0x1C5C             ADDS     R4,R3,#+1
   \   00000044   0x8014             STRH     R4,[R2, #+0]
   \   00000046   0x.... 0x....      LDR.W    R2,??DataTable19_32  ;; 0xc00080a0
   \   0000004A   0xF9B0 0x400A      LDRSH    R4,[R0, #+10]
   \   0000004E   0xF822 0x4013      STRH     R4,[R2, R3, LSL #+1]
   1362          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   00000052   0x880B             LDRH     R3,[R1, #+0]
   \   00000054   0x1C5C             ADDS     R4,R3,#+1
   \   00000056   0x800C             STRH     R4,[R1, #+0]
   \   00000058   0xF9B0 0x100C      LDRSH    R1,[R0, #+12]
   \   0000005C   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   00000060   0xF241 0x0414      MOVW     R4,#+4116
   \   00000064   0x52E1             STRH     R1,[R4, R3]
   1363          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   00000066   0x....             LDR.N    R1,??DataTable17_2
   \   00000068   0x880B             LDRH     R3,[R1, #+0]
   \   0000006A   0x1C5C             ADDS     R4,R3,#+1
   \   0000006C   0x800C             STRH     R4,[R1, #+0]
   \   0000006E   0xF9B0 0x1010      LDRSH    R1,[R0, #+16]
   \   00000072   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   00000076   0xF242 0x0428      MOVW     R4,#+8232
   \   0000007A   0x52E1             STRH     R1,[R4, R3]
   1364          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable19
   \   00000080   0x880B             LDRH     R3,[R1, #+0]
   \   00000082   0x1C5C             ADDS     R4,R3,#+1
   \   00000084   0x800C             STRH     R4,[R1, #+0]
   \   00000086   0xF9B0 0x100E      LDRSH    R1,[R0, #+14]
   \   0000008A   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   0000008E   0xF243 0x043C      MOVW     R4,#+12348
   \   00000092   0x52E1             STRH     R1,[R4, R3]
   1365          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   00000094   0x....             LDR.N    R1,??DataTable18_4
   \   00000096   0x880B             LDRH     R3,[R1, #+0]
   \   00000098   0x1C5C             ADDS     R4,R3,#+1
   \   0000009A   0x800C             STRH     R4,[R1, #+0]
   \   0000009C   0xF9B0 0x1012      LDRSH    R1,[R0, #+18]
   \   000000A0   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000A4   0xF244 0x0450      MOVW     R4,#+16464
   \   000000A8   0x52E1             STRH     R1,[R4, R3]
   1366          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   000000AA   0x....             LDR.N    R1,??DataTable18_5
   \   000000AC   0x880B             LDRH     R3,[R1, #+0]
   \   000000AE   0x1C5C             ADDS     R4,R3,#+1
   \   000000B0   0x800C             STRH     R4,[R1, #+0]
   \   000000B2   0xF9B0 0x0014      LDRSH    R0,[R0, #+20]
   \   000000B6   0xEB02 0x0143      ADD      R1,R2,R3, LSL #+1
   \   000000BA   0xF245 0x0264      MOVW     R2,#+20580
   \   000000BE   0x5250             STRH     R0,[R2, R1]
   1367          	
   1368          										break;
   \   000000C0   0xE07D             B.N      ??RecordUpdBuf_1
   1369          								case BUF2_PLAY:
   1370          
   1371          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_4: (+1)
   \   000000C2   0x8813             LDRH     R3,[R2, #+0]
   \   000000C4   0x1C5C             ADDS     R4,R3,#+1
   \   000000C6   0x8014             STRH     R4,[R2, #+0]
   \   000000C8   0x....             LDR.N    R2,??DataTable19_1  ;; 0xc0010140
   \   000000CA   0xF9B0 0x400A      LDRSH    R4,[R0, #+10]
   \   000000CE   0xF822 0x4013      STRH     R4,[R2, R3, LSL #+1]
   1372          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   \   000000D2   0x880B             LDRH     R3,[R1, #+0]
   \   000000D4   0x1C5C             ADDS     R4,R3,#+1
   \   000000D6   0x800C             STRH     R4,[R1, #+0]
   \   000000D8   0xF9B0 0x100C      LDRSH    R1,[R0, #+12]
   \   000000DC   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000E0   0xF241 0x0414      MOVW     R4,#+4116
   \   000000E4   0x52E1             STRH     R1,[R4, R3]
   1373          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   000000E6   0x....             LDR.N    R1,??DataTable17_2
   \   000000E8   0x880B             LDRH     R3,[R1, #+0]
   \   000000EA   0x1C5C             ADDS     R4,R3,#+1
   \   000000EC   0x800C             STRH     R4,[R1, #+0]
   \   000000EE   0xF9B0 0x1010      LDRSH    R1,[R0, #+16]
   \   000000F2   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000F6   0xF242 0x0428      MOVW     R4,#+8232
   \   000000FA   0x52E1             STRH     R1,[R4, R3]
   1374          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   \   000000FC   0x....             LDR.N    R1,??DataTable19
   \   000000FE   0x880B             LDRH     R3,[R1, #+0]
   \   00000100   0x1C5C             ADDS     R4,R3,#+1
   \   00000102   0x800C             STRH     R4,[R1, #+0]
   \   00000104   0xF9B0 0x100E      LDRSH    R1,[R0, #+14]
   \   00000108   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   0000010C   0xF243 0x043C      MOVW     R4,#+12348
   \   00000110   0x52E1             STRH     R1,[R4, R3]
   1375          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   00000112   0x....             LDR.N    R1,??DataTable18_4
   \   00000114   0x880B             LDRH     R3,[R1, #+0]
   \   00000116   0x1C5C             ADDS     R4,R3,#+1
   \   00000118   0x800C             STRH     R4,[R1, #+0]
   \   0000011A   0xF9B0 0x1012      LDRSH    R1,[R0, #+18]
   \   0000011E   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   00000122   0xF244 0x0450      MOVW     R4,#+16464
   \   00000126   0x52E1             STRH     R1,[R4, R3]
   1376          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   \   00000128   0x....             LDR.N    R1,??DataTable18_5
   \   0000012A   0x880B             LDRH     R3,[R1, #+0]
   \   0000012C   0x1C5C             ADDS     R4,R3,#+1
   \   0000012E   0x800C             STRH     R4,[R1, #+0]
   \   00000130   0xF9B0 0x0014      LDRSH    R0,[R0, #+20]
   \   00000134   0xEB02 0x0143      ADD      R1,R2,R3, LSL #+1
   \   00000138   0xF245 0x0264      MOVW     R2,#+20580
   \   0000013C   0x5250             STRH     R0,[R2, R1]
   1377          		
   1378          
   1379          										break;
   \   0000013E   0xE03E             B.N      ??RecordUpdBuf_1
   1380          								case BUF3_PLAY:
   1381          
   1382          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_3: (+1)
   \   00000140   0x8813             LDRH     R3,[R2, #+0]
   \   00000142   0x1C5C             ADDS     R4,R3,#+1
   \   00000144   0x8014             STRH     R4,[R2, #+0]
   \   00000146   0xF04F 0x4240      MOV      R2,#-1073741824
   \   0000014A   0xF9B0 0x400A      LDRSH    R4,[R0, #+10]
   \   0000014E   0xF822 0x4013      STRH     R4,[R2, R3, LSL #+1]
   1383          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   00000152   0x880B             LDRH     R3,[R1, #+0]
   \   00000154   0x1C5C             ADDS     R4,R3,#+1
   \   00000156   0x800C             STRH     R4,[R1, #+0]
   \   00000158   0xF9B0 0x100C      LDRSH    R1,[R0, #+12]
   \   0000015C   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   00000160   0xF241 0x0414      MOVW     R4,#+4116
   \   00000164   0x52E1             STRH     R1,[R4, R3]
   1384          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   00000166   0x....             LDR.N    R1,??DataTable17_2
   \   00000168   0x880B             LDRH     R3,[R1, #+0]
   \   0000016A   0x1C5C             ADDS     R4,R3,#+1
   \   0000016C   0x800C             STRH     R4,[R1, #+0]
   \   0000016E   0xF9B0 0x1010      LDRSH    R1,[R0, #+16]
   \   00000172   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   00000176   0xF242 0x0428      MOVW     R4,#+8232
   \   0000017A   0x52E1             STRH     R1,[R4, R3]
   1385          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \   0000017C   0x....             LDR.N    R1,??DataTable19
   \   0000017E   0x880B             LDRH     R3,[R1, #+0]
   \   00000180   0x1C5C             ADDS     R4,R3,#+1
   \   00000182   0x800C             STRH     R4,[R1, #+0]
   \   00000184   0xF9B0 0x100E      LDRSH    R1,[R0, #+14]
   \   00000188   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   0000018C   0xF243 0x043C      MOVW     R4,#+12348
   \   00000190   0x52E1             STRH     R1,[R4, R3]
   1386          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   00000192   0x....             LDR.N    R1,??DataTable18_4
   \   00000194   0x880B             LDRH     R3,[R1, #+0]
   \   00000196   0x1C5C             ADDS     R4,R3,#+1
   \   00000198   0x800C             STRH     R4,[R1, #+0]
   \   0000019A   0xF9B0 0x1012      LDRSH    R1,[R0, #+18]
   \   0000019E   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000001A2   0xF244 0x0450      MOVW     R4,#+16464
   \   000001A6   0x52E1             STRH     R1,[R4, R3]
   1387          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   \   000001A8   0x....             LDR.N    R1,??DataTable18_5
   \   000001AA   0x880B             LDRH     R3,[R1, #+0]
   \   000001AC   0x1C5C             ADDS     R4,R3,#+1
   \   000001AE   0x800C             STRH     R4,[R1, #+0]
   \   000001B0   0xF9B0 0x0014      LDRSH    R0,[R0, #+20]
   \   000001B4   0xEB02 0x0143      ADD      R1,R2,R3, LSL #+1
   \   000001B8   0xF245 0x0264      MOVW     R2,#+20580
   \   000001BC   0x5250             STRH     R0,[R2, R1]
   1388          										break;
   1389          								default:
   1390          										break; 
   1391          					   }
   1392          				
   1393          				}
   1394                               
   1395               	}
   1396          }
   \                     ??RecordUpdBuf_1: (+1)
   \   000001BE   0xBC10             POP      {R4}
   \   000001C0   0x4770             BX       LR               ;; return
   \   000001C2                      REQUIRE Buffer2
   \   000001C2                      REQUIRE Buffer3
   \   000001C2                      REQUIRE Buffer1
   1397          
   1398          

   \                                 In section .text, align 2, keep-with-next
   1399          void DMA2_Stream5_IRQHandler(void)
   1400          {
   1401            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1402          
   1403            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1404            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_26
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1405            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1406          
   1407            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1408          }
   1409          
   1410          /**
   1411          * @brief This function handles DMA2 stream6 global interrupt.
   1412          */

   \                                 In section .text, align 2, keep-with-next
   1413          void DMA2_Stream6_IRQHandler(void)
   1414          {
   1415            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1416          
   1417            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1418            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_29
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1419            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1420          
   1421            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1422          }
   1423          

   \                                 In section .text, align 2, keep-with-next
   1424          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1425          {
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1426              if(hspi->Instance==SPI1)
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable19_16  ;; 0x40013000
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD01E             BEQ.N    ??HAL_SPI_RxCpltCallback_0
   1427              {
   1428                  /* Copy Data to Record Buffer */
   1429          		//RecordUpdBuf();
   1430          		//XferCplt = 1;
   1431                  //Audio_Play_Out();
   1432              }
   1433              else if (hspi->Instance==SPI2)
   \   0000000C   0x....             LDR.N    R1,??DataTable19_17  ;; 0x40003800
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xD01B             BEQ.N    ??HAL_SPI_RxCpltCallback_0
   1434              {
   1435          
   1436              }
   1437              else if (hspi->Instance==SPI4)
   \   00000012   0x....             LDR.N    R1,??DataTable18_3  ;; 0x40013400
   \   00000014   0x4288             CMP      R0,R1
   \   00000016   0xD018             BEQ.N    ??HAL_SPI_RxCpltCallback_0
   1438              {
   1439          
   1440              }
   1441              else if (hspi->Instance==SPI5)
   \   00000018   0x....             LDR.N    R1,??DataTable19_3  ;; 0x40015000
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD115             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1442              {
   1443                  swtSDO7^=0x01;
   \   0000001E   0x....             LDR.N    R0,??DataTable19_15
   \   00000020   0x7801             LDRB     R1,[R0, #+0]
   \   00000022   0xF081 0x0101      EOR      R1,R1,#0x1
   \   00000026   0x7001             STRB     R1,[R0, #+0]
   1444                  WaveRecord_flgSDO7Finish = 1;
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x7081             STRB     R1,[R0, #+2]
   1445                  if (swtSDO7==0x01)
   \   0000002C   0x....             LDR.N    R3,??DataTable19_2
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2801             CMP      R0,#+1
   \   00000032   0xF44F 0x5280      MOV      R2,#+4096
   \   00000036   0xD104             BNE.N    ??HAL_SPI_RxCpltCallback_1
   1446                  {
   1447                      HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   \   00000038   0x....             LDR.N    R1,??DataTable19_33
   \   0000003A   0x1D18             ADDS     R0,R3,#+4
   \   0000003C   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   \   00000040   0xE003             B.N      ??HAL_SPI_RxCpltCallback_0
   1448                  }
   1449                  else
   1450                  {
   1451                      HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??HAL_SPI_RxCpltCallback_1: (+1)
   \   00000042   0x....             LDR.N    R1,??DataTable19_11
   \   00000044   0x1D18             ADDS     R0,R3,#+4
   \   00000046   0x.... 0x....      BL       HAL_SPI_Receive_DMA
   1452                  }        
   1453              }
   1454              else
   1455              {
   1456                
   1457              }
   1458              
   1459              if (hspi->Instance==SPI6) //MIC8
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   0000004A   0x6820             LDR      R0,[R4, #+0]
   \   0000004C   0x....             LDR.N    R1,??DataTable19_9  ;; 0x40015400
   \   0000004E   0x4288             CMP      R0,R1
   \   00000050   0xD118             BNE.N    ??HAL_SPI_RxCpltCallback_2
   1460              {
   1461          #if 0							
   1462          
   1463              if (swtSDO8==0x01)
   1464             {
   1465                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1466             }
   1467             else
   1468             {
   1469          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1470             }      
   1471             AudioUSBSend(idxFrmPDMMic8++);
   1472          
   1473             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   1474             {
   1475                 swtSDO8^=0x01;
   1476                 WaveRecord_flgSDO8Finish = 1;
   1477                 idxFrmPDMMic8 = 0;
   1478          		RESET_IDX
   1479          		XferCplt = 0; // clear DMA interrupt flag
   1480          		switch (buffer_switch)
   1481          		{
   1482          	        case BUF1_PLAY: 		
   1483          	          buffer_switch = BUF3_PLAY;
   1484          	          break;
   1485          	        case BUF2_PLAY: 
   1486          	          buffer_switch = BUF1_PLAY;		
   1487          	          break;
   1488          	        case BUF3_PLAY: 	
   1489          	          buffer_switch = BUF2_PLAY;
   1490          	          break;
   1491          	        default:
   1492          	          break;
   1493          		}
   1494          
   1495          		/* Last player Frame is finished */
   1496          		AudioPlayerUpd(); 		
   1497          		
   1498          		if (cntStrt<100) cntStrt++;		   
   1499                  
   1500             }
   1501          
   1502          
   1503          #else
   1504              swtSDO8^=0x01;
   \   00000052   0x....             LDR.N    R0,??DataTable19_15
   \   00000054   0x7841             LDRB     R1,[R0, #+1]
   \   00000056   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000005A   0x7041             STRB     R1,[R0, #+1]
   1505              WaveRecord_flgSDO8Finish = 1;
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x70C1             STRB     R1,[R0, #+3]
   1506              if (swtSDO8==0x01)
   \   00000060   0x....             LDR.N    R3,??DataTable19_8
   \   00000062   0x7840             LDRB     R0,[R0, #+1]
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xF44F 0x5280      MOV      R2,#+4096
   \   0000006A   0xD105             BNE.N    ??HAL_SPI_RxCpltCallback_3
   1507              {
   1508                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   \   0000006C   0x....             LDR.N    R1,??DataTable19_34
   \   0000006E   0x1D18             ADDS     R0,R3,#+4
   \   00000070   0xE8BD 0x4010      POP      {R4,LR}
   \   00000074   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1509              }
   1510              else
   1511              {
   1512                  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   \                     ??HAL_SPI_RxCpltCallback_3: (+1)
   \   00000078   0x....             LDR.N    R1,??DataTable19_13
   \   0000007A   0x1D18             ADDS     R0,R3,#+4
   \   0000007C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000080   0x.... 0x....      B.W      HAL_SPI_Receive_DMA
   1513          
   1514              }
   1515          #endif
   1516          
   1517            }
   1518          }
   \                     ??HAL_SPI_RxCpltCallback_2: (+1)
   \   00000084   0xBD10             POP      {R4,PC}          ;; return
   1519          

   \                                 In section .text, align 2, keep-with-next
   1520          void PDM2PCMSDO78(void)
   1521          {
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   1522          /*-------------------------------------------------------------------------------------------------------------
   1523          			  
   1524          	Sequence  Record Data					  Processing Data				  Player Data
   1525          			  
   1526          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1527          			  
   1528          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1529          			  
   1530          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1531           ---------------------------------------------------------------------------------------------------------------*/
   1532          
   1533              /* Data in Mic7 finished recording */
   1534              if (WaveRecord_flgSDO7Finish==1)
   \   00000002   0x....             LDR.N    R4,??DataTable19_15
   \   00000004   0x78A0             LDRB     R0,[R4, #+2]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD15C             BNE.N    ??PDM2PCMSDO78_0
   1535              {
   1536                  WaveRecord_flgSDO7Finish=0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x70A0             STRB     R0,[R4, #+2]
   1537          
   1538          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   0000000E   0x4605             MOV      R5,R0
   \   00000010   0xE00A             B.N      ??PDM2PCMSDO78_1
   1539          		{
   1540          	            if(swtSDO7==0x01)
   1541          	            {
   1542          	                pDataMic7[i%64] = HTONS(TestSDO7[i]);
                 	                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   1543          	            }
   1544          	            else
   1545          	            {
   1546          	               pDataMic7[i%64] = HTONS(TestSDO7_1[i]);
                 	               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   1547          
   1548          	            }
   1549          
   1550          	            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1551          	            if (i%64==63)
   1552          	            {
   1553          	              /* Recording Audio Data */						 
   1554          	              switch (buffer_switch)
   1555          	              {
   1556          	                case BUF1_PLAY:								
   1557          	                      PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 150 ,
   1558          	                      (PDMFilter_InitStruct *)&Filter[0]);
   1559          	                      break;
   1560          	                case BUF2_PLAY:
   1561          	                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 150 ,
   1562          	                        (PDMFilter_InitStruct *)&Filter[0]);	
   1563          	                        break;
   1564          	                case BUF3_PLAY:
   1565          	                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 150 ,
   1566          	                        (PDMFilter_InitStruct *)&Filter[0]);									
   \                     ??PDM2PCMSDO78_2: (+1)
   \   00000012   0x....             LDR.N    R3,??DataTable19_5
   \   00000014   0x2296             MOVS     R2,#+150
   \   00000016   0x0149             LSLS     R1,R1,#+5
   \   00000018   0xF1A1 0x4180      SUB      R1,R1,#+1073741824
   \   0000001C   0xF501 0x41C0      ADD      R1,R1,#+24576
   \   00000020   0x3178             ADDS     R1,R1,#+120
   \   00000022   0x.... 0x....      BL       PDM_Filter_64_LSB
   1567          	                         break;
   \                     ??PDM2PCMSDO78_3: (+1)
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
   \                     ??PDM2PCMSDO78_1: (+1)
   \   00000028   0xF5B5 0x5F80      CMP      R5,#+4096
   \   0000002C   0xDA4A             BGE.N    ??PDM2PCMSDO78_0
   \   0000002E   0x....             LDR.N    R0,??DataTable19_10
   \   00000030   0x7821             LDRB     R1,[R4, #+0]
   \   00000032   0x2901             CMP      R1,#+1
   \   00000034   0xD110             BNE.N    ??PDM2PCMSDO78_4
   \   00000036   0x....             LDR.N    R1,??DataTable19_11
   \   00000038   0xF831 0x2015      LDRH     R2,[R1, R5, LSL #+1]
   \   0000003C   0xF831 0x1015      LDRH     R1,[R1, R5, LSL #+1]
   \   00000040   0x116B             ASRS     R3,R5,#+5
   \   00000042   0xEB05 0x6393      ADD      R3,R5,R3, LSR #+26
   \   00000046   0x119B             ASRS     R3,R3,#+6
   \   00000048   0xEBA5 0x1383      SUB      R3,R5,R3, LSL #+6
   \   0000004C   0x0209             LSLS     R1,R1,#+8
   \   0000004E   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   00000052   0xF820 0x1013      STRH     R1,[R0, R3, LSL #+1]
   \   00000056   0xE00F             B.N      ??PDM2PCMSDO78_5
   \                     ??PDM2PCMSDO78_4: (+1)
   \   00000058   0x....             LDR.N    R1,??DataTable19_33
   \   0000005A   0xF831 0x2015      LDRH     R2,[R1, R5, LSL #+1]
   \   0000005E   0xF831 0x1015      LDRH     R1,[R1, R5, LSL #+1]
   \   00000062   0x116B             ASRS     R3,R5,#+5
   \   00000064   0xEB05 0x6393      ADD      R3,R5,R3, LSR #+26
   \   00000068   0x119B             ASRS     R3,R3,#+6
   \   0000006A   0xEBA5 0x1383      SUB      R3,R5,R3, LSL #+6
   \   0000006E   0x0209             LSLS     R1,R1,#+8
   \   00000070   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   00000074   0xF820 0x1013      STRH     R1,[R0, R3, LSL #+1]
   \                     ??PDM2PCMSDO78_5: (+1)
   \   00000078   0x1169             ASRS     R1,R5,#+5
   \   0000007A   0xEB05 0x6191      ADD      R1,R5,R1, LSR #+26
   \   0000007E   0x1189             ASRS     R1,R1,#+6
   \   00000080   0xEBA5 0x1281      SUB      R2,R5,R1, LSL #+6
   \   00000084   0x2A3F             CMP      R2,#+63
   \   00000086   0xD1CE             BNE.N    ??PDM2PCMSDO78_3
   \   00000088   0x....             LDR.N    R2,??DataTable19_7
   \   0000008A   0x7812             LDRB     R2,[R2, #+0]
   \   0000008C   0x2A00             CMP      R2,#+0
   \   0000008E   0xD003             BEQ.N    ??PDM2PCMSDO78_6
   \   00000090   0x2A02             CMP      R2,#+2
   \   00000092   0xD0BE             BEQ.N    ??PDM2PCMSDO78_2
   \   00000094   0xD30B             BCC.N    ??PDM2PCMSDO78_7
   \   00000096   0xE7C6             B.N      ??PDM2PCMSDO78_3
   \                     ??PDM2PCMSDO78_6: (+1)
   \   00000098   0x....             LDR.N    R3,??DataTable19_5
   \   0000009A   0x2296             MOVS     R2,#+150
   \   0000009C   0x....             LDR.N    R6,??DataTable19_32  ;; 0xc00080a0
   \   0000009E   0xEB06 0x1141      ADD      R1,R6,R1, LSL #+5
   \   000000A2   0xF501 0x41C0      ADD      R1,R1,#+24576
   \   000000A6   0x3178             ADDS     R1,R1,#+120
   \   000000A8   0x.... 0x....      BL       PDM_Filter_64_LSB
   \   000000AC   0xE7BB             B.N      ??PDM2PCMSDO78_3
   \                     ??PDM2PCMSDO78_7: (+1)
   \   000000AE   0x....             LDR.N    R3,??DataTable19_5
   \   000000B0   0x2296             MOVS     R2,#+150
   \   000000B2   0x....             LDR.N    R6,??DataTable19_1  ;; 0xc0010140
   \   000000B4   0xEB06 0x1141      ADD      R1,R6,R1, LSL #+5
   \   000000B8   0xF501 0x41C0      ADD      R1,R1,#+24576
   \   000000BC   0x3178             ADDS     R1,R1,#+120
   \   000000BE   0x.... 0x....      BL       PDM_Filter_64_LSB
   \   000000C2   0xE7B0             B.N      ??PDM2PCMSDO78_3
   1568          	                default:
   1569          	                         break; 
   1570          	              }
   1571          		        }
   1572          	      }//if (WaveRecord_flgSDO7Finish==1)
   1573          
   1574          #if 0
   1575                      /* Recording Audio Data */						 
   1576          		    switch (buffer_switch)//buffer_switch
   1577          		    {
   1578          		        case BUF1_PLAY:								
   1579          					        /* Update for left-right channel */
   1580          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1581          			        {
   1582          	                    Buffer2.bufMIC7[2*i+1]=  Buffer2.bufMIC7[i];
   1583                                  Buffer2.bufMIC7[2*i] = Buffer2.bufMIC7[i];
   1584          			        }
   1585          					  Buffer2.bufMIC7[0] = Buffer2.bufMIC7[4];
   1586          					  Buffer2.bufMIC7[1] = Buffer2.bufMIC7[5];
   1587          					  Buffer2.bufMIC7[2] = Buffer2.bufMIC7[6];
   1588          					  Buffer2.bufMIC7[3] = Buffer2.bufMIC7[7];
   1589          			            break;
   1590          			     case BUF2_PLAY:
   1591          			        /* Update for left-right channel */
   1592          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1593          			        {				 	
   1594          		                Buffer3.bufMIC7[2*i+1]= Buffer3.bufMIC7[i];
   1595          		                Buffer3.bufMIC7[2*i]= Buffer3.bufMIC7[i];;	
   1596          			        }
   1597          					  Buffer3.bufMIC7[0] = Buffer3.bufMIC7[4];
   1598          					  Buffer3.bufMIC7[1] = Buffer3.bufMIC7[5];
   1599          					  Buffer3.bufMIC7[2] = Buffer3.bufMIC7[6];
   1600          					  Buffer3.bufMIC7[3] = Buffer3.bufMIC7[7];					
   1601          	                break;
   1602          	            case BUF3_PLAY:
   1603          			        /* Update for left-right channel */
   1604          			        for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1605          			        {					
   1606          	                    Buffer1.bufMIC7[2*i+1]= Buffer1.bufMIC7[i];
   1607          	                    Buffer1.bufMIC7[2*i]= Buffer1.bufMIC7[i];;	
   1608          			        }
   1609          					  Buffer1.bufMIC7[0] = Buffer1.bufMIC7[4];
   1610          					  Buffer1.bufMIC7[1] = Buffer1.bufMIC7[5];
   1611          					  Buffer1.bufMIC7[2] = Buffer1.bufMIC7[6];
   1612          					  Buffer1.bufMIC7[3] = Buffer1.bufMIC7[7];						
   1613          	                break;
   1614          	            default:
   1615          	                break; 
   1616          	        }
   1617          	    
   1618          #endif
   1619               }
   1620              
   1621          
   1622          	/* Data in Mic8 finished recording */
   1623          	if (WaveRecord_flgSDO8Finish==1)
   \                     ??PDM2PCMSDO78_0: (+1)
   \   000000C4   0x78E0             LDRB     R0,[R4, #+3]
   \   000000C6   0x2801             CMP      R0,#+1
   \   000000C8   0xD15C             BNE.N    ??PDM2PCMSDO78_8
   1624          	{
   1625          		WaveRecord_flgSDO8Finish=0;
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x70E0             STRB     R0,[R4, #+3]
   1626          		
   1627          		for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   000000CE   0x4605             MOV      R5,R0
   \   000000D0   0xE00A             B.N      ??PDM2PCMSDO78_9
   1628          		{
   1629                            if(swtSDO8==0x01)
   1630                            {
   1631                               pDataMic8[i%64] = HTONS(TestSDO8[i]);
                                      ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   1632                            }
   1633                            else
   1634                            {
   1635                               pDataMic8[i%64] = HTONS(TestSDO8_1[i]);
                                      ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   1636                            }
   1637          		
   1638                            /* PDM conversion for frame of 64 inputs, 16 outputs */
   1639                            if (i%64==63)
   1640                            {
   1641                                /* Recording Audio Data */						 
   1642                                switch (buffer_switch)
   1643                                {
   1644                                        case BUF1_PLAY: 							
   1645                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 150 ,
   1646                                                (PDMFilter_InitStruct *)&Filter[1]);
   1647                                                break;
   1648                                        case BUF2_PLAY:
   1649                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 150 ,
   1650                                                (PDMFilter_InitStruct *)&Filter[1]);	
   1651                                                break;
   1652                                        case BUF3_PLAY:
   1653                                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 150 ,
   1654                                                (PDMFilter_InitStruct *)&Filter[1]);									
   \                     ??PDM2PCMSDO78_10: (+1)
   \   000000D2   0x....             LDR.N    R3,??DataTable19_35
   \   000000D4   0x2296             MOVS     R2,#+150
   \   000000D6   0x0149             LSLS     R1,R1,#+5
   \   000000D8   0xF1A1 0x4180      SUB      R1,R1,#+1073741824
   \   000000DC   0xF501 0x41E0      ADD      R1,R1,#+28672
   \   000000E0   0x318C             ADDS     R1,R1,#+140
   \   000000E2   0x.... 0x....      BL       PDM_Filter_64_LSB
   1655                                                 break;
   \                     ??PDM2PCMSDO78_11: (+1)
   \   000000E6   0x1C6D             ADDS     R5,R5,#+1
   \                     ??PDM2PCMSDO78_9: (+1)
   \   000000E8   0xF5B5 0x5F80      CMP      R5,#+4096
   \   000000EC   0xDA4A             BGE.N    ??PDM2PCMSDO78_8
   \   000000EE   0x....             LDR.N    R0,??DataTable19_4
   \   000000F0   0x7861             LDRB     R1,[R4, #+1]
   \   000000F2   0x2901             CMP      R1,#+1
   \   000000F4   0xD110             BNE.N    ??PDM2PCMSDO78_12
   \   000000F6   0x....             LDR.N    R1,??DataTable19_13
   \   000000F8   0xF831 0x2015      LDRH     R2,[R1, R5, LSL #+1]
   \   000000FC   0xF831 0x1015      LDRH     R1,[R1, R5, LSL #+1]
   \   00000100   0x116B             ASRS     R3,R5,#+5
   \   00000102   0xEB05 0x6393      ADD      R3,R5,R3, LSR #+26
   \   00000106   0x119B             ASRS     R3,R3,#+6
   \   00000108   0xEBA5 0x1383      SUB      R3,R5,R3, LSL #+6
   \   0000010C   0x0209             LSLS     R1,R1,#+8
   \   0000010E   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   00000112   0xF820 0x1013      STRH     R1,[R0, R3, LSL #+1]
   \   00000116   0xE00F             B.N      ??PDM2PCMSDO78_13
   \                     ??PDM2PCMSDO78_12: (+1)
   \   00000118   0x....             LDR.N    R1,??DataTable19_34
   \   0000011A   0xF831 0x2015      LDRH     R2,[R1, R5, LSL #+1]
   \   0000011E   0xF831 0x1015      LDRH     R1,[R1, R5, LSL #+1]
   \   00000122   0x116B             ASRS     R3,R5,#+5
   \   00000124   0xEB05 0x6393      ADD      R3,R5,R3, LSR #+26
   \   00000128   0x119B             ASRS     R3,R3,#+6
   \   0000012A   0xEBA5 0x1383      SUB      R3,R5,R3, LSL #+6
   \   0000012E   0x0209             LSLS     R1,R1,#+8
   \   00000130   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   00000134   0xF820 0x1013      STRH     R1,[R0, R3, LSL #+1]
   \                     ??PDM2PCMSDO78_13: (+1)
   \   00000138   0x1169             ASRS     R1,R5,#+5
   \   0000013A   0xEB05 0x6191      ADD      R1,R5,R1, LSR #+26
   \   0000013E   0x1189             ASRS     R1,R1,#+6
   \   00000140   0xEBA5 0x1281      SUB      R2,R5,R1, LSL #+6
   \   00000144   0x2A3F             CMP      R2,#+63
   \   00000146   0xD1CE             BNE.N    ??PDM2PCMSDO78_11
   \   00000148   0x....             LDR.N    R2,??DataTable19_7
   \   0000014A   0x7812             LDRB     R2,[R2, #+0]
   \   0000014C   0x2A00             CMP      R2,#+0
   \   0000014E   0xD003             BEQ.N    ??PDM2PCMSDO78_14
   \   00000150   0x2A02             CMP      R2,#+2
   \   00000152   0xD0BE             BEQ.N    ??PDM2PCMSDO78_10
   \   00000154   0xD30B             BCC.N    ??PDM2PCMSDO78_15
   \   00000156   0xE7C6             B.N      ??PDM2PCMSDO78_11
   \                     ??PDM2PCMSDO78_14: (+1)
   \   00000158   0x....             LDR.N    R3,??DataTable19_35
   \   0000015A   0x2296             MOVS     R2,#+150
   \   0000015C   0x....             LDR.N    R6,??DataTable19_32  ;; 0xc00080a0
   \   0000015E   0xEB06 0x1141      ADD      R1,R6,R1, LSL #+5
   \   00000162   0xF501 0x41E0      ADD      R1,R1,#+28672
   \   00000166   0x318C             ADDS     R1,R1,#+140
   \   00000168   0x.... 0x....      BL       PDM_Filter_64_LSB
   \   0000016C   0xE7BB             B.N      ??PDM2PCMSDO78_11
   \                     ??PDM2PCMSDO78_15: (+1)
   \   0000016E   0x....             LDR.N    R3,??DataTable19_35
   \   00000170   0x2296             MOVS     R2,#+150
   \   00000172   0x....             LDR.N    R6,??DataTable19_1  ;; 0xc0010140
   \   00000174   0xEB06 0x1141      ADD      R1,R6,R1, LSL #+5
   \   00000178   0xF501 0x41E0      ADD      R1,R1,#+28672
   \   0000017C   0x318C             ADDS     R1,R1,#+140
   \   0000017E   0x.... 0x....      BL       PDM_Filter_64_LSB
   \   00000182   0xE7B0             B.N      ??PDM2PCMSDO78_11
   1656                                        default:
   1657                                                 break; 
   1658                                }		
   1659                             }					 
   1660          		}
   1661          #if 0                
   1662                    /* Recording Audio Data */						 
   1663                    switch (buffer_switch)
   1664                    {
   1665                        case BUF1_PLAY: 	
   1666                                /* Update for left-right channel */
   1667                                for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1668                                {
   1669                                    Buffer2.bufMIC8[2*i+1]=  Buffer2.bufMIC8[i];
   1670                                    Buffer2.bufMIC8[2*i] = Buffer2.bufMIC8[i];
   1671                                }
   1672          					  Buffer2.bufMIC8[0] = Buffer2.bufMIC8[4];
   1673          					  Buffer2.bufMIC8[1] = Buffer2.bufMIC8[5];
   1674          					  Buffer2.bufMIC8[2] = Buffer2.bufMIC8[6];
   1675          					  Buffer2.bufMIC8[3] = Buffer2.bufMIC8[7];
   1676                                break;
   1677                        case BUF2_PLAY:
   1678                                /* Update for left-right channel */
   1679                                for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1680                                {
   1681                                    Buffer3.bufMIC8[2*i+1]= Buffer3.bufMIC8[i];
   1682          						  Buffer3.bufMIC8[2*i]= Buffer3.bufMIC8[i];;	
   1683                                }
   1684            					  Buffer3.bufMIC8[0] = Buffer3.bufMIC8[4];
   1685          					  Buffer3.bufMIC8[1] = Buffer3.bufMIC8[5];
   1686          					  Buffer3.bufMIC8[2] = Buffer3.bufMIC8[6];
   1687          					  Buffer3.bufMIC8[3] = Buffer3.bufMIC8[7];
   1688                                break;
   1689                        case BUF3_PLAY:
   1690                              /* Update for left-right channel */
   1691                              for (int16_t i=AUDIO_OUT_BUFFER_SIZE-1; i>1;i--)
   1692                              {					
   1693                                  Buffer1.bufMIC8[2*i+1]= Buffer1.bufMIC8[i];
   1694                                  Buffer1.bufMIC8[2*i]= Buffer1.bufMIC8[i];
   1695                              }
   1696            					  Buffer1.bufMIC8[0] = Buffer1.bufMIC8[4];
   1697          					  Buffer1.bufMIC8[1] = Buffer1.bufMIC8[5];
   1698          					  Buffer1.bufMIC8[2] = Buffer1.bufMIC8[6];
   1699          					  Buffer1.bufMIC8[3] = Buffer1.bufMIC8[7];
   1700                              break;
   1701                        default:
   1702                              break; 
   1703                    }                
   1704          #endif		  
   1705             }//if (WaveRecord_flgSDO8Finish==1)
   1706          }
   \                     ??PDM2PCMSDO78_8: (+1)
   \   00000184   0xBD70             POP      {R4-R6,PC}       ;; return
   \   00000186                      REQUIRE Buffer2
   \   00000186                      REQUIRE Buffer3
   \   00000186                      REQUIRE Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x........         DC32     WaveRecord_flgInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     hi2s2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0xC0010140         DC32     0xc0010140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x........         DC32     idxMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \   00000000   0x........         DC32     pDataMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \   00000000   0x........         DC32     Filter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_6:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_7:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_8:
   \   00000000   0x........         DC32     idxMic7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_9:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_10:
   \   00000000   0x........         DC32     pDataMic7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_11:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_12:
   \   00000000   0x........         DC32     idxMic8+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_13:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_14:
   \   00000000   0x........         DC32     idxMic7+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_15:
   \   00000000   0x........         DC32     swtSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_16:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_17:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_18:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_19:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_20:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_21:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_22:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_23:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_24:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_25:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_26:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_27:
   \   00000000   0x40026488         DC32     0x40026488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_28:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_29:
   \   00000000   0x........         DC32     hdma_spi6_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_30:
   \   00000000   0x........         DC32     WaveRecord_flgInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_31:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_32:
   \   00000000   0xC00080A0         DC32     0xc00080a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_33:
   \   00000000   0x........         DC32     TestSDO7_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_34:
   \   00000000   0x........         DC32     TestSDO8_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_35:
   \   00000000   0x........         DC32     Filter+0x34
   1707          
   1708          
   1709          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DMA2_Stream5_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream6_IRQHandler
         0   -> HAL_DMA_IRQHandler
      40   HAL_SPI_MspInit
        40   -> HAL_DMA_DeInit
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
       8   HAL_SPI_RxCpltCallback
         0   -> HAL_SPI_Receive_DMA
         8   -> HAL_SPI_Receive_DMA
       8   I2S1_Init
         8   -> HAL_I2S_Init
       8   I2S2_Init
         8   -> HAL_I2S_Init
       8   MIC1TO6_Init
         8   -> HAL_GPIO_ReadPin
         8   -> I2S1_Init
         8   -> I2S2_Init
         8   -> SPI4_Init
         8   -> SPI5_Init
         0   -> SPI6_Init
       0   Mic7Rec
         0   -> SPI5_Init
       0   Mic8Rec
         0   -> SPI6_Init
      16   PDM2PCMSDO78
        16   -> PDM_Filter_64_LSB
       4   RecordUpdBuf
       8   SPI1_IRQHandler
         8   -> SPI_I2S_ReceiveData
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
      16   SPI2_IRQHandler
        16   -> HAL_GPIO_ReadPin
        16   -> SPI_I2S_ReceiveData
      16   SPI4_IRQHandler
        16   -> HAL_GPIO_ReadPin
        16   -> SPI_I2S_ReceiveData
       8   SPI4_Init
         8   -> HAL_SPI_Init
      16   SPI5_IRQHandler
        16   -> PDM_Filter_64_LSB
        16   -> SPI_I2S_ReceiveData
       8   SPI5_Init
         0   -> HAL_SPI_Init
         8   -> PDM_Filter_Init
      16   SPI6_IRQHandler
        16   -> PDM_Filter_64_LSB
        16   -> SPI_I2S_ReceiveData
       0   SPI6_Init
         0   -> HAL_SPI_Init
       0   SPI_I2S_ReceiveData
       0   SPI_I2S_SendData
       8   StartRecMic7_8
         8   -> HAL_SPI_Receive_DMA
      24   mySPI_SendData
         0   -> SPI_I2S_ReceiveData
        24   -> SPI_I2S_ReceiveData
        24   -> SPI_I2S_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_10
       4  ??DataTable19_11
       4  ??DataTable19_12
       4  ??DataTable19_13
       4  ??DataTable19_14
       4  ??DataTable19_15
       4  ??DataTable19_16
       4  ??DataTable19_17
       4  ??DataTable19_18
       4  ??DataTable19_19
       4  ??DataTable19_2
       4  ??DataTable19_20
       4  ??DataTable19_21
       4  ??DataTable19_22
       4  ??DataTable19_23
       4  ??DataTable19_24
       4  ??DataTable19_25
       4  ??DataTable19_26
       4  ??DataTable19_27
       4  ??DataTable19_28
       4  ??DataTable19_29
       4  ??DataTable19_3
       4  ??DataTable19_30
       4  ??DataTable19_31
       4  ??DataTable19_32
       4  ??DataTable19_33
       4  ??DataTable19_34
       4  ??DataTable19_35
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
   32928  Buffer1
   32928  Buffer2
   32928  Buffer3
       6  DMA2_Stream5_IRQHandler
       6  DMA2_Stream6_IRQHandler
     104  Filter
    1042  HAL_SPI_MspInit
     134  HAL_SPI_RxCpltCallback
      72  I2S1_Init
       2  I2S1_stNipple
       1  I2S1_stPosShft
      70  I2S2_Init
       1  I2S2_stPosShft
     100  MIC1TO6_Init
       2  Mic7Rec
       2  Mic8Rec
     390  PDM2PCMSDO78
     450  RecordUpdBuf
     236  SPI1_IRQHandler
     212  SPI1_Ini
     260  SPI2_IRQHandler
     298  SPI4_IRQHandler
      88  SPI4_Init
     132  SPI5_IRQHandler
     128  SPI5_Init
     136  SPI6_IRQHandler
      62  SPI6_Init
       6  SPI_I2S_ReceiveData
       4  SPI_I2S_SendData
      46  StartRecMic7_8
    8192  TestSDO12
    8192  TestSDO34
    8192  TestSDO56
    8192  TestSDO7
    8192  TestSDO7_1
    8192  TestSDO8
    8192  TestSDO8_1
       1  WaveRecord_flgIni
      92  WaveRecord_flgInt
          SPI4_stPosShft
          I2S2_stLR
          I2S2_stLROld
          stLROld
          Main_stLR
          Main_stLROld
          WaveRec_idxTest
          vRawSens1
          vRawSens2
          vRawSens4
          vRawSens3
          vRawSens5
          vRawSens6
          SPI1_stNipple
          I2S2_stNipple
          SPI4_stNipple
          hi2s1
       2  cntStrt
       2  cntTransFinish
      80  hdma_spi2_tx
      80  hdma_spi3_tx
      80  hdma_spi5_rx
      80  hdma_spi6_rx
      64  hi2s2
     100  hspi1
     100  hspi2
       2  iSDO12
       2  iSDO34
       2  iSDO56
       2  idxFrmPDMMic8
     108  idxMic7
          cntPos7
          hspi6
          bufPCMSens7
     108  idxMic8
          cntPos
          hspi5
          bufPCMSens8
      74  mySPI_SendData
     128  pDataMic7
     128  pDataMic8
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins
       4  swtSDO7
          swtSDO8
          WaveRecord_flgSDO7Finish
          WaveRecord_flgSDO8Finish

 
 58 893 bytes in section .bss
 98 784 bytes in section .bss  (abs)
  4 172 bytes in section .text
 
   4 172 bytes of CODE memory
 157 677 bytes of DATA memory

Errors: none
Warnings: 11
