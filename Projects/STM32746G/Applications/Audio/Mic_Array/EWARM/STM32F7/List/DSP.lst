###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       21/Jan/2016  18:08:40
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -Ohz --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\DSP.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\DSP.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c
      1          #include "DSP.h"

   \                                 In section .text, align 4
   \   __interwork __softfp int16_t ADD_S16(int16_t, int16_t)
   \                     ADD_S16: (+1)
   \   00000000   0x180A             ADDS     R2,R1,R0
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD408             BMI.N    ??ADD_S16_0
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD40D             BMI.N    ??ADD_S16_1
   \   0000000A   0xF647 0x73FF      MOVW     R3,#+32767
   \   0000000E   0x1A59             SUBS     R1,R3,R1
   \   00000010   0x4281             CMP      R1,R0
   \   00000012   0xDA08             BGE.N    ??ADD_S16_1
   \   00000014   0x461A             MOV      R2,R3
   \   00000016   0xE006             B.N      ??ADD_S16_1
   \                     ??ADD_S16_0: (+1)
   \   00000018   0x2900             CMP      R1,#+0
   \   0000001A   0xD504             BPL.N    ??ADD_S16_1
   \   0000001C   0x4B03             LDR.N    R3,??ADD_S16_2   ;; 0xffff8000
   \   0000001E   0x1A59             SUBS     R1,R3,R1
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xBFB8             IT       LT 
   \   00000024   0x461A             MOVLT    R2,R3
   \                     ??ADD_S16_1: (+1)
   \   00000026   0xB210             SXTH     R0,R2
   \   00000028   0x4770             BX       LR               ;; return
   \   0000002A   0xBF00             Nop      
   \                     ??ADD_S16_2:
   \   0000002C   0xFFFF8000         DC32     0xffff8000

   \                                 In section .text, align 4
   \   __interwork __softfp int16_t SUB_S16(int16_t, int16_t)
   \                     SUB_S16: (+1)
   \   00000000   0x1A42             SUBS     R2,R0,R1
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD408             BMI.N    ??SUB_S16_0
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD50D             BPL.N    ??SUB_S16_1
   \   0000000A   0xF647 0x73FF      MOVW     R3,#+32767
   \   0000000E   0x1859             ADDS     R1,R3,R1
   \   00000010   0x4281             CMP      R1,R0
   \   00000012   0xDA08             BGE.N    ??SUB_S16_1
   \   00000014   0x461A             MOV      R2,R3
   \   00000016   0xE006             B.N      ??SUB_S16_1
   \                     ??SUB_S16_0: (+1)
   \   00000018   0x2901             CMP      R1,#+1
   \   0000001A   0xDB04             BLT.N    ??SUB_S16_1
   \   0000001C   0xF5A1 0x4100      SUB      R1,R1,#+32768
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xBFB8             IT       LT 
   \   00000024   0x4A01             LDRLT.N  R2,??SUB_S16_2   ;; 0xffff8000
   \                     ??SUB_S16_1: (+1)
   \   00000026   0xB210             SXTH     R0,R2
   \   00000028   0x4770             BX       LR               ;; return
   \   0000002A   0xBF00             Nop      
   \                     ??SUB_S16_2:
   \   0000002C   0xFFFF8000         DC32     0xffff8000
      2          #include "main.h"
      3          #include <math.h>
      4          #include <stdlib.h>
      5          #include "arm_math.h"
      6          
      7          
      8          //#include <malloc.h>
      9          
     10          extern int16_t PreCalcBuff[129][256]; /* 1byte have 256 values */
     11          
     12          
     13          /* Manual calculation */
     14          //#define A0     10000
     15          //#define A1   (-19322)
     16          //#define A2   (9344)
     17          
     18          //#define B0   (6)
     19          //#define B1   2*B0
     20          //#define B2   B0
     21          
     22          //#define FLOATING_POINT
     23          
     24          
     25          /* ******************* MATLAB comuptation ***********************
     26          case 1: [b,a] = [b,a] = cheby2(2,60,1/32);
     27                 b	0.0010   -0.0020    0.0010
     28                 a	1.0000   -1.9938    0.9938
     29          case 2: [b,a] = butter(2,1/256); --> cut to 64Khz
     30                 b    3.73251989292944e-05	7.46503978585889e-05	3.73251989292944e-05
     31                 a    1	-1.98264541850412	0.982794719299834
     32          
     33          *****************************************************************/
     34          
     35          #ifdef FLOATING_POINT
     36          
     37            #define A0   (1)
     38            #define A1   (-1.9826)
     39            #define A2   0.9828
     40          
     41            #define B0   (3.7325e-05)                
     42            #define B1   (7.4650e-05)       
     43            #define B2   (3.7325e-05)                
     44          #else
     45            #define A0   (10000)
     46            #define A1   (-19322)
     47            #define A2   9322
     48          
     49            #define B0   (6)                
     50            #define B1   (12)       
     51            #define B2   (6) 
     52          
     53          #endif
     54          
     55          
     56          
     57          
     58          
     59          /*
     60          float Coef[129] = { 
     61          -0.02340  ,-0.06595  ,-0.02743  ,0.01425  ,-0.03335  ,-0.08782  ,-0.04168  ,0.01282  ,-0.05293  ,-0.13171 ,
     62          -0.06756  ,0.01115  ,-0.08598  ,-0.20323  ,-0.10855  ,0.00800  ,-0.13553  ,-0.30735  ,-0.16711  ,0.00362 ,
     63          -0.20339  ,-0.44812  ,-0.24434  ,0.00021  ,-0.28985  ,-0.62873  ,-0.33968  ,0.00256  ,-0.39350  ,-0.85181 ,
     64          -0.45087  ,0.01875  ,-0.51123  ,-1.12042  ,-0.57396  ,0.06130  ,-0.63834  ,-1.43986  ,-0.70359  ,0.14924 ,
     65          -0.76886  ,-1.82151  ,-0.83329  ,0.31292  ,-0.89598  ,-2.29113  ,-0.95603  ,0.60590  ,-1.01255  ,-2.90980 ,
     66          -1.06471  ,1.13962  ,-1.11170  ,-3.83936  ,-1.15280  ,2.21212  ,-1.18736  ,-5.63026  ,-1.21482  ,5.05728 ,
     67          -1.23477  ,-11.80705  ,-1.24686  ,30.58676  ,48.78572  ,30.58676  ,-1.24686  ,-11.80705  ,-1.23477  ,5.05728 ,
     68          -1.21482  ,-5.63026  ,-1.18736  ,2.21212  ,-1.15280  ,-3.83936  ,-1.11170  ,1.13962  ,-1.06471  ,-2.90980 ,
     69          -1.01255  ,0.60590  ,-0.95603  ,-2.29113  ,-0.89598  ,0.31292  ,-0.83329  ,-1.82151  ,-0.76886  ,0.14924 ,
     70          -0.70359  ,-1.43986  ,-0.63834  ,0.06130  ,-0.57396  ,-1.12042  ,-0.51123  ,0.01875  ,-0.45087  ,-0.85181 ,
     71          -0.39350  ,0.00256  ,-0.33968  ,-0.62873  ,-0.28985  ,0.00021  ,-0.24434  ,-0.44812  ,-0.20339  ,0.00362 ,
     72          -0.16711  ,-0.30735  ,-0.13553  ,0.00800  ,-0.10855  ,-0.20323  ,-0.08598  ,0.01115  ,-0.06756  ,-0.13171 ,
     73          -0.05293  ,0.01282  ,-0.04168  ,-0.08782  ,-0.03335  ,0.01425  ,-0.02743  ,-0.06595  ,-0.02340 };
     74          
     75          */
     76          /*
     77          int32_t Coef[129] = { 
     78          -234  ,-659  ,-274  ,142  ,-333  ,-878  ,-416  ,128  ,-529  ,-1317 ,
     79          -675  ,111  ,-859  ,-2032  ,-1085  ,80  ,-1355  ,-3073  ,-1671  ,36 ,
     80          -2033  ,-4481  ,-2443  ,2  ,-2898  ,-6287  ,-3396  ,25  ,-3935  ,-8518 ,
     81          -4508  ,187  ,-5112  ,-11204  ,-5739  ,612  ,-6383  ,-14398  ,-7035  ,1492 ,
     82          -7688  ,-18215  ,-8332  ,3129  ,-8959  ,-22911  ,-9560  ,6059  ,-10125  ,-29097 ,
     83          -10647  ,11396  ,-11117  ,-38393  ,-11527  ,22121  ,-11873  ,-56302  ,-12148  ,50572 ,
     84          -12347  ,-118070  ,-12468  ,305867  ,487857  ,305867  ,-12468  ,-118070  ,-12347  ,50572 ,
     85          -12148  ,-56302  ,-11873  ,22121  ,-11527  ,-38393  ,-11117  ,11396  ,-10647  ,-29097 ,
     86          -10125  ,6059  ,-9560  ,-22911  ,-8959  ,3129  ,-8332  ,-18215  ,-7688  ,1492 ,
     87          -7035  ,-14398  ,-6383  ,612  ,-5739  ,-11204  ,-5112  ,187  ,-4508  ,-8518 ,
     88          -3935  ,25  ,-3396  ,-6287  ,-2898  ,2  ,-2443  ,-4481  ,-2033  ,36 ,
     89          -1671  ,-3073  ,-1355  ,80  ,-1085  ,-2032  ,-859  ,111  ,-675  ,-1317 ,
     90          -529  ,128  ,-416  ,-878  ,-333  ,142  ,-274  ,-659  ,-234 };
     91          
     92          */
     93          
     94          
     95          
     96          /* 
     97          Library:
     98          https://github.com/piratfm/codec2_m4f/tree/master/lib
     99          */
    100          
    101          
    102          /*--------------EXTERN VARIABLES-----------------------------------------------------------------------------*/
    103          
    104          #if MAIN_CRSCORR
    105          extern arm_rfft_instance_q15 RealFFT_Ins, RealIFFT_Ins;
    106          #endif
    107          
    108          extern arm_cfft_radix4_instance_f32 SS1,SS2,SS3,SS4,ISS; 
    109          extern arm_rfft_instance_f32 S1,S2,S3,S4,IS;
    110          //extern arm_rfft_fast_instance_f32 S1,S2,S3,S4,IS;
    111          
    112          /*------------------------------------------------------------------------------------------------------------*/
    113          /*--------------------- VARIABLES-----------------------------------------------------------------------------*/
    114          

   \                                 In section .bss, align 4
    115          float bufferFFTSum[AUDIO_OUT_BUFFER_SIZE+100];  //storage the SUM in Furier domain
    116          float fbufferOut[AUDIO_OUT_BUFFER_SIZE+100];    //storage the output buffer in float type
    117          float fbuffer[AUDIO_OUT_BUFFER_SIZE+100];       //storage the input buffer in float type
    118          Mic_Array_Data_f  DataFFT;                  //storage DFT's coefficients for microphones
   \                     DataFFT:
   \   00000000                      DS8 24816
   \                     bufferFFTSum:
   \   000060F0                      DS8 4496
   \                     fbufferOut:
   \   00007280                      DS8 4496
   \                     fbuffer:
   \   00008410                      DS8 4496

   \                                 In section .bss, align 4
    119          uint32_t EnergySound;
   \                     EnergySound:
   \   00000000                      DS8 4
    120          /*------------------------------------------------------------------------------------------------------------*/
    121          /* Discreate Fourier Transform */

   \                                 In section .text, align 2, keep-with-next
    122          void DFT (float *x, float *Out, int N)
    123          {
   \                     DFT: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4683             MOV      R11,R0
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0xED2D 0x8B02      VPUSH    {D8}
   \   0000000C   0x4692             MOV      R10,R2
    124          	int m,n;
    125          	
    126          	for(m=0; m<N; m++)  // update for e very bar 
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0xE039             B.N      ??DFT_0
    127          	{
    128          		Out[2*m]  = Out[2*m+1] = 0;
    129          		
    130          		for (n  =0; n<N; n++) //
   \                     ??DFT_1: (+1)
   \   00000012   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_9: (+1)
   \   00000016   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_21: (+1)
   \   0000001A   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_4: (+1)
   \   0000001E   0xEE00 0x6A10      VMOV     S0,R6
   \   00000022   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_24: (+1)
   \   00000026   0x4642             MOV      R2,R8
   \   00000028   0x464B             MOV      R3,R9
   \   0000002A   0x.... 0x....      BL       __aeabi_dmul
   \   0000002E   0xEE00 0xAA10      VMOV     S0,R10
   \   00000032   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_25: (+1)
   \   00000036   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_15: (+1)
   \   0000003A   0x.... 0x....      BL       __aeabi_d2f
   \   0000003E   0xEE08 0x0A10      VMOV     S16,R0
   \   00000042   0xEEB0 0x0A48      VMOV.F32 S0,S16
    131          		{
    132          		    /* spectrum m: Real[m] = (Sum(x[n]*cos(2*PI*m*n/N)) , where n from 0 -->N    */
    133          			Out[2*m] += x[n]*arm_cos_f32(2*PI*(float)m*(float)n/(float)N);
   \   00000046   0x.... 0x....      BL       arm_cos_f32
   \   0000004A   0xEB0B 0x0086      ADD      R0,R11,R6, LSL #+2
   \   0000004E   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000052   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \   00000056   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   0000005A   0xEE00 0x1A80      VMLA.F32 S2,S1,S0
   \   0000005E   0xED80 0x1A00      VSTR     S2,[R0, #0]
    134          
    135                      /* specstrum n: Imagine[m] = (Sum(x[n]*sin(2*PI*m*n/N) ,  where n from 0 -->N */			
    136          			Out[2*m+1] -= x[n]*arm_sin_f32(2*PI*(float)m*(float)n/(float)N);
   \   00000062   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000066   0x.... 0x....      BL       arm_sin_f32
   \   0000006A   0xEB0B 0x0086      ADD      R0,R11,R6, LSL #+2
   \   0000006E   0xED97 0x1A01      VLDR     S2,[R7, #+4]
    137          		}
   \   00000072   0x1C76             ADDS     R6,R6,#+1
   \   00000074   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000078   0xEE00 0x1AC0      VMLS.F32 S2,S1,S0
   \   0000007C   0xED87 0x1A01      VSTR     S2,[R7, #+4]
   \                     ??DFT_2: (+1)
   \   00000080   0x4556             CMP      R6,R10
   \   00000082   0xDBC6             BLT.N    ??DFT_1
   \   00000084   0x1C6D             ADDS     R5,R5,#+1
   \                     ??DFT_0: (+1)
   \   00000086   0x4555             CMP      R5,R10
   \   00000088   0xDA07             BGE.N    ??DFT_3
   \   0000008A   0xEB04 0x07C5      ADD      R7,R4,R5, LSL #+3
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x2600             MOVS     R6,#+0
   \   00000092   0x6078             STR      R0,[R7, #+4]
   \   00000094   0xF844 0x0035      STR      R0,[R4, R5, LSL #+3]
   \   00000098   0xE7F2             B.N      ??DFT_2
    138          
    139          	}
    140          }
   \                     ??DFT_3: (+1)
   \   0000009A   0xECBD 0x8B02      VPOP     {D8}
   \   0000009E   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable13  ;; 0x5a7ed197
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable13_1  ;; 0x401921fb
   \   00000008   0x.... 0x....      B.W      __aeabi_dmul

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x4680             MOV      R8,R0
   \   00000002   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000006   0x4689             MOV      R9,R1
   \   00000008                      REQUIRE ??Subroutine10_0
   \   00000008                      ;; // Fall through to label ??Subroutine10_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine10_0: (+1)
   \   00000000   0xEE10 0x0A10      VMOV     R0,S0
   \   00000004   0x.... 0x....      B.W      __aeabi_f2d

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0xEE00 0x5A10      VMOV     S0,R5
   \   00000004   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0x4602             MOV      R2,R0
   \   00000002   0x460B             MOV      R3,R1
   \   00000004   0x4640             MOV      R0,R8
   \   00000006   0x4649             MOV      R1,R9
   \   00000008   0x.... 0x....      B.W      __aeabi_ddiv
    141          
    142          /* revert of Discrete Fourier Transform */

   \                                 In section .text, align 4, keep-with-next
    143          void rDFT(int N, int cycles, float *IN, float *out)
    144          {
   \                     rDFT: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4681             MOV      R9,R0
   \   00000006   0x468A             MOV      R10,R1
   \   00000008   0xED2D 0x8B04      VPUSH    {D8-D9}
    145              int n,m;
    146          	
    147              for (n= 0; n < N; n++)
   \   0000000C   0xEE00 0x9A10      VMOV     S0,R9
   \   00000010   0x4690             MOV      R8,R2
   \   00000012   0x469B             MOV      R11,R3
   \   00000014   0x2600             MOVS     R6,#+0
   \   00000016   0xEEB8 0x8AC0      VCVT.F32.S32 S16,S0
   \   0000001A   0xE060             B.N      ??rDFT_0
    148          	{
    149                  float xOfn, xOfn_m; // temporary variable for the imagine and real 
    150          		
    151          		xOfn = xOfn_m = 0;
    152          
    153          		for (m = 0; m < N; m++)
   \                     ??rDFT_1: (+1)
   \   0000001C   0x4650             MOV      R0,R10
   \   0000001E   0x.... 0x....      BL       __aeabi_i2d
   \   00000022   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000026   0xEE00 0x7A10      VMOV     S0,R7
   \   0000002A   0x4604             MOV      R4,R0
   \   0000002C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000030   0x460D             MOV      R5,R1
   \   00000032   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_22: (+1)
   \   00000036   0x4622             MOV      R2,R4
   \   00000038   0x462B             MOV      R3,R5
   \   0000003A   0x.... 0x....      BL       __aeabi_dmul
   \   0000003E   0xEE00 0x6A10      VMOV     S0,R6
   \   00000042   0x4604             MOV      R4,R0
   \   00000044   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000048   0x460D             MOV      R5,R1
   \   0000004A   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_23: (+1)
   \   0000004E   0x4622             MOV      R2,R4
   \   00000050   0x462B             MOV      R3,R5
   \   00000052   0x.... 0x....      BL       __aeabi_dmul
   \   00000056   0x4604             MOV      R4,R0
   \   00000058   0x460D             MOV      R5,R1
   \   0000005A   0xEE18 0x0A10      VMOV     R0,S16
   \   0000005E   0x.... 0x....      BL       __aeabi_f2d
   \   00000062   0x4602             MOV      R2,R0
   \   00000064   0x460B             MOV      R3,R1
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0x4629             MOV      R1,R5
   \   0000006A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000006E   0x.... 0x....      BL       __aeabi_d2f
   \   00000072   0xEE09 0x0A90      VMOV     S19,R0
   \   00000076   0xEB08 0x04C7      ADD      R4,R8,R7, LSL #+3
   \   0000007A   0xEEB0 0x0A69      VMOV.F32 S0,S19
    154          		{
    155          		    xOfn += IN[2*m]*arm_cos_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   0000007E   0x.... 0x....      BL       arm_cos_f32
   \   00000082   0xEB08 0x00C7      ADD      R0,R8,R7, LSL #+3
   \   00000086   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000008A   0xEE00 0x9A80      VMLA.F32 S18,S1,S0
    156          		    xOfn -= IN[2*m+1]*arm_sin_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   0000008E   0xEEB0 0x0A69      VMOV.F32 S0,S19
   \   00000092   0x.... 0x....      BL       arm_sin_f32
   \   00000096   0xEDD4 0x0A01      VLDR     S1,[R4, #+4]
   \   0000009A   0xEE00 0x9AC0      VMLS.F32 S18,S1,S0
    157          
    158                              xOfn_m += IN[2*m]*arm_cos_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   0000009E   0xEEB0 0x0A69      VMOV.F32 S0,S19
   \   000000A2   0x.... 0x....      BL       arm_cos_f32
   \   000000A6   0xEB08 0x00C7      ADD      R0,R8,R7, LSL #+3
    159                              xOfn_m += IN[2*m+1]*arm_sin_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   000000AA   0x1C7F             ADDS     R7,R7,#+1
   \   000000AC   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000B0   0xEE40 0x8A80      VMLA.F32 S17,S1,S0
   \   000000B4   0xEEB0 0x0A69      VMOV.F32 S0,S19
   \   000000B8   0x.... 0x....      BL       arm_sin_f32
   \   000000BC   0xEDD4 0x0A01      VLDR     S1,[R4, #+4]
   \   000000C0   0xEE40 0x8A80      VMLA.F32 S17,S1,S0
    160          		}
   \                     ??rDFT_2: (+1)
   \   000000C4   0x454F             CMP      R7,R9
   \   000000C6   0xDBA9             BLT.N    ??rDFT_1
    161          
    162          	    xOfn /= N;
    163          		xOfn_m /= N;
    164          
    165                  out[n] = xOfn + xOfn_m; 
   \   000000C8   0xEB0B 0x0086      ADD      R0,R11,R6, LSL #+2
   \   000000CC   0x1C76             ADDS     R6,R6,#+1
   \   000000CE   0xEE89 0x0A08      VDIV.F32 S0,S18,S16
   \   000000D2   0xEEC8 0x0A88      VDIV.F32 S1,S17,S16
   \   000000D6   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   000000DA   0xED80 0x0A00      VSTR     S0,[R0, #0]
   \                     ??rDFT_0: (+1)
   \   000000DE   0x454E             CMP      R6,R9
   \   000000E0   0xDA05             BGE.N    ??rDFT_3
   \   000000E2   0xEDDF 0x....      VLDR.W   S17,??DataTable7  ;; 0x0
   \   000000E6   0x2700             MOVS     R7,#+0
   \   000000E8   0xED9F 0x....      VLDR.W   S18,??DataTable7  ;; 0x0
   \   000000EC   0xE7EA             B.N      ??rDFT_2
    166          
    167          	}
    168          }
   \                     ??rDFT_3: (+1)
   \   000000EE   0xECBD 0x8B04      VPOP     {D8-D9}
   \   000000F2   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    169          
    170          /****************************** IIR filter *****************************************
    171          *a : point to a coefficiences
    172          AN: Number of a coefficiences
    173          *b : point to b coefficiences
    174          BN: Number of b coefficences
    175          *x: storage input and history of inputs
    176          *y: storage output and history of outpus
    177          index: position value in array of input and output
    178          
    179          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    180          void iirFilter(float* a, int AN, float* b, int BN, float* x, float* y, int index)
    181          {
   \                     iirFilter: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x9C06             LDR      R4,[SP, #+24]
    182              int loop;
    183          
    184              *(y+index) = 0;
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x9D07             LDR      R5,[SP, #+28]
    185              
    186              for (loop =0; loop < AN; loop++)
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0xF844 0x6025      STR      R6,[R4, R5, LSL #+2]
   \   0000000E   0x9E05             LDR      R6,[SP, #+20]
   \   00000010   0xE015             B.N      ??iirFilter_0
    187              {
    188                  if ((index -loop) >= 0)
   \                     ??iirFilter_1: (+1)
   \   00000012   0xEBB5 0x0C07      SUBS     R12,R5,R7
   \   00000016   0xD411             BMI.N    ??iirFilter_2
    189          		{
    190          		    *(y+index) += *(a+loop)**(x + index - loop);
   \   00000018   0xEB00 0x0C87      ADD      R12,R0,R7, LSL #+2
   \   0000001C   0xED9C 0x0A00      VLDR     S0,[R12, #0]
   \   00000020   0xEB06 0x0C85      ADD      R12,R6,R5, LSL #+2
   \   00000024   0xEBAC 0x0C87      SUB      R12,R12,R7, LSL #+2
   \   00000028   0xEDDC 0x0A00      VLDR     S1,[R12, #0]
   \   0000002C   0xEB04 0x0C85      ADD      R12,R4,R5, LSL #+2
   \   00000030   0xED9C 0x1A00      VLDR     S2,[R12, #0]
   \   00000034   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000038   0xED8C 0x1A00      VSTR     S2,[R12, #0]
    191          		}
    192              }
   \                     ??iirFilter_2: (+1)
   \   0000003C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??iirFilter_0: (+1)
   \   0000003E   0x428F             CMP      R7,R1
   \   00000040   0xDBE7             BLT.N    ??iirFilter_1
    193          
    194              for (loop = 1; loop <= BN; loop++)
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xE015             B.N      ??iirFilter_3
    195              {
    196                  if ((index-loop) >=0)
   \                     ??iirFilter_4: (+1)
   \   00000046   0x1A29             SUBS     R1,R5,R0
   \   00000048   0xD412             BMI.N    ??iirFilter_5
    197          		{
    198          		    *(y + index) +=  *(b + loop - 1)**(y+index-loop);
   \   0000004A   0xEB02 0x0180      ADD      R1,R2,R0, LSL #+2
   \   0000004E   0x1F09             SUBS     R1,R1,#+4
   \   00000050   0xED91 0x0A00      VLDR     S0,[R1, #0]
   \   00000054   0xEB04 0x0185      ADD      R1,R4,R5, LSL #+2
   \   00000058   0xEBA1 0x0180      SUB      R1,R1,R0, LSL #+2
   \   0000005C   0xEDD1 0x0A00      VLDR     S1,[R1, #0]
   \   00000060   0xEB04 0x0185      ADD      R1,R4,R5, LSL #+2
   \   00000064   0xED91 0x1A00      VLDR     S2,[R1, #0]
   \   00000068   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   0000006C   0xED81 0x1A00      VSTR     S2,[R1, #0]
    199          		}
    200              }	
   \                     ??iirFilter_5: (+1)
   \   00000070   0x1C40             ADDS     R0,R0,#+1
   \                     ??iirFilter_3: (+1)
   \   00000072   0x4283             CMP      R3,R0
   \   00000074   0xDAE7             BGE.N    ??iirFilter_4
    201          }
   \   00000076   0xBDF0             POP      {R4-R7,PC}       ;; return
    202          
    203          /** First Oder IIR Lowpass filter 
    204          *Input : input array
    205          *Output: output array
    206          size: number of elements need to update
    207          K: T/dT
    208             T is time constance
    209             dT duration of sampleing 
    210             K= 64
    211          
    212          *****************************8*/
    213          
    214          

   \                                 In section .text, align 2, keep-with-next
    215          void LowPass(int16_t *Input, int16_t *Output, uint16_t Size, uint16_t K)
    216          {
   \                     LowPass: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4680             MOV      R8,R0
    217              
    218              static	int16_t Out_Old;
    219          	int16_t Out=0;
   \   00000006   0x2000             MOVS     R0,#+0
    220          
    221          	for(uint16_t i=0; i<Size; i++)
   \   00000008   0x.... 0x....      LDR.W    R6,??DataTable13_2
   \   0000000C   0x460C             MOV      R4,R1
   \   0000000E   0x4691             MOV      R9,R2
   \   00000010   0x469A             MOV      R10,R3
   \   00000012   0x2500             MOVS     R5,#+0
   \   00000014   0x5E37             LDRSH    R7,[R6, R0]
   \   00000016   0xE008             B.N      ??LowPass_0
    222          	{
    223                  Out = ADD_S16(Out_Old,SUB_S16(*(Input+i), Out_Old)/K);
   \                     ??LowPass_1: (+1)
   \   00000018   0xF938 0x0015      LDRSH    R0,[R8, R5, LSL #+1]
   \   0000001C   0x4639             MOV      R1,R7
   \   0000001E   0x1C6D             ADDS     R5,R5,#+1
   \   00000020   0x.... 0x....      BL       SUB_S16
   \   00000024   0x.... 0x....      BL       ?Subroutine8
    224          		Out_Old = Out;
   \                     ??CrossCallReturnLabel_18: (+1)
   \   00000028   0x4607             MOV      R7,R0
    225          	}
   \                     ??LowPass_0: (+1)
   \   0000002A   0xB2AD             UXTH     R5,R5
   \   0000002C   0x454D             CMP      R5,R9
   \   0000002E   0xD3F3             BCC.N    ??LowPass_1
    226          
    227          	*Output = 30*Out;
   \   00000030   0x211E             MOVS     R1,#+30
   \   00000032   0x8037             STRH     R7,[R6, #+0]
   \   00000034   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   00000038   0x8020             STRH     R0,[R4, #+0]
    228          
    229          }
   \   0000003A   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \   00000000   0xFB90 0xF1FA      SDIV     R1,R0,R10
   \   00000004   0xB209             SXTH     R1,R1
   \   00000006   0x4638             MOV      R0,R7
   \   00000008   0x.... 0x....      B.W      ADD_S16

   \                                 In section .bss, align 2
   \                     ??Out_Old:
   \   00000000                      DS8 2
    230          
    231          #ifdef FLOATING_POINT
    232          void LowPass2ndOder(int16_t *Input, int16_t *Output, uint16_t Size)
    233          {
    234              double Out=0;
    235          	static  int16_t InOld, InOld1;
    236          	static	double Out_Old, Out_Old1;
    237                  uint16_t i;
    238          	 
    239              for(i=0; i<Size; i++)
    240          	{
    241          
    242           	
    243          	  if (i>0)
    244          	  {
    245          	    InOld1 = InOld;
    246          	  	InOld = Input[i-1];
    247          	  }
    248          	  	   
    249          
    250          	  	Out = (B0*Input[i]) + (B1*InOld) + (B2*InOld1)-(A1*Out_Old) - (A2*Out_Old1);
    251          	  
    252          	    Out_Old1 = Out_Old;
    253          		Out_Old = Out;
    254          	}
    255          
    256          	*Output = (int16_t)Out;
    257          
    258              InOld1 = InOld;
    259          	InOld = Input[i-1];
    260          
    261          
    262          
    263          }
    264          
    265          #else

   \                                 In section .text, align 2, keep-with-next
    266          void LowPass2ndOder(int16_t *Input, int16_t *Output, uint16_t Size)
    267          {
   \                     LowPass2ndOder: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
    268              int16_t Out=0;
    269          	static  int16_t InOld, InOld1;
    270          	static	int16_t Out_Old, Out_Old1;
    271                  uint16_t i;
    272          	 
    273              for(i=0; i<Size; i++)
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable13_3
   \   00000008   0xF04F 0x0E00      MOV      LR,#+0
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0xF9B4 0x8002      LDRSH    R8,[R4, #+2]
   \   00000012   0xF9B4 0xC000      LDRSH    R12,[R4, #+0]
   \   00000016   0xF9B4 0x5004      LDRSH    R5,[R4, #+4]
   \   0000001A   0xF9B4 0x6006      LDRSH    R6,[R4, #+6]
   \   0000001E   0xE020             B.N      ??LowPass2ndOder_0
    274          	{
    275          
    276           	
    277          	  if (i>0)
   \                     ??LowPass2ndOder_1: (+1)
   \   00000020   0xB113             CBZ.N    R3,??LowPass2ndOder_2
    278          	  {
    279          	    InOld1 = InOld;
   \   00000022   0x46E0             MOV      R8,R12
    280          	  	InOld = Input[i-1];
   \   00000024   0xF937 0xCC02      LDRSH    R12,[R7, #-2]
    281          	  }
    282          	  	   
    283          
    284          	  	Out = (int16_t)(((int32_t)(B0*Input[i]) + (int32_t)(B1*InOld) + (int32_t)(B2*InOld1)-(int32_t)(A1*Out_Old) - (int32_t)(A2*Out_Old1))/10000) ;
   \                     ??LowPass2ndOder_2: (+1)
   \   00000028   0xF930 0xE013      LDRSH    LR,[R0, R3, LSL #+1]
   \   0000002C   0xF04F 0x090C      MOV      R9,#+12
   \   00000030   0xFB1C 0xF909      SMULBB   R9,R12,R9
   \   00000034   0x2706             MOVS     R7,#+6
    285          	  
    286          	    Out_Old1 = Out_Old;
    287          		Out_Old = Out;
    288          	}
   \   00000036   0x1C5B             ADDS     R3,R3,#+1
   \   00000038   0x44C6             ADD      LR,R8,LR
   \   0000003A   0xFB07 0x9E0E      MLA      LR,R7,LR,R9
   \   0000003E   0x.... 0x....      LDR.W    R7,??DataTable13_4  ;; 0xffffb486
   \   00000042   0xFB15 0xF707      SMULBB   R7,R5,R7
   \   00000046   0xEBAE 0x0E07      SUB      LR,LR,R7
   \   0000004A   0xF242 0x476A      MOVW     R7,#+9322
   \   0000004E   0xFB16 0xF607      SMULBB   R6,R6,R7
   \   00000052   0xEBAE 0x0606      SUB      R6,LR,R6
   \   00000056   0xF242 0x7E10      MOVW     LR,#+10000
   \   0000005A   0xFB96 0xFEFE      SDIV     LR,R6,LR
   \   0000005E   0x462E             MOV      R6,R5
   \   00000060   0x4675             MOV      R5,LR
   \                     ??LowPass2ndOder_0: (+1)
   \   00000062   0x4293             CMP      R3,R2
   \   00000064   0xEB00 0x0743      ADD      R7,R0,R3, LSL #+1
   \   00000068   0xDBDA             BLT.N    ??LowPass2ndOder_1
   \   0000006A   0x....             B.N      ?Subroutine0
    289          
    290          	*Output = (int16_t)Out;
    291          
    292              InOld1 = InOld;
    293          	InOld = Input[i-1];
    294          
    295          
    296          
    297          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x80E6             STRH     R6,[R4, #+6]
   \   00000002   0x80A5             STRH     R5,[R4, #+4]
   \   00000004   0xF8A1 0xE000      STRH     LR,[R1, #+0]
   \   00000008   0xF8A4 0xC002      STRH     R12,[R4, #+2]
   \   0000000C   0xF837 0x0C02      LDRH     R0,[R7, #-2]
   \   00000010   0x8020             STRH     R0,[R4, #+0]
   \   00000012   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return

   \                                 In section .bss, align 2
   \                     ??InOld:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   00000004                      DS8 2
   \   00000006                      DS8 2
    298          
    299          #endif
    300          
    301          
    302          
    303          

   \                                 In section .text, align 2, keep-with-next
    304          void LowPass2ndOder_1(int16_t *Input, int16_t *Output, uint16_t Size)
    305          {
   \                     LowPass2ndOder_1: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
    306              int16_t Out=0;
    307          	static  int16_t InOld, InOld1;
    308          	static	int16_t Out_Old, Out_Old1;
    309                  uint16_t i;
    310          	 
    311              for(i=0; i<Size; i++)
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable13_5
   \   00000008   0xF04F 0x0E00      MOV      LR,#+0
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0xF9B4 0x8002      LDRSH    R8,[R4, #+2]
   \   00000012   0xF9B4 0xC000      LDRSH    R12,[R4, #+0]
   \   00000016   0xF9B4 0x5004      LDRSH    R5,[R4, #+4]
   \   0000001A   0xF9B4 0x6006      LDRSH    R6,[R4, #+6]
   \   0000001E   0xE020             B.N      ??LowPass2ndOder_1_0
    312          	{
    313          
    314           	
    315          	  if (i>0)
   \                     ??LowPass2ndOder_1_1: (+1)
   \   00000020   0xB113             CBZ.N    R3,??LowPass2ndOder_1_2
    316          	  {
    317          	    InOld1 = InOld;
   \   00000022   0x46E0             MOV      R8,R12
    318          	  	InOld = Input[i-1];
   \   00000024   0xF937 0xCC02      LDRSH    R12,[R7, #-2]
    319          	  } 
    320          	  	   
    321          
    322          	  	Out = (int16_t)(((int32_t)(B0*Input[i]) + (int32_t)(B1*InOld) + (int32_t)(B2*InOld1)-(int32_t)(A1*Out_Old) - (int32_t)(A2*Out_Old1))/1000) ; /* gain 10) */
   \                     ??LowPass2ndOder_1_2: (+1)
   \   00000028   0xF930 0xE013      LDRSH    LR,[R0, R3, LSL #+1]
   \   0000002C   0xF04F 0x090C      MOV      R9,#+12
   \   00000030   0xFB1C 0xF909      SMULBB   R9,R12,R9
   \   00000034   0x2706             MOVS     R7,#+6
    323          	  
    324          	    Out_Old1 = Out_Old;
    325          		Out_Old = Out;
    326          	}
   \   00000036   0x1C5B             ADDS     R3,R3,#+1
   \   00000038   0x44C6             ADD      LR,R8,LR
   \   0000003A   0xFB07 0x9E0E      MLA      LR,R7,LR,R9
   \   0000003E   0x.... 0x....      LDR.W    R7,??DataTable13_4  ;; 0xffffb486
   \   00000042   0xFB15 0xF707      SMULBB   R7,R5,R7
   \   00000046   0xEBAE 0x0E07      SUB      LR,LR,R7
   \   0000004A   0xF242 0x476A      MOVW     R7,#+9322
   \   0000004E   0xFB16 0xF607      SMULBB   R6,R6,R7
   \   00000052   0xEBAE 0x0606      SUB      R6,LR,R6
   \   00000056   0xF44F 0x7E7A      MOV      LR,#+1000
   \   0000005A   0xFB96 0xFEFE      SDIV     LR,R6,LR
   \   0000005E   0x462E             MOV      R6,R5
   \   00000060   0x4675             MOV      R5,LR
   \                     ??LowPass2ndOder_1_0: (+1)
   \   00000062   0x4293             CMP      R3,R2
   \   00000064   0xEB00 0x0743      ADD      R7,R0,R3, LSL #+1
   \   00000068   0xDBDA             BLT.N    ??LowPass2ndOder_1_1
   \   0000006A                      REQUIRE ?Subroutine0
   \   0000006A                      ;; // Fall through to label ?Subroutine0
    327          
    328          	*Output = (int16_t)Out;
    329          
    330              InOld1 = InOld;
    331          	InOld = Input[i-1];
    332          
    333          
    334          	
    335          }

   \                                 In section .bss, align 2
   \                     ??InOld_1:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   00000004                      DS8 2
   \   00000006                      DS8 2
    336          

   \                                 In section .text, align 2, keep-with-next
    337          void LowPassIIR(int16_t *Input, int16_t *Output, uint16_t Size, uint16_t K)
    338          {
   \                     LowPassIIR: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
    339              
    340              static	int16_t OutOld;
    341          
    342          	for(uint16_t i=0; i<Size; i++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x.... 0x....      LDR.W    R6,??DataTable13_6
   \   0000000A   0x4604             MOV      R4,R0
   \   0000000C   0x4688             MOV      R8,R1
   \   0000000E   0x4691             MOV      R9,R2
   \   00000010   0x469A             MOV      R10,R3
   \   00000012   0x5F77             LDRSH    R7,[R6, R5]
   \   00000014   0xE00A             B.N      ??LowPassIIR_0
    343          	{
    344                  *(Output+i) = ADD_S16(OutOld , SUB_S16(*(Input+i),OutOld)/(K));
   \                     ??LowPassIIR_1: (+1)
   \   00000016   0xF934 0x0015      LDRSH    R0,[R4, R5, LSL #+1]
   \   0000001A   0x4639             MOV      R1,R7
   \   0000001C   0x.... 0x....      BL       SUB_S16
   \   00000020   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_17: (+1)
   \   00000024   0x4607             MOV      R7,R0
   \   00000026   0xF828 0x7015      STRH     R7,[R8, R5, LSL #+1]
    345          		OutOld = *(Output+i);
    346          	}
   \   0000002A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LowPassIIR_0: (+1)
   \   0000002C   0x454D             CMP      R5,R9
   \   0000002E   0xDBF2             BLT.N    ??LowPassIIR_1
   \   00000030   0x8037             STRH     R7,[R6, #+0]
    347          }
   \   00000032   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return

   \                                 In section .bss, align 2
   \                     ??OutOld:
   \   00000000                      DS8 2
    348          
    349          

   \                                 In section .text, align 4, keep-with-next
    350          void Decimation(uint8_t *Input, int16_t *Output, int16_t PreCalcBuff[129][256]) //128 bytes input 32 bytes output
    351          {
   \                     Decimation: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xF5AD 0x7D01      SUB      SP,SP,#+516
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
    352              uint8_t test, IndexIn=0;
    353              int16_t Sigma;
    354          	static int16_t OutRing[129];
    355          	static int16_t iRing=0;
    356          //	static int32_t TempU32;
    357          	static float Data, Data_Old;
    358          	float Coef[129] = { 
    359          -0.000  ,-1.560  ,-2.990  ,-4.104  ,-4.722  ,-4.683  ,-3.880  ,-2.288  ,0.000  ,2.755 ,
    360          5.609  ,8.085  ,9.660  ,9.851  ,8.317  ,4.960  ,-0.000  ,-6.000  ,-12.166  ,-17.414 ,
    361          -20.614  ,-20.795  ,-17.350  ,-10.219  ,0.000  ,12.048  ,24.119  ,34.098  ,39.884  ,39.773 ,
    362          32.823  ,19.134  ,-0.000  ,-22.146  ,-43.977  ,-61.716  ,-71.720  ,-71.119  ,-58.413  ,-33.924 ,
    363          0.000  ,39.086  ,77.572  ,108.935  ,126.848  ,126.222  ,104.203  ,60.939  ,-0.000  ,-71.661 ,
    364          -144.245  ,-206.111  ,-245.139  ,-250.303  ,-213.240  ,-129.604  ,0.000  ,169.645  ,368.369  ,581.105 ,
    365          790.173  ,977.157  ,1124.942  ,1219.655  ,1252.270  ,1219.655  ,1124.942  ,977.157  ,790.173  ,581.105 ,
    366          368.369  ,169.645  ,0.000  ,-129.604  ,-213.240  ,-250.303  ,-245.139  ,-206.111  ,-144.245  ,-71.661 ,
    367          -0.000  ,60.939  ,104.203  ,126.222  ,126.848  ,108.935  ,77.572  ,39.086  ,0.000  ,-33.924 ,
    368          -58.413  ,-71.119  ,-71.720  ,-61.716  ,-43.977  ,-22.146  ,-0.000  ,19.134  ,32.823  ,39.773 ,
    369          39.884  ,34.098  ,24.119  ,12.048  ,0.000  ,-10.219  ,-17.350  ,-20.795  ,-20.614  ,-17.414 ,
    370          -12.166  ,-6.000  ,-0.000  ,4.960  ,8.317  ,9.851  ,9.660  ,8.085  ,5.609  ,2.755 ,
    371          0.000  ,-2.288  ,-3.880  ,-4.683  ,-4.722  ,-4.104  ,-2.990  ,-1.560  ,-0.000  };
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      ADR.W    R1,?_0
   \   00000010   0xF44F 0x7201      MOV      R2,#+516
   \   00000014   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000018   0x2600             MOVS     R6,#+0
    372          
    373          	for (uint8_t i=0;i<16; i++) //index of output sample 16 ouput
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable13_7
    374          	{
    375          
    376          	   Sigma = 0;
   \                     ??Decimation_0: (+1)
   \   00000020   0x2700             MOVS     R7,#+0
    377          	   
    378          
    379          	   for (uint8_t j=0; j<8; j++)  // load byte by byte from Input array 8
   \   00000022   0x2208             MOVS     R2,#+8
    380          	   {
    381          	       test = Input[IndexIn++];
   \                     ??Decimation_1: (+1)
   \   00000024   0xB2F6             UXTB     R6,R6
    382          		   
    383          		   for (uint8_t k=0; k<8; k++)  // this loop for 1 byte
   \   00000026   0xED91 0x0A42      VLDR     S0,[R1, #+264]
   \   0000002A   0xF04F 0x0C08      MOV      R12,#+8
   \   0000002E   0x5D33             LDRB     R3,[R6, R4]
   \   00000030   0x1C76             ADDS     R6,R6,#+1
    384          		   {
    385               			if ((test&0x01)==0x01)
   \                     ??Decimation_2: (+1)
   \   00000032   0xEA5F 0x7EC3      LSLS     LR,R3,#+31
    386               			{
    387               			    //Sigma +=2;
    388               			    Data = Data_Old + (100 - Data_Old)/200;	
    389               			}
    390               			else
    391               			{
    392               			    //Sigma -=2;
    393          					Data = Data_Old + (-100 - Data_Old)/200;		
   \   00000036   0xED9F 0x....      VLDR.W   S2,??DataTable9  ;; 0x43480000
   \   0000003A   0xBF4C             ITE      MI 
   \   0000003C   0xEDDF 0x....      VLDRMI.W S1,??DataTable9_1  ;; 0x42c80000
   \   00000040   0xEDDF 0x....      VLDRPL.W S1,??DataTable10  ;; 0xc2c80000
   \   00000044   0xEE70 0x0AC0      VSUB.F32 S1,S1,S0
    394               			}
    395          
    396          				Data_Old = Data;
    397          
    398          				Sigma += (int16_t)(Data); 
    399               
    400               			test >>= 1; /* go to next bit in "test" to convolution */
   \   00000048   0x085B             LSRS     R3,R3,#+1
   \   0000004A   0xEEC0 0x0A81      VDIV.F32 S1,S1,S2
   \   0000004E   0xEE30 0x0A80      VADD.F32 S0,S1,S0
    401          		   }
   \   00000052   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   00000056   0xEEFD 0x0AC0      VCVT.S32.F32 S1,S0
   \   0000005A   0xEE10 0xEA90      VMOV     LR,S1
   \   0000005E   0xFA07 0xF78E      SXTAH    R7,R7,LR
   \   00000062   0xD1E6             BNE.N    ??Decimation_2
    402          		   
    403          	   }
   \   00000064   0x1E52             SUBS     R2,R2,#+1
   \   00000066   0xED81 0x0A42      VSTR     S0,[R1, #+264]
   \   0000006A   0xD1DB             BNE.N    ??Decimation_1
    404          	   
    405          	   OutRing[iRing] = Sigma;
   \   0000006C   0x5E8A             LDRSH    R2,[R1, R2]
   \   0000006E   0xEB01 0x0342      ADD      R3,R1,R2, LSL #+1
   \   00000072   0x809F             STRH     R7,[R3, #+4]
    406          	   //if (OutRing[iRing] > 127)
    407          	   //{
    408                 //    OutRing[iRing] = 127;
    409          	   //}
    410          	   //else if (OutRing[iRing] < -128)
    411          	   //{
    412                 //    OutRing[iRing] = -128;
    413          	   //}
    414          	   //else
    415          	   //{
    416          	   //    ;
    417          	   //}
    418          	   
    419          
    420                 Output[i] = 0;
   \   00000074   0x2700             MOVS     R7,#+0
   \   00000076   0xF825 0x7010      STRH     R7,[R5, R0, LSL #+1]
    421          
    422             
    423                 for(int16_t ii=0; ii<129;ii++)
    424                 {
    425                     if (iRing >= ii)
   \                     ??Decimation_3: (+1)
   \   0000007A   0x42BA             CMP      R2,R7
   \   0000007C   0xF935 0xC010      LDRSH    R12,[R5, R0, LSL #+1]
   \   00000080   0xF85D 0xE027      LDR      LR,[SP, R7, LSL #+2]
   \   00000084   0xBFAE             ITEE     GE 
   \   00000086   0x1BD3             SUBGE    R3,R2,R7
   \   00000088   0xF102 0x0381      ADDLT    R3,R2,#+129
   \   0000008C   0x1BDB             SUBLT    R3,R3,R7
    426                         Output[i] = Output[i] + (int16_t)(OutRing[iRing - ii]*Coef[ii]);//PreCalcBuff[ii][(OutRing[iRing - ii]+128)]; //(OutRing[iRing - ii]*Coef[ii])
    427                     else
    428                         Output[i] = Output[i] + (int16_t)(OutRing[129 + iRing - ii]*Coef[ii]);//PreCalcBuff[ii][(OutRing[129 + iRing - ii]+128)];  // (OutRing[129 + iRing - ii]*Coef[ii])
   \   0000008E   0xEB01 0x0343      ADD      R3,R1,R3, LSL #+1
   \   00000092   0xEE00 0xEA10      VMOV     S0,LR
    429          		  	   
    430                 }
   \   00000096   0x1C7F             ADDS     R7,R7,#+1
   \   00000098   0x2F81             CMP      R7,#+129
   \   0000009A   0xF9B3 0xE004      LDRSH    LR,[R3, #+4]
   \   0000009E   0xEE00 0xEA90      VMOV     S1,LR
   \   000000A2   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   000000A6   0xEE20 0x0A80      VMUL.F32 S0,S1,S0
   \   000000AA   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000AE   0xEE10 0xEA10      VMOV     LR,S0
   \   000000B2   0x44F4             ADD      R12,LR,R12
   \   000000B4   0xF825 0xC010      STRH     R12,[R5, R0, LSL #+1]
   \   000000B8   0xDBDF             BLT.N    ??Decimation_3
    431                 
    432          	   
    433                 iRing++;             
   \   000000BA   0x1C52             ADDS     R2,R2,#+1
    434                 if (iRing==129) iRing = 0;  
   \   000000BC   0xB212             SXTH     R2,R2
   \   000000BE   0x2A81             CMP      R2,#+129
   \   000000C0   0xBF08             IT       EQ 
   \   000000C2   0x2200             MOVEQ    R2,#+0
    435          
    436          	}
   \   000000C4   0x1C40             ADDS     R0,R0,#+1
   \   000000C6   0x2810             CMP      R0,#+16
   \   000000C8   0x800A             STRH     R2,[R1, #+0]
   \   000000CA   0xDBA9             BLT.N    ??Decimation_0
    437          }
   \   000000CC   0xF50D 0x7D01      ADD      SP,SP,#+516
   \   000000D0   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??iRing:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   00000004                      DS8 260
   \   00000108                      DS8 4

   \                                 In section .bss, align 4
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x80000000         DC32 80000000H, 0BFC7AE14H, 0C03F5C29H, 0C08353F8H, 0C0971AA0H
   \              0xBFC7AE14   
   \              0xC03F5C29   
   \              0xC08353F8   
   \              0xC0971AA0   
   \   00000014   0xC095DB23         DC32 0C095DB23H, 0C07851ECH, 0C0126E98H, 0H, 403051ECH, 40B37CEEH
   \              0xC07851EC   
   \              0xC0126E98   
   \              0x00000000   
   \              0x403051EC   
   \              0x40B37CEE   
   \   0000002C   0x41015C29         DC32 41015C29H, 411A8F5CH, 411D9DB2H, 4105126FH, 409EB852H, 80000000H
   \              0x411A8F5C   
   \              0x411D9DB2   
   \              0x4105126F   
   \              0x409EB852   
   \              0x80000000   
   \   00000044   0xC0C00000         DC32 0C0C00000H, 0C142A7F0H, 0C18B4FDFH, 0C1A4E979H, 0C1A65C29H
   \              0xC142A7F0   
   \              0xC18B4FDF   
   \              0xC1A4E979   
   \              0xC1A65C29   
   \   00000058   0xC18ACCCD         DC32 0C18ACCCDH, 0C1238106H, 0H, 4140C49CH, 41C0F3B6H, 4208645AH
   \              0xC1238106   
   \              0x00000000   
   \              0x4140C49C   
   \              0x41C0F3B6   
   \              0x4208645A   
   \   00000070   0x421F8937         DC32 421F8937H, 421F178DH, 42034AC1H, 4199126FH, 80000000H, 0C1B12B02H
   \              0x421F178D   
   \              0x42034AC1   
   \              0x4199126F   
   \              0x80000000   
   \              0xC1B12B02   
   \   00000088   0xC22FE873         DC32 0C22FE873H, 0C276DD2FH, 0C28F70A4H, 0C28E3CEEH, 0C269A6E9H
   \              0xC276DD2F   
   \              0xC28F70A4   
   \              0xC28E3CEE   
   \              0xC269A6E9   
   \   0000009C   0xC207B22D         DC32 0C207B22DH, 0H, 421C5810H, 429B24DDH, 42D9DEB8H, 42FDB22DH
   \              0x00000000   
   \              0x421C5810   
   \              0x429B24DD   
   \              0x42D9DEB8   
   \              0x42FDB22D   
   \   000000B4   0x42FC71AA         DC32 42FC71AAH, 42D067F0H, 4273C189H, 80000000H, 0C28F526FH, 0C3103EB8H
   \              0x42D067F0   
   \              0x4273C189   
   \              0x80000000   
   \              0xC28F526F   
   \              0xC3103EB8   
   \   000000CC   0xC34E1C6A         DC32 0C34E1C6AH, 0C3752396H, 0C37A4D91H, 0C3553D71H, 0C3019AA0H, 0H
   \              0xC3752396   
   \              0xC37A4D91   
   \              0xC3553D71   
   \              0xC3019AA0   
   \              0x00000000   
   \   000000E4   0x4329A51F         DC32 4329A51FH, 43B82F3BH, 441146B8H, 44458B12H, 44744A0CH, 448C9E25H
   \              0x43B82F3B   
   \              0x441146B8   
   \              0x44458B12   
   \              0x44744A0C   
   \              0x448C9E25   
   \   000000FC   0x449874F6         DC32 449874F6H, 449C88A4H, 449874F6H, 448C9E25H, 44744A0CH, 44458B12H
   \              0x449C88A4   
   \              0x449874F6   
   \              0x448C9E25   
   \              0x44744A0C   
   \              0x44458B12   
   \   00000114   0x441146B8         DC32 441146B8H, 43B82F3BH, 4329A51FH, 0H, 0C3019AA0H, 0C3553D71H
   \              0x43B82F3B   
   \              0x4329A51F   
   \              0x00000000   
   \              0xC3019AA0   
   \              0xC3553D71   
   \   0000012C   0xC37A4D91         DC32 0C37A4D91H, 0C3752396H, 0C34E1C6AH, 0C3103EB8H, 0C28F526FH
   \              0xC3752396   
   \              0xC34E1C6A   
   \              0xC3103EB8   
   \              0xC28F526F   
   \   00000140   0x80000000         DC32 80000000H, 4273C189H, 42D067F0H, 42FC71AAH, 42FDB22DH, 42D9DEB8H
   \              0x4273C189   
   \              0x42D067F0   
   \              0x42FC71AA   
   \              0x42FDB22D   
   \              0x42D9DEB8   
   \   00000158   0x429B24DD         DC32 429B24DDH, 421C5810H, 0H, 0C207B22DH, 0C269A6E9H, 0C28E3CEEH
   \              0x421C5810   
   \              0x00000000   
   \              0xC207B22D   
   \              0xC269A6E9   
   \              0xC28E3CEE   
   \   00000170   0xC28F70A4         DC32 0C28F70A4H, 0C276DD2FH, 0C22FE873H, 0C1B12B02H, 80000000H
   \              0xC276DD2F   
   \              0xC22FE873   
   \              0xC1B12B02   
   \              0x80000000   
   \   00000184   0x4199126F         DC32 4199126FH, 42034AC1H, 421F178DH, 421F8937H, 4208645AH, 41C0F3B6H
   \              0x42034AC1   
   \              0x421F178D   
   \              0x421F8937   
   \              0x4208645A   
   \              0x41C0F3B6   
   \   0000019C   0x4140C49C         DC32 4140C49CH, 0H, 0C1238106H, 0C18ACCCDH, 0C1A65C29H, 0C1A4E979H
   \              0x00000000   
   \              0xC1238106   
   \              0xC18ACCCD   
   \              0xC1A65C29   
   \              0xC1A4E979   
   \   000001B4   0xC18B4FDF         DC32 0C18B4FDFH, 0C142A7F0H, 0C0C00000H, 80000000H, 409EB852H
   \              0xC142A7F0   
   \              0xC0C00000   
   \              0x80000000   
   \              0x409EB852   
   \   000001C8   0x4105126F         DC32 4105126FH, 411D9DB2H, 411A8F5CH, 41015C29H, 40B37CEEH, 403051ECH
   \              0x411D9DB2   
   \              0x411A8F5C   
   \              0x41015C29   
   \              0x40B37CEE   
   \              0x403051EC   
   \   000001E0   0x00000000         DC32 0H, 0C0126E98H, 0C07851ECH, 0C095DB23H, 0C0971AA0H, 0C08353F8H
   \              0xC0126E98   
   \              0xC07851EC   
   \              0xC095DB23   
   \              0xC0971AA0   
   \              0xC08353F8   
   \   000001F8   0xC03F5C29         DC32 0C03F5C29H, 0BFC7AE14H, 80000000H
   \              0xBFC7AE14   
   \              0x80000000   
    438          
    439          
    440          

   \                                 In section .text, align 2, keep-with-next
    441          void Window(float *fir64Coff)
    442          {
   \                     Window: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    443              for (int i = 0; i < DSP_NUMCOFF; i++) //DSP_NUMCOFF
   \   00000004   0x2500             MOVS     R5,#+0
    444          	{
    445                  //fir64Coff[i] = (double_t)((1 << 10)-1);
    446                  fir64Coff[i] = (float)(1000);
    447          		//Hanning Window (less noise than hamming?
    448                  fir64Coff[i] *= 0.5f * (
    449          		                       1.0f - cos((2.0f * PI * i)/ (DSP_NUMCOFF - 1.0f))  
    450          		                      );
   \                     ??Window_0: (+1)
   \   00000006   0x4628             MOV      R0,R5
   \   00000008   0x.... 0x....      BL       __aeabi_i2d
   \   0000000C   0x.... 0x....      BL       ?Subroutine3
    451          
    452                  //Hamming Window
    453                  //fir64Coff[i] *= 0.54 - 0.46 * cos((2 * M_PI * i) / (64 - 1));
    454                      
    455                  //Nuttall Window
    456                  //fir64Coff[i] *= 0.355768f - 0.487396*cos((2*M_PI*i)/(64 -1)) + 0.144232*cos((4*M_PI*i)/(64-1))-0.012604*cos((6*M_PI*i)/(64-1));
    457            
    458                  //Cosine Window
    459                  //fir64Coff[i] *= sin((M_PI * i)/(64-1));
    460          
    461                  //Blackman Harris            
    462                  //float w = (2 * M_PI * i) / 64;
    463                  //fir64Coff[i] *= 0.422323 - 0.49755 * cos(w) + 0.07922 * cos(2 * w);
    464              }
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x.... 0x....      LDR.W    R3,??DataTable13_8  ;; 0x404f8000
   \   00000016   0x.... 0x....      BL       __aeabi_ddiv
   \   0000001A   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       __iar_Sin
   \   00000024   0xEC53 0x2B10      VMOV     R2,R3,D0
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable13_9  ;; 0x3ff00000
   \   0000002E   0x.... 0x....      BL       __aeabi_dsub
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x.... 0x....      LDR.W    R3,??DataTable13_10  ;; 0x3fe00000
   \   00000038   0x.... 0x....      BL       __aeabi_dmul
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x.... 0x....      LDR.W    R3,??DataTable13_11  ;; 0x408f4000
   \   00000042   0x.... 0x....      BL       __aeabi_dmul
   \   00000046   0x.... 0x....      BL       __aeabi_d2f
   \   0000004A   0xF844 0x0025      STR      R0,[R4, R5, LSL #+2]
   \   0000004E   0x1C6D             ADDS     R5,R5,#+1
   \   00000050   0x2D40             CMP      R5,#+64
   \   00000052   0xDBD8             BLT.N    ??Window_0
    465          	 //fir64Coff[DSP_NUMCOFF-1] = 0;
    466          }
   \   00000054   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    467          
    468          /*
    469          Wikimedia: PDM algorithm
    470          y[n] = x[n] + e[n] - e[n-1]     --> +/-1 only
    471          
    472          e[n] = y[n] - x[n] + e[n-1]
    473          
    474          y[n]     output sample 
    475          e[n]     error 
    476          e[n-1]   preivous error
    477          
    478          */

   \                                 In section .text, align 2, keep-with-next
    479          void PCM2PDM (int16_t *InBuff, int16_t *OutBuff, int16_t size, float *err)
    480          {		
   \                     PCM2PDM: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    481          	for (int16_t i =0; i< size; i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE012             B.N      ??PCM2PDM_0
    482          	{
    483          		if (i==0)
    484          		{
    485          		    if (InBuff[i] > 0)
    486          	            OutBuff[i] = 1;
    487          		    else
    488          			    OutBuff[i] = 0; // "-1" is replace by "0"	
    489          			err[0] = OutBuff[i] - InBuff[i];
    490          		}
    491          		else
    492          		{
    493          			if (InBuff[i] > err[i-1])
    494          				OutBuff[i] = 1;
    495          			else
    496          				OutBuff[i] = 0; // "-1" is replace by "0"
   \                     ??PCM2PDM_1: (+1)
   \   00000006   0xF821 0x5014      STRH     R5,[R1, R4, LSL #+1]
    497          			err[i] = OutBuff[i] - InBuff[i] + err[i-1];
   \   0000000A   0xF931 0x5014      LDRSH    R5,[R1, R4, LSL #+1]
   \   0000000E   0xF930 0x7014      LDRSH    R7,[R0, R4, LSL #+1]
   \   00000012   0x1BED             SUBS     R5,R5,R7
   \   00000014   0xEE00 0x5A10      VMOV     S0,R5
   \   00000018   0x1F35             SUBS     R5,R6,#+4
   \   0000001A   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_12: (+1)
   \   0000001E   0xEB03 0x0584      ADD      R5,R3,R4, LSL #+2
   \   00000022   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000026   0xED85 0x0A00      VSTR     S0,[R5, #0]
   \                     ??PCM2PDM_2: (+1)
   \   0000002A   0x1C64             ADDS     R4,R4,#+1
   \                     ??PCM2PDM_0: (+1)
   \   0000002C   0x4294             CMP      R4,R2
   \   0000002E   0xDA1E             BGE.N    ??PCM2PDM_3
   \   00000030   0xF9B0 0x5000      LDRSH    R5,[R0, #+0]
   \   00000034   0xB964             CBNZ.N   R4,??PCM2PDM_4
   \   00000036   0x2D01             CMP      R5,#+1
   \   00000038   0xBFAC             ITE      GE 
   \   0000003A   0x2501             MOVGE    R5,#+1
   \   0000003C   0x2500             MOVLT    R5,#+0
   \   0000003E   0x800D             STRH     R5,[R1, #+0]
   \   00000040   0x5F0D             LDRSH    R5,[R1, R4]
   \   00000042   0x5F06             LDRSH    R6,[R0, R4]
   \   00000044   0x1BAD             SUBS     R5,R5,R6
   \   00000046   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_10: (+1)
   \   0000004A   0xED83 0x0A00      VSTR     S0,[R3, #0]
   \   0000004E   0xE7EC             B.N      ??PCM2PDM_2
   \                     ??PCM2PDM_4: (+1)
   \   00000050   0xEB03 0x0684      ADD      R6,R3,R4, LSL #+2
   \   00000054   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_11: (+1)
   \   00000058   0x1F35             SUBS     R5,R6,#+4
   \   0000005A   0xEDD5 0x0A00      VLDR     S1,[R5, #0]
   \   0000005E   0xEEF4 0x0A40      VCMP.F32 S1,S0
   \   00000062   0xEEF1 0xFA10      FMSTAT   
   \   00000066   0xBF4C             ITE      MI 
   \   00000068   0x2501             MOVMI    R5,#+1
   \   0000006A   0x2500             MOVPL    R5,#+0
   \   0000006C   0xE7CB             B.N      ??PCM2PDM_1
    498          		}
    499          	}	
    500          }
   \                     ??PCM2PDM_3: (+1)
   \   0000006E   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000004   0xEDD5 0x0A00      VLDR     S1,[R5, #0]
   \   00000008   0x4770             BX       LR
    501          
    502          /*
    503          PDM = Pulse Density Modulation
    504          PCM - Pulse Code Modulation
    505          convertion from PDM to PCM
    506          http://www.gamedev.net/topic/660509-any-dsp-gurus-pdm-to-pcm-noisealiasingspectral-leakage-problem/
    507          
    508          http://curiouser.cheshireeng.com/2014/11/04/using-a-pdm-microphone/
    509          
    510          https://www.das-labor.org/svn/microcontroller/src-stm32f4xx/serialUSB/Libraries/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_f32.c
    511          
    512            InBuff length  : 128 bytes
    513            Outbuff length : 16x2 bytes
    514          */
    515          
    516          
    517          

   \                                 In section .text, align 2, keep-with-next
    518          void PDM2PCM(uint8_t *InBuff,int16_t *OutBuff,int16_t PreCalcBuff[DSP_NUMBYTECONV][256])
    519          {
   \                     PDM2PCM: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4688             MOV      R8,R1
   \   00000008   0x4692             MOV      R10,R2
    520              int32_t BuffInPos = -DSP_NUMBYTECONV/2;
   \   0000000A   0xF06F 0x0703      MVN      R7,#+3
    521          	static uint8_t Initial_Array[DSP_NUMBYTECONV/2];
    522          	
    523              for (uint32_t currentSample = 0; currentSample < 16; currentSample++) // go for all the output sample
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0x.... 0x....      LDR.W    R9,??DataTable13_12
    524          	{                                                                     // 32*16 = 512 bytes of input steam 
    525                  int16_t stSum=0;
   \                     ??PDM2PCM_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
    526          //		int16_t coefficientIndex=0;
    527          
    528                    
    529          		/* First half of frame */
    530                  for (uint16_t i = 0; i < DSP_NUMBYTECONV; i++) // DSP_NUMBYTECONV = 8
   \   00000016   0x2600             MOVS     R6,#+0
    531                  {         
    532          
    533                     	int16_t temp,temp1;                        // temporary variable uses for debug, will be removed in future
    534          
    535                      if (BuffInPos < 0)
   \                     ??PDM2PCM_1: (+1)
   \   00000018   0x2F00             CMP      R7,#+0
    536          				temp1 = Initial_Array[i];
    537          			else
    538          			    temp1 = InBuff[BuffInPos];          // stored the value of 1 bytes input which is calculated
    539          
    540          				
    541          			temp = (int16_t)PreCalcBuff[i][temp1];        // convolution for 1 bytes which take from the Pre-calculation array
    542          		
    543                      stSum = ADD_S16(stSum,temp);  //These are the pre-calculated window values
   \   0000001A   0xEB0A 0x2246      ADD      R2,R10,R6, LSL #+9
   \   0000001E   0xBF4C             ITE      MI 
   \   00000020   0xF816 0x1009      LDRBMI   R1,[R6, R9]
   \   00000024   0x5D39             LDRBPL   R1,[R7, R4]
   \   00000026   0x1C7F             ADDS     R7,R7,#+1
   \   00000028   0x1C76             ADDS     R6,R6,#+1
   \   0000002A   0xF932 0x1011      LDRSH    R1,[R2, R1, LSL #+1]
   \   0000002E   0x.... 0x....      BL       ADD_S16
    544          				
    545                      
    546                      BuffInPos++;  //next byte of the input sample stream:0-->255
    547                  }
   \   00000032   0x2E08             CMP      R6,#+8
   \   00000034   0xDBF0             BLT.N    ??PDM2PCM_1
    548          
    549          		BuffInPos-=DSP_NUMBYTECONV/2;
   \   00000036   0x1F3F             SUBS     R7,R7,#+4
    550          
    551          		/* Second half of frame */
    552                  for (uint16_t i = 0; i < DSP_NUMBYTECONV; i++) // DSP_NUMBYTECONV = 8
   \   00000038   0x2600             MOVS     R6,#+0
    553                  {         
    554          
    555                     	int16_t temp,temp1;                        // temporary variable uses for debug, will be removed in future
    556          
    557          
    558          			temp1 = InBuff[BuffInPos];          // stored the value of 1 bytes input which is calculated
    559          	
    560          			temp = (int16_t)PreCalcBuff[i][temp1];        // convolution for 1 bytes which take from the Pre-calculation array
    561          		
    562                      stSum = ADD_S16(stSum,temp);  //These are the pre-calculated window values
   \                     ??PDM2PCM_2: (+1)
   \   0000003A   0xEB0A 0x2146      ADD      R1,R10,R6, LSL #+9
   \   0000003E   0x5D3A             LDRB     R2,[R7, R4]
   \   00000040   0x1C7F             ADDS     R7,R7,#+1
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0xF931 0x1012      LDRSH    R1,[R1, R2, LSL #+1]
   \   00000048   0x.... 0x....      BL       ADD_S16
    563          				
    564                      
    565                      BuffInPos++;  //next byte of the input sample stream:0-->255
    566                  }
   \   0000004C   0x2E08             CMP      R6,#+8
   \   0000004E   0xDBF4             BLT.N    ??PDM2PCM_2
    567          
    568                  OutBuff[currentSample] = (int16_t)stSum;
   \   00000050   0xF828 0x0015      STRH     R0,[R8, R5, LSL #+1]
    569          		
    570          		
    571          
    572          		for (uint16_t i=0; i< (DSP_NUMBYTECONV/2); i++)
   \   00000054   0x2000             MOVS     R0,#+0
    573          		{
    574                       Initial_Array[i]=InBuff[BuffInPos - 1 - DSP_NUMBYTECONV/2 + i];
   \                     ??PDM2PCM_3: (+1)
   \   00000056   0x19C1             ADDS     R1,R0,R7
   \   00000058   0x1909             ADDS     R1,R1,R4
   \   0000005A   0xF811 0x1C05      LDRB     R1,[R1, #-5]
   \   0000005E   0xF800 0x1009      STRB     R1,[R0, R9]
    575          		}
   \   00000062   0x1C40             ADDS     R0,R0,#+1
   \   00000064   0x2804             CMP      R0,#+4
   \   00000066   0xDBF6             BLT.N    ??PDM2PCM_3
    576              }
   \   00000068   0x1C6D             ADDS     R5,R5,#+1
   \   0000006A   0x2D10             CMP      R5,#+16
   \   0000006C   0xD3D2             BCC.N    ??PDM2PCM_0
    577          
    578          
    579          	#if 0
    580                 for (int16_t i=0; i<8; i++)
    581          	   {
    582          	       uint8_t test;
    583          	       test= InBuff[currentSample*8 +i];
    584          	       for (uint8_t j=0; j<8;j++)
    585          		   {
    586          		        if ((test & 0x01) == 0x01) 
    587          				{
    588                              stSum += 10;
    589                          }
    590                          else                        
    591          				{
    592                              stSum -= 10;
    593                          }
    594          				
    595          				test >>= 1;
    596          		   }
    597          	   }
    598          
    599          #endif
    600          
    601          }
   \   0000006E   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return

   \                                 In section .bss, align 4
   \                     ??Initial_Array:
   \   00000000                      DS8 4
    602          
    603          //void OverLapAdd (uint8_t *Input, int16_t *Output) //128 bytes input 32 bytes output
    604          //{
    605              
    606          //}
    607          	
    608          
    609          

   \                                 In section .text, align 2, keep-with-next
    610          void Precalculation(float *fir64Coff,int16_t precalculated[129][256])
    611          {
   \                     Precalculation: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    612              for (uint8_t i = 0; i < 129; i++)  /* from byte 0th to byth 7th of data input */
   \   00000002   0x2200             MOVS     R2,#+0
    613          	{ 
    614          
    615                  for (uint16_t j = 0; j < 256; j++)    /* list all the cases can happen for the input data */ 
   \                     ??Precalculation_0: (+1)
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xEB01 0x2442      ADD      R4,R1,R2, LSL #+9
    616          		{         
    617                      // check overflow 
    618          			if ((int32_t)(fir64Coff[i]*(j-128)) > 32767)
   \                     ??Precalculation_1: (+1)
   \   0000000A   0xF1A3 0x0580      SUB      R5,R3,#+128
   \   0000000E   0xEE00 0x5A10      VMOV     S0,R5
   \   00000012   0xEB00 0x0582      ADD      R5,R0,R2, LSL #+2
   \   00000016   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_13: (+1)
   \   0000001A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000001E   0xEEFD 0x0AC0      VCVT.S32.F32 S1,S0
   \   00000022   0xEE10 0x5A90      VMOV     R5,S1
   \   00000026   0xF5B5 0x4F00      CMP      R5,#+32768
   \   0000002A   0xBFA8             IT       GE 
   \   0000002C   0xF647 0x75FF      MOVWGE   R5,#+32767
    619          			{
    620                          
    621          				precalculated[i][j] = 32767;
   \   00000030   0xDA08             BGE.N    ??Precalculation_2
    622          			}
    623          			else if ((int32_t)(fir64Coff[i]*(j-128)) < -32768)
   \   00000032   0xF515 0x4F00      CMN      R5,#+32768
   \   00000036   0xBFB2             ITEE     LT 
   \   00000038   0x.... 0x....      LDRLT.W  R5,??DataTable13_13  ;; 0xffff8000
   \   0000003C   0xEEBD 0x0AC0      VCVTGE.S32.F32 S0,S0
   \   00000040   0xEE10 0x5A10      VMOVGE   R5,S0
    624          			{
    625                          precalculated[i][j] = -32768;
    626          			}
    627          			else
    628          			{
    629                          precalculated[i][j] = (int16_t)(fir64Coff[i]*(j-128));
   \                     ??Precalculation_2: (+1)
   \   00000044   0xF824 0x5013      STRH     R5,[R4, R3, LSL #+1]
    630          			}
    631                  }
   \   00000048   0x1C5B             ADDS     R3,R3,#+1
   \   0000004A   0x2BFF             CMP      R3,#+255
   \   0000004C   0xDDDD             BLE.N    ??Precalculation_1
    632              }
   \   0000004E   0x1C52             ADDS     R2,R2,#+1
   \   00000050   0x2A81             CMP      R2,#+129
   \   00000052   0xDBD7             BLT.N    ??Precalculation_0
    633          }
   \   00000054   0xBD30             POP      {R4,R5,PC}       ;; return
    634          
    635          
    636          /************************************************************************************************ 
    637          Fc: Cutoff Frequency
    638          Fs: Sample Rate
    639          M: filter length
    640          *************************************************************************************************/
    641          

   \                                 In section .text, align 4, keep-with-next
    642          float lowpassFIR(float * firBuffer,uint64_t M,uint64_t Fs,uint64_t Fc)
    643          {    
   \                     lowpassFIR: (+1)
   \   00000000   0xE92D 0x4BFC      PUSH     {R2-R9,R11,LR}
   \   00000004   0x4606             MOV      R6,R0
    644              M = M -1;
   \   00000006   0x1E50             SUBS     R0,R2,#+1
   \   00000008   0xED2D 0x8B06      VPUSH    {D8-D10}
   \   0000000C   0xB082             SUB      SP,SP,#+8
   \   0000000E   0xF163 0x0100      SBC      R1,R3,#+0
   \   00000012   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
    645          	
    646              float Ft = (float)Fc / (float)Fs;
   \   00000016   0xE9DD 0x0114      LDRD     R0,R1,[SP, #+80]
   \   0000001A   0x.... 0x....      BL       __aeabi_ul2f
   \   0000001E   0xEE08 0x0A10      VMOV     S16,R0
    647          
    648          
    649              float sum = 0.0f;
    650              
    651              for (uint64_t i = 0; i < M; i++) 
   \   00000022   0x2400             MOVS     R4,#+0
   \   00000024   0xE9DD 0x0112      LDRD     R0,R1,[SP, #+72]
   \   00000028   0x.... 0x....      BL       __aeabi_ul2f
   \   0000002C   0xEE00 0x0A10      VMOV     S0,R0
   \   00000030   0x2500             MOVS     R5,#+0
   \   00000032   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000036   0xEEC8 0x8A00      VDIV.F32 S17,S16,S0
   \   0000003A   0x.... 0x....      BL       __aeabi_ul2f
   \   0000003E   0xEE00 0x0A10      VMOV     S0,R0
   \   00000042   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   00000046   0xED9F 0x....      VLDR.W   S16,??DataTable12  ;; 0x0
   \   0000004A   0xEE20 0x9A20      VMUL.F32 S18,S0,S1
   \   0000004E   0xE012             B.N      ??lowpassFIR_0
    652          	{
    653                  if (i != ((float)M / 2)) 
    654          		{
    655                      firBuffer[i] *= sin(2*PI*Ft*(i - ((float)M / 2))) / 
    656          			                (PI * (i - ((float)M / 2)));
    657                  }
    658                  else 
    659          		{
    660                      firBuffer[i] *= 2* Ft;
   \                     ??lowpassFIR_1: (+1)
   \   00000050   0xEEB0 0x0A00      VMOV.F32 S0,#2.0
   \   00000054   0xEB06 0x0084      ADD      R0,R6,R4, LSL #+2
   \   00000058   0xEE28 0x0A80      VMUL.F32 S0,S17,S0
   \   0000005C   0xEE20 0x0A29      VMUL.F32 S0,S0,S19
   \   00000060   0xED80 0x0A00      VSTR     S0,[R0, #0]
    661                  }
    662                  
    663                  sum += firBuffer[i];     
   \                     ??lowpassFIR_2: (+1)
   \   00000064   0xEB06 0x0084      ADD      R0,R6,R4, LSL #+2
   \   00000068   0x1C64             ADDS     R4,R4,#+1
   \   0000006A   0xF145 0x0500      ADC      R5,R5,#+0
   \   0000006E   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000072   0xEE38 0x8A00      VADD.F32 S16,S16,S0
   \                     ??lowpassFIR_0: (+1)
   \   00000076   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   0000007A   0x428D             CMP      R5,R1
   \   0000007C   0xD843             BHI.N    ??lowpassFIR_3
   \   0000007E   0xBF28             IT       CS 
   \   00000080   0x4284             CMPCS    R4,R0
   \   00000082   0xD240             BCS.N    ??lowpassFIR_3
   \   00000084   0xF856 0x0024      LDR      R0,[R6, R4, LSL #+2]
   \   00000088   0x4629             MOV      R1,R5
   \   0000008A   0xEE09 0x0A90      VMOV     S19,R0
   \   0000008E   0x4620             MOV      R0,R4
   \   00000090   0x.... 0x....      BL       __aeabi_ul2f
   \   00000094   0xEE00 0x0A10      VMOV     S0,R0
   \   00000098   0xEEB4 0x0A49      VCMP.F32 S0,S18
   \   0000009C   0xEEF1 0xFA10      FMSTAT   
   \   000000A0   0xD0D6             BEQ.N    ??lowpassFIR_1
   \   000000A2   0xEE30 0xAA49      VSUB.F32 S20,S0,S18
   \   000000A6   0xEE19 0x0A90      VMOV     R0,S19
   \   000000AA   0x.... 0x....      BL       __aeabi_f2d
   \   000000AE   0x4607             MOV      R7,R0
   \   000000B0   0x468B             MOV      R11,R1
   \   000000B2   0xEE18 0x0A90      VMOV     R0,S17
   \   000000B6   0x.... 0x....      BL       __aeabi_f2d
   \   000000BA   0x4602             MOV      R2,R0
   \   000000BC   0x460B             MOV      R3,R1
   \   000000BE   0x....             LDR.N    R0,??DataTable13  ;; 0x5a7ed197
   \   000000C0   0x....             LDR.N    R1,??DataTable13_1  ;; 0x401921fb
   \   000000C2   0x.... 0x....      BL       __aeabi_dmul
   \   000000C6   0x.... 0x....      BL       ?Subroutine4
    664              }
   \                     ??CrossCallReturnLabel_7: (+1)
   \   000000CA   0x4642             MOV      R2,R8
   \   000000CC   0x464B             MOV      R3,R9
   \   000000CE   0x.... 0x....      BL       __aeabi_dmul
   \   000000D2   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x.... 0x....      BL       __iar_Sin
   \   000000DC   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   000000E0   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_8: (+1)
   \   000000E4   0x4602             MOV      R2,R0
   \   000000E6   0x460B             MOV      R3,R1
   \   000000E8   0x....             LDR.N    R0,??DataTable13  ;; 0x5a7ed197
   \   000000EA   0x....             LDR.N    R1,??DataTable13_14  ;; 0x400921fb
   \   000000EC   0x.... 0x....      BL       __aeabi_dmul
   \   000000F0   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_16: (+1)
   \   000000F4   0x463A             MOV      R2,R7
   \   000000F6   0x465B             MOV      R3,R11
   \   000000F8   0x.... 0x....      BL       __aeabi_dmul
   \   000000FC   0x.... 0x....      BL       __aeabi_d2f
   \   00000100   0xF846 0x0024      STR      R0,[R6, R4, LSL #+2]
   \   00000104   0xE7AE             B.N      ??lowpassFIR_2
    665              
    666          	return sum;
   \                     ??lowpassFIR_3: (+1)
   \   00000106   0xB002             ADD      SP,SP,#+8
   \   00000108   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000010C   0xECBD 0x8B06      VPOP     {D8-D10}
   \   00000110   0xE8BD 0x8BF3      POP      {R0,R1,R4-R9,R11,PC}  ;; return
    667          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x4680             MOV      R8,R0
   \   00000002   0x4689             MOV      R9,R1
   \   00000004   0xEE1A 0x0A10      VMOV     R0,S20
   \   00000008   0x.... 0x....      B.W      __aeabi_f2d
    668          
    669          /* */
    670          

   \                                 In section .text, align 2, keep-with-next
    671          int8_t CrssCor(int16_t * vDataIn1, int16_t * vDataIn2, uint16_t numLen )
    672          {
   \                     CrssCor: (+1)
   \   00000000   0xE92D 0x45F1      PUSH     {R0,R4-R8,R10,LR}
    673              int64_t Sum, SumMax;
    674          	int8_t idxPos;
    675          
    676              SumMax=0;
    677              Sum=0;
    678              for (int8_t i=-8;i<8;i++)
   \   00000004   0x....             LDR.N    R0,??DataTable13_15
   \   00000006   0x460B             MOV      R3,R1
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0x46A0             MOV      R8,R4
   \   0000000C   0x6807             LDR      R7,[R0, #+0]
   \   0000000E   0xF06F 0x0E07      MVN      LR,#+7
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x2100             MOVS     R1,#+0
    679              {
    680                 Sum = 0;
    681          	   if (i>=0)
    682          	   {
    683          	       for(uint16_t j=0;j<numLen;j++)
    684          	       {
    685          	           Sum += vDataIn1[j+i]*vDataIn2[j]/numLen;   
    686          	       }
    687                                      
    688          	   }
    689          	   else
    690          	   {
    691                     for(uint16_t j=0;j<numLen;j++)
   \                     ??CrssCor_0: (+1)
   \   00000016   0x2500             MOVS     R5,#+0
   \   00000018   0xE029             B.N      ??CrssCor_1
   \                     ??CrssCor_2: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000022   0xD4F8             BMI.N    ??CrssCor_0
   \   00000024   0x2500             MOVS     R5,#+0
   \                     ??CrssCor_3: (+1)
   \   00000026   0x4295             CMP      R5,R2
   \   00000028   0xDA23             BGE.N    ??CrssCor_4
   \   0000002A   0x9E00             LDR      R6,[SP, #+0]
   \   0000002C   0xEB0E 0x0A05      ADD      R10,LR,R5
   \   00000030   0xF936 0x601A      LDRSH    R6,[R6, R10, LSL #+1]
   \   00000034   0xF933 0xA015      LDRSH    R10,[R3, R5, LSL #+1]
   \   00000038   0xFB16 0xF60A      SMULBB   R6,R6,R10
   \   0000003C   0xFB96 0xF6F2      SDIV     R6,R6,R2
   \   00000040   0x1980             ADDS     R0,R0,R6
   \   00000042   0xEB41 0x71E6      ADC      R1,R1,R6, ASR #+31
   \   00000046   0x1C6D             ADDS     R5,R5,#+1
   \   00000048   0xE7ED             B.N      ??CrssCor_3
    692          	       {
    693          	           Sum += vDataIn1[j]*vDataIn2[j-i]/numLen;   
   \                     ??CrssCor_5: (+1)
   \   0000004A   0x4606             MOV      R6,R0
   \   0000004C   0x468A             MOV      R10,R1
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0xEBA5 0x010E      SUB      R1,R5,LR
   \   00000054   0xF933 0x1011      LDRSH    R1,[R3, R1, LSL #+1]
   \   00000058   0xF930 0x0015      LDRSH    R0,[R0, R5, LSL #+1]
   \   0000005C   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   00000060   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   00000064   0x17C1             ASRS     R1,R0,#+31
   \   00000066   0x1830             ADDS     R0,R6,R0
   \   00000068   0xEB4A 0x0101      ADC      R1,R10,R1
    694          	       }
   \   0000006C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CrssCor_1: (+1)
   \   0000006E   0x4295             CMP      R5,R2
   \   00000070   0xDBEB             BLT.N    ??CrssCor_5
    695          	   }
    696          
    697          	   if (Sum > SumMax) 
   \                     ??CrssCor_4: (+1)
   \   00000072   0x4588             CMP      R8,R1
   \   00000074   0xDC08             BGT.N    ??CrssCor_6
   \   00000076   0xDB01             BLT.N    ??CrssCor_7
   \   00000078   0x4284             CMP      R4,R0
   \   0000007A   0xD205             BCS.N    ??CrssCor_6
    698          	   {
    699          	       SumMax = Sum;  	
   \                     ??CrssCor_7: (+1)
   \   0000007C   0x4604             MOV      R4,R0
    700          	       idxPos = i;
    701          		   EnergySound = (uint32_t)((SumMax>>16));
   \   0000007E   0x0C00             LSRS     R0,R0,#+16
   \   00000080   0x4688             MOV      R8,R1
   \   00000082   0x46F4             MOV      R12,LR
   \   00000084   0xEA40 0x4701      ORR      R7,R0,R1, LSL #+16
    702          	   }
    703          
    704          	   
    705                  
    706              }
   \                     ??CrssCor_6: (+1)
   \   00000088   0xF10E 0x0E01      ADD      LR,LR,#+1
   \   0000008C   0xF1BE 0x0F08      CMP      LR,#+8
   \   00000090   0xDBC3             BLT.N    ??CrssCor_2
   \   00000092   0x....             LDR.N    R0,??DataTable13_15
   \   00000094   0x6007             STR      R7,[R0, #+0]
    707          
    708          
    709              return idxPos;
   \   00000096   0xFA4F 0xF08C      SXTB     R0,R12
   \   0000009A   0xE8BD 0x85F2      POP      {R1,R4-R8,R10,PC}  ;; return
    710          }
    711          
    712          
    713          /*****************************************************************************************************
    714          CROSSCORRELATION---------------------------------------------------------------------------------------
    715          
    716          	function	Out = crsscorr_local(Z,X) 
    717          	%this function computes autocorrelation
    718          	 
    719          		N = round(length(X));
    720          		%WIN = hanning(N);
    721          		x = [X;ones(N,1)];
    722          		z = [Z;ones(N,1)];
    723          		
    724          		Out = zeros(N,1);
    725          		
    726          		for index=1:16 %N but optimize to 16  
    727          			Out(index)=sum(z(index:index+N-1).* x(1:N))/(N);
    728          		end
    729          	end
    730          
    731          *******************************************************************************************************/
    732          

   \                                 In section .text, align 2, keep-with-next
    733          void Std_CrssCor(int16_t * vDataIn1, int16_t * vDataIn2, float *Out,uint16_t numLen )
    734          {
   \                     Std_CrssCor: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    735          
    736              for (uint16_t i=0;i<numLen;i++)
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xE012             B.N      ??Std_CrssCor_0
    737              {
    738                 Out = 0;
    739                 for(uint16_t j=0;j<numLen;j++)
    740                 {
    741                     Out[i] += vDataIn1[j+i]*vDataIn2[j]/numLen;   
   \                     ??Std_CrssCor_1: (+1)
   \   00000006   0x1915             ADDS     R5,R2,R4
   \   00000008   0xF931 0x6014      LDRSH    R6,[R1, R4, LSL #+1]
   \   0000000C   0x.... 0x....      BL       ?Subroutine9
    742                 }       
   \                     ??CrossCallReturnLabel_19: (+1)
   \   00000010   0xFB95 0xF5F3      SDIV     R5,R5,R3
   \   00000014   0xEE00 0x5A10      VMOV     S0,R5
   \   00000018   0x0095             LSLS     R5,R2,#+2
   \   0000001A   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_14: (+1)
   \   0000001E   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000022   0xED85 0x0A00      VSTR     S0,[R5, #0]
   \                     ??Std_CrssCor_2: (+1)
   \   00000026   0x429C             CMP      R4,R3
   \   00000028   0xDBED             BLT.N    ??Std_CrssCor_1
   \   0000002A   0x1C52             ADDS     R2,R2,#+1
   \                     ??Std_CrssCor_0: (+1)
   \   0000002C   0x429A             CMP      R2,R3
   \   0000002E   0xBFB8             IT       LT 
   \   00000030   0x2400             MOVLT    R4,#+0
   \   00000032   0xDBF8             BLT.N    ??Std_CrssCor_2
    743              }
    744          
    745          }
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9: (+1)
   \   00000000   0xF930 0x5015      LDRSH    R5,[R0, R5, LSL #+1]
   \   00000004   0x1C64             ADDS     R4,R4,#+1
   \   00000006   0xFB15 0xF506      SMULBB   R5,R5,R6
   \   0000000A   0x4770             BX       LR
    746          
    747          /*********************************************************************************************************
    748          function y=atcorr(X) %this function computes autocorrelation
    749              K = round(length(X)/2);
    750              x = X;
    751              y = zeros(K,1);
    752              for index=1:K
    753                  y(index) = sum(x(index:index+K-1).* x(1:K))/(K);
    754              end
    755          end
    756          **********************************************************************************************************/
    757          

   \                                 In section .text, align 4, keep-with-next
    758           void Std_AutoCorr(int16_t * vDataIn,float *Out, uint16_t numLen )
    759          {
   \                     Std_AutoCorr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    760              for (uint16_t i=0;i<numLen;i++)
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0xE013             B.N      ??Std_AutoCorr_0
    761              {
    762                 Out[i] = 0;
    763                 for(uint16_t j=0;j<numLen;j++)
    764                 {
    765                     Out[i] += vDataIn[j+i]*vDataIn[j]/numLen;   
   \                     ??Std_AutoCorr_1: (+1)
   \   00000006   0x191D             ADDS     R5,R3,R4
   \   00000008   0xF930 0x6014      LDRSH    R6,[R0, R4, LSL #+1]
   \   0000000C   0x.... 0x....      BL       ?Subroutine9
    766                 }       
   \                     ??CrossCallReturnLabel_20: (+1)
   \   00000010   0xFB95 0xF5F2      SDIV     R5,R5,R2
   \   00000014   0xEE00 0x5A90      VMOV     S1,R5
   \   00000018   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   0000001C   0xEE30 0x0A80      VADD.F32 S0,S1,S0
   \                     ??Std_AutoCorr_2: (+1)
   \   00000020   0x4294             CMP      R4,R2
   \   00000022   0xDBF0             BLT.N    ??Std_AutoCorr_1
   \   00000024   0xEB01 0x0483      ADD      R4,R1,R3, LSL #+2
   \   00000028   0x1C5B             ADDS     R3,R3,#+1
   \   0000002A   0xED84 0x0A00      VSTR     S0,[R4, #0]
   \                     ??Std_AutoCorr_0: (+1)
   \   0000002E   0x4293             CMP      R3,R2
   \   00000030   0xDA03             BGE.N    ??Std_AutoCorr_3
   \   00000032   0xED9F 0x....      VLDR.W   S0,??DataTable12  ;; 0x0
   \   00000036   0x2400             MOVS     R4,#+0
   \   00000038   0xE7F2             B.N      ??Std_AutoCorr_2
    767              }
    768          }
   \                     ??Std_AutoCorr_3: (+1)
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
    769          
    770          /**********************************************************************************************************
    771          -----------------------------Covarian Matrix setup---------------------------------------------------------
    772          function Out = CorrMatFn(x)
    773              Out = zeros(length(x),length(x));
    774              for i=1:length(x)
    775                  for j=1:length(x)
    776                     if (j>=i)
    777                         Out(i,j) = x(j - i +1);  
    778                     else
    779                         Out(i,j) = x(i-j + 1);  
    780                     end
    781                  end
    782              end 
    783          end
    784          *************************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    785          void Std_MatCorr(int16_t* vDataIn, float *Out, uint16_t numLen)
    786          {
   \                     Std_MatCorr: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    787              for (uint16_t i=0;i<numLen;i++)
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0xE000             B.N      ??Std_MatCorr_0
   \                     ??Std_MatCorr_1: (+1)
   \   00000006   0x1C5B             ADDS     R3,R3,#+1
   \                     ??Std_MatCorr_0: (+1)
   \   00000008   0x4293             CMP      R3,R2
   \   0000000A   0xDA15             BGE.N    ??Std_MatCorr_2
    788              {
    789                 
    790                 for(uint16_t j=0;j<numLen;j++)
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xE00C             B.N      ??Std_MatCorr_3
    791                 {
    792                     if (j>=i)
    793                         Out[i*numLen +j] = vDataIn[j-i]; 
    794          		   else
    795          		   	   Out[i*numLen +j] = vDataIn[i-j];
   \                     ??Std_MatCorr_4: (+1)
   \   00000010   0xF930 0x5015      LDRSH    R5,[R0, R5, LSL #+1]
   \   00000014   0xEE00 0x5A10      VMOV     S0,R5
   \   00000018   0xFB02 0x4503      MLA      R5,R2,R3,R4
   \   0000001C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000020   0x1C64             ADDS     R4,R4,#+1
   \   00000022   0xEB01 0x0585      ADD      R5,R1,R5, LSL #+2
   \   00000026   0xED85 0x0A00      VSTR     S0,[R5, #0]
   \                     ??Std_MatCorr_3: (+1)
   \   0000002A   0x4294             CMP      R4,R2
   \   0000002C   0xDAEB             BGE.N    ??Std_MatCorr_1
   \   0000002E   0x429C             CMP      R4,R3
   \   00000030   0xBFAC             ITE      GE 
   \   00000032   0x1AE5             SUBGE    R5,R4,R3
   \   00000034   0x1B1D             SUBLT    R5,R3,R4
   \   00000036   0xE7EB             B.N      ??Std_MatCorr_4
    796          		   	
    797                 }       
    798              }
    799          
    800          }
   \                     ??Std_MatCorr_2: (+1)
   \   00000038   0xBD30             POP      {R4,R5,PC}       ;; return
    801          
    802          
    803          
    804          /************************************************************************************************************
    805          -----------------------------Summing in Fourier Domain-------------------------------------------------------
    806          
    807          *************************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    808          void Delay_Sum_FFT(const Mic_Array_Data * MicData, Mic_Array_Coef_f *coefMics,int16_t * stBufOut, int16_t lenFFT)
    809          {
   \                     Delay_Sum_FFT: (+1)
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0x4682             MOV      R10,R0
    810               int32_t         _value,_value1,_value2;
    811              
    812          	for (uint16_t iFrm=0;iFrm<AUDIO_OUT_BUFFER_SIZE/(2*lenFFT);iFrm++)
   \   00000006   0x461C             MOV      R4,R3
   \   00000008   0x0060             LSLS     R0,R4,#+1
   \   0000000A   0xF248 0x4810      MOVW     R8,#+33808
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R9,??DataTable13_16
   \   00000014   0xEB08 0x0009      ADD      R0,R8,R9
   \   00000018   0x468B             MOV      R11,R1
   \   0000001A   0x2700             MOVS     R7,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0xF241 0x0528      MOVW     R5,#+4136
   \   00000022   0xE038             B.N      ??Delay_Sum_FFT_0
    813          	{
    814                    RFFT_INT(MicData->bufMIC1,S1,DataFFT.bufMIC1);  
    815                    RFFT_INT(MicData->bufMIC2,S2,DataFFT.bufMIC2);
    816                    RFFT_INT(MicData->bufMIC3,S3,DataFFT.bufMIC3);
    817                    RFFT_INT(MicData->bufMIC4,S4,DataFFT.bufMIC4);
    818          
    819                    /* Adding in Fourier Domain */			 
    820                    //arm_add_f32((float *)bufferFFT,(float *)bufferFFT_1, (float *)bufferFFTSum,lenFFT*2);
    821                    for (uint16_t ii=0;ii<lenFFT*2;ii++)
    822                    {
    823                        bufferFFTSum[ii]= ((DataFFT.bufMIC1[ii]*coefMics->facMIC1) + 
    824                                          (DataFFT.bufMIC2[ii]*coefMics->facMIC2) +
    825                                          (DataFFT.bufMIC3[ii]*coefMics->facMIC3) +
    826                                          (DataFFT.bufMIC4[ii]*coefMics->facMIC4)); 
   \                     ??Delay_Sum_FFT_1: (+1)
   \   00000024   0xEB09 0x0280      ADD      R2,R9,R0, LSL #+2
   \   00000028   0xEDDB 0x0A00      VLDR     S1,[R11, #0]
   \   0000002C   0xEB09 0x0180      ADD      R1,R9,R0, LSL #+2
   \   00000030   0xED9B 0x1A01      VLDR     S2,[R11, #+4]
    827                    }
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0xB280             UXTH     R0,R0
   \   00000038   0xED92 0x0A00      VLDR     S0,[R2, #0]
   \   0000003C   0x186A             ADDS     R2,R5,R1
   \   0000003E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000042   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   00000046   0xF501 0x5200      ADD      R2,R1,#+8192
   \   0000004A   0x3250             ADDS     R2,R2,#+80
   \   0000004C   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000050   0xED9B 0x1A02      VLDR     S2,[R11, #+8]
   \   00000054   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   00000058   0xF501 0x5240      ADD      R2,R1,#+12288
   \   0000005C   0x3278             ADDS     R2,R2,#+120
   \   0000005E   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000062   0xF501 0x41C0      ADD      R1,R1,#+24576
   \   00000066   0xED9B 0x1A03      VLDR     S2,[R11, #+12]
   \   0000006A   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   0000006E   0x31F0             ADDS     R1,R1,#+240
   \   00000070   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000074   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \                     ??Delay_Sum_FFT_2: (+1)
   \   00000078   0x9901             LDR      R1,[SP, #+4]
   \   0000007A   0x4288             CMP      R0,R1
   \   0000007C   0xDBD2             BLT.N    ??Delay_Sum_FFT_1
    828          
    829                    /* Revert FFT*/
    830                    arm_rfft_f32(&IS, (float *)bufferFFTSum, (float *)&fbufferOut[iFrm*lenFFT]);
   \   0000007E   0xEB09 0x0086      ADD      R0,R9,R6, LSL #+2
   \   00000082   0xF509 0x41C0      ADD      R1,R9,#+24576
   \   00000086   0x31F0             ADDS     R1,R1,#+240
   \   00000088   0x1C7F             ADDS     R7,R7,#+1
   \   0000008A   0xF500 0x42E5      ADD      R2,R0,#+29312
   \   0000008E   0x....             LDR.N    R0,??DataTable13_17
   \   00000090   0x.... 0x....      BL       arm_rfft_f32
   \   00000094   0xB2BF             UXTH     R7,R7
   \                     ??Delay_Sum_FFT_0: (+1)
   \   00000096   0x9901             LDR      R1,[SP, #+4]
   \   00000098   0xF44F 0x6080      MOV      R0,#+1024
   \   0000009C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000A0   0x4287             CMP      R7,R0
   \   000000A2   0xDA46             BGE.N    ??Delay_Sum_FFT_3
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0xFB04 0xF607      MUL      R6,R4,R7
   \   000000AA   0xE004             B.N      ??CrossCallReturnLabel_0
   \                     ??Delay_Sum_FFT_4: (+1)
   \   000000AC   0x1981             ADDS     R1,R0,R6
   \   000000AE   0xF93A 0x1011      LDRSH    R1,[R10, R1, LSL #+1]
   \   000000B2   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_0: (+1)
   \   000000B6   0x42A0             CMP      R0,R4
   \   000000B8   0xDBF8             BLT.N    ??Delay_Sum_FFT_4
   \   000000BA   0x9900             LDR      R1,[SP, #+0]
   \   000000BC   0x464A             MOV      R2,R9
   \   000000BE   0x....             LDR.N    R0,??DataTable13_18
   \   000000C0   0x.... 0x....      BL       arm_rfft_f32
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0xE006             B.N      ??CrossCallReturnLabel_1
   \                     ??Delay_Sum_FFT_5: (+1)
   \   000000C8   0x1981             ADDS     R1,R0,R6
   \   000000CA   0xEB0A 0x0141      ADD      R1,R10,R1, LSL #+1
   \   000000CE   0xF9B1 0x1814      LDRSH    R1,[R1, #+2068]
   \   000000D2   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_1: (+1)
   \   000000D6   0x42A0             CMP      R0,R4
   \   000000D8   0xDBF6             BLT.N    ??Delay_Sum_FFT_5
   \   000000DA   0x9900             LDR      R1,[SP, #+0]
   \   000000DC   0xEB05 0x0209      ADD      R2,R5,R9
   \   000000E0   0x....             LDR.N    R0,??DataTable13_19
   \   000000E2   0x.... 0x....      BL       arm_rfft_f32
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0xE005             B.N      ??CrossCallReturnLabel_2
   \                     ??Delay_Sum_FFT_6: (+1)
   \   000000EA   0x1981             ADDS     R1,R0,R6
   \   000000EC   0xEB0A 0x0141      ADD      R1,R10,R1, LSL #+1
   \   000000F0   0x5E69             LDRSH    R1,[R5, R1]
   \   000000F2   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_2: (+1)
   \   000000F6   0x42A0             CMP      R0,R4
   \   000000F8   0xDBF7             BLT.N    ??Delay_Sum_FFT_6
   \   000000FA   0xF509 0x5200      ADD      R2,R9,#+8192
   \   000000FE   0x9900             LDR      R1,[SP, #+0]
   \   00000100   0x3250             ADDS     R2,R2,#+80
   \   00000102   0x....             LDR.N    R0,??DataTable13_20
   \   00000104   0x.... 0x....      BL       arm_rfft_f32
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0xF641 0x023C      MOVW     R2,#+6204
   \   0000010E   0xE005             B.N      ??CrossCallReturnLabel_3
   \                     ??Delay_Sum_FFT_7: (+1)
   \   00000110   0x1981             ADDS     R1,R0,R6
   \   00000112   0xEB0A 0x0141      ADD      R1,R10,R1, LSL #+1
   \   00000116   0x5E51             LDRSH    R1,[R2, R1]
   \   00000118   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_3: (+1)
   \   0000011C   0x42A0             CMP      R0,R4
   \   0000011E   0xDBF7             BLT.N    ??Delay_Sum_FFT_7
   \   00000120   0xF509 0x5240      ADD      R2,R9,#+12288
   \   00000124   0x9900             LDR      R1,[SP, #+0]
   \   00000126   0x3278             ADDS     R2,R2,#+120
   \   00000128   0x....             LDR.N    R0,??DataTable13_21
   \   0000012A   0x.... 0x....      BL       arm_rfft_f32
   \   0000012E   0x2000             MOVS     R0,#+0
   \   00000130   0xE7A2             B.N      ??Delay_Sum_FFT_2
    831                    //arm_rfft_fast_f32(&IS, (float *)bufferFFTSum, (float *)&fbufferOut[iFrm*lenFFT], 1);
    832          	}
    833          
    834                  /*covert from float to integer*/
    835          	for (uint16_t i=0; i<AUDIO_OUT_BUFFER_SIZE;)
   \                     ??Delay_Sum_FFT_3: (+1)
   \   00000132   0x2000             MOVS     R0,#+0
    836          	{
    837          	    _value1 = (int32_t)fbufferOut[(i>>1)];
    838          		_value2 = MicData->bufMIC2[i>>1];
    839          	    stBufOut[i++] = (int16_t)_value1;
   \                     ??Delay_Sum_FFT_8: (+1)
   \   00000134   0x1042             ASRS     R2,R0,#+1
   \   00000136   0xF020 0x0101      BIC      R1,R0,#0x1
   \   0000013A   0xEB09 0x0282      ADD      R2,R9,R2, LSL #+2
   \   0000013E   0x4451             ADD      R1,R1,R10
   \   00000140   0x9B02             LDR      R3,[SP, #+8]
   \   00000142   0xF502 0x42E5      ADD      R2,R2,#+29312
   \   00000146   0xF9B1 0x1814      LDRSH    R1,[R1, #+2068]
   \   0000014A   0xED92 0x0A00      VLDR     S0,[R2, #0]
   \   0000014E   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000152   0xEE10 0x2A10      VMOV     R2,S0
   \   00000156   0xF823 0x2010      STRH     R2,[R3, R0, LSL #+1]
   \   0000015A   0x1C40             ADDS     R0,R0,#+1
    840          		stBufOut[i++] = (int16_t)_value2;
   \   0000015C   0x9A02             LDR      R2,[SP, #+8]
   \   0000015E   0xB280             UXTH     R0,R0
   \   00000160   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
   \   00000164   0x1C40             ADDS     R0,R0,#+1
   \   00000166   0xB280             UXTH     R0,R0
    841          	}
   \   00000168   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000016C   0xDBE2             BLT.N    ??Delay_Sum_FFT_8
    842          	
    843          	//arm_float_to_q15((float32_t *)fbufferOut,(q15_t *)stBufOut,AUDIO_OUT_BUFFER_SIZE); 
    844          	
    845          }
   \   0000016E   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xEE00 0x1A10      VMOV     S0,R1
   \   00000004   0xEB09 0x0180      ADD      R1,R9,R0, LSL #+2
   \   00000008   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x4441             ADD      R1,R8,R1
   \   00000010   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   00000014   0x4770             BX       LR
    846          /******************************************************************************/
    847          /*                  Factor Update                                             */ 
    848          /******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    849          void FactorUpd(Mic_Array_Coef_f * facMic)
    850          {
    851          	facMic->facMIC1 = 0.25;
   \                     FactorUpd: (+1)
   \   00000000   0xEEB5 0x0A00      VMOV.F32 S0,#0.25
   \   00000004   0xED80 0x0A00      VSTR     S0,[R0, #0]
    852          	facMic->facMIC2 = 0.25;
   \   00000008   0xED80 0x0A01      VSTR     S0,[R0, #+4]
    853          	facMic->facMIC3 = 0.25;
   \   0000000C   0xED80 0x0A02      VSTR     S0,[R0, #+8]
    854          	facMic->facMIC4 = 0.25;
   \   00000010   0xED80 0x0A03      VSTR     S0,[R0, #+12]
    855          }
   \   00000014   0x4770             BX       LR               ;; return
    856          
    857          
    858          

   \                                 In section .text, align 2, keep-with-next
    859          void FFT_SUM(int16_t * stBuf1, int16_t * stBuf2,float *fBufOut, uint16_t lenFFT)
    860          {
    861          #if 0 //using self-writing DFT function 
    862             int32_t         value;
    863          
    864             /* covert from int to float */
    865             for(uint16_t j=0;j<lenFFT;j++)
    866             {
    867                value = (int32_t)stBuf1[j];
    868             	  fbuffer[j]=(float)value;
    869             }	
    870             DFT((float *)fbuffer,(float *)bufferFFT,lenFFT);
    871          
    872          	/* covert from int to float */
    873          	for(uint16_t j=0;j<lenFFT;j++)
    874          	{
    875          	   value = (int32_t)stBuf2[j];
    876          	   fbuffer[j]=(float)value;
    877          	}	 
    878          	DFT((float *)fbuffer,(float *)bufferFFT_1,lenFFT);
    879          
    880             /* Adding in Fourier Domain */			 
    881             for(uint16_t i=0;i<lenFFT;i++)
    882             {
    883                  bufferFFTSum[i] = bufferFFT[i]+bufferFFT_1[i];
    884             }
    885          
    886             rDFT(lenFFT,1,bufferFFTSum,fbuffer);
    887          #endif
    888          }
   \                     FFT_SUM: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x43480000         DC32     0x43480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0xC2C80000         DC32     0xc2c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x5A7ED197         DC32     0x5a7ed197

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x401921FB         DC32     0x401921fb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     ??Out_Old

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x........         DC32     ??InOld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0xFFFFB486         DC32     0xffffb486

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x........         DC32     ??InOld_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     ??OutOld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x........         DC32     ??iRing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x404F8000         DC32     0x404f8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   0x408F4000         DC32     0x408f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \   00000000   0x........         DC32     ??Initial_Array

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \   00000000   0xFFFF8000         DC32     0xffff8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \   00000000   0x400921FB         DC32     0x400921fb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \   00000000   0x........         DC32     EnergySound

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_16:
   \   00000000   0x........         DC32     DataFFT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_17:
   \   00000000   0x........         DC32     IS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_18:
   \   00000000   0x........         DC32     `S1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_19:
   \   00000000   0x........         DC32     `S2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_20:
   \   00000000   0x........         DC32     `S3`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_21:
   \   00000000   0x........         DC32     `S4`
    889          
    890          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ADD_S16
      32   CrssCor
      48   DFT
        48   -> __aeabi_d2f
        48   -> __aeabi_ddiv
        48   -> __aeabi_dmul
        48   -> __aeabi_f2d
        48   -> arm_cos_f32
        48   -> arm_sin_f32
     536   Decimation
       536   -> __aeabi_memcpy4
      48   Delay_Sum_FFT
        48   -> arm_rfft_f32
       0   FFT_SUM
       0   FactorUpd
      32   LowPass
        32   -> ADD_S16
        32   -> SUB_S16
      28   LowPass2ndOder
      28   LowPass2ndOder_1
      32   LowPassIIR
        32   -> ADD_S16
        32   -> SUB_S16
      20   PCM2PDM
      32   PDM2PCM
        32   -> ADD_S16
      12   Precalculation
       0   SUB_S16
      16   Std_AutoCorr
      16   Std_CrssCor
      12   Std_MatCorr
      16   Window
        16   -> __aeabi_d2f
        16   -> __aeabi_ddiv
        16   -> __aeabi_dmul
        16   -> __aeabi_dsub
        16   -> __aeabi_i2d
        16   -> __iar_Sin
      20   iirFilter
      72   lowpassFIR
        72   -> __aeabi_d2f
        72   -> __aeabi_ddiv
        72   -> __aeabi_dmul
        72   -> __aeabi_f2d
        72   -> __aeabi_ul2f
        72   -> __iar_Sin
      56   rDFT
        56   -> __aeabi_d2f
        56   -> __aeabi_ddiv
        56   -> __aeabi_dmul
        56   -> __aeabi_f2d
        56   -> __aeabi_i2d
        56   -> arm_cos_f32
        56   -> arm_sin_f32


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable12
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_15
       4  ??DataTable13_16
       4  ??DataTable13_17
       4  ??DataTable13_18
       4  ??DataTable13_19
       4  ??DataTable13_2
       4  ??DataTable13_20
       4  ??DataTable13_21
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
       4  ??DataTable7
       4  ??DataTable9
       4  ??DataTable9_1
       8  ??Subroutine10_0
      22  ?Subroutine0
      22  ?Subroutine1
       8  ?Subroutine2
      12  ?Subroutine3
      12  ?Subroutine4
      10  ?Subroutine5
      10  ?Subroutine6
      12  ?Subroutine7
      12  ?Subroutine8
      12  ?Subroutine9
     516  ?_0
      48  ADD_S16
     158  CrssCor
     162  DFT
       4  Data
   38304  DataFFT
          bufferFFTSum
          fbufferOut
          fbuffer
     210  Decimation
     370  Delay_Sum_FFT
       4  EnergySound
       2  FFT_SUM
      22  FactorUpd
       8  InOld
          InOld1
          Out_Old
          Out_Old1
       8  InOld
          InOld1
          Out_Old
          Out_Old1
       4  Initial_Array
      62  LowPass
     108  LowPass2ndOder
     106  LowPass2ndOder_1
      54  LowPassIIR
       2  OutOld
       2  Out_Old
     112  PCM2PDM
     114  PDM2PCM
      86  Precalculation
      48  SUB_S16
      60  Std_AutoCorr
      54  Std_CrssCor
      58  Std_MatCorr
      86  Window
     268  iRing
          OutRing
          Data_Old
     120  iirFilter
     276  lowpassFIR
     246  rDFT

 
 38 604 bytes in section .bss
  3 326 bytes in section .text
 
  3 230 bytes of CODE memory (+ 96 bytes shared)
 38 604 bytes of DATA memory

Errors: none
Warnings: none
