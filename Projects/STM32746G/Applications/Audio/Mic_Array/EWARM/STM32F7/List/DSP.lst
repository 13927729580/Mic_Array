###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       22/Feb/2016  14:50:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\DSP.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\DSP.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c
      1          #include "DSP.h"
                                ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2          #include "main.h"
      3          #include <math.h>
      4          #include <stdlib.h>
      5          #include "arm_math.h"
      6          
      7          
      8          //#include <malloc.h>
      9          
     10          extern int16_t PreCalcBuff[129][256]; /* 1byte have 256 values */
     11          
     12          
     13          /* Manual calculation */
     14          //#define A0     10000
     15          //#define A1   (-19322)
     16          //#define A2   (9344)
     17          
     18          //#define B0   (6)
     19          //#define B1   2*B0
     20          //#define B2   B0
     21          
     22          //#define FLOATING_POINT
     23          
     24          
     25          /* ******************* MATLAB comuptation ***********************
     26          case 1: [b,a] = [b,a] = cheby2(2,60,1/32);
     27                 b	0.0010   -0.0020    0.0010
     28                 a	1.0000   -1.9938    0.9938
     29          case 2: [b,a] = butter(2,1/256); --> cut to 64Khz
     30                 b    3.73251989292944e-05	7.46503978585889e-05	3.73251989292944e-05
     31                 a    1	-1.98264541850412	0.982794719299834
     32          
     33          *****************************************************************/
     34          
     35          #ifdef FLOATING_POINT
     36          
     37            #define A0   (1)
     38            #define A1   (-1.9826)
     39            #define A2   0.9828
     40          
     41            #define B0   (3.7325e-05)                
     42            #define B1   (7.4650e-05)       
     43            #define B2   (3.7325e-05)                
     44          #else
     45            #define A0   (10000)
     46            #define A1   (-19322)
     47            #define A2   9322
     48          
     49            #define B0   (6)                
     50            #define B1   (12)       
     51            #define B2   (6) 
     52          
     53          #endif
     54          
     55          
     56          
     57          
     58          
     59          /*
     60          float Coef[129] = { 
     61          -0.02340  ,-0.06595  ,-0.02743  ,0.01425  ,-0.03335  ,-0.08782  ,-0.04168  ,0.01282  ,-0.05293  ,-0.13171 ,
     62          -0.06756  ,0.01115  ,-0.08598  ,-0.20323  ,-0.10855  ,0.00800  ,-0.13553  ,-0.30735  ,-0.16711  ,0.00362 ,
     63          -0.20339  ,-0.44812  ,-0.24434  ,0.00021  ,-0.28985  ,-0.62873  ,-0.33968  ,0.00256  ,-0.39350  ,-0.85181 ,
     64          -0.45087  ,0.01875  ,-0.51123  ,-1.12042  ,-0.57396  ,0.06130  ,-0.63834  ,-1.43986  ,-0.70359  ,0.14924 ,
     65          -0.76886  ,-1.82151  ,-0.83329  ,0.31292  ,-0.89598  ,-2.29113  ,-0.95603  ,0.60590  ,-1.01255  ,-2.90980 ,
     66          -1.06471  ,1.13962  ,-1.11170  ,-3.83936  ,-1.15280  ,2.21212  ,-1.18736  ,-5.63026  ,-1.21482  ,5.05728 ,
     67          -1.23477  ,-11.80705  ,-1.24686  ,30.58676  ,48.78572  ,30.58676  ,-1.24686  ,-11.80705  ,-1.23477  ,5.05728 ,
     68          -1.21482  ,-5.63026  ,-1.18736  ,2.21212  ,-1.15280  ,-3.83936  ,-1.11170  ,1.13962  ,-1.06471  ,-2.90980 ,
     69          -1.01255  ,0.60590  ,-0.95603  ,-2.29113  ,-0.89598  ,0.31292  ,-0.83329  ,-1.82151  ,-0.76886  ,0.14924 ,
     70          -0.70359  ,-1.43986  ,-0.63834  ,0.06130  ,-0.57396  ,-1.12042  ,-0.51123  ,0.01875  ,-0.45087  ,-0.85181 ,
     71          -0.39350  ,0.00256  ,-0.33968  ,-0.62873  ,-0.28985  ,0.00021  ,-0.24434  ,-0.44812  ,-0.20339  ,0.00362 ,
     72          -0.16711  ,-0.30735  ,-0.13553  ,0.00800  ,-0.10855  ,-0.20323  ,-0.08598  ,0.01115  ,-0.06756  ,-0.13171 ,
     73          -0.05293  ,0.01282  ,-0.04168  ,-0.08782  ,-0.03335  ,0.01425  ,-0.02743  ,-0.06595  ,-0.02340 };
     74          
     75          */
     76          /*
     77          int32_t Coef[129] = { 
     78          -234  ,-659  ,-274  ,142  ,-333  ,-878  ,-416  ,128  ,-529  ,-1317 ,
     79          -675  ,111  ,-859  ,-2032  ,-1085  ,80  ,-1355  ,-3073  ,-1671  ,36 ,
     80          -2033  ,-4481  ,-2443  ,2  ,-2898  ,-6287  ,-3396  ,25  ,-3935  ,-8518 ,
     81          -4508  ,187  ,-5112  ,-11204  ,-5739  ,612  ,-6383  ,-14398  ,-7035  ,1492 ,
     82          -7688  ,-18215  ,-8332  ,3129  ,-8959  ,-22911  ,-9560  ,6059  ,-10125  ,-29097 ,
     83          -10647  ,11396  ,-11117  ,-38393  ,-11527  ,22121  ,-11873  ,-56302  ,-12148  ,50572 ,
     84          -12347  ,-118070  ,-12468  ,305867  ,487857  ,305867  ,-12468  ,-118070  ,-12347  ,50572 ,
     85          -12148  ,-56302  ,-11873  ,22121  ,-11527  ,-38393  ,-11117  ,11396  ,-10647  ,-29097 ,
     86          -10125  ,6059  ,-9560  ,-22911  ,-8959  ,3129  ,-8332  ,-18215  ,-7688  ,1492 ,
     87          -7035  ,-14398  ,-6383  ,612  ,-5739  ,-11204  ,-5112  ,187  ,-4508  ,-8518 ,
     88          -3935  ,25  ,-3396  ,-6287  ,-2898  ,2  ,-2443  ,-4481  ,-2033  ,36 ,
     89          -1671  ,-3073  ,-1355  ,80  ,-1085  ,-2032  ,-859  ,111  ,-675  ,-1317 ,
     90          -529  ,128  ,-416  ,-878  ,-333  ,142  ,-274  ,-659  ,-234 };
     91          
     92          */
     93          
     94          
     95          
     96          /* 
     97          Library:
     98          https://github.com/piratfm/codec2_m4f/tree/master/lib
     99          */
    100          
    101          
    102          /*--------------EXTERN VARIABLES-----------------------------------------------------------------------------*/
    103          
    104          #if MAIN_CRSCORR
    105          extern arm_rfft_instance_q15 RealFFT_Ins, RealIFFT_Ins;
    106          #endif
    107          
    108          extern arm_cfft_radix4_instance_f32 SS1,SS2,SS3,SS4,ISS; 
    109          extern arm_rfft_instance_f32 S1,S2,S3,S4,IS;
    110          //extern arm_rfft_fast_instance_f32 S1,S2,S3,S4,IS;
    111          
    112          /*------------------------------------------------------------------------------------------------------------*/
    113          /*--------------------- VARIABLES-----------------------------------------------------------------------------*/
    114          

   \                                 In section .bss, align 4
    115          float bufferFFTSum[AUDIO_OUT_BUFFER_SIZE+100];  //storage the SUM in Furier domain
    116          float fbufferOut[AUDIO_OUT_BUFFER_SIZE+100];    //storage the output buffer in float type
    117          float fbuffer[AUDIO_OUT_BUFFER_SIZE+100];       //storage the input buffer in float type
    118          Mic_Array_Data_f  DataFFT;                  //storage DFT's coefficients for microphones
   \                     DataFFT:
   \   00000000                      DS8 33088
   \                     bufferFFTSum:
   \   00008140                      DS8 4496
   \                     fbufferOut:
   \   000092D0                      DS8 4496
   \                     fbuffer:
   \   0000A460                      DS8 4496

   \                                 In section .bss, align 4
    119          uint32_t EnergySound;
   \                     EnergySound:
   \   00000000                      DS8 4
    120          /*------------------------------------------------------------------------------------------------------------*/
    121          /* Discreate Fourier Transform */

   \                                 In section .text, align 4, keep-with-next
    122          void DFT (float *x, float *Out, int N)
    123          {
   \                     DFT: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x4692             MOV      R10,R2
    124          	int m,n;
    125          	
    126          	for(m=0; m<N; m++)  // update for e very bar 
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xB081             SUB      SP,SP,#+4
   \   0000000A   0xF1BA 0x0F01      CMP      R10,#+1
   \   0000000E   0x4683             MOV      R11,R0
   \   00000010   0xED2D 0x8B02      VPUSH    {D8}
   \   00000014   0xDB56             BLT.N    ??DFT_0
   \   00000016   0x460C             MOV      R4,R1
    127          	{
    128          		Out[2*m]  = Out[2*m+1] = 0;
   \                     ??DFT_1: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
    129          		
    130          		for (n  =0; n<N; n++) //
   \   0000001A   0xEE00 0x5A10      VMOV     S0,R5
   \   0000001E   0x6060             STR      R0,[R4, #+4]
   \   00000020   0x2600             MOVS     R6,#+0
   \   00000022   0x6020             STR      R0,[R4, #+0]
   \   00000024   0xEA4F 0x070B      MOV.W    R7,R11
   \   00000028   0xEEB8 0x8AC0      VCVT.F32.S32 S16,S0
   \                     ??DFT_2: (+1)
   \   0000002C   0xEE18 0x0A10      VMOV     R0,S16
   \   00000030   0x.... 0x....      BL       __aeabi_f2d
   \   00000034   0x.... 0x....      LDR.W    R2,??DataTable14  ;; 0x5a7ed197
   \   00000038   0x.... 0x....      LDR.W    R3,??DataTable14_1  ;; 0x401921fb
   \   0000003C   0x.... 0x....      BL       __aeabi_dmul
   \   00000040   0xEE00 0x6A10      VMOV     S0,R6
   \   00000044   0x4680             MOV      R8,R0
   \   00000046   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000004A   0x4689             MOV      R9,R1
   \   0000004C   0xEE10 0x0A10      VMOV     R0,S0
   \   00000050   0x1C76             ADDS     R6,R6,#+1
   \   00000052   0x.... 0x....      BL       __aeabi_f2d
   \   00000056   0x4642             MOV      R2,R8
   \   00000058   0x464B             MOV      R3,R9
   \   0000005A   0x.... 0x....      BL       __aeabi_dmul
   \   0000005E   0xEE00 0xAA10      VMOV     S0,R10
   \   00000062   0x4680             MOV      R8,R0
   \   00000064   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000068   0x4689             MOV      R9,R1
   \   0000006A   0xEE10 0x0A10      VMOV     R0,S0
   \   0000006E   0x.... 0x....      BL       __aeabi_f2d
   \   00000072   0x4602             MOV      R2,R0
   \   00000074   0x460B             MOV      R3,R1
   \   00000076   0x4640             MOV      R0,R8
   \   00000078   0x4649             MOV      R1,R9
   \   0000007A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000007E   0x.... 0x....      BL       __aeabi_d2f
   \   00000082   0xEE08 0x0A90      VMOV     S17,R0
   \   00000086   0xEEB0 0x0A68      VMOV.F32 S0,S17
    131          		{
    132          		    /* spectrum m: Real[m] = (Sum(x[n]*cos(2*PI*m*n/N)) , where n from 0 -->N    */
    133          			Out[2*m] += x[n]*arm_cos_f32(2*PI*(float)m*(float)n/(float)N);
   \   0000008A   0x.... 0x....      BL       arm_cos_f32
   \   0000008E   0xEDD7 0x0A00      VLDR     S1,[R7, #0]
   \   00000092   0xED94 0x1A00      VLDR     S2,[R4, #0]
   \   00000096   0xEE00 0x1A80      VMLA.F32 S2,S1,S0
   \   0000009A   0xED84 0x1A00      VSTR     S2,[R4, #0]
    134          
    135                      /* specstrum n: Imagine[m] = (Sum(x[n]*sin(2*PI*m*n/N) ,  where n from 0 -->N */			
    136          			Out[2*m+1] -= x[n]*arm_sin_f32(2*PI*(float)m*(float)n/(float)N);
   \   0000009E   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   000000A2   0x.... 0x....      BL       arm_sin_f32
   \   000000A6   0xEDD7 0x0A00      VLDR     S1,[R7, #0]
    137          		}
   \   000000AA   0x1D3F             ADDS     R7,R7,#+4
   \   000000AC   0xED94 0x1A01      VLDR     S2,[R4, #+4]
   \   000000B0   0x4556             CMP      R6,R10
   \   000000B2   0xEE00 0x1AC0      VMLS.F32 S2,S1,S0
   \   000000B6   0xED84 0x1A01      VSTR     S2,[R4, #+4]
   \   000000BA   0xDBB7             BLT.N    ??DFT_2
    138          
    139          	}
   \   000000BC   0x1C6D             ADDS     R5,R5,#+1
   \   000000BE   0x3408             ADDS     R4,R4,#+8
   \   000000C0   0x4555             CMP      R5,R10
   \   000000C2   0xDBA9             BLT.N    ??DFT_1
    140          }
   \                     ??DFT_0: (+1)
   \   000000C4   0xECBD 0x8B02      VPOP     {D8}
   \   000000C8   0xB001             ADD      SP,SP,#+4
   \   000000CA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    141          
    142          /* revert of Discrete Fourier Transform */

   \                                 In section .text, align 4, keep-with-next
    143          void rDFT(int N, int cycles, float *IN, float *out)
    144          {
   \                     rDFT: (+1)
   \   00000000   0xE92D 0x4FF4      PUSH     {R2,R4-R11,LR}
   \   00000004   0x4682             MOV      R10,R0
    145              int n,m;
    146          	
    147              for (n= 0; n < N; n++)
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0xF1BA 0x0F01      CMP      R10,#+1
   \   0000000C   0x468B             MOV      R11,R1
   \   0000000E   0xED2D 0x8B06      VPUSH    {D8-D10}
   \   00000012   0xDB70             BLT.N    ??rDFT_0
   \   00000014   0xEE00 0xAA10      VMOV     S0,R10
   \   00000018   0xEA4F 0x0503      MOV.W    R5,R3
   \   0000001C   0xEEB8 0x8AC0      VCVT.F32.S32 S16,S0
    148          	{
    149                  float xOfn, xOfn_m; // temporary variable for the imagine and real 
    150          		
    151          		xOfn = xOfn_m = 0;
    152          
    153          		for (m = 0; m < N; m++)
   \                     ??rDFT_1: (+1)
   \   00000020   0xEE00 0x4A10      VMOV     S0,R4
   \   00000024   0x2600             MOVS     R6,#+0
   \   00000026   0xED9F 0x....      VLDR.W   S18,??DataTable5  ;; 0x0
   \   0000002A   0x9F06             LDR      R7,[SP, #+24]
   \   0000002C   0xEDDF 0x....      VLDR.W   S17,??DataTable5  ;; 0x0
   \   00000030   0xEEF8 0x9AC0      VCVT.F32.S32 S19,S0
   \                     ??rDFT_2: (+1)
   \   00000034   0x4658             MOV      R0,R11
   \   00000036   0x.... 0x....      BL       __aeabi_i2d
   \   0000003A   0x.... 0x....      LDR.W    R2,??DataTable14  ;; 0x5a7ed197
   \   0000003E   0x.... 0x....      LDR.W    R3,??DataTable14_1  ;; 0x401921fb
   \   00000042   0x.... 0x....      BL       __aeabi_dmul
   \   00000046   0xEE00 0x6A10      VMOV     S0,R6
   \   0000004A   0x4680             MOV      R8,R0
   \   0000004C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000050   0x4689             MOV      R9,R1
   \   00000052   0xEE10 0x0A10      VMOV     R0,S0
   \   00000056   0x1C76             ADDS     R6,R6,#+1
   \   00000058   0x.... 0x....      BL       __aeabi_f2d
   \   0000005C   0x4642             MOV      R2,R8
   \   0000005E   0x464B             MOV      R3,R9
   \   00000060   0x.... 0x....      BL       __aeabi_dmul
   \   00000064   0x4680             MOV      R8,R0
   \   00000066   0x4689             MOV      R9,R1
   \   00000068   0xEE19 0x0A90      VMOV     R0,S19
   \   0000006C   0x.... 0x....      BL       __aeabi_f2d
   \   00000070   0x4642             MOV      R2,R8
   \   00000072   0x464B             MOV      R3,R9
   \   00000074   0x.... 0x....      BL       __aeabi_dmul
   \   00000078   0x4680             MOV      R8,R0
   \   0000007A   0x4689             MOV      R9,R1
   \   0000007C   0xEE18 0x0A10      VMOV     R0,S16
   \   00000080   0x.... 0x....      BL       __aeabi_f2d
   \   00000084   0x4602             MOV      R2,R0
   \   00000086   0x460B             MOV      R3,R1
   \   00000088   0x4640             MOV      R0,R8
   \   0000008A   0x4649             MOV      R1,R9
   \   0000008C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000090   0x.... 0x....      BL       __aeabi_d2f
   \   00000094   0xEE0A 0x0A10      VMOV     S20,R0
   \   00000098   0xEEB0 0x0A4A      VMOV.F32 S0,S20
    154          		{
    155          		    xOfn += IN[2*m]*arm_cos_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   0000009C   0x.... 0x....      BL       arm_cos_f32
   \   000000A0   0xEDD7 0x0A00      VLDR     S1,[R7, #0]
   \   000000A4   0xEE40 0x8A80      VMLA.F32 S17,S1,S0
    156          		    xOfn -= IN[2*m+1]*arm_sin_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   000000A8   0xEEB0 0x0A4A      VMOV.F32 S0,S20
   \   000000AC   0x.... 0x....      BL       arm_sin_f32
   \   000000B0   0xEDD7 0x0A01      VLDR     S1,[R7, #+4]
   \   000000B4   0xEE40 0x8AC0      VMLS.F32 S17,S1,S0
    157          
    158                              xOfn_m += IN[2*m]*arm_cos_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   000000B8   0xEEB0 0x0A4A      VMOV.F32 S0,S20
   \   000000BC   0x.... 0x....      BL       arm_cos_f32
   \   000000C0   0xEDD7 0x0A00      VLDR     S1,[R7, #0]
   \   000000C4   0xEE00 0x9A80      VMLA.F32 S18,S1,S0
    159                              xOfn_m += IN[2*m+1]*arm_sin_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   000000C8   0xEEB0 0x0A4A      VMOV.F32 S0,S20
   \   000000CC   0x.... 0x....      BL       arm_sin_f32
   \   000000D0   0xEDD7 0x0A01      VLDR     S1,[R7, #+4]
    160          		}
   \   000000D4   0x3708             ADDS     R7,R7,#+8
   \   000000D6   0x4556             CMP      R6,R10
   \   000000D8   0xEE00 0x9A80      VMLA.F32 S18,S1,S0
   \   000000DC   0xDBAA             BLT.N    ??rDFT_2
    161          
    162          	    xOfn /= N;
    163          		xOfn_m /= N;
    164          
    165                  out[n] = xOfn + xOfn_m; 
   \   000000DE   0xEE88 0x0A88      VDIV.F32 S0,S17,S16
   \   000000E2   0xEEC9 0x0A08      VDIV.F32 S1,S18,S16
   \   000000E6   0xEE30 0x0A20      VADD.F32 S0,S0,S1
    166          
    167          	}
   \   000000EA   0x1C64             ADDS     R4,R4,#+1
   \   000000EC   0xED85 0x0A00      VSTR     S0,[R5, #0]
   \   000000F0   0x1D2D             ADDS     R5,R5,#+4
   \   000000F2   0x4554             CMP      R4,R10
   \   000000F4   0xDB94             BLT.N    ??rDFT_1
    168          }
   \                     ??rDFT_0: (+1)
   \   000000F6   0xECBD 0x8B06      VPOP     {D8-D10}
   \   000000FA   0xB001             ADD      SP,SP,#+4
   \   000000FC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    169          
    170          /****************************** IIR filter *****************************************
    171          *a : point to a coefficiences
    172          AN: Number of a coefficiences
    173          *b : point to b coefficiences
    174          BN: Number of b coefficences
    175          *x: storage input and history of inputs
    176          *y: storage output and history of outpus
    177          index: position value in array of input and output
    178          
    179          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    180          void iirFilter(float* a, int AN, float* b, int BN, float* x, float* y, int index)
    181          {
   \                     iirFilter: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   \   00000002   0x9C05             LDR      R4,[SP, #+20]
    182              int loop;
    183          
    184              *(y+index) = 0;
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x9D06             LDR      R5,[SP, #+24]
    185              
    186              for (loop =0; loop < AN; loop++)
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xF844 0x6025      STR      R6,[R4, R5, LSL #+2]
   \   0000000E   0xDB16             BLT.N    ??iirFilter_0
   \   00000010   0x9E04             LDR      R6,[SP, #+16]
   \   00000012   0x462F             MOV      R7,R5
   \   00000014   0xEB04 0x0C85      ADD      R12,R4,R5, LSL #+2
   \   00000018   0xEB06 0x0685      ADD      R6,R6,R5, LSL #+2
    187              {
    188                  if ((index -loop) >= 0)
   \                     ??iirFilter_1: (+1)
   \   0000001C   0x2F00             CMP      R7,#+0
   \   0000001E   0xD409             BMI.N    ??iirFilter_2
    189          		{
    190          		    *(y+index) += *(a+loop)**(x + index - loop);
   \   00000020   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000024   0xEDD6 0x0A00      VLDR     S1,[R6, #0]
   \   00000028   0xED9C 0x1A00      VLDR     S2,[R12, #0]
   \   0000002C   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000030   0xED8C 0x1A00      VSTR     S2,[R12, #0]
    191          		}
    192              }
   \                     ??iirFilter_2: (+1)
   \   00000034   0x1D00             ADDS     R0,R0,#+4
   \   00000036   0x1E7F             SUBS     R7,R7,#+1
   \   00000038   0x1F36             SUBS     R6,R6,#+4
   \   0000003A   0x1E49             SUBS     R1,R1,#+1
   \   0000003C   0xD1EE             BNE.N    ??iirFilter_1
    193          
    194              for (loop = 1; loop <= BN; loop++)
   \                     ??iirFilter_0: (+1)
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x2B01             CMP      R3,#+1
   \   00000042   0xDB17             BLT.N    ??iirFilter_3
   \   00000044   0xEB04 0x0185      ADD      R1,R4,R5, LSL #+2
   \   00000048   0x1E6E             SUBS     R6,R5,#+1
   \   0000004A   0xEB04 0x0785      ADD      R7,R4,R5, LSL #+2
   \   0000004E   0x1F09             SUBS     R1,R1,#+4
    195              {
    196                  if ((index-loop) >=0)
   \                     ??iirFilter_4: (+1)
   \   00000050   0x2E00             CMP      R6,#+0
   \   00000052   0xD409             BMI.N    ??iirFilter_5
    197          		{
    198          		    *(y + index) +=  *(b + loop - 1)**(y+index-loop);
   \   00000054   0xED92 0x0A00      VLDR     S0,[R2, #0]
   \   00000058   0xEDD1 0x0A00      VLDR     S1,[R1, #0]
   \   0000005C   0xED97 0x1A00      VLDR     S2,[R7, #0]
   \   00000060   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000064   0xED87 0x1A00      VSTR     S2,[R7, #0]
    199          		}
    200              }	
   \                     ??iirFilter_5: (+1)
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0x1D12             ADDS     R2,R2,#+4
   \   0000006C   0x1E76             SUBS     R6,R6,#+1
   \   0000006E   0x1F09             SUBS     R1,R1,#+4
   \   00000070   0x4283             CMP      R3,R0
   \   00000072   0xDAED             BGE.N    ??iirFilter_4
    201          }
   \                     ??iirFilter_3: (+1)
   \   00000074   0xBCF0             POP      {R4-R7}
   \   00000076   0x4770             BX       LR               ;; return
    202          
    203          /** First Oder IIR Lowpass filter 
    204          *Input : input array
    205          *Output: output array
    206          size: number of elements need to update
    207          K: T/dT
    208             T is time constance
    209             dT duration of sampleing 
    210             K= 64
    211          
    212          *****************************8*/
    213          
    214          

   \                                 In section .text, align 4, keep-with-next
    215          void LowPass(int16_t *Input, int16_t *Output, uint16_t Size, uint16_t K)
    216          {
   \                     LowPass: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
    217              
    218              static	int16_t Out_Old;
    219          	int16_t Out=0;
    220          
    221          	for(uint16_t i=0; i<Size; i++)
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable14_2
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xF04F 0x0C00      MOV      R12,#+0
   \   0000000E   0xF9B4 0x5000      LDRSH    R5,[R4, #+0]
   \   00000012   0xD03E             BEQ.N    ??LowPass_0
   \   00000014   0x.... 0x....      LDR.W    R9,??DataTable14_3  ;; 0xffff8000
   \   00000018   0xF647 0x77FF      MOVW     R7,#+32767
    222          	{
    223                  Out = ADD_S16(Out_Old,SUB_S16(*(Input+i), Out_Old)/K);
   \                     ??LowPass_1: (+1)
   \   0000001C   0xF9B0 0xE000      LDRSH    LR,[R0, #+0]
   \   00000020   0xB22D             SXTH     R5,R5
   \   00000022   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000026   0xD406             BMI.N    ??LowPass_2
   \   00000028   0x2D00             CMP      R5,#+0
   \   0000002A   0xD50C             BPL.N    ??LowPass_3
   \   0000002C   0x197E             ADDS     R6,R7,R5
   \   0000002E   0x4576             CMP      R6,LR
   \   00000030   0xDA09             BGE.N    ??LowPass_3
   \   00000032   0x46BE             MOV      LR,R7
   \   00000034   0xE009             B.N      ??LowPass_4
   \                     ??LowPass_2: (+1)
   \   00000036   0x2D01             CMP      R5,#+1
   \   00000038   0xDB05             BLT.N    ??LowPass_3
   \   0000003A   0xF5A5 0x4600      SUB      R6,R5,#+32768
   \   0000003E   0x45B6             CMP      LR,R6
   \   00000040   0xBFB8             IT       LT 
   \   00000042   0x46CE             MOVLT    LR,R9
   \   00000044   0xDB01             BLT.N    ??LowPass_4
   \                     ??LowPass_3: (+1)
   \   00000046   0xEBAE 0x0E05      SUB      LR,LR,R5
   \                     ??LowPass_4: (+1)
   \   0000004A   0xFA0F 0xFE8E      SXTH     LR,LR
   \   0000004E   0x2D00             CMP      R5,#+0
   \   00000050   0xFB9E 0xFEF3      SDIV     LR,LR,R3
   \   00000054   0xBF5C             ITT      PL 
   \   00000056   0xFA0F 0xFE8E      SXTHPL   LR,LR
   \   0000005A   0xF1BE 0x0F00      CMPPL    LR,#+0
   \   0000005E   0xD405             BMI.N    ??LowPass_5
   \   00000060   0xEBA7 0x080E      SUB      R8,R7,LR
   \   00000064   0x45A8             CMP      R8,R5
   \   00000066   0xDA0E             BGE.N    ??LowPass_6
   \   00000068   0x46BC             MOV      R12,R7
   \   0000006A   0xE00E             B.N      ??LowPass_7
   \                     ??LowPass_5: (+1)
   \   0000006C   0x2D00             CMP      R5,#+0
   \   0000006E   0xBF44             ITT      MI 
   \   00000070   0xFA0F 0xFE8E      SXTHMI   LR,LR
   \   00000074   0xF1BE 0x0F00      CMPMI    LR,#+0
   \   00000078   0xD505             BPL.N    ??LowPass_6
   \   0000007A   0xEBA9 0x080E      SUB      R8,R9,LR
   \   0000007E   0x4545             CMP      R5,R8
   \   00000080   0xBFB8             IT       LT 
   \   00000082   0x46CC             MOVLT    R12,R9
   \   00000084   0xDB01             BLT.N    ??LowPass_7
   \                     ??LowPass_6: (+1)
   \   00000086   0xEB0E 0x0C05      ADD      R12,LR,R5
    224          		Out_Old = Out;
    225          	}
   \                     ??LowPass_7: (+1)
   \   0000008A   0x1C80             ADDS     R0,R0,#+2
   \   0000008C   0x1E52             SUBS     R2,R2,#+1
   \   0000008E   0x4665             MOV      R5,R12
   \   00000090   0xD1C4             BNE.N    ??LowPass_1
    226          
    227          	*Output = 30*Out;
   \                     ??LowPass_0: (+1)
   \   00000092   0xEBCC 0x100C      RSB      R0,R12,R12, LSL #+4
   \   00000096   0x8025             STRH     R5,[R4, #+0]
   \   00000098   0x0040             LSLS     R0,R0,#+1
   \   0000009A   0x8008             STRH     R0,[R1, #+0]
    228          
    229          }
   \   0000009C   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return

   \                                 In section .bss, align 2
   \                     ??Out_Old:
   \   00000000                      DS8 2
    230          
    231          #ifdef FLOATING_POINT
    232          void LowPass2ndOder(int16_t *Input, int16_t *Output, uint16_t Size)
    233          {
    234              double Out=0;
    235          	static  int16_t InOld, InOld1;
    236          	static	double Out_Old, Out_Old1;
    237                  uint16_t i;
    238          	 
    239              for(i=0; i<Size; i++)
    240          	{
    241          
    242           	
    243          	  if (i>0)
    244          	  {
    245          	    InOld1 = InOld;
    246          	  	InOld = Input[i-1];
    247          	  }
    248          	  	   
    249          
    250          	  	Out = (B0*Input[i]) + (B1*InOld) + (B2*InOld1)-(A1*Out_Old) - (A2*Out_Old1);
    251          	  
    252          	    Out_Old1 = Out_Old;
    253          		Out_Old = Out;
    254          	}
    255          
    256          	*Output = (int16_t)Out;
    257          
    258              InOld1 = InOld;
    259          	InOld = Input[i-1];
    260          
    261          
    262          
    263          }
    264          
    265          #else

   \                                 In section .text, align 2, keep-with-next
    266          void LowPass2ndOder(int16_t *Input, int16_t *Output, uint16_t Size)
    267          {
   \                     LowPass2ndOder: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
    268              int16_t Out=0;
    269          	static  int16_t InOld, InOld1;
    270          	static	int16_t Out_Old, Out_Old1;
    271                  uint16_t i;
    272          	 
    273              for(i=0; i<Size; i++)
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable14_4
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0xF9B4 0x8002      LDRSH    R8,[R4, #+2]
   \   00000010   0xF9B4 0x9000      LDRSH    R9,[R4, #+0]
   \   00000014   0xF9B4 0xA004      LDRSH    R10,[R4, #+4]
   \   00000018   0xF9B4 0x6006      LDRSH    R6,[R4, #+6]
   \   0000001C   0xB31A             CBZ.N    R2,??LowPass2ndOder_0
   \   0000001E   0x4683             MOV      R11,R0
   \   00000020   0xF242 0x4C6A      MOVW     R12,#+9322
   \   00000024   0x.... 0x....      LDR.W    LR,??DataTable14_5  ;; 0xffffb486
   \   00000028   0xE003             B.N      ??LowPass2ndOder_1
    274          	{
    275          
    276           	
    277          	  if (i>0)
   \                     ??LowPass2ndOder_2: (+1)
   \   0000002A   0xB113             CBZ.N    R3,??LowPass2ndOder_1
    278          	  {
    279          	    InOld1 = InOld;
   \   0000002C   0x46C8             MOV      R8,R9
    280          	  	InOld = Input[i-1];
   \   0000002E   0xF93B 0x9C02      LDRSH    R9,[R11, #-2]
    281          	  }
    282          	  	   
    283          
    284          	  	Out = (int16_t)(((int32_t)(B0*Input[i]) + (int32_t)(B1*InOld) + (int32_t)(B2*InOld1)-(int32_t)(A1*Out_Old) - (int32_t)(A2*Out_Old1))/10000) ;
   \                     ??LowPass2ndOder_1: (+1)
   \   00000032   0xF93B 0x5B02      LDRSH    R5,[R11], #+2
   \   00000036   0xFB16 0xF60C      SMULBB   R6,R6,R12
    285          	  
    286          	    Out_Old1 = Out_Old;
    287          		Out_Old = Out;
    288          	}
   \   0000003A   0x1C5B             ADDS     R3,R3,#+1
   \   0000003C   0xEB08 0x0705      ADD      R7,R8,R5
   \   00000040   0xEB07 0x0547      ADD      R5,R7,R7, LSL #+1
   \   00000044   0xEB09 0x0749      ADD      R7,R9,R9, LSL #+1
   \   00000048   0x00BF             LSLS     R7,R7,#+2
   \   0000004A   0xEB07 0x0545      ADD      R5,R7,R5, LSL #+1
   \   0000004E   0xFB1A 0xF70E      SMULBB   R7,R10,LR
   \   00000052   0x1BED             SUBS     R5,R5,R7
   \   00000054   0x1BAE             SUBS     R6,R5,R6
   \   00000056   0xF242 0x7510      MOVW     R5,#+10000
   \   0000005A   0x4293             CMP      R3,R2
   \   0000005C   0xFB96 0xF5F5      SDIV     R5,R6,R5
   \   00000060   0x4656             MOV      R6,R10
   \   00000062   0x46AA             MOV      R10,R5
   \   00000064   0xDBE1             BLT.N    ??LowPass2ndOder_2
   \                     ??LowPass2ndOder_0: (+1)
   \   00000066   0x80E6             STRH     R6,[R4, #+6]
    289          
    290          	*Output = (int16_t)Out;
    291          
    292              InOld1 = InOld;
    293          	InOld = Input[i-1];
   \   00000068   0xEB00 0x0043      ADD      R0,R0,R3, LSL #+1
   \   0000006C   0xF8A4 0xA004      STRH     R10,[R4, #+4]
   \   00000070   0x800D             STRH     R5,[R1, #+0]
   \   00000072   0xF8A4 0x9002      STRH     R9,[R4, #+2]
   \   00000076   0xF830 0x0C02      LDRH     R0,[R0, #-2]
   \   0000007A   0x8020             STRH     R0,[R4, #+0]
    294          
    295          
    296          
    297          }
   \   0000007C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .bss, align 2
   \                     ??InOld:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   00000004                      DS8 2
   \   00000006                      DS8 2
    298          
    299          #endif
    300          
    301          
    302          
    303          

   \                                 In section .text, align 2, keep-with-next
    304          void LowPass2ndOder_1(int16_t *Input, int16_t *Output, uint16_t Size)
    305          {
   \                     LowPass2ndOder_1: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
    306              int16_t Out=0;
    307          	static  int16_t InOld, InOld1;
    308          	static	int16_t Out_Old, Out_Old1;
    309                  uint16_t i;
    310          	 
    311              for(i=0; i<Size; i++)
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable14_6
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0xF9B4 0x8002      LDRSH    R8,[R4, #+2]
   \   00000010   0xF9B4 0x9000      LDRSH    R9,[R4, #+0]
   \   00000014   0xF9B4 0xA004      LDRSH    R10,[R4, #+4]
   \   00000018   0xF9B4 0x6006      LDRSH    R6,[R4, #+6]
   \   0000001C   0xB31A             CBZ.N    R2,??LowPass2ndOder_1_0
   \   0000001E   0x4683             MOV      R11,R0
   \   00000020   0xF242 0x4C6A      MOVW     R12,#+9322
   \   00000024   0x.... 0x....      LDR.W    LR,??DataTable14_5  ;; 0xffffb486
   \   00000028   0xE003             B.N      ??LowPass2ndOder_1_1
    312          	{
    313          
    314           	
    315          	  if (i>0)
   \                     ??LowPass2ndOder_1_2: (+1)
   \   0000002A   0xB113             CBZ.N    R3,??LowPass2ndOder_1_1
    316          	  {
    317          	    InOld1 = InOld;
   \   0000002C   0x46C8             MOV      R8,R9
    318          	  	InOld = Input[i-1];
   \   0000002E   0xF93B 0x9C02      LDRSH    R9,[R11, #-2]
    319          	  } 
    320          	  	   
    321          
    322          	  	Out = (int16_t)(((int32_t)(B0*Input[i]) + (int32_t)(B1*InOld) + (int32_t)(B2*InOld1)-(int32_t)(A1*Out_Old) - (int32_t)(A2*Out_Old1))/1000) ; /* gain 10) */
   \                     ??LowPass2ndOder_1_1: (+1)
   \   00000032   0xF93B 0x5B02      LDRSH    R5,[R11], #+2
   \   00000036   0xFB16 0xF60C      SMULBB   R6,R6,R12
    323          	  
    324          	    Out_Old1 = Out_Old;
    325          		Out_Old = Out;
    326          	}
   \   0000003A   0x1C5B             ADDS     R3,R3,#+1
   \   0000003C   0xEB08 0x0705      ADD      R7,R8,R5
   \   00000040   0xEB07 0x0547      ADD      R5,R7,R7, LSL #+1
   \   00000044   0xEB09 0x0749      ADD      R7,R9,R9, LSL #+1
   \   00000048   0x00BF             LSLS     R7,R7,#+2
   \   0000004A   0xEB07 0x0545      ADD      R5,R7,R5, LSL #+1
   \   0000004E   0xFB1A 0xF70E      SMULBB   R7,R10,LR
   \   00000052   0x1BED             SUBS     R5,R5,R7
   \   00000054   0x1BAE             SUBS     R6,R5,R6
   \   00000056   0xF44F 0x757A      MOV      R5,#+1000
   \   0000005A   0x4293             CMP      R3,R2
   \   0000005C   0xFB96 0xF5F5      SDIV     R5,R6,R5
   \   00000060   0x4656             MOV      R6,R10
   \   00000062   0x46AA             MOV      R10,R5
   \   00000064   0xDBE1             BLT.N    ??LowPass2ndOder_1_2
   \                     ??LowPass2ndOder_1_0: (+1)
   \   00000066   0x80E6             STRH     R6,[R4, #+6]
    327          
    328          	*Output = (int16_t)Out;
    329          
    330              InOld1 = InOld;
    331          	InOld = Input[i-1];
   \   00000068   0xEB00 0x0043      ADD      R0,R0,R3, LSL #+1
   \   0000006C   0xF8A4 0xA004      STRH     R10,[R4, #+4]
   \   00000070   0x800D             STRH     R5,[R1, #+0]
   \   00000072   0xF8A4 0x9002      STRH     R9,[R4, #+2]
   \   00000076   0xF830 0x0C02      LDRH     R0,[R0, #-2]
   \   0000007A   0x8020             STRH     R0,[R4, #+0]
    332          
    333          
    334          	
    335          }
   \   0000007C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .bss, align 2
   \                     ??InOld_1:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   00000004                      DS8 2
   \   00000006                      DS8 2
    336          

   \                                 In section .text, align 4, keep-with-next
    337          void LowPassIIR(int16_t *Input, int16_t *Output,int16_t *OutOld, uint16_t Size, uint16_t K)
    338          {
    339              
    340              //static	int16_t OutOld;
    341          
    342          	for(uint16_t i=0; i<Size; i++)
   \                     LowPassIIR: (+1)
   \   00000000   0xB903             CBNZ.N   R3,??LowPassIIR_0
   \   00000002   0x4770             BX       LR
   \                     ??LowPassIIR_0: (+1)
   \   00000004   0xE92D 0x45F0      PUSH     {R4-R8,R10,LR}
   \   00000008   0xB081             SUB      SP,SP,#+4
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable14_3  ;; 0xffff8000
   \   0000000E   0xF647 0x78FF      MOVW     R8,#+32767
   \   00000012   0x9C08             LDR      R4,[SP, #+32]
    343          	{
    344                  *(Output+i) = ADD_S16(*OutOld , SUB_S16(*(Input+i),*OutOld)/(K));
   \                     ??LowPassIIR_1: (+1)
   \   00000014   0xF9B0 0x6000      LDRSH    R6,[R0, #+0]
   \   00000018   0xF9B2 0xC000      LDRSH    R12,[R2, #+0]
   \   0000001C   0x2E00             CMP      R6,#+0
   \   0000001E   0xD408             BMI.N    ??LowPassIIR_2
   \   00000020   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000024   0xD50E             BPL.N    ??LowPassIIR_3
   \   00000026   0xEB08 0x0A0C      ADD      R10,R8,R12
   \   0000002A   0x45B2             CMP      R10,R6
   \   0000002C   0xDA0A             BGE.N    ??LowPassIIR_3
   \   0000002E   0x46C6             MOV      LR,R8
   \   00000030   0xE00A             B.N      ??LowPassIIR_4
   \                     ??LowPassIIR_2: (+1)
   \   00000032   0xF1BC 0x0F01      CMP      R12,#+1
   \   00000036   0xDB05             BLT.N    ??LowPassIIR_3
   \   00000038   0xF5AC 0x4A00      SUB      R10,R12,#+32768
   \   0000003C   0x4556             CMP      R6,R10
   \   0000003E   0xBFB8             IT       LT 
   \   00000040   0x46AE             MOVLT    LR,R5
   \   00000042   0xDB01             BLT.N    ??LowPassIIR_4
   \                     ??LowPassIIR_3: (+1)
   \   00000044   0xEBA6 0x0E0C      SUB      LR,R6,R12
   \                     ??LowPassIIR_4: (+1)
   \   00000048   0xFA0F 0xFE8E      SXTH     LR,LR
   \   0000004C   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000050   0xFB9E 0xFEF4      SDIV     LR,LR,R4
   \   00000054   0xBF5C             ITT      PL 
   \   00000056   0xFA0F 0xFE8E      SXTHPL   LR,LR
   \   0000005A   0xF1BE 0x0F00      CMPPL    LR,#+0
   \   0000005E   0xD405             BMI.N    ??LowPassIIR_5
   \   00000060   0xEBA8 0x060E      SUB      R6,R8,LR
   \   00000064   0x4566             CMP      R6,R12
   \   00000066   0xDA0F             BGE.N    ??LowPassIIR_6
   \   00000068   0x4647             MOV      R7,R8
   \   0000006A   0xE00F             B.N      ??LowPassIIR_7
   \                     ??LowPassIIR_5: (+1)
   \   0000006C   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000070   0xBF44             ITT      MI 
   \   00000072   0xFA0F 0xFE8E      SXTHMI   LR,LR
   \   00000076   0xF1BE 0x0F00      CMPMI    LR,#+0
   \   0000007A   0xD505             BPL.N    ??LowPassIIR_6
   \   0000007C   0xEBA5 0x060E      SUB      R6,R5,LR
   \   00000080   0x45B4             CMP      R12,R6
   \   00000082   0xBFB8             IT       LT 
   \   00000084   0x462F             MOVLT    R7,R5
   \   00000086   0xDB01             BLT.N    ??LowPassIIR_7
   \                     ??LowPassIIR_6: (+1)
   \   00000088   0xEB0E 0x070C      ADD      R7,LR,R12
   \                     ??LowPassIIR_7: (+1)
   \   0000008C   0x800F             STRH     R7,[R1, #+0]
    345          		*OutOld = *(Output+i);
   \   0000008E   0xF831 0x7B02      LDRH     R7,[R1], #+2
    346          	}
   \   00000092   0x1C80             ADDS     R0,R0,#+2
   \   00000094   0x1E5B             SUBS     R3,R3,#+1
   \   00000096   0x8017             STRH     R7,[R2, #+0]
   \   00000098   0xD1BC             BNE.N    ??LowPassIIR_1
    347          }
   \   0000009A   0xB001             ADD      SP,SP,#+4
   \   0000009C   0xE8BD 0x85F0      POP      {R4-R8,R10,PC}   ;; return
    348          
    349          

   \                                 In section .text, align 4, keep-with-next
    350          void Decimation(uint8_t *Input, int16_t *Output, int16_t PreCalcBuff[129][256]) //128 bytes input 32 bytes output
    351          {
   \                     Decimation: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xF5AD 0x7D02      SUB      SP,SP,#+520
   \   00000008   0x4605             MOV      R5,R0
   \   0000000A   0x460C             MOV      R4,R1
    352              uint8_t test, IndexIn=0;
    353              int16_t Sigma;
    354          	static int16_t OutRing[129];
    355          	static int16_t iRing=0;
    356          //	static int32_t TempU32;
    357          	static float Data, Data_Old;
    358          	float Coef[129] = { 
    359          -0.000  ,-1.560  ,-2.990  ,-4.104  ,-4.722  ,-4.683  ,-3.880  ,-2.288  ,0.000  ,2.755 ,
    360          5.609  ,8.085  ,9.660  ,9.851  ,8.317  ,4.960  ,-0.000  ,-6.000  ,-12.166  ,-17.414 ,
    361          -20.614  ,-20.795  ,-17.350  ,-10.219  ,0.000  ,12.048  ,24.119  ,34.098  ,39.884  ,39.773 ,
    362          32.823  ,19.134  ,-0.000  ,-22.146  ,-43.977  ,-61.716  ,-71.720  ,-71.119  ,-58.413  ,-33.924 ,
    363          0.000  ,39.086  ,77.572  ,108.935  ,126.848  ,126.222  ,104.203  ,60.939  ,-0.000  ,-71.661 ,
    364          -144.245  ,-206.111  ,-245.139  ,-250.303  ,-213.240  ,-129.604  ,0.000  ,169.645  ,368.369  ,581.105 ,
    365          790.173  ,977.157  ,1124.942  ,1219.655  ,1252.270  ,1219.655  ,1124.942  ,977.157  ,790.173  ,581.105 ,
    366          368.369  ,169.645  ,0.000  ,-129.604  ,-213.240  ,-250.303  ,-245.139  ,-206.111  ,-144.245  ,-71.661 ,
    367          -0.000  ,60.939  ,104.203  ,126.222  ,126.848  ,108.935  ,77.572  ,39.086  ,0.000  ,-33.924 ,
    368          -58.413  ,-71.119  ,-71.720  ,-61.716  ,-43.977  ,-22.146  ,-0.000  ,19.134  ,32.823  ,39.773 ,
    369          39.884  ,34.098  ,24.119  ,12.048  ,0.000  ,-10.219  ,-17.350  ,-20.795  ,-20.614  ,-17.414 ,
    370          -12.166  ,-6.000  ,-0.000  ,4.960  ,8.317  ,9.851  ,9.660  ,8.085  ,5.609  ,2.755 ,
    371          0.000  ,-2.288  ,-3.880  ,-4.683  ,-4.722  ,-4.104  ,-2.990  ,-1.560  ,-0.000  };
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x.... 0x....      ADR.W    R1,?_0
   \   00000012   0xF44F 0x7201      MOV      R2,#+516
   \   00000016   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000001A   0x2600             MOVS     R6,#+0
    372          
    373          	for (uint8_t i=0;i<16; i++) //index of output sample 16 ouput
   \   0000001C   0x2010             MOVS     R0,#+16
   \   0000001E   0xED9F 0x....      VLDR.W   S0,??DataTable10  ;; 0xc2c80000
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   00000026   0xEDDF 0x....      VLDR.W   S1,??DataTable10_1  ;; 0x42c80000
    374          	{
    375          
    376          	   Sigma = 0;
   \                     ??Decimation_0: (+1)
   \   0000002A   0x2700             MOVS     R7,#+0
    377          	   
    378          
    379          	   for (uint8_t j=0; j<8; j++)  // load byte by byte from Input array 8
   \   0000002C   0x2208             MOVS     R2,#+8
    380          	   {
    381          	       test = Input[IndexIn++];
   \                     ??Decimation_1: (+1)
   \   0000002E   0xB2F6             UXTB     R6,R6
    382          		   
    383          		   for (uint8_t k=0; k<8; k++)  // this loop for 1 byte
   \   00000030   0xED91 0x1A42      VLDR     S2,[R1, #+264]
   \   00000034   0xF04F 0x0C08      MOV      R12,#+8
   \   00000038   0x5D73             LDRB     R3,[R6, R5]
   \   0000003A   0x1C76             ADDS     R6,R6,#+1
    384          		   {
    385               			if ((test&0x01)==0x01)
   \                     ??Decimation_2: (+1)
   \   0000003C   0xEA5F 0x7EC3      LSLS     LR,R3,#+31
    386               			{
    387               			    //Sigma +=2;
    388               			    Data = Data_Old + (100 - Data_Old)/200;	
    389               			}
    390               			else
    391               			{
    392               			    //Sigma -=2;
    393          					Data = Data_Old + (-100 - Data_Old)/200;		
   \   00000040   0xED9F 0x....      VLDR.W   S4,??DataTable10_6  ;; 0x43480000
   \   00000044   0xBF4C             ITE      MI 
   \   00000046   0xEE70 0x1AC1      VSUBMI.F32 S3,S1,S2
   \   0000004A   0xEE70 0x1A41      VSUBPL.F32 S3,S0,S2
   \   0000004E   0xEEC1 0x1A82      VDIV.F32 S3,S3,S4
   \   00000052   0xEE31 0x1A81      VADD.F32 S2,S3,S2
    394               			}
    395          
    396          				Data_Old = Data;
    397          
    398          				Sigma += (int16_t)(Data); 
    399               
    400               			test >>= 1; /* go to next bit in "test" to convolution */
   \   00000056   0x085B             LSRS     R3,R3,#+1
   \   00000058   0xEEFD 0x1AC1      VCVT.S32.F32 S3,S2
    401          		   }
   \   0000005C   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   00000060   0xEE11 0xEA90      VMOV     LR,S3
   \   00000064   0xFA07 0xF78E      SXTAH    R7,R7,LR
   \   00000068   0xD1E8             BNE.N    ??Decimation_2
    402          		   
    403          	   }
   \   0000006A   0x1E52             SUBS     R2,R2,#+1
   \   0000006C   0xED81 0x1A42      VSTR     S2,[R1, #+264]
   \   00000070   0xD1DD             BNE.N    ??Decimation_1
    404          	   
    405          	   OutRing[iRing] = Sigma;
   \   00000072   0x5E8A             LDRSH    R2,[R1, R2]
    406          	   //if (OutRing[iRing] > 127)
    407          	   //{
    408                 //    OutRing[iRing] = 127;
    409          	   //}
    410          	   //else if (OutRing[iRing] < -128)
    411          	   //{
    412                 //    OutRing[iRing] = -128;
    413          	   //}
    414          	   //else
    415          	   //{
    416          	   //    ;
    417          	   //}
    418          	   
    419          
    420                 Output[i] = 0;
    421          
    422             
    423                 for(int16_t ii=0; ii<129;ii++)
   \   00000074   0x46E8             MOV      R8,SP
   \   00000076   0xEB01 0x0E42      ADD      LR,R1,R2, LSL #+1
   \   0000007A   0xF8AE 0x7004      STRH     R7,[LR, #+4]
   \   0000007E   0x2700             MOVS     R7,#+0
   \   00000080   0xF10E 0x0C04      ADD      R12,LR,#+4
   \   00000084   0x8027             STRH     R7,[R4, #+0]
   \   00000086   0xF50E 0x7E83      ADD      LR,LR,#+262
    424                 {
    425                     if (iRing >= ii)
   \                     ??Decimation_3: (+1)
   \   0000008A   0x42BA             CMP      R2,R7
   \   0000008C   0xED98 0x1A00      VLDR     S2,[R8, #0]
   \   00000090   0xF9B4 0x9000      LDRSH    R9,[R4, #+0]
    426                         Output[i] = Output[i] + (int16_t)(OutRing[iRing - ii]*Coef[ii]);//PreCalcBuff[ii][(OutRing[iRing - ii]+128)]; //(OutRing[iRing - ii]*Coef[ii])
    427                     else
    428                         Output[i] = Output[i] + (int16_t)(OutRing[129 + iRing - ii]*Coef[ii]);//PreCalcBuff[ii][(OutRing[129 + iRing - ii]+128)];  // (OutRing[129 + iRing - ii]*Coef[ii])
    429          		  	   
    430                 }
   \   00000094   0xF108 0x0804      ADD      R8,R8,#+4
   \   00000098   0xBFAC             ITE      GE 
   \   0000009A   0xF9BC 0xA000      LDRSHGE  R10,[R12, #+0]
   \   0000009E   0xF9BE 0xA000      LDRSHLT  R10,[LR, #+0]
   \   000000A2   0xEE01 0xAA90      VMOV     S3,R10
   \   000000A6   0x1C7F             ADDS     R7,R7,#+1
   \   000000A8   0xEEF8 0x1AE1      VCVT.F32.S32 S3,S3
   \   000000AC   0x2F81             CMP      R7,#+129
   \   000000AE   0xEE21 0x1A81      VMUL.F32 S2,S3,S2
   \   000000B2   0xF1AE 0x0E02      SUB      LR,LR,#+2
   \   000000B6   0xEEBD 0x1AC1      VCVT.S32.F32 S2,S2
   \   000000BA   0xF1AC 0x0C02      SUB      R12,R12,#+2
   \   000000BE   0xEE11 0xAA10      VMOV     R10,S2
   \   000000C2   0x44D1             ADD      R9,R10,R9
   \   000000C4   0xF8A4 0x9000      STRH     R9,[R4, #+0]
   \   000000C8   0xDBDF             BLT.N    ??Decimation_3
    431                 
    432          	   
    433                 iRing++;             
   \   000000CA   0x1C52             ADDS     R2,R2,#+1
    434                 if (iRing==129) iRing = 0;  
   \   000000CC   0xB212             SXTH     R2,R2
   \   000000CE   0x2A81             CMP      R2,#+129
   \   000000D0   0xBF08             IT       EQ 
   \   000000D2   0x2200             MOVEQ    R2,#+0
    435          
    436          	}
   \   000000D4   0x1CA4             ADDS     R4,R4,#+2
   \   000000D6   0x1E40             SUBS     R0,R0,#+1
   \   000000D8   0x800A             STRH     R2,[R1, #+0]
   \   000000DA   0xD1A6             BNE.N    ??Decimation_0
    437          }
   \   000000DC   0xF50D 0x7D02      ADD      SP,SP,#+520
   \   000000E0   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return

   \                                 In section .bss, align 4
   \                     ??iRing:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   00000004                      DS8 260
   \   00000108                      DS8 4

   \                                 In section .bss, align 4
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x80000000         DC32 80000000H, 0BFC7AE14H, 0C03F5C29H, 0C08353F8H, 0C0971AA0H
   \              0xBFC7AE14   
   \              0xC03F5C29   
   \              0xC08353F8   
   \              0xC0971AA0   
   \   00000014   0xC095DB23         DC32 0C095DB23H, 0C07851ECH, 0C0126E98H, 0H, 403051ECH, 40B37CEEH
   \              0xC07851EC   
   \              0xC0126E98   
   \              0x00000000   
   \              0x403051EC   
   \              0x40B37CEE   
   \   0000002C   0x41015C29         DC32 41015C29H, 411A8F5CH, 411D9DB2H, 4105126FH, 409EB852H, 80000000H
   \              0x411A8F5C   
   \              0x411D9DB2   
   \              0x4105126F   
   \              0x409EB852   
   \              0x80000000   
   \   00000044   0xC0C00000         DC32 0C0C00000H, 0C142A7F0H, 0C18B4FDFH, 0C1A4E979H, 0C1A65C29H
   \              0xC142A7F0   
   \              0xC18B4FDF   
   \              0xC1A4E979   
   \              0xC1A65C29   
   \   00000058   0xC18ACCCD         DC32 0C18ACCCDH, 0C1238106H, 0H, 4140C49CH, 41C0F3B6H, 4208645AH
   \              0xC1238106   
   \              0x00000000   
   \              0x4140C49C   
   \              0x41C0F3B6   
   \              0x4208645A   
   \   00000070   0x421F8937         DC32 421F8937H, 421F178DH, 42034AC1H, 4199126FH, 80000000H, 0C1B12B02H
   \              0x421F178D   
   \              0x42034AC1   
   \              0x4199126F   
   \              0x80000000   
   \              0xC1B12B02   
   \   00000088   0xC22FE873         DC32 0C22FE873H, 0C276DD2FH, 0C28F70A4H, 0C28E3CEEH, 0C269A6E9H
   \              0xC276DD2F   
   \              0xC28F70A4   
   \              0xC28E3CEE   
   \              0xC269A6E9   
   \   0000009C   0xC207B22D         DC32 0C207B22DH, 0H, 421C5810H, 429B24DDH, 42D9DEB8H, 42FDB22DH
   \              0x00000000   
   \              0x421C5810   
   \              0x429B24DD   
   \              0x42D9DEB8   
   \              0x42FDB22D   
   \   000000B4   0x42FC71AA         DC32 42FC71AAH, 42D067F0H, 4273C189H, 80000000H, 0C28F526FH, 0C3103EB8H
   \              0x42D067F0   
   \              0x4273C189   
   \              0x80000000   
   \              0xC28F526F   
   \              0xC3103EB8   
   \   000000CC   0xC34E1C6A         DC32 0C34E1C6AH, 0C3752396H, 0C37A4D91H, 0C3553D71H, 0C3019AA0H, 0H
   \              0xC3752396   
   \              0xC37A4D91   
   \              0xC3553D71   
   \              0xC3019AA0   
   \              0x00000000   
   \   000000E4   0x4329A51F         DC32 4329A51FH, 43B82F3BH, 441146B8H, 44458B12H, 44744A0CH, 448C9E25H
   \              0x43B82F3B   
   \              0x441146B8   
   \              0x44458B12   
   \              0x44744A0C   
   \              0x448C9E25   
   \   000000FC   0x449874F6         DC32 449874F6H, 449C88A4H, 449874F6H, 448C9E25H, 44744A0CH, 44458B12H
   \              0x449C88A4   
   \              0x449874F6   
   \              0x448C9E25   
   \              0x44744A0C   
   \              0x44458B12   
   \   00000114   0x441146B8         DC32 441146B8H, 43B82F3BH, 4329A51FH, 0H, 0C3019AA0H, 0C3553D71H
   \              0x43B82F3B   
   \              0x4329A51F   
   \              0x00000000   
   \              0xC3019AA0   
   \              0xC3553D71   
   \   0000012C   0xC37A4D91         DC32 0C37A4D91H, 0C3752396H, 0C34E1C6AH, 0C3103EB8H, 0C28F526FH
   \              0xC3752396   
   \              0xC34E1C6A   
   \              0xC3103EB8   
   \              0xC28F526F   
   \   00000140   0x80000000         DC32 80000000H, 4273C189H, 42D067F0H, 42FC71AAH, 42FDB22DH, 42D9DEB8H
   \              0x4273C189   
   \              0x42D067F0   
   \              0x42FC71AA   
   \              0x42FDB22D   
   \              0x42D9DEB8   
   \   00000158   0x429B24DD         DC32 429B24DDH, 421C5810H, 0H, 0C207B22DH, 0C269A6E9H, 0C28E3CEEH
   \              0x421C5810   
   \              0x00000000   
   \              0xC207B22D   
   \              0xC269A6E9   
   \              0xC28E3CEE   
   \   00000170   0xC28F70A4         DC32 0C28F70A4H, 0C276DD2FH, 0C22FE873H, 0C1B12B02H, 80000000H
   \              0xC276DD2F   
   \              0xC22FE873   
   \              0xC1B12B02   
   \              0x80000000   
   \   00000184   0x4199126F         DC32 4199126FH, 42034AC1H, 421F178DH, 421F8937H, 4208645AH, 41C0F3B6H
   \              0x42034AC1   
   \              0x421F178D   
   \              0x421F8937   
   \              0x4208645A   
   \              0x41C0F3B6   
   \   0000019C   0x4140C49C         DC32 4140C49CH, 0H, 0C1238106H, 0C18ACCCDH, 0C1A65C29H, 0C1A4E979H
   \              0x00000000   
   \              0xC1238106   
   \              0xC18ACCCD   
   \              0xC1A65C29   
   \              0xC1A4E979   
   \   000001B4   0xC18B4FDF         DC32 0C18B4FDFH, 0C142A7F0H, 0C0C00000H, 80000000H, 409EB852H
   \              0xC142A7F0   
   \              0xC0C00000   
   \              0x80000000   
   \              0x409EB852   
   \   000001C8   0x4105126F         DC32 4105126FH, 411D9DB2H, 411A8F5CH, 41015C29H, 40B37CEEH, 403051ECH
   \              0x411D9DB2   
   \              0x411A8F5C   
   \              0x41015C29   
   \              0x40B37CEE   
   \              0x403051EC   
   \   000001E0   0x00000000         DC32 0H, 0C0126E98H, 0C07851ECH, 0C095DB23H, 0C0971AA0H, 0C08353F8H
   \              0xC0126E98   
   \              0xC07851EC   
   \              0xC095DB23   
   \              0xC0971AA0   
   \              0xC08353F8   
   \   000001F8   0xC03F5C29         DC32 0C03F5C29H, 0BFC7AE14H, 80000000H
   \              0xBFC7AE14   
   \              0x80000000   
    438          
    439          
    440          

   \                                 In section .text, align 4, keep-with-next
    441          void Window(float *fir64Coff)
    442          {
   \                     Window: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x4604             MOV      R4,R0
    443              for (int i = 0; i < DSP_NUMCOFF; i++) //DSP_NUMCOFF
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xED2D 0x8B08      VPUSH    {D8-D11}
   \   0000000C   0xED9F 0x....      VLDR.W   D8,??DataTable10_2
   \   00000010   0xED9F 0x....      VLDR.W   D9,??DataTable10_3
   \   00000014   0xED9F 0x....      VLDR.W   D10,??DataTable10_4
   \   00000018   0xED9F 0x....      VLDR.W   D11,??DataTable10_5
    444          	{
    445                  //fir64Coff[i] = (double_t)((1 << 10)-1);
    446                  fir64Coff[i] = (float)(1000);
    447          		//Hanning Window (less noise than hamming?
    448                  fir64Coff[i] *= 0.5f * (
    449          		                       1.0f - cos((2.0f * PI * i)/ (DSP_NUMCOFF - 1.0f))  
    450          		                      );
   \                     ??Window_0: (+1)
   \   0000001C   0x4628             MOV      R0,R5
    451          
    452                  //Hamming Window
    453                  //fir64Coff[i] *= 0.54 - 0.46 * cos((2 * M_PI * i) / (64 - 1));
    454                      
    455                  //Nuttall Window
    456                  //fir64Coff[i] *= 0.355768f - 0.487396*cos((2*M_PI*i)/(64 -1)) + 0.144232*cos((4*M_PI*i)/(64-1))-0.012604*cos((6*M_PI*i)/(64-1));
    457            
    458                  //Cosine Window
    459                  //fir64Coff[i] *= sin((M_PI * i)/(64-1));
    460          
    461                  //Blackman Harris            
    462                  //float w = (2 * M_PI * i) / 64;
    463                  //fir64Coff[i] *= 0.422323 - 0.49755 * cos(w) + 0.07922 * cos(2 * w);
    464              }
   \   0000001E   0x1C6D             ADDS     R5,R5,#+1
   \   00000020   0x.... 0x....      BL       __aeabi_i2d
   \   00000024   0xEC53 0x2B1B      VMOV     R2,R3,D11
   \   00000028   0x.... 0x....      BL       __aeabi_dmul
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0x.... 0x....      LDR.W    R3,??DataTable14_8  ;; 0x404f8000
   \   00000032   0x.... 0x....      BL       __aeabi_ddiv
   \   00000036   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      BL       __iar_Sin
   \   00000040   0xEC53 0x2B10      VMOV     R2,R3,D0
   \   00000044   0xEC51 0x0B1A      VMOV     R0,R1,D10
   \   00000048   0x.... 0x....      BL       __aeabi_dsub
   \   0000004C   0xEC53 0x2B19      VMOV     R2,R3,D9
   \   00000050   0x.... 0x....      BL       __aeabi_dmul
   \   00000054   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   00000058   0x.... 0x....      BL       __aeabi_dmul
   \   0000005C   0x.... 0x....      BL       __aeabi_d2f
   \   00000060   0x2D40             CMP      R5,#+64
   \   00000062   0xF844 0x0B04      STR      R0,[R4], #+4
   \   00000066   0xDBD9             BLT.N    ??Window_0
    465          	 //fir64Coff[DSP_NUMCOFF-1] = 0;
    466          }
   \   00000068   0xECBD 0x8B08      VPOP     {D8-D11}
   \   0000006C   0xB001             ADD      SP,SP,#+4
   \   0000006E   0xBD30             POP      {R4,R5,PC}       ;; return
    467          
    468          /*
    469          Wikimedia: PDM algorithm
    470          y[n] = x[n] + e[n] - e[n-1]     --> +/-1 only
    471          
    472          e[n] = y[n] - x[n] + e[n-1]
    473          
    474          y[n]     output sample 
    475          e[n]     error 
    476          e[n-1]   preivous error
    477          
    478          */

   \                                 In section .text, align 2, keep-with-next
    479          void PCM2PDM (int16_t *InBuff, int16_t *OutBuff, int16_t size, float *err)
    480          {		
   \                     PCM2PDM: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    481          	for (int16_t i =0; i< size; i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2A01             CMP      R2,#+1
   \   00000006   0xDB45             BLT.N    ??PCM2PDM_0
   \   00000008   0x4605             MOV      R5,R0
   \   0000000A   0x460E             MOV      R6,R1
   \   0000000C   0x461F             MOV      R7,R3
   \   0000000E   0xE000             B.N      ??PCM2PDM_1
    482          	{
    483          		if (i==0)
   \                     ??PCM2PDM_2: (+1)
   \   00000010   0xB9BC             CBNZ.N   R4,??PCM2PDM_3
    484          		{
    485          		    if (InBuff[i] > 0)
   \                     ??PCM2PDM_1: (+1)
   \   00000012   0xF9B0 0xC000      LDRSH    R12,[R0, #+0]
   \   00000016   0xF1BC 0x0F01      CMP      R12,#+1
   \   0000001A   0xBFAC             ITE      GE 
   \   0000001C   0xF04F 0x0C01      MOVGE    R12,#+1
   \   00000020   0xF04F 0x0C00      MOVLT    R12,#+0
    486          	            OutBuff[i] = 1;
    487          		    else
    488          			    OutBuff[i] = 0; // "-1" is replace by "0"	
   \   00000024   0xF8A1 0xC000      STRH     R12,[R1, #+0]
    489          			err[0] = OutBuff[i] - InBuff[i];
   \   00000028   0xF9B1 0xC000      LDRSH    R12,[R1, #+0]
   \   0000002C   0xF9B0 0xE000      LDRSH    LR,[R0, #+0]
   \   00000030   0xEBAC 0x0C0E      SUB      R12,R12,LR
   \   00000034   0xEE00 0xCA10      VMOV     S0,R12
   \   00000038   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000003C   0xED83 0x0A00      VSTR     S0,[R3, #0]
   \   00000040   0xE022             B.N      ??PCM2PDM_4
    490          		}
    491          		else
    492          		{
    493          			if (InBuff[i] > err[i-1])
   \                     ??PCM2PDM_3: (+1)
   \   00000042   0xF857 0xCC04      LDR      R12,[R7, #-4]
   \   00000046   0xEE00 0xCA10      VMOV     S0,R12
   \   0000004A   0xF9B5 0xC000      LDRSH    R12,[R5, #+0]
   \   0000004E   0xEE00 0xCA90      VMOV     S1,R12
   \   00000052   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000056   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   0000005A   0xEEF1 0xFA10      FMSTAT   
   \   0000005E   0xBF4C             ITE      MI 
   \   00000060   0xF04F 0x0C01      MOVMI    R12,#+1
   \   00000064   0xF04F 0x0C00      MOVPL    R12,#+0
    494          				OutBuff[i] = 1;
    495          			else
    496          				OutBuff[i] = 0; // "-1" is replace by "0"
   \   00000068   0xF8A6 0xC000      STRH     R12,[R6, #+0]
    497          			err[i] = OutBuff[i] - InBuff[i] + err[i-1];
   \   0000006C   0xF9B6 0xC000      LDRSH    R12,[R6, #+0]
   \   00000070   0xF9B5 0xE000      LDRSH    LR,[R5, #+0]
   \   00000074   0xEBAC 0x0C0E      SUB      R12,R12,LR
   \   00000078   0xEE00 0xCA90      VMOV     S1,R12
   \   0000007C   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000080   0xEE30 0x0A80      VADD.F32 S0,S1,S0
   \   00000084   0xED87 0x0A00      VSTR     S0,[R7, #0]
    498          		}
    499          	}	
   \                     ??PCM2PDM_4: (+1)
   \   00000088   0x1C64             ADDS     R4,R4,#+1
   \   0000008A   0x1D3F             ADDS     R7,R7,#+4
   \   0000008C   0x1CB6             ADDS     R6,R6,#+2
   \   0000008E   0x1CAD             ADDS     R5,R5,#+2
   \   00000090   0x4294             CMP      R4,R2
   \   00000092   0xDBBD             BLT.N    ??PCM2PDM_2
    500          }
   \                     ??PCM2PDM_0: (+1)
   \   00000094   0xBDF0             POP      {R4-R7,PC}       ;; return
    501          
    502          /*
    503          PDM = Pulse Density Modulation
    504          PCM - Pulse Code Modulation
    505          convertion from PDM to PCM
    506          http://www.gamedev.net/topic/660509-any-dsp-gurus-pdm-to-pcm-noisealiasingspectral-leakage-problem/
    507          
    508          http://curiouser.cheshireeng.com/2014/11/04/using-a-pdm-microphone/
    509          
    510          https://www.das-labor.org/svn/microcontroller/src-stm32f4xx/serialUSB/Libraries/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_f32.c
    511          
    512            InBuff length  : 128 bytes
    513            Outbuff length : 16x2 bytes
    514          */
    515          
    516          
    517          

   \                                 In section .text, align 4, keep-with-next
    518          void PDM2PCM(uint8_t *InBuff,int16_t *OutBuff,int16_t PreCalcBuff[DSP_NUMBYTECONV][256])
    519          {
   \                     PDM2PCM: (+1)
   \   00000000   0xE92D 0x4DF5      PUSH     {R0,R2,R4-R8,R10,R11,LR}
    520              int32_t BuffInPos = -DSP_NUMBYTECONV/2;
   \   00000004   0xF06F 0x0003      MVN      R0,#+3
    521          	static uint8_t Initial_Array[DSP_NUMBYTECONV/2];
    522          	
    523              for (uint32_t currentSample = 0; currentSample < 16; currentSample++) // go for all the output sample
   \   00000008   0x2210             MOVS     R2,#+16
   \   0000000A   0x.... 0x....      LDR.W    R3,??DataTable14_3  ;; 0xffff8000
   \   0000000E   0xF647 0x78FF      MOVW     R8,#+32767
    524          	{                                                                     // 32*16 = 512 bytes of input steam 
    525                  int16_t stSum=0;
    526          //		int16_t coefficientIndex=0;
    527          
    528                    
    529          		/* First half of frame */
    530                  for (uint16_t i = 0; i < DSP_NUMBYTECONV; i++) // DSP_NUMBYTECONV = 8
   \                     ??PDM2PCM_0: (+1)
   \   00000012   0x9E00             LDR      R6,[SP, #+0]
   \   00000014   0x2500             MOVS     R5,#+0
   \   00000016   0x.... 0x....      LDR.W    R7,??DataTable14_9
   \   0000001A   0xF8DD 0xC004      LDR      R12,[SP, #+4]
   \   0000001E   0x1986             ADDS     R6,R0,R6
   \   00000020   0xF04F 0x0E08      MOV      LR,#+8
    531                  {         
    532          
    533                     	int16_t temp,temp1;                        // temporary variable uses for debug, will be removed in future
    534          
    535                      if (BuffInPos < 0)
   \                     ??PDM2PCM_1: (+1)
   \   00000024   0x2800             CMP      R0,#+0
    536          				temp1 = Initial_Array[i];
    537          			else
    538          			    temp1 = InBuff[BuffInPos];          // stored the value of 1 bytes input which is calculated
    539          
    540          				
    541          			temp = (int16_t)PreCalcBuff[i][temp1];        // convolution for 1 bytes which take from the Pre-calculation array
    542          		
    543                      stSum = ADD_S16(stSum,temp);  //These are the pre-calculated window values
   \   00000026   0xB22D             SXTH     R5,R5
   \   00000028   0xBF4C             ITE      MI 
   \   0000002A   0x783C             LDRBMI   R4,[R7, #+0]
   \   0000002C   0x7834             LDRBPL   R4,[R6, #+0]
   \   0000002E   0xF93C 0x4014      LDRSH    R4,[R12, R4, LSL #+1]
   \   00000032   0x2D00             CMP      R5,#+0
   \   00000034   0xBF58             IT       PL 
   \   00000036   0x2C00             CMPPL    R4,#+0
   \   00000038   0xD405             BMI.N    ??PDM2PCM_2
   \   0000003A   0xEBA8 0x0A04      SUB      R10,R8,R4
   \   0000003E   0x45AA             CMP      R10,R5
   \   00000040   0xDA0B             BGE.N    ??PDM2PCM_3
   \   00000042   0x4645             MOV      R5,R8
   \   00000044   0xE00A             B.N      ??PDM2PCM_4
   \                     ??PDM2PCM_2: (+1)
   \   00000046   0x2D00             CMP      R5,#+0
   \   00000048   0xBF48             IT       MI 
   \   0000004A   0x2C00             CMPMI    R4,#+0
   \   0000004C   0xD505             BPL.N    ??PDM2PCM_3
   \   0000004E   0xEBA3 0x0A04      SUB      R10,R3,R4
   \   00000052   0x4555             CMP      R5,R10
   \   00000054   0xBFB8             IT       LT 
   \   00000056   0x461D             MOVLT    R5,R3
   \   00000058   0xDB00             BLT.N    ??PDM2PCM_4
   \                     ??PDM2PCM_3: (+1)
   \   0000005A   0x1965             ADDS     R5,R4,R5
    544          				
    545                      
    546                      BuffInPos++;  //next byte of the input sample stream:0-->255
   \                     ??PDM2PCM_4: (+1)
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
    547                  }
   \   0000005E   0x1C7F             ADDS     R7,R7,#+1
   \   00000060   0x1C76             ADDS     R6,R6,#+1
   \   00000062   0xF1BE 0x0E01      SUBS     LR,LR,#+1
   \   00000066   0xF50C 0x7C00      ADD      R12,R12,#+512
   \   0000006A   0xD1DB             BNE.N    ??PDM2PCM_1
    548          
    549          		BuffInPos-=DSP_NUMBYTECONV/2;
    550          
    551          		/* Second half of frame */
    552                  for (uint16_t i = 0; i < DSP_NUMBYTECONV; i++) // DSP_NUMBYTECONV = 8
   \   0000006C   0x9F00             LDR      R7,[SP, #+0]
   \   0000006E   0x1F00             SUBS     R0,R0,#+4
   \   00000070   0x2600             MOVS     R6,#+0
   \   00000072   0x19C7             ADDS     R7,R0,R7
    553                  {         
    554          
    555                     	int16_t temp,temp1;                        // temporary variable uses for debug, will be removed in future
    556          
    557          
    558          			temp1 = InBuff[BuffInPos];          // stored the value of 1 bytes input which is calculated
    559          	
    560          			temp = (int16_t)PreCalcBuff[i][temp1];        // convolution for 1 bytes which take from the Pre-calculation array
    561          		
    562                      stSum = ADD_S16(stSum,temp);  //These are the pre-calculated window values
   \                     ??PDM2PCM_5: (+1)
   \   00000074   0xF8DD 0xC004      LDR      R12,[SP, #+4]
   \   00000078   0xF897 0xE000      LDRB     LR,[R7, #+0]
   \   0000007C   0xB22D             SXTH     R5,R5
   \   0000007E   0x2D00             CMP      R5,#+0
   \   00000080   0xEB0C 0x2C46      ADD      R12,R12,R6, LSL #+9
   \   00000084   0xF93C 0xC01E      LDRSH    R12,[R12, LR, LSL #+1]
   \   00000088   0xBF58             IT       PL 
   \   0000008A   0xF1BC 0x0F00      CMPPL    R12,#+0
   \   0000008E   0xD405             BMI.N    ??PDM2PCM_6
   \   00000090   0xEBA8 0x040C      SUB      R4,R8,R12
   \   00000094   0x42AC             CMP      R4,R5
   \   00000096   0xDA0C             BGE.N    ??PDM2PCM_7
   \   00000098   0x4645             MOV      R5,R8
   \   0000009A   0xE00B             B.N      ??PDM2PCM_8
   \                     ??PDM2PCM_6: (+1)
   \   0000009C   0x2D00             CMP      R5,#+0
   \   0000009E   0xBF48             IT       MI 
   \   000000A0   0xF1BC 0x0F00      CMPMI    R12,#+0
   \   000000A4   0xD505             BPL.N    ??PDM2PCM_7
   \   000000A6   0xEBA3 0x040C      SUB      R4,R3,R12
   \   000000AA   0x42A5             CMP      R5,R4
   \   000000AC   0xBFB8             IT       LT 
   \   000000AE   0x461D             MOVLT    R5,R3
   \   000000B0   0xDB00             BLT.N    ??PDM2PCM_8
   \                     ??PDM2PCM_7: (+1)
   \   000000B2   0x4465             ADD      R5,R12,R5
    563          				
    564                      
    565                      BuffInPos++;  //next byte of the input sample stream:0-->255
   \                     ??PDM2PCM_8: (+1)
   \   000000B4   0x1C40             ADDS     R0,R0,#+1
    566                  }
   \   000000B6   0x1C76             ADDS     R6,R6,#+1
   \   000000B8   0x1C7F             ADDS     R7,R7,#+1
   \   000000BA   0x2E08             CMP      R6,#+8
   \   000000BC   0xDBDA             BLT.N    ??PDM2PCM_5
    567          
    568                  OutBuff[currentSample] = (int16_t)stSum;
   \   000000BE   0x800D             STRH     R5,[R1, #+0]
    569          		
    570          		
    571          
    572          		for (uint16_t i=0; i< (DSP_NUMBYTECONV/2); i++)
   \   000000C0   0x9E00             LDR      R6,[SP, #+0]
   \   000000C2   0x.... 0x....      LDR.W    R5,??DataTable14_9
   \   000000C6   0x2704             MOVS     R7,#+4
   \   000000C8   0x1986             ADDS     R6,R0,R6
   \   000000CA   0x1F76             SUBS     R6,R6,#+5
    573          		{
    574                       Initial_Array[i]=InBuff[BuffInPos - 1 - DSP_NUMBYTECONV/2 + i];
   \                     ??PDM2PCM_9: (+1)
   \   000000CC   0xF816 0xCB01      LDRB     R12,[R6], #+1
    575          		}
   \   000000D0   0x1E7F             SUBS     R7,R7,#+1
   \   000000D2   0xF805 0xCB01      STRB     R12,[R5], #+1
   \   000000D6   0xD1F9             BNE.N    ??PDM2PCM_9
    576              }
   \   000000D8   0x1C89             ADDS     R1,R1,#+2
   \   000000DA   0x1E52             SUBS     R2,R2,#+1
   \   000000DC   0xD199             BNE.N    ??PDM2PCM_0
    577          
    578          
    579          	#if 0
    580                 for (int16_t i=0; i<8; i++)
    581          	   {
    582          	       uint8_t test;
    583          	       test= InBuff[currentSample*8 +i];
    584          	       for (uint8_t j=0; j<8;j++)
    585          		   {
    586          		        if ((test & 0x01) == 0x01) 
    587          				{
    588                              stSum += 10;
    589                          }
    590                          else                        
    591          				{
    592                              stSum -= 10;
    593                          }
    594          				
    595          				test >>= 1;
    596          		   }
    597          	   }
    598          
    599          #endif
    600          
    601          }
   \   000000DE   0xB002             ADD      SP,SP,#+8
   \   000000E0   0xE8BD 0x8DF0      POP      {R4-R8,R10,R11,PC}  ;; return

   \                                 In section .bss, align 4
   \                     ??Initial_Array:
   \   00000000                      DS8 4
    602          
    603          //void OverLapAdd (uint8_t *Input, int16_t *Output) //128 bytes input 32 bytes output
    604          //{
    605              
    606          //}
    607          	
    608          
    609          

   \                                 In section .text, align 4, keep-with-next
    610          void Precalculation(float *fir64Coff,int16_t precalculated[129][256])
    611          {
   \                     Precalculation: (+1)
   \   00000000   0xB4E0             PUSH     {R5-R7}
    612              for (uint8_t i = 0; i < 129; i++)  /* from byte 0th to byth 7th of data input */
   \   00000002   0x2281             MOVS     R2,#+129
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable14_3  ;; 0xffff8000
   \   00000008   0xF647 0x75FF      MOVW     R5,#+32767
    613          	{ 
    614          
    615                  for (uint16_t j = 0; j < 256; j++)    /* list all the cases can happen for the input data */ 
   \                     ??Precalculation_0: (+1)
   \   0000000C   0xF05F 0x0600      MOVS.W   R6,#+0
    616          		{         
    617                      // check overflow 
    618          			if ((int32_t)(fir64Coff[i]*(j-128)) > 32767)
   \                     ??Precalculation_1: (+1)
   \   00000010   0xF1A6 0x0780      SUB      R7,R6,#+128
   \   00000014   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000018   0xEE00 0x7A10      VMOV     S0,R7
   \   0000001C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000020   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000024   0xEEFD 0x0AC0      VCVT.S32.F32 S1,S0
   \   00000028   0xEE10 0x7A90      VMOV     R7,S1
   \   0000002C   0xF5B7 0x4F00      CMP      R7,#+32768
   \   00000030   0xBFA8             IT       GE 
   \   00000032   0x462F             MOVGE    R7,R5
    619          			{
    620                          
    621          				precalculated[i][j] = 32767;
   \   00000034   0xDA06             BGE.N    ??Precalculation_2
    622          			}
    623          			else if ((int32_t)(fir64Coff[i]*(j-128)) < -32768)
   \   00000036   0x429F             CMP      R7,R3
   \   00000038   0xBFB2             ITEE     LT 
   \   0000003A   0x461F             MOVLT    R7,R3
   \   0000003C   0xEEBD 0x0AC0      VCVTGE.S32.F32 S0,S0
   \   00000040   0xEE10 0x7A10      VMOVGE   R7,S0
    624          			{
    625                          precalculated[i][j] = -32768;
    626          			}
    627          			else
    628          			{
    629                          precalculated[i][j] = (int16_t)(fir64Coff[i]*(j-128));
    630          			}
    631                  }
   \                     ??Precalculation_2: (+1)
   \   00000044   0x1C76             ADDS     R6,R6,#+1
   \   00000046   0x2EFF             CMP      R6,#+255
   \   00000048   0xF821 0x7B02      STRH     R7,[R1], #+2
   \   0000004C   0xDDE0             BLE.N    ??Precalculation_1
    632              }
   \   0000004E   0x1D00             ADDS     R0,R0,#+4
   \   00000050   0x1E52             SUBS     R2,R2,#+1
   \   00000052   0xD1DB             BNE.N    ??Precalculation_0
    633          }
   \   00000054   0xBCE0             POP      {R5-R7}
   \   00000056   0x4770             BX       LR               ;; return
    634          
    635          
    636          /************************************************************************************************ 
    637          Fc: Cutoff Frequency
    638          Fs: Sample Rate
    639          M: filter length
    640          *************************************************************************************************/
    641          

   \                                 In section .text, align 4, keep-with-next
    642          float lowpassFIR(float * firBuffer,uint64_t M,uint64_t Fs,uint64_t Fc)
    643          {    
   \                     lowpassFIR: (+1)
   \   00000000   0xE92D 0x4F70      PUSH     {R4-R6,R8-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x4606             MOV      R6,R0
    644              M = M -1;
   \   00000008   0x1E50             SUBS     R0,R2,#+1
   \   0000000A   0xF163 0x0100      SBC      R1,R3,#+0
   \   0000000E   0xED2D 0x8B0A      VPUSH    {D8-D12}
   \   00000012   0xB082             SUB      SP,SP,#+8
    645          	
    646              float Ft = (float)Fc / (float)Fs;
    647          
    648          
    649              float sum = 0.0f;
    650              
    651              for (uint64_t i = 0; i < M; i++) 
   \   00000014   0x2400             MOVS     R4,#+0
   \   00000016   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000001A   0xE9DD 0x0118      LDRD     R0,R1,[SP, #+96]
   \   0000001E   0x.... 0x....      BL       __aeabi_ul2f
   \   00000022   0x2500             MOVS     R5,#+0
   \   00000024   0xEE08 0x0A10      VMOV     S16,R0
   \   00000028   0xE9DD 0x0116      LDRD     R0,R1,[SP, #+88]
   \   0000002C   0x.... 0x....      BL       __aeabi_ul2f
   \   00000030   0xEE00 0x0A10      VMOV     S0,R0
   \   00000034   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000038   0x2900             CMP      R1,#+0
   \   0000003A   0xEE88 0xAA00      VDIV.F32 S20,S16,S0
   \   0000003E   0xED9F 0x....      VLDR.W   S16,??DataTable13  ;; 0x0
   \   00000042   0xBF08             IT       EQ 
   \   00000044   0x2800             CMPEQ    R0,#+0
   \   00000046   0xD06C             BEQ.N    ??lowpassFIR_0
   \   00000048   0xEE1A 0x0A10      VMOV     R0,S20
   \   0000004C   0x.... 0x....      BL       __aeabi_f2d
   \   00000050   0x.... 0x....      LDR.W    R2,??DataTable14  ;; 0x5a7ed197
   \   00000054   0x.... 0x....      LDR.W    R3,??DataTable14_1  ;; 0x401921fb
   \   00000058   0x.... 0x....      BL       __aeabi_dmul
   \   0000005C   0xEC41 0x0B19      VMOV     D9,R0,R1
   \   00000060   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000064   0x.... 0x....      BL       __aeabi_ul2f
   \   00000068   0xEE00 0x0A10      VMOV     S0,R0
   \   0000006C   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   00000070   0xEE60 0x8A20      VMUL.F32 S17,S0,S1
   \   00000074   0xEEB0 0x0A00      VMOV.F32 S0,#2.0
   \   00000078   0xEE2A 0xBA00      VMUL.F32 S22,S20,S0
   \   0000007C   0xED9F 0x....      VLDR.W   D10,??DataTable13_1
    652          	{
    653                  if (i != ((float)M / 2)) 
   \                     ??lowpassFIR_1: (+1)
   \   00000080   0xEDD6 0xBA00      VLDR     S23,[R6, #0]
   \   00000084   0x4620             MOV      R0,R4
   \   00000086   0x4629             MOV      R1,R5
   \   00000088   0x.... 0x....      BL       __aeabi_ul2f
   \   0000008C   0xEE00 0x0A10      VMOV     S0,R0
   \   00000090   0xEEB4 0x0A68      VCMP.F32 S0,S17
   \   00000094   0xEEF1 0xFA10      FMSTAT   
   \   00000098   0xD030             BEQ.N    ??lowpassFIR_2
    654          		{
    655                      firBuffer[i] *= sin(2*PI*Ft*(i - ((float)M / 2))) / 
    656          			                (PI * (i - ((float)M / 2)));
   \   0000009A   0xEE30 0xCA68      VSUB.F32 S24,S0,S17
   \   0000009E   0xEE1B 0x0A90      VMOV     R0,S23
   \   000000A2   0x.... 0x....      BL       __aeabi_f2d
   \   000000A6   0x4682             MOV      R10,R0
   \   000000A8   0x468B             MOV      R11,R1
   \   000000AA   0xEE1C 0x0A10      VMOV     R0,S24
   \   000000AE   0x.... 0x....      BL       __aeabi_f2d
   \   000000B2   0xEC53 0x2B19      VMOV     R2,R3,D9
   \   000000B6   0x.... 0x....      BL       __aeabi_dmul
   \   000000BA   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x.... 0x....      BL       __iar_Sin
   \   000000C4   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   000000C8   0x4680             MOV      R8,R0
   \   000000CA   0x4689             MOV      R9,R1
   \   000000CC   0xEE1C 0x0A10      VMOV     R0,S24
   \   000000D0   0x.... 0x....      BL       __aeabi_f2d
   \   000000D4   0x4602             MOV      R2,R0
   \   000000D6   0x460B             MOV      R3,R1
   \   000000D8   0xEC51 0x0B1A      VMOV     R0,R1,D10
   \   000000DC   0x.... 0x....      BL       __aeabi_dmul
   \   000000E0   0x4602             MOV      R2,R0
   \   000000E2   0x460B             MOV      R3,R1
   \   000000E4   0x4640             MOV      R0,R8
   \   000000E6   0x4649             MOV      R1,R9
   \   000000E8   0x.... 0x....      BL       __aeabi_ddiv
   \   000000EC   0x4652             MOV      R2,R10
   \   000000EE   0x465B             MOV      R3,R11
   \   000000F0   0x.... 0x....      BL       __aeabi_dmul
   \   000000F4   0x.... 0x....      BL       __aeabi_d2f
   \   000000F8   0x6030             STR      R0,[R6, #+0]
   \   000000FA   0xE003             B.N      ??lowpassFIR_3
    657                  }
    658                  else 
    659          		{
    660                      firBuffer[i] *= 2* Ft;
   \                     ??lowpassFIR_2: (+1)
   \   000000FC   0xEE2B 0x0A2B      VMUL.F32 S0,S22,S23
   \   00000100   0xED86 0x0A00      VSTR     S0,[R6, #0]
    661                  }
    662                  
    663                  sum += firBuffer[i];     
    664              }
   \                     ??lowpassFIR_3: (+1)
   \   00000104   0x1C64             ADDS     R4,R4,#+1
   \   00000106   0xED96 0x0A00      VLDR     S0,[R6, #0]
   \   0000010A   0xF145 0x0500      ADC      R5,R5,#+0
   \   0000010E   0x1D36             ADDS     R6,R6,#+4
   \   00000110   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000114   0x428D             CMP      R5,R1
   \   00000116   0xEE38 0x8A00      VADD.F32 S16,S16,S0
   \   0000011A   0xD3B1             BCC.N    ??lowpassFIR_1
   \   0000011C   0xD801             BHI.N    ??lowpassFIR_0
   \   0000011E   0x4284             CMP      R4,R0
   \   00000120   0xD3AE             BCC.N    ??lowpassFIR_1
    665              
    666          	return sum;
   \                     ??lowpassFIR_0: (+1)
   \   00000122   0xB002             ADD      SP,SP,#+8
   \   00000124   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000128   0xECBD 0x8B0A      VPOP     {D8-D12}
   \   0000012C   0xB002             ADD      SP,SP,#+8
   \   0000012E   0xE8BD 0x8F70      POP      {R4-R6,R8-R11,PC}  ;; return
    667          }
    668          
    669          /* */
    670          

   \                                 In section .text, align 4, keep-with-next
    671          int8_t CrssCor(int16_t * vDataIn1, int16_t * vDataIn2, uint16_t numLen )
    672          {
   \                     CrssCor: (+1)
   \   00000000   0xE92D 0x43F7      PUSH     {R0-R2,R4-R9,LR}
    673              static int16_t vDataIn1Old, vDataIn2Old;
                                    ^
Warning[Pe177]: variable "vDataIn1Old" was declared but never referenced

      static int16_t vDataIn1Old, vDataIn2Old;
                                  ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c",673  Warning[Pe177]: 
          variable "vDataIn2Old" was declared but never referenced
    674              int64_t Sum, SumMax;
    675          	int8_t idxPos;
    676          #if 0
    677          	int16_t *vDataIn1Out = malloc(sizeof(int16_t)*numLen);
    678          	int16_t *vDataIn2Out = malloc(sizeof(int16_t)*numLen);
    679          #endif
    680          
    681              SumMax=0;
    682              Sum=0;
    683          #if 0	
    684          	LowPassIIR(vDataIn1,vDataIn1Out ,&vDataIn1Old, numLen,8);
    685          	LowPassIIR(vDataIn2,vDataIn2Out ,&vDataIn2Old, numLen,8);
    686          #endif
    687              for (int8_t i=-8;i<8;i++)
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable14_10
   \   00000008   0xB081             SUB      SP,SP,#+4
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6812             LDR      R2,[R2, #+0]
   \   00000010   0xF06F 0x0607      MVN      R6,#+7
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0x9200             STR      R2,[SP, #+0]
   \   00000018   0x9A01             LDR      R2,[SP, #+4]
   \   0000001A   0xF1A2 0x0910      SUB      R9,R2,#+16
   \   0000001E   0x2200             MOVS     R2,#+0
    688              {
    689                 Sum = 0;
    690          	   if (i>=0)
    691          	   {
    692          	       for(uint16_t j=0;j<numLen;j++)
    693          	       {
    694          	           Sum += vDataIn1[j+i]*vDataIn2[j]/numLen;   
    695          	       }
    696                                      
    697          	   }
    698          	   else
    699          	   {
    700                     for(uint16_t j=0;j<numLen;j++)
   \                     ??CrssCor_0: (+1)
   \   00000020   0xF8BD 0x400C      LDRH     R4,[SP, #+12]
   \   00000024   0xB1CC             CBZ.N    R4,??CrssCor_1
   \   00000026   0x9C02             LDR      R4,[SP, #+8]
   \   00000028   0x4275             RSBS     R5,R6,#+0
   \   0000002A   0xF8DD 0xC004      LDR      R12,[SP, #+4]
   \   0000002E   0xF8BD 0xE00C      LDRH     LR,[SP, #+12]
   \   00000032   0xEB04 0x0845      ADD      R8,R4,R5, LSL #+1
    701          	       {
    702          	           Sum += vDataIn1[j]*vDataIn2[j-i]/numLen;   
   \                     ??CrssCor_2: (+1)
   \   00000036   0x4614             MOV      R4,R2
   \   00000038   0x461D             MOV      R5,R3
   \   0000003A   0xF93C 0x2B02      LDRSH    R2,[R12], #+2
   \   0000003E   0xF938 0x3B02      LDRSH    R3,[R8], #+2
   \   00000042   0xFB12 0xF203      SMULBB   R2,R2,R3
   \   00000046   0xF8BD 0x300C      LDRH     R3,[SP, #+12]
   \   0000004A   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   0000004E   0x17D3             ASRS     R3,R2,#+31
   \   00000050   0x18A2             ADDS     R2,R4,R2
   \   00000052   0x416B             ADCS     R3,R5,R3
    703          	       }
   \   00000054   0xF1BE 0x0E01      SUBS     LR,LR,#+1
   \   00000058   0xD1ED             BNE.N    ??CrssCor_2
    704          	   }
    705          
    706          	   if (Sum > SumMax) 
   \                     ??CrssCor_1: (+1)
   \   0000005A   0x4299             CMP      R1,R3
   \   0000005C   0xDC09             BGT.N    ??CrssCor_3
   \   0000005E   0xDB01             BLT.N    ??CrssCor_4
   \   00000060   0x4290             CMP      R0,R2
   \   00000062   0xD206             BCS.N    ??CrssCor_3
    707          	   {
    708          	       SumMax = Sum;  	
   \                     ??CrssCor_4: (+1)
   \   00000064   0x4610             MOV      R0,R2
    709          	       idxPos = i;
    710          		   EnergySound = (uint32_t)((SumMax>>16));
   \   00000066   0x0C12             LSRS     R2,R2,#+16
   \   00000068   0xEA42 0x4203      ORR      R2,R2,R3, LSL #+16
   \   0000006C   0x4619             MOV      R1,R3
   \   0000006E   0x4637             MOV      R7,R6
   \   00000070   0x9200             STR      R2,[SP, #+0]
    711          	   }
   \                     ??CrssCor_3: (+1)
   \   00000072   0x1C76             ADDS     R6,R6,#+1
   \   00000074   0x2E08             CMP      R6,#+8
   \   00000076   0xF109 0x0902      ADD      R9,R9,#+2
   \   0000007A   0xDA1E             BGE.N    ??CrssCor_5
   \   0000007C   0x2200             MOVS     R2,#+0
   \   0000007E   0x2300             MOVS     R3,#+0
   \   00000080   0x2E00             CMP      R6,#+0
   \   00000082   0xD4CD             BMI.N    ??CrssCor_0
   \   00000084   0xF8BD 0x400C      LDRH     R4,[SP, #+12]
   \   00000088   0x2C00             CMP      R4,#+0
   \   0000008A   0xD0E6             BEQ.N    ??CrssCor_1
   \   0000008C   0x46CC             MOV      R12,R9
   \   0000008E   0xF8DD 0xE008      LDR      LR,[SP, #+8]
   \   00000092   0x46A0             MOV      R8,R4
   \                     ??CrssCor_6: (+1)
   \   00000094   0x4614             MOV      R4,R2
   \   00000096   0x461D             MOV      R5,R3
   \   00000098   0xF93C 0x2B02      LDRSH    R2,[R12], #+2
   \   0000009C   0xF93E 0x3B02      LDRSH    R3,[LR], #+2
   \   000000A0   0xFB12 0xF203      SMULBB   R2,R2,R3
   \   000000A4   0xF8BD 0x300C      LDRH     R3,[SP, #+12]
   \   000000A8   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000000AC   0x17D3             ASRS     R3,R2,#+31
   \   000000AE   0x18A2             ADDS     R2,R4,R2
   \   000000B0   0x416B             ADCS     R3,R5,R3
   \   000000B2   0xF1B8 0x0801      SUBS     R8,R8,#+1
   \   000000B6   0xD1ED             BNE.N    ??CrssCor_6
   \   000000B8   0xE7CF             B.N      ??CrssCor_1
    712          	         
    713              }
   \                     ??CrssCor_5: (+1)
   \   000000BA   0x9800             LDR      R0,[SP, #+0]
   \   000000BC   0x....             LDR.N    R1,??DataTable14_10
    714          #if 0
    715              free(vDataIn1Out);
    716          	free(vDataIn2Out);
    717          #endif
    718          
    719              if((idxPos<-7)||(idxPos>6)) return 0;
   \   000000BE   0xB27F             SXTB     R7,R7
   \   000000C0   0x6008             STR      R0,[R1, #+0]
   \   000000C2   0x1DF8             ADDS     R0,R7,#+7
   \   000000C4   0x280E             CMP      R0,#+14
   \   000000C6   0xBF2C             ITE      CS 
   \   000000C8   0x2000             MOVCS    R0,#+0
   \   000000CA   0x4638             MOVCC    R0,R7
    720          	
    721              return idxPos;
   \   000000CC   0xB004             ADD      SP,SP,#+16
   \   000000CE   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    722          }
    723          
    724          
    725          /*****************************************************************************************************
    726          CROSSCORRELATION---------------------------------------------------------------------------------------
    727          
    728          	function	Out = crsscorr_local(Z,X) 
    729          	%this function computes autocorrelation
    730          	 
    731          		N = round(length(X));
    732          		%WIN = hanning(N);
    733          		x = [X;ones(N,1)];
    734          		z = [Z;ones(N,1)];
    735          		
    736          		Out = zeros(N,1);
    737          		
    738          		for index=1:16 %N but optimize to 16  
    739          			Out(index)=sum(z(index:index+N-1).* x(1:N))/(N);
    740          		end
    741          	end
    742          
    743          *******************************************************************************************************/
    744          

   \                                 In section .text, align 4, keep-with-next
    745          void Std_CrssCor(int16_t * vDataIn1, int16_t * vDataIn2, float *Out,uint16_t numLen )
    746          {
    747          
    748              for (uint16_t i=0;i<numLen;i++)
   \                     Std_CrssCor: (+1)
   \   00000000   0xB903             CBNZ.N   R3,??Std_CrssCor_0
   \   00000002   0x4770             BX       LR
   \                     ??Std_CrssCor_0: (+1)
   \   00000004   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0x461D             MOV      R5,R3
   \                     ??Std_CrssCor_1: (+1)
   \   0000000C   0x4606             MOV      R6,R0
   \   0000000E   0x460F             MOV      R7,R1
   \   00000010   0xEA4F 0x0C03      MOV.W    R12,R3
    749              {
    750                 Out = 0;
    751                 for(uint16_t j=0;j<numLen;j++)
    752                 {
    753                     Out[i] += vDataIn1[j+i]*vDataIn2[j]/numLen;   
   \                     ??Std_CrssCor_2: (+1)
   \   00000014   0xF936 0xEB02      LDRSH    LR,[R6], #+2
   \   00000018   0xF937 0x8B02      LDRSH    R8,[R7], #+2
   \   0000001C   0xEDD4 0x0A00      VLDR     S1,[R4, #0]
    754                 }       
   \   00000020   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   00000024   0xFB1E 0xFE08      SMULBB   LR,LR,R8
   \   00000028   0xFB9E 0xFEF3      SDIV     LR,LR,R3
   \   0000002C   0xEE00 0xEA10      VMOV     S0,LR
   \   00000030   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000034   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000038   0xED84 0x0A00      VSTR     S0,[R4, #0]
   \   0000003C   0xD1EA             BNE.N    ??Std_CrssCor_2
    755              }
   \   0000003E   0x1D24             ADDS     R4,R4,#+4
   \   00000040   0x1C80             ADDS     R0,R0,#+2
   \   00000042   0x1E6D             SUBS     R5,R5,#+1
   \   00000044   0xD1E2             BNE.N    ??Std_CrssCor_1
    756          
    757          }
   \   00000046   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    758          
    759          /*********************************************************************************************************
    760          function y=atcorr(X) %this function computes autocorrelation
    761              K = round(length(X)/2);
    762              x = X;
    763              y = zeros(K,1);
    764              for index=1:K
    765                  y(index) = sum(x(index:index+K-1).* x(1:K))/(K);
    766              end
    767          end
    768          **********************************************************************************************************/
    769          

   \                                 In section .text, align 4, keep-with-next
    770           void Std_AutoCorr(int16_t * vDataIn,float *Out, uint16_t numLen )
    771          {
    772              for (uint16_t i=0;i<numLen;i++)
   \                     Std_AutoCorr: (+1)
   \   00000000   0xB902             CBNZ.N   R2,??Std_AutoCorr_0
   \   00000002   0x4770             BX       LR
   \                     ??Std_AutoCorr_0: (+1)
   \   00000004   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x4615             MOV      R5,R2
   \                     ??Std_AutoCorr_1: (+1)
   \   0000000C   0xED9F 0x....      VLDR.W   S0,??DataTable13  ;; 0x0
   \   00000010   0x4626             MOV      R6,R4
   \   00000012   0x4607             MOV      R7,R0
   \   00000014   0xEA4F 0x0C02      MOV.W    R12,R2
    773              {
    774                 Out[i] = 0;
    775                 for(uint16_t j=0;j<numLen;j++)
    776                 {
    777                     Out[i] += vDataIn[j+i]*vDataIn[j]/numLen;   
   \                     ??Std_AutoCorr_2: (+1)
   \   00000018   0xF936 0xEB02      LDRSH    LR,[R6], #+2
   \   0000001C   0xF937 0x8B02      LDRSH    R8,[R7], #+2
    778                 }       
   \   00000020   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   00000024   0xFB1E 0xFE08      SMULBB   LR,LR,R8
   \   00000028   0xFB9E 0xFEF2      SDIV     LR,LR,R2
   \   0000002C   0xEE00 0xEA90      VMOV     S1,LR
   \   00000030   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000034   0xEE30 0x0A80      VADD.F32 S0,S1,S0
   \   00000038   0xD1EE             BNE.N    ??Std_AutoCorr_2
   \   0000003A   0xED81 0x0A00      VSTR     S0,[R1, #0]
    779              }
   \   0000003E   0x1D09             ADDS     R1,R1,#+4
   \   00000040   0x1CA4             ADDS     R4,R4,#+2
   \   00000042   0x1E6D             SUBS     R5,R5,#+1
   \   00000044   0xD1E2             BNE.N    ??Std_AutoCorr_1
    780          }
   \   00000046   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    781          
    782          /**********************************************************************************************************
    783          -----------------------------Covarian Matrix setup---------------------------------------------------------
    784          function Out = CorrMatFn(x)
    785              Out = zeros(length(x),length(x));
    786              for i=1:length(x)
    787                  for j=1:length(x)
    788                     if (j>=i)
    789                         Out(i,j) = x(j - i +1);  
    790                     else
    791                         Out(i,j) = x(i-j + 1);  
    792                     end
    793                  end
    794              end 
    795          end
    796          *************************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    797          void Std_MatCorr(int16_t* vDataIn, float *Out, uint16_t numLen)
    798          {
    799              for (uint16_t i=0;i<numLen;i++)
   \                     Std_MatCorr: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \   00000002   0xB902             CBNZ.N   R2,??Std_MatCorr_0
   \   00000004   0x4770             BX       LR
   \                     ??Std_MatCorr_0: (+1)
   \   00000006   0xB5F0             PUSH     {R4-R7,LR}
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0xE000             B.N      ??Std_MatCorr_1
   \                     ??Std_MatCorr_2: (+1)
   \   0000000E   0x2500             MOVS     R5,#+0
   \                     ??Std_MatCorr_1: (+1)
   \   00000010   0x425F             RSBS     R7,R3,#+0
   \   00000012   0x4626             MOV      R6,R4
   \   00000014   0xEB00 0x0747      ADD      R7,R0,R7, LSL #+1
   \   00000018   0x468C             MOV      R12,R1
    800              {
    801                 
    802                 for(uint16_t j=0;j<numLen;j++)
    803                 {
    804                     if (j>=i)
   \                     ??Std_MatCorr_3: (+1)
   \   0000001A   0x429D             CMP      R5,R3
   \   0000001C   0xBFAC             ITE      GE 
   \   0000001E   0xF9B7 0xE000      LDRSHGE  LR,[R7, #+0]
   \   00000022   0xF9B6 0xE000      LDRSHLT  LR,[R6, #+0]
    805                         Out[i*numLen +j] = vDataIn[j-i]; 
    806          		   else
    807          		   	   Out[i*numLen +j] = vDataIn[i-j];
   \   00000026   0xEE00 0xEA10      VMOV     S0,LR
    808          		   	
    809                 }       
   \   0000002A   0x1C6D             ADDS     R5,R5,#+1
   \   0000002C   0x1CBF             ADDS     R7,R7,#+2
   \   0000002E   0x1EB6             SUBS     R6,R6,#+2
   \   00000030   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000034   0x4295             CMP      R5,R2
   \   00000036   0xED8C 0x0A00      VSTR     S0,[R12, #0]
   \   0000003A   0xF10C 0x0C04      ADD      R12,R12,#+4
   \   0000003E   0xDBEC             BLT.N    ??Std_MatCorr_3
    810              }
   \   00000040   0x1C5B             ADDS     R3,R3,#+1
   \   00000042   0x1CA4             ADDS     R4,R4,#+2
   \   00000044   0x4293             CMP      R3,R2
   \   00000046   0xEB01 0x0182      ADD      R1,R1,R2, LSL #+2
   \   0000004A   0xDBE0             BLT.N    ??Std_MatCorr_2
    811          
    812          }
   \   0000004C   0xBDF0             POP      {R4-R7,PC}       ;; return
    813          
    814          
    815          
    816          /************************************************************************************************************
    817          -----------------------------Summing in Fourier Domain-------------------------------------------------------
    818          
    819          *************************************************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    820          void Delay_Sum_FFT(const Mic_Array_Data * MicData, Mic_Array_Coef_f *coefMics,int16_t * stBufOut, int16_t lenFFT)
    821          {
   \                     Delay_Sum_FFT: (+1)
   \   00000000   0xE92D 0x4EF0      PUSH     {R4-R7,R9-R11,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x4682             MOV      R10,R0
   \   00000008   0xB404             PUSH     {R2}
   \   0000000A   0x461E             MOV      R6,R3
   \   0000000C   0xB086             SUB      SP,SP,#+24
   \   0000000E   0x468B             MOV      R11,R1
    822               int32_t         _value,_value1,_value2;
    823              
    824          	for (uint16_t iFrm=0;iFrm<AUDIO_OUT_BUFFER_SIZE/(2*lenFFT);iFrm++)
   \   00000010   0x0070             LSLS     R0,R6,#+1
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x9900             LDR      R1,[SP, #+0]
   \   00000016   0xF44F 0x6080      MOV      R0,#+1024
   \   0000001A   0x.... 0x....      LDR.W    R9,??DataTable14_11
   \   0000001E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0xF509 0x4001      ADD      R0,R9,#+33024
   \   00000028   0x3040             ADDS     R0,R0,#+64
   \   0000002A   0xF509 0x4424      ADD      R4,R9,#+41984
   \   0000002E   0x9005             STR      R0,[SP, #+20]
   \   00000030   0xF509 0x5040      ADD      R0,R9,#+12288
   \   00000034   0x3078             ADDS     R0,R0,#+120
   \   00000036   0x2700             MOVS     R7,#+0
   \   00000038   0x9004             STR      R0,[SP, #+16]
   \   0000003A   0xF509 0x5000      ADD      R0,R9,#+8192
   \   0000003E   0x3050             ADDS     R0,R0,#+80
   \   00000040   0x3460             ADDS     R4,R4,#+96
   \   00000042   0x9003             STR      R0,[SP, #+12]
   \   00000044   0xF509 0x5080      ADD      R0,R9,#+4096
   \   00000048   0x3028             ADDS     R0,R0,#+40
   \   0000004A   0xF241 0x0514      MOVW     R5,#+4116
   \   0000004E   0x9002             STR      R0,[SP, #+8]
   \   00000050   0x9801             LDR      R0,[SP, #+4]
   \   00000052   0x2801             CMP      R0,#+1
   \   00000054   0xF2C0 0x80AE      BLT.W    ??Delay_Sum_FFT_0
    825          	{
    826                    RFFT_INT(MicData->bufMIC1,S1,DataFFT.bufMIC1);  
   \                     ??Delay_Sum_FFT_1: (+1)
   \   00000058   0x2E01             CMP      R6,#+1
   \   0000005A   0xDB10             BLT.N    ??Delay_Sum_FFT_2
   \   0000005C   0xFB06 0xF007      MUL      R0,R6,R7
   \   00000060   0x4621             MOV      R1,R4
   \   00000062   0x4632             MOV      R2,R6
   \   00000064   0xEB0A 0x0040      ADD      R0,R10,R0, LSL #+1
   \                     ??Delay_Sum_FFT_3: (+1)
   \   00000068   0xF930 0x3B02      LDRSH    R3,[R0], #+2
   \   0000006C   0xEE00 0x3A10      VMOV     S0,R3
   \   00000070   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000074   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   00000078   0x1D09             ADDS     R1,R1,#+4
   \   0000007A   0x1E52             SUBS     R2,R2,#+1
   \   0000007C   0xD1F4             BNE.N    ??Delay_Sum_FFT_3
   \                     ??Delay_Sum_FFT_2: (+1)
   \   0000007E   0x464A             MOV      R2,R9
   \   00000080   0x4621             MOV      R1,R4
   \   00000082   0x....             LDR.N    R0,??DataTable14_12
   \   00000084   0x.... 0x....      BL       arm_rfft_f32
    827                    RFFT_INT(MicData->bufMIC2,S2,DataFFT.bufMIC2);
   \   00000088   0x2E01             CMP      R6,#+1
   \   0000008A   0xDB12             BLT.N    ??Delay_Sum_FFT_4
   \   0000008C   0xFB06 0xF007      MUL      R0,R6,R7
   \   00000090   0x4621             MOV      R1,R4
   \   00000092   0x4632             MOV      R2,R6
   \   00000094   0xEB0A 0x0040      ADD      R0,R10,R0, LSL #+1
   \   00000098   0xEB15 0x0000      ADDS.W   R0,R5,R0
   \                     ??Delay_Sum_FFT_5: (+1)
   \   0000009C   0xF930 0x3B02      LDRSH    R3,[R0], #+2
   \   000000A0   0xEE00 0x3A10      VMOV     S0,R3
   \   000000A4   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000A8   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   000000AC   0x1D09             ADDS     R1,R1,#+4
   \   000000AE   0x1E52             SUBS     R2,R2,#+1
   \   000000B0   0xD1F4             BNE.N    ??Delay_Sum_FFT_5
   \                     ??Delay_Sum_FFT_4: (+1)
   \   000000B2   0x9A02             LDR      R2,[SP, #+8]
   \   000000B4   0x4621             MOV      R1,R4
   \   000000B6   0x....             LDR.N    R0,??DataTable14_13
   \   000000B8   0x.... 0x....      BL       arm_rfft_f32
    828                    RFFT_INT(MicData->bufMIC3,S3,DataFFT.bufMIC3);
   \   000000BC   0x2E01             CMP      R6,#+1
   \   000000BE   0xDB14             BLT.N    ??Delay_Sum_FFT_6
   \   000000C0   0xFB06 0xF007      MUL      R0,R6,R7
   \   000000C4   0x4621             MOV      R1,R4
   \   000000C6   0x4632             MOV      R2,R6
   \   000000C8   0xEB0A 0x0040      ADD      R0,R10,R0, LSL #+1
   \   000000CC   0xF500 0x5000      ADD      R0,R0,#+8192
   \   000000D0   0xF110 0x0028      ADDS.W   R0,R0,#+40
   \                     ??Delay_Sum_FFT_7: (+1)
   \   000000D4   0xF930 0x3B02      LDRSH    R3,[R0], #+2
   \   000000D8   0xEE00 0x3A10      VMOV     S0,R3
   \   000000DC   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000E0   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   000000E4   0x1D09             ADDS     R1,R1,#+4
   \   000000E6   0x1E52             SUBS     R2,R2,#+1
   \   000000E8   0xD1F4             BNE.N    ??Delay_Sum_FFT_7
   \                     ??Delay_Sum_FFT_6: (+1)
   \   000000EA   0x9A03             LDR      R2,[SP, #+12]
   \   000000EC   0x4621             MOV      R1,R4
   \   000000EE   0x....             LDR.N    R0,??DataTable14_14
   \   000000F0   0x.... 0x....      BL       arm_rfft_f32
    829                    RFFT_INT(MicData->bufMIC4,S4,DataFFT.bufMIC4);
   \   000000F4   0x2E01             CMP      R6,#+1
   \   000000F6   0xDB14             BLT.N    ??Delay_Sum_FFT_8
   \   000000F8   0xFB06 0xF007      MUL      R0,R6,R7
   \   000000FC   0x4621             MOV      R1,R4
   \   000000FE   0x4632             MOV      R2,R6
   \   00000100   0xEB0A 0x0040      ADD      R0,R10,R0, LSL #+1
   \   00000104   0xF500 0x5040      ADD      R0,R0,#+12288
   \   00000108   0xF110 0x003C      ADDS.W   R0,R0,#+60
   \                     ??Delay_Sum_FFT_9: (+1)
   \   0000010C   0xF930 0x3B02      LDRSH    R3,[R0], #+2
   \   00000110   0xEE00 0x3A10      VMOV     S0,R3
   \   00000114   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000118   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   0000011C   0x1D09             ADDS     R1,R1,#+4
   \   0000011E   0x1E52             SUBS     R2,R2,#+1
   \   00000120   0xD1F4             BNE.N    ??Delay_Sum_FFT_9
   \                     ??Delay_Sum_FFT_8: (+1)
   \   00000122   0x9A04             LDR      R2,[SP, #+16]
   \   00000124   0x4621             MOV      R1,R4
   \   00000126   0x....             LDR.N    R0,??DataTable14_15
   \   00000128   0x.... 0x....      BL       arm_rfft_f32
    830          
    831                    /* Adding in Fourier Domain */			 
    832                    //arm_add_f32((float *)bufferFFT,(float *)bufferFFT_1, (float *)bufferFFTSum,lenFFT*2);
    833                    for (uint16_t ii=0;ii<lenFFT*2;ii++)
   \   0000012C   0x9900             LDR      R1,[SP, #+0]
   \   0000012E   0x2000             MOVS     R0,#+0
   \   00000130   0x2901             CMP      R1,#+1
   \   00000132   0xDB2E             BLT.N    ??Delay_Sum_FFT_10
    834                    {
    835                        bufferFFTSum[ii]= ((DataFFT.bufMIC1[ii]*coefMics->facMIC1) + 
    836                                          (DataFFT.bufMIC2[ii]*coefMics->facMIC2) +
    837                                          (DataFFT.bufMIC3[ii]*coefMics->facMIC3) +
    838                                          (DataFFT.bufMIC4[ii]*coefMics->facMIC4)); 
   \                     ??Delay_Sum_FFT_11: (+1)
   \   00000134   0xEB09 0x0180      ADD      R1,R9,R0, LSL #+2
   \   00000138   0xEDDB 0x0A00      VLDR     S1,[R11, #0]
   \   0000013C   0xEB09 0x0280      ADD      R2,R9,R0, LSL #+2
   \   00000140   0xED9B 0x1A01      VLDR     S2,[R11, #+4]
    839                    }
   \   00000144   0x1C40             ADDS     R0,R0,#+1
   \   00000146   0xB280             UXTH     R0,R0
   \   00000148   0xED92 0x0A00      VLDR     S0,[R2, #0]
   \   0000014C   0xF501 0x5280      ADD      R2,R1,#+4096
   \   00000150   0x3228             ADDS     R2,R2,#+40
   \   00000152   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000156   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   0000015A   0xF501 0x5200      ADD      R2,R1,#+8192
   \   0000015E   0x3250             ADDS     R2,R2,#+80
   \   00000160   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000164   0xED9B 0x1A02      VLDR     S2,[R11, #+8]
   \   00000168   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   0000016C   0xF501 0x5240      ADD      R2,R1,#+12288
   \   00000170   0x3278             ADDS     R2,R2,#+120
   \   00000172   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000176   0xF501 0x4101      ADD      R1,R1,#+33024
   \   0000017A   0xED9B 0x1A03      VLDR     S2,[R11, #+12]
   \   0000017E   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   00000182   0x3140             ADDS     R1,R1,#+64
   \   00000184   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000188   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   0000018C   0x9900             LDR      R1,[SP, #+0]
   \   0000018E   0x4288             CMP      R0,R1
   \   00000190   0xDBD0             BLT.N    ??Delay_Sum_FFT_11
    840          
    841                    /* Revert FFT*/
    842                    arm_rfft_f32(&IS, (float *)bufferFFTSum, (float *)&fbufferOut[iFrm*lenFFT]);
   \                     ??Delay_Sum_FFT_10: (+1)
   \   00000192   0xFB06 0xF007      MUL      R0,R6,R7
   \   00000196   0x9905             LDR      R1,[SP, #+20]
   \   00000198   0x1C7F             ADDS     R7,R7,#+1
   \   0000019A   0xB2BF             UXTH     R7,R7
   \   0000019C   0xEB09 0x0080      ADD      R0,R9,R0, LSL #+2
   \   000001A0   0xF500 0x4212      ADD      R2,R0,#+37376
   \   000001A4   0x32D0             ADDS     R2,R2,#+208
   \   000001A6   0x....             LDR.N    R0,??DataTable14_16
   \   000001A8   0x.... 0x....      BL       arm_rfft_f32
    843                    //arm_rfft_fast_f32(&IS, (float *)bufferFFTSum, (float *)&fbufferOut[iFrm*lenFFT], 1);
    844          	}
   \   000001AC   0x9801             LDR      R0,[SP, #+4]
   \   000001AE   0x4287             CMP      R7,R0
   \   000001B0   0xF6FF 0xAF52      BLT.W    ??Delay_Sum_FFT_1
    845          
    846                  /*covert from float to integer*/
    847          	for (uint16_t i=0; i<AUDIO_OUT_BUFFER_SIZE;)
   \                     ??Delay_Sum_FFT_0: (+1)
   \   000001B4   0x2000             MOVS     R0,#+0
    848          	{
    849          	    _value1 = (int32_t)fbufferOut[(i>>1)];
    850          		_value2 = MicData->bufMIC2[i>>1];
    851          	    stBufOut[i++] = (int16_t)_value1;
   \                     ??Delay_Sum_FFT_12: (+1)
   \   000001B6   0x1042             ASRS     R2,R0,#+1
   \   000001B8   0xF020 0x0101      BIC      R1,R0,#0x1
   \   000001BC   0xEB09 0x0282      ADD      R2,R9,R2, LSL #+2
   \   000001C0   0x4451             ADD      R1,R1,R10
   \   000001C2   0x9B06             LDR      R3,[SP, #+24]
   \   000001C4   0xF502 0x4212      ADD      R2,R2,#+37376
   \   000001C8   0x32D0             ADDS     R2,R2,#+208
   \   000001CA   0x5E69             LDRSH    R1,[R5, R1]
   \   000001CC   0xED92 0x0A00      VLDR     S0,[R2, #0]
   \   000001D0   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000001D4   0xEE10 0x2A10      VMOV     R2,S0
   \   000001D8   0xF823 0x2010      STRH     R2,[R3, R0, LSL #+1]
   \   000001DC   0x1C40             ADDS     R0,R0,#+1
    852          		stBufOut[i++] = (int16_t)_value2;
   \   000001DE   0x9A06             LDR      R2,[SP, #+24]
   \   000001E0   0xB280             UXTH     R0,R0
   \   000001E2   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
   \   000001E6   0x1C40             ADDS     R0,R0,#+1
   \   000001E8   0xB280             UXTH     R0,R0
   \   000001EA   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000001EE   0xDBE2             BLT.N    ??Delay_Sum_FFT_12
    853          	}
    854          	
    855          	//arm_float_to_q15((float32_t *)fbufferOut,(q15_t *)stBufOut,AUDIO_OUT_BUFFER_SIZE); 
    856          	
    857          }
   \   000001F0   0xB008             ADD      SP,SP,#+32
   \   000001F2   0xE8BD 0x8EF0      POP      {R4-R7,R9-R11,PC}  ;; return
    858          /******************************************************************************/
    859          /*                  Factor Update                                             */ 
    860          /******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    861          void FactorUpd(Mic_Array_Coef_f * facMic)
    862          {
    863          	facMic->facMIC1 = 0.25;
   \                     FactorUpd: (+1)
   \   00000000   0xEEB5 0x0A00      VMOV.F32 S0,#0.25
   \   00000004   0xED80 0x0A00      VSTR     S0,[R0, #0]
    864          	facMic->facMIC2 = 0.25;
   \   00000008   0xED80 0x0A01      VSTR     S0,[R0, #+4]
    865          	facMic->facMIC3 = 0.25;
   \   0000000C   0xED80 0x0A02      VSTR     S0,[R0, #+8]
    866          	facMic->facMIC4 = 0.25;
   \   00000010   0xED80 0x0A03      VSTR     S0,[R0, #+12]
    867          }
   \   00000014   0x4770             BX       LR               ;; return
    868          
    869          
    870          

   \                                 In section .text, align 2, keep-with-next
    871          void FFT_SUM(int16_t * stBuf1, int16_t * stBuf2,float *fBufOut, uint16_t lenFFT)
    872          {
    873          #if 0 //using self-writing DFT function 
    874             int32_t         value;
    875          
    876             /* covert from int to float */
    877             for(uint16_t j=0;j<lenFFT;j++)
    878             {
    879                value = (int32_t)stBuf1[j];
    880             	  fbuffer[j]=(float)value;
    881             }	
    882             DFT((float *)fbuffer,(float *)bufferFFT,lenFFT);
    883          
    884          	/* covert from int to float */
    885          	for(uint16_t j=0;j<lenFFT;j++)
    886          	{
    887          	   value = (int32_t)stBuf2[j];
    888          	   fbuffer[j]=(float)value;
    889          	}	 
    890          	DFT((float *)fbuffer,(float *)bufferFFT_1,lenFFT);
    891          
    892             /* Adding in Fourier Domain */			 
    893             for(uint16_t i=0;i<lenFFT;i++)
    894             {
    895                  bufferFFTSum[i] = bufferFFT[i]+bufferFFT_1[i];
    896             }
    897          
    898             rDFT(lenFFT,1,bufferFFTSum,fbuffer);
    899          #endif
    900          }
   \                     FFT_SUM: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0xC2C80000         DC32     0xc2c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x00000000         DC32     0x0,0x408F4000
   \              0x408F4000   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x00000000         DC32     0x0,0x3FE00000
   \              0x3FE00000   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x00000000         DC32     0x0,0x3FF00000
   \              0x3FF00000   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x5A7ED197         DC32     0x5A7ED197,0x401921FB
   \              0x401921FB   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x43480000         DC32     0x43480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x5A7ED197         DC32     0x5A7ED197,0x400921FB
   \              0x400921FB   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x5A7ED197         DC32     0x5a7ed197

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x401921FB         DC32     0x401921fb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     ??Out_Old

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0xFFFF8000         DC32     0xffff8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x........         DC32     ??InOld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0xFFFFB486         DC32     0xffffb486

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     ??InOld_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x........         DC32     ??iRing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x404F8000         DC32     0x404f8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x........         DC32     ??Initial_Array

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x........         DC32     EnergySound

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \   00000000   0x........         DC32     DataFFT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \   00000000   0x........         DC32     `S1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \   00000000   0x........         DC32     `S2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \   00000000   0x........         DC32     `S3`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \   00000000   0x........         DC32     `S4`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \   00000000   0x........         DC32     IS
    901          
    902          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      44   CrssCor
      48   DFT
        48   -> __aeabi_d2f
        48   -> __aeabi_ddiv
        48   -> __aeabi_dmul
        48   -> __aeabi_f2d
        48   -> arm_cos_f32
        48   -> arm_sin_f32
     552   Decimation
       552   -> __aeabi_memcpy4
      64   Delay_Sum_FFT
        64   -> arm_rfft_f32
       0   FFT_SUM
       0   FactorUpd
      28   LowPass
      36   LowPass2ndOder
      36   LowPass2ndOder_1
      32   LowPassIIR
      20   PCM2PDM
      40   PDM2PCM
      12   Precalculation
      24   Std_AutoCorr
      24   Std_CrssCor
      20   Std_MatCorr
      48   Window
        48   -> __aeabi_d2f
        48   -> __aeabi_ddiv
        48   -> __aeabi_dmul
        48   -> __aeabi_dsub
        48   -> __aeabi_i2d
        48   -> __iar_Sin
      16   iirFilter
      88   lowpassFIR
        88   -> __aeabi_d2f
        88   -> __aeabi_ddiv
        88   -> __aeabi_dmul
        88   -> __aeabi_f2d
        88   -> __aeabi_ul2f
        88   -> __iar_Sin
      64   rDFT
        64   -> __aeabi_d2f
        64   -> __aeabi_ddiv
        64   -> __aeabi_dmul
        64   -> __aeabi_f2d
        64   -> __aeabi_i2d
        64   -> arm_cos_f32
        64   -> arm_sin_f32


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       8  ??DataTable10_2
       8  ??DataTable10_3
       8  ??DataTable10_4
       8  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable13
       8  ??DataTable13_1
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
       4  ??DataTable5
     516  ?_0
     210  CrssCor
     206  DFT
       4  Data
   46576  DataFFT
          bufferFFTSum
          fbufferOut
          fbuffer
     228  Decimation
     502  Delay_Sum_FFT
       4  EnergySound
       2  FFT_SUM
      22  FactorUpd
       8  InOld
          InOld1
          Out_Old
          Out_Old1
       8  InOld
          InOld1
          Out_Old
          Out_Old1
       4  Initial_Array
     160  LowPass
     128  LowPass2ndOder
     128  LowPass2ndOder_1
     160  LowPassIIR
       2  Out_Old
     150  PCM2PDM
     228  PDM2PCM
      88  Precalculation
      74  Std_AutoCorr
      74  Std_CrssCor
      78  Std_MatCorr
     112  Window
     268  iRing
          OutRing
          Data_Old
     120  iirFilter
     306  lowpassFIR
     256  rDFT

 
 46 874 bytes in section .bss
  3 876 bytes in section .text
 
  3 876 bytes of CODE memory
 46 874 bytes of DATA memory

Errors: none
Warnings: 3
