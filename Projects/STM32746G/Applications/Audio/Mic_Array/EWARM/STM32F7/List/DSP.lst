###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       29/Mar/2016  20:10:35
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_sp --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\DSP.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\DSP.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          
      8          
      9          #include "DSP.h"

   \                                 In section .text, align 4
   \   __interwork __softfp int16_t ADD_S16(int16_t, int16_t)
   \                     ADD_S16: (+1)
   \   00000000   0x0002             MOVS     R2,R0
   \   00000002   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD410             BMI.N    ??ADD_S16_0
   \   00000008   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD40D             BMI.N    ??ADD_S16_0
   \   0000000E   0xF647 0x73FF      MOVW     R3,#+32767
   \   00000012   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000014   0x1A5B             SUBS     R3,R3,R1
   \   00000016   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000018   0x4293             CMP      R3,R2
   \   0000001A   0xDA03             BGE.N    ??ADD_S16_1
   \   0000001C   0xF647 0x73FF      MOVW     R3,#+32767
   \   00000020   0x0018             MOVS     R0,R3
   \   00000022   0xE016             B.N      ??ADD_S16_2
   \                     ??ADD_S16_1: (+1)
   \   00000024   0x188B             ADDS     R3,R1,R2
   \   00000026   0x0018             MOVS     R0,R3
   \   00000028   0xE013             B.N      ??ADD_S16_2
   \                     ??ADD_S16_0: (+1)
   \   0000002A   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   0000002C   0x2A00             CMP      R2,#+0
   \   0000002E   0xD50E             BPL.N    ??ADD_S16_3
   \   00000030   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000032   0x2900             CMP      R1,#+0
   \   00000034   0xD50B             BPL.N    ??ADD_S16_3
   \   00000036   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000038   0x4B07             LDR.N    R3,??ADD_S16_4   ;; 0xffff8000
   \   0000003A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000003C   0x1A5B             SUBS     R3,R3,R1
   \   0000003E   0x429A             CMP      R2,R3
   \   00000040   0xDA02             BGE.N    ??ADD_S16_5
   \   00000042   0x4B05             LDR.N    R3,??ADD_S16_4   ;; 0xffff8000
   \   00000044   0x0018             MOVS     R0,R3
   \   00000046   0xE004             B.N      ??ADD_S16_2
   \                     ??ADD_S16_5: (+1)
   \   00000048   0x188B             ADDS     R3,R1,R2
   \   0000004A   0x0018             MOVS     R0,R3
   \   0000004C   0xE001             B.N      ??ADD_S16_2
   \                     ??ADD_S16_3: (+1)
   \   0000004E   0x188B             ADDS     R3,R1,R2
   \   00000050   0x0018             MOVS     R0,R3
   \                     ??ADD_S16_2: (+1)
   \   00000052   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000054   0x4770             BX       LR               ;; return
   \   00000056   0xBF00             Nop      
   \                     ??ADD_S16_4:
   \   00000058   0xFFFF8000         DC32     0xffff8000

   \                                 In section .text, align 4
   \   __interwork __softfp int16_t SUB_S16(int16_t, int16_t)
   \                     SUB_S16: (+1)
   \   00000000   0x0002             MOVS     R2,R0
   \   00000002   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD410             BMI.N    ??SUB_S16_0
   \   00000008   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD50D             BPL.N    ??SUB_S16_0
   \   0000000E   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000010   0xF501 0x43FE      ADD      R3,R1,#+32512
   \   00000014   0x33FF             ADDS     R3,R3,#+255
   \   00000016   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000018   0x4293             CMP      R3,R2
   \   0000001A   0xDA03             BGE.N    ??SUB_S16_1
   \   0000001C   0xF647 0x73FF      MOVW     R3,#+32767
   \   00000020   0x0018             MOVS     R0,R3
   \   00000022   0xE016             B.N      ??SUB_S16_2
   \                     ??SUB_S16_1: (+1)
   \   00000024   0x1A53             SUBS     R3,R2,R1
   \   00000026   0x0018             MOVS     R0,R3
   \   00000028   0xE013             B.N      ??SUB_S16_2
   \                     ??SUB_S16_0: (+1)
   \   0000002A   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   0000002C   0x2A00             CMP      R2,#+0
   \   0000002E   0xD50E             BPL.N    ??SUB_S16_3
   \   00000030   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000032   0x2901             CMP      R1,#+1
   \   00000034   0xDB0B             BLT.N    ??SUB_S16_3
   \   00000036   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000038   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000003A   0xF5B1 0x4300      SUBS     R3,R1,#+32768
   \   0000003E   0x429A             CMP      R2,R3
   \   00000040   0xDA02             BGE.N    ??SUB_S16_4
   \   00000042   0x4B05             LDR.N    R3,??SUB_S16_5   ;; 0xffff8000
   \   00000044   0x0018             MOVS     R0,R3
   \   00000046   0xE004             B.N      ??SUB_S16_2
   \                     ??SUB_S16_4: (+1)
   \   00000048   0x1A53             SUBS     R3,R2,R1
   \   0000004A   0x0018             MOVS     R0,R3
   \   0000004C   0xE001             B.N      ??SUB_S16_2
   \                     ??SUB_S16_3: (+1)
   \   0000004E   0x1A53             SUBS     R3,R2,R1
   \   00000050   0x0018             MOVS     R0,R3
   \                     ??SUB_S16_2: (+1)
   \   00000052   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000054   0x4770             BX       LR               ;; return
   \   00000056   0xBF00             Nop      
   \                     ??SUB_S16_5:
   \   00000058   0xFFFF8000         DC32     0xffff8000
     10          #include "main.h"
     11          #include <math.h>
     12          #include <stdlib.h>
     13          //#include <complex.h>
     14          #include "arm_math.h"
     15          
     16          
     17          //#include <malloc.h>
     18          
     19          extern int16_t PreCalcBuff[129][256]; /* 1byte have 256 values */
     20          extern float fir256Coff[DSP_NUMCOFFHANNIING];
     21          
     22          /* Manual calculation */
     23          //#define A0     10000
     24          //#define A1   (-19322)
     25          //#define A2   (9344)
     26          
     27          //#define B0   (6)
     28          //#define B1   2*B0
     29          //#define B2   B0
     30          
     31          //#define FLOATING_POINT
     32          
     33          
     34          /* ******************* MATLAB comuptation ***********************
     35          case 1: [b,a] = [b,a] = cheby2(2,60,1/32);
     36                 b	0.0010   -0.0020    0.0010
     37                 a	1.0000   -1.9938    0.9938
     38          case 2: [b,a] = butter(2,1/256); --> cut to 64Khz
     39                 b    3.73251989292944e-05	7.46503978585889e-05	3.73251989292944e-05
     40                 a    1	-1.98264541850412	0.982794719299834
     41          
     42          *****************************************************************/
     43          
     44          #ifdef FLOATING_POINT
     45          
     46            #define A0   (1)
     47            #define A1   (-1.9826)
     48            #define A2   0.9828
     49          
     50            #define B0   (3.7325e-05)                
     51            #define B1   (7.4650e-05)       
     52            #define B2   (3.7325e-05)                
     53          #else
     54            #define A0   (10000)
     55            #define A1   (-19322)
     56            #define A2   9322
     57          
     58            #define B0   (6)                
     59            #define B1   (12)       
     60            #define B2   (6) 
     61          
     62          #endif
     63          
     64          
     65          
     66          
     67          
     68          /*
     69          float Coef[129] = { 
     70          -0.02340  ,-0.06595  ,-0.02743  ,0.01425  ,-0.03335  ,-0.08782  ,-0.04168  ,0.01282  ,-0.05293  ,-0.13171 ,
     71          -0.06756  ,0.01115  ,-0.08598  ,-0.20323  ,-0.10855  ,0.00800  ,-0.13553  ,-0.30735  ,-0.16711  ,0.00362 ,
     72          -0.20339  ,-0.44812  ,-0.24434  ,0.00021  ,-0.28985  ,-0.62873  ,-0.33968  ,0.00256  ,-0.39350  ,-0.85181 ,
     73          -0.45087  ,0.01875  ,-0.51123  ,-1.12042  ,-0.57396  ,0.06130  ,-0.63834  ,-1.43986  ,-0.70359  ,0.14924 ,
     74          -0.76886  ,-1.82151  ,-0.83329  ,0.31292  ,-0.89598  ,-2.29113  ,-0.95603  ,0.60590  ,-1.01255  ,-2.90980 ,
     75          -1.06471  ,1.13962  ,-1.11170  ,-3.83936  ,-1.15280  ,2.21212  ,-1.18736  ,-5.63026  ,-1.21482  ,5.05728 ,
     76          -1.23477  ,-11.80705  ,-1.24686  ,30.58676  ,48.78572  ,30.58676  ,-1.24686  ,-11.80705  ,-1.23477  ,5.05728 ,
     77          -1.21482  ,-5.63026  ,-1.18736  ,2.21212  ,-1.15280  ,-3.83936  ,-1.11170  ,1.13962  ,-1.06471  ,-2.90980 ,
     78          -1.01255  ,0.60590  ,-0.95603  ,-2.29113  ,-0.89598  ,0.31292  ,-0.83329  ,-1.82151  ,-0.76886  ,0.14924 ,
     79          -0.70359  ,-1.43986  ,-0.63834  ,0.06130  ,-0.57396  ,-1.12042  ,-0.51123  ,0.01875  ,-0.45087  ,-0.85181 ,
     80          -0.39350  ,0.00256  ,-0.33968  ,-0.62873  ,-0.28985  ,0.00021  ,-0.24434  ,-0.44812  ,-0.20339  ,0.00362 ,
     81          -0.16711  ,-0.30735  ,-0.13553  ,0.00800  ,-0.10855  ,-0.20323  ,-0.08598  ,0.01115  ,-0.06756  ,-0.13171 ,
     82          -0.05293  ,0.01282  ,-0.04168  ,-0.08782  ,-0.03335  ,0.01425  ,-0.02743  ,-0.06595  ,-0.02340 };
     83          
     84          */
     85          /*
     86          int32_t Coef[129] = { 
     87          -234  ,-659  ,-274  ,142  ,-333  ,-878  ,-416  ,128  ,-529  ,-1317 ,
     88          -675  ,111  ,-859  ,-2032  ,-1085  ,80  ,-1355  ,-3073  ,-1671  ,36 ,
     89          -2033  ,-4481  ,-2443  ,2  ,-2898  ,-6287  ,-3396  ,25  ,-3935  ,-8518 ,
     90          -4508  ,187  ,-5112  ,-11204  ,-5739  ,612  ,-6383  ,-14398  ,-7035  ,1492 ,
     91          -7688  ,-18215  ,-8332  ,3129  ,-8959  ,-22911  ,-9560  ,6059  ,-10125  ,-29097 ,
     92          -10647  ,11396  ,-11117  ,-38393  ,-11527  ,22121  ,-11873  ,-56302  ,-12148  ,50572 ,
     93          -12347  ,-118070  ,-12468  ,305867  ,487857  ,305867  ,-12468  ,-118070  ,-12347  ,50572 ,
     94          -12148  ,-56302  ,-11873  ,22121  ,-11527  ,-38393  ,-11117  ,11396  ,-10647  ,-29097 ,
     95          -10125  ,6059  ,-9560  ,-22911  ,-8959  ,3129  ,-8332  ,-18215  ,-7688  ,1492 ,
     96          -7035  ,-14398  ,-6383  ,612  ,-5739  ,-11204  ,-5112  ,187  ,-4508  ,-8518 ,
     97          -3935  ,25  ,-3396  ,-6287  ,-2898  ,2  ,-2443  ,-4481  ,-2033  ,36 ,
     98          -1671  ,-3073  ,-1355  ,80  ,-1085  ,-2032  ,-859  ,111  ,-675  ,-1317 ,
     99          -529  ,128  ,-416  ,-878  ,-333  ,142  ,-274  ,-659  ,-234 };
    100          
    101          */
    102          
    103          /* Background noise takes from experiments */

   \                                 In section .rodata, align 4
    104          const int16_t NoiseBG[1024] = { 
   \                     NoiseBG:
   \   00000000   0x0230 0x0518      DC16 560, 1304, 785, 1224, 772, 1266, 837, 1284, 863, 1317, 937, 1551
   \              0x0311 0x04C8
   \              0x0304 0x04F2
   \              0x0345 0x0504
   \              0x035F 0x0525
   \              0x03A9 0x060F
   \   00000018   0x03E4 0x0590      DC16 996, 1424, 1053, 1502, 987, 1489, 919, 1319, 905, 1308, 822, 1440
   \              0x041D 0x05DE
   \              0x03DB 0x05D1
   \              0x0397 0x0527
   \              0x0389 0x051C
   \              0x0336 0x05A0
   \   00000030   0x0352 0x0521      DC16 850, 1313, 942, 1451, 890, 1222, 953, 1425, 801, 1255, 903, 1384
   \              0x03AE 0x05AB
   \              0x037A 0x04C6
   \              0x03B9 0x0591
   \              0x0321 0x04E7
   \              0x0387 0x0568
   \   00000048   0x03D9 0x04B5      DC16 985, 1205, 865, 1378, 917, 1095, 953, 865, 828, 685, 664, 590, 637
   \              0x0361 0x0562
   \              0x0395 0x0447
   \              0x03B9 0x0361
   \              0x033C 0x02AD
   \              0x0298 0x024E
   \              0x027D       
   \   00000062   0x0249 0x0257      DC16 585, 599, 421, 527, 273, 427, 449, 400, 346, 566, 160, 217, -154
   \              0x01A5 0x020F
   \              0x0111 0x01AB
   \              0x01C1 0x0190
   \              0x015A 0x0236
   \              0x00A0 0x00D9
   \              0xFF66       
   \   0000007C   0x00AA 0xFF0C      DC16 170, -244, 164, -347, -14, -263, -39, -132, -24, -114, -26, 22
   \              0x00A4 0xFEA5
   \              0xFFF2 0xFEF9
   \              0xFFD9 0xFF7C
   \              0xFFE8 0xFF8E
   \              0xFFE6 0x0016
   \   00000094   0xFFF2 0xFEDC      DC16 -14, -292, 111, -354, -41, -412, -181, -651, -280, -890, -314
   \              0x006F 0xFE9E
   \              0xFFD7 0xFE64
   \              0xFF4B 0xFD75
   \              0xFEE8 0xFC86
   \              0xFEC6       
   \   000000AA   0xFB0F 0xFE02      DC16 -1265, -510, -1464, -628, -1580, -645, -1713, -749, -1557, -879
   \              0xFA48 0xFD8C
   \              0xF9D4 0xFD7B
   \              0xF94F 0xFD13
   \              0xF9EB 0xFC91
   \   000000BE   0xFAB6 0xFCB8      DC16 -1354, -840, -1398, -752, -1194, -737, -1219, -701, -1448, -791
   \              0xFA8A 0xFD10
   \              0xFB56 0xFD1F
   \              0xFB3D 0xFD43
   \              0xFA58 0xFCE9
   \   000000D2   0xFA3F 0xFD02      DC16 -1473, -766, -1738, -904, -1471, -957, -1355, -812, -1217, -815
   \              0xF936 0xFC78
   \              0xFA41 0xFC43
   \              0xFAB5 0xFCD4
   \              0xFB3F 0xFCD1
   \   000000E6   0xFBE0 0xFD23      DC16 -1056, -733, -1097, -682, -681, -615, -625, -449, -322, -375, 49
   \              0xFBB7 0xFD56
   \              0xFD57 0xFD99
   \              0xFD8F 0xFE3F
   \              0xFEBE 0xFE89
   \              0x0031       
   \   000000FC   0xFEEC 0x011F      DC16 -276, 287, 6, 221, 79, 140, 5, 528, 43, 393, 339, -40, 181, 106
   \              0x0006 0x00DD
   \              0x004F 0x008C
   \              0x0005 0x0210
   \              0x002B 0x0189
   \              0x0153 0xFFD8
   \              0x00B5 0x006A
   \   00000118   0x00C6 0x0012      DC16 198, 18, -31, 92, 103, -24, 102, -78, 23, -331, 21, -426, -17
   \              0xFFE1 0x005C
   \              0x0067 0xFFE8
   \              0x0066 0xFFB2
   \              0x0017 0xFEB5
   \              0x0015 0xFE56
   \              0xFFEF       
   \   00000132   0xFD25 0xFF37      DC16 -731, -201, -723, -271, -856, -301, -973, -542, -885, -434, -902
   \              0xFD2D 0xFEF1
   \              0xFCA8 0xFED3
   \              0xFC33 0xFDE2
   \              0xFC8B 0xFE4E
   \              0xFC7A       
   \   00000148   0xFE85 0xFC92      DC16 -379, -878, -460, -646, -412, -832, -372, -651, -373, -677, -419
   \              0xFE34 0xFD7A
   \              0xFE64 0xFCC0
   \              0xFE8C 0xFD75
   \              0xFE8B 0xFD5B
   \              0xFE5D       
   \   0000015E   0xFE04 0xFE40      DC16 -508, -448, -404, -335, -256, -402, -385, -450, -284, -325, -372
   \              0xFE6C 0xFEB1
   \              0xFF00 0xFE6E
   \              0xFE7F 0xFE3E
   \              0xFEE4 0xFEBB
   \              0xFE8C       
   \   00000174   0xFED1 0xFEDB      DC16 -303, -293, -394, -211, -340, 162, -255, 158, -199, -86, -296
   \              0xFE76 0xFF2D
   \              0xFEAC 0x00A2
   \              0xFF01 0x009E
   \              0xFF39 0xFFAA
   \              0xFED8       
   \   0000018A   0xFF76 0xFF09      DC16 -138, -247, -183, -327, -192, -403, -190, -400, -224, -296, -221
   \              0xFF49 0xFEB9
   \              0xFF40 0xFE6D
   \              0xFF42 0xFE70
   \              0xFF20 0xFED8
   \              0xFF23       
   \   000001A0   0xFE84 0xFF11      DC16 -380, -239, -332, -383, -282, -457, -409, -446, -478, -561, -439
   \              0xFEB4 0xFE81
   \              0xFEE6 0xFE37
   \              0xFE67 0xFE42
   \              0xFE22 0xFDCF
   \              0xFE49       
   \   000001B6   0xFDF8 0xFE6A      DC16 -520, -406, -571, -399, -389, -426, -154, -271, -284, -240, 13
   \              0xFDC5 0xFE71
   \              0xFE7B 0xFE56
   \              0xFF66 0xFEF1
   \              0xFEE4 0xFF10
   \              0x000D       
   \   000001CC   0xFFD5 0xFFBF      DC16 -43, -65, -51, 23, 66, -43, -19, -5, -2, 12, -146, 178, 90, 202
   \              0xFFCD 0x0017
   \              0x0042 0xFFD5
   \              0xFFED 0xFFFB
   \              0xFFFE 0x000C
   \              0xFF6E 0x00B2
   \              0x005A 0x00CA
   \   000001E8   0x0041 0x01CA      DC16 65, 458, 253, 503, 261, 632, 288, 777, 398, 774, 464, 721, 492
   \              0x00FD 0x01F7
   \              0x0105 0x0278
   \              0x0120 0x0309
   \              0x018E 0x0306
   \              0x01D0 0x02D1
   \              0x01EC       
   \   00000202   0x02B7 0x01FA      DC16 695, 506, 736, 501, 583, 467, 700, 424, 702, 545, 868, 679, 914
   \              0x02E0 0x01F5
   \              0x0247 0x01D3
   \              0x02BC 0x01A8
   \              0x02BE 0x0221
   \              0x0364 0x02A7
   \              0x0392       
   \   0000021C   0x0268 0x03B7      DC16 616, 951, 698, 1046, 662, 1053, 676, 777, 590, 840, 560, 516, 562
   \              0x02BA 0x0416
   \              0x0296 0x041D
   \              0x02A4 0x0309
   \              0x024E 0x0348
   \              0x0230 0x0204
   \              0x0232       
   \   00000236   0x022C 0x01DD      DC16 556, 477, 371, 447, 301, 368, 210, 384, -56, 91, 8, 195, 6, 146
   \              0x0173 0x01BF
   \              0x012D 0x0170
   \              0x00D2 0x0180
   \              0xFFC8 0x005B
   \              0x0008 0x00C3
   \              0x0006 0x0092
   \   00000252   0xFFEC 0x00DC      DC16 -20, 220, -227, 147, -382, 71, -458, 68, -663, -59, -751, -280
   \              0xFF1D 0x0093
   \              0xFE82 0x0047
   \              0xFE36 0x0044
   \              0xFD69 0xFFC5
   \              0xFD11 0xFEE8
   \   0000026A   0xFD02 0xFEB0      DC16 -766, -336, -870, -364, -669, -352, -449, -329, -700, -179, -676
   \              0xFC9A 0xFE94
   \              0xFD63 0xFEA0
   \              0xFE3F 0xFEB7
   \              0xFD44 0xFF4D
   \              0xFD5C       
   \   00000280   0xFE75 0xFE78      DC16 -395, -392, -183, -650, -178, -699, -294, -455, -267, -196, -48
   \              0xFF49 0xFD76
   \              0xFF4E 0xFD45
   \              0xFEDA 0xFE39
   \              0xFEF5 0xFF3C
   \              0xFFD0       
   \   00000296   0x0104 0x0051      DC16 260, 81, 367, 234, 612, 162, 672, 312, 746, 359, 817, 517, 848
   \              0x016F 0x00EA
   \              0x0264 0x00A2
   \              0x02A0 0x0138
   \              0x02EA 0x0167
   \              0x0331 0x0205
   \              0x0350       
   \   000002B0   0x0218 0x035C      DC16 536, 860, 665, 1023, 490, 1011, 581, 1086, 593, 1266, 603, 1070
   \              0x0299 0x03FF
   \              0x01EA 0x03F3
   \              0x0245 0x043E
   \              0x0251 0x04F2
   \              0x025B 0x042E
   \   000002C8   0x02C1 0x048A      DC16 705, 1162, 642, 1140, 518, 901, 587, 893, 410, 692, 513, 534, 364
   \              0x0282 0x0474
   \              0x0206 0x0385
   \              0x024B 0x037D
   \              0x019A 0x02B4
   \              0x0201 0x0216
   \              0x016C       
   \   000002E2   0x024D 0x01B1      DC16 589, 433, 869, 504, 712, 558, 816, 436, 730, 627, 774, 619, 921
   \              0x0365 0x01F8
   \              0x02C8 0x022E
   \              0x0330 0x01B4
   \              0x02DA 0x0273
   \              0x0306 0x026B
   \              0x0399       
   \   000002FC   0x021D 0x02F4      DC16 541, 756, 466, 981, 517, 895, 499, 608, 378, 659, 442, 619, 337
   \              0x01D2 0x03D5
   \              0x0205 0x037F
   \              0x01F3 0x0260
   \              0x017A 0x0293
   \              0x01BA 0x026B
   \              0x0151       
   \   00000316   0x014F 0x0159      DC16 335, 345, 320, 280, 534, 320, 597, 273, 533, 370, 516, 356, 437
   \              0x0140 0x0118
   \              0x0216 0x0140
   \              0x0255 0x0111
   \              0x0215 0x0172
   \              0x0204 0x0164
   \              0x01B5       
   \   00000330   0x0110 0x01E7      DC16 272, 487, 374, 373, 404, 227, 311, 295, 240, 304, 324, -41, 209
   \              0x0176 0x0175
   \              0x0194 0x00E3
   \              0x0137 0x0127
   \              0x00F0 0x0130
   \              0x0144 0xFFD7
   \              0x00D1       
   \   0000034A   0x006E 0x0066      DC16 110, 102, -214, 38, -198, -114, -142, -36, -196, -86, -151, -72
   \              0xFF2A 0x0026
   \              0xFF3A 0xFF8E
   \              0xFF72 0xFFDC
   \              0xFF3C 0xFFAA
   \              0xFF69 0xFFB8
   \   00000362   0xFE5D 0xFFD1      DC16 -419, -47, -406, -133, -437, -98, -124, -59, -212, 180, -208, 40
   \              0xFE6A 0xFF7B
   \              0xFE4B 0xFF9E
   \              0xFF84 0xFFC5
   \              0xFF2C 0x00B4
   \              0xFF30 0x0028
   \   0000037A   0xFDD1 0x0093      DC16 -559, 147, -805, -180, -1143, -324, -1249, -488, -1382, -701
   \              0xFCDB 0xFF4C
   \              0xFB89 0xFEBC
   \              0xFB1F 0xFE18
   \              0xFA9A 0xFD43
   \   0000038E   0xFBCA 0xFD54      DC16 -1078, -684, -1130, -553, -910, -404, -1308, -418, -1441, -698
   \              0xFB96 0xFDD7
   \              0xFC72 0xFE6C
   \              0xFAE4 0xFE5E
   \              0xFA5F 0xFD46
   \   000003A2   0xF9E8 0xFD4E      DC16 -1560, -690, -1719, -727, -1817, -894, -1791, -902, -1640, -931
   \              0xF949 0xFD29
   \              0xF8E7 0xFC82
   \              0xF901 0xFC7A
   \              0xF998 0xFC5D
   \   000003B6   0xFAF4 0xFCDA      DC16 -1292, -806, -1347, -597, -1127, -578, -899, -622, -643, -402
   \              0xFABD 0xFDAB
   \              0xFB99 0xFDBE
   \              0xFC7D 0xFD92
   \              0xFD7D 0xFE6E
   \   000003CA   0xFD22 0xFE35      DC16 -734, -459, -427, -433, -736, -296, -527, -451, -454, -345, -296
   \              0xFE55 0xFE4F
   \              0xFD20 0xFED8
   \              0xFDF1 0xFE3D
   \              0xFE3A 0xFEA7
   \              0xFED8       
   \   000003E0   0xFF05 0xFEF3      DC16 -251, -269, -207, 25, -157, 132, 46, 214, -7, 452, -22, 235, 62
   \              0xFF31 0x0019
   \              0xFF63 0x0084
   \              0x002E 0x00D6
   \              0xFFF9 0x01C4
   \              0xFFEA 0x00EB
   \              0x003E       
   \   000003FA   0x00DE 0x0007      DC16 222, 7, 186, -24, 228, -77, 56, -35, 345, 6, 535, 51, 301, 41, 229
   \              0x00BA 0xFFE8
   \              0x00E4 0xFFB3
   \              0x0038 0xFFDD
   \              0x0159 0x0006
   \              0x0217 0x0033
   \              0x012D 0x0029
   \              0x00E5       
   \   00000418   0xFFDE 0x0119      DC16 -34, 281, -84, 193, -48, -3, -125, 22, -264, -25, -134, -99, -100
   \              0xFFAC 0x00C1
   \              0xFFD0 0xFFFD
   \              0xFF83 0x0016
   \              0xFEF8 0xFFE7
   \              0xFF7A 0xFF9D
   \              0xFF9C       
   \   00000432   0xFF87 0xFF49      DC16 -121, -183, 39, -167, -90, -176, -152, -120, -222, -259, -216
   \              0x0027 0xFF59
   \              0xFFA6 0xFF50
   \              0xFF68 0xFF88
   \              0xFF22 0xFEFD
   \              0xFF28       
   \   00000448   0xFF30 0xFE73      DC16 -208, -397, -303, -426, -279, -230, -404, -253, -298, -228, -379
   \              0xFED1 0xFE56
   \              0xFEE9 0xFF1A
   \              0xFE6C 0xFF03
   \              0xFED6 0xFF1C
   \              0xFE85       
   \   0000045E   0xFEC4 0xFE79      DC16 -316, -391, -62, -397, 55, -190, -77, -292, -4, -176, -262, -272
   \              0xFFC2 0xFE73
   \              0x0037 0xFF42
   \              0xFFB3 0xFEDC
   \              0xFFFC 0xFF50
   \              0xFEFA 0xFEF0
   \   00000476   0xFF00 0xFF1E      DC16 -256, -226, -79, -218, -92, -151, -16, -137, 42, -199, 187, -148
   \              0xFFB1 0xFF26
   \              0xFFA4 0xFF69
   \              0xFFF0 0xFF77
   \              0x002A 0xFF39
   \              0x00BB 0xFF6C
   \   0000048E   0x009B 0xFFE8      DC16 155, -24, 268, 100, 255, 59, 178, 130, -26, -92, -94, -213, -221
   \              0x010C 0x0064
   \              0x00FF 0x003B
   \              0x00B2 0x0082
   \              0xFFE6 0xFFA4
   \              0xFFA2 0xFF2B
   \              0xFF23       
   \   000004A8   0xFEDF 0xFF32      DC16 -289, -206, -284, -227, -228, -251, -141, -210, -300, -168, -138
   \              0xFEE4 0xFF1D
   \              0xFF1C 0xFF05
   \              0xFF73 0xFF2E
   \              0xFED4 0xFF58
   \              0xFF76       
   \   000004BE   0xFF3E 0xFF9B      DC16 -194, -101, -203, -181, -496, -231, -394, -134, -340, -236, -551
   \              0xFF35 0xFF4B
   \              0xFE10 0xFF19
   \              0xFE76 0xFF7A
   \              0xFEAC 0xFF14
   \              0xFDD9       
   \   000004D4   0xFF31 0xFE6A      DC16 -207, -406, -167, -771, -226, -821, -365, -909, -479, -971, -481
   \              0xFF59 0xFCFD
   \              0xFF1E 0xFCCB
   \              0xFE93 0xFC73
   \              0xFE21 0xFC35
   \              0xFE1F       
   \   000004EA   0xFC30 0xFDBF      DC16 -976, -577, -965, -538, -1053, -633, -1186, -609, -1184, -743
   \              0xFC3B 0xFDE6
   \              0xFBE3 0xFD87
   \              0xFB5E 0xFD9F
   \              0xFB60 0xFD19
   \   000004FE   0xFB39 0xFDBD      DC16 -1223, -579, -1353, -579, -1477, -818, -1281, -743, -1084, -667
   \              0xFAB7 0xFDBD
   \              0xFA3B 0xFCCE
   \              0xFAFF 0xFD19
   \              0xFBC4 0xFD65
   \   00000512   0xFBD8 0xFD33      DC16 -1064, -717, -790, -672, -714, -557, -776, -620, -531, -586, -567
   \              0xFCEA 0xFD60
   \              0xFD36 0xFDD3
   \              0xFCF8 0xFD94
   \              0xFDED 0xFDB6
   \              0xFDC9       
   \   00000528   0xFE40 0xFEC9      DC16 -448, -311, -423, -365, -442, -72, -67, -388, -33, -598, -194
   \              0xFE59 0xFE93
   \              0xFE46 0xFFB8
   \              0xFFBD 0xFE7C
   \              0xFFDF 0xFDAA
   \              0xFF3E       
   \   0000053E   0xFDD0 0xFEC8      DC16 -560, -312, -725, -358, -486, -286, -449, -126, -367, -22, -287
   \              0xFD2B 0xFE9A
   \              0xFE1A 0xFEE2
   \              0xFE3F 0xFF82
   \              0xFE91 0xFFEA
   \              0xFEE1       
   \   00000554   0xFF95 0xFEAF      DC16 -107, -337, -44, -88, 63, -4, 13, 31, 110, -62, -21, 8, 35, 47, 88
   \              0xFFD4 0xFFA8
   \              0x003F 0xFFFC
   \              0x000D 0x001F
   \              0x006E 0xFFC2
   \              0xFFEB 0x0008
   \              0x0023 0x002F
   \              0x0058       
   \   00000572   0x00AC 0x0050      DC16 172, 80, -10, 310, -283, 21, -211, -49, -261, 36, -281, 0, -550
   \              0xFFF6 0x0136
   \              0xFEE5 0x0015
   \              0xFF2D 0xFFCF
   \              0xFEFB 0x0024
   \              0xFEE7 0x0000
   \              0xFDDA       
   \   0000058C   0xFF6C 0xFE02      DC16 -148, -510, -244, -592, -212, -691, -278, -772, -321, -921, -421
   \              0xFF0C 0xFDB0
   \              0xFF2C 0xFD4D
   \              0xFEEA 0xFCFC
   \              0xFEBF 0xFC67
   \              0xFE5B       
   \   000005A2   0xFC87 0xFE30      DC16 -889, -464, -1194, -490, -1331, -705, -1204, -663, -1398, -669
   \              0xFB56 0xFE16
   \              0xFACD 0xFD3F
   \              0xFB4C 0xFD69
   \              0xFA8A 0xFD63
   \   000005B6   0xFA97 0xFCDE      DC16 -1385, -802, -1036, -695, -1211, -684, -1469, -718, -1408, -812
   \              0xFBF4 0xFD49
   \              0xFB45 0xFD54
   \              0xFA43 0xFD32
   \              0xFA80 0xFCD4
   \   000005CA   0xFAE1 0xFD05      DC16 -1311, -763, -1691, -834, -1582, -952, -1599, -955, -1466, -960
   \              0xF965 0xFCBE
   \              0xF9D2 0xFC48
   \              0xF9C1 0xFC45
   \              0xFA46 0xFC40
   \   000005DE   0xFBA5 0xFC42      DC16 -1115, -958, -956, -838, -783, -724, -529, -591, -64, -457, -265
   \              0xFC44 0xFCBA
   \              0xFCF1 0xFD2C
   \              0xFDEF 0xFDB1
   \              0xFFC0 0xFE37
   \              0xFEF7       
   \   000005F4   0xFF39 0xFFEB      DC16 -199, -21, -255, -153, -266, -216, -314, -221, -439, -219, -383
   \              0xFF01 0xFF67
   \              0xFEF6 0xFF28
   \              0xFEC6 0xFF23
   \              0xFE49 0xFF25
   \              0xFE81       
   \   0000060A   0xFE75 0xFE38      DC16 -395, -456, -240, -299, -231, -260, -17, -180, 18, -83, 154, -113
   \              0xFF10 0xFED5
   \              0xFF19 0xFEFC
   \              0xFFEF 0xFF4C
   \              0x0012 0xFFAD
   \              0x009A 0xFF8F
   \   00000622   0x007D 0xFFB9      DC16 125, -71, 384, 20, 434, 121, 387, 132, 824, 232, 942, 482, 1417
   \              0x0180 0x0014
   \              0x01B2 0x0079
   \              0x0183 0x0084
   \              0x0338 0x00E8
   \              0x03AE 0x01E2
   \              0x0589       
   \   0000063C   0x0233 0x046E      DC16 563, 1134, 611, 1026, 485, 802, 468, 1099, 477, 1286, 632, 1532
   \              0x0263 0x0402
   \              0x01E5 0x0322
   \              0x01D4 0x044B
   \              0x01DD 0x0506
   \              0x0278 0x05FC
   \   00000654   0x02F5 0x06C4      DC16 757, 1732, 903, 1488, 1027, 1480, 1017, 1495, 950, 1454, 900, 1531
   \              0x0387 0x05D0
   \              0x0403 0x05C8
   \              0x03F9 0x05D7
   \              0x03B6 0x05AE
   \              0x0384 0x05FB
   \   0000066C   0x0373 0x063E      DC16 883, 1598, 913, 1314, 919, 1223, 821, 983, 683, 846, 560, 625, 437
   \              0x0391 0x0522
   \              0x0397 0x04C7
   \              0x0335 0x03D7
   \              0x02AB 0x034E
   \              0x0230 0x0271
   \              0x01B5       
   \   00000686   0x025D 0x0176      DC16 605, 374, 325, 330, 343, 276, 249, 265, 157, 261, 73, 277, -17
   \              0x0145 0x014A
   \              0x0157 0x0114
   \              0x00F9 0x0109
   \              0x009D 0x0105
   \              0x0049 0x0115
   \              0xFFEF       
   \   000006A0   0x008C 0xFFB5      DC16 140, -75, 223, 46, 91, -115, 125, -413, -36, -336, -81, -382, -123
   \              0x00DF 0x002E
   \              0x005B 0xFF8D
   \              0x007D 0xFE63
   \              0xFFDC 0xFEB0
   \              0xFFAF 0xFE82
   \              0xFF85       
   \   000006BA   0xFE26 0xFF90      DC16 -474, -112, -683, -135, -639, -252, -589, -262, -306, -188, 227, 8
   \              0xFD55 0xFF79
   \              0xFD81 0xFF04
   \              0xFDB3 0xFEFA
   \              0xFECE 0xFF44
   \              0x00E3 0x0008
   \   000006D2   0x010C 0x00FF      DC16 268, 255, 310, 209, 473, 428, 467, 479, 457, 341, 257, 268, 152
   \              0x0136 0x00D1
   \              0x01D9 0x01AC
   \              0x01D3 0x01DF
   \              0x01C9 0x0155
   \              0x0101 0x010C
   \              0x0098       
   \   000006EC   0x00B2 0x003A      DC16 178, 58, 76, -1, 68, -203, 5, -311, -48, -319, -117, -242, -89
   \              0x004C 0xFFFF
   \              0x0044 0xFF35
   \              0x0005 0xFEC9
   \              0xFFD0 0xFEC1
   \              0xFF8B 0xFF0E
   \              0xFFA7       
   \   00000706   0xFF18 0xFFA7      DC16 -232, -89, -114, -57, 168, 25, 198, 251, 367, 202, 185, 169, 237
   \              0xFF8E 0xFFC7
   \              0x00A8 0x0019
   \              0x00C6 0x00FB
   \              0x016F 0x00CA
   \              0x00B9 0x00A9
   \              0x00ED       
   \   00000720   0x0054 0x00B9      DC16 84, 185, 88, 575, 127, 806, 270, 1263, 541, 1506, 822, 1625, 854
   \              0x0058 0x023F
   \              0x007F 0x0326
   \              0x010E 0x04EF
   \              0x021D 0x05E2
   \              0x0336 0x0659
   \              0x0356       
   \   0000073A   0x05D1 0x03FA      DC16 1489, 1018, 1600, 956, 1535, 1013, 1583, 1037, 1662, 1072, 1722
   \              0x0640 0x03BC
   \              0x05FF 0x03F5
   \              0x062F 0x040D
   \              0x067E 0x0430
   \              0x06BA       
   \   00000750   0x0445 0x0695      DC16 1093, 1685, 1088, 1695, 1154, 1826, 1312, 2064, 1329, 2196, 1447
   \              0x0440 0x069F
   \              0x0482 0x0722
   \              0x0520 0x0810
   \              0x0531 0x0894
   \              0x05A7       
   \   00000766   0x092C 0x05F0      DC16 2348, 1520, 2433, 1655, 2410, 1745, 2398, 1625, 2227, 1555, 2052
   \              0x0981 0x0677
   \              0x096A 0x06D1
   \              0x095E 0x0659
   \              0x08B3 0x0613
   \              0x0804       
   \   0000077C   0x05DC 0x086E      DC16 1500, 2158, 1455, 1907, 1453, 1680, 1420, 1444, 1276, 1204, 1112
   \              0x05AF 0x0773
   \              0x05AD 0x0690
   \              0x058C 0x05A4
   \              0x04FC 0x04B4
   \              0x0458       
   \   00000792   0x0366 0x03EB      DC16 870, 1003, 942, 910, 579, 800, 568, 602, 633, 684, 163, 540, 80
   \              0x03AE 0x038E
   \              0x0243 0x0320
   \              0x0238 0x025A
   \              0x0279 0x02AC
   \              0x00A3 0x021C
   \              0x0050       
   \   000007AC   0x01EB 0xFFD7      DC16 491, -41, 385, -41, 290, -331, 164, -440, 106, -575, -94, -896
   \              0x0181 0xFFD7
   \              0x0122 0xFEB5
   \              0x00A4 0xFE48
   \              0x006A 0xFDC1
   \              0xFFA2 0xFC80
   \   000007C4   0xFEF5 0xFCEC      DC16 -267, -788, -170, -1030, -249, -933, -287, -1127, -363, -1212
   \              0xFF56 0xFBFA
   \              0xFF07 0xFC5B
   \              0xFEE1 0xFB99
   \              0xFE95 0xFB44
   \   000007D8   0xFE28 0xFA6C      DC16 -472, -1428, -474, -1460, -614, -1911, -813, -1824, -887, -1632
   \              0xFE26 0xFA4C
   \              0xFD9A 0xF889
   \              0xFCD3 0xF8E0
   \              0xFC89 0xF9A0
   \   000007EC   0xFC98 0xFA7F      DC16 -872, -1409, -742, -1085, -596, -999, -450, -720, -311, -732
   \              0xFD1A 0xFBC3
   \              0xFDAC 0xFC19
   \              0xFE3E 0xFD30
   \              0xFEC9 0xFD24
    105          560  ,1304  ,785  ,1224  ,772  ,1266  ,837  ,1284  ,863  ,1317 ,
    106          937  ,1551  ,996  ,1424  ,1053  ,1502  ,987  ,1489  ,919  ,1319 ,
    107          905  ,1308  ,822  ,1440  ,850  ,1313  ,942  ,1451  ,890  ,1222 ,
    108          953  ,1425  ,801  ,1255  ,903  ,1384  ,985  ,1205  ,865  ,1378 ,
    109          917  ,1095  ,953  ,865  ,828  ,685  ,664  ,590  ,637  ,585 ,
    110          599  ,421  ,527  ,273  ,427  ,449  ,400  ,346  ,566  ,160 ,
    111          217  ,-154  ,170  ,-244  ,164  ,-347  ,-14  ,-263  ,-39  ,-132 ,
    112          -24  ,-114  ,-26  ,22  ,-14  ,-292  ,111  ,-354  ,-41  ,-412 ,
    113          -181  ,-651  ,-280  ,-890  ,-314  ,-1265  ,-510  ,-1464  ,-628  ,-1580 ,
    114          -645  ,-1713  ,-749  ,-1557  ,-879  ,-1354  ,-840  ,-1398  ,-752  ,-1194 ,
    115          -737  ,-1219  ,-701  ,-1448  ,-791  ,-1473  ,-766  ,-1738  ,-904  ,-1471 ,
    116          -957  ,-1355  ,-812  ,-1217  ,-815  ,-1056  ,-733  ,-1097  ,-682  ,-681 ,
    117          -615  ,-625  ,-449  ,-322  ,-375  ,49  ,-276  ,287  ,6  ,221 ,
    118          79  ,140  ,5  ,528  ,43  ,393  ,339  ,-40  ,181  ,106 ,
    119          198  ,18  ,-31  ,92  ,103  ,-24  ,102  ,-78  ,23  ,-331 ,
    120          21  ,-426  ,-17  ,-731  ,-201  ,-723  ,-271  ,-856  ,-301  ,-973 ,
    121          -542  ,-885  ,-434  ,-902  ,-379  ,-878  ,-460  ,-646  ,-412  ,-832 ,
    122          -372  ,-651  ,-373  ,-677  ,-419  ,-508  ,-448  ,-404  ,-335  ,-256 ,
    123          -402  ,-385  ,-450  ,-284  ,-325  ,-372  ,-303  ,-293  ,-394  ,-211 ,
    124          -340  ,162  ,-255  ,158  ,-199  ,-86  ,-296  ,-138  ,-247  ,-183 ,
    125          -327  ,-192  ,-403  ,-190  ,-400  ,-224  ,-296  ,-221  ,-380  ,-239 ,
    126          -332  ,-383  ,-282  ,-457  ,-409  ,-446  ,-478  ,-561  ,-439  ,-520 ,
    127          -406  ,-571  ,-399  ,-389  ,-426  ,-154  ,-271  ,-284  ,-240  ,13 ,
    128          -43  ,-65  ,-51  ,23  ,66  ,-43  ,-19  ,-5  ,-2  ,12 ,
    129          -146  ,178  ,90  ,202  ,65  ,458  ,253  ,503  ,261  ,632 ,
    130          288  ,777  ,398  ,774  ,464  ,721  ,492  ,695  ,506  ,736 ,
    131          501  ,583  ,467  ,700  ,424  ,702  ,545  ,868  ,679  ,914 ,
    132          616  ,951  ,698  ,1046  ,662  ,1053  ,676  ,777  ,590  ,840 ,
    133          560  ,516  ,562  ,556  ,477  ,371  ,447  ,301  ,368  ,210 ,
    134          384  ,-56  ,91  ,8  ,195  ,6  ,146  ,-20  ,220  ,-227 ,
    135          147  ,-382  ,71  ,-458  ,68  ,-663  ,-59  ,-751  ,-280  ,-766 ,
    136          -336  ,-870  ,-364  ,-669  ,-352  ,-449  ,-329  ,-700  ,-179  ,-676 ,
    137          -395  ,-392  ,-183  ,-650  ,-178  ,-699  ,-294  ,-455  ,-267  ,-196 ,
    138          -48  ,260  ,81  ,367  ,234  ,612  ,162  ,672  ,312  ,746 ,
    139          359  ,817  ,517  ,848  ,536  ,860  ,665  ,1023  ,490  ,1011 ,
    140          581  ,1086  ,593  ,1266  ,603  ,1070  ,705  ,1162  ,642  ,1140 ,
    141          518  ,901  ,587  ,893  ,410  ,692  ,513  ,534  ,364  ,589 ,
    142          433  ,869  ,504  ,712  ,558  ,816  ,436  ,730  ,627  ,774 ,
    143          619  ,921  ,541  ,756  ,466  ,981  ,517  ,895  ,499  ,608 ,
    144          378  ,659  ,442  ,619  ,337  ,335  ,345  ,320  ,280  ,534 ,
    145          320  ,597  ,273  ,533  ,370  ,516  ,356  ,437  ,272  ,487 ,
    146          374  ,373  ,404  ,227  ,311  ,295  ,240  ,304  ,324  ,-41 ,
    147          209  ,110  ,102  ,-214  ,38  ,-198  ,-114  ,-142  ,-36  ,-196 ,
    148          -86  ,-151  ,-72  ,-419  ,-47  ,-406  ,-133  ,-437  ,-98  ,-124 ,
    149          -59  ,-212  ,180  ,-208  ,40  ,-559  ,147  ,-805  ,-180  ,-1143 ,
    150          -324  ,-1249  ,-488  ,-1382  ,-701  ,-1078  ,-684  ,-1130  ,-553  ,-910 ,
    151          -404  ,-1308  ,-418  ,-1441  ,-698  ,-1560  ,-690  ,-1719  ,-727  ,-1817 ,
    152          -894  ,-1791  ,-902  ,-1640  ,-931  ,-1292  ,-806  ,-1347  ,-597  ,-1127 ,
    153          -578  ,-899  ,-622  ,-643  ,-402  ,-734  ,-459  ,-427  ,-433  ,-736 ,
    154          -296  ,-527  ,-451  ,-454  ,-345  ,-296  ,-251  ,-269  ,-207  ,25 ,
    155          -157  ,132  ,46  ,214  ,-7  ,452  ,-22  ,235  ,62  ,222 ,
    156          7  ,186  ,-24  ,228  ,-77  ,56  ,-35  ,345  ,6  ,535 ,
    157          51  ,301  ,41  ,229  ,-34  ,281  ,-84  ,193  ,-48  ,-3 ,
    158          -125  ,22  ,-264  ,-25  ,-134  ,-99  ,-100  ,-121  ,-183  ,39 ,
    159          -167  ,-90  ,-176  ,-152  ,-120  ,-222  ,-259  ,-216  ,-208  ,-397 ,
    160          -303  ,-426  ,-279  ,-230  ,-404  ,-253  ,-298  ,-228  ,-379  ,-316 ,
    161          -391  ,-62  ,-397  ,55  ,-190  ,-77  ,-292  ,-4  ,-176  ,-262 ,
    162          -272  ,-256  ,-226  ,-79  ,-218  ,-92  ,-151  ,-16  ,-137  ,42 ,
    163          -199  ,187  ,-148  ,155  ,-24  ,268  ,100  ,255  ,59  ,178 ,
    164          130  ,-26  ,-92  ,-94  ,-213  ,-221  ,-289  ,-206  ,-284  ,-227 ,
    165          -228  ,-251  ,-141  ,-210  ,-300  ,-168  ,-138  ,-194  ,-101  ,-203 ,
    166          -181  ,-496  ,-231  ,-394  ,-134  ,-340  ,-236  ,-551  ,-207  ,-406 ,
    167          -167  ,-771  ,-226  ,-821  ,-365  ,-909  ,-479  ,-971  ,-481  ,-976 ,
    168          -577  ,-965  ,-538  ,-1053  ,-633  ,-1186  ,-609  ,-1184  ,-743  ,-1223 ,
    169          -579  ,-1353  ,-579  ,-1477  ,-818  ,-1281  ,-743  ,-1084  ,-667  ,-1064 ,
    170          -717  ,-790  ,-672  ,-714  ,-557  ,-776  ,-620  ,-531  ,-586  ,-567 ,
    171          -448  ,-311  ,-423  ,-365  ,-442  ,-72  ,-67  ,-388  ,-33  ,-598 ,
    172          -194  ,-560  ,-312  ,-725  ,-358  ,-486  ,-286  ,-449  ,-126  ,-367 ,
    173          -22  ,-287  ,-107  ,-337  ,-44  ,-88  ,63  ,-4  ,13  ,31 ,
    174          110  ,-62  ,-21  ,8  ,35  ,47  ,88  ,172  ,80  ,-10 ,
    175          310  ,-283  ,21  ,-211  ,-49  ,-261  ,36  ,-281  ,0  ,-550 ,
    176          -148  ,-510  ,-244  ,-592  ,-212  ,-691  ,-278  ,-772  ,-321  ,-921 ,
    177          -421  ,-889  ,-464  ,-1194  ,-490  ,-1331  ,-705  ,-1204  ,-663  ,-1398 ,
    178          -669  ,-1385  ,-802  ,-1036  ,-695  ,-1211  ,-684  ,-1469  ,-718  ,-1408 ,
    179          -812  ,-1311  ,-763  ,-1691  ,-834  ,-1582  ,-952  ,-1599  ,-955  ,-1466 ,
    180          -960  ,-1115  ,-958  ,-956  ,-838  ,-783  ,-724  ,-529  ,-591  ,-64 ,
    181          -457  ,-265  ,-199  ,-21  ,-255  ,-153  ,-266  ,-216  ,-314  ,-221 ,
    182          -439  ,-219  ,-383  ,-395  ,-456  ,-240  ,-299  ,-231  ,-260  ,-17 ,
    183          -180  ,18  ,-83  ,154  ,-113  ,125  ,-71  ,384  ,20  ,434 ,
    184          121  ,387  ,132  ,824  ,232  ,942  ,482  ,1417  ,563  ,1134 ,
    185          611  ,1026  ,485  ,802  ,468  ,1099  ,477  ,1286  ,632  ,1532 ,
    186          757  ,1732  ,903  ,1488  ,1027  ,1480  ,1017  ,1495  ,950  ,1454 ,
    187          900  ,1531  ,883  ,1598  ,913  ,1314  ,919  ,1223  ,821  ,983 ,
    188          683  ,846  ,560  ,625  ,437  ,605  ,374  ,325  ,330  ,343 ,
    189          276  ,249  ,265  ,157  ,261  ,73  ,277  ,-17  ,140  ,-75 ,
    190          223  ,46  ,91  ,-115  ,125  ,-413  ,-36  ,-336  ,-81  ,-382 ,
    191          -123  ,-474  ,-112  ,-683  ,-135  ,-639  ,-252  ,-589  ,-262  ,-306 ,
    192          -188  ,227  ,8  ,268  ,255  ,310  ,209  ,473  ,428  ,467 ,
    193          479  ,457  ,341  ,257  ,268  ,152  ,178  ,58  ,76  ,-1 ,
    194          68  ,-203  ,5  ,-311  ,-48  ,-319  ,-117  ,-242  ,-89  ,-232 ,
    195          -89  ,-114  ,-57  ,168  ,25  ,198  ,251  ,367  ,202  ,185 ,
    196          169  ,237  ,84  ,185  ,88  ,575  ,127  ,806  ,270  ,1263 ,
    197          541  ,1506  ,822  ,1625  ,854  ,1489  ,1018  ,1600  ,956  ,1535 ,
    198          1013  ,1583  ,1037  ,1662  ,1072  ,1722  ,1093  ,1685  ,1088  ,1695 ,
    199          1154  ,1826  ,1312  ,2064  ,1329  ,2196  ,1447  ,2348  ,1520  ,2433 ,
    200          1655  ,2410  ,1745  ,2398  ,1625  ,2227  ,1555  ,2052  ,1500  ,2158 ,
    201          1455  ,1907  ,1453  ,1680  ,1420  ,1444  ,1276  ,1204  ,1112  ,870 ,
    202          1003  ,942  ,910  ,579  ,800  ,568  ,602  ,633  ,684  ,163 ,
    203          540  ,80  ,491  ,-41  ,385  ,-41  ,290  ,-331  ,164  ,-440 ,
    204          106  ,-575  ,-94  ,-896  ,-267  ,-788  ,-170  ,-1030  ,-249  ,-933 ,
    205          -287  ,-1127  ,-363  ,-1212  ,-472  ,-1428  ,-474  ,-1460  ,-614  ,-1911 ,
    206          -813  ,-1824  ,-887  ,-1632  ,-872  ,-1409  ,-742  ,-1085  ,-596  ,-999 ,
    207          -450  ,-720  ,-311  ,-732 };
    208          
    209          
    210          
    211          /* 
    212          Library:
    213          https://github.com/piratfm/codec2_m4f/tree/master/lib
    214          */
    215          
    216          
    217          /*--------------EXTERN VARIABLES-----------------------------------------------------------------------------*/
    218          
    219          #if MAIN_CRSCORR
    220          extern arm_rfft_instance_q15 RealFFT_Ins, RealIFFT_Ins;
    221          #endif
    222          
    223          //extern arm_cfft_radix4_instance_f32 SS,SS1,SS2,SS3,SS4,ISS; 
    224          //extern arm_rfft_instance_f32 S,S1,S2,S3,S4,IS;
    225          extern arm_rfft_fast_instance_f32 S,S1,S2,S3,S4,IS;
    226          
    227          /*------------------------------------------------------------------------------------------------------------*/
    228          /*--------------------- VARIABLES-----------------------------------------------------------------------------*/
    229          

   \                                 In section .bss, align 4
    230          float bufferFFTSum[AUDIO_OUT_BUFFER_SIZE+100];  //storage the SUM in Furier domain
   \                     bufferFFTSum:
   \   00000000                      DS8 4496

   \                                 In section .bss, align 4
    231          float fbufferOut[AUDIO_OUT_BUFFER_SIZE+100];    //storage the output buffer in float type
   \                     fbufferOut:
   \   00000000                      DS8 4496

   \                                 In section .bss, align 4
    232          float fbuffer[AUDIO_OUT_BUFFER_SIZE+100];       //storage the input buffer in float type
   \                     fbuffer:
   \   00000000                      DS8 4496

   \                                 In section .bss, align 4
    233          Mic_Array_Data_f  DataFFT;                  //storage DFT's coefficients for microphones
   \                     DataFFT:
   \   00000000                      DS8 33088

   \                                 In section .bss, align 4
    234          uint32_t EnergySound,EnergyError;
   \                     EnergySound:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     EnergyError:
   \   00000000                      DS8 4
    235          

   \                                 In section .bss, align 4
    236          float vDataIn1_FFT[2*AUDIO_OUT_BUFFER_SIZE];
   \                     vDataIn1_FFT:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    237          float vDataIn2_FFT[2*AUDIO_OUT_BUFFER_SIZE];
   \                     vDataIn2_FFT:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    238          float vDataIn2_FFT_CJ[2*AUDIO_OUT_BUFFER_SIZE];
   \                     vDataIn2_FFT_CJ:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    239          float vDataIn_FFT[2*AUDIO_OUT_BUFFER_SIZE];
   \                     vDataIn_FFT:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    240          float vDataOut[2*AUDIO_OUT_BUFFER_SIZE];
   \                     vDataOut:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    241          float vDataIn[2*AUDIO_OUT_BUFFER_SIZE];
   \                     vDataIn:
   \   00000000                      DS8 8192
    242          
    243          /*------------------------------------------------------------------------------------------------------------*/
    244          /* Discreate Fourier Transform */

   \                                 In section .text, align 2, keep-with-next
    245          void DFT (float *x, float *Out, int N)
    246          {
   \                     DFT: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4682             MOV      R10,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
    247          	int m,n;
    248          	
    249          	for(m=0; m<N; m++)  // update for e very bar 
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x0006             MOVS     R6,R0
   \                     ??DFT_0: (+1)
   \   0000000E   0x42AE             CMP      R6,R5
   \   00000010   0xF280 0x8095      BGE.W    ??DFT_1
    250          	{
    251          		Out[2*m]  = Out[2*m+1] = 0;
   \   00000014   0x0070             LSLS     R0,R6,#+1
   \   00000016   0xEB14 0x0080      ADDS     R0,R4,R0, LSL #+2
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6041             STR      R1,[R0, #+4]
   \   0000001E   0xEB14 0x00C6      ADDS     R0,R4,R6, LSL #+3
   \   00000022   0x6840             LDR      R0,[R0, #+4]
   \   00000024   0xF844 0x0036      STR      R0,[R4, R6, LSL #+3]
    252          		
    253          		for (n  =0; n<N; n++) //
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x0007             MOVS     R7,R0
   \                     ??DFT_2: (+1)
   \   0000002C   0x42AF             CMP      R7,R5
   \   0000002E   0xF280 0x8084      BGE.W    ??DFT_3
    254          		{
    255          		    /* spectrum m: Real[m] = (Sum(x[n]*cos(2*PI*m*n/N)) , where n from 0 -->N    */
    256          			Out[2*m] += x[n]*arm_cos_f32(2*PI*(float)m*(float)n/(float)N);
   \   00000032   0xEE00 0x6A10      VMOV     S0,R6
   \   00000036   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000003A   0xEE10 0x0A10      VMOV     R0,S0
   \   0000003E   0x.... 0x....      BL       __aeabi_f2d
   \   00000042   0x.... 0x....      LDR.W    R2,??DataTable9  ;; 0x5a7ed197
   \   00000046   0x.... 0x....      LDR.W    R3,??DataTable9_1  ;; 0x401921fb
   \   0000004A   0x.... 0x....      BL       __aeabi_dmul
   \   0000004E   0x4680             MOV      R8,R0
   \   00000050   0x4689             MOV      R9,R1
   \   00000052   0xEE00 0x7A10      VMOV     S0,R7
   \   00000056   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000005A   0xEE10 0x0A10      VMOV     R0,S0
   \   0000005E   0x.... 0x....      BL       __aeabi_f2d
   \   00000062   0x4642             MOV      R2,R8
   \   00000064   0x464B             MOV      R3,R9
   \   00000066   0x.... 0x....      BL       __aeabi_dmul
   \   0000006A   0x4680             MOV      R8,R0
   \   0000006C   0x4689             MOV      R9,R1
   \   0000006E   0xEE00 0x5A10      VMOV     S0,R5
   \   00000072   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000076   0xEE10 0x0A10      VMOV     R0,S0
   \   0000007A   0x.... 0x....      BL       __aeabi_f2d
   \   0000007E   0x0002             MOVS     R2,R0
   \   00000080   0x000B             MOVS     R3,R1
   \   00000082   0x4640             MOV      R0,R8
   \   00000084   0x4649             MOV      R1,R9
   \   00000086   0x.... 0x....      BL       __aeabi_ddiv
   \   0000008A   0x.... 0x....      BL       __aeabi_d2f
   \   0000008E   0xEE00 0x0A10      VMOV     S0,R0
   \   00000092   0x.... 0x....      BL       arm_cos_f32
   \   00000096   0xEB1A 0x0087      ADDS     R0,R10,R7, LSL #+2
   \   0000009A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000009E   0xEB14 0x00C6      ADDS     R0,R4,R6, LSL #+3
   \   000000A2   0xED90 0x1A00      VLDR     S2,[R0, #0]
   \   000000A6   0xEE00 0x1A80      VMLA.F32 S2,S1,S0
   \   000000AA   0xEB14 0x00C6      ADDS     R0,R4,R6, LSL #+3
   \   000000AE   0xED80 0x1A00      VSTR     S2,[R0, #0]
    257          
    258                      /* specstrum n: Imagine[m] = (Sum(x[n]*sin(2*PI*m*n/N) ,  where n from 0 -->N */			
    259          			Out[2*m+1] -= x[n]*arm_sin_f32(2*PI*(float)m*(float)n/(float)N);
   \   000000B2   0xEE00 0x6A10      VMOV     S0,R6
   \   000000B6   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000BA   0xEE10 0x0A10      VMOV     R0,S0
   \   000000BE   0x.... 0x....      BL       __aeabi_f2d
   \   000000C2   0x.... 0x....      LDR.W    R2,??DataTable9  ;; 0x5a7ed197
   \   000000C6   0x.... 0x....      LDR.W    R3,??DataTable9_1  ;; 0x401921fb
   \   000000CA   0x.... 0x....      BL       __aeabi_dmul
   \   000000CE   0x4680             MOV      R8,R0
   \   000000D0   0x4689             MOV      R9,R1
   \   000000D2   0xEE00 0x7A10      VMOV     S0,R7
   \   000000D6   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000DA   0xEE10 0x0A10      VMOV     R0,S0
   \   000000DE   0x.... 0x....      BL       __aeabi_f2d
   \   000000E2   0x4642             MOV      R2,R8
   \   000000E4   0x464B             MOV      R3,R9
   \   000000E6   0x.... 0x....      BL       __aeabi_dmul
   \   000000EA   0x4680             MOV      R8,R0
   \   000000EC   0x4689             MOV      R9,R1
   \   000000EE   0xEE00 0x5A10      VMOV     S0,R5
   \   000000F2   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000F6   0xEE10 0x0A10      VMOV     R0,S0
   \   000000FA   0x.... 0x....      BL       __aeabi_f2d
   \   000000FE   0x0002             MOVS     R2,R0
   \   00000100   0x000B             MOVS     R3,R1
   \   00000102   0x4640             MOV      R0,R8
   \   00000104   0x4649             MOV      R1,R9
   \   00000106   0x.... 0x....      BL       __aeabi_ddiv
   \   0000010A   0x.... 0x....      BL       __aeabi_d2f
   \   0000010E   0xEE00 0x0A10      VMOV     S0,R0
   \   00000112   0x.... 0x....      BL       arm_sin_f32
   \   00000116   0x0070             LSLS     R0,R6,#+1
   \   00000118   0xEB14 0x0080      ADDS     R0,R4,R0, LSL #+2
   \   0000011C   0xEB1A 0x0187      ADDS     R1,R10,R7, LSL #+2
   \   00000120   0xEDD1 0x0A00      VLDR     S1,[R1, #0]
   \   00000124   0x0071             LSLS     R1,R6,#+1
   \   00000126   0xEB14 0x0181      ADDS     R1,R4,R1, LSL #+2
   \   0000012A   0xED91 0x1A01      VLDR     S2,[R1, #+4]
   \   0000012E   0xEE00 0x1AC0      VMLS.F32 S2,S1,S0
   \   00000132   0xED80 0x1A01      VSTR     S2,[R0, #+4]
    260          		}
   \   00000136   0x1C7F             ADDS     R7,R7,#+1
   \   00000138   0xE778             B.N      ??DFT_2
    261          
    262          	}
   \                     ??DFT_3: (+1)
   \   0000013A   0x1C76             ADDS     R6,R6,#+1
   \   0000013C   0xE767             B.N      ??DFT_0
    263          }
   \                     ??DFT_1: (+1)
   \   0000013E   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    264          
    265          /* revert of Discrete Fourier Transform */

   \                                 In section .text, align 4, keep-with-next
    266          void rDFT(int N, int cycles, float *IN, float *out)
    267          {
   \                     rDFT: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0x4680             MOV      R8,R0
   \   0000000A   0x468A             MOV      R10,R1
   \   0000000C   0x4691             MOV      R9,R2
   \   0000000E   0x469B             MOV      R11,R3
    268              int n,m;
    269          	
    270              for (n= 0; n < N; n++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0006             MOVS     R6,R0
   \                     ??rDFT_0: (+1)
   \   00000014   0x4546             CMP      R6,R8
   \   00000016   0xF280 0x8127      BGE.W    ??rDFT_1
    271          	{
    272                  float xOfn, xOfn_m; // temporary variable for the imagine and real 
    273          		
    274          		xOfn = xOfn_m = 0;
   \   0000001A   0xED9F 0x....      VLDR.W   S0,??DataTable2  ;; 0x0
   \   0000001E   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   00000022   0xEEF0 0x8A48      VMOV.F32 S17,S16
    275          
    276          		for (m = 0; m < N; m++)
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x0007             MOVS     R7,R0
   \                     ??rDFT_2: (+1)
   \   0000002A   0x4547             CMP      R7,R8
   \   0000002C   0xF280 0x8108      BGE.W    ??rDFT_3
    277          		{
    278          		    xOfn += IN[2*m]*arm_cos_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   00000030   0x4650             MOV      R0,R10
   \   00000032   0x.... 0x....      BL       __aeabi_i2d
   \   00000036   0x.... 0x....      LDR.W    R2,??DataTable9  ;; 0x5a7ed197
   \   0000003A   0x.... 0x....      LDR.W    R3,??DataTable9_1  ;; 0x401921fb
   \   0000003E   0x.... 0x....      BL       __aeabi_dmul
   \   00000042   0x0004             MOVS     R4,R0
   \   00000044   0x000D             MOVS     R5,R1
   \   00000046   0xEE00 0x7A10      VMOV     S0,R7
   \   0000004A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000004E   0xEE10 0x0A10      VMOV     R0,S0
   \   00000052   0x.... 0x....      BL       __aeabi_f2d
   \   00000056   0x0022             MOVS     R2,R4
   \   00000058   0x002B             MOVS     R3,R5
   \   0000005A   0x.... 0x....      BL       __aeabi_dmul
   \   0000005E   0x0004             MOVS     R4,R0
   \   00000060   0x000D             MOVS     R5,R1
   \   00000062   0xEE00 0x6A10      VMOV     S0,R6
   \   00000066   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000006A   0xEE10 0x0A10      VMOV     R0,S0
   \   0000006E   0x.... 0x....      BL       __aeabi_f2d
   \   00000072   0x0022             MOVS     R2,R4
   \   00000074   0x002B             MOVS     R3,R5
   \   00000076   0x.... 0x....      BL       __aeabi_dmul
   \   0000007A   0x0004             MOVS     R4,R0
   \   0000007C   0x000D             MOVS     R5,R1
   \   0000007E   0xEE00 0x8A10      VMOV     S0,R8
   \   00000082   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000086   0xEE10 0x0A10      VMOV     R0,S0
   \   0000008A   0x.... 0x....      BL       __aeabi_f2d
   \   0000008E   0x0002             MOVS     R2,R0
   \   00000090   0x000B             MOVS     R3,R1
   \   00000092   0x0020             MOVS     R0,R4
   \   00000094   0x0029             MOVS     R1,R5
   \   00000096   0x.... 0x....      BL       __aeabi_ddiv
   \   0000009A   0x.... 0x....      BL       __aeabi_d2f
   \   0000009E   0xEE00 0x0A10      VMOV     S0,R0
   \   000000A2   0x.... 0x....      BL       arm_cos_f32
   \   000000A6   0xEB19 0x00C7      ADDS     R0,R9,R7, LSL #+3
   \   000000AA   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000AE   0xEE40 0x8A80      VMLA.F32 S17,S1,S0
    279          		    xOfn -= IN[2*m+1]*arm_sin_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   000000B2   0x4650             MOV      R0,R10
   \   000000B4   0x.... 0x....      BL       __aeabi_i2d
   \   000000B8   0x.... 0x....      LDR.W    R2,??DataTable9  ;; 0x5a7ed197
   \   000000BC   0x.... 0x....      LDR.W    R3,??DataTable9_1  ;; 0x401921fb
   \   000000C0   0x.... 0x....      BL       __aeabi_dmul
   \   000000C4   0x0004             MOVS     R4,R0
   \   000000C6   0x000D             MOVS     R5,R1
   \   000000C8   0xEE00 0x7A10      VMOV     S0,R7
   \   000000CC   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000D0   0xEE10 0x0A10      VMOV     R0,S0
   \   000000D4   0x.... 0x....      BL       __aeabi_f2d
   \   000000D8   0x0022             MOVS     R2,R4
   \   000000DA   0x002B             MOVS     R3,R5
   \   000000DC   0x.... 0x....      BL       __aeabi_dmul
   \   000000E0   0x0004             MOVS     R4,R0
   \   000000E2   0x000D             MOVS     R5,R1
   \   000000E4   0xEE00 0x6A10      VMOV     S0,R6
   \   000000E8   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000EC   0xEE10 0x0A10      VMOV     R0,S0
   \   000000F0   0x.... 0x....      BL       __aeabi_f2d
   \   000000F4   0x0022             MOVS     R2,R4
   \   000000F6   0x002B             MOVS     R3,R5
   \   000000F8   0x.... 0x....      BL       __aeabi_dmul
   \   000000FC   0x0004             MOVS     R4,R0
   \   000000FE   0x000D             MOVS     R5,R1
   \   00000100   0xEE00 0x8A10      VMOV     S0,R8
   \   00000104   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000108   0xEE10 0x0A10      VMOV     R0,S0
   \   0000010C   0x.... 0x....      BL       __aeabi_f2d
   \   00000110   0x0002             MOVS     R2,R0
   \   00000112   0x000B             MOVS     R3,R1
   \   00000114   0x0020             MOVS     R0,R4
   \   00000116   0x0029             MOVS     R1,R5
   \   00000118   0x.... 0x....      BL       __aeabi_ddiv
   \   0000011C   0x.... 0x....      BL       __aeabi_d2f
   \   00000120   0xEE00 0x0A10      VMOV     S0,R0
   \   00000124   0x.... 0x....      BL       arm_sin_f32
   \   00000128   0x0078             LSLS     R0,R7,#+1
   \   0000012A   0xEB19 0x0080      ADDS     R0,R9,R0, LSL #+2
   \   0000012E   0xEDD0 0x0A01      VLDR     S1,[R0, #+4]
   \   00000132   0xEE40 0x8AC0      VMLS.F32 S17,S1,S0
    280          
    281                              xOfn_m += IN[2*m]*arm_sin_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   00000136   0x4650             MOV      R0,R10
   \   00000138   0x.... 0x....      BL       __aeabi_i2d
   \   0000013C   0x.... 0x....      LDR.W    R2,??DataTable9  ;; 0x5a7ed197
   \   00000140   0x.... 0x....      LDR.W    R3,??DataTable9_1  ;; 0x401921fb
   \   00000144   0x.... 0x....      BL       __aeabi_dmul
   \   00000148   0x0004             MOVS     R4,R0
   \   0000014A   0x000D             MOVS     R5,R1
   \   0000014C   0xEE00 0x7A10      VMOV     S0,R7
   \   00000150   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000154   0xEE10 0x0A10      VMOV     R0,S0
   \   00000158   0x.... 0x....      BL       __aeabi_f2d
   \   0000015C   0x0022             MOVS     R2,R4
   \   0000015E   0x002B             MOVS     R3,R5
   \   00000160   0x.... 0x....      BL       __aeabi_dmul
   \   00000164   0x0004             MOVS     R4,R0
   \   00000166   0x000D             MOVS     R5,R1
   \   00000168   0xEE00 0x6A10      VMOV     S0,R6
   \   0000016C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000170   0xEE10 0x0A10      VMOV     R0,S0
   \   00000174   0x.... 0x....      BL       __aeabi_f2d
   \   00000178   0x0022             MOVS     R2,R4
   \   0000017A   0x002B             MOVS     R3,R5
   \   0000017C   0x.... 0x....      BL       __aeabi_dmul
   \   00000180   0x0004             MOVS     R4,R0
   \   00000182   0x000D             MOVS     R5,R1
   \   00000184   0xEE00 0x8A10      VMOV     S0,R8
   \   00000188   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000018C   0xEE10 0x0A10      VMOV     R0,S0
   \   00000190   0x.... 0x....      BL       __aeabi_f2d
   \   00000194   0x0002             MOVS     R2,R0
   \   00000196   0x000B             MOVS     R3,R1
   \   00000198   0x0020             MOVS     R0,R4
   \   0000019A   0x0029             MOVS     R1,R5
   \   0000019C   0x.... 0x....      BL       __aeabi_ddiv
   \   000001A0   0x.... 0x....      BL       __aeabi_d2f
   \   000001A4   0xEE00 0x0A10      VMOV     S0,R0
   \   000001A8   0x.... 0x....      BL       arm_sin_f32
   \   000001AC   0xEB19 0x00C7      ADDS     R0,R9,R7, LSL #+3
   \   000001B0   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000001B4   0xEE00 0x8A80      VMLA.F32 S16,S1,S0
    282                              xOfn_m += IN[2*m+1]*arm_cos_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   000001B8   0x4650             MOV      R0,R10
   \   000001BA   0x.... 0x....      BL       __aeabi_i2d
   \   000001BE   0x.... 0x....      LDR.W    R2,??DataTable9  ;; 0x5a7ed197
   \   000001C2   0x.... 0x....      LDR.W    R3,??DataTable9_1  ;; 0x401921fb
   \   000001C6   0x.... 0x....      BL       __aeabi_dmul
   \   000001CA   0x0004             MOVS     R4,R0
   \   000001CC   0x000D             MOVS     R5,R1
   \   000001CE   0xEE00 0x7A10      VMOV     S0,R7
   \   000001D2   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000001D6   0xEE10 0x0A10      VMOV     R0,S0
   \   000001DA   0x.... 0x....      BL       __aeabi_f2d
   \   000001DE   0x0022             MOVS     R2,R4
   \   000001E0   0x002B             MOVS     R3,R5
   \   000001E2   0x.... 0x....      BL       __aeabi_dmul
   \   000001E6   0x0004             MOVS     R4,R0
   \   000001E8   0x000D             MOVS     R5,R1
   \   000001EA   0xEE00 0x6A10      VMOV     S0,R6
   \   000001EE   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000001F2   0xEE10 0x0A10      VMOV     R0,S0
   \   000001F6   0x.... 0x....      BL       __aeabi_f2d
   \   000001FA   0x0022             MOVS     R2,R4
   \   000001FC   0x002B             MOVS     R3,R5
   \   000001FE   0x.... 0x....      BL       __aeabi_dmul
   \   00000202   0x0004             MOVS     R4,R0
   \   00000204   0x000D             MOVS     R5,R1
   \   00000206   0xEE00 0x8A10      VMOV     S0,R8
   \   0000020A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000020E   0xEE10 0x0A10      VMOV     R0,S0
   \   00000212   0x.... 0x....      BL       __aeabi_f2d
   \   00000216   0x0002             MOVS     R2,R0
   \   00000218   0x000B             MOVS     R3,R1
   \   0000021A   0x0020             MOVS     R0,R4
   \   0000021C   0x0029             MOVS     R1,R5
   \   0000021E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000222   0x.... 0x....      BL       __aeabi_d2f
   \   00000226   0xEE00 0x0A10      VMOV     S0,R0
   \   0000022A   0x.... 0x....      BL       arm_cos_f32
   \   0000022E   0x0078             LSLS     R0,R7,#+1
   \   00000230   0xEB19 0x0080      ADDS     R0,R9,R0, LSL #+2
   \   00000234   0xEDD0 0x0A01      VLDR     S1,[R0, #+4]
   \   00000238   0xEE00 0x8A80      VMLA.F32 S16,S1,S0
    283          		}
   \   0000023C   0x1C7F             ADDS     R7,R7,#+1
   \   0000023E   0xE6F4             B.N      ??rDFT_2
    284          
    285          	    xOfn /= N;
   \                     ??rDFT_3: (+1)
   \   00000240   0xEE00 0x8A10      VMOV     S0,R8
   \   00000244   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000248   0xEEC8 0x8A80      VDIV.F32 S17,S17,S0
    286          		xOfn_m /= N;
   \   0000024C   0xEE00 0x8A10      VMOV     S0,R8
   \   00000250   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000254   0xEE88 0x8A00      VDIV.F32 S16,S16,S0
    287          
    288                  out[n] = xOfn + xOfn_m; 
   \   00000258   0xEE38 0x0A88      VADD.F32 S0,S17,S16
   \   0000025C   0xEB1B 0x0086      ADDS     R0,R11,R6, LSL #+2
   \   00000260   0xED80 0x0A00      VSTR     S0,[R0, #0]
    289          
    290          	}
   \   00000264   0x1C76             ADDS     R6,R6,#+1
   \   00000266   0xE6D5             B.N      ??rDFT_0
    291          }
   \                     ??rDFT_1: (+1)
   \   00000268   0xECBD 0x8B02      VPOP     {D8}
   \   0000026C   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    292          
    293          /****************************** IIR filter *****************************************
    294          *a : point to a coefficiences
    295          AN: Number of a coefficiences
    296          *b : point to b coefficiences
    297          BN: Number of b coefficences
    298          *x: storage input and history of inputs
    299          *y: storage output and history of outpus
    300          index: position value in array of input and output
    301          
    302          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    303          void iirFilter(float* a, int AN, float* b, int BN, float* x, float* y, int index)
    304          {
   \                     iirFilter: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x9C05             LDR      R4,[SP, #+20]
   \   00000004   0x9D06             LDR      R5,[SP, #+24]
   \   00000006   0x9E07             LDR      R6,[SP, #+28]
    305              int loop;
    306          
    307              *(y+index) = 0;
   \   00000008   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000000C   0xF845 0xC026      STR      R12,[R5, R6, LSL #+2]
    308              
    309              for (loop =0; loop < AN; loop++)
   \   00000010   0xF05F 0x0C00      MOVS     R12,#+0
   \   00000014   0x4667             MOV      R7,R12
   \                     ??iirFilter_0: (+1)
   \   00000016   0x428F             CMP      R7,R1
   \   00000018   0xDA1C             BGE.N    ??iirFilter_1
    310              {
    311                  if ((index -loop) >= 0)
   \   0000001A   0xEBB6 0x0C07      SUBS     R12,R6,R7
   \   0000001E   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000022   0xD415             BMI.N    ??iirFilter_2
    312          		{
    313          		    *(y+index) += *(a+loop)**(x + index - loop);
   \   00000024   0xEB10 0x0C87      ADDS     R12,R0,R7, LSL #+2
   \   00000028   0xED9C 0x0A00      VLDR     S0,[R12, #0]
   \   0000002C   0xEB14 0x0C86      ADDS     R12,R4,R6, LSL #+2
   \   00000030   0xF07F 0x0E03      MVNS     LR,#+3
   \   00000034   0xFB0E 0xCC07      MLA      R12,LR,R7,R12
   \   00000038   0xEDDC 0x0A00      VLDR     S1,[R12, #0]
   \   0000003C   0xEB15 0x0C86      ADDS     R12,R5,R6, LSL #+2
   \   00000040   0xED9C 0x1A00      VLDR     S2,[R12, #0]
   \   00000044   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000048   0xEB15 0x0C86      ADDS     R12,R5,R6, LSL #+2
   \   0000004C   0xED8C 0x1A00      VSTR     S2,[R12, #0]
    314          		}
    315              }
   \                     ??iirFilter_2: (+1)
   \   00000050   0x1C7F             ADDS     R7,R7,#+1
   \   00000052   0xE7E0             B.N      ??iirFilter_0
    316          
    317              for (loop = 1; loop <= BN; loop++)
   \                     ??iirFilter_1: (+1)
   \   00000054   0xF05F 0x0C01      MOVS     R12,#+1
   \   00000058   0x4667             MOV      R7,R12
   \                     ??iirFilter_3: (+1)
   \   0000005A   0x42BB             CMP      R3,R7
   \   0000005C   0xDB1E             BLT.N    ??iirFilter_4
    318              {
    319                  if ((index-loop) >=0)
   \   0000005E   0xEBB6 0x0C07      SUBS     R12,R6,R7
   \   00000062   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000066   0xD417             BMI.N    ??iirFilter_5
    320          		{
    321          		    *(y + index) +=  *(b + loop - 1)**(y+index-loop);
   \   00000068   0xEB12 0x0C87      ADDS     R12,R2,R7, LSL #+2
   \   0000006C   0xF1BC 0x0C04      SUBS     R12,R12,#+4
   \   00000070   0xED9C 0x0A00      VLDR     S0,[R12, #0]
   \   00000074   0xEB15 0x0C86      ADDS     R12,R5,R6, LSL #+2
   \   00000078   0xF07F 0x0E03      MVNS     LR,#+3
   \   0000007C   0xFB0E 0xCC07      MLA      R12,LR,R7,R12
   \   00000080   0xEDDC 0x0A00      VLDR     S1,[R12, #0]
   \   00000084   0xEB15 0x0C86      ADDS     R12,R5,R6, LSL #+2
   \   00000088   0xED9C 0x1A00      VLDR     S2,[R12, #0]
   \   0000008C   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000090   0xEB15 0x0C86      ADDS     R12,R5,R6, LSL #+2
   \   00000094   0xED8C 0x1A00      VSTR     S2,[R12, #0]
    322          		}
    323              }	
   \                     ??iirFilter_5: (+1)
   \   00000098   0x1C7F             ADDS     R7,R7,#+1
   \   0000009A   0xE7DE             B.N      ??iirFilter_3
    324          }
   \                     ??iirFilter_4: (+1)
   \   0000009C   0xBDF0             POP      {R4-R7,PC}       ;; return
    325          
    326          /** First Oder IIR Lowpass filter 
    327          *Input : input array
    328          *Output: output array
    329          size: number of elements need to update
    330          K: T/dT
    331             T is time constance
    332             dT duration of sampleing 
    333             K= 64
    334          
    335          *****************************8*/
    336          
    337          

   \                                 In section .text, align 2, keep-with-next
    338          void LowPass(int16_t *Input, int16_t *Output, uint16_t Size, uint16_t K)
    339          {
   \                     LowPass: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    340              
    341              static	int16_t Out_Old;
    342          	int16_t Out=0;
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    343          
    344          	for(uint16_t i=0; i<Size; i++)
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??LowPass_0: (+1)
   \   00000014   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000018   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000001A   0x45B1             CMP      R9,R6
   \   0000001C   0xD21C             BCS.N    ??LowPass_1
    345          	{
    346                  Out = ADD_S16(Out_Old,SUB_S16(*(Input+i), Out_Old)/K);
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000022   0xF9B0 0x1000      LDRSH    R1,[R0, #+0]
   \   00000026   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000002A   0xF934 0x0019      LDRSH    R0,[R4, R9, LSL #+1]
   \   0000002E   0x.... 0x....      BL       SUB_S16
   \   00000032   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000034   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000036   0xFB90 0xF1F7      SDIV     R1,R0,R7
   \   0000003A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000040   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000044   0x.... 0x....      BL       ADD_S16
   \   00000048   0x4680             MOV      R8,R0
    347          		Out_Old = Out;
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable11
   \   0000004E   0xF8A0 0x8000      STRH     R8,[R0, #+0]
    348          	}
   \   00000052   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000056   0xE7DD             B.N      ??LowPass_0
    349          
    350          	*Output = 30*Out;
   \                     ??LowPass_1: (+1)
   \   00000058   0x201E             MOVS     R0,#+30
   \   0000005A   0xFB18 0xF000      SMULBB   R0,R8,R0
   \   0000005E   0x8028             STRH     R0,[R5, #+0]
    351          
    352          }
   \   00000060   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .bss, align 2
   \                     ??Out_Old:
   \   00000000                      DS8 2
    353          
    354          #ifdef FLOATING_POINT
    355          void LowPass2ndOder(int16_t *Input, int16_t *Output, uint16_t Size)
    356          {
    357              double Out=0;
    358          	static  int16_t InOld, InOld1;
    359          	static	double Out_Old, Out_Old1;
    360                  uint16_t i;
    361          	 
    362              for(i=0; i<Size; i++)
    363          	{
    364          
    365           	
    366          	  if (i>0)
    367          	  {
    368          	    InOld1 = InOld;
    369          	  	InOld = Input[i-1];
    370          	  }
    371          	  	   
    372          
    373          	  	Out = (B0*Input[i]) + (B1*InOld) + (B2*InOld1)-(A1*Out_Old) - (A2*Out_Old1);
    374          	  
    375          	    Out_Old1 = Out_Old;
    376          		Out_Old = Out;
    377          	}
    378          
    379          	*Output = (int16_t)Out;
    380          
    381              InOld1 = InOld;
    382          	InOld = Input[i-1];
    383          
    384          
    385          
    386          }
    387          
    388          #else

   \                                 In section .text, align 2, keep-with-next
    389          void LowPass2ndOder(int16_t *Input, int16_t *Output, uint16_t Size)
    390          {
   \                     LowPass2ndOder: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    391              int16_t Out=0;
   \   00000002   0x2300             MOVS     R3,#+0
    392          	static  int16_t InOld, InOld1;
    393          	static	int16_t Out_Old, Out_Old1;
    394                  uint16_t i;
    395          	 
    396              for(i=0; i<Size; i++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x002C             MOVS     R4,R5
   \                     ??LowPass2ndOder_0: (+1)
   \   00000008   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000C   0x4294             CMP      R4,R2
   \   0000000E   0xD246             BCS.N    ??LowPass2ndOder_1
    397          	{
    398          
    399           	
    400          	  if (i>0)
   \   00000010   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD00D             BEQ.N    ??LowPass2ndOder_2
    401          	  {
    402          	    InOld1 = InOld;
   \   00000016   0x.... 0x....      LDR.W    R5,??DataTable11_1
   \   0000001A   0x882D             LDRH     R5,[R5, #+0]
   \   0000001C   0x.... 0x....      LDR.W    R6,??DataTable11_2
   \   00000020   0x8035             STRH     R5,[R6, #+0]
    403          	  	InOld = Input[i-1];
   \   00000022   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000024   0xEB10 0x0544      ADDS     R5,R0,R4, LSL #+1
   \   00000028   0xF835 0x5C02      LDRH     R5,[R5, #-2]
   \   0000002C   0x.... 0x....      LDR.W    R6,??DataTable11_1
   \   00000030   0x8035             STRH     R5,[R6, #+0]
    404          	  }
    405          	  	   
    406          
    407          	  	Out = (int16_t)(((int32_t)(B0*Input[i]) + (int32_t)(B1*InOld) + (int32_t)(B2*InOld1)-(int32_t)(A1*Out_Old) - (int32_t)(A2*Out_Old1))/10000) ;
   \                     ??LowPass2ndOder_2: (+1)
   \   00000032   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000034   0xF930 0x5014      LDRSH    R5,[R0, R4, LSL #+1]
   \   00000038   0x2606             MOVS     R6,#+6
   \   0000003A   0xFB15 0xF506      SMULBB   R5,R5,R6
   \   0000003E   0x.... 0x....      LDR.W    R6,??DataTable11_1
   \   00000042   0xF9B6 0x6000      LDRSH    R6,[R6, #+0]
   \   00000046   0x270C             MOVS     R7,#+12
   \   00000048   0xFB16 0x5507      SMLABB   R5,R6,R7,R5
   \   0000004C   0x.... 0x....      LDR.W    R6,??DataTable11_2
   \   00000050   0xF9B6 0x6000      LDRSH    R6,[R6, #+0]
   \   00000054   0x2706             MOVS     R7,#+6
   \   00000056   0xFB16 0x5507      SMLABB   R5,R6,R7,R5
   \   0000005A   0x.... 0x....      LDR.W    R6,??DataTable11_3
   \   0000005E   0xF9B6 0x6000      LDRSH    R6,[R6, #+0]
   \   00000062   0x.... 0x....      LDR.W    R7,??DataTable11_4  ;; 0xffffb486
   \   00000066   0xFB16 0xF607      SMULBB   R6,R6,R7
   \   0000006A   0x1BAD             SUBS     R5,R5,R6
   \   0000006C   0x.... 0x....      LDR.W    R6,??DataTable11_5
   \   00000070   0xF9B6 0x6000      LDRSH    R6,[R6, #+0]
   \   00000074   0xF242 0x476A      MOVW     R7,#+9322
   \   00000078   0xFB16 0xF607      SMULBB   R6,R6,R7
   \   0000007C   0x1BAD             SUBS     R5,R5,R6
   \   0000007E   0xF242 0x7610      MOVW     R6,#+10000
   \   00000082   0xFB95 0xF5F6      SDIV     R5,R5,R6
   \   00000086   0x002B             MOVS     R3,R5
    408          	  
    409          	    Out_Old1 = Out_Old;
   \   00000088   0x.... 0x....      LDR.W    R5,??DataTable11_3
   \   0000008C   0x882D             LDRH     R5,[R5, #+0]
   \   0000008E   0x.... 0x....      LDR.W    R6,??DataTable11_5
   \   00000092   0x8035             STRH     R5,[R6, #+0]
    410          		Out_Old = Out;
   \   00000094   0x.... 0x....      LDR.W    R5,??DataTable11_3
   \   00000098   0x802B             STRH     R3,[R5, #+0]
    411          	}
   \   0000009A   0x1C64             ADDS     R4,R4,#+1
   \   0000009C   0xE7B4             B.N      ??LowPass2ndOder_0
    412          
    413          	*Output = (int16_t)Out;
   \                     ??LowPass2ndOder_1: (+1)
   \   0000009E   0x800B             STRH     R3,[R1, #+0]
    414          
    415              InOld1 = InOld;
   \   000000A0   0x.... 0x....      LDR.W    R5,??DataTable11_1
   \   000000A4   0x882D             LDRH     R5,[R5, #+0]
   \   000000A6   0x.... 0x....      LDR.W    R6,??DataTable11_2
   \   000000AA   0x8035             STRH     R5,[R6, #+0]
    416          	InOld = Input[i-1];
   \   000000AC   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000AE   0xEB10 0x0544      ADDS     R5,R0,R4, LSL #+1
   \   000000B2   0xF835 0x5C02      LDRH     R5,[R5, #-2]
   \   000000B6   0x.... 0x....      LDR.W    R6,??DataTable11_1
   \   000000BA   0x8035             STRH     R5,[R6, #+0]
    417          
    418          
    419          
    420          }
   \   000000BC   0xBCF0             POP      {R4-R7}
   \   000000BE   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 2
   \                     ??InOld:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     ??InOld1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     ??Out_Old_1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     ??Out_Old1:
   \   00000000                      DS8 2
    421          
    422          #endif
    423          
    424          
    425          
    426          

   \                                 In section .text, align 2, keep-with-next
    427          void LowPass2ndOder_1(int16_t *Input, int16_t *Output, uint16_t Size)
    428          {
   \                     LowPass2ndOder_1: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    429              int16_t Out=0;
   \   00000002   0x2300             MOVS     R3,#+0
    430          	static  int16_t InOld, InOld1;
    431          	static	int16_t Out_Old, Out_Old1;
    432                  uint16_t i;
    433          	 
    434              for(i=0; i<Size; i++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x002C             MOVS     R4,R5
   \                     ??LowPass2ndOder_1_0: (+1)
   \   00000008   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000C   0x4294             CMP      R4,R2
   \   0000000E   0xD246             BCS.N    ??LowPass2ndOder_1_1
    435          	{
    436          
    437           	
    438          	  if (i>0)
   \   00000010   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD00D             BEQ.N    ??LowPass2ndOder_1_2
    439          	  {
    440          	    InOld1 = InOld;
   \   00000016   0x.... 0x....      LDR.W    R5,??DataTable11_6
   \   0000001A   0x882D             LDRH     R5,[R5, #+0]
   \   0000001C   0x.... 0x....      LDR.W    R6,??DataTable11_7
   \   00000020   0x8035             STRH     R5,[R6, #+0]
    441          	  	InOld = Input[i-1];
   \   00000022   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000024   0xEB10 0x0544      ADDS     R5,R0,R4, LSL #+1
   \   00000028   0xF835 0x5C02      LDRH     R5,[R5, #-2]
   \   0000002C   0x.... 0x....      LDR.W    R6,??DataTable11_6
   \   00000030   0x8035             STRH     R5,[R6, #+0]
    442          	  } 
    443          	  	   
    444          
    445          	  	Out = (int16_t)(((int32_t)(B0*Input[i]) + (int32_t)(B1*InOld) + (int32_t)(B2*InOld1)-(int32_t)(A1*Out_Old) - (int32_t)(A2*Out_Old1))/1000) ; /* gain 10) */
   \                     ??LowPass2ndOder_1_2: (+1)
   \   00000032   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000034   0xF930 0x5014      LDRSH    R5,[R0, R4, LSL #+1]
   \   00000038   0x2606             MOVS     R6,#+6
   \   0000003A   0xFB15 0xF506      SMULBB   R5,R5,R6
   \   0000003E   0x.... 0x....      LDR.W    R6,??DataTable11_6
   \   00000042   0xF9B6 0x6000      LDRSH    R6,[R6, #+0]
   \   00000046   0x270C             MOVS     R7,#+12
   \   00000048   0xFB16 0x5507      SMLABB   R5,R6,R7,R5
   \   0000004C   0x.... 0x....      LDR.W    R6,??DataTable11_7
   \   00000050   0xF9B6 0x6000      LDRSH    R6,[R6, #+0]
   \   00000054   0x2706             MOVS     R7,#+6
   \   00000056   0xFB16 0x5507      SMLABB   R5,R6,R7,R5
   \   0000005A   0x.... 0x....      LDR.W    R6,??DataTable11_8
   \   0000005E   0xF9B6 0x6000      LDRSH    R6,[R6, #+0]
   \   00000062   0x.... 0x....      LDR.W    R7,??DataTable11_4  ;; 0xffffb486
   \   00000066   0xFB16 0xF607      SMULBB   R6,R6,R7
   \   0000006A   0x1BAD             SUBS     R5,R5,R6
   \   0000006C   0x.... 0x....      LDR.W    R6,??DataTable11_9
   \   00000070   0xF9B6 0x6000      LDRSH    R6,[R6, #+0]
   \   00000074   0xF242 0x476A      MOVW     R7,#+9322
   \   00000078   0xFB16 0xF607      SMULBB   R6,R6,R7
   \   0000007C   0x1BAD             SUBS     R5,R5,R6
   \   0000007E   0xF44F 0x767A      MOV      R6,#+1000
   \   00000082   0xFB95 0xF5F6      SDIV     R5,R5,R6
   \   00000086   0x002B             MOVS     R3,R5
    446          	  
    447          	    Out_Old1 = Out_Old;
   \   00000088   0x.... 0x....      LDR.W    R5,??DataTable11_8
   \   0000008C   0x882D             LDRH     R5,[R5, #+0]
   \   0000008E   0x.... 0x....      LDR.W    R6,??DataTable11_9
   \   00000092   0x8035             STRH     R5,[R6, #+0]
    448          		Out_Old = Out;
   \   00000094   0x.... 0x....      LDR.W    R5,??DataTable11_8
   \   00000098   0x802B             STRH     R3,[R5, #+0]
    449          	}
   \   0000009A   0x1C64             ADDS     R4,R4,#+1
   \   0000009C   0xE7B4             B.N      ??LowPass2ndOder_1_0
    450          
    451          	*Output = (int16_t)Out;
   \                     ??LowPass2ndOder_1_1: (+1)
   \   0000009E   0x800B             STRH     R3,[R1, #+0]
    452          
    453              InOld1 = InOld;
   \   000000A0   0x.... 0x....      LDR.W    R5,??DataTable11_6
   \   000000A4   0x882D             LDRH     R5,[R5, #+0]
   \   000000A6   0x.... 0x....      LDR.W    R6,??DataTable11_7
   \   000000AA   0x8035             STRH     R5,[R6, #+0]
    454          	InOld = Input[i-1];
   \   000000AC   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000AE   0xEB10 0x0544      ADDS     R5,R0,R4, LSL #+1
   \   000000B2   0xF835 0x5C02      LDRH     R5,[R5, #-2]
   \   000000B6   0x.... 0x....      LDR.W    R6,??DataTable11_6
   \   000000BA   0x8035             STRH     R5,[R6, #+0]
    455          
    456          
    457          	
    458          }
   \   000000BC   0xBCF0             POP      {R4-R7}
   \   000000BE   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 2
   \                     ??InOld_1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     ??InOld1_1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     ??Out_Old_2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     ??Out_Old1_1:
   \   00000000                      DS8 2
    459          
    460          /* K = dT/T */

   \                                 In section .text, align 2, keep-with-next
    461          void LowPassIIR(int16_t *Input, int16_t *Output,int16_t *OutOld, uint16_t Size, uint16_t K)
    462          {
   \                     LowPassIIR: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C08             LDR      R4,[SP, #+32]
    463              
    464              //static	int16_t OutOld;
    465          
    466          	for(uint16_t i=0; i<Size; i++)
   \   0000000E   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??LowPassIIR_0: (+1)
   \   00000012   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000016   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000001A   0x45C1             CMP      R9,R8
   \   0000001C   0xD21C             BCS.N    ??LowPassIIR_1
    467          	{
    468                  *(Output+i) = ADD_S16(*OutOld , SUB_S16(*(Input+i),*OutOld)/(K));
   \   0000001E   0xF9B7 0x1000      LDRSH    R1,[R7, #+0]
   \   00000022   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000026   0xF935 0x0019      LDRSH    R0,[R5, R9, LSL #+1]
   \   0000002A   0x.... 0x....      BL       SUB_S16
   \   0000002E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000030   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000032   0xFB90 0xF1F4      SDIV     R1,R0,R4
   \   00000036   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000038   0xF9B7 0x0000      LDRSH    R0,[R7, #+0]
   \   0000003C   0x.... 0x....      BL       ADD_S16
   \   00000040   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000044   0xF826 0x0019      STRH     R0,[R6, R9, LSL #+1]
    469          		*OutOld = *(Output+i);
   \   00000048   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000004C   0xF836 0x0019      LDRH     R0,[R6, R9, LSL #+1]
   \   00000050   0x8038             STRH     R0,[R7, #+0]
    470          	}
   \   00000052   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000056   0xE7DC             B.N      ??LowPassIIR_0
    471          }
   \                     ??LowPassIIR_1: (+1)
   \   00000058   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    472          
    473          

   \                                 In section .text, align 4, keep-with-next
    474          void Decimation(uint8_t *Input, int16_t *Output, int16_t PreCalcBuff[129][256]) //128 bytes input 32 bytes output
    475          {
   \                     Decimation: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xF5AD 0x7D01      SUB      SP,SP,#+516
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0x000D             MOVS     R5,R1
   \   0000000C   0x0016             MOVS     R6,R2
    476              uint8_t test, IndexIn=0;
   \   0000000E   0xF05F 0x0900      MOVS     R9,#+0
    477              int16_t Sigma;
    478          	static int16_t OutRing[129];
    479          	static int16_t iRing=0;
    480          //	static int32_t TempU32;
    481          	static float Data, Data_Old;
    482          	float Coef[129] = { 
    483          -0.000  ,-1.560  ,-2.990  ,-4.104  ,-4.722  ,-4.683  ,-3.880  ,-2.288  ,0.000  ,2.755 ,
    484          5.609  ,8.085  ,9.660  ,9.851  ,8.317  ,4.960  ,-0.000  ,-6.000  ,-12.166  ,-17.414 ,
    485          -20.614  ,-20.795  ,-17.350  ,-10.219  ,0.000  ,12.048  ,24.119  ,34.098  ,39.884  ,39.773 ,
    486          32.823  ,19.134  ,-0.000  ,-22.146  ,-43.977  ,-61.716  ,-71.720  ,-71.119  ,-58.413  ,-33.924 ,
    487          0.000  ,39.086  ,77.572  ,108.935  ,126.848  ,126.222  ,104.203  ,60.939  ,-0.000  ,-71.661 ,
    488          -144.245  ,-206.111  ,-245.139  ,-250.303  ,-213.240  ,-129.604  ,0.000  ,169.645  ,368.369  ,581.105 ,
    489          790.173  ,977.157  ,1124.942  ,1219.655  ,1252.270  ,1219.655  ,1124.942  ,977.157  ,790.173  ,581.105 ,
    490          368.369  ,169.645  ,0.000  ,-129.604  ,-213.240  ,-250.303  ,-245.139  ,-206.111  ,-144.245  ,-71.661 ,
    491          -0.000  ,60.939  ,104.203  ,126.222  ,126.848  ,108.935  ,77.572  ,39.086  ,0.000  ,-33.924 ,
    492          -58.413  ,-71.119  ,-71.720  ,-61.716  ,-43.977  ,-22.146  ,-0.000  ,19.134  ,32.823  ,39.773 ,
    493          39.884  ,34.098  ,24.119  ,12.048  ,0.000  ,-10.219  ,-17.350  ,-20.795  ,-20.614  ,-17.414 ,
    494          -12.166  ,-6.000  ,-0.000  ,4.960  ,8.317  ,9.851  ,9.660  ,8.085  ,5.609  ,2.755 ,
    495          0.000  ,-2.288  ,-3.880  ,-4.683  ,-4.722  ,-4.104  ,-2.990  ,-1.560  ,-0.000  };
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   00000018   0xF44F 0x7201      MOV      R2,#+516
   \   0000001C   0x.... 0x....      BL       __aeabi_memcpy4
    496          
    497          	for (uint8_t i=0;i<16; i++) //index of output sample 16 ouput
   \   00000020   0x2000             MOVS     R0,#+0
   \                     ??Decimation_0: (+1)
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x2810             CMP      R0,#+16
   \   00000026   0xF280 0x80CC      BGE.W    ??Decimation_1
    498          	{
    499          
    500          	   Sigma = 0;
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x4688             MOV      R8,R1
    501          	   
    502          
    503          	   for (uint8_t j=0; j<8; j++)  // load byte by byte from Input array 8
   \   0000002E   0x2100             MOVS     R1,#+0
   \                     ??Decimation_2: (+1)
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x2908             CMP      R1,#+8
   \   00000034   0xDA52             BGE.N    ??Decimation_3
    504          	   {
    505          	       test = Input[IndexIn++];
   \   00000036   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000003A   0xF819 0x2004      LDRB     R2,[R9, R4]
   \   0000003E   0x0017             MOVS     R7,R2
   \   00000040   0xF119 0x0901      ADDS     R9,R9,#+1
    506          		   
    507          		   for (uint8_t k=0; k<8; k++)  // this loop for 1 byte
   \   00000044   0x2200             MOVS     R2,#+0
   \                     ??Decimation_4: (+1)
   \   00000046   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000048   0x2A08             CMP      R2,#+8
   \   0000004A   0xDA45             BGE.N    ??Decimation_5
    508          		   {
    509               			if ((test&0x01)==0x01)
   \   0000004C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004E   0x07FB             LSLS     R3,R7,#+31
   \   00000050   0xD516             BPL.N    ??Decimation_6
    510               			{
    511               			    //Sigma +=2;
    512               			    Data = Data_Old + (100 - Data_Old)/200;	
   \   00000052   0xED9F 0x....      VLDR.W   S0,??DataTable6  ;; 0x42c80000
   \   00000056   0x.... 0x....      LDR.W    R3,??DataTable12
   \   0000005A   0xEDD3 0x0A00      VLDR     S1,[R3, #0]
   \   0000005E   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000062   0xEDDF 0x....      VLDR.W   S1,??DataTable6_1  ;; 0x43480000
   \   00000066   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   0000006A   0x.... 0x....      LDR.W    R3,??DataTable12
   \   0000006E   0xEDD3 0x0A00      VLDR     S1,[R3, #0]
   \   00000072   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000076   0x.... 0x....      LDR.W    R3,??DataTable12_1
   \   0000007A   0xED83 0x0A00      VSTR     S0,[R3, #0]
   \   0000007E   0xE015             B.N      ??Decimation_7
    513               			}
    514               			else
    515               			{
    516               			    //Sigma -=2;
    517          					Data = Data_Old + (-100 - Data_Old)/200;		
   \                     ??Decimation_6: (+1)
   \   00000080   0xED9F 0x....      VLDR.W   S0,??DataTable6_2  ;; 0xc2c80000
   \   00000084   0x.... 0x....      LDR.W    R3,??DataTable12
   \   00000088   0xEDD3 0x0A00      VLDR     S1,[R3, #0]
   \   0000008C   0xEE30 0x0A60      VSUB.F32 S0,S0,S1
   \   00000090   0xEDDF 0x....      VLDR.W   S1,??DataTable6_1  ;; 0x43480000
   \   00000094   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   00000098   0x.... 0x....      LDR.W    R3,??DataTable12
   \   0000009C   0xEDD3 0x0A00      VLDR     S1,[R3, #0]
   \   000000A0   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   000000A4   0x.... 0x....      LDR.W    R3,??DataTable12_1
   \   000000A8   0xED83 0x0A00      VSTR     S0,[R3, #0]
    518               			}
    519          
    520          				Data_Old = Data;
   \                     ??Decimation_7: (+1)
   \   000000AC   0x.... 0x....      LDR.W    R3,??DataTable12
   \   000000B0   0x.... 0x....      LDR.W    R12,??DataTable12_1
   \   000000B4   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   000000B8   0xF8C3 0xC000      STR      R12,[R3, #+0]
    521          
    522          				Sigma += (int16_t)(Data); 
   \   000000BC   0x.... 0x....      LDR.W    R3,??DataTable12_1
   \   000000C0   0xED93 0x0A00      VLDR     S0,[R3, #0]
   \   000000C4   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000C8   0xEE10 0x3A10      VMOV     R3,S0
   \   000000CC   0xEB13 0x0808      ADDS     R8,R3,R8
    523               
    524               			test >>= 1; /* go to next bit in "test" to convolution */
   \   000000D0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000D2   0x087F             LSRS     R7,R7,#+1
    525          		   }
   \   000000D4   0x1C52             ADDS     R2,R2,#+1
   \   000000D6   0xE7B6             B.N      ??Decimation_4
    526          		   
    527          	   }
   \                     ??Decimation_5: (+1)
   \   000000D8   0x1C49             ADDS     R1,R1,#+1
   \   000000DA   0xE7A9             B.N      ??Decimation_2
    528          	   
    529          	   OutRing[iRing] = Sigma;
   \                     ??Decimation_3: (+1)
   \   000000DC   0x.... 0x....      LDR.W    R1,??DataTable12_2
   \   000000E0   0x.... 0x....      LDR.W    R2,??DataTable12_7
   \   000000E4   0xF9B2 0x2000      LDRSH    R2,[R2, #+0]
   \   000000E8   0xF821 0x8012      STRH     R8,[R1, R2, LSL #+1]
    530          	   //if (OutRing[iRing] > 127)
    531          	   //{
    532                 //    OutRing[iRing] = 127;
    533          	   //}
    534          	   //else if (OutRing[iRing] < -128)
    535          	   //{
    536                 //    OutRing[iRing] = -128;
    537          	   //}
    538          	   //else
    539          	   //{
    540          	   //    ;
    541          	   //}
    542          	   
    543          
    544                 Output[i] = 0;
   \   000000EC   0x2100             MOVS     R1,#+0
   \   000000EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F0   0xF825 0x1010      STRH     R1,[R5, R0, LSL #+1]
    545          
    546             
    547                 for(int16_t ii=0; ii<129;ii++)
   \   000000F4   0x2100             MOVS     R1,#+0
   \                     ??Decimation_8: (+1)
   \   000000F6   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000000F8   0x2981             CMP      R1,#+129
   \   000000FA   0xDA4F             BGE.N    ??Decimation_9
    548                 {
    549                     if (iRing >= ii)
   \   000000FC   0x.... 0x....      LDR.W    R2,??DataTable12_7
   \   00000100   0xF9B2 0x2000      LDRSH    R2,[R2, #+0]
   \   00000104   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000106   0x428A             CMP      R2,R1
   \   00000108   0xDB22             BLT.N    ??Decimation_10
    550                         Output[i] = Output[i] + (int16_t)(OutRing[iRing - ii]*Coef[ii]);//PreCalcBuff[ii][(OutRing[iRing - ii]+128)]; //(OutRing[iRing - ii]*Coef[ii])
   \   0000010A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010C   0xF835 0x2010      LDRH     R2,[R5, R0, LSL #+1]
   \   00000110   0x.... 0x....      LDR.W    R3,??DataTable12_2
   \   00000114   0x.... 0x....      LDR.W    R12,??DataTable12_7
   \   00000118   0xF9BC 0xC000      LDRSH    R12,[R12, #+0]
   \   0000011C   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000011E   0xEBBC 0x0C01      SUBS     R12,R12,R1
   \   00000122   0xF933 0x301C      LDRSH    R3,[R3, R12, LSL #+1]
   \   00000126   0xEE00 0x3A10      VMOV     S0,R3
   \   0000012A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000012E   0x466B             MOV      R3,SP
   \   00000130   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000132   0xEB13 0x0381      ADDS     R3,R3,R1, LSL #+2
   \   00000136   0xEDD3 0x0A00      VLDR     S1,[R3, #0]
   \   0000013A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000013E   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000142   0xEE10 0x3A10      VMOV     R3,S0
   \   00000146   0x189A             ADDS     R2,R3,R2
   \   00000148   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000014A   0xF825 0x2010      STRH     R2,[R5, R0, LSL #+1]
   \   0000014E   0xE023             B.N      ??Decimation_11
    551                     else
    552                         Output[i] = Output[i] + (int16_t)(OutRing[129 + iRing - ii]*Coef[ii]);//PreCalcBuff[ii][(OutRing[129 + iRing - ii]+128)];  // (OutRing[129 + iRing - ii]*Coef[ii])
   \                     ??Decimation_10: (+1)
   \   00000150   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000152   0xF835 0x2010      LDRH     R2,[R5, R0, LSL #+1]
   \   00000156   0x.... 0x....      LDR.W    R3,??DataTable12_2
   \   0000015A   0x.... 0x....      LDR.W    R12,??DataTable12_7
   \   0000015E   0xF9BC 0xC000      LDRSH    R12,[R12, #+0]
   \   00000162   0xF11C 0x0C81      ADDS     R12,R12,#+129
   \   00000166   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000168   0xEBBC 0x0C01      SUBS     R12,R12,R1
   \   0000016C   0xF933 0x301C      LDRSH    R3,[R3, R12, LSL #+1]
   \   00000170   0xEE00 0x3A10      VMOV     S0,R3
   \   00000174   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000178   0x466B             MOV      R3,SP
   \   0000017A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000017C   0xEB13 0x0381      ADDS     R3,R3,R1, LSL #+2
   \   00000180   0xEDD3 0x0A00      VLDR     S1,[R3, #0]
   \   00000184   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000188   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   0000018C   0xEE10 0x3A10      VMOV     R3,S0
   \   00000190   0x189A             ADDS     R2,R3,R2
   \   00000192   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000194   0xF825 0x2010      STRH     R2,[R5, R0, LSL #+1]
    553          		  	   
    554                 }
   \                     ??Decimation_11: (+1)
   \   00000198   0x1C49             ADDS     R1,R1,#+1
   \   0000019A   0xE7AC             B.N      ??Decimation_8
    555                 
    556          	   
    557                 iRing++;             
   \                     ??Decimation_9: (+1)
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable12_7
   \   000001A0   0x8809             LDRH     R1,[R1, #+0]
   \   000001A2   0x1C49             ADDS     R1,R1,#+1
   \   000001A4   0x.... 0x....      LDR.W    R2,??DataTable12_7
   \   000001A8   0x8011             STRH     R1,[R2, #+0]
    558                 if (iRing==129) iRing = 0;  
   \   000001AA   0x.... 0x....      LDR.W    R1,??DataTable12_7
   \   000001AE   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \   000001B2   0x2981             CMP      R1,#+129
   \   000001B4   0xD103             BNE.N    ??Decimation_12
   \   000001B6   0x2100             MOVS     R1,#+0
   \   000001B8   0x.... 0x....      LDR.W    R2,??DataTable12_7
   \   000001BC   0x8011             STRH     R1,[R2, #+0]
    559          
    560          	}
   \                     ??Decimation_12: (+1)
   \   000001BE   0x1C40             ADDS     R0,R0,#+1
   \   000001C0   0xE72F             B.N      ??Decimation_0
    561          }
   \                     ??Decimation_1: (+1)
   \   000001C2   0xF50D 0x7D01      ADD      SP,SP,#+516
   \   000001C6   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??OutRing:
   \   00000000                      DS8 260

   \                                 In section .bss, align 2
   \                     ??iRing:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     ??Data:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??Data_Old:
   \   00000000                      DS8 4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x80000000         DC32 80000000H, 0BFC7AE14H, 0C03F5C29H, 0C08353F8H, 0C0971AA0H
   \              0xBFC7AE14   
   \              0xC03F5C29   
   \              0xC08353F8   
   \              0xC0971AA0   
   \   00000014   0xC095DB23         DC32 0C095DB23H, 0C07851ECH, 0C0126E98H, 0H, 403051ECH, 40B37CEEH
   \              0xC07851EC   
   \              0xC0126E98   
   \              0x00000000   
   \              0x403051EC   
   \              0x40B37CEE   
   \   0000002C   0x41015C29         DC32 41015C29H, 411A8F5CH, 411D9DB2H, 4105126FH, 409EB852H, 80000000H
   \              0x411A8F5C   
   \              0x411D9DB2   
   \              0x4105126F   
   \              0x409EB852   
   \              0x80000000   
   \   00000044   0xC0C00000         DC32 0C0C00000H, 0C142A7F0H, 0C18B4FDFH, 0C1A4E979H, 0C1A65C29H
   \              0xC142A7F0   
   \              0xC18B4FDF   
   \              0xC1A4E979   
   \              0xC1A65C29   
   \   00000058   0xC18ACCCD         DC32 0C18ACCCDH, 0C1238106H, 0H, 4140C49CH, 41C0F3B6H, 4208645AH
   \              0xC1238106   
   \              0x00000000   
   \              0x4140C49C   
   \              0x41C0F3B6   
   \              0x4208645A   
   \   00000070   0x421F8937         DC32 421F8937H, 421F178DH, 42034AC1H, 4199126FH, 80000000H, 0C1B12B02H
   \              0x421F178D   
   \              0x42034AC1   
   \              0x4199126F   
   \              0x80000000   
   \              0xC1B12B02   
   \   00000088   0xC22FE873         DC32 0C22FE873H, 0C276DD2FH, 0C28F70A4H, 0C28E3CEEH, 0C269A6E9H
   \              0xC276DD2F   
   \              0xC28F70A4   
   \              0xC28E3CEE   
   \              0xC269A6E9   
   \   0000009C   0xC207B22D         DC32 0C207B22DH, 0H, 421C5810H, 429B24DDH, 42D9DEB8H, 42FDB22DH
   \              0x00000000   
   \              0x421C5810   
   \              0x429B24DD   
   \              0x42D9DEB8   
   \              0x42FDB22D   
   \   000000B4   0x42FC71AA         DC32 42FC71AAH, 42D067F0H, 4273C189H, 80000000H, 0C28F526FH, 0C3103EB8H
   \              0x42D067F0   
   \              0x4273C189   
   \              0x80000000   
   \              0xC28F526F   
   \              0xC3103EB8   
   \   000000CC   0xC34E1C6A         DC32 0C34E1C6AH, 0C3752396H, 0C37A4D91H, 0C3553D71H, 0C3019AA0H, 0H
   \              0xC3752396   
   \              0xC37A4D91   
   \              0xC3553D71   
   \              0xC3019AA0   
   \              0x00000000   
   \   000000E4   0x4329A51F         DC32 4329A51FH, 43B82F3BH, 441146B8H, 44458B12H, 44744A0CH, 448C9E25H
   \              0x43B82F3B   
   \              0x441146B8   
   \              0x44458B12   
   \              0x44744A0C   
   \              0x448C9E25   
   \   000000FC   0x449874F6         DC32 449874F6H, 449C88A4H, 449874F6H, 448C9E25H, 44744A0CH, 44458B12H
   \              0x449C88A4   
   \              0x449874F6   
   \              0x448C9E25   
   \              0x44744A0C   
   \              0x44458B12   
   \   00000114   0x441146B8         DC32 441146B8H, 43B82F3BH, 4329A51FH, 0H, 0C3019AA0H, 0C3553D71H
   \              0x43B82F3B   
   \              0x4329A51F   
   \              0x00000000   
   \              0xC3019AA0   
   \              0xC3553D71   
   \   0000012C   0xC37A4D91         DC32 0C37A4D91H, 0C3752396H, 0C34E1C6AH, 0C3103EB8H, 0C28F526FH
   \              0xC3752396   
   \              0xC34E1C6A   
   \              0xC3103EB8   
   \              0xC28F526F   
   \   00000140   0x80000000         DC32 80000000H, 4273C189H, 42D067F0H, 42FC71AAH, 42FDB22DH, 42D9DEB8H
   \              0x4273C189   
   \              0x42D067F0   
   \              0x42FC71AA   
   \              0x42FDB22D   
   \              0x42D9DEB8   
   \   00000158   0x429B24DD         DC32 429B24DDH, 421C5810H, 0H, 0C207B22DH, 0C269A6E9H, 0C28E3CEEH
   \              0x421C5810   
   \              0x00000000   
   \              0xC207B22D   
   \              0xC269A6E9   
   \              0xC28E3CEE   
   \   00000170   0xC28F70A4         DC32 0C28F70A4H, 0C276DD2FH, 0C22FE873H, 0C1B12B02H, 80000000H
   \              0xC276DD2F   
   \              0xC22FE873   
   \              0xC1B12B02   
   \              0x80000000   
   \   00000184   0x4199126F         DC32 4199126FH, 42034AC1H, 421F178DH, 421F8937H, 4208645AH, 41C0F3B6H
   \              0x42034AC1   
   \              0x421F178D   
   \              0x421F8937   
   \              0x4208645A   
   \              0x41C0F3B6   
   \   0000019C   0x4140C49C         DC32 4140C49CH, 0H, 0C1238106H, 0C18ACCCDH, 0C1A65C29H, 0C1A4E979H
   \              0x00000000   
   \              0xC1238106   
   \              0xC18ACCCD   
   \              0xC1A65C29   
   \              0xC1A4E979   
   \   000001B4   0xC18B4FDF         DC32 0C18B4FDFH, 0C142A7F0H, 0C0C00000H, 80000000H, 409EB852H
   \              0xC142A7F0   
   \              0xC0C00000   
   \              0x80000000   
   \              0x409EB852   
   \   000001C8   0x4105126F         DC32 4105126FH, 411D9DB2H, 411A8F5CH, 41015C29H, 40B37CEEH, 403051ECH
   \              0x411D9DB2   
   \              0x411A8F5C   
   \              0x41015C29   
   \              0x40B37CEE   
   \              0x403051EC   
   \   000001E0   0x00000000         DC32 0H, 0C0126E98H, 0C07851ECH, 0C095DB23H, 0C0971AA0H, 0C08353F8H
   \              0xC0126E98   
   \              0xC07851EC   
   \              0xC095DB23   
   \              0xC0971AA0   
   \              0xC08353F8   
   \   000001F8   0xC03F5C29         DC32 0C03F5C29H, 0BFC7AE14H, 80000000H
   \              0xBFC7AE14   
   \              0x80000000   
    562          
    563          
    564          

   \                                 In section .text, align 2, keep-with-next
    565          void Window(float *fir64Coff)
    566          {
   \                     Window: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x0004             MOVS     R4,R0
    567              for (int i = 0; i < DSP_NUMCOFFHANNIING; i++) //DSP_NUMCOFF
   \   00000008   0x2500             MOVS     R5,#+0
   \                     ??Window_0: (+1)
   \   0000000A   0xF5B5 0x6F80      CMP      R5,#+1024
   \   0000000E   0xDA35             BGE.N    ??Window_1
    568          	{
    569                  //fir64Coff[i] = (double_t)((1 << 10)-1);
    570                  fir64Coff[i] = (float)(DSP_NUMCOFFHANNIING);
   \   00000010   0xF05F 0x4089      MOVS     R0,#+1149239296
   \   00000014   0xF844 0x0025      STR      R0,[R4, R5, LSL #+2]
    571          		//Hanning Window (less noise than hamming?
    572                  fir64Coff[i] *= 0.5f * (
    573          		                       1.0f - cos((2.0f * PI * i)/ ((float)DSP_NUMCOFFHANNIING - 1.0f))  
    574          		                      );
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0x.... 0x....      BL       __aeabi_i2d
   \   0000001E   0x.... 0x....      LDR.W    R2,??DataTable9  ;; 0x5a7ed197
   \   00000022   0x.... 0x....      LDR.W    R3,??DataTable9_1  ;; 0x401921fb
   \   00000026   0x.... 0x....      BL       __aeabi_dmul
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x.... 0x....      LDR.W    R3,??DataTable12_3  ;; 0x408ff800
   \   00000030   0x.... 0x....      BL       __aeabi_ddiv
   \   00000034   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   00000038   0x.... 0x....      BL       cos
   \   0000003C   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   00000040   0xEEF0 0x8A60      VMOV.F32 S17,S1
   \   00000044   0xF854 0x0025      LDR      R0,[R4, R5, LSL #+2]
   \   00000048   0x.... 0x....      BL       __aeabi_f2d
   \   0000004C   0x0006             MOVS     R6,R0
   \   0000004E   0x000F             MOVS     R7,R1
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable12_4  ;; 0x3ff00000
   \   00000056   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   0000005A   0x.... 0x....      BL       __aeabi_dsub
   \   0000005E   0x2200             MOVS     R2,#+0
   \   00000060   0x.... 0x....      LDR.W    R3,??DataTable13_20  ;; 0x3fe00000
   \   00000064   0x.... 0x....      BL       __aeabi_dmul
   \   00000068   0x0032             MOVS     R2,R6
   \   0000006A   0x003B             MOVS     R3,R7
   \   0000006C   0x.... 0x....      BL       __aeabi_dmul
   \   00000070   0x.... 0x....      BL       __aeabi_d2f
   \   00000074   0xF844 0x0025      STR      R0,[R4, R5, LSL #+2]
    575          
    576                  //Hamming Window
    577                  //fir64Coff[i] *= 0.54 - 0.46 * cos((2 * M_PI * i) / (64 - 1));
    578                      
    579                  //Nuttall Window
    580                  //fir64Coff[i] *= 0.355768f - 0.487396*cos((2*M_PI*i)/(64 -1)) + 0.144232*cos((4*M_PI*i)/(64-1))-0.012604*cos((6*M_PI*i)/(64-1));
    581            
    582                  //Cosine Window
    583                  //fir64Coff[i] *= sin((M_PI * i)/(64-1));
    584          
    585                  //Blackman Harris            
    586                  //float w = (2 * M_PI * i) / 64;
    587                  //fir64Coff[i] *= 0.422323 - 0.49755 * cos(w) + 0.07922 * cos(2 * w);
    588              }
   \   00000078   0x1C6D             ADDS     R5,R5,#+1
   \   0000007A   0xE7C6             B.N      ??Window_0
    589          	 //fir64Coff[DSP_NUMCOFF-1] = 0;
    590          }
   \                     ??Window_1: (+1)
   \   0000007C   0xECBD 0x8B02      VPOP     {D8}
   \   00000080   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    591          
    592          /*
    593          Wikimedia: PDM algorithm
    594          y[n] = x[n] + e[n] - e[n-1]     --> +/-1 only
    595          
    596          e[n] = y[n] - x[n] + e[n-1]
    597          
    598          y[n]     output sample 
    599          e[n]     error 
    600          e[n-1]   preivous error
    601          
    602          */

   \                                 In section .text, align 2, keep-with-next
    603          void PCM2PDM (int16_t *InBuff, int16_t *OutBuff, int16_t size, float *err)
    604          {		
   \                     PCM2PDM: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    605          	for (int16_t i =0; i< size; i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??PCM2PDM_0: (+1)
   \   00000004   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000006   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000008   0x4294             CMP      R4,R2
   \   0000000A   0xDA53             BGE.N    ??PCM2PDM_1
    606          	{
    607          		if (i==0)
   \   0000000C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000000E   0x2C00             CMP      R4,#+0
   \   00000010   0xD11B             BNE.N    ??PCM2PDM_2
    608          		{
    609          		    if (InBuff[i] > 0)
   \   00000012   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000014   0xF930 0x5014      LDRSH    R5,[R0, R4, LSL #+1]
   \   00000018   0x2D01             CMP      R5,#+1
   \   0000001A   0xDB04             BLT.N    ??PCM2PDM_3
    610          	            OutBuff[i] = 1;
   \   0000001C   0x2501             MOVS     R5,#+1
   \   0000001E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000020   0xF821 0x5014      STRH     R5,[R1, R4, LSL #+1]
   \   00000024   0xE003             B.N      ??PCM2PDM_4
    611          		    else
    612          			    OutBuff[i] = 0; // "-1" is replace by "0"	
   \                     ??PCM2PDM_3: (+1)
   \   00000026   0x2500             MOVS     R5,#+0
   \   00000028   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000002A   0xF821 0x5014      STRH     R5,[R1, R4, LSL #+1]
    613          			err[0] = OutBuff[i] - InBuff[i];
   \                     ??PCM2PDM_4: (+1)
   \   0000002E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000030   0xF931 0x5014      LDRSH    R5,[R1, R4, LSL #+1]
   \   00000034   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000036   0xF930 0x6014      LDRSH    R6,[R0, R4, LSL #+1]
   \   0000003A   0x1BAD             SUBS     R5,R5,R6
   \   0000003C   0xEE00 0x5A10      VMOV     S0,R5
   \   00000040   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000044   0xED83 0x0A00      VSTR     S0,[R3, #0]
   \   00000048   0xE032             B.N      ??PCM2PDM_5
    614          		}
    615          		else
    616          		{
    617          			if (InBuff[i] > err[i-1])
   \                     ??PCM2PDM_2: (+1)
   \   0000004A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000004C   0xF930 0x5014      LDRSH    R5,[R0, R4, LSL #+1]
   \   00000050   0xEE00 0x5A10      VMOV     S0,R5
   \   00000054   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000058   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000005A   0xEB13 0x0584      ADDS     R5,R3,R4, LSL #+2
   \   0000005E   0x1F2D             SUBS     R5,R5,#+4
   \   00000060   0xEDD5 0x0A00      VLDR     S1,[R5, #0]
   \   00000064   0xEEF4 0x0A40      VCMP.F32 S1,S0
   \   00000068   0xEEF1 0xFA10      FMSTAT   
   \   0000006C   0xD504             BPL.N    ??PCM2PDM_6
    618          				OutBuff[i] = 1;
   \   0000006E   0x2501             MOVS     R5,#+1
   \   00000070   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000072   0xF821 0x5014      STRH     R5,[R1, R4, LSL #+1]
   \   00000076   0xE003             B.N      ??PCM2PDM_7
    619          			else
    620          				OutBuff[i] = 0; // "-1" is replace by "0"
   \                     ??PCM2PDM_6: (+1)
   \   00000078   0x2500             MOVS     R5,#+0
   \   0000007A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000007C   0xF821 0x5014      STRH     R5,[R1, R4, LSL #+1]
    621          			err[i] = OutBuff[i] - InBuff[i] + err[i-1];
   \                     ??PCM2PDM_7: (+1)
   \   00000080   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000082   0xF931 0x5014      LDRSH    R5,[R1, R4, LSL #+1]
   \   00000086   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000088   0xF930 0x6014      LDRSH    R6,[R0, R4, LSL #+1]
   \   0000008C   0x1BAD             SUBS     R5,R5,R6
   \   0000008E   0xEE00 0x5A10      VMOV     S0,R5
   \   00000092   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000096   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000098   0xEB13 0x0584      ADDS     R5,R3,R4, LSL #+2
   \   0000009C   0x1F2D             SUBS     R5,R5,#+4
   \   0000009E   0xEDD5 0x0A00      VLDR     S1,[R5, #0]
   \   000000A2   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   000000A6   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   000000A8   0xEB13 0x0584      ADDS     R5,R3,R4, LSL #+2
   \   000000AC   0xED85 0x0A00      VSTR     S0,[R5, #0]
    622          		}
    623          	}	
   \                     ??PCM2PDM_5: (+1)
   \   000000B0   0x1C64             ADDS     R4,R4,#+1
   \   000000B2   0xE7A7             B.N      ??PCM2PDM_0
    624          }
   \                     ??PCM2PDM_1: (+1)
   \   000000B4   0xBC70             POP      {R4-R6}
   \   000000B6   0x4770             BX       LR               ;; return
    625          
    626          /*
    627          PDM = Pulse Density Modulation
    628          PCM - Pulse Code Modulation
    629          convertion from PDM to PCM
    630          http://www.gamedev.net/topic/660509-any-dsp-gurus-pdm-to-pcm-noisealiasingspectral-leakage-problem/
    631          
    632          http://curiouser.cheshireeng.com/2014/11/04/using-a-pdm-microphone/
    633          
    634          https://www.das-labor.org/svn/microcontroller/src-stm32f4xx/serialUSB/Libraries/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_f32.c
    635          
    636            InBuff length  : 128 bytes
    637            Outbuff length : 16x2 bytes
    638          */
    639          
    640          
    641          

   \                                 In section .text, align 2, keep-with-next
    642          void PDM2PCM(uint8_t *InBuff,int16_t *OutBuff,int16_t PreCalcBuff[DSP_NUMBYTECONV][256])
    643          {
   \                     PDM2PCM: (+1)
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0015             MOVS     R5,R2
    644              int32_t BuffInPos = -DSP_NUMBYTECONV/2;
   \   00000008   0xF07F 0x0803      MVNS     R8,#+3
    645          	static uint8_t Initial_Array[DSP_NUMBYTECONV/2];
    646          	
    647              for (uint32_t currentSample = 0; currentSample < 16; currentSample++) // go for all the output sample
   \   0000000C   0x2600             MOVS     R6,#+0
   \                     ??PDM2PCM_0: (+1)
   \   0000000E   0x2E10             CMP      R6,#+16
   \   00000010   0xD263             BCS.N    ??PDM2PCM_1
    648          	{                                                                     // 32*16 = 512 bytes of input steam 
    649                  int16_t stSum=0;
   \   00000012   0x2700             MOVS     R7,#+0
    650          //		int16_t coefficientIndex=0;
    651          
    652                    
    653          		/* First half of frame */
    654                  for (uint16_t i = 0; i < DSP_NUMBYTECONV; i++) // DSP_NUMBYTECONV = 8
   \   00000014   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??PDM2PCM_2: (+1)
   \   00000018   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000001C   0xF1B9 0x0F08      CMP      R9,#+8
   \   00000020   0xDA24             BGE.N    ??PDM2PCM_3
    655                  {         
    656          
    657                     	int16_t temp,temp1;                        // temporary variable uses for debug, will be removed in future
    658          
    659                      if (BuffInPos < 0)
   \   00000022   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000026   0xD507             BPL.N    ??PDM2PCM_4
    660          				temp1 = Initial_Array[i];
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable13_21
   \   0000002C   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000030   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   00000034   0x4683             MOV      R11,R0
   \   00000036   0xE002             B.N      ??PDM2PCM_5
    661          			else
    662          			    temp1 = InBuff[BuffInPos];          // stored the value of 1 bytes input which is calculated
   \                     ??PDM2PCM_4: (+1)
   \   00000038   0xF818 0x0004      LDRB     R0,[R8, R4]
   \   0000003C   0x4683             MOV      R11,R0
    663          
    664          				
    665          			temp = (int16_t)PreCalcBuff[i][temp1];        // convolution for 1 bytes which take from the Pre-calculation array
   \                     ??PDM2PCM_5: (+1)
   \   0000003E   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000042   0xF44F 0x7000      MOV      R0,#+512
   \   00000046   0xFB00 0x5009      MLA      R0,R0,R9,R5
   \   0000004A   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   0000004E   0xF930 0x001B      LDRSH    R0,[R0, R11, LSL #+1]
   \   00000052   0x4682             MOV      R10,R0
    666          		
    667                      stSum = ADD_S16(stSum,temp);  //These are the pre-calculated window values
   \   00000054   0x4651             MOV      R1,R10
   \   00000056   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000058   0x0038             MOVS     R0,R7
   \   0000005A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000005C   0x.... 0x....      BL       ADD_S16
   \   00000060   0x0007             MOVS     R7,R0
    668          				
    669                      
    670                      BuffInPos++;  //next byte of the input sample stream:0-->255
   \   00000062   0xF118 0x0801      ADDS     R8,R8,#+1
    671                  }
   \   00000066   0xF119 0x0901      ADDS     R9,R9,#+1
   \   0000006A   0xE7D5             B.N      ??PDM2PCM_2
    672          
    673          		BuffInPos-=DSP_NUMBYTECONV/2;
   \                     ??PDM2PCM_3: (+1)
   \   0000006C   0xF1B8 0x0804      SUBS     R8,R8,#+4
    674          
    675          		/* Second half of frame */
    676                  for (uint16_t i = 0; i < DSP_NUMBYTECONV; i++) // DSP_NUMBYTECONV = 8
   \   00000070   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??PDM2PCM_6: (+1)
   \   00000074   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000078   0xF1B9 0x0F08      CMP      R9,#+8
   \   0000007C   0xDA19             BGE.N    ??PDM2PCM_7
    677                  {         
    678          
    679                     	int16_t temp,temp1;                        // temporary variable uses for debug, will be removed in future
    680          
    681          
    682          			temp1 = InBuff[BuffInPos];          // stored the value of 1 bytes input which is calculated
   \   0000007E   0xF818 0x0004      LDRB     R0,[R8, R4]
   \   00000082   0x4683             MOV      R11,R0
    683          	
    684          			temp = (int16_t)PreCalcBuff[i][temp1];        // convolution for 1 bytes which take from the Pre-calculation array
   \   00000084   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000088   0xF44F 0x7000      MOV      R0,#+512
   \   0000008C   0xFB00 0x5009      MLA      R0,R0,R9,R5
   \   00000090   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   00000094   0xF930 0x001B      LDRSH    R0,[R0, R11, LSL #+1]
   \   00000098   0x4682             MOV      R10,R0
    685          		
    686                      stSum = ADD_S16(stSum,temp);  //These are the pre-calculated window values
   \   0000009A   0x4651             MOV      R1,R10
   \   0000009C   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000009E   0x0038             MOVS     R0,R7
   \   000000A0   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000A2   0x.... 0x....      BL       ADD_S16
   \   000000A6   0x0007             MOVS     R7,R0
    687          				
    688                      
    689                      BuffInPos++;  //next byte of the input sample stream:0-->255
   \   000000A8   0xF118 0x0801      ADDS     R8,R8,#+1
    690                  }
   \   000000AC   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000000B0   0xE7E0             B.N      ??PDM2PCM_6
    691          
    692                  OutBuff[currentSample] = (int16_t)stSum;
   \                     ??PDM2PCM_7: (+1)
   \   000000B2   0x9800             LDR      R0,[SP, #+0]
   \   000000B4   0xF820 0x7016      STRH     R7,[R0, R6, LSL #+1]
    693          		
    694          		
    695          
    696          		for (uint16_t i=0; i< (DSP_NUMBYTECONV/2); i++)
   \   000000B8   0x2000             MOVS     R0,#+0
   \                     ??PDM2PCM_8: (+1)
   \   000000BA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000BC   0x2804             CMP      R0,#+4
   \   000000BE   0xDA0A             BGE.N    ??PDM2PCM_9
    697          		{
    698                       Initial_Array[i]=InBuff[BuffInPos - 1 - DSP_NUMBYTECONV/2 + i];
   \   000000C0   0xFA18 0xF180      UXTAH    R1,R8,R0
   \   000000C4   0x1909             ADDS     R1,R1,R4
   \   000000C6   0xF811 0x1C05      LDRB     R1,[R1, #-5]
   \   000000CA   0x.... 0x....      LDR.W    R2,??DataTable13_21
   \   000000CE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000D0   0x5481             STRB     R1,[R0, R2]
    699          		}
   \   000000D2   0x1C40             ADDS     R0,R0,#+1
   \   000000D4   0xE7F1             B.N      ??PDM2PCM_8
    700              }
   \                     ??PDM2PCM_9: (+1)
   \   000000D6   0x1C76             ADDS     R6,R6,#+1
   \   000000D8   0xE799             B.N      ??PDM2PCM_0
    701          
    702          
    703          	#if 0
    704                 for (int16_t i=0; i<8; i++)
    705          	   {
    706          	       uint8_t test;
    707          	       test= InBuff[currentSample*8 +i];
    708          	       for (uint8_t j=0; j<8;j++)
    709          		   {
    710          		        if ((test & 0x01) == 0x01) 
    711          				{
    712                              stSum += 10;
    713                          }
    714                          else                        
    715          				{
    716                              stSum -= 10;
    717                          }
    718          				
    719          				test >>= 1;
    720          		   }
    721          	   }
    722          
    723          #endif
    724          
    725          }
   \                     ??PDM2PCM_1: (+1)
   \   000000DA   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return

   \                                 In section .bss, align 4
   \                     ??Initial_Array:
   \   00000000                      DS8 4
    726          
    727          //void OverLapAdd (uint8_t *Input, int16_t *Output) //128 bytes input 32 bytes output
    728          //{
    729              
    730          //}
    731          	
    732          
    733          

   \                                 In section .text, align 2, keep-with-next
    734          void Precalculation(float *fir64Coff,int16_t precalculated[129][256])
    735          {
   \                     Precalculation: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    736              for (uint8_t i = 0; i < 129; i++)  /* from byte 0th to byth 7th of data input */
   \   00000002   0x2200             MOVS     R2,#+0
   \                     ??Precalculation_0: (+1)
   \   00000004   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0x2A81             CMP      R2,#+129
   \   00000008   0xDA61             BGE.N    ??Precalculation_1
    737          	{ 
    738          
    739                  for (uint16_t j = 0; j < 256; j++)    /* list all the cases can happen for the input data */ 
   \   0000000A   0x2300             MOVS     R3,#+0
   \                     ??Precalculation_2: (+1)
   \   0000000C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000E   0x2BFF             CMP      R3,#+255
   \   00000010   0xDC5B             BGT.N    ??Precalculation_3
    740          		{         
    741                      // check overflow 
    742          			if ((int32_t)(fir64Coff[i]*(j-128)) > 32767)
   \   00000012   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000014   0xF1B3 0x0480      SUBS     R4,R3,#+128
   \   00000018   0xEE00 0x4A10      VMOV     S0,R4
   \   0000001C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000020   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000022   0xEB10 0x0482      ADDS     R4,R0,R2, LSL #+2
   \   00000026   0xEDD4 0x0A00      VLDR     S1,[R4, #0]
   \   0000002A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000002E   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000032   0xEE10 0x4A10      VMOV     R4,S0
   \   00000036   0xF5B4 0x4F00      CMP      R4,#+32768
   \   0000003A   0xDB0A             BLT.N    ??Precalculation_4
    743          			{
    744                          
    745          				precalculated[i][j] = 32767;
   \   0000003C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003E   0xF44F 0x7400      MOV      R4,#+512
   \   00000042   0xFB04 0x1402      MLA      R4,R4,R2,R1
   \   00000046   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000048   0xF647 0x75FF      MOVW     R5,#+32767
   \   0000004C   0xF824 0x5013      STRH     R5,[R4, R3, LSL #+1]
   \   00000050   0xE039             B.N      ??Precalculation_5
    746          			}
    747          			else if ((int32_t)(fir64Coff[i]*(j-128)) < -32768)
   \                     ??Precalculation_4: (+1)
   \   00000052   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000054   0xF1B3 0x0480      SUBS     R4,R3,#+128
   \   00000058   0xEE00 0x4A10      VMOV     S0,R4
   \   0000005C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000060   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000062   0xEB10 0x0482      ADDS     R4,R0,R2, LSL #+2
   \   00000066   0xEDD4 0x0A00      VLDR     S1,[R4, #0]
   \   0000006A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000006E   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000072   0xEE10 0x4A10      VMOV     R4,S0
   \   00000076   0xF514 0x4F00      CMN      R4,#+32768
   \   0000007A   0xDA0A             BGE.N    ??Precalculation_6
    748          			{
    749                          precalculated[i][j] = -32768;
   \   0000007C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000007E   0xF44F 0x7400      MOV      R4,#+512
   \   00000082   0xFB04 0x1402      MLA      R4,R4,R2,R1
   \   00000086   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000088   0x.... 0x....      LDR.W    R5,??DataTable13_22  ;; 0xffff8000
   \   0000008C   0xF824 0x5013      STRH     R5,[R4, R3, LSL #+1]
   \   00000090   0xE019             B.N      ??Precalculation_5
    750          			}
    751          			else
    752          			{
    753                          precalculated[i][j] = (int16_t)(fir64Coff[i]*(j-128));
   \                     ??Precalculation_6: (+1)
   \   00000092   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000094   0xF44F 0x7400      MOV      R4,#+512
   \   00000098   0xFB04 0x1402      MLA      R4,R4,R2,R1
   \   0000009C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000009E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000A0   0xF1B3 0x0580      SUBS     R5,R3,#+128
   \   000000A4   0xEE00 0x5A10      VMOV     S0,R5
   \   000000A8   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000AC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000AE   0xEB10 0x0582      ADDS     R5,R0,R2, LSL #+2
   \   000000B2   0xEDD5 0x0A00      VLDR     S1,[R5, #0]
   \   000000B6   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000000BA   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000000BE   0xEE10 0x5A10      VMOV     R5,S0
   \   000000C2   0xF824 0x5013      STRH     R5,[R4, R3, LSL #+1]
    754          			}
    755                  }
   \                     ??Precalculation_5: (+1)
   \   000000C6   0x1C5B             ADDS     R3,R3,#+1
   \   000000C8   0xE7A0             B.N      ??Precalculation_2
    756              }
   \                     ??Precalculation_3: (+1)
   \   000000CA   0x1C52             ADDS     R2,R2,#+1
   \   000000CC   0xE79A             B.N      ??Precalculation_0
    757          }
   \                     ??Precalculation_1: (+1)
   \   000000CE   0xBC30             POP      {R4,R5}
   \   000000D0   0x4770             BX       LR               ;; return
    758          
    759          
    760          /************************************************************************************************ 
    761          Fc: Cutoff Frequency
    762          Fs: Sample Rate
    763          M: filter length
    764          *************************************************************************************************/
    765          

   \                                 In section .text, align 4, keep-with-next
    766          float lowpassFIR(float * firBuffer,uint64_t M,uint64_t Fs,uint64_t Fc)
    767          {    
   \                     lowpassFIR: (+1)
   \   00000000   0xE92D 0x4DF0      PUSH     {R4-R8,R10,R11,LR}
   \   00000004   0xED2D 0x8B06      VPUSH    {D8-D10}
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x4680             MOV      R8,R0
   \   0000000C   0x0016             MOVS     R6,R2
   \   0000000E   0x001F             MOVS     R7,R3
   \   00000010   0xE9DD 0xAB12      LDRD     R10,R11,[SP, #+72]
    768              M = M -1;
   \   00000014   0x1E76             SUBS     R6,R6,#+1
   \   00000016   0xF177 0x0700      SBCS     R7,R7,#+0
    769          	
    770              float Ft = (float)Fc / (float)Fs;
   \   0000001A   0x4650             MOV      R0,R10
   \   0000001C   0x4659             MOV      R1,R11
   \   0000001E   0x.... 0x....      BL       __aeabi_ul2f
   \   00000022   0xEE08 0x0A10      VMOV     S16,R0
   \   00000026   0xE9DD 0x0110      LDRD     R0,R1,[SP, #+64]
   \   0000002A   0x.... 0x....      BL       __aeabi_ul2f
   \   0000002E   0xEE00 0x0A10      VMOV     S0,R0
   \   00000032   0xEEC8 0x8A00      VDIV.F32 S17,S16,S0
    771          
    772          
    773              float sum = 0.0f;
   \   00000036   0xED9F 0x....      VLDR.W   S16,??DataTable9_2  ;; 0x0
    774              
    775              for (uint64_t i = 0; i < M; i++) 
   \   0000003A   0x2400             MOVS     R4,#+0
   \   0000003C   0x2500             MOVS     R5,#+0
   \                     ??lowpassFIR_0: (+1)
   \   0000003E   0x42BD             CMP      R5,R7
   \   00000040   0xF200 0x8091      BHI.W    ??lowpassFIR_1
   \   00000044   0xD302             BCC.N    ??lowpassFIR_2
   \   00000046   0x42B4             CMP      R4,R6
   \   00000048   0xF080 0x808D      BCS.W    ??lowpassFIR_1
    776          	{
    777                  if (i != ((float)M / 2)) 
   \                     ??lowpassFIR_2: (+1)
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x0029             MOVS     R1,R5
   \   00000050   0x.... 0x....      BL       __aeabi_ul2f
   \   00000054   0xEE09 0x0A10      VMOV     S18,R0
   \   00000058   0x0030             MOVS     R0,R6
   \   0000005A   0x0039             MOVS     R1,R7
   \   0000005C   0x.... 0x....      BL       __aeabi_ul2f
   \   00000060   0xEE00 0x0A10      VMOV     S0,R0
   \   00000064   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   00000068   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   0000006C   0xEEB4 0x9A40      VCMP.F32 S18,S0
   \   00000070   0xEEF1 0xFA10      FMSTAT   
   \   00000074   0xD05F             BEQ.N    ??lowpassFIR_3
    778          		{
    779                      firBuffer[i] *= sin(2*PI*Ft*(i - ((float)M / 2))) / 
    780          			                (PI * (i - ((float)M / 2)));
   \   00000076   0xEE18 0x0A90      VMOV     R0,S17
   \   0000007A   0x.... 0x....      BL       __aeabi_f2d
   \   0000007E   0x0002             MOVS     R2,R0
   \   00000080   0x000B             MOVS     R3,R1
   \   00000082   0x....             LDR.N    R0,??DataTable9  ;; 0x5a7ed197
   \   00000084   0x....             LDR.N    R1,??DataTable9_1  ;; 0x401921fb
   \   00000086   0x.... 0x....      BL       __aeabi_dmul
   \   0000008A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000008E   0x0020             MOVS     R0,R4
   \   00000090   0x0029             MOVS     R1,R5
   \   00000092   0x.... 0x....      BL       __aeabi_ul2f
   \   00000096   0xEE09 0x0A10      VMOV     S18,R0
   \   0000009A   0x0030             MOVS     R0,R6
   \   0000009C   0x0039             MOVS     R1,R7
   \   0000009E   0x.... 0x....      BL       __aeabi_ul2f
   \   000000A2   0xEE00 0x0A10      VMOV     S0,R0
   \   000000A6   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   000000AA   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   000000AE   0xEE39 0x0A40      VSUB.F32 S0,S18,S0
   \   000000B2   0xEE10 0x0A10      VMOV     R0,S0
   \   000000B6   0x.... 0x....      BL       __aeabi_f2d
   \   000000BA   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   000000BE   0x.... 0x....      BL       __aeabi_dmul
   \   000000C2   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   000000C6   0x.... 0x....      BL       sin
   \   000000CA   0xEEB0 0x9A40      VMOV.F32 S18,S0
   \   000000CE   0xEEF0 0x9A60      VMOV.F32 S19,S1
   \   000000D2   0xF858 0x0024      LDR      R0,[R8, R4, LSL #+2]
   \   000000D6   0x.... 0x....      BL       __aeabi_f2d
   \   000000DA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000DE   0x0020             MOVS     R0,R4
   \   000000E0   0x0029             MOVS     R1,R5
   \   000000E2   0x.... 0x....      BL       __aeabi_ul2f
   \   000000E6   0xEE0A 0x0A10      VMOV     S20,R0
   \   000000EA   0x0030             MOVS     R0,R6
   \   000000EC   0x0039             MOVS     R1,R7
   \   000000EE   0x.... 0x....      BL       __aeabi_ul2f
   \   000000F2   0xEE00 0x0A10      VMOV     S0,R0
   \   000000F6   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   000000FA   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
   \   000000FE   0xEE3A 0x0A40      VSUB.F32 S0,S20,S0
   \   00000102   0xEE10 0x0A10      VMOV     R0,S0
   \   00000106   0x.... 0x....      BL       __aeabi_f2d
   \   0000010A   0x....             LDR.N    R2,??DataTable9  ;; 0x5a7ed197
   \   0000010C   0x.... 0x....      LDR.W    R3,??DataTable13_23  ;; 0x400921fb
   \   00000110   0x.... 0x....      BL       __aeabi_dmul
   \   00000114   0x0002             MOVS     R2,R0
   \   00000116   0x000B             MOVS     R3,R1
   \   00000118   0xEC51 0x0B19      VMOV     R0,R1,D9
   \   0000011C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000120   0x0002             MOVS     R2,R0
   \   00000122   0x000B             MOVS     R3,R1
   \   00000124   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000128   0x.... 0x....      BL       __aeabi_dmul
   \   0000012C   0x.... 0x....      BL       __aeabi_d2f
   \   00000130   0xF848 0x0024      STR      R0,[R8, R4, LSL #+2]
   \   00000134   0xE00D             B.N      ??lowpassFIR_4
    781                  }
    782                  else 
    783          		{
    784                      firBuffer[i] *= 2* Ft;
   \                     ??lowpassFIR_3: (+1)
   \   00000136   0xEEB0 0x0A00      VMOV.F32 S0,#2.0
   \   0000013A   0xEE28 0x0A80      VMUL.F32 S0,S17,S0
   \   0000013E   0xEB18 0x0084      ADDS     R0,R8,R4, LSL #+2
   \   00000142   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000146   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000014A   0xEB18 0x0084      ADDS     R0,R8,R4, LSL #+2
   \   0000014E   0xED80 0x0A00      VSTR     S0,[R0, #0]
    785                  }
    786                  
    787                  sum += firBuffer[i];     
   \                     ??lowpassFIR_4: (+1)
   \   00000152   0xEB18 0x0084      ADDS     R0,R8,R4, LSL #+2
   \   00000156   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   0000015A   0xEE38 0x8A00      VADD.F32 S16,S16,S0
    788              }
   \   0000015E   0x1C64             ADDS     R4,R4,#+1
   \   00000160   0xF155 0x0500      ADCS     R5,R5,#+0
   \   00000164   0xE76B             B.N      ??lowpassFIR_0
    789              
    790          	return sum;
   \                     ??lowpassFIR_1: (+1)
   \   00000166   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000016A   0xB002             ADD      SP,SP,#+8
   \   0000016C   0xECBD 0x8B06      VPOP     {D8-D10}
   \   00000170   0xE8BD 0x8DF0      POP      {R4-R8,R10,R11,PC}  ;; return
    791          }
    792          
    793          /* */
    794          

   \                                 In section .text, align 2, keep-with-next
    795          int8_t CrssCor(int16_t * vDataIn1, int16_t * vDataIn2, uint16_t numLen, uint32_t * CrssCorVal )
    796          {
   \                     CrssCor: (+1)
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x468B             MOV      R11,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x469A             MOV      R10,R3
    797              static int16_t vDataIn1Old, vDataIn2Old;
                                    ^
Warning[Pe177]: variable "vDataIn1Old" was declared but never referenced

      static int16_t vDataIn1Old, vDataIn2Old;
                                  ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c",797  Warning[Pe177]: 
          variable "vDataIn2Old" was declared but never referenced
    798              int64_t Sum, SumMax;
    799          	int8_t idxPos;
    800          #if 1
    801          	int16_t *vDataIn1Out = malloc(sizeof(int16_t)*numLen);
   \   0000000C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000E   0x0070             LSLS     R0,R6,#+1
   \   00000010   0x.... 0x....      BL       malloc
   \   00000014   0x4680             MOV      R8,R0
    802          	int16_t *vDataIn2Out = malloc(sizeof(int16_t)*numLen);
   \   00000016   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000018   0x0070             LSLS     R0,R6,#+1
   \   0000001A   0x.... 0x....      BL       malloc
   \   0000001E   0x0007             MOVS     R7,R0
    803          #endif
    804          
    805              SumMax=0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
    806              Sum=0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x0004             MOVS     R4,R0
   \   0000002E   0x000D             MOVS     R5,R1
    807          #if 0	
    808          	LowPassIIR(vDataIn1,vDataIn1Out ,&vDataIn1Old, numLen,8);
    809          	LowPassIIR(vDataIn2,vDataIn2Out ,&vDataIn2Old, numLen,8);
    810          #endif
    811          
    812              for (uint16_t i=0;i<numLen;i++)
   \   00000030   0x2000             MOVS     R0,#+0
   \                     ??CrssCor_0: (+1)
   \   00000032   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000034   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000036   0x42B0             CMP      R0,R6
   \   00000038   0xD20E             BCS.N    ??CrssCor_1
    813              {
    814                  vDataIn1Out[i]= (int16_t)(vDataIn1[i]);//fir256Coff[i]
   \   0000003A   0x9904             LDR      R1,[SP, #+16]
   \   0000003C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003E   0xF831 0x1010      LDRH     R1,[R1, R0, LSL #+1]
   \   00000042   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000044   0xF828 0x1010      STRH     R1,[R8, R0, LSL #+1]
    815                  vDataIn2Out[i]= (int16_t)(vDataIn2[i]);//fir256Coff[i]
   \   00000048   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004A   0xF83B 0x1010      LDRH     R1,[R11, R0, LSL #+1]
   \   0000004E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000050   0xF827 0x1010      STRH     R1,[R7, R0, LSL #+1]
    816              }
   \   00000054   0x1C40             ADDS     R0,R0,#+1
   \   00000056   0xE7EC             B.N      ??CrssCor_0
    817          	
    818              for (int8_t i=-8;i<8;i++)
   \                     ??CrssCor_1: (+1)
   \   00000058   0xF07F 0x0907      MVNS     R9,#+7
   \                     ??CrssCor_2: (+1)
   \   0000005C   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   00000060   0xF1B9 0x0F08      CMP      R9,#+8
   \   00000064   0xDA4A             BGE.N    ??CrssCor_3
    819              {
    820                     Sum = 0;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x0004             MOVS     R4,R0
   \   0000006C   0x000D             MOVS     R5,R1
    821          	   if (i>=0)
   \   0000006E   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   00000072   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000076   0xD414             BMI.N    ??CrssCor_4
    822          	   {
    823          	       for(uint16_t j=0;j<numLen;j++)
   \   00000078   0x2200             MOVS     R2,#+0
   \                     ??CrssCor_5: (+1)
   \   0000007A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000007C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000007E   0x42B2             CMP      R2,R6
   \   00000080   0xD225             BCS.N    ??CrssCor_6
    824          	       {
    825          	           Sum += vDataIn1Out[j+i]*vDataIn2Out[j];   
   \   00000082   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   00000086   0xFA19 0xF082      UXTAH    R0,R9,R2
   \   0000008A   0xF938 0x0010      LDRSH    R0,[R8, R0, LSL #+1]
   \   0000008E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000090   0xF937 0x1012      LDRSH    R1,[R7, R2, LSL #+1]
   \   00000094   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   00000098   0x17C1             ASRS     R1,R0,#+31
   \   0000009A   0x1824             ADDS     R4,R4,R0
   \   0000009C   0x414D             ADCS     R5,R5,R1
    826          	       }
   \   0000009E   0x1C52             ADDS     R2,R2,#+1
   \   000000A0   0xE7EB             B.N      ??CrssCor_5
    827                                      
    828          	   }
    829          	   else
    830          	   {
    831                     for(uint16_t j=0;j<numLen;j++)
   \                     ??CrssCor_4: (+1)
   \   000000A2   0x2200             MOVS     R2,#+0
   \                     ??CrssCor_7: (+1)
   \   000000A4   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000A6   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000A8   0x42B2             CMP      R2,R6
   \   000000AA   0xD210             BCS.N    ??CrssCor_6
    832          	       {
    833          	           Sum += vDataIn1Out[j]*vDataIn2Out[j-i];   
   \   000000AC   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000AE   0xF938 0x0012      LDRSH    R0,[R8, R2, LSL #+1]
   \   000000B2   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000B4   0xFA4F 0xF989      SXTB     R9,R9            ;; SignExt  R9,R9,#+24,#+24
   \   000000B8   0xEBB2 0x0109      SUBS     R1,R2,R9
   \   000000BC   0xF937 0x1011      LDRSH    R1,[R7, R1, LSL #+1]
   \   000000C0   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   000000C4   0x17C1             ASRS     R1,R0,#+31
   \   000000C6   0x1824             ADDS     R4,R4,R0
   \   000000C8   0x414D             ADCS     R5,R5,R1
    834          	       }
   \   000000CA   0x1C52             ADDS     R2,R2,#+1
   \   000000CC   0xE7EA             B.N      ??CrssCor_7
    835          	   }
    836          
    837          	   if (Sum > SumMax) 
   \                     ??CrssCor_6: (+1)
   \   000000CE   0xE9DD 0x0102      LDRD     R0,R1,[SP, #+8]
   \   000000D2   0x42A9             CMP      R1,R5
   \   000000D4   0xDC0F             BGT.N    ??CrssCor_8
   \   000000D6   0xDB01             BLT.N    ??CrssCor_9
   \   000000D8   0x42A0             CMP      R0,R4
   \   000000DA   0xD20C             BCS.N    ??CrssCor_8
    838          	   {
    839          	       SumMax = Sum;  	
   \                     ??CrssCor_9: (+1)
   \   000000DC   0xE9CD 0x4502      STRD     R4,R5,[SP, #+8]
    840          		   
    841          	       idxPos = i;
   \   000000E0   0xF88D 0x9000      STRB     R9,[SP, #+0]
    842          	       *CrssCorVal = (SumMax/numLen);//(uint32_t)((SumMax>>15));
   \   000000E4   0xE9DD 0x0102      LDRD     R0,R1,[SP, #+8]
   \   000000E8   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000EA   0x0032             MOVS     R2,R6
   \   000000EC   0x2300             MOVS     R3,#+0
   \   000000EE   0x.... 0x....      BL       __aeabi_ldivmod
   \   000000F2   0xF8CA 0x0000      STR      R0,[R10, #+0]
    843          	   }
    844          	         
    845              }
   \                     ??CrssCor_8: (+1)
   \   000000F6   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000000FA   0xE7AF             B.N      ??CrssCor_2
    846          #if 1
    847              free(vDataIn1Out);
   \                     ??CrssCor_3: (+1)
   \   000000FC   0x4640             MOV      R0,R8
   \   000000FE   0x.... 0x....      BL       free
    848          	free(vDataIn2Out);
   \   00000102   0x0038             MOVS     R0,R7
   \   00000104   0x.... 0x....      BL       free
    849          #endif
    850          
    851              if((idxPos<-7)||(idxPos>6)) return 0;
   \   00000108   0xF99D 0x0000      LDRSB    R0,[SP, #+0]
   \   0000010C   0xF110 0x0F07      CMN      R0,#+7
   \   00000110   0xDB03             BLT.N    ??CrssCor_10
   \   00000112   0xF99D 0x0000      LDRSB    R0,[SP, #+0]
   \   00000116   0x2807             CMP      R0,#+7
   \   00000118   0xDB01             BLT.N    ??CrssCor_11
   \                     ??CrssCor_10: (+1)
   \   0000011A   0x2000             MOVS     R0,#+0
   \   0000011C   0xE001             B.N      ??CrssCor_12
    852          	
    853              return idxPos;
   \                     ??CrssCor_11: (+1)
   \   0000011E   0xF99D 0x0000      LDRSB    R0,[SP, #+0]
   \                     ??CrssCor_12: (+1)
   \   00000122   0xB005             ADD      SP,SP,#+20
   \   00000124   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    854          }
    855          
    856          
    857          /*****************************************************************************************************
    858          CROSSCORRELATION---------------------------------------------------------------------------------------
    859          
    860          	function	Out = crsscorr_local(Z,X) 
    861          	%this function computes autocorrelation
    862          	 
    863          		N = round(length(X));
    864          		%WIN = hanning(N);
    865          		x = [X;ones(N,1)];
    866          		z = [Z;ones(N,1)];
    867          		
    868          		Out = zeros(N,1);
    869          		
    870          		for index=1:16 %N but optimize to 16  
    871          			Out(index)=sum(z(index:index+N-1).* x(1:N))/(N);
    872          		end
    873          	end
    874          
    875          *******************************************************************************************************/
    876          

   \                                 In section .text, align 2, keep-with-next
    877          void Std_CrssCor(int16_t * vDataIn1, int16_t * vDataIn2, float *Out,uint16_t numLen )
    878          {
   \                     Std_CrssCor: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    879          
    880              for (uint16_t i=0;i<numLen;i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \                     ??Std_CrssCor_0: (+1)
   \   00000004   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000006   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000008   0x429C             CMP      R4,R3
   \   0000000A   0xD227             BCS.N    ??Std_CrssCor_1
    881              {
    882                 Out = 0;
   \   0000000C   0x2500             MOVS     R5,#+0
   \   0000000E   0x002A             MOVS     R2,R5
    883                 for(uint16_t j=0;j<numLen;j++)
   \   00000010   0x2500             MOVS     R5,#+0
   \                     ??Std_CrssCor_2: (+1)
   \   00000012   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000014   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000016   0x429D             CMP      R5,R3
   \   00000018   0xD21E             BCS.N    ??Std_CrssCor_3
    884                 {
    885                     Out[i] += vDataIn1[j+i]*vDataIn2[j]/numLen;   
   \   0000001A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001C   0xFA14 0xF685      UXTAH    R6,R4,R5
   \   00000020   0xF930 0x6016      LDRSH    R6,[R0, R6, LSL #+1]
   \   00000024   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000026   0xF931 0x7015      LDRSH    R7,[R1, R5, LSL #+1]
   \   0000002A   0xFB16 0xF607      SMULBB   R6,R6,R7
   \   0000002E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000030   0xFB96 0xF6F3      SDIV     R6,R6,R3
   \   00000034   0xEE00 0x6A10      VMOV     S0,R6
   \   00000038   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000003C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000003E   0xEB12 0x0684      ADDS     R6,R2,R4, LSL #+2
   \   00000042   0xEDD6 0x0A00      VLDR     S1,[R6, #0]
   \   00000046   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   0000004A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000004C   0xEB12 0x0684      ADDS     R6,R2,R4, LSL #+2
   \   00000050   0xED86 0x0A00      VSTR     S0,[R6, #0]
    886                 }       
   \   00000054   0x1C6D             ADDS     R5,R5,#+1
   \   00000056   0xE7DC             B.N      ??Std_CrssCor_2
    887              }
   \                     ??Std_CrssCor_3: (+1)
   \   00000058   0x1C64             ADDS     R4,R4,#+1
   \   0000005A   0xE7D3             B.N      ??Std_CrssCor_0
    888          
    889          }
   \                     ??Std_CrssCor_1: (+1)
   \   0000005C   0xBCF0             POP      {R4-R7}
   \   0000005E   0x4770             BX       LR               ;; return
    890          
    891          /*********************************************************************************************************
    892          function y=atcorr(X) %this function computes autocorrelation
    893              K = round(length(X)/2);
    894              x = X;
    895              y = zeros(K,1);
    896              for index=1:K
    897                  y(index) = sum(x(index:index+K-1).* x(1:K))/(K);
    898              end
    899          end
    900          **********************************************************************************************************/
    901          

   \                                 In section .text, align 2, keep-with-next
    902           void Std_AutoCorr(int16_t * vDataIn,float *Out, uint16_t numLen )
    903          {
   \                     Std_AutoCorr: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    904              for (uint16_t i=0;i<numLen;i++)
   \   00000002   0x2300             MOVS     R3,#+0
   \                     ??Std_AutoCorr_0: (+1)
   \   00000004   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000006   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000008   0x4293             CMP      R3,R2
   \   0000000A   0xD229             BCS.N    ??Std_AutoCorr_1
    905              {
    906                 Out[i] = 0;
   \   0000000C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000E   0x2400             MOVS     R4,#+0
   \   00000010   0xF841 0x4023      STR      R4,[R1, R3, LSL #+2]
    907                 for(uint16_t j=0;j<numLen;j++)
   \   00000014   0x2400             MOVS     R4,#+0
   \                     ??Std_AutoCorr_2: (+1)
   \   00000016   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000018   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001A   0x4294             CMP      R4,R2
   \   0000001C   0xD21E             BCS.N    ??Std_AutoCorr_3
    908                 {
    909                     Out[i] += vDataIn[j+i]*vDataIn[j]/numLen;   
   \   0000001E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000020   0xFA13 0xF584      UXTAH    R5,R3,R4
   \   00000024   0xF930 0x5015      LDRSH    R5,[R0, R5, LSL #+1]
   \   00000028   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002A   0xF930 0x6014      LDRSH    R6,[R0, R4, LSL #+1]
   \   0000002E   0xFB15 0xF506      SMULBB   R5,R5,R6
   \   00000032   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000034   0xFB95 0xF5F2      SDIV     R5,R5,R2
   \   00000038   0xEE00 0x5A10      VMOV     S0,R5
   \   0000003C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000040   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000042   0xEB11 0x0583      ADDS     R5,R1,R3, LSL #+2
   \   00000046   0xEDD5 0x0A00      VLDR     S1,[R5, #0]
   \   0000004A   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   0000004E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000050   0xEB11 0x0583      ADDS     R5,R1,R3, LSL #+2
   \   00000054   0xED85 0x0A00      VSTR     S0,[R5, #0]
    910                 }       
   \   00000058   0x1C64             ADDS     R4,R4,#+1
   \   0000005A   0xE7DC             B.N      ??Std_AutoCorr_2
    911              }
   \                     ??Std_AutoCorr_3: (+1)
   \   0000005C   0x1C5B             ADDS     R3,R3,#+1
   \   0000005E   0xE7D1             B.N      ??Std_AutoCorr_0
    912          }
   \                     ??Std_AutoCorr_1: (+1)
   \   00000060   0xBC70             POP      {R4-R6}
   \   00000062   0x4770             BX       LR               ;; return
    913          
    914          /**********************************************************************************************************
    915          -----------------------------Covarian Matrix setup---------------------------------------------------------
    916          function Out = CorrMatFn(x)
    917              Out = zeros(length(x),length(x));
    918              for i=1:length(x)
    919                  for j=1:length(x)
    920                     if (j>=i)
    921                         Out(i,j) = x(j - i +1);  
    922                     else
    923                         Out(i,j) = x(i-j + 1);  
    924                     end
    925                  end
    926              end 
    927          end
    928          *************************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    929          void Std_MatCorr(int16_t* vDataIn, float *Out, uint16_t numLen)
    930          {
   \                     Std_MatCorr: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    931              for (uint16_t i=0;i<numLen;i++)
   \   00000002   0x2300             MOVS     R3,#+0
   \                     ??Std_MatCorr_0: (+1)
   \   00000004   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000006   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000008   0x4293             CMP      R3,R2
   \   0000000A   0xD231             BCS.N    ??Std_MatCorr_1
    932              {
    933                 
    934                 for(uint16_t j=0;j<numLen;j++)
   \   0000000C   0x2400             MOVS     R4,#+0
   \                     ??Std_MatCorr_2: (+1)
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000012   0x4294             CMP      R4,R2
   \   00000014   0xD22A             BCS.N    ??Std_MatCorr_3
    935                 {
    936                     if (j>=i)
   \   00000016   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000018   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000001A   0x429C             CMP      R4,R3
   \   0000001C   0xD312             BCC.N    ??Std_MatCorr_4
    937                         Out[i*numLen +j] = vDataIn[j-i]; 
   \   0000001E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000020   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000022   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000024   0xFB02 0x4503      MLA      R5,R2,R3,R4
   \   00000028   0xEB11 0x0585      ADDS     R5,R1,R5, LSL #+2
   \   0000002C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000030   0x1AE6             SUBS     R6,R4,R3
   \   00000032   0xF930 0x6016      LDRSH    R6,[R0, R6, LSL #+1]
   \   00000036   0xEE00 0x6A10      VMOV     S0,R6
   \   0000003A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000003E   0xED85 0x0A00      VSTR     S0,[R5, #0]
   \   00000042   0xE011             B.N      ??Std_MatCorr_5
    938          		   else
    939          		   	   Out[i*numLen +j] = vDataIn[i-j];
   \                     ??Std_MatCorr_4: (+1)
   \   00000044   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000046   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000048   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000004A   0xFB02 0x4503      MLA      R5,R2,R3,R4
   \   0000004E   0xEB11 0x0585      ADDS     R5,R1,R5, LSL #+2
   \   00000052   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000054   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000056   0x1B1E             SUBS     R6,R3,R4
   \   00000058   0xF930 0x6016      LDRSH    R6,[R0, R6, LSL #+1]
   \   0000005C   0xEE00 0x6A10      VMOV     S0,R6
   \   00000060   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000064   0xED85 0x0A00      VSTR     S0,[R5, #0]
    940          		   	
    941                 }       
   \                     ??Std_MatCorr_5: (+1)
   \   00000068   0x1C64             ADDS     R4,R4,#+1
   \   0000006A   0xE7D0             B.N      ??Std_MatCorr_2
    942              }
   \                     ??Std_MatCorr_3: (+1)
   \   0000006C   0x1C5B             ADDS     R3,R3,#+1
   \   0000006E   0xE7C9             B.N      ??Std_MatCorr_0
    943          
    944          }
   \                     ??Std_MatCorr_1: (+1)
   \   00000070   0xBC70             POP      {R4-R6}
   \   00000072   0x4770             BX       LR               ;; return
    945          
    946          
    947          
    948          /************************************************************************************************************
    949          -----------------------------Summing in Fourier Domain-------------------------------------------------------
    950          
    951          *************************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    952          void Delay_Sum_FFT(const Mic_Array_Data * MicData, Mic_Array_Coef_f *coefMics,int16_t * stBufOut, int16_t lenFFT)
    953          {
   \                     Delay_Sum_FFT: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0x000D             MOVS     R5,R1
   \   0000000C   0x0016             MOVS     R6,R2
   \   0000000E   0x001F             MOVS     R7,R3
    954               int32_t         _value,_value1,_value2;
    955              
    956          	for (uint16_t iFrm=0;iFrm<AUDIO_OUT_BUFFER_SIZE/(2*lenFFT);iFrm++)
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??Delay_Sum_FFT_0: (+1)
   \   00000014   0xF44F 0x6080      MOV      R0,#+1024
   \   00000018   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   0000001A   0x0079             LSLS     R1,R7,#+1
   \   0000001C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000020   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000024   0x4581             CMP      R9,R0
   \   00000026   0xF280 0x8104      BGE.W    ??Delay_Sum_FFT_1
    957          	{
    958                    RFFT_INT(MicData->bufMIC1,S1,DataFFT.bufMIC1);  
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??Delay_Sum_FFT_2: (+1)
   \   0000002C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002E   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000030   0x42B8             CMP      R0,R7
   \   00000032   0xDA1A             BGE.N    ??Delay_Sum_FFT_3
   \   00000034   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000038   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0xFB07 0x0109      MLA      R1,R7,R9,R0
   \   00000040   0xF934 0x1011      LDRSH    R1,[R4, R1, LSL #+1]
   \   00000044   0xEE00 0x1A10      VMOV     S0,R1
   \   00000048   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   0000004C   0xEEB8 0x0AC8      VCVT.F32.S32 S0,S16
   \   00000050   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \   00000054   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   0000005C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005E   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000062   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0xE7E0             B.N      ??Delay_Sum_FFT_2
   \                     ??Delay_Sum_FFT_3: (+1)
   \   0000006A   0x2300             MOVS     R3,#+0
   \   0000006C   0x.... 0x....      LDR.W    R2,??DataTable13_2
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable13_3
   \   00000078   0x.... 0x....      BL       arm_rfft_fast_f32
    959                    RFFT_INT(MicData->bufMIC2,S2,DataFFT.bufMIC2);
   \   0000007C   0x2000             MOVS     R0,#+0
   \                     ??Delay_Sum_FFT_4: (+1)
   \   0000007E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000080   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000082   0x42B8             CMP      R0,R7
   \   00000084   0xDA1D             BGE.N    ??Delay_Sum_FFT_5
   \   00000086   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000008A   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   0000008C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008E   0xFB07 0x0109      MLA      R1,R7,R9,R0
   \   00000092   0xEB14 0x0141      ADDS     R1,R4,R1, LSL #+1
   \   00000096   0xF241 0x0214      MOVW     R2,#+4116
   \   0000009A   0x5E51             LDRSH    R1,[R2, R1]
   \   0000009C   0xEE00 0x1A10      VMOV     S0,R1
   \   000000A0   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   000000A4   0xEEB8 0x0AC8      VCVT.F32.S32 S0,S16
   \   000000A8   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \   000000AC   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000B4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B6   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   000000BA   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   000000BE   0x1C40             ADDS     R0,R0,#+1
   \   000000C0   0xE7DD             B.N      ??Delay_Sum_FFT_4
   \                     ??Delay_Sum_FFT_5: (+1)
   \   000000C2   0x2300             MOVS     R3,#+0
   \   000000C4   0x.... 0x....      LDR.W    R2,??DataTable13_4
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable13_5
   \   000000D0   0x.... 0x....      BL       arm_rfft_fast_f32
    960                    RFFT_INT(MicData->bufMIC3,S3,DataFFT.bufMIC3);
   \   000000D4   0x2000             MOVS     R0,#+0
   \                     ??Delay_Sum_FFT_6: (+1)
   \   000000D6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000D8   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   000000DA   0x42B8             CMP      R0,R7
   \   000000DC   0xDA1D             BGE.N    ??Delay_Sum_FFT_7
   \   000000DE   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000E2   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   000000E4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000E6   0xFB07 0x0109      MLA      R1,R7,R9,R0
   \   000000EA   0xEB14 0x0141      ADDS     R1,R4,R1, LSL #+1
   \   000000EE   0xF242 0x0228      MOVW     R2,#+8232
   \   000000F2   0x5E51             LDRSH    R1,[R2, R1]
   \   000000F4   0xEE00 0x1A10      VMOV     S0,R1
   \   000000F8   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   000000FC   0xEEB8 0x0AC8      VCVT.F32.S32 S0,S16
   \   00000100   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \   00000104   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   0000010C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000010E   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000112   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   00000116   0x1C40             ADDS     R0,R0,#+1
   \   00000118   0xE7DD             B.N      ??Delay_Sum_FFT_6
   \                     ??Delay_Sum_FFT_7: (+1)
   \   0000011A   0x2300             MOVS     R3,#+0
   \   0000011C   0x.... 0x....      LDR.W    R2,??DataTable13_6
   \   00000120   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable13_7
   \   00000128   0x.... 0x....      BL       arm_rfft_fast_f32
    961                    RFFT_INT(MicData->bufMIC4,S4,DataFFT.bufMIC4);
   \   0000012C   0x2000             MOVS     R0,#+0
   \                     ??Delay_Sum_FFT_8: (+1)
   \   0000012E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000130   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000132   0x42B8             CMP      R0,R7
   \   00000134   0xDA1D             BGE.N    ??Delay_Sum_FFT_9
   \   00000136   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000013A   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   0000013C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000013E   0xFB07 0x0109      MLA      R1,R7,R9,R0
   \   00000142   0xEB14 0x0141      ADDS     R1,R4,R1, LSL #+1
   \   00000146   0xF243 0x023C      MOVW     R2,#+12348
   \   0000014A   0x5E51             LDRSH    R1,[R2, R1]
   \   0000014C   0xEE00 0x1A10      VMOV     S0,R1
   \   00000150   0xEEB0 0x8A40      VMOV.F32 S16,S0
   \   00000154   0xEEB8 0x0AC8      VCVT.F32.S32 S0,S16
   \   00000158   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \   0000015C   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000160   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000164   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000166   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000016A   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   0000016E   0x1C40             ADDS     R0,R0,#+1
   \   00000170   0xE7DD             B.N      ??Delay_Sum_FFT_8
   \                     ??Delay_Sum_FFT_9: (+1)
   \   00000172   0x2300             MOVS     R3,#+0
   \   00000174   0x.... 0x....      LDR.W    R2,??DataTable13_8
   \   00000178   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   0000017C   0x.... 0x....      LDR.W    R0,??DataTable13_9
   \   00000180   0x.... 0x....      BL       arm_rfft_fast_f32
    962          
    963                    /* Adding in Fourier Domain */			 
    964                    //arm_add_f32((float *)bufferFFT,(float *)bufferFFT_1, (float *)bufferFFTSum,lenFFT*2);
    965                    for (uint16_t ii=0;ii<lenFFT*2;ii++)
   \   00000184   0x2000             MOVS     R0,#+0
   \                     ??Delay_Sum_FFT_10: (+1)
   \   00000186   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000188   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   0000018A   0xEBB0 0x0F47      CMP      R0,R7, LSL #+1
   \   0000018E   0xDA3D             BGE.N    ??Delay_Sum_FFT_11
    966                    {
    967                        bufferFFTSum[ii]= ((DataFFT.bufMIC1[ii]*coefMics->facMIC1) + 
    968                                          (DataFFT.bufMIC2[ii]*coefMics->facMIC2) +
    969                                          (DataFFT.bufMIC3[ii]*coefMics->facMIC3) +
    970                                          (DataFFT.bufMIC4[ii]*coefMics->facMIC4)); 
   \   00000190   0x.... 0x....      LDR.W    R1,??DataTable13_2
   \   00000194   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000196   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000019A   0xED91 0x0A00      VLDR     S0,[R1, #0]
   \   0000019E   0xEDD5 0x0A00      VLDR     S1,[R5, #0]
   \   000001A2   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000001A6   0x.... 0x....      LDR.W    R1,??DataTable13_2
   \   000001AA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001AC   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   000001B0   0xF501 0x5180      ADD      R1,R1,#+4096
   \   000001B4   0x3128             ADDS     R1,R1,#+40
   \   000001B6   0xEDD1 0x0A00      VLDR     S1,[R1, #0]
   \   000001BA   0xED95 0x1A01      VLDR     S2,[R5, #+4]
   \   000001BE   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000001C2   0x.... 0x....      LDR.W    R1,??DataTable13_2
   \   000001C6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001C8   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   000001CC   0xF501 0x5100      ADD      R1,R1,#+8192
   \   000001D0   0x3150             ADDS     R1,R1,#+80
   \   000001D2   0xEDD1 0x0A00      VLDR     S1,[R1, #0]
   \   000001D6   0xED95 0x1A02      VLDR     S2,[R5, #+8]
   \   000001DA   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000001DE   0x.... 0x....      LDR.W    R1,??DataTable13_2
   \   000001E2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001E4   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   000001E8   0xF501 0x5140      ADD      R1,R1,#+12288
   \   000001EC   0x3178             ADDS     R1,R1,#+120
   \   000001EE   0xEDD1 0x0A00      VLDR     S1,[R1, #0]
   \   000001F2   0xED95 0x1A03      VLDR     S2,[R5, #+12]
   \   000001F6   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000001FA   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   000001FE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000200   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000204   0xED81 0x0A00      VSTR     S0,[R1, #0]
    971                    }
   \   00000208   0x1C40             ADDS     R0,R0,#+1
   \   0000020A   0xE7BC             B.N      ??Delay_Sum_FFT_10
    972          
    973                    /* Revert FFT*/
    974                    arm_rfft_fast_f32(&IS, (float *)bufferFFTSum, (float *)&fbufferOut[iFrm*lenFFT],1);
   \                     ??Delay_Sum_FFT_11: (+1)
   \   0000020C   0x2301             MOVS     R3,#+1
   \   0000020E   0x.... 0x....      LDR.W    R0,??DataTable13_24
   \   00000212   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000216   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000218   0xFB07 0xF109      MUL      R1,R7,R9
   \   0000021C   0xEB10 0x0281      ADDS     R2,R0,R1, LSL #+2
   \   00000220   0x.... 0x....      LDR.W    R1,??DataTable13_10
   \   00000224   0x.... 0x....      LDR.W    R0,??DataTable13_11
   \   00000228   0x.... 0x....      BL       arm_rfft_fast_f32
    975                    //arm_rfft_fast_f32(&IS, (float *)bufferFFTSum, (float *)&fbufferOut[iFrm*lenFFT], 1);
    976          	}
   \   0000022C   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000230   0xE6F0             B.N      ??Delay_Sum_FFT_0
    977          
    978                  /*covert from float to integer*/
    979          	for (uint16_t i=0; i<AUDIO_OUT_BUFFER_SIZE;)
   \                     ??Delay_Sum_FFT_1: (+1)
   \   00000232   0x2000             MOVS     R0,#+0
   \                     ??Delay_Sum_FFT_12: (+1)
   \   00000234   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000236   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000023A   0xDA1E             BGE.N    ??Delay_Sum_FFT_13
    980          	{
    981          	    _value1 = (int32_t)fbufferOut[(i>>1)];
   \   0000023C   0x.... 0x....      LDR.W    R1,??DataTable13_24
   \   00000240   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000242   0x1042             ASRS     R2,R0,#+1
   \   00000244   0xEB11 0x0182      ADDS     R1,R1,R2, LSL #+2
   \   00000248   0xED91 0x0A00      VLDR     S0,[R1, #0]
   \   0000024C   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   00000250   0xEEF0 0x8A40      VMOV.F32 S17,S0
    982          		_value2 = MicData->bufMIC2[i>>1];
   \   00000254   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000256   0x1041             ASRS     R1,R0,#+1
   \   00000258   0xEB14 0x0141      ADDS     R1,R4,R1, LSL #+1
   \   0000025C   0xF241 0x0214      MOVW     R2,#+4116
   \   00000260   0x5E51             LDRSH    R1,[R2, R1]
   \   00000262   0x4688             MOV      R8,R1
    983          	    stBufOut[i++] = (int16_t)_value1;
   \   00000264   0xEE18 0x1A90      VMOV     R1,S17
   \   00000268   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000026A   0xF826 0x1010      STRH     R1,[R6, R0, LSL #+1]
   \   0000026E   0x1C40             ADDS     R0,R0,#+1
    984          		stBufOut[i++] = (int16_t)_value2;
   \   00000270   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000272   0xF826 0x8010      STRH     R8,[R6, R0, LSL #+1]
   \   00000276   0x1C40             ADDS     R0,R0,#+1
   \   00000278   0xE7DC             B.N      ??Delay_Sum_FFT_12
    985          	}
    986          	
    987          	//arm_float_to_q15((float32_t *)fbufferOut,(q15_t *)stBufOut,AUDIO_OUT_BUFFER_SIZE); 
    988          	
    989          }
   \                     ??Delay_Sum_FFT_13: (+1)
   \   0000027A   0xECBD 0x8B02      VPOP     {D8}
   \   0000027E   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    990          /******************************************************************************/
    991          /*                  Factor Update                                             */ 
    992          /******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    993          void FactorUpd(Mic_Array_Coef_f * facMic)
    994          {
    995          	facMic->facMIC1 = 0.25;
   \                     FactorUpd: (+1)
   \   00000000   0xF05F 0x517A      MOVS     R1,#+1048576000
   \   00000004   0x6001             STR      R1,[R0, #+0]
    996          	facMic->facMIC2 = 0.25;
   \   00000006   0xF05F 0x517A      MOVS     R1,#+1048576000
   \   0000000A   0x6041             STR      R1,[R0, #+4]
    997          	facMic->facMIC3 = 0.25;
   \   0000000C   0xF05F 0x517A      MOVS     R1,#+1048576000
   \   00000010   0x6081             STR      R1,[R0, #+8]
    998          	facMic->facMIC4 = 0.25;
   \   00000012   0xF05F 0x517A      MOVS     R1,#+1048576000
   \   00000016   0x60C1             STR      R1,[R0, #+12]
    999          }
   \   00000018   0x4770             BX       LR               ;; return
   1000          
   1001          
   1002          

   \                                 In section .text, align 2, keep-with-next
   1003          void FFT_SUM(int16_t * stBuf1, int16_t * stBuf2,float *fBufOut, uint16_t lenFFT)
   1004          {
   1005          #if 0 //using self-writing DFT function 
   1006             int32_t         value;
   1007          
   1008             /* covert from int to float */
   1009             for(uint16_t j=0;j<lenFFT;j++)
   1010             {
   1011                value = (int32_t)stBuf1[j];
   1012             	  fbuffer[j]=(float)value;
   1013             }	
   1014             DFT((float *)fbuffer,(float *)bufferFFT,lenFFT);
   1015          
   1016          	/* covert from int to float */
   1017          	for(uint16_t j=0;j<lenFFT;j++)
   1018          	{
   1019          	   value = (int32_t)stBuf2[j];
   1020          	   fbuffer[j]=(float)value;
   1021          	}	 
   1022          	DFT((float *)fbuffer,(float *)bufferFFT_1,lenFFT);
   1023          
   1024             /* Adding in Fourier Domain */			 
   1025             for(uint16_t i=0;i<lenFFT;i++)
   1026             {
   1027                  bufferFFTSum[i] = bufferFFT[i]+bufferFFT_1[i];
   1028             }
   1029          
   1030             rDFT(lenFFT,1,bufferFFTSum,fbuffer);
   1031          #endif
   1032          }
   \                     FFT_SUM: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1033          

   \                                 In section .text, align 2, keep-with-next
   1034          int32_t EnergyNoiseCalc(uint16_t numLen)
   1035          {
   \                     EnergyNoiseCalc: (+1)
   \   00000000   0xB5D0             PUSH     {R4,R6,R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1036          	int64_t SumError;
   1037                  SumError=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x0006             MOVS     R6,R0
   \   0000000A   0x000F             MOVS     R7,R1
   1038          	/* noise energy */
   1039          	for(uint16_t j=0;j<numLen;j++)
   \   0000000C   0x2200             MOVS     R2,#+0
   \                     ??EnergyNoiseCalc_0: (+1)
   \   0000000E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000010   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000012   0x42A2             CMP      R2,R4
   \   00000014   0xD210             BCS.N    ??EnergyNoiseCalc_1
   1040          	{
   1041          		//EnergySignal += pRef[i] * pRef[i];
   1042          		//EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]); 
   1043          		SumError += NoiseBG[j]*NoiseBG[j];   
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable13_12
   \   0000001A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001C   0xF930 0x0012      LDRSH    R0,[R0, R2, LSL #+1]
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable13_12
   \   00000024   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000026   0xF931 0x1012      LDRSH    R1,[R1, R2, LSL #+1]
   \   0000002A   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   0000002E   0x17C1             ASRS     R1,R0,#+31
   \   00000030   0x1836             ADDS     R6,R6,R0
   \   00000032   0x414F             ADCS     R7,R7,R1
   1044          	}
   \   00000034   0x1C52             ADDS     R2,R2,#+1
   \   00000036   0xE7EA             B.N      ??EnergyNoiseCalc_0
   1045          
   1046          	EnergyError = SumError/numLen;
   \                     ??EnergyNoiseCalc_1: (+1)
   \   00000038   0x0030             MOVS     R0,R6
   \   0000003A   0x0039             MOVS     R1,R7
   \   0000003C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000003E   0x0022             MOVS     R2,R4
   \   00000040   0x2300             MOVS     R3,#+0
   \   00000042   0x.... 0x....      BL       __aeabi_ldivmod
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable13_25
   \   0000004A   0x6008             STR      R0,[R1, #+0]
   1047          
   1048          	return EnergyError;
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable13_25
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xBDD0             POP      {R4,R6,R7,PC}    ;; return
   1049          
   1050          }
   1051          
   1052          /* Generalized Cross Correlation with Phase Transform (GCC-PHAT)  */
   1053          /* Input: data from 2 microphones in time domain, length of data       */
   1054          /* Output: Generlize Cross Correlation value                                    */

   \                                 In section .text, align 4, keep-with-next
   1055          int16_t GCC_PHAT(int16_t * vDataIn1, int16_t * vDataIn2, uint16_t numLen, float * CrssCorVal )
   1056          {
   \                     GCC_PHAT: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x000D             MOVS     R5,R1
   \   0000000E   0x0016             MOVS     R6,R2
   \   00000010   0x001F             MOVS     R7,R3
   1057              uint32_t idxArgMax;
   1058              float ValMax;
   1059          
   1060          	/* Fourier Transform for Data In 1 */
   1061          	RFFT_GCC(vDataIn1,S,vDataIn1_FFT,numLen);
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??GCC_PHAT_0: (+1)
   \   00000014   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000016   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000018   0x42B0             CMP      R0,R6
   \   0000001A   0xD20F             BCS.N    ??GCC_PHAT_1
   \   0000001C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001E   0xF934 0x1010      LDRSH    R1,[R4, R0, LSL #+1]
   \   00000022   0xEE00 0x1A10      VMOV     S0,R1
   \   00000026   0xEEBA 0x0A48      VCVT.F32.S16 S0,S0,#+0
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   0000002E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000030   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000034   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0xE7EB             B.N      ??GCC_PHAT_0
   \                     ??GCC_PHAT_1: (+1)
   \   0000003C   0x2300             MOVS     R3,#+0
   \   0000003E   0x.... 0x....      LDR.W    R2,??DataTable13_13
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable13_14
   \   0000004A   0x.... 0x....      BL       arm_rfft_fast_f32
   1062          	
   1063              /* Fourier Trnasform for Data In 2 */
   1064          	RFFT_GCC(vDataIn2,S,vDataIn2_FFT,numLen);
   \   0000004E   0x2000             MOVS     R0,#+0
   \                     ??GCC_PHAT_2: (+1)
   \   00000050   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000052   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000054   0x42B0             CMP      R0,R6
   \   00000056   0xD20F             BCS.N    ??GCC_PHAT_3
   \   00000058   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005A   0xF935 0x1010      LDRSH    R1,[R5, R0, LSL #+1]
   \   0000005E   0xEE00 0x1A10      VMOV     S0,R1
   \   00000062   0xEEBA 0x0A48      VCVT.F32.S16 S0,S0,#+0
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   0000006A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006C   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000070   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   00000074   0x1C40             ADDS     R0,R0,#+1
   \   00000076   0xE7EB             B.N      ??GCC_PHAT_2
   \                     ??GCC_PHAT_3: (+1)
   \   00000078   0x2300             MOVS     R3,#+0
   \   0000007A   0x.... 0x....      LDR.W    R2,??DataTable13_15
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable13_14
   \   00000086   0x.... 0x....      BL       arm_rfft_fast_f32
   1065          
   1066          	/* Complex conjugate for Datat 2 FFT */
   1067          	arm_cmplx_conj_f32(vDataIn2_FFT,vDataIn2_FFT_CJ, numLen);
   \   0000008A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000008C   0x0032             MOVS     R2,R6
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable13_16
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable13_15
   \   00000096   0x.... 0x....      BL       arm_cmplx_conj_f32
   1068              
   1069          	/* cross spectra  */
   1070          	arm_cmplx_mult_cmplx_f32(vDataIn1_FFT,vDataIn2_FFT_CJ,vDataIn2_FFT,numLen); /* vDataIn2_FFT is  using at the destination output to save the memory */
   \   0000009A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000009C   0x0033             MOVS     R3,R6
   \   0000009E   0x.... 0x....      LDR.W    R2,??DataTable13_15
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable13_16
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable13_13
   \   000000AA   0x.... 0x....      BL       arm_cmplx_mult_cmplx_f32
   1071          
   1072              /* magnitude */
   1073          	arm_cmplx_mag_f32(vDataIn2_FFT,vDataIn1_FFT, numLen); /* vDataIn1_FFT is  using at the destination output to save the memory */
   \   000000AE   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000B0   0x0032             MOVS     R2,R6
   \   000000B2   0x....             LDR.N    R1,??DataTable13_13
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable13_15
   \   000000B8   0x.... 0x....      BL       arm_cmplx_mag_f32
   1074          
   1075          	/* Output normalize */
   1076          	for (uint16_t i=0; i<2*numLen;i++)
   \   000000BC   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??GCC_PHAT_4: (+1)
   \   000000C0   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000C4   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000C6   0xEBB8 0x0F46      CMP      R8,R6, LSL #+1
   \   000000CA   0xDA38             BGE.N    ??GCC_PHAT_5
   1077          	{
   1078                 vDataIn_FFT[i] = vDataIn2_FFT[i]/MAX(vDataIn1_FFT[i%2],0.000001);
   \   000000CC   0x....             LDR.N    R0,??DataTable13_13
   \   000000CE   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000D2   0x2102             MOVS     R1,#+2
   \   000000D4   0xFB98 0xF2F1      SDIV     R2,R8,R1
   \   000000D8   0xFB02 0x8211      MLS      R2,R2,R1,R8
   \   000000DC   0xEB10 0x0082      ADDS     R0,R0,R2, LSL #+2
   \   000000E0   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000E4   0xEDDF 0x....      VLDR.W   S1,??DataTable12_5  ;; 0x358637be
   \   000000E8   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   000000EC   0xEEF1 0xFA10      FMSTAT   
   \   000000F0   0xDB0E             BLT.N    ??GCC_PHAT_6
   \   000000F2   0x....             LDR.N    R0,??DataTable13_13
   \   000000F4   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000F8   0x2102             MOVS     R1,#+2
   \   000000FA   0xFB98 0xF2F1      SDIV     R2,R8,R1
   \   000000FE   0xFB02 0x8211      MLS      R2,R2,R1,R8
   \   00000102   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \   00000106   0x.... 0x....      BL       __aeabi_f2d
   \   0000010A   0xEC41 0x0B18      VMOV     D8,R0,R1
   \   0000010E   0xE001             B.N      ??GCC_PHAT_7
   \                     ??GCC_PHAT_6: (+1)
   \   00000110   0xED9F 0x....      VLDR.W   D8,??DataTable12_6
   \                     ??GCC_PHAT_7: (+1)
   \   00000114   0x....             LDR.N    R0,??DataTable13_15
   \   00000116   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000011A   0xF850 0x0028      LDR      R0,[R0, R8, LSL #+2]
   \   0000011E   0x.... 0x....      BL       __aeabi_f2d
   \   00000122   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   00000126   0x.... 0x....      BL       __aeabi_ddiv
   \   0000012A   0x.... 0x....      BL       __aeabi_d2f
   \   0000012E   0x....             LDR.N    R1,??DataTable13_17
   \   00000130   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000134   0xF841 0x0028      STR      R0,[R1, R8, LSL #+2]
   1079          	}
   \   00000138   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000013C   0xE7C0             B.N      ??GCC_PHAT_4
   1080          
   1081          	/* Invert FFT */
   1082              arm_rfft_fast_f32(&S, (float *)vDataIn_FFT, (float *)vDataIn,1);
   \                     ??GCC_PHAT_5: (+1)
   \   0000013E   0x2301             MOVS     R3,#+1
   \   00000140   0x....             LDR.N    R2,??DataTable13_18
   \   00000142   0x....             LDR.N    R1,??DataTable13_17
   \   00000144   0x....             LDR.N    R0,??DataTable13_14
   \   00000146   0x.... 0x....      BL       arm_rfft_fast_f32
   1083          
   1084          	/*Get Real component */
   1085          	for (uint16_t i=0; i<2*numLen;i=i+2)
   \   0000014A   0x2000             MOVS     R0,#+0
   \                     ??GCC_PHAT_8: (+1)
   \   0000014C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000014E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000150   0xEBB0 0x0F46      CMP      R0,R6, LSL #+1
   \   00000154   0xDA0E             BGE.N    ??GCC_PHAT_9
   1086          	{
   1087                vDataIn[i%2] = vDataIn[i];
   \   00000156   0x....             LDR.N    R1,??DataTable13_18
   \   00000158   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000015A   0x2202             MOVS     R2,#+2
   \   0000015C   0xFB90 0xF3F2      SDIV     R3,R0,R2
   \   00000160   0xFB03 0x0312      MLS      R3,R3,R2,R0
   \   00000164   0x....             LDR.N    R2,??DataTable13_18
   \   00000166   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000168   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000016C   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   1088          	}    
   \   00000170   0x1C80             ADDS     R0,R0,#+2
   \   00000172   0xE7EB             B.N      ??GCC_PHAT_8
   1089              FFTShift(vDataIn,vDataOut,numLen); 
   \                     ??GCC_PHAT_9: (+1)
   \   00000174   0x0032             MOVS     R2,R6
   \   00000176   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000178   0x....             LDR.N    R1,??DataTable13_26
   \   0000017A   0x....             LDR.N    R0,??DataTable13_18
   \   0000017C   0x.... 0x....      BL       FFTShift
   1090          	
   1091              arm_max_f32(vDataOut,numLen,&ValMax,&idxArgMax);
   \   00000180   0x466B             MOV      R3,SP
   \   00000182   0xAA01             ADD      R2,SP,#+4
   \   00000184   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000186   0x0031             MOVS     R1,R6
   \   00000188   0x....             LDR.N    R0,??DataTable13_26
   \   0000018A   0x.... 0x....      BL       arm_max_f32
   1092          	
   1093          	if (((int16_t)(idxArgMax-numLen/2)>-8)&&((int16_t)(idxArgMax-numLen/2)<8))
   \   0000018E   0x9800             LDR      R0,[SP, #+0]
   \   00000190   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000192   0x2102             MOVS     R1,#+2
   \   00000194   0xFB96 0xF1F1      SDIV     R1,R6,R1
   \   00000198   0x1A40             SUBS     R0,R0,R1
   \   0000019A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000019C   0xF110 0x0F07      CMN      R0,#+7
   \   000001A0   0xDB12             BLT.N    ??GCC_PHAT_10
   \   000001A2   0x9800             LDR      R0,[SP, #+0]
   \   000001A4   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000001A6   0x2102             MOVS     R1,#+2
   \   000001A8   0xFB96 0xF1F1      SDIV     R1,R6,R1
   \   000001AC   0x1A40             SUBS     R0,R0,R1
   \   000001AE   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000001B0   0x2808             CMP      R0,#+8
   \   000001B2   0xDA09             BGE.N    ??GCC_PHAT_10
   1094          	{
   1095          		*CrssCorVal = ValMax;
   \   000001B4   0x9801             LDR      R0,[SP, #+4]
   \   000001B6   0x6038             STR      R0,[R7, #+0]
   1096          	    return (int16_t)(idxArgMax-numLen/2);
   \   000001B8   0x9800             LDR      R0,[SP, #+0]
   \   000001BA   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000001BC   0x2102             MOVS     R1,#+2
   \   000001BE   0xFB96 0xF1F1      SDIV     R1,R6,R1
   \   000001C2   0x1A40             SUBS     R0,R0,R1
   \   000001C4   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000001C6   0xE002             B.N      ??GCC_PHAT_11
   1097          	}
   1098          	else
   1099          	{
   1100          		*CrssCorVal = 0;
   \                     ??GCC_PHAT_10: (+1)
   \   000001C8   0x2000             MOVS     R0,#+0
   \   000001CA   0x6038             STR      R0,[R7, #+0]
   1101          		return 255;
   \   000001CC   0x20FF             MOVS     R0,#+255
   \                     ??GCC_PHAT_11: (+1)
   \   000001CE   0xB002             ADD      SP,SP,#+8
   \   000001D0   0xECBD 0x8B02      VPOP     {D8}
   \   000001D4   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1102          	}
   1103          }
   1104          
   1105          /** COPY from Wooters
   1106           * Shift the output of an FFT.
   1107           *
   1108           * The index of the mid-point in the output will be located at: ceil(_N/2)
   1109           * @ingroup GCC
   1110           */

   \                                 In section .text, align 2, keep-with-next
   1111          void FFTShift(const float * const in, float * const out, const uint16_t N)
   1112          {
   \                     FFTShift: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   1113            /* mid-point of out[] will be located at index ceil(N/2) */
   1114            uint16_t xx = (uint16_t) floor((int16_t) N/2.0);
   \   0000000A   0x0030             MOVS     R0,R6
   \   0000000C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000000E   0x.... 0x....      BL       __aeabi_i2d
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0xF05F 0x4380      MOVS     R3,#+1073741824
   \   00000018   0x.... 0x....      BL       __aeabi_ddiv
   \   0000001C   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   00000020   0x.... 0x....      BL       floor
   \   00000024   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   00000028   0x.... 0x....      BL       __aeabi_d2iz
   \   0000002C   0x0007             MOVS     R7,R0
   1115          
   1116            /* Copy last half of in[] to first half of out[] */
   1117            memcpy(out,&in[xx],sizeof(float)*(N-xx));
   \   0000002E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000030   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000032   0x1BF0             SUBS     R0,R6,R7
   \   00000034   0xEA5F 0x0880      LSLS     R8,R0,#+2
   \   00000038   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000003A   0xEB14 0x0987      ADDS     R9,R4,R7, LSL #+2
   \   0000003E   0x4642             MOV      R2,R8
   \   00000040   0x4649             MOV      R1,R9
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0x.... 0x....      BL       __aeabi_memcpy
   1118          
   1119            /* Copy first half of in[] to end of out[] */
   1120            memcpy(&out[N-xx],in,sizeof(float)*xx);
   \   00000048   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000004A   0xEA5F 0x0A87      LSLS     R10,R7,#+2
   \   0000004E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000050   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000052   0x1BF0             SUBS     R0,R6,R7
   \   00000054   0xEB15 0x0B80      ADDS     R11,R5,R0, LSL #+2
   \   00000058   0x4652             MOV      R2,R10
   \   0000005A   0x0021             MOVS     R1,R4
   \   0000005C   0x4658             MOV      R0,R11
   \   0000005E   0x.... 0x....      BL       __aeabi_memcpy
   1121          }
   \   00000062   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   1122          
   1123          
   1124          /** COPY from Wooters
   1125           * Compute the entropy of the given vector of values. This actually
   1126           * returns a "normalized" entropy value in which the entropy of the
   1127           * distribution is divided by the maximum entropy possible for that
   1128           * distribution. That away, the return value is always between 0.0 and
   1129           * 1.0.
   1130           *
   1131           * @param a Pointer to an array of doubles representing the distribution.
   1132           * @param N The length of the array \a a[]
   1133           * @param clip Since negative values in the input array can cause
   1134           * problems when computing the entropy, we need to decide how to
   1135           * handle them. If \a clip is true, then negative values in \a a[] will
   1136           * be ignored. If it is false, then all values in \a a[] will be squared
   1137           * and the entropy will be computed over the a^2.
   1138           *
   1139           */

   \                                 In section .text, align 4, keep-with-next
   1140          float MD_entropy(const float* const a, uint16_t N, const uint8_t clip) 
   1141          {
   \                     MD_entropy: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0xED2D 0x8B06      VPUSH    {D8-D10}
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0x000D             MOVS     R5,R1
   \   0000000C   0x0016             MOVS     R6,R2
   1142            if (N <= 1) return 0.0;
   \   0000000E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000010   0x2D02             CMP      R5,#+2
   \   00000012   0xDA02             BGE.N    ??MD_entropy_0
   \   00000014   0xED9F 0x....      VLDR.W   S0,??DataTable13  ;; 0x0
   \   00000018   0xE0C7             B.N      ??MD_entropy_1
   1143          
   1144            float maxe = -log2(1.0/(float)N); /* max entropy */
   \                     ??MD_entropy_0: (+1)
   \   0000001A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001C   0xEE00 0x5A10      VMOV     S0,R5
   \   00000020   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000024   0xEE10 0x0A10      VMOV     R0,S0
   \   00000028   0x.... 0x....      BL       __aeabi_f2d
   \   0000002C   0x0002             MOVS     R2,R0
   \   0000002E   0x000B             MOVS     R3,R1
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x....             LDR.N    R1,??DataTable13_19  ;; 0x3ff00000
   \   00000034   0x.... 0x....      BL       __aeabi_ddiv
   \   00000038   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   0000003C   0x.... 0x....      BL       log2
   \   00000040   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   00000044   0xF091 0x4100      EORS     R1,R1,#0x80000000
   \   00000048   0x.... 0x....      BL       __aeabi_d2f
   \   0000004C   0xEE08 0x0A10      VMOV     S16,R0
   1145            float ent = 0.0;
   \   00000050   0xEDDF 0x....      VLDR.W   S17,??DataTable13  ;; 0x0
   1146            float tot = 0.0;
   \   00000054   0xEDDF 0x....      VLDR.W   S19,??DataTable13  ;; 0x0
   1147            uint16_t i;
   1148            float p;
   1149          
   1150            if (clip) 
   \   00000058   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005A   0x2E00             CMP      R6,#+0
   \   0000005C   0xD027             BEQ.N    ??MD_entropy_2
   1151            {
   1152              for (i=0;i<N;i++) tot += (a[i]<0.0) ? 0.0 : a[i];
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x0007             MOVS     R7,R0
   \                     ??MD_entropy_3: (+1)
   \   00000062   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000064   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000066   0x42AF             CMP      R7,R5
   \   00000068   0xD235             BCS.N    ??MD_entropy_4
   \   0000006A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000006C   0xEB14 0x0087      ADDS     R0,R4,R7, LSL #+2
   \   00000070   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000074   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00000078   0xEEF1 0xFA10      FMSTAT   
   \   0000007C   0xD502             BPL.N    ??MD_entropy_5
   \   0000007E   0xED9F 0x....      VLDR.W   D10,??DataTable13_27
   \   00000082   0xE006             B.N      ??MD_entropy_6
   \                     ??MD_entropy_5: (+1)
   \   00000084   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000086   0xF854 0x0027      LDR      R0,[R4, R7, LSL #+2]
   \   0000008A   0x.... 0x....      BL       __aeabi_f2d
   \   0000008E   0xEC41 0x0B1A      VMOV     D10,R0,R1
   \                     ??MD_entropy_6: (+1)
   \   00000092   0xEE19 0x0A90      VMOV     R0,S19
   \   00000096   0x.... 0x....      BL       __aeabi_f2d
   \   0000009A   0xEC53 0x2B1A      VMOV     R2,R3,D10
   \   0000009E   0x.... 0x....      BL       __aeabi_dadd
   \   000000A2   0x.... 0x....      BL       __aeabi_d2f
   \   000000A6   0xEE09 0x0A90      VMOV     S19,R0
   \   000000AA   0x1C7F             ADDS     R7,R7,#+1
   \   000000AC   0xE7D9             B.N      ??MD_entropy_3
   1153            } 
   1154            else
   1155            {
   1156              for (i=0;i<N;i++) tot += a[i]*a[i]; /* use a^2 */
   \                     ??MD_entropy_2: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x0007             MOVS     R7,R0
   \                     ??MD_entropy_7: (+1)
   \   000000B2   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000B4   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B6   0x42AF             CMP      R7,R5
   \   000000B8   0xD20D             BCS.N    ??MD_entropy_4
   \   000000BA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000BC   0xEB14 0x0087      ADDS     R0,R4,R7, LSL #+2
   \   000000C0   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000C4   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000C6   0xEB14 0x0087      ADDS     R0,R4,R7, LSL #+2
   \   000000CA   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   000000CE   0xEE40 0x9A20      VMLA.F32 S19,S0,S1
   \   000000D2   0x1C7F             ADDS     R7,R7,#+1
   \   000000D4   0xE7ED             B.N      ??MD_entropy_7
   1157            }
   1158          
   1159            if (tot==0.0) return maxe;
   \                     ??MD_entropy_4: (+1)
   \   000000D6   0xEEF5 0x9A40      VCMP.F32 S19,#0.0
   \   000000DA   0xEEF1 0xFA10      FMSTAT   
   \   000000DE   0xD102             BNE.N    ??MD_entropy_8
   \   000000E0   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   000000E4   0xE061             B.N      ??MD_entropy_1
   1160          
   1161            for (i=0;i<N;i++)
   \                     ??MD_entropy_8: (+1)
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x0007             MOVS     R7,R0
   \                     ??MD_entropy_9: (+1)
   \   000000EA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000EC   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000EE   0x42AF             CMP      R7,R5
   \   000000F0   0xD257             BCS.N    ??MD_entropy_10
   1162            {
   1163              if (a[i] == 0.0) continue;
   \   000000F2   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000F4   0xEB14 0x0087      ADDS     R0,R4,R7, LSL #+2
   \   000000F8   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000FC   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00000100   0xEEF1 0xFA10      FMSTAT   
   \   00000104   0xD04B             BEQ.N    ??MD_entropy_11
   1164              if (clip && (a[i] < 0.0)) continue;
   \                     ??MD_entropy_12: (+1)
   \   00000106   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000108   0x2E00             CMP      R6,#+0
   \   0000010A   0xD009             BEQ.N    ??MD_entropy_13
   \   0000010C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000010E   0xEB14 0x0087      ADDS     R0,R4,R7, LSL #+2
   \   00000112   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000116   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   0000011A   0xEEF1 0xFA10      FMSTAT   
   \   0000011E   0xD43E             BMI.N    ??MD_entropy_11
   1165          
   1166              if (clip)
   \                     ??MD_entropy_13: (+1)
   \   00000120   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000122   0x2E00             CMP      R6,#+0
   \   00000124   0xD009             BEQ.N    ??MD_entropy_14
   1167                p = a[i]/tot; /* prob of a[i] */
   \   00000126   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000128   0xEB14 0x0087      ADDS     R0,R4,R7, LSL #+2
   \   0000012C   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000130   0xEE80 0x0A29      VDIV.F32 S0,S0,S19
   \   00000134   0xEEB0 0x9A40      VMOV.F32 S18,S0
   \   00000138   0xE00F             B.N      ??MD_entropy_15
   1168              else
   1169                p = (a[i]*a[i])/tot; /* no clipping, so prob a[i]^2 */
   \                     ??MD_entropy_14: (+1)
   \   0000013A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000013C   0xEB14 0x0087      ADDS     R0,R4,R7, LSL #+2
   \   00000140   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000144   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000146   0xEB14 0x0087      ADDS     R0,R4,R7, LSL #+2
   \   0000014A   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   0000014E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000152   0xEE80 0x0A29      VDIV.F32 S0,S0,S19
   \   00000156   0xEEB0 0x9A40      VMOV.F32 S18,S0
   1170          
   1171              ent += p * log2(p);
   \                     ??MD_entropy_15: (+1)
   \   0000015A   0xEE18 0x0A90      VMOV     R0,S17
   \   0000015E   0x.... 0x....      BL       __aeabi_f2d
   \   00000162   0x4682             MOV      R10,R0
   \   00000164   0x468B             MOV      R11,R1
   \   00000166   0xEE19 0x0A10      VMOV     R0,S18
   \   0000016A   0x.... 0x....      BL       __aeabi_f2d
   \   0000016E   0x4680             MOV      R8,R0
   \   00000170   0x4689             MOV      R9,R1
   \   00000172   0xEE19 0x0A10      VMOV     R0,S18
   \   00000176   0x.... 0x....      BL       __aeabi_f2d
   \   0000017A   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   0000017E   0x.... 0x....      BL       log2
   \   00000182   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   00000186   0x4642             MOV      R2,R8
   \   00000188   0x464B             MOV      R3,R9
   \   0000018A   0x.... 0x....      BL       __aeabi_dmul
   \   0000018E   0x4652             MOV      R2,R10
   \   00000190   0x465B             MOV      R3,R11
   \   00000192   0x.... 0x....      BL       __aeabi_dadd
   \   00000196   0x.... 0x....      BL       __aeabi_d2f
   \   0000019A   0xEE08 0x0A90      VMOV     S17,R0
   1172            }
   \                     ??MD_entropy_11: (+1)
   \   0000019E   0x1C7F             ADDS     R7,R7,#+1
   \   000001A0   0xE7A3             B.N      ??MD_entropy_9
   1173          
   1174            return -ent/maxe;
   \                     ??MD_entropy_10: (+1)
   \   000001A2   0xEEB1 0x0A68      VNEG.F32 S0,S17
   \   000001A6   0xEE80 0x0A08      VDIV.F32 S0,S0,S16
   \                     ??MD_entropy_1: (+1)
   \   000001AA   0xECBD 0x8B06      VPOP     {D8-D10}
   \   000001AE   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   1175          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x43480000         DC32     0x43480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0xC2C80000         DC32     0xc2c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x5A7ED197         DC32     0x5a7ed197

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x401921FB         DC32     0x401921fb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     ??Out_Old

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     ??InOld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     ??InOld1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     ??Out_Old_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0xFFFFB486         DC32     0xffffb486

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     ??Out_Old1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     ??InOld_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     ??InOld1_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     ??Out_Old_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     ??Out_Old1_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     ??Data_Old

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     ??Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     ??OutRing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x408FF800         DC32     0x408ff800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x358637BE         DC32     0x358637be

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0xA0B5ED8D         DC32     0xA0B5ED8D,0x3EB0C6F7
   \              0x3EB0C6F7   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x........         DC32     ??iRing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     fbuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     DataFFT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x........         DC32     `S1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x........         DC32     DataFFT+0x1028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x........         DC32     `S2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x........         DC32     DataFFT+0x2050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x........         DC32     `S3`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x........         DC32     DataFFT+0x3078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x........         DC32     `S4`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0x........         DC32     bufferFFTSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   0x........         DC32     IS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \   00000000   0x........         DC32     NoiseBG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \   00000000   0x........         DC32     vDataIn1_FFT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \   00000000   0x........         DC32     S

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \   00000000   0x........         DC32     vDataIn2_FFT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_16:
   \   00000000   0x........         DC32     vDataIn2_FFT_CJ

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_17:
   \   00000000   0x........         DC32     vDataIn_FFT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_18:
   \   00000000   0x........         DC32     vDataIn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_19:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_20:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_21:
   \   00000000   0x........         DC32     ??Initial_Array

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_22:
   \   00000000   0xFFFF8000         DC32     0xffff8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_23:
   \   00000000   0x400921FB         DC32     0x400921fb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_24:
   \   00000000   0x........         DC32     fbufferOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_25:
   \   00000000   0x........         DC32     EnergyError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_26:
   \   00000000   0x........         DC32     vDataOut

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_27:
   \   00000000   0x00000000         DC32     0x0,0x0
   \              0x00000000   
   1176          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ADD_S16
      56   CrssCor
        56   -> free
        56   -> malloc
        56 __aeabi_ldivmod
      32   DFT
        32   -> __aeabi_d2f
        32   -> __aeabi_ddiv
        32   -> __aeabi_dmul
        32   -> __aeabi_f2d
        32   -> arm_cos_f32
        32   -> arm_sin_f32
     544   Decimation
       544   -> __aeabi_memcpy4
      40   Delay_Sum_FFT
        40   -> arm_rfft_fast_f32
      16   EnergyNoiseCalc
        16 __aeabi_ldivmod
      40   FFTShift
        40   -> __aeabi_d2iz
        40   -> __aeabi_ddiv
        40   -> __aeabi_i2d
        40   -> __aeabi_memcpy
        40   -> floor
       0   FFT_SUM
       0   FactorUpd
      40   GCC_PHAT
        40   -> FFTShift
        40   -> __aeabi_d2f
        40   -> __aeabi_ddiv
        40   -> __aeabi_f2d
        40   -> arm_cmplx_conj_f32
        40   -> arm_cmplx_mag_f32
        40   -> arm_cmplx_mult_cmplx_f32
        40   -> arm_max_f32
        40   -> arm_rfft_fast_f32
      32   LowPass
        32   -> ADD_S16
        32   -> SUB_S16
      16   LowPass2ndOder
      16   LowPass2ndOder_1
      32   LowPassIIR
        32   -> ADD_S16
        32   -> SUB_S16
      64   MD_entropy
        64   -> __aeabi_d2f
        64   -> __aeabi_dadd
        64   -> __aeabi_ddiv
        64   -> __aeabi_dmul
        64   -> __aeabi_f2d
        64   -> log2
      12   PCM2PDM
      40   PDM2PCM
        40   -> ADD_S16
       8   Precalculation
       0   SUB_S16
      12   Std_AutoCorr
      16   Std_CrssCor
      12   Std_MatCorr
      32   Window
        32   -> __aeabi_d2f
        32   -> __aeabi_ddiv
        32   -> __aeabi_dmul
        32   -> __aeabi_dsub
        32   -> __aeabi_f2d
        32   -> __aeabi_i2d
        32   -> cos
      20   iirFilter
      64   lowpassFIR
        64   -> __aeabi_d2f
        64   -> __aeabi_ddiv
        64   -> __aeabi_dmul
        64   -> __aeabi_f2d
        64   -> __aeabi_ul2f
        64   -> sin
      48   rDFT
        48   -> __aeabi_d2f
        48   -> __aeabi_ddiv
        48   -> __aeabi_dmul
        48   -> __aeabi_f2d
        48   -> __aeabi_i2d
        48   -> arm_cos_f32
        48   -> arm_sin_f32


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       8  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_15
       4  ??DataTable13_16
       4  ??DataTable13_17
       4  ??DataTable13_18
       4  ??DataTable13_19
       4  ??DataTable13_2
       4  ??DataTable13_20
       4  ??DataTable13_21
       4  ??DataTable13_22
       4  ??DataTable13_23
       4  ??DataTable13_24
       4  ??DataTable13_25
       4  ??DataTable13_26
       8  ??DataTable13_27
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
       4  ??DataTable2
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
     516  ?_0
      92  ADD_S16
     296  CrssCor
     322  DFT
       4  Data
   33088  DataFFT
       4  Data_Old
     458  Decimation
     642  Delay_Sum_FFT
       4  EnergyError
      84  EnergyNoiseCalc
       4  EnergySound
     102  FFTShift
       2  FFT_SUM
      26  FactorUpd
     472  GCC_PHAT
       2  InOld
       2  InOld
       2  InOld1
       2  InOld1
       4  Initial_Array
     100  LowPass
     192  LowPass2ndOder
     192  LowPass2ndOder_1
      92  LowPassIIR
     434  MD_entropy
    2048  NoiseBG
     260  OutRing
       2  Out_Old
       2  Out_Old
       2  Out_Old
       2  Out_Old1
       2  Out_Old1
     184  PCM2PDM
     222  PDM2PCM
     210  Precalculation
      92  SUB_S16
     100  Std_AutoCorr
      96  Std_CrssCor
     116  Std_MatCorr
     130  Window
    4496  bufferFFTSum
    4496  fbuffer
    4496  fbufferOut
       2  iRing
     158  iirFilter
     372  lowpassFIR
     624  rDFT
    8192  vDataIn
    8192  vDataIn1_FFT
    8192  vDataIn2_FFT
    8192  vDataIn2_FFT_CJ
    8192  vDataIn_FFT
    8192  vDataOut

 
 96 028 bytes in section .bss
  2 564 bytes in section .rodata
  6 034 bytes in section .text
 
  5 850 bytes of CODE  memory (+ 184 bytes shared)
  2 564 bytes of CONST memory
 96 028 bytes of DATA  memory

Errors: none
Warnings: 2
