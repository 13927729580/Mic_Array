###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       08/Mar/2016  16:10:14
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Oh --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\DSP.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\DSP.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c
      1          /*****************************************************************************
      2            *    Author: Phan Le Son                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          
      8          
      9          #include "DSP.h"
     10          #include "main.h"
     11          #include <math.h>
     12          #include <stdlib.h>
     13          //#include <complex.h>
     14          #include "arm_math.h"
     15          
     16          
     17          //#include <malloc.h>
     18          
     19          extern int16_t PreCalcBuff[129][256]; /* 1byte have 256 values */
     20          extern float fir256Coff[DSP_NUMCOFFHANNIING];
     21          
     22          /* Manual calculation */
     23          //#define A0     10000
     24          //#define A1   (-19322)
     25          //#define A2   (9344)
     26          
     27          //#define B0   (6)
     28          //#define B1   2*B0
     29          //#define B2   B0
     30          
     31          //#define FLOATING_POINT
     32          
     33          
     34          /* ******************* MATLAB comuptation ***********************
     35          case 1: [b,a] = [b,a] = cheby2(2,60,1/32);
     36                 b	0.0010   -0.0020    0.0010
     37                 a	1.0000   -1.9938    0.9938
     38          case 2: [b,a] = butter(2,1/256); --> cut to 64Khz
     39                 b    3.73251989292944e-05	7.46503978585889e-05	3.73251989292944e-05
     40                 a    1	-1.98264541850412	0.982794719299834
     41          
     42          *****************************************************************/
     43          
     44          #ifdef FLOATING_POINT
     45          
     46            #define A0   (1)
     47            #define A1   (-1.9826)
     48            #define A2   0.9828
     49          
     50            #define B0   (3.7325e-05)                
     51            #define B1   (7.4650e-05)       
     52            #define B2   (3.7325e-05)                
     53          #else
     54            #define A0   (10000)
     55            #define A1   (-19322)
     56            #define A2   9322
     57          
     58            #define B0   (6)                
     59            #define B1   (12)       
     60            #define B2   (6) 
     61          
     62          #endif
     63          
     64          
     65          
     66          
     67          
     68          /*
     69          float Coef[129] = { 
     70          -0.02340  ,-0.06595  ,-0.02743  ,0.01425  ,-0.03335  ,-0.08782  ,-0.04168  ,0.01282  ,-0.05293  ,-0.13171 ,
     71          -0.06756  ,0.01115  ,-0.08598  ,-0.20323  ,-0.10855  ,0.00800  ,-0.13553  ,-0.30735  ,-0.16711  ,0.00362 ,
     72          -0.20339  ,-0.44812  ,-0.24434  ,0.00021  ,-0.28985  ,-0.62873  ,-0.33968  ,0.00256  ,-0.39350  ,-0.85181 ,
     73          -0.45087  ,0.01875  ,-0.51123  ,-1.12042  ,-0.57396  ,0.06130  ,-0.63834  ,-1.43986  ,-0.70359  ,0.14924 ,
     74          -0.76886  ,-1.82151  ,-0.83329  ,0.31292  ,-0.89598  ,-2.29113  ,-0.95603  ,0.60590  ,-1.01255  ,-2.90980 ,
     75          -1.06471  ,1.13962  ,-1.11170  ,-3.83936  ,-1.15280  ,2.21212  ,-1.18736  ,-5.63026  ,-1.21482  ,5.05728 ,
     76          -1.23477  ,-11.80705  ,-1.24686  ,30.58676  ,48.78572  ,30.58676  ,-1.24686  ,-11.80705  ,-1.23477  ,5.05728 ,
     77          -1.21482  ,-5.63026  ,-1.18736  ,2.21212  ,-1.15280  ,-3.83936  ,-1.11170  ,1.13962  ,-1.06471  ,-2.90980 ,
     78          -1.01255  ,0.60590  ,-0.95603  ,-2.29113  ,-0.89598  ,0.31292  ,-0.83329  ,-1.82151  ,-0.76886  ,0.14924 ,
     79          -0.70359  ,-1.43986  ,-0.63834  ,0.06130  ,-0.57396  ,-1.12042  ,-0.51123  ,0.01875  ,-0.45087  ,-0.85181 ,
     80          -0.39350  ,0.00256  ,-0.33968  ,-0.62873  ,-0.28985  ,0.00021  ,-0.24434  ,-0.44812  ,-0.20339  ,0.00362 ,
     81          -0.16711  ,-0.30735  ,-0.13553  ,0.00800  ,-0.10855  ,-0.20323  ,-0.08598  ,0.01115  ,-0.06756  ,-0.13171 ,
     82          -0.05293  ,0.01282  ,-0.04168  ,-0.08782  ,-0.03335  ,0.01425  ,-0.02743  ,-0.06595  ,-0.02340 };
     83          
     84          */
     85          /*
     86          int32_t Coef[129] = { 
     87          -234  ,-659  ,-274  ,142  ,-333  ,-878  ,-416  ,128  ,-529  ,-1317 ,
     88          -675  ,111  ,-859  ,-2032  ,-1085  ,80  ,-1355  ,-3073  ,-1671  ,36 ,
     89          -2033  ,-4481  ,-2443  ,2  ,-2898  ,-6287  ,-3396  ,25  ,-3935  ,-8518 ,
     90          -4508  ,187  ,-5112  ,-11204  ,-5739  ,612  ,-6383  ,-14398  ,-7035  ,1492 ,
     91          -7688  ,-18215  ,-8332  ,3129  ,-8959  ,-22911  ,-9560  ,6059  ,-10125  ,-29097 ,
     92          -10647  ,11396  ,-11117  ,-38393  ,-11527  ,22121  ,-11873  ,-56302  ,-12148  ,50572 ,
     93          -12347  ,-118070  ,-12468  ,305867  ,487857  ,305867  ,-12468  ,-118070  ,-12347  ,50572 ,
     94          -12148  ,-56302  ,-11873  ,22121  ,-11527  ,-38393  ,-11117  ,11396  ,-10647  ,-29097 ,
     95          -10125  ,6059  ,-9560  ,-22911  ,-8959  ,3129  ,-8332  ,-18215  ,-7688  ,1492 ,
     96          -7035  ,-14398  ,-6383  ,612  ,-5739  ,-11204  ,-5112  ,187  ,-4508  ,-8518 ,
     97          -3935  ,25  ,-3396  ,-6287  ,-2898  ,2  ,-2443  ,-4481  ,-2033  ,36 ,
     98          -1671  ,-3073  ,-1355  ,80  ,-1085  ,-2032  ,-859  ,111  ,-675  ,-1317 ,
     99          -529  ,128  ,-416  ,-878  ,-333  ,142  ,-274  ,-659  ,-234 };
    100          
    101          */
    102          
    103          /* Background noise takes from experiments */

   \                                 In section .text, align 4, keep-with-next
    104          const int16_t NoiseBG[1024] = { 
   \                     NoiseBG:
   \   00000000   0x0230 0x0518      DC16 560, 1304, 785, 1224, 772, 1266, 837, 1284, 863, 1317, 937, 1551
   \              0x0311 0x04C8
   \              0x0304 0x04F2
   \              0x0345 0x0504
   \              0x035F 0x0525
   \              0x03A9 0x060F
   \   00000018   0x03E4 0x0590      DC16 996, 1424, 1053, 1502, 987, 1489, 919, 1319, 905, 1308, 822, 1440
   \              0x041D 0x05DE
   \              0x03DB 0x05D1
   \              0x0397 0x0527
   \              0x0389 0x051C
   \              0x0336 0x05A0
   \   00000030   0x0352 0x0521      DC16 850, 1313, 942, 1451, 890, 1222, 953, 1425, 801, 1255, 903, 1384
   \              0x03AE 0x05AB
   \              0x037A 0x04C6
   \              0x03B9 0x0591
   \              0x0321 0x04E7
   \              0x0387 0x0568
   \   00000048   0x03D9 0x04B5      DC16 985, 1205, 865, 1378, 917, 1095, 953, 865, 828, 685, 664, 590, 637
   \              0x0361 0x0562
   \              0x0395 0x0447
   \              0x03B9 0x0361
   \              0x033C 0x02AD
   \              0x0298 0x024E
   \              0x027D       
   \   00000062   0x0249 0x0257      DC16 585, 599, 421, 527, 273, 427, 449, 400, 346, 566, 160, 217, -154
   \              0x01A5 0x020F
   \              0x0111 0x01AB
   \              0x01C1 0x0190
   \              0x015A 0x0236
   \              0x00A0 0x00D9
   \              0xFF66       
   \   0000007C   0x00AA 0xFF0C      DC16 170, -244, 164, -347, -14, -263, -39, -132, -24, -114, -26, 22
   \              0x00A4 0xFEA5
   \              0xFFF2 0xFEF9
   \              0xFFD9 0xFF7C
   \              0xFFE8 0xFF8E
   \              0xFFE6 0x0016
   \   00000094   0xFFF2 0xFEDC      DC16 -14, -292, 111, -354, -41, -412, -181, -651, -280, -890, -314
   \              0x006F 0xFE9E
   \              0xFFD7 0xFE64
   \              0xFF4B 0xFD75
   \              0xFEE8 0xFC86
   \              0xFEC6       
   \   000000AA   0xFB0F 0xFE02      DC16 -1265, -510, -1464, -628, -1580, -645, -1713, -749, -1557, -879
   \              0xFA48 0xFD8C
   \              0xF9D4 0xFD7B
   \              0xF94F 0xFD13
   \              0xF9EB 0xFC91
   \   000000BE   0xFAB6 0xFCB8      DC16 -1354, -840, -1398, -752, -1194, -737, -1219, -701, -1448, -791
   \              0xFA8A 0xFD10
   \              0xFB56 0xFD1F
   \              0xFB3D 0xFD43
   \              0xFA58 0xFCE9
   \   000000D2   0xFA3F 0xFD02      DC16 -1473, -766, -1738, -904, -1471, -957, -1355, -812, -1217, -815
   \              0xF936 0xFC78
   \              0xFA41 0xFC43
   \              0xFAB5 0xFCD4
   \              0xFB3F 0xFCD1
   \   000000E6   0xFBE0 0xFD23      DC16 -1056, -733, -1097, -682, -681, -615, -625, -449, -322, -375, 49
   \              0xFBB7 0xFD56
   \              0xFD57 0xFD99
   \              0xFD8F 0xFE3F
   \              0xFEBE 0xFE89
   \              0x0031       
   \   000000FC   0xFEEC 0x011F      DC16 -276, 287, 6, 221, 79, 140, 5, 528, 43, 393, 339, -40, 181, 106
   \              0x0006 0x00DD
   \              0x004F 0x008C
   \              0x0005 0x0210
   \              0x002B 0x0189
   \              0x0153 0xFFD8
   \              0x00B5 0x006A
   \   00000118   0x00C6 0x0012      DC16 198, 18, -31, 92, 103, -24, 102, -78, 23, -331, 21, -426, -17
   \              0xFFE1 0x005C
   \              0x0067 0xFFE8
   \              0x0066 0xFFB2
   \              0x0017 0xFEB5
   \              0x0015 0xFE56
   \              0xFFEF       
   \   00000132   0xFD25 0xFF37      DC16 -731, -201, -723, -271, -856, -301, -973, -542, -885, -434, -902
   \              0xFD2D 0xFEF1
   \              0xFCA8 0xFED3
   \              0xFC33 0xFDE2
   \              0xFC8B 0xFE4E
   \              0xFC7A       
   \   00000148   0xFE85 0xFC92      DC16 -379, -878, -460, -646, -412, -832, -372, -651, -373, -677, -419
   \              0xFE34 0xFD7A
   \              0xFE64 0xFCC0
   \              0xFE8C 0xFD75
   \              0xFE8B 0xFD5B
   \              0xFE5D       
   \   0000015E   0xFE04 0xFE40      DC16 -508, -448, -404, -335, -256, -402, -385, -450, -284, -325, -372
   \              0xFE6C 0xFEB1
   \              0xFF00 0xFE6E
   \              0xFE7F 0xFE3E
   \              0xFEE4 0xFEBB
   \              0xFE8C       
   \   00000174   0xFED1 0xFEDB      DC16 -303, -293, -394, -211, -340, 162, -255, 158, -199, -86, -296
   \              0xFE76 0xFF2D
   \              0xFEAC 0x00A2
   \              0xFF01 0x009E
   \              0xFF39 0xFFAA
   \              0xFED8       
   \   0000018A   0xFF76 0xFF09      DC16 -138, -247, -183, -327, -192, -403, -190, -400, -224, -296, -221
   \              0xFF49 0xFEB9
   \              0xFF40 0xFE6D
   \              0xFF42 0xFE70
   \              0xFF20 0xFED8
   \              0xFF23       
   \   000001A0   0xFE84 0xFF11      DC16 -380, -239, -332, -383, -282, -457, -409, -446, -478, -561, -439
   \              0xFEB4 0xFE81
   \              0xFEE6 0xFE37
   \              0xFE67 0xFE42
   \              0xFE22 0xFDCF
   \              0xFE49       
   \   000001B6   0xFDF8 0xFE6A      DC16 -520, -406, -571, -399, -389, -426, -154, -271, -284, -240, 13
   \              0xFDC5 0xFE71
   \              0xFE7B 0xFE56
   \              0xFF66 0xFEF1
   \              0xFEE4 0xFF10
   \              0x000D       
   \   000001CC   0xFFD5 0xFFBF      DC16 -43, -65, -51, 23, 66, -43, -19, -5, -2, 12, -146, 178, 90, 202
   \              0xFFCD 0x0017
   \              0x0042 0xFFD5
   \              0xFFED 0xFFFB
   \              0xFFFE 0x000C
   \              0xFF6E 0x00B2
   \              0x005A 0x00CA
   \   000001E8   0x0041 0x01CA      DC16 65, 458, 253, 503, 261, 632, 288, 777, 398, 774, 464, 721, 492
   \              0x00FD 0x01F7
   \              0x0105 0x0278
   \              0x0120 0x0309
   \              0x018E 0x0306
   \              0x01D0 0x02D1
   \              0x01EC       
   \   00000202   0x02B7 0x01FA      DC16 695, 506, 736, 501, 583, 467, 700, 424, 702, 545, 868, 679, 914
   \              0x02E0 0x01F5
   \              0x0247 0x01D3
   \              0x02BC 0x01A8
   \              0x02BE 0x0221
   \              0x0364 0x02A7
   \              0x0392       
   \   0000021C   0x0268 0x03B7      DC16 616, 951, 698, 1046, 662, 1053, 676, 777, 590, 840, 560, 516, 562
   \              0x02BA 0x0416
   \              0x0296 0x041D
   \              0x02A4 0x0309
   \              0x024E 0x0348
   \              0x0230 0x0204
   \              0x0232       
   \   00000236   0x022C 0x01DD      DC16 556, 477, 371, 447, 301, 368, 210, 384, -56, 91, 8, 195, 6, 146
   \              0x0173 0x01BF
   \              0x012D 0x0170
   \              0x00D2 0x0180
   \              0xFFC8 0x005B
   \              0x0008 0x00C3
   \              0x0006 0x0092
   \   00000252   0xFFEC 0x00DC      DC16 -20, 220, -227, 147, -382, 71, -458, 68, -663, -59, -751, -280
   \              0xFF1D 0x0093
   \              0xFE82 0x0047
   \              0xFE36 0x0044
   \              0xFD69 0xFFC5
   \              0xFD11 0xFEE8
   \   0000026A   0xFD02 0xFEB0      DC16 -766, -336, -870, -364, -669, -352, -449, -329, -700, -179, -676
   \              0xFC9A 0xFE94
   \              0xFD63 0xFEA0
   \              0xFE3F 0xFEB7
   \              0xFD44 0xFF4D
   \              0xFD5C       
   \   00000280   0xFE75 0xFE78      DC16 -395, -392, -183, -650, -178, -699, -294, -455, -267, -196, -48
   \              0xFF49 0xFD76
   \              0xFF4E 0xFD45
   \              0xFEDA 0xFE39
   \              0xFEF5 0xFF3C
   \              0xFFD0       
   \   00000296   0x0104 0x0051      DC16 260, 81, 367, 234, 612, 162, 672, 312, 746, 359, 817, 517, 848
   \              0x016F 0x00EA
   \              0x0264 0x00A2
   \              0x02A0 0x0138
   \              0x02EA 0x0167
   \              0x0331 0x0205
   \              0x0350       
   \   000002B0   0x0218 0x035C      DC16 536, 860, 665, 1023, 490, 1011, 581, 1086, 593, 1266, 603, 1070
   \              0x0299 0x03FF
   \              0x01EA 0x03F3
   \              0x0245 0x043E
   \              0x0251 0x04F2
   \              0x025B 0x042E
   \   000002C8   0x02C1 0x048A      DC16 705, 1162, 642, 1140, 518, 901, 587, 893, 410, 692, 513, 534, 364
   \              0x0282 0x0474
   \              0x0206 0x0385
   \              0x024B 0x037D
   \              0x019A 0x02B4
   \              0x0201 0x0216
   \              0x016C       
   \   000002E2   0x024D 0x01B1      DC16 589, 433, 869, 504, 712, 558, 816, 436, 730, 627, 774, 619, 921
   \              0x0365 0x01F8
   \              0x02C8 0x022E
   \              0x0330 0x01B4
   \              0x02DA 0x0273
   \              0x0306 0x026B
   \              0x0399       
   \   000002FC   0x021D 0x02F4      DC16 541, 756, 466, 981, 517, 895, 499, 608, 378, 659, 442, 619, 337
   \              0x01D2 0x03D5
   \              0x0205 0x037F
   \              0x01F3 0x0260
   \              0x017A 0x0293
   \              0x01BA 0x026B
   \              0x0151       
   \   00000316   0x014F 0x0159      DC16 335, 345, 320, 280, 534, 320, 597, 273, 533, 370, 516, 356, 437
   \              0x0140 0x0118
   \              0x0216 0x0140
   \              0x0255 0x0111
   \              0x0215 0x0172
   \              0x0204 0x0164
   \              0x01B5       
   \   00000330   0x0110 0x01E7      DC16 272, 487, 374, 373, 404, 227, 311, 295, 240, 304, 324, -41, 209
   \              0x0176 0x0175
   \              0x0194 0x00E3
   \              0x0137 0x0127
   \              0x00F0 0x0130
   \              0x0144 0xFFD7
   \              0x00D1       
   \   0000034A   0x006E 0x0066      DC16 110, 102, -214, 38, -198, -114, -142, -36, -196, -86, -151, -72
   \              0xFF2A 0x0026
   \              0xFF3A 0xFF8E
   \              0xFF72 0xFFDC
   \              0xFF3C 0xFFAA
   \              0xFF69 0xFFB8
   \   00000362   0xFE5D 0xFFD1      DC16 -419, -47, -406, -133, -437, -98, -124, -59, -212, 180, -208, 40
   \              0xFE6A 0xFF7B
   \              0xFE4B 0xFF9E
   \              0xFF84 0xFFC5
   \              0xFF2C 0x00B4
   \              0xFF30 0x0028
   \   0000037A   0xFDD1 0x0093      DC16 -559, 147, -805, -180, -1143, -324, -1249, -488, -1382, -701
   \              0xFCDB 0xFF4C
   \              0xFB89 0xFEBC
   \              0xFB1F 0xFE18
   \              0xFA9A 0xFD43
   \   0000038E   0xFBCA 0xFD54      DC16 -1078, -684, -1130, -553, -910, -404, -1308, -418, -1441, -698
   \              0xFB96 0xFDD7
   \              0xFC72 0xFE6C
   \              0xFAE4 0xFE5E
   \              0xFA5F 0xFD46
   \   000003A2   0xF9E8 0xFD4E      DC16 -1560, -690, -1719, -727, -1817, -894, -1791, -902, -1640, -931
   \              0xF949 0xFD29
   \              0xF8E7 0xFC82
   \              0xF901 0xFC7A
   \              0xF998 0xFC5D
   \   000003B6   0xFAF4 0xFCDA      DC16 -1292, -806, -1347, -597, -1127, -578, -899, -622, -643, -402
   \              0xFABD 0xFDAB
   \              0xFB99 0xFDBE
   \              0xFC7D 0xFD92
   \              0xFD7D 0xFE6E
   \   000003CA   0xFD22 0xFE35      DC16 -734, -459, -427, -433, -736, -296, -527, -451, -454, -345, -296
   \              0xFE55 0xFE4F
   \              0xFD20 0xFED8
   \              0xFDF1 0xFE3D
   \              0xFE3A 0xFEA7
   \              0xFED8       
   \   000003E0   0xFF05 0xFEF3      DC16 -251, -269, -207, 25, -157, 132, 46, 214, -7, 452, -22, 235, 62
   \              0xFF31 0x0019
   \              0xFF63 0x0084
   \              0x002E 0x00D6
   \              0xFFF9 0x01C4
   \              0xFFEA 0x00EB
   \              0x003E       
   \   000003FA   0x00DE 0x0007      DC16 222, 7, 186, -24, 228, -77, 56, -35, 345, 6, 535, 51, 301, 41, 229
   \              0x00BA 0xFFE8
   \              0x00E4 0xFFB3
   \              0x0038 0xFFDD
   \              0x0159 0x0006
   \              0x0217 0x0033
   \              0x012D 0x0029
   \              0x00E5       
   \   00000418   0xFFDE 0x0119      DC16 -34, 281, -84, 193, -48, -3, -125, 22, -264, -25, -134, -99, -100
   \              0xFFAC 0x00C1
   \              0xFFD0 0xFFFD
   \              0xFF83 0x0016
   \              0xFEF8 0xFFE7
   \              0xFF7A 0xFF9D
   \              0xFF9C       
   \   00000432   0xFF87 0xFF49      DC16 -121, -183, 39, -167, -90, -176, -152, -120, -222, -259, -216
   \              0x0027 0xFF59
   \              0xFFA6 0xFF50
   \              0xFF68 0xFF88
   \              0xFF22 0xFEFD
   \              0xFF28       
   \   00000448   0xFF30 0xFE73      DC16 -208, -397, -303, -426, -279, -230, -404, -253, -298, -228, -379
   \              0xFED1 0xFE56
   \              0xFEE9 0xFF1A
   \              0xFE6C 0xFF03
   \              0xFED6 0xFF1C
   \              0xFE85       
   \   0000045E   0xFEC4 0xFE79      DC16 -316, -391, -62, -397, 55, -190, -77, -292, -4, -176, -262, -272
   \              0xFFC2 0xFE73
   \              0x0037 0xFF42
   \              0xFFB3 0xFEDC
   \              0xFFFC 0xFF50
   \              0xFEFA 0xFEF0
   \   00000476   0xFF00 0xFF1E      DC16 -256, -226, -79, -218, -92, -151, -16, -137, 42, -199, 187, -148
   \              0xFFB1 0xFF26
   \              0xFFA4 0xFF69
   \              0xFFF0 0xFF77
   \              0x002A 0xFF39
   \              0x00BB 0xFF6C
   \   0000048E   0x009B 0xFFE8      DC16 155, -24, 268, 100, 255, 59, 178, 130, -26, -92, -94, -213, -221
   \              0x010C 0x0064
   \              0x00FF 0x003B
   \              0x00B2 0x0082
   \              0xFFE6 0xFFA4
   \              0xFFA2 0xFF2B
   \              0xFF23       
   \   000004A8   0xFEDF 0xFF32      DC16 -289, -206, -284, -227, -228, -251, -141, -210, -300, -168, -138
   \              0xFEE4 0xFF1D
   \              0xFF1C 0xFF05
   \              0xFF73 0xFF2E
   \              0xFED4 0xFF58
   \              0xFF76       
   \   000004BE   0xFF3E 0xFF9B      DC16 -194, -101, -203, -181, -496, -231, -394, -134, -340, -236, -551
   \              0xFF35 0xFF4B
   \              0xFE10 0xFF19
   \              0xFE76 0xFF7A
   \              0xFEAC 0xFF14
   \              0xFDD9       
   \   000004D4   0xFF31 0xFE6A      DC16 -207, -406, -167, -771, -226, -821, -365, -909, -479, -971, -481
   \              0xFF59 0xFCFD
   \              0xFF1E 0xFCCB
   \              0xFE93 0xFC73
   \              0xFE21 0xFC35
   \              0xFE1F       
   \   000004EA   0xFC30 0xFDBF      DC16 -976, -577, -965, -538, -1053, -633, -1186, -609, -1184, -743
   \              0xFC3B 0xFDE6
   \              0xFBE3 0xFD87
   \              0xFB5E 0xFD9F
   \              0xFB60 0xFD19
   \   000004FE   0xFB39 0xFDBD      DC16 -1223, -579, -1353, -579, -1477, -818, -1281, -743, -1084, -667
   \              0xFAB7 0xFDBD
   \              0xFA3B 0xFCCE
   \              0xFAFF 0xFD19
   \              0xFBC4 0xFD65
   \   00000512   0xFBD8 0xFD33      DC16 -1064, -717, -790, -672, -714, -557, -776, -620, -531, -586, -567
   \              0xFCEA 0xFD60
   \              0xFD36 0xFDD3
   \              0xFCF8 0xFD94
   \              0xFDED 0xFDB6
   \              0xFDC9       
   \   00000528   0xFE40 0xFEC9      DC16 -448, -311, -423, -365, -442, -72, -67, -388, -33, -598, -194
   \              0xFE59 0xFE93
   \              0xFE46 0xFFB8
   \              0xFFBD 0xFE7C
   \              0xFFDF 0xFDAA
   \              0xFF3E       
   \   0000053E   0xFDD0 0xFEC8      DC16 -560, -312, -725, -358, -486, -286, -449, -126, -367, -22, -287
   \              0xFD2B 0xFE9A
   \              0xFE1A 0xFEE2
   \              0xFE3F 0xFF82
   \              0xFE91 0xFFEA
   \              0xFEE1       
   \   00000554   0xFF95 0xFEAF      DC16 -107, -337, -44, -88, 63, -4, 13, 31, 110, -62, -21, 8, 35, 47, 88
   \              0xFFD4 0xFFA8
   \              0x003F 0xFFFC
   \              0x000D 0x001F
   \              0x006E 0xFFC2
   \              0xFFEB 0x0008
   \              0x0023 0x002F
   \              0x0058       
   \   00000572   0x00AC 0x0050      DC16 172, 80, -10, 310, -283, 21, -211, -49, -261, 36, -281, 0, -550
   \              0xFFF6 0x0136
   \              0xFEE5 0x0015
   \              0xFF2D 0xFFCF
   \              0xFEFB 0x0024
   \              0xFEE7 0x0000
   \              0xFDDA       
   \   0000058C   0xFF6C 0xFE02      DC16 -148, -510, -244, -592, -212, -691, -278, -772, -321, -921, -421
   \              0xFF0C 0xFDB0
   \              0xFF2C 0xFD4D
   \              0xFEEA 0xFCFC
   \              0xFEBF 0xFC67
   \              0xFE5B       
   \   000005A2   0xFC87 0xFE30      DC16 -889, -464, -1194, -490, -1331, -705, -1204, -663, -1398, -669
   \              0xFB56 0xFE16
   \              0xFACD 0xFD3F
   \              0xFB4C 0xFD69
   \              0xFA8A 0xFD63
   \   000005B6   0xFA97 0xFCDE      DC16 -1385, -802, -1036, -695, -1211, -684, -1469, -718, -1408, -812
   \              0xFBF4 0xFD49
   \              0xFB45 0xFD54
   \              0xFA43 0xFD32
   \              0xFA80 0xFCD4
   \   000005CA   0xFAE1 0xFD05      DC16 -1311, -763, -1691, -834, -1582, -952, -1599, -955, -1466, -960
   \              0xF965 0xFCBE
   \              0xF9D2 0xFC48
   \              0xF9C1 0xFC45
   \              0xFA46 0xFC40
   \   000005DE   0xFBA5 0xFC42      DC16 -1115, -958, -956, -838, -783, -724, -529, -591, -64, -457, -265
   \              0xFC44 0xFCBA
   \              0xFCF1 0xFD2C
   \              0xFDEF 0xFDB1
   \              0xFFC0 0xFE37
   \              0xFEF7       
   \   000005F4   0xFF39 0xFFEB      DC16 -199, -21, -255, -153, -266, -216, -314, -221, -439, -219, -383
   \              0xFF01 0xFF67
   \              0xFEF6 0xFF28
   \              0xFEC6 0xFF23
   \              0xFE49 0xFF25
   \              0xFE81       
   \   0000060A   0xFE75 0xFE38      DC16 -395, -456, -240, -299, -231, -260, -17, -180, 18, -83, 154, -113
   \              0xFF10 0xFED5
   \              0xFF19 0xFEFC
   \              0xFFEF 0xFF4C
   \              0x0012 0xFFAD
   \              0x009A 0xFF8F
   \   00000622   0x007D 0xFFB9      DC16 125, -71, 384, 20, 434, 121, 387, 132, 824, 232, 942, 482, 1417
   \              0x0180 0x0014
   \              0x01B2 0x0079
   \              0x0183 0x0084
   \              0x0338 0x00E8
   \              0x03AE 0x01E2
   \              0x0589       
   \   0000063C   0x0233 0x046E      DC16 563, 1134, 611, 1026, 485, 802, 468, 1099, 477, 1286, 632, 1532
   \              0x0263 0x0402
   \              0x01E5 0x0322
   \              0x01D4 0x044B
   \              0x01DD 0x0506
   \              0x0278 0x05FC
   \   00000654   0x02F5 0x06C4      DC16 757, 1732, 903, 1488, 1027, 1480, 1017, 1495, 950, 1454, 900, 1531
   \              0x0387 0x05D0
   \              0x0403 0x05C8
   \              0x03F9 0x05D7
   \              0x03B6 0x05AE
   \              0x0384 0x05FB
   \   0000066C   0x0373 0x063E      DC16 883, 1598, 913, 1314, 919, 1223, 821, 983, 683, 846, 560, 625, 437
   \              0x0391 0x0522
   \              0x0397 0x04C7
   \              0x0335 0x03D7
   \              0x02AB 0x034E
   \              0x0230 0x0271
   \              0x01B5       
   \   00000686   0x025D 0x0176      DC16 605, 374, 325, 330, 343, 276, 249, 265, 157, 261, 73, 277, -17
   \              0x0145 0x014A
   \              0x0157 0x0114
   \              0x00F9 0x0109
   \              0x009D 0x0105
   \              0x0049 0x0115
   \              0xFFEF       
   \   000006A0   0x008C 0xFFB5      DC16 140, -75, 223, 46, 91, -115, 125, -413, -36, -336, -81, -382, -123
   \              0x00DF 0x002E
   \              0x005B 0xFF8D
   \              0x007D 0xFE63
   \              0xFFDC 0xFEB0
   \              0xFFAF 0xFE82
   \              0xFF85       
   \   000006BA   0xFE26 0xFF90      DC16 -474, -112, -683, -135, -639, -252, -589, -262, -306, -188, 227, 8
   \              0xFD55 0xFF79
   \              0xFD81 0xFF04
   \              0xFDB3 0xFEFA
   \              0xFECE 0xFF44
   \              0x00E3 0x0008
   \   000006D2   0x010C 0x00FF      DC16 268, 255, 310, 209, 473, 428, 467, 479, 457, 341, 257, 268, 152
   \              0x0136 0x00D1
   \              0x01D9 0x01AC
   \              0x01D3 0x01DF
   \              0x01C9 0x0155
   \              0x0101 0x010C
   \              0x0098       
   \   000006EC   0x00B2 0x003A      DC16 178, 58, 76, -1, 68, -203, 5, -311, -48, -319, -117, -242, -89
   \              0x004C 0xFFFF
   \              0x0044 0xFF35
   \              0x0005 0xFEC9
   \              0xFFD0 0xFEC1
   \              0xFF8B 0xFF0E
   \              0xFFA7       
   \   00000706   0xFF18 0xFFA7      DC16 -232, -89, -114, -57, 168, 25, 198, 251, 367, 202, 185, 169, 237
   \              0xFF8E 0xFFC7
   \              0x00A8 0x0019
   \              0x00C6 0x00FB
   \              0x016F 0x00CA
   \              0x00B9 0x00A9
   \              0x00ED       
   \   00000720   0x0054 0x00B9      DC16 84, 185, 88, 575, 127, 806, 270, 1263, 541, 1506, 822, 1625, 854
   \              0x0058 0x023F
   \              0x007F 0x0326
   \              0x010E 0x04EF
   \              0x021D 0x05E2
   \              0x0336 0x0659
   \              0x0356       
   \   0000073A   0x05D1 0x03FA      DC16 1489, 1018, 1600, 956, 1535, 1013, 1583, 1037, 1662, 1072, 1722
   \              0x0640 0x03BC
   \              0x05FF 0x03F5
   \              0x062F 0x040D
   \              0x067E 0x0430
   \              0x06BA       
   \   00000750   0x0445 0x0695      DC16 1093, 1685, 1088, 1695, 1154, 1826, 1312, 2064, 1329, 2196, 1447
   \              0x0440 0x069F
   \              0x0482 0x0722
   \              0x0520 0x0810
   \              0x0531 0x0894
   \              0x05A7       
   \   00000766   0x092C 0x05F0      DC16 2348, 1520, 2433, 1655, 2410, 1745, 2398, 1625, 2227, 1555, 2052
   \              0x0981 0x0677
   \              0x096A 0x06D1
   \              0x095E 0x0659
   \              0x08B3 0x0613
   \              0x0804       
   \   0000077C   0x05DC 0x086E      DC16 1500, 2158, 1455, 1907, 1453, 1680, 1420, 1444, 1276, 1204, 1112
   \              0x05AF 0x0773
   \              0x05AD 0x0690
   \              0x058C 0x05A4
   \              0x04FC 0x04B4
   \              0x0458       
   \   00000792   0x0366 0x03EB      DC16 870, 1003, 942, 910, 579, 800, 568, 602, 633, 684, 163, 540, 80
   \              0x03AE 0x038E
   \              0x0243 0x0320
   \              0x0238 0x025A
   \              0x0279 0x02AC
   \              0x00A3 0x021C
   \              0x0050       
   \   000007AC   0x01EB 0xFFD7      DC16 491, -41, 385, -41, 290, -331, 164, -440, 106, -575, -94, -896
   \              0x0181 0xFFD7
   \              0x0122 0xFEB5
   \              0x00A4 0xFE48
   \              0x006A 0xFDC1
   \              0xFFA2 0xFC80
   \   000007C4   0xFEF5 0xFCEC      DC16 -267, -788, -170, -1030, -249, -933, -287, -1127, -363, -1212
   \              0xFF56 0xFBFA
   \              0xFF07 0xFC5B
   \              0xFEE1 0xFB99
   \              0xFE95 0xFB44
   \   000007D8   0xFE28 0xFA6C      DC16 -472, -1428, -474, -1460, -614, -1911, -813, -1824, -887, -1632
   \              0xFE26 0xFA4C
   \              0xFD9A 0xF889
   \              0xFCD3 0xF8E0
   \              0xFC89 0xF9A0
   \   000007EC   0xFC98 0xFA7F      DC16 -872, -1409, -742, -1085, -596, -999, -450, -720, -311, -732
   \              0xFD1A 0xFBC3
   \              0xFDAC 0xFC19
   \              0xFE3E 0xFD30
   \              0xFEC9 0xFD24
    105          560  ,1304  ,785  ,1224  ,772  ,1266  ,837  ,1284  ,863  ,1317 ,
    106          937  ,1551  ,996  ,1424  ,1053  ,1502  ,987  ,1489  ,919  ,1319 ,
    107          905  ,1308  ,822  ,1440  ,850  ,1313  ,942  ,1451  ,890  ,1222 ,
    108          953  ,1425  ,801  ,1255  ,903  ,1384  ,985  ,1205  ,865  ,1378 ,
    109          917  ,1095  ,953  ,865  ,828  ,685  ,664  ,590  ,637  ,585 ,
    110          599  ,421  ,527  ,273  ,427  ,449  ,400  ,346  ,566  ,160 ,
    111          217  ,-154  ,170  ,-244  ,164  ,-347  ,-14  ,-263  ,-39  ,-132 ,
    112          -24  ,-114  ,-26  ,22  ,-14  ,-292  ,111  ,-354  ,-41  ,-412 ,
    113          -181  ,-651  ,-280  ,-890  ,-314  ,-1265  ,-510  ,-1464  ,-628  ,-1580 ,
    114          -645  ,-1713  ,-749  ,-1557  ,-879  ,-1354  ,-840  ,-1398  ,-752  ,-1194 ,
    115          -737  ,-1219  ,-701  ,-1448  ,-791  ,-1473  ,-766  ,-1738  ,-904  ,-1471 ,
    116          -957  ,-1355  ,-812  ,-1217  ,-815  ,-1056  ,-733  ,-1097  ,-682  ,-681 ,
    117          -615  ,-625  ,-449  ,-322  ,-375  ,49  ,-276  ,287  ,6  ,221 ,
    118          79  ,140  ,5  ,528  ,43  ,393  ,339  ,-40  ,181  ,106 ,
    119          198  ,18  ,-31  ,92  ,103  ,-24  ,102  ,-78  ,23  ,-331 ,
    120          21  ,-426  ,-17  ,-731  ,-201  ,-723  ,-271  ,-856  ,-301  ,-973 ,
    121          -542  ,-885  ,-434  ,-902  ,-379  ,-878  ,-460  ,-646  ,-412  ,-832 ,
    122          -372  ,-651  ,-373  ,-677  ,-419  ,-508  ,-448  ,-404  ,-335  ,-256 ,
    123          -402  ,-385  ,-450  ,-284  ,-325  ,-372  ,-303  ,-293  ,-394  ,-211 ,
    124          -340  ,162  ,-255  ,158  ,-199  ,-86  ,-296  ,-138  ,-247  ,-183 ,
    125          -327  ,-192  ,-403  ,-190  ,-400  ,-224  ,-296  ,-221  ,-380  ,-239 ,
    126          -332  ,-383  ,-282  ,-457  ,-409  ,-446  ,-478  ,-561  ,-439  ,-520 ,
    127          -406  ,-571  ,-399  ,-389  ,-426  ,-154  ,-271  ,-284  ,-240  ,13 ,
    128          -43  ,-65  ,-51  ,23  ,66  ,-43  ,-19  ,-5  ,-2  ,12 ,
    129          -146  ,178  ,90  ,202  ,65  ,458  ,253  ,503  ,261  ,632 ,
    130          288  ,777  ,398  ,774  ,464  ,721  ,492  ,695  ,506  ,736 ,
    131          501  ,583  ,467  ,700  ,424  ,702  ,545  ,868  ,679  ,914 ,
    132          616  ,951  ,698  ,1046  ,662  ,1053  ,676  ,777  ,590  ,840 ,
    133          560  ,516  ,562  ,556  ,477  ,371  ,447  ,301  ,368  ,210 ,
    134          384  ,-56  ,91  ,8  ,195  ,6  ,146  ,-20  ,220  ,-227 ,
    135          147  ,-382  ,71  ,-458  ,68  ,-663  ,-59  ,-751  ,-280  ,-766 ,
    136          -336  ,-870  ,-364  ,-669  ,-352  ,-449  ,-329  ,-700  ,-179  ,-676 ,
    137          -395  ,-392  ,-183  ,-650  ,-178  ,-699  ,-294  ,-455  ,-267  ,-196 ,
    138          -48  ,260  ,81  ,367  ,234  ,612  ,162  ,672  ,312  ,746 ,
    139          359  ,817  ,517  ,848  ,536  ,860  ,665  ,1023  ,490  ,1011 ,
    140          581  ,1086  ,593  ,1266  ,603  ,1070  ,705  ,1162  ,642  ,1140 ,
    141          518  ,901  ,587  ,893  ,410  ,692  ,513  ,534  ,364  ,589 ,
    142          433  ,869  ,504  ,712  ,558  ,816  ,436  ,730  ,627  ,774 ,
    143          619  ,921  ,541  ,756  ,466  ,981  ,517  ,895  ,499  ,608 ,
    144          378  ,659  ,442  ,619  ,337  ,335  ,345  ,320  ,280  ,534 ,
    145          320  ,597  ,273  ,533  ,370  ,516  ,356  ,437  ,272  ,487 ,
    146          374  ,373  ,404  ,227  ,311  ,295  ,240  ,304  ,324  ,-41 ,
    147          209  ,110  ,102  ,-214  ,38  ,-198  ,-114  ,-142  ,-36  ,-196 ,
    148          -86  ,-151  ,-72  ,-419  ,-47  ,-406  ,-133  ,-437  ,-98  ,-124 ,
    149          -59  ,-212  ,180  ,-208  ,40  ,-559  ,147  ,-805  ,-180  ,-1143 ,
    150          -324  ,-1249  ,-488  ,-1382  ,-701  ,-1078  ,-684  ,-1130  ,-553  ,-910 ,
    151          -404  ,-1308  ,-418  ,-1441  ,-698  ,-1560  ,-690  ,-1719  ,-727  ,-1817 ,
    152          -894  ,-1791  ,-902  ,-1640  ,-931  ,-1292  ,-806  ,-1347  ,-597  ,-1127 ,
    153          -578  ,-899  ,-622  ,-643  ,-402  ,-734  ,-459  ,-427  ,-433  ,-736 ,
    154          -296  ,-527  ,-451  ,-454  ,-345  ,-296  ,-251  ,-269  ,-207  ,25 ,
    155          -157  ,132  ,46  ,214  ,-7  ,452  ,-22  ,235  ,62  ,222 ,
    156          7  ,186  ,-24  ,228  ,-77  ,56  ,-35  ,345  ,6  ,535 ,
    157          51  ,301  ,41  ,229  ,-34  ,281  ,-84  ,193  ,-48  ,-3 ,
    158          -125  ,22  ,-264  ,-25  ,-134  ,-99  ,-100  ,-121  ,-183  ,39 ,
    159          -167  ,-90  ,-176  ,-152  ,-120  ,-222  ,-259  ,-216  ,-208  ,-397 ,
    160          -303  ,-426  ,-279  ,-230  ,-404  ,-253  ,-298  ,-228  ,-379  ,-316 ,
    161          -391  ,-62  ,-397  ,55  ,-190  ,-77  ,-292  ,-4  ,-176  ,-262 ,
    162          -272  ,-256  ,-226  ,-79  ,-218  ,-92  ,-151  ,-16  ,-137  ,42 ,
    163          -199  ,187  ,-148  ,155  ,-24  ,268  ,100  ,255  ,59  ,178 ,
    164          130  ,-26  ,-92  ,-94  ,-213  ,-221  ,-289  ,-206  ,-284  ,-227 ,
    165          -228  ,-251  ,-141  ,-210  ,-300  ,-168  ,-138  ,-194  ,-101  ,-203 ,
    166          -181  ,-496  ,-231  ,-394  ,-134  ,-340  ,-236  ,-551  ,-207  ,-406 ,
    167          -167  ,-771  ,-226  ,-821  ,-365  ,-909  ,-479  ,-971  ,-481  ,-976 ,
    168          -577  ,-965  ,-538  ,-1053  ,-633  ,-1186  ,-609  ,-1184  ,-743  ,-1223 ,
    169          -579  ,-1353  ,-579  ,-1477  ,-818  ,-1281  ,-743  ,-1084  ,-667  ,-1064 ,
    170          -717  ,-790  ,-672  ,-714  ,-557  ,-776  ,-620  ,-531  ,-586  ,-567 ,
    171          -448  ,-311  ,-423  ,-365  ,-442  ,-72  ,-67  ,-388  ,-33  ,-598 ,
    172          -194  ,-560  ,-312  ,-725  ,-358  ,-486  ,-286  ,-449  ,-126  ,-367 ,
    173          -22  ,-287  ,-107  ,-337  ,-44  ,-88  ,63  ,-4  ,13  ,31 ,
    174          110  ,-62  ,-21  ,8  ,35  ,47  ,88  ,172  ,80  ,-10 ,
    175          310  ,-283  ,21  ,-211  ,-49  ,-261  ,36  ,-281  ,0  ,-550 ,
    176          -148  ,-510  ,-244  ,-592  ,-212  ,-691  ,-278  ,-772  ,-321  ,-921 ,
    177          -421  ,-889  ,-464  ,-1194  ,-490  ,-1331  ,-705  ,-1204  ,-663  ,-1398 ,
    178          -669  ,-1385  ,-802  ,-1036  ,-695  ,-1211  ,-684  ,-1469  ,-718  ,-1408 ,
    179          -812  ,-1311  ,-763  ,-1691  ,-834  ,-1582  ,-952  ,-1599  ,-955  ,-1466 ,
    180          -960  ,-1115  ,-958  ,-956  ,-838  ,-783  ,-724  ,-529  ,-591  ,-64 ,
    181          -457  ,-265  ,-199  ,-21  ,-255  ,-153  ,-266  ,-216  ,-314  ,-221 ,
    182          -439  ,-219  ,-383  ,-395  ,-456  ,-240  ,-299  ,-231  ,-260  ,-17 ,
    183          -180  ,18  ,-83  ,154  ,-113  ,125  ,-71  ,384  ,20  ,434 ,
    184          121  ,387  ,132  ,824  ,232  ,942  ,482  ,1417  ,563  ,1134 ,
    185          611  ,1026  ,485  ,802  ,468  ,1099  ,477  ,1286  ,632  ,1532 ,
    186          757  ,1732  ,903  ,1488  ,1027  ,1480  ,1017  ,1495  ,950  ,1454 ,
    187          900  ,1531  ,883  ,1598  ,913  ,1314  ,919  ,1223  ,821  ,983 ,
    188          683  ,846  ,560  ,625  ,437  ,605  ,374  ,325  ,330  ,343 ,
    189          276  ,249  ,265  ,157  ,261  ,73  ,277  ,-17  ,140  ,-75 ,
    190          223  ,46  ,91  ,-115  ,125  ,-413  ,-36  ,-336  ,-81  ,-382 ,
    191          -123  ,-474  ,-112  ,-683  ,-135  ,-639  ,-252  ,-589  ,-262  ,-306 ,
    192          -188  ,227  ,8  ,268  ,255  ,310  ,209  ,473  ,428  ,467 ,
    193          479  ,457  ,341  ,257  ,268  ,152  ,178  ,58  ,76  ,-1 ,
    194          68  ,-203  ,5  ,-311  ,-48  ,-319  ,-117  ,-242  ,-89  ,-232 ,
    195          -89  ,-114  ,-57  ,168  ,25  ,198  ,251  ,367  ,202  ,185 ,
    196          169  ,237  ,84  ,185  ,88  ,575  ,127  ,806  ,270  ,1263 ,
    197          541  ,1506  ,822  ,1625  ,854  ,1489  ,1018  ,1600  ,956  ,1535 ,
    198          1013  ,1583  ,1037  ,1662  ,1072  ,1722  ,1093  ,1685  ,1088  ,1695 ,
    199          1154  ,1826  ,1312  ,2064  ,1329  ,2196  ,1447  ,2348  ,1520  ,2433 ,
    200          1655  ,2410  ,1745  ,2398  ,1625  ,2227  ,1555  ,2052  ,1500  ,2158 ,
    201          1455  ,1907  ,1453  ,1680  ,1420  ,1444  ,1276  ,1204  ,1112  ,870 ,
    202          1003  ,942  ,910  ,579  ,800  ,568  ,602  ,633  ,684  ,163 ,
    203          540  ,80  ,491  ,-41  ,385  ,-41  ,290  ,-331  ,164  ,-440 ,
    204          106  ,-575  ,-94  ,-896  ,-267  ,-788  ,-170  ,-1030  ,-249  ,-933 ,
    205          -287  ,-1127  ,-363  ,-1212  ,-472  ,-1428  ,-474  ,-1460  ,-614  ,-1911 ,
    206          -813  ,-1824  ,-887  ,-1632  ,-872  ,-1409  ,-742  ,-1085  ,-596  ,-999 ,
    207          -450  ,-720  ,-311  ,-732 };
    208          
    209          
    210          
    211          /* 
    212          Library:
    213          https://github.com/piratfm/codec2_m4f/tree/master/lib
    214          */
    215          
    216          
    217          /*--------------EXTERN VARIABLES-----------------------------------------------------------------------------*/
    218          
    219          #if MAIN_CRSCORR
    220          extern arm_rfft_instance_q15 RealFFT_Ins, RealIFFT_Ins;
    221          #endif
    222          
    223          //extern arm_cfft_radix4_instance_f32 SS_GCC1,SS_GCC2,SS1,SS2,SS3,SS4,ISS,ISS_GCC; 
    224          //extern arm_rfft_instance_f32         S_GCC1,S_GCC2,S1,S2,S3,S4,IS,IS_GCC;
    225          
    226          extern arm_rfft_fast_instance_f32 S_GCC1,S_GCC2,S1,S2,S3,S4,IS,IS_GCC;
    227          
    228          
    229          /*------------------------------------------------------------------------------------------------------------*/
    230          /*--------------------- VARIABLES-----------------------------------------------------------------------------*/
    231          

   \                                 In section .bss, align 4
    232          float bufferFFTSum[AUDIO_OUT_BUFFER_SIZE+100];  //storage the SUM in Furier domain
    233          float fbufferOut[AUDIO_OUT_BUFFER_SIZE+100];    //storage the output buffer in float type
    234          float fbuffer[AUDIO_OUT_BUFFER_SIZE+100];       //storage the input buffer in float type
    235          Mic_Array_Data_f  DataFFT;                  //storage DFT's coefficients for microphones
   \                     DataFFT:
   \   00000000                      DS8 33088
   \                     bufferFFTSum:
   \   00008140                      DS8 4496
   \                     fbufferOut:
   \   000092D0                      DS8 4496

   \                                 In section .bss, align 4
   \                     fbuffer:
   \   00000000                      DS8 4496

   \                                 In section .bss, align 4
    236          uint32_t EnergySound,EnergyError;
   \                     EnergySound:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     EnergyError:
   \   00000000                      DS8 4
    237          

   \                                 In section .bss, align 4
    238          float vDataIn1_FFT[2*AUDIO_OUT_BUFFER_SIZE];
   \                     vDataIn1_FFT:
   \   00000000                      DS8 8192
    239          float vDataIn2_FFT[2*AUDIO_OUT_BUFFER_SIZE];
   \                     vDataIn2_FFT:
   \   00002000                      DS8 8192
    240          float vDataIn2_FFT_CJ[2*AUDIO_OUT_BUFFER_SIZE];
    241          float vDataIn_FFT[2*AUDIO_OUT_BUFFER_SIZE];
   \                     vDataIn_FFT:
   \   00004000                      DS8 8192
   \                     vDataIn2_FFT_CJ:
   \   00006000                      DS8 8192
    242          float vDataOut[2*AUDIO_OUT_BUFFER_SIZE];
   \                     vDataOut:
   \   00008000                      DS8 8192
    243          float vDataIn[2*AUDIO_OUT_BUFFER_SIZE];
   \                     vDataIn:
   \   0000A000                      DS8 8192
    244          
    245          /*------------------------------------------------------------------------------------------------------------*/
    246          /* Discreate Fourier Transform */

   \                                 In section .text, align 2, keep-with-next
    247          void DFT (float *x, float *Out, int N)
    248          {
   \                     DFT: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4692             MOV      R10,R2
    249          	int m,n;
    250          	
    251          	for(m=0; m<N; m++)  // update for e very bar 
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xF1BA 0x0F01      CMP      R10,#+1
   \   0000000C   0x4683             MOV      R11,R0
   \   0000000E   0xED2D 0x8B02      VPUSH    {D8}
   \   00000012   0xDB55             BLT.N    ??DFT_0
   \   00000014   0x460C             MOV      R4,R1
    252          	{
    253          		Out[2*m]  = Out[2*m+1] = 0;
   \                     ??DFT_1: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
    254          		
    255          		for (n  =0; n<N; n++) //
   \   00000018   0xEE00 0x5A10      VMOV     S0,R5
   \   0000001C   0x6060             STR      R0,[R4, #+4]
   \   0000001E   0x2600             MOVS     R6,#+0
   \   00000020   0x6020             STR      R0,[R4, #+0]
   \   00000022   0x465F             MOV      R7,R11
   \   00000024   0xEEB8 0x8AC0      VCVT.F32.S32 S16,S0
   \                     ??DFT_2: (+1)
   \   00000028   0xEE18 0x0A10      VMOV     R0,S16
   \   0000002C   0x.... 0x....      BL       __aeabi_f2d
   \   00000030   0x.... 0x....      LDR.W    R2,??DataTable12_1  ;; 0x5a7ed197
   \   00000034   0x.... 0x....      LDR.W    R3,??DataTable12_2  ;; 0x401921fb
   \   00000038   0x.... 0x....      BL       __aeabi_dmul
   \   0000003C   0xEE00 0x6A10      VMOV     S0,R6
   \   00000040   0x4680             MOV      R8,R0
   \   00000042   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000046   0x4689             MOV      R9,R1
   \   00000048   0xEE10 0x0A10      VMOV     R0,S0
   \   0000004C   0x1C76             ADDS     R6,R6,#+1
   \   0000004E   0x.... 0x....      BL       __aeabi_f2d
   \   00000052   0x4642             MOV      R2,R8
   \   00000054   0x464B             MOV      R3,R9
   \   00000056   0x.... 0x....      BL       __aeabi_dmul
   \   0000005A   0xEE00 0xAA10      VMOV     S0,R10
   \   0000005E   0x4680             MOV      R8,R0
   \   00000060   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000064   0x4689             MOV      R9,R1
   \   00000066   0xEE10 0x0A10      VMOV     R0,S0
   \   0000006A   0x.... 0x....      BL       __aeabi_f2d
   \   0000006E   0x4602             MOV      R2,R0
   \   00000070   0x460B             MOV      R3,R1
   \   00000072   0x4640             MOV      R0,R8
   \   00000074   0x4649             MOV      R1,R9
   \   00000076   0x.... 0x....      BL       __aeabi_ddiv
   \   0000007A   0x.... 0x....      BL       __aeabi_d2f
   \   0000007E   0xEE08 0x0A90      VMOV     S17,R0
   \   00000082   0xEEB0 0x0A68      VMOV.F32 S0,S17
    256          		{
    257          		    /* spectrum m: Real[m] = (Sum(x[n]*cos(2*PI*m*n/N)) , where n from 0 -->N    */
    258          			Out[2*m] += x[n]*arm_cos_f32(2*PI*(float)m*(float)n/(float)N);
   \   00000086   0x.... 0x....      BL       arm_cos_f32
   \   0000008A   0xEDD7 0x0A00      VLDR     S1,[R7, #0]
   \   0000008E   0xED94 0x1A00      VLDR     S2,[R4, #0]
   \   00000092   0xEE00 0x1A80      VMLA.F32 S2,S1,S0
   \   00000096   0xED84 0x1A00      VSTR     S2,[R4, #0]
    259          
    260                      /* specstrum n: Imagine[m] = (Sum(x[n]*sin(2*PI*m*n/N) ,  where n from 0 -->N */			
    261          			Out[2*m+1] -= x[n]*arm_sin_f32(2*PI*(float)m*(float)n/(float)N);
   \   0000009A   0xEEB0 0x0A68      VMOV.F32 S0,S17
   \   0000009E   0x.... 0x....      BL       arm_sin_f32
   \   000000A2   0xEDD7 0x0A00      VLDR     S1,[R7, #0]
    262          		}
   \   000000A6   0x1D3F             ADDS     R7,R7,#+4
   \   000000A8   0xED94 0x1A01      VLDR     S2,[R4, #+4]
   \   000000AC   0x4556             CMP      R6,R10
   \   000000AE   0xEE00 0x1AC0      VMLS.F32 S2,S1,S0
   \   000000B2   0xED84 0x1A01      VSTR     S2,[R4, #+4]
   \   000000B6   0xDBB7             BLT.N    ??DFT_2
    263          
    264          	}
   \   000000B8   0x1C6D             ADDS     R5,R5,#+1
   \   000000BA   0x3408             ADDS     R4,R4,#+8
   \   000000BC   0x4555             CMP      R5,R10
   \   000000BE   0xDBAA             BLT.N    ??DFT_1
    265          }
   \                     ??DFT_0: (+1)
   \   000000C0   0xECBD 0x8B02      VPOP     {D8}
   \   000000C4   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    266          
    267          /* revert of Discrete Fourier Transform */

   \                                 In section .text, align 4, keep-with-next
    268          void rDFT(int N, int cycles, float *IN, float *out)
    269          {
   \                     rDFT: (+1)
   \   00000000   0xE92D 0x4FF4      PUSH     {R2,R4-R11,LR}
   \   00000004   0x4682             MOV      R10,R0
    270              int n,m;
    271          	
    272              for (n= 0; n < N; n++)
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xF1BA 0x0F01      CMP      R10,#+1
   \   0000000C   0x468B             MOV      R11,R1
   \   0000000E   0xED2D 0x8B06      VPUSH    {D8-D10}
   \   00000012   0xDB6F             BLT.N    ??rDFT_0
   \   00000014   0xEE00 0xAA10      VMOV     S0,R10
   \   00000018   0x461C             MOV      R4,R3
   \   0000001A   0xEEB8 0x8AC0      VCVT.F32.S32 S16,S0
    273          	{
    274                  float xOfn, xOfn_m; // temporary variable for the imagine and real 
    275          		
    276          		xOfn = xOfn_m = 0;
    277          
    278          		for (m = 0; m < N; m++)
   \                     ??rDFT_1: (+1)
   \   0000001E   0xEE00 0x5A10      VMOV     S0,R5
   \   00000022   0x2600             MOVS     R6,#+0
   \   00000024   0xED9F 0x....      VLDR.W   S18,??DataTable5  ;; 0x0
   \   00000028   0x9F06             LDR      R7,[SP, #+24]
   \   0000002A   0xEDDF 0x....      VLDR.W   S17,??DataTable5  ;; 0x0
   \   0000002E   0xEEF8 0x9AC0      VCVT.F32.S32 S19,S0
   \                     ??rDFT_2: (+1)
   \   00000032   0x4658             MOV      R0,R11
   \   00000034   0x.... 0x....      BL       __aeabi_i2d
   \   00000038   0x.... 0x....      LDR.W    R2,??DataTable12_1  ;; 0x5a7ed197
   \   0000003C   0x.... 0x....      LDR.W    R3,??DataTable12_2  ;; 0x401921fb
   \   00000040   0x.... 0x....      BL       __aeabi_dmul
   \   00000044   0xEE00 0x6A10      VMOV     S0,R6
   \   00000048   0x4680             MOV      R8,R0
   \   0000004A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000004E   0x4689             MOV      R9,R1
   \   00000050   0xEE10 0x0A10      VMOV     R0,S0
   \   00000054   0x1C76             ADDS     R6,R6,#+1
   \   00000056   0x.... 0x....      BL       __aeabi_f2d
   \   0000005A   0x4642             MOV      R2,R8
   \   0000005C   0x464B             MOV      R3,R9
   \   0000005E   0x.... 0x....      BL       __aeabi_dmul
   \   00000062   0x4680             MOV      R8,R0
   \   00000064   0x4689             MOV      R9,R1
   \   00000066   0xEE19 0x0A90      VMOV     R0,S19
   \   0000006A   0x.... 0x....      BL       __aeabi_f2d
   \   0000006E   0x4642             MOV      R2,R8
   \   00000070   0x464B             MOV      R3,R9
   \   00000072   0x.... 0x....      BL       __aeabi_dmul
   \   00000076   0x4680             MOV      R8,R0
   \   00000078   0x4689             MOV      R9,R1
   \   0000007A   0xEE18 0x0A10      VMOV     R0,S16
   \   0000007E   0x.... 0x....      BL       __aeabi_f2d
   \   00000082   0x4602             MOV      R2,R0
   \   00000084   0x460B             MOV      R3,R1
   \   00000086   0x4640             MOV      R0,R8
   \   00000088   0x4649             MOV      R1,R9
   \   0000008A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000008E   0x.... 0x....      BL       __aeabi_d2f
   \   00000092   0xEE0A 0x0A10      VMOV     S20,R0
   \   00000096   0xEEB0 0x0A4A      VMOV.F32 S0,S20
    279          		{
    280          		    xOfn += IN[2*m]*arm_cos_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   0000009A   0x.... 0x....      BL       arm_cos_f32
   \   0000009E   0xEDD7 0x0A00      VLDR     S1,[R7, #0]
   \   000000A2   0xEE40 0x8A80      VMLA.F32 S17,S1,S0
    281          		    xOfn -= IN[2*m+1]*arm_sin_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   000000A6   0xEEB0 0x0A4A      VMOV.F32 S0,S20
   \   000000AA   0x.... 0x....      BL       arm_sin_f32
   \   000000AE   0xEDD7 0x0A01      VLDR     S1,[R7, #+4]
   \   000000B2   0xEE40 0x8AC0      VMLS.F32 S17,S1,S0
    282          
    283                              xOfn_m += IN[2*m]*arm_cos_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   000000B6   0xEEB0 0x0A4A      VMOV.F32 S0,S20
   \   000000BA   0x.... 0x....      BL       arm_cos_f32
   \   000000BE   0xEDD7 0x0A00      VLDR     S1,[R7, #0]
   \   000000C2   0xEE00 0x9A80      VMLA.F32 S18,S1,S0
    284                              xOfn_m += IN[2*m+1]*arm_sin_f32(2*PI*cycles*(float)m*(float)n/(float)N);
   \   000000C6   0xEEB0 0x0A4A      VMOV.F32 S0,S20
   \   000000CA   0x.... 0x....      BL       arm_sin_f32
   \   000000CE   0xEDD7 0x0A01      VLDR     S1,[R7, #+4]
    285          		}
   \   000000D2   0x3708             ADDS     R7,R7,#+8
   \   000000D4   0x4556             CMP      R6,R10
   \   000000D6   0xEE00 0x9A80      VMLA.F32 S18,S1,S0
   \   000000DA   0xDBAA             BLT.N    ??rDFT_2
    286          
    287          	    xOfn /= N;
    288          		xOfn_m /= N;
    289          
    290                  out[n] = xOfn + xOfn_m; 
   \   000000DC   0xEE88 0x0A88      VDIV.F32 S0,S17,S16
   \   000000E0   0xEEC9 0x0A08      VDIV.F32 S1,S18,S16
   \   000000E4   0xEE30 0x0A20      VADD.F32 S0,S0,S1
    291          
    292          	}
   \   000000E8   0x1C6D             ADDS     R5,R5,#+1
   \   000000EA   0xED84 0x0A00      VSTR     S0,[R4, #0]
   \   000000EE   0x1D24             ADDS     R4,R4,#+4
   \   000000F0   0x4555             CMP      R5,R10
   \   000000F2   0xDB94             BLT.N    ??rDFT_1
    293          }
   \                     ??rDFT_0: (+1)
   \   000000F4   0xECBD 0x8B06      VPOP     {D8-D10}
   \   000000F8   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    294          
    295          /****************************** IIR filter *****************************************
    296          *a : point to a coefficiences
    297          AN: Number of a coefficiences
    298          *b : point to b coefficiences
    299          BN: Number of b coefficences
    300          *x: storage input and history of inputs
    301          *y: storage output and history of outpus
    302          index: position value in array of input and output
    303          
    304          ***********************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    305          void iirFilter(float* a, int AN, float* b, int BN, float* x, float* y, int index)
    306          {
   \                     iirFilter: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   \   00000002   0x9C05             LDR      R4,[SP, #+20]
    307              int loop;
    308          
    309              *(y+index) = 0;
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x9D06             LDR      R5,[SP, #+24]
    310              
    311              for (loop =0; loop < AN; loop++)
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xF844 0x6025      STR      R6,[R4, R5, LSL #+2]
   \   0000000E   0xDB16             BLT.N    ??iirFilter_0
   \   00000010   0x9E04             LDR      R6,[SP, #+16]
   \   00000012   0x462F             MOV      R7,R5
   \   00000014   0xEB04 0x0C85      ADD      R12,R4,R5, LSL #+2
   \   00000018   0xEB06 0x0685      ADD      R6,R6,R5, LSL #+2
    312              {
    313                  if ((index -loop) >= 0)
   \                     ??iirFilter_1: (+1)
   \   0000001C   0x2F00             CMP      R7,#+0
   \   0000001E   0xD409             BMI.N    ??iirFilter_2
    314          		{
    315          		    *(y+index) += *(a+loop)**(x + index - loop);
   \   00000020   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   00000024   0xEDD6 0x0A00      VLDR     S1,[R6, #0]
   \   00000028   0xED9C 0x1A00      VLDR     S2,[R12, #0]
   \   0000002C   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000030   0xED8C 0x1A00      VSTR     S2,[R12, #0]
    316          		}
    317              }
   \                     ??iirFilter_2: (+1)
   \   00000034   0x1D00             ADDS     R0,R0,#+4
   \   00000036   0x1E7F             SUBS     R7,R7,#+1
   \   00000038   0x1F36             SUBS     R6,R6,#+4
   \   0000003A   0x1E49             SUBS     R1,R1,#+1
   \   0000003C   0xD1EE             BNE.N    ??iirFilter_1
    318          
    319              for (loop = 1; loop <= BN; loop++)
   \                     ??iirFilter_0: (+1)
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x2B01             CMP      R3,#+1
   \   00000042   0xDB17             BLT.N    ??iirFilter_3
   \   00000044   0xEB04 0x0185      ADD      R1,R4,R5, LSL #+2
   \   00000048   0x1E6E             SUBS     R6,R5,#+1
   \   0000004A   0xEB04 0x0785      ADD      R7,R4,R5, LSL #+2
   \   0000004E   0x1F09             SUBS     R1,R1,#+4
    320              {
    321                  if ((index-loop) >=0)
   \                     ??iirFilter_4: (+1)
   \   00000050   0x2E00             CMP      R6,#+0
   \   00000052   0xD409             BMI.N    ??iirFilter_5
    322          		{
    323          		    *(y + index) +=  *(b + loop - 1)**(y+index-loop);
   \   00000054   0xED92 0x0A00      VLDR     S0,[R2, #0]
   \   00000058   0xEDD1 0x0A00      VLDR     S1,[R1, #0]
   \   0000005C   0xED97 0x1A00      VLDR     S2,[R7, #0]
   \   00000060   0xEE00 0x1A20      VMLA.F32 S2,S0,S1
   \   00000064   0xED87 0x1A00      VSTR     S2,[R7, #0]
    324          		}
    325              }	
   \                     ??iirFilter_5: (+1)
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0x1D12             ADDS     R2,R2,#+4
   \   0000006C   0x1E76             SUBS     R6,R6,#+1
   \   0000006E   0x1F09             SUBS     R1,R1,#+4
   \   00000070   0x4283             CMP      R3,R0
   \   00000072   0xDAED             BGE.N    ??iirFilter_4
    326          }
   \                     ??iirFilter_3: (+1)
   \   00000074   0xBCF0             POP      {R4-R7}
   \   00000076   0x4770             BX       LR               ;; return
    327          
    328          /** First Oder IIR Lowpass filter 
    329          *Input : input array
    330          *Output: output array
    331          size: number of elements need to update
    332          K: T/dT
    333             T is time constance
    334             dT duration of sampleing 
    335             K= 64
    336          
    337          *****************************8*/
    338          
    339          

   \                                 In section .text, align 2, keep-with-next
    340          void LowPass(int16_t *Input, int16_t *Output, uint16_t Size, uint16_t K)
    341          {
   \                     LowPass: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
    342              
    343              static	int16_t Out_Old;
    344          	int16_t Out=0;
    345          
    346          	for(uint16_t i=0; i<Size; i++)
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable13
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xF04F 0x0C00      MOV      R12,#+0
   \   0000000E   0xF9B4 0x5000      LDRSH    R5,[R4, #+0]
   \   00000012   0xD03E             BEQ.N    ??LowPass_0
   \   00000014   0x.... 0x....      LDR.W    R9,??DataTable13_1  ;; 0xffff8000
   \   00000018   0xF647 0x77FF      MOVW     R7,#+32767
    347          	{
    348                  Out = ADD_S16(Out_Old,SUB_S16(*(Input+i), Out_Old)/K);
   \                     ??LowPass_1: (+1)
   \   0000001C   0xF9B0 0xE000      LDRSH    LR,[R0, #+0]
   \   00000020   0xB22D             SXTH     R5,R5
   \   00000022   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000026   0xD406             BMI.N    ??LowPass_2
   \   00000028   0x2D00             CMP      R5,#+0
   \   0000002A   0xD50C             BPL.N    ??LowPass_3
   \   0000002C   0x197E             ADDS     R6,R7,R5
   \   0000002E   0x4576             CMP      R6,LR
   \   00000030   0xDA09             BGE.N    ??LowPass_3
   \   00000032   0x46BE             MOV      LR,R7
   \   00000034   0xE009             B.N      ??LowPass_4
   \                     ??LowPass_2: (+1)
   \   00000036   0x2D01             CMP      R5,#+1
   \   00000038   0xDB05             BLT.N    ??LowPass_3
   \   0000003A   0xF5A5 0x4600      SUB      R6,R5,#+32768
   \   0000003E   0x45B6             CMP      LR,R6
   \   00000040   0xBFB8             IT       LT 
   \   00000042   0x46CE             MOVLT    LR,R9
   \   00000044   0xDB01             BLT.N    ??LowPass_4
   \                     ??LowPass_3: (+1)
   \   00000046   0xEBAE 0x0E05      SUB      LR,LR,R5
   \                     ??LowPass_4: (+1)
   \   0000004A   0xFA0F 0xFE8E      SXTH     LR,LR
   \   0000004E   0x2D00             CMP      R5,#+0
   \   00000050   0xFB9E 0xFEF3      SDIV     LR,LR,R3
   \   00000054   0xBF5C             ITT      PL 
   \   00000056   0xFA0F 0xFE8E      SXTHPL   LR,LR
   \   0000005A   0xF1BE 0x0F00      CMPPL    LR,#+0
   \   0000005E   0xD405             BMI.N    ??LowPass_5
   \   00000060   0xEBA7 0x080E      SUB      R8,R7,LR
   \   00000064   0x45A8             CMP      R8,R5
   \   00000066   0xDA0E             BGE.N    ??LowPass_6
   \   00000068   0x46BC             MOV      R12,R7
   \   0000006A   0xE00E             B.N      ??LowPass_7
   \                     ??LowPass_5: (+1)
   \   0000006C   0x2D00             CMP      R5,#+0
   \   0000006E   0xBF44             ITT      MI 
   \   00000070   0xFA0F 0xFE8E      SXTHMI   LR,LR
   \   00000074   0xF1BE 0x0F00      CMPMI    LR,#+0
   \   00000078   0xD505             BPL.N    ??LowPass_6
   \   0000007A   0xEBA9 0x080E      SUB      R8,R9,LR
   \   0000007E   0x4545             CMP      R5,R8
   \   00000080   0xBFB8             IT       LT 
   \   00000082   0x46CC             MOVLT    R12,R9
   \   00000084   0xDB01             BLT.N    ??LowPass_7
   \                     ??LowPass_6: (+1)
   \   00000086   0xEB0E 0x0C05      ADD      R12,LR,R5
    349          		Out_Old = Out;
    350          	}
   \                     ??LowPass_7: (+1)
   \   0000008A   0x1C80             ADDS     R0,R0,#+2
   \   0000008C   0x1E52             SUBS     R2,R2,#+1
   \   0000008E   0x4665             MOV      R5,R12
   \   00000090   0xD1C4             BNE.N    ??LowPass_1
    351          
    352          	*Output = 30*Out;
   \                     ??LowPass_0: (+1)
   \   00000092   0xEBCC 0x100C      RSB      R0,R12,R12, LSL #+4
   \   00000096   0x8025             STRH     R5,[R4, #+0]
   \   00000098   0x0040             LSLS     R0,R0,#+1
   \   0000009A   0x8008             STRH     R0,[R1, #+0]
    353          
    354          }
   \   0000009C   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return

   \                                 In section .bss, align 2
   \                     ??Out_Old:
   \   00000000                      DS8 2
    355          
    356          #ifdef FLOATING_POINT
    357          void LowPass2ndOder(int16_t *Input, int16_t *Output, uint16_t Size)
    358          {
    359              double Out=0;
    360          	static  int16_t InOld, InOld1;
    361          	static	double Out_Old, Out_Old1;
    362                  uint16_t i;
    363          	 
    364              for(i=0; i<Size; i++)
    365          	{
    366          
    367           	
    368          	  if (i>0)
    369          	  {
    370          	    InOld1 = InOld;
    371          	  	InOld = Input[i-1];
    372          	  }
    373          	  	   
    374          
    375          	  	Out = (B0*Input[i]) + (B1*InOld) + (B2*InOld1)-(A1*Out_Old) - (A2*Out_Old1);
    376          	  
    377          	    Out_Old1 = Out_Old;
    378          		Out_Old = Out;
    379          	}
    380          
    381          	*Output = (int16_t)Out;
    382          
    383              InOld1 = InOld;
    384          	InOld = Input[i-1];
    385          
    386          
    387          
    388          }
    389          
    390          #else

   \                                 In section .text, align 2, keep-with-next
    391          void LowPass2ndOder(int16_t *Input, int16_t *Output, uint16_t Size)
    392          {
   \                     LowPass2ndOder: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
    393              int16_t Out=0;
    394          	static  int16_t InOld, InOld1;
    395          	static	int16_t Out_Old, Out_Old1;
    396                  uint16_t i;
    397          	 
    398              for(i=0; i<Size; i++)
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable13_2
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0xF9B4 0x8002      LDRSH    R8,[R4, #+2]
   \   00000010   0xF9B4 0x9000      LDRSH    R9,[R4, #+0]
   \   00000014   0xF9B4 0xA004      LDRSH    R10,[R4, #+4]
   \   00000018   0xF9B4 0x6006      LDRSH    R6,[R4, #+6]
   \   0000001C   0xB31A             CBZ.N    R2,??LowPass2ndOder_0
   \   0000001E   0x4683             MOV      R11,R0
   \   00000020   0xF242 0x4C6A      MOVW     R12,#+9322
   \   00000024   0x.... 0x....      LDR.W    LR,??DataTable15  ;; 0xffffb486
   \   00000028   0xE003             B.N      ??LowPass2ndOder_1
    399          	{
    400          
    401           	
    402          	  if (i>0)
   \                     ??LowPass2ndOder_2: (+1)
   \   0000002A   0xB113             CBZ.N    R3,??LowPass2ndOder_1
    403          	  {
    404          	    InOld1 = InOld;
   \   0000002C   0x46C8             MOV      R8,R9
    405          	  	InOld = Input[i-1];
   \   0000002E   0xF93B 0x9C02      LDRSH    R9,[R11, #-2]
    406          	  }
    407          	  	   
    408          
    409          	  	Out = (int16_t)(((int32_t)(B0*Input[i]) + (int32_t)(B1*InOld) + (int32_t)(B2*InOld1)-(int32_t)(A1*Out_Old) - (int32_t)(A2*Out_Old1))/10000) ;
   \                     ??LowPass2ndOder_1: (+1)
   \   00000032   0xF93B 0x5B02      LDRSH    R5,[R11], #+2
   \   00000036   0xFB16 0xF60C      SMULBB   R6,R6,R12
    410          	  
    411          	    Out_Old1 = Out_Old;
    412          		Out_Old = Out;
    413          	}
   \   0000003A   0x1C5B             ADDS     R3,R3,#+1
   \   0000003C   0xEB08 0x0705      ADD      R7,R8,R5
   \   00000040   0xEB07 0x0547      ADD      R5,R7,R7, LSL #+1
   \   00000044   0xEB09 0x0749      ADD      R7,R9,R9, LSL #+1
   \   00000048   0x00BF             LSLS     R7,R7,#+2
   \   0000004A   0xEB07 0x0545      ADD      R5,R7,R5, LSL #+1
   \   0000004E   0xFB1A 0xF70E      SMULBB   R7,R10,LR
   \   00000052   0x1BED             SUBS     R5,R5,R7
   \   00000054   0x1BAE             SUBS     R6,R5,R6
   \   00000056   0xF242 0x7510      MOVW     R5,#+10000
   \   0000005A   0x4293             CMP      R3,R2
   \   0000005C   0xFB96 0xF5F5      SDIV     R5,R6,R5
   \   00000060   0x4656             MOV      R6,R10
   \   00000062   0x46AA             MOV      R10,R5
   \   00000064   0xDBE1             BLT.N    ??LowPass2ndOder_2
   \                     ??LowPass2ndOder_0: (+1)
   \   00000066   0x....             B.N      ?Subroutine0
    414          
    415          	*Output = (int16_t)Out;
    416          
    417              InOld1 = InOld;
    418          	InOld = Input[i-1];
    419          
    420          
    421          
    422          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x80E6             STRH     R6,[R4, #+6]
   \   00000002   0xEB00 0x0043      ADD      R0,R0,R3, LSL #+1
   \   00000006   0xF8A4 0xA004      STRH     R10,[R4, #+4]
   \   0000000A   0x800D             STRH     R5,[R1, #+0]
   \   0000000C   0xF8A4 0x9002      STRH     R9,[R4, #+2]
   \   00000010   0xF830 0x0C02      LDRH     R0,[R0, #-2]
   \   00000014   0x8020             STRH     R0,[R4, #+0]
   \   00000016   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .bss, align 2
   \                     ??InOld:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   00000004                      DS8 2
   \   00000006                      DS8 2
    423          
    424          #endif
    425          
    426          
    427          
    428          

   \                                 In section .text, align 2, keep-with-next
    429          void LowPass2ndOder_1(int16_t *Input, int16_t *Output, uint16_t Size)
    430          {
   \                     LowPass2ndOder_1: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
    431              int16_t Out=0;
    432          	static  int16_t InOld, InOld1;
    433          	static	int16_t Out_Old, Out_Old1;
    434                  uint16_t i;
    435          	 
    436              for(i=0; i<Size; i++)
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable14
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0xF9B4 0x8002      LDRSH    R8,[R4, #+2]
   \   00000010   0xF9B4 0x9000      LDRSH    R9,[R4, #+0]
   \   00000014   0xF9B4 0xA004      LDRSH    R10,[R4, #+4]
   \   00000018   0xF9B4 0x6006      LDRSH    R6,[R4, #+6]
   \   0000001C   0xB31A             CBZ.N    R2,??LowPass2ndOder_1_0
   \   0000001E   0x4683             MOV      R11,R0
   \   00000020   0xF242 0x4C6A      MOVW     R12,#+9322
   \   00000024   0x.... 0x....      LDR.W    LR,??DataTable15  ;; 0xffffb486
   \   00000028   0xE003             B.N      ??LowPass2ndOder_1_1
    437          	{
    438          
    439           	
    440          	  if (i>0)
   \                     ??LowPass2ndOder_1_2: (+1)
   \   0000002A   0xB113             CBZ.N    R3,??LowPass2ndOder_1_1
    441          	  {
    442          	    InOld1 = InOld;
   \   0000002C   0x46C8             MOV      R8,R9
    443          	  	InOld = Input[i-1];
   \   0000002E   0xF93B 0x9C02      LDRSH    R9,[R11, #-2]
    444          	  } 
    445          	  	   
    446          
    447          	  	Out = (int16_t)(((int32_t)(B0*Input[i]) + (int32_t)(B1*InOld) + (int32_t)(B2*InOld1)-(int32_t)(A1*Out_Old) - (int32_t)(A2*Out_Old1))/1000) ; /* gain 10) */
   \                     ??LowPass2ndOder_1_1: (+1)
   \   00000032   0xF93B 0x5B02      LDRSH    R5,[R11], #+2
   \   00000036   0xFB16 0xF60C      SMULBB   R6,R6,R12
    448          	  
    449          	    Out_Old1 = Out_Old;
    450          		Out_Old = Out;
    451          	}
   \   0000003A   0x1C5B             ADDS     R3,R3,#+1
   \   0000003C   0xEB08 0x0705      ADD      R7,R8,R5
   \   00000040   0xEB07 0x0547      ADD      R5,R7,R7, LSL #+1
   \   00000044   0xEB09 0x0749      ADD      R7,R9,R9, LSL #+1
   \   00000048   0x00BF             LSLS     R7,R7,#+2
   \   0000004A   0xEB07 0x0545      ADD      R5,R7,R5, LSL #+1
   \   0000004E   0xFB1A 0xF70E      SMULBB   R7,R10,LR
   \   00000052   0x1BED             SUBS     R5,R5,R7
   \   00000054   0x1BAE             SUBS     R6,R5,R6
   \   00000056   0xF44F 0x757A      MOV      R5,#+1000
   \   0000005A   0x4293             CMP      R3,R2
   \   0000005C   0xFB96 0xF5F5      SDIV     R5,R6,R5
   \   00000060   0x4656             MOV      R6,R10
   \   00000062   0x46AA             MOV      R10,R5
   \   00000064   0xDBE1             BLT.N    ??LowPass2ndOder_1_2
   \                     ??LowPass2ndOder_1_0: (+1)
   \   00000066                      REQUIRE ?Subroutine0
   \   00000066                      ;; // Fall through to label ?Subroutine0
    452          
    453          	*Output = (int16_t)Out;
    454          
    455              InOld1 = InOld;
    456          	InOld = Input[i-1];
    457          
    458          
    459          	
    460          }

   \                                 In section .bss, align 2
   \                     ??InOld_1:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   00000004                      DS8 2
   \   00000006                      DS8 2
    461          
    462          /* K = dT/T */

   \                                 In section .text, align 2, keep-with-next
    463          void LowPassIIR(int16_t *Input, int16_t *Output,int16_t *OutOld, uint16_t Size, uint16_t K)
    464          {
    465              
    466              //static	int16_t OutOld;
    467          
    468          	for(uint16_t i=0; i<Size; i++)
   \                     LowPassIIR: (+1)
   \   00000000   0xB903             CBNZ.N   R3,??LowPassIIR_0
   \   00000002   0x4770             BX       LR
   \                     ??LowPassIIR_0: (+1)
   \   00000004   0xE92D 0x45F8      PUSH     {R3-R8,R10,LR}
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable13_1  ;; 0xffff8000
   \   0000000C   0xF647 0x78FF      MOVW     R8,#+32767
   \   00000010   0x9C08             LDR      R4,[SP, #+32]
    469          	{
    470                  *(Output+i) = ADD_S16(*OutOld , SUB_S16(*(Input+i),*OutOld)/(K));
   \                     ??LowPassIIR_1: (+1)
   \   00000012   0xF9B0 0x6000      LDRSH    R6,[R0, #+0]
   \   00000016   0xF9B2 0xC000      LDRSH    R12,[R2, #+0]
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD408             BMI.N    ??LowPassIIR_2
   \   0000001E   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000022   0xD50E             BPL.N    ??LowPassIIR_3
   \   00000024   0xEB08 0x0A0C      ADD      R10,R8,R12
   \   00000028   0x45B2             CMP      R10,R6
   \   0000002A   0xDA0A             BGE.N    ??LowPassIIR_3
   \   0000002C   0x46C6             MOV      LR,R8
   \   0000002E   0xE00A             B.N      ??LowPassIIR_4
   \                     ??LowPassIIR_2: (+1)
   \   00000030   0xF1BC 0x0F01      CMP      R12,#+1
   \   00000034   0xDB05             BLT.N    ??LowPassIIR_3
   \   00000036   0xF5AC 0x4A00      SUB      R10,R12,#+32768
   \   0000003A   0x4556             CMP      R6,R10
   \   0000003C   0xBFB8             IT       LT 
   \   0000003E   0x46AE             MOVLT    LR,R5
   \   00000040   0xDB01             BLT.N    ??LowPassIIR_4
   \                     ??LowPassIIR_3: (+1)
   \   00000042   0xEBA6 0x0E0C      SUB      LR,R6,R12
   \                     ??LowPassIIR_4: (+1)
   \   00000046   0xFA0F 0xFE8E      SXTH     LR,LR
   \   0000004A   0xF1BC 0x0F00      CMP      R12,#+0
   \   0000004E   0xFB9E 0xFEF4      SDIV     LR,LR,R4
   \   00000052   0xBF5C             ITT      PL 
   \   00000054   0xFA0F 0xFE8E      SXTHPL   LR,LR
   \   00000058   0xF1BE 0x0F00      CMPPL    LR,#+0
   \   0000005C   0xD405             BMI.N    ??LowPassIIR_5
   \   0000005E   0xEBA8 0x060E      SUB      R6,R8,LR
   \   00000062   0x4566             CMP      R6,R12
   \   00000064   0xDA0F             BGE.N    ??LowPassIIR_6
   \   00000066   0x4647             MOV      R7,R8
   \   00000068   0xE00F             B.N      ??LowPassIIR_7
   \                     ??LowPassIIR_5: (+1)
   \   0000006A   0xF1BC 0x0F00      CMP      R12,#+0
   \   0000006E   0xBF44             ITT      MI 
   \   00000070   0xFA0F 0xFE8E      SXTHMI   LR,LR
   \   00000074   0xF1BE 0x0F00      CMPMI    LR,#+0
   \   00000078   0xD505             BPL.N    ??LowPassIIR_6
   \   0000007A   0xEBA5 0x060E      SUB      R6,R5,LR
   \   0000007E   0x45B4             CMP      R12,R6
   \   00000080   0xBFB8             IT       LT 
   \   00000082   0x462F             MOVLT    R7,R5
   \   00000084   0xDB01             BLT.N    ??LowPassIIR_7
   \                     ??LowPassIIR_6: (+1)
   \   00000086   0xEB0E 0x070C      ADD      R7,LR,R12
   \                     ??LowPassIIR_7: (+1)
   \   0000008A   0x800F             STRH     R7,[R1, #+0]
    471          		*OutOld = *(Output+i);
   \   0000008C   0xF831 0x7B02      LDRH     R7,[R1], #+2
    472          	}
   \   00000090   0x1C80             ADDS     R0,R0,#+2
   \   00000092   0x1E5B             SUBS     R3,R3,#+1
   \   00000094   0x8017             STRH     R7,[R2, #+0]
   \   00000096   0xD1BC             BNE.N    ??LowPassIIR_1
    473          }
   \   00000098   0xE8BD 0x85F1      POP      {R0,R4-R8,R10,PC}  ;; return
    474          
    475          

   \                                 In section .text, align 4, keep-with-next
    476          void Decimation(uint8_t *Input, int16_t *Output, int16_t PreCalcBuff[129][256]) //128 bytes input 32 bytes output
    477          {
   \                     Decimation: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xF5AD 0x7D02      SUB      SP,SP,#+520
   \   00000008   0x4605             MOV      R5,R0
   \   0000000A   0x460C             MOV      R4,R1
    478              uint8_t test, IndexIn=0;
    479              int16_t Sigma;
    480          	static int16_t OutRing[129];
    481          	static int16_t iRing=0;
    482          //	static int32_t TempU32;
    483          	static float Data, Data_Old;
    484          	float Coef[129] = { 
    485          -0.000  ,-1.560  ,-2.990  ,-4.104  ,-4.722  ,-4.683  ,-3.880  ,-2.288  ,0.000  ,2.755 ,
    486          5.609  ,8.085  ,9.660  ,9.851  ,8.317  ,4.960  ,-0.000  ,-6.000  ,-12.166  ,-17.414 ,
    487          -20.614  ,-20.795  ,-17.350  ,-10.219  ,0.000  ,12.048  ,24.119  ,34.098  ,39.884  ,39.773 ,
    488          32.823  ,19.134  ,-0.000  ,-22.146  ,-43.977  ,-61.716  ,-71.720  ,-71.119  ,-58.413  ,-33.924 ,
    489          0.000  ,39.086  ,77.572  ,108.935  ,126.848  ,126.222  ,104.203  ,60.939  ,-0.000  ,-71.661 ,
    490          -144.245  ,-206.111  ,-245.139  ,-250.303  ,-213.240  ,-129.604  ,0.000  ,169.645  ,368.369  ,581.105 ,
    491          790.173  ,977.157  ,1124.942  ,1219.655  ,1252.270  ,1219.655  ,1124.942  ,977.157  ,790.173  ,581.105 ,
    492          368.369  ,169.645  ,0.000  ,-129.604  ,-213.240  ,-250.303  ,-245.139  ,-206.111  ,-144.245  ,-71.661 ,
    493          -0.000  ,60.939  ,104.203  ,126.222  ,126.848  ,108.935  ,77.572  ,39.086  ,0.000  ,-33.924 ,
    494          -58.413  ,-71.119  ,-71.720  ,-61.716  ,-43.977  ,-22.146  ,-0.000  ,19.134  ,32.823  ,39.773 ,
    495          39.884  ,34.098  ,24.119  ,12.048  ,0.000  ,-10.219  ,-17.350  ,-20.795  ,-20.614  ,-17.414 ,
    496          -12.166  ,-6.000  ,-0.000  ,4.960  ,8.317  ,9.851  ,9.660  ,8.085  ,5.609  ,2.755 ,
    497          0.000  ,-2.288  ,-3.880  ,-4.683  ,-4.722  ,-4.104  ,-2.990  ,-1.560  ,-0.000  };
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x.... 0x....      ADR.W    R1,?_0
   \   00000012   0xF44F 0x7201      MOV      R2,#+516
   \   00000016   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000001A   0x2600             MOVS     R6,#+0
    498          
    499          	for (uint8_t i=0;i<16; i++) //index of output sample 16 ouput
   \   0000001C   0x2010             MOVS     R0,#+16
   \   0000001E   0xED9F 0x....      VLDR.W   S0,??DataTable8  ;; 0xc2c80000
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable15_1
   \   00000026   0xEDDF 0x....      VLDR.W   S1,??DataTable8_1  ;; 0x42c80000
    500          	{
    501          
    502          	   Sigma = 0;
   \                     ??Decimation_0: (+1)
   \   0000002A   0x2700             MOVS     R7,#+0
    503          	   
    504          
    505          	   for (uint8_t j=0; j<8; j++)  // load byte by byte from Input array 8
   \   0000002C   0x2208             MOVS     R2,#+8
    506          	   {
    507          	       test = Input[IndexIn++];
   \                     ??Decimation_1: (+1)
   \   0000002E   0xB2F6             UXTB     R6,R6
    508          		   
    509          		   for (uint8_t k=0; k<8; k++)  // this loop for 1 byte
   \   00000030   0xED91 0x1A42      VLDR     S2,[R1, #+264]
   \   00000034   0xF04F 0x0C08      MOV      R12,#+8
   \   00000038   0x5D73             LDRB     R3,[R6, R5]
   \   0000003A   0x1C76             ADDS     R6,R6,#+1
    510          		   {
    511               			if ((test&0x01)==0x01)
   \                     ??Decimation_2: (+1)
   \   0000003C   0xEA5F 0x7EC3      LSLS     LR,R3,#+31
    512               			{
    513               			    //Sigma +=2;
    514               			    Data = Data_Old + (100 - Data_Old)/200;	
    515               			}
    516               			else
    517               			{
    518               			    //Sigma -=2;
    519          					Data = Data_Old + (-100 - Data_Old)/200;		
   \   00000040   0xED9F 0x....      VLDR.W   S4,??DataTable8_2  ;; 0x43480000
   \   00000044   0xBF4C             ITE      MI 
   \   00000046   0xEE70 0x1AC1      VSUBMI.F32 S3,S1,S2
   \   0000004A   0xEE70 0x1A41      VSUBPL.F32 S3,S0,S2
   \   0000004E   0xEEC1 0x1A82      VDIV.F32 S3,S3,S4
   \   00000052   0xEE31 0x1A81      VADD.F32 S2,S3,S2
    520               			}
    521          
    522          				Data_Old = Data;
    523          
    524          				Sigma += (int16_t)(Data); 
    525               
    526               			test >>= 1; /* go to next bit in "test" to convolution */
   \   00000056   0x085B             LSRS     R3,R3,#+1
   \   00000058   0xEEFD 0x1AC1      VCVT.S32.F32 S3,S2
    527          		   }
   \   0000005C   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   00000060   0xEE11 0xEA90      VMOV     LR,S3
   \   00000064   0xFA07 0xF78E      SXTAH    R7,R7,LR
   \   00000068   0xD1E8             BNE.N    ??Decimation_2
    528          		   
    529          	   }
   \   0000006A   0x1E52             SUBS     R2,R2,#+1
   \   0000006C   0xED81 0x1A42      VSTR     S2,[R1, #+264]
   \   00000070   0xD1DD             BNE.N    ??Decimation_1
    530          	   
    531          	   OutRing[iRing] = Sigma;
   \   00000072   0x5E8A             LDRSH    R2,[R1, R2]
    532          	   //if (OutRing[iRing] > 127)
    533          	   //{
    534                 //    OutRing[iRing] = 127;
    535          	   //}
    536          	   //else if (OutRing[iRing] < -128)
    537          	   //{
    538                 //    OutRing[iRing] = -128;
    539          	   //}
    540          	   //else
    541          	   //{
    542          	   //    ;
    543          	   //}
    544          	   
    545          
    546                 Output[i] = 0;
    547          
    548             
    549                 for(int16_t ii=0; ii<129;ii++)
   \   00000074   0x46E8             MOV      R8,SP
   \   00000076   0xEB01 0x0E42      ADD      LR,R1,R2, LSL #+1
   \   0000007A   0xF8AE 0x7004      STRH     R7,[LR, #+4]
   \   0000007E   0x2700             MOVS     R7,#+0
   \   00000080   0xF10E 0x0C04      ADD      R12,LR,#+4
   \   00000084   0x8027             STRH     R7,[R4, #+0]
   \   00000086   0xF50E 0x7E83      ADD      LR,LR,#+262
    550                 {
    551                     if (iRing >= ii)
   \                     ??Decimation_3: (+1)
   \   0000008A   0x42BA             CMP      R2,R7
   \   0000008C   0xED98 0x1A00      VLDR     S2,[R8, #0]
   \   00000090   0xF9B4 0x9000      LDRSH    R9,[R4, #+0]
    552                         Output[i] = Output[i] + (int16_t)(OutRing[iRing - ii]*Coef[ii]);//PreCalcBuff[ii][(OutRing[iRing - ii]+128)]; //(OutRing[iRing - ii]*Coef[ii])
    553                     else
    554                         Output[i] = Output[i] + (int16_t)(OutRing[129 + iRing - ii]*Coef[ii]);//PreCalcBuff[ii][(OutRing[129 + iRing - ii]+128)];  // (OutRing[129 + iRing - ii]*Coef[ii])
    555          		  	   
    556                 }
   \   00000094   0xF108 0x0804      ADD      R8,R8,#+4
   \   00000098   0xBFAC             ITE      GE 
   \   0000009A   0xF9BC 0xA000      LDRSHGE  R10,[R12, #+0]
   \   0000009E   0xF9BE 0xA000      LDRSHLT  R10,[LR, #+0]
   \   000000A2   0xEE01 0xAA90      VMOV     S3,R10
   \   000000A6   0x1C7F             ADDS     R7,R7,#+1
   \   000000A8   0xEEF8 0x1AE1      VCVT.F32.S32 S3,S3
   \   000000AC   0x2F81             CMP      R7,#+129
   \   000000AE   0xEE21 0x1A81      VMUL.F32 S2,S3,S2
   \   000000B2   0xF1AE 0x0E02      SUB      LR,LR,#+2
   \   000000B6   0xEEBD 0x1AC1      VCVT.S32.F32 S2,S2
   \   000000BA   0xF1AC 0x0C02      SUB      R12,R12,#+2
   \   000000BE   0xEE11 0xAA10      VMOV     R10,S2
   \   000000C2   0x44D1             ADD      R9,R10,R9
   \   000000C4   0xF8A4 0x9000      STRH     R9,[R4, #+0]
   \   000000C8   0xDBDF             BLT.N    ??Decimation_3
    557                 
    558          	   
    559                 iRing++;             
   \   000000CA   0x1C52             ADDS     R2,R2,#+1
    560                 if (iRing==129) iRing = 0;  
   \   000000CC   0xB212             SXTH     R2,R2
   \   000000CE   0x2A81             CMP      R2,#+129
   \   000000D0   0xBF08             IT       EQ 
   \   000000D2   0x2200             MOVEQ    R2,#+0
    561          
    562          	}
   \   000000D4   0x1CA4             ADDS     R4,R4,#+2
   \   000000D6   0x1E40             SUBS     R0,R0,#+1
   \   000000D8   0x800A             STRH     R2,[R1, #+0]
   \   000000DA   0xD1A6             BNE.N    ??Decimation_0
    563          }
   \   000000DC   0xF50D 0x7D02      ADD      SP,SP,#+520
   \   000000E0   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return

   \                                 In section .bss, align 4
   \                     ??iRing:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   00000004                      DS8 260
   \   00000108                      DS8 4

   \                                 In section .bss, align 4
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x80000000         DC32 80000000H, 0BFC7AE14H, 0C03F5C29H, 0C08353F8H, 0C0971AA0H
   \              0xBFC7AE14   
   \              0xC03F5C29   
   \              0xC08353F8   
   \              0xC0971AA0   
   \   00000014   0xC095DB23         DC32 0C095DB23H, 0C07851ECH, 0C0126E98H, 0H, 403051ECH, 40B37CEEH
   \              0xC07851EC   
   \              0xC0126E98   
   \              0x00000000   
   \              0x403051EC   
   \              0x40B37CEE   
   \   0000002C   0x41015C29         DC32 41015C29H, 411A8F5CH, 411D9DB2H, 4105126FH, 409EB852H, 80000000H
   \              0x411A8F5C   
   \              0x411D9DB2   
   \              0x4105126F   
   \              0x409EB852   
   \              0x80000000   
   \   00000044   0xC0C00000         DC32 0C0C00000H, 0C142A7F0H, 0C18B4FDFH, 0C1A4E979H, 0C1A65C29H
   \              0xC142A7F0   
   \              0xC18B4FDF   
   \              0xC1A4E979   
   \              0xC1A65C29   
   \   00000058   0xC18ACCCD         DC32 0C18ACCCDH, 0C1238106H, 0H, 4140C49CH, 41C0F3B6H, 4208645AH
   \              0xC1238106   
   \              0x00000000   
   \              0x4140C49C   
   \              0x41C0F3B6   
   \              0x4208645A   
   \   00000070   0x421F8937         DC32 421F8937H, 421F178DH, 42034AC1H, 4199126FH, 80000000H, 0C1B12B02H
   \              0x421F178D   
   \              0x42034AC1   
   \              0x4199126F   
   \              0x80000000   
   \              0xC1B12B02   
   \   00000088   0xC22FE873         DC32 0C22FE873H, 0C276DD2FH, 0C28F70A4H, 0C28E3CEEH, 0C269A6E9H
   \              0xC276DD2F   
   \              0xC28F70A4   
   \              0xC28E3CEE   
   \              0xC269A6E9   
   \   0000009C   0xC207B22D         DC32 0C207B22DH, 0H, 421C5810H, 429B24DDH, 42D9DEB8H, 42FDB22DH
   \              0x00000000   
   \              0x421C5810   
   \              0x429B24DD   
   \              0x42D9DEB8   
   \              0x42FDB22D   
   \   000000B4   0x42FC71AA         DC32 42FC71AAH, 42D067F0H, 4273C189H, 80000000H, 0C28F526FH, 0C3103EB8H
   \              0x42D067F0   
   \              0x4273C189   
   \              0x80000000   
   \              0xC28F526F   
   \              0xC3103EB8   
   \   000000CC   0xC34E1C6A         DC32 0C34E1C6AH, 0C3752396H, 0C37A4D91H, 0C3553D71H, 0C3019AA0H, 0H
   \              0xC3752396   
   \              0xC37A4D91   
   \              0xC3553D71   
   \              0xC3019AA0   
   \              0x00000000   
   \   000000E4   0x4329A51F         DC32 4329A51FH, 43B82F3BH, 441146B8H, 44458B12H, 44744A0CH, 448C9E25H
   \              0x43B82F3B   
   \              0x441146B8   
   \              0x44458B12   
   \              0x44744A0C   
   \              0x448C9E25   
   \   000000FC   0x449874F6         DC32 449874F6H, 449C88A4H, 449874F6H, 448C9E25H, 44744A0CH, 44458B12H
   \              0x449C88A4   
   \              0x449874F6   
   \              0x448C9E25   
   \              0x44744A0C   
   \              0x44458B12   
   \   00000114   0x441146B8         DC32 441146B8H, 43B82F3BH, 4329A51FH, 0H, 0C3019AA0H, 0C3553D71H
   \              0x43B82F3B   
   \              0x4329A51F   
   \              0x00000000   
   \              0xC3019AA0   
   \              0xC3553D71   
   \   0000012C   0xC37A4D91         DC32 0C37A4D91H, 0C3752396H, 0C34E1C6AH, 0C3103EB8H, 0C28F526FH
   \              0xC3752396   
   \              0xC34E1C6A   
   \              0xC3103EB8   
   \              0xC28F526F   
   \   00000140   0x80000000         DC32 80000000H, 4273C189H, 42D067F0H, 42FC71AAH, 42FDB22DH, 42D9DEB8H
   \              0x4273C189   
   \              0x42D067F0   
   \              0x42FC71AA   
   \              0x42FDB22D   
   \              0x42D9DEB8   
   \   00000158   0x429B24DD         DC32 429B24DDH, 421C5810H, 0H, 0C207B22DH, 0C269A6E9H, 0C28E3CEEH
   \              0x421C5810   
   \              0x00000000   
   \              0xC207B22D   
   \              0xC269A6E9   
   \              0xC28E3CEE   
   \   00000170   0xC28F70A4         DC32 0C28F70A4H, 0C276DD2FH, 0C22FE873H, 0C1B12B02H, 80000000H
   \              0xC276DD2F   
   \              0xC22FE873   
   \              0xC1B12B02   
   \              0x80000000   
   \   00000184   0x4199126F         DC32 4199126FH, 42034AC1H, 421F178DH, 421F8937H, 4208645AH, 41C0F3B6H
   \              0x42034AC1   
   \              0x421F178D   
   \              0x421F8937   
   \              0x4208645A   
   \              0x41C0F3B6   
   \   0000019C   0x4140C49C         DC32 4140C49CH, 0H, 0C1238106H, 0C18ACCCDH, 0C1A65C29H, 0C1A4E979H
   \              0x00000000   
   \              0xC1238106   
   \              0xC18ACCCD   
   \              0xC1A65C29   
   \              0xC1A4E979   
   \   000001B4   0xC18B4FDF         DC32 0C18B4FDFH, 0C142A7F0H, 0C0C00000H, 80000000H, 409EB852H
   \              0xC142A7F0   
   \              0xC0C00000   
   \              0x80000000   
   \              0x409EB852   
   \   000001C8   0x4105126F         DC32 4105126FH, 411D9DB2H, 411A8F5CH, 41015C29H, 40B37CEEH, 403051ECH
   \              0x411D9DB2   
   \              0x411A8F5C   
   \              0x41015C29   
   \              0x40B37CEE   
   \              0x403051EC   
   \   000001E0   0x00000000         DC32 0H, 0C0126E98H, 0C07851ECH, 0C095DB23H, 0C0971AA0H, 0C08353F8H
   \              0xC0126E98   
   \              0xC07851EC   
   \              0xC095DB23   
   \              0xC0971AA0   
   \              0xC08353F8   
   \   000001F8   0xC03F5C29         DC32 0C03F5C29H, 0BFC7AE14H, 80000000H
   \              0xBFC7AE14   
   \              0x80000000   
    564          
    565          
    566          

   \                                 In section .text, align 4, keep-with-next
    567          void Window(float *fir64Coff)
    568          {
   \                     Window: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    569              for (int i = 0; i < DSP_NUMCOFFHANNIING; i++) //DSP_NUMCOFF
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xED2D 0x8B08      VPUSH    {D8-D11}
   \   0000000A   0xED9F 0x....      VLDR.W   D8,??DataTable10
   \   0000000E   0xED9F 0x....      VLDR.W   D9,??DataTable10_1
   \   00000012   0xED9F 0x....      VLDR.W   D10,??DataTable10_2
   \   00000016   0xED9F 0x....      VLDR.W   D11,??DataTable10_3
    570          	{
    571                  //fir64Coff[i] = (double_t)((1 << 10)-1);
    572                  fir64Coff[i] = (float)(1023);
    573          		//Hanning Window (less noise than hamming?
    574                  fir64Coff[i] *= 0.5f * (
    575          		                       1.0f - cos((2.0f * PI * i)/ ((float)DSP_NUMCOFFHANNIING - 1.0f))  
    576          		                      );
   \                     ??Window_0: (+1)
   \   0000001A   0x4628             MOV      R0,R5
    577          
    578                  //Hamming Window
    579                  //fir64Coff[i] *= 0.54 - 0.46 * cos((2 * M_PI * i) / (64 - 1));
    580                      
    581                  //Nuttall Window
    582                  //fir64Coff[i] *= 0.355768f - 0.487396*cos((2*M_PI*i)/(64 -1)) + 0.144232*cos((4*M_PI*i)/(64-1))-0.012604*cos((6*M_PI*i)/(64-1));
    583            
    584                  //Cosine Window
    585                  //fir64Coff[i] *= sin((M_PI * i)/(64-1));
    586          
    587                  //Blackman Harris            
    588                  //float w = (2 * M_PI * i) / 64;
    589                  //fir64Coff[i] *= 0.422323 - 0.49755 * cos(w) + 0.07922 * cos(2 * w);
    590              }
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
   \   0000001E   0x.... 0x....      BL       __aeabi_i2d
   \   00000022   0xEC53 0x2B1B      VMOV     R2,R3,D11
   \   00000026   0x.... 0x....      BL       __aeabi_dmul
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x.... 0x....      LDR.W    R3,??DataTable16_16  ;; 0x408ff800
   \   00000030   0x.... 0x....      BL       __aeabi_ddiv
   \   00000034   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       __iar_Sin
   \   0000003E   0xEC53 0x2B10      VMOV     R2,R3,D0
   \   00000042   0xEC51 0x0B19      VMOV     R0,R1,D9
   \   00000046   0x.... 0x....      BL       __aeabi_dsub
   \   0000004A   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   0000004E   0x.... 0x....      BL       __aeabi_dmul
   \   00000052   0xEC53 0x2B1A      VMOV     R2,R3,D10
   \   00000056   0x.... 0x....      BL       __aeabi_dmul
   \   0000005A   0x.... 0x....      BL       __aeabi_d2f
   \   0000005E   0xF5B5 0x6F80      CMP      R5,#+1024
   \   00000062   0xF844 0x0B04      STR      R0,[R4], #+4
   \   00000066   0xDBD8             BLT.N    ??Window_0
    591          	 //fir64Coff[DSP_NUMCOFF-1] = 0;
    592          }
   \   00000068   0xECBD 0x8B08      VPOP     {D8-D11}
   \   0000006C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    593          
    594          /*
    595          Wikimedia: PDM algorithm
    596          y[n] = x[n] + e[n] - e[n-1]     --> +/-1 only
    597          
    598          e[n] = y[n] - x[n] + e[n-1]
    599          
    600          y[n]     output sample 
    601          e[n]     error 
    602          e[n-1]   preivous error
    603          
    604          */

   \                                 In section .text, align 2, keep-with-next
    605          void PCM2PDM (int16_t *InBuff, int16_t *OutBuff, int16_t size, float *err)
    606          {		
   \                     PCM2PDM: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    607          	for (int16_t i =0; i< size; i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2A01             CMP      R2,#+1
   \   00000006   0xDB45             BLT.N    ??PCM2PDM_0
   \   00000008   0x4605             MOV      R5,R0
   \   0000000A   0x460E             MOV      R6,R1
   \   0000000C   0x461F             MOV      R7,R3
   \   0000000E   0xE000             B.N      ??PCM2PDM_1
    608          	{
    609          		if (i==0)
   \                     ??PCM2PDM_2: (+1)
   \   00000010   0xB9BC             CBNZ.N   R4,??PCM2PDM_3
    610          		{
    611          		    if (InBuff[i] > 0)
   \                     ??PCM2PDM_1: (+1)
   \   00000012   0xF9B0 0xC000      LDRSH    R12,[R0, #+0]
   \   00000016   0xF1BC 0x0F01      CMP      R12,#+1
   \   0000001A   0xBFAC             ITE      GE 
   \   0000001C   0xF04F 0x0C01      MOVGE    R12,#+1
   \   00000020   0xF04F 0x0C00      MOVLT    R12,#+0
    612          	            OutBuff[i] = 1;
    613          		    else
    614          			    OutBuff[i] = 0; // "-1" is replace by "0"	
   \   00000024   0xF8A1 0xC000      STRH     R12,[R1, #+0]
    615          			err[0] = OutBuff[i] - InBuff[i];
   \   00000028   0xF9B1 0xC000      LDRSH    R12,[R1, #+0]
   \   0000002C   0xF9B0 0xE000      LDRSH    LR,[R0, #+0]
   \   00000030   0xEBAC 0x0C0E      SUB      R12,R12,LR
   \   00000034   0xEE00 0xCA10      VMOV     S0,R12
   \   00000038   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000003C   0xED83 0x0A00      VSTR     S0,[R3, #0]
   \   00000040   0xE022             B.N      ??PCM2PDM_4
    616          		}
    617          		else
    618          		{
    619          			if (InBuff[i] > err[i-1])
   \                     ??PCM2PDM_3: (+1)
   \   00000042   0xF857 0xCC04      LDR      R12,[R7, #-4]
   \   00000046   0xEE00 0xCA10      VMOV     S0,R12
   \   0000004A   0xF9B5 0xC000      LDRSH    R12,[R5, #+0]
   \   0000004E   0xEE00 0xCA90      VMOV     S1,R12
   \   00000052   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000056   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   0000005A   0xEEF1 0xFA10      FMSTAT   
   \   0000005E   0xBF4C             ITE      MI 
   \   00000060   0xF04F 0x0C01      MOVMI    R12,#+1
   \   00000064   0xF04F 0x0C00      MOVPL    R12,#+0
    620          				OutBuff[i] = 1;
    621          			else
    622          				OutBuff[i] = 0; // "-1" is replace by "0"
   \   00000068   0xF8A6 0xC000      STRH     R12,[R6, #+0]
    623          			err[i] = OutBuff[i] - InBuff[i] + err[i-1];
   \   0000006C   0xF9B6 0xC000      LDRSH    R12,[R6, #+0]
   \   00000070   0xF9B5 0xE000      LDRSH    LR,[R5, #+0]
   \   00000074   0xEBAC 0x0C0E      SUB      R12,R12,LR
   \   00000078   0xEE00 0xCA90      VMOV     S1,R12
   \   0000007C   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000080   0xEE30 0x0A80      VADD.F32 S0,S1,S0
   \   00000084   0xED87 0x0A00      VSTR     S0,[R7, #0]
    624          		}
    625          	}	
   \                     ??PCM2PDM_4: (+1)
   \   00000088   0x1C64             ADDS     R4,R4,#+1
   \   0000008A   0x1D3F             ADDS     R7,R7,#+4
   \   0000008C   0x1CB6             ADDS     R6,R6,#+2
   \   0000008E   0x1CAD             ADDS     R5,R5,#+2
   \   00000090   0x4294             CMP      R4,R2
   \   00000092   0xDBBD             BLT.N    ??PCM2PDM_2
    626          }
   \                     ??PCM2PDM_0: (+1)
   \   00000094   0xBDF0             POP      {R4-R7,PC}       ;; return
    627          
    628          /*
    629          PDM = Pulse Density Modulation
    630          PCM - Pulse Code Modulation
    631          convertion from PDM to PCM
    632          http://www.gamedev.net/topic/660509-any-dsp-gurus-pdm-to-pcm-noisealiasingspectral-leakage-problem/
    633          
    634          http://curiouser.cheshireeng.com/2014/11/04/using-a-pdm-microphone/
    635          
    636          https://www.das-labor.org/svn/microcontroller/src-stm32f4xx/serialUSB/Libraries/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_f32.c
    637          
    638            InBuff length  : 128 bytes
    639            Outbuff length : 16x2 bytes
    640          */
    641          
    642          
    643          

   \                                 In section .text, align 2, keep-with-next
    644          void PDM2PCM(uint8_t *InBuff,int16_t *OutBuff,int16_t PreCalcBuff[DSP_NUMBYTECONV][256])
    645          {
   \                     PDM2PCM: (+1)
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
    646              int32_t BuffInPos = -DSP_NUMBYTECONV/2;
   \   00000006   0xF06F 0x0003      MVN      R0,#+3
    647          	static uint8_t Initial_Array[DSP_NUMBYTECONV/2];
    648          	
    649              for (uint32_t currentSample = 0; currentSample < 16; currentSample++) // go for all the output sample
   \   0000000A   0x2310             MOVS     R3,#+16
   \   0000000C   0x.... 0x....      LDR.W    R8,??DataTable13_1  ;; 0xffff8000
   \   00000010   0xF647 0x79FF      MOVW     R9,#+32767
    650          	{                                                                     // 32*16 = 512 bytes of input steam 
    651                  int16_t stSum=0;
    652          //		int16_t coefficientIndex=0;
    653          
    654                    
    655          		/* First half of frame */
    656                  for (uint16_t i = 0; i < DSP_NUMBYTECONV; i++) // DSP_NUMBYTECONV = 8
   \                     ??PDM2PCM_0: (+1)
   \   00000014   0x9E01             LDR      R6,[SP, #+4]
   \   00000016   0x2400             MOVS     R4,#+0
   \   00000018   0x.... 0x....      LDR.W    R7,??DataTable16_17
   \   0000001C   0x4694             MOV      R12,R2
   \   0000001E   0x1986             ADDS     R6,R0,R6
   \   00000020   0xF04F 0x0E08      MOV      LR,#+8
    657                  {         
    658          
    659                     	int16_t temp,temp1;                        // temporary variable uses for debug, will be removed in future
    660          
    661                      if (BuffInPos < 0)
   \                     ??PDM2PCM_1: (+1)
   \   00000024   0x2800             CMP      R0,#+0
    662          				temp1 = Initial_Array[i];
    663          			else
    664          			    temp1 = InBuff[BuffInPos];          // stored the value of 1 bytes input which is calculated
    665          
    666          				
    667          			temp = (int16_t)PreCalcBuff[i][temp1];        // convolution for 1 bytes which take from the Pre-calculation array
    668          		
    669                      stSum = ADD_S16(stSum,temp);  //These are the pre-calculated window values
   \   00000026   0xB224             SXTH     R4,R4
   \   00000028   0xBF4C             ITE      MI 
   \   0000002A   0x783D             LDRBMI   R5,[R7, #+0]
   \   0000002C   0x7835             LDRBPL   R5,[R6, #+0]
   \   0000002E   0xF93C 0x5015      LDRSH    R5,[R12, R5, LSL #+1]
   \   00000032   0x2C00             CMP      R4,#+0
   \   00000034   0xBF58             IT       PL 
   \   00000036   0x2D00             CMPPL    R5,#+0
   \   00000038   0xD405             BMI.N    ??PDM2PCM_2
   \   0000003A   0xEBA9 0x0B05      SUB      R11,R9,R5
   \   0000003E   0x45A3             CMP      R11,R4
   \   00000040   0xDA0C             BGE.N    ??PDM2PCM_3
   \   00000042   0x464C             MOV      R4,R9
   \   00000044   0xE00B             B.N      ??PDM2PCM_4
   \                     ??PDM2PCM_2: (+1)
   \   00000046   0x2C00             CMP      R4,#+0
   \   00000048   0xBF48             IT       MI 
   \   0000004A   0x2D00             CMPMI    R5,#+0
   \   0000004C   0xD506             BPL.N    ??PDM2PCM_3
   \   0000004E   0xEBA8 0x0A05      SUB      R10,R8,R5
   \   00000052   0x4554             CMP      R4,R10
   \   00000054   0x9400             STR      R4,[SP, #+0]
   \   00000056   0xBFB8             IT       LT 
   \   00000058   0x4644             MOVLT    R4,R8
   \   0000005A   0xDB00             BLT.N    ??PDM2PCM_4
   \                     ??PDM2PCM_3: (+1)
   \   0000005C   0x192C             ADDS     R4,R5,R4
    670          				
    671                      
    672                      BuffInPos++;  //next byte of the input sample stream:0-->255
   \                     ??PDM2PCM_4: (+1)
   \   0000005E   0x1C40             ADDS     R0,R0,#+1
    673                  }
   \   00000060   0x1C7F             ADDS     R7,R7,#+1
   \   00000062   0x1C76             ADDS     R6,R6,#+1
   \   00000064   0xF1BE 0x0E01      SUBS     LR,LR,#+1
   \   00000068   0xF50C 0x7C00      ADD      R12,R12,#+512
   \   0000006C   0xD1DA             BNE.N    ??PDM2PCM_1
    674          
    675          		BuffInPos-=DSP_NUMBYTECONV/2;
    676          
    677          		/* Second half of frame */
    678                  for (uint16_t i = 0; i < DSP_NUMBYTECONV; i++) // DSP_NUMBYTECONV = 8
   \   0000006E   0x9F01             LDR      R7,[SP, #+4]
   \   00000070   0x1F00             SUBS     R0,R0,#+4
   \   00000072   0x2600             MOVS     R6,#+0
   \   00000074   0x19C7             ADDS     R7,R0,R7
    679                  {         
    680          
    681                     	int16_t temp,temp1;                        // temporary variable uses for debug, will be removed in future
    682          
    683          
    684          			temp1 = InBuff[BuffInPos];          // stored the value of 1 bytes input which is calculated
    685          	
    686          			temp = (int16_t)PreCalcBuff[i][temp1];        // convolution for 1 bytes which take from the Pre-calculation array
    687          		
    688                      stSum = ADD_S16(stSum,temp);  //These are the pre-calculated window values
   \                     ??PDM2PCM_5: (+1)
   \   00000076   0xEB02 0x2C46      ADD      R12,R2,R6, LSL #+9
   \   0000007A   0xF897 0xE000      LDRB     LR,[R7, #+0]
   \   0000007E   0xB224             SXTH     R4,R4
   \   00000080   0x2C00             CMP      R4,#+0
   \   00000082   0xF93C 0xC01E      LDRSH    R12,[R12, LR, LSL #+1]
   \   00000086   0xBF58             IT       PL 
   \   00000088   0xF1BC 0x0F00      CMPPL    R12,#+0
   \   0000008C   0xD405             BMI.N    ??PDM2PCM_6
   \   0000008E   0xEBA9 0x050C      SUB      R5,R9,R12
   \   00000092   0x42A5             CMP      R5,R4
   \   00000094   0xDA0C             BGE.N    ??PDM2PCM_7
   \   00000096   0x464C             MOV      R4,R9
   \   00000098   0xE00B             B.N      ??PDM2PCM_8
   \                     ??PDM2PCM_6: (+1)
   \   0000009A   0x2C00             CMP      R4,#+0
   \   0000009C   0xBF48             IT       MI 
   \   0000009E   0xF1BC 0x0F00      CMPMI    R12,#+0
   \   000000A2   0xD505             BPL.N    ??PDM2PCM_7
   \   000000A4   0xEBA8 0x050C      SUB      R5,R8,R12
   \   000000A8   0x42AC             CMP      R4,R5
   \   000000AA   0xBFB8             IT       LT 
   \   000000AC   0x4644             MOVLT    R4,R8
   \   000000AE   0xDB00             BLT.N    ??PDM2PCM_8
   \                     ??PDM2PCM_7: (+1)
   \   000000B0   0x4464             ADD      R4,R12,R4
    689          				
    690                      
    691                      BuffInPos++;  //next byte of the input sample stream:0-->255
   \                     ??PDM2PCM_8: (+1)
   \   000000B2   0x1C40             ADDS     R0,R0,#+1
    692                  }
   \   000000B4   0x1C76             ADDS     R6,R6,#+1
   \   000000B6   0x1C7F             ADDS     R7,R7,#+1
   \   000000B8   0x2E08             CMP      R6,#+8
   \   000000BA   0xDBDC             BLT.N    ??PDM2PCM_5
    693          
    694                  OutBuff[currentSample] = (int16_t)stSum;
   \   000000BC   0x800C             STRH     R4,[R1, #+0]
    695          		
    696          		
    697          
    698          		for (uint16_t i=0; i< (DSP_NUMBYTECONV/2); i++)
   \   000000BE   0x9F01             LDR      R7,[SP, #+4]
   \   000000C0   0x.... 0x....      LDR.W    R6,??DataTable16_17
   \   000000C4   0xF04F 0x0C04      MOV      R12,#+4
   \   000000C8   0x19C7             ADDS     R7,R0,R7
   \   000000CA   0x1F7F             SUBS     R7,R7,#+5
    699          		{
    700                       Initial_Array[i]=InBuff[BuffInPos - 1 - DSP_NUMBYTECONV/2 + i];
   \                     ??PDM2PCM_9: (+1)
   \   000000CC   0xF817 0xEB01      LDRB     LR,[R7], #+1
    701          		}
   \   000000D0   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   000000D4   0xF806 0xEB01      STRB     LR,[R6], #+1
   \   000000D8   0xD1F8             BNE.N    ??PDM2PCM_9
    702              }
   \   000000DA   0x1C89             ADDS     R1,R1,#+2
   \   000000DC   0x1E5B             SUBS     R3,R3,#+1
   \   000000DE   0xD199             BNE.N    ??PDM2PCM_0
    703          
    704          
    705          	#if 0
    706                 for (int16_t i=0; i<8; i++)
    707          	   {
    708          	       uint8_t test;
    709          	       test= InBuff[currentSample*8 +i];
    710          	       for (uint8_t j=0; j<8;j++)
    711          		   {
    712          		        if ((test & 0x01) == 0x01) 
    713          				{
    714                              stSum += 10;
    715                          }
    716                          else                        
    717          				{
    718                              stSum -= 10;
    719                          }
    720          				
    721          				test >>= 1;
    722          		   }
    723          	   }
    724          
    725          #endif
    726          
    727          }
   \   000000E0   0xE8BD 0x8FF3      POP      {R0,R1,R4-R11,PC}  ;; return

   \                                 In section .bss, align 4
   \                     ??Initial_Array:
   \   00000000                      DS8 4
    728          
    729          //void OverLapAdd (uint8_t *Input, int16_t *Output) //128 bytes input 32 bytes output
    730          //{
    731              
    732          //}
    733          	
    734          
    735          

   \                                 In section .text, align 2, keep-with-next
    736          void Precalculation(float *fir64Coff,int16_t precalculated[129][256])
    737          {
   \                     Precalculation: (+1)
   \   00000000   0xB4E0             PUSH     {R5-R7}
    738              for (uint8_t i = 0; i < 129; i++)  /* from byte 0th to byth 7th of data input */
   \   00000002   0x2281             MOVS     R2,#+129
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable16  ;; 0xffff8000
   \   00000008   0xF647 0x75FF      MOVW     R5,#+32767
    739          	{ 
    740          
    741                  for (uint16_t j = 0; j < 256; j++)    /* list all the cases can happen for the input data */ 
   \                     ??Precalculation_0: (+1)
   \   0000000C   0x2600             MOVS     R6,#+0
    742          		{         
    743                      // check overflow 
    744          			if ((int32_t)(fir64Coff[i]*(j-128)) > 32767)
   \                     ??Precalculation_1: (+1)
   \   0000000E   0xF1A6 0x0780      SUB      R7,R6,#+128
   \   00000012   0xEDD0 0x0A00      VLDR     S1,[R0, #0]
   \   00000016   0xEE00 0x7A10      VMOV     S0,R7
   \   0000001A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000001E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000022   0xEEFD 0x0AC0      VCVT.S32.F32 S1,S0
   \   00000026   0xEE10 0x7A90      VMOV     R7,S1
   \   0000002A   0xF5B7 0x4F00      CMP      R7,#+32768
   \   0000002E   0xBFA8             IT       GE 
   \   00000030   0x462F             MOVGE    R7,R5
    745          			{
    746                          
    747          				precalculated[i][j] = 32767;
   \   00000032   0xDA06             BGE.N    ??Precalculation_2
    748          			}
    749          			else if ((int32_t)(fir64Coff[i]*(j-128)) < -32768)
   \   00000034   0x429F             CMP      R7,R3
   \   00000036   0xBFB2             ITEE     LT 
   \   00000038   0x461F             MOVLT    R7,R3
   \   0000003A   0xEEBD 0x0AC0      VCVTGE.S32.F32 S0,S0
   \   0000003E   0xEE10 0x7A10      VMOVGE   R7,S0
    750          			{
    751                          precalculated[i][j] = -32768;
    752          			}
    753          			else
    754          			{
    755                          precalculated[i][j] = (int16_t)(fir64Coff[i]*(j-128));
    756          			}
    757                  }
   \                     ??Precalculation_2: (+1)
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0x2EFF             CMP      R6,#+255
   \   00000046   0xF821 0x7B02      STRH     R7,[R1], #+2
   \   0000004A   0xDDE0             BLE.N    ??Precalculation_1
    758              }
   \   0000004C   0x1D00             ADDS     R0,R0,#+4
   \   0000004E   0x1E52             SUBS     R2,R2,#+1
   \   00000050   0xD1DC             BNE.N    ??Precalculation_0
    759          }
   \   00000052   0xBCE0             POP      {R5-R7}
   \   00000054   0x4770             BX       LR               ;; return
    760          
    761          
    762          /************************************************************************************************ 
    763          Fc: Cutoff Frequency
    764          Fs: Sample Rate
    765          M: filter length
    766          *************************************************************************************************/
    767          

   \                                 In section .text, align 4, keep-with-next
    768          float lowpassFIR(float * firBuffer,uint64_t M,uint64_t Fs,uint64_t Fc)
    769          {    
   \                     lowpassFIR: (+1)
   \   00000000   0xE92D 0x4F7C      PUSH     {R2-R6,R8-R11,LR}
   \   00000004   0x4606             MOV      R6,R0
    770              M = M -1;
   \   00000006   0x1E50             SUBS     R0,R2,#+1
   \   00000008   0xED2D 0x8B0A      VPUSH    {D8-D12}
   \   0000000C   0xB082             SUB      SP,SP,#+8
   \   0000000E   0xF163 0x0100      SBC      R1,R3,#+0
   \   00000012   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
    771          	
    772              float Ft = (float)Fc / (float)Fs;
   \   00000016   0xE9DD 0x0118      LDRD     R0,R1,[SP, #+96]
   \   0000001A   0x.... 0x....      BL       __aeabi_ul2f
    773          
    774          
    775              float sum = 0.0f;
    776              
    777              for (uint64_t i = 0; i < M; i++) 
   \   0000001E   0x2400             MOVS     R4,#+0
   \   00000020   0xEE08 0x0A10      VMOV     S16,R0
   \   00000024   0x2500             MOVS     R5,#+0
   \   00000026   0xE9DD 0x0116      LDRD     R0,R1,[SP, #+88]
   \   0000002A   0x.... 0x....      BL       __aeabi_ul2f
   \   0000002E   0xEE00 0x0A10      VMOV     S0,R0
   \   00000032   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000036   0x2900             CMP      R1,#+0
   \   00000038   0xEE88 0xAA00      VDIV.F32 S20,S16,S0
   \   0000003C   0xED9F 0x....      VLDR.W   S16,??DataTable12  ;; 0x0
   \   00000040   0xBF08             IT       EQ 
   \   00000042   0x2800             CMPEQ    R0,#+0
   \   00000044   0xD06A             BEQ.N    ??lowpassFIR_0
   \   00000046   0xEE1A 0x0A10      VMOV     R0,S20
   \   0000004A   0x.... 0x....      BL       __aeabi_f2d
   \   0000004E   0x....             LDR.N    R2,??DataTable12_1  ;; 0x5a7ed197
   \   00000050   0x....             LDR.N    R3,??DataTable12_2  ;; 0x401921fb
   \   00000052   0x.... 0x....      BL       __aeabi_dmul
   \   00000056   0xEC41 0x0B19      VMOV     D9,R0,R1
   \   0000005A   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   0000005E   0x.... 0x....      BL       __aeabi_ul2f
   \   00000062   0xEE00 0x0A10      VMOV     S0,R0
   \   00000066   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   0000006A   0xEE60 0x8A20      VMUL.F32 S17,S0,S1
   \   0000006E   0xEEB0 0x0A00      VMOV.F32 S0,#2.0
   \   00000072   0xEE2A 0xBA00      VMUL.F32 S22,S20,S0
   \   00000076   0xED9F 0x....      VLDR.W   D10,??DataTable12_3
    778          	{
    779                  if (i != ((float)M / 2)) 
   \                     ??lowpassFIR_1: (+1)
   \   0000007A   0xEDD6 0xBA00      VLDR     S23,[R6, #0]
   \   0000007E   0x4620             MOV      R0,R4
   \   00000080   0x4629             MOV      R1,R5
   \   00000082   0x.... 0x....      BL       __aeabi_ul2f
   \   00000086   0xEE00 0x0A10      VMOV     S0,R0
   \   0000008A   0xEEB4 0x0A68      VCMP.F32 S0,S17
   \   0000008E   0xEEF1 0xFA10      FMSTAT   
   \   00000092   0xD030             BEQ.N    ??lowpassFIR_2
    780          		{
    781                      firBuffer[i] *= sin(2*PI*Ft*(i - ((float)M / 2))) / 
    782          			                (PI * (i - ((float)M / 2)));
   \   00000094   0xEE30 0xCA68      VSUB.F32 S24,S0,S17
   \   00000098   0xEE1B 0x0A90      VMOV     R0,S23
   \   0000009C   0x.... 0x....      BL       __aeabi_f2d
   \   000000A0   0x4682             MOV      R10,R0
   \   000000A2   0x468B             MOV      R11,R1
   \   000000A4   0xEE1C 0x0A10      VMOV     R0,S24
   \   000000A8   0x.... 0x....      BL       __aeabi_f2d
   \   000000AC   0xEC53 0x2B19      VMOV     R2,R3,D9
   \   000000B0   0x.... 0x....      BL       __aeabi_dmul
   \   000000B4   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x.... 0x....      BL       __iar_Sin
   \   000000BE   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   000000C2   0x4680             MOV      R8,R0
   \   000000C4   0x4689             MOV      R9,R1
   \   000000C6   0xEE1C 0x0A10      VMOV     R0,S24
   \   000000CA   0x.... 0x....      BL       __aeabi_f2d
   \   000000CE   0x4602             MOV      R2,R0
   \   000000D0   0x460B             MOV      R3,R1
   \   000000D2   0xEC51 0x0B1A      VMOV     R0,R1,D10
   \   000000D6   0x.... 0x....      BL       __aeabi_dmul
   \   000000DA   0x4602             MOV      R2,R0
   \   000000DC   0x460B             MOV      R3,R1
   \   000000DE   0x4640             MOV      R0,R8
   \   000000E0   0x4649             MOV      R1,R9
   \   000000E2   0x.... 0x....      BL       __aeabi_ddiv
   \   000000E6   0x4652             MOV      R2,R10
   \   000000E8   0x465B             MOV      R3,R11
   \   000000EA   0x.... 0x....      BL       __aeabi_dmul
   \   000000EE   0x.... 0x....      BL       __aeabi_d2f
   \   000000F2   0x6030             STR      R0,[R6, #+0]
   \   000000F4   0xE003             B.N      ??lowpassFIR_3
    783                  }
    784                  else 
    785          		{
    786                      firBuffer[i] *= 2* Ft;
   \                     ??lowpassFIR_2: (+1)
   \   000000F6   0xEE2B 0x0A2B      VMUL.F32 S0,S22,S23
   \   000000FA   0xED86 0x0A00      VSTR     S0,[R6, #0]
    787                  }
    788                  
    789                  sum += firBuffer[i];     
    790              }
   \                     ??lowpassFIR_3: (+1)
   \   000000FE   0x1C64             ADDS     R4,R4,#+1
   \   00000100   0xED96 0x0A00      VLDR     S0,[R6, #0]
   \   00000104   0xF145 0x0500      ADC      R5,R5,#+0
   \   00000108   0x1D36             ADDS     R6,R6,#+4
   \   0000010A   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   0000010E   0x428D             CMP      R5,R1
   \   00000110   0xEE38 0x8A00      VADD.F32 S16,S16,S0
   \   00000114   0xD3B1             BCC.N    ??lowpassFIR_1
   \   00000116   0xD801             BHI.N    ??lowpassFIR_0
   \   00000118   0x4284             CMP      R4,R0
   \   0000011A   0xD3AE             BCC.N    ??lowpassFIR_1
    791              
    792          	return sum;
   \                     ??lowpassFIR_0: (+1)
   \   0000011C   0xB002             ADD      SP,SP,#+8
   \   0000011E   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   00000122   0xECBD 0x8B0A      VPOP     {D8-D12}
   \   00000126   0xE8BD 0x8F73      POP      {R0,R1,R4-R6,R8-R11,PC}  ;; return
    793          }
    794          
    795          /* */
    796          

   \                                 In section .text, align 2, keep-with-next
    797          int8_t CrssCor(int16_t * vDataIn1, int16_t * vDataIn2, uint16_t numLen, uint32_t * CrssCorVal )
    798          {
   \                     CrssCor: (+1)
   \   00000000   0xE92D 0x4EF8      PUSH     {R3-R7,R9-R11,LR}
   \   00000004   0xB40C             PUSH     {R2,R3}
   \   00000006   0x4606             MOV      R6,R0
   \   00000008   0x0054             LSLS     R4,R2,#+1
   \   0000000A   0xB085             SUB      SP,SP,#+20
   \   0000000C   0x4689             MOV      R9,R1
   \   0000000E   0x4620             MOV      R0,R4
    799              static int16_t vDataIn1Old, vDataIn2Old;
                                    ^
Warning[Pe177]: variable "vDataIn1Old" was declared but never referenced

      static int16_t vDataIn1Old, vDataIn2Old;
                                  ^
"D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\Src\DSP.c",799  Warning[Pe177]: 
          variable "vDataIn2Old" was declared but never referenced
    800              int64_t Sum, SumMax;
    801          	int8_t idxPos;
    802          #if 1
    803          	int16_t *vDataIn1Out = malloc(sizeof(int16_t)*numLen);
   \   00000010   0x.... 0x....      BL       malloc
   \   00000014   0x9001             STR      R0,[SP, #+4]
    804          	int16_t *vDataIn2Out = malloc(sizeof(int16_t)*numLen);
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       malloc
   \   0000001C   0x9000             STR      R0,[SP, #+0]
    805          #endif
    806          
    807              SumMax=0;
   \   0000001E   0x2400             MOVS     R4,#+0
    808              Sum=0;
    809          #if 0	
    810          	LowPassIIR(vDataIn1,vDataIn1Out ,&vDataIn1Old, numLen,8);
    811          	LowPassIIR(vDataIn2,vDataIn2Out ,&vDataIn2Old, numLen,8);
    812          #endif
    813          
    814              for (uint16_t i=0;i<numLen;i++)
   \   00000020   0xF8BD 0x0014      LDRH     R0,[SP, #+20]
   \   00000024   0x46A2             MOV      R10,R4
   \   00000026   0x46A3             MOV      R11,R4
   \   00000028   0xB168             CBZ.N    R0,??CrssCor_0
   \   0000002A   0x9801             LDR      R0,[SP, #+4]
   \   0000002C   0x9900             LDR      R1,[SP, #+0]
   \   0000002E   0xF8BD 0x2014      LDRH     R2,[SP, #+20]
    815              {
    816                  vDataIn1Out[i]= (int16_t)(vDataIn1[i]);//fir256Coff[i]
   \                     ??CrssCor_1: (+1)
   \   00000032   0xF836 0x3B02      LDRH     R3,[R6], #+2
    817                  vDataIn2Out[i]= (int16_t)(vDataIn2[i]);//fir256Coff[i]
    818              }
   \   00000036   0x1E52             SUBS     R2,R2,#+1
   \   00000038   0xF820 0x3B02      STRH     R3,[R0], #+2
   \   0000003C   0xF839 0x3B02      LDRH     R3,[R9], #+2
   \   00000040   0xF821 0x3B02      STRH     R3,[R1], #+2
   \   00000044   0xD1F5             BNE.N    ??CrssCor_1
    819          	
    820              for (int8_t i=-8;i<8;i++)
   \                     ??CrssCor_0: (+1)
   \   00000046   0x9801             LDR      R0,[SP, #+4]
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xF06F 0x0607      MVN      R6,#+7
   \   0000004E   0xF1A0 0x0910      SUB      R9,R0,#+16
   \   00000052   0xF8BD 0x0014      LDRH     R0,[SP, #+20]
   \   00000056   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000005A   0x2000             MOVS     R0,#+0
    821              {
    822                     Sum = 0;
    823          	   if (i>=0)
    824          	   {
    825          	       for(uint16_t j=0;j<numLen;j++)
    826          	       {
    827          	           Sum += vDataIn1Out[j+i]*vDataIn2Out[j];   
    828          	       }
    829                                      
    830          	   }
    831          	   else
    832          	   {
    833                     for(uint16_t j=0;j<numLen;j++)
   \                     ??CrssCor_2: (+1)
   \   0000005C   0xF8BD 0x2014      LDRH     R2,[SP, #+20]
   \   00000060   0xB1A2             CBZ.N    R2,??CrssCor_3
   \   00000062   0x9A00             LDR      R2,[SP, #+0]
   \   00000064   0x4273             RSBS     R3,R6,#+0
   \   00000066   0xF8DD 0xC004      LDR      R12,[SP, #+4]
   \   0000006A   0xF8BD 0x5014      LDRH     R5,[SP, #+20]
   \   0000006E   0xEB02 0x0E43      ADD      LR,R2,R3, LSL #+1
    834          	       {
    835          	           Sum += vDataIn1Out[j]*vDataIn2Out[j-i];   
   \                     ??CrssCor_4: (+1)
   \   00000072   0x4602             MOV      R2,R0
   \   00000074   0x460B             MOV      R3,R1
   \   00000076   0xF93C 0x0B02      LDRSH    R0,[R12], #+2
   \   0000007A   0xF93E 0x1B02      LDRSH    R1,[LR], #+2
   \   0000007E   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   00000082   0x17C1             ASRS     R1,R0,#+31
   \   00000084   0x1810             ADDS     R0,R2,R0
   \   00000086   0x4159             ADCS     R1,R3,R1
    836          	       }
   \   00000088   0x1E6D             SUBS     R5,R5,#+1
   \   0000008A   0xD1F2             BNE.N    ??CrssCor_4
    837          	   }
    838          
    839          	   if (Sum > SumMax) 
   \                     ??CrssCor_3: (+1)
   \   0000008C   0x458B             CMP      R11,R1
   \   0000008E   0xDC0B             BGT.N    ??CrssCor_5
   \   00000090   0xDB01             BLT.N    ??CrssCor_6
   \   00000092   0x4582             CMP      R10,R0
   \   00000094   0xD208             BCS.N    ??CrssCor_5
    840          	   {
    841          	       SumMax = Sum;  	
   \                     ??CrssCor_6: (+1)
   \   00000096   0x4682             MOV      R10,R0
   \   00000098   0x468B             MOV      R11,R1
    842          		   
    843          	       idxPos = i;
    844          	       *CrssCorVal = (SumMax/numLen);//(uint32_t)((SumMax>>15));
   \   0000009A   0xE9DD 0x2302      LDRD     R2,R3,[SP, #+8]
   \   0000009E   0x.... 0x....      BL       __aeabi_ldivmod
   \   000000A2   0x9906             LDR      R1,[SP, #+24]
   \   000000A4   0x4637             MOV      R7,R6
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    845          	   }
   \                     ??CrssCor_5: (+1)
   \   000000A8   0x1C76             ADDS     R6,R6,#+1
   \   000000AA   0x2E08             CMP      R6,#+8
   \   000000AC   0xF109 0x0902      ADD      R9,R9,#+2
   \   000000B0   0xDA19             BGE.N    ??CrssCor_7
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x2100             MOVS     R1,#+0
   \   000000B6   0x2E00             CMP      R6,#+0
   \   000000B8   0xD4D0             BMI.N    ??CrssCor_2
   \   000000BA   0xF8BD 0x2014      LDRH     R2,[SP, #+20]
   \   000000BE   0x2A00             CMP      R2,#+0
   \   000000C0   0xD0E4             BEQ.N    ??CrssCor_3
   \   000000C2   0x46CC             MOV      R12,R9
   \   000000C4   0xF8DD 0xE000      LDR      LR,[SP, #+0]
   \   000000C8   0x4615             MOV      R5,R2
   \                     ??CrssCor_8: (+1)
   \   000000CA   0x4602             MOV      R2,R0
   \   000000CC   0x460B             MOV      R3,R1
   \   000000CE   0xF93C 0x0B02      LDRSH    R0,[R12], #+2
   \   000000D2   0xF93E 0x1B02      LDRSH    R1,[LR], #+2
   \   000000D6   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   000000DA   0x17C1             ASRS     R1,R0,#+31
   \   000000DC   0x1810             ADDS     R0,R2,R0
   \   000000DE   0x4159             ADCS     R1,R3,R1
   \   000000E0   0x1E6D             SUBS     R5,R5,#+1
   \   000000E2   0xD1F2             BNE.N    ??CrssCor_8
   \   000000E4   0xE7D2             B.N      ??CrssCor_3
    846          	         
    847              }
    848          #if 1
    849              free(vDataIn1Out);
   \                     ??CrssCor_7: (+1)
   \   000000E6   0x9801             LDR      R0,[SP, #+4]
   \   000000E8   0xB27F             SXTB     R7,R7
   \   000000EA   0x.... 0x....      BL       free
    850          	free(vDataIn2Out);
   \   000000EE   0x9800             LDR      R0,[SP, #+0]
   \   000000F0   0x.... 0x....      BL       free
    851          #endif
    852          
    853              if((idxPos<-7)||(idxPos>6)) return 0;
   \   000000F4   0x1DF8             ADDS     R0,R7,#+7
   \   000000F6   0x280E             CMP      R0,#+14
   \   000000F8   0xBF2C             ITE      CS 
   \   000000FA   0x2000             MOVCS    R0,#+0
   \   000000FC   0x4638             MOVCC    R0,R7
    854          	
    855              return idxPos;
   \   000000FE   0x....             B.N      ?Subroutine1
    856          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xB008             ADD      SP,SP,#+32
   \   00000002   0xE8BD 0x8EF0      POP      {R4-R7,R9-R11,PC}  ;; return
    857          
    858          
    859          /*****************************************************************************************************
    860          CROSSCORRELATION---------------------------------------------------------------------------------------
    861          
    862          	function	Out = crsscorr_local(Z,X) 
    863          	%this function computes autocorrelation
    864          	 
    865          		N = round(length(X));
    866          		%WIN = hanning(N);
    867          		x = [X;ones(N,1)];
    868          		z = [Z;ones(N,1)];
    869          		
    870          		Out = zeros(N,1);
    871          		
    872          		for index=1:16 %N but optimize to 16  
    873          			Out(index)=sum(z(index:index+N-1).* x(1:N))/(N);
    874          		end
    875          	end
    876          
    877          *******************************************************************************************************/
    878          

   \                                 In section .text, align 2, keep-with-next
    879          void Std_CrssCor(int16_t * vDataIn1, int16_t * vDataIn2, float *Out,uint16_t numLen )
    880          {
    881          
    882              for (uint16_t i=0;i<numLen;i++)
   \                     Std_CrssCor: (+1)
   \   00000000   0xB903             CBNZ.N   R3,??Std_CrssCor_0
   \   00000002   0x4770             BX       LR
   \                     ??Std_CrssCor_0: (+1)
   \   00000004   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0x461D             MOV      R5,R3
   \                     ??Std_CrssCor_1: (+1)
   \   0000000C   0x4606             MOV      R6,R0
   \   0000000E   0x460F             MOV      R7,R1
   \   00000010   0x469C             MOV      R12,R3
    883              {
    884                 Out = 0;
    885                 for(uint16_t j=0;j<numLen;j++)
    886                 {
    887                     Out[i] += vDataIn1[j+i]*vDataIn2[j]/numLen;   
   \                     ??Std_CrssCor_2: (+1)
   \   00000012   0xF936 0xEB02      LDRSH    LR,[R6], #+2
   \   00000016   0xF937 0x8B02      LDRSH    R8,[R7], #+2
   \   0000001A   0xEDD4 0x0A00      VLDR     S1,[R4, #0]
    888                 }       
   \   0000001E   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   00000022   0xFB1E 0xFE08      SMULBB   LR,LR,R8
   \   00000026   0xFB9E 0xFEF3      SDIV     LR,LR,R3
   \   0000002A   0xEE00 0xEA10      VMOV     S0,LR
   \   0000002E   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000032   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000036   0xED84 0x0A00      VSTR     S0,[R4, #0]
   \   0000003A   0xD1EA             BNE.N    ??Std_CrssCor_2
    889              }
   \   0000003C   0x1D24             ADDS     R4,R4,#+4
   \   0000003E   0x1C80             ADDS     R0,R0,#+2
   \   00000040   0x1E6D             SUBS     R5,R5,#+1
   \   00000042   0xD1E3             BNE.N    ??Std_CrssCor_1
    890          
    891          }
   \   00000044   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    892          
    893          /*********************************************************************************************************
    894          function y=atcorr(X) %this function computes autocorrelation
    895              K = round(length(X)/2);
    896              x = X;
    897              y = zeros(K,1);
    898              for index=1:K
    899                  y(index) = sum(x(index:index+K-1).* x(1:K))/(K);
    900              end
    901          end
    902          **********************************************************************************************************/
    903          

   \                                 In section .text, align 4, keep-with-next
    904           void Std_AutoCorr(int16_t * vDataIn,float *Out, uint16_t numLen )
    905          {
    906              for (uint16_t i=0;i<numLen;i++)
   \                     Std_AutoCorr: (+1)
   \   00000000   0xB902             CBNZ.N   R2,??Std_AutoCorr_0
   \   00000002   0x4770             BX       LR
   \                     ??Std_AutoCorr_0: (+1)
   \   00000004   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x4615             MOV      R5,R2
   \                     ??Std_AutoCorr_1: (+1)
   \   0000000C   0xED9F 0x....      VLDR.W   S0,??DataTable12  ;; 0x0
   \   00000010   0x4626             MOV      R6,R4
   \   00000012   0x4607             MOV      R7,R0
   \   00000014   0x4694             MOV      R12,R2
    907              {
    908                 Out[i] = 0;
    909                 for(uint16_t j=0;j<numLen;j++)
    910                 {
    911                     Out[i] += vDataIn[j+i]*vDataIn[j]/numLen;   
   \                     ??Std_AutoCorr_2: (+1)
   \   00000016   0xF936 0xEB02      LDRSH    LR,[R6], #+2
   \   0000001A   0xF937 0x8B02      LDRSH    R8,[R7], #+2
    912                 }       
   \   0000001E   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   00000022   0xFB1E 0xFE08      SMULBB   LR,LR,R8
   \   00000026   0xFB9E 0xFEF2      SDIV     LR,LR,R2
   \   0000002A   0xEE00 0xEA90      VMOV     S1,LR
   \   0000002E   0xEEF8 0x0AE0      VCVT.F32.S32 S1,S1
   \   00000032   0xEE30 0x0A80      VADD.F32 S0,S1,S0
   \   00000036   0xD1EE             BNE.N    ??Std_AutoCorr_2
   \   00000038   0xED81 0x0A00      VSTR     S0,[R1, #0]
    913              }
   \   0000003C   0x1D09             ADDS     R1,R1,#+4
   \   0000003E   0x1CA4             ADDS     R4,R4,#+2
   \   00000040   0x1E6D             SUBS     R5,R5,#+1
   \   00000042   0xD1E3             BNE.N    ??Std_AutoCorr_1
    914          }
   \   00000044   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    915          
    916          /**********************************************************************************************************
    917          -----------------------------Covarian Matrix setup---------------------------------------------------------
    918          function Out = CorrMatFn(x)
    919              Out = zeros(length(x),length(x));
    920              for i=1:length(x)
    921                  for j=1:length(x)
    922                     if (j>=i)
    923                         Out(i,j) = x(j - i +1);  
    924                     else
    925                         Out(i,j) = x(i-j + 1);  
    926                     end
    927                  end
    928              end 
    929          end
    930          *************************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    931          void Std_MatCorr(int16_t* vDataIn, float *Out, uint16_t numLen)
    932          {
    933              for (uint16_t i=0;i<numLen;i++)
   \                     Std_MatCorr: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \   00000002   0xB902             CBNZ.N   R2,??Std_MatCorr_0
   \   00000004   0x4770             BX       LR
   \                     ??Std_MatCorr_0: (+1)
   \   00000006   0xB5F0             PUSH     {R4-R7,LR}
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0xE000             B.N      ??Std_MatCorr_1
   \                     ??Std_MatCorr_2: (+1)
   \   0000000E   0x2500             MOVS     R5,#+0
   \                     ??Std_MatCorr_1: (+1)
   \   00000010   0x425F             RSBS     R7,R3,#+0
   \   00000012   0x4626             MOV      R6,R4
   \   00000014   0xEB00 0x0747      ADD      R7,R0,R7, LSL #+1
   \   00000018   0x468C             MOV      R12,R1
    934              {
    935                 
    936                 for(uint16_t j=0;j<numLen;j++)
    937                 {
    938                     if (j>=i)
   \                     ??Std_MatCorr_3: (+1)
   \   0000001A   0x429D             CMP      R5,R3
   \   0000001C   0xBFAC             ITE      GE 
   \   0000001E   0xF9B7 0xE000      LDRSHGE  LR,[R7, #+0]
   \   00000022   0xF9B6 0xE000      LDRSHLT  LR,[R6, #+0]
    939                         Out[i*numLen +j] = vDataIn[j-i]; 
    940          		   else
    941          		   	   Out[i*numLen +j] = vDataIn[i-j];
   \   00000026   0xEE00 0xEA10      VMOV     S0,LR
    942          		   	
    943                 }       
   \   0000002A   0x1C6D             ADDS     R5,R5,#+1
   \   0000002C   0x1CBF             ADDS     R7,R7,#+2
   \   0000002E   0x1EB6             SUBS     R6,R6,#+2
   \   00000030   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000034   0x4295             CMP      R5,R2
   \   00000036   0xED8C 0x0A00      VSTR     S0,[R12, #0]
   \   0000003A   0xF10C 0x0C04      ADD      R12,R12,#+4
   \   0000003E   0xDBEC             BLT.N    ??Std_MatCorr_3
    944              }
   \   00000040   0x1C5B             ADDS     R3,R3,#+1
   \   00000042   0x1CA4             ADDS     R4,R4,#+2
   \   00000044   0x4293             CMP      R3,R2
   \   00000046   0xEB01 0x0182      ADD      R1,R1,R2, LSL #+2
   \   0000004A   0xDBE0             BLT.N    ??Std_MatCorr_2
    945          
    946          }
   \   0000004C   0xBDF0             POP      {R4-R7,PC}       ;; return
    947          
    948          
    949          
    950          /************************************************************************************************************
    951          -----------------------------Summing in Fourier Domain-------------------------------------------------------
    952          
    953          *************************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    954          void Delay_Sum_FFT(const Mic_Array_Data * MicData, Mic_Array_Coef_f *coefMics,int16_t * stBufOut, int16_t lenFFT)
    955          {
   \                     Delay_Sum_FFT: (+1)
   \   00000000   0xE92D 0x4EFC      PUSH     {R2-R7,R9-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x461E             MOV      R6,R3
   \   00000008   0xB086             SUB      SP,SP,#+24
    956               int32_t         _value,_value1,_value2;
    957              
    958          	for (uint16_t iFrm=0;iFrm<AUDIO_OUT_BUFFER_SIZE/(2*lenFFT);iFrm++)
   \   0000000A   0x0070             LSLS     R0,R6,#+1
   \   0000000C   0x468A             MOV      R10,R1
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x9900             LDR      R1,[SP, #+0]
   \   00000012   0xF44F 0x6080      MOV      R0,#+1024
   \   00000016   0x.... 0x....      LDR.W    R9,??DataTable16_1
   \   0000001A   0x2700             MOVS     R7,#+0
   \   0000001C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000020   0x9005             STR      R0,[SP, #+20]
   \   00000022   0xF509 0x4001      ADD      R0,R9,#+33024
   \   00000026   0x3040             ADDS     R0,R0,#+64
   \   00000028   0xF241 0x0514      MOVW     R5,#+4116
   \   0000002C   0x9004             STR      R0,[SP, #+16]
   \   0000002E   0xF509 0x5040      ADD      R0,R9,#+12288
   \   00000032   0x3078             ADDS     R0,R0,#+120
   \   00000034   0x.... 0x....      LDR.W    R11,??DataTable16_2
   \   00000038   0x9003             STR      R0,[SP, #+12]
   \   0000003A   0xF509 0x5000      ADD      R0,R9,#+8192
   \   0000003E   0x3050             ADDS     R0,R0,#+80
   \   00000040   0x9002             STR      R0,[SP, #+8]
   \   00000042   0xF509 0x5080      ADD      R0,R9,#+4096
   \   00000046   0x3028             ADDS     R0,R0,#+40
   \   00000048   0x9001             STR      R0,[SP, #+4]
   \   0000004A   0xE03D             B.N      ??Delay_Sum_FFT_0
    959          	{
    960                    RFFT_INT(MicData->bufMIC1,S1,DataFFT.bufMIC1);  
    961                    RFFT_INT(MicData->bufMIC2,S2,DataFFT.bufMIC2);
    962                    RFFT_INT(MicData->bufMIC3,S3,DataFFT.bufMIC3);
    963                    RFFT_INT(MicData->bufMIC4,S4,DataFFT.bufMIC4);
    964          
    965                    /* Adding in Fourier Domain */			 
    966                    //arm_add_f32((float *)bufferFFT,(float *)bufferFFT_1, (float *)bufferFFTSum,lenFFT*2);
    967                    for (uint16_t ii=0;ii<lenFFT*2;ii++)
    968                    {
    969                        bufferFFTSum[ii]= ((DataFFT.bufMIC1[ii]*coefMics->facMIC1) + 
    970                                          (DataFFT.bufMIC2[ii]*coefMics->facMIC2) +
    971                                          (DataFFT.bufMIC3[ii]*coefMics->facMIC3) +
    972                                          (DataFFT.bufMIC4[ii]*coefMics->facMIC4)); 
   \                     ??Delay_Sum_FFT_1: (+1)
   \   0000004C   0xEB09 0x0180      ADD      R1,R9,R0, LSL #+2
   \   00000050   0xEDDA 0x0A00      VLDR     S1,[R10, #0]
   \   00000054   0xEB09 0x0280      ADD      R2,R9,R0, LSL #+2
   \   00000058   0xED9A 0x1A01      VLDR     S2,[R10, #+4]
    973                    }
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \   0000005E   0xB280             UXTH     R0,R0
   \   00000060   0xED92 0x0A00      VLDR     S0,[R2, #0]
   \   00000064   0xF501 0x5280      ADD      R2,R1,#+4096
   \   00000068   0x3228             ADDS     R2,R2,#+40
   \   0000006A   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   0000006E   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   00000072   0xF501 0x5200      ADD      R2,R1,#+8192
   \   00000076   0x3250             ADDS     R2,R2,#+80
   \   00000078   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000007C   0xED9A 0x1A02      VLDR     S2,[R10, #+8]
   \   00000080   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   00000084   0xF501 0x5240      ADD      R2,R1,#+12288
   \   00000088   0x3278             ADDS     R2,R2,#+120
   \   0000008A   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   0000008E   0xF501 0x4101      ADD      R1,R1,#+33024
   \   00000092   0xED9A 0x1A03      VLDR     S2,[R10, #+12]
   \   00000096   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   0000009A   0x3140             ADDS     R1,R1,#+64
   \   0000009C   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   000000A0   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \                     ??Delay_Sum_FFT_2: (+1)
   \   000000A4   0x9900             LDR      R1,[SP, #+0]
   \   000000A6   0x4288             CMP      R0,R1
   \   000000A8   0xDBD0             BLT.N    ??Delay_Sum_FFT_1
    974          
    975                    /* Revert FFT*/
    976                    arm_rfft_fast_f32(&IS, (float *)bufferFFTSum, (float *)&fbufferOut[iFrm*lenFFT],1);
   \   000000AA   0xFB06 0xF007      MUL      R0,R6,R7
   \   000000AE   0x9904             LDR      R1,[SP, #+16]
   \   000000B0   0x2301             MOVS     R3,#+1
   \   000000B2   0x1C7F             ADDS     R7,R7,#+1
   \   000000B4   0xEB09 0x0080      ADD      R0,R9,R0, LSL #+2
   \   000000B8   0xB2BF             UXTH     R7,R7
   \   000000BA   0xF500 0x4212      ADD      R2,R0,#+37376
   \   000000BE   0x32D0             ADDS     R2,R2,#+208
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable16_3
   \   000000C4   0x.... 0x....      BL       arm_rfft_fast_f32
   \                     ??Delay_Sum_FFT_0: (+1)
   \   000000C8   0x9805             LDR      R0,[SP, #+20]
   \   000000CA   0x4287             CMP      R7,R0
   \   000000CC   0xDA70             BGE.N    ??Delay_Sum_FFT_3
   \   000000CE   0x2E01             CMP      R6,#+1
   \   000000D0   0xDB10             BLT.N    ??Delay_Sum_FFT_4
   \   000000D2   0xFB06 0xF007      MUL      R0,R6,R7
   \   000000D6   0x4659             MOV      R1,R11
   \   000000D8   0x4632             MOV      R2,R6
   \   000000DA   0xEB04 0x0040      ADD      R0,R4,R0, LSL #+1
   \                     ??Delay_Sum_FFT_5: (+1)
   \   000000DE   0xF930 0x3B02      LDRSH    R3,[R0], #+2
   \   000000E2   0xEE00 0x3A10      VMOV     S0,R3
   \   000000E6   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000000EA   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   000000EE   0x1D09             ADDS     R1,R1,#+4
   \   000000F0   0x1E52             SUBS     R2,R2,#+1
   \   000000F2   0xD1F4             BNE.N    ??Delay_Sum_FFT_5
   \                     ??Delay_Sum_FFT_4: (+1)
   \   000000F4   0x2300             MOVS     R3,#+0
   \   000000F6   0x464A             MOV      R2,R9
   \   000000F8   0x4659             MOV      R1,R11
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable16_4
   \   000000FE   0x.... 0x....      BL       arm_rfft_fast_f32
   \   00000102   0x2E01             CMP      R6,#+1
   \   00000104   0xDB11             BLT.N    ??Delay_Sum_FFT_6
   \   00000106   0xFB06 0xF007      MUL      R0,R6,R7
   \   0000010A   0x4659             MOV      R1,R11
   \   0000010C   0x4632             MOV      R2,R6
   \   0000010E   0xEB04 0x0040      ADD      R0,R4,R0, LSL #+1
   \   00000112   0x1828             ADDS     R0,R5,R0
   \                     ??Delay_Sum_FFT_7: (+1)
   \   00000114   0xF930 0x3B02      LDRSH    R3,[R0], #+2
   \   00000118   0xEE00 0x3A10      VMOV     S0,R3
   \   0000011C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000120   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   00000124   0x1D09             ADDS     R1,R1,#+4
   \   00000126   0x1E52             SUBS     R2,R2,#+1
   \   00000128   0xD1F4             BNE.N    ??Delay_Sum_FFT_7
   \                     ??Delay_Sum_FFT_6: (+1)
   \   0000012A   0x9A01             LDR      R2,[SP, #+4]
   \   0000012C   0x2300             MOVS     R3,#+0
   \   0000012E   0x4659             MOV      R1,R11
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable16_5
   \   00000134   0x.... 0x....      BL       arm_rfft_fast_f32
   \   00000138   0x2E01             CMP      R6,#+1
   \   0000013A   0xDB13             BLT.N    ??Delay_Sum_FFT_8
   \   0000013C   0xFB06 0xF007      MUL      R0,R6,R7
   \   00000140   0x4659             MOV      R1,R11
   \   00000142   0x4632             MOV      R2,R6
   \   00000144   0xEB04 0x0040      ADD      R0,R4,R0, LSL #+1
   \   00000148   0xF500 0x5000      ADD      R0,R0,#+8192
   \   0000014C   0x3028             ADDS     R0,R0,#+40
   \                     ??Delay_Sum_FFT_9: (+1)
   \   0000014E   0xF930 0x3B02      LDRSH    R3,[R0], #+2
   \   00000152   0xEE00 0x3A10      VMOV     S0,R3
   \   00000156   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000015A   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   0000015E   0x1D09             ADDS     R1,R1,#+4
   \   00000160   0x1E52             SUBS     R2,R2,#+1
   \   00000162   0xD1F4             BNE.N    ??Delay_Sum_FFT_9
   \                     ??Delay_Sum_FFT_8: (+1)
   \   00000164   0x9A02             LDR      R2,[SP, #+8]
   \   00000166   0x2300             MOVS     R3,#+0
   \   00000168   0x4659             MOV      R1,R11
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   0000016E   0x.... 0x....      BL       arm_rfft_fast_f32
   \   00000172   0x2E01             CMP      R6,#+1
   \   00000174   0xDB13             BLT.N    ??Delay_Sum_FFT_10
   \   00000176   0xFB06 0xF007      MUL      R0,R6,R7
   \   0000017A   0x4659             MOV      R1,R11
   \   0000017C   0x4632             MOV      R2,R6
   \   0000017E   0xEB04 0x0040      ADD      R0,R4,R0, LSL #+1
   \   00000182   0xF500 0x5040      ADD      R0,R0,#+12288
   \   00000186   0x303C             ADDS     R0,R0,#+60
   \                     ??Delay_Sum_FFT_11: (+1)
   \   00000188   0xF930 0x3B02      LDRSH    R3,[R0], #+2
   \   0000018C   0xEE00 0x3A10      VMOV     S0,R3
   \   00000190   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000194   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   00000198   0x1D09             ADDS     R1,R1,#+4
   \   0000019A   0x1E52             SUBS     R2,R2,#+1
   \   0000019C   0xD1F4             BNE.N    ??Delay_Sum_FFT_11
   \                     ??Delay_Sum_FFT_10: (+1)
   \   0000019E   0x9A03             LDR      R2,[SP, #+12]
   \   000001A0   0x2300             MOVS     R3,#+0
   \   000001A2   0x4659             MOV      R1,R11
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable16_7
   \   000001A8   0x.... 0x....      BL       arm_rfft_fast_f32
   \   000001AC   0x2000             MOVS     R0,#+0
   \   000001AE   0xE779             B.N      ??Delay_Sum_FFT_2
    977                    //arm_rfft_fast_f32(&IS, (float *)bufferFFTSum, (float *)&fbufferOut[iFrm*lenFFT], 1);
    978          	}
    979          
    980                  /*covert from float to integer*/
    981          	for (uint16_t i=0; i<AUDIO_OUT_BUFFER_SIZE;)
   \                     ??Delay_Sum_FFT_3: (+1)
   \   000001B0   0x2000             MOVS     R0,#+0
    982          	{
    983          	    _value1 = (int32_t)fbufferOut[(i>>1)];
    984          		_value2 = MicData->bufMIC2[i>>1];
    985          	    stBufOut[i++] = (int16_t)_value1;
   \                     ??Delay_Sum_FFT_12: (+1)
   \   000001B2   0x1042             ASRS     R2,R0,#+1
   \   000001B4   0xF020 0x0101      BIC      R1,R0,#0x1
   \   000001B8   0xEB09 0x0282      ADD      R2,R9,R2, LSL #+2
   \   000001BC   0x1909             ADDS     R1,R1,R4
   \   000001BE   0x9B06             LDR      R3,[SP, #+24]
   \   000001C0   0xF502 0x4212      ADD      R2,R2,#+37376
   \   000001C4   0x32D0             ADDS     R2,R2,#+208
   \   000001C6   0x5E69             LDRSH    R1,[R5, R1]
   \   000001C8   0xED92 0x0A00      VLDR     S0,[R2, #0]
   \   000001CC   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \   000001D0   0xEE10 0x2A10      VMOV     R2,S0
   \   000001D4   0xF823 0x2010      STRH     R2,[R3, R0, LSL #+1]
   \   000001D8   0x1C40             ADDS     R0,R0,#+1
    986          		stBufOut[i++] = (int16_t)_value2;
   \   000001DA   0x9A06             LDR      R2,[SP, #+24]
   \   000001DC   0xB280             UXTH     R0,R0
   \   000001DE   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
   \   000001E2   0x1C40             ADDS     R0,R0,#+1
   \   000001E4   0xB280             UXTH     R0,R0
    987          	}
   \   000001E6   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000001EA   0xDBE2             BLT.N    ??Delay_Sum_FFT_12
    988          	
    989          	//arm_float_to_q15((float32_t *)fbufferOut,(q15_t *)stBufOut,AUDIO_OUT_BUFFER_SIZE); 
    990          	
    991          }
   \   000001EC                      REQUIRE ?Subroutine1
   \   000001EC                      ;; // Fall through to label ?Subroutine1
    992          /******************************************************************************/
    993          /*                  Factor Update                                             */ 
    994          /******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    995          void FactorUpd(Mic_Array_Coef_f * facMic)
    996          {
    997          	facMic->facMIC1 = 0.25;
   \                     FactorUpd: (+1)
   \   00000000   0xEEB5 0x0A00      VMOV.F32 S0,#0.25
   \   00000004   0xED80 0x0A00      VSTR     S0,[R0, #0]
    998          	facMic->facMIC2 = 0.25;
   \   00000008   0xED80 0x0A01      VSTR     S0,[R0, #+4]
    999          	facMic->facMIC3 = 0.25;
   \   0000000C   0xED80 0x0A02      VSTR     S0,[R0, #+8]
   1000          	facMic->facMIC4 = 0.25;
   \   00000010   0xED80 0x0A03      VSTR     S0,[R0, #+12]
   1001          }
   \   00000014   0x4770             BX       LR               ;; return
   1002          
   1003          
   1004          

   \                                 In section .text, align 2, keep-with-next
   1005          void FFT_SUM(int16_t * stBuf1, int16_t * stBuf2,float *fBufOut, uint16_t lenFFT)
   1006          {
   1007          #if 0 //using self-writing DFT function 
   1008             int32_t         value;
   1009          
   1010             /* covert from int to float */
   1011             for(uint16_t j=0;j<lenFFT;j++)
   1012             {
   1013                value = (int32_t)stBuf1[j];
   1014             	  fbuffer[j]=(float)value;
   1015             }	
   1016             DFT((float *)fbuffer,(float *)bufferFFT,lenFFT);
   1017          
   1018          	/* covert from int to float */
   1019          	for(uint16_t j=0;j<lenFFT;j++)
   1020          	{
   1021          	   value = (int32_t)stBuf2[j];
   1022          	   fbuffer[j]=(float)value;
   1023          	}	 
   1024          	DFT((float *)fbuffer,(float *)bufferFFT_1,lenFFT);
   1025          
   1026             /* Adding in Fourier Domain */			 
   1027             for(uint16_t i=0;i<lenFFT;i++)
   1028             {
   1029                  bufferFFTSum[i] = bufferFFT[i]+bufferFFT_1[i];
   1030             }
   1031          
   1032             rDFT(lenFFT,1,bufferFFTSum,fbuffer);
   1033          #endif
   1034          }
   \                     FFT_SUM: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1035          

   \                                 In section .text, align 2, keep-with-next
   1036          int32_t EnergyNoiseCalc(uint16_t numLen)
   1037          {
   \                     EnergyNoiseCalc: (+1)
   \   00000000   0x4602             MOV      R2,R0
   1038          	int64_t SumError;
   1039                  SumError=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xB550             PUSH     {R4,R6,LR}
   \   00000006   0x2100             MOVS     R1,#+0
   1040          	/* noise energy */
   1041          	for(uint16_t j=0;j<numLen;j++)
   \   00000008   0xB15A             CBZ.N    R2,??EnergyNoiseCalc_0
   \   0000000A   0x.... 0x....      ADR.W    R3,NoiseBG
   \   0000000E   0x4616             MOV      R6,R2
   1042          	{
   1043          		//EnergySignal += pRef[i] * pRef[i];
   1044          		//EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]); 
   1045          		SumError += NoiseBG[j]*NoiseBG[j];   
   \                     ??EnergyNoiseCalc_1: (+1)
   \   00000010   0xF933 0x4B02      LDRSH    R4,[R3], #+2
   \   00000014   0xFB14 0xF404      SMULBB   R4,R4,R4
   \   00000018   0x1900             ADDS     R0,R0,R4
   \   0000001A   0xEB41 0x71E4      ADC      R1,R1,R4, ASR #+31
   1046          	}
   \   0000001E   0x1E76             SUBS     R6,R6,#+1
   \   00000020   0xD1F6             BNE.N    ??EnergyNoiseCalc_1
   1047          
   1048          	EnergyError = SumError/numLen;
   \                     ??EnergyNoiseCalc_0: (+1)
   \   00000022   0x2300             MOVS     R3,#+0
   \   00000024   0x....             LDR.N    R4,??DataTable16_18
   \   00000026   0x.... 0x....      BL       __aeabi_ldivmod
   \   0000002A   0x6020             STR      R0,[R4, #+0]
   1049          
   1050          	return EnergyError;
   \   0000002C   0xBD50             POP      {R4,R6,PC}       ;; return
   1051          
   1052          }
   1053          
   1054          /* Generalized Cross Correlation with Phase Transform (GCC-PHAT)  */
   1055          /* Input: data from 2 microphones in time domain, length of data       */
   1056          /* Output: Generlize Cross Correlation value                                    */

   \                                 In section .text, align 4, keep-with-next
   1057          int16_t GCC_PHAT(int16_t * vDataIn1, int16_t * vDataIn2, uint16_t numLen, uint32_t * CrssCorVal )
   1058          {
   \                     GCC_PHAT: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0014             MOVS     R4,R2
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0xED2D 0x8B06      VPUSH    {D8-D10}
   \   0000000C   0xB082             SUB      SP,SP,#+8
   \   0000000E   0x461D             MOV      R5,R3
   1059              uint32_t idxArgMax;
   1060              float ValMax;
   1061          
   1062          	/* Fourier Transform for Data In 1 */
   1063          	RFFT_GCC(vDataIn1,S_GCC1,vDataIn1_FFT,numLen);
   \   00000010   0x.... 0x....      LDR.W    R8,??DataTable16_2
   \   00000014   0xD012             BEQ.N    ??GCC_PHAT_0
   \   00000016   0x4641             MOV      R1,R8
   \   00000018   0x....             LDR.N    R2,??DataTable16_10
   \   0000001A   0x4623             MOV      R3,R4
   \                     ??GCC_PHAT_1: (+1)
   \   0000001C   0xF930 0x6B02      LDRSH    R6,[R0], #+2
   \   00000020   0xEDD2 0x0A00      VLDR     S1,[R2, #0]
   \   00000024   0x1D12             ADDS     R2,R2,#+4
   \   00000026   0xEE00 0x6A10      VMOV     S0,R6
   \   0000002A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000002E   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000032   0xED81 0x0A00      VSTR     S0,[R1, #0]
   \   00000036   0x1D09             ADDS     R1,R1,#+4
   \   00000038   0x1E5B             SUBS     R3,R3,#+1
   \   0000003A   0xD1EF             BNE.N    ??GCC_PHAT_1
   \                     ??GCC_PHAT_0: (+1)
   \   0000003C   0x....             LDR.N    R6,??DataTable16_8
   \   0000003E   0x2300             MOVS     R3,#+0
   \   00000040   0x4632             MOV      R2,R6
   \   00000042   0x4641             MOV      R1,R8
   \   00000044   0x....             LDR.N    R0,??DataTable16_9
   \   00000046   0x.... 0x....      BL       arm_rfft_fast_f32
   1064          	
   1065              /* Fourier Trnasform for Data In 2 */
   1066          	RFFT_GCC(vDataIn2,S_GCC2,vDataIn2_FFT,numLen);
   \   0000004A   0xB194             CBZ.N    R4,??GCC_PHAT_2
   \   0000004C   0x4640             MOV      R0,R8
   \   0000004E   0x....             LDR.N    R1,??DataTable16_10
   \   00000050   0x4622             MOV      R2,R4
   \                     ??GCC_PHAT_3: (+1)
   \   00000052   0xF937 0x3B02      LDRSH    R3,[R7], #+2
   \   00000056   0xEDD1 0x0A00      VLDR     S1,[R1, #0]
   \   0000005A   0x1D09             ADDS     R1,R1,#+4
   \   0000005C   0xEE00 0x3A10      VMOV     S0,R3
   \   00000060   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000064   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   00000068   0xED80 0x0A00      VSTR     S0,[R0, #0]
   \   0000006C   0x1D00             ADDS     R0,R0,#+4
   \   0000006E   0x1E52             SUBS     R2,R2,#+1
   \   00000070   0xD1EF             BNE.N    ??GCC_PHAT_3
   \                     ??GCC_PHAT_2: (+1)
   \   00000072   0xF506 0x5700      ADD      R7,R6,#+8192
   \   00000076   0x4641             MOV      R1,R8
   \   00000078   0x2300             MOVS     R3,#+0
   \   0000007A   0x463A             MOV      R2,R7
   \   0000007C   0x....             LDR.N    R0,??DataTable16_11
   \   0000007E   0xF506 0x48C0      ADD      R8,R6,#+24576
   \   00000082   0x.... 0x....      BL       arm_rfft_fast_f32
   1067          
   1068          	/* Complex conjugate for Datat 2 FFT */
   1069          	arm_cmplx_conj_f32(vDataIn2_FFT,vDataIn2_FFT_CJ, numLen);
   \   00000086   0x4622             MOV      R2,R4
   \   00000088   0x4641             MOV      R1,R8
   \   0000008A   0x4638             MOV      R0,R7
   \   0000008C   0xED9F 0x....      VLDR.W   S18,??DataTable16_12  ;; 0x358637be
   \   00000090   0x.... 0x....      BL       arm_cmplx_conj_f32
   1070              
   1071          	/* cross spectra  */
   1072          	arm_cmplx_mult_cmplx_f32(vDataIn1_FFT,vDataIn2_FFT_CJ,vDataIn2_FFT,numLen); /* vDataIn2_FFT is  using at the destination output to save the memory */
   \   00000094   0x4623             MOV      R3,R4
   \   00000096   0x463A             MOV      R2,R7
   \   00000098   0x4641             MOV      R1,R8
   \   0000009A   0x4630             MOV      R0,R6
   \   0000009C   0x.... 0x....      BL       arm_cmplx_mult_cmplx_f32
   1073          
   1074              /* magnitude */
   1075          	arm_cmplx_mag_f32(vDataIn2_FFT,vDataIn1_FFT, numLen); /* vDataIn1_FFT is  using at the destination output to save the memory */
   \   000000A0   0x4622             MOV      R2,R4
   \   000000A2   0x4631             MOV      R1,R6
   \   000000A4   0x4638             MOV      R0,R7
   \   000000A6   0x2700             MOVS     R7,#+0
   \   000000A8   0x.... 0x....      BL       arm_cmplx_mag_f32
   1076          
   1077          	/* Output normalize */
   1078          	for (uint16_t i=0; i<2*numLen;i++)
   \   000000AC   0xED9F 0x....      VLDR.W   D8,??DataTable16_13
   \   000000B0   0xE015             B.N      ??GCC_PHAT_4
   1079          	{
   1080          	    vDataIn_FFT[i] = vDataIn2_FFT[i]/MAX(vDataIn1_FFT[i%2],0.000001);
   \                     ??GCC_PHAT_5: (+1)
   \   000000B2   0xEEB0 0xAA48      VMOV.F32 S20,S16
   \   000000B6   0xEEF0 0xAA68      VMOV.F32 S21,S17
   \                     ??GCC_PHAT_6: (+1)
   \   000000BA   0xEB06 0x0887      ADD      R8,R6,R7, LSL #+2
   \   000000BE   0x1C7F             ADDS     R7,R7,#+1
   \   000000C0   0xB2BF             UXTH     R7,R7
   \   000000C2   0xF508 0x5000      ADD      R0,R8,#+8192
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0x.... 0x....      BL       __aeabi_f2d
   \   000000CC   0xEC53 0x2B1A      VMOV     R2,R3,D10
   \   000000D0   0x.... 0x....      BL       __aeabi_ddiv
   \   000000D4   0x.... 0x....      BL       __aeabi_d2f
   \   000000D8   0xF508 0x4180      ADD      R1,R8,#+16384
   \   000000DC   0x6008             STR      R0,[R1, #+0]
   \                     ??GCC_PHAT_4: (+1)
   \   000000DE   0xEBB7 0x0F44      CMP      R7,R4, LSL #+1
   \   000000E2   0xDA12             BGE.N    ??GCC_PHAT_7
   \   000000E4   0xEB07 0x70D7      ADD      R0,R7,R7, LSR #+31
   \   000000E8   0x1040             ASRS     R0,R0,#+1
   \   000000EA   0xEBA7 0x0040      SUB      R0,R7,R0, LSL #+1
   \   000000EE   0xF856 0x0020      LDR      R0,[R6, R0, LSL #+2]
   \   000000F2   0xEE00 0x0A10      VMOV     S0,R0
   \   000000F6   0xEEB4 0x0A49      VCMP.F32 S0,S18
   \   000000FA   0xEEF1 0xFA10      FMSTAT   
   \   000000FE   0xDBD8             BLT.N    ??GCC_PHAT_5
   \   00000100   0x.... 0x....      BL       __aeabi_f2d
   \   00000104   0xEC41 0x0B1A      VMOV     D10,R0,R1
   \   00000108   0xE7D7             B.N      ??GCC_PHAT_6
   1081          	}
   1082          
   1083              /* Invert FFT */
   1084              arm_rfft_fast_f32(&IS_GCC, (float *)vDataIn_FFT, (float *)vDataIn,1);
   \                     ??GCC_PHAT_7: (+1)
   \   0000010A   0xF506 0x4720      ADD      R7,R6,#+40960
   \   0000010E   0xF506 0x4180      ADD      R1,R6,#+16384
   \   00000112   0x2301             MOVS     R3,#+1
   \   00000114   0x463A             MOV      R2,R7
   \   00000116   0x....             LDR.N    R0,??DataTable16_19
   \   00000118   0xF506 0x4600      ADD      R6,R6,#+32768
   \   0000011C   0x.... 0x....      BL       arm_rfft_fast_f32
   1085          
   1086              FFTShift(vDataIn,vDataOut,numLen); 
   \   00000120   0x4622             MOV      R2,R4
   \   00000122   0x4631             MOV      R1,R6
   \   00000124   0x4638             MOV      R0,R7
   \   00000126   0x.... 0x....      BL       FFTShift
   1087          	
   1088              arm_max_f32(vDataOut,numLen,&ValMax,&idxArgMax);
   \   0000012A   0x466B             MOV      R3,SP
   \   0000012C   0xAA01             ADD      R2,SP,#+4
   \   0000012E   0x4621             MOV      R1,R4
   \   00000130   0x4630             MOV      R0,R6
   \   00000132   0x.... 0x....      BL       arm_max_f32
   \   00000136   0x9900             LDR      R1,[SP, #+0]
   \   00000138   0xEBA1 0x0154      SUB      R1,R1,R4, LSR #+1
   \   0000013C   0xB209             SXTH     R1,R1
   \   0000013E   0x1DC9             ADDS     R1,R1,#+7
   \   00000140   0x290F             CMP      R1,#+15
   \   00000142   0xD20E             BCS.N    ??GCC_PHAT_8
   1089          	
   1090          	if (((int16_t)(idxArgMax-numLen/2)>-8)&&((int16_t)(idxArgMax-numLen/2)<8))
   1091          	{
   1092          		*CrssCorVal = (uint32_t)ValMax;
   \   00000144   0xED9D 0x0A01      VLDR     S0,[SP, #+4]
   \   00000148   0xEEBC 0x0AC0      VCVT.U32.F32 S0,S0
   \   0000014C   0xED85 0x0A00      VSTR     S0,[R5, #0]
   1093          	    return (int16_t)(idxArgMax-numLen/2);
   \   00000150   0x9900             LDR      R1,[SP, #+0]
   1094          	}
   1095          	else
   1096          	{
   1097          	   *CrssCorVal = 0;
   1098          		return 0;
   \   00000152   0xB002             ADD      SP,SP,#+8
   \   00000154   0xEBA1 0x0054      SUB      R0,R1,R4, LSR #+1
   \   00000158   0xECBD 0x8B06      VPOP     {D8-D10}
   \   0000015C   0xB200             SXTH     R0,R0
   \   0000015E   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??GCC_PHAT_8: (+1)
   \   00000162   0x2000             MOVS     R0,#+0
   \   00000164   0x6028             STR      R0,[R5, #+0]
   \   00000166   0xB002             ADD      SP,SP,#+8
   \   00000168   0xECBD 0x8B06      VPOP     {D8-D10}
   \   0000016C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1099          	}
   1100          }
   1101          
   1102          /** COPY from Wooters
   1103           * Shift the output of an FFT.
   1104           *
   1105           * The index of the mid-point in the output will be located at: ceil(_N/2)
   1106           * @ingroup GCC
   1107           */

   \                                 In section .text, align 2, keep-with-next
   1108          void FFTShift(const float * const in, float * const out, const uint16_t N)
   1109          {
   \                     FFTShift: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4616             MOV      R6,R2
   \   00000006   0x460D             MOV      R5,R1
   1110            /* mid-point of out[] will be located at index ceil(N/2) */
   1111            uint16_t xx = (uint16_t) floor((int16_t) N/2.0);
   \   00000008   0xB230             SXTH     R0,R6
   \   0000000A   0x.... 0x....      BL       __aeabi_i2d
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x....             LDR.N    R3,??DataTable16_20  ;; 0x3fe00000
   \   00000012   0x.... 0x....      BL       __aeabi_dmul
   \   00000016   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   0000001A   0x.... 0x....      BL       floor
   \   0000001E   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   00000022   0x.... 0x....      BL       __aeabi_d2iz
   \   00000026   0xB287             UXTH     R7,R0
   1112          
   1113            /* Copy last half of in[] to first half of out[] */
   1114            memcpy(out,&in[xx],sizeof(float)*(N-xx));
   \   00000028   0x1BF0             SUBS     R0,R6,R7
   \   0000002A   0x0082             LSLS     R2,R0,#+2
   \   0000002C   0xEB04 0x0187      ADD      R1,R4,R7, LSL #+2
   \   00000030   0x4628             MOV      R0,R5
   \   00000032   0x.... 0x....      BL       __aeabi_memcpy
   1115          
   1116            /* Copy first half of in[] to end of out[] */
   1117            memcpy(&out[N-xx],in,sizeof(float)*xx);
   \   00000036   0x1BF0             SUBS     R0,R6,R7
   \   00000038   0x00BA             LSLS     R2,R7,#+2
   \   0000003A   0x4621             MOV      R1,R4
   \   0000003C   0xEB05 0x0080      ADD      R0,R5,R0, LSL #+2
   \   00000040   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   00000044   0x.... 0x....      B.W      __aeabi_memcpy
   1118          }
   1119          
   1120          
   1121          /** COPY from Wooters
   1122           * Compute the entropy of the given vector of values. This actually
   1123           * returns a "normalized" entropy value in which the entropy of the
   1124           * distribution is divided by the maximum entropy possible for that
   1125           * distribution. That away, the return value is always between 0.0 and
   1126           * 1.0.
   1127           *
   1128           * @param a Pointer to an array of doubles representing the distribution.
   1129           * @param N The length of the array \a a[]
   1130           * @param clip Since negative values in the input array can cause
   1131           * problems when computing the entropy, we need to decide how to
   1132           * handle them. If \a clip is true, then negative values in \a a[] will
   1133           * be ignored. If it is false, then all values in \a a[] will be squared
   1134           * and the entropy will be computed over the a^2.
   1135           *
   1136           */

   \                                 In section .text, align 4, keep-with-next
   1137          float MD_entropy(const float* const a, uint16_t N, const uint8_t clip) 
   1138          {
   \                     MD_entropy: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x460F             MOV      R7,R1
   1139            if (N <= 1) return 0.0;
   \   00000006   0x2F02             CMP      R7,#+2
   \   00000008   0xED2D 0x8B08      VPUSH    {D8-D11}
   \   0000000C   0x4682             MOV      R10,R0
   \   0000000E   0x4616             MOV      R6,R2
   \   00000010   0xBFB8             IT       LT 
   \   00000012   0xED9F 0x....      VLDRLT.W S0,??DataTable16_15  ;; 0x0
   \   00000016   0xF2C0 0x8098      BLT.W    ??MD_entropy_0
   1140          
   1141            float maxe = -log2(1.0/(float)N); /* max entropy */
   \   0000001A   0xEE00 0x7A10      VMOV     S0,R7
   \   0000001E   0xF04F 0x34FF      MOV      R4,#-1
   \   00000022   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000026   0xEE10 0x0A10      VMOV     R0,S0
   \   0000002A   0x.... 0x....      BL       __aeabi_f2d
   \   0000002E   0x4602             MOV      R2,R0
   \   00000030   0x460B             MOV      R3,R1
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR.N    R1,??DataTable16_14  ;; 0x3ff00000
   \   00000036   0x.... 0x....      BL       __aeabi_ddiv
   \   0000003A   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       __iar_Log
   \   00000044   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   00000048   0xF081 0x4100      EOR      R1,R1,#0x80000000
   1142            float ent = 0.0;
   \   0000004C   0xED9F 0x....      VLDR.W   S18,??DataTable16_15  ;; 0x0
   \   00000050   0x.... 0x....      BL       __aeabi_d2f
   \   00000054   0xEE08 0x0A10      VMOV     S16,R0
   1143            float tot = 0.0;
   \   00000058   0xEDDF 0x....      VLDR.W   S17,??DataTable16_15  ;; 0x0
   1144            uint16_t i;
   1145            float p;
   1146          
   1147            if (clip) 
   \   0000005C   0xB32E             CBZ.N    R6,??MD_entropy_1
   \   0000005E   0x4654             MOV      R4,R10
   \   00000060   0x463D             MOV      R5,R7
   \   00000062   0xED9F 0x....      VLDR.W   D10,??DataTable16_21
   1148            {
   1149              for (i=0;i<N;i++) tot += (a[i]<0.0) ? 0.0 : a[i];
   \                     ??MD_entropy_2: (+1)
   \   00000066   0xED94 0x0A00      VLDR     S0,[R4, #0]
   \   0000006A   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   0000006E   0xEEF1 0xFA10      FMSTAT   
   \   00000072   0xD504             BPL.N    ??MD_entropy_3
   \   00000074   0xEEB0 0xBA4A      VMOV.F32 S22,S20
   \   00000078   0xEEF0 0xBA6A      VMOV.F32 S23,S21
   \   0000007C   0xE005             B.N      ??MD_entropy_4
   \                     ??MD_entropy_3: (+1)
   \   0000007E   0xEE10 0x0A10      VMOV     R0,S0
   \   00000082   0x.... 0x....      BL       __aeabi_f2d
   \   00000086   0xEC41 0x0B1B      VMOV     D11,R0,R1
   \                     ??MD_entropy_4: (+1)
   \   0000008A   0xEE18 0x0A90      VMOV     R0,S17
   \   0000008E   0x1D24             ADDS     R4,R4,#+4
   \   00000090   0x.... 0x....      BL       __aeabi_f2d
   \   00000094   0xEC53 0x2B1B      VMOV     R2,R3,D11
   \   00000098   0x.... 0x....      BL       __aeabi_dadd
   \   0000009C   0x.... 0x....      BL       __aeabi_d2f
   \   000000A0   0x1E6D             SUBS     R5,R5,#+1
   \   000000A2   0xEE08 0x0A90      VMOV     S17,R0
   \   000000A6   0xD1DE             BNE.N    ??MD_entropy_2
   \   000000A8   0xE008             B.N      ??MD_entropy_5
   1150            } 
   \                     ??MD_entropy_1: (+1)
   \   000000AA   0x4650             MOV      R0,R10
   \   000000AC   0x4639             MOV      R1,R7
   1151            else
   1152            {
   1153              for (i=0;i<N;i++) tot += a[i]*a[i]; /* use a^2 */
   \                     ??MD_entropy_6: (+1)
   \   000000AE   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \   000000B2   0x1D00             ADDS     R0,R0,#+4
   \   000000B4   0x1E49             SUBS     R1,R1,#+1
   \   000000B6   0xEE40 0x8A00      VMLA.F32 S17,S0,S0
   \   000000BA   0xD1F8             BNE.N    ??MD_entropy_6
   1154            }
   1155          
   1156            if (tot==0.0) return maxe;
   \                     ??MD_entropy_5: (+1)
   \   000000BC   0xEEF5 0x8A40      VCMP.F32 S17,#0.0
   \   000000C0   0xEEF1 0xFA10      FMSTAT   
   \   000000C4   0xBF08             IT       EQ 
   \   000000C6   0xEEB0 0x0A48      VMOVEQ.F32 S0,S16
   \   000000CA   0xD03E             BEQ.N    ??MD_entropy_0
   1157          
   1158            for (i=0;i<N;i++)
   1159            {
   1160              if (a[i] == 0.0) continue;
   \                     ??MD_entropy_7: (+1)
   \   000000CC   0xED9A 0x0A00      VLDR     S0,[R10, #0]
   \   000000D0   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   000000D4   0xEEF1 0xFA10      FMSTAT   
   \   000000D8   0xD02F             BEQ.N    ??MD_entropy_8
   1161              if (clip && (a[i] < 0.0)) continue;
   \   000000DA   0xB12E             CBZ.N    R6,??MD_entropy_9
   \   000000DC   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   000000E0   0xEEF1 0xFA10      FMSTAT   
   \   000000E4   0xD429             BMI.N    ??MD_entropy_8
   1162          
   1163              if (clip)
   1164                p = a[i]/tot; /* prob of a[i] */
   \   000000E6   0xE001             B.N      ??MD_entropy_10
   1165              else
   1166                p = (a[i]*a[i])/tot; /* no clipping, so prob a[i]^2 */
   \                     ??MD_entropy_9: (+1)
   \   000000E8   0xEE20 0x0A00      VMUL.F32 S0,S0,S0
   \                     ??MD_entropy_10: (+1)
   \   000000EC   0xEEC0 0x9A28      VDIV.F32 S19,S0,S17
   1167          
   1168              ent += p * log2(p);
   \   000000F0   0xEE19 0x0A10      VMOV     R0,S18
   \   000000F4   0xF04F 0x3BFF      MOV      R11,#-1
   \   000000F8   0x.... 0x....      BL       __aeabi_f2d
   \   000000FC   0x4680             MOV      R8,R0
   \   000000FE   0x4689             MOV      R9,R1
   \   00000100   0xEE19 0x0A90      VMOV     R0,S19
   \   00000104   0x.... 0x....      BL       __aeabi_f2d
   \   00000108   0x4604             MOV      R4,R0
   \   0000010A   0x460D             MOV      R5,R1
   \   0000010C   0xEE19 0x0A90      VMOV     R0,S19
   \   00000110   0x.... 0x....      BL       __aeabi_f2d
   \   00000114   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   00000118   0x4658             MOV      R0,R11
   \   0000011A   0x.... 0x....      BL       __iar_Log
   \   0000011E   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   00000122   0x4622             MOV      R2,R4
   \   00000124   0x462B             MOV      R3,R5
   \   00000126   0x.... 0x....      BL       __aeabi_dmul
   \   0000012A   0x4642             MOV      R2,R8
   \   0000012C   0x464B             MOV      R3,R9
   \   0000012E   0x.... 0x....      BL       __aeabi_dadd
   \   00000132   0x.... 0x....      BL       __aeabi_d2f
   \   00000136   0xEE09 0x0A10      VMOV     S18,R0
   1169            }
   \                     ??MD_entropy_8: (+1)
   \   0000013A   0x1E7F             SUBS     R7,R7,#+1
   \   0000013C   0xF10A 0x0A04      ADD      R10,R10,#+4
   \   00000140   0xD1C4             BNE.N    ??MD_entropy_7
   1170          
   1171            return -ent/maxe;
   \   00000142   0xEE89 0x0A08      VDIV.F32 S0,S18,S16
   \   00000146   0xEEB1 0x0A40      VNEG.F32 S0,S0
   \                     ??MD_entropy_0: (+1)
   \   0000014A   0xECBD 0x8B08      VPOP     {D8-D11}
   \   0000014E   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   1172          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xC2C80000         DC32     0xc2c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x43480000         DC32     0x43480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x00000000         DC32     0x0,0x3FE00000
   \              0x3FE00000   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x00000000         DC32     0x0,0x3FF00000
   \              0x3FF00000   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x00000000         DC32     0x0,0x408FF800
   \              0x408FF800   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x5A7ED197         DC32     0x5A7ED197,0x401921FB
   \              0x401921FB   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x5A7ED197         DC32     0x5a7ed197

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x401921FB         DC32     0x401921fb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x5A7ED197         DC32     0x5A7ED197,0x400921FB
   \              0x400921FB   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     ??Out_Old

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0xFFFF8000         DC32     0xffff8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     ??InOld

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     ??InOld_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0xFFFFB486         DC32     0xffffb486

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     ??iRing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0xFFFF8000         DC32     0xffff8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     DataFFT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x........         DC32     fbuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x........         DC32     IS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x........         DC32     `S1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   0x........         DC32     `S2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   0x........         DC32     `S3`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   0x........         DC32     `S4`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   0x........         DC32     vDataIn1_FFT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   0x........         DC32     S_GCC1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   0x........         DC32     fir256Coff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   0x........         DC32     S_GCC2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   0x358637BE         DC32     0x358637be

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   0xA0B5ED8D         DC32     0xA0B5ED8D,0x3EB0C6F7
   \              0x3EB0C6F7   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \   00000000   0x408FF800         DC32     0x408ff800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_17:
   \   00000000   0x........         DC32     ??Initial_Array

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_18:
   \   00000000   0x........         DC32     EnergyError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_19:
   \   00000000   0x........         DC32     IS_GCC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_20:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_21:
   \   00000000   0x00000000         DC32     0x0,0x0
   \              0x00000000   
   1173          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   CrssCor
        64   -> free
        64   -> malloc
        64 __aeabi_ldivmod
      48   DFT
        48   -> __aeabi_d2f
        48   -> __aeabi_ddiv
        48   -> __aeabi_dmul
        48   -> __aeabi_f2d
        48   -> arm_cos_f32
        48   -> arm_sin_f32
     552   Decimation
       552   -> __aeabi_memcpy4
      64   Delay_Sum_FFT
        64   -> arm_rfft_fast_f32
      12   EnergyNoiseCalc
        12 __aeabi_ldivmod
      24   FFTShift
        24   -> __aeabi_d2iz
        24   -> __aeabi_dmul
        24   -> __aeabi_i2d
         0   -> __aeabi_memcpy
        24   -> __aeabi_memcpy
        24   -> floor
       0   FFT_SUM
       0   FactorUpd
      56   GCC_PHAT
        56   -> FFTShift
        56   -> __aeabi_d2f
        56   -> __aeabi_ddiv
        56   -> __aeabi_f2d
        56   -> arm_cmplx_conj_f32
        56   -> arm_cmplx_mag_f32
        56   -> arm_cmplx_mult_cmplx_f32
        56   -> arm_max_f32
        56   -> arm_rfft_fast_f32
      28   LowPass
      36   LowPass2ndOder
      36   LowPass2ndOder_1
      32   LowPassIIR
      72   MD_entropy
        72   -> __aeabi_d2f
        72   -> __aeabi_dadd
        72   -> __aeabi_ddiv
        72   -> __aeabi_dmul
        72   -> __aeabi_f2d
        72   -> __iar_Log
      20   PCM2PDM
      44   PDM2PCM
      12   Precalculation
      24   Std_AutoCorr
      24   Std_CrssCor
      20   Std_MatCorr
      48   Window
        48   -> __aeabi_d2f
        48   -> __aeabi_ddiv
        48   -> __aeabi_dmul
        48   -> __aeabi_dsub
        48   -> __aeabi_i2d
        48   -> __iar_Sin
      16   iirFilter
      88   lowpassFIR
        88   -> __aeabi_d2f
        88   -> __aeabi_ddiv
        88   -> __aeabi_dmul
        88   -> __aeabi_f2d
        88   -> __aeabi_ul2f
        88   -> __iar_Sin
      64   rDFT
        64   -> __aeabi_d2f
        64   -> __aeabi_ddiv
        64   -> __aeabi_dmul
        64   -> __aeabi_f2d
        64   -> __aeabi_i2d
        64   -> arm_cos_f32
        64   -> arm_sin_f32


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ??DataTable10
       8  ??DataTable10_1
       8  ??DataTable10_2
       8  ??DataTable10_3
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       8  ??DataTable12_3
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable14
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_10
       4  ??DataTable16_11
       4  ??DataTable16_12
       8  ??DataTable16_13
       4  ??DataTable16_14
       4  ??DataTable16_15
       4  ??DataTable16_16
       4  ??DataTable16_17
       4  ??DataTable16_18
       4  ??DataTable16_19
       4  ??DataTable16_2
       4  ??DataTable16_20
       8  ??DataTable16_21
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
       4  ??DataTable5
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
      26  ?Subroutine0
       6  ?Subroutine1
     516  ?_0
     256  CrssCor
     200  DFT
       4  Data
   42080  DataFFT
          bufferFFTSum
          fbufferOut
     228  Decimation
     492  Delay_Sum_FFT
       4  EnergyError
      46  EnergyNoiseCalc
       4  EnergySound
      72  FFTShift
       2  FFT_SUM
      22  FactorUpd
     368  GCC_PHAT
       8  InOld
          InOld1
          Out_Old
          Out_Old1
       8  InOld
          InOld1
          Out_Old
          Out_Old1
       4  Initial_Array
     160  LowPass
     104  LowPass2ndOder
     102  LowPass2ndOder_1
     156  LowPassIIR
     338  MD_entropy
    2048  NoiseBG
       2  Out_Old
     150  PCM2PDM
     228  PDM2PCM
      86  Precalculation
      72  Std_AutoCorr
      72  Std_CrssCor
      78  Std_MatCorr
     110  Window
    4496  fbuffer
     268  iRing
          OutRing
          Data_Old
     120  iirFilter
     298  lowpassFIR
     252  rDFT
   49152  vDataIn1_FFT
          vDataIn2_FFT
          vDataIn_FFT
          vDataIn2_FFT_CJ
          vDataOut
          vDataIn

 
 96 030 bytes in section .bss
  6 796 bytes in section .text
 
  6 796 bytes of CODE memory
 96 030 bytes of DATA memory

Errors: none
Warnings: 2
