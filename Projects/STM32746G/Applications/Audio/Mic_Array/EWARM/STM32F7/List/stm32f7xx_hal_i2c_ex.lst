###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       23/Feb/2016  19:41:47
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_i2c_ex.c
#    Command line =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_i2c_ex.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7
#    List file    =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\stm32f7xx_hal_i2c_ex.lst
#    Object file  =  
#        D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\stm32f7xx_hal_i2c_ex.o
#
###############################################################################

D:\sop1hc\Github\data\Mic_Array_V00\USB_STREAMING\Mic_Array\Drivers\STM32F7xx_HAL_Driver\Src\stm32f7xx_hal_i2c_ex.c
      1          /**
                   ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2            ******************************************************************************
      3            * @file    stm32f7xx_hal_i2c_ex.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    25-June-2015
      7            * @brief   I2C Extended HAL module driver.
      8            *          This file provides firmware functions to manage the following 
      9            *          functionalities of I2C Extended peripheral:
     10            *           + Extended features functions
     11            *         
     12            @verbatim
     13            ==============================================================================
     14                         ##### I2C peripheral Extended features  #####
     15            ==============================================================================
     16                     
     17            [..] Comparing to other previous devices, the I2C interface for STM32L4XX
     18                 devices contains the following additional features
     19                 
     20                 (+) Possibility to disable or enable Analog Noise Filter
     21                 (+) Use of a configured Digital Noise Filter
     22                 (+) Disable or enable wakeup from Stop mode
     23             
     24                               ##### How to use this driver #####
     25            ==============================================================================
     26            [..] This driver provides functions to:
     27              (#) Configure I2C Analog noise filter using the function HAL_I2CEx_ConfigAnalogFilter()
     28              (#) Configure I2C Digital noise filter using the function HAL_I2CEx_ConfigDigitalFilter()
     29            @endverbatim
     30            ******************************************************************************
     31            * @attention
     32            *
     33            * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
     34            *
     35            * Redistribution and use in source and binary forms, with or without modification,
     36            * are permitted provided that the following conditions are met:
     37            *   1. Redistributions of source code must retain the above copyright notice,
     38            *      this list of conditions and the following disclaimer.
     39            *   2. Redistributions in binary form must reproduce the above copyright notice,
     40            *      this list of conditions and the following disclaimer in the documentation
     41            *      and/or other materials provided with the distribution.
     42            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     43            *      may be used to endorse or promote products derived from this software
     44            *      without specific prior written permission.
     45            *
     46            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     47            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     48            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     49            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     50            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     51            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     52            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     53            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     54            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     55            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     56            *
     57            ******************************************************************************  
     58            */ 
     59          
     60          /* Includes ------------------------------------------------------------------*/
     61          #include "stm32f7xx_hal.h"
     62          
     63          /** @addtogroup STM32F7xx_HAL_Driver
     64            * @{
     65            */
     66          
     67          /** @defgroup I2CEx I2C Extended HAL module driver
     68            * @brief I2C Extended HAL module driver
     69            * @{
     70            */
     71          
     72          #ifdef HAL_I2C_MODULE_ENABLED
     73          
     74          /* Private typedef -----------------------------------------------------------*/
     75          /* Private define ------------------------------------------------------------*/
     76          /* Private macro -------------------------------------------------------------*/
     77          /* Private variables ---------------------------------------------------------*/
     78          /* Private function prototypes -----------------------------------------------*/
     79          /* Private functions ---------------------------------------------------------*/
     80          
     81          /** @defgroup I2CEx_Exported_Functions I2C Extended Exported Functions
     82            * @{
     83            */
     84          
     85          /** @defgroup I2CEx_Exported_Functions_Group1 Extended features functions
     86            * @brief    Extended features functions
     87           *
     88          @verbatim   
     89           ===============================================================================
     90                                ##### Extended features functions #####
     91           ===============================================================================  
     92              [..] This section provides functions allowing to:
     93                (+) Configure Noise Filters 
     94          
     95          @endverbatim
     96            * @{
     97            */
     98            
     99          /**
    100            * @brief  Configures I2C Analog noise filter. 
    101            * @param  hi2c : pointer to a I2C_HandleTypeDef structure that contains
    102            *                the configuration information for the specified I2Cx peripheral.
    103            * @param  AnalogFilter : new state of the Analog filter.
    104            * @retval HAL status
    105            */

   \                                 In section .text, align 2, keep-with-next
    106          HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
    107          {
    108            /* Check the parameters */
    109            assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
    110            assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
    111            
    112            if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
    113               || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
   \                     HAL_I2CEx_ConfigAnalogFilter: (+1)
   \   00000000   0xF890 0x2035      LDRB     R2,[R0, #+53]
   \   00000004   0x2A02             CMP      R2,#+2
   \   00000006   0xBF1C             ITT      NE 
   \   00000008   0xF890 0x2035      LDRBNE   R2,[R0, #+53]
   \   0000000C   0x2A12             CMPNE    R2,#+18
   \   0000000E   0xD00F             BEQ.N    ??HAL_I2CEx_ConfigAnalogFilter_0
   \   00000010   0xF890 0x2035      LDRB     R2,[R0, #+53]
   \   00000014   0x2A22             CMP      R2,#+34
   \   00000016   0xBF1C             ITT      NE 
   \   00000018   0xF890 0x2035      LDRBNE   R2,[R0, #+53]
   \   0000001C   0x2A32             CMPNE    R2,#+50
   \   0000001E   0xD007             BEQ.N    ??HAL_I2CEx_ConfigAnalogFilter_0
   \   00000020   0xF890 0x2035      LDRB     R2,[R0, #+53]
   \   00000024   0x2A42             CMP      R2,#+66
   \   00000026   0xBF1C             ITT      NE 
   \   00000028   0xF890 0x2034      LDRBNE   R2,[R0, #+52]
   \   0000002C   0x2A01             CMPNE    R2,#+1
    114            {
    115              return HAL_BUSY;
    116            }
    117            
    118            /* Process Locked */
    119            __HAL_LOCK(hi2c);
   \   0000002E   0xD101             BNE.N    ??HAL_I2CEx_ConfigAnalogFilter_1
   \                     ??HAL_I2CEx_ConfigAnalogFilter_0: (+1)
   \   00000030   0x2002             MOVS     R0,#+2
   \   00000032   0x4770             BX       LR
   \                     ??HAL_I2CEx_ConfigAnalogFilter_1: (+1)
   \   00000034   0x2201             MOVS     R2,#+1
   \   00000036   0xF880 0x2034      STRB     R2,[R0, #+52]
    120          
    121            hi2c->State = HAL_I2C_STATE_BUSY;
   \   0000003A   0x2202             MOVS     R2,#+2
   \   0000003C   0xF880 0x2035      STRB     R2,[R0, #+53]
    122            
    123            /* Disable the selected I2C peripheral */
    124            __HAL_I2C_DISABLE(hi2c);    
   \   00000040   0x6802             LDR      R2,[R0, #+0]
   \   00000042   0x6813             LDR      R3,[R2, #+0]
   \   00000044   0x085B             LSRS     R3,R3,#+1
   \   00000046   0x005B             LSLS     R3,R3,#+1
   \   00000048   0x6013             STR      R3,[R2, #+0]
    125            
    126            /* Reset I2Cx ANOFF bit */
    127            hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
   \   0000004A   0x6802             LDR      R2,[R0, #+0]
   \   0000004C   0x6813             LDR      R3,[R2, #+0]
   \   0000004E   0xF423 0x5380      BIC      R3,R3,#0x1000
   \   00000052   0x6013             STR      R3,[R2, #+0]
    128            
    129            /* Set analog filter bit*/
    130            hi2c->Instance->CR1 |= AnalogFilter;
   \   00000054   0x6802             LDR      R2,[R0, #+0]
   \   00000056   0x6813             LDR      R3,[R2, #+0]
   \   00000058   0x4319             ORRS     R1,R1,R3
   \   0000005A   0x6011             STR      R1,[R2, #+0]
    131            
    132            __HAL_I2C_ENABLE(hi2c); 
   \   0000005C   0x6801             LDR      R1,[R0, #+0]
   \   0000005E   0x680A             LDR      R2,[R1, #+0]
   \   00000060   0xF042 0x0201      ORR      R2,R2,#0x1
   \   00000064   0x600A             STR      R2,[R1, #+0]
    133            
    134            hi2c->State = HAL_I2C_STATE_READY;
   \   00000066   0x2101             MOVS     R1,#+1
   \   00000068   0xF880 0x1035      STRB     R1,[R0, #+53]
    135            
    136            /* Process Unlocked */
    137            __HAL_UNLOCK(hi2c);
   \   0000006C   0x2100             MOVS     R1,#+0
   \   0000006E   0xF880 0x1034      STRB     R1,[R0, #+52]
    138          
    139            return HAL_OK; 
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x4770             BX       LR               ;; return
    140          }
    141          
    142          /**
    143            * @brief  Configures I2C Digital noise filter. 
    144            * @param  hi2c : pointer to a I2C_HandleTypeDef structure that contains
    145            *                the configuration information for the specified I2Cx peripheral.
    146            * @param  DigitalFilter : Coefficient of digital noise filter between 0x00 and 0x0F.
    147            * @retval HAL status
    148            */

   \                                 In section .text, align 2, keep-with-next
    149          HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
    150          {
    151            uint32_t tmpreg = 0;
    152            
    153            /* Check the parameters */
    154            assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
    155            assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
    156            
    157            if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
    158               || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
   \                     HAL_I2CEx_ConfigDigitalFilter: (+1)
   \   00000000   0xF890 0x2035      LDRB     R2,[R0, #+53]
   \   00000004   0x2A02             CMP      R2,#+2
   \   00000006   0xBF1C             ITT      NE 
   \   00000008   0xF890 0x2035      LDRBNE   R2,[R0, #+53]
   \   0000000C   0x2A12             CMPNE    R2,#+18
   \   0000000E   0xD00F             BEQ.N    ??HAL_I2CEx_ConfigDigitalFilter_0
   \   00000010   0xF890 0x2035      LDRB     R2,[R0, #+53]
   \   00000014   0x2A22             CMP      R2,#+34
   \   00000016   0xBF1C             ITT      NE 
   \   00000018   0xF890 0x2035      LDRBNE   R2,[R0, #+53]
   \   0000001C   0x2A32             CMPNE    R2,#+50
   \   0000001E   0xD007             BEQ.N    ??HAL_I2CEx_ConfigDigitalFilter_0
   \   00000020   0xF890 0x2035      LDRB     R2,[R0, #+53]
   \   00000024   0x2A42             CMP      R2,#+66
   \   00000026   0xBF1C             ITT      NE 
   \   00000028   0xF890 0x2034      LDRBNE   R2,[R0, #+52]
   \   0000002C   0x2A01             CMPNE    R2,#+1
    159            {
    160              return HAL_BUSY;
    161            }
    162            
    163            /* Process Locked */
    164            __HAL_LOCK(hi2c);
   \   0000002E   0xD101             BNE.N    ??HAL_I2CEx_ConfigDigitalFilter_1
   \                     ??HAL_I2CEx_ConfigDigitalFilter_0: (+1)
   \   00000030   0x2002             MOVS     R0,#+2
   \   00000032   0x4770             BX       LR
   \                     ??HAL_I2CEx_ConfigDigitalFilter_1: (+1)
   \   00000034   0x2201             MOVS     R2,#+1
   \   00000036   0xF880 0x2034      STRB     R2,[R0, #+52]
    165          
    166            hi2c->State = HAL_I2C_STATE_BUSY;
   \   0000003A   0x2202             MOVS     R2,#+2
   \   0000003C   0xF880 0x2035      STRB     R2,[R0, #+53]
    167            
    168            /* Disable the selected I2C peripheral */
    169            __HAL_I2C_DISABLE(hi2c);  
   \   00000040   0x6802             LDR      R2,[R0, #+0]
   \   00000042   0x6813             LDR      R3,[R2, #+0]
   \   00000044   0x085B             LSRS     R3,R3,#+1
   \   00000046   0x005B             LSLS     R3,R3,#+1
   \   00000048   0x6013             STR      R3,[R2, #+0]
    170            
    171            /* Get the old register value */
    172            tmpreg = hi2c->Instance->CR1;
   \   0000004A   0x6802             LDR      R2,[R0, #+0]
   \   0000004C   0x6813             LDR      R3,[R2, #+0]
    173            
    174            /* Reset I2Cx DNF bits [11:8] */
    175            tmpreg &= ~(I2C_CR1_DFN);
    176            
    177            /* Set I2Cx DNF coefficient */
    178            tmpreg |= DigitalFilter << 8;
    179            
    180            /* Store the new register value */
    181            hi2c->Instance->CR1 = tmpreg;
   \   0000004E   0xF423 0x6370      BIC      R3,R3,#0xF00
   \   00000052   0xEA43 0x2101      ORR      R1,R3,R1, LSL #+8
   \   00000056   0x6011             STR      R1,[R2, #+0]
    182            
    183            __HAL_I2C_ENABLE(hi2c); 
   \   00000058   0x6801             LDR      R1,[R0, #+0]
   \   0000005A   0x680A             LDR      R2,[R1, #+0]
   \   0000005C   0xF042 0x0201      ORR      R2,R2,#0x1
   \   00000060   0x600A             STR      R2,[R1, #+0]
    184            
    185            hi2c->State = HAL_I2C_STATE_READY;
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0xF880 0x1035      STRB     R1,[R0, #+53]
    186            
    187            /* Process Unlocked */
    188            __HAL_UNLOCK(hi2c);
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0xF880 0x1034      STRB     R1,[R0, #+52]
    189          
    190            return HAL_OK; 
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x4770             BX       LR               ;; return
    191          }  
    192          
    193          /**
    194            * @}
    195            */  
    196          
    197          /**
    198            * @}
    199            */  
    200          
    201          #endif /* HAL_I2C_MODULE_ENABLED */
    202          /**
    203            * @}
    204            */
    205          
    206          /**
    207            * @}
    208            */
    209          
    210          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_I2CEx_ConfigAnalogFilter
       0   HAL_I2CEx_ConfigDigitalFilter


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     118  HAL_I2CEx_ConfigAnalogFilter
     114  HAL_I2CEx_ConfigDigitalFilter

 
 232 bytes in section .text
 
 232 bytes of CODE memory

Errors: none
Warnings: 1
