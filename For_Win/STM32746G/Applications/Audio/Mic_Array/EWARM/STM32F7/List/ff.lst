###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       15/May/2016  09:59:27
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Middlewares\Third_Party\FatFs\src\ff.c
#    Command line =  
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Middlewares\Third_Party\FatFs\src\ff.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\ff.lst
#    Object file  =  
#        D:\sop1hc\Mic\Mic_Array\Mic_Array\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\ff.o
#
###############################################################################

D:\sop1hc\Mic\Mic_Array\Mic_Array\Middlewares\Third_Party\FatFs\src\ff.c
      1          /*----------------------------------------------------------------------------/
      2          /  FatFs - FAT file system module  R0.11                 (C)ChaN, 2015
      3          /-----------------------------------------------------------------------------/
      4          / FatFs module is a free software that opened under license policy of
      5          / following conditions.
      6          /
      7          / Copyright (C) 2015, ChaN, all right reserved.
      8          /
      9          / 1. Redistributions of source code must retain the above copyright notice,
     10          /    this condition and the following disclaimer.
     11          /
     12          / This software is provided by the copyright holder and contributors "AS IS"
     13          / and any warranties related to this software are DISCLAIMED.
     14          / The copyright owner or contributors be NOT LIABLE for any damages caused
     15          / by use of this software.
     16          /-----------------------------------------------------------------------------/
     17          / Feb 26,'06 R0.00  Prototype.
     18          /
     19          / Apr 29,'06 R0.01  First stable version.
     20          /
     21          / Jun 01,'06 R0.02  Added FAT12 support.
     22          /                   Removed unbuffered mode.
     23          /                   Fixed a problem on small (<32M) partition.
     24          / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
     25          /
     26          / Sep 22,'06 R0.03  Added f_rename().
     27          /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
     28          / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
     29          /                   Fixed f_mkdir() creates incorrect directory on FAT32.
     30          /
     31          / Feb 04,'07 R0.04  Supported multiple drive system.
     32          /                   Changed some interfaces for multiple drive system.
     33          /                   Changed f_mountdrv() to f_mount().
     34          /                   Added f_mkfs().
     35          / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
     36          /                   Added a capability of extending file size to f_lseek().
     37          /                   Added minimization level 3.
     38          /                   Fixed an endian sensitive code in f_mkfs().
     39          / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
     40          /                   Added FSINFO support.
     41          /                   Fixed DBCS name can result FR_INVALID_NAME.
     42          /                   Fixed short seek (<= csize) collapses the file object.
     43          /
     44          / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
     45          /                   Fixed f_mkfs() on FAT32 creates incorrect FSINFO.
     46          /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
     47          / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
     48          /                   Fixed off by one error at FAT sub-type determination.
     49          /                   Fixed btr in f_read() can be mistruncated.
     50          /                   Fixed cached sector is not flushed when create and close without write.
     51          /
     52          / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
     53          /                   Improved performance of f_lseek() on moving to the same or following cluster.
     54          /
     55          / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
     56          /                   Added long file name feature.
     57          /                   Added multiple code page feature.
     58          /                   Added re-entrancy for multitask operation.
     59          /                   Added auto cluster size selection to f_mkfs().
     60          /                   Added rewind option to f_readdir().
     61          /                   Changed result code of critical errors.
     62          /                   Renamed string functions to avoid name collision.
     63          / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
     64          /                   Added multiple sector size feature.
     65          / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
     66          /                   Fixed wrong cache control in f_lseek().
     67          /                   Added relative path feature.
     68          /                   Added f_chdir() and f_chdrive().
     69          /                   Added proper case conversion to extended character.
     70          / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
     71          /                   Fixed f_unlink() fails to remove a sub-directory on _FS_RPATH.
     72          /                   Fixed name matching error on the 13 character boundary.
     73          /                   Added a configuration option, _LFN_UNICODE.
     74          /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
     75          /
     76          / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
     77          /                   Added file lock feature. (_FS_SHARE)
     78          /                   Added fast seek feature. (_USE_FASTSEEK)
     79          /                   Changed some types on the API, XCHAR->TCHAR.
     80          /                   Changed .fname in the FILINFO structure on Unicode cfg.
     81          /                   String functions support UTF-8 encoding files on Unicode cfg.
     82          / Aug 16,'10 R0.08a Added f_getcwd().
     83          /                   Added sector erase feature. (_USE_ERASE)
     84          /                   Moved file lock semaphore table from fs object to the bss.
     85          /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name contains ';'.
     86          /                   Fixed f_mkfs() creates wrong FAT32 volume.
     87          / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
     88          /                   f_lseek() reports required table size on creating CLMP.
     89          /                   Extended format syntax of f_printf().
     90          /                   Ignores duplicated directory separators in given path name.
     91          /
     92          / Sep 06,'11 R0.09  f_mkfs() supports multiple partition to complete the multiple partition feature.
     93          /                   Added f_fdisk().
     94          / Aug 27,'12 R0.09a Changed f_open() and f_opendir() reject null object pointer to avoid crash.
     95          /                   Changed option name _FS_SHARE to _FS_LOCK.
     96          /                   Fixed assertion failure due to OS/2 EA on FAT12/16 volume.
     97          / Jan 24,'13 R0.09b Added f_setlabel() and f_getlabel().
     98          /
     99          / Oct 02,'13 R0.10  Added selection of character encoding on the file. (_STRF_ENCODE)
    100          /                   Added f_closedir().
    101          /                   Added forced full FAT scan for f_getfree(). (_FS_NOFSINFO)
    102          /                   Added forced mount feature with changes of f_mount().
    103          /                   Improved behavior of volume auto detection.
    104          /                   Improved write throughput of f_puts() and f_printf().
    105          /                   Changed argument of f_chdrive(), f_mkfs(), disk_read() and disk_write().
    106          /                   Fixed f_write() can be truncated when the file size is close to 4GB.
    107          /                   Fixed f_open(), f_mkdir() and f_setlabel() can return incorrect error code.
    108          / Jan 15,'14 R0.10a Added arbitrary strings as drive number in the path name. (_STR_VOLUME_ID)
    109          /                   Added a configuration option of minimum sector size. (_MIN_SS)
    110          /                   2nd argument of f_rename() can have a drive number and it will be ignored.
    111          /                   Fixed f_mount() with forced mount fails when drive number is >= 1.
    112          /                   Fixed f_close() invalidates the file object without volume lock.
    113          /                   Fixed f_closedir() returns but the volume lock is left acquired.
    114          /                   Fixed creation of an entry with LFN fails on too many SFN collisions.
    115          / May 19,'14 R0.10b Fixed a hard error in the disk I/O layer can collapse the directory entry.
    116          /                   Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
    117          / Nov  9,'14 R0.10c Added a configuration option for the platforms without RTC. (_FS_NORTC)
    118          /                   Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel(). (appeared at R0.09b)
    119          /                   Fixed a potential problem of FAT access that can appear on disk error.
    120          /                   Fixed null pointer dereference on attempting to delete the root direcotry. (appeared at R0.08)
    121          / Feb 02,'15 R0.11  Added f_findfirst() and f_findnext(). (_USE_FIND)
    122          /                   Fixed f_unlink() does not remove cluster chain of the file. (appeared at R0.10c)
    123          /                   Fixed _FS_NORTC option does not work properly. (appeared at R0.10c)
    124          /---------------------------------------------------------------------------*/
    125          
    126          #include "ff.h"			/* Declarations of FatFs API */
    127          #include "diskio.h"		/* Declarations of disk I/O functions */
    128          
    129          
    130          /*--------------------------------------------------------------------------
    131          
    132             Module Private Definitions
    133          
    134          ---------------------------------------------------------------------------*/
    135          
    136          #if _FATFS != 32020	/* Revision ID */
    137          #error Wrong include file (ff.h).
    138          #endif
    139          
    140          
    141          /* Reentrancy related */
    142          #if _FS_REENTRANT
    143          #if _USE_LFN == 1
    144          #error Static LFN work area cannot be used at thread-safe configuration
    145          #endif
    146          #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
    147          #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
    148          #else
    149          #define	ENTER_FF(fs)
    150          #define LEAVE_FF(fs, res)	return res
    151          #endif
    152          
    153          #define	ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
    154          
    155          
    156          /* Definitions of sector size */
    157          #if (_MAX_SS < _MIN_SS) || (_MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096) || (_MIN_SS != 512 && _MIN_SS != 1024 && _MIN_SS != 2048 && _MIN_SS != 4096)
    158          #error Wrong sector size configuration
    159          #endif
    160          #if _MAX_SS == _MIN_SS
    161          #define	SS(fs)	((UINT)_MAX_SS)	/* Fixed sector size */
    162          #else
    163          #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
    164          #endif
    165          
    166          
    167          /* Timestamp feature */
    168          #if _FS_NORTC == 1
    169          #if _NORTC_YEAR < 1980 || _NORTC_YEAR > 2107 || _NORTC_MON < 1 || _NORTC_MON > 12 || _NORTC_MDAY < 1 || _NORTC_MDAY > 31
    170          #error Invalid _FS_NORTC settings
    171          #endif
    172          #define GET_FATTIME()	((DWORD)(_NORTC_YEAR - 1980) << 25 | (DWORD)_NORTC_MON << 21 | (DWORD)_NORTC_MDAY << 16)
    173          #else
    174          #define GET_FATTIME()	get_fattime()
    175          #endif
    176          
    177          
    178          /* File access control feature */
    179          #if _FS_LOCK
    180          #if _FS_READONLY
    181          #error _FS_LOCK must be 0 at read-only configuration
    182          #endif
    183          typedef struct {
    184          	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
    185          	DWORD clu;		/* Object ID 2, directory (0:root) */
    186          	WORD idx;		/* Object ID 3, directory index */
    187          	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
    188          } FILESEM;
    189          #endif
    190          
    191          
    192          
    193          /* DBCS code ranges and SBCS extend character conversion table */
    194          
    195          #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
    196          #define _DF1S	0x81	/* DBC 1st byte range 1 start */
    197          #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
    198          #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
    199          #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
    200          #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
    201          #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
    202          #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
    203          #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
    204          
    205          #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
    206          #define _DF1S	0x81
    207          #define _DF1E	0xFE
    208          #define _DS1S	0x40
    209          #define _DS1E	0x7E
    210          #define _DS2S	0x80
    211          #define _DS2E	0xFE
    212          
    213          #elif _CODE_PAGE == 949	/* Korean */
    214          #define _DF1S	0x81
    215          #define _DF1E	0xFE
    216          #define _DS1S	0x41
    217          #define _DS1E	0x5A
    218          #define _DS2S	0x61
    219          #define _DS2E	0x7A
    220          #define _DS3S	0x81
    221          #define _DS3E	0xFE
    222          
    223          #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
    224          #define _DF1S	0x81
    225          #define _DF1E	0xFE
    226          #define _DS1S	0x40
    227          #define _DS1E	0x7E
    228          #define _DS2S	0xA1
    229          #define _DS2E	0xFE
    230          
    231          #elif _CODE_PAGE == 437	/* U.S. (OEM) */
    232          #define _DF1S	0
    233          #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    234          				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    235          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    236          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    237          
    238          #elif _CODE_PAGE == 720	/* Arabic (OEM) */
    239          #define _DF1S	0
    240          #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x90,0x92,0x92,0x93,0x94,0x95,0x49,0x49,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    241          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    242          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    243          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    244          
    245          #elif _CODE_PAGE == 737	/* Greek (OEM) */
    246          #define _DF1S	0
    247          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
    248          				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    249          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    250          				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    251          
    252          #elif _CODE_PAGE == 775	/* Baltic (OEM) */
    253          #define _DF1S	0
    254          #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
    255          				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    256          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    257          				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    258          
    259          #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
    260          #define _DF1S	0
    261          #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x59,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
    262          				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    263          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    264          				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    265          
    266          #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
    267          #define _DF1S	0
    268          #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0x9F, \
    269          				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
    270          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    271          				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
    272          
    273          #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
    274          #define _DF1S	0
    275          #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
    276          				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
    277          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
    278          				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
    279          
    280          #elif _CODE_PAGE == 857	/* Turkish (OEM) */
    281          #define _DF1S	0
    282          #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
    283          				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    284          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    285          				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    286          
    287          #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
    288          #define _DF1S	0
    289          #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x59,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
    290          				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    291          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    292          				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    293          
    294          #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
    295          #define _DF1S	0
    296          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    297          				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    298          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    299          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    300          
    301          #elif _CODE_PAGE == 866	/* Russian (OEM) */
    302          #define _DF1S	0
    303          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    304          				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    305          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    306          				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    307          
    308          #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
    309          #define _DF1S	0
    310          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    311          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    312          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    313          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    314          
    315          #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
    316          #define _DF1S	0
    317          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x8D,0x8E,0x8F, \
    318          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xA3,0xB4,0xB5,0xB6,0xB7,0xB8,0xA5,0xAA,0xBB,0xBC,0xBD,0xBC,0xAF, \
    319          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    320          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xFF}
    321          
    322          #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
    323          #define _DF1S	0
    324          #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x80,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x8D,0x8E,0x8F, \
    325          				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB2,0xA5,0xB5,0xB6,0xB7,0xA8,0xB9,0xAA,0xBB,0xA3,0xBD,0xBD,0xAF, \
    326          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    327          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF}
    328          
    329          #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
    330          #define _DF1S	0
    331          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xAd,0x9B,0x8C,0x9D,0xAE,0x9F, \
    332          				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    333          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    334          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0x9F}
    335          
    336          #elif _CODE_PAGE == 1253 /* Greek (Windows) */
    337          #define _DF1S	0
    338          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    339          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    340          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xA2,0xB8,0xB9,0xBA, \
    341          				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xFB,0xBC,0xFD,0xBF,0xFF}
    342          
    343          #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
    344          #define _DF1S	0
    345          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x9D,0x9E,0x9F, \
    346          				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    347          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    348          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0x9F}
    349          
    350          #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
    351          #define _DF1S	0
    352          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    353          				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    354          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    355          				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
    356          
    357          #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
    358          #define _DF1S	0
    359          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x8C,0x9D,0x9E,0x9F, \
    360          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    361          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    362          				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,0xF3,0x4F,0xF5,0xF6,0xF7,0xF8,0x55,0xFA,0x55,0x55,0xFD,0xFE,0xFF}
    363          
    364          #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
    365          #define _DF1S	0
    366          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
    367          				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xA8,0xB9,0xAA,0xBB,0xBC,0xBD,0xBE,0xAF, \
    368          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    369          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xFF}
    370          
    371          #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
    372          #define _DF1S	0
    373          #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0xAC,0x9D,0x9E,0x9F, \
    374          				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
    375          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
    376          				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xFE,0x9F}
    377          
    378          #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
    379          #if _USE_LFN
    380          #error Cannot use LFN feature without valid code page.
    381          #endif
    382          #define _DF1S	0
    383          
    384          #else
    385          #error Unknown code page
    386          
    387          #endif
    388          
    389          
    390          /* Character code support macros */
    391          #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
    392          #define IsLower(c)	(((c)>='a')&&((c)<='z'))
    393          #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
    394          
    395          #if _DF1S		/* Code page is DBCS */
    396          
    397          #ifdef _DF2S	/* Two 1st byte areas */
    398          #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) <= _DF2E))
    399          #else			/* One 1st byte area */
    400          #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
    401          #endif
    402          
    403          #ifdef _DS3S	/* Three 2nd byte areas */
    404          #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) <= _DS2E) || ((BYTE)(c) >= _DS3S && (BYTE)(c) <= _DS3E))
    405          #else			/* Two 2nd byte areas */
    406          #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) <= _DS2E))
    407          #endif
    408          
    409          #else			/* Code page is SBCS */
    410          
    411          #define IsDBCS1(c)	0
    412          #define IsDBCS2(c)	0
    413          
    414          #endif /* _DF1S */
    415          
    416          
    417          /* Name status flags */
    418          #define NSFLAG		11		/* Index of name status byte in fn[] */
    419          #define NS_LOSS		0x01	/* Out of 8.3 format */
    420          #define NS_LFN		0x02	/* Force to create LFN entry */
    421          #define NS_LAST		0x04	/* Last segment */
    422          #define NS_BODY		0x08	/* Lower case flag (body) */
    423          #define NS_EXT		0x10	/* Lower case flag (ext) */
    424          #define NS_DOT		0x20	/* Dot entry */
    425          
    426          
    427          /* FAT sub-type boundaries (Differ from specs but correct for real DOS/Windows) */
    428          #define MIN_FAT16	4086U	/* Minimum number of clusters as FAT16 */
    429          #define	MIN_FAT32	65526U	/* Minimum number of clusters as FAT32 */
    430          
    431          
    432          /* FatFs refers the members in the FAT structures as byte array instead of
    433          / structure member because the structure is not binary compatible between
    434          / different platforms */
    435          
    436          #define BS_jmpBoot			0		/* x86 jump instruction (3) */
    437          #define BS_OEMName			3		/* OEM name (8) */
    438          #define BPB_BytsPerSec		11		/* Sector size [byte] (2) */
    439          #define BPB_SecPerClus		13		/* Cluster size [sector] (1) */
    440          #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (2) */
    441          #define BPB_NumFATs			16		/* Number of FAT copies (1) */
    442          #define BPB_RootEntCnt		17		/* Number of root directory entries for FAT12/16 (2) */
    443          #define BPB_TotSec16		19		/* Volume size [sector] (2) */
    444          #define BPB_Media			21		/* Media descriptor (1) */
    445          #define BPB_FATSz16			22		/* FAT size [sector] (2) */
    446          #define BPB_SecPerTrk		24		/* Track size [sector] (2) */
    447          #define BPB_NumHeads		26		/* Number of heads (2) */
    448          #define BPB_HiddSec			28		/* Number of special hidden sectors (4) */
    449          #define BPB_TotSec32		32		/* Volume size [sector] (4) */
    450          #define BS_DrvNum			36		/* Physical drive number (2) */
    451          #define BS_BootSig			38		/* Extended boot signature (1) */
    452          #define BS_VolID			39		/* Volume serial number (4) */
    453          #define BS_VolLab			43		/* Volume label (8) */
    454          #define BS_FilSysType		54		/* File system type (1) */
    455          #define BPB_FATSz32			36		/* FAT size [sector] (4) */
    456          #define BPB_ExtFlags		40		/* Extended flags (2) */
    457          #define BPB_FSVer			42		/* File system version (2) */
    458          #define BPB_RootClus		44		/* Root directory first cluster (4) */
    459          #define BPB_FSInfo			48		/* Offset of FSINFO sector (2) */
    460          #define BPB_BkBootSec		50		/* Offset of backup boot sector (2) */
    461          #define BS_DrvNum32			64		/* Physical drive number (2) */
    462          #define BS_BootSig32		66		/* Extended boot signature (1) */
    463          #define BS_VolID32			67		/* Volume serial number (4) */
    464          #define BS_VolLab32			71		/* Volume label (8) */
    465          #define BS_FilSysType32		82		/* File system type (1) */
    466          #define	FSI_LeadSig			0		/* FSI: Leading signature (4) */
    467          #define	FSI_StrucSig		484		/* FSI: Structure signature (4) */
    468          #define	FSI_Free_Count		488		/* FSI: Number of free clusters (4) */
    469          #define	FSI_Nxt_Free		492		/* FSI: Last allocated cluster (4) */
    470          #define MBR_Table			446		/* MBR: Partition table offset (2) */
    471          #define	SZ_PTE				16		/* MBR: Size of a partition table entry */
    472          #define BS_55AA				510		/* Signature word (2) */
    473          
    474          #define	DIR_Name			0		/* Short file name (11) */
    475          #define	DIR_Attr			11		/* Attribute (1) */
    476          #define	DIR_NTres			12		/* Lower case flag (1) */
    477          #define DIR_CrtTimeTenth	13		/* Created time sub-second (1) */
    478          #define	DIR_CrtTime			14		/* Created time (2) */
    479          #define	DIR_CrtDate			16		/* Created date (2) */
    480          #define DIR_LstAccDate		18		/* Last accessed date (2) */
    481          #define	DIR_FstClusHI		20		/* Higher 16-bit of first cluster (2) */
    482          #define	DIR_WrtTime			22		/* Modified time (2) */
    483          #define	DIR_WrtDate			24		/* Modified date (2) */
    484          #define	DIR_FstClusLO		26		/* Lower 16-bit of first cluster (2) */
    485          #define	DIR_FileSize		28		/* File size (4) */
    486          #define	LDIR_Ord			0		/* LFN entry order and LLE flag (1) */
    487          #define	LDIR_Attr			11		/* LFN attribute (1) */
    488          #define	LDIR_Type			12		/* LFN type (1) */
    489          #define	LDIR_Chksum			13		/* Sum of corresponding SFN entry */
    490          #define	LDIR_FstClusLO		26		/* Must be zero (0) */
    491          #define	SZ_DIRE				32		/* Size of a directory entry */
    492          #define	LLEF				0x40	/* Last long entry flag in LDIR_Ord */
    493          #define	DDEM				0xE5	/* Deleted directory entry mark at DIR_Name[0] */
    494          #define	RDDEM				0x05	/* Replacement of the character collides with DDEM */
    495          
    496          
    497          
    498          
    499          /*------------------------------------------------------------*/
    500          /* Module private work area                                   */
    501          /*------------------------------------------------------------*/
    502          /* Remark: Uninitialized variables with static duration are
    503          /  guaranteed zero/null at start-up. If not, either the linker
    504          /  or start-up routine being used is out of ANSI-C standard.
    505          */
    506          
    507          #if _VOLUMES < 1 || _VOLUMES > 9
    508          #error Wrong _VOLUMES setting
    509          #endif

   \                                 In section .bss, align 4
    510          static FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
    511          static WORD Fsid;				/* File system mount ID */
    512          
    513          #if _FS_RPATH && _VOLUMES >= 2
    514          static BYTE CurrVol;			/* Current drive */
    515          #endif
    516          
    517          #if _FS_LOCK
    518          static FILESEM Files[_FS_LOCK];	/* Open object lock semaphores */
   \                     Files:
   \   00000000                      DS8 24
   \   00000018                      DS8 2
   \   0000001A                      DS8 2
   \   0000001C                      DS8 4
    519          #endif
    520          
    521          #if _USE_LFN == 0			/* Non LFN feature */
    522          #define	DEFINE_NAMEBUF		BYTE sfn[12]
    523          #define INIT_BUF(dobj)		(dobj).fn = sfn
    524          #define	FREE_BUF()
    525          #else
    526          #if _MAX_LFN < 12 || _MAX_LFN > 255
    527          #error Wrong _MAX_LFN setting
    528          #endif
    529          #if _USE_LFN == 1			/* LFN feature with static working buffer */
    530          static WCHAR LfnBuf[_MAX_LFN + 1];
    531          #define	DEFINE_NAMEBUF		BYTE sfn[12]
    532          #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
    533          #define	FREE_BUF()
    534          #elif _USE_LFN == 2 		/* LFN feature with dynamic working buffer on the stack */
    535          #define	DEFINE_NAMEBUF		BYTE sfn[12]; WCHAR lbuf[_MAX_LFN + 1]
    536          #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
    537          #define	FREE_BUF()
    538          #elif _USE_LFN == 3 		/* LFN feature with dynamic working buffer on the heap */
    539          #define	DEFINE_NAMEBUF		BYTE sfn[12]; WCHAR *lfn
    540          #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); (dobj).lfn = lfn; (dobj).fn = sfn; }
    541          #define	FREE_BUF()			ff_memfree(lfn)
    542          #else
    543          #error Wrong _USE_LFN setting
    544          #endif
    545          #endif
    546          
    547          #ifdef _EXCVT

   \                                 In section .text, align 4, keep-with-next
    548          static const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for extended characters */
   \                     ExCvt:
   \   00000000   0x80 0x81          DC8 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140
   \              0x82 0x83    
   \              0x84 0x85    
   \              0x86 0x87    
   \              0x88 0x89    
   \              0x8A 0x8B    
   \              0x8C         
   \   0000000D   0x8D 0x8E          DC8 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153
   \              0x8F 0x90    
   \              0x91 0x92    
   \              0x93 0x94    
   \              0x95 0x96    
   \              0x97 0x98    
   \              0x99         
   \   0000001A   0xAD 0x9B          DC8 173, 155, 140, 157, 174, 159, 160, 33, 162, 163, 164, 165, 166, 167
   \              0x8C 0x9D    
   \              0xAE 0x9F    
   \              0xA0 0x21    
   \              0xA2 0xA3    
   \              0xA4 0xA5    
   \              0xA6 0xA7    
   \   00000028   0xA8 0xA9          DC8 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180
   \              0xAA 0xAB    
   \              0xAC 0xAD    
   \              0xAE 0xAF    
   \              0xB0 0xB1    
   \              0xB2 0xB3    
   \              0xB4         
   \   00000035   0xB5 0xB6          DC8 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193
   \              0xB7 0xB8    
   \              0xB9 0xBA    
   \              0xBB 0xBC    
   \              0xBD 0xBE    
   \              0xBF 0xC0    
   \              0xC1         
   \   00000042   0xC2 0xC3          DC8 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206
   \              0xC4 0xC5    
   \              0xC6 0xC7    
   \              0xC8 0xC9    
   \              0xCA 0xCB    
   \              0xCC 0xCD    
   \              0xCE         
   \   0000004F   0xCF 0xD0          DC8 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219
   \              0xD1 0xD2    
   \              0xD3 0xD4    
   \              0xD5 0xD6    
   \              0xD7 0xD8    
   \              0xD9 0xDA    
   \              0xDB         
   \   0000005C   0xDC 0xDD          DC8 220, 221, 222, 223, 192, 193, 194, 195, 196, 197, 198, 199, 200
   \              0xDE 0xDF    
   \              0xC0 0xC1    
   \              0xC2 0xC3    
   \              0xC4 0xC5    
   \              0xC6 0xC7    
   \              0xC8         
   \   00000069   0xC9 0xCA          DC8 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213
   \              0xCB 0xCC    
   \              0xCD 0xCE    
   \              0xCF 0xD0    
   \              0xD1 0xD2    
   \              0xD3 0xD4    
   \              0xD5         
   \   00000076   0xD6 0xF7          DC8 214, 247, 216, 217, 218, 219, 220, 221, 222, 159
   \              0xD8 0xD9    
   \              0xDA 0xDB    
   \              0xDC 0xDD    
   \              0xDE 0x9F    
    549          #endif
    550          
    551          
    552          
    553          
    554          
    555          
    556          /*--------------------------------------------------------------------------
    557          
    558             Module Private Functions
    559          
    560          ---------------------------------------------------------------------------*/
    561          DWORD clust2sect (FATFS* fs, DWORD clst);
    562          DWORD get_fat (FATFS* fs,	DWORD clst);
    563          
    564          #if !_FS_READONLY
    565          FRESULT put_fat (FATFS* fs,	DWORD clst,	DWORD val);
    566          #endif /* !_FS_READONLY */
    567          
    568          #if _USE_LFN
    569          static void gen_numname (BYTE* dst, const BYTE* src, const WCHAR* lfn, UINT seq);
    570          #endif /* !_USE_LFN */
    571          
    572          
    573          
    574          /*-----------------------------------------------------------------------*/
    575          /* String functions                                                      */
    576          /*-----------------------------------------------------------------------*/
    577          
    578          /* Copy memory to memory */
    579          static
    580          void mem_cpy (void* dst, const void* src, UINT cnt) {
    581          	BYTE *d = (BYTE*)dst;
    582          	const BYTE *s = (const BYTE*)src;
    583          
    584          #if _WORD_ACCESS == 1
    585          	while (cnt >= sizeof (int)) {
    586          		*(int*)d = *(int*)s;
    587          		d += sizeof (int); s += sizeof (int);
    588          		cnt -= sizeof (int);
    589          	}
    590          #endif
    591          	while (cnt--)
    592          		*d++ = *s++;
    593          }
    594          
    595          /* Fill memory */
    596          static
    597          void mem_set (void* dst, int val, UINT cnt) {
    598          	BYTE *d = (BYTE*)dst;
    599          
    600          	while (cnt--)
    601          		*d++ = (BYTE)val;
    602          }
    603          
    604          /* Compare memory to memory */
    605          static
    606          int mem_cmp (const void* dst, const void* src, UINT cnt) {
    607          	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    608          	int r = 0;
    609          
    610          	while (cnt-- && (r = *d++ - *s++) == 0) ;
    611          	return r;
    612          }
    613          
    614          /* Check if chr is contained in the string */
    615          static
    616          int chk_chr (const char* str, int chr) {
    617          	while (*str && *str != chr) str++;
    618          	return *str;
    619          }
    620          
    621          
    622          
    623          
    624          /*-----------------------------------------------------------------------*/
    625          /* Request/Release grant to access the volume                            */
    626          /*-----------------------------------------------------------------------*/
    627          #if _FS_REENTRANT
    628          static
    629          int lock_fs (
    630          	FATFS* fs		/* File system object */
    631          )
    632          {
    633          	return ff_req_grant(fs->sobj);
    634          }
    635          
    636          
    637          static
    638          void unlock_fs (
    639          	FATFS* fs,		/* File system object */
    640          	FRESULT res		/* Result code to be returned */
    641          )
    642          {
    643          	if (fs &&
    644          		res != FR_NOT_ENABLED &&
    645          		res != FR_INVALID_DRIVE &&
    646          		res != FR_INVALID_OBJECT &&
    647          		res != FR_TIMEOUT) {
    648          		ff_rel_grant(fs->sobj);
    649          	}
    650          }
    651          #endif
    652          
    653          
    654          
    655          
    656          /*-----------------------------------------------------------------------*/
    657          /* File lock control functions                                           */
    658          /*-----------------------------------------------------------------------*/
    659          #if _FS_LOCK
    660          

   \                                 In section .text, align 2, keep-with-next
    661          static
    662          FRESULT chk_lock (	/* Check if the file can be accessed */
    663          	DIR* dp,		/* Directory object pointing the file to be checked */
    664          	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
    665          )
    666          {
   \                     chk_lock: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    667          	UINT i, be;
    668          
    669          	/* Search file semaphore table */
    670          	for (i = be = 0; i < _FS_LOCK; i++) {
   \   00000002   0x....             LDR.N    R4,??DataTable9
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x4625             MOV      R5,R4
    671          		if (Files[i].fs) {	/* Existing entry */
   \                     ??chk_lock_0: (+1)
   \   0000000A   0x682E             LDR      R6,[R5, #+0]
   \   0000000C   0xB176             CBZ.N    R6,??chk_lock_1
    672          			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
    673          				Files[i].clu == dp->sclust &&
    674          				Files[i].idx == dp->index) break;
   \   0000000E   0xF8D0 0x7200      LDR      R7,[R0, #+512]
   \   00000012   0x42BE             CMP      R6,R7
   \   00000014   0xBF02             ITTT     EQ 
   \   00000016   0x686E             LDREQ    R6,[R5, #+4]
   \   00000018   0xF8D0 0x7208      LDREQ    R7,[R0, #+520]
   \   0000001C   0x42BE             CMPEQ    R6,R7
   \   0000001E   0xBF02             ITTT     EQ 
   \   00000020   0x892E             LDRHEQ   R6,[R5, #+8]
   \   00000022   0xF8B0 0x7206      LDRHEQ   R7,[R0, #+518]
   \   00000026   0x42BE             CMPEQ    R6,R7
   \   00000028   0xD101             BNE.N    ??chk_lock_2
   \   0000002A   0xE004             B.N      ??chk_lock_3
    675          		} else {			/* Blank entry */
    676          			be = 1;
   \                     ??chk_lock_1: (+1)
   \   0000002C   0x2201             MOVS     R2,#+1
    677          		}
    678          	}
   \                     ??chk_lock_2: (+1)
   \   0000002E   0x1C5B             ADDS     R3,R3,#+1
   \   00000030   0x350C             ADDS     R5,R5,#+12
   \   00000032   0x2B02             CMP      R3,#+2
   \   00000034   0xD3E9             BCC.N    ??chk_lock_0
    679          	if (i == _FS_LOCK)	/* The object is not opened */
   \                     ??chk_lock_3: (+1)
   \   00000036   0x2B02             CMP      R3,#+2
   \   00000038   0xD105             BNE.N    ??chk_lock_4
    680          		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
   \   0000003A   0xB982             CBNZ.N   R2,??chk_lock_5
   \   0000003C   0x2902             CMP      R1,#+2
   \   0000003E   0xD00E             BEQ.N    ??chk_lock_5
   \   00000040   0x2012             MOVS     R0,#+18
   \   00000042   0xBCF0             POP      {R4-R7}
   \   00000044   0x4770             BX       LR
    681          
    682          	/* The object has been opened. Reject any open against writing file and all write mode open */
    683          	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
   \                     ??chk_lock_4: (+1)
   \   00000046   0xB939             CBNZ.N   R1,??chk_lock_6
   \   00000048   0xEB03 0x0043      ADD      R0,R3,R3, LSL #+1
   \   0000004C   0xEB04 0x0080      ADD      R0,R4,R0, LSL #+2
   \   00000050   0x8940             LDRH     R0,[R0, #+10]
   \   00000052   0xF5B0 0x7F80      CMP      R0,#+256
   \   00000056   0xD102             BNE.N    ??chk_lock_5
   \                     ??chk_lock_6: (+1)
   \   00000058   0x2010             MOVS     R0,#+16
   \   0000005A   0xBCF0             POP      {R4-R7}
   \   0000005C   0x4770             BX       LR
   \                     ??chk_lock_5: (+1)
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xBCF0             POP      {R4-R7}
   \   00000062   0x4770             BX       LR               ;; return
    684          }
    685          
    686          
    687          static
    688          int enq_lock (void)	/* Check if an entry is available for a new object */
    689          {
    690          	UINT i;
    691          
    692          	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
    693          	return (i == _FS_LOCK) ? 0 : 1;
    694          }
    695          
    696          

   \                                 In section .text, align 4, keep-with-next
    697          static
    698          UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
    699          	DIR* dp,	/* Directory object pointing the file to register or increment */
    700          	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
    701          )
    702          {
   \                     inc_lock: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    703          	UINT i;
    704          
    705          
    706          	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
   \   00000002   0x....             LDR.N    R3,??DataTable9
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x461D             MOV      R5,R3
   \   00000008   0xF8B0 0x6206      LDRH     R6,[R0, #+518]
   \   0000000C   0xF8D0 0x7208      LDR      R7,[R0, #+520]
   \   00000010   0xF8D0 0x4200      LDR      R4,[R0, #+512]
    707          		if (Files[i].fs == dp->fs &&
    708          			Files[i].clu == dp->sclust &&
    709          			Files[i].idx == dp->index) break;
   \                     ??inc_lock_0: (+1)
   \   00000014   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \   00000018   0x45A4             CMP      R12,R4
   \   0000001A   0xBF01             ITTTT    EQ 
   \   0000001C   0xF8D5 0xC004      LDREQ    R12,[R5, #+4]
   \   00000020   0x45BC             CMPEQ    R12,R7
   \   00000022   0xF8B5 0xC008      LDRHEQ   R12,[R5, #+8]
   \   00000026   0x45B4             CMPEQ    R12,R6
   \   00000028   0xD003             BEQ.N    ??inc_lock_1
    710          	}
   \   0000002A   0x1C52             ADDS     R2,R2,#+1
   \   0000002C   0x350C             ADDS     R5,R5,#+12
   \   0000002E   0x2A02             CMP      R2,#+2
   \   00000030   0xD3F0             BCC.N    ??inc_lock_0
    711          
    712          	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
   \                     ??inc_lock_1: (+1)
   \   00000032   0x2A02             CMP      R2,#+2
   \   00000034   0xD117             BNE.N    ??inc_lock_2
    713          		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0xEA4F 0x0503      MOV.W    R5,R3
   \                     ??inc_lock_3: (+1)
   \   0000003C   0xF855 0x6B0C      LDR      R6,[R5], #+12
   \   00000040   0xB116             CBZ.N    R6,??inc_lock_4
   \   00000042   0x1C52             ADDS     R2,R2,#+1
   \   00000044   0x2A02             CMP      R2,#+2
   \   00000046   0xD3F9             BCC.N    ??inc_lock_3
    714          		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
   \                     ??inc_lock_4: (+1)
   \   00000048   0x2A02             CMP      R2,#+2
   \   0000004A   0xD013             BEQ.N    ??inc_lock_5
    715          		Files[i].fs = dp->fs;
   \   0000004C   0xEB02 0x0542      ADD      R5,R2,R2, LSL #+1
   \   00000050   0xEB03 0x0585      ADD      R5,R3,R5, LSL #+2
   \   00000054   0x602C             STR      R4,[R5, #+0]
    716          		Files[i].clu = dp->sclust;
   \   00000056   0xF8D0 0x4208      LDR      R4,[R0, #+520]
   \   0000005A   0x606C             STR      R4,[R5, #+4]
    717          		Files[i].idx = dp->index;
   \   0000005C   0xF8B0 0x0206      LDRH     R0,[R0, #+518]
   \   00000060   0x8128             STRH     R0,[R5, #+8]
    718          		Files[i].ctr = 0;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x8168             STRH     R0,[R5, #+10]
    719          	}
    720          
    721          	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
   \                     ??inc_lock_2: (+1)
   \   00000066   0xEB02 0x0042      ADD      R0,R2,R2, LSL #+1
   \   0000006A   0xEB03 0x0080      ADD      R0,R3,R0, LSL #+2
   \   0000006E   0x8943             LDRH     R3,[R0, #+10]
   \   00000070   0xB131             CBZ.N    R1,??inc_lock_6
   \   00000072   0xB113             CBZ.N    R3,??inc_lock_7
   \                     ??inc_lock_5: (+1)
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xBCF0             POP      {R4-R7}
   \   00000078   0x4770             BX       LR
   \                     ??inc_lock_7: (+1)
   \   0000007A   0xF44F 0x7180      MOV      R1,#+256
   \   0000007E   0xE000             B.N      ??inc_lock_8
   \                     ??inc_lock_6: (+1)
   \   00000080   0x1C59             ADDS     R1,R3,#+1
   \                     ??inc_lock_8: (+1)
   \   00000082   0x8141             STRH     R1,[R0, #+10]
    722          
    723          	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
    724          
    725          	return i + 1;
   \   00000084   0x1C50             ADDS     R0,R2,#+1
   \   00000086   0xBCF0             POP      {R4-R7}
   \   00000088   0x4770             BX       LR               ;; return
    726          }
    727          
    728          

   \                                 In section .text, align 2, keep-with-next
    729          static
    730          FRESULT dec_lock (	/* Decrement object open counter */
    731          	UINT i			/* Semaphore index (1..) */
    732          )
    733          {
    734          	WORD n;
    735          	FRESULT res;
    736          
    737          
    738          	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
   \                     dec_lock: (+1)
   \   00000000   0x1E40             SUBS     R0,R0,#+1
   \   00000002   0x2802             CMP      R0,#+2
   \   00000004   0xD215             BCS.N    ??dec_lock_0
    739          		n = Files[i].ctr;
   \   00000006   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   0000000A   0x0088             LSLS     R0,R1,#+2
   \   0000000C   0x....             LDR.N    R1,??DataTable9
   \   0000000E   0x1842             ADDS     R2,R0,R1
   \   00000010   0x8953             LDRH     R3,[R2, #+10]
    740          		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
   \   00000012   0xF5B3 0x7F80      CMP      R3,#+256
   \   00000016   0xBF18             IT       NE 
   \   00000018   0x2B00             CMPNE    R3,#+0
    741          		if (n) n--;					/* Decrement read mode open count */
   \   0000001A   0xD102             BNE.N    ??dec_lock_1
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x8153             STRH     R3,[R2, #+10]
   \   00000020   0xE003             B.N      ??dec_lock_2
   \                     ??dec_lock_1: (+1)
   \   00000022   0x1E5B             SUBS     R3,R3,#+1
    742          		Files[i].ctr = n;
   \   00000024   0x8153             STRH     R3,[R2, #+10]
    743          		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
   \   00000026   0xB29B             UXTH     R3,R3
   \   00000028   0xB90B             CBNZ.N   R3,??dec_lock_3
   \                     ??dec_lock_2: (+1)
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x5042             STR      R2,[R0, R1]
    744          		res = FR_OK;
   \                     ??dec_lock_3: (+1)
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x4770             BX       LR
    745          	} else {
    746          		res = FR_INT_ERR;			/* Invalid index nunber */
   \                     ??dec_lock_0: (+1)
   \   00000032   0x2002             MOVS     R0,#+2
    747          	}
    748          	return res;
   \   00000034   0x4770             BX       LR               ;; return
    749          }
    750          
    751          
    752          static
    753          void clear_lock (	/* Clear lock entries of the volume */
    754          	FATFS *fs
    755          )
    756          {
    757          	UINT i;
    758          
    759          	for (i = 0; i < _FS_LOCK; i++) {
    760          		if (Files[i].fs == fs) Files[i].fs = 0;
    761          	}
    762          }
    763          #endif
    764          
    765          
    766          
    767          
    768          /*-----------------------------------------------------------------------*/
    769          /* Move/Flush disk access window in the file system object               */
    770          /*-----------------------------------------------------------------------*/
    771          #if !_FS_READONLY

   \                                 In section .text, align 4, keep-with-next
    772          static
    773          FRESULT sync_window (
    774          	FATFS* fs		/* File system object */
    775          )
    776          {
   \                     sync_window: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0xB081             SUB      SP,SP,#+4
    777          	DWORD wsect;
    778          	UINT nf;
    779          	FRESULT res = FR_OK;
   \   00000006   0x2400             MOVS     R4,#+0
    780          
    781          
    782          	if (fs->wflag) {	/* Write back the sector if it is dirty */
   \   00000008   0xF895 0x0204      LDRB     R0,[R5, #+516]
   \   0000000C   0xB340             CBZ.N    R0,??sync_window_0
    783          		wsect = fs->winsect;	/* Current sector number */
   \   0000000E   0xF8D5 0x622C      LDR      R6,[R5, #+556]
    784          		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
   \   00000012   0xF895 0x0201      LDRB     R0,[R5, #+513]
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x4629             MOV      R1,R5
   \   0000001A   0x4632             MOV      R2,R6
   \   0000001C   0x.... 0x....      BL       disk_write
   \   00000020   0xB118             CBZ.N    R0,??sync_window_1
    785          			res = FR_DISK_ERR;
   \   00000022   0x2401             MOVS     R4,#+1
    786          		} else {
    787          			fs->wflag = 0;
    788          			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
    789          				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    790          					wsect += fs->fsize;
    791          					disk_write(fs->drv, fs->win.d8, wsect, 1);
    792          				}
    793          			}
    794          		}
    795          	}
    796          	return res;
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0xB001             ADD      SP,SP,#+4
   \   00000028   0xBDF0             POP      {R4-R7,PC}
   \                     ??sync_window_1: (+1)
   \   0000002A   0xF885 0x0204      STRB     R0,[R5, #+516]
   \   0000002E   0xF8D5 0x0220      LDR      R0,[R5, #+544]
   \   00000032   0xF8D5 0x1218      LDR      R1,[R5, #+536]
   \   00000036   0x1A30             SUBS     R0,R6,R0
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xD211             BCS.N    ??sync_window_0
   \   0000003C   0xF895 0x0203      LDRB     R0,[R5, #+515]
   \   00000040   0x2802             CMP      R0,#+2
   \   00000042   0xD30D             BCC.N    ??sync_window_0
   \   00000044   0xF1B0 0x0701      SUBS.W   R7,R0,#+1
   \                     ??sync_window_2: (+1)
   \   00000048   0xF8D5 0x0218      LDR      R0,[R5, #+536]
   \   0000004C   0x2301             MOVS     R3,#+1
   \   0000004E   0x4629             MOV      R1,R5
   \   00000050   0x1986             ADDS     R6,R0,R6
   \   00000052   0xF895 0x0201      LDRB     R0,[R5, #+513]
   \   00000056   0x4632             MOV      R2,R6
   \   00000058   0x.... 0x....      BL       disk_write
   \   0000005C   0x1E7F             SUBS     R7,R7,#+1
   \   0000005E   0xD1F3             BNE.N    ??sync_window_2
   \                     ??sync_window_0: (+1)
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0xB001             ADD      SP,SP,#+4
   \   00000064   0xBDF0             POP      {R4-R7,PC}       ;; return
    797          }
    798          #endif
    799          
    800          

   \                                 In section .text, align 2, keep-with-next
    801          static
    802          FRESULT move_window (
    803          	FATFS* fs,		/* File system object */
    804          	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
    805          )
    806          {
   \                     move_window: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    807          	FRESULT res = FR_OK;
   \   00000006   0x2600             MOVS     R6,#+0
    808          
    809          
    810          	if (sector != fs->winsect) {	/* Window offset changed? */
   \   00000008   0xF8D4 0x022C      LDR      R0,[R4, #+556]
   \   0000000C   0x4285             CMP      R5,R0
   \   0000000E   0xD011             BEQ.N    ??move_window_0
    811          #if !_FS_READONLY
    812          		res = sync_window(fs);		/* Write-back changes */
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       sync_window
   \   00000016   0x0006             MOVS     R6,R0
    813          #endif
    814          		if (res == FR_OK) {			/* Fill sector window with new data */
   \   00000018   0xD10C             BNE.N    ??move_window_0
    815          			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
   \   0000001A   0xF894 0x0201      LDRB     R0,[R4, #+513]
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x462A             MOV      R2,R5
   \   00000022   0x4621             MOV      R1,R4
   \   00000024   0x.... 0x....      BL       disk_read
   \   00000028   0xB110             CBZ.N    R0,??move_window_1
    816          				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
   \   0000002A   0xF04F 0x35FF      MOV      R5,#-1
    817          				res = FR_DISK_ERR;
   \   0000002E   0x2601             MOVS     R6,#+1
    818          			}
    819          			fs->winsect = sector;
   \                     ??move_window_1: (+1)
   \   00000030   0xF8C4 0x522C      STR      R5,[R4, #+556]
    820          		}
    821          	}
    822          	return res;
   \                     ??move_window_0: (+1)
   \   00000034   0x4630             MOV      R0,R6
   \   00000036   0xBD70             POP      {R4-R6,PC}       ;; return
    823          }
    824          
    825          
    826          
    827          
    828          /*-----------------------------------------------------------------------*/
    829          /* Synchronize file system and strage device                             */
    830          /*-----------------------------------------------------------------------*/
    831          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
    832          static
    833          FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
    834          	FATFS* fs		/* File system object */
    835          )
    836          {
   \                     sync_fs: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x4604             MOV      R4,R0
    837          	FRESULT res;
    838          
    839          
    840          	res = sync_window(fs);
   \   00000006   0x.... 0x....      BL       sync_window
   \   0000000A   0x0005             MOVS     R5,R0
    841          	if (res == FR_OK) {
   \   0000000C   0xD162             BNE.N    ??sync_fs_0
    842          		/* Update FSINFO sector if needed */
    843          		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
   \   0000000E   0xF894 0x0200      LDRB     R0,[R4, #+512]
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xBF04             ITT      EQ 
   \   00000016   0xF894 0x0205      LDRBEQ   R0,[R4, #+517]
   \   0000001A   0x2801             CMPEQ    R0,#+1
   \   0000001C   0xD152             BNE.N    ??sync_fs_1
    844          			/* Create FSINFO structure */
    845          			mem_set(fs->win.d8, 0, SS(fs));
   \   0000001E   0xF44F 0x7100      MOV      R1,#+512
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       __aeabi_memclr
    846          			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
   \   00000028   0x2055             MOVS     R0,#+85
    847          			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
    848          			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
    849          			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
    850          			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
    851          			/* Write it into the FSINFO sector */
    852          			fs->winsect = fs->volbase + 1;
    853          			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
   \   0000002A   0x2301             MOVS     R3,#+1
   \   0000002C   0xF884 0x01FE      STRB     R0,[R4, #+510]
   \   00000030   0x20AA             MOVS     R0,#+170
   \   00000032   0xF884 0x01FF      STRB     R0,[R4, #+511]
   \   00000036   0x2052             MOVS     R0,#+82
   \   00000038   0x7020             STRB     R0,[R4, #+0]
   \   0000003A   0x4621             MOV      R1,R4
   \   0000003C   0x7060             STRB     R0,[R4, #+1]
   \   0000003E   0x2061             MOVS     R0,#+97
   \   00000040   0x70A0             STRB     R0,[R4, #+2]
   \   00000042   0x2041             MOVS     R0,#+65
   \   00000044   0x70E0             STRB     R0,[R4, #+3]
   \   00000046   0x2072             MOVS     R0,#+114
   \   00000048   0xF884 0x01E4      STRB     R0,[R4, #+484]
   \   0000004C   0xF884 0x01E5      STRB     R0,[R4, #+485]
   \   00000050   0x2041             MOVS     R0,#+65
   \   00000052   0xF884 0x01E6      STRB     R0,[R4, #+486]
   \   00000056   0x2061             MOVS     R0,#+97
   \   00000058   0xF884 0x01E7      STRB     R0,[R4, #+487]
   \   0000005C   0xF8D4 0x0210      LDR      R0,[R4, #+528]
   \   00000060   0xF884 0x01E8      STRB     R0,[R4, #+488]
   \   00000064   0xF8D4 0x0210      LDR      R0,[R4, #+528]
   \   00000068   0x0400             LSLS     R0,R0,#+16
   \   0000006A   0x0E00             LSRS     R0,R0,#+24
   \   0000006C   0xF884 0x01E9      STRB     R0,[R4, #+489]
   \   00000070   0xF8D4 0x0210      LDR      R0,[R4, #+528]
   \   00000074   0x0C00             LSRS     R0,R0,#+16
   \   00000076   0xF884 0x01EA      STRB     R0,[R4, #+490]
   \   0000007A   0xF8D4 0x0210      LDR      R0,[R4, #+528]
   \   0000007E   0x0E00             LSRS     R0,R0,#+24
   \   00000080   0xF884 0x01EB      STRB     R0,[R4, #+491]
   \   00000084   0xF8D4 0x020C      LDR      R0,[R4, #+524]
   \   00000088   0xF884 0x01EC      STRB     R0,[R4, #+492]
   \   0000008C   0xF8D4 0x020C      LDR      R0,[R4, #+524]
   \   00000090   0x0400             LSLS     R0,R0,#+16
   \   00000092   0x0E00             LSRS     R0,R0,#+24
   \   00000094   0xF884 0x01ED      STRB     R0,[R4, #+493]
   \   00000098   0xF8D4 0x020C      LDR      R0,[R4, #+524]
   \   0000009C   0x0C00             LSRS     R0,R0,#+16
   \   0000009E   0xF884 0x01EE      STRB     R0,[R4, #+494]
   \   000000A2   0xF8D4 0x020C      LDR      R0,[R4, #+524]
   \   000000A6   0x0E00             LSRS     R0,R0,#+24
   \   000000A8   0xF884 0x01EF      STRB     R0,[R4, #+495]
   \   000000AC   0xF8D4 0x021C      LDR      R0,[R4, #+540]
   \   000000B0   0x1C42             ADDS     R2,R0,#+1
   \   000000B2   0xF894 0x0201      LDRB     R0,[R4, #+513]
   \   000000B6   0xF8C4 0x222C      STR      R2,[R4, #+556]
   \   000000BA   0x.... 0x....      BL       disk_write
    854          			fs->fsi_flag = 0;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0xF884 0x0205      STRB     R0,[R4, #+517]
    855          		}
    856          		/* Make sure that no pending write process in the physical drive */
    857          		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   \                     ??sync_fs_1: (+1)
   \   000000C4   0xF894 0x0201      LDRB     R0,[R4, #+513]
   \   000000C8   0x2200             MOVS     R2,#+0
   \   000000CA   0x2100             MOVS     R1,#+0
   \   000000CC   0x.... 0x....      BL       disk_ioctl
   \   000000D0   0xB100             CBZ.N    R0,??sync_fs_0
    858          			res = FR_DISK_ERR;
   \   000000D2   0x2501             MOVS     R5,#+1
    859          	}
    860          
    861          	return res;
   \                     ??sync_fs_0: (+1)
   \   000000D4   0x4628             MOV      R0,R5
   \   000000D6   0xB001             ADD      SP,SP,#+4
   \   000000D8   0xBD30             POP      {R4,R5,PC}       ;; return
    862          }
    863          #endif
    864          
    865          
    866          
    867          
    868          /*-----------------------------------------------------------------------*/
    869          /* Get sector# from cluster#                                             */
    870          /*-----------------------------------------------------------------------*/
    871          /* Hidden API for hacks and disk tools */
    872          

   \                                 In section .text, align 2, keep-with-next
    873          DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
    874          	FATFS* fs,		/* File system object */
    875          	DWORD clst		/* Cluster# to be converted */
    876          )
    877          {
    878          	clst -= 2;
    879          	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
   \                     clust2sect: (+1)
   \   00000000   0xF8D0 0x2214      LDR      R2,[R0, #+532]
   \   00000004   0x1E89             SUBS     R1,R1,#+2
   \   00000006   0x1E92             SUBS     R2,R2,#+2
   \   00000008   0x4291             CMP      R1,R2
   \   0000000A   0xBF2F             ITEEE    CS 
   \   0000000C   0x2000             MOVCS    R0,#+0
   \   0000000E   0xF890 0x2202      LDRBCC   R2,[R0, #+514]
   \   00000012   0xF8D0 0x0228      LDRCC    R0,[R0, #+552]
   \   00000016   0xFB02 0x0001      MLACC    R0,R2,R1,R0
    880          	return clst * fs->csize + fs->database;
   \   0000001A   0x4770             BX       LR
    881          }
    882          
    883          
    884          
    885          
    886          /*-----------------------------------------------------------------------*/
    887          /* FAT access - Read value of a FAT entry                                */
    888          /*-----------------------------------------------------------------------*/
    889          /* Hidden API for hacks and disk tools */
    890          

   \                                 In section .text, align 2, keep-with-next
    891          DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
    892          	FATFS* fs,	/* File system object */
    893          	DWORD clst	/* FAT index number (cluster number) to get the value */
    894          )
    895          {
   \                     get_fat: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x460D             MOV      R5,R1
    896          	UINT wc, bc;
    897          	BYTE *p;
    898          	DWORD val;
    899          
    900          
    901          	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   \   00000006   0x2D02             CMP      R5,#+2
   \   00000008   0x4680             MOV      R8,R0
   \   0000000A   0xD362             BCC.N    ??get_fat_0
   \   0000000C   0xF8D8 0x0214      LDR      R0,[R8, #+532]
   \   00000010   0x4285             CMP      R5,R0
   \   00000012   0xD25E             BCS.N    ??get_fat_0
    902          		val = 1;	/* Internal error */
    903          
    904          	} else {
    905          		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    906          
    907          		switch (fs->fs_type) {
   \   00000014   0xF898 0x0200      LDRB     R0,[R8, #+512]
   \   00000018   0xF04F 0x36FF      MOV      R6,#-1
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD004             BEQ.N    ??get_fat_1
   \   00000020   0xD357             BCC.N    ??get_fat_0
   \   00000022   0x2803             CMP      R0,#+3
   \   00000024   0xD03A             BEQ.N    ??get_fat_2
   \   00000026   0xD326             BCC.N    ??get_fat_3
   \   00000028   0xE053             B.N      ??get_fat_0
    908          		case FS_FAT12 :
    909          			bc = (UINT)clst; bc += bc / 2;
   \                     ??get_fat_1: (+1)
   \   0000002A   0xEB05 0x0455      ADD      R4,R5,R5, LSR #+1
    910          			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   \   0000002E   0xF8D8 0x0220      LDR      R0,[R8, #+544]
   \   00000032   0xEB00 0x2154      ADD      R1,R0,R4, LSR #+9
   \   00000036   0x4640             MOV      R0,R8
   \   00000038   0x.... 0x....      BL       move_window
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD149             BNE.N    ??get_fat_4
    911          			wc = fs->win.d8[bc++ % SS(fs)];
   \   00000040   0x05E0             LSLS     R0,R4,#+23
   \   00000042   0x0DC0             LSRS     R0,R0,#+23
   \   00000044   0x1C64             ADDS     R4,R4,#+1
   \   00000046   0xF810 0x7008      LDRB     R7,[R0, R8]
    912          			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   \   0000004A   0xF8D8 0x0220      LDR      R0,[R8, #+544]
   \   0000004E   0xEB00 0x2154      ADD      R1,R0,R4, LSR #+9
   \   00000052   0x4640             MOV      R0,R8
   \   00000054   0x.... 0x....      BL       move_window
   \   00000058   0xBBE0             CBNZ.N   R0,??get_fat_4
    913          			wc |= fs->win.d8[bc % SS(fs)] << 8;
   \   0000005A   0x05E0             LSLS     R0,R4,#+23
   \   0000005C   0x0DC0             LSRS     R0,R0,#+23
   \   0000005E   0xF810 0x0008      LDRB     R0,[R0, R8]
   \   00000062   0xEA47 0x2700      ORR      R7,R7,R0, LSL #+8
    914          			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
   \   00000066   0x07E8             LSLS     R0,R5,#+31
   \   00000068   0xBF5A             ITTE     PL 
   \   0000006A   0x053E             LSLPL    R6,R7,#+20
   \   0000006C   0x0D36             LSRPL    R6,R6,#+20
   \   0000006E   0x093E             LSRMI    R6,R7,#+4
    915          			break;
    916          
    917          		case FS_FAT16 :
    918          			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    919          			p = &fs->win.d8[clst * 2 % SS(fs)];
    920          			val = LD_WORD(p);
    921          			break;
    922          
    923          		case FS_FAT32 :
    924          			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    925          			p = &fs->win.d8[clst * 4 % SS(fs)];
    926          			val = LD_DWORD(p) & 0x0FFFFFFF;
    927          			break;
    928          
    929          		default:
    930          			val = 1;	/* Internal error */
    931          		}
    932          	}
    933          
    934          	return val;
   \   00000070   0x4630             MOV      R0,R6
   \   00000072   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??get_fat_3: (+1)
   \   00000076   0xF8D8 0x0220      LDR      R0,[R8, #+544]
   \   0000007A   0xEB00 0x2115      ADD      R1,R0,R5, LSR #+8
   \   0000007E   0x4640             MOV      R0,R8
   \   00000080   0x.... 0x....      BL       move_window
   \   00000084   0xBB30             CBNZ.N   R0,??get_fat_4
   \   00000086   0x0068             LSLS     R0,R5,#+1
   \   00000088   0x05C0             LSLS     R0,R0,#+23
   \   0000008A   0xEB08 0x50D0      ADD      R0,R8,R0, LSR #+23
   \   0000008E   0x7841             LDRB     R1,[R0, #+1]
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0xEA40 0x2601      ORR      R6,R0,R1, LSL #+8
   \   00000096   0x4630             MOV      R0,R6
   \   00000098   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??get_fat_2: (+1)
   \   0000009C   0xF8D8 0x0220      LDR      R0,[R8, #+544]
   \   000000A0   0xEB00 0x11D5      ADD      R1,R0,R5, LSR #+7
   \   000000A4   0x4640             MOV      R0,R8
   \   000000A6   0x.... 0x....      BL       move_window
   \   000000AA   0xB998             CBNZ.N   R0,??get_fat_4
   \   000000AC   0x00A8             LSLS     R0,R5,#+2
   \   000000AE   0x05C0             LSLS     R0,R0,#+23
   \   000000B0   0xEB08 0x50D0      ADD      R0,R8,R0, LSR #+23
   \   000000B4   0x7882             LDRB     R2,[R0, #+2]
   \   000000B6   0x78C1             LDRB     R1,[R0, #+3]
   \   000000B8   0x0412             LSLS     R2,R2,#+16
   \   000000BA   0xEA42 0x6101      ORR      R1,R2,R1, LSL #+24
   \   000000BE   0x7842             LDRB     R2,[R0, #+1]
   \   000000C0   0x7800             LDRB     R0,[R0, #+0]
   \   000000C2   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   000000C6   0x4308             ORRS     R0,R0,R1
   \   000000C8   0x0106             LSLS     R6,R0,#+4
   \   000000CA   0x0936             LSRS     R6,R6,#+4
   \   000000CC   0x4630             MOV      R0,R6
   \   000000CE   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??get_fat_0: (+1)
   \   000000D2   0x2601             MOVS     R6,#+1
   \                     ??get_fat_4: (+1)
   \   000000D4   0x4630             MOV      R0,R6
   \   000000D6   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    935          }
    936          
    937          
    938          
    939          
    940          /*-----------------------------------------------------------------------*/
    941          /* FAT access - Change value of a FAT entry                              */
    942          /*-----------------------------------------------------------------------*/
    943          /* Hidden API for hacks and disk tools */
    944          
    945          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
    946          FRESULT put_fat (
    947          	FATFS* fs,	/* File system object */
    948          	DWORD clst,	/* FAT index number (cluster number) to be changed */
    949          	DWORD val	/* New value to be set to the entry */
    950          )
    951          {
   \                     put_fat: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x460E             MOV      R6,R1
    952          	UINT bc;
    953          	BYTE *p;
    954          	FRESULT res;
    955          
    956          
    957          	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   \   00000004   0x2E02             CMP      R6,#+2
   \   00000006   0xB081             SUB      SP,SP,#+4
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x4615             MOV      R5,R2
   \   0000000C   0xD37C             BCC.N    ??put_fat_0
   \   0000000E   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   00000012   0x4286             CMP      R6,R0
   \   00000014   0xD278             BCS.N    ??put_fat_0
    958          		res = FR_INT_ERR;
    959          
    960          	} else {
    961          		switch (fs->fs_type) {
   \   00000016   0xF894 0x0200      LDRB     R0,[R4, #+512]
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xD004             BEQ.N    ??put_fat_1
   \   0000001E   0xD373             BCC.N    ??put_fat_0
   \   00000020   0x2803             CMP      R0,#+3
   \   00000022   0xD053             BEQ.N    ??put_fat_2
   \   00000024   0xD33D             BCC.N    ??put_fat_3
   \   00000026   0xE06F             B.N      ??put_fat_0
    962          		case FS_FAT12 :
    963          			bc = (UINT)clst; bc += bc / 2;
   \                     ??put_fat_1: (+1)
   \   00000028   0xEB06 0x0756      ADD      R7,R6,R6, LSR #+1
    964          			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   \   0000002C   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000030   0xEB00 0x2157      ADD      R1,R0,R7, LSR #+9
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       move_window
    965          			if (res != FR_OK) break;
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD165             BNE.N    ??put_fat_4
    966          			p = &fs->win.d8[bc++ % SS(fs)];
   \   0000003E   0x05F8             LSLS     R0,R7,#+23
   \   00000040   0x1C7F             ADDS     R7,R7,#+1
   \   00000042   0xEB14 0x51D0      ADDS     R1,R4,R0, LSR #+23
    967          			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   \   00000046   0xF016 0x0601      ANDS     R6,R6,#0x1
   \   0000004A   0xBF1D             ITTTE    NE 
   \   0000004C   0x7808             LDRBNE   R0,[R1, #+0]
   \   0000004E   0xF000 0x000F      ANDNE    R0,R0,#0xF
   \   00000052   0xEA40 0x1005      ORRNE    R0,R0,R5, LSL #+4
   \   00000056   0x4628             MOVEQ    R0,R5
   \   00000058   0x7008             STRB     R0,[R1, #+0]
    968          			fs->wflag = 1;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xF884 0x0204      STRB     R0,[R4, #+516]
    969          			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   \   00000060   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000064   0xEB00 0x2157      ADD      R1,R0,R7, LSR #+9
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0x.... 0x....      BL       move_window
    970          			if (res != FR_OK) break;
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD14B             BNE.N    ??put_fat_4
    971          			p = &fs->win.d8[bc % SS(fs)];
   \   00000072   0x05F9             LSLS     R1,R7,#+23
   \   00000074   0xEB14 0x51D1      ADDS     R1,R4,R1, LSR #+23
    972          			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   \   00000078   0xB136             CBZ.N    R6,??put_fat_5
   \   0000007A   0x092A             LSRS     R2,R5,#+4
   \   0000007C   0x700A             STRB     R2,[R1, #+0]
    973          			fs->wflag = 1;
    974          			break;
    975          
    976          		case FS_FAT16 :
    977          			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    978          			if (res != FR_OK) break;
    979          			p = &fs->win.d8[clst * 2 % SS(fs)];
    980          			ST_WORD(p, (WORD)val);
    981          			fs->wflag = 1;
    982          			break;
    983          
    984          		case FS_FAT32 :
    985          			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    986          			if (res != FR_OK) break;
    987          			p = &fs->win.d8[clst * 4 % SS(fs)];
    988          			val |= LD_DWORD(p) & 0xF0000000;
    989          			ST_DWORD(p, val);
    990          			fs->wflag = 1;
   \   0000007E   0x2101             MOVS     R1,#+1
   \   00000080   0xF884 0x1204      STRB     R1,[R4, #+516]
    991          			break;
    992          
    993          		default :
    994          			res = FR_INT_ERR;
    995          		}
    996          	}
    997          
    998          	return res;
   \   00000084   0xB001             ADD      SP,SP,#+4
   \   00000086   0xBDF0             POP      {R4-R7,PC}
   \                     ??put_fat_5: (+1)
   \   00000088   0x780A             LDRB     R2,[R1, #+0]
   \   0000008A   0x0A2B             LSRS     R3,R5,#+8
   \   0000008C   0xF003 0x030F      AND      R3,R3,#0xF
   \   00000090   0xF002 0x02F0      AND      R2,R2,#0xF0
   \   00000094   0x431A             ORRS     R2,R3,R2
   \   00000096   0x700A             STRB     R2,[R1, #+0]
   \   00000098   0x2101             MOVS     R1,#+1
   \   0000009A   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   0000009E   0xB001             ADD      SP,SP,#+4
   \   000000A0   0xBDF0             POP      {R4-R7,PC}
   \                     ??put_fat_3: (+1)
   \   000000A2   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   000000A6   0xEB00 0x2116      ADD      R1,R0,R6, LSR #+8
   \   000000AA   0x4620             MOV      R0,R4
   \   000000AC   0x.... 0x....      BL       move_window
   \   000000B0   0xBB58             CBNZ.N   R0,??put_fat_4
   \   000000B2   0x0071             LSLS     R1,R6,#+1
   \   000000B4   0x05C9             LSLS     R1,R1,#+23
   \   000000B6   0xEB14 0x51D1      ADDS     R1,R4,R1, LSR #+23
   \   000000BA   0x700D             STRB     R5,[R1, #+0]
   \   000000BC   0x042D             LSLS     R5,R5,#+16
   \   000000BE   0x0E2A             LSRS     R2,R5,#+24
   \   000000C0   0x704A             STRB     R2,[R1, #+1]
   \   000000C2   0x2101             MOVS     R1,#+1
   \   000000C4   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   000000C8   0xB001             ADD      SP,SP,#+4
   \   000000CA   0xBDF0             POP      {R4-R7,PC}
   \                     ??put_fat_2: (+1)
   \   000000CC   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   000000D0   0xEB00 0x11D6      ADD      R1,R0,R6, LSR #+7
   \   000000D4   0x4620             MOV      R0,R4
   \   000000D6   0x.... 0x....      BL       move_window
   \   000000DA   0xB9B0             CBNZ.N   R0,??put_fat_4
   \   000000DC   0x00B1             LSLS     R1,R6,#+2
   \   000000DE   0x05C9             LSLS     R1,R1,#+23
   \   000000E0   0xEB14 0x51D1      ADDS     R1,R4,R1, LSR #+23
   \   000000E4   0x78CA             LDRB     R2,[R1, #+3]
   \   000000E6   0x0612             LSLS     R2,R2,#+24
   \   000000E8   0xF002 0x4270      AND      R2,R2,#0xF0000000
   \   000000EC   0x4315             ORRS     R5,R2,R5
   \   000000EE   0x042A             LSLS     R2,R5,#+16
   \   000000F0   0x0E12             LSRS     R2,R2,#+24
   \   000000F2   0x700D             STRB     R5,[R1, #+0]
   \   000000F4   0x704A             STRB     R2,[R1, #+1]
   \   000000F6   0x0C2A             LSRS     R2,R5,#+16
   \   000000F8   0x708A             STRB     R2,[R1, #+2]
   \   000000FA   0x0E2A             LSRS     R2,R5,#+24
   \   000000FC   0x70CA             STRB     R2,[R1, #+3]
   \   000000FE   0x2101             MOVS     R1,#+1
   \   00000100   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   00000104   0xB001             ADD      SP,SP,#+4
   \   00000106   0xBDF0             POP      {R4-R7,PC}
   \                     ??put_fat_0: (+1)
   \   00000108   0x2002             MOVS     R0,#+2
   \                     ??put_fat_4: (+1)
   \   0000010A   0xB001             ADD      SP,SP,#+4
   \   0000010C   0xBDF0             POP      {R4-R7,PC}       ;; return
    999          }
   1000          #endif /* !_FS_READONLY */
   1001          
   1002          
   1003          
   1004          
   1005          /*-----------------------------------------------------------------------*/
   1006          /* FAT handling - Remove a cluster chain                                 */
   1007          /*-----------------------------------------------------------------------*/
   1008          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
   1009          static
   1010          FRESULT remove_chain (
   1011          	FATFS* fs,			/* File system object */
   1012          	DWORD clst			/* Cluster# to remove a chain from */
   1013          )
   1014          {
   \                     remove_chain: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x460F             MOV      R7,R1
   1015          	FRESULT res;
   1016          	DWORD nxt;
   1017          #if _USE_TRIM
   1018          	DWORD scl = clst, ecl = clst, rt[2];
   1019          #endif
   1020          
   1021          	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   \   00000006   0x2F02             CMP      R7,#+2
   \   00000008   0x4680             MOV      R8,R0
   \   0000000A   0xD30D             BCC.N    ??remove_chain_0
   \   0000000C   0xF8D8 0x0214      LDR      R0,[R8, #+532]
   \   00000010   0x4287             CMP      R7,R0
   \   00000012   0xD209             BCS.N    ??remove_chain_0
   1022          		res = FR_INT_ERR;
   1023          
   1024          	} else {
   1025          		res = FR_OK;
   \   00000014   0x2600             MOVS     R6,#+0
   1026          		while (clst < fs->n_fatent) {			/* Not a last link? */
   1027          			nxt = get_fat(fs, clst);			/* Get cluster status */
   \                     ??remove_chain_1: (+1)
   \   00000016   0x4639             MOV      R1,R7
   \   00000018   0x4640             MOV      R0,R8
   \   0000001A   0x.... 0x....      BL       get_fat
   \   0000001E   0x0005             MOVS     R5,R0
   1028          			if (nxt == 0) break;				/* Empty cluster? */
   \   00000020   0xF000 0x8092      BEQ.W    ??remove_chain_2
   1029          			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   \   00000024   0x2D01             CMP      R5,#+1
   \   00000026   0xD103             BNE.N    ??remove_chain_3
   \                     ??remove_chain_0: (+1)
   \   00000028   0x2602             MOVS     R6,#+2
   1030          			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   1031          			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   1032          			if (res != FR_OK) break;
   1033          			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
   1034          				fs->free_clust++;
   1035          				fs->fsi_flag |= 1;
   1036          			}
   1037          #if _USE_TRIM
   1038          			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
   1039          				ecl = nxt;
   1040          			} else {				/* End of contiguous clusters */ 
   1041          				rt[0] = clust2sect(fs, scl);					/* Start sector */
   1042          				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
   1043          				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
   1044          				scl = ecl = nxt;
   1045          			}
   1046          #endif
   1047          			clst = nxt;	/* Next cluster */
   1048          		}
   1049          	}
   1050          
   1051          	return res;
   \   0000002A   0x4630             MOV      R0,R6
   \   0000002C   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??remove_chain_3: (+1)
   \   00000030   0xF115 0x0F01      CMN      R5,#+1
   \   00000034   0xD103             BNE.N    ??remove_chain_4
   \   00000036   0x2601             MOVS     R6,#+1
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0xE8BD 0x81F0      POP      {R4-R8,PC}
   \                     ??remove_chain_4: (+1)
   \   0000003E   0x2F02             CMP      R7,#+2
   \   00000040   0xD36C             BCC.N    ??remove_chain_5
   \   00000042   0xF8D8 0x0214      LDR      R0,[R8, #+532]
   \   00000046   0x4287             CMP      R7,R0
   \   00000048   0xD268             BCS.N    ??remove_chain_5
   \   0000004A   0xF898 0x0200      LDRB     R0,[R8, #+512]
   \   0000004E   0x2801             CMP      R0,#+1
   \   00000050   0xD033             BEQ.N    ??remove_chain_6
   \   00000052   0xD363             BCC.N    ??remove_chain_5
   \   00000054   0x2803             CMP      R0,#+3
   \   00000056   0xD001             BEQ.N    ??remove_chain_7
   \   00000058   0xD31B             BCC.N    ??remove_chain_8
   \   0000005A   0xE05F             B.N      ??remove_chain_5
   \                     ??remove_chain_7: (+1)
   \   0000005C   0xF8D8 0x0220      LDR      R0,[R8, #+544]
   \   00000060   0xEB00 0x11D7      ADD      R1,R0,R7, LSR #+7
   \   00000064   0x4640             MOV      R0,R8
   \   00000066   0x.... 0x....      BL       move_window
   \   0000006A   0x0006             MOVS     R6,R0
   \   0000006C   0xD157             BNE.N    ??remove_chain_9
   \   0000006E   0x00B8             LSLS     R0,R7,#+2
   \   00000070   0x05C0             LSLS     R0,R0,#+23
   \   00000072   0xEB08 0x50D0      ADD      R0,R8,R0, LSR #+23
   \   00000076   0x2200             MOVS     R2,#+0
   \   00000078   0x78C1             LDRB     R1,[R0, #+3]
   \   0000007A   0x7002             STRB     R2,[R0, #+0]
   \   0000007C   0x7042             STRB     R2,[R0, #+1]
   \   0000007E   0x0609             LSLS     R1,R1,#+24
   \   00000080   0xF001 0x4170      AND      R1,R1,#0xF0000000
   \   00000084   0x0E09             LSRS     R1,R1,#+24
   \   00000086   0x7082             STRB     R2,[R0, #+2]
   \   00000088   0x70C1             STRB     R1,[R0, #+3]
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0xF888 0x0204      STRB     R0,[R8, #+516]
   \   00000090   0xE045             B.N      ??remove_chain_9
   \                     ??remove_chain_8: (+1)
   \   00000092   0xF8D8 0x0220      LDR      R0,[R8, #+544]
   \   00000096   0xEB00 0x2117      ADD      R1,R0,R7, LSR #+8
   \   0000009A   0x4640             MOV      R0,R8
   \   0000009C   0x.... 0x....      BL       move_window
   \   000000A0   0x0006             MOVS     R6,R0
   \   000000A2   0xD13C             BNE.N    ??remove_chain_9
   \   000000A4   0x0078             LSLS     R0,R7,#+1
   \   000000A6   0x05C0             LSLS     R0,R0,#+23
   \   000000A8   0xEB08 0x50D0      ADD      R0,R8,R0, LSR #+23
   \   000000AC   0x2100             MOVS     R1,#+0
   \   000000AE   0x7001             STRB     R1,[R0, #+0]
   \   000000B0   0x7041             STRB     R1,[R0, #+1]
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0xF888 0x0204      STRB     R0,[R8, #+516]
   \   000000B8   0xE031             B.N      ??remove_chain_9
   \                     ??remove_chain_6: (+1)
   \   000000BA   0xEB07 0x0457      ADD      R4,R7,R7, LSR #+1
   \   000000BE   0xF8D8 0x0220      LDR      R0,[R8, #+544]
   \   000000C2   0xEB00 0x2154      ADD      R1,R0,R4, LSR #+9
   \   000000C6   0x4640             MOV      R0,R8
   \   000000C8   0x.... 0x....      BL       move_window
   \   000000CC   0x0006             MOVS     R6,R0
   \   000000CE   0xD126             BNE.N    ??remove_chain_9
   \   000000D0   0x05E0             LSLS     R0,R4,#+23
   \   000000D2   0x1C64             ADDS     R4,R4,#+1
   \   000000D4   0xEB08 0x50D0      ADD      R0,R8,R0, LSR #+23
   \   000000D8   0xF017 0x0701      ANDS     R7,R7,#0x1
   \   000000DC   0xBF1A             ITTE     NE 
   \   000000DE   0x7801             LDRBNE   R1,[R0, #+0]
   \   000000E0   0xF001 0x010F      ANDNE    R1,R1,#0xF
   \   000000E4   0x2100             MOVEQ    R1,#+0
   \   000000E6   0x7001             STRB     R1,[R0, #+0]
   \   000000E8   0x2001             MOVS     R0,#+1
   \   000000EA   0xF888 0x0204      STRB     R0,[R8, #+516]
   \   000000EE   0xF8D8 0x0220      LDR      R0,[R8, #+544]
   \   000000F2   0xEB00 0x2154      ADD      R1,R0,R4, LSR #+9
   \   000000F6   0x4640             MOV      R0,R8
   \   000000F8   0x.... 0x....      BL       move_window
   \   000000FC   0x0006             MOVS     R6,R0
   \   000000FE   0xD10E             BNE.N    ??remove_chain_9
   \   00000100   0x05E0             LSLS     R0,R4,#+23
   \   00000102   0x2F00             CMP      R7,#+0
   \   00000104   0xEB08 0x50D0      ADD      R0,R8,R0, LSR #+23
   \   00000108   0xBF12             ITEE     NE 
   \   0000010A   0x2100             MOVNE    R1,#+0
   \   0000010C   0x7801             LDRBEQ   R1,[R0, #+0]
   \   0000010E   0xF001 0x01F0      ANDEQ    R1,R1,#0xF0
   \   00000112   0x7001             STRB     R1,[R0, #+0]
   \   00000114   0x2001             MOVS     R0,#+1
   \   00000116   0xF888 0x0204      STRB     R0,[R8, #+516]
   \   0000011A   0xE000             B.N      ??remove_chain_9
   \                     ??remove_chain_5: (+1)
   \   0000011C   0x2602             MOVS     R6,#+2
   \                     ??remove_chain_9: (+1)
   \   0000011E   0xB99E             CBNZ.N   R6,??remove_chain_2
   \   00000120   0xF8D8 0x0210      LDR      R0,[R8, #+528]
   \   00000124   0xF110 0x0F01      CMN      R0,#+1
   \   00000128   0xD008             BEQ.N    ??remove_chain_10
   \   0000012A   0x1C40             ADDS     R0,R0,#+1
   \   0000012C   0xF8C8 0x0210      STR      R0,[R8, #+528]
   \   00000130   0xF898 0x0205      LDRB     R0,[R8, #+517]
   \   00000134   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000138   0xF888 0x0205      STRB     R0,[R8, #+517]
   \                     ??remove_chain_10: (+1)
   \   0000013C   0xF8D8 0x0214      LDR      R0,[R8, #+532]
   \   00000140   0x462F             MOV      R7,R5
   \   00000142   0x4287             CMP      R7,R0
   \   00000144   0xF4FF 0xAF67      BCC.W    ??remove_chain_1
   \                     ??remove_chain_2: (+1)
   \   00000148   0x4630             MOV      R0,R6
   \   0000014A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1052          }
   1053          #endif
   1054          
   1055          
   1056          
   1057          
   1058          /*-----------------------------------------------------------------------*/
   1059          /* FAT handling - Stretch or Create a cluster chain                      */
   1060          /*-----------------------------------------------------------------------*/
   1061          #if !_FS_READONLY

   \                                 In section .text, align 4, keep-with-next
   1062          static
   1063          DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
   1064          	FATFS* fs,			/* File system object */
   1065          	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
   1066          )
   1067          {
   \                     create_chain: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x4604             MOV      R4,R0
   1068          	DWORD cs, ncl, scl;
   1069          	FRESULT res;
   1070          
   1071          
   1072          	if (clst == 0) {		/* Create a new chain */
   \   00000008   0xD108             BNE.N    ??create_chain_0
   1073          		scl = fs->last_clust;			/* Get suggested start point */
   \   0000000A   0xF8D4 0x720C      LDR      R7,[R4, #+524]
   1074          		if (!scl || scl >= fs->n_fatent) scl = 1;
   \   0000000E   0xB11F             CBZ.N    R7,??create_chain_1
   \   00000010   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   00000014   0x4287             CMP      R7,R0
   \   00000016   0xD312             BCC.N    ??create_chain_2
   \                     ??create_chain_1: (+1)
   \   00000018   0x2701             MOVS     R7,#+1
   \   0000001A   0xE010             B.N      ??create_chain_2
   1075          	}
   1076          	else {					/* Stretch the current chain */
   1077          		cs = get_fat(fs, clst);			/* Check the cluster status */
   \                     ??create_chain_0: (+1)
   \   0000001C   0x.... 0x....      BL       get_fat
   1078          		if (cs < 2) return 1;			/* Invalid value */
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xBF38             IT       CC 
   \   00000024   0x2001             MOVCC    R0,#+1
   \   00000026   0xF0C0 0x80B5      BCC.W    ??create_chain_3
   1079          		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
   \   0000002A   0xF110 0x0F01      CMN      R0,#+1
   \   0000002E   0xF000 0x80B1      BEQ.W    ??create_chain_3
   1080          		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   \   00000032   0xF8D4 0x1214      LDR      R1,[R4, #+532]
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xF0C0 0x80AC      BCC.W    ??create_chain_3
   1081          		scl = clst;
   \   0000003C   0x462F             MOV      R7,R5
   1082          	}
   1083          
   1084          	ncl = scl;				/* Start cluster */
   \                     ??create_chain_2: (+1)
   \   0000003E   0x463E             MOV      R6,R7
   1085          	for (;;) {
   1086          		ncl++;							/* Next cluster */
   1087          		if (ncl >= fs->n_fatent) {		/* Check wrap around */
   \                     ??create_chain_4: (+1)
   \   00000040   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   00000044   0x1C76             ADDS     R6,R6,#+1
   \   00000046   0x4286             CMP      R6,R0
   \   00000048   0xD303             BCC.N    ??create_chain_5
   1088          			ncl = 2;
   \   0000004A   0x2602             MOVS     R6,#+2
   1089          			if (ncl > scl) return 0;	/* No free cluster */
   \   0000004C   0x2F02             CMP      R7,#+2
   \   0000004E   0xF0C0 0x8098      BCC.W    ??create_chain_6
   1090          		}
   1091          		cs = get_fat(fs, ncl);			/* Get the cluster status */
   \                     ??create_chain_5: (+1)
   \   00000052   0x4631             MOV      R1,R6
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       get_fat
   1092          		if (cs == 0) break;				/* Found a free cluster */
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xF040 0x8089      BNE.W    ??create_chain_7
   1093          		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   1094          			return cs;
   1095          		if (ncl == scl) return 0;		/* No free cluster */
   1096          	}
   1097          
   1098          	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   \   00000060   0x2E02             CMP      R6,#+2
   \   00000062   0xD36C             BCC.N    ??create_chain_8
   \   00000064   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   00000068   0x4286             CMP      R6,R0
   \   0000006A   0xD268             BCS.N    ??create_chain_8
   \   0000006C   0xF894 0x0200      LDRB     R0,[R4, #+512]
   \   00000070   0x2801             CMP      R0,#+1
   \   00000072   0xD034             BEQ.N    ??create_chain_9
   \   00000074   0xD363             BCC.N    ??create_chain_8
   \   00000076   0x2803             CMP      R0,#+3
   \   00000078   0xD001             BEQ.N    ??create_chain_10
   \   0000007A   0xD31C             BCC.N    ??create_chain_11
   \   0000007C   0xE05F             B.N      ??create_chain_8
   \                     ??create_chain_10: (+1)
   \   0000007E   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000082   0xEB00 0x11D6      ADD      R1,R0,R6, LSR #+7
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0x.... 0x....      BL       move_window
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD157             BNE.N    ??create_chain_12
   \   00000090   0x00B1             LSLS     R1,R6,#+2
   \   00000092   0x05C9             LSLS     R1,R1,#+23
   \   00000094   0xEB14 0x51D1      ADDS     R1,R4,R1, LSR #+23
   \   00000098   0xF06F 0x4370      MVN      R3,#-268435456
   \   0000009C   0x78CA             LDRB     R2,[R1, #+3]
   \   0000009E   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   000000A2   0x23FF             MOVS     R3,#+255
   \   000000A4   0x700B             STRB     R3,[R1, #+0]
   \   000000A6   0x0E12             LSRS     R2,R2,#+24
   \   000000A8   0x704B             STRB     R3,[R1, #+1]
   \   000000AA   0x708B             STRB     R3,[R1, #+2]
   \   000000AC   0x70CA             STRB     R2,[R1, #+3]
   \   000000AE   0x2101             MOVS     R1,#+1
   \   000000B0   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   000000B4   0xE044             B.N      ??create_chain_12
   \                     ??create_chain_11: (+1)
   \   000000B6   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   000000BA   0xEB00 0x2116      ADD      R1,R0,R6, LSR #+8
   \   000000BE   0x4620             MOV      R0,R4
   \   000000C0   0x.... 0x....      BL       move_window
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD13B             BNE.N    ??create_chain_12
   \   000000C8   0x0071             LSLS     R1,R6,#+1
   \   000000CA   0x05C9             LSLS     R1,R1,#+23
   \   000000CC   0xEB14 0x51D1      ADDS     R1,R4,R1, LSR #+23
   \   000000D0   0x23FF             MOVS     R3,#+255
   \   000000D2   0x700B             STRB     R3,[R1, #+0]
   \   000000D4   0x704B             STRB     R3,[R1, #+1]
   \   000000D6   0x2101             MOVS     R1,#+1
   \   000000D8   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   000000DC   0xE030             B.N      ??create_chain_12
   \                     ??create_chain_9: (+1)
   \   000000DE   0xEB06 0x0756      ADD      R7,R6,R6, LSR #+1
   \   000000E2   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   000000E6   0xEB00 0x2157      ADD      R1,R0,R7, LSR #+9
   \   000000EA   0x4620             MOV      R0,R4
   \   000000EC   0x.... 0x....      BL       move_window
   \   000000F0   0xBB30             CBNZ.N   R0,??create_chain_12
   \   000000F2   0x05F8             LSLS     R0,R7,#+23
   \   000000F4   0x1C7F             ADDS     R7,R7,#+1
   \   000000F6   0xEB14 0x51D0      ADDS     R1,R4,R0, LSR #+23
   \   000000FA   0xF016 0x0801      ANDS     R8,R6,#0x1
   \   000000FE   0xBF1A             ITTE     NE 
   \   00000100   0x7808             LDRBNE   R0,[R1, #+0]
   \   00000102   0xF040 0x00F0      ORRNE    R0,R0,#0xF0
   \   00000106   0x20FF             MOVEQ    R0,#+255
   \   00000108   0x7008             STRB     R0,[R1, #+0]
   \   0000010A   0x2001             MOVS     R0,#+1
   \   0000010C   0xF884 0x0204      STRB     R0,[R4, #+516]
   \   00000110   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000114   0xEB00 0x2157      ADD      R1,R0,R7, LSR #+9
   \   00000118   0x4620             MOV      R0,R4
   \   0000011A   0x.... 0x....      BL       move_window
   \   0000011E   0xB978             CBNZ.N   R0,??create_chain_12
   \   00000120   0x05F9             LSLS     R1,R7,#+23
   \   00000122   0xEB14 0x51D1      ADDS     R1,R4,R1, LSR #+23
   \   00000126   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000012A   0xBF12             ITEE     NE 
   \   0000012C   0x22FF             MOVNE    R2,#+255
   \   0000012E   0x780A             LDRBEQ   R2,[R1, #+0]
   \   00000130   0xF042 0x020F      ORREQ    R2,R2,#0xF
   \   00000134   0x700A             STRB     R2,[R1, #+0]
   \   00000136   0x2101             MOVS     R1,#+1
   \   00000138   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   0000013C   0xE000             B.N      ??create_chain_12
   \                     ??create_chain_8: (+1)
   \   0000013E   0x2002             MOVS     R0,#+2
   1099          	if (res == FR_OK && clst != 0) {
   \                     ??create_chain_12: (+1)
   \   00000140   0xB928             CBNZ.N   R0,??create_chain_13
   \   00000142   0xB12D             CBZ.N    R5,??create_chain_14
   1100          		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   \   00000144   0x4632             MOV      R2,R6
   \   00000146   0x4629             MOV      R1,R5
   \   00000148   0x4620             MOV      R0,R4
   \   0000014A   0x.... 0x....      BL       put_fat
   1101          	}
   1102          	if (res == FR_OK) {
   \                     ??create_chain_13: (+1)
   \   0000014E   0xB9D8             CBNZ.N   R0,??create_chain_15
   1103          		fs->last_clust = ncl;			/* Update FSINFO */
   1104          		if (fs->free_clust != 0xFFFFFFFF) {
   \                     ??create_chain_14: (+1)
   \   00000150   0xF8D4 0x0210      LDR      R0,[R4, #+528]
   \   00000154   0xF8C4 0x620C      STR      R6,[R4, #+524]
   \   00000158   0xF110 0x0F01      CMN      R0,#+1
   \   0000015C   0xD019             BEQ.N    ??create_chain_16
   1105          			fs->free_clust--;
   \   0000015E   0x1E40             SUBS     R0,R0,#+1
   \   00000160   0xF8C4 0x0210      STR      R0,[R4, #+528]
   1106          			fs->fsi_flag |= 1;
   \   00000164   0xF894 0x0205      LDRB     R0,[R4, #+517]
   \   00000168   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000016C   0xF884 0x0205      STRB     R0,[R4, #+517]
   \   00000170   0xE00F             B.N      ??create_chain_16
   1107          		}
   1108          	} else {
   \                     ??create_chain_7: (+1)
   \   00000172   0xF110 0x0F01      CMN      R0,#+1
   \   00000176   0xBF18             IT       NE 
   \   00000178   0x2801             CMPNE    R0,#+1
   \   0000017A   0xD00B             BEQ.N    ??create_chain_3
   \   0000017C   0x42BE             CMP      R6,R7
   \   0000017E   0xF47F 0xAF5F      BNE.W    ??create_chain_4
   \                     ??create_chain_6: (+1)
   \   00000182   0x2000             MOVS     R0,#+0
   \   00000184   0xE8BD 0x81F0      POP      {R4-R8,PC}
   1109          		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   \                     ??create_chain_15: (+1)
   \   00000188   0x2801             CMP      R0,#+1
   \   0000018A   0xBF0C             ITE      EQ 
   \   0000018C   0xF04F 0x36FF      MOVEQ    R6,#-1
   \   00000190   0x2601             MOVNE    R6,#+1
   1110          	}
   1111          
   1112          	return ncl;		/* Return new cluster number or error code */
   \                     ??create_chain_16: (+1)
   \   00000192   0x4630             MOV      R0,R6
   \                     ??create_chain_3: (+1)
   \   00000194   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1113          }
   1114          #endif /* !_FS_READONLY */
   1115          
   1116          
   1117          
   1118          
   1119          /*-----------------------------------------------------------------------*/
   1120          /* FAT handling - Convert offset into cluster with link map table        */
   1121          /*-----------------------------------------------------------------------*/
   1122          
   1123          #if _USE_FASTSEEK
   1124          static
   1125          DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
   1126          	FIL* fp,		/* Pointer to the file object */
   1127          	DWORD ofs		/* File offset to be converted to cluster# */
   1128          )
   1129          {
   1130          	DWORD cl, ncl, *tbl;
   1131          
   1132          
   1133          	tbl = fp->cltbl + 1;	/* Top of CLMT */
   1134          	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
   1135          	for (;;) {
   1136          		ncl = *tbl++;			/* Number of cluters in the fragment */
   1137          		if (!ncl) return 0;		/* End of table? (error) */
   1138          		if (cl < ncl) break;	/* In this fragment? */
   1139          		cl -= ncl; tbl++;		/* Next fragment */
   1140          	}
   1141          	return cl + *tbl;	/* Return the cluster number */
   1142          }
   1143          #endif	/* _USE_FASTSEEK */
   1144          
   1145          
   1146          
   1147          
   1148          /*-----------------------------------------------------------------------*/
   1149          /* Directory handling - Set directory index                              */
   1150          /*-----------------------------------------------------------------------*/
   1151          

   \                                 In section .text, align 2, keep-with-next
   1152          static
   1153          FRESULT dir_sdi (
   1154          	DIR* dp,		/* Pointer to directory object */
   1155          	UINT idx		/* Index of directory table */
   1156          )
   1157          {
   \                     dir_sdi: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   1158          	DWORD clst, sect;
   1159          	UINT ic;
   1160          
   1161          
   1162          	dp->index = (WORD)idx;	/* Current index */
   \   00000006   0xF8A4 0x5206      STRH     R5,[R4, #+518]
   1163          	clst = dp->sclust;		/* Table start cluster (0:root) */
   \   0000000A   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   1164          	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD040             BEQ.N    ??dir_sdi_0
   \   00000012   0xF8D4 0x1200      LDR      R1,[R4, #+512]
   \   00000016   0xF8D1 0x2214      LDR      R2,[R1, #+532]
   \   0000001A   0x4290             CMP      R0,R2
   \   0000001C   0xD23A             BCS.N    ??dir_sdi_0
   1165          		return FR_INT_ERR;
   1166          	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   \   0000001E   0xB928             CBNZ.N   R0,??dir_sdi_1
   \   00000020   0xF891 0x2200      LDRB     R2,[R1, #+512]
   \   00000024   0x2A03             CMP      R2,#+3
   \   00000026   0xD102             BNE.N    ??dir_sdi_2
   1167          		clst = dp->fs->dirbase;
   \   00000028   0xF8D1 0x0224      LDR      R0,[R1, #+548]
   1168          
   1169          	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
   \                     ??dir_sdi_1: (+1)
   \   0000002C   0xB930             CBNZ.N   R0,??dir_sdi_3
   1170          		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
   \                     ??dir_sdi_2: (+1)
   \   0000002E   0xF8B1 0x2208      LDRH     R2,[R1, #+520]
   \   00000032   0x4295             CMP      R5,R2
   \   00000034   0xD22E             BCS.N    ??dir_sdi_0
   1171          			return FR_INT_ERR;
   1172          		sect = dp->fs->dirbase;
   \   00000036   0xF8D1 0x1224      LDR      R1,[R1, #+548]
   \   0000003A   0xE028             B.N      ??dir_sdi_4
   1173          	}
   1174          	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
   1175          		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
   \                     ??dir_sdi_3: (+1)
   \   0000003C   0xF891 0x1202      LDRB     R1,[R1, #+514]
   \   00000040   0x010E             LSLS     R6,R1,#+4
   \   00000042   0xE000             B.N      ??dir_sdi_5
   1176          		while (idx >= ic) {	/* Follow cluster chain */
   1177          			clst = get_fat(dp->fs, clst);				/* Get next cluster */
   1178          			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   1179          			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
   1180          				return FR_INT_ERR;
   1181          			idx -= ic;
   \                     ??dir_sdi_6: (+1)
   \   00000044   0x1BAD             SUBS     R5,R5,R6
   \                     ??dir_sdi_5: (+1)
   \   00000046   0x42B5             CMP      R5,R6
   \   00000048   0xF8D4 0x2200      LDR      R2,[R4, #+512]
   \   0000004C   0xD312             BCC.N    ??dir_sdi_7
   \   0000004E   0x4601             MOV      R1,R0
   \   00000050   0x4610             MOV      R0,R2
   \   00000052   0x.... 0x....      BL       get_fat
   \   00000056   0xF110 0x0F01      CMN      R0,#+1
   \   0000005A   0xD101             BNE.N    ??dir_sdi_8
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0xBD70             POP      {R4-R6,PC}
   \                     ??dir_sdi_8: (+1)
   \   00000060   0x2802             CMP      R0,#+2
   \   00000062   0xD317             BCC.N    ??dir_sdi_0
   \   00000064   0xF8D4 0x1200      LDR      R1,[R4, #+512]
   \   00000068   0xF8D1 0x1214      LDR      R1,[R1, #+532]
   \   0000006C   0x4288             CMP      R0,R1
   \   0000006E   0xD3E9             BCC.N    ??dir_sdi_6
   1182          		}
   1183          		sect = clust2sect(dp->fs, clst);
   1184          	}
   1185          	dp->clust = clst;	/* Current cluster# */
   1186          	if (!sect) return FR_INT_ERR;
   \   00000070   0x2002             MOVS     R0,#+2
   \   00000072   0xBD70             POP      {R4-R6,PC}
   \                     ??dir_sdi_7: (+1)
   \   00000074   0xF8D2 0x3214      LDR      R3,[R2, #+532]
   \   00000078   0x1E81             SUBS     R1,R0,#+2
   \   0000007A   0x1E9B             SUBS     R3,R3,#+2
   \   0000007C   0x4299             CMP      R1,R3
   \   0000007E   0xBF2F             ITEEE    CS 
   \   00000080   0x2100             MOVCS    R1,#+0
   \   00000082   0xF892 0x3202      LDRBCC   R3,[R2, #+514]
   \   00000086   0xF8D2 0x2228      LDRCC    R2,[R2, #+552]
   \   0000008A   0xFB03 0x2101      MLACC    R1,R3,R1,R2
   \                     ??dir_sdi_4: (+1)
   \   0000008E   0xF8C4 0x020C      STR      R0,[R4, #+524]
   \   00000092   0xB909             CBNZ.N   R1,??dir_sdi_9
   \                     ??dir_sdi_0: (+1)
   \   00000094   0x2002             MOVS     R0,#+2
   \   00000096   0xBD70             POP      {R4-R6,PC}
   1187          	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
   \                     ??dir_sdi_9: (+1)
   \   00000098   0xEB01 0x1015      ADD      R0,R1,R5, LSR #+4
   1188          	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
   \   0000009C   0xF005 0x010F      AND      R1,R5,#0xF
   \   000000A0   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \   000000A4   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   000000A8   0xEB00 0x1041      ADD      R0,R0,R1, LSL #+5
   \   000000AC   0xF8C4 0x0214      STR      R0,[R4, #+532]
   1189          
   1190          	return FR_OK;
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0xBD70             POP      {R4-R6,PC}       ;; return
   1191          }
   1192          
   1193          
   1194          
   1195          
   1196          /*-----------------------------------------------------------------------*/
   1197          /* Directory handling - Move directory table index next                  */
   1198          /*-----------------------------------------------------------------------*/
   1199          
   1200          static
   1201          FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
   1202          	DIR* dp,		/* Pointer to the directory object */
   1203          	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
   1204          )
   1205          {
   1206          	DWORD clst;
   1207          	UINT i;
   1208          #if !_FS_READONLY
   1209          	UINT c;
   1210          #endif
   1211          
   1212          
   1213          	i = dp->index + 1;
   1214          	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
   1215          		return FR_NO_FILE;
   1216          
   1217          	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
   1218          		dp->sect++;					/* Next sector */
   1219          
   1220          		if (!dp->clust) {		/* Static table */
   1221          			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
   1222          				return FR_NO_FILE;
   1223          		}
   1224          		else {					/* Dynamic table */
   1225          			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
   1226          				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
   1227          				if (clst <= 1) return FR_INT_ERR;
   1228          				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1229          				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
   1230          #if !_FS_READONLY
   1231          					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
   1232          					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
   1233          					if (clst == 0) return FR_DENIED;			/* No free cluster */
   1234          					if (clst == 1) return FR_INT_ERR;
   1235          					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1236          					/* Clean-up stretched table */
   1237          					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
   1238          					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
   1239          					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
   1240          					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
   1241          						dp->fs->wflag = 1;
   1242          						if (sync_window(dp->fs)) return FR_DISK_ERR;
   1243          						dp->fs->winsect++;
   1244          					}
   1245          					dp->fs->winsect -= c;						/* Rewind window offset */
   1246          #else
   1247          					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
   1248          					return FR_NO_FILE;							/* Report EOT */
   1249          #endif
   1250          				}
   1251          				dp->clust = clst;				/* Initialize data for new cluster */
   1252          				dp->sect = clust2sect(dp->fs, clst);
   1253          			}
   1254          		}
   1255          	}
   1256          
   1257          	dp->index = (WORD)i;	/* Current index */
   1258          	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
   1259          
   1260          	return FR_OK;
   1261          }
   1262          
   1263          
   1264          
   1265          
   1266          /*-----------------------------------------------------------------------*/
   1267          /* Directory handling - Reserve directory entry                          */
   1268          /*-----------------------------------------------------------------------*/
   1269          
   1270          #if !_FS_READONLY
   1271          static
   1272          FRESULT dir_alloc (
   1273          	DIR* dp,	/* Pointer to the directory object */
   1274          	UINT nent	/* Number of contiguous entries to allocate (1-21) */
   1275          )
   1276          {
   1277          	FRESULT res;
   1278          	UINT n;
   1279          
   1280          
   1281          	res = dir_sdi(dp, 0);
   1282          	if (res == FR_OK) {
   1283          		n = 0;
   1284          		do {
   1285          			res = move_window(dp->fs, dp->sect);
   1286          			if (res != FR_OK) break;
   1287          			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
   1288          				if (++n == nent) break;	/* A block of contiguous free entries is found */
   1289          			} else {
   1290          				n = 0;					/* Not a blank entry. Restart to search */
   1291          			}
   1292          			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
   1293          		} while (res == FR_OK);
   1294          	}
   1295          	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   1296          	return res;
   1297          }
   1298          #endif
   1299          
   1300          
   1301          
   1302          
   1303          /*-----------------------------------------------------------------------*/
   1304          /* Directory handling - Load/Store start cluster number                  */
   1305          /*-----------------------------------------------------------------------*/
   1306          

   \                                 In section .text, align 2, keep-with-next
   1307          static
   1308          DWORD ld_clust (
   1309          	FATFS* fs,	/* Pointer to the fs object */
   1310          	BYTE* dir	/* Pointer to the directory entry */
   1311          )
   1312          {
   1313          	DWORD cl;
   1314          
   1315          	cl = LD_WORD(dir + DIR_FstClusLO);
   1316          	if (fs->fs_type == FS_FAT32)
   \                     ld_clust: (+1)
   \   00000000   0xF890 0x0200      LDRB     R0,[R0, #+512]
   \   00000004   0x7ECA             LDRB     R2,[R1, #+27]
   \   00000006   0x7E8B             LDRB     R3,[R1, #+26]
   \   00000008   0x2803             CMP      R0,#+3
   \   0000000A   0xEA43 0x2202      ORR      R2,R3,R2, LSL #+8
   \   0000000E   0xD105             BNE.N    ??ld_clust_0
   1317          		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
   \   00000010   0x7D48             LDRB     R0,[R1, #+21]
   \   00000012   0x7D09             LDRB     R1,[R1, #+20]
   \   00000014   0xEA41 0x2000      ORR      R0,R1,R0, LSL #+8
   \   00000018   0xEA42 0x4200      ORR      R2,R2,R0, LSL #+16
   1318          
   1319          	return cl;
   \                     ??ld_clust_0: (+1)
   \   0000001C   0x4610             MOV      R0,R2
   \   0000001E   0x4770             BX       LR               ;; return
   1320          }
   1321          
   1322          
   1323          #if !_FS_READONLY
   1324          static
   1325          void st_clust (
   1326          	BYTE* dir,	/* Pointer to the directory entry */
   1327          	DWORD cl	/* Value to be set */
   1328          )
   1329          {
   1330          	ST_WORD(dir + DIR_FstClusLO, cl);
   1331          	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
   1332          }
   1333          #endif
   1334          
   1335          
   1336          
   1337          
   1338          /*-----------------------------------------------------------------------*/
   1339          /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
   1340          /*-----------------------------------------------------------------------*/
   1341          #if _USE_LFN
   1342          static
   1343          const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN characters in the directory entry */
   1344          
   1345          
   1346          static
   1347          int cmp_lfn (			/* 1:Matched, 0:Not matched */
   1348          	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
   1349          	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
   1350          )
   1351          {
   1352          	UINT i, s;
   1353          	WCHAR wc, uc;
   1354          
   1355          
   1356          	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
   1357          	s = 0; wc = 1;
   1358          	do {
   1359          		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
   1360          		if (wc) {	/* Last character has not been processed */
   1361          			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   1362          			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   1363          				return 0;				/* Not matched */
   1364          		} else {
   1365          			if (uc != 0xFFFF) return 0;	/* Check filler */
   1366          		}
   1367          	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
   1368          
   1369          	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
   1370          		return 0;
   1371          
   1372          	return 1;						/* The part of LFN matched */
   1373          }
   1374          
   1375          
   1376          
   1377          static
   1378          int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
   1379          	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
   1380          	BYTE* dir			/* Pointer to the directory entry */
   1381          )
   1382          {
   1383          	UINT i, s;
   1384          	WCHAR wc, uc;
   1385          
   1386          
   1387          	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   1388          
   1389          	s = 0; wc = 1;
   1390          	do {
   1391          		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
   1392          		if (wc) {	/* Last character has not been processed */
   1393          			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   1394          			lfnbuf[i++] = wc = uc;			/* Store it */
   1395          		} else {
   1396          			if (uc != 0xFFFF) return 0;		/* Check filler */
   1397          		}
   1398          	} while (++s < 13);						/* Read all character in the entry */
   1399          
   1400          	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
   1401          		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
   1402          		lfnbuf[i] = 0;
   1403          	}
   1404          
   1405          	return 1;
   1406          }
   1407          
   1408          
   1409          #if !_FS_READONLY
   1410          static
   1411          void fit_lfn (
   1412          	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
   1413          	BYTE* dir,				/* Pointer to the directory entry */
   1414          	BYTE ord,				/* LFN order (1-20) */
   1415          	BYTE sum				/* SFN sum */
   1416          )
   1417          {
   1418          	UINT i, s;
   1419          	WCHAR wc;
   1420          
   1421          
   1422          	dir[LDIR_Chksum] = sum;			/* Set check sum */
   1423          	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   1424          	dir[LDIR_Type] = 0;
   1425          	ST_WORD(dir + LDIR_FstClusLO, 0);
   1426          
   1427          	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   1428          	s = wc = 0;
   1429          	do {
   1430          		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
   1431          		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   1432          		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
   1433          	} while (++s < 13);
   1434          	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
   1435          	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   1436          }
   1437          
   1438          #endif
   1439          #endif
   1440          
   1441          
   1442          
   1443          
   1444          /*-----------------------------------------------------------------------*/
   1445          /* Create numbered name                                                  */
   1446          /*-----------------------------------------------------------------------*/
   1447          #if _USE_LFN
   1448          static
   1449          void gen_numname (
   1450          	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
   1451          	const BYTE* src,	/* Pointer to SFN */
   1452          	const WCHAR* lfn,	/* Pointer to LFN */
   1453          	UINT seq			/* Sequence number */
   1454          )
   1455          {
   1456          	BYTE ns[8], c;
   1457          	UINT i, j;
   1458          	WCHAR wc;
   1459          	DWORD sr;
   1460          
   1461          
   1462          	mem_cpy(dst, src, 11);
   1463          
   1464          	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   1465          		sr = seq;
   1466          		while (*lfn) {	/* Create a CRC */
   1467          			wc = *lfn++;
   1468          			for (i = 0; i < 16; i++) {
   1469          				sr = (sr << 1) + (wc & 1);
   1470          				wc >>= 1;
   1471          				if (sr & 0x10000) sr ^= 0x11021;
   1472          			}
   1473          		}
   1474          		seq = (UINT)sr;
   1475          	}
   1476          
   1477          	/* itoa (hexdecimal) */
   1478          	i = 7;
   1479          	do {
   1480          		c = (seq % 16) + '0';
   1481          		if (c > '9') c += 7;
   1482          		ns[i--] = c;
   1483          		seq /= 16;
   1484          	} while (seq);
   1485          	ns[i] = '~';
   1486          
   1487          	/* Append the number */
   1488          	for (j = 0; j < i && dst[j] != ' '; j++) {
   1489          		if (IsDBCS1(dst[j])) {
   1490          			if (j == i - 1) break;
   1491          			j++;
   1492          		}
   1493          	}
   1494          	do {
   1495          		dst[j++] = (i < 8) ? ns[i++] : ' ';
   1496          	} while (j < 8);
   1497          }
   1498          #endif
   1499          
   1500          
   1501          
   1502          
   1503          /*-----------------------------------------------------------------------*/
   1504          /* Calculate sum of an SFN                                               */
   1505          /*-----------------------------------------------------------------------*/
   1506          #if _USE_LFN
   1507          static
   1508          BYTE sum_sfn (
   1509          	const BYTE* dir		/* Pointer to the SFN entry */
   1510          )
   1511          {
   1512          	BYTE sum = 0;
   1513          	UINT n = 11;
   1514          
   1515          	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1516          	return sum;
   1517          }
   1518          #endif
   1519          
   1520          
   1521          
   1522          
   1523          /*-----------------------------------------------------------------------*/
   1524          /* Directory handling - Find an object in the directory                  */
   1525          /*-----------------------------------------------------------------------*/
   1526          
   1527          static
   1528          FRESULT dir_find (
   1529          	DIR* dp			/* Pointer to the directory object linked to the file name */
   1530          )
   1531          {
   1532          	FRESULT res;
   1533          	BYTE c, *dir;
   1534          #if _USE_LFN
   1535          	BYTE a, ord, sum;
   1536          #endif
   1537          
   1538          	res = dir_sdi(dp, 0);			/* Rewind directory object */
   1539          	if (res != FR_OK) return res;
   1540          
   1541          #if _USE_LFN
   1542          	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1543          #endif
   1544          	do {
   1545          		res = move_window(dp->fs, dp->sect);
   1546          		if (res != FR_OK) break;
   1547          		dir = dp->dir;					/* Ptr to the directory entry of current index */
   1548          		c = dir[DIR_Name];
   1549          		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1550          #if _USE_LFN	/* LFN configuration */
   1551          		a = dir[DIR_Attr] & AM_MASK;
   1552          		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   1553          			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1554          		} else {
   1555          			if (a == AM_LFN) {			/* An LFN entry is found */
   1556          				if (dp->lfn) {
   1557          					if (c & LLEF) {		/* Is it start of LFN sequence? */
   1558          						sum = dir[LDIR_Chksum];
   1559          						c &= ~LLEF; ord = c;	/* LFN start order */
   1560          						dp->lfn_idx = dp->index;	/* Start index of LFN */
   1561          					}
   1562          					/* Check validity of the LFN entry and compare it with given name */
   1563          					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
   1564          				}
   1565          			} else {					/* An SFN entry is found */
   1566          				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   1567          				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
   1568          				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1569          			}
   1570          		}
   1571          #else		/* Non LFN configuration */
   1572          		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
   1573          			break;
   1574          #endif
   1575          		res = dir_next(dp, 0);		/* Next entry */
   1576          	} while (res == FR_OK);
   1577          
   1578          	return res;
   1579          }
   1580          
   1581          
   1582          
   1583          
   1584          /*-----------------------------------------------------------------------*/
   1585          /* Read an object from the directory                                     */
   1586          /*-----------------------------------------------------------------------*/
   1587          #if _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2

   \                                 In section .text, align 2, keep-with-next
   1588          static
   1589          FRESULT dir_read (
   1590          	DIR* dp,		/* Pointer to the directory object */
   1591          	int vol			/* Filtered by 0:file/directory or 1:volume label */
   1592          )
   1593          {
   \                     dir_read: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460E             MOV      R6,R1
   1594          	FRESULT res;
   1595          	BYTE a, c, *dir;
   1596          #if _USE_LFN
   1597          	BYTE ord = 0xFF, sum = 0xFF;
   1598          #endif
   1599          
   1600          	res = FR_NO_FILE;
   \   00000008   0x2504             MOVS     R5,#+4
   \   0000000A   0xE048             B.N      ??dir_read_0
   1601          	while (dp->sect) {
   1602          		res = move_window(dp->fs, dp->sect);
   1603          		if (res != FR_OK) break;
   1604          		dir = dp->dir;					/* Ptr to the directory entry of current index */
   1605          		c = dir[DIR_Name];
   1606          		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1607          		a = dir[DIR_Attr] & AM_MASK;
   1608          #if _USE_LFN	/* LFN configuration */
   1609          		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
   1610          			ord = 0xFF;
   1611          		} else {
   1612          			if (a == AM_LFN) {			/* An LFN entry is found */
   1613          				if (c & LLEF) {			/* Is it start of LFN sequence? */
   1614          					sum = dir[LDIR_Chksum];
   1615          					c &= ~LLEF; ord = c;
   1616          					dp->lfn_idx = dp->index;
   1617          				}
   1618          				/* Check LFN validity and capture it */
   1619          				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
   1620          			} else {					/* An SFN entry is found */
   1621          				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
   1622          					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
   1623          				break;
   1624          			}
   1625          		}
   1626          #else		/* Non LFN configuration */
   1627          		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
   \                     ??dir_read_1: (+1)
   \   0000000C   0x42B0             CMP      R0,R6
   \   0000000E   0xF000 0x807F      BEQ.W    ??dir_read_2
   1628          			break;
   1629          #endif
   1630          		res = dir_next(dp, 0);				/* Next entry */
   \                     ??dir_read_3: (+1)
   \   00000012   0xF8B4 0x0206      LDRH     R0,[R4, #+518]
   \   00000016   0x1C47             ADDS     R7,R0,#+1
   \   00000018   0x0438             LSLS     R0,R7,#+16
   \   0000001A   0xBF1C             ITT      NE 
   \   0000001C   0xF8D4 0x0210      LDRNE    R0,[R4, #+528]
   \   00000020   0x2800             CMPNE    R0,#+0
   \   00000022   0xD00E             BEQ.N    ??dir_read_4
   \   00000024   0xF017 0x080F      ANDS     R8,R7,#0xF
   \   00000028   0xD131             BNE.N    ??dir_read_5
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0xF8D4 0x120C      LDR      R1,[R4, #+524]
   \   00000030   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \   00000034   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   00000038   0xB929             CBNZ.N   R1,??dir_read_6
   \   0000003A   0xF8B0 0x0208      LDRH     R0,[R0, #+520]
   \   0000003E   0x4287             CMP      R7,R0
   \   00000040   0xD325             BCC.N    ??dir_read_5
   \                     ??dir_read_4: (+1)
   \   00000042   0x2504             MOVS     R5,#+4
   \   00000044   0xE061             B.N      ??dir_read_7
   \                     ??dir_read_6: (+1)
   \   00000046   0xF890 0x2202      LDRB     R2,[R0, #+514]
   \   0000004A   0x1E52             SUBS     R2,R2,#+1
   \   0000004C   0xEA12 0x1F17      TST      R2,R7, LSR #+4
   \   00000050   0xD11D             BNE.N    ??dir_read_5
   \   00000052   0x.... 0x....      BL       get_fat
   \   00000056   0x2802             CMP      R0,#+2
   \   00000058   0xD354             BCC.N    ??dir_read_8
   \   0000005A   0xF110 0x0F01      CMN      R0,#+1
   \   0000005E   0xD04F             BEQ.N    ??dir_read_9
   \   00000060   0xF8D4 0x1200      LDR      R1,[R4, #+512]
   \   00000064   0xF8D1 0x2214      LDR      R2,[R1, #+532]
   \   00000068   0x4290             CMP      R0,R2
   \   0000006A   0xD2EA             BCS.N    ??dir_read_4
   \   0000006C   0xF8C4 0x020C      STR      R0,[R4, #+524]
   \   00000070   0xF8D1 0x2214      LDR      R2,[R1, #+532]
   \   00000074   0x1E80             SUBS     R0,R0,#+2
   \   00000076   0x1E92             SUBS     R2,R2,#+2
   \   00000078   0x4290             CMP      R0,R2
   \   0000007A   0xBF2F             ITEEE    CS 
   \   0000007C   0x2000             MOVCS    R0,#+0
   \   0000007E   0xF891 0x2202      LDRBCC   R2,[R1, #+514]
   \   00000082   0xF8D1 0x1228      LDRCC    R1,[R1, #+552]
   \   00000086   0xFB02 0x1000      MLACC    R0,R2,R0,R1
   \   0000008A   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \                     ??dir_read_5: (+1)
   \   0000008E   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   00000092   0xF8A4 0x7206      STRH     R7,[R4, #+518]
   \   00000096   0xEB00 0x1048      ADD      R0,R0,R8, LSL #+5
   \   0000009A   0xF8C4 0x0214      STR      R0,[R4, #+532]
   \                     ??dir_read_0: (+1)
   \   0000009E   0xF8D4 0x7210      LDR      R7,[R4, #+528]
   \   000000A2   0xB38F             CBZ.N    R7,??dir_read_10
   \   000000A4   0xF8D4 0x8200      LDR      R8,[R4, #+512]
   \   000000A8   0x2500             MOVS     R5,#+0
   \   000000AA   0xF8D8 0x022C      LDR      R0,[R8, #+556]
   \   000000AE   0x4287             CMP      R7,R0
   \   000000B0   0xD011             BEQ.N    ??dir_read_11
   \   000000B2   0x4640             MOV      R0,R8
   \   000000B4   0x.... 0x....      BL       sync_window
   \   000000B8   0x0005             MOVS     R5,R0
   \   000000BA   0xD10C             BNE.N    ??dir_read_11
   \   000000BC   0xF898 0x0201      LDRB     R0,[R8, #+513]
   \   000000C0   0x2301             MOVS     R3,#+1
   \   000000C2   0x463A             MOV      R2,R7
   \   000000C4   0x4641             MOV      R1,R8
   \   000000C6   0x.... 0x....      BL       disk_read
   \   000000CA   0xB110             CBZ.N    R0,??dir_read_12
   \   000000CC   0xF04F 0x37FF      MOV      R7,#-1
   \   000000D0   0x2501             MOVS     R5,#+1
   \                     ??dir_read_12: (+1)
   \   000000D2   0xF8C8 0x722C      STR      R7,[R8, #+556]
   \                     ??dir_read_11: (+1)
   \   000000D6   0xB9BD             CBNZ.N   R5,??dir_read_10
   \   000000D8   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   000000DC   0x7801             LDRB     R1,[R0, #+0]
   \   000000DE   0x2900             CMP      R1,#+0
   \   000000E0   0xD0AF             BEQ.N    ??dir_read_4
   \   000000E2   0x7AC0             LDRB     R0,[R0, #+11]
   \   000000E4   0x29E5             CMP      R1,#+229
   \   000000E6   0xF000 0x003F      AND      R0,R0,#0x3F
   \   000000EA   0xBF1C             ITT      NE 
   \   000000EC   0x292E             CMPNE    R1,#+46
   \   000000EE   0x280F             CMPNE    R0,#+15
   \   000000F0   0xD08F             BEQ.N    ??dir_read_3
   \   000000F2   0xF020 0x0020      BIC      R0,R0,#0x20
   \   000000F6   0x2808             CMP      R0,#+8
   \   000000F8   0xBF0C             ITE      EQ 
   \   000000FA   0x2001             MOVEQ    R0,#+1
   \   000000FC   0x2000             MOVNE    R0,#+0
   \   000000FE   0xE785             B.N      ??dir_read_1
   1631          		if (res != FR_OK) break;
   1632          	}
   \                     ??dir_read_9: (+1)
   \   00000100   0x2501             MOVS     R5,#+1
   \   00000102   0xE002             B.N      ??dir_read_7
   \                     ??dir_read_8: (+1)
   \   00000104   0x2502             MOVS     R5,#+2
   \   00000106   0xE000             B.N      ??dir_read_7
   1633          
   1634          	if (res != FR_OK) dp->sect = 0;
   \                     ??dir_read_10: (+1)
   \   00000108   0xB115             CBZ.N    R5,??dir_read_2
   \                     ??dir_read_7: (+1)
   \   0000010A   0x2000             MOVS     R0,#+0
   \   0000010C   0xF8C4 0x0210      STR      R0,[R4, #+528]
   1635          
   1636          	return res;
   \                     ??dir_read_2: (+1)
   \   00000110   0x4628             MOV      R0,R5
   \   00000112   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1637          }
   1638          #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
   1639          
   1640          
   1641          
   1642          
   1643          /*-----------------------------------------------------------------------*/
   1644          /* Register an object to the directory                                   */
   1645          /*-----------------------------------------------------------------------*/
   1646          #if !_FS_READONLY

   \                                 In section .text, align 4, keep-with-next
   1647          static
   1648          FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
   1649          	DIR* dp				/* Target directory with object name to be created */
   1650          )
   1651          {
   \                     dir_register: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4680             MOV      R8,R0
   1652          	FRESULT res;
   1653          #if _USE_LFN	/* LFN configuration */
   1654          	UINT n, nent;
   1655          	BYTE sn[12], *fn, sum;
   1656          	WCHAR *lfn;
   1657          
   1658          
   1659          	fn = dp->fn; lfn = dp->lfn;
   1660          	mem_cpy(sn, fn, 12);
   1661          
   1662          	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
   1663          		return FR_INVALID_NAME;
   1664          
   1665          	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   1666          		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
   1667          		for (n = 1; n < 100; n++) {
   1668          			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   1669          			res = dir_find(dp);				/* Check if the name collides with existing SFN */
   1670          			if (res != FR_OK) break;
   1671          		}
   1672          		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   1673          		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   1674          		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
   1675          	}
   1676          
   1677          	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
   1678          		for (n = 0; lfn[n]; n++) ;
   1679          		nent = (n + 25) / 13;
   1680          	} else {						/* Otherwise allocate an entry for an SFN  */
   1681          		nent = 1;
   1682          	}
   1683          	res = dir_alloc(dp, nent);		/* Allocate entries */
   1684          
   1685          	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
   1686          		res = dir_sdi(dp, dp->index - nent);
   1687          		if (res == FR_OK) {
   1688          			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
   1689          			do {					/* Store LFN entries in bottom first */
   1690          				res = move_window(dp->fs, dp->sect);
   1691          				if (res != FR_OK) break;
   1692          				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
   1693          				dp->fs->wflag = 1;
   1694          				res = dir_next(dp, 0);	/* Next entry */
   1695          			} while (res == FR_OK && --nent);
   1696          		}
   1697          	}
   1698          #else	/* Non LFN configuration */
   1699          	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x.... 0x....      BL       dir_sdi
   \   0000000C   0x0006             MOVS     R6,R0
   \   0000000E   0xF040 0x80C3      BNE.W    ??dir_register_0
   \   00000012   0x2500             MOVS     R5,#+0
   \   00000014   0xE025             B.N      ??dir_register_1
   \                     ??dir_register_2: (+1)
   \   00000016   0x1C6D             ADDS     R5,R5,#+1
   \   00000018   0x2D01             CMP      R5,#+1
   \   0000001A   0xF000 0x80BF      BEQ.W    ??dir_register_3
   \                     ??dir_register_4: (+1)
   \   0000001E   0xF8B8 0x0206      LDRH     R0,[R8, #+518]
   \   00000022   0x1C46             ADDS     R6,R0,#+1
   \   00000024   0x0430             LSLS     R0,R6,#+16
   \   00000026   0xBF1C             ITT      NE 
   \   00000028   0xF8D8 0x0210      LDRNE    R0,[R8, #+528]
   \   0000002C   0x2800             CMPNE    R0,#+0
   \   0000002E   0xD058             BEQ.N    ??dir_register_5
   \   00000030   0xF016 0x0F0F      TST      R6,#0xF
   \   00000034   0xD10B             BNE.N    ??dir_register_6
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0xF8D8 0x120C      LDR      R1,[R8, #+524]
   \   0000003C   0xF8C8 0x0210      STR      R0,[R8, #+528]
   \   00000040   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   00000044   0xBB99             CBNZ.N   R1,??dir_register_7
   \   00000046   0xF8B0 0x0208      LDRH     R0,[R0, #+520]
   \   0000004A   0x4286             CMP      R6,R0
   \   0000004C   0xD249             BCS.N    ??dir_register_5
   \                     ??dir_register_6: (+1)
   \   0000004E   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   00000052   0xF006 0x010F      AND      R1,R6,#0xF
   \   00000056   0xF8A8 0x6206      STRH     R6,[R8, #+518]
   \   0000005A   0xEB00 0x1041      ADD      R0,R0,R1, LSL #+5
   \   0000005E   0xF8C8 0x0214      STR      R0,[R8, #+532]
   \                     ??dir_register_1: (+1)
   \   00000062   0xF8D8 0x4200      LDR      R4,[R8, #+512]
   \   00000066   0xF8D8 0x7210      LDR      R7,[R8, #+528]
   \   0000006A   0x2600             MOVS     R6,#+0
   \   0000006C   0xF8D4 0x022C      LDR      R0,[R4, #+556]
   \   00000070   0x4287             CMP      R7,R0
   \   00000072   0xD011             BEQ.N    ??dir_register_8
   \   00000074   0x4620             MOV      R0,R4
   \   00000076   0x.... 0x....      BL       sync_window
   \   0000007A   0x0006             MOVS     R6,R0
   \   0000007C   0xD10C             BNE.N    ??dir_register_8
   \   0000007E   0xF894 0x0201      LDRB     R0,[R4, #+513]
   \   00000082   0x2301             MOVS     R3,#+1
   \   00000084   0x463A             MOV      R2,R7
   \   00000086   0x4621             MOV      R1,R4
   \   00000088   0x.... 0x....      BL       disk_read
   \   0000008C   0xB110             CBZ.N    R0,??dir_register_9
   \   0000008E   0xF04F 0x37FF      MOV      R7,#-1
   \   00000092   0x2601             MOVS     R6,#+1
   \                     ??dir_register_9: (+1)
   \   00000094   0xF8C4 0x722C      STR      R7,[R4, #+556]
   \                     ??dir_register_8: (+1)
   \   00000098   0x2E00             CMP      R6,#+0
   \   0000009A   0xD17D             BNE.N    ??dir_register_0
   \   0000009C   0xF8D8 0x0214      LDR      R0,[R8, #+532]
   \   000000A0   0x7800             LDRB     R0,[R0, #+0]
   \   000000A2   0x28E5             CMP      R0,#+229
   \   000000A4   0xBF18             IT       NE 
   \   000000A6   0x2800             CMPNE    R0,#+0
   \   000000A8   0xD0B5             BEQ.N    ??dir_register_2
   \   000000AA   0x2500             MOVS     R5,#+0
   \   000000AC   0xE7B7             B.N      ??dir_register_4
   \                     ??dir_register_7: (+1)
   \   000000AE   0xF890 0x2202      LDRB     R2,[R0, #+514]
   \   000000B2   0x1E52             SUBS     R2,R2,#+1
   \   000000B4   0xEA12 0x1F16      TST      R2,R6, LSR #+4
   \   000000B8   0xD1C9             BNE.N    ??dir_register_6
   \   000000BA   0x.... 0x....      BL       get_fat
   \   000000BE   0x4607             MOV      R7,R0
   \   000000C0   0x2F02             CMP      R7,#+2
   \   000000C2   0xD367             BCC.N    ??dir_register_10
   \   000000C4   0xF117 0x0F01      CMN      R7,#+1
   \   000000C8   0xD062             BEQ.N    ??dir_register_11
   \   000000CA   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   000000CE   0xF8D0 0x1214      LDR      R1,[R0, #+532]
   \   000000D2   0x428F             CMP      R7,R1
   \   000000D4   0xD348             BCC.N    ??dir_register_12
   \   000000D6   0xF8D8 0x120C      LDR      R1,[R8, #+524]
   \   000000DA   0x.... 0x....      BL       create_chain
   \   000000DE   0x0007             MOVS     R7,R0
   \   000000E0   0xD101             BNE.N    ??dir_register_13
   \                     ??dir_register_5: (+1)
   \   000000E2   0x2607             MOVS     R6,#+7
   \   000000E4   0xE05A             B.N      ??dir_register_3
   \                     ??dir_register_13: (+1)
   \   000000E6   0x2F01             CMP      R7,#+1
   \   000000E8   0xD054             BEQ.N    ??dir_register_10
   \   000000EA   0xF117 0x0F01      CMN      R7,#+1
   \   000000EE   0xD04F             BEQ.N    ??dir_register_11
   \   000000F0   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   000000F4   0x.... 0x....      BL       sync_window
   \   000000F8   0x2800             CMP      R0,#+0
   \   000000FA   0xD149             BNE.N    ??dir_register_11
   \   000000FC   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   00000100   0xF44F 0x7100      MOV      R1,#+512
   \   00000104   0x.... 0x....      BL       __aeabi_memclr
   \   00000108   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   0000010C   0x1EBA             SUBS     R2,R7,#+2
   \   0000010E   0xF500 0x7305      ADD      R3,R0,#+532
   \   00000112   0xF8D3 0xC000      LDR      R12,[R3, #+0]
   \   00000116   0xF1AC 0x0C02      SUB      R12,R12,#+2
   \   0000011A   0x4562             CMP      R2,R12
   \   0000011C   0xBF2F             ITEEE    CS 
   \   0000011E   0x2100             MOVCS    R1,#+0
   \   00000120   0xF890 0x1202      LDRBCC   R1,[R0, #+514]
   \   00000124   0x695B             LDRCC    R3,[R3, #+20]
   \   00000126   0xFB01 0x3102      MLACC    R1,R1,R2,R3
   \   0000012A   0xF8C0 0x122C      STR      R1,[R0, #+556]
   \   0000012E   0x2400             MOVS     R4,#+0
   \   00000130   0xE00F             B.N      ??dir_register_14
   \                     ??dir_register_15: (+1)
   \   00000132   0x2101             MOVS     R1,#+1
   \   00000134   0xF880 0x1204      STRB     R1,[R0, #+516]
   \   00000138   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   0000013C   0x.... 0x....      BL       sync_window
   \   00000140   0xBB30             CBNZ.N   R0,??dir_register_11
   \   00000142   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   00000146   0x1C64             ADDS     R4,R4,#+1
   \   00000148   0xF8D0 0x122C      LDR      R1,[R0, #+556]
   \   0000014C   0x1C49             ADDS     R1,R1,#+1
   \   0000014E   0xF8C0 0x122C      STR      R1,[R0, #+556]
   \                     ??dir_register_14: (+1)
   \   00000152   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   00000156   0xF890 0x1202      LDRB     R1,[R0, #+514]
   \   0000015A   0x428C             CMP      R4,R1
   \   0000015C   0xD3E9             BCC.N    ??dir_register_15
   \   0000015E   0xF8D0 0x122C      LDR      R1,[R0, #+556]
   \   00000162   0x1B09             SUBS     R1,R1,R4
   \   00000164   0xF8C0 0x122C      STR      R1,[R0, #+556]
   \                     ??dir_register_12: (+1)
   \   00000168   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   0000016C   0xF8C8 0x720C      STR      R7,[R8, #+524]
   \   00000170   0x1EB9             SUBS     R1,R7,#+2
   \   00000172   0xF8D0 0x2214      LDR      R2,[R0, #+532]
   \   00000176   0x1E92             SUBS     R2,R2,#+2
   \   00000178   0x4291             CMP      R1,R2
   \   0000017A   0xBF2F             ITEEE    CS 
   \   0000017C   0x2000             MOVCS    R0,#+0
   \   0000017E   0xF890 0x2202      LDRBCC   R2,[R0, #+514]
   \   00000182   0xF8D0 0x0228      LDRCC    R0,[R0, #+552]
   \   00000186   0xFB02 0x0001      MLACC    R0,R2,R1,R0
   \   0000018A   0xF8C8 0x0210      STR      R0,[R8, #+528]
   \   0000018E   0xE75E             B.N      ??dir_register_6
   \                     ??dir_register_11: (+1)
   \   00000190   0x2601             MOVS     R6,#+1
   \   00000192   0xE003             B.N      ??dir_register_3
   \                     ??dir_register_10: (+1)
   \   00000194   0x2602             MOVS     R6,#+2
   \   00000196   0xE001             B.N      ??dir_register_3
   \                     ??dir_register_0: (+1)
   \   00000198   0x2E04             CMP      R6,#+4
   \   0000019A   0xD0A2             BEQ.N    ??dir_register_5
   1700          #endif
   1701          
   1702          	if (res == FR_OK) {				/* Set SFN entry */
   \                     ??dir_register_3: (+1)
   \   0000019C   0xB9EE             CBNZ.N   R6,??dir_register_16
   1703          		res = move_window(dp->fs, dp->sect);
   \   0000019E   0xF8D8 0x1210      LDR      R1,[R8, #+528]
   \   000001A2   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   000001A6   0x.... 0x....      BL       move_window
   \   000001AA   0x0006             MOVS     R6,R0
   1704          		if (res == FR_OK) {
   \   000001AC   0xD115             BNE.N    ??dir_register_16
   1705          			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
   \   000001AE   0xF8D8 0x0214      LDR      R0,[R8, #+532]
   \   000001B2   0x2120             MOVS     R1,#+32
   \   000001B4   0x.... 0x....      BL       __aeabi_memclr
   1706          			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
   \   000001B8   0xF8D8 0x0214      LDR      R0,[R8, #+532]
   \   000001BC   0xF8D8 0x1218      LDR      R1,[R8, #+536]
   \   000001C0   0xF05F 0x020B      MOVS.W   R2,#+11
   \                     ??dir_register_17: (+1)
   \   000001C4   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   000001C8   0x1E52             SUBS     R2,R2,#+1
   \   000001CA   0xF800 0x3B01      STRB     R3,[R0], #+1
   \   000001CE   0xD1F9             BNE.N    ??dir_register_17
   1707          #if _USE_LFN
   1708          			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
   1709          #endif
   1710          			dp->fs->wflag = 1;
   \   000001D0   0xF8D8 0x1200      LDR      R1,[R8, #+512]
   \   000001D4   0x2001             MOVS     R0,#+1
   \   000001D6   0xF881 0x0204      STRB     R0,[R1, #+516]
   1711          		}
   1712          	}
   1713          
   1714          	return res;
   \                     ??dir_register_16: (+1)
   \   000001DA   0x4630             MOV      R0,R6
   \   000001DC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1715          }
   1716          #endif /* !_FS_READONLY */
   1717          
   1718          
   1719          
   1720          
   1721          /*-----------------------------------------------------------------------*/
   1722          /* Remove an object from the directory                                   */
   1723          /*-----------------------------------------------------------------------*/
   1724          #if !_FS_READONLY && !_FS_MINIMIZE

   \                                 In section .text, align 2, keep-with-next
   1725          static
   1726          FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
   1727          	DIR* dp				/* Directory object pointing the entry to be removed */
   1728          )
   1729          {
   \                     dir_remove: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB081             SUB      SP,SP,#+4
   1730          	FRESULT res;
   1731          #if _USE_LFN	/* LFN configuration */
   1732          	UINT i;
   1733          
   1734          	i = dp->index;	/* SFN index */
   1735          	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
   1736          	if (res == FR_OK) {
   1737          		do {
   1738          			res = move_window(dp->fs, dp->sect);
   1739          			if (res != FR_OK) break;
   1740          			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
   1741          			*dp->dir = DDEM;
   1742          			dp->fs->wflag = 1;
   1743          			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
   1744          			res = dir_next(dp, 0);		/* Next entry */
   1745          		} while (res == FR_OK);
   1746          		if (res == FR_NO_FILE) res = FR_INT_ERR;
   1747          	}
   1748          
   1749          #else			/* Non LFN configuration */
   1750          	res = dir_sdi(dp, dp->index);
   \   00000006   0xF8B4 0x1206      LDRH     R1,[R4, #+518]
   \   0000000A   0x.... 0x....      BL       dir_sdi
   \   0000000E   0x0005             MOVS     R5,R0
   1751          	if (res == FR_OK) {
   \   00000010   0xD115             BNE.N    ??dir_remove_0
   1752          		res = move_window(dp->fs, dp->sect);
   \   00000012   0xF8D4 0x1210      LDR      R1,[R4, #+528]
   \   00000016   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   0000001A   0x.... 0x....      BL       move_window
   \   0000001E   0x0005             MOVS     R5,R0
   1753          		if (res == FR_OK) {
   \   00000020   0xD10D             BNE.N    ??dir_remove_0
   1754          			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
   \   00000022   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   00000026   0x2120             MOVS     R1,#+32
   \   00000028   0x.... 0x....      BL       __aeabi_memclr
   1755          			*dp->dir = DDEM;
   \   0000002C   0xF8D4 0x1214      LDR      R1,[R4, #+532]
   \   00000030   0x20E5             MOVS     R0,#+229
   \   00000032   0x7008             STRB     R0,[R1, #+0]
   1756          			dp->fs->wflag = 1;
   \   00000034   0xF8D4 0x1200      LDR      R1,[R4, #+512]
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xF881 0x0204      STRB     R0,[R1, #+516]
   1757          		}
   1758          	}
   1759          #endif
   1760          
   1761          	return res;
   \                     ??dir_remove_0: (+1)
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0xB001             ADD      SP,SP,#+4
   \   00000042   0xBD30             POP      {R4,R5,PC}       ;; return
   1762          }
   1763          #endif /* !_FS_READONLY */
   1764          
   1765          
   1766          
   1767          
   1768          /*-----------------------------------------------------------------------*/
   1769          /* Get file information from directory entry                             */
   1770          /*-----------------------------------------------------------------------*/
   1771          #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2

   \                                 In section .text, align 2, keep-with-next
   1772          static
   1773          void get_fileinfo (		/* No return code */
   1774          	DIR* dp,			/* Pointer to the directory object */
   1775          	FILINFO* fno	 	/* Pointer to the file information to be filled */
   1776          )
   1777          {
   \                     get_fileinfo: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   1778          	UINT i;
   1779          	TCHAR *p, c;
   1780          	BYTE *dir;
   1781          #if _USE_LFN
   1782          	WCHAR w, *lfn;
   1783          #endif
   1784          
   1785          	p = fno->fname;
   1786          	if (dp->sect) {		/* Get SFN */
   \   00000002   0xF8D0 0x3210      LDR      R3,[R0, #+528]
   \   00000006   0xF101 0x0209      ADD      R2,R1,#+9
   \   0000000A   0xB34B             CBZ.N    R3,??get_fileinfo_0
   1787          		dir = dp->dir;
   \   0000000C   0xF8D0 0x0214      LDR      R0,[R0, #+532]
   1788          		i = 0;
   \   00000010   0x2300             MOVS     R3,#+0
   1789          		while (i < 11) {		/* Copy name body and extension */
   1790          			c = (TCHAR)dir[i++];
   \                     ??get_fileinfo_1: (+1)
   \   00000012   0x5C1C             LDRB     R4,[R3, R0]
   \   00000014   0x1C5B             ADDS     R3,R3,#+1
   1791          			if (c == ' ') continue;				/* Skip padding spaces */
   \   00000016   0x2C20             CMP      R4,#+32
   \   00000018   0xD009             BEQ.N    ??get_fileinfo_2
   1792          			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
   \   0000001A   0x2C05             CMP      R4,#+5
   \   0000001C   0xBF08             IT       EQ 
   \   0000001E   0x24E5             MOVEQ    R4,#+229
   1793          			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
   \   00000020   0x2B09             CMP      R3,#+9
   \   00000022   0xBF04             ITT      EQ 
   \   00000024   0x252E             MOVEQ    R5,#+46
   \   00000026   0xF802 0x5B01      STRBEQ   R5,[R2], #+1
   1794          #if _USE_LFN
   1795          			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
   1796          				c += 0x20;			/* To lower */
   1797          #if _LFN_UNICODE
   1798          			if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dir[i]))
   1799          				c = c << 8 | dir[i++];
   1800          			c = ff_convert(c, 1);	/* OEM -> Unicode */
   1801          			if (!c) c = '?';
   1802          #endif
   1803          #endif
   1804          			*p++ = c;
   \   0000002A   0xF802 0x4B01      STRB     R4,[R2], #+1
   1805          		}
   \                     ??get_fileinfo_2: (+1)
   \   0000002E   0x2B0B             CMP      R3,#+11
   \   00000030   0xD3EF             BCC.N    ??get_fileinfo_1
   1806          		fno->fattrib = dir[DIR_Attr];				/* Attribute */
   \   00000032   0x7AC3             LDRB     R3,[R0, #+11]
   \   00000034   0x720B             STRB     R3,[R1, #+8]
   1807          		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
   \   00000036   0x7F84             LDRB     R4,[R0, #+30]
   \   00000038   0x7FC3             LDRB     R3,[R0, #+31]
   \   0000003A   0x0424             LSLS     R4,R4,#+16
   \   0000003C   0xEA44 0x6303      ORR      R3,R4,R3, LSL #+24
   \   00000040   0x7F44             LDRB     R4,[R0, #+29]
   \   00000042   0xEA43 0x2304      ORR      R3,R3,R4, LSL #+8
   \   00000046   0x7F04             LDRB     R4,[R0, #+28]
   \   00000048   0x4323             ORRS     R3,R4,R3
   \   0000004A   0x600B             STR      R3,[R1, #+0]
   1808          		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
   \   0000004C   0x7E43             LDRB     R3,[R0, #+25]
   \   0000004E   0x7E04             LDRB     R4,[R0, #+24]
   \   00000050   0xEA44 0x2303      ORR      R3,R4,R3, LSL #+8
   \   00000054   0x808B             STRH     R3,[R1, #+4]
   1809          		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
   \   00000056   0x7DC3             LDRB     R3,[R0, #+23]
   \   00000058   0x7D80             LDRB     R0,[R0, #+22]
   \   0000005A   0xEA40 0x2003      ORR      R0,R0,R3, LSL #+8
   \   0000005E   0x80C8             STRH     R0,[R1, #+6]
   1810          	}
   1811          	*p = 0;		/* Terminate SFN string by a \0 */
   \                     ??get_fileinfo_0: (+1)
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x7010             STRB     R0,[R2, #+0]
   1812          
   1813          #if _USE_LFN
   1814          	if (fno->lfname) {
   1815          		i = 0; p = fno->lfname;
   1816          		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
   1817          			lfn = dp->lfn;
   1818          			while ((w = *lfn++) != 0) {		/* Get an LFN character */
   1819          #if !_LFN_UNICODE
   1820          				w = ff_convert(w, 0);		/* Unicode -> OEM */
   1821          				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
   1822          				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
   1823          					p[i++] = (TCHAR)(w >> 8);
   1824          #endif
   1825          				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
   1826          				p[i++] = (TCHAR)w;
   1827          			}
   1828          		}
   1829          		p[i] = 0;	/* Terminate LFN string by a \0 */
   1830          	}
   1831          #endif
   1832          }
   \   00000064   0xBC30             POP      {R4,R5}
   \   00000066   0x4770             BX       LR               ;; return
   1833          #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
   1834          
   1835          
   1836          
   1837          
   1838          /*-----------------------------------------------------------------------*/
   1839          /* Pattern matching                                                      */
   1840          /*-----------------------------------------------------------------------*/
   1841          #if _USE_FIND && _FS_MINIMIZE <= 1
   1842          static
   1843          WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
   1844          	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
   1845          )
   1846          {
   1847          	WCHAR chr;
   1848          
   1849          #if !_LFN_UNICODE
   1850          	chr = (BYTE)*(*ptr)++;					/* Get a byte */
   1851          	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
   1852          	if (IsDBCS1(chr) && IsDBCS2(**ptr))		/* Get DBC 2nd byte if needed */
   1853          		chr = chr << 8 | (BYTE)*(*ptr)++;
   1854          #ifdef _EXCVT
   1855          	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
   1856          #endif
   1857          #else
   1858          	chr = ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
   1859          #endif
   1860          	return chr;
   1861          }
   1862          
   1863          
   1864          static
   1865          int pattern_matching (	/* Return value: 0:mismatched, 1:matched */
   1866          	const TCHAR* pat,	/* Matching pattern */
   1867          	const TCHAR* nam,	/* String to be tested */
   1868          	int skip,			/* Number of pre-skip chars (number of ?s) */
   1869          	int inf				/* Infinite search (* specified) */
   1870          )
   1871          {
   1872          	const TCHAR *pp, *np;
   1873          	WCHAR pc, nc;
   1874          	int nm, nx;
   1875          
   1876          
   1877          	while (skip--) {				/* Pre-skip name chars */
   1878          		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
   1879          	}
   1880          	if (!*pat && inf) return 1;		/* (short circuit) */
   1881          
   1882          	do {
   1883          		pp = pat; np = nam;			/* Top of pattern and name to match */
   1884          		for (;;) {
   1885          			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
   1886          				nm = nx = 0;
   1887          				do {				/* Analyze the wildcard chars */
   1888          					if (*pp++ == '?') nm++; else nx = 1;
   1889          				} while (*pp == '?' || *pp == '*');
   1890          				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
   1891          				nc = *np; break;	/* Branch mismatched */
   1892          			}
   1893          			pc = get_achar(&pp);	/* Get a pattern char */
   1894          			nc = get_achar(&np);	/* Get a name char */
   1895          			if (pc != nc) break;	/* Branch mismatched? */
   1896          			if (!pc) return 1;		/* Branch matched? (matched at end of both strings) */
   1897          		}
   1898          		get_achar(&nam);			/* nam++ */
   1899          	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
   1900          
   1901          	return 0;
   1902          }
   1903          #endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
   1904          
   1905          
   1906          
   1907          
   1908          /*-----------------------------------------------------------------------*/
   1909          /* Pick a segment and create the object name in directory form           */
   1910          /*-----------------------------------------------------------------------*/
   1911          

   \                                 In section .text, align 4, keep-with-next
   1912          static
   1913          FRESULT create_name (
   1914          	DIR* dp,			/* Pointer to the directory object */
   1915          	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
   1916          )
   1917          {
   \                     create_name: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x460C             MOV      R4,R1
   1918          #if _USE_LFN	/* LFN configuration */
   1919          	BYTE b, cf;
   1920          	WCHAR w, *lfn;
   1921          	UINT i, ni, si, di;
   1922          	const TCHAR *p;
   1923          
   1924          	/* Create LFN in Unicode */
   1925          	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   1926          	lfn = dp->lfn;
   1927          	si = di = 0;
   1928          	for (;;) {
   1929          		w = p[si++];					/* Get a character */
   1930          		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1931          		if (di >= _MAX_LFN)				/* Reject too long name */
   1932          			return FR_INVALID_NAME;
   1933          #if !_LFN_UNICODE
   1934          		w &= 0xFF;
   1935          		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
   1936          #if _DF1S
   1937          			b = (BYTE)p[si++];			/* Get 2nd byte */
   1938          			w = (w << 8) + b;			/* Create a DBC */
   1939          			if (!IsDBCS2(b))
   1940          				return FR_INVALID_NAME;	/* Reject invalid sequence */
   1941          #endif
   1942          		}
   1943          		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   1944          		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   1945          #endif
   1946          		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
   1947          			return FR_INVALID_NAME;
   1948          		lfn[di++] = w;					/* Store the Unicode character */
   1949          	}
   1950          	*path = &p[si];						/* Return pointer to the next segment */
   1951          	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1952          #if _FS_RPATH
   1953          	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
   1954          		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
   1955          		lfn[di] = 0;
   1956          		for (i = 0; i < 11; i++)
   1957          			dp->fn[i] = (i < di) ? '.' : ' ';
   1958          		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
   1959          		return FR_OK;
   1960          	}
   1961          #endif
   1962          	while (di) {						/* Strip trailing spaces and dots */
   1963          		w = lfn[di - 1];
   1964          		if (w != ' ' && w != '.') break;
   1965          		di--;
   1966          	}
   1967          	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   1968          
   1969          	lfn[di] = 0;						/* LFN is created */
   1970          
   1971          	/* Create SFN in directory form */
   1972          	mem_set(dp->fn, ' ', 11);
   1973          	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   1974          	if (si) cf |= NS_LOSS | NS_LFN;
   1975          	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   1976          
   1977          	b = i = 0; ni = 8;
   1978          	for (;;) {
   1979          		w = lfn[si++];					/* Get an LFN character */
   1980          		if (!w) break;					/* Break on end of the LFN */
   1981          		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   1982          			cf |= NS_LOSS | NS_LFN; continue;
   1983          		}
   1984          
   1985          		if (i >= ni || si == di) {		/* Extension or end of SFN */
   1986          			if (ni == 11) {				/* Long extension */
   1987          				cf |= NS_LOSS | NS_LFN; break;
   1988          			}
   1989          			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   1990          			if (si > di) break;			/* No extension */
   1991          			si = di; i = 8; ni = 11;	/* Enter extension section */
   1992          			b <<= 2; continue;
   1993          		}
   1994          
   1995          		if (w >= 0x80) {				/* Non ASCII character */
   1996          #ifdef _EXCVT
   1997          			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   1998          			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
   1999          #else
   2000          			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
   2001          #endif
   2002          			cf |= NS_LFN;				/* Force create LFN entry */
   2003          		}
   2004          
   2005          		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
   2006          			if (i >= ni - 1) {
   2007          				cf |= NS_LOSS | NS_LFN; i = ni; continue;
   2008          			}
   2009          			dp->fn[i++] = (BYTE)(w >> 8);
   2010          		} else {						/* SBC */
   2011          			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
   2012          				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2013          			} else {
   2014          				if (IsUpper(w)) {		/* ASCII large capital */
   2015          					b |= 2;
   2016          				} else {
   2017          					if (IsLower(w)) {	/* ASCII small capital */
   2018          						b |= 1; w -= 0x20;
   2019          					}
   2020          				}
   2021          			}
   2022          		}
   2023          		dp->fn[i++] = (BYTE)w;
   2024          	}
   2025          
   2026          	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
   2027          
   2028          	if (ni == 8) b <<= 2;
   2029          	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2030          		cf |= NS_LFN;
   2031          	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
   2032          		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2033          		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2034          	}
   2035          
   2036          	dp->fn[NSFLAG] = cf;	/* SFN is created */
   2037          
   2038          	return FR_OK;
   2039          
   2040          
   2041          #else	/* Non-LFN configuration */
   2042          	BYTE b, c, d, *sfn;
   2043          	UINT ni, si, i;
   2044          	const char *p;
   2045          
   2046          	/* Create file name in directory form */
   2047          	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   \   00000006   0x6825             LDR      R5,[R4, #+0]
   \   00000008   0xE000             B.N      ??create_name_0
   \                     ??create_name_1: (+1)
   \   0000000A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??create_name_0: (+1)
   \   0000000C   0x7829             LDRB     R1,[R5, #+0]
   \   0000000E   0x292F             CMP      R1,#+47
   \   00000010   0xBF18             IT       NE 
   \   00000012   0x295C             CMPNE    R1,#+92
   \   00000014   0xD0F9             BEQ.N    ??create_name_1
   2048          	sfn = dp->fn;
   \   00000016   0xF8D0 0x6218      LDR      R6,[R0, #+536]
   2049          	mem_set(sfn, ' ', 11);
   \   0000001A   0x2220             MOVS     R2,#+32
   \   0000001C   0x210B             MOVS     R1,#+11
   2050          	si = i = b = 0; ni = 8;
   \   0000001E   0x.... 0x....      ADR.W    R8,?_0
   \   00000022   0x4630             MOV      R0,R6
   \   00000024   0x.... 0x....      BL       __aeabi_memset
   \   00000028   0x2200             MOVS     R2,#+0
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x2300             MOVS     R3,#+0
   \   0000002E   0x2108             MOVS     R1,#+8
   \   00000030   0x.... 0x....      ADR.W    R12,ExCvt
   \   00000034   0xE005             B.N      ??create_name_2
   2051          #if _FS_RPATH
   2052          	if (p[si] == '.') { /* Is this a dot entry? */
   2053          		for (;;) {
   2054          			c = (BYTE)p[si++];
   2055          			if (c != '.' || si >= 3) break;
   2056          			sfn[i++] = c;
   2057          		}
   2058          		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
   2059          		*path = &p[si];									/* Return pointer to the next segment */
   2060          		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
   2061          		return FR_OK;
   2062          	}
   2063          #endif
   2064          	for (;;) {
   2065          		c = (BYTE)p[si++];
   2066          		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
   2067          		if (c == '.' || i >= ni) {
   2068          			if (ni != 8 || c != '.') return FR_INVALID_NAME;
   \                     ??create_name_3: (+1)
   \   00000036   0x2908             CMP      R1,#+8
   \   00000038   0xD14F             BNE.N    ??create_name_4
   2069          			i = 8; ni = 11;
   2070          			b <<= 2; continue;
   \   0000003A   0x0692             LSLS     R2,R2,#+26
   \   0000003C   0x2008             MOVS     R0,#+8
   \   0000003E   0x210B             MOVS     R1,#+11
   \   00000040   0x0E12             LSRS     R2,R2,#+24
   2071          		}
   \                     ??create_name_2: (+1)
   \   00000042   0xF813 0xE005      LDRB     LR,[R3, R5]
   \   00000046   0x1C5B             ADDS     R3,R3,#+1
   \   00000048   0xF1BE 0x0F21      CMP      LR,#+33
   \   0000004C   0xDB05             BLT.N    ??create_name_5
   \   0000004E   0xF1BE 0x0F2F      CMP      LR,#+47
   \   00000052   0xBF18             IT       NE 
   \   00000054   0xF1BE 0x0F5C      CMPNE    LR,#+92
   \   00000058   0xD109             BNE.N    ??create_name_6
   2072          		if (c >= 0x80) {				/* Extended character? */
   2073          			b |= 3;						/* Eliminate NT flag */
   2074          #ifdef _EXCVT
   2075          			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
   2076          #else
   2077          #if !_DF1S
   2078          			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
   2079          #endif
   2080          #endif
   2081          		}
   2082          		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
   2083          			d = (BYTE)p[si++];			/* Get 2nd byte */
   2084          			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
   2085          				return FR_INVALID_NAME;
   2086          			sfn[i++] = c;
   2087          			sfn[i++] = d;
   2088          		} else {						/* SBC */
   2089          			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
   2090          				return FR_INVALID_NAME;
   2091          			if (IsUpper(c)) {			/* ASCII large capital? */
   2092          				b |= 2;
   2093          			} else {
   2094          				if (IsLower(c)) {		/* ASCII small capital? */
   2095          					b |= 1; c -= 0x20;
   2096          				}
   2097          			}
   2098          			sfn[i++] = c;
   2099          		}
   2100          	}
   2101          	*path = &p[si];						/* Return pointer to the next segment */
   \                     ??create_name_5: (+1)
   \   0000005A   0x195B             ADDS     R3,R3,R5
   2102          	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   \   0000005C   0xF1BE 0x0F21      CMP      LR,#+33
   \   00000060   0x6023             STR      R3,[R4, #+0]
   \   00000062   0xBFB4             ITE      LT 
   \   00000064   0xF04F 0x0E04      MOVLT    LR,#+4
   \   00000068   0xF04F 0x0E00      MOVGE    LR,#+0
   \   0000006C   0xE034             B.N      ??create_name_7
   \                     ??create_name_6: (+1)
   \   0000006E   0xF1BE 0x0F2E      CMP      LR,#+46
   \   00000072   0xD0E0             BEQ.N    ??create_name_3
   \   00000074   0x4288             CMP      R0,R1
   \   00000076   0xD230             BCS.N    ??create_name_4
   \   00000078   0xF1BE 0x0F80      CMP      LR,#+128
   \   0000007C   0xDB04             BLT.N    ??create_name_8
   \   0000007E   0x44E6             ADD      LR,LR,R12
   \   00000080   0xF042 0x0203      ORR      R2,R2,#0x3
   \   00000084   0xF81E 0xEC80      LDRB     LR,[LR, #-128]
   \                     ??create_name_8: (+1)
   \   00000088   0x46C1             MOV      R9,R8
   \   0000008A   0xE001             B.N      ??create_name_9
   \                     ??create_name_10: (+1)
   \   0000008C   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??create_name_9: (+1)
   \   00000090   0xF899 0xA000      LDRB     R10,[R9, #+0]
   \   00000094   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000098   0xBF18             IT       NE 
   \   0000009A   0x45F2             CMPNE    R10,LR
   \   0000009C   0xD1F6             BNE.N    ??create_name_10
   \   0000009E   0xEA5F 0x070A      MOVS     R7,R10
   \   000000A2   0xD11A             BNE.N    ??create_name_4
   \   000000A4   0xF1AE 0x0741      SUB      R7,LR,#+65
   \   000000A8   0x2F1A             CMP      R7,#+26
   \   000000AA   0xD206             BCS.N    ??create_name_11
   \   000000AC   0xF042 0x0202      ORR      R2,R2,#0x2
   \   000000B0   0xF800 0xE006      STRB     LR,[R0, R6]
   \   000000B4   0xB2D2             UXTB     R2,R2
   \   000000B6   0x1C40             ADDS     R0,R0,#+1
   \   000000B8   0xE7C3             B.N      ??create_name_2
   \                     ??create_name_11: (+1)
   \   000000BA   0xF1AE 0x0761      SUB      R7,LR,#+97
   \   000000BE   0x2F1A             CMP      R7,#+26
   \   000000C0   0xD206             BCS.N    ??create_name_12
   \   000000C2   0xF042 0x0201      ORR      R2,R2,#0x1
   \   000000C6   0xF1AE 0x0E20      SUB      LR,LR,#+32
   \   000000CA   0xB2D2             UXTB     R2,R2
   \   000000CC   0xFA5F 0xFE8E      UXTB     LR,LR
   \                     ??create_name_12: (+1)
   \   000000D0   0xF800 0xE006      STRB     LR,[R0, R6]
   \   000000D4   0x1C40             ADDS     R0,R0,#+1
   \   000000D6   0xE7B4             B.N      ??create_name_2
   2103          
   2104          	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   \                     ??create_name_7: (+1)
   \   000000D8   0xB910             CBNZ.N   R0,??create_name_13
   \                     ??create_name_4: (+1)
   \   000000DA   0x2006             MOVS     R0,#+6
   \   000000DC   0xE8BD 0x87F0      POP      {R4-R10,PC}
   2105          	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
   \                     ??create_name_13: (+1)
   \   000000E0   0x7830             LDRB     R0,[R6, #+0]
   \   000000E2   0x28E5             CMP      R0,#+229
   \   000000E4   0xBF04             ITT      EQ 
   \   000000E6   0x2005             MOVEQ    R0,#+5
   \   000000E8   0x7030             STRBEQ   R0,[R6, #+0]
   2106          
   2107          	if (ni == 8) b <<= 2;
   \   000000EA   0x2908             CMP      R1,#+8
   \   000000EC   0xBF08             IT       EQ 
   \   000000EE   0x0092             LSLEQ    R2,R2,#+2
   2108          	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
   \   000000F0   0xF002 0x0003      AND      R0,R2,#0x3
   \   000000F4   0x2801             CMP      R0,#+1
   2109          	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
   \   000000F6   0xF002 0x000C      AND      R0,R2,#0xC
   \   000000FA   0xBF08             IT       EQ 
   \   000000FC   0xF04E 0x0E10      ORREQ    LR,LR,#0x10
   \   00000100   0x2804             CMP      R0,#+4
   \   00000102   0xBF08             IT       EQ 
   \   00000104   0xF04E 0x0E08      ORREQ    LR,LR,#0x8
   2110          
   2111          	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
   \   00000108   0xF886 0xE00B      STRB     LR,[R6, #+11]
   2112          
   2113          	return FR_OK;
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   2114          #endif
   2115          }
   2116          
   2117          
   2118          
   2119          
   2120          /*-----------------------------------------------------------------------*/
   2121          /* Follow a file path                                                    */
   2122          /*-----------------------------------------------------------------------*/
   2123          

   \                                 In section .text, align 4, keep-with-next
   2124          static
   2125          FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
   2126          	DIR* dp,			/* Directory object to return last directory and found object */
   2127          	const TCHAR* path	/* Full-path string to find a file or directory */
   2128          )
   2129          {
   \                     follow_path: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   2130          	FRESULT res;
   2131          	BYTE *dir, ns;
   2132          
   2133          
   2134          #if _FS_RPATH
   2135          	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
   2136          		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
   2137          	} else {								/* No heading separator */
   2138          		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
   2139          	}
   2140          #else
   2141          	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
   \   00000004   0x7808             LDRB     R0,[R1, #+0]
   \   00000006   0x282F             CMP      R0,#+47
   \   00000008   0xBF12             ITEE     NE 
   \   0000000A   0x285C             CMPNE    R0,#+92
   \   0000000C   0x1C48             ADDEQ    R0,R1,#+1
   \   0000000E   0x9000             STREQ    R0,[SP, #+0]
   2142          		path++;
   2143          	dp->sclust = 0;							/* Always start from the root directory */
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF8C4 0x0208      STR      R0,[R4, #+520]
   2144          #endif
   2145          
   2146          	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
   \   00000016   0x9800             LDR      R0,[SP, #+0]
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2820             CMP      R0,#+32
   \   0000001C   0xD21C             BCS.N    ??follow_path_0
   2147          		res = dir_sdi(dp, 0);
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       dir_sdi
   \   00000026   0x4605             MOV      R5,R0
   2148          		dp->dir = 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xF8C4 0x0214      STR      R0,[R4, #+532]
   2149          	} else {								/* Follow path */
   2150          		for (;;) {
   2151          			res = create_name(dp, &path);	/* Get a segment name of the path */
   2152          			if (res != FR_OK) break;
   2153          			res = dir_find(dp);				/* Find an object with the sagment name */
   2154          			ns = dp->fn[NSFLAG];
   2155          			if (res != FR_OK) {				/* Failed to find the object */
   2156          				if (res == FR_NO_FILE) {	/* Object is not found */
   2157          					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
   2158          						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
   2159          						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
   2160          						res = FR_OK;					/* Ended at the root directroy. Function completed. */
   2161          					} else {							/* Could not find the object */
   2162          						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
   2163          					}
   2164          				}
   2165          				break;
   2166          			}
   2167          			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
   2168          			dir = dp->dir;						/* Follow the sub-directory */
   2169          			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
   2170          				res = FR_NO_PATH; break;
   2171          			}
   2172          			dp->sclust = ld_clust(dp->fs, dir);
   2173          		}
   2174          	}
   2175          
   2176          	return res;
   \   0000002E   0x4628             MOV      R0,R5
   \   00000030   0xB001             ADD      SP,SP,#+4
   \   00000032   0xBDF0             POP      {R4-R7,PC}
   \                     ??follow_path_1: (+1)
   \   00000034   0x7EC8             LDRB     R0,[R1, #+27]
   \   00000036   0x7E8A             LDRB     R2,[R1, #+26]
   \   00000038   0xEA42 0x2000      ORR      R0,R2,R0, LSL #+8
   \   0000003C   0xF8D4 0x2200      LDR      R2,[R4, #+512]
   \   00000040   0xF892 0x2200      LDRB     R2,[R2, #+512]
   \   00000044   0x2A03             CMP      R2,#+3
   \   00000046   0xD105             BNE.N    ??follow_path_2
   \   00000048   0x7D4A             LDRB     R2,[R1, #+21]
   \   0000004A   0x7D09             LDRB     R1,[R1, #+20]
   \   0000004C   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000050   0xEA40 0x4001      ORR      R0,R0,R1, LSL #+16
   \                     ??follow_path_2: (+1)
   \   00000054   0xF8C4 0x0208      STR      R0,[R4, #+520]
   \                     ??follow_path_0: (+1)
   \   00000058   0x4669             MOV      R1,SP
   \   0000005A   0x4620             MOV      R0,R4
   \   0000005C   0x.... 0x....      BL       create_name
   \   00000060   0x0005             MOVS     R5,R0
   \   00000062   0xF040 0x80D9      BNE.W    ??follow_path_3
   \   00000066   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   \   0000006A   0x2500             MOVS     R5,#+0
   \   0000006C   0xF8A4 0x5206      STRH     R5,[R4, #+518]
   \   00000070   0x2801             CMP      R0,#+1
   \   00000072   0xD043             BEQ.N    ??follow_path_4
   \   00000074   0xF8D4 0x1200      LDR      R1,[R4, #+512]
   \   00000078   0xF8D1 0x2214      LDR      R2,[R1, #+532]
   \   0000007C   0x4290             CMP      R0,R2
   \   0000007E   0xD23D             BCS.N    ??follow_path_4
   \   00000080   0xB928             CBNZ.N   R0,??follow_path_5
   \   00000082   0xF891 0x2200      LDRB     R2,[R1, #+512]
   \   00000086   0x2A03             CMP      R2,#+3
   \   00000088   0xD102             BNE.N    ??follow_path_6
   \   0000008A   0xF8D1 0x0224      LDR      R0,[R1, #+548]
   \                     ??follow_path_5: (+1)
   \   0000008E   0xB928             CBNZ.N   R0,??follow_path_7
   \                     ??follow_path_6: (+1)
   \   00000090   0xF8B1 0x2208      LDRH     R2,[R1, #+520]
   \   00000094   0xB392             CBZ.N    R2,??follow_path_4
   \   00000096   0xF8D1 0x1224      LDR      R1,[R1, #+548]
   \   0000009A   0xE027             B.N      ??follow_path_8
   \                     ??follow_path_7: (+1)
   \   0000009C   0xF891 0x1202      LDRB     R1,[R1, #+514]
   \   000000A0   0x010E             LSLS     R6,R1,#+4
   \   000000A2   0xE008             B.N      ??follow_path_9
   \                     ??follow_path_10: (+1)
   \   000000A4   0x2802             CMP      R0,#+2
   \   000000A6   0xD329             BCC.N    ??follow_path_4
   \   000000A8   0xF8D4 0x1200      LDR      R1,[R4, #+512]
   \   000000AC   0xF8D1 0x1214      LDR      R1,[R1, #+532]
   \   000000B0   0x4288             CMP      R0,R1
   \   000000B2   0xD223             BCS.N    ??follow_path_4
   \   000000B4   0x1BAD             SUBS     R5,R5,R6
   \                     ??follow_path_9: (+1)
   \   000000B6   0x42B5             CMP      R5,R6
   \   000000B8   0xD309             BCC.N    ??follow_path_11
   \   000000BA   0x4601             MOV      R1,R0
   \   000000BC   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   000000C0   0x.... 0x....      BL       get_fat
   \   000000C4   0xF110 0x0F01      CMN      R0,#+1
   \   000000C8   0xD1EC             BNE.N    ??follow_path_10
   \                     ??follow_path_12: (+1)
   \   000000CA   0x2501             MOVS     R5,#+1
   \   000000CC   0xE06E             B.N      ??follow_path_13
   \                     ??follow_path_11: (+1)
   \   000000CE   0xF8D4 0x1200      LDR      R1,[R4, #+512]
   \   000000D2   0x1E82             SUBS     R2,R0,#+2
   \   000000D4   0xF8D1 0x3214      LDR      R3,[R1, #+532]
   \   000000D8   0x1E9B             SUBS     R3,R3,#+2
   \   000000DA   0x429A             CMP      R2,R3
   \   000000DC   0xBF2F             ITEEE    CS 
   \   000000DE   0x2100             MOVCS    R1,#+0
   \   000000E0   0xF891 0x3202      LDRBCC   R3,[R1, #+514]
   \   000000E4   0xF8D1 0x1228      LDRCC    R1,[R1, #+552]
   \   000000E8   0xFB03 0x1102      MLACC    R1,R3,R2,R1
   \                     ??follow_path_8: (+1)
   \   000000EC   0xF8C4 0x020C      STR      R0,[R4, #+524]
   \   000000F0   0xB121             CBZ.N    R1,??follow_path_4
   \   000000F2   0xEB01 0x1015      ADD      R0,R1,R5, LSR #+4
   \   000000F6   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \   000000FA   0xE005             B.N      ??follow_path_14
   \                     ??follow_path_4: (+1)
   \   000000FC   0x2502             MOVS     R5,#+2
   \   000000FE   0xE055             B.N      ??follow_path_13
   \                     ??follow_path_15: (+1)
   \   00000100   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \                     ??follow_path_16: (+1)
   \   00000104   0xF8A4 0x5206      STRH     R5,[R4, #+518]
   \                     ??follow_path_14: (+1)
   \   00000108   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   0000010C   0xF005 0x010F      AND      R1,R5,#0xF
   \   00000110   0xF8D4 0x7200      LDR      R7,[R4, #+512]
   \   00000114   0xF8D4 0x6210      LDR      R6,[R4, #+528]
   \   00000118   0xEB00 0x1041      ADD      R0,R0,R1, LSL #+5
   \   0000011C   0x2500             MOVS     R5,#+0
   \   0000011E   0xF8C4 0x0214      STR      R0,[R4, #+532]
   \   00000122   0xF8D7 0x022C      LDR      R0,[R7, #+556]
   \   00000126   0x4286             CMP      R6,R0
   \   00000128   0xD011             BEQ.N    ??follow_path_17
   \   0000012A   0x4638             MOV      R0,R7
   \   0000012C   0x.... 0x....      BL       sync_window
   \   00000130   0x0005             MOVS     R5,R0
   \   00000132   0xD10C             BNE.N    ??follow_path_17
   \   00000134   0xF897 0x0201      LDRB     R0,[R7, #+513]
   \   00000138   0x2301             MOVS     R3,#+1
   \   0000013A   0x4632             MOV      R2,R6
   \   0000013C   0x4639             MOV      R1,R7
   \   0000013E   0x.... 0x....      BL       disk_read
   \   00000142   0xB110             CBZ.N    R0,??follow_path_18
   \   00000144   0xF04F 0x36FF      MOV      R6,#-1
   \   00000148   0x2501             MOVS     R5,#+1
   \                     ??follow_path_18: (+1)
   \   0000014A   0xF8C7 0x622C      STR      R6,[R7, #+556]
   \                     ??follow_path_17: (+1)
   \   0000014E   0xBB6D             CBNZ.N   R5,??follow_path_13
   \   00000150   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   00000154   0x7801             LDRB     R1,[R0, #+0]
   \   00000156   0xB341             CBZ.N    R1,??follow_path_19
   \   00000158   0x7AC1             LDRB     R1,[R0, #+11]
   \   0000015A   0x0709             LSLS     R1,R1,#+28
   \   0000015C   0xD40D             BMI.N    ??follow_path_20
   \   0000015E   0x210B             MOVS     R1,#+11
   \   00000160   0xF8D4 0x2218      LDR      R2,[R4, #+536]
   \   00000164   0x2300             MOVS     R3,#+0
   \                     ??follow_path_21: (+1)
   \   00000166   0x460E             MOV      R6,R1
   \   00000168   0x1E71             SUBS     R1,R6,#+1
   \   0000016A   0xB12E             CBZ.N    R6,??follow_path_22
   \   0000016C   0xF810 0x3B01      LDRB     R3,[R0], #+1
   \   00000170   0xF812 0x6B01      LDRB     R6,[R2], #+1
   \   00000174   0x1B9B             SUBS     R3,R3,R6
   \   00000176   0xD0F6             BEQ.N    ??follow_path_21
   \                     ??follow_path_22: (+1)
   \   00000178   0xB1C3             CBZ.N    R3,??follow_path_13
   \                     ??follow_path_20: (+1)
   \   0000017A   0xF8B4 0x0206      LDRH     R0,[R4, #+518]
   \   0000017E   0x1C45             ADDS     R5,R0,#+1
   \   00000180   0x0428             LSLS     R0,R5,#+16
   \   00000182   0xBF1C             ITT      NE 
   \   00000184   0xF8D4 0x0210      LDRNE    R0,[R4, #+528]
   \   00000188   0x2800             CMPNE    R0,#+0
   \   0000018A   0xD00E             BEQ.N    ??follow_path_19
   \   0000018C   0xF015 0x0F0F      TST      R5,#0xF
   \   00000190   0xD1B8             BNE.N    ??follow_path_16
   \   00000192   0x1C40             ADDS     R0,R0,#+1
   \   00000194   0xF8D4 0x120C      LDR      R1,[R4, #+524]
   \   00000198   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \   0000019C   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   000001A0   0xB969             CBNZ.N   R1,??follow_path_23
   \   000001A2   0xF8B0 0x0208      LDRH     R0,[R0, #+520]
   \   000001A6   0x4285             CMP      R5,R0
   \   000001A8   0xD3AC             BCC.N    ??follow_path_16
   \                     ??follow_path_19: (+1)
   \   000001AA   0x2504             MOVS     R5,#+4
   \                     ??follow_path_13: (+1)
   \   000001AC   0xF8D4 0x0218      LDR      R0,[R4, #+536]
   \   000001B0   0x7AC0             LDRB     R0,[R0, #+11]
   \   000001B2   0xB345             CBZ.N    R5,??follow_path_24
   \   000001B4   0x2D04             CMP      R5,#+4
   \   000001B6   0xD12F             BNE.N    ??follow_path_3
   \   000001B8   0x0740             LSLS     R0,R0,#+29
   \   000001BA   0xD42D             BMI.N    ??follow_path_3
   \   000001BC   0xE02B             B.N      ??follow_path_25
   \                     ??follow_path_23: (+1)
   \   000001BE   0xF890 0x2202      LDRB     R2,[R0, #+514]
   \   000001C2   0x1E52             SUBS     R2,R2,#+1
   \   000001C4   0xEA12 0x1F15      TST      R2,R5, LSR #+4
   \   000001C8   0xD19C             BNE.N    ??follow_path_16
   \   000001CA   0x.... 0x....      BL       get_fat
   \   000001CE   0x2802             CMP      R0,#+2
   \   000001D0   0xD394             BCC.N    ??follow_path_4
   \   000001D2   0xF110 0x0F01      CMN      R0,#+1
   \   000001D6   0xF43F 0xAF78      BEQ.W    ??follow_path_12
   \   000001DA   0xF8D4 0x1200      LDR      R1,[R4, #+512]
   \   000001DE   0xF8D1 0x2214      LDR      R2,[R1, #+532]
   \   000001E2   0x4290             CMP      R0,R2
   \   000001E4   0xD2E1             BCS.N    ??follow_path_19
   \   000001E6   0xF8C4 0x020C      STR      R0,[R4, #+524]
   \   000001EA   0xF8D1 0x2214      LDR      R2,[R1, #+532]
   \   000001EE   0x1E80             SUBS     R0,R0,#+2
   \   000001F0   0x1E92             SUBS     R2,R2,#+2
   \   000001F2   0x4290             CMP      R0,R2
   \   000001F4   0xBF2F             ITEEE    CS 
   \   000001F6   0x2000             MOVCS    R0,#+0
   \   000001F8   0xF891 0x2202      LDRBCC   R2,[R1, #+514]
   \   000001FC   0xF8D1 0x1228      LDRCC    R1,[R1, #+552]
   \   00000200   0xFB02 0x1000      MLACC    R0,R2,R0,R1
   \   00000204   0xE77C             B.N      ??follow_path_15
   \                     ??follow_path_24: (+1)
   \   00000206   0x0740             LSLS     R0,R0,#+29
   \   00000208   0xD406             BMI.N    ??follow_path_3
   \   0000020A   0xF8D4 0x1214      LDR      R1,[R4, #+532]
   \   0000020E   0x7AC8             LDRB     R0,[R1, #+11]
   \   00000210   0x06C0             LSLS     R0,R0,#+27
   \   00000212   0xF53F 0xAF0F      BMI.W    ??follow_path_1
   \                     ??follow_path_25: (+1)
   \   00000216   0x2505             MOVS     R5,#+5
   \                     ??follow_path_3: (+1)
   \   00000218   0x4628             MOV      R0,R5
   \   0000021A   0xB001             ADD      SP,SP,#+4
   \   0000021C   0xBDF0             POP      {R4-R7,PC}       ;; return
   2177          }
   2178          
   2179          
   2180          
   2181          
   2182          /*-----------------------------------------------------------------------*/
   2183          /* Get logical drive number from path name                               */
   2184          /*-----------------------------------------------------------------------*/
   2185          

   \                                 In section .text, align 2, keep-with-next
   2186          static
   2187          int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
   2188          	const TCHAR** path	/* Pointer to pointer to the path name */
   2189          )
   2190          {
   2191          	const TCHAR *tp, *tt;
   2192          	UINT i;
   2193          	int vol = -1;
   2194          #if _STR_VOLUME_ID		/* Find string drive id */
   2195          	static const char* const str[] = {_VOLUME_STRS};
   2196          	const char *sp;
   2197          	char c;
   2198          	TCHAR tc;
   2199          #endif
   2200          
   2201          
   2202          	if (*path) {	/* If the pointer is not a null */
   \                     get_ldnumber: (+1)
   \   00000000   0x6802             LDR      R2,[R0, #+0]
   \   00000002   0xF04F 0x31FF      MOV      R1,#-1
   \   00000006   0xB1FA             CBZ.N    R2,??get_ldnumber_0
   2203          		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
   \   00000008   0x4613             MOV      R3,R2
   \   0000000A   0xE000             B.N      ??get_ldnumber_1
   \                     ??get_ldnumber_2: (+1)
   \   0000000C   0x1C5B             ADDS     R3,R3,#+1
   \                     ??get_ldnumber_1: (+1)
   \   0000000E   0xF893 0xC000      LDRB     R12,[R3, #+0]
   \   00000012   0xF1BC 0x0F21      CMP      R12,#+33
   \   00000016   0xD302             BCC.N    ??get_ldnumber_3
   \   00000018   0xF1BC 0x0F3A      CMP      R12,#+58
   \   0000001C   0xD1F6             BNE.N    ??get_ldnumber_2
   2204          		if (*tt == ':') {	/* If a ':' is exist in the path name */
   \                     ??get_ldnumber_3: (+1)
   \   0000001E   0xF1BC 0x0F3A      CMP      R12,#+58
   \   00000022   0xD110             BNE.N    ??get_ldnumber_4
   2205          			tp = *path;
   2206          			i = *tp++ - '0'; 
   \   00000024   0xF812 0xCB01      LDRB     R12,[R2], #+1
   \   00000028   0xF1AC 0x0C30      SUB      R12,R12,#+48
   2207          			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
   \   0000002C   0xF1BC 0x0F0A      CMP      R12,#+10
   \   00000030   0xD20A             BCS.N    ??get_ldnumber_0
   \   00000032   0x429A             CMP      R2,R3
   \   00000034   0xBF08             IT       EQ 
   \   00000036   0xF1BC 0x0F00      CMPEQ    R12,#+0
   2208          				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
   \   0000003A   0xD105             BNE.N    ??get_ldnumber_0
   2209          					vol = (int)i;
   2210          					*path = ++tt;
   \   0000003C   0x1C5A             ADDS     R2,R3,#+1
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x6002             STR      R2,[R0, #+0]
   2211          				}
   2212          			}
   2213          #if _STR_VOLUME_ID
   2214          			 else {	/* No numeric drive number, find string drive id */
   2215          				i = 0; tt++;
   2216          				do {
   2217          					sp = str[i]; tp = *path;
   2218          					do {	/* Compare a string drive id with path name */
   2219          						c = *sp++; tc = *tp++;
   2220          						if (IsLower(tc)) tc -= 0x20;
   2221          					} while (c && (TCHAR)c == tc);
   2222          				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
   2223          				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
   2224          					vol = (int)i;
   2225          					*path = tt;
   2226          				}
   2227          			}
   2228          #endif
   2229          			return vol;
   2230          		}
   2231          #if _FS_RPATH && _VOLUMES >= 2
   2232          		vol = CurrVol;	/* Current drive */
   2233          #else
   2234          		vol = 0;		/* Drive 0 */
   2235          #endif
   2236          	}
   2237          	return vol;
   \   00000042   0x4608             MOV      R0,R1
   \   00000044   0x4770             BX       LR
   \                     ??get_ldnumber_4: (+1)
   \   00000046   0x2100             MOVS     R1,#+0
   \                     ??get_ldnumber_0: (+1)
   \   00000048   0x4608             MOV      R0,R1
   \   0000004A   0x4770             BX       LR               ;; return
   2238          }
   2239          
   2240          
   2241          
   2242          
   2243          /*-----------------------------------------------------------------------*/
   2244          /* Load a sector and check if it is an FAT boot sector                   */
   2245          /*-----------------------------------------------------------------------*/
   2246          

   \                                 In section .text, align 2, keep-with-next
   2247          static
   2248          BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
   2249          	FATFS* fs,	/* File system object */
   2250          	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
   2251          )
   2252          {
   \                     check_fs: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   2253          	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF884 0x0204      STRB     R0,[R4, #+516]
   \   0000000A   0xF04F 0x30FF      MOV      R0,#-1
   \   0000000E   0xF8C4 0x022C      STR      R0,[R4, #+556]
   2254          	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       move_window
   \   00000018   0xB108             CBZ.N    R0,??check_fs_0
   2255          		return 3;
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0xBD10             POP      {R4,PC}
   2256          
   2257          	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
   \                     ??check_fs_0: (+1)
   \   0000001E   0xF894 0x01FF      LDRB     R0,[R4, #+511]
   \   00000022   0xF894 0x11FE      LDRB     R1,[R4, #+510]
   \   00000026   0xEA41 0x2000      ORR      R0,R1,R0, LSL #+8
   \   0000002A   0xF64A 0x2155      MOVW     R1,#+43605
   \   0000002E   0x4288             CMP      R0,R1
   \   00000030   0xD001             BEQ.N    ??check_fs_1
   2258          		return 2;
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0xBD10             POP      {R4,PC}
   2259          
   2260          	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
   \                     ??check_fs_1: (+1)
   \   00000036   0xF894 0x2037      LDRB     R2,[R4, #+55]
   \   0000003A   0xF894 0x1038      LDRB     R1,[R4, #+56]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable13  ;; 0x544146
   \   00000042   0x0212             LSLS     R2,R2,#+8
   \   00000044   0xEA42 0x4101      ORR      R1,R2,R1, LSL #+16
   \   00000048   0xF894 0x2036      LDRB     R2,[R4, #+54]
   \   0000004C   0x4311             ORRS     R1,R2,R1
   \   0000004E   0x4281             CMP      R1,R0
   \   00000050   0xD00B             BEQ.N    ??check_fs_2
   2261          		return 0;
   2262          	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   \   00000052   0xF894 0x2053      LDRB     R2,[R4, #+83]
   \   00000056   0xF894 0x1054      LDRB     R1,[R4, #+84]
   \   0000005A   0x0212             LSLS     R2,R2,#+8
   \   0000005C   0xEA42 0x4101      ORR      R1,R2,R1, LSL #+16
   \   00000060   0xF894 0x2052      LDRB     R2,[R4, #+82]
   \   00000064   0x4311             ORRS     R1,R2,R1
   \   00000066   0x4281             CMP      R1,R0
   \   00000068   0xD101             BNE.N    ??check_fs_3
   2263          		return 0;
   \                     ??check_fs_2: (+1)
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xBD10             POP      {R4,PC}
   2264          
   2265          	return 1;
   \                     ??check_fs_3: (+1)
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0xBD10             POP      {R4,PC}          ;; return
   2266          }
   2267          
   2268          
   2269          
   2270          
   2271          /*-----------------------------------------------------------------------*/
   2272          /* Find logical drive and check if the volume is mounted                 */
   2273          /*-----------------------------------------------------------------------*/
   2274          

   \                                 In section .text, align 4, keep-with-next
   2275          static
   2276          FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
   2277          	FATFS** rfs,		/* Pointer to pointer to the found file system object */
   2278          	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
   2279          	BYTE wmode			/* !=0: Check write protection for write access */
   2280          )
   2281          {
   \                     find_volume: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0xB085             SUB      SP,SP,#+20
   2282          	BYTE fmt, *pt;
   2283          	int vol;
   2284          	DSTATUS stat;
   2285          	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
   2286          	WORD nrsv;
   2287          	FATFS *fs;
   2288          	UINT i;
   2289          
   2290          
   2291          	/* Get logical drive number from the path name */
   2292          	*rfs = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4614             MOV      R4,R2
   \   0000000C   0xF8C8 0x0000      STR      R0,[R8, #+0]
   2293          	vol = get_ldnumber(path);
   \   00000010   0x4608             MOV      R0,R1
   \   00000012   0x.... 0x....      BL       get_ldnumber
   \   00000016   0x0007             MOVS     R7,R0
   2294          	if (vol < 0) return FR_INVALID_DRIVE;
   \   00000018   0xBF48             IT       MI 
   \   0000001A   0x200B             MOVMI    R0,#+11
   \   0000001C   0xF100 0x8181      BMI.W    ??find_volume_0
   2295          
   2296          	/* Check if the file system object is valid or not */
   2297          	fs = FatFs[vol];					/* Get pointer to the file system object */
   \   00000020   0x.... 0x....      LDR.W    R5,??DataTable13_1
   \   00000024   0xEB05 0x0087      ADD      R0,R5,R7, LSL #+2
   \   00000028   0x69C6             LDR      R6,[R0, #+28]
   2298          	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   \   0000002A   0xB91E             CBNZ.N   R6,??find_volume_1
   \   0000002C   0x200C             MOVS     R0,#+12
   \   0000002E   0xB005             ADD      SP,SP,#+20
   \   00000030   0xE8BD 0x83F0      POP      {R4-R9,PC}
   2299          
   2300          	ENTER_FF(fs);						/* Lock the volume */
   2301          	*rfs = fs;							/* Return pointer to the file system object */
   \                     ??find_volume_1: (+1)
   \   00000034   0xF8C8 0x6000      STR      R6,[R8, #+0]
   2302          
   2303          	if (fs->fs_type) {					/* If the volume has been mounted */
   \   00000038   0xF896 0x0200      LDRB     R0,[R6, #+512]
   \   0000003C   0xB160             CBZ.N    R0,??find_volume_2
   2304          		stat = disk_status(fs->drv);
   \   0000003E   0xF896 0x0201      LDRB     R0,[R6, #+513]
   \   00000042   0x.... 0x....      BL       disk_status
   2305          		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
   \   00000046   0x07C1             LSLS     R1,R0,#+31
   \   00000048   0xD406             BMI.N    ??find_volume_2
   2306          			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
   \   0000004A   0xB10C             CBZ.N    R4,??find_volume_3
   \   0000004C   0x0740             LSLS     R0,R0,#+29
   \   0000004E   0xD414             BMI.N    ??find_volume_4
   2307          				return FR_WRITE_PROTECTED;
   2308          			return FR_OK;				/* The file system object is valid */
   \                     ??find_volume_3: (+1)
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xB005             ADD      SP,SP,#+20
   \   00000054   0xE8BD 0x83F0      POP      {R4-R9,PC}
   2309          		}
   2310          	}
   2311          
   2312          	/* The file system object is not valid. */
   2313          	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
   2314          
   2315          	fs->fs_type = 0;					/* Clear the file system object */
   \                     ??find_volume_2: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   2316          	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   \   0000005A   0xF886 0x7201      STRB     R7,[R6, #+513]
   \   0000005E   0xF886 0x0200      STRB     R0,[R6, #+512]
   2317          	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
   \   00000062   0xF896 0x0201      LDRB     R0,[R6, #+513]
   \   00000066   0x.... 0x....      BL       disk_initialize
   2318          	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   \   0000006A   0x07C1             LSLS     R1,R0,#+31
   \   0000006C   0xBF48             IT       MI 
   \   0000006E   0x2003             MOVMI    R0,#+3
   2319          		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
   \   00000070   0xF100 0x8157      BMI.W    ??find_volume_0
   2320          	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   \   00000074   0xB12C             CBZ.N    R4,??find_volume_5
   \   00000076   0x0740             LSLS     R0,R0,#+29
   \   00000078   0xD503             BPL.N    ??find_volume_5
   2321          		return FR_WRITE_PROTECTED;
   \                     ??find_volume_4: (+1)
   \   0000007A   0x200A             MOVS     R0,#+10
   \   0000007C   0xB005             ADD      SP,SP,#+20
   \   0000007E   0xE8BD 0x83F0      POP      {R4-R9,PC}
   2322          #if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
   2323          	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
   2324          		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
   2325          #endif
   2326          	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
   2327          	bsect = 0;
   2328          	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
   \                     ??find_volume_5: (+1)
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x4630             MOV      R0,R6
   \   00000086   0x.... 0x....      BL       check_fs
   \   0000008A   0x2700             MOVS     R7,#+0
   \   0000008C   0x4604             MOV      R4,R0
   2329          	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
   \   0000008E   0x2C01             CMP      R4,#+1
   \   00000090   0xD12A             BNE.N    ??find_volume_6
   2330          		for (i = 0; i < 4; i++) {			/* Get partition offset */
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x4669             MOV      R1,SP
   \   00000096   0xF506 0x72DF      ADD      R2,R6,#+446
   2331          			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
   2332          			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
   \                     ??find_volume_7: (+1)
   \   0000009A   0x7913             LDRB     R3,[R2, #+4]
   \   0000009C   0xB14B             CBZ.N    R3,??find_volume_8
   \   0000009E   0x7A94             LDRB     R4,[R2, #+10]
   \   000000A0   0x7AD3             LDRB     R3,[R2, #+11]
   \   000000A2   0x0424             LSLS     R4,R4,#+16
   \   000000A4   0xEA44 0x6303      ORR      R3,R4,R3, LSL #+24
   \   000000A8   0x7A54             LDRB     R4,[R2, #+9]
   \   000000AA   0xEA43 0x2304      ORR      R3,R3,R4, LSL #+8
   \   000000AE   0x7A14             LDRB     R4,[R2, #+8]
   \   000000B0   0x4323             ORRS     R3,R4,R3
   2333          		}
   \                     ??find_volume_8: (+1)
   \   000000B2   0x1C40             ADDS     R0,R0,#+1
   \   000000B4   0x3210             ADDS     R2,R2,#+16
   \   000000B6   0x2804             CMP      R0,#+4
   \   000000B8   0xF841 0x3B04      STR      R3,[R1], #+4
   \   000000BC   0xD3ED             BCC.N    ??find_volume_7
   2334          		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
   \   000000BE   0x46B8             MOV      R8,R7
   2335          		if (i) i--;
   \   000000C0   0xEA4F 0x090D      MOV.W    R9,SP
   2336          		do {								/* Find an FAT volume */
   2337          			bsect = br[i];
   \                     ??find_volume_9: (+1)
   \   000000C4   0xF8D9 0x7000      LDR      R7,[R9, #+0]
   2338          			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
   \   000000C8   0xB127             CBZ.N    R7,??find_volume_10
   \   000000CA   0x4639             MOV      R1,R7
   \   000000CC   0x4630             MOV      R0,R6
   \   000000CE   0x.... 0x....      BL       check_fs
   \   000000D2   0xE000             B.N      ??find_volume_11
   \                     ??find_volume_10: (+1)
   \   000000D4   0x2002             MOVS     R0,#+2
   \                     ??find_volume_11: (+1)
   \   000000D6   0x0004             MOVS     R4,R0
   2339          		} while (!LD2PT(vol) && fmt && ++i < 4);
   \   000000D8   0xD006             BEQ.N    ??find_volume_6
   \   000000DA   0xF108 0x0801      ADD      R8,R8,#+1
   \   000000DE   0xF1B8 0x0F04      CMP      R8,#+4
   \   000000E2   0xF109 0x0904      ADD      R9,R9,#+4
   \   000000E6   0xD3ED             BCC.N    ??find_volume_9
   2340          	}
   2341          	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
   \                     ??find_volume_6: (+1)
   \   000000E8   0x2C03             CMP      R4,#+3
   \   000000EA   0xBF08             IT       EQ 
   \   000000EC   0x2001             MOVEQ    R0,#+1
   \   000000EE   0xF000 0x8118      BEQ.W    ??find_volume_0
   2342          	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   \   000000F2   0x2C00             CMP      R4,#+0
   \   000000F4   0xBF01             ITTTT    EQ 
   \   000000F6   0x7B30             LDRBEQ   R0,[R6, #+12]
   \   000000F8   0x7AF1             LDRBEQ   R1,[R6, #+11]
   \   000000FA   0xEA41 0x2000      ORREQ    R0,R1,R0, LSL #+8
   \   000000FE   0xF5B0 0x7F00      CMPEQ    R0,#+512
   2343          
   2344          	/* An FAT volume is found. Following code initializes the file system object */
   2345          
   2346          	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
   \   00000102   0xF040 0x8097      BNE.W    ??find_volume_12
   2347          		return FR_NO_FILESYSTEM;
   2348          
   2349          	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
   \   00000106   0x7DF0             LDRB     R0,[R6, #+23]
   \   00000108   0x7DB1             LDRB     R1,[R6, #+22]
   \   0000010A   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   2350          	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
   \   0000010E   0xD10D             BNE.N    ??find_volume_13
   \   00000110   0xF896 0x1026      LDRB     R1,[R6, #+38]
   \   00000114   0xF896 0x0027      LDRB     R0,[R6, #+39]
   \   00000118   0x0409             LSLS     R1,R1,#+16
   \   0000011A   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   0000011E   0xF896 0x1025      LDRB     R1,[R6, #+37]
   \   00000122   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000126   0xF896 0x1024      LDRB     R1,[R6, #+36]
   \   0000012A   0x4308             ORRS     R0,R1,R0
   2351          	fs->fsize = fasize;
   2352          
   2353          	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
   \                     ??find_volume_13: (+1)
   \   0000012C   0x7C31             LDRB     R1,[R6, #+16]
   \   0000012E   0xF8C6 0x0218      STR      R0,[R6, #+536]
   2354          	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
   \   00000132   0x2901             CMP      R1,#+1
   \   00000134   0xF886 0x1203      STRB     R1,[R6, #+515]
   \   00000138   0xBF18             IT       NE 
   \   0000013A   0x2902             CMPNE    R1,#+2
   \   0000013C   0xD17A             BNE.N    ??find_volume_12
   2355          		return FR_NO_FILESYSTEM;
   2356          	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
   \   0000013E   0x4348             MULS     R0,R0,R1
   2357          
   2358          	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
   \   00000140   0x7B71             LDRB     R1,[R6, #+13]
   2359          	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
   \   00000142   0x2900             CMP      R1,#+0
   \   00000144   0xF886 0x1202      STRB     R1,[R6, #+514]
   \   00000148   0xD074             BEQ.N    ??find_volume_12
   \   0000014A   0x1E4A             SUBS     R2,R1,#+1
   \   0000014C   0x4211             TST      R1,R2
   \   0000014E   0xD171             BNE.N    ??find_volume_12
   2360          		return FR_NO_FILESYSTEM;
   2361          
   2362          	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
   \   00000150   0x7CB2             LDRB     R2,[R6, #+18]
   \   00000152   0x7C73             LDRB     R3,[R6, #+17]
   \   00000154   0xEA43 0x2202      ORR      R2,R3,R2, LSL #+8
   2363          	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
   \   00000158   0x230F             MOVS     R3,#+15
   \   0000015A   0x421A             TST      R2,R3
   \   0000015C   0xF8A6 0x2208      STRH     R2,[R6, #+520]
   \   00000160   0xD168             BNE.N    ??find_volume_12
   2364          		return FR_NO_FILESYSTEM;
   2365          
   2366          	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
   \   00000162   0x7D33             LDRB     R3,[R6, #+20]
   \   00000164   0x7CF4             LDRB     R4,[R6, #+19]
   \   00000166   0xEA54 0x2403      ORRS     R4,R4,R3, LSL #+8
   2367          	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
   \   0000016A   0xD10D             BNE.N    ??find_volume_14
   \   0000016C   0xF896 0x4022      LDRB     R4,[R6, #+34]
   \   00000170   0xF896 0x3023      LDRB     R3,[R6, #+35]
   \   00000174   0x0424             LSLS     R4,R4,#+16
   \   00000176   0xEA44 0x6303      ORR      R3,R4,R3, LSL #+24
   \   0000017A   0xF896 0x4021      LDRB     R4,[R6, #+33]
   \   0000017E   0xEA43 0x2304      ORR      R3,R3,R4, LSL #+8
   \   00000182   0xF896 0x4020      LDRB     R4,[R6, #+32]
   \   00000186   0x431C             ORRS     R4,R4,R3
   2368          
   2369          	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
   \                     ??find_volume_14: (+1)
   \   00000188   0x7BF3             LDRB     R3,[R6, #+15]
   \   0000018A   0xF896 0xC00E      LDRB     R12,[R6, #+14]
   \   0000018E   0xEA5C 0x2303      ORRS     R3,R12,R3, LSL #+8
   2370          	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
   \   00000192   0xD04F             BEQ.N    ??find_volume_12
   2371          
   2372          	/* Determine the FAT sub type */
   2373          	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
   \   00000194   0xEB00 0x0C03      ADD      R12,R0,R3
   \   00000198   0xEB0C 0x1C12      ADD      R12,R12,R2, LSR #+4
   2374          	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   \   0000019C   0x4564             CMP      R4,R12
   \   0000019E   0xD349             BCC.N    ??find_volume_12
   2375          	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   \   000001A0   0xEBA4 0x040C      SUB      R4,R4,R12
   \   000001A4   0xFBB4 0xF1F1      UDIV     R1,R4,R1
   2376          	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   \   000001A8   0x2900             CMP      R1,#+0
   \   000001AA   0xD043             BEQ.N    ??find_volume_12
   2377          	fmt = FS_FAT12;
   \   000001AC   0x2401             MOVS     R4,#+1
   2378          	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   \   000001AE   0xF640 0x7EF6      MOVW     LR,#+4086
   \   000001B2   0x4571             CMP      R1,LR
   2379          	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   \   000001B4   0xF64F 0x7EF6      MOVW     LR,#+65526
   \   000001B8   0xBF28             IT       CS 
   \   000001BA   0x2402             MOVCS    R4,#+2
   \   000001BC   0x4571             CMP      R1,LR
   \   000001BE   0xBF28             IT       CS 
   \   000001C0   0x2403             MOVCS    R4,#+3
   2380          
   2381          	/* Boundaries and Limits */
   2382          	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   \   000001C2   0x1C89             ADDS     R1,R1,#+2
   2383          	fs->volbase = bsect;								/* Volume start sector */
   \   000001C4   0xF8C6 0x721C      STR      R7,[R6, #+540]
   \   000001C8   0xF8C6 0x1214      STR      R1,[R6, #+532]
   2384          	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   \   000001CC   0x19D9             ADDS     R1,R3,R7
   \   000001CE   0xF8C6 0x1220      STR      R1,[R6, #+544]
   2385          	fs->database = bsect + sysect;						/* Data start sector */
   \   000001D2   0xEB0C 0x0107      ADD      R1,R12,R7
   2386          	if (fmt == FS_FAT32) {
   \   000001D6   0x2C03             CMP      R4,#+3
   \   000001D8   0xF8C6 0x1228      STR      R1,[R6, #+552]
   \   000001DC   0xD112             BNE.N    ??find_volume_15
   2387          		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   \   000001DE   0xBB4A             CBNZ.N   R2,??find_volume_12
   2388          		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
   \   000001E0   0xF896 0x102E      LDRB     R1,[R6, #+46]
   \   000001E4   0xF896 0x002F      LDRB     R0,[R6, #+47]
   \   000001E8   0x0409             LSLS     R1,R1,#+16
   \   000001EA   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   000001EE   0xF896 0x102D      LDRB     R1,[R6, #+45]
   \   000001F2   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   000001F6   0xF896 0x102C      LDRB     R1,[R6, #+44]
   \   000001FA   0x4308             ORRS     R0,R1,R0
   2389          		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
   \   000001FC   0xF8D6 0x1214      LDR      R1,[R6, #+532]
   \   00000200   0x0089             LSLS     R1,R1,#+2
   \   00000202   0xE00E             B.N      ??find_volume_16
   2390          	} else {
   2391          		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   \                     ??find_volume_15: (+1)
   \   00000204   0xB1B2             CBZ.N    R2,??find_volume_12
   2392          		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   \   00000206   0xF8D6 0x1220      LDR      R1,[R6, #+544]
   \   0000020A   0x1840             ADDS     R0,R0,R1
   2393          		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
   2394          			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   \   0000020C   0xF8D6 0x1214      LDR      R1,[R6, #+532]
   \   00000210   0x2C02             CMP      R4,#+2
   \   00000212   0xBF0F             ITEEE    EQ 
   \   00000214   0x0049             LSLEQ    R1,R1,#+1
   \   00000216   0xEB01 0x0241      ADDNE    R2,R1,R1, LSL #+1
   \   0000021A   0xF001 0x0101      ANDNE    R1,R1,#0x1
   \   0000021E   0xEB01 0x0152      ADDNE    R1,R1,R2, LSR #+1
   \                     ??find_volume_16: (+1)
   \   00000222   0xF8C6 0x0224      STR      R0,[R6, #+548]
   2395          	}
   2396          	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
   \   00000226   0xF8D6 0x0218      LDR      R0,[R6, #+536]
   \   0000022A   0xF201 0x11FF      ADDW     R1,R1,#+511
   \   0000022E   0xEBB0 0x2F51      CMP      R0,R1, LSR #+9
   \   00000232   0xD203             BCS.N    ??find_volume_17
   2397          		return FR_NO_FILESYSTEM;
   \                     ??find_volume_12: (+1)
   \   00000234   0x200D             MOVS     R0,#+13
   \   00000236   0xB005             ADD      SP,SP,#+20
   \   00000238   0xE8BD 0x83F0      POP      {R4-R9,PC}
   2398          
   2399          #if !_FS_READONLY
   2400          	/* Initialize cluster allocation information */
   2401          	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
   \                     ??find_volume_17: (+1)
   \   0000023C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000240   0xF8C6 0x0210      STR      R0,[R6, #+528]
   \   00000244   0xF8C6 0x020C      STR      R0,[R6, #+524]
   2402          
   2403          	/* Get fsinfo if available */
   2404          	fs->fsi_flag = 0x80;
   \   00000248   0x2080             MOVS     R0,#+128
   2405          #if (_FS_NOFSINFO & 3) != 3
   2406          	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
   2407          		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
   2408          		&& move_window(fs, bsect + 1) == FR_OK)
   \   0000024A   0x2C03             CMP      R4,#+3
   \   0000024C   0xF886 0x0205      STRB     R0,[R6, #+517]
   \   00000250   0xBF01             ITTTT    EQ 
   \   00000252   0xF896 0x0031      LDRBEQ   R0,[R6, #+49]
   \   00000256   0xF896 0x1030      LDRBEQ   R1,[R6, #+48]
   \   0000025A   0xEA41 0x2000      ORREQ    R0,R1,R0, LSL #+8
   \   0000025E   0x2801             CMPEQ    R0,#+1
   \   00000260   0xD14F             BNE.N    ??find_volume_18
   \   00000262   0x1C79             ADDS     R1,R7,#+1
   \   00000264   0x4630             MOV      R0,R6
   \   00000266   0x.... 0x....      BL       move_window
   \   0000026A   0x2800             CMP      R0,#+0
   \   0000026C   0xD149             BNE.N    ??find_volume_18
   2409          	{
   2410          		fs->fsi_flag = 0;
   \   0000026E   0xF886 0x0205      STRB     R0,[R6, #+517]
   2411          		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
   2412          			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
   2413          			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
   \   00000272   0xF896 0x01FF      LDRB     R0,[R6, #+511]
   \   00000276   0xF896 0x11FE      LDRB     R1,[R6, #+510]
   \   0000027A   0xEA41 0x2000      ORR      R0,R1,R0, LSL #+8
   \   0000027E   0xF64A 0x2155      MOVW     R1,#+43605
   \   00000282   0x4288             CMP      R0,R1
   \   00000284   0xD13D             BNE.N    ??find_volume_18
   \   00000286   0x78B1             LDRB     R1,[R6, #+2]
   \   00000288   0x78F0             LDRB     R0,[R6, #+3]
   \   0000028A   0x0409             LSLS     R1,R1,#+16
   \   0000028C   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000290   0x7871             LDRB     R1,[R6, #+1]
   \   00000292   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000296   0x7831             LDRB     R1,[R6, #+0]
   \   00000298   0x4308             ORRS     R0,R1,R0
   \   0000029A   0x....             LDR.N    R1,??DataTable13_2  ;; 0x41615252
   \   0000029C   0x4288             CMP      R0,R1
   \   0000029E   0xD130             BNE.N    ??find_volume_18
   \   000002A0   0xF896 0x11E6      LDRB     R1,[R6, #+486]
   \   000002A4   0xF896 0x01E7      LDRB     R0,[R6, #+487]
   \   000002A8   0x0409             LSLS     R1,R1,#+16
   \   000002AA   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   000002AE   0xF896 0x11E5      LDRB     R1,[R6, #+485]
   \   000002B2   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   000002B6   0xF896 0x11E4      LDRB     R1,[R6, #+484]
   \   000002BA   0x4308             ORRS     R0,R1,R0
   \   000002BC   0x....             LDR.N    R1,??DataTable13_3  ;; 0x61417272
   \   000002BE   0x4288             CMP      R0,R1
   \   000002C0   0xD11F             BNE.N    ??find_volume_18
   2414          		{
   2415          #if (_FS_NOFSINFO & 1) == 0
   2416          			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
   \   000002C2   0xF896 0x11EA      LDRB     R1,[R6, #+490]
   \   000002C6   0xF896 0x01EB      LDRB     R0,[R6, #+491]
   \   000002CA   0x0409             LSLS     R1,R1,#+16
   \   000002CC   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   000002D0   0xF896 0x11E9      LDRB     R1,[R6, #+489]
   \   000002D4   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   000002D8   0xF896 0x11E8      LDRB     R1,[R6, #+488]
   \   000002DC   0x4308             ORRS     R0,R1,R0
   2417          #endif
   2418          #if (_FS_NOFSINFO & 2) == 0
   2419          			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
   \   000002DE   0xF896 0x11EE      LDRB     R1,[R6, #+494]
   \   000002E2   0xF8C6 0x0210      STR      R0,[R6, #+528]
   \   000002E6   0xF896 0x01EF      LDRB     R0,[R6, #+495]
   \   000002EA   0x0409             LSLS     R1,R1,#+16
   \   000002EC   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   000002F0   0xF896 0x11ED      LDRB     R1,[R6, #+493]
   \   000002F4   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   000002F8   0xF896 0x11EC      LDRB     R1,[R6, #+492]
   \   000002FC   0x4308             ORRS     R0,R1,R0
   \   000002FE   0xF8C6 0x020C      STR      R0,[R6, #+524]
   2420          #endif
   2421          		}
   2422          	}
   2423          #endif
   2424          #endif
   2425          	fs->fs_type = fmt;	/* FAT sub-type */
   \                     ??find_volume_18: (+1)
   \   00000302   0xF886 0x4200      STRB     R4,[R6, #+512]
   2426          	fs->id = ++Fsid;	/* File system mount ID */
   \   00000306   0x8B28             LDRH     R0,[R5, #+24]
   \   00000308   0x1C40             ADDS     R0,R0,#+1
   \   0000030A   0x8328             STRH     R0,[R5, #+24]
   \   0000030C   0xF8A6 0x0206      STRH     R0,[R6, #+518]
   2427          #if _FS_RPATH
   2428          	fs->cdir = 0;		/* Set current directory to root */
   2429          #endif
   2430          #if _FS_LOCK			/* Clear file lock semaphores */
   2431          	clear_lock(fs);
   \   00000310   0x2002             MOVS     R0,#+2
   \                     ??find_volume_19: (+1)
   \   00000312   0x6829             LDR      R1,[R5, #+0]
   \   00000314   0x42B1             CMP      R1,R6
   \   00000316   0xBF04             ITT      EQ 
   \   00000318   0x2100             MOVEQ    R1,#+0
   \   0000031A   0x6029             STREQ    R1,[R5, #+0]
   \   0000031C   0x350C             ADDS     R5,R5,#+12
   \   0000031E   0x1E40             SUBS     R0,R0,#+1
   \   00000320   0xD1F7             BNE.N    ??find_volume_19
   \                     ??find_volume_0: (+1)
   \   00000322   0xB005             ADD      SP,SP,#+20
   \   00000324   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   2432          #endif
   2433          
   2434          	return FR_OK;
   2435          }
   2436          
   2437          
   2438          
   2439          
   2440          /*-----------------------------------------------------------------------*/
   2441          /* Check if the file/directory object is valid or not                    */
   2442          /*-----------------------------------------------------------------------*/
   2443          

   \                                 In section .text, align 2, keep-with-next
   2444          static
   2445          FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
   2446          	void* obj		/* Pointer to the object FIL/DIR to check validity */
   2447          )
   2448          {
   2449          	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
   2450          
   2451          
   2452          	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
   \                     validate: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xB500             PUSH     {LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0xBF1C             ITT      NE 
   \   00000008   0xF8D0 0x1200      LDRNE    R1,[R0, #+512]
   \   0000000C   0x2900             CMPNE    R1,#+0
   \   0000000E   0xD00E             BEQ.N    ??validate_0
   \   00000010   0xF891 0x2200      LDRB     R2,[R1, #+512]
   \   00000014   0xB15A             CBZ.N    R2,??validate_0
   \   00000016   0xF8B1 0x2206      LDRH     R2,[R1, #+518]
   \   0000001A   0xF8B0 0x0204      LDRH     R0,[R0, #+516]
   \   0000001E   0x4282             CMP      R2,R0
   \   00000020   0xD105             BNE.N    ??validate_0
   \   00000022   0xF891 0x0201      LDRB     R0,[R1, #+513]
   \   00000026   0x.... 0x....      BL       disk_status
   \   0000002A   0x07C0             LSLS     R0,R0,#+31
   \   0000002C   0xD502             BPL.N    ??validate_1
   2453          		return FR_INVALID_OBJECT;
   \                     ??validate_0: (+1)
   \   0000002E   0x2009             MOVS     R0,#+9
   \   00000030   0xB001             ADD      SP,SP,#+4
   \   00000032   0xBD00             POP      {PC}
   2454          
   2455          	ENTER_FF(fil->fs);		/* Lock file system */
   2456          
   2457          	return FR_OK;
   \                     ??validate_1: (+1)
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xB001             ADD      SP,SP,#+4
   \   00000038   0xBD00             POP      {PC}             ;; return
   2458          }
   2459          
   2460          
   2461          
   2462          
   2463          /*--------------------------------------------------------------------------
   2464          
   2465             Public Functions
   2466          
   2467          --------------------------------------------------------------------------*/
   2468          
   2469          
   2470          
   2471          /*-----------------------------------------------------------------------*/
   2472          /* Mount/Unmount a Logical Drive                                         */
   2473          /*-----------------------------------------------------------------------*/
   2474          

   \                                 In section .text, align 2, keep-with-next
   2475          FRESULT f_mount (
   2476          	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
   2477          	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
   2478          	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
   2479          )
   2480          {
   \                     f_mount: (+1)
   \   00000000   0xB533             PUSH     {R0,R1,R4,R5,LR}
   2481          	FATFS *cfs;
   2482          	int vol;
   2483          	FRESULT res;
   2484          	const TCHAR *rp = path;
   2485          
   2486          
   2487          	vol = get_ldnumber(&rp);
   \   00000002   0x0008             MOVS     R0,R1
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0xD031             BEQ.N    ??f_mount_0
   \   00000008   0xE000             B.N      ??f_mount_1
   \                     ??f_mount_2: (+1)
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \                     ??f_mount_1: (+1)
   \   0000000C   0x7801             LDRB     R1,[R0, #+0]
   \   0000000E   0x2921             CMP      R1,#+33
   \   00000010   0xD301             BCC.N    ??f_mount_3
   \   00000012   0x293A             CMP      R1,#+58
   \   00000014   0xD1F9             BNE.N    ??f_mount_2
   \                     ??f_mount_3: (+1)
   \   00000016   0x293A             CMP      R1,#+58
   \   00000018   0xD109             BNE.N    ??f_mount_4
   \   0000001A   0x9902             LDR      R1,[SP, #+8]
   \   0000001C   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000020   0x3B30             SUBS     R3,R3,#+48
   \   00000022   0x2B0A             CMP      R3,#+10
   \   00000024   0xD222             BCS.N    ??f_mount_0
   \   00000026   0x4281             CMP      R1,R0
   \   00000028   0xBF08             IT       EQ 
   \   0000002A   0x2B00             CMPEQ    R3,#+0
   \   0000002C   0xD11E             BNE.N    ??f_mount_0
   2488          	if (vol < 0) return FR_INVALID_DRIVE;
   2489          	cfs = FatFs[vol];					/* Pointer to fs object */
   \                     ??f_mount_4: (+1)
   \   0000002E   0x....             LDR.N    R0,??DataTable13_1
   \   00000030   0x69C1             LDR      R1,[R0, #+28]
   2490          
   2491          	if (cfs) {
   \   00000032   0xB161             CBZ.N    R1,??f_mount_5
   2492          #if _FS_LOCK
   2493          		clear_lock(cfs);
   \   00000034   0x4603             MOV      R3,R0
   \   00000036   0x2402             MOVS     R4,#+2
   \                     ??f_mount_6: (+1)
   \   00000038   0x681D             LDR      R5,[R3, #+0]
   \   0000003A   0x428D             CMP      R5,R1
   \   0000003C   0xBF04             ITT      EQ 
   \   0000003E   0x2500             MOVEQ    R5,#+0
   \   00000040   0x601D             STREQ    R5,[R3, #+0]
   \   00000042   0x330C             ADDS     R3,R3,#+12
   \   00000044   0x1E64             SUBS     R4,R4,#+1
   \   00000046   0xD1F7             BNE.N    ??f_mount_6
   2494          #endif
   2495          #if _FS_REENTRANT						/* Discard sync object of the current volume */
   2496          		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
   2497          #endif
   2498          		cfs->fs_type = 0;				/* Clear old fs object */
   \   00000048   0x2300             MOVS     R3,#+0
   \   0000004A   0xF881 0x3200      STRB     R3,[R1, #+512]
   2499          	}
   2500          
   2501          	if (fs) {
   \                     ??f_mount_5: (+1)
   \   0000004E   0x9901             LDR      R1,[SP, #+4]
   \   00000050   0xB119             CBZ.N    R1,??f_mount_7
   2502          		fs->fs_type = 0;				/* Clear new fs object */
   \   00000052   0x9B01             LDR      R3,[SP, #+4]
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0xF883 0x1200      STRB     R1,[R3, #+512]
   2503          #if _FS_REENTRANT						/* Create sync object for the new volume */
   2504          		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
   2505          #endif
   2506          	}
   2507          	FatFs[vol] = fs;					/* Register new fs object */
   \                     ??f_mount_7: (+1)
   \   0000005A   0x9901             LDR      R1,[SP, #+4]
   \   0000005C   0x61C1             STR      R1,[R0, #+28]
   2508          
   2509          	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
   \   0000005E   0x9801             LDR      R0,[SP, #+4]
   \   00000060   0xB108             CBZ.N    R0,??f_mount_8
   \   00000062   0x2A01             CMP      R2,#+1
   \   00000064   0xD005             BEQ.N    ??f_mount_9
   \                     ??f_mount_8: (+1)
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0xB003             ADD      SP,SP,#+12
   \   0000006A   0xBD30             POP      {R4,R5,PC}
   \                     ??f_mount_0: (+1)
   \   0000006C   0x200B             MOVS     R0,#+11
   \   0000006E   0xB003             ADD      SP,SP,#+12
   \   00000070   0xBD30             POP      {R4,R5,PC}
   2510          
   2511          	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
   2512          	LEAVE_FF(fs, res);
   \                     ??f_mount_9: (+1)
   \   00000072   0x2200             MOVS     R2,#+0
   \   00000074   0xA902             ADD      R1,SP,#+8
   \   00000076   0xA801             ADD      R0,SP,#+4
   \   00000078   0x.... 0x....      BL       find_volume
   \   0000007C   0xB003             ADD      SP,SP,#+12
   \   0000007E   0xBD30             POP      {R4,R5,PC}       ;; return
   2513          }
   2514          
   2515          
   2516          
   2517          
   2518          /*-----------------------------------------------------------------------*/
   2519          /* Open or Create a File                                                 */
   2520          /*-----------------------------------------------------------------------*/
   2521          

   \                                 In section .text, align 4, keep-with-next
   2522          FRESULT f_open (
   2523          	FIL* fp,			/* Pointer to the blank file object */
   2524          	const TCHAR* path,	/* Pointer to the file name */
   2525          	BYTE mode			/* Access mode and file open mode flags */
   2526          )
   2527          {
   \                     f_open: (+1)
   \   00000000   0xE92D 0x43F2      PUSH     {R1,R4-R9,LR}
   \   00000004   0xEA5F 0x0800      MOVS     R8,R0
   \   00000008   0xF5AD 0x7D0C      SUB      SP,SP,#+560
   2528          	FRESULT res;
   2529          	DIR dj;
   2530          	BYTE *dir;
   2531          	DEFINE_NAMEBUF;
   2532          #if !_FS_READONLY
   2533          	DWORD dw, cl;
   2534          #endif
   2535          
   2536          
   2537          	if (!fp) return FR_INVALID_OBJECT;
   \   0000000C   0xBF08             IT       EQ 
   \   0000000E   0x2009             MOVEQ    R0,#+9
   \   00000010   0xF000 0x80C9      BEQ.W    ??f_open_0
   2538          	fp->fs = 0;			/* Clear file object */
   \   00000014   0x2000             MOVS     R0,#+0
   2539          
   2540          	/* Get logical drive number */
   2541          #if !_FS_READONLY
   2542          	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   \   00000016   0xF002 0x051F      AND      R5,R2,#0x1F
   \   0000001A   0xF8C8 0x0200      STR      R0,[R8, #+512]
   2543          	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
   \   0000001E   0xF005 0x02FE      AND      R2,R5,#0xFE
   \   00000022   0xA98C             ADD      R1,SP,#+560
   \   00000024   0xA883             ADD      R0,SP,#+524
   \   00000026   0x.... 0x....      BL       find_volume
   \   0000002A   0x0007             MOVS     R7,R0
   2544          #else
   2545          	mode &= FA_READ;
   2546          	res = find_volume(&dj.fs, &path, 0);
   2547          #endif
   2548          	if (res == FR_OK) {
   \   0000002C   0xF040 0x80BA      BNE.W    ??f_open_1
   2549          		INIT_BUF(dj);
   2550          		res = follow_path(&dj, path);	/* Follow the file path */
   \   00000030   0x998C             LDR      R1,[SP, #+560]
   \   00000032   0xF8CD 0xD224      STR      SP,[SP, #+548]
   \   00000036   0xA803             ADD      R0,SP,#+12
   \   00000038   0x.... 0x....      BL       follow_path
   \   0000003C   0x0007             MOVS     R7,R0
   2551          		dir = dj.dir;
   \   0000003E   0x9E88             LDR      R6,[SP, #+544]
   2552          #if !_FS_READONLY	/* R/W configuration */
   2553          		if (res == FR_OK) {
   \   00000040   0xD10C             BNE.N    ??f_open_2
   2554          			if (!dir)	/* Default directory itself */
   \   00000042   0xB90E             CBNZ.N   R6,??f_open_3
   2555          				res = FR_INVALID_NAME;
   \   00000044   0x2706             MOVS     R7,#+6
   \   00000046   0xE009             B.N      ??f_open_2
   2556          #if _FS_LOCK
   2557          			else
   2558          				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
   \                     ??f_open_3: (+1)
   \   00000048   0xF005 0x00FE      AND      R0,R5,#0xFE
   \   0000004C   0x1E41             SUBS     R1,R0,#+1
   \   0000004E   0x4189             SBCS     R1,R1,R1
   \   00000050   0x43C9             MVNS     R1,R1
   \   00000052   0x0FC9             LSRS     R1,R1,#+31
   \   00000054   0xA803             ADD      R0,SP,#+12
   \   00000056   0x.... 0x....      BL       chk_lock
   \   0000005A   0x4607             MOV      R7,R0
   2559          #endif
   2560          		}
   2561          		/* Create or Open a file */
   2562          		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   \                     ??f_open_2: (+1)
   \   0000005C   0x201C             MOVS     R0,#+28
   \   0000005E   0x4205             TST      R5,R0
   \   00000060   0xD070             BEQ.N    ??f_open_4
   2563          			if (res != FR_OK) {					/* No file, create new */
   \   00000062   0x2F00             CMP      R7,#+0
   \   00000064   0xD066             BEQ.N    ??f_open_5
   2564          				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   \   00000066   0x2F04             CMP      R7,#+4
   \   00000068   0xD110             BNE.N    ??f_open_6
   2565          #if _FS_LOCK
   2566          					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable13_1
   \                     ??f_open_7: (+1)
   \   00000070   0xF851 0x2B0C      LDR      R2,[R1], #+12
   \   00000074   0xB112             CBZ.N    R2,??f_open_8
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0x2802             CMP      R0,#+2
   \   0000007A   0xD3F9             BCC.N    ??f_open_7
   \                     ??f_open_8: (+1)
   \   0000007C   0x2802             CMP      R0,#+2
   \   0000007E   0xBF08             IT       EQ 
   \   00000080   0x2712             MOVEQ    R7,#+18
   \   00000082   0xD003             BEQ.N    ??f_open_6
   \   00000084   0xA803             ADD      R0,SP,#+12
   \   00000086   0x.... 0x....      BL       dir_register
   \   0000008A   0x4607             MOV      R7,R0
   2567          #else
   2568          					res = dir_register(&dj);
   2569          #endif
   2570          				mode |= FA_CREATE_ALWAYS;		/* File is created */
   \                     ??f_open_6: (+1)
   \   0000008C   0xF045 0x0508      ORR      R5,R5,#0x8
   2571          				dir = dj.dir;					/* New entry */
   \   00000090   0x9E88             LDR      R6,[SP, #+544]
   2572          			}
   2573          			else {								/* Any object is already existing */
   2574          				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2575          					res = FR_DENIED;
   2576          				} else {
   2577          					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2578          						res = FR_EXIST;
   2579          				}
   2580          			}
   2581          			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   \   00000092   0xBBA7             CBNZ.N   R7,??f_open_9
   \                     ??f_open_10: (+1)
   \   00000094   0x0728             LSLS     R0,R5,#+28
   \   00000096   0xD538             BPL.N    ??f_open_11
   2582          				dw = GET_FATTIME();				/* Created time */
   \   00000098   0x.... 0x....      BL       get_fattime
   \   0000009C   0x4604             MOV      R4,R0
   2583          				ST_DWORD(dir + DIR_CrtTime, dw);
   \   0000009E   0x0400             LSLS     R0,R0,#+16
   \   000000A0   0x73B4             STRB     R4,[R6, #+14]
   \   000000A2   0x0E00             LSRS     R0,R0,#+24
   \   000000A4   0x73F0             STRB     R0,[R6, #+15]
   \   000000A6   0x0C20             LSRS     R0,R4,#+16
   \   000000A8   0x7430             STRB     R0,[R6, #+16]
   \   000000AA   0x0E20             LSRS     R0,R4,#+24
   \   000000AC   0x7470             STRB     R0,[R6, #+17]
   2584          				dir[DIR_Attr] = 0;				/* Reset attribute */
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x72F0             STRB     R0,[R6, #+11]
   2585          				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
   2586          				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
   \   000000B2   0x4631             MOV      R1,R6
   \   000000B4   0x7730             STRB     R0,[R6, #+28]
   \   000000B6   0x7770             STRB     R0,[R6, #+29]
   \   000000B8   0x77B0             STRB     R0,[R6, #+30]
   \   000000BA   0x77F0             STRB     R0,[R6, #+31]
   \   000000BC   0x9883             LDR      R0,[SP, #+524]
   \   000000BE   0x.... 0x....      BL       ld_clust
   \   000000C2   0x4681             MOV      R9,R0
   2587          				st_clust(dir, 0);				/* cluster = 0 */
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x76B0             STRB     R0,[R6, #+26]
   \   000000C8   0x76F0             STRB     R0,[R6, #+27]
   \   000000CA   0x7530             STRB     R0,[R6, #+20]
   \   000000CC   0x7570             STRB     R0,[R6, #+21]
   2588          				dj.fs->wflag = 1;
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x9983             LDR      R1,[SP, #+524]
   2589          				if (cl) {						/* Remove the cluster chain if exist */
   \   000000D2   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000D6   0xF881 0x0204      STRB     R0,[R1, #+516]
   \   000000DA   0xD012             BEQ.N    ??f_open_12
   2590          					dw = dj.fs->winsect;
   \   000000DC   0x9883             LDR      R0,[SP, #+524]
   2591          					res = remove_chain(dj.fs, cl);
   \   000000DE   0x4649             MOV      R1,R9
   \   000000E0   0xF8D0 0x422C      LDR      R4,[R0, #+556]
   \   000000E4   0x.... 0x....      BL       remove_chain
   \   000000E8   0x0007             MOVS     R7,R0
   2592          					if (res == FR_OK) {
   \   000000EA   0xD108             BNE.N    ??f_open_9
   2593          						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   \   000000EC   0x9883             LDR      R0,[SP, #+524]
   \   000000EE   0xF1A9 0x0101      SUB      R1,R9,#+1
   \   000000F2   0xF8C0 0x120C      STR      R1,[R0, #+524]
   2594          						res = move_window(dj.fs, dw);
   \   000000F6   0x4621             MOV      R1,R4
   \   000000F8   0x.... 0x....      BL       move_window
   \   000000FC   0x4607             MOV      R7,R0
   2595          					}
   2596          				}
   2597          			}
   2598          		}
   2599          		else {	/* Open an existing file */
   2600          			if (res == FR_OK) {					/* Follow succeeded */
   2601          				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
   2602          					res = FR_NO_FILE;
   2603          				} else {
   2604          					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2605          						res = FR_DENIED;
   2606          				}
   2607          			}
   2608          		}
   2609          		if (res == FR_OK) {
   \                     ??f_open_9: (+1)
   \   000000FE   0x2F00             CMP      R7,#+0
   \   00000100   0xD150             BNE.N    ??f_open_1
   2610          			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
   \                     ??f_open_12: (+1)
   \   00000102   0x0728             LSLS     R0,R5,#+28
   \   00000104   0xBF48             IT       MI 
   \   00000106   0xF045 0x0520      ORRMI    R5,R5,#0x20
   2611          				mode |= FA__WRITTEN;
   2612          			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
   \                     ??f_open_11: (+1)
   \   0000010A   0x9883             LDR      R0,[SP, #+524]
   \   0000010C   0xF8D0 0x022C      LDR      R0,[R0, #+556]
   2613          			fp->dir_ptr = dir;
   \   00000110   0xF8C8 0x6220      STR      R6,[R8, #+544]
   \   00000114   0xF8C8 0x021C      STR      R0,[R8, #+540]
   2614          #if _FS_LOCK
   2615          			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
   \   00000118   0xF005 0x00FE      AND      R0,R5,#0xFE
   \   0000011C   0x1E41             SUBS     R1,R0,#+1
   \   0000011E   0x4189             SBCS     R1,R1,R1
   \   00000120   0x43C9             MVNS     R1,R1
   \   00000122   0x0FC9             LSRS     R1,R1,#+31
   \   00000124   0xA803             ADD      R0,SP,#+12
   \   00000126   0x.... 0x....      BL       inc_lock
   \   0000012A   0xF8C8 0x0224      STR      R0,[R8, #+548]
   2616          			if (!fp->lockid) res = FR_INT_ERR;
   \   0000012E   0xB9B0             CBNZ.N   R0,??f_open_13
   \   00000130   0x2702             MOVS     R7,#+2
   \   00000132   0xE037             B.N      ??f_open_1
   2617          #endif
   2618          		}
   \                     ??f_open_5: (+1)
   \   00000134   0x7AF0             LDRB     R0,[R6, #+11]
   \   00000136   0x2111             MOVS     R1,#+17
   \   00000138   0x4208             TST      R0,R1
   \   0000013A   0xD10E             BNE.N    ??f_open_14
   \   0000013C   0x0768             LSLS     R0,R5,#+29
   \   0000013E   0xD5A9             BPL.N    ??f_open_10
   \   00000140   0x2708             MOVS     R7,#+8
   \   00000142   0xE02F             B.N      ??f_open_1
   \                     ??f_open_4: (+1)
   \   00000144   0x2F00             CMP      R7,#+0
   \   00000146   0xD1DA             BNE.N    ??f_open_9
   \   00000148   0x7AF0             LDRB     R0,[R6, #+11]
   \   0000014A   0x06C1             LSLS     R1,R0,#+27
   \   0000014C   0xBF48             IT       MI 
   \   0000014E   0x2704             MOVMI    R7,#+4
   \   00000150   0xD428             BMI.N    ??f_open_1
   \   00000152   0x07A9             LSLS     R1,R5,#+30
   \   00000154   0xD5D5             BPL.N    ??f_open_12
   \   00000156   0x07C0             LSLS     R0,R0,#+31
   \   00000158   0xD5D3             BPL.N    ??f_open_12
   \                     ??f_open_14: (+1)
   \   0000015A   0x2707             MOVS     R7,#+7
   \   0000015C   0xE022             B.N      ??f_open_1
   2619          
   2620          #else				/* R/O configuration */
   2621          		if (res == FR_OK) {					/* Follow succeeded */
   2622          			dir = dj.dir;
   2623          			if (!dir) {						/* Current directory itself */
   2624          				res = FR_INVALID_NAME;
   2625          			} else {
   2626          				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
   2627          					res = FR_NO_FILE;
   2628          			}
   2629          		}
   2630          #endif
   2631          		FREE_BUF();
   2632          
   2633          		if (res == FR_OK) {
   2634          			fp->flag = mode;					/* File access mode */
   2635          			fp->err = 0;						/* Clear error flag */
   \                     ??f_open_13: (+1)
   \   0000015E   0x2000             MOVS     R0,#+0
   \   00000160   0xF888 0x5206      STRB     R5,[R8, #+518]
   \   00000164   0xF888 0x0207      STRB     R0,[R8, #+519]
   2636          			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
   \   00000168   0x9D83             LDR      R5,[SP, #+524]
   \   0000016A   0x4631             MOV      R1,R6
   \   0000016C   0x4628             MOV      R0,R5
   \   0000016E   0x.... 0x....      BL       ld_clust
   \   00000172   0xF8C8 0x0210      STR      R0,[R8, #+528]
   2637          			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
   \   00000176   0x7FB1             LDRB     R1,[R6, #+30]
   \   00000178   0x7FF0             LDRB     R0,[R6, #+31]
   \   0000017A   0x0409             LSLS     R1,R1,#+16
   \   0000017C   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000180   0x7F71             LDRB     R1,[R6, #+29]
   \   00000182   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000186   0x7F31             LDRB     R1,[R6, #+28]
   2638          			fp->fptr = 0;						/* File pointer */
   2639          			fp->dsect = 0;
   2640          #if _USE_FASTSEEK
   2641          			fp->cltbl = 0;						/* Normal seek mode */
   2642          #endif
   2643          			fp->fs = dj.fs;	 					/* Validate file object */
   \   00000188   0xF8C8 0x5200      STR      R5,[R8, #+512]
   \   0000018C   0x4308             ORRS     R0,R1,R0
   \   0000018E   0xF8C8 0x020C      STR      R0,[R8, #+524]
   \   00000192   0x2000             MOVS     R0,#+0
   \   00000194   0xF8C8 0x0208      STR      R0,[R8, #+520]
   \   00000198   0xF8C8 0x0218      STR      R0,[R8, #+536]
   2644          			fp->id = fp->fs->id;
   \   0000019C   0xF8B5 0x0206      LDRH     R0,[R5, #+518]
   \   000001A0   0xF8A8 0x0204      STRH     R0,[R8, #+516]
   2645          		}
   2646          	}
   2647          
   2648          	LEAVE_FF(dj.fs, res);
   \                     ??f_open_1: (+1)
   \   000001A4   0x4638             MOV      R0,R7
   \                     ??f_open_0: (+1)
   \   000001A6   0xF50D 0x7D0D      ADD      SP,SP,#+564
   \   000001AA   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   2649          }
   2650          
   2651          
   2652          
   2653          
   2654          /*-----------------------------------------------------------------------*/
   2655          /* Read File                                                             */
   2656          /*-----------------------------------------------------------------------*/
   2657          

   \                                 In section .text, align 4, keep-with-next
   2658          FRESULT f_read (
   2659          	FIL* fp, 		/* Pointer to the file object */
   2660          	void* buff,		/* Pointer to data buffer */
   2661          	UINT btr,		/* Number of bytes to read */
   2662          	UINT* br		/* Pointer to number of bytes read */
   2663          )
   2664          {
   \                     f_read: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4682             MOV      R10,R0
   \   00000006   0x461E             MOV      R6,R3
   2665          	FRESULT res;
   2666          	DWORD clst, sect, remain;
   2667          	UINT rcnt, cc;
   2668          	BYTE csect, *rbuff = (BYTE*)buff;
   2669          
   2670          
   2671          	*br = 0;	/* Clear read byte counter */
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4617             MOV      R7,R2
   \   0000000C   0x6030             STR      R0,[R6, #+0]
   \   0000000E   0x4688             MOV      R8,R1
   2672          
   2673          	res = validate(fp);							/* Check validity */
   \   00000010   0x4650             MOV      R0,R10
   \   00000012   0x.... 0x....      BL       validate
   2674          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xBF04             ITT      EQ 
   \   0000001A   0xF89A 0x0207      LDRBEQ   R0,[R10, #+519]
   \   0000001E   0x2800             CMPEQ    R0,#+0
   2675          	if (fp->err)								/* Check error */
   \   00000020   0xF040 0x80B6      BNE.W    ??f_read_0
   2676          		LEAVE_FF(fp->fs, (FRESULT)fp->err);
   2677          	if (!(fp->flag & FA_READ)) 					/* Check access mode */
   \   00000024   0xF89A 0x0206      LDRB     R0,[R10, #+518]
   \   00000028   0x07C0             LSLS     R0,R0,#+31
   \   0000002A   0xBF58             IT       PL 
   \   0000002C   0x2007             MOVPL    R0,#+7
   2678          		LEAVE_FF(fp->fs, FR_DENIED);
   \   0000002E   0xF140 0x80AF      BPL.W    ??f_read_0
   2679          	remain = fp->fsize - fp->fptr;
   \   00000032   0xF8DA 0x020C      LDR      R0,[R10, #+524]
   \   00000036   0xF8DA 0x1208      LDR      R1,[R10, #+520]
   \   0000003A   0x1A40             SUBS     R0,R0,R1
   2680          	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   \   0000003C   0x42B8             CMP      R0,R7
   \   0000003E   0xD821             BHI.N    ??f_read_1
   \   00000040   0x4607             MOV      R7,R0
   \   00000042   0xE01F             B.N      ??f_read_1
   2681          
   2682          	for ( ;  btr;								/* Repeat until all data read */
   2683          		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   2684          		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
   2685          			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2686          			if (!csect) {						/* On the cluster boundary? */
   2687          				if (fp->fptr == 0) {			/* On the top of the file? */
   2688          					clst = fp->sclust;			/* Follow from the origin */
   2689          				} else {						/* Middle or end of the file */
   2690          #if _USE_FASTSEEK
   2691          					if (fp->cltbl)
   2692          						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
   2693          					else
   2694          #endif
   2695          						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
   2696          				}
   2697          				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   2698          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2699          				fp->clust = clst;				/* Update current cluster */
   2700          			}
   2701          			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2702          			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2703          			sect += csect;
   2704          			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
   2705          			if (cc) {							/* Read maximum contiguous sectors directly */
   2706          				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2707          					cc = fp->fs->csize - csect;
   2708          				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
   2709          					ABORT(fp->fs, FR_DISK_ERR);
   2710          #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
   2711          #if _FS_TINY
   2712          				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
   2713          					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
   2714          #else
   2715          				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
   2716          					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
   2717          #endif
   2718          #endif
   2719          				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
   2720          				continue;
   2721          			}
   2722          #if !_FS_TINY
   2723          			if (fp->dsect != sect) {			/* Load data sector if not in cache */
   2724          #if !_FS_READONLY
   2725          				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
   2726          					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
   2727          						ABORT(fp->fs, FR_DISK_ERR);
   2728          					fp->flag &= ~FA__DIRTY;
   2729          				}
   2730          #endif
   2731          				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
   2732          					ABORT(fp->fs, FR_DISK_ERR);
   2733          			}
   2734          #endif
   2735          			fp->dsect = sect;
   \                     ??f_read_2: (+1)
   \   00000044   0xF8CA 0x9218      STR      R9,[R10, #+536]
   2736          		}
   2737          		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   \                     ??f_read_3: (+1)
   \   00000048   0xF8DA 0x0208      LDR      R0,[R10, #+520]
   2738          		if (rcnt > btr) rcnt = btr;
   2739          #if _FS_TINY
   2740          		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
   2741          			ABORT(fp->fs, FR_DISK_ERR);
   2742          		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   2743          #else
   2744          		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   \   0000004C   0x4642             MOV      R2,R8
   \   0000004E   0x05C0             LSLS     R0,R0,#+23
   \   00000050   0x0DC0             LSRS     R0,R0,#+23
   \   00000052   0xF5C0 0x7100      RSB      R1,R0,#+512
   \   00000056   0x428F             CMP      R7,R1
   \   00000058   0x4450             ADD      R0,R0,R10
   \   0000005A   0xBF98             IT       LS 
   \   0000005C   0x4639             MOVLS    R1,R7
   \   0000005E   0xB139             CBZ.N    R1,??f_read_4
   \   00000060   0xEA4F 0x0301      MOV.W    R3,R1
   \                     ??f_read_5: (+1)
   \   00000064   0xF810 0xCB01      LDRB     R12,[R0], #+1
   \   00000068   0x1E5B             SUBS     R3,R3,#+1
   \   0000006A   0xF802 0xCB01      STRB     R12,[R2], #+1
   \   0000006E   0xD1F9             BNE.N    ??f_read_5
   \                     ??f_read_4: (+1)
   \   00000070   0xF8DA 0x0208      LDR      R0,[R10, #+520]
   \   00000074   0x4488             ADD      R8,R1,R8
   \   00000076   0x1A7F             SUBS     R7,R7,R1
   \   00000078   0x1808             ADDS     R0,R1,R0
   \   0000007A   0xF8CA 0x0208      STR      R0,[R10, #+520]
   \   0000007E   0x6830             LDR      R0,[R6, #+0]
   \   00000080   0x1808             ADDS     R0,R1,R0
   \   00000082   0x6030             STR      R0,[R6, #+0]
   \                     ??f_read_1: (+1)
   \   00000084   0x2F00             CMP      R7,#+0
   \   00000086   0xF000 0x8082      BEQ.W    ??f_read_6
   \   0000008A   0xF8DA 0x1208      LDR      R1,[R10, #+520]
   \   0000008E   0x05C8             LSLS     R0,R1,#+23
   \   00000090   0xD1DA             BNE.N    ??f_read_3
   \   00000092   0xF8DA 0x0200      LDR      R0,[R10, #+512]
   \   00000096   0xF890 0x3202      LDRB     R3,[R0, #+514]
   \   0000009A   0x1E5B             SUBS     R3,R3,#+1
   \   0000009C   0xEA03 0x2451      AND      R4,R3,R1, LSR #+9
   \   000000A0   0xB2E4             UXTB     R4,R4
   \   000000A2   0xB974             CBNZ.N   R4,??f_read_7
   \   000000A4   0x2900             CMP      R1,#+0
   \   000000A6   0xBF0E             ITEE     EQ 
   \   000000A8   0xF8DA 0x0210      LDREQ    R0,[R10, #+528]
   \   000000AC   0xF8DA 0x1214      LDRNE    R1,[R10, #+532]
   \   000000B0   0x.... 0x....      BLNE     get_fat
   \   000000B4   0x2802             CMP      R0,#+2
   \   000000B6   0xD317             BCC.N    ??f_read_8
   \   000000B8   0xF110 0x0F01      CMN      R0,#+1
   \   000000BC   0xD062             BEQ.N    ??f_read_9
   \   000000BE   0xF8CA 0x0214      STR      R0,[R10, #+532]
   \                     ??f_read_7: (+1)
   \   000000C2   0xF8DA 0x0200      LDR      R0,[R10, #+512]
   \   000000C6   0xF8DA 0x2214      LDR      R2,[R10, #+532]
   \   000000CA   0xF500 0x7305      ADD      R3,R0,#+532
   \   000000CE   0x1E92             SUBS     R2,R2,#+2
   \   000000D0   0xF8D3 0xC000      LDR      R12,[R3, #+0]
   \   000000D4   0xF1AC 0x0C02      SUB      R12,R12,#+2
   \   000000D8   0x4562             CMP      R2,R12
   \   000000DA   0xD205             BCS.N    ??f_read_8
   \   000000DC   0xF890 0x1202      LDRB     R1,[R0, #+514]
   \   000000E0   0x695B             LDR      R3,[R3, #+20]
   \   000000E2   0xFB01 0x3202      MLA      R2,R1,R2,R3
   \   000000E6   0xB922             CBNZ.N   R2,??f_read_10
   \                     ??f_read_8: (+1)
   \   000000E8   0x2002             MOVS     R0,#+2
   \   000000EA   0xF88A 0x0207      STRB     R0,[R10, #+519]
   \   000000EE   0xE8BD 0x87F0      POP      {R4-R10,PC}
   \                     ??f_read_10: (+1)
   \   000000F2   0x0A7D             LSRS     R5,R7,#+9
   \   000000F4   0xEB04 0x0902      ADD      R9,R4,R2
   \   000000F8   0xD022             BEQ.N    ??f_read_11
   \   000000FA   0x192A             ADDS     R2,R5,R4
   \   000000FC   0x4291             CMP      R1,R2
   \   000000FE   0x464A             MOV      R2,R9
   \   00000100   0xBF38             IT       CC 
   \   00000102   0x1B0D             SUBCC    R5,R1,R4
   \   00000104   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   00000108   0x462B             MOV      R3,R5
   \   0000010A   0x4641             MOV      R1,R8
   \   0000010C   0x.... 0x....      BL       disk_read
   \   00000110   0xBBC0             CBNZ.N   R0,??f_read_9
   \   00000112   0xF89A 0x0206      LDRB     R0,[R10, #+518]
   \   00000116   0x0640             LSLS     R0,R0,#+25
   \   00000118   0xD510             BPL.N    ??f_read_12
   \   0000011A   0xF8DA 0x0218      LDR      R0,[R10, #+536]
   \   0000011E   0xEBA0 0x0009      SUB      R0,R0,R9
   \   00000122   0x42A8             CMP      R0,R5
   \   00000124   0xD20A             BCS.N    ??f_read_12
   \   00000126   0xEB08 0x2040      ADD      R0,R8,R0, LSL #+9
   \   0000012A   0x4651             MOV      R1,R10
   \   0000012C   0xF44F 0x7200      MOV      R2,#+512
   \                     ??f_read_13: (+1)
   \   00000130   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000134   0x1E52             SUBS     R2,R2,#+1
   \   00000136   0xF800 0x3B01      STRB     R3,[R0], #+1
   \   0000013A   0xD1F9             BNE.N    ??f_read_13
   \                     ??f_read_12: (+1)
   \   0000013C   0x0269             LSLS     R1,R5,#+9
   \   0000013E   0xE797             B.N      ??f_read_4
   \                     ??f_read_11: (+1)
   \   00000140   0xF8DA 0x2218      LDR      R2,[R10, #+536]
   \   00000144   0x454A             CMP      R2,R9
   \   00000146   0xF43F 0xAF7D      BEQ.W    ??f_read_2
   \   0000014A   0xF89A 0x1206      LDRB     R1,[R10, #+518]
   \   0000014E   0x0649             LSLS     R1,R1,#+25
   \   00000150   0xD50C             BPL.N    ??f_read_14
   \   00000152   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   00000156   0x2301             MOVS     R3,#+1
   \   00000158   0x4651             MOV      R1,R10
   \   0000015A   0x.... 0x....      BL       disk_write
   \   0000015E   0xB988             CBNZ.N   R0,??f_read_9
   \   00000160   0xF89A 0x0206      LDRB     R0,[R10, #+518]
   \   00000164   0xF000 0x00BF      AND      R0,R0,#0xBF
   \   00000168   0xF88A 0x0206      STRB     R0,[R10, #+518]
   \                     ??f_read_14: (+1)
   \   0000016C   0xF8DA 0x0200      LDR      R0,[R10, #+512]
   \   00000170   0x2301             MOVS     R3,#+1
   \   00000172   0x464A             MOV      R2,R9
   \   00000174   0x4651             MOV      R1,R10
   \   00000176   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   0000017A   0x.... 0x....      BL       disk_read
   \   0000017E   0x2800             CMP      R0,#+0
   \   00000180   0xF43F 0xAF60      BEQ.W    ??f_read_2
   \                     ??f_read_9: (+1)
   \   00000184   0x2001             MOVS     R0,#+1
   \   00000186   0xF88A 0x0207      STRB     R0,[R10, #+519]
   \   0000018A   0xE8BD 0x87F0      POP      {R4-R10,PC}
   2745          #endif
   2746          	}
   2747          
   2748          	LEAVE_FF(fp->fs, FR_OK);
   \                     ??f_read_6: (+1)
   \   0000018E   0x2000             MOVS     R0,#+0
   \                     ??f_read_0: (+1)
   \   00000190   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   2749          }
   2750          
   2751          
   2752          
   2753          
   2754          #if !_FS_READONLY
   2755          /*-----------------------------------------------------------------------*/
   2756          /* Write File                                                            */
   2757          /*-----------------------------------------------------------------------*/
   2758          

   \                                 In section .text, align 4, keep-with-next
   2759          FRESULT f_write (
   2760          	FIL* fp,			/* Pointer to the file object */
   2761          	const void *buff,	/* Pointer to the data to be written */
   2762          	UINT btw,			/* Number of bytes to write */
   2763          	UINT* bw			/* Pointer to number of bytes written */
   2764          )
   2765          {
   \                     f_write: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4681             MOV      R9,R0
   2766          	FRESULT res;
   2767          	DWORD clst, sect;
   2768          	UINT wcnt, cc;
   2769          	const BYTE *wbuff = (const BYTE*)buff;
   2770          	BYTE csect;
   2771          
   2772          
   2773          	*bw = 0;	/* Clear write byte counter */
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6018             STR      R0,[R3, #+0]
   \   0000000A   0x4692             MOV      R10,R2
   \   0000000C   0x4688             MOV      R8,R1
   2774          
   2775          	res = validate(fp);						/* Check validity */
   \   0000000E   0x4648             MOV      R0,R9
   \   00000010   0x.... 0x....      BL       validate
   2776          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xBF04             ITT      EQ 
   \   00000018   0xF899 0x0207      LDRBEQ   R0,[R9, #+519]
   \   0000001C   0x2800             CMPEQ    R0,#+0
   2777          	if (fp->err)							/* Check error */
   \   0000001E   0xD11B             BNE.N    ??f_write_0
   2778          		LEAVE_FF(fp->fs, (FRESULT)fp->err);
   2779          	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   \   00000020   0xF899 0x0206      LDRB     R0,[R9, #+518]
   \   00000024   0x0780             LSLS     R0,R0,#+30
   \   00000026   0xBF58             IT       PL 
   \   00000028   0x2007             MOVPL    R0,#+7
   2780          		LEAVE_FF(fp->fs, FR_DENIED);
   \   0000002A   0xD515             BPL.N    ??f_write_0
   2781          	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
   \   0000002C   0xF8D9 0x0208      LDR      R0,[R9, #+520]
   \   00000030   0xEB0A 0x0100      ADD      R1,R10,R0
   \   00000034   0x4281             CMP      R1,R0
   \   00000036   0xD23C             BCS.N    ??f_write_1
   2782          
   2783          	for ( ;  btw;							/* Repeat until all data written */
   2784          		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2785          		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2786          			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2787          			if (!csect) {					/* On the cluster boundary? */
   2788          				if (fp->fptr == 0) {		/* On the top of the file? */
   2789          					clst = fp->sclust;		/* Follow from the origin */
   2790          					if (clst == 0)			/* When no cluster is allocated, */
   2791          						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2792          				} else {					/* Middle or end of the file */
   2793          #if _USE_FASTSEEK
   2794          					if (fp->cltbl)
   2795          						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
   2796          					else
   2797          #endif
   2798          						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2799          				}
   2800          				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2801          				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2802          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2803          				fp->clust = clst;			/* Update current cluster */
   2804          				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
   2805          			}
   2806          #if _FS_TINY
   2807          			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
   2808          				ABORT(fp->fs, FR_DISK_ERR);
   2809          #else
   2810          			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
   2811          				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
   2812          					ABORT(fp->fs, FR_DISK_ERR);
   2813          				fp->flag &= ~FA__DIRTY;
   2814          			}
   2815          #endif
   2816          			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2817          			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2818          			sect += csect;
   2819          			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2820          			if (cc) {						/* Write maximum contiguous sectors directly */
   2821          				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2822          					cc = fp->fs->csize - csect;
   2823          				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
   2824          					ABORT(fp->fs, FR_DISK_ERR);
   2825          #if _FS_MINIMIZE <= 2
   2826          #if _FS_TINY
   2827          				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2828          					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2829          					fp->fs->wflag = 0;
   2830          				}
   2831          #else
   2832          				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
   2833          					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
   2834          					fp->flag &= ~FA__DIRTY;
   2835          				}
   2836          #endif
   2837          #endif
   2838          				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2839          				continue;
   2840          			}
   2841          #if _FS_TINY
   2842          			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2843          				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
   2844          				fp->fs->winsect = sect;
   2845          			}
   2846          #else
   2847          			if (fp->dsect != sect) {		/* Fill sector cache with file data */
   2848          				if (fp->fptr < fp->fsize &&
   2849          					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
   2850          						ABORT(fp->fs, FR_DISK_ERR);
   2851          			}
   2852          #endif
   2853          			fp->dsect = sect;
   2854          		}
   2855          		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2856          		if (wcnt > btw) wcnt = btw;
   2857          #if _FS_TINY
   2858          		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
   2859          			ABORT(fp->fs, FR_DISK_ERR);
   2860          		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2861          		fp->fs->wflag = 1;
   2862          #else
   2863          		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2864          		fp->flag |= FA__DIRTY;
   2865          #endif
   2866          	}
   2867          
   2868          	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   \                     ??f_write_2: (+1)
   \   00000038   0xF8D9 0x020C      LDR      R0,[R9, #+524]
   \   0000003C   0xF8D9 0x1208      LDR      R1,[R9, #+520]
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xBF38             IT       CC 
   \   00000044   0x4608             MOVCC    R0,R1
   \   00000046   0xF8C9 0x020C      STR      R0,[R9, #+524]
   2869          	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   \   0000004A   0xF899 0x0206      LDRB     R0,[R9, #+518]
   \   0000004E   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000052   0xF889 0x0206      STRB     R0,[R9, #+518]
   2870          
   2871          	LEAVE_FF(fp->fs, FR_OK);
   \   00000056   0x2000             MOVS     R0,#+0
   \                     ??f_write_0: (+1)
   \   00000058   0xB001             ADD      SP,SP,#+4
   \   0000005A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \   0000005E   0xBF00             Nop      
   \                     ??f_write_3: (+1)
   \   00000060   0xF8C9 0x5218      STR      R5,[R9, #+536]
   \                     ??f_write_4: (+1)
   \   00000064   0xF8D9 0x0208      LDR      R0,[R9, #+520]
   \   00000068   0x4642             MOV      R2,R8
   \   0000006A   0x05C1             LSLS     R1,R0,#+23
   \   0000006C   0x0DC9             LSRS     R1,R1,#+23
   \   0000006E   0xF5C1 0x7000      RSB      R0,R1,#+512
   \   00000072   0x4582             CMP      R10,R0
   \   00000074   0x4449             ADD      R1,R1,R9
   \   00000076   0xBF98             IT       LS 
   \   00000078   0x4650             MOVLS    R0,R10
   \   0000007A   0xB138             CBZ.N    R0,??f_write_5
   \   0000007C   0xEA4F 0x0300      MOV.W    R3,R0
   \                     ??f_write_6: (+1)
   \   00000080   0xF812 0x7B01      LDRB     R7,[R2], #+1
   \   00000084   0x1E5B             SUBS     R3,R3,#+1
   \   00000086   0xF801 0x7B01      STRB     R7,[R1], #+1
   \   0000008A   0xD1F9             BNE.N    ??f_write_6
   \                     ??f_write_5: (+1)
   \   0000008C   0xF899 0x1206      LDRB     R1,[R9, #+518]
   \   00000090   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000094   0xF889 0x1206      STRB     R1,[R9, #+518]
   \                     ??f_write_7: (+1)
   \   00000098   0xF8D9 0x1208      LDR      R1,[R9, #+520]
   \   0000009C   0x4480             ADD      R8,R0,R8
   \   0000009E   0xEBAA 0x0A00      SUB      R10,R10,R0
   \   000000A2   0x1841             ADDS     R1,R0,R1
   \   000000A4   0xF8C9 0x1208      STR      R1,[R9, #+520]
   \   000000A8   0x9900             LDR      R1,[SP, #+0]
   \   000000AA   0x9A00             LDR      R2,[SP, #+0]
   \   000000AC   0x6809             LDR      R1,[R1, #+0]
   \   000000AE   0x1841             ADDS     R1,R0,R1
   \   000000B0   0x6011             STR      R1,[R2, #+0]
   \                     ??f_write_1: (+1)
   \   000000B2   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000B6   0xD0BF             BEQ.N    ??f_write_2
   \   000000B8   0xF8D9 0x0208      LDR      R0,[R9, #+520]
   \   000000BC   0x05C1             LSLS     R1,R0,#+23
   \   000000BE   0xD1D1             BNE.N    ??f_write_4
   \   000000C0   0xF8D9 0x4200      LDR      R4,[R9, #+512]
   \   000000C4   0xF894 0x2202      LDRB     R2,[R4, #+514]
   \   000000C8   0x1E52             SUBS     R2,R2,#+1
   \   000000CA   0xEA02 0x2750      AND      R7,R2,R0, LSR #+9
   \   000000CE   0xB2FF             UXTB     R7,R7
   \   000000D0   0x2F00             CMP      R7,#+0
   \   000000D2   0xF040 0x80C7      BNE.W    ??f_write_8
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xF040 0x80B0      BNE.W    ??f_write_9
   \   000000DC   0xF8D9 0x0210      LDR      R0,[R9, #+528]
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xF040 0x80B0      BNE.W    ??f_write_10
   \   000000E6   0xF8D4 0x620C      LDR      R6,[R4, #+524]
   \   000000EA   0xB11E             CBZ.N    R6,??f_write_11
   \   000000EC   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   000000F0   0x4286             CMP      R6,R0
   \   000000F2   0xD300             BCC.N    ??f_write_12
   \                     ??f_write_11: (+1)
   \   000000F4   0x2601             MOVS     R6,#+1
   \                     ??f_write_12: (+1)
   \   000000F6   0x4635             MOV      R5,R6
   \                     ??f_write_13: (+1)
   \   000000F8   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   000000FC   0x1C6D             ADDS     R5,R5,#+1
   \   000000FE   0x4285             CMP      R5,R0
   \   00000100   0xD302             BCC.N    ??f_write_14
   \   00000102   0x2502             MOVS     R5,#+2
   \   00000104   0x2E02             CMP      R6,#+2
   \   00000106   0xD397             BCC.N    ??f_write_2
   \                     ??f_write_14: (+1)
   \   00000108   0x4629             MOV      R1,R5
   \   0000010A   0x4620             MOV      R0,R4
   \   0000010C   0x.... 0x....      BL       get_fat
   \   00000110   0x2800             CMP      R0,#+0
   \   00000112   0xF040 0x808A      BNE.W    ??f_write_15
   \   00000116   0x2D02             CMP      R5,#+2
   \   00000118   0xD36C             BCC.N    ??f_write_16
   \   0000011A   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   0000011E   0x4285             CMP      R5,R0
   \   00000120   0xD268             BCS.N    ??f_write_16
   \   00000122   0xF894 0x0200      LDRB     R0,[R4, #+512]
   \   00000126   0x2801             CMP      R0,#+1
   \   00000128   0xD034             BEQ.N    ??f_write_17
   \   0000012A   0xD363             BCC.N    ??f_write_16
   \   0000012C   0x2803             CMP      R0,#+3
   \   0000012E   0xD001             BEQ.N    ??f_write_18
   \   00000130   0xD31C             BCC.N    ??f_write_19
   \   00000132   0xE05F             B.N      ??f_write_16
   \                     ??f_write_18: (+1)
   \   00000134   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000138   0xEB00 0x11D5      ADD      R1,R0,R5, LSR #+7
   \   0000013C   0x4620             MOV      R0,R4
   \   0000013E   0x.... 0x....      BL       move_window
   \   00000142   0x2800             CMP      R0,#+0
   \   00000144   0xD157             BNE.N    ??f_write_20
   \   00000146   0x00A9             LSLS     R1,R5,#+2
   \   00000148   0x05C9             LSLS     R1,R1,#+23
   \   0000014A   0xEB14 0x51D1      ADDS     R1,R4,R1, LSR #+23
   \   0000014E   0xF06F 0x4370      MVN      R3,#-268435456
   \   00000152   0x78CA             LDRB     R2,[R1, #+3]
   \   00000154   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   00000158   0x23FF             MOVS     R3,#+255
   \   0000015A   0x700B             STRB     R3,[R1, #+0]
   \   0000015C   0x0E12             LSRS     R2,R2,#+24
   \   0000015E   0x704B             STRB     R3,[R1, #+1]
   \   00000160   0x708B             STRB     R3,[R1, #+2]
   \   00000162   0x70CA             STRB     R2,[R1, #+3]
   \   00000164   0x2101             MOVS     R1,#+1
   \   00000166   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   0000016A   0xE044             B.N      ??f_write_20
   \                     ??f_write_19: (+1)
   \   0000016C   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000170   0xEB00 0x2115      ADD      R1,R0,R5, LSR #+8
   \   00000174   0x4620             MOV      R0,R4
   \   00000176   0x.... 0x....      BL       move_window
   \   0000017A   0x2800             CMP      R0,#+0
   \   0000017C   0xD13B             BNE.N    ??f_write_20
   \   0000017E   0x0069             LSLS     R1,R5,#+1
   \   00000180   0x05C9             LSLS     R1,R1,#+23
   \   00000182   0xEB14 0x51D1      ADDS     R1,R4,R1, LSR #+23
   \   00000186   0x23FF             MOVS     R3,#+255
   \   00000188   0x700B             STRB     R3,[R1, #+0]
   \   0000018A   0x704B             STRB     R3,[R1, #+1]
   \   0000018C   0x2101             MOVS     R1,#+1
   \   0000018E   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   00000192   0xE030             B.N      ??f_write_20
   \                     ??f_write_17: (+1)
   \   00000194   0xEB05 0x0655      ADD      R6,R5,R5, LSR #+1
   \   00000198   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   0000019C   0xEB00 0x2156      ADD      R1,R0,R6, LSR #+9
   \   000001A0   0x4620             MOV      R0,R4
   \   000001A2   0x.... 0x....      BL       move_window
   \   000001A6   0xBB30             CBNZ.N   R0,??f_write_20
   \   000001A8   0x05F0             LSLS     R0,R6,#+23
   \   000001AA   0x1C76             ADDS     R6,R6,#+1
   \   000001AC   0xEB14 0x51D0      ADDS     R1,R4,R0, LSR #+23
   \   000001B0   0xF015 0x0B01      ANDS     R11,R5,#0x1
   \   000001B4   0xBF1A             ITTE     NE 
   \   000001B6   0x7808             LDRBNE   R0,[R1, #+0]
   \   000001B8   0xF040 0x00F0      ORRNE    R0,R0,#0xF0
   \   000001BC   0x20FF             MOVEQ    R0,#+255
   \   000001BE   0x7008             STRB     R0,[R1, #+0]
   \   000001C0   0x2001             MOVS     R0,#+1
   \   000001C2   0xF884 0x0204      STRB     R0,[R4, #+516]
   \   000001C6   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   000001CA   0xEB00 0x2156      ADD      R1,R0,R6, LSR #+9
   \   000001CE   0x4620             MOV      R0,R4
   \   000001D0   0x.... 0x....      BL       move_window
   \   000001D4   0xB978             CBNZ.N   R0,??f_write_20
   \   000001D6   0x05F1             LSLS     R1,R6,#+23
   \   000001D8   0xEB14 0x51D1      ADDS     R1,R4,R1, LSR #+23
   \   000001DC   0xF1BB 0x0F00      CMP      R11,#+0
   \   000001E0   0xBF12             ITEE     NE 
   \   000001E2   0x22FF             MOVNE    R2,#+255
   \   000001E4   0x780A             LDRBEQ   R2,[R1, #+0]
   \   000001E6   0xF042 0x020F      ORREQ    R2,R2,#0xF
   \   000001EA   0x700A             STRB     R2,[R1, #+0]
   \   000001EC   0x2101             MOVS     R1,#+1
   \   000001EE   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   000001F2   0xE000             B.N      ??f_write_20
   \                     ??f_write_16: (+1)
   \   000001F4   0x2002             MOVS     R0,#+2
   \                     ??f_write_20: (+1)
   \   000001F6   0xB988             CBNZ.N   R0,??f_write_21
   \   000001F8   0xF8D4 0x0210      LDR      R0,[R4, #+528]
   \   000001FC   0xF8C4 0x520C      STR      R5,[R4, #+524]
   \   00000200   0xF110 0x0F01      CMN      R0,#+1
   \   00000204   0xD00F             BEQ.N    ??f_write_22
   \   00000206   0x1E40             SUBS     R0,R0,#+1
   \   00000208   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \   0000020C   0xF894 0x0205      LDRB     R0,[R4, #+517]
   \   00000210   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000214   0xF884 0x0205      STRB     R0,[R4, #+517]
   \   00000218   0x4628             MOV      R0,R5
   \   0000021A   0xE014             B.N      ??f_write_10
   \                     ??f_write_21: (+1)
   \   0000021C   0x2801             CMP      R0,#+1
   \   0000021E   0xBF0C             ITE      EQ 
   \   00000220   0xF04F 0x35FF      MOVEQ    R5,#-1
   \   00000224   0x2501             MOVNE    R5,#+1
   \                     ??f_write_22: (+1)
   \   00000226   0x4628             MOV      R0,R5
   \   00000228   0xE00D             B.N      ??f_write_10
   \                     ??f_write_15: (+1)
   \   0000022A   0xF110 0x0F01      CMN      R0,#+1
   \   0000022E   0xBF18             IT       NE 
   \   00000230   0x2801             CMPNE    R0,#+1
   \   00000232   0xD00B             BEQ.N    ??f_write_23
   \   00000234   0x42B5             CMP      R5,R6
   \   00000236   0xF47F 0xAF5F      BNE.W    ??f_write_13
   \   0000023A   0xE6FD             B.N      ??f_write_2
   \                     ??f_write_9: (+1)
   \   0000023C   0xF8D9 0x1214      LDR      R1,[R9, #+532]
   \   00000240   0x4620             MOV      R0,R4
   \   00000242   0x.... 0x....      BL       create_chain
   \                     ??f_write_10: (+1)
   \   00000246   0x2800             CMP      R0,#+0
   \   00000248   0xF43F 0xAEF6      BEQ.W    ??f_write_2
   \                     ??f_write_23: (+1)
   \   0000024C   0x2801             CMP      R0,#+1
   \   0000024E   0xD032             BEQ.N    ??f_write_24
   \   00000250   0xF110 0x0F01      CMN      R0,#+1
   \   00000254   0xD074             BEQ.N    ??f_write_25
   \   00000256   0xF8D9 0x1210      LDR      R1,[R9, #+528]
   \   0000025A   0xF8C9 0x0214      STR      R0,[R9, #+532]
   \   0000025E   0xB909             CBNZ.N   R1,??f_write_8
   \   00000260   0xF8C9 0x0210      STR      R0,[R9, #+528]
   \                     ??f_write_8: (+1)
   \   00000264   0xF899 0x0206      LDRB     R0,[R9, #+518]
   \   00000268   0x0640             LSLS     R0,R0,#+25
   \   0000026A   0xD511             BPL.N    ??f_write_26
   \   0000026C   0xF8D9 0x0200      LDR      R0,[R9, #+512]
   \   00000270   0xF8D9 0x2218      LDR      R2,[R9, #+536]
   \   00000274   0x2301             MOVS     R3,#+1
   \   00000276   0x4649             MOV      R1,R9
   \   00000278   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   0000027C   0x.... 0x....      BL       disk_write
   \   00000280   0x2800             CMP      R0,#+0
   \   00000282   0xD15D             BNE.N    ??f_write_25
   \   00000284   0xF899 0x0206      LDRB     R0,[R9, #+518]
   \   00000288   0xF000 0x00BF      AND      R0,R0,#0xBF
   \   0000028C   0xF889 0x0206      STRB     R0,[R9, #+518]
   \                     ??f_write_26: (+1)
   \   00000290   0xF8D9 0x0200      LDR      R0,[R9, #+512]
   \   00000294   0xF8D9 0x2214      LDR      R2,[R9, #+532]
   \   00000298   0xF500 0x7305      ADD      R3,R0,#+532
   \   0000029C   0x1E92             SUBS     R2,R2,#+2
   \   0000029E   0xF8D3 0xC000      LDR      R12,[R3, #+0]
   \   000002A2   0xF1AC 0x0C02      SUB      R12,R12,#+2
   \   000002A6   0x4562             CMP      R2,R12
   \   000002A8   0xD205             BCS.N    ??f_write_24
   \   000002AA   0xF890 0x1202      LDRB     R1,[R0, #+514]
   \   000002AE   0x695B             LDR      R3,[R3, #+20]
   \   000002B0   0xFB01 0x3202      MLA      R2,R1,R2,R3
   \   000002B4   0xB92A             CBNZ.N   R2,??f_write_27
   \                     ??f_write_24: (+1)
   \   000002B6   0x2002             MOVS     R0,#+2
   \   000002B8   0xF889 0x0207      STRB     R0,[R9, #+519]
   \   000002BC   0xB001             ADD      SP,SP,#+4
   \   000002BE   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??f_write_27: (+1)
   \   000002C2   0x18BD             ADDS     R5,R7,R2
   \   000002C4   0xEA5F 0x245A      LSRS     R4,R10,#+9
   \   000002C8   0xD024             BEQ.N    ??f_write_28
   \   000002CA   0x19E2             ADDS     R2,R4,R7
   \   000002CC   0x4291             CMP      R1,R2
   \   000002CE   0x462A             MOV      R2,R5
   \   000002D0   0xBF38             IT       CC 
   \   000002D2   0x1BCC             SUBCC    R4,R1,R7
   \   000002D4   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   000002D8   0x4623             MOV      R3,R4
   \   000002DA   0x4641             MOV      R1,R8
   \   000002DC   0x.... 0x....      BL       disk_write
   \   000002E0   0xBB70             CBNZ.N   R0,??f_write_25
   \   000002E2   0xF8D9 0x0218      LDR      R0,[R9, #+536]
   \   000002E6   0x1B40             SUBS     R0,R0,R5
   \   000002E8   0x42A0             CMP      R0,R4
   \   000002EA   0xD211             BCS.N    ??f_write_29
   \   000002EC   0xEA4F 0x0109      MOV.W    R1,R9
   \   000002F0   0xEB08 0x2040      ADD      R0,R8,R0, LSL #+9
   \   000002F4   0xF44F 0x7200      MOV      R2,#+512
   \                     ??f_write_30: (+1)
   \   000002F8   0xF810 0x3B01      LDRB     R3,[R0], #+1
   \   000002FC   0x1E52             SUBS     R2,R2,#+1
   \   000002FE   0xF801 0x3B01      STRB     R3,[R1], #+1
   \   00000302   0xD1F9             BNE.N    ??f_write_30
   \   00000304   0xF899 0x0206      LDRB     R0,[R9, #+518]
   \   00000308   0xF000 0x00BF      AND      R0,R0,#0xBF
   \   0000030C   0xF889 0x0206      STRB     R0,[R9, #+518]
   \                     ??f_write_29: (+1)
   \   00000310   0x0260             LSLS     R0,R4,#+9
   \   00000312   0xE6C1             B.N      ??f_write_7
   \                     ??f_write_28: (+1)
   \   00000314   0xF8D9 0x1218      LDR      R1,[R9, #+536]
   \   00000318   0x42A9             CMP      R1,R5
   \   0000031A   0xF43F 0xAEA1      BEQ.W    ??f_write_3
   \   0000031E   0xF8D9 0x1208      LDR      R1,[R9, #+520]
   \   00000322   0xF8D9 0x220C      LDR      R2,[R9, #+524]
   \   00000326   0x4291             CMP      R1,R2
   \   00000328   0xF4BF 0xAE9A      BCS.W    ??f_write_3
   \   0000032C   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   00000330   0x2301             MOVS     R3,#+1
   \   00000332   0x462A             MOV      R2,R5
   \   00000334   0x4649             MOV      R1,R9
   \   00000336   0x.... 0x....      BL       disk_read
   \   0000033A   0x2800             CMP      R0,#+0
   \   0000033C   0xF43F 0xAE90      BEQ.W    ??f_write_3
   \                     ??f_write_25: (+1)
   \   00000340   0x2001             MOVS     R0,#+1
   \   00000342   0xF889 0x0207      STRB     R0,[R9, #+519]
   \   00000346   0xB001             ADD      SP,SP,#+4
   \   00000348   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   2872          }
   2873          
   2874          
   2875          
   2876          
   2877          /*-----------------------------------------------------------------------*/
   2878          /* Synchronize the File                                                  */
   2879          /*-----------------------------------------------------------------------*/
   2880          

   \                                 In section .text, align 2, keep-with-next
   2881          FRESULT f_sync (
   2882          	FIL* fp		/* Pointer to the file object */
   2883          )
   2884          {
   \                     f_sync: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x4604             MOV      R4,R0
   2885          	FRESULT res;
   2886          	DWORD tm;
   2887          	BYTE *dir;
   2888          
   2889          
   2890          	res = validate(fp);					/* Check validity of the object */
   \   00000006   0x.... 0x....      BL       validate
   2891          	if (res == FR_OK) {
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD160             BNE.N    ??f_sync_0
   2892          		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   \   0000000E   0xF894 0x1206      LDRB     R1,[R4, #+518]
   \   00000012   0x068A             LSLS     R2,R1,#+26
   \   00000014   0xD55C             BPL.N    ??f_sync_0
   2893          			/* Write-back dirty buffer */
   2894          #if !_FS_TINY
   2895          			if (fp->flag & FA__DIRTY) {
   \   00000016   0x0648             LSLS     R0,R1,#+25
   \   00000018   0xD513             BPL.N    ??f_sync_1
   2896          				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
   \   0000001A   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   0000001E   0xF8D4 0x2218      LDR      R2,[R4, #+536]
   \   00000022   0x2301             MOVS     R3,#+1
   \   00000024   0x4621             MOV      R1,R4
   \   00000026   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   0000002A   0x.... 0x....      BL       disk_write
   \   0000002E   0xB110             CBZ.N    R0,??f_sync_2
   2897          					LEAVE_FF(fp->fs, FR_DISK_ERR);
   \   00000030   0x2001             MOVS     R0,#+1
   2898          				fp->flag &= ~FA__DIRTY;
   2899          			}
   2900          #endif
   2901          			/* Update the directory entry */
   2902          			res = move_window(fp->fs, fp->dir_sect);
   2903          			if (res == FR_OK) {
   2904          				dir = fp->dir_ptr;
   2905          				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2906          				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
   2907          				st_clust(dir, fp->sclust);					/* Update start cluster */
   2908          				tm = GET_FATTIME();							/* Update updated time */
   2909          				ST_DWORD(dir + DIR_WrtTime, tm);
   2910          				ST_WORD(dir + DIR_LstAccDate, 0);
   2911          				fp->flag &= ~FA__WRITTEN;
   2912          				fp->fs->wflag = 1;
   2913          				res = sync_fs(fp->fs);
   2914          			}
   2915          		}
   2916          	}
   2917          
   2918          	LEAVE_FF(fp->fs, res);
   \   00000032   0xB001             ADD      SP,SP,#+4
   \   00000034   0xBD30             POP      {R4,R5,PC}
   \                     ??f_sync_2: (+1)
   \   00000036   0xF894 0x0206      LDRB     R0,[R4, #+518]
   \   0000003A   0xF000 0x00BF      AND      R0,R0,#0xBF
   \   0000003E   0xF884 0x0206      STRB     R0,[R4, #+518]
   \                     ??f_sync_1: (+1)
   \   00000042   0xF8D4 0x121C      LDR      R1,[R4, #+540]
   \   00000046   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   0000004A   0x.... 0x....      BL       move_window
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD13E             BNE.N    ??f_sync_0
   \   00000052   0xF8D4 0x5220      LDR      R5,[R4, #+544]
   \   00000056   0x7AE8             LDRB     R0,[R5, #+11]
   \   00000058   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000005C   0x72E8             STRB     R0,[R5, #+11]
   \   0000005E   0xF8D4 0x020C      LDR      R0,[R4, #+524]
   \   00000062   0x7728             STRB     R0,[R5, #+28]
   \   00000064   0xF8D4 0x020C      LDR      R0,[R4, #+524]
   \   00000068   0x0400             LSLS     R0,R0,#+16
   \   0000006A   0x0E00             LSRS     R0,R0,#+24
   \   0000006C   0x7768             STRB     R0,[R5, #+29]
   \   0000006E   0xF8D4 0x020C      LDR      R0,[R4, #+524]
   \   00000072   0x0C00             LSRS     R0,R0,#+16
   \   00000074   0x77A8             STRB     R0,[R5, #+30]
   \   00000076   0xF8D4 0x020C      LDR      R0,[R4, #+524]
   \   0000007A   0x0E00             LSRS     R0,R0,#+24
   \   0000007C   0x77E8             STRB     R0,[R5, #+31]
   \   0000007E   0xF8D4 0x0210      LDR      R0,[R4, #+528]
   \   00000082   0x76A8             STRB     R0,[R5, #+26]
   \   00000084   0x0401             LSLS     R1,R0,#+16
   \   00000086   0x0C00             LSRS     R0,R0,#+16
   \   00000088   0x7528             STRB     R0,[R5, #+20]
   \   0000008A   0x0E09             LSRS     R1,R1,#+24
   \   0000008C   0x0A00             LSRS     R0,R0,#+8
   \   0000008E   0x76E9             STRB     R1,[R5, #+27]
   \   00000090   0x7568             STRB     R0,[R5, #+21]
   \   00000092   0x.... 0x....      BL       get_fattime
   \   00000096   0x75A8             STRB     R0,[R5, #+22]
   \   00000098   0x0401             LSLS     R1,R0,#+16
   \   0000009A   0x0E09             LSRS     R1,R1,#+24
   \   0000009C   0x75E9             STRB     R1,[R5, #+23]
   \   0000009E   0x0C01             LSRS     R1,R0,#+16
   \   000000A0   0x0E00             LSRS     R0,R0,#+24
   \   000000A2   0x7629             STRB     R1,[R5, #+24]
   \   000000A4   0x7668             STRB     R0,[R5, #+25]
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x74A8             STRB     R0,[R5, #+18]
   \   000000AA   0x74E8             STRB     R0,[R5, #+19]
   \   000000AC   0xF894 0x0206      LDRB     R0,[R4, #+518]
   \   000000B0   0xF8D4 0x1200      LDR      R1,[R4, #+512]
   \   000000B4   0xF000 0x00DF      AND      R0,R0,#0xDF
   \   000000B8   0xF884 0x0206      STRB     R0,[R4, #+518]
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0xF881 0x0204      STRB     R0,[R1, #+516]
   \   000000C2   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   000000C6   0xB001             ADD      SP,SP,#+4
   \   000000C8   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   000000CC   0x.... 0x....      B.W      sync_fs
   \                     ??f_sync_0: (+1)
   \   000000D0   0xB001             ADD      SP,SP,#+4
   \   000000D2   0xBD30             POP      {R4,R5,PC}       ;; return
   2919          }
   2920          
   2921          #endif /* !_FS_READONLY */
   2922          
   2923          
   2924          
   2925          
   2926          /*-----------------------------------------------------------------------*/
   2927          /* Close File                                                            */
   2928          /*-----------------------------------------------------------------------*/
   2929          

   \                                 In section .text, align 2, keep-with-next
   2930          FRESULT f_close (
   2931          	FIL *fp		/* Pointer to the file object to be closed */
   2932          )
   2933          {
   \                     f_close: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   2934          	FRESULT res;
   2935          
   2936          
   2937          #if !_FS_READONLY
   2938          	res = f_sync(fp);					/* Flush cached data */
   \   00000004   0x.... 0x....      BL       f_sync
   2939          	if (res == FR_OK)
   \   00000008   0xB958             CBNZ.N   R0,??f_close_0
   2940          #endif
   2941          	{
   2942          		res = validate(fp);				/* Lock volume */
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       validate
   2943          		if (res == FR_OK) {
   \   00000010   0xB938             CBNZ.N   R0,??f_close_0
   2944          #if _FS_REENTRANT
   2945          			FATFS *fs = fp->fs;
   2946          #endif
   2947          #if _FS_LOCK
   2948          			res = dec_lock(fp->lockid);	/* Decrement file open counter */
   \   00000012   0xF8D4 0x0224      LDR      R0,[R4, #+548]
   \   00000016   0x.... 0x....      BL       dec_lock
   2949          			if (res == FR_OK)
   \   0000001A   0xB910             CBNZ.N   R0,??f_close_0
   2950          #endif
   2951          				fp->fs = 0;				/* Invalidate file object */
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xF8C4 0x1200      STR      R1,[R4, #+512]
   2952          #if _FS_REENTRANT
   2953          			unlock_fs(fs, FR_OK);		/* Unlock volume */
   2954          #endif
   2955          		}
   2956          	}
   2957          	return res;
   \                     ??f_close_0: (+1)
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
   2958          }
   2959          
   2960          
   2961          
   2962          
   2963          /*-----------------------------------------------------------------------*/
   2964          /* Change Current Directory or Current Drive, Get Current Directory      */
   2965          /*-----------------------------------------------------------------------*/
   2966          
   2967          #if _FS_RPATH >= 1
   2968          #if _VOLUMES >= 2
   2969          FRESULT f_chdrive (
   2970          	const TCHAR* path		/* Drive number */
   2971          )
   2972          {
   2973          	int vol;
   2974          
   2975          
   2976          	vol = get_ldnumber(&path);
   2977          	if (vol < 0) return FR_INVALID_DRIVE;
   2978          
   2979          	CurrVol = (BYTE)vol;
   2980          
   2981          	return FR_OK;
   2982          }
   2983          #endif
   2984          
   2985          
   2986          FRESULT f_chdir (
   2987          	const TCHAR* path	/* Pointer to the directory path */
   2988          )
   2989          {
   2990          	FRESULT res;
   2991          	DIR dj;
   2992          	DEFINE_NAMEBUF;
   2993          
   2994          
   2995          	/* Get logical drive number */
   2996          	res = find_volume(&dj.fs, &path, 0);
   2997          	if (res == FR_OK) {
   2998          		INIT_BUF(dj);
   2999          		res = follow_path(&dj, path);		/* Follow the path */
   3000          		FREE_BUF();
   3001          		if (res == FR_OK) {					/* Follow completed */
   3002          			if (!dj.dir) {
   3003          				dj.fs->cdir = dj.sclust;	/* Start directory itself */
   3004          			} else {
   3005          				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
   3006          					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
   3007          				else
   3008          					res = FR_NO_PATH;		/* Reached but a file */
   3009          			}
   3010          		}
   3011          		if (res == FR_NO_FILE) res = FR_NO_PATH;
   3012          	}
   3013          
   3014          	LEAVE_FF(dj.fs, res);
   3015          }
   3016          
   3017          
   3018          #if _FS_RPATH >= 2
   3019          FRESULT f_getcwd (
   3020          	TCHAR* buff,	/* Pointer to the directory path */
   3021          	UINT len		/* Size of path */
   3022          )
   3023          {
   3024          	FRESULT res;
   3025          	DIR dj;
   3026          	UINT i, n;
   3027          	DWORD ccl;
   3028          	TCHAR *tp;
   3029          	FILINFO fno;
   3030          	DEFINE_NAMEBUF;
   3031          
   3032          
   3033          	*buff = 0;
   3034          	/* Get logical drive number */
   3035          	res = find_volume(&dj.fs, (const TCHAR**)&buff, 0);	/* Get current volume */
   3036          	if (res == FR_OK) {
   3037          		INIT_BUF(dj);
   3038          		i = len;			/* Bottom of buffer (directory stack base) */
   3039          		dj.sclust = dj.fs->cdir;			/* Start to follow upper directory from current directory */
   3040          		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
   3041          			res = dir_sdi(&dj, 1);			/* Get parent directory */
   3042          			if (res != FR_OK) break;
   3043          			res = dir_read(&dj, 0);
   3044          			if (res != FR_OK) break;
   3045          			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent directory */
   3046          			res = dir_sdi(&dj, 0);
   3047          			if (res != FR_OK) break;
   3048          			do {							/* Find the entry links to the child directory */
   3049          				res = dir_read(&dj, 0);
   3050          				if (res != FR_OK) break;
   3051          				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
   3052          				res = dir_next(&dj, 0);	
   3053          			} while (res == FR_OK);
   3054          			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
   3055          			if (res != FR_OK) break;
   3056          #if _USE_LFN
   3057          			fno.lfname = buff;
   3058          			fno.lfsize = i;
   3059          #endif
   3060          			get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
   3061          			tp = fno.fname;
   3062          #if _USE_LFN
   3063          			if (*buff) tp = buff;
   3064          #endif
   3065          			for (n = 0; tp[n]; n++) ;
   3066          			if (i < n + 3) {
   3067          				res = FR_NOT_ENOUGH_CORE; break;
   3068          			}
   3069          			while (n) buff[--i] = tp[--n];
   3070          			buff[--i] = '/';
   3071          		}
   3072          		tp = buff;
   3073          		if (res == FR_OK) {
   3074          #if _VOLUMES >= 2
   3075          			*tp++ = '0' + CurrVol;			/* Put drive number */
   3076          			*tp++ = ':';
   3077          #endif
   3078          			if (i == len) {					/* Root-directory */
   3079          				*tp++ = '/';
   3080          			} else {						/* Sub-directroy */
   3081          				do		/* Add stacked path str */
   3082          					*tp++ = buff[i++];
   3083          				while (i < len);
   3084          			}
   3085          		}
   3086          		*tp = 0;
   3087          		FREE_BUF();
   3088          	}
   3089          
   3090          	LEAVE_FF(dj.fs, res);
   3091          }
   3092          #endif /* _FS_RPATH >= 2 */
   3093          #endif /* _FS_RPATH >= 1 */
   3094          
   3095          
   3096          
   3097          #if _FS_MINIMIZE <= 2
   3098          /*-----------------------------------------------------------------------*/
   3099          /* Seek File R/W Pointer                                                 */
   3100          /*-----------------------------------------------------------------------*/
   3101          

   \                                 In section .text, align 4, keep-with-next
   3102          FRESULT f_lseek (
   3103          	FIL* fp,		/* Pointer to the file object */
   3104          	DWORD ofs		/* File pointer from top of file */
   3105          )
   3106          {
   \                     f_lseek: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x4680             MOV      R8,R0
   \   00000008   0x468A             MOV      R10,R1
   3107          	FRESULT res;
   3108          	DWORD clst, bcs, nsect, ifptr;
   3109          #if _USE_FASTSEEK
   3110          	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
   3111          #endif
   3112          
   3113          
   3114          	res = validate(fp);					/* Check validity of the object */
   \   0000000A   0x.... 0x....      BL       validate
   3115          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000014   0xF040 0x82A1      BNE.W    ??f_lseek_0
   3116          	if (fp->err)						/* Check error */
   \   00000018   0xF898 0x0207      LDRB     R0,[R8, #+519]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xF040 0x829E      BNE.W    ??f_lseek_1
   3117          		LEAVE_FF(fp->fs, (FRESULT)fp->err);
   3118          
   3119          #if _USE_FASTSEEK
   3120          	if (fp->cltbl) {	/* Fast seek */
   3121          		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
   3122          			tbl = fp->cltbl;
   3123          			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
   3124          			cl = fp->sclust;			/* Top of the chain */
   3125          			if (cl) {
   3126          				do {
   3127          					/* Get a fragment */
   3128          					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
   3129          					do {
   3130          						pcl = cl; ncl++;
   3131          						cl = get_fat(fp->fs, cl);
   3132          						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
   3133          						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   3134          					} while (cl == pcl + 1);
   3135          					if (ulen <= tlen) {		/* Store the length and top of the fragment */
   3136          						*tbl++ = ncl; *tbl++ = tcl;
   3137          					}
   3138          				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
   3139          			}
   3140          			*fp->cltbl = ulen;	/* Number of items used */
   3141          			if (ulen <= tlen)
   3142          				*tbl = 0;		/* Terminate table */
   3143          			else
   3144          				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
   3145          
   3146          		} else {						/* Fast seek */
   3147          			if (ofs > fp->fsize)		/* Clip offset at the file size */
   3148          				ofs = fp->fsize;
   3149          			fp->fptr = ofs;				/* Set file pointer */
   3150          			if (ofs) {
   3151          				fp->clust = clmt_clust(fp, ofs - 1);
   3152          				dsc = clust2sect(fp->fs, fp->clust);
   3153          				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
   3154          				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
   3155          				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
   3156          #if !_FS_TINY
   3157          #if !_FS_READONLY
   3158          					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
   3159          						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
   3160          							ABORT(fp->fs, FR_DISK_ERR);
   3161          						fp->flag &= ~FA__DIRTY;
   3162          					}
   3163          #endif
   3164          					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
   3165          						ABORT(fp->fs, FR_DISK_ERR);
   3166          #endif
   3167          					fp->dsect = dsc;
   3168          				}
   3169          			}
   3170          		}
   3171          	} else
   3172          #endif
   3173          
   3174          	/* Normal Seek */
   3175          	{
   3176          		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
   3177          #if !_FS_READONLY
   3178          			 && !(fp->flag & FA_WRITE)
   3179          #endif
   3180          			) ofs = fp->fsize;
   \   00000022   0xF8D8 0x020C      LDR      R0,[R8, #+524]
   \   00000026   0x4550             CMP      R0,R10
   \   00000028   0xD204             BCS.N    ??f_lseek_2
   \   0000002A   0xF898 0x1206      LDRB     R1,[R8, #+518]
   \   0000002E   0x0789             LSLS     R1,R1,#+30
   \   00000030   0xBF58             IT       PL 
   \   00000032   0x4682             MOVPL    R10,R0
   3181          
   3182          		ifptr = fp->fptr;
   3183          		fp->fptr = nsect = 0;
   3184          		if (ofs) {
   \                     ??f_lseek_2: (+1)
   \   00000034   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000038   0xF8D8 0x0208      LDR      R0,[R8, #+520]
   \   0000003C   0xF04F 0x0900      MOV      R9,#+0
   \   00000040   0xF8C8 0x9208      STR      R9,[R8, #+520]
   \   00000044   0xF000 0x824E      BEQ.W    ??f_lseek_3
   3185          			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
   \   00000048   0xF8D8 0x4200      LDR      R4,[R8, #+512]
   \   0000004C   0xF894 0x1202      LDRB     R1,[R4, #+514]
   \   00000050   0x0249             LSLS     R1,R1,#+9
   \   00000052   0x9100             STR      R1,[SP, #+0]
   3186          			if (ifptr > 0 &&
   3187          				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   \   00000054   0xB198             CBZ.N    R0,??f_lseek_4
   \   00000056   0x9900             LDR      R1,[SP, #+0]
   \   00000058   0x9B00             LDR      R3,[SP, #+0]
   \   0000005A   0x1E40             SUBS     R0,R0,#+1
   \   0000005C   0xF1AA 0x0201      SUB      R2,R10,#+1
   \   00000060   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   00000064   0xFBB2 0xF2F3      UDIV     R2,R2,R3
   \   00000068   0x428A             CMP      R2,R1
   \   0000006A   0xD308             BCC.N    ??f_lseek_4
   3188          				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
   \   0000006C   0x1E59             SUBS     R1,R3,#+1
   \   0000006E   0x4388             BICS     R0,R0,R1
   \   00000070   0xF8C8 0x0208      STR      R0,[R8, #+520]
   3189          				ofs -= fp->fptr;
   \   00000074   0xEBAA 0x0A00      SUB      R10,R10,R0
   3190          				clst = fp->clust;
   \   00000078   0xF8D8 0x6214      LDR      R6,[R8, #+532]
   \   0000007C   0xE0BC             B.N      ??f_lseek_5
   3191          			} else {									/* When seek to back cluster, */
   3192          				clst = fp->sclust;						/* start from the first cluster */
   \                     ??f_lseek_4: (+1)
   \   0000007E   0xF8D8 0x6210      LDR      R6,[R8, #+528]
   3193          #if !_FS_READONLY
   3194          				if (clst == 0) {						/* If no cluster chain, create a new chain */
   \   00000082   0x2E00             CMP      R6,#+0
   \   00000084   0xF040 0x80B6      BNE.W    ??f_lseek_6
   3195          					clst = create_chain(fp->fs, 0);
   \   00000088   0xF8D4 0x720C      LDR      R7,[R4, #+524]
   \   0000008C   0xB11F             CBZ.N    R7,??f_lseek_7
   \   0000008E   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   00000092   0x4287             CMP      R7,R0
   \   00000094   0xD300             BCC.N    ??f_lseek_8
   \                     ??f_lseek_7: (+1)
   \   00000096   0x2701             MOVS     R7,#+1
   \                     ??f_lseek_8: (+1)
   \   00000098   0xEA4F 0x0507      MOV.W    R5,R7
   \                     ??f_lseek_9: (+1)
   \   0000009C   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   000000A0   0x1C6D             ADDS     R5,R5,#+1
   \   000000A2   0x4285             CMP      R5,R0
   \   000000A4   0xD303             BCC.N    ??f_lseek_10
   \   000000A6   0x2502             MOVS     R5,#+2
   \   000000A8   0x2F02             CMP      R7,#+2
   \   000000AA   0xF0C0 0x80A1      BCC.W    ??f_lseek_11
   \                     ??f_lseek_10: (+1)
   \   000000AE   0x4629             MOV      R1,R5
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       get_fat
   \   000000B6   0x2800             CMP      R0,#+0
   \   000000B8   0xF040 0x8089      BNE.W    ??f_lseek_12
   \   000000BC   0x2D02             CMP      R5,#+2
   \   000000BE   0xD36B             BCC.N    ??f_lseek_13
   \   000000C0   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   000000C4   0x4285             CMP      R5,R0
   \   000000C6   0xD267             BCS.N    ??f_lseek_13
   \   000000C8   0xF894 0x0200      LDRB     R0,[R4, #+512]
   \   000000CC   0x2801             CMP      R0,#+1
   \   000000CE   0xD034             BEQ.N    ??f_lseek_14
   \   000000D0   0xD362             BCC.N    ??f_lseek_13
   \   000000D2   0x2803             CMP      R0,#+3
   \   000000D4   0xD001             BEQ.N    ??f_lseek_15
   \   000000D6   0xD31C             BCC.N    ??f_lseek_16
   \   000000D8   0xE05E             B.N      ??f_lseek_13
   \                     ??f_lseek_15: (+1)
   \   000000DA   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   000000DE   0xEB00 0x11D5      ADD      R1,R0,R5, LSR #+7
   \   000000E2   0x4620             MOV      R0,R4
   \   000000E4   0x.... 0x....      BL       move_window
   \   000000E8   0x2800             CMP      R0,#+0
   \   000000EA   0xD156             BNE.N    ??f_lseek_17
   \   000000EC   0x00A9             LSLS     R1,R5,#+2
   \   000000EE   0x05C9             LSLS     R1,R1,#+23
   \   000000F0   0xEB14 0x52D1      ADDS     R2,R4,R1, LSR #+23
   \   000000F4   0xF06F 0x4370      MVN      R3,#-268435456
   \   000000F8   0x78D1             LDRB     R1,[R2, #+3]
   \   000000FA   0xEA43 0x6301      ORR      R3,R3,R1, LSL #+24
   \   000000FE   0x21FF             MOVS     R1,#+255
   \   00000100   0x7011             STRB     R1,[R2, #+0]
   \   00000102   0x7051             STRB     R1,[R2, #+1]
   \   00000104   0x7091             STRB     R1,[R2, #+2]
   \   00000106   0x0E19             LSRS     R1,R3,#+24
   \   00000108   0x70D1             STRB     R1,[R2, #+3]
   \   0000010A   0x2101             MOVS     R1,#+1
   \   0000010C   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   00000110   0xE043             B.N      ??f_lseek_17
   \                     ??f_lseek_16: (+1)
   \   00000112   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000116   0xEB00 0x2115      ADD      R1,R0,R5, LSR #+8
   \   0000011A   0x4620             MOV      R0,R4
   \   0000011C   0x.... 0x....      BL       move_window
   \   00000120   0x2800             CMP      R0,#+0
   \   00000122   0xD13A             BNE.N    ??f_lseek_17
   \   00000124   0x0069             LSLS     R1,R5,#+1
   \   00000126   0x05C9             LSLS     R1,R1,#+23
   \   00000128   0xEB14 0x52D1      ADDS     R2,R4,R1, LSR #+23
   \   0000012C   0x21FF             MOVS     R1,#+255
   \   0000012E   0x7011             STRB     R1,[R2, #+0]
   \   00000130   0x7051             STRB     R1,[R2, #+1]
   \   00000132   0x2101             MOVS     R1,#+1
   \   00000134   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   00000138   0xE02F             B.N      ??f_lseek_17
   \                     ??f_lseek_14: (+1)
   \   0000013A   0xEB05 0x0655      ADD      R6,R5,R5, LSR #+1
   \   0000013E   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000142   0xEB00 0x2156      ADD      R1,R0,R6, LSR #+9
   \   00000146   0x4620             MOV      R0,R4
   \   00000148   0x.... 0x....      BL       move_window
   \   0000014C   0xBB28             CBNZ.N   R0,??f_lseek_17
   \   0000014E   0x05F0             LSLS     R0,R6,#+23
   \   00000150   0x1C76             ADDS     R6,R6,#+1
   \   00000152   0xEB14 0x52D0      ADDS     R2,R4,R0, LSR #+23
   \   00000156   0xF015 0x0701      ANDS     R7,R5,#0x1
   \   0000015A   0xBF1A             ITTE     NE 
   \   0000015C   0x7810             LDRBNE   R0,[R2, #+0]
   \   0000015E   0xF040 0x00F0      ORRNE    R0,R0,#0xF0
   \   00000162   0x20FF             MOVEQ    R0,#+255
   \   00000164   0x7010             STRB     R0,[R2, #+0]
   \   00000166   0x2001             MOVS     R0,#+1
   \   00000168   0xF884 0x0204      STRB     R0,[R4, #+516]
   \   0000016C   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000170   0xEB00 0x2156      ADD      R1,R0,R6, LSR #+9
   \   00000174   0x4620             MOV      R0,R4
   \   00000176   0x.... 0x....      BL       move_window
   \   0000017A   0xB970             CBNZ.N   R0,??f_lseek_17
   \   0000017C   0x05F1             LSLS     R1,R6,#+23
   \   0000017E   0xEB14 0x52D1      ADDS     R2,R4,R1, LSR #+23
   \   00000182   0x2F00             CMP      R7,#+0
   \   00000184   0xBF12             ITEE     NE 
   \   00000186   0x21FF             MOVNE    R1,#+255
   \   00000188   0x7811             LDRBEQ   R1,[R2, #+0]
   \   0000018A   0xF041 0x010F      ORREQ    R1,R1,#0xF
   \   0000018E   0x7011             STRB     R1,[R2, #+0]
   \   00000190   0x2101             MOVS     R1,#+1
   \   00000192   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   00000196   0xE000             B.N      ??f_lseek_17
   \                     ??f_lseek_13: (+1)
   \   00000198   0x2002             MOVS     R0,#+2
   \                     ??f_lseek_17: (+1)
   \   0000019A   0xB988             CBNZ.N   R0,??f_lseek_18
   \   0000019C   0xF8D4 0x0210      LDR      R0,[R4, #+528]
   \   000001A0   0xF8C4 0x520C      STR      R5,[R4, #+524]
   \   000001A4   0xF110 0x0F01      CMN      R0,#+1
   \   000001A8   0xD00F             BEQ.N    ??f_lseek_19
   \   000001AA   0x1E40             SUBS     R0,R0,#+1
   \   000001AC   0x462E             MOV      R6,R5
   \   000001AE   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \   000001B2   0xF894 0x0205      LDRB     R0,[R4, #+517]
   \   000001B6   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000001BA   0xF884 0x0205      STRB     R0,[R4, #+517]
   \   000001BE   0xE010             B.N      ??f_lseek_20
   \                     ??f_lseek_18: (+1)
   \   000001C0   0x2801             CMP      R0,#+1
   \   000001C2   0xBF0C             ITE      EQ 
   \   000001C4   0xF04F 0x35FF      MOVEQ    R5,#-1
   \   000001C8   0x2501             MOVNE    R5,#+1
   \                     ??f_lseek_19: (+1)
   \   000001CA   0x462E             MOV      R6,R5
   \   000001CC   0xE009             B.N      ??f_lseek_20
   \                     ??f_lseek_12: (+1)
   \   000001CE   0xF110 0x0F01      CMN      R0,#+1
   \   000001D2   0xBF18             IT       NE 
   \   000001D4   0x2801             CMPNE    R0,#+1
   \   000001D6   0xD003             BEQ.N    ??f_lseek_21
   \   000001D8   0x42BD             CMP      R5,R7
   \   000001DA   0xF47F 0xAF5F      BNE.W    ??f_lseek_9
   \   000001DE   0xE007             B.N      ??f_lseek_11
   \                     ??f_lseek_21: (+1)
   \   000001E0   0x4606             MOV      R6,R0
   3196          					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   \                     ??f_lseek_20: (+1)
   \   000001E2   0x2E01             CMP      R6,#+1
   \   000001E4   0xF000 0x8176      BEQ.W    ??f_lseek_22
   3197          					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   \   000001E8   0xF116 0x0F01      CMN      R6,#+1
   \   000001EC   0xF000 0x819F      BEQ.W    ??f_lseek_23
   3198          					fp->sclust = clst;
   \                     ??f_lseek_11: (+1)
   \   000001F0   0xF8C8 0x6210      STR      R6,[R8, #+528]
   3199          				}
   3200          #endif
   3201          				fp->clust = clst;
   \                     ??f_lseek_6: (+1)
   \   000001F4   0xF8C8 0x6214      STR      R6,[R8, #+532]
   3202          			}
   3203          			if (clst != 0) {
   \                     ??f_lseek_5: (+1)
   \   000001F8   0xB9FE             CBNZ.N   R6,??f_lseek_24
   \   000001FA   0xE173             B.N      ??f_lseek_3
   3204          				while (ofs > bcs) {						/* Cluster following loop */
   3205          #if !_FS_READONLY
   3206          					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   3207          						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
   3208          						if (clst == 0) {				/* When disk gets full, clip file size */
   3209          							ofs = bcs; break;
   3210          						}
   3211          					} else
   3212          #endif
   3213          						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
   \                     ??f_lseek_25: (+1)
   \   000001FC   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   00000200   0x4631             MOV      R1,R6
   \   00000202   0x.... 0x....      BL       get_fat
   \   00000206   0x4606             MOV      R6,R0
   3214          					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   \                     ??f_lseek_26: (+1)
   \   00000208   0xF116 0x0F01      CMN      R6,#+1
   \   0000020C   0xF000 0x818F      BEQ.W    ??f_lseek_23
   3215          					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
   \   00000210   0x2E02             CMP      R6,#+2
   \   00000212   0xF0C0 0x815F      BCC.W    ??f_lseek_22
   \   00000216   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   0000021A   0xF8D0 0x0214      LDR      R0,[R0, #+532]
   \   0000021E   0x4286             CMP      R6,R0
   \   00000220   0xF080 0x8158      BCS.W    ??f_lseek_22
   3216          					fp->clust = clst;
   \   00000224   0xF8C8 0x6214      STR      R6,[R8, #+532]
   3217          					fp->fptr += bcs;
   \   00000228   0xF8D8 0x0208      LDR      R0,[R8, #+520]
   \   0000022C   0x9900             LDR      R1,[SP, #+0]
   \   0000022E   0x1808             ADDS     R0,R1,R0
   \   00000230   0xF8C8 0x0208      STR      R0,[R8, #+520]
   3218          					ofs -= bcs;
   \   00000234   0x9800             LDR      R0,[SP, #+0]
   \   00000236   0xEBAA 0x0A00      SUB      R10,R10,R0
   \                     ??f_lseek_24: (+1)
   \   0000023A   0x9800             LDR      R0,[SP, #+0]
   \   0000023C   0x4550             CMP      R0,R10
   \   0000023E   0xF080 0x8132      BCS.W    ??f_lseek_27
   \   00000242   0xF898 0x0206      LDRB     R0,[R8, #+518]
   \   00000246   0x0780             LSLS     R0,R0,#+30
   \   00000248   0xD5D8             BPL.N    ??f_lseek_25
   \   0000024A   0xF8D8 0x4200      LDR      R4,[R8, #+512]
   \   0000024E   0xB946             CBNZ.N   R6,??f_lseek_28
   \   00000250   0xF8D4 0x720C      LDR      R7,[R4, #+524]
   \   00000254   0xB11F             CBZ.N    R7,??f_lseek_29
   \   00000256   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   0000025A   0x4287             CMP      R7,R0
   \   0000025C   0xD370             BCC.N    ??f_lseek_30
   \                     ??f_lseek_29: (+1)
   \   0000025E   0x2701             MOVS     R7,#+1
   \   00000260   0xE06E             B.N      ??f_lseek_30
   \                     ??f_lseek_28: (+1)
   \   00000262   0x2E02             CMP      R6,#+2
   \   00000264   0xD35D             BCC.N    ??f_lseek_31
   \   00000266   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   0000026A   0x4286             CMP      R6,R0
   \   0000026C   0xD259             BCS.N    ??f_lseek_31
   \   0000026E   0xF894 0x0200      LDRB     R0,[R4, #+512]
   \   00000272   0xF04F 0x35FF      MOV      R5,#-1
   \   00000276   0x2801             CMP      R0,#+1
   \   00000278   0xD02F             BEQ.N    ??f_lseek_32
   \   0000027A   0xD352             BCC.N    ??f_lseek_31
   \   0000027C   0x2803             CMP      R0,#+3
   \   0000027E   0xD001             BEQ.N    ??f_lseek_33
   \   00000280   0xD31A             BCC.N    ??f_lseek_34
   \   00000282   0xE04E             B.N      ??f_lseek_31
   \                     ??f_lseek_33: (+1)
   \   00000284   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000288   0xEB00 0x11D6      ADD      R1,R0,R6, LSR #+7
   \   0000028C   0x4620             MOV      R0,R4
   \   0000028E   0x.... 0x....      BL       move_window
   \   00000292   0x2800             CMP      R0,#+0
   \   00000294   0xD146             BNE.N    ??f_lseek_35
   \   00000296   0x00B0             LSLS     R0,R6,#+2
   \   00000298   0x05C0             LSLS     R0,R0,#+23
   \   0000029A   0xEB14 0x50D0      ADDS     R0,R4,R0, LSR #+23
   \   0000029E   0x7882             LDRB     R2,[R0, #+2]
   \   000002A0   0x78C1             LDRB     R1,[R0, #+3]
   \   000002A2   0x0412             LSLS     R2,R2,#+16
   \   000002A4   0xEA42 0x6101      ORR      R1,R2,R1, LSL #+24
   \   000002A8   0x7842             LDRB     R2,[R0, #+1]
   \   000002AA   0x7800             LDRB     R0,[R0, #+0]
   \   000002AC   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   000002B0   0x4308             ORRS     R0,R0,R1
   \   000002B2   0x0105             LSLS     R5,R0,#+4
   \   000002B4   0x092D             LSRS     R5,R5,#+4
   \   000002B6   0xE035             B.N      ??f_lseek_35
   \                     ??f_lseek_34: (+1)
   \   000002B8   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   000002BC   0xEB00 0x2116      ADD      R1,R0,R6, LSR #+8
   \   000002C0   0x4620             MOV      R0,R4
   \   000002C2   0x.... 0x....      BL       move_window
   \   000002C6   0xBB68             CBNZ.N   R0,??f_lseek_35
   \   000002C8   0x0070             LSLS     R0,R6,#+1
   \   000002CA   0x05C0             LSLS     R0,R0,#+23
   \   000002CC   0xEB14 0x50D0      ADDS     R0,R4,R0, LSR #+23
   \   000002D0   0x7841             LDRB     R1,[R0, #+1]
   \   000002D2   0x7800             LDRB     R0,[R0, #+0]
   \   000002D4   0xEA40 0x2501      ORR      R5,R0,R1, LSL #+8
   \   000002D8   0xE024             B.N      ??f_lseek_35
   \                     ??f_lseek_32: (+1)
   \   000002DA   0xEB06 0x0756      ADD      R7,R6,R6, LSR #+1
   \   000002DE   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   000002E2   0xEB00 0x2157      ADD      R1,R0,R7, LSR #+9
   \   000002E6   0x4620             MOV      R0,R4
   \   000002E8   0x.... 0x....      BL       move_window
   \   000002EC   0xB9D0             CBNZ.N   R0,??f_lseek_35
   \   000002EE   0x05F8             LSLS     R0,R7,#+23
   \   000002F0   0x0DC0             LSRS     R0,R0,#+23
   \   000002F2   0x1C7F             ADDS     R7,R7,#+1
   \   000002F4   0xF810 0xB004      LDRB     R11,[R0, R4]
   \   000002F8   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   000002FC   0xEB00 0x2157      ADD      R1,R0,R7, LSR #+9
   \   00000300   0x4620             MOV      R0,R4
   \   00000302   0x.... 0x....      BL       move_window
   \   00000306   0xB968             CBNZ.N   R0,??f_lseek_35
   \   00000308   0x05F8             LSLS     R0,R7,#+23
   \   0000030A   0x0DC0             LSRS     R0,R0,#+23
   \   0000030C   0x5D00             LDRB     R0,[R0, R4]
   \   0000030E   0xEA4B 0x2B00      ORR      R11,R11,R0, LSL #+8
   \   00000312   0x07F0             LSLS     R0,R6,#+31
   \   00000314   0xBF5A             ITTE     PL 
   \   00000316   0xEA4F 0x550B      LSLPL    R5,R11,#+20
   \   0000031A   0x0D2D             LSRPL    R5,R5,#+20
   \   0000031C   0xEA4F 0x151B      LSRMI    R5,R11,#+4
   \   00000320   0xE000             B.N      ??f_lseek_35
   \                     ??f_lseek_31: (+1)
   \   00000322   0x2501             MOVS     R5,#+1
   \                     ??f_lseek_35: (+1)
   \   00000324   0x4628             MOV      R0,R5
   \   00000326   0x2802             CMP      R0,#+2
   \   00000328   0xF0C0 0x80D4      BCC.W    ??f_lseek_22
   \   0000032C   0xF110 0x0F01      CMN      R0,#+1
   \   00000330   0xF000 0x80B3      BEQ.W    ??f_lseek_36
   \   00000334   0xF8D4 0x1214      LDR      R1,[R4, #+532]
   \   00000338   0x4288             CMP      R0,R1
   \   0000033A   0xF0C0 0x80AE      BCC.W    ??f_lseek_36
   \   0000033E   0x4637             MOV      R7,R6
   \                     ??f_lseek_30: (+1)
   \   00000340   0xEA4F 0x0507      MOV.W    R5,R7
   \                     ??f_lseek_37: (+1)
   \   00000344   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   00000348   0x1C6D             ADDS     R5,R5,#+1
   \   0000034A   0x4285             CMP      R5,R0
   \   0000034C   0xD303             BCC.N    ??f_lseek_38
   \   0000034E   0x2502             MOVS     R5,#+2
   \   00000350   0x2F02             CMP      R7,#+2
   \   00000352   0xF0C0 0x80A0      BCC.W    ??f_lseek_39
   \                     ??f_lseek_38: (+1)
   \   00000356   0x4629             MOV      R1,R5
   \   00000358   0x4620             MOV      R0,R4
   \   0000035A   0x.... 0x....      BL       get_fat
   \   0000035E   0x2800             CMP      R0,#+0
   \   00000360   0xF040 0x8091      BNE.W    ??f_lseek_40
   \   00000364   0x2D02             CMP      R5,#+2
   \   00000366   0xD36C             BCC.N    ??f_lseek_41
   \   00000368   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   0000036C   0x4285             CMP      R5,R0
   \   0000036E   0xD268             BCS.N    ??f_lseek_41
   \   00000370   0xF894 0x0200      LDRB     R0,[R4, #+512]
   \   00000374   0x2801             CMP      R0,#+1
   \   00000376   0xD034             BEQ.N    ??f_lseek_42
   \   00000378   0xD363             BCC.N    ??f_lseek_41
   \   0000037A   0x2803             CMP      R0,#+3
   \   0000037C   0xD001             BEQ.N    ??f_lseek_43
   \   0000037E   0xD31C             BCC.N    ??f_lseek_44
   \   00000380   0xE05F             B.N      ??f_lseek_41
   \                     ??f_lseek_43: (+1)
   \   00000382   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000386   0xEB00 0x11D5      ADD      R1,R0,R5, LSR #+7
   \   0000038A   0x4620             MOV      R0,R4
   \   0000038C   0x.... 0x....      BL       move_window
   \   00000390   0x2800             CMP      R0,#+0
   \   00000392   0xD157             BNE.N    ??f_lseek_45
   \   00000394   0x00A9             LSLS     R1,R5,#+2
   \   00000396   0x05C9             LSLS     R1,R1,#+23
   \   00000398   0xEB14 0x52D1      ADDS     R2,R4,R1, LSR #+23
   \   0000039C   0xF06F 0x4370      MVN      R3,#-268435456
   \   000003A0   0x78D1             LDRB     R1,[R2, #+3]
   \   000003A2   0xEA43 0x6301      ORR      R3,R3,R1, LSL #+24
   \   000003A6   0x21FF             MOVS     R1,#+255
   \   000003A8   0x7011             STRB     R1,[R2, #+0]
   \   000003AA   0x7051             STRB     R1,[R2, #+1]
   \   000003AC   0x7091             STRB     R1,[R2, #+2]
   \   000003AE   0x0E19             LSRS     R1,R3,#+24
   \   000003B0   0x70D1             STRB     R1,[R2, #+3]
   \   000003B2   0x2101             MOVS     R1,#+1
   \   000003B4   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   000003B8   0xE044             B.N      ??f_lseek_45
   \                     ??f_lseek_44: (+1)
   \   000003BA   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   000003BE   0xEB00 0x2115      ADD      R1,R0,R5, LSR #+8
   \   000003C2   0x4620             MOV      R0,R4
   \   000003C4   0x.... 0x....      BL       move_window
   \   000003C8   0x2800             CMP      R0,#+0
   \   000003CA   0xD13B             BNE.N    ??f_lseek_45
   \   000003CC   0x0069             LSLS     R1,R5,#+1
   \   000003CE   0x05C9             LSLS     R1,R1,#+23
   \   000003D0   0xEB14 0x52D1      ADDS     R2,R4,R1, LSR #+23
   \   000003D4   0x21FF             MOVS     R1,#+255
   \   000003D6   0x7011             STRB     R1,[R2, #+0]
   \   000003D8   0x7051             STRB     R1,[R2, #+1]
   \   000003DA   0x2101             MOVS     R1,#+1
   \   000003DC   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   000003E0   0xE030             B.N      ??f_lseek_45
   \                     ??f_lseek_42: (+1)
   \   000003E2   0xEB05 0x0755      ADD      R7,R5,R5, LSR #+1
   \   000003E6   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   000003EA   0xEB00 0x2157      ADD      R1,R0,R7, LSR #+9
   \   000003EE   0x4620             MOV      R0,R4
   \   000003F0   0x.... 0x....      BL       move_window
   \   000003F4   0xBB30             CBNZ.N   R0,??f_lseek_45
   \   000003F6   0x05F8             LSLS     R0,R7,#+23
   \   000003F8   0x1C7F             ADDS     R7,R7,#+1
   \   000003FA   0xEB14 0x52D0      ADDS     R2,R4,R0, LSR #+23
   \   000003FE   0xF015 0x0B01      ANDS     R11,R5,#0x1
   \   00000402   0xBF1A             ITTE     NE 
   \   00000404   0x7810             LDRBNE   R0,[R2, #+0]
   \   00000406   0xF040 0x00F0      ORRNE    R0,R0,#0xF0
   \   0000040A   0x20FF             MOVEQ    R0,#+255
   \   0000040C   0x7010             STRB     R0,[R2, #+0]
   \   0000040E   0x2001             MOVS     R0,#+1
   \   00000410   0xF884 0x0204      STRB     R0,[R4, #+516]
   \   00000414   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000418   0xEB00 0x2157      ADD      R1,R0,R7, LSR #+9
   \   0000041C   0x4620             MOV      R0,R4
   \   0000041E   0x.... 0x....      BL       move_window
   \   00000422   0xB978             CBNZ.N   R0,??f_lseek_45
   \   00000424   0x05F9             LSLS     R1,R7,#+23
   \   00000426   0xEB14 0x52D1      ADDS     R2,R4,R1, LSR #+23
   \   0000042A   0xF1BB 0x0F00      CMP      R11,#+0
   \   0000042E   0xBF12             ITEE     NE 
   \   00000430   0x21FF             MOVNE    R1,#+255
   \   00000432   0x7811             LDRBEQ   R1,[R2, #+0]
   \   00000434   0xF041 0x010F      ORREQ    R1,R1,#0xF
   \   00000438   0x7011             STRB     R1,[R2, #+0]
   \   0000043A   0x2101             MOVS     R1,#+1
   \   0000043C   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   00000440   0xE000             B.N      ??f_lseek_45
   \                     ??f_lseek_41: (+1)
   \   00000442   0x2002             MOVS     R0,#+2
   \                     ??f_lseek_45: (+1)
   \   00000444   0xB928             CBNZ.N   R0,??f_lseek_46
   \   00000446   0xB12E             CBZ.N    R6,??f_lseek_47
   \   00000448   0x462A             MOV      R2,R5
   \   0000044A   0x4631             MOV      R1,R6
   \   0000044C   0x4620             MOV      R0,R4
   \   0000044E   0x.... 0x....      BL       put_fat
   \                     ??f_lseek_46: (+1)
   \   00000452   0xB988             CBNZ.N   R0,??f_lseek_48
   \                     ??f_lseek_47: (+1)
   \   00000454   0xF8D4 0x0210      LDR      R0,[R4, #+528]
   \   00000458   0xF8C4 0x520C      STR      R5,[R4, #+524]
   \   0000045C   0xF110 0x0F01      CMN      R0,#+1
   \   00000460   0xD00F             BEQ.N    ??f_lseek_49
   \   00000462   0x1E40             SUBS     R0,R0,#+1
   \   00000464   0x462E             MOV      R6,R5
   \   00000466   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \   0000046A   0xF894 0x0205      LDRB     R0,[R4, #+517]
   \   0000046E   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000472   0xF884 0x0205      STRB     R0,[R4, #+517]
   \   00000476   0xE011             B.N      ??f_lseek_50
   \                     ??f_lseek_48: (+1)
   \   00000478   0x2801             CMP      R0,#+1
   \   0000047A   0xBF0C             ITE      EQ 
   \   0000047C   0xF04F 0x35FF      MOVEQ    R5,#-1
   \   00000480   0x2501             MOVNE    R5,#+1
   \                     ??f_lseek_49: (+1)
   \   00000482   0x462E             MOV      R6,R5
   \   00000484   0xE00A             B.N      ??f_lseek_50
   \                     ??f_lseek_40: (+1)
   \   00000486   0xF110 0x0F01      CMN      R0,#+1
   \   0000048A   0xBF18             IT       NE 
   \   0000048C   0x2801             CMPNE    R0,#+1
   \   0000048E   0xD004             BEQ.N    ??f_lseek_36
   \   00000490   0x42BD             CMP      R5,R7
   \   00000492   0xF47F 0xAF57      BNE.W    ??f_lseek_37
   \                     ??f_lseek_39: (+1)
   \   00000496   0x2600             MOVS     R6,#+0
   \   00000498   0xE003             B.N      ??f_lseek_51
   \                     ??f_lseek_36: (+1)
   \   0000049A   0x4606             MOV      R6,R0
   \                     ??f_lseek_50: (+1)
   \   0000049C   0x2E00             CMP      R6,#+0
   \   0000049E   0xF47F 0xAEB3      BNE.W    ??f_lseek_26
   \                     ??f_lseek_51: (+1)
   \   000004A2   0xF8DD 0xA000      LDR      R10,[SP, #+0]
   3219          				}
   3220          				fp->fptr += ofs;
   \                     ??f_lseek_27: (+1)
   \   000004A6   0xF8D8 0x0208      LDR      R0,[R8, #+520]
   \   000004AA   0x4450             ADD      R0,R10,R0
   \   000004AC   0xF8C8 0x0208      STR      R0,[R8, #+520]
   3221          				if (ofs % SS(fp->fs)) {
   \   000004B0   0xEA5F 0x50CA      LSLS     R0,R10,#+23
   \   000004B4   0xD016             BEQ.N    ??f_lseek_3
   3222          					nsect = clust2sect(fp->fs, clst);	/* Current sector */
   \   000004B6   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   000004BA   0x1EB1             SUBS     R1,R6,#+2
   \   000004BC   0xF8D0 0x2214      LDR      R2,[R0, #+532]
   \   000004C0   0x1E92             SUBS     R2,R2,#+2
   \   000004C2   0x4291             CMP      R1,R2
   \   000004C4   0xD206             BCS.N    ??f_lseek_22
   \   000004C6   0xF890 0x2202      LDRB     R2,[R0, #+514]
   \   000004CA   0xF8D0 0x0228      LDR      R0,[R0, #+552]
   \   000004CE   0xFB02 0x0001      MLA      R0,R2,R1,R0
   3223          					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
   \   000004D2   0xB928             CBNZ.N   R0,??f_lseek_52
   \                     ??f_lseek_22: (+1)
   \   000004D4   0x2002             MOVS     R0,#+2
   \   000004D6   0xF888 0x0207      STRB     R0,[R8, #+519]
   3224          					nsect += ofs / SS(fp->fs);
   3225          				}
   3226          			}
   3227          		}
   3228          		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
   3229          #if !_FS_TINY
   3230          #if !_FS_READONLY
   3231          			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
   3232          				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
   3233          					ABORT(fp->fs, FR_DISK_ERR);
   3234          				fp->flag &= ~FA__DIRTY;
   3235          			}
   3236          #endif
   3237          			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
   3238          				ABORT(fp->fs, FR_DISK_ERR);
   \   000004DA   0xB003             ADD      SP,SP,#+12
   \   000004DC   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??f_lseek_52: (+1)
   \   000004E0   0xEB00 0x295A      ADD      R9,R0,R10, LSR #+9
   \                     ??f_lseek_3: (+1)
   \   000004E4   0xF8D8 0x0208      LDR      R0,[R8, #+520]
   \   000004E8   0x05C0             LSLS     R0,R0,#+23
   \   000004EA   0xBF1C             ITT      NE 
   \   000004EC   0xF8D8 0x2218      LDRNE    R2,[R8, #+536]
   \   000004F0   0x4591             CMPNE    R9,R2
   \   000004F2   0xD024             BEQ.N    ??f_lseek_53
   \   000004F4   0xF898 0x0206      LDRB     R0,[R8, #+518]
   \   000004F8   0x0640             LSLS     R0,R0,#+25
   \   000004FA   0xD50E             BPL.N    ??f_lseek_54
   \   000004FC   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   00000500   0x2301             MOVS     R3,#+1
   \   00000502   0x4641             MOV      R1,R8
   \   00000504   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   00000508   0x.... 0x....      BL       disk_write
   \   0000050C   0xB978             CBNZ.N   R0,??f_lseek_23
   \   0000050E   0xF898 0x0206      LDRB     R0,[R8, #+518]
   \   00000512   0xF000 0x00BF      AND      R0,R0,#0xBF
   \   00000516   0xF888 0x0206      STRB     R0,[R8, #+518]
   \                     ??f_lseek_54: (+1)
   \   0000051A   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   0000051E   0x2301             MOVS     R3,#+1
   \   00000520   0x464A             MOV      R2,R9
   \   00000522   0x4641             MOV      R1,R8
   \   00000524   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   00000528   0x.... 0x....      BL       disk_read
   \   0000052C   0xB128             CBZ.N    R0,??f_lseek_55
   \                     ??f_lseek_23: (+1)
   \   0000052E   0x2001             MOVS     R0,#+1
   \   00000530   0xF888 0x0207      STRB     R0,[R8, #+519]
   \   00000534   0xB003             ADD      SP,SP,#+12
   \   00000536   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   3239          #endif
   3240          			fp->dsect = nsect;
   \                     ??f_lseek_55: (+1)
   \   0000053A   0xF8C8 0x9218      STR      R9,[R8, #+536]
   3241          		}
   3242          #if !_FS_READONLY
   3243          		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
   \                     ??f_lseek_53: (+1)
   \   0000053E   0xF8D8 0x0208      LDR      R0,[R8, #+520]
   \   00000542   0xF8D8 0x120C      LDR      R1,[R8, #+524]
   \   00000546   0x4281             CMP      R1,R0
   \   00000548   0xD207             BCS.N    ??f_lseek_0
   3244          			fp->fsize = fp->fptr;
   \   0000054A   0xF8C8 0x020C      STR      R0,[R8, #+524]
   3245          			fp->flag |= FA__WRITTEN;
   \   0000054E   0xF898 0x0206      LDRB     R0,[R8, #+518]
   \   00000552   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000556   0xF888 0x0206      STRB     R0,[R8, #+518]
   3246          		}
   3247          #endif
   3248          	}
   3249          
   3250          	LEAVE_FF(fp->fs, res);
   \                     ??f_lseek_0: (+1)
   \   0000055A   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \                     ??f_lseek_1: (+1)
   \   0000055E   0xB003             ADD      SP,SP,#+12
   \   00000560   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   3251          }
   3252          
   3253          
   3254          
   3255          #if _FS_MINIMIZE <= 1
   3256          /*-----------------------------------------------------------------------*/
   3257          /* Create a Directory Object                                             */
   3258          /*-----------------------------------------------------------------------*/
   3259          

   \                                 In section .text, align 4, keep-with-next
   3260          FRESULT f_opendir (
   3261          	DIR* dp,			/* Pointer to directory object to create */
   3262          	const TCHAR* path	/* Pointer to the directory path */
   3263          )
   3264          {
   \                     f_opendir: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0xB084             SUB      SP,SP,#+16
   3265          	FRESULT res;
   3266          	FATFS* fs;
   3267          	DEFINE_NAMEBUF;
   3268          
   3269          
   3270          	if (!dp) return FR_INVALID_OBJECT;
   \   00000006   0xBF08             IT       EQ 
   \   00000008   0x2009             MOVEQ    R0,#+9
   \   0000000A   0xD077             BEQ.N    ??f_opendir_0
   3271          
   3272          	/* Get logical drive number */
   3273          	res = find_volume(&fs, &path, 0);
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xA904             ADD      R1,SP,#+16
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x.... 0x....      BL       find_volume
   3274          	if (res == FR_OK) {
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD16C             BNE.N    ??f_opendir_1
   3275          		dp->fs = fs;
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   \   0000001C   0xF8C4 0x0200      STR      R0,[R4, #+512]
   3276          		INIT_BUF(*dp);
   \   00000020   0xA801             ADD      R0,SP,#+4
   \   00000022   0xF8C4 0x0218      STR      R0,[R4, #+536]
   3277          		res = follow_path(dp, path);			/* Follow the path to the directory */
   \   00000026   0x9904             LDR      R1,[SP, #+16]
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       follow_path
   3278          		FREE_BUF();
   3279          		if (res == FR_OK) {						/* Follow completed */
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD15C             BNE.N    ??f_opendir_2
   3280          			if (dp->dir) {						/* It is not the origin directory itself */
   \   00000032   0xF8D4 0x1214      LDR      R1,[R4, #+532]
   \   00000036   0xB139             CBZ.N    R1,??f_opendir_3
   3281          				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
   \   00000038   0x7AC8             LDRB     R0,[R1, #+11]
   \   0000003A   0x06C0             LSLS     R0,R0,#+27
   \   0000003C   0xD558             BPL.N    ??f_opendir_4
   3282          					dp->sclust = ld_clust(fs, dp->dir);
   \   0000003E   0x9800             LDR      R0,[SP, #+0]
   \   00000040   0x.... 0x....      BL       ld_clust
   \   00000044   0xF8C4 0x0208      STR      R0,[R4, #+520]
   3283          				else							/* The object is a file */
   3284          					res = FR_NO_PATH;
   3285          			}
   3286          			if (res == FR_OK) {
   3287          				dp->id = fs->id;
   \                     ??f_opendir_3: (+1)
   \   00000048   0x9800             LDR      R0,[SP, #+0]
   3288          				res = dir_sdi(dp, 0);			/* Rewind directory */
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0xF8B0 0x0206      LDRH     R0,[R0, #+518]
   \   00000050   0xF8A4 0x0204      STRH     R0,[R4, #+516]
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       dir_sdi
   3289          #if _FS_LOCK
   3290          				if (res == FR_OK) {
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD146             BNE.N    ??f_opendir_2
   3291          					if (dp->sclust) {
   \   0000005E   0xF8D4 0x2208      LDR      R2,[R4, #+520]
   \   00000062   0xB922             CBNZ.N   R2,??f_opendir_5
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0xF8C4 0x121C      STR      R1,[R4, #+540]
   3292          						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
   3293          						if (!dp->lockid)
   3294          							res = FR_TOO_MANY_OPEN_FILES;
   3295          					} else {
   3296          						dp->lockid = 0;	/* Root directory need not to be locked */
   3297          					}
   3298          				}
   3299          #endif
   3300          			}
   3301          		}
   3302          		if (res == FR_NO_FILE) res = FR_NO_PATH;
   3303          	}
   3304          	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
   3305          
   3306          	LEAVE_FF(fs, res);
   \   0000006A   0xB005             ADD      SP,SP,#+20
   \   0000006C   0xBDF0             POP      {R4-R7,PC}
   \                     ??f_opendir_5: (+1)
   \   0000006E   0x.... 0x....      LDR.W    R3,??DataTable17
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0xEA4F 0x0603      MOV.W    R6,R3
   \   00000078   0xF8B4 0x7206      LDRH     R7,[R4, #+518]
   \   0000007C   0xF8D4 0x5200      LDR      R5,[R4, #+512]
   \                     ??f_opendir_6: (+1)
   \   00000080   0xF8D6 0xC000      LDR      R12,[R6, #+0]
   \   00000084   0x45AC             CMP      R12,R5
   \   00000086   0xBF01             ITTTT    EQ 
   \   00000088   0xF8D6 0xC004      LDREQ    R12,[R6, #+4]
   \   0000008C   0x4594             CMPEQ    R12,R2
   \   0000008E   0xF8B6 0xC008      LDRHEQ   R12,[R6, #+8]
   \   00000092   0x45BC             CMPEQ    R12,R7
   \   00000094   0xD003             BEQ.N    ??f_opendir_7
   \   00000096   0x1C49             ADDS     R1,R1,#+1
   \   00000098   0x360C             ADDS     R6,R6,#+12
   \   0000009A   0x2902             CMP      R1,#+2
   \   0000009C   0xD3F0             BCC.N    ??f_opendir_6
   \                     ??f_opendir_7: (+1)
   \   0000009E   0x2902             CMP      R1,#+2
   \   000000A0   0xD115             BNE.N    ??f_opendir_8
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0xEA4F 0x0603      MOV.W    R6,R3
   \                     ??f_opendir_9: (+1)
   \   000000A8   0xF856 0x7B0C      LDR      R7,[R6], #+12
   \   000000AC   0xB117             CBZ.N    R7,??f_opendir_10
   \   000000AE   0x1C49             ADDS     R1,R1,#+1
   \   000000B0   0x2902             CMP      R1,#+2
   \   000000B2   0xD3F9             BCC.N    ??f_opendir_9
   \                     ??f_opendir_10: (+1)
   \   000000B4   0x2902             CMP      R1,#+2
   \   000000B6   0xD017             BEQ.N    ??f_opendir_11
   \   000000B8   0xEB01 0x0641      ADD      R6,R1,R1, LSL #+1
   \   000000BC   0xEB03 0x0686      ADD      R6,R3,R6, LSL #+2
   \   000000C0   0x6035             STR      R5,[R6, #+0]
   \   000000C2   0x6072             STR      R2,[R6, #+4]
   \   000000C4   0xF8B4 0x2206      LDRH     R2,[R4, #+518]
   \   000000C8   0x8132             STRH     R2,[R6, #+8]
   \   000000CA   0x2200             MOVS     R2,#+0
   \   000000CC   0x8172             STRH     R2,[R6, #+10]
   \                     ??f_opendir_8: (+1)
   \   000000CE   0xEB01 0x0241      ADD      R2,R1,R1, LSL #+1
   \   000000D2   0x1C49             ADDS     R1,R1,#+1
   \   000000D4   0xEB03 0x0282      ADD      R2,R3,R2, LSL #+2
   \   000000D8   0x8953             LDRH     R3,[R2, #+10]
   \   000000DA   0x1C5B             ADDS     R3,R3,#+1
   \   000000DC   0x8153             STRH     R3,[R2, #+10]
   \                     ??f_opendir_12: (+1)
   \   000000DE   0xF8C4 0x121C      STR      R1,[R4, #+540]
   \   000000E2   0xB959             CBNZ.N   R1,??f_opendir_0
   \   000000E4   0x2012             MOVS     R0,#+18
   \   000000E6   0xE006             B.N      ??f_opendir_13
   \                     ??f_opendir_11: (+1)
   \   000000E8   0x2100             MOVS     R1,#+0
   \   000000EA   0xE7F8             B.N      ??f_opendir_12
   \                     ??f_opendir_2: (+1)
   \   000000EC   0x2804             CMP      R0,#+4
   \   000000EE   0xD101             BNE.N    ??f_opendir_1
   \                     ??f_opendir_4: (+1)
   \   000000F0   0x2005             MOVS     R0,#+5
   \   000000F2   0xE000             B.N      ??f_opendir_13
   \                     ??f_opendir_1: (+1)
   \   000000F4   0xB110             CBZ.N    R0,??f_opendir_0
   \                     ??f_opendir_13: (+1)
   \   000000F6   0x2100             MOVS     R1,#+0
   \   000000F8   0xF8C4 0x1200      STR      R1,[R4, #+512]
   \                     ??f_opendir_0: (+1)
   \   000000FC   0xB005             ADD      SP,SP,#+20
   \   000000FE   0xBDF0             POP      {R4-R7,PC}       ;; return
   3307          }
   3308          
   3309          
   3310          
   3311          
   3312          /*-----------------------------------------------------------------------*/
   3313          /* Close Directory                                                       */
   3314          /*-----------------------------------------------------------------------*/
   3315          

   \                                 In section .text, align 2, keep-with-next
   3316          FRESULT f_closedir (
   3317          	DIR *dp		/* Pointer to the directory object to be closed */
   3318          )
   3319          {
   \                     f_closedir: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0xB081             SUB      SP,SP,#+4
   3320          	FRESULT res;
   3321          
   3322          
   3323          	res = validate(dp);
   \   00000006   0xBF1C             ITT      NE 
   \   00000008   0xF8D4 0x0200      LDRNE    R0,[R4, #+512]
   \   0000000C   0x2800             CMPNE    R0,#+0
   \   0000000E   0xD016             BEQ.N    ??f_closedir_0
   \   00000010   0xF890 0x1200      LDRB     R1,[R0, #+512]
   \   00000014   0xB199             CBZ.N    R1,??f_closedir_0
   \   00000016   0xF8B0 0x1206      LDRH     R1,[R0, #+518]
   \   0000001A   0xF8B4 0x2204      LDRH     R2,[R4, #+516]
   \   0000001E   0x4291             CMP      R1,R2
   \   00000020   0xD10D             BNE.N    ??f_closedir_0
   \   00000022   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   00000026   0x.... 0x....      BL       disk_status
   \   0000002A   0x07C0             LSLS     R0,R0,#+31
   \   0000002C   0xD407             BMI.N    ??f_closedir_0
   3324          	if (res == FR_OK) {
   3325          #if _FS_REENTRANT
   3326          		FATFS *fs = dp->fs;
   3327          #endif
   3328          #if _FS_LOCK
   3329          		if (dp->lockid)				/* Decrement sub-directory open counter */
   \   0000002E   0xF8D4 0x121C      LDR      R1,[R4, #+540]
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xB931             CBNZ.N   R1,??f_closedir_1
   3330          			res = dec_lock(dp->lockid);
   3331          		if (res == FR_OK)
   3332          #endif
   3333          			dp->fs = 0;				/* Invalidate directory object */
   \                     ??f_closedir_2: (+1)
   \   00000036   0xF8C4 0x0200      STR      R0,[R4, #+512]
   3334          #if _FS_REENTRANT
   3335          		unlock_fs(fs, FR_OK);		/* Unlock volume */
   3336          #endif
   3337          	}
   3338          	return res;
   \   0000003A   0xB001             ADD      SP,SP,#+4
   \   0000003C   0xBD30             POP      {R4,R5,PC}       ;; return
   \                     ??f_closedir_0: (+1)
   \   0000003E   0x2009             MOVS     R0,#+9
   \   00000040   0xB001             ADD      SP,SP,#+4
   \   00000042   0xBD30             POP      {R4,R5,PC}
   \                     ??f_closedir_1: (+1)
   \   00000044   0x1E49             SUBS     R1,R1,#+1
   \   00000046   0x2902             CMP      R1,#+2
   \   00000048   0xD216             BCS.N    ??f_closedir_3
   \   0000004A   0xEB01 0x0241      ADD      R2,R1,R1, LSL #+1
   \   0000004E   0x0091             LSLS     R1,R2,#+2
   \   00000050   0x.... 0x....      LDR.W    R2,??DataTable17
   \   00000054   0x188B             ADDS     R3,R1,R2
   \   00000056   0x895D             LDRH     R5,[R3, #+10]
   \   00000058   0xF5B5 0x7F80      CMP      R5,#+256
   \   0000005C   0xBF08             IT       EQ 
   \   0000005E   0x8158             STRHEQ   R0,[R3, #+10]
   \   00000060   0xD001             BEQ.N    ??f_closedir_4
   \   00000062   0xB915             CBNZ.N   R5,??f_closedir_5
   \   00000064   0x815D             STRH     R5,[R3, #+10]
   \                     ??f_closedir_4: (+1)
   \   00000066   0x5088             STR      R0,[R1, R2]
   \   00000068   0xE7E5             B.N      ??f_closedir_2
   \                     ??f_closedir_5: (+1)
   \   0000006A   0x1E6D             SUBS     R5,R5,#+1
   \   0000006C   0x815D             STRH     R5,[R3, #+10]
   \   0000006E   0xB2AD             UXTH     R5,R5
   \   00000070   0x2D00             CMP      R5,#+0
   \   00000072   0xD1E0             BNE.N    ??f_closedir_2
   \   00000074   0x5088             STR      R0,[R1, R2]
   \   00000076   0xE7DE             B.N      ??f_closedir_2
   \                     ??f_closedir_3: (+1)
   \   00000078   0x2002             MOVS     R0,#+2
   \   0000007A   0xB001             ADD      SP,SP,#+4
   \   0000007C   0xBD30             POP      {R4,R5,PC}
   3339          }
   3340          
   3341          
   3342          
   3343          
   3344          /*-----------------------------------------------------------------------*/
   3345          /* Read Directory Entries in Sequence                                    */
   3346          /*-----------------------------------------------------------------------*/
   3347          

   \                                 In section .text, align 2, keep-with-next
   3348          FRESULT f_readdir (
   3349          	DIR* dp,			/* Pointer to the open directory object */
   3350          	FILINFO* fno		/* Pointer to file information to return */
   3351          )
   3352          {
   \                     f_readdir: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460E             MOV      R6,R1
   3353          	FRESULT res;
   3354          	DEFINE_NAMEBUF;
   3355          
   3356          
   3357          	res = validate(dp);						/* Check validity of the object */
   \   00000008   0x.... 0x....      BL       validate
   \   0000000C   0x0005             MOVS     R5,R0
   3358          	if (res == FR_OK) {
   \   0000000E   0xD137             BNE.N    ??f_readdir_0
   3359          		if (!fno) {
   \   00000010   0xB93E             CBNZ.N   R6,??f_readdir_1
   3360          			res = dir_sdi(dp, 0);			/* Rewind the directory object */
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       dir_sdi
   \   0000001A   0x4605             MOV      R5,R0
   3361          		} else {
   3362          			INIT_BUF(*dp);
   3363          			res = dir_read(dp, 0);			/* Read an item */
   3364          			if (res == FR_NO_FILE) {		/* Reached end of directory */
   3365          				dp->sect = 0;
   3366          				res = FR_OK;
   3367          			}
   3368          			if (res == FR_OK) {				/* A valid entry is found */
   3369          				get_fileinfo(dp, fno);		/* Get the object information */
   3370          				res = dir_next(dp, 0);		/* Increment index for next */
   3371          				if (res == FR_NO_FILE) {
   3372          					dp->sect = 0;
   3373          					res = FR_OK;
   3374          				}
   3375          			}
   3376          			FREE_BUF();
   3377          		}
   3378          	}
   3379          
   3380          	LEAVE_FF(dp->fs, res);
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0xB004             ADD      SP,SP,#+16
   \   00000020   0xBD70             POP      {R4-R6,PC}
   \                     ??f_readdir_1: (+1)
   \   00000022   0xF8C4 0xD218      STR      SP,[R4, #+536]
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       dir_read
   \   0000002E   0x4605             MOV      R5,R0
   \   00000030   0x2D04             CMP      R5,#+4
   \   00000032   0xD104             BNE.N    ??f_readdir_2
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x2500             MOVS     R5,#+0
   \   00000038   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \   0000003C   0xE000             B.N      ??f_readdir_3
   \                     ??f_readdir_2: (+1)
   \   0000003E   0xB9FD             CBNZ.N   R5,??f_readdir_0
   \                     ??f_readdir_3: (+1)
   \   00000040   0x4631             MOV      R1,R6
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       get_fileinfo
   \   00000048   0xF8B4 0x0206      LDRH     R0,[R4, #+518]
   \   0000004C   0x1C46             ADDS     R6,R0,#+1
   \   0000004E   0x0430             LSLS     R0,R6,#+16
   \   00000050   0xBF1C             ITT      NE 
   \   00000052   0xF8D4 0x0210      LDRNE    R0,[R4, #+528]
   \   00000056   0x2800             CMPNE    R0,#+0
   \   00000058   0xD00E             BEQ.N    ??f_readdir_4
   \   0000005A   0xF016 0x0F0F      TST      R6,#0xF
   \   0000005E   0xD136             BNE.N    ??f_readdir_5
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \   00000062   0xF8D4 0x120C      LDR      R1,[R4, #+524]
   \   00000066   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \   0000006A   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   0000006E   0xB951             CBNZ.N   R1,??f_readdir_6
   \   00000070   0xF8B0 0x0208      LDRH     R0,[R0, #+520]
   \   00000074   0x4286             CMP      R6,R0
   \   00000076   0xD32A             BCC.N    ??f_readdir_5
   \                     ??f_readdir_4: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x2500             MOVS     R5,#+0
   \   0000007C   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \                     ??f_readdir_0: (+1)
   \   00000080   0x4628             MOV      R0,R5
   \   00000082   0xB004             ADD      SP,SP,#+16
   \   00000084   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??f_readdir_6: (+1)
   \   00000086   0xF890 0x2202      LDRB     R2,[R0, #+514]
   \   0000008A   0x1E52             SUBS     R2,R2,#+1
   \   0000008C   0xEA12 0x1F16      TST      R2,R6, LSR #+4
   \   00000090   0xD11D             BNE.N    ??f_readdir_5
   \   00000092   0x.... 0x....      BL       get_fat
   \   00000096   0x2802             CMP      R0,#+2
   \   00000098   0xD32A             BCC.N    ??f_readdir_7
   \   0000009A   0xF110 0x0F01      CMN      R0,#+1
   \   0000009E   0xD023             BEQ.N    ??f_readdir_8
   \   000000A0   0xF8D4 0x1200      LDR      R1,[R4, #+512]
   \   000000A4   0xF8D1 0x2214      LDR      R2,[R1, #+532]
   \   000000A8   0x4290             CMP      R0,R2
   \   000000AA   0xD2E5             BCS.N    ??f_readdir_4
   \   000000AC   0xF8C4 0x020C      STR      R0,[R4, #+524]
   \   000000B0   0xF8D1 0x2214      LDR      R2,[R1, #+532]
   \   000000B4   0x1E80             SUBS     R0,R0,#+2
   \   000000B6   0x1E92             SUBS     R2,R2,#+2
   \   000000B8   0x4290             CMP      R0,R2
   \   000000BA   0xBF2F             ITEEE    CS 
   \   000000BC   0x2000             MOVCS    R0,#+0
   \   000000BE   0xF891 0x2202      LDRBCC   R2,[R1, #+514]
   \   000000C2   0xF8D1 0x1228      LDRCC    R1,[R1, #+552]
   \   000000C6   0xFB02 0x1000      MLACC    R0,R2,R0,R1
   \   000000CA   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \                     ??f_readdir_5: (+1)
   \   000000CE   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   000000D2   0xF006 0x010F      AND      R1,R6,#0xF
   \   000000D6   0xF8A4 0x6206      STRH     R6,[R4, #+518]
   \   000000DA   0xEB00 0x1041      ADD      R0,R0,R1, LSL #+5
   \   000000DE   0xF8C4 0x0214      STR      R0,[R4, #+532]
   \   000000E2   0x4628             MOV      R0,R5
   \   000000E4   0xB004             ADD      SP,SP,#+16
   \   000000E6   0xBD70             POP      {R4-R6,PC}
   \                     ??f_readdir_8: (+1)
   \   000000E8   0x2501             MOVS     R5,#+1
   \   000000EA   0x4628             MOV      R0,R5
   \   000000EC   0xB004             ADD      SP,SP,#+16
   \   000000EE   0xBD70             POP      {R4-R6,PC}
   \                     ??f_readdir_7: (+1)
   \   000000F0   0x2502             MOVS     R5,#+2
   \   000000F2   0x4628             MOV      R0,R5
   \   000000F4   0xB004             ADD      SP,SP,#+16
   \   000000F6   0xBD70             POP      {R4-R6,PC}
   3381          }
   3382          
   3383          
   3384          
   3385          #if _USE_FIND
   3386          /*-----------------------------------------------------------------------*/
   3387          /* Find next file                                                        */
   3388          /*-----------------------------------------------------------------------*/
   3389          
   3390          FRESULT f_findnext (
   3391          	DIR* dp,		/* Pointer to the open directory object */
   3392          	FILINFO* fno	/* Pointer to the file information structure */
   3393          )
   3394          {
   3395          	FRESULT res;
   3396          
   3397          
   3398          	for (;;) {
   3399          		res = f_readdir(dp, fno);		/* Get a directory item */
   3400          		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
   3401          #if _USE_LFN
   3402          		if (fno->lfname && pattern_matching(dp->pat, fno->lfname, 0, 0)) break;	/* Test for LFN if exist */
   3403          #endif
   3404          		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;	/* Test for SFN */
   3405          	}
   3406          	return res;
   3407          
   3408          }
   3409          
   3410          
   3411          
   3412          /*-----------------------------------------------------------------------*/
   3413          /* Find first file                                                       */
   3414          /*-----------------------------------------------------------------------*/
   3415          
   3416          FRESULT f_findfirst (
   3417          	DIR* dp,				/* Pointer to the blank directory object */
   3418          	FILINFO* fno,			/* Pointer to the file information structure */
   3419          	const TCHAR* path,		/* Pointer to the directory to open */
   3420          	const TCHAR* pattern	/* Pointer to the matching pattern */
   3421          )
   3422          {
   3423          	FRESULT res;
   3424          
   3425          
   3426          	dp->pat = pattern;		/* Save pointer to pattern string */
   3427          	res = f_opendir(dp, path);		/* Open the target directory */
   3428          	if (res == FR_OK)
   3429          		res = f_findnext(dp, fno);	/* Find the first item */
   3430          	return res;
   3431          }
   3432          
   3433          #endif	/* _USE_FIND */
   3434          
   3435          
   3436          
   3437          #if _FS_MINIMIZE == 0
   3438          /*-----------------------------------------------------------------------*/
   3439          /* Get File Status                                                       */
   3440          /*-----------------------------------------------------------------------*/
   3441          

   \                                 In section .text, align 2, keep-with-next
   3442          FRESULT f_stat (
   3443          	const TCHAR* path,	/* Pointer to the file path */
   3444          	FILINFO* fno		/* Pointer to file information to return */
   3445          )
   3446          {
   \                     f_stat: (+1)
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xF5AD 0x7D0C      SUB      SP,SP,#+560
   \   00000006   0x460C             MOV      R4,R1
   3447          	FRESULT res;
   3448          	DIR dj;
   3449          	DEFINE_NAMEBUF;
   3450          
   3451          
   3452          	/* Get logical drive number */
   3453          	res = find_volume(&dj.fs, &path, 0);
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xA98C             ADD      R1,SP,#+560
   \   0000000C   0xA883             ADD      R0,SP,#+524
   \   0000000E   0x.... 0x....      BL       find_volume
   \   00000012   0x0005             MOVS     R5,R0
   3454          	if (res == FR_OK) {
   \   00000014   0xD113             BNE.N    ??f_stat_0
   3455          		INIT_BUF(dj);
   3456          		res = follow_path(&dj, path);	/* Follow the file path */
   \   00000016   0x998C             LDR      R1,[SP, #+560]
   \   00000018   0xF8CD 0xD224      STR      SP,[SP, #+548]
   \   0000001C   0xA803             ADD      R0,SP,#+12
   \   0000001E   0x.... 0x....      BL       follow_path
   \   00000022   0x0005             MOVS     R5,R0
   3457          		if (res == FR_OK) {				/* Follow completed */
   \   00000024   0xD10B             BNE.N    ??f_stat_0
   3458          			if (dj.dir) {		/* Found an object */
   \   00000026   0x9888             LDR      R0,[SP, #+544]
   \   00000028   0xB140             CBZ.N    R0,??f_stat_1
   3459          				if (fno) get_fileinfo(&dj, fno);
   \   0000002A   0xB144             CBZ.N    R4,??f_stat_0
   \   0000002C   0x4621             MOV      R1,R4
   \   0000002E   0xA803             ADD      R0,SP,#+12
   \   00000030   0x.... 0x....      BL       get_fileinfo
   3460          			} else {			/* It is root directory */
   3461          				res = FR_INVALID_NAME;
   3462          			}
   3463          		}
   3464          		FREE_BUF();
   3465          	}
   3466          
   3467          	LEAVE_FF(dj.fs, res);
   \   00000034   0x4628             MOV      R0,R5
   \   00000036   0xF50D 0x7D0D      ADD      SP,SP,#+564
   \   0000003A   0xBD30             POP      {R4,R5,PC}
   \                     ??f_stat_1: (+1)
   \   0000003C   0x2506             MOVS     R5,#+6
   \                     ??f_stat_0: (+1)
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0xF50D 0x7D0D      ADD      SP,SP,#+564
   \   00000044   0xBD30             POP      {R4,R5,PC}       ;; return
   3468          }
   3469          
   3470          
   3471          
   3472          #if !_FS_READONLY
   3473          /*-----------------------------------------------------------------------*/
   3474          /* Get Number of Free Clusters                                           */
   3475          /*-----------------------------------------------------------------------*/
   3476          

   \                                 In section .text, align 2, keep-with-next
   3477          FRESULT f_getfree (
   3478          	const TCHAR* path,	/* Path name of the logical drive number */
   3479          	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
   3480          	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
   3481          )
   3482          {
   \                     f_getfree: (+1)
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0x460E             MOV      R6,R1
   \   00000006   0x4615             MOV      R5,R2
   3483          	FRESULT res;
   3484          	FATFS *fs;
   3485          	DWORD n, clst, sect, stat;
   3486          	UINT i;
   3487          	BYTE fat, *p;
   3488          
   3489          
   3490          	/* Get logical drive number */
   3491          	res = find_volume(fatfs, &path, 0);
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x4669             MOV      R1,SP
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       find_volume
   \   00000012   0x0004             MOVS     R4,R0
   3492          	fs = *fatfs;
   \   00000014   0xF8D5 0x8000      LDR      R8,[R5, #+0]
   3493          	if (res == FR_OK) {
   \   00000018   0xD16C             BNE.N    ??f_getfree_0
   3494          		/* If free_clust is valid, return it without full cluster scan */
   3495          		if (fs->free_clust <= fs->n_fatent - 2) {
   \   0000001A   0xF8D8 0x5214      LDR      R5,[R8, #+532]
   \   0000001E   0xF8D8 0x0210      LDR      R0,[R8, #+528]
   \   00000022   0x1EA9             SUBS     R1,R5,#+2
   \   00000024   0x4281             CMP      R1,R0
   \   00000026   0xBF28             IT       CS 
   \   00000028   0x6030             STRCS    R0,[R6, #+0]
   3496          			*nclst = fs->free_clust;
   \   0000002A   0xD263             BCS.N    ??f_getfree_0
   3497          		} else {
   3498          			/* Get number of free clusters */
   3499          			fat = fs->fs_type;
   \   0000002C   0xF898 0x9200      LDRB     R9,[R8, #+512]
   3500          			n = 0;
   \   00000030   0x2700             MOVS     R7,#+0
   3501          			if (fat == FS_FAT12) {
   \   00000032   0xF1B9 0x0F01      CMP      R9,#+1
   \   00000036   0xD115             BNE.N    ??f_getfree_1
   3502          				clst = 2;
   \   00000038   0x2502             MOVS     R5,#+2
   3503          				do {
   3504          					stat = get_fat(fs, clst);
   \                     ??f_getfree_2: (+1)
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x4640             MOV      R0,R8
   \   0000003E   0x.... 0x....      BL       get_fat
   3505          					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   \   00000042   0xF110 0x0F01      CMN      R0,#+1
   \   00000046   0xD101             BNE.N    ??f_getfree_3
   \   00000048   0x2401             MOVS     R4,#+1
   \   0000004A   0xE04A             B.N      ??f_getfree_4
   3506          					if (stat == 1) { res = FR_INT_ERR; break; }
   \                     ??f_getfree_3: (+1)
   \   0000004C   0x2801             CMP      R0,#+1
   \   0000004E   0xD101             BNE.N    ??f_getfree_5
   \   00000050   0x2402             MOVS     R4,#+2
   \   00000052   0xE046             B.N      ??f_getfree_4
   3507          					if (stat == 0) n++;
   \                     ??f_getfree_5: (+1)
   \   00000054   0xB900             CBNZ.N   R0,??f_getfree_6
   \   00000056   0x1C7F             ADDS     R7,R7,#+1
   3508          				} while (++clst < fs->n_fatent);
   \                     ??f_getfree_6: (+1)
   \   00000058   0xF8D8 0x0214      LDR      R0,[R8, #+532]
   \   0000005C   0x1C6D             ADDS     R5,R5,#+1
   \   0000005E   0x4285             CMP      R5,R0
   \   00000060   0xD3EB             BCC.N    ??f_getfree_2
   \   00000062   0xE03E             B.N      ??f_getfree_4
   3509          			} else {
   3510          				clst = fs->n_fatent;
   3511          				sect = fs->fatbase;
   \                     ??f_getfree_1: (+1)
   \   00000064   0xF8D8 0xA220      LDR      R10,[R8, #+544]
   3512          				i = 0; p = 0;
   \   00000068   0xE000             B.N      ??f_getfree_7
   3513          				do {
   3514          					if (!i) {
   \                     ??f_getfree_8: (+1)
   \   0000006A   0xB9E9             CBNZ.N   R1,??f_getfree_9
   3515          						res = move_window(fs, sect++);
   \                     ??f_getfree_7: (+1)
   \   0000006C   0xF8D8 0x022C      LDR      R0,[R8, #+556]
   \   00000070   0x46D3             MOV      R11,R10
   \   00000072   0x2400             MOVS     R4,#+0
   \   00000074   0x4583             CMP      R11,R0
   \   00000076   0xD011             BEQ.N    ??f_getfree_10
   \   00000078   0x4640             MOV      R0,R8
   \   0000007A   0x.... 0x....      BL       sync_window
   \   0000007E   0x0004             MOVS     R4,R0
   \   00000080   0xD10C             BNE.N    ??f_getfree_10
   \   00000082   0xF898 0x0201      LDRB     R0,[R8, #+513]
   \   00000086   0x2301             MOVS     R3,#+1
   \   00000088   0x465A             MOV      R2,R11
   \   0000008A   0x4641             MOV      R1,R8
   \   0000008C   0x.... 0x....      BL       disk_read
   \   00000090   0xB110             CBZ.N    R0,??f_getfree_11
   \   00000092   0xF04F 0x3BFF      MOV      R11,#-1
   \   00000096   0x2401             MOVS     R4,#+1
   \                     ??f_getfree_11: (+1)
   \   00000098   0xF8C8 0xB22C      STR      R11,[R8, #+556]
   \                     ??f_getfree_10: (+1)
   \   0000009C   0xF10A 0x0A01      ADD      R10,R10,#+1
   3516          						if (res != FR_OK) break;
   \   000000A0   0xB9FC             CBNZ.N   R4,??f_getfree_4
   3517          						p = fs->win.d8;
   \   000000A2   0x4640             MOV      R0,R8
   3518          						i = SS(fs);
   \   000000A4   0xF44F 0x7100      MOV      R1,#+512
   3519          					}
   3520          					if (fat == FS_FAT16) {
   \                     ??f_getfree_9: (+1)
   \   000000A8   0xF1B9 0x0F02      CMP      R9,#+2
   \   000000AC   0xD108             BNE.N    ??f_getfree_12
   3521          						if (LD_WORD(p) == 0) n++;
   \   000000AE   0x7842             LDRB     R2,[R0, #+1]
   \   000000B0   0x7803             LDRB     R3,[R0, #+0]
   \   000000B2   0xEA53 0x2202      ORRS     R2,R3,R2, LSL #+8
   \   000000B6   0xBF08             IT       EQ 
   \   000000B8   0x1C7F             ADDEQ    R7,R7,#+1
   3522          						p += 2; i -= 2;
   \   000000BA   0x1C80             ADDS     R0,R0,#+2
   \   000000BC   0x1E89             SUBS     R1,R1,#+2
   \   000000BE   0xE00E             B.N      ??f_getfree_13
   3523          					} else {
   3524          						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
   \                     ??f_getfree_12: (+1)
   \   000000C0   0x7883             LDRB     R3,[R0, #+2]
   \   000000C2   0x78C2             LDRB     R2,[R0, #+3]
   \   000000C4   0x041B             LSLS     R3,R3,#+16
   \   000000C6   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   000000CA   0x7843             LDRB     R3,[R0, #+1]
   \   000000CC   0xEA42 0x2203      ORR      R2,R2,R3, LSL #+8
   \   000000D0   0x7803             LDRB     R3,[R0, #+0]
   \   000000D2   0x431A             ORRS     R2,R3,R2
   \   000000D4   0x0112             LSLS     R2,R2,#+4
   \   000000D6   0xBF08             IT       EQ 
   \   000000D8   0x1C7F             ADDEQ    R7,R7,#+1
   3525          						p += 4; i -= 4;
   \   000000DA   0x1D00             ADDS     R0,R0,#+4
   \   000000DC   0x1F09             SUBS     R1,R1,#+4
   3526          					}
   3527          				} while (--clst);
   \                     ??f_getfree_13: (+1)
   \   000000DE   0x1E6D             SUBS     R5,R5,#+1
   \   000000E0   0xD1C3             BNE.N    ??f_getfree_8
   3528          			}
   3529          			fs->free_clust = n;
   3530          			fs->fsi_flag |= 1;
   \                     ??f_getfree_4: (+1)
   \   000000E2   0xF898 0x0205      LDRB     R0,[R8, #+517]
   \   000000E6   0xF8C8 0x7210      STR      R7,[R8, #+528]
   \   000000EA   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000000EE   0xF888 0x0205      STRB     R0,[R8, #+517]
   3531          			*nclst = n;
   \   000000F2   0x6037             STR      R7,[R6, #+0]
   3532          		}
   3533          	}
   3534          	LEAVE_FF(fs, res);
   \                     ??f_getfree_0: (+1)
   \   000000F4   0x4620             MOV      R0,R4
   \   000000F6   0xB001             ADD      SP,SP,#+4
   \   000000F8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   3535          }
   3536          
   3537          
   3538          
   3539          
   3540          /*-----------------------------------------------------------------------*/
   3541          /* Truncate File                                                         */
   3542          /*-----------------------------------------------------------------------*/
   3543          

   \                                 In section .text, align 2, keep-with-next
   3544          FRESULT f_truncate (
   3545          	FIL* fp		/* Pointer to the file object */
   3546          )
   3547          {
   \                     f_truncate: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x4680             MOV      R8,R0
   3548          	FRESULT res;
   3549          	DWORD ncl;
   3550          
   3551          
   3552          	res = validate(fp);						/* Check validity of the object */
   \   00000008   0x.... 0x....      BL       validate
   \   0000000C   0x0005             MOVS     R5,R0
   3553          	if (res == FR_OK) {
   \   0000000E   0xD130             BNE.N    ??f_truncate_0
   3554          		if (fp->err) {						/* Check error */
   \   00000010   0xF898 0x0207      LDRB     R0,[R8, #+519]
   \   00000014   0xB120             CBZ.N    R0,??f_truncate_1
   3555          			res = (FRESULT)fp->err;
   \   00000016   0x4605             MOV      R5,R0
   3556          		} else {
   3557          			if (!(fp->flag & FA_WRITE))		/* Check access mode */
   3558          				res = FR_DENIED;
   3559          		}
   3560          	}
   3561          	if (res == FR_OK) {
   3562          		if (fp->fsize > fp->fptr) {
   3563          			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
   3564          			fp->flag |= FA__WRITTEN;
   3565          			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   3566          				res = remove_chain(fp->fs, fp->sclust);
   3567          				fp->sclust = 0;
   3568          			} else {				/* When truncate a part of the file, remove remaining clusters */
   3569          				ncl = get_fat(fp->fs, fp->clust);
   3570          				res = FR_OK;
   3571          				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   3572          				if (ncl == 1) res = FR_INT_ERR;
   3573          				if (res == FR_OK && ncl < fp->fs->n_fatent) {
   3574          					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
   3575          					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
   3576          				}
   3577          			}
   3578          #if !_FS_TINY
   3579          			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
   3580          				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
   3581          					res = FR_DISK_ERR;
   3582          				else
   3583          					fp->flag &= ~FA__DIRTY;
   3584          			}
   3585          #endif
   3586          		}
   3587          		if (res != FR_OK) fp->err = (FRESULT)res;
   3588          	}
   3589          
   3590          	LEAVE_FF(fp->fs, res);
   \   00000018   0x4628             MOV      R0,R5
   \   0000001A   0xB001             ADD      SP,SP,#+4
   \   0000001C   0xE8BD 0x83F0      POP      {R4-R9,PC}
   \                     ??f_truncate_1: (+1)
   \   00000020   0xF898 0x0206      LDRB     R0,[R8, #+518]
   \   00000024   0x0781             LSLS     R1,R0,#+30
   \   00000026   0xBF58             IT       PL 
   \   00000028   0x2507             MOVPL    R5,#+7
   \   0000002A   0xD522             BPL.N    ??f_truncate_0
   \   0000002C   0xF8D8 0x1208      LDR      R1,[R8, #+520]
   \   00000030   0xF8D8 0x220C      LDR      R2,[R8, #+524]
   \   00000034   0x4291             CMP      R1,R2
   \   00000036   0xD21C             BCS.N    ??f_truncate_0
   \   00000038   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000003C   0xF8C8 0x120C      STR      R1,[R8, #+524]
   \   00000040   0xF888 0x0206      STRB     R0,[R8, #+518]
   \   00000044   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   00000048   0xB941             CBNZ.N   R1,??f_truncate_2
   \   0000004A   0xF8D8 0x1210      LDR      R1,[R8, #+528]
   \   0000004E   0x.... 0x....      BL       remove_chain
   \   00000052   0x4605             MOV      R5,R0
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xF8C8 0x0210      STR      R0,[R8, #+528]
   \   0000005A   0xE090             B.N      ??f_truncate_3
   \                     ??f_truncate_2: (+1)
   \   0000005C   0xF8D8 0x1214      LDR      R1,[R8, #+532]
   \   00000060   0x.... 0x....      BL       get_fat
   \   00000064   0x4606             MOV      R6,R0
   \   00000066   0xF116 0x0F01      CMN      R6,#+1
   \   0000006A   0xD106             BNE.N    ??f_truncate_4
   \                     ??f_truncate_5: (+1)
   \   0000006C   0x2501             MOVS     R5,#+1
   \                     ??f_truncate_6: (+1)
   \   0000006E   0xF888 0x5207      STRB     R5,[R8, #+519]
   \                     ??f_truncate_0: (+1)
   \   00000072   0x4628             MOV      R0,R5
   \   00000074   0xB001             ADD      SP,SP,#+4
   \   00000076   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   \                     ??f_truncate_4: (+1)
   \   0000007A   0x2E01             CMP      R6,#+1
   \   0000007C   0xBF08             IT       EQ 
   \   0000007E   0x2502             MOVEQ    R5,#+2
   \   00000080   0xD0F5             BEQ.N    ??f_truncate_6
   \   00000082   0xF8D8 0x9200      LDR      R9,[R8, #+512]
   \   00000086   0xF8D9 0x0214      LDR      R0,[R9, #+532]
   \   0000008A   0x4286             CMP      R6,R0
   \   0000008C   0xD27A             BCS.N    ??f_truncate_7
   \   0000008E   0xF8D8 0x7214      LDR      R7,[R8, #+532]
   \   00000092   0x2F02             CMP      R7,#+2
   \   00000094   0xD36B             BCC.N    ??f_truncate_8
   \   00000096   0x4287             CMP      R7,R0
   \   00000098   0xD269             BCS.N    ??f_truncate_8
   \   0000009A   0xF899 0x0200      LDRB     R0,[R9, #+512]
   \   0000009E   0x2801             CMP      R0,#+1
   \   000000A0   0xD034             BEQ.N    ??f_truncate_9
   \   000000A2   0xD364             BCC.N    ??f_truncate_8
   \   000000A4   0x2803             CMP      R0,#+3
   \   000000A6   0xD001             BEQ.N    ??f_truncate_10
   \   000000A8   0xD31C             BCC.N    ??f_truncate_11
   \   000000AA   0xE060             B.N      ??f_truncate_8
   \                     ??f_truncate_10: (+1)
   \   000000AC   0xF8D9 0x0220      LDR      R0,[R9, #+544]
   \   000000B0   0xEB00 0x11D7      ADD      R1,R0,R7, LSR #+7
   \   000000B4   0x4648             MOV      R0,R9
   \   000000B6   0x.... 0x....      BL       move_window
   \   000000BA   0x0005             MOVS     R5,R0
   \   000000BC   0xD158             BNE.N    ??f_truncate_12
   \   000000BE   0x00B8             LSLS     R0,R7,#+2
   \   000000C0   0x05C0             LSLS     R0,R0,#+23
   \   000000C2   0xEB09 0x50D0      ADD      R0,R9,R0, LSR #+23
   \   000000C6   0xF06F 0x4270      MVN      R2,#-268435456
   \   000000CA   0x78C1             LDRB     R1,[R0, #+3]
   \   000000CC   0xEA42 0x6101      ORR      R1,R2,R1, LSL #+24
   \   000000D0   0x22FF             MOVS     R2,#+255
   \   000000D2   0x7002             STRB     R2,[R0, #+0]
   \   000000D4   0x0E09             LSRS     R1,R1,#+24
   \   000000D6   0x7042             STRB     R2,[R0, #+1]
   \   000000D8   0x7082             STRB     R2,[R0, #+2]
   \   000000DA   0x70C1             STRB     R1,[R0, #+3]
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0xF889 0x0204      STRB     R0,[R9, #+516]
   \   000000E2   0xE045             B.N      ??f_truncate_12
   \                     ??f_truncate_11: (+1)
   \   000000E4   0xF8D9 0x0220      LDR      R0,[R9, #+544]
   \   000000E8   0xEB00 0x2117      ADD      R1,R0,R7, LSR #+8
   \   000000EC   0x4648             MOV      R0,R9
   \   000000EE   0x.... 0x....      BL       move_window
   \   000000F2   0x0005             MOVS     R5,R0
   \   000000F4   0xD13C             BNE.N    ??f_truncate_12
   \   000000F6   0x0078             LSLS     R0,R7,#+1
   \   000000F8   0x05C0             LSLS     R0,R0,#+23
   \   000000FA   0xEB09 0x50D0      ADD      R0,R9,R0, LSR #+23
   \   000000FE   0x22FF             MOVS     R2,#+255
   \   00000100   0x7002             STRB     R2,[R0, #+0]
   \   00000102   0x7042             STRB     R2,[R0, #+1]
   \   00000104   0x2001             MOVS     R0,#+1
   \   00000106   0xF889 0x0204      STRB     R0,[R9, #+516]
   \   0000010A   0xE031             B.N      ??f_truncate_12
   \                     ??f_truncate_9: (+1)
   \   0000010C   0xEB07 0x0457      ADD      R4,R7,R7, LSR #+1
   \   00000110   0xF8D9 0x0220      LDR      R0,[R9, #+544]
   \   00000114   0xEB00 0x2154      ADD      R1,R0,R4, LSR #+9
   \   00000118   0x4648             MOV      R0,R9
   \   0000011A   0x.... 0x....      BL       move_window
   \   0000011E   0x0005             MOVS     R5,R0
   \   00000120   0xD126             BNE.N    ??f_truncate_12
   \   00000122   0x05E0             LSLS     R0,R4,#+23
   \   00000124   0x1C64             ADDS     R4,R4,#+1
   \   00000126   0xEB09 0x50D0      ADD      R0,R9,R0, LSR #+23
   \   0000012A   0xF017 0x0701      ANDS     R7,R7,#0x1
   \   0000012E   0xBF1A             ITTE     NE 
   \   00000130   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000132   0xF041 0x01F0      ORRNE    R1,R1,#0xF0
   \   00000136   0x21FF             MOVEQ    R1,#+255
   \   00000138   0x7001             STRB     R1,[R0, #+0]
   \   0000013A   0x2001             MOVS     R0,#+1
   \   0000013C   0xF889 0x0204      STRB     R0,[R9, #+516]
   \   00000140   0xF8D9 0x0220      LDR      R0,[R9, #+544]
   \   00000144   0xEB00 0x2154      ADD      R1,R0,R4, LSR #+9
   \   00000148   0x4648             MOV      R0,R9
   \   0000014A   0x.... 0x....      BL       move_window
   \   0000014E   0x0005             MOVS     R5,R0
   \   00000150   0xD10E             BNE.N    ??f_truncate_12
   \   00000152   0x05E0             LSLS     R0,R4,#+23
   \   00000154   0x2F00             CMP      R7,#+0
   \   00000156   0xEB09 0x50D0      ADD      R0,R9,R0, LSR #+23
   \   0000015A   0xBF12             ITEE     NE 
   \   0000015C   0x21FF             MOVNE    R1,#+255
   \   0000015E   0x7801             LDRBEQ   R1,[R0, #+0]
   \   00000160   0xF041 0x010F      ORREQ    R1,R1,#0xF
   \   00000164   0x7001             STRB     R1,[R0, #+0]
   \   00000166   0x2001             MOVS     R0,#+1
   \   00000168   0xF889 0x0204      STRB     R0,[R9, #+516]
   \   0000016C   0xE000             B.N      ??f_truncate_12
   \                     ??f_truncate_8: (+1)
   \   0000016E   0x2502             MOVS     R5,#+2
   \                     ??f_truncate_12: (+1)
   \   00000170   0xB92D             CBNZ.N   R5,??f_truncate_3
   \   00000172   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   00000176   0x4631             MOV      R1,R6
   \   00000178   0x.... 0x....      BL       remove_chain
   \   0000017C   0x4605             MOV      R5,R0
   \                     ??f_truncate_3: (+1)
   \   0000017E   0x2D00             CMP      R5,#+0
   \   00000180   0xF47F 0xAF75      BNE.W    ??f_truncate_6
   \                     ??f_truncate_7: (+1)
   \   00000184   0xF898 0x0206      LDRB     R0,[R8, #+518]
   \   00000188   0x0640             LSLS     R0,R0,#+25
   \   0000018A   0xF57F 0xAF72      BPL.W    ??f_truncate_0
   \   0000018E   0xF8D8 0x0200      LDR      R0,[R8, #+512]
   \   00000192   0xF8D8 0x2218      LDR      R2,[R8, #+536]
   \   00000196   0x2301             MOVS     R3,#+1
   \   00000198   0x4641             MOV      R1,R8
   \   0000019A   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   0000019E   0x.... 0x....      BL       disk_write
   \   000001A2   0x2800             CMP      R0,#+0
   \   000001A4   0xF47F 0xAF62      BNE.W    ??f_truncate_5
   \   000001A8   0xF898 0x0206      LDRB     R0,[R8, #+518]
   \   000001AC   0xF000 0x00BF      AND      R0,R0,#0xBF
   \   000001B0   0xF888 0x0206      STRB     R0,[R8, #+518]
   \   000001B4   0x4628             MOV      R0,R5
   \   000001B6   0xB001             ADD      SP,SP,#+4
   \   000001B8   0xE8BD 0x83F0      POP      {R4-R9,PC}
   3591          }
   3592          
   3593          
   3594          
   3595          
   3596          /*-----------------------------------------------------------------------*/
   3597          /* Delete a File or Directory                                            */
   3598          /*-----------------------------------------------------------------------*/
   3599          

   \                                 In section .text, align 2, keep-with-next
   3600          FRESULT f_unlink (
   3601          	const TCHAR* path		/* Pointer to the file or directory path */
   3602          )
   3603          {
   \                     f_unlink: (+1)
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xF5AD 0x6D8A      SUB      SP,SP,#+1104
   3604          	FRESULT res;
   3605          	DIR dj, sdj;
   3606          	BYTE *dir;
   3607          	DWORD dclst = 0;
   3608          	DEFINE_NAMEBUF;
   3609          
   3610          
   3611          	/* Get logical drive number */
   3612          	res = find_volume(&dj.fs, &path, 1);
   \   00000006   0xA8FF             ADD      R0,SP,#+1020
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xF50D 0x618A      ADD      R1,SP,#+1104
   \   0000000E   0x3030             ADDS     R0,R0,#+48
   \   00000010   0x.... 0x....      BL       find_volume
   3613          	if (res == FR_OK) {
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD15B             BNE.N    ??f_unlink_0
   3614          		INIT_BUF(dj);
   3615          		res = follow_path(&dj, path);		/* Follow the file path */
   \   00000018   0xF8DD 0x1450      LDR      R1,[SP, #+1104]
   \   0000001C   0xF8CD 0xD444      STR      SP,[SP, #+1092]
   \   00000020   0xA88B             ADD      R0,SP,#+556
   \   00000022   0x.... 0x....      BL       follow_path
   3616          		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
   3617          			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
   3618          #if _FS_LOCK
   3619          		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD152             BNE.N    ??f_unlink_0
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable18
   \   0000002E   0xF8BD 0x2432      LDRH     R2,[SP, #+1074]
   \   00000032   0xF8DD 0x3434      LDR      R3,[SP, #+1076]
   \   00000036   0xF8DD 0x442C      LDR      R4,[SP, #+1068]
   \                     ??f_unlink_1: (+1)
   \   0000003A   0x680D             LDR      R5,[R1, #+0]
   \   0000003C   0xB135             CBZ.N    R5,??f_unlink_2
   \   0000003E   0x42A5             CMP      R5,R4
   \   00000040   0xBF01             ITTTT    EQ 
   \   00000042   0x684D             LDREQ    R5,[R1, #+4]
   \   00000044   0x429D             CMPEQ    R5,R3
   \   00000046   0x890D             LDRHEQ   R5,[R1, #+8]
   \   00000048   0x4295             CMPEQ    R5,R2
   \   0000004A   0xD003             BEQ.N    ??f_unlink_3
   \                     ??f_unlink_2: (+1)
   \   0000004C   0x1C40             ADDS     R0,R0,#+1
   \   0000004E   0x310C             ADDS     R1,R1,#+12
   \   00000050   0x2802             CMP      R0,#+2
   \   00000052   0xD3F2             BCC.N    ??f_unlink_1
   \                     ??f_unlink_3: (+1)
   \   00000054   0x2802             CMP      R0,#+2
   \   00000056   0xBF18             IT       NE 
   \   00000058   0x2010             MOVNE    R0,#+16
   \   0000005A   0xD139             BNE.N    ??f_unlink_0
   3620          #endif
   3621          		if (res == FR_OK) {					/* The object is accessible */
   3622          			dir = dj.dir;
   \   0000005C   0xF8DD 0x4440      LDR      R4,[SP, #+1088]
   3623          			if (!dir) {
   \   00000060   0xB91C             CBNZ.N   R4,??f_unlink_4
   3624          				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
   \   00000062   0x2006             MOVS     R0,#+6
   3625          			} else {
   3626          				if (dir[DIR_Attr] & AM_RDO)
   3627          					res = FR_DENIED;		/* Cannot remove R/O object */
   3628          			}
   3629          			if (res == FR_OK) {
   3630          				dclst = ld_clust(dj.fs, dir);
   3631          				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
   3632          #if _FS_RPATH
   3633          					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
   3634          						res = FR_DENIED;
   3635          					} else
   3636          #endif
   3637          					{
   3638          						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
   3639          						sdj.sclust = dclst;
   3640          						res = dir_sdi(&sdj, 2);
   3641          						if (res == FR_OK) {
   3642          							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
   3643          							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
   3644          							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
   3645          						}
   3646          					}
   3647          				}
   3648          			}
   3649          			if (res == FR_OK) {
   3650          				res = dir_remove(&dj);		/* Remove the directory entry */
   3651          				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
   3652          					res = remove_chain(dj.fs, dclst);
   3653          				if (res == FR_OK) res = sync_fs(dj.fs);
   3654          			}
   3655          		}
   3656          		FREE_BUF();
   3657          	}
   3658          
   3659          	LEAVE_FF(dj.fs, res);
   \   00000064   0xF20D 0x4D54      ADDW     SP,SP,#+1108
   \   00000068   0xBD30             POP      {R4,R5,PC}
   \                     ??f_unlink_4: (+1)
   \   0000006A   0x7AE0             LDRB     R0,[R4, #+11]
   \   0000006C   0x07C0             LSLS     R0,R0,#+31
   \   0000006E   0xD41A             BMI.N    ??f_unlink_5
   \   00000070   0xF8DD 0x042C      LDR      R0,[SP, #+1068]
   \   00000074   0x4621             MOV      R1,R4
   \   00000076   0x.... 0x....      BL       ld_clust
   \   0000007A   0x0005             MOVS     R5,R0
   \   0000007C   0xD019             BEQ.N    ??f_unlink_6
   \   0000007E   0x7AE0             LDRB     R0,[R4, #+11]
   \   00000080   0x06C0             LSLS     R0,R0,#+27
   \   00000082   0xD516             BPL.N    ??f_unlink_6
   \   00000084   0xF44F 0x7208      MOV      R2,#+544
   \   00000088   0xA98B             ADD      R1,SP,#+556
   \   0000008A   0xA803             ADD      R0,SP,#+12
   \   0000008C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000090   0x9585             STR      R5,[SP, #+532]
   \   00000092   0x2102             MOVS     R1,#+2
   \   00000094   0xA803             ADD      R0,SP,#+12
   \   00000096   0x.... 0x....      BL       dir_sdi
   \   0000009A   0xB9C8             CBNZ.N   R0,??f_unlink_0
   \   0000009C   0x2100             MOVS     R1,#+0
   \   0000009E   0xA803             ADD      R0,SP,#+12
   \   000000A0   0x.... 0x....      BL       dir_read
   \   000000A4   0xB918             CBNZ.N   R0,??f_unlink_7
   \                     ??f_unlink_5: (+1)
   \   000000A6   0x2007             MOVS     R0,#+7
   \   000000A8   0xF20D 0x4D54      ADDW     SP,SP,#+1108
   \   000000AC   0xBD30             POP      {R4,R5,PC}
   \                     ??f_unlink_7: (+1)
   \   000000AE   0x2804             CMP      R0,#+4
   \   000000B0   0xD10E             BNE.N    ??f_unlink_0
   \                     ??f_unlink_6: (+1)
   \   000000B2   0xA88B             ADD      R0,SP,#+556
   \   000000B4   0x.... 0x....      BL       dir_remove
   \   000000B8   0xB928             CBNZ.N   R0,??f_unlink_8
   \   000000BA   0xB12D             CBZ.N    R5,??f_unlink_9
   \   000000BC   0xF8DD 0x042C      LDR      R0,[SP, #+1068]
   \   000000C0   0x4629             MOV      R1,R5
   \   000000C2   0x.... 0x....      BL       remove_chain
   \                     ??f_unlink_8: (+1)
   \   000000C6   0xB918             CBNZ.N   R0,??f_unlink_0
   \                     ??f_unlink_9: (+1)
   \   000000C8   0xF8DD 0x042C      LDR      R0,[SP, #+1068]
   \   000000CC   0x.... 0x....      BL       sync_fs
   \                     ??f_unlink_0: (+1)
   \   000000D0   0xF20D 0x4D54      ADDW     SP,SP,#+1108
   \   000000D4   0xBD30             POP      {R4,R5,PC}       ;; return
   3660          }
   3661          
   3662          
   3663          
   3664          
   3665          /*-----------------------------------------------------------------------*/
   3666          /* Create a Directory                                                    */
   3667          /*-----------------------------------------------------------------------*/
   3668          

   \                                 In section .text, align 4, keep-with-next
   3669          FRESULT f_mkdir (
   3670          	const TCHAR* path		/* Pointer to the directory path */
   3671          )
   3672          {
   \                     f_mkdir: (+1)
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xF5AD 0x7D0C      SUB      SP,SP,#+560
   3673          	FRESULT res;
   3674          	DIR dj;
   3675          	BYTE *dir, n;
   3676          	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
   \   00000008   0x.... 0x....      BL       get_fattime
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   3677          	DEFINE_NAMEBUF;
   3678          
   3679          
   3680          	/* Get logical drive number */
   3681          	res = find_volume(&dj.fs, &path, 1);
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0xA98C             ADD      R1,SP,#+560
   \   00000012   0xA884             ADD      R0,SP,#+528
   \   00000014   0x.... 0x....      BL       find_volume
   \   00000018   0x0007             MOVS     R7,R0
   3682          	if (res == FR_OK) {
   \   0000001A   0xF040 0x8196      BNE.W    ??f_mkdir_0
   3683          		INIT_BUF(dj);
   \   0000001E   0xA801             ADD      R0,SP,#+4
   3684          		res = follow_path(&dj, path);			/* Follow the file path */
   \   00000020   0x998C             LDR      R1,[SP, #+560]
   \   00000022   0x908A             STR      R0,[SP, #+552]
   \   00000024   0xA804             ADD      R0,SP,#+16
   \   00000026   0x.... 0x....      BL       follow_path
   \   0000002A   0x0007             MOVS     R7,R0
   3685          		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
   \   0000002C   0xBF08             IT       EQ 
   \   0000002E   0x2708             MOVEQ    R7,#+8
   \   00000030   0xF000 0x818B      BEQ.W    ??f_mkdir_0
   3686          		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
   3687          			res = FR_INVALID_NAME;
   3688          		if (res == FR_NO_FILE) {				/* Can create a new directory */
   \   00000034   0x2F04             CMP      R7,#+4
   \   00000036   0xF040 0x8188      BNE.W    ??f_mkdir_0
   3689          			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
   \   0000003A   0x9D84             LDR      R5,[SP, #+528]
   \   0000003C   0xF8D5 0x620C      LDR      R6,[R5, #+524]
   \   00000040   0xB11E             CBZ.N    R6,??f_mkdir_1
   \   00000042   0xF8D5 0x0214      LDR      R0,[R5, #+532]
   \   00000046   0x4286             CMP      R6,R0
   \   00000048   0xD300             BCC.N    ??f_mkdir_2
   \                     ??f_mkdir_1: (+1)
   \   0000004A   0x2601             MOVS     R6,#+1
   \                     ??f_mkdir_2: (+1)
   \   0000004C   0xEA4F 0x0406      MOV.W    R4,R6
   \                     ??f_mkdir_3: (+1)
   \   00000050   0xF8D5 0x0214      LDR      R0,[R5, #+532]
   \   00000054   0x1C64             ADDS     R4,R4,#+1
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD303             BCC.N    ??f_mkdir_4
   \   0000005A   0x2402             MOVS     R4,#+2
   \   0000005C   0x2E02             CMP      R6,#+2
   \   0000005E   0xF0C0 0x8099      BCC.W    ??f_mkdir_5
   \                     ??f_mkdir_4: (+1)
   \   00000062   0x4621             MOV      R1,R4
   \   00000064   0x4628             MOV      R0,R5
   \   00000066   0x.... 0x....      BL       get_fat
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xF040 0x808A      BNE.W    ??f_mkdir_6
   \   00000070   0x2C02             CMP      R4,#+2
   \   00000072   0xD36C             BCC.N    ??f_mkdir_7
   \   00000074   0xF8D5 0x0214      LDR      R0,[R5, #+532]
   \   00000078   0x4284             CMP      R4,R0
   \   0000007A   0xD268             BCS.N    ??f_mkdir_7
   \   0000007C   0xF895 0x0200      LDRB     R0,[R5, #+512]
   \   00000080   0x2801             CMP      R0,#+1
   \   00000082   0xD034             BEQ.N    ??f_mkdir_8
   \   00000084   0xD363             BCC.N    ??f_mkdir_7
   \   00000086   0x2803             CMP      R0,#+3
   \   00000088   0xD001             BEQ.N    ??f_mkdir_9
   \   0000008A   0xD31C             BCC.N    ??f_mkdir_10
   \   0000008C   0xE05F             B.N      ??f_mkdir_7
   \                     ??f_mkdir_9: (+1)
   \   0000008E   0xF8D5 0x0220      LDR      R0,[R5, #+544]
   \   00000092   0xEB00 0x11D4      ADD      R1,R0,R4, LSR #+7
   \   00000096   0x4628             MOV      R0,R5
   \   00000098   0x.... 0x....      BL       move_window
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD157             BNE.N    ??f_mkdir_11
   \   000000A0   0x00A1             LSLS     R1,R4,#+2
   \   000000A2   0x05C9             LSLS     R1,R1,#+23
   \   000000A4   0xEB15 0x51D1      ADDS     R1,R5,R1, LSR #+23
   \   000000A8   0xF06F 0x4370      MVN      R3,#-268435456
   \   000000AC   0x78CA             LDRB     R2,[R1, #+3]
   \   000000AE   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   000000B2   0x23FF             MOVS     R3,#+255
   \   000000B4   0x700B             STRB     R3,[R1, #+0]
   \   000000B6   0x0E12             LSRS     R2,R2,#+24
   \   000000B8   0x704B             STRB     R3,[R1, #+1]
   \   000000BA   0x708B             STRB     R3,[R1, #+2]
   \   000000BC   0x70CA             STRB     R2,[R1, #+3]
   \   000000BE   0x2101             MOVS     R1,#+1
   \   000000C0   0xF885 0x1204      STRB     R1,[R5, #+516]
   \   000000C4   0xE044             B.N      ??f_mkdir_11
   \                     ??f_mkdir_10: (+1)
   \   000000C6   0xF8D5 0x0220      LDR      R0,[R5, #+544]
   \   000000CA   0xEB00 0x2114      ADD      R1,R0,R4, LSR #+8
   \   000000CE   0x4628             MOV      R0,R5
   \   000000D0   0x.... 0x....      BL       move_window
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD13B             BNE.N    ??f_mkdir_11
   \   000000D8   0x0061             LSLS     R1,R4,#+1
   \   000000DA   0x05C9             LSLS     R1,R1,#+23
   \   000000DC   0xEB15 0x51D1      ADDS     R1,R5,R1, LSR #+23
   \   000000E0   0x23FF             MOVS     R3,#+255
   \   000000E2   0x700B             STRB     R3,[R1, #+0]
   \   000000E4   0x704B             STRB     R3,[R1, #+1]
   \   000000E6   0x2101             MOVS     R1,#+1
   \   000000E8   0xF885 0x1204      STRB     R1,[R5, #+516]
   \   000000EC   0xE030             B.N      ??f_mkdir_11
   \                     ??f_mkdir_8: (+1)
   \   000000EE   0xEB04 0x0654      ADD      R6,R4,R4, LSR #+1
   \   000000F2   0xF8D5 0x0220      LDR      R0,[R5, #+544]
   \   000000F6   0xEB00 0x2156      ADD      R1,R0,R6, LSR #+9
   \   000000FA   0x4628             MOV      R0,R5
   \   000000FC   0x.... 0x....      BL       move_window
   \   00000100   0xBB30             CBNZ.N   R0,??f_mkdir_11
   \   00000102   0x05F0             LSLS     R0,R6,#+23
   \   00000104   0x1C76             ADDS     R6,R6,#+1
   \   00000106   0xEB15 0x51D0      ADDS     R1,R5,R0, LSR #+23
   \   0000010A   0xF014 0x0A01      ANDS     R10,R4,#0x1
   \   0000010E   0xBF1A             ITTE     NE 
   \   00000110   0x7808             LDRBNE   R0,[R1, #+0]
   \   00000112   0xF040 0x00F0      ORRNE    R0,R0,#0xF0
   \   00000116   0x20FF             MOVEQ    R0,#+255
   \   00000118   0x7008             STRB     R0,[R1, #+0]
   \   0000011A   0x2001             MOVS     R0,#+1
   \   0000011C   0xF885 0x0204      STRB     R0,[R5, #+516]
   \   00000120   0xF8D5 0x0220      LDR      R0,[R5, #+544]
   \   00000124   0xEB00 0x2156      ADD      R1,R0,R6, LSR #+9
   \   00000128   0x4628             MOV      R0,R5
   \   0000012A   0x.... 0x....      BL       move_window
   \   0000012E   0xB978             CBNZ.N   R0,??f_mkdir_11
   \   00000130   0x05F1             LSLS     R1,R6,#+23
   \   00000132   0xEB15 0x51D1      ADDS     R1,R5,R1, LSR #+23
   \   00000136   0xF1BA 0x0F00      CMP      R10,#+0
   \   0000013A   0xBF12             ITEE     NE 
   \   0000013C   0x22FF             MOVNE    R2,#+255
   \   0000013E   0x780A             LDRBEQ   R2,[R1, #+0]
   \   00000140   0xF042 0x020F      ORREQ    R2,R2,#0xF
   \   00000144   0x700A             STRB     R2,[R1, #+0]
   \   00000146   0x2101             MOVS     R1,#+1
   \   00000148   0xF885 0x1204      STRB     R1,[R5, #+516]
   \   0000014C   0xE000             B.N      ??f_mkdir_11
   \                     ??f_mkdir_7: (+1)
   \   0000014E   0x2002             MOVS     R0,#+2
   \                     ??f_mkdir_11: (+1)
   \   00000150   0xB980             CBNZ.N   R0,??f_mkdir_12
   \   00000152   0xF8D5 0x0210      LDR      R0,[R5, #+528]
   \   00000156   0xF8C5 0x420C      STR      R4,[R5, #+524]
   \   0000015A   0xF110 0x0F01      CMN      R0,#+1
   \   0000015E   0xD00E             BEQ.N    ??f_mkdir_13
   \   00000160   0x1E40             SUBS     R0,R0,#+1
   \   00000162   0xF8C5 0x0210      STR      R0,[R5, #+528]
   \   00000166   0xF895 0x0205      LDRB     R0,[R5, #+517]
   \   0000016A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000016E   0xF885 0x0205      STRB     R0,[R5, #+517]
   \   00000172   0xE004             B.N      ??f_mkdir_13
   \                     ??f_mkdir_12: (+1)
   \   00000174   0x2801             CMP      R0,#+1
   \   00000176   0xBF0C             ITE      EQ 
   \   00000178   0xF04F 0x34FF      MOVEQ    R4,#-1
   \   0000017C   0x2401             MOVNE    R4,#+1
   3690          			res = FR_OK;
   3691          			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
   \                     ??f_mkdir_13: (+1)
   \   0000017E   0xB96C             CBNZ.N   R4,??f_mkdir_14
   \   00000180   0x2707             MOVS     R7,#+7
   \   00000182   0xE0BA             B.N      ??f_mkdir_15
   \                     ??f_mkdir_6: (+1)
   \   00000184   0xF110 0x0F01      CMN      R0,#+1
   \   00000188   0xBF18             IT       NE 
   \   0000018A   0x2801             CMPNE    R0,#+1
   \   0000018C   0xD005             BEQ.N    ??f_mkdir_16
   \   0000018E   0x42B4             CMP      R4,R6
   \   00000190   0xF47F 0xAF5E      BNE.W    ??f_mkdir_3
   \                     ??f_mkdir_5: (+1)
   \   00000194   0x2400             MOVS     R4,#+0
   \   00000196   0x2707             MOVS     R7,#+7
   \   00000198   0xE0AF             B.N      ??f_mkdir_15
   \                     ??f_mkdir_16: (+1)
   \   0000019A   0x4604             MOV      R4,R0
   3692          			if (dcl == 1) res = FR_INT_ERR;
   \                     ??f_mkdir_14: (+1)
   \   0000019C   0x2C01             CMP      R4,#+1
   \   0000019E   0xBF08             IT       EQ 
   \   000001A0   0x2702             MOVEQ    R7,#+2
   \   000001A2   0xF000 0x80AA      BEQ.W    ??f_mkdir_15
   3693          			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
   \   000001A6   0xF114 0x0F01      CMN      R4,#+1
   \   000001AA   0xBF08             IT       EQ 
   \   000001AC   0x2701             MOVEQ    R7,#+1
   \   000001AE   0xF000 0x80A4      BEQ.W    ??f_mkdir_15
   3694          			if (res == FR_OK)					/* Flush FAT */
   3695          				res = sync_window(dj.fs);
   \   000001B2   0x9884             LDR      R0,[SP, #+528]
   \   000001B4   0x.... 0x....      BL       sync_window
   \   000001B8   0x0007             MOVS     R7,R0
   3696          			if (res == FR_OK) {					/* Initialize the new directory table */
   \   000001BA   0xF040 0x8098      BNE.W    ??f_mkdir_17
   3697          				dsc = clust2sect(dj.fs, dcl);
   \   000001BE   0x9D84             LDR      R5,[SP, #+528]
   \   000001C0   0x1EA1             SUBS     R1,R4,#+2
   \   000001C2   0xF8D5 0x2214      LDR      R2,[R5, #+532]
   \   000001C6   0x1E92             SUBS     R2,R2,#+2
   \   000001C8   0x4291             CMP      R1,R2
   \   000001CA   0xBF2F             ITEEE    CS 
   \   000001CC   0x2600             MOVCS    R6,#+0
   \   000001CE   0xF895 0x2202      LDRBCC   R2,[R5, #+514]
   \   000001D2   0xF8D5 0x0228      LDRCC    R0,[R5, #+552]
   \   000001D6   0xFB02 0x0601      MLACC    R6,R2,R1,R0
   3698          				dir = dj.fs->win.d8;
   \   000001DA   0xF44F 0x7100      MOV      R1,#+512
   \   000001DE   0x4628             MOV      R0,R5
   \   000001E0   0x.... 0x....      BL       __aeabi_memclr
   3699          				mem_set(dir, 0, SS(dj.fs));
   3700          				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
   \   000001E4   0x2220             MOVS     R2,#+32
   \   000001E6   0x210B             MOVS     R1,#+11
   \   000001E8   0x4628             MOV      R0,R5
   \   000001EA   0x.... 0x....      BL       __aeabi_memset
   3701          				dir[DIR_Name] = '.';
   \   000001EE   0x202E             MOVS     R0,#+46
   3702          				dir[DIR_Attr] = AM_DIR;
   3703          				ST_DWORD(dir + DIR_WrtTime, tm);
   3704          				st_clust(dir, dcl);
   3705          				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
   \   000001F0   0x4629             MOV      R1,R5
   \   000001F2   0x7028             STRB     R0,[R5, #+0]
   \   000001F4   0x2010             MOVS     R0,#+16
   \   000001F6   0x72E8             STRB     R0,[R5, #+11]
   \   000001F8   0x9800             LDR      R0,[SP, #+0]
   \   000001FA   0x2220             MOVS     R2,#+32
   \   000001FC   0x75A8             STRB     R0,[R5, #+22]
   \   000001FE   0x9800             LDR      R0,[SP, #+0]
   \   00000200   0x0400             LSLS     R0,R0,#+16
   \   00000202   0x0E00             LSRS     R0,R0,#+24
   \   00000204   0x75E8             STRB     R0,[R5, #+23]
   \   00000206   0x9800             LDR      R0,[SP, #+0]
   \   00000208   0x0C00             LSRS     R0,R0,#+16
   \   0000020A   0x7628             STRB     R0,[R5, #+24]
   \   0000020C   0x9800             LDR      R0,[SP, #+0]
   \   0000020E   0x76AC             STRB     R4,[R5, #+26]
   \   00000210   0x0E00             LSRS     R0,R0,#+24
   \   00000212   0x7668             STRB     R0,[R5, #+25]
   \   00000214   0x0420             LSLS     R0,R4,#+16
   \   00000216   0x0E00             LSRS     R0,R0,#+24
   \   00000218   0x76E8             STRB     R0,[R5, #+27]
   \   0000021A   0x0C20             LSRS     R0,R4,#+16
   \   0000021C   0x7528             STRB     R0,[R5, #+20]
   \   0000021E   0x0A00             LSRS     R0,R0,#+8
   \   00000220   0xF885 0x0015      STRB.W   R0,[R5, #+21]
   \   00000224   0xF105 0x0020      ADD      R0,R5,#+32
   \                     ??f_mkdir_18: (+1)
   \   00000228   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   0000022C   0x1E52             SUBS     R2,R2,#+1
   \   0000022E   0xF800 0x3B01      STRB     R3,[R0], #+1
   \   00000232   0xD1F9             BNE.N    ??f_mkdir_18
   3706          				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
   \   00000234   0x202E             MOVS     R0,#+46
   \   00000236   0xF885 0x0021      STRB     R0,[R5, #+33]
   3707          				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
   \   0000023A   0x9984             LDR      R1,[SP, #+528]
   \   0000023C   0x9886             LDR      R0,[SP, #+536]
   \   0000023E   0xF891 0x2200      LDRB     R2,[R1, #+512]
   \   00000242   0x2A03             CMP      R2,#+3
   \   00000244   0xBF02             ITTT     EQ 
   \   00000246   0xF8D1 0x1224      LDREQ    R1,[R1, #+548]
   \   0000024A   0x4288             CMPEQ    R0,R1
   \   0000024C   0x2000             MOVEQ    R0,#+0
   3708          					pcl = 0;
   3709          				st_clust(dir + SZ_DIRE, pcl);
   \   0000024E   0xF105 0x0120      ADD      R1,R5,#+32
   \   00000252   0x0402             LSLS     R2,R0,#+16
   \   00000254   0x7688             STRB     R0,[R1, #+26]
   \   00000256   0x0C00             LSRS     R0,R0,#+16
   \   00000258   0x7508             STRB     R0,[R1, #+20]
   \   0000025A   0x0E12             LSRS     R2,R2,#+24
   \   0000025C   0x0A00             LSRS     R0,R0,#+8
   \   0000025E   0x76CA             STRB     R2,[R1, #+27]
   \   00000260   0x7548             STRB     R0,[R1, #+21]
   3710          				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
   \   00000262   0x9884             LDR      R0,[SP, #+528]
   \   00000264   0xF890 0xA202      LDRB     R10,[R0, #+514]
   \   00000268   0xF1BA 0x0F00      CMP      R10,#+0
   \   0000026C   0xD040             BEQ.N    ??f_mkdir_19
   3711          					dj.fs->winsect = dsc++;
   3712          					dj.fs->wflag = 1;
   \                     ??f_mkdir_20: (+1)
   \   0000026E   0x2101             MOVS     R1,#+1
   \   00000270   0x9884             LDR      R0,[SP, #+528]
   \   00000272   0xF880 0x1204      STRB     R1,[R0, #+516]
   \   00000276   0xF8C0 0x622C      STR      R6,[R0, #+556]
   3713          					res = sync_window(dj.fs);
   \   0000027A   0xF8DD 0x8210      LDR      R8,[SP, #+528]
   \   0000027E   0x1C76             ADDS     R6,R6,#+1
   \   00000280   0xF898 0x0204      LDRB     R0,[R8, #+516]
   \   00000284   0xB348             CBZ.N    R0,??f_mkdir_21
   \   00000286   0xF8D8 0x922C      LDR      R9,[R8, #+556]
   \   0000028A   0xF898 0x0201      LDRB     R0,[R8, #+513]
   \   0000028E   0x2301             MOVS     R3,#+1
   \   00000290   0x4641             MOV      R1,R8
   \   00000292   0x464A             MOV      R2,R9
   \   00000294   0x.... 0x....      BL       disk_write
   \   00000298   0xB108             CBZ.N    R0,??f_mkdir_22
   \   0000029A   0x2701             MOVS     R7,#+1
   \   0000029C   0xE01D             B.N      ??f_mkdir_21
   \                     ??f_mkdir_22: (+1)
   \   0000029E   0xF888 0x0204      STRB     R0,[R8, #+516]
   \   000002A2   0xF8D8 0x0220      LDR      R0,[R8, #+544]
   \   000002A6   0xF8D8 0x1218      LDR      R1,[R8, #+536]
   \   000002AA   0xEBA9 0x0000      SUB      R0,R9,R0
   \   000002AE   0x4288             CMP      R0,R1
   \   000002B0   0xD213             BCS.N    ??f_mkdir_21
   \   000002B2   0xF898 0x0203      LDRB     R0,[R8, #+515]
   \   000002B6   0x2802             CMP      R0,#+2
   \   000002B8   0xF0C0 0x800F      BCC.W    ??f_mkdir_21
   \   000002BC   0xF1A0 0x0B01      SUB      R11,R0,#+1
   \                     ??f_mkdir_23: (+1)
   \   000002C0   0xF8D8 0x0218      LDR      R0,[R8, #+536]
   \   000002C4   0x2301             MOVS     R3,#+1
   \   000002C6   0x4641             MOV      R1,R8
   \   000002C8   0x4481             ADD      R9,R0,R9
   \   000002CA   0xF898 0x0201      LDRB     R0,[R8, #+513]
   \   000002CE   0x464A             MOV      R2,R9
   \   000002D0   0x.... 0x....      BL       disk_write
   \   000002D4   0xF1BB 0x0B01      SUBS     R11,R11,#+1
   \   000002D8   0xD1F2             BNE.N    ??f_mkdir_23
   3714          					if (res != FR_OK) break;
   \                     ??f_mkdir_21: (+1)
   \   000002DA   0xB947             CBNZ.N   R7,??f_mkdir_17
   3715          					mem_set(dir, 0, SS(dj.fs));
   \   000002DC   0xF44F 0x7100      MOV      R1,#+512
   \   000002E0   0x4628             MOV      R0,R5
   \   000002E2   0x.... 0x....      BL       __aeabi_memclr
   3716          				}
   \   000002E6   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \   000002EA   0xD1C0             BNE.N    ??f_mkdir_20
   \   000002EC   0xE000             B.N      ??f_mkdir_19
   3717          			}
   3718          			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
   \                     ??f_mkdir_17: (+1)
   \   000002EE   0xB91F             CBNZ.N   R7,??f_mkdir_24
   \                     ??f_mkdir_19: (+1)
   \   000002F0   0xA804             ADD      R0,SP,#+16
   \   000002F2   0x.... 0x....      BL       dir_register
   \   000002F6   0x4607             MOV      R7,R0
   3719          			if (res != FR_OK) {
   \                     ??f_mkdir_24: (+1)
   \   000002F8   0xB147             CBZ.N    R7,??f_mkdir_25
   3720          				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
   \                     ??f_mkdir_15: (+1)
   \   000002FA   0x9884             LDR      R0,[SP, #+528]
   \   000002FC   0x4621             MOV      R1,R4
   \   000002FE   0x.... 0x....      BL       remove_chain
   3721          			} else {
   3722          				dir = dj.dir;
   3723          				dir[DIR_Attr] = AM_DIR;				/* Attribute */
   3724          				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
   3725          				st_clust(dir, dcl);					/* Table start cluster */
   3726          				dj.fs->wflag = 1;
   3727          				res = sync_fs(dj.fs);
   3728          			}
   3729          		}
   3730          		FREE_BUF();
   3731          	}
   3732          
   3733          	LEAVE_FF(dj.fs, res);
   \   00000302   0x4638             MOV      R0,R7
   \   00000304   0xF50D 0x7D0D      ADD      SP,SP,#+564
   \   00000308   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??f_mkdir_25: (+1)
   \   0000030C   0x9D89             LDR      R5,[SP, #+548]
   \   0000030E   0x2010             MOVS     R0,#+16
   \   00000310   0x72E8             STRB     R0,[R5, #+11]
   \   00000312   0x9800             LDR      R0,[SP, #+0]
   \   00000314   0x75A8             STRB     R0,[R5, #+22]
   \   00000316   0x9800             LDR      R0,[SP, #+0]
   \   00000318   0x0400             LSLS     R0,R0,#+16
   \   0000031A   0x0E00             LSRS     R0,R0,#+24
   \   0000031C   0x75E8             STRB     R0,[R5, #+23]
   \   0000031E   0x9800             LDR      R0,[SP, #+0]
   \   00000320   0x0C00             LSRS     R0,R0,#+16
   \   00000322   0x7628             STRB     R0,[R5, #+24]
   \   00000324   0x9800             LDR      R0,[SP, #+0]
   \   00000326   0x76AC             STRB     R4,[R5, #+26]
   \   00000328   0x0E00             LSRS     R0,R0,#+24
   \   0000032A   0x7668             STRB     R0,[R5, #+25]
   \   0000032C   0x0420             LSLS     R0,R4,#+16
   \   0000032E   0x0E00             LSRS     R0,R0,#+24
   \   00000330   0x76E8             STRB     R0,[R5, #+27]
   \   00000332   0x0C20             LSRS     R0,R4,#+16
   \   00000334   0x7528             STRB     R0,[R5, #+20]
   \   00000336   0x0A00             LSRS     R0,R0,#+8
   \   00000338   0x7568             STRB     R0,[R5, #+21]
   \   0000033A   0x9984             LDR      R1,[SP, #+528]
   \   0000033C   0x2001             MOVS     R0,#+1
   \   0000033E   0xF881 0x0204      STRB     R0,[R1, #+516]
   \   00000342   0x9884             LDR      R0,[SP, #+528]
   \   00000344   0x.... 0x....      BL       sync_fs
   \   00000348   0x4607             MOV      R7,R0
   \                     ??f_mkdir_0: (+1)
   \   0000034A   0x4638             MOV      R0,R7
   \   0000034C   0xF50D 0x7D0D      ADD      SP,SP,#+564
   \   00000350   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   3734          }
   3735          
   3736          
   3737          
   3738          
   3739          /*-----------------------------------------------------------------------*/
   3740          /* Change Attribute                                                      */
   3741          /*-----------------------------------------------------------------------*/
   3742          

   \                                 In section .text, align 2, keep-with-next
   3743          FRESULT f_chmod (
   3744          	const TCHAR* path,	/* Pointer to the file path */
   3745          	BYTE attr,			/* Attribute bits */
   3746          	BYTE mask			/* Attribute mask to change */
   3747          )
   3748          {
   \                     f_chmod: (+1)
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xF5AD 0x7D0C      SUB      SP,SP,#+560
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4615             MOV      R5,R2
   3749          	FRESULT res;
   3750          	DIR dj;
   3751          	BYTE *dir;
   3752          	DEFINE_NAMEBUF;
   3753          
   3754          
   3755          	/* Get logical drive number */
   3756          	res = find_volume(&dj.fs, &path, 1);
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0xA98C             ADD      R1,SP,#+560
   \   0000000E   0xA883             ADD      R0,SP,#+524
   \   00000010   0x.... 0x....      BL       find_volume
   3757          	if (res == FR_OK) {
   \   00000014   0xB9D8             CBNZ.N   R0,??f_chmod_0
   3758          		INIT_BUF(dj);
   3759          		res = follow_path(&dj, path);		/* Follow the file path */
   \   00000016   0x998C             LDR      R1,[SP, #+560]
   \   00000018   0xF8CD 0xD224      STR      SP,[SP, #+548]
   \   0000001C   0xA803             ADD      R0,SP,#+12
   \   0000001E   0x.... 0x....      BL       follow_path
   3760          		FREE_BUF();
   3761          		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
   3762          			res = FR_INVALID_NAME;
   3763          		if (res == FR_OK) {
   \   00000022   0xB9A0             CBNZ.N   R0,??f_chmod_0
   3764          			dir = dj.dir;
   \   00000024   0x9888             LDR      R0,[SP, #+544]
   3765          			if (!dir) {						/* Is it a root directory? */
   \   00000026   0xB918             CBNZ.N   R0,??f_chmod_1
   3766          				res = FR_INVALID_NAME;
   \   00000028   0x2006             MOVS     R0,#+6
   3767          			} else {						/* File or sub directory */
   3768          				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
   3769          				dir[DIR_Attr] = (attr & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
   3770          				dj.fs->wflag = 1;
   3771          				res = sync_fs(dj.fs);
   3772          			}
   3773          		}
   3774          	}
   3775          
   3776          	LEAVE_FF(dj.fs, res);
   \   0000002A   0xF50D 0x7D0D      ADD      SP,SP,#+564
   \   0000002E   0xBD30             POP      {R4,R5,PC}
   \                     ??f_chmod_1: (+1)
   \   00000030   0x7AC2             LDRB     R2,[R0, #+11]
   \   00000032   0xF005 0x0527      AND      R5,R5,#0x27
   \   00000036   0xEA05 0x0104      AND      R1,R5,R4
   \   0000003A   0x43AA             BICS     R2,R2,R5
   \   0000003C   0x4311             ORRS     R1,R2,R1
   \   0000003E   0x72C1             STRB     R1,[R0, #+11]
   \   00000040   0x9983             LDR      R1,[SP, #+524]
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xF881 0x0204      STRB     R0,[R1, #+516]
   \   00000048   0x9883             LDR      R0,[SP, #+524]
   \   0000004A   0x.... 0x....      BL       sync_fs
   \                     ??f_chmod_0: (+1)
   \   0000004E   0xF50D 0x7D0D      ADD      SP,SP,#+564
   \   00000052   0xBD30             POP      {R4,R5,PC}       ;; return
   3777          }
   3778          
   3779          
   3780          
   3781          
   3782          /*-----------------------------------------------------------------------*/
   3783          /* Rename File/Directory                                                 */
   3784          /*-----------------------------------------------------------------------*/
   3785          

   \                                 In section .text, align 4, keep-with-next
   3786          FRESULT f_rename (
   3787          	const TCHAR* path_old,	/* Pointer to the object to be renamed */
   3788          	const TCHAR* path_new	/* Pointer to the new name */
   3789          )
   3790          {
   \                     f_rename: (+1)
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xF2AD 0x4D64      SUBW     SP,SP,#+1124
   \   00000006   0x460C             MOV      R4,R1
   3791          	FRESULT res;
   3792          	DIR djo, djn;
   3793          	BYTE buf[21], *dir;
   3794          	DWORD dw;
   3795          	DEFINE_NAMEBUF;
   3796          
   3797          
   3798          	/* Get logical drive number of the source object */
   3799          	res = find_volume(&djo.fs, &path_old, 1);
   \   00000008   0xA9FF             ADD      R1,SP,#+1020
   \   0000000A   0xA8FF             ADD      R0,SP,#+1020
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0x3168             ADDS     R1,R1,#+104
   \   00000010   0x3048             ADDS     R0,R0,#+72
   \   00000012   0x.... 0x....      BL       find_volume
   3800          	if (res == FR_OK) {
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xF040 0x80BC      BNE.W    ??f_rename_0
   3801          		djn.fs = djo.fs;
   \   0000001C   0xF8DD 0x0444      LDR      R0,[SP, #+1092]
   3802          		INIT_BUF(djo);
   3803          		res = follow_path(&djo, path_old);		/* Check old object */
   \   00000020   0xF8DD 0x1464      LDR      R1,[SP, #+1124]
   \   00000024   0xF8CD 0xD45C      STR      SP,[SP, #+1116]
   \   00000028   0x9089             STR      R0,[SP, #+548]
   \   0000002A   0xA891             ADD      R0,SP,#+580
   \   0000002C   0x.... 0x....      BL       follow_path
   3804          		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
   3805          			res = FR_INVALID_NAME;
   3806          #if _FS_LOCK
   3807          		if (res == FR_OK) res = chk_lock(&djo, 2);
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xF040 0x80AF      BNE.W    ??f_rename_0
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable18
   \   0000003A   0xF8BD 0x244A      LDRH     R2,[SP, #+1098]
   \   0000003E   0xF8DD 0x344C      LDR      R3,[SP, #+1100]
   \   00000042   0xF8DD 0x5444      LDR      R5,[SP, #+1092]
   \                     ??f_rename_1: (+1)
   \   00000046   0x680E             LDR      R6,[R1, #+0]
   \   00000048   0xB136             CBZ.N    R6,??f_rename_2
   \   0000004A   0x42AE             CMP      R6,R5
   \   0000004C   0xBF01             ITTTT    EQ 
   \   0000004E   0x684E             LDREQ    R6,[R1, #+4]
   \   00000050   0x429E             CMPEQ    R6,R3
   \   00000052   0x890E             LDRHEQ   R6,[R1, #+8]
   \   00000054   0x4296             CMPEQ    R6,R2
   \   00000056   0xD003             BEQ.N    ??f_rename_3
   \                     ??f_rename_2: (+1)
   \   00000058   0x1C40             ADDS     R0,R0,#+1
   \   0000005A   0x310C             ADDS     R1,R1,#+12
   \   0000005C   0x2802             CMP      R0,#+2
   \   0000005E   0xD3F2             BCC.N    ??f_rename_1
   \                     ??f_rename_3: (+1)
   \   00000060   0x2802             CMP      R0,#+2
   \   00000062   0xBF18             IT       NE 
   \   00000064   0x2010             MOVNE    R0,#+16
   \   00000066   0xF040 0x8095      BNE.W    ??f_rename_0
   3808          #endif
   3809          		if (res == FR_OK) {						/* Old object is found */
   3810          			if (!djo.dir) {						/* Is root dir? */
   \   0000006A   0xF8DD 0x0458      LDR      R0,[SP, #+1112]
   \   0000006E   0xB918             CBNZ.N   R0,??f_rename_4
   3811          				res = FR_NO_FILE;
   \   00000070   0x2004             MOVS     R0,#+4
   3812          			} else {
   3813          				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about object except name */
   3814          				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
   3815          				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
   3816          					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
   3817          				else
   3818          					res = FR_INVALID_DRIVE;
   3819          				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
   3820          				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   3821          					res = dir_register(&djn);			/* Register the new entry */
   3822          					if (res == FR_OK) {
   3823          /* Start of critical section where any interruption can cause a cross-link */
   3824          						dir = djn.dir;					/* Copy information about object except name */
   3825          						mem_cpy(dir + 13, buf + 2, 19);
   3826          						dir[DIR_Attr] = buf[0] | AM_ARC;
   3827          						djo.fs->wflag = 1;
   3828          						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-directory if needed */
   3829          							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
   3830          							if (!dw) {
   3831          								res = FR_INT_ERR;
   3832          							} else {
   3833          								res = move_window(djo.fs, dw);
   3834          								dir = djo.fs->win.d8 + SZ_DIRE * 1;	/* Ptr to .. entry */
   3835          								if (res == FR_OK && dir[1] == '.') {
   3836          									st_clust(dir, djn.sclust);
   3837          									djo.fs->wflag = 1;
   3838          								}
   3839          							}
   3840          						}
   3841          						if (res == FR_OK) {
   3842          							res = dir_remove(&djo);		/* Remove old entry */
   3843          							if (res == FR_OK)
   3844          								res = sync_fs(djo.fs);
   3845          						}
   3846          /* End of critical section */
   3847          					}
   3848          				}
   3849          			}
   3850          		}
   3851          		FREE_BUF();
   3852          	}
   3853          
   3854          	LEAVE_FF(djo.fs, res);
   \   00000072   0xF50D 0x6D8D      ADD      SP,SP,#+1128
   \   00000076   0xBD70             POP      {R4-R6,PC}
   \                     ??f_rename_4: (+1)
   \   00000078   0xA903             ADD      R1,SP,#+12
   \   0000007A   0x300B             ADDS     R0,R0,#+11
   \   0000007C   0xF05F 0x0215      MOVS.W   R2,#+21
   \                     ??f_rename_5: (+1)
   \   00000080   0xF810 0x3B01      LDRB     R3,[R0], #+1
   \   00000084   0x1E52             SUBS     R2,R2,#+1
   \   00000086   0xF801 0x3B01      STRB     R3,[R1], #+1
   \   0000008A   0xD1F9             BNE.N    ??f_rename_5
   \   0000008C   0xF44F 0x7208      MOV      R2,#+544
   \   00000090   0xA991             ADD      R1,SP,#+580
   \   00000092   0xA809             ADD      R0,SP,#+36
   \   00000094   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000098   0xB1E4             CBZ.N    R4,??f_rename_6
   \   0000009A   0x4620             MOV      R0,R4
   \   0000009C   0xE000             B.N      ??f_rename_7
   \                     ??f_rename_8: (+1)
   \   0000009E   0x1C40             ADDS     R0,R0,#+1
   \                     ??f_rename_7: (+1)
   \   000000A0   0x7801             LDRB     R1,[R0, #+0]
   \   000000A2   0x2921             CMP      R1,#+33
   \   000000A4   0xD301             BCC.N    ??f_rename_9
   \   000000A6   0x293A             CMP      R1,#+58
   \   000000A8   0xD1F9             BNE.N    ??f_rename_8
   \                     ??f_rename_9: (+1)
   \   000000AA   0x293A             CMP      R1,#+58
   \   000000AC   0xD109             BNE.N    ??f_rename_10
   \   000000AE   0xF814 0x1B01      LDRB     R1,[R4], #+1
   \   000000B2   0x3930             SUBS     R1,R1,#+48
   \   000000B4   0x290A             CMP      R1,#+10
   \   000000B6   0xD20D             BCS.N    ??f_rename_6
   \   000000B8   0x4284             CMP      R4,R0
   \   000000BA   0xBF08             IT       EQ 
   \   000000BC   0x2900             CMPEQ    R1,#+0
   \   000000BE   0xD109             BNE.N    ??f_rename_6
   \   000000C0   0x1C44             ADDS     R4,R0,#+1
   \                     ??f_rename_10: (+1)
   \   000000C2   0x4621             MOV      R1,R4
   \   000000C4   0xA809             ADD      R0,SP,#+36
   \   000000C6   0x.... 0x....      BL       follow_path
   \   000000CA   0xB938             CBNZ.N   R0,??f_rename_11
   \   000000CC   0x2008             MOVS     R0,#+8
   \   000000CE   0xF50D 0x6D8D      ADD      SP,SP,#+1128
   \   000000D2   0xBD70             POP      {R4-R6,PC}
   \                     ??f_rename_6: (+1)
   \   000000D4   0x200B             MOVS     R0,#+11
   \   000000D6   0xF50D 0x6D8D      ADD      SP,SP,#+1128
   \   000000DA   0xBD70             POP      {R4-R6,PC}
   \                     ??f_rename_11: (+1)
   \   000000DC   0x2804             CMP      R0,#+4
   \   000000DE   0xD159             BNE.N    ??f_rename_0
   \   000000E0   0xA809             ADD      R0,SP,#+36
   \   000000E2   0x.... 0x....      BL       dir_register
   \   000000E6   0x2800             CMP      R0,#+0
   \   000000E8   0xD154             BNE.N    ??f_rename_0
   \   000000EA   0x998E             LDR      R1,[SP, #+568]
   \   000000EC   0xF10D 0x020E      ADD      R2,SP,#+14
   \   000000F0   0xF05F 0x0313      MOVS.W   R3,#+19
   \   000000F4   0xF101 0x000D      ADD      R0,R1,#+13
   \                     ??f_rename_12: (+1)
   \   000000F8   0xF812 0x4B01      LDRB     R4,[R2], #+1
   \   000000FC   0x1E5B             SUBS     R3,R3,#+1
   \   000000FE   0xF800 0x4B01      STRB     R4,[R0], #+1
   \   00000102   0xD1F9             BNE.N    ??f_rename_12
   \   00000104   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000108   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000010C   0x72C8             STRB     R0,[R1, #+11]
   \   0000010E   0xF8DD 0x2444      LDR      R2,[SP, #+1092]
   \   00000112   0x2001             MOVS     R0,#+1
   \   00000114   0xF882 0x0204      STRB     R0,[R2, #+516]
   \   00000118   0x7AC8             LDRB     R0,[R1, #+11]
   \   0000011A   0x06C0             LSLS     R0,R0,#+27
   \   0000011C   0xD532             BPL.N    ??f_rename_13
   \   0000011E   0xF8DD 0x044C      LDR      R0,[SP, #+1100]
   \   00000122   0x9A8B             LDR      R2,[SP, #+556]
   \   00000124   0x4290             CMP      R0,R2
   \   00000126   0xD02D             BEQ.N    ??f_rename_13
   \   00000128   0xF8DD 0x4444      LDR      R4,[SP, #+1092]
   \   0000012C   0x4620             MOV      R0,R4
   \   0000012E   0x.... 0x....      BL       ld_clust
   \   00000132   0xF8D4 0x2214      LDR      R2,[R4, #+532]
   \   00000136   0x1E80             SUBS     R0,R0,#+2
   \   00000138   0x1E92             SUBS     R2,R2,#+2
   \   0000013A   0x4290             CMP      R0,R2
   \   0000013C   0xD206             BCS.N    ??f_rename_14
   \   0000013E   0xF894 0x2202      LDRB     R2,[R4, #+514]
   \   00000142   0xF8D4 0x1228      LDR      R1,[R4, #+552]
   \   00000146   0xFB02 0x1100      MLA      R1,R2,R0,R1
   \   0000014A   0xB919             CBNZ.N   R1,??f_rename_15
   \                     ??f_rename_14: (+1)
   \   0000014C   0x2002             MOVS     R0,#+2
   \   0000014E   0xF50D 0x6D8D      ADD      SP,SP,#+1128
   \   00000152   0xBD70             POP      {R4-R6,PC}
   \                     ??f_rename_15: (+1)
   \   00000154   0x4620             MOV      R0,R4
   \   00000156   0x.... 0x....      BL       move_window
   \   0000015A   0xF8DD 0x1444      LDR      R1,[SP, #+1092]
   \   0000015E   0x3120             ADDS     R1,R1,#+32
   \   00000160   0xB9C0             CBNZ.N   R0,??f_rename_0
   \   00000162   0x7848             LDRB     R0,[R1, #+1]
   \   00000164   0x282E             CMP      R0,#+46
   \   00000166   0xD10D             BNE.N    ??f_rename_13
   \   00000168   0x988B             LDR      R0,[SP, #+556]
   \   0000016A   0x7688             STRB     R0,[R1, #+26]
   \   0000016C   0x0402             LSLS     R2,R0,#+16
   \   0000016E   0x0C00             LSRS     R0,R0,#+16
   \   00000170   0x0E12             LSRS     R2,R2,#+24
   \   00000172   0x7508             STRB     R0,[R1, #+20]
   \   00000174   0x76CA             STRB     R2,[R1, #+27]
   \   00000176   0x0A00             LSRS     R0,R0,#+8
   \   00000178   0x7548             STRB     R0,[R1, #+21]
   \   0000017A   0xF8DD 0x1444      LDR      R1,[SP, #+1092]
   \   0000017E   0x2001             MOVS     R0,#+1
   \   00000180   0xF881 0x0204      STRB     R0,[R1, #+516]
   \                     ??f_rename_13: (+1)
   \   00000184   0xA891             ADD      R0,SP,#+580
   \   00000186   0x.... 0x....      BL       dir_remove
   \   0000018A   0xB918             CBNZ.N   R0,??f_rename_0
   \   0000018C   0xF8DD 0x0444      LDR      R0,[SP, #+1092]
   \   00000190   0x.... 0x....      BL       sync_fs
   \                     ??f_rename_0: (+1)
   \   00000194   0xF50D 0x6D8D      ADD      SP,SP,#+1128
   \   00000198   0xBD70             POP      {R4-R6,PC}       ;; return
   3855          }
   3856          
   3857          
   3858          
   3859          
   3860          /*-----------------------------------------------------------------------*/
   3861          /* Change Timestamp                                                      */
   3862          /*-----------------------------------------------------------------------*/
   3863          

   \                                 In section .text, align 2, keep-with-next
   3864          FRESULT f_utime (
   3865          	const TCHAR* path,	/* Pointer to the file/directory name */
   3866          	const FILINFO* fno	/* Pointer to the time stamp to be set */
   3867          )
   3868          {
   \                     f_utime: (+1)
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xF5AD 0x7D0B      SUB      SP,SP,#+556
   \   00000006   0x460C             MOV      R4,R1
   3869          	FRESULT res;
   3870          	DIR dj;
   3871          	BYTE *dir;
   3872          	DEFINE_NAMEBUF;
   3873          
   3874          
   3875          	/* Get logical drive number */
   3876          	res = find_volume(&dj.fs, &path, 1);
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xA98B             ADD      R1,SP,#+556
   \   0000000C   0xA883             ADD      R0,SP,#+524
   \   0000000E   0x.... 0x....      BL       find_volume
   3877          	if (res == FR_OK) {
   \   00000012   0xB9E8             CBNZ.N   R0,??f_utime_0
   3878          		INIT_BUF(dj);
   3879          		res = follow_path(&dj, path);	/* Follow the file path */
   \   00000014   0x998B             LDR      R1,[SP, #+556]
   \   00000016   0xF8CD 0xD224      STR      SP,[SP, #+548]
   \   0000001A   0xA803             ADD      R0,SP,#+12
   \   0000001C   0x.... 0x....      BL       follow_path
   3880          		FREE_BUF();
   3881          		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
   3882          			res = FR_INVALID_NAME;
   3883          		if (res == FR_OK) {
   \   00000020   0xB9B0             CBNZ.N   R0,??f_utime_0
   3884          			dir = dj.dir;
   \   00000022   0x9888             LDR      R0,[SP, #+544]
   3885          			if (!dir) {					/* Root directory */
   \   00000024   0xB918             CBNZ.N   R0,??f_utime_1
   3886          				res = FR_INVALID_NAME;
   \   00000026   0x2006             MOVS     R0,#+6
   3887          			} else {					/* File or sub-directory */
   3888          				ST_WORD(dir + DIR_WrtTime, fno->ftime);
   3889          				ST_WORD(dir + DIR_WrtDate, fno->fdate);
   3890          				dj.fs->wflag = 1;
   3891          				res = sync_fs(dj.fs);
   3892          			}
   3893          		}
   3894          	}
   3895          
   3896          	LEAVE_FF(dj.fs, res);
   \   00000028   0xF50D 0x7D0C      ADD      SP,SP,#+560
   \   0000002C   0xBD10             POP      {R4,PC}
   \                     ??f_utime_1: (+1)
   \   0000002E   0x88E1             LDRH     R1,[R4, #+6]
   \   00000030   0x7581             STRB     R1,[R0, #+22]
   \   00000032   0x88E1             LDRH     R1,[R4, #+6]
   \   00000034   0x0A09             LSRS     R1,R1,#+8
   \   00000036   0x75C1             STRB     R1,[R0, #+23]
   \   00000038   0x88A1             LDRH     R1,[R4, #+4]
   \   0000003A   0x7601             STRB     R1,[R0, #+24]
   \   0000003C   0x88A1             LDRH     R1,[R4, #+4]
   \   0000003E   0x0A09             LSRS     R1,R1,#+8
   \   00000040   0x7641             STRB     R1,[R0, #+25]
   \   00000042   0x9983             LDR      R1,[SP, #+524]
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xF881 0x0204      STRB     R0,[R1, #+516]
   \   0000004A   0x9883             LDR      R0,[SP, #+524]
   \   0000004C   0x.... 0x....      BL       sync_fs
   \                     ??f_utime_0: (+1)
   \   00000050   0xF50D 0x7D0C      ADD      SP,SP,#+560
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
   3897          }
   3898          
   3899          #endif /* !_FS_READONLY */
   3900          #endif /* _FS_MINIMIZE == 0 */
   3901          #endif /* _FS_MINIMIZE <= 1 */
   3902          #endif /* _FS_MINIMIZE <= 2 */
   3903          
   3904          
   3905          
   3906          
   3907          #if _USE_LABEL
   3908          /*-----------------------------------------------------------------------*/
   3909          /* Get volume label                                                      */
   3910          /*-----------------------------------------------------------------------*/
   3911          
   3912          FRESULT f_getlabel (
   3913          	const TCHAR* path,	/* Path name of the logical drive number */
   3914          	TCHAR* label,		/* Pointer to a buffer to return the volume label */
   3915          	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
   3916          )
   3917          {
   3918          	FRESULT res;
   3919          	DIR dj;
   3920          	UINT i, j;
   3921          #if _USE_LFN && _LFN_UNICODE
   3922          	WCHAR w;
   3923          #endif
   3924          
   3925          
   3926          	/* Get logical drive number */
   3927          	res = find_volume(&dj.fs, &path, 0);
   3928          
   3929          	/* Get volume label */
   3930          	if (res == FR_OK && label) {
   3931          		dj.sclust = 0;					/* Open root directory */
   3932          		res = dir_sdi(&dj, 0);
   3933          		if (res == FR_OK) {
   3934          			res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
   3935          			if (res == FR_OK) {			/* A volume label is exist */
   3936          #if _USE_LFN && _LFN_UNICODE
   3937          				i = j = 0;
   3938          				do {
   3939          					w = (i < 11) ? dj.dir[i++] : ' ';
   3940          					if (IsDBCS1(w) && i < 11 && IsDBCS2(dj.dir[i]))
   3941          						w = w << 8 | dj.dir[i++];
   3942          					label[j++] = ff_convert(w, 1);	/* OEM -> Unicode */
   3943          				} while (j < 11);
   3944          #else
   3945          				mem_cpy(label, dj.dir, 11);
   3946          #endif
   3947          				j = 11;
   3948          				do {
   3949          					label[j] = 0;
   3950          					if (!j) break;
   3951          				} while (label[--j] == ' ');
   3952          			}
   3953          			if (res == FR_NO_FILE) {	/* No label, return nul string */
   3954          				label[0] = 0;
   3955          				res = FR_OK;
   3956          			}
   3957          		}
   3958          	}
   3959          
   3960          	/* Get volume serial number */
   3961          	if (res == FR_OK && vsn) {
   3962          		res = move_window(dj.fs, dj.fs->volbase);
   3963          		if (res == FR_OK) {
   3964          			i = dj.fs->fs_type == FS_FAT32 ? BS_VolID32 : BS_VolID;
   3965          			*vsn = LD_DWORD(&dj.fs->win.d8[i]);
   3966          		}
   3967          	}
   3968          
   3969          	LEAVE_FF(dj.fs, res);
   3970          }
   3971          
   3972          
   3973          
   3974          #if !_FS_READONLY
   3975          /*-----------------------------------------------------------------------*/
   3976          /* Set volume label                                                      */
   3977          /*-----------------------------------------------------------------------*/
   3978          
   3979          FRESULT f_setlabel (
   3980          	const TCHAR* label	/* Pointer to the volume label to set */
   3981          )
   3982          {
   3983          	FRESULT res;
   3984          	DIR dj;
   3985          	BYTE vn[11];
   3986          	UINT i, j, sl;
   3987          	WCHAR w;
   3988          	DWORD tm;
   3989          
   3990          
   3991          	/* Get logical drive number */
   3992          	res = find_volume(&dj.fs, &label, 1);
   3993          	if (res) LEAVE_FF(dj.fs, res);
   3994          
   3995          	/* Create a volume label in directory form */
   3996          	vn[0] = 0;
   3997          	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
   3998          	for ( ; sl && label[sl - 1] == ' '; sl--) ;	/* Remove trailing spaces */
   3999          	if (sl) {	/* Create volume label in directory form */
   4000          		i = j = 0;
   4001          		do {
   4002          #if _USE_LFN && _LFN_UNICODE
   4003          			w = ff_convert(ff_wtoupper(label[i++]), 0);
   4004          #else
   4005          			w = (BYTE)label[i++];
   4006          			if (IsDBCS1(w))
   4007          				w = (j < 10 && i < sl && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
   4008          #if _USE_LFN
   4009          			w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
   4010          #else
   4011          			if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
   4012          #ifdef _EXCVT
   4013          			if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
   4014          #else
   4015          			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
   4016          #endif
   4017          #endif
   4018          #endif
   4019          			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject invalid characters for volume label */
   4020          				LEAVE_FF(dj.fs, FR_INVALID_NAME);
   4021          			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
   4022          			vn[j++] = (BYTE)w;
   4023          		} while (i < sl);
   4024          		while (j < 11) vn[j++] = ' ';	/* Fill remaining name field */
   4025          		if (vn[0] == DDEM) LEAVE_FF(dj.fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
   4026          	}
   4027          
   4028          	/* Set volume label */
   4029          	dj.sclust = 0;					/* Open root directory */
   4030          	res = dir_sdi(&dj, 0);
   4031          	if (res == FR_OK) {
   4032          		res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
   4033          		if (res == FR_OK) {			/* A volume label is found */
   4034          			if (vn[0]) {
   4035          				mem_cpy(dj.dir, vn, 11);	/* Change the volume label name */
   4036          				tm = GET_FATTIME();
   4037          				ST_DWORD(dj.dir + DIR_WrtTime, tm);
   4038          			} else {
   4039          				dj.dir[0] = DDEM;			/* Remove the volume label */
   4040          			}
   4041          			dj.fs->wflag = 1;
   4042          			res = sync_fs(dj.fs);
   4043          		} else {					/* No volume label is found or error */
   4044          			if (res == FR_NO_FILE) {
   4045          				res = FR_OK;
   4046          				if (vn[0]) {				/* Create volume label as new */
   4047          					res = dir_alloc(&dj, 1);	/* Allocate an entry for volume label */
   4048          					if (res == FR_OK) {
   4049          						mem_set(dj.dir, 0, SZ_DIRE);	/* Set volume label */
   4050          						mem_cpy(dj.dir, vn, 11);
   4051          						dj.dir[DIR_Attr] = AM_VOL;
   4052          						tm = GET_FATTIME();
   4053          						ST_DWORD(dj.dir + DIR_WrtTime, tm);
   4054          						dj.fs->wflag = 1;
   4055          						res = sync_fs(dj.fs);
   4056          					}
   4057          				}
   4058          			}
   4059          		}
   4060          	}
   4061          
   4062          	LEAVE_FF(dj.fs, res);
   4063          }
   4064          
   4065          #endif /* !_FS_READONLY */
   4066          #endif /* _USE_LABEL */
   4067          
   4068          
   4069          
   4070          /*-----------------------------------------------------------------------*/
   4071          /* Forward data to the stream directly (available on only tiny cfg)      */
   4072          /*-----------------------------------------------------------------------*/
   4073          #if _USE_FORWARD && _FS_TINY
   4074          
   4075          FRESULT f_forward (
   4076          	FIL* fp, 						/* Pointer to the file object */
   4077          	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
   4078          	UINT btf,						/* Number of bytes to forward */
   4079          	UINT* bf						/* Pointer to number of bytes forwarded */
   4080          )
   4081          {
   4082          	FRESULT res;
   4083          	DWORD remain, clst, sect;
   4084          	UINT rcnt;
   4085          	BYTE csect;
   4086          
   4087          
   4088          	*bf = 0;	/* Clear transfer byte counter */
   4089          
   4090          	res = validate(fp);								/* Check validity of the object */
   4091          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   4092          	if (fp->err)									/* Check error */
   4093          		LEAVE_FF(fp->fs, (FRESULT)fp->err);
   4094          	if (!(fp->flag & FA_READ))						/* Check access mode */
   4095          		LEAVE_FF(fp->fs, FR_DENIED);
   4096          
   4097          	remain = fp->fsize - fp->fptr;
   4098          	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
   4099          
   4100          	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream becomes busy */
   4101          		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
   4102          		csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   4103          		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
   4104          			if (!csect) {							/* On the cluster boundary? */
   4105          				clst = (fp->fptr == 0) ?			/* On the top of the file? */
   4106          					fp->sclust : get_fat(fp->fs, fp->clust);
   4107          				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
   4108          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   4109          				fp->clust = clst;					/* Update current cluster */
   4110          			}
   4111          		}
   4112          		sect = clust2sect(fp->fs, fp->clust);		/* Get current data sector */
   4113          		if (!sect) ABORT(fp->fs, FR_INT_ERR);
   4114          		sect += csect;
   4115          		if (move_window(fp->fs, sect) != FR_OK)		/* Move sector window */
   4116          			ABORT(fp->fs, FR_DISK_ERR);
   4117          		fp->dsect = sect;
   4118          		rcnt = SS(fp->fs) - (WORD)(fp->fptr % SS(fp->fs));	/* Forward data from sector window */
   4119          		if (rcnt > btf) rcnt = btf;
   4120          		rcnt = (*func)(&fp->fs->win.d8[(WORD)fp->fptr % SS(fp->fs)], rcnt);
   4121          		if (!rcnt) ABORT(fp->fs, FR_INT_ERR);
   4122          	}
   4123          
   4124          	LEAVE_FF(fp->fs, FR_OK);
   4125          }
   4126          #endif /* _USE_FORWARD */
   4127          
   4128          
   4129          
   4130          #if _USE_MKFS && !_FS_READONLY
   4131          /*-----------------------------------------------------------------------*/
   4132          /* Create file system on the logical drive                               */
   4133          /*-----------------------------------------------------------------------*/
   4134          #define N_ROOTDIR	512		/* Number of root directory entries for FAT12/16 */
   4135          #define N_FATS		1		/* Number of FATs (1 or 2) */
   4136          
   4137          

   \                                 In section .text, align 4, keep-with-next
   4138          FRESULT f_mkfs (
   4139          	const TCHAR* path,	/* Logical drive number */
   4140          	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
   4141          	UINT au				/* Size of allocation unit in unit of byte or sector */
   4142          )
   4143          {
   4144          	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
   4145          	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
   4146          	int vol;
   4147          	BYTE fmt, md, sys, *tbl, pdrv, part;
   4148          	DWORD n_clst, vs, n, wsect;
   4149          	UINT i;
   4150          	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
   4151          	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
   4152          	FATFS *fs;
   4153          	DSTATUS stat;
   4154          #if _USE_TRIM
   4155          	DWORD eb[2];
   4156          #endif
   4157          
   4158          
   4159          	/* Check mounted drive and clear work area */
   4160          	if (sfd > 1) return FR_INVALID_PARAMETER;
   \                     f_mkfs: (+1)
   \   00000000   0x2902             CMP      R1,#+2
   \   00000002   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000006   0xB086             SUB      SP,SP,#+24
   \   00000008   0x4690             MOV      R8,R2
   \   0000000A   0xBFA8             IT       GE 
   \   0000000C   0x2013             MOVGE    R0,#+19
   \   0000000E   0xF280 0x82BE      BGE.W    ??f_mkfs_0
   4161          	vol = get_ldnumber(&path);
   \   00000012   0xB1D0             CBZ.N    R0,??f_mkfs_1
   \   00000014   0x4601             MOV      R1,R0
   \   00000016   0xE000             B.N      ??f_mkfs_2
   \                     ??f_mkfs_3: (+1)
   \   00000018   0x1C49             ADDS     R1,R1,#+1
   \                     ??f_mkfs_2: (+1)
   \   0000001A   0x780A             LDRB     R2,[R1, #+0]
   \   0000001C   0x2A21             CMP      R2,#+33
   \   0000001E   0xD301             BCC.N    ??f_mkfs_4
   \   00000020   0x2A3A             CMP      R2,#+58
   \   00000022   0xD1F9             BNE.N    ??f_mkfs_3
   \                     ??f_mkfs_4: (+1)
   \   00000024   0x2A3A             CMP      R2,#+58
   \   00000026   0xD108             BNE.N    ??f_mkfs_5
   \   00000028   0xF810 0x2B01      LDRB     R2,[R0], #+1
   \   0000002C   0x3A30             SUBS     R2,R2,#+48
   \   0000002E   0x2A0A             CMP      R2,#+10
   \   00000030   0xD20B             BCS.N    ??f_mkfs_1
   \   00000032   0x4288             CMP      R0,R1
   \   00000034   0xBF08             IT       EQ 
   \   00000036   0x2A00             CMPEQ    R2,#+0
   \   00000038   0xD107             BNE.N    ??f_mkfs_1
   4162          	if (vol < 0) return FR_INVALID_DRIVE;
   4163          	fs = FatFs[vol];
   \                     ??f_mkfs_5: (+1)
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable18
   \   0000003E   0x69C5             LDR      R5,[R0, #+28]
   4164          	if (!fs) return FR_NOT_ENABLED;
   \   00000040   0xB93D             CBNZ.N   R5,??f_mkfs_6
   \   00000042   0x200C             MOVS     R0,#+12
   \   00000044   0xB007             ADD      SP,SP,#+28
   \   00000046   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   \                     ??f_mkfs_1: (+1)
   \   0000004A   0x200B             MOVS     R0,#+11
   \   0000004C   0xB007             ADD      SP,SP,#+28
   \   0000004E   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   4165          	fs->fs_type = 0;
   \                     ??f_mkfs_6: (+1)
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xF885 0x0200      STRB     R0,[R5, #+512]
   4166          	pdrv = LD2PD(vol);	/* Physical drive */
   4167          	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
   4168          
   4169          	/* Get disk statics */
   4170          	stat = disk_initialize(pdrv);
   \   00000058   0x.... 0x....      BL       disk_initialize
   4171          	if (stat & STA_NOINIT) return FR_NOT_READY;
   \   0000005C   0x07C1             LSLS     R1,R0,#+31
   \   0000005E   0xBF48             IT       MI 
   \   00000060   0x2003             MOVMI    R0,#+3
   \   00000062   0xF100 0x8294      BMI.W    ??f_mkfs_0
   4172          	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
   \   00000066   0x0740             LSLS     R0,R0,#+29
   \   00000068   0xBF48             IT       MI 
   \   0000006A   0x200A             MOVMI    R0,#+10
   \   0000006C   0xF100 0x828F      BMI.W    ??f_mkfs_0
   4173          #if _MAX_SS != _MIN_SS		/* Get disk sector size */
   4174          	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS || SS(fs) < _MIN_SS)
   4175          		return FR_DISK_ERR;
   4176          #endif
   4177          	if (_MULTI_PARTITION && part) {
   4178          		/* Get partition information from partition table in the MBR */
   4179          		if (disk_read(pdrv, fs->win.d8, 0, 1) != RES_OK) return FR_DISK_ERR;
   4180          		if (LD_WORD(fs->win.d8 + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
   4181          		tbl = &fs->win.d8[MBR_Table + (part - 1) * SZ_PTE];
   4182          		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
   4183          		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
   4184          		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
   4185          	} else {
   4186          		/* Create a partition in this function */
   4187          		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
   \   00000070   0xAA01             ADD      R2,SP,#+4
   \   00000072   0x2101             MOVS     R1,#+1
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x.... 0x....      BL       disk_ioctl
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xF040 0x8236      BNE.W    ??f_mkfs_7
   \   00000080   0x9801             LDR      R0,[SP, #+4]
   \   00000082   0x2880             CMP      R0,#+128
   \   00000084   0xF0C0 0x8232      BCC.W    ??f_mkfs_7
   4188          			return FR_DISK_ERR;
   4189          		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
   \   00000088   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xBF14             ITE      NE 
   \   00000090   0xF04F 0x0A00      MOVNE    R10,#+0
   \   00000094   0xF04F 0x0A3F      MOVEQ    R10,#+63
   4190          		n_vol -= b_vol;				/* Volume size */
   \   00000098   0x9801             LDR      R0,[SP, #+4]
   \   0000009A   0xEBA0 0x000A      SUB      R0,R0,R10
   \   0000009E   0x9001             STR      R0,[SP, #+4]
   4191          	}
   4192          
   4193          	if (au & (au - 1)) au = 0;
   \   000000A0   0xF1A8 0x0001      SUB      R0,R8,#+1
   \   000000A4   0xEA18 0x0F00      TST      R8,R0
   \   000000A8   0xD102             BNE.N    ??f_mkfs_8
   4194          	if (!au) {						/* AU auto selection */
   \   000000AA   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000AE   0xD114             BNE.N    ??f_mkfs_9
   4195          		vs = n_vol / (2000 / (SS(fs) / 512));
   \                     ??f_mkfs_8: (+1)
   \   000000B0   0x9801             LDR      R0,[SP, #+4]
   \   000000B2   0xF44F 0x61FA      MOV      R1,#+2000
   4196          		for (i = 0; vs < vst[i]; i++) ;
   \   000000B6   0x2700             MOVS     R7,#+0
   \   000000B8   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000BC   0x.... 0x....      ADR.W    R1,??vst
   \   000000C0   0x880A             LDRH     R2,[R1, #+0]
   \   000000C2   0x4290             CMP      R0,R2
   \   000000C4   0xF080 0x8005      BCS.W    ??f_mkfs_10
   \                     ??f_mkfs_11: (+1)
   \   000000C8   0xF831 0x2F02      LDRH     R2,[R1, #+2]!
   \   000000CC   0x1C7F             ADDS     R7,R7,#+1
   \   000000CE   0x4290             CMP      R0,R2
   \   000000D0   0xD3FA             BCC.N    ??f_mkfs_11
   4197          		au = cst[i];
   \                     ??f_mkfs_10: (+1)
   \   000000D2   0x.... 0x....      ADR.W    R0,??cst
   \   000000D6   0xF830 0x8017      LDRH     R8,[R0, R7, LSL #+1]
   4198          	}
   4199          	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
   \                     ??f_mkfs_9: (+1)
   \   000000DA   0xF5B8 0x7F00      CMP      R8,#+512
   \   000000DE   0xBF28             IT       CS 
   \   000000E0   0xEA4F 0x2858      LSRCS    R8,R8,#+9
   4200          	if (!au) au = 1;
   \   000000E4   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000E8   0xBF08             IT       EQ 
   \   000000EA   0xF04F 0x0801      MOVEQ    R8,#+1
   \   000000EE   0xD004             BEQ.N    ??f_mkfs_12
   4201          	if (au > 128) au = 128;
   \   000000F0   0xF1B8 0x0F81      CMP      R8,#+129
   \   000000F4   0xBF28             IT       CS 
   \   000000F6   0xF04F 0x0880      MOVCS    R8,#+128
   4202          
   4203          	/* Pre-compute number of clusters and FAT sub-type */
   4204          	n_clst = n_vol / au;
   \                     ??f_mkfs_12: (+1)
   \   000000FA   0x9801             LDR      R0,[SP, #+4]
   4205          	fmt = FS_FAT12;
   \   000000FC   0x2401             MOVS     R4,#+1
   4206          	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
   4207          	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
   \   000000FE   0xF64F 0x77F6      MOVW     R7,#+65526
   \   00000102   0xFBB0 0xFBF8      UDIV     R11,R0,R8
   \   00000106   0xF640 0x70F6      MOVW     R0,#+4086
   \   0000010A   0x4583             CMP      R11,R0
   \   0000010C   0xBF28             IT       CS 
   \   0000010E   0x2402             MOVCS    R4,#+2
   \   00000110   0x45BB             CMP      R11,R7
   \   00000112   0xBF28             IT       CS 
   \   00000114   0x2403             MOVCS    R4,#+3
   \   00000116   0xD201             BCS.N    ??f_mkfs_13
   4208          
   4209          	/* Determine offset and size of FAT structure */
   4210          	if (fmt == FS_FAT32) {
   \   00000118   0x2C03             CMP      R4,#+3
   \   0000011A   0xD108             BNE.N    ??f_mkfs_14
   4211          		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
   \                     ??f_mkfs_13: (+1)
   \   0000011C   0xEA4F 0x008B      LSL      R0,R11,#+2
   \   00000120   0xF200 0x2007      ADDW     R0,R0,#+519
   \   00000124   0xEA4F 0x2950      LSR      R9,R0,#+9
   4212          		n_rsv = 32;
   \   00000128   0x2620             MOVS     R6,#+32
   4213          		n_dir = 0;
   \   0000012A   0x2000             MOVS     R0,#+0
   \   0000012C   0xE010             B.N      ??f_mkfs_15
   4214          	} else {
   4215          		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
   \                     ??f_mkfs_14: (+1)
   \   0000012E   0x2C01             CMP      R4,#+1
   \   00000130   0xD105             BNE.N    ??f_mkfs_16
   \   00000132   0xEB0B 0x004B      ADD      R0,R11,R11, LSL #+1
   \   00000136   0x1C40             ADDS     R0,R0,#+1
   \   00000138   0x0840             LSRS     R0,R0,#+1
   \   0000013A   0x1CC0             ADDS     R0,R0,#+3
   \   0000013C   0xE002             B.N      ??f_mkfs_17
   \                     ??f_mkfs_16: (+1)
   \   0000013E   0xEA4F 0x004B      LSL      R0,R11,#+1
   \   00000142   0x1D00             ADDS     R0,R0,#+4
   4216          		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
   \                     ??f_mkfs_17: (+1)
   \   00000144   0xF200 0x10FF      ADDW     R0,R0,#+511
   \   00000148   0xEA4F 0x2950      LSR      R9,R0,#+9
   4217          		n_rsv = 1;
   \   0000014C   0x2601             MOVS     R6,#+1
   4218          		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
   \   0000014E   0x2020             MOVS     R0,#+32
   \                     ??f_mkfs_15: (+1)
   \   00000150   0x9003             STR      R0,[SP, #+12]
   4219          	}
   4220          	b_fat = b_vol + n_rsv;				/* FAT area start sector */
   \   00000152   0xEB06 0x000A      ADD      R0,R6,R10
   \   00000156   0x9002             STR      R0,[SP, #+8]
   4221          	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
   4222          	b_data = b_dir + n_dir;				/* Data area start sector */
   \   00000158   0x9903             LDR      R1,[SP, #+12]
   \   0000015A   0x4448             ADD      R0,R9,R0
   \   0000015C   0xEB01 0x0B00      ADD      R11,R1,R0
   4223          	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
   \   00000160   0x9801             LDR      R0,[SP, #+4]
   \   00000162   0xEB08 0x010B      ADD      R1,R8,R11
   \   00000166   0xEBA1 0x010A      SUB      R1,R1,R10
   \   0000016A   0x4288             CMP      R0,R1
   \   0000016C   0xD330             BCC.N    ??f_mkfs_18
   4224          
   4225          	/* Align data start sector to erase block boundary (for flash memory media) */
   4226          	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
   \   0000016E   0x466A             MOV      R2,SP
   \   00000170   0x2103             MOVS     R1,#+3
   \   00000172   0x2000             MOVS     R0,#+0
   \   00000174   0x.... 0x....      BL       disk_ioctl
   \   00000178   0xB920             CBNZ.N   R0,??f_mkfs_19
   \   0000017A   0x9800             LDR      R0,[SP, #+0]
   \   0000017C   0xB110             CBZ.N    R0,??f_mkfs_19
   \   0000017E   0xF5B0 0x4F00      CMP      R0,#+32768
   \   00000182   0xD901             BLS.N    ??f_mkfs_20
   \                     ??f_mkfs_19: (+1)
   \   00000184   0x2001             MOVS     R0,#+1
   \   00000186   0x9000             STR      R0,[SP, #+0]
   4227          	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
   4228          	n = (n - b_data) / N_FATS;
   \                     ??f_mkfs_20: (+1)
   \   00000188   0x9800             LDR      R0,[SP, #+0]
   \   0000018A   0x9900             LDR      R1,[SP, #+0]
   \   0000018C   0x4458             ADD      R0,R0,R11
   \   0000018E   0x1E40             SUBS     R0,R0,#+1
   \   00000190   0x1E49             SUBS     R1,R1,#+1
   \   00000192   0x4388             BICS     R0,R0,R1
   4229          	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
   \   00000194   0x2C03             CMP      R4,#+3
   \   00000196   0xEBA0 0x000B      SUB      R0,R0,R11
   \   0000019A   0x9000             STR      R0,[SP, #+0]
   \   0000019C   0xD105             BNE.N    ??f_mkfs_21
   4230          		n_rsv += n;
   \   0000019E   0x1986             ADDS     R6,R0,R6
   4231          		b_fat += n;
   \   000001A0   0x9802             LDR      R0,[SP, #+8]
   \   000001A2   0x9900             LDR      R1,[SP, #+0]
   \   000001A4   0x1808             ADDS     R0,R1,R0
   \   000001A6   0x9002             STR      R0,[SP, #+8]
   \   000001A8   0xE000             B.N      ??f_mkfs_22
   4232          	} else {					/* FAT12/16: Expand FAT size */
   4233          		n_fat += n;
   \                     ??f_mkfs_21: (+1)
   \   000001AA   0x4481             ADD      R9,R0,R9
   4234          	}
   4235          
   4236          	/* Determine number of clusters and final check of validity of the FAT sub-type */
   4237          	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
   \                     ??f_mkfs_22: (+1)
   \   000001AC   0x9801             LDR      R0,[SP, #+4]
   \   000001AE   0x9903             LDR      R1,[SP, #+12]
   \   000001B0   0x1B80             SUBS     R0,R0,R6
   \   000001B2   0xEBA0 0x0009      SUB      R0,R0,R9
   \   000001B6   0x1A40             SUBS     R0,R0,R1
   4238          	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
   4239          		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
   \   000001B8   0x2C02             CMP      R4,#+2
   \   000001BA   0xFBB0 0xFBF8      UDIV     R11,R0,R8
   \   000001BE   0xD103             BNE.N    ??f_mkfs_23
   \   000001C0   0xF640 0x70F6      MOVW     R0,#+4086
   \   000001C4   0x4583             CMP      R11,R0
   \   000001C6   0xD303             BCC.N    ??f_mkfs_18
   \                     ??f_mkfs_23: (+1)
   \   000001C8   0x2C03             CMP      R4,#+3
   \   000001CA   0xD105             BNE.N    ??f_mkfs_24
   \   000001CC   0x45BB             CMP      R11,R7
   \   000001CE   0xD203             BCS.N    ??f_mkfs_24
   4240          		return FR_MKFS_ABORTED;
   \                     ??f_mkfs_18: (+1)
   \   000001D0   0x200E             MOVS     R0,#+14
   \   000001D2   0xB007             ADD      SP,SP,#+28
   \   000001D4   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   4241          
   4242          	/* Determine system ID in the partition table */
   4243          	if (fmt == FS_FAT32) {
   \                     ??f_mkfs_24: (+1)
   \   000001D8   0x2C03             CMP      R4,#+3
   \   000001DA   0xBF08             IT       EQ 
   \   000001DC   0x270C             MOVEQ    R7,#+12
   4244          		sys = 0x0C;		/* FAT32X */
   \   000001DE   0xD00D             BEQ.N    ??f_mkfs_25
   4245          	} else {
   4246          		if (fmt == FS_FAT12 && n_vol < 0x10000) {
   \   000001E0   0x2C01             CMP      R4,#+1
   \   000001E2   0xD105             BNE.N    ??f_mkfs_26
   \   000001E4   0x9801             LDR      R0,[SP, #+4]
   \   000001E6   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000001EA   0xBF38             IT       CC 
   \   000001EC   0x2701             MOVCC    R7,#+1
   4247          			sys = 0x01;	/* FAT12(<65536) */
   \   000001EE   0xD305             BCC.N    ??f_mkfs_25
   4248          		} else {
   4249          			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
   \                     ??f_mkfs_26: (+1)
   \   000001F0   0x9801             LDR      R0,[SP, #+4]
   \   000001F2   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000001F6   0xBF34             ITE      CC 
   \   000001F8   0x2704             MOVCC    R7,#+4
   \   000001FA   0x2706             MOVCS    R7,#+6
   \                     ??f_mkfs_25: (+1)
   \   000001FC   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   00000200   0xB108             CBZ.N    R0,??f_mkfs_27
   4250          		}
   4251          	}
   4252          
   4253          	if (_MULTI_PARTITION && part) {
   4254          		/* Update system ID in the partition table */
   4255          		tbl = &fs->win.d8[MBR_Table + (part - 1) * SZ_PTE];
   4256          		tbl[4] = sys;
   4257          		if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to teh MBR */
   4258          			return FR_DISK_ERR;
   4259          		md = 0xF8;
   4260          	} else {
   4261          		if (sfd) {	/* No partition table (SFD) */
   4262          			md = 0xF0;
   \   00000202   0x20F0             MOVS     R0,#+240
   \   00000204   0xE03F             B.N      ??f_mkfs_28
   4263          		} else {	/* Create partition table (FDISK) */
   4264          			mem_set(fs->win.d8, 0, SS(fs));
   \                     ??f_mkfs_27: (+1)
   \   00000206   0xF44F 0x7100      MOV      R1,#+512
   \   0000020A   0x4628             MOV      R0,R5
   \   0000020C   0x.... 0x....      BL       __aeabi_memclr
   4265          			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
   \   00000210   0xF505 0x70DF      ADD      R0,R5,#+446
   4266          			tbl[1] = 1;						/* Partition start head */
   \   00000214   0x2101             MOVS     R1,#+1
   \   00000216   0x7041             STRB     R1,[R0, #+1]
   4267          			tbl[2] = 1;						/* Partition start sector */
   4268          			tbl[3] = 0;						/* Partition start cylinder */
   4269          			tbl[4] = sys;					/* System type */
   4270          			tbl[5] = 254;					/* Partition end head */
   4271          			n = (b_vol + n_vol) / 63 / 255;
   \   00000218   0x223F             MOVS     R2,#+63
   \   0000021A   0x7081             STRB     R1,[R0, #+2]
   \   0000021C   0x2100             MOVS     R1,#+0
   \   0000021E   0x70C1             STRB     R1,[R0, #+3]
   \   00000220   0x21FE             MOVS     R1,#+254
   \   00000222   0x7107             STRB     R7,[R0, #+4]
   4272          			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
   4273          			tbl[7] = (BYTE)n;				/* End cylinder */
   4274          			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
   4275          			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
   4276          			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
   4277          			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
   \   00000224   0x2301             MOVS     R3,#+1
   \   00000226   0x7141             STRB     R1,[R0, #+5]
   \   00000228   0x9901             LDR      R1,[SP, #+4]
   \   0000022A   0x4451             ADD      R1,R1,R10
   \   0000022C   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000230   0x22FF             MOVS     R2,#+255
   \   00000232   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000236   0x9100             STR      R1,[SP, #+0]
   \   00000238   0x0889             LSRS     R1,R1,#+2
   \   0000023A   0xF041 0x013F      ORR      R1,R1,#0x3F
   \   0000023E   0x2200             MOVS     R2,#+0
   \   00000240   0x7181             STRB     R1,[R0, #+6]
   \   00000242   0x9900             LDR      R1,[SP, #+0]
   \   00000244   0x71C1             STRB     R1,[R0, #+7]
   \   00000246   0x213F             MOVS     R1,#+63
   \   00000248   0x7201             STRB     R1,[R0, #+8]
   \   0000024A   0x2100             MOVS     R1,#+0
   \   0000024C   0x7241             STRB     R1,[R0, #+9]
   \   0000024E   0x7281             STRB     R1,[R0, #+10]
   \   00000250   0x72C1             STRB     R1,[R0, #+11]
   \   00000252   0x9901             LDR      R1,[SP, #+4]
   \   00000254   0x7301             STRB     R1,[R0, #+12]
   \   00000256   0x9901             LDR      R1,[SP, #+4]
   \   00000258   0x0409             LSLS     R1,R1,#+16
   \   0000025A   0x0E09             LSRS     R1,R1,#+24
   \   0000025C   0x7341             STRB     R1,[R0, #+13]
   \   0000025E   0x9901             LDR      R1,[SP, #+4]
   \   00000260   0x0C09             LSRS     R1,R1,#+16
   \   00000262   0x7381             STRB     R1,[R0, #+14]
   \   00000264   0x9901             LDR      R1,[SP, #+4]
   \   00000266   0x0E09             LSRS     R1,R1,#+24
   \   00000268   0x73C1             STRB     R1,[R0, #+15]
   \   0000026A   0x2055             MOVS     R0,#+85
   \   0000026C   0xF885 0x01FE      STRB     R0,[R5, #+510]
   \   00000270   0x20AA             MOVS     R0,#+170
   \   00000272   0xF885 0x01FF      STRB     R0,[R5, #+511]
   \   00000276   0x4629             MOV      R1,R5
   \   00000278   0x2000             MOVS     R0,#+0
   \   0000027A   0x.... 0x....      BL       disk_write
   \   0000027E   0x2800             CMP      R0,#+0
   \   00000280   0xF040 0x8134      BNE.W    ??f_mkfs_7
   4278          				return FR_DISK_ERR;
   4279          			md = 0xF8;
   \   00000284   0x20F8             MOVS     R0,#+248
   \                     ??f_mkfs_28: (+1)
   \   00000286   0x9004             STR      R0,[SP, #+16]
   4280          		}
   4281          	}
   4282          
   4283          	/* Create BPB in the VBR */
   4284          	tbl = fs->win.d8;							/* Clear sector */
   4285          	mem_set(tbl, 0, SS(fs));
   \   00000288   0xF44F 0x7100      MOV      R1,#+512
   \   0000028C   0x4628             MOV      R0,R5
   \   0000028E   0x.... 0x....      BL       __aeabi_memclr
   4286          	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
   \   00000292   0x4628             MOV      R0,R5
   \   00000294   0x.... 0x....      ADR.W    R1,?_1
   \   00000298   0xF05F 0x020B      MOVS.W   R2,#+11
   \                     ??f_mkfs_29: (+1)
   \   0000029C   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   000002A0   0x1E52             SUBS     R2,R2,#+1
   \   000002A2   0xF800 0x3B01      STRB     R3,[R0], #+1
   \   000002A6   0xD1F9             BNE.N    ??f_mkfs_29
   4287          	i = SS(fs);								/* Sector size */
   4288          	ST_WORD(tbl + BPB_BytsPerSec, i);
   \   000002A8   0x2000             MOVS     R0,#+0
   4289          	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
   \   000002AA   0xF885 0x800D      STRB     R8,[R5, #+13]
   \   000002AE   0x72E8             STRB     R0,[R5, #+11]
   \   000002B0   0x2002             MOVS     R0,#+2
   \   000002B2   0x7328             STRB     R0,[R5, #+12]
   \   000002B4   0xF44F 0x7700      MOV      R7,#+512
   4290          	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
   \   000002B8   0x73AE             STRB     R6,[R5, #+14]
   \   000002BA   0x0436             LSLS     R6,R6,#+16
   \   000002BC   0x0E30             LSRS     R0,R6,#+24
   \   000002BE   0x73E8             STRB     R0,[R5, #+15]
   4291          	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
   \   000002C0   0x2001             MOVS     R0,#+1
   4292          	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
   \   000002C2   0x2C03             CMP      R4,#+3
   \   000002C4   0x7428             STRB     R0,[R5, #+16]
   \   000002C6   0xBF08             IT       EQ 
   \   000002C8   0x2700             MOVEQ    R7,#+0
   4293          	ST_WORD(tbl + BPB_RootEntCnt, i);
   \   000002CA   0x2000             MOVS     R0,#+0
   \   000002CC   0x7468             STRB     R0,[R5, #+17]
   \   000002CE   0x0A38             LSRS     R0,R7,#+8
   \   000002D0   0x74A8             STRB     R0,[R5, #+18]
   4294          	if (n_vol < 0x10000) {					/* Number of total sectors */
   \   000002D2   0x9801             LDR      R0,[SP, #+4]
   \   000002D4   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000002D8   0xD205             BCS.N    ??f_mkfs_30
   4295          		ST_WORD(tbl + BPB_TotSec16, n_vol);
   \   000002DA   0x74E8             STRB     R0,[R5, #+19]
   \   000002DC   0x9801             LDR      R0,[SP, #+4]
   \   000002DE   0x0400             LSLS     R0,R0,#+16
   \   000002E0   0x0E00             LSRS     R0,R0,#+24
   \   000002E2   0x7528             STRB     R0,[R5, #+20]
   \   000002E4   0xE00E             B.N      ??f_mkfs_31
   4296          	} else {
   4297          		ST_DWORD(tbl + BPB_TotSec32, n_vol);
   \                     ??f_mkfs_30: (+1)
   \   000002E6   0xF885 0x0020      STRB     R0,[R5, #+32]
   \   000002EA   0x9801             LDR      R0,[SP, #+4]
   \   000002EC   0x0400             LSLS     R0,R0,#+16
   \   000002EE   0x0E00             LSRS     R0,R0,#+24
   \   000002F0   0xF885 0x0021      STRB     R0,[R5, #+33]
   \   000002F4   0x9801             LDR      R0,[SP, #+4]
   \   000002F6   0x0C00             LSRS     R0,R0,#+16
   \   000002F8   0xF885 0x0022      STRB     R0,[R5, #+34]
   \   000002FC   0x9801             LDR      R0,[SP, #+4]
   \   000002FE   0x0E00             LSRS     R0,R0,#+24
   \   00000300   0xF885 0x0023      STRB     R0,[R5, #+35]
   4298          	}
   4299          	tbl[BPB_Media] = md;					/* Media descriptor */
   \                     ??f_mkfs_31: (+1)
   \   00000304   0x9804             LDR      R0,[SP, #+16]
   4300          	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
   4301          	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
   \   00000306   0x27FF             MOVS     R7,#+255
   \   00000308   0x7568             STRB     R0,[R5, #+21]
   \   0000030A   0x203F             MOVS     R0,#+63
   \   0000030C   0x7628             STRB     R0,[R5, #+24]
   \   0000030E   0x2000             MOVS     R0,#+0
   \   00000310   0x7668             STRB     R0,[R5, #+25]
   \   00000312   0x76AF             STRB     R7,[R5, #+26]
   \   00000314   0x76E8             STRB     R0,[R5, #+27]
   4302          	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
   \   00000316   0xF885 0xA01C      STRB     R10,[R5, #+28]
   \   0000031A   0x7768             STRB     R0,[R5, #+29]
   \   0000031C   0x77A8             STRB     R0,[R5, #+30]
   \   0000031E   0x77E8             STRB     R0,[R5, #+31]
   4303          	n = GET_FATTIME();						/* Use current time as VSN */
   \   00000320   0x.... 0x....      BL       get_fattime
   \   00000324   0x9000             STR      R0,[SP, #+0]
   4304          	if (fmt == FS_FAT32) {
   \   00000326   0xEA4F 0x4009      LSL      R0,R9,#+16
   \   0000032A   0x0E00             LSRS     R0,R0,#+24
   \   0000032C   0x2C03             CMP      R4,#+3
   \   0000032E   0x9900             LDR      R1,[SP, #+0]
   \   00000330   0xD143             BNE.N    ??f_mkfs_32
   4305          		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
   \   00000332   0xF885 0x1043      STRB     R1,[R5, #+67]
   \   00000336   0x9900             LDR      R1,[SP, #+0]
   4306          		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
   4307          		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
   4308          		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
   4309          		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
   4310          		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
   4311          		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
   4312          		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
   \   00000338   0x2213             MOVS     R2,#+19
   \   0000033A   0x0409             LSLS     R1,R1,#+16
   \   0000033C   0x0E09             LSRS     R1,R1,#+24
   \   0000033E   0xF885 0x1044      STRB     R1,[R5, #+68]
   \   00000342   0x9900             LDR      R1,[SP, #+0]
   \   00000344   0x0C09             LSRS     R1,R1,#+16
   \   00000346   0xF885 0x1045      STRB     R1,[R5, #+69]
   \   0000034A   0x9900             LDR      R1,[SP, #+0]
   \   0000034C   0xF885 0x0025      STRB     R0,[R5, #+37]
   \   00000350   0xEA4F 0x4019      LSR      R0,R9,#+16
   \   00000354   0xF885 0x0026      STRB     R0,[R5, #+38]
   \   00000358   0xEA4F 0x6019      LSR      R0,R9,#+24
   \   0000035C   0xF885 0x0027      STRB     R0,[R5, #+39]
   \   00000360   0x2002             MOVS     R0,#+2
   \   00000362   0xF885 0x002C      STRB     R0,[R5, #+44]
   \   00000366   0x2000             MOVS     R0,#+0
   \   00000368   0xF885 0x002D      STRB     R0,[R5, #+45]
   \   0000036C   0x0E09             LSRS     R1,R1,#+24
   \   0000036E   0xF885 0x002E      STRB     R0,[R5, #+46]
   \   00000372   0xF885 0x002F      STRB     R0,[R5, #+47]
   \   00000376   0x2001             MOVS     R0,#+1
   \   00000378   0xF885 0x0030      STRB     R0,[R5, #+48]
   \   0000037C   0x2000             MOVS     R0,#+0
   \   0000037E   0xF885 0x0031      STRB     R0,[R5, #+49]
   \   00000382   0x2006             MOVS     R0,#+6
   \   00000384   0xF885 0x0032      STRB     R0,[R5, #+50]
   \   00000388   0x2000             MOVS     R0,#+0
   \   0000038A   0xF885 0x0033      STRB     R0,[R5, #+51]
   \   0000038E   0x2080             MOVS     R0,#+128
   \   00000390   0xF885 0x0040      STRB     R0,[R5, #+64]
   \   00000394   0xF05F 0x0029      MOVS.W   R0,#+41
   \   00000398   0xF885 0x1046      STRB     R1,[R5, #+70]
   \   0000039C   0x.... 0x....      ADR.W    R1,?_2
   \   000003A0   0xF885 0x0042      STRB     R0,[R5, #+66]
   \   000003A4   0xF105 0x0047      ADD      R0,R5,#+71
   \   000003A8   0xF885 0x9024      STRB     R9,[R5, #+36]
   \                     ??f_mkfs_33: (+1)
   \   000003AC   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   000003B0   0x1E52             SUBS     R2,R2,#+1
   \   000003B2   0xF800 0x3B01      STRB     R3,[R0], #+1
   \   000003B6   0xD1F9             BNE.N    ??f_mkfs_33
   \   000003B8   0xE022             B.N      ??f_mkfs_34
   4313          	} else {
   4314          		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
   \                     ??f_mkfs_32: (+1)
   \   000003BA   0xF885 0x1027      STRB     R1,[R5, #+39]
   \   000003BE   0x9900             LDR      R1,[SP, #+0]
   4315          		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
   4316          		tbl[BS_DrvNum] = 0x80;				/* Drive number */
   4317          		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
   4318          		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
   \   000003C0   0x2213             MOVS     R2,#+19
   \   000003C2   0x0409             LSLS     R1,R1,#+16
   \   000003C4   0x0E09             LSRS     R1,R1,#+24
   \   000003C6   0xF885 0x1028      STRB     R1,[R5, #+40]
   \   000003CA   0x9900             LDR      R1,[SP, #+0]
   \   000003CC   0x0C09             LSRS     R1,R1,#+16
   \   000003CE   0xF885 0x1029      STRB     R1,[R5, #+41]
   \   000003D2   0x9900             LDR      R1,[SP, #+0]
   \   000003D4   0x75E8             STRB     R0,[R5, #+23]
   \   000003D6   0x2080             MOVS     R0,#+128
   \   000003D8   0xF885 0x0024      STRB     R0,[R5, #+36]
   \   000003DC   0x0E09             LSRS     R1,R1,#+24
   \   000003DE   0x2029             MOVS     R0,#+41
   \   000003E0   0xF885 0x102A      STRB     R1,[R5, #+42]
   \   000003E4   0xF885 0x0026      STRB     R0,[R5, #+38]
   \   000003E8   0xF105 0x002B      ADD      R0,R5,#+43
   \   000003EC   0xF885 0x9016      STRB     R9,[R5, #+22]
   \   000003F0   0x.... 0x....      ADR.W    R1,?_3
   \                     ??f_mkfs_35: (+1)
   \   000003F4   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   000003F8   0x1E52             SUBS     R2,R2,#+1
   \   000003FA   0xF800 0x3B01      STRB     R3,[R0], #+1
   \   000003FE   0xD1F9             BNE.N    ??f_mkfs_35
   4319          	}
   4320          	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
   \                     ??f_mkfs_34: (+1)
   \   00000400   0x2055             MOVS     R0,#+85
   4321          	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
   \   00000402   0x2301             MOVS     R3,#+1
   \   00000404   0xF885 0x01FE      STRB     R0,[R5, #+510]
   \   00000408   0x20AA             MOVS     R0,#+170
   \   0000040A   0xF885 0x01FF      STRB     R0,[R5, #+511]
   \   0000040E   0x4652             MOV      R2,R10
   \   00000410   0x4629             MOV      R1,R5
   \   00000412   0x2000             MOVS     R0,#+0
   \   00000414   0x.... 0x....      BL       disk_write
   \   00000418   0x2800             CMP      R0,#+0
   \   0000041A   0xD167             BNE.N    ??f_mkfs_7
   4322          		return FR_DISK_ERR;
   4323          	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
   \   0000041C   0x2C03             CMP      R4,#+3
   \   0000041E   0xD105             BNE.N    ??f_mkfs_36
   4324          		disk_write(pdrv, tbl, b_vol + 6, 1);
   \   00000420   0x2301             MOVS     R3,#+1
   \   00000422   0xF10A 0x0206      ADD      R2,R10,#+6
   \   00000426   0x4629             MOV      R1,R5
   \   00000428   0x.... 0x....      BL       disk_write
   4325          
   4326          	/* Initialize FAT area */
   4327          	wsect = b_fat;
   \                     ??f_mkfs_36: (+1)
   \   0000042C   0x9E02             LDR      R6,[SP, #+8]
   4328          	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
   4329          		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
   \   0000042E   0xF44F 0x7100      MOV      R1,#+512
   \   00000432   0x4628             MOV      R0,R5
   \   00000434   0x.... 0x....      BL       __aeabi_memclr
   4330          		n = md;								/* Media descriptor byte */
   \   00000438   0x9804             LDR      R0,[SP, #+16]
   4331          		if (fmt != FS_FAT32) {
   \   0000043A   0x2C03             CMP      R4,#+3
   \   0000043C   0x9000             STR      R0,[SP, #+0]
   \   0000043E   0xD014             BEQ.N    ??f_mkfs_37
   4332          			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
   \   00000440   0x2C01             CMP      R4,#+1
   \   00000442   0xBF0C             ITE      EQ 
   \   00000444   0x....             LDREQ.N  R0,??DataTable18_1  ;; 0xffff00
   \   00000446   0xF06F 0x00FF      MVNNE    R0,#+255
   \   0000044A   0x9900             LDR      R1,[SP, #+0]
   \   0000044C   0x4308             ORRS     R0,R0,R1
   \   0000044E   0x9000             STR      R0,[SP, #+0]
   4333          			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
   \   00000450   0x9800             LDR      R0,[SP, #+0]
   \   00000452   0x7028             STRB     R0,[R5, #+0]
   \   00000454   0x9800             LDR      R0,[SP, #+0]
   \   00000456   0x0400             LSLS     R0,R0,#+16
   \   00000458   0x0E00             LSRS     R0,R0,#+24
   \   0000045A   0x7068             STRB     R0,[R5, #+1]
   \   0000045C   0x9800             LDR      R0,[SP, #+0]
   \   0000045E   0x0C00             LSRS     R0,R0,#+16
   \   00000460   0x70A8             STRB     R0,[R5, #+2]
   \   00000462   0x9800             LDR      R0,[SP, #+0]
   \   00000464   0x0E00             LSRS     R0,R0,#+24
   \   00000466   0x70E8             STRB     R0,[R5, #+3]
   \   00000468   0xE017             B.N      ??f_mkfs_38
   4334          		} else {
   4335          			n |= 0xFFFFFF00;
   \                     ??f_mkfs_37: (+1)
   \   0000046A   0xF060 0x00FF      ORN      R0,R0,#+255
   \   0000046E   0x9000             STR      R0,[SP, #+0]
   4336          			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
   \   00000470   0x9800             LDR      R0,[SP, #+0]
   \   00000472   0x7028             STRB     R0,[R5, #+0]
   \   00000474   0x9800             LDR      R0,[SP, #+0]
   \   00000476   0x0400             LSLS     R0,R0,#+16
   \   00000478   0x0E00             LSRS     R0,R0,#+24
   \   0000047A   0x7068             STRB     R0,[R5, #+1]
   \   0000047C   0x9800             LDR      R0,[SP, #+0]
   \   0000047E   0x0C00             LSRS     R0,R0,#+16
   \   00000480   0x70A8             STRB     R0,[R5, #+2]
   \   00000482   0x9800             LDR      R0,[SP, #+0]
   \   00000484   0x0E00             LSRS     R0,R0,#+24
   \   00000486   0x70E8             STRB     R0,[R5, #+3]
   4337          			ST_DWORD(tbl + 4, 0xFFFFFFFF);
   4338          			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
   \   00000488   0x200F             MOVS     R0,#+15
   \   0000048A   0x712F             STRB     R7,[R5, #+4]
   \   0000048C   0x716F             STRB     R7,[R5, #+5]
   \   0000048E   0x71AF             STRB     R7,[R5, #+6]
   \   00000490   0x71EF             STRB     R7,[R5, #+7]
   \   00000492   0x722F             STRB     R7,[R5, #+8]
   \   00000494   0x726F             STRB     R7,[R5, #+9]
   \   00000496   0x72AF             STRB     R7,[R5, #+10]
   \   00000498   0x72E8             STRB     R0,[R5, #+11]
   4339          		}
   4340          		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
   \                     ??f_mkfs_38: (+1)
   \   0000049A   0x2301             MOVS     R3,#+1
   \   0000049C   0x4632             MOV      R2,R6
   \   0000049E   0x4629             MOV      R1,R5
   \   000004A0   0x2000             MOVS     R0,#+0
   \   000004A2   0x.... 0x....      BL       disk_write
   \   000004A6   0x1C76             ADDS     R6,R6,#+1
   \   000004A8   0xBB00             CBNZ.N   R0,??f_mkfs_7
   4341          			return FR_DISK_ERR;
   4342          		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
   \   000004AA   0xF44F 0x7100      MOV      R1,#+512
   \   000004AE   0x4628             MOV      R0,R5
   \   000004B0   0x.... 0x....      BL       __aeabi_memclr
   4343          		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
   \   000004B4   0x2001             MOVS     R0,#+1
   \   000004B6   0xE009             B.N      ??f_mkfs_39
   4344          			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
   \                     ??f_mkfs_40: (+1)
   \   000004B8   0x2301             MOVS     R3,#+1
   \   000004BA   0x4632             MOV      R2,R6
   \   000004BC   0x4629             MOV      R1,R5
   \   000004BE   0x2000             MOVS     R0,#+0
   \   000004C0   0x.... 0x....      BL       disk_write
   \   000004C4   0x1C76             ADDS     R6,R6,#+1
   \   000004C6   0xB988             CBNZ.N   R0,??f_mkfs_7
   4345          				return FR_DISK_ERR;
   4346          		}
   \   000004C8   0x9800             LDR      R0,[SP, #+0]
   \   000004CA   0x1C40             ADDS     R0,R0,#+1
   \                     ??f_mkfs_39: (+1)
   \   000004CC   0x9000             STR      R0,[SP, #+0]
   \   000004CE   0x9800             LDR      R0,[SP, #+0]
   \   000004D0   0x4548             CMP      R0,R9
   \   000004D2   0xD3F1             BCC.N    ??f_mkfs_40
   4347          	}
   4348          
   4349          	/* Initialize root directory */
   4350          	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
   \   000004D4   0x2C03             CMP      R4,#+3
   \   000004D6   0xBF0C             ITE      EQ 
   \   000004D8   0x4647             MOVEQ    R7,R8
   \   000004DA   0x9F03             LDRNE    R7,[SP, #+12]
   4351          	do {
   4352          		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
   \                     ??f_mkfs_41: (+1)
   \   000004DC   0x2301             MOVS     R3,#+1
   \   000004DE   0x4632             MOV      R2,R6
   \   000004E0   0x4629             MOV      R1,R5
   \   000004E2   0x2000             MOVS     R0,#+0
   \   000004E4   0x.... 0x....      BL       disk_write
   \   000004E8   0x1C76             ADDS     R6,R6,#+1
   \   000004EA   0xB118             CBZ.N    R0,??f_mkfs_42
   4353          			return FR_DISK_ERR;
   \                     ??f_mkfs_7: (+1)
   \   000004EC   0x2001             MOVS     R0,#+1
   \   000004EE   0xB007             ADD      SP,SP,#+28
   \   000004F0   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   4354          	} while (--i);
   \                     ??f_mkfs_42: (+1)
   \   000004F4   0x1E7F             SUBS     R7,R7,#+1
   \   000004F6   0xD1F1             BNE.N    ??f_mkfs_41
   4355          
   4356          #if _USE_TRIM	/* Erase data area if needed */
   4357          	{
   4358          		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
   4359          		disk_ioctl(pdrv, CTRL_TRIM, eb);
   4360          	}
   4361          #endif
   4362          
   4363          	/* Create FSINFO if needed */
   4364          	if (fmt == FS_FAT32) {
   \   000004F8   0x2C03             CMP      R4,#+3
   \   000004FA   0xD13F             BNE.N    ??f_mkfs_43
   4365          		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
   \   000004FC   0x2052             MOVS     R0,#+82
   4366          		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
   4367          		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   4368          		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
   4369          		ST_WORD(tbl + BS_55AA, 0xAA55);
   4370          		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
   \   000004FE   0x2301             MOVS     R3,#+1
   \   00000500   0x7028             STRB     R0,[R5, #+0]
   \   00000502   0xF10A 0x0201      ADD      R2,R10,#+1
   \   00000506   0x7068             STRB     R0,[R5, #+1]
   \   00000508   0x2061             MOVS     R0,#+97
   \   0000050A   0x70A8             STRB     R0,[R5, #+2]
   \   0000050C   0x2041             MOVS     R0,#+65
   \   0000050E   0x70E8             STRB     R0,[R5, #+3]
   \   00000510   0x2072             MOVS     R0,#+114
   \   00000512   0xF885 0x01E4      STRB     R0,[R5, #+484]
   \   00000516   0xF885 0x01E5      STRB     R0,[R5, #+485]
   \   0000051A   0x2041             MOVS     R0,#+65
   \   0000051C   0xF885 0x01E6      STRB     R0,[R5, #+486]
   \   00000520   0x2061             MOVS     R0,#+97
   \   00000522   0xF885 0x01E7      STRB     R0,[R5, #+487]
   \   00000526   0xF1AB 0x0001      SUB      R0,R11,#+1
   \   0000052A   0xF885 0x01E8      STRB     R0,[R5, #+488]
   \   0000052E   0x0400             LSLS     R0,R0,#+16
   \   00000530   0x0E00             LSRS     R0,R0,#+24
   \   00000532   0xF885 0x01E9      STRB     R0,[R5, #+489]
   \   00000536   0xF1AB 0x0001      SUB      R0,R11,#+1
   \   0000053A   0x0C01             LSRS     R1,R0,#+16
   \   0000053C   0x0E00             LSRS     R0,R0,#+24
   \   0000053E   0xF885 0x01EB      STRB     R0,[R5, #+491]
   \   00000542   0x2002             MOVS     R0,#+2
   \   00000544   0xF885 0x01EC      STRB     R0,[R5, #+492]
   \   00000548   0x2000             MOVS     R0,#+0
   \   0000054A   0xF885 0x01ED      STRB     R0,[R5, #+493]
   \   0000054E   0xF885 0x01EE      STRB     R0,[R5, #+494]
   \   00000552   0xF885 0x01EF      STRB     R0,[R5, #+495]
   \   00000556   0x2055             MOVS     R0,#+85
   \   00000558   0xF885 0x01FE      STRB     R0,[R5, #+510]
   \   0000055C   0x20AA             MOVS     R0,#+170
   \   0000055E   0xF885 0x11EA      STRB     R1,[R5, #+490]
   \   00000562   0x4629             MOV      R1,R5
   \   00000564   0xF885 0x01FF      STRB     R0,[R5, #+511]
   \   00000568   0x2000             MOVS     R0,#+0
   \   0000056A   0x.... 0x....      BL       disk_write
   4371          		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
   \   0000056E   0x2301             MOVS     R3,#+1
   \   00000570   0xF10A 0x0207      ADD      R2,R10,#+7
   \   00000574   0x4629             MOV      R1,R5
   \   00000576   0x2000             MOVS     R0,#+0
   \   00000578   0x.... 0x....      BL       disk_write
   4372          	}
   4373          
   4374          	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
   \                     ??f_mkfs_43: (+1)
   \   0000057C   0x2200             MOVS     R2,#+0
   \   0000057E   0x2100             MOVS     R1,#+0
   \   00000580   0x2000             MOVS     R0,#+0
   \   00000582   0x.... 0x....      BL       disk_ioctl
   \   00000586   0x1E40             SUBS     R0,R0,#+1
   \   00000588   0x4180             SBCS     R0,R0,R0
   \   0000058A   0x43C0             MVNS     R0,R0
   \   0000058C   0x0FC0             LSRS     R0,R0,#+31
   \                     ??f_mkfs_0: (+1)
   \   0000058E   0xB007             ADD      SP,SP,#+28
   \   00000590   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   4375          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??vst:
   \   00000000   0x0400 0x0200      DC16 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 0
   \              0x0100 0x0080
   \              0x0040 0x0020
   \              0x0010 0x0008
   \              0x0004 0x0002
   \              0x0000       
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??cst:
   \   00000000   0x8000 0x4000      DC16 32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512
   \              0x2000 0x1000
   \              0x0800 0x4000
   \              0x2000 0x1000
   \              0x0800 0x0400
   \              0x0200       
   \   00000016   0x00 0x00          DC8 0, 0
   4376          
   4377          
   4378          
   4379          #if _MULTI_PARTITION
   4380          /*-----------------------------------------------------------------------*/
   4381          /* Create partition table on the physical drive                          */
   4382          /*-----------------------------------------------------------------------*/
   4383          
   4384          FRESULT f_fdisk (
   4385          	BYTE pdrv,			/* Physical drive number */
   4386          	const DWORD szt[],	/* Pointer to the size table for each partitions */
   4387          	void* work			/* Pointer to the working buffer */
   4388          )
   4389          {
   4390          	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
   4391          	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
   4392          	DSTATUS stat;
   4393          	DWORD sz_disk, sz_part, s_part;
   4394          
   4395          
   4396          	stat = disk_initialize(pdrv);
   4397          	if (stat & STA_NOINIT) return FR_NOT_READY;
   4398          	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
   4399          	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
   4400          
   4401          	/* Determine CHS in the table regardless of the drive geometry */
   4402          	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
   4403          	if (n == 256) n--;
   4404          	e_hd = n - 1;
   4405          	sz_cyl = 63 * n;
   4406          	tot_cyl = sz_disk / sz_cyl;
   4407          
   4408          	/* Create partition table */
   4409          	mem_set(buf, 0, _MAX_SS);
   4410          	p = buf + MBR_Table; b_cyl = 0;
   4411          	for (i = 0; i < 4; i++, p += SZ_PTE) {
   4412          		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;
   4413          		if (!p_cyl) continue;
   4414          		s_part = (DWORD)sz_cyl * b_cyl;
   4415          		sz_part = (DWORD)sz_cyl * p_cyl;
   4416          		if (i == 0) {	/* Exclude first track of cylinder 0 */
   4417          			s_hd = 1;
   4418          			s_part += 63; sz_part -= 63;
   4419          		} else {
   4420          			s_hd = 0;
   4421          		}
   4422          		e_cyl = b_cyl + p_cyl - 1;
   4423          		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
   4424          
   4425          		/* Set partition table */
   4426          		p[1] = s_hd;						/* Start head */
   4427          		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
   4428          		p[3] = (BYTE)b_cyl;					/* Start cylinder */
   4429          		p[4] = 0x06;						/* System type (temporary setting) */
   4430          		p[5] = e_hd;						/* End head */
   4431          		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
   4432          		p[7] = (BYTE)e_cyl;					/* End cylinder */
   4433          		ST_DWORD(p + 8, s_part);			/* Start sector in LBA */
   4434          		ST_DWORD(p + 12, sz_part);			/* Partition size */
   4435          
   4436          		/* Next partition */
   4437          		b_cyl += p_cyl;
   4438          	}
   4439          	ST_WORD(p, 0xAA55);
   4440          
   4441          	/* Write it to the MBR */
   4442          	return (disk_write(pdrv, buf, 0, 1) != RES_OK || disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) ? FR_DISK_ERR : FR_OK;
   4443          }
   4444          
   4445          
   4446          #endif /* _MULTI_PARTITION */
   4447          #endif /* _USE_MKFS && !_FS_READONLY */
   4448          
   4449          
   4450          
   4451          
   4452          #if _USE_STRFUNC
   4453          /*-----------------------------------------------------------------------*/
   4454          /* Get a string from the file                                            */
   4455          /*-----------------------------------------------------------------------*/
   4456          

   \                                 In section .text, align 4, keep-with-next
   4457          TCHAR* f_gets (
   4458          	TCHAR* buff,	/* Pointer to the string buffer to read */
   4459          	int len,		/* Size of string buffer (characters) */
   4460          	FIL* fp			/* Pointer to the file object */
   4461          )
   4462          {
   \                     f_gets: (+1)
   \   00000000   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x4691             MOV      R9,R2
   4463          	int n = 0;
   \   00000008   0x2500             MOVS     R5,#+0
   4464          	TCHAR c, *p = buff;
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   4465          	BYTE s[2];
   4466          	UINT rc;
   4467          
   4468          
   4469          	while (n < len - 1) {	/* Read characters until buffer gets filled */
   \                     ??f_gets_0: (+1)
   \   0000000C   0x9804             LDR      R0,[SP, #+16]
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x4285             CMP      R5,R0
   \   00000012   0xF280 0x80C8      BGE.W    ??f_gets_1
   4470          #if _USE_LFN && _LFN_UNICODE
   4471          #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
   4472          		f_read(fp, s, 1, &rc);
   4473          		if (rc != 1) break;
   4474          		c = s[0];
   4475          		if (c >= 0x80) {
   4476          			if (c < 0xC0) continue;	/* Skip stray trailer */
   4477          			if (c < 0xE0) {			/* Two-byte sequence */
   4478          				f_read(fp, s, 1, &rc);
   4479          				if (rc != 1) break;
   4480          				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
   4481          				if (c < 0x80) c = '?';
   4482          			} else {
   4483          				if (c < 0xF0) {		/* Three-byte sequence */
   4484          					f_read(fp, s, 2, &rc);
   4485          					if (rc != 2) break;
   4486          					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
   4487          					if (c < 0x800) c = '?';
   4488          				} else {			/* Reject four-byte sequence */
   4489          					c = '?';
   4490          				}
   4491          			}
   4492          		}
   4493          #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
   4494          		f_read(fp, s, 2, &rc);
   4495          		if (rc != 2) break;
   4496          		c = s[1] + (s[0] << 8);
   4497          #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
   4498          		f_read(fp, s, 2, &rc);
   4499          		if (rc != 2) break;
   4500          		c = s[0] + (s[1] << 8);
   4501          #else						/* Read a character in ANSI/OEM */
   4502          		f_read(fp, s, 1, &rc);
   4503          		if (rc != 1) break;
   4504          		c = s[0];
   4505          		if (IsDBCS1(c)) {
   4506          			f_read(fp, s, 1, &rc);
   4507          			if (rc != 1) break;
   4508          			c = (c << 8) + s[0];
   4509          		}
   4510          		c = ff_convert(c, 1);	/* OEM -> Unicode */
   4511          		if (!c) c = '?';
   4512          #endif
   4513          #else						/* Read a character without conversion */
   4514          		f_read(fp, s, 1, &rc);
   \                     ??f_gets_2: (+1)
   \   00000016   0x4648             MOV      R0,R9
   \   00000018   0x2701             MOVS     R7,#+1
   \   0000001A   0x.... 0x....      BL       validate
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0x46E8             MOV      R8,SP
   \   00000022   0xF04F 0x0B00      MOV      R11,#+0
   \   00000026   0xBF04             ITT      EQ 
   \   00000028   0xF899 0x0207      LDRBEQ   R0,[R9, #+519]
   \   0000002C   0x2800             CMPEQ    R0,#+0
   \   0000002E   0xF040 0x80BA      BNE.W    ??f_gets_1
   \   00000032   0xF899 0x0206      LDRB     R0,[R9, #+518]
   \   00000036   0x07C0             LSLS     R0,R0,#+31
   \   00000038   0xF140 0x80B5      BPL.W    ??f_gets_1
   \   0000003C   0xF8D9 0x020C      LDR      R0,[R9, #+524]
   \   00000040   0xF8D9 0x1208      LDR      R1,[R9, #+520]
   \   00000044   0xEBB0 0x0001      SUBS.W   R0,R0,R1
   \   00000048   0xF000 0x80AD      BEQ.W    ??f_gets_1
   \                     ??f_gets_3: (+1)
   \   0000004C   0xF8D9 0x1208      LDR      R1,[R9, #+520]
   \   00000050   0x05C8             LSLS     R0,R1,#+23
   \   00000052   0xD176             BNE.N    ??f_gets_4
   \   00000054   0xF8D9 0x0200      LDR      R0,[R9, #+512]
   \   00000058   0xF890 0x3202      LDRB     R3,[R0, #+514]
   \   0000005C   0x1E5B             SUBS     R3,R3,#+1
   \   0000005E   0xEA03 0x2451      AND      R4,R3,R1, LSR #+9
   \   00000062   0xB2E4             UXTB     R4,R4
   \   00000064   0xB97C             CBNZ.N   R4,??f_gets_5
   \   00000066   0x2900             CMP      R1,#+0
   \   00000068   0xBF0E             ITEE     EQ 
   \   0000006A   0xF8D9 0x0210      LDREQ    R0,[R9, #+528]
   \   0000006E   0xF8D9 0x1214      LDRNE    R1,[R9, #+532]
   \   00000072   0x.... 0x....      BLNE     get_fat
   \   00000076   0x2802             CMP      R0,#+2
   \   00000078   0xD318             BCC.N    ??f_gets_6
   \   0000007A   0xF110 0x0F01      CMN      R0,#+1
   \   0000007E   0xF000 0x807E      BEQ.W    ??f_gets_7
   \   00000082   0xF8C9 0x0214      STR      R0,[R9, #+532]
   \                     ??f_gets_5: (+1)
   \   00000086   0xF8D9 0x0200      LDR      R0,[R9, #+512]
   \   0000008A   0xF8D9 0x2214      LDR      R2,[R9, #+532]
   \   0000008E   0xF500 0x7305      ADD      R3,R0,#+532
   \   00000092   0x1E92             SUBS     R2,R2,#+2
   \   00000094   0xF8D3 0xC000      LDR      R12,[R3, #+0]
   \   00000098   0xF1AC 0x0C02      SUB      R12,R12,#+2
   \   0000009C   0x4562             CMP      R2,R12
   \   0000009E   0xD205             BCS.N    ??f_gets_6
   \   000000A0   0xF890 0x1202      LDRB     R1,[R0, #+514]
   \   000000A4   0x695B             LDR      R3,[R3, #+20]
   \   000000A6   0xFB01 0x3202      MLA      R2,R1,R2,R3
   \   000000AA   0xB90A             CBNZ.N   R2,??f_gets_8
   \                     ??f_gets_6: (+1)
   \   000000AC   0x2002             MOVS     R0,#+2
   \   000000AE   0xE067             B.N      ??f_gets_9
   \                     ??f_gets_8: (+1)
   \   000000B0   0x0A7E             LSRS     R6,R7,#+9
   \   000000B2   0xEB04 0x0A02      ADD      R10,R4,R2
   \   000000B6   0xD023             BEQ.N    ??f_gets_10
   \   000000B8   0x1932             ADDS     R2,R6,R4
   \   000000BA   0x4291             CMP      R1,R2
   \   000000BC   0x4652             MOV      R2,R10
   \   000000BE   0xBF38             IT       CC 
   \   000000C0   0x1B0E             SUBCC    R6,R1,R4
   \   000000C2   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   000000C6   0x4633             MOV      R3,R6
   \   000000C8   0x4641             MOV      R1,R8
   \   000000CA   0x.... 0x....      BL       disk_read
   \   000000CE   0x2800             CMP      R0,#+0
   \   000000D0   0xD155             BNE.N    ??f_gets_7
   \   000000D2   0xF899 0x0206      LDRB     R0,[R9, #+518]
   \   000000D6   0x0640             LSLS     R0,R0,#+25
   \   000000D8   0xD510             BPL.N    ??f_gets_11
   \   000000DA   0xF8D9 0x0218      LDR      R0,[R9, #+536]
   \   000000DE   0xEBA0 0x000A      SUB      R0,R0,R10
   \   000000E2   0x42B0             CMP      R0,R6
   \   000000E4   0xD20A             BCS.N    ??f_gets_11
   \   000000E6   0xEB08 0x2040      ADD      R0,R8,R0, LSL #+9
   \   000000EA   0x4649             MOV      R1,R9
   \   000000EC   0xF44F 0x7200      MOV      R2,#+512
   \                     ??f_gets_12: (+1)
   \   000000F0   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   000000F4   0x1E52             SUBS     R2,R2,#+1
   \   000000F6   0xF800 0x3B01      STRB     R3,[R0], #+1
   \   000000FA   0xD1F9             BNE.N    ??f_gets_12
   \                     ??f_gets_11: (+1)
   \   000000FC   0x0270             LSLS     R0,R6,#+9
   \   000000FE   0xE033             B.N      ??f_gets_13
   \                     ??f_gets_10: (+1)
   \   00000100   0xF8D9 0x2218      LDR      R2,[R9, #+536]
   \   00000104   0x4552             CMP      R2,R10
   \   00000106   0xD01A             BEQ.N    ??f_gets_14
   \   00000108   0xF899 0x1206      LDRB     R1,[R9, #+518]
   \   0000010C   0x0649             LSLS     R1,R1,#+25
   \   0000010E   0xD50C             BPL.N    ??f_gets_15
   \   00000110   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   00000114   0x2301             MOVS     R3,#+1
   \   00000116   0x4649             MOV      R1,R9
   \   00000118   0x.... 0x....      BL       disk_write
   \   0000011C   0xBB78             CBNZ.N   R0,??f_gets_7
   \   0000011E   0xF899 0x0206      LDRB     R0,[R9, #+518]
   \   00000122   0xF000 0x00BF      AND      R0,R0,#0xBF
   \   00000126   0xF889 0x0206      STRB     R0,[R9, #+518]
   \                     ??f_gets_15: (+1)
   \   0000012A   0xF8D9 0x0200      LDR      R0,[R9, #+512]
   \   0000012E   0x2301             MOVS     R3,#+1
   \   00000130   0x4652             MOV      R2,R10
   \   00000132   0x4649             MOV      R1,R9
   \   00000134   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   00000138   0x.... 0x....      BL       disk_read
   \   0000013C   0xB9F8             CBNZ.N   R0,??f_gets_7
   \                     ??f_gets_14: (+1)
   \   0000013E   0xF8C9 0xA218      STR      R10,[R9, #+536]
   \                     ??f_gets_4: (+1)
   \   00000142   0xF8D9 0x0208      LDR      R0,[R9, #+520]
   \   00000146   0x4642             MOV      R2,R8
   \   00000148   0x05C1             LSLS     R1,R0,#+23
   \   0000014A   0x0DC9             LSRS     R1,R1,#+23
   \   0000014C   0xF5C1 0x7000      RSB      R0,R1,#+512
   \   00000150   0x4287             CMP      R7,R0
   \   00000152   0x4449             ADD      R1,R1,R9
   \   00000154   0xBF98             IT       LS 
   \   00000156   0x4638             MOVLS    R0,R7
   \   00000158   0xB130             CBZ.N    R0,??f_gets_13
   \   0000015A   0x4603             MOV      R3,R0
   \                     ??f_gets_16: (+1)
   \   0000015C   0xF811 0xCB01      LDRB     R12,[R1], #+1
   \   00000160   0x1E5B             SUBS     R3,R3,#+1
   \   00000162   0xF802 0xCB01      STRB     R12,[R2], #+1
   \   00000166   0xD1F9             BNE.N    ??f_gets_16
   \                     ??f_gets_13: (+1)
   \   00000168   0xF8D9 0x1208      LDR      R1,[R9, #+520]
   \   0000016C   0x4480             ADD      R8,R0,R8
   \   0000016E   0x4483             ADD      R11,R0,R11
   \   00000170   0x1841             ADDS     R1,R0,R1
   \   00000172   0x1A3F             SUBS     R7,R7,R0
   \   00000174   0xF8C9 0x1208      STR      R1,[R9, #+520]
   \   00000178   0xF47F 0xAF68      BNE.W    ??f_gets_3
   \   0000017C   0xE002             B.N      ??f_gets_17
   \                     ??f_gets_7: (+1)
   \   0000017E   0x2001             MOVS     R0,#+1
   \                     ??f_gets_9: (+1)
   \   00000180   0xF889 0x0207      STRB     R0,[R9, #+519]
   4515          		if (rc != 1) break;
   \                     ??f_gets_17: (+1)
   \   00000184   0xF1BB 0x0F01      CMP      R11,#+1
   \   00000188   0xD10D             BNE.N    ??f_gets_1
   4516          		c = s[0];
   \   0000018A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   4517          #endif
   4518          		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
   \   0000018E   0x280D             CMP      R0,#+13
   \   00000190   0xF43F 0xAF41      BEQ.W    ??f_gets_2
   4519          		*p++ = c;
   \   00000194   0x9A01             LDR      R2,[SP, #+4]
   4520          		n++;
   \   00000196   0x1C6D             ADDS     R5,R5,#+1
   \   00000198   0x1C52             ADDS     R2,R2,#+1
   4521          		if (c == '\n') break;		/* Break on EOL */
   \   0000019A   0x280A             CMP      R0,#+10
   \   0000019C   0x9201             STR      R2,[SP, #+4]
   \   0000019E   0xF802 0x0D01      STRB     R0,[R2, #-1]!
   \   000001A2   0xF47F 0xAF33      BNE.W    ??f_gets_0
   4522          	}
   4523          	*p = 0;
   \                     ??f_gets_1: (+1)
   \   000001A6   0x9901             LDR      R1,[SP, #+4]
   \   000001A8   0x2000             MOVS     R0,#+0
   \   000001AA   0x7008             STRB     R0,[R1, #+0]
   4524          	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
   \   000001AC   0xB105             CBZ.N    R5,??f_gets_18
   \   000001AE   0x9803             LDR      R0,[SP, #+12]
   \                     ??f_gets_18: (+1)
   \   000001B0   0xB005             ADD      SP,SP,#+20
   \   000001B2   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   4525          }
   4526          
   4527          
   4528          
   4529          
   4530          #if !_FS_READONLY
   4531          #include <stdarg.h>
   4532          /*-----------------------------------------------------------------------*/
   4533          /* Put a character to the file                                           */
   4534          /*-----------------------------------------------------------------------*/
   4535          
   4536          typedef struct {
   4537          	FIL* fp;
   4538          	int idx, nchr;
   4539          	BYTE buf[64];
   4540          } putbuff;
   4541          
   4542          

   \                                 In section .text, align 2, keep-with-next
   4543          static
   4544          void putc_bfd (
   4545          	putbuff* pb,
   4546          	TCHAR c
   4547          )
   4548          {
   \                     putc_bfd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460D             MOV      R5,R1
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x4604             MOV      R4,R0
   4549          	UINT bw;
   4550          	int i;
   4551          
   4552          
   4553          	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
   \   00000008   0x2D0A             CMP      R5,#+10
   \   0000000A   0xBF04             ITT      EQ 
   4554          		putc_bfd(pb, '\r');
   \   0000000C   0x210D             MOVEQ    R1,#+13
   \   0000000E   0xF7FF 0xFFF7      BLEQ     putc_bfd
   4555          
   4556          	i = pb->idx;	/* Buffer write index (-1:error) */
   \   00000012   0x6866             LDR      R6,[R4, #+4]
   4557          	if (i < 0) return;
   \   00000014   0x2E00             CMP      R6,#+0
   \   00000016   0xD415             BMI.N    ??putc_bfd_0
   4558          
   4559          #if _USE_LFN && _LFN_UNICODE
   4560          #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
   4561          	if (c < 0x80) {				/* 7-bit */
   4562          		pb->buf[i++] = (BYTE)c;
   4563          	} else {
   4564          		if (c < 0x800) {		/* 11-bit */
   4565          			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
   4566          		} else {				/* 16-bit */
   4567          			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
   4568          			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
   4569          		}
   4570          		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
   4571          	}
   4572          #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
   4573          	pb->buf[i++] = (BYTE)(c >> 8);
   4574          	pb->buf[i++] = (BYTE)c;
   4575          #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
   4576          	pb->buf[i++] = (BYTE)c;
   4577          	pb->buf[i++] = (BYTE)(c >> 8);
   4578          #else							/* Write a character in ANSI/OEM */
   4579          	c = ff_convert(c, 0);	/* Unicode -> OEM */
   4580          	if (!c) c = '?';
   4581          	if (c >= 0x100)
   4582          		pb->buf[i++] = (BYTE)(c >> 8);
   4583          	pb->buf[i++] = (BYTE)c;
   4584          #endif
   4585          #else							/* Write a character without conversion */
   4586          	pb->buf[i++] = (BYTE)c;
   \   00000018   0x1930             ADDS     R0,R6,R4
   \   0000001A   0x1C76             ADDS     R6,R6,#+1
   4587          #endif
   4588          
   4589          	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
   \   0000001C   0x2E3D             CMP      R6,#+61
   \   0000001E   0x7305             STRB     R5,[R0, #+12]
   \   00000020   0xDB0C             BLT.N    ??putc_bfd_1
   4590          		f_write(pb->fp, pb->buf, (UINT)i, &bw);
   \   00000022   0x6820             LDR      R0,[R4, #+0]
   \   00000024   0x466B             MOV      R3,SP
   \   00000026   0x4632             MOV      R2,R6
   \   00000028   0xF104 0x010C      ADD      R1,R4,#+12
   \   0000002C   0x.... 0x....      BL       f_write
   4591          		i = (bw == (UINT)i) ? 0 : -1;
   \   00000030   0x9800             LDR      R0,[SP, #+0]
   \   00000032   0x42B0             CMP      R0,R6
   \   00000034   0xBF0C             ITE      EQ 
   \   00000036   0x2600             MOVEQ    R6,#+0
   \   00000038   0xF04F 0x36FF      MOVNE    R6,#-1
   4592          	}
   4593          	pb->idx = i;
   4594          	pb->nchr++;
   \                     ??putc_bfd_1: (+1)
   \   0000003C   0x68A0             LDR      R0,[R4, #+8]
   \   0000003E   0x6066             STR      R6,[R4, #+4]
   \   00000040   0x1C40             ADDS     R0,R0,#+1
   \   00000042   0x60A0             STR      R0,[R4, #+8]
   4595          }
   \                     ??putc_bfd_0: (+1)
   \   00000044   0xB002             ADD      SP,SP,#+8
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
   4596          
   4597          
   4598          

   \                                 In section .text, align 2, keep-with-next
   4599          int f_putc (
   4600          	TCHAR c,	/* A character to be output */
   4601          	FIL* fp		/* Pointer to the file object */
   4602          )
   4603          {
   \                     f_putc: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB095             SUB      SP,SP,#+84
   4604          	putbuff pb;
   4605          	UINT nw;
   4606          
   4607          
   4608          	pb.fp = fp;			/* Initialize output buffer */
   4609          	pb.nchr = pb.idx = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   4610          
   4611          	putc_bfd(&pb, c);	/* Put a character */
   \   00000008   0x2C0A             CMP      R4,#+10
   \   0000000A   0x9102             STR      R1,[SP, #+8]
   \   0000000C   0x9003             STR      R0,[SP, #+12]
   \   0000000E   0x9004             STR      R0,[SP, #+16]
   \   00000010   0xD103             BNE.N    ??f_putc_0
   \   00000012   0x210D             MOVS     R1,#+13
   \   00000014   0xA802             ADD      R0,SP,#+8
   \   00000016   0x.... 0x....      BL       putc_bfd
   \                     ??f_putc_0: (+1)
   \   0000001A   0x9D03             LDR      R5,[SP, #+12]
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD415             BMI.N    ??f_putc_1
   \   00000020   0xA802             ADD      R0,SP,#+8
   \   00000022   0x1828             ADDS     R0,R5,R0
   \   00000024   0x1C6D             ADDS     R5,R5,#+1
   \   00000026   0x2D3D             CMP      R5,#+61
   \   00000028   0x7304             STRB     R4,[R0, #+12]
   \   0000002A   0xDB0B             BLT.N    ??f_putc_2
   \   0000002C   0x9802             LDR      R0,[SP, #+8]
   \   0000002E   0x466B             MOV      R3,SP
   \   00000030   0x462A             MOV      R2,R5
   \   00000032   0xA905             ADD      R1,SP,#+20
   \   00000034   0x.... 0x....      BL       f_write
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x42A8             CMP      R0,R5
   \   0000003C   0xBF0C             ITE      EQ 
   \   0000003E   0x2500             MOVEQ    R5,#+0
   \   00000040   0xF04F 0x35FF      MOVNE    R5,#-1
   \                     ??f_putc_2: (+1)
   \   00000044   0x9804             LDR      R0,[SP, #+16]
   \   00000046   0x9503             STR      R5,[SP, #+12]
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0x9004             STR      R0,[SP, #+16]
   4612          
   4613          	if (   pb.idx >= 0	/* Flush buffered characters to the file */
   4614          		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
   4615          		&& (UINT)pb.idx == nw) return pb.nchr;
   \                     ??f_putc_1: (+1)
   \   0000004C   0x9A03             LDR      R2,[SP, #+12]
   \   0000004E   0x2A00             CMP      R2,#+0
   \   00000050   0xD40B             BMI.N    ??f_putc_3
   \   00000052   0x9802             LDR      R0,[SP, #+8]
   \   00000054   0xAB01             ADD      R3,SP,#+4
   \   00000056   0xA905             ADD      R1,SP,#+20
   \   00000058   0x.... 0x....      BL       f_write
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xBF01             ITTTT    EQ 
   \   00000060   0x9803             LDREQ    R0,[SP, #+12]
   \   00000062   0x9901             LDREQ    R1,[SP, #+4]
   \   00000064   0x4288             CMPEQ    R0,R1
   \   00000066   0x9804             LDREQ    R0,[SP, #+16]
   \   00000068   0xD001             BEQ.N    ??f_putc_4
   4616          	return EOF;
   \                     ??f_putc_3: (+1)
   \   0000006A   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??f_putc_4: (+1)
   \   0000006E   0xB015             ADD      SP,SP,#+84
   \   00000070   0xBD30             POP      {R4,R5,PC}       ;; return
   4617          }
   4618          
   4619          
   4620          
   4621          
   4622          /*-----------------------------------------------------------------------*/
   4623          /* Put a string to the file                                              */
   4624          /*-----------------------------------------------------------------------*/
   4625          

   \                                 In section .text, align 2, keep-with-next
   4626          int f_puts (
   4627          	const TCHAR* str,	/* Pointer to the string to be output */
   4628          	FIL* fp				/* Pointer to the file object */
   4629          )
   4630          {
   \                     f_puts: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB095             SUB      SP,SP,#+84
   4631          	putbuff pb;
   4632          	UINT nw;
   4633          
   4634          
   4635          	pb.fp = fp;				/* Initialize output buffer */
   4636          	pb.nchr = pb.idx = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9102             STR      R1,[SP, #+8]
   \   0000000A   0x9003             STR      R0,[SP, #+12]
   \   0000000C   0xF04F 0x35FF      MOV      R5,#-1
   \   00000010   0x9004             STR      R0,[SP, #+16]
   \   00000012   0xE004             B.N      ??f_puts_0
   \                     ??f_puts_1: (+1)
   \   00000014   0x9804             LDR      R0,[SP, #+16]
   \   00000016   0x9603             STR      R6,[SP, #+12]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0x9004             STR      R0,[SP, #+16]
   4637          
   4638          	while (*str)			/* Put the string */
   4639          		putc_bfd(&pb, *str++);
   \                     ??f_puts_2: (+1)
   \   0000001C   0x1C64             ADDS     R4,R4,#+1
   \                     ??f_puts_0: (+1)
   \   0000001E   0x7827             LDRB     R7,[R4, #+0]
   \   00000020   0xB1D7             CBZ.N    R7,??f_puts_3
   \   00000022   0x2F0A             CMP      R7,#+10
   \   00000024   0xD103             BNE.N    ??f_puts_4
   \   00000026   0x210D             MOVS     R1,#+13
   \   00000028   0xA802             ADD      R0,SP,#+8
   \   0000002A   0x.... 0x....      BL       putc_bfd
   \                     ??f_puts_4: (+1)
   \   0000002E   0x9E03             LDR      R6,[SP, #+12]
   \   00000030   0x2E00             CMP      R6,#+0
   \   00000032   0xD4F3             BMI.N    ??f_puts_2
   \   00000034   0xA802             ADD      R0,SP,#+8
   \   00000036   0x1830             ADDS     R0,R6,R0
   \   00000038   0x1C76             ADDS     R6,R6,#+1
   \   0000003A   0x2E3D             CMP      R6,#+61
   \   0000003C   0x7307             STRB     R7,[R0, #+12]
   \   0000003E   0xDBE9             BLT.N    ??f_puts_1
   \   00000040   0x9802             LDR      R0,[SP, #+8]
   \   00000042   0x466B             MOV      R3,SP
   \   00000044   0x4632             MOV      R2,R6
   \   00000046   0xA905             ADD      R1,SP,#+20
   \   00000048   0x.... 0x....      BL       f_write
   \   0000004C   0x9800             LDR      R0,[SP, #+0]
   \   0000004E   0x42B0             CMP      R0,R6
   \   00000050   0xBF0C             ITE      EQ 
   \   00000052   0x2600             MOVEQ    R6,#+0
   \   00000054   0x462E             MOVNE    R6,R5
   \   00000056   0xE7DD             B.N      ??f_puts_1
   4640          
   4641          	if (   pb.idx >= 0		/* Flush buffered characters to the file */
   4642          		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
   4643          		&& (UINT)pb.idx == nw) return pb.nchr;
   \                     ??f_puts_3: (+1)
   \   00000058   0x9A03             LDR      R2,[SP, #+12]
   \   0000005A   0x2A00             CMP      R2,#+0
   \   0000005C   0xD40B             BMI.N    ??f_puts_5
   \   0000005E   0x9802             LDR      R0,[SP, #+8]
   \   00000060   0xAB01             ADD      R3,SP,#+4
   \   00000062   0xA905             ADD      R1,SP,#+20
   \   00000064   0x.... 0x....      BL       f_write
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xBF01             ITTTT    EQ 
   \   0000006C   0x9803             LDREQ    R0,[SP, #+12]
   \   0000006E   0x9901             LDREQ    R1,[SP, #+4]
   \   00000070   0x4288             CMPEQ    R0,R1
   \   00000072   0x9804             LDREQ    R0,[SP, #+16]
   \   00000074   0xD000             BEQ.N    ??f_puts_6
   4644          	return EOF;
   \                     ??f_puts_5: (+1)
   \   00000076   0x4628             MOV      R0,R5
   \                     ??f_puts_6: (+1)
   \   00000078   0xB015             ADD      SP,SP,#+84
   \   0000007A   0xBDF0             POP      {R4-R7,PC}       ;; return
   4645          }
   4646          
   4647          
   4648          
   4649          
   4650          /*-----------------------------------------------------------------------*/
   4651          /* Put a formatted string to the file                                    */
   4652          /*-----------------------------------------------------------------------*/
   4653          

   \                                 In section .text, align 4, keep-with-next
   4654          int f_printf (
   4655          	FIL* fp,			/* Pointer to the file object */
   4656          	const TCHAR* fmt,	/* Pointer to the format string */
   4657          	...					/* Optional arguments... */
   4658          )
   4659          {
   \                     f_printf: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000006   0xB09E             SUB      SP,SP,#+120
   4660          	va_list arp;
   4661          	BYTE f, r;
   4662          	UINT nw, i, j, w;
   4663          	DWORD v;
   4664          	TCHAR c, d, s[16], *p;
   4665          	putbuff pb;
   4666          
   4667          
   4668          	pb.fp = fp;				/* Initialize output buffer */
   \   00000008   0x9005             STR      R0,[SP, #+20]
   4669          	pb.nchr = pb.idx = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9006             STR      R0,[SP, #+24]
   \   0000000E   0x9007             STR      R0,[SP, #+28]
   4670          
   4671          	va_start(arp, fmt);
   \   00000010   0xA828             ADD      R0,SP,#+160
   \   00000012   0x9003             STR      R0,[SP, #+12]
   \   00000014   0xE008             B.N      ??f_printf_0
   4672          
   4673          	for (;;) {
   4674          		c = *fmt++;
   4675          		if (c == 0) break;			/* End of string */
   4676          		if (c != '%') {				/* Non escape character */
   4677          			putc_bfd(&pb, c);
   4678          			continue;
   4679          		}
   4680          		w = f = 0;
   4681          		c = *fmt++;
   4682          		if (c == '0') {				/* Flag: '0' padding */
   4683          			f = 1; c = *fmt++;
   4684          		} else {
   4685          			if (c == '-') {			/* Flag: left justified */
   4686          				f = 2; c = *fmt++;
   4687          			}
   4688          		}
   4689          		while (IsDigit(c)) {		/* Precision */
   4690          			w = w * 10 + c - '0';
   4691          			c = *fmt++;
   4692          		}
   4693          		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
   4694          			f |= 4; c = *fmt++;
   4695          		}
   4696          		if (!c) break;
   4697          		d = c;
   4698          		if (IsLower(d)) d -= 0x20;
   4699          		switch (d) {				/* Type is... */
   4700          		case 'S' :					/* String */
   4701          			p = va_arg(arp, TCHAR*);
   4702          			for (j = 0; p[j]; j++) ;
   4703          			if (!(f & 2)) {
   4704          				while (j++ < w) putc_bfd(&pb, ' ');
   4705          			}
   4706          			while (*p) putc_bfd(&pb, *p++);
   4707          			while (j++ < w) putc_bfd(&pb, ' ');
   4708          			continue;
   4709          		case 'C' :					/* Character */
   4710          			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
   \                     ??f_printf_1: (+1)
   \   00000016   0x9803             LDR      R0,[SP, #+12]
   \   00000018   0x1D00             ADDS     R0,R0,#+4
   \   0000001A   0x9003             STR      R0,[SP, #+12]
   \   0000001C   0x1F00             SUBS     R0,R0,#+4
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xB2C1             UXTB     R1,R0
   \                     ??f_printf_2: (+1)
   \   00000022   0xA805             ADD      R0,SP,#+20
   \   00000024   0x.... 0x....      BL       putc_bfd
   \                     ??f_printf_0: (+1)
   \   00000028   0x9827             LDR      R0,[SP, #+156]
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0x9027             STR      R0,[SP, #+156]
   \   0000002E   0xF810 0x1D01      LDRB     R1,[R0, #-1]!
   \   00000032   0x2900             CMP      R1,#+0
   \   00000034   0xF000 0x84B6      BEQ.W    ??f_printf_3
   \   00000038   0x2925             CMP      R1,#+37
   \   0000003A   0xD1F2             BNE.N    ??f_printf_2
   \   0000003C   0x9927             LDR      R1,[SP, #+156]
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x9002             STR      R0,[SP, #+8]
   \   00000042   0x1C49             ADDS     R1,R1,#+1
   \   00000044   0x9127             STR      R1,[SP, #+156]
   \   00000046   0x1E49             SUBS     R1,R1,#+1
   \   00000048   0x7809             LDRB     R1,[R1, #+0]
   \   0000004A   0x2930             CMP      R1,#+48
   \   0000004C   0xBF08             IT       EQ 
   \   0000004E   0x2001             MOVEQ    R0,#+1
   \   00000050   0xD002             BEQ.N    ??f_printf_4
   \   00000052   0x292D             CMP      R1,#+45
   \   00000054   0xD105             BNE.N    ??f_printf_5
   \   00000056   0x2002             MOVS     R0,#+2
   \                     ??f_printf_4: (+1)
   \   00000058   0x9927             LDR      R1,[SP, #+156]
   \   0000005A   0x1C49             ADDS     R1,R1,#+1
   \   0000005C   0x9127             STR      R1,[SP, #+156]
   \   0000005E   0x1E49             SUBS     R1,R1,#+1
   \   00000060   0x7809             LDRB     R1,[R1, #+0]
   \                     ??f_printf_5: (+1)
   \   00000062   0xF1A1 0x0230      SUB      R2,R1,#+48
   \   00000066   0x2A0A             CMP      R2,#+10
   \   00000068   0xD20F             BCS.N    ??f_printf_6
   \                     ??f_printf_7: (+1)
   \   0000006A   0x9A02             LDR      R2,[SP, #+8]
   \   0000006C   0xEB02 0x0382      ADD      R3,R2,R2, LSL #+2
   \   00000070   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   00000074   0x3930             SUBS     R1,R1,#+48
   \   00000076   0x9102             STR      R1,[SP, #+8]
   \   00000078   0x9927             LDR      R1,[SP, #+156]
   \   0000007A   0x1C49             ADDS     R1,R1,#+1
   \   0000007C   0x9127             STR      R1,[SP, #+156]
   \   0000007E   0x1E49             SUBS     R1,R1,#+1
   \   00000080   0x7809             LDRB     R1,[R1, #+0]
   \   00000082   0xF1A1 0x0230      SUB      R2,R1,#+48
   \   00000086   0x2A0A             CMP      R2,#+10
   \   00000088   0xD3EF             BCC.N    ??f_printf_7
   \                     ??f_printf_6: (+1)
   \   0000008A   0x296C             CMP      R1,#+108
   \   0000008C   0xBF18             IT       NE 
   \   0000008E   0x294C             CMPNE    R1,#+76
   \   00000090   0xD106             BNE.N    ??f_printf_8
   \   00000092   0x9927             LDR      R1,[SP, #+156]
   \   00000094   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000098   0x1C49             ADDS     R1,R1,#+1
   \   0000009A   0x9127             STR      R1,[SP, #+156]
   \   0000009C   0x1E49             SUBS     R1,R1,#+1
   \   0000009E   0x7809             LDRB     R1,[R1, #+0]
   \                     ??f_printf_8: (+1)
   \   000000A0   0x2900             CMP      R1,#+0
   \   000000A2   0xF000 0x847F      BEQ.W    ??f_printf_3
   \   000000A6   0x460C             MOV      R4,R1
   \   000000A8   0xF1A4 0x0261      SUB      R2,R4,#+97
   \   000000AC   0x2A1A             CMP      R2,#+26
   \   000000AE   0xBF3C             ITT      CC 
   \   000000B0   0x3C20             SUBCC    R4,R4,#+32
   \   000000B2   0xB2E4             UXTBCC   R4,R4
   \   000000B4   0x2C42             CMP      R4,#+66
   \   000000B6   0xF000 0x83C5      BEQ.W    ??f_printf_9
   \   000000BA   0x2C43             CMP      R4,#+67
   \   000000BC   0xD0AB             BEQ.N    ??f_printf_1
   \   000000BE   0x2C44             CMP      R4,#+68
   \   000000C0   0xF000 0x83C8      BEQ.W    ??f_printf_10
   \   000000C4   0x2C4F             CMP      R4,#+79
   \   000000C6   0xF000 0x83C3      BEQ.W    ??f_printf_11
   \   000000CA   0x2C53             CMP      R4,#+83
   \   000000CC   0xD006             BEQ.N    ??f_printf_12
   \   000000CE   0x2C55             CMP      R4,#+85
   \   000000D0   0xF000 0x83C0      BEQ.W    ??f_printf_10
   \   000000D4   0x2C58             CMP      R4,#+88
   \   000000D6   0xF000 0x83BF      BEQ.W    ??f_printf_13
   \   000000DA   0xE7A2             B.N      ??f_printf_2
   \                     ??f_printf_12: (+1)
   \   000000DC   0x9903             LDR      R1,[SP, #+12]
   \   000000DE   0xF04F 0x0A00      MOV      R10,#+0
   \   000000E2   0x1D09             ADDS     R1,R1,#+4
   \   000000E4   0x9103             STR      R1,[SP, #+12]
   \   000000E6   0x1F09             SUBS     R1,R1,#+4
   \   000000E8   0x6809             LDR      R1,[R1, #+0]
   \   000000EA   0x9104             STR      R1,[SP, #+16]
   \   000000EC   0x780A             LDRB     R2,[R1, #+0]
   \   000000EE   0xB12A             CBZ.N    R2,??f_printf_14
   \                     ??f_printf_15: (+1)
   \   000000F0   0xF811 0x2F01      LDRB     R2,[R1, #+1]!
   \   000000F4   0xF10A 0x0A01      ADD      R10,R10,#+1
   \   000000F8   0x2A00             CMP      R2,#+0
   \   000000FA   0xD1F9             BNE.N    ??f_printf_15
   \                     ??f_printf_14: (+1)
   \   000000FC   0x0780             LSLS     R0,R0,#+30
   \   000000FE   0xF100 0x81C6      BMI.W    ??f_printf_16
   \   00000102   0xE005             B.N      ??f_printf_17
   \                     ??f_printf_18: (+1)
   \   00000104   0x9000             STR      R0,[SP, #+0]
   \                     ??f_printf_19: (+1)
   \   00000106   0x9800             LDR      R0,[SP, #+0]
   \   00000108   0x9006             STR      R0,[SP, #+24]
   \   0000010A   0x9807             LDR      R0,[SP, #+28]
   \   0000010C   0x1C40             ADDS     R0,R0,#+1
   \   0000010E   0x9007             STR      R0,[SP, #+28]
   \                     ??f_printf_17: (+1)
   \   00000110   0x9902             LDR      R1,[SP, #+8]
   \   00000112   0xF10A 0x0001      ADD      R0,R10,#+1
   \   00000116   0x458A             CMP      R10,R1
   \   00000118   0x4682             MOV      R10,R0
   \   0000011A   0xF080 0x81B8      BCS.W    ??f_printf_16
   \   0000011E   0x9806             LDR      R0,[SP, #+24]
   \   00000120   0x2800             CMP      R0,#+0
   \   00000122   0x9000             STR      R0,[SP, #+0]
   \   00000124   0xD4F4             BMI.N    ??f_printf_17
   \   00000126   0x9A00             LDR      R2,[SP, #+0]
   \   00000128   0xA905             ADD      R1,SP,#+20
   \   0000012A   0x2020             MOVS     R0,#+32
   \   0000012C   0x1851             ADDS     R1,R2,R1
   \   0000012E   0x7308             STRB     R0,[R1, #+12]
   \   00000130   0x9800             LDR      R0,[SP, #+0]
   \   00000132   0x1C40             ADDS     R0,R0,#+1
   \   00000134   0x283D             CMP      R0,#+61
   \   00000136   0x9000             STR      R0,[SP, #+0]
   \   00000138   0xDBE5             BLT.N    ??f_printf_19
   \   0000013A   0x9C05             LDR      R4,[SP, #+20]
   \   0000013C   0x4680             MOV      R8,R0
   \   0000013E   0x2700             MOVS     R7,#+0
   \   00000140   0xAE08             ADD      R6,SP,#+32
   \   00000142   0x4620             MOV      R0,R4
   \   00000144   0x.... 0x....      BL       validate
   \   00000148   0x2800             CMP      R0,#+0
   \   0000014A   0xBF04             ITT      EQ 
   \   0000014C   0xF894 0x0207      LDRBEQ   R0,[R4, #+519]
   \   00000150   0x2800             CMPEQ    R0,#+0
   \   00000152   0xD118             BNE.N    ??f_printf_20
   \   00000154   0xF894 0x0206      LDRB     R0,[R4, #+518]
   \   00000158   0x0780             LSLS     R0,R0,#+30
   \   0000015A   0xD514             BPL.N    ??f_printf_20
   \   0000015C   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   \   00000160   0xEB08 0x0100      ADD      R1,R8,R0
   \   00000164   0x4281             CMP      R1,R0
   \   00000166   0xD23A             BCS.N    ??f_printf_21
   \                     ??f_printf_22: (+1)
   \   00000168   0xF8D4 0x020C      LDR      R0,[R4, #+524]
   \   0000016C   0xF8D4 0x1208      LDR      R1,[R4, #+520]
   \   00000170   0x4288             CMP      R0,R1
   \   00000172   0xBF38             IT       CC 
   \   00000174   0x4608             MOVCC    R0,R1
   \   00000176   0xF8C4 0x020C      STR      R0,[R4, #+524]
   \   0000017A   0xF894 0x0206      LDRB     R0,[R4, #+518]
   \   0000017E   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000182   0xF884 0x0206      STRB     R0,[R4, #+518]
   \                     ??f_printf_20: (+1)
   \   00000186   0x9800             LDR      R0,[SP, #+0]
   \   00000188   0x4287             CMP      R7,R0
   \   0000018A   0xBF0C             ITE      EQ 
   \   0000018C   0x2000             MOVEQ    R0,#+0
   \   0000018E   0xF04F 0x30FF      MOVNE    R0,#-1
   \   00000192   0xE7B7             B.N      ??f_printf_18
   \                     ??f_printf_23: (+1)
   \   00000194   0xF8C4 0x9218      STR      R9,[R4, #+536]
   \                     ??f_printf_24: (+1)
   \   00000198   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   \   0000019C   0x4632             MOV      R2,R6
   \   0000019E   0x05C1             LSLS     R1,R0,#+23
   \   000001A0   0x0DC9             LSRS     R1,R1,#+23
   \   000001A2   0xF5C1 0x7000      RSB      R0,R1,#+512
   \   000001A6   0x4580             CMP      R8,R0
   \   000001A8   0xBF98             IT       LS 
   \   000001AA   0x4640             MOVLS    R0,R8
   \   000001AC   0x1909             ADDS     R1,R1,R4
   \   000001AE   0xB138             CBZ.N    R0,??f_printf_25
   \   000001B0   0xEA4F 0x0300      MOV.W    R3,R0
   \                     ??f_printf_26: (+1)
   \   000001B4   0xF812 0xCB01      LDRB     R12,[R2], #+1
   \   000001B8   0x1E5B             SUBS     R3,R3,#+1
   \   000001BA   0xF801 0xCB01      STRB     R12,[R1], #+1
   \   000001BE   0xD1F9             BNE.N    ??f_printf_26
   \                     ??f_printf_25: (+1)
   \   000001C0   0xF894 0x1206      LDRB     R1,[R4, #+518]
   \   000001C4   0xF041 0x0140      ORR      R1,R1,#0x40
   \   000001C8   0xF884 0x1206      STRB     R1,[R4, #+518]
   \                     ??f_printf_27: (+1)
   \   000001CC   0xF8D4 0x1208      LDR      R1,[R4, #+520]
   \   000001D0   0x1986             ADDS     R6,R0,R6
   \   000001D2   0x19C7             ADDS     R7,R0,R7
   \   000001D4   0xEBA8 0x0800      SUB      R8,R8,R0
   \   000001D8   0x1841             ADDS     R1,R0,R1
   \   000001DA   0xF8C4 0x1208      STR      R1,[R4, #+520]
   \                     ??f_printf_21: (+1)
   \   000001DE   0xF1B8 0x0F00      CMP      R8,#+0
   \   000001E2   0xD0C1             BEQ.N    ??f_printf_22
   \   000001E4   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   \   000001E8   0x05C1             LSLS     R1,R0,#+23
   \   000001EA   0xD1D5             BNE.N    ??f_printf_24
   \   000001EC   0xF8D4 0x9200      LDR      R9,[R4, #+512]
   \   000001F0   0xF899 0x2202      LDRB     R2,[R9, #+514]
   \   000001F4   0x1E52             SUBS     R2,R2,#+1
   \   000001F6   0xEA02 0x2150      AND      R1,R2,R0, LSR #+9
   \   000001FA   0xB2C9             UXTB     R1,R1
   \   000001FC   0x2900             CMP      R1,#+0
   \   000001FE   0x9101             STR      R1,[SP, #+4]
   \   00000200   0xF040 0x80CC      BNE.W    ??f_printf_28
   \   00000204   0x2800             CMP      R0,#+0
   \   00000206   0xF040 0x80B5      BNE.W    ??f_printf_29
   \   0000020A   0xF8D4 0x0210      LDR      R0,[R4, #+528]
   \   0000020E   0x2800             CMP      R0,#+0
   \   00000210   0xF040 0x80B5      BNE.W    ??f_printf_30
   \   00000214   0xF8D9 0xB20C      LDR      R11,[R9, #+524]
   \   00000218   0xF1BB 0x0F00      CMP      R11,#+0
   \   0000021C   0xD003             BEQ.N    ??f_printf_31
   \   0000021E   0xF8D9 0x0214      LDR      R0,[R9, #+532]
   \   00000222   0x4583             CMP      R11,R0
   \   00000224   0xD301             BCC.N    ??f_printf_32
   \                     ??f_printf_31: (+1)
   \   00000226   0xF04F 0x0B01      MOV      R11,#+1
   \                     ??f_printf_32: (+1)
   \   0000022A   0x465D             MOV      R5,R11
   \                     ??f_printf_33: (+1)
   \   0000022C   0xF8D9 0x0214      LDR      R0,[R9, #+532]
   \   00000230   0x1C6D             ADDS     R5,R5,#+1
   \   00000232   0x4285             CMP      R5,R0
   \   00000234   0xD303             BCC.N    ??f_printf_34
   \   00000236   0x2502             MOVS     R5,#+2
   \   00000238   0xF1BB 0x0F02      CMP      R11,#+2
   \   0000023C   0xD394             BCC.N    ??f_printf_22
   \                     ??f_printf_34: (+1)
   \   0000023E   0x4629             MOV      R1,R5
   \   00000240   0x4648             MOV      R0,R9
   \   00000242   0x.... 0x....      BL       get_fat
   \   00000246   0x2800             CMP      R0,#+0
   \   00000248   0xF040 0x808B      BNE.W    ??f_printf_35
   \   0000024C   0x2D02             CMP      R5,#+2
   \   0000024E   0xD36D             BCC.N    ??f_printf_36
   \   00000250   0xF8D9 0x0214      LDR      R0,[R9, #+532]
   \   00000254   0x4285             CMP      R5,R0
   \   00000256   0xD269             BCS.N    ??f_printf_36
   \   00000258   0xF899 0x0200      LDRB     R0,[R9, #+512]
   \   0000025C   0x2801             CMP      R0,#+1
   \   0000025E   0xD034             BEQ.N    ??f_printf_37
   \   00000260   0xD364             BCC.N    ??f_printf_36
   \   00000262   0x2803             CMP      R0,#+3
   \   00000264   0xD001             BEQ.N    ??f_printf_38
   \   00000266   0xD31C             BCC.N    ??f_printf_39
   \   00000268   0xE060             B.N      ??f_printf_36
   \                     ??f_printf_38: (+1)
   \   0000026A   0xF8D9 0x0220      LDR      R0,[R9, #+544]
   \   0000026E   0xEB00 0x11D5      ADD      R1,R0,R5, LSR #+7
   \   00000272   0x4648             MOV      R0,R9
   \   00000274   0x.... 0x....      BL       move_window
   \   00000278   0x2800             CMP      R0,#+0
   \   0000027A   0xD158             BNE.N    ??f_printf_40
   \   0000027C   0x00A9             LSLS     R1,R5,#+2
   \   0000027E   0x05C9             LSLS     R1,R1,#+23
   \   00000280   0xEB09 0x51D1      ADD      R1,R9,R1, LSR #+23
   \   00000284   0xF06F 0x4370      MVN      R3,#-268435456
   \   00000288   0x78CA             LDRB     R2,[R1, #+3]
   \   0000028A   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   0000028E   0x23FF             MOVS     R3,#+255
   \   00000290   0x700B             STRB     R3,[R1, #+0]
   \   00000292   0x0E12             LSRS     R2,R2,#+24
   \   00000294   0x704B             STRB     R3,[R1, #+1]
   \   00000296   0x708B             STRB     R3,[R1, #+2]
   \   00000298   0x70CA             STRB     R2,[R1, #+3]
   \   0000029A   0x2101             MOVS     R1,#+1
   \   0000029C   0xF889 0x1204      STRB     R1,[R9, #+516]
   \   000002A0   0xE045             B.N      ??f_printf_40
   \                     ??f_printf_39: (+1)
   \   000002A2   0xF8D9 0x0220      LDR      R0,[R9, #+544]
   \   000002A6   0xEB00 0x2115      ADD      R1,R0,R5, LSR #+8
   \   000002AA   0x4648             MOV      R0,R9
   \   000002AC   0x.... 0x....      BL       move_window
   \   000002B0   0x2800             CMP      R0,#+0
   \   000002B2   0xD13C             BNE.N    ??f_printf_40
   \   000002B4   0x0069             LSLS     R1,R5,#+1
   \   000002B6   0x05C9             LSLS     R1,R1,#+23
   \   000002B8   0xEB09 0x51D1      ADD      R1,R9,R1, LSR #+23
   \   000002BC   0x22FF             MOVS     R2,#+255
   \   000002BE   0x700A             STRB     R2,[R1, #+0]
   \   000002C0   0x704A             STRB     R2,[R1, #+1]
   \   000002C2   0x2101             MOVS     R1,#+1
   \   000002C4   0xF889 0x1204      STRB     R1,[R9, #+516]
   \   000002C8   0xE031             B.N      ??f_printf_40
   \                     ??f_printf_37: (+1)
   \   000002CA   0xEB05 0x0B55      ADD      R11,R5,R5, LSR #+1
   \   000002CE   0xF8D9 0x0220      LDR      R0,[R9, #+544]
   \   000002D2   0xEB00 0x215B      ADD      R1,R0,R11, LSR #+9
   \   000002D6   0x4648             MOV      R0,R9
   \   000002D8   0x.... 0x....      BL       move_window
   \   000002DC   0xBB38             CBNZ.N   R0,??f_printf_40
   \   000002DE   0xEA4F 0x50CB      LSL      R0,R11,#+23
   \   000002E2   0xF10B 0x0B01      ADD      R11,R11,#+1
   \   000002E6   0xEB09 0x51D0      ADD      R1,R9,R0, LSR #+23
   \   000002EA   0x07E8             LSLS     R0,R5,#+31
   \   000002EC   0xBF46             ITTE     MI 
   \   000002EE   0x7808             LDRBMI   R0,[R1, #+0]
   \   000002F0   0xF040 0x00F0      ORRMI    R0,R0,#0xF0
   \   000002F4   0x20FF             MOVPL    R0,#+255
   \   000002F6   0x7008             STRB     R0,[R1, #+0]
   \   000002F8   0x2001             MOVS     R0,#+1
   \   000002FA   0xF889 0x0204      STRB     R0,[R9, #+516]
   \   000002FE   0xF8D9 0x0220      LDR      R0,[R9, #+544]
   \   00000302   0xEB00 0x215B      ADD      R1,R0,R11, LSR #+9
   \   00000306   0x4648             MOV      R0,R9
   \   00000308   0x.... 0x....      BL       move_window
   \   0000030C   0xB978             CBNZ.N   R0,??f_printf_40
   \   0000030E   0x07EA             LSLS     R2,R5,#+31
   \   00000310   0xEA4F 0x51CB      LSL      R1,R11,#+23
   \   00000314   0xEB09 0x51D1      ADD      R1,R9,R1, LSR #+23
   \   00000318   0xBF4E             ITEE     MI 
   \   0000031A   0x22FF             MOVMI    R2,#+255
   \   0000031C   0x780A             LDRBPL   R2,[R1, #+0]
   \   0000031E   0xF042 0x020F      ORRPL    R2,R2,#0xF
   \   00000322   0x700A             STRB     R2,[R1, #+0]
   \   00000324   0x2101             MOVS     R1,#+1
   \   00000326   0xF889 0x1204      STRB     R1,[R9, #+516]
   \   0000032A   0xE000             B.N      ??f_printf_40
   \                     ??f_printf_36: (+1)
   \   0000032C   0x2002             MOVS     R0,#+2
   \                     ??f_printf_40: (+1)
   \   0000032E   0xB988             CBNZ.N   R0,??f_printf_41
   \   00000330   0xF8D9 0x0210      LDR      R0,[R9, #+528]
   \   00000334   0xF8C9 0x520C      STR      R5,[R9, #+524]
   \   00000338   0xF110 0x0F01      CMN      R0,#+1
   \   0000033C   0xD00F             BEQ.N    ??f_printf_42
   \   0000033E   0x1E40             SUBS     R0,R0,#+1
   \   00000340   0xF8C9 0x0210      STR      R0,[R9, #+528]
   \   00000344   0xF899 0x0205      LDRB     R0,[R9, #+517]
   \   00000348   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000034C   0xF889 0x0205      STRB     R0,[R9, #+517]
   \   00000350   0x4628             MOV      R0,R5
   \   00000352   0xE014             B.N      ??f_printf_30
   \                     ??f_printf_41: (+1)
   \   00000354   0x2801             CMP      R0,#+1
   \   00000356   0xBF0C             ITE      EQ 
   \   00000358   0xF04F 0x35FF      MOVEQ    R5,#-1
   \   0000035C   0x2501             MOVNE    R5,#+1
   \                     ??f_printf_42: (+1)
   \   0000035E   0x4628             MOV      R0,R5
   \   00000360   0xE00D             B.N      ??f_printf_30
   \                     ??f_printf_35: (+1)
   \   00000362   0xF110 0x0F01      CMN      R0,#+1
   \   00000366   0xBF18             IT       NE 
   \   00000368   0x2801             CMPNE    R0,#+1
   \   0000036A   0xD00B             BEQ.N    ??f_printf_43
   \   0000036C   0x455D             CMP      R5,R11
   \   0000036E   0xF47F 0xAF5D      BNE.W    ??f_printf_33
   \   00000372   0xE6F9             B.N      ??f_printf_22
   \                     ??f_printf_29: (+1)
   \   00000374   0xF8D4 0x1214      LDR      R1,[R4, #+532]
   \   00000378   0x4648             MOV      R0,R9
   \   0000037A   0x.... 0x....      BL       create_chain
   \                     ??f_printf_30: (+1)
   \   0000037E   0x2800             CMP      R0,#+0
   \   00000380   0xF43F 0xAEF2      BEQ.W    ??f_printf_22
   \                     ??f_printf_43: (+1)
   \   00000384   0x2801             CMP      R0,#+1
   \   00000386   0xD032             BEQ.N    ??f_printf_44
   \   00000388   0xF110 0x0F01      CMN      R0,#+1
   \   0000038C   0xD074             BEQ.N    ??f_printf_45
   \   0000038E   0xF8D4 0x1210      LDR      R1,[R4, #+528]
   \   00000392   0xF8C4 0x0214      STR      R0,[R4, #+532]
   \   00000396   0xB909             CBNZ.N   R1,??f_printf_28
   \   00000398   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \                     ??f_printf_28: (+1)
   \   0000039C   0xF894 0x0206      LDRB     R0,[R4, #+518]
   \   000003A0   0x0640             LSLS     R0,R0,#+25
   \   000003A2   0xD511             BPL.N    ??f_printf_46
   \   000003A4   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   000003A8   0xF8D4 0x2218      LDR      R2,[R4, #+536]
   \   000003AC   0x2301             MOVS     R3,#+1
   \   000003AE   0x4621             MOV      R1,R4
   \   000003B0   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   000003B4   0x.... 0x....      BL       disk_write
   \   000003B8   0x2800             CMP      R0,#+0
   \   000003BA   0xD15D             BNE.N    ??f_printf_45
   \   000003BC   0xF894 0x0206      LDRB     R0,[R4, #+518]
   \   000003C0   0xF000 0x00BF      AND      R0,R0,#0xBF
   \   000003C4   0xF884 0x0206      STRB     R0,[R4, #+518]
   \                     ??f_printf_46: (+1)
   \   000003C8   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   000003CC   0xF8D4 0x2214      LDR      R2,[R4, #+532]
   \   000003D0   0xF500 0x7305      ADD      R3,R0,#+532
   \   000003D4   0x1E92             SUBS     R2,R2,#+2
   \   000003D6   0xF8D3 0xC000      LDR      R12,[R3, #+0]
   \   000003DA   0xF1AC 0x0C02      SUB      R12,R12,#+2
   \   000003DE   0x4562             CMP      R2,R12
   \   000003E0   0xD205             BCS.N    ??f_printf_44
   \   000003E2   0xF890 0x1202      LDRB     R1,[R0, #+514]
   \   000003E6   0x695B             LDR      R3,[R3, #+20]
   \   000003E8   0xFB01 0x3202      MLA      R2,R1,R2,R3
   \   000003EC   0xB91A             CBNZ.N   R2,??f_printf_47
   \                     ??f_printf_44: (+1)
   \   000003EE   0x2002             MOVS     R0,#+2
   \   000003F0   0xF884 0x0207      STRB     R0,[R4, #+519]
   \   000003F4   0xE6C7             B.N      ??f_printf_20
   \                     ??f_printf_47: (+1)
   \   000003F6   0x9B01             LDR      R3,[SP, #+4]
   \   000003F8   0xEA5F 0x2558      LSRS     R5,R8,#+9
   \   000003FC   0xEB03 0x0902      ADD      R9,R3,R2
   \   00000400   0xD024             BEQ.N    ??f_printf_48
   \   00000402   0x18EA             ADDS     R2,R5,R3
   \   00000404   0x4291             CMP      R1,R2
   \   00000406   0x464A             MOV      R2,R9
   \   00000408   0xBF38             IT       CC 
   \   0000040A   0x1ACD             SUBCC    R5,R1,R3
   \   0000040C   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   00000410   0x462B             MOV      R3,R5
   \   00000412   0x4631             MOV      R1,R6
   \   00000414   0x.... 0x....      BL       disk_write
   \   00000418   0xBB70             CBNZ.N   R0,??f_printf_45
   \   0000041A   0xF8D4 0x0218      LDR      R0,[R4, #+536]
   \   0000041E   0xEBA0 0x0009      SUB      R0,R0,R9
   \   00000422   0x42A8             CMP      R0,R5
   \   00000424   0xD210             BCS.N    ??f_printf_49
   \   00000426   0x4621             MOV      R1,R4
   \   00000428   0xEB06 0x2040      ADD      R0,R6,R0, LSL #+9
   \   0000042C   0xF44F 0x7200      MOV      R2,#+512
   \                     ??f_printf_50: (+1)
   \   00000430   0xF810 0x3B01      LDRB     R3,[R0], #+1
   \   00000434   0x1E52             SUBS     R2,R2,#+1
   \   00000436   0xF801 0x3B01      STRB     R3,[R1], #+1
   \   0000043A   0xD1F9             BNE.N    ??f_printf_50
   \   0000043C   0xF894 0x0206      LDRB     R0,[R4, #+518]
   \   00000440   0xF000 0x00BF      AND      R0,R0,#0xBF
   \   00000444   0xF884 0x0206      STRB     R0,[R4, #+518]
   \                     ??f_printf_49: (+1)
   \   00000448   0x0268             LSLS     R0,R5,#+9
   \   0000044A   0xE6BF             B.N      ??f_printf_27
   \                     ??f_printf_48: (+1)
   \   0000044C   0xF8D4 0x1218      LDR      R1,[R4, #+536]
   \   00000450   0x4549             CMP      R1,R9
   \   00000452   0xF43F 0xAE9F      BEQ.W    ??f_printf_23
   \   00000456   0xF8D4 0x1208      LDR      R1,[R4, #+520]
   \   0000045A   0xF8D4 0x220C      LDR      R2,[R4, #+524]
   \   0000045E   0x4291             CMP      R1,R2
   \   00000460   0xF4BF 0xAE98      BCS.W    ??f_printf_23
   \   00000464   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   00000468   0x2301             MOVS     R3,#+1
   \   0000046A   0x464A             MOV      R2,R9
   \   0000046C   0x4621             MOV      R1,R4
   \   0000046E   0x.... 0x....      BL       disk_read
   \   00000472   0x2800             CMP      R0,#+0
   \   00000474   0xF43F 0xAE8E      BEQ.W    ??f_printf_23
   \                     ??f_printf_45: (+1)
   \   00000478   0x2001             MOVS     R0,#+1
   \   0000047A   0xF884 0x0207      STRB     R0,[R4, #+519]
   \   0000047E   0xE682             B.N      ??f_printf_20
   \                     ??f_printf_51: (+1)
   \   00000480   0x9807             LDR      R0,[SP, #+28]
   \   00000482   0x9406             STR      R4,[SP, #+24]
   \   00000484   0x1C40             ADDS     R0,R0,#+1
   \   00000486   0x9007             STR      R0,[SP, #+28]
   \                     ??f_printf_52: (+1)
   \   00000488   0x9804             LDR      R0,[SP, #+16]
   \   0000048A   0x1C40             ADDS     R0,R0,#+1
   \   0000048C   0x9004             STR      R0,[SP, #+16]
   \                     ??f_printf_16: (+1)
   \   0000048E   0x9804             LDR      R0,[SP, #+16]
   \   00000490   0x7806             LDRB     R6,[R0, #+0]
   \   00000492   0xB30E             CBZ.N    R6,??f_printf_53
   \   00000494   0x2E0A             CMP      R6,#+10
   \   00000496   0xD103             BNE.N    ??f_printf_54
   \   00000498   0x210D             MOVS     R1,#+13
   \   0000049A   0xA805             ADD      R0,SP,#+20
   \   0000049C   0x.... 0x....      BL       putc_bfd
   \                     ??f_printf_54: (+1)
   \   000004A0   0x9C06             LDR      R4,[SP, #+24]
   \   000004A2   0x2C00             CMP      R4,#+0
   \   000004A4   0xD4F0             BMI.N    ??f_printf_52
   \   000004A6   0xA805             ADD      R0,SP,#+20
   \   000004A8   0x1820             ADDS     R0,R4,R0
   \   000004AA   0x1C64             ADDS     R4,R4,#+1
   \   000004AC   0x2C3D             CMP      R4,#+61
   \   000004AE   0x7306             STRB     R6,[R0, #+12]
   \   000004B0   0xDBE6             BLT.N    ??f_printf_51
   \   000004B2   0x9805             LDR      R0,[SP, #+20]
   \   000004B4   0x466B             MOV      R3,SP
   \   000004B6   0x4622             MOV      R2,R4
   \   000004B8   0xA908             ADD      R1,SP,#+32
   \   000004BA   0x.... 0x....      BL       f_write
   \   000004BE   0x9800             LDR      R0,[SP, #+0]
   \   000004C0   0x42A0             CMP      R0,R4
   \   000004C2   0xBF0C             ITE      EQ 
   \   000004C4   0x2400             MOVEQ    R4,#+0
   \   000004C6   0xF04F 0x34FF      MOVNE    R4,#-1
   \   000004CA   0xE7D9             B.N      ??f_printf_51
   \                     ??f_printf_55: (+1)
   \   000004CC   0x9001             STR      R0,[SP, #+4]
   \                     ??f_printf_56: (+1)
   \   000004CE   0x9801             LDR      R0,[SP, #+4]
   \   000004D0   0x9006             STR      R0,[SP, #+24]
   \   000004D2   0x9807             LDR      R0,[SP, #+28]
   \   000004D4   0x1C40             ADDS     R0,R0,#+1
   \   000004D6   0x9007             STR      R0,[SP, #+28]
   \                     ??f_printf_53: (+1)
   \   000004D8   0x9802             LDR      R0,[SP, #+8]
   \   000004DA   0x4582             CMP      R10,R0
   \   000004DC   0xF4BF 0xADA4      BCS.W    ??f_printf_0
   \   000004E0   0x9806             LDR      R0,[SP, #+24]
   \   000004E2   0xF10A 0x0A01      ADD      R10,R10,#+1
   \   000004E6   0x2800             CMP      R0,#+0
   \   000004E8   0x9001             STR      R0,[SP, #+4]
   \   000004EA   0xD4F5             BMI.N    ??f_printf_53
   \   000004EC   0x9A01             LDR      R2,[SP, #+4]
   \   000004EE   0xA905             ADD      R1,SP,#+20
   \   000004F0   0x2020             MOVS     R0,#+32
   \   000004F2   0x1851             ADDS     R1,R2,R1
   \   000004F4   0x7308             STRB     R0,[R1, #+12]
   \   000004F6   0x9801             LDR      R0,[SP, #+4]
   \   000004F8   0x1C40             ADDS     R0,R0,#+1
   \   000004FA   0x283D             CMP      R0,#+61
   \   000004FC   0x9001             STR      R0,[SP, #+4]
   \   000004FE   0xDBE6             BLT.N    ??f_printf_56
   \   00000500   0x9E05             LDR      R6,[SP, #+20]
   \   00000502   0x4681             MOV      R9,R0
   \   00000504   0xAF08             ADD      R7,SP,#+32
   \   00000506   0xF04F 0x0800      MOV      R8,#+0
   \   0000050A   0x4630             MOV      R0,R6
   \   0000050C   0x.... 0x....      BL       validate
   \   00000510   0x2800             CMP      R0,#+0
   \   00000512   0xBF04             ITT      EQ 
   \   00000514   0xF896 0x0207      LDRBEQ   R0,[R6, #+519]
   \   00000518   0x2800             CMPEQ    R0,#+0
   \   0000051A   0xD118             BNE.N    ??f_printf_57
   \   0000051C   0xF896 0x0206      LDRB     R0,[R6, #+518]
   \   00000520   0x0780             LSLS     R0,R0,#+30
   \   00000522   0xD514             BPL.N    ??f_printf_57
   \   00000524   0xF8D6 0x0208      LDR      R0,[R6, #+520]
   \   00000528   0xEB09 0x0100      ADD      R1,R9,R0
   \   0000052C   0x4281             CMP      R1,R0
   \   0000052E   0xD23A             BCS.N    ??f_printf_58
   \                     ??f_printf_59: (+1)
   \   00000530   0xF8D6 0x020C      LDR      R0,[R6, #+524]
   \   00000534   0xF8D6 0x1208      LDR      R1,[R6, #+520]
   \   00000538   0x4288             CMP      R0,R1
   \   0000053A   0xBF38             IT       CC 
   \   0000053C   0x4608             MOVCC    R0,R1
   \   0000053E   0xF8C6 0x020C      STR      R0,[R6, #+524]
   \   00000542   0xF896 0x0206      LDRB     R0,[R6, #+518]
   \   00000546   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000054A   0xF886 0x0206      STRB     R0,[R6, #+518]
   \                     ??f_printf_57: (+1)
   \   0000054E   0x9801             LDR      R0,[SP, #+4]
   \   00000550   0x4580             CMP      R8,R0
   \   00000552   0xBF0C             ITE      EQ 
   \   00000554   0x2000             MOVEQ    R0,#+0
   \   00000556   0xF04F 0x30FF      MOVNE    R0,#-1
   \   0000055A   0xE7B7             B.N      ??f_printf_55
   \                     ??f_printf_60: (+1)
   \   0000055C   0xF8C6 0x4218      STR      R4,[R6, #+536]
   \                     ??f_printf_61: (+1)
   \   00000560   0xF8D6 0x0208      LDR      R0,[R6, #+520]
   \   00000564   0x463A             MOV      R2,R7
   \   00000566   0x05C1             LSLS     R1,R0,#+23
   \   00000568   0x0DC9             LSRS     R1,R1,#+23
   \   0000056A   0xF5C1 0x7000      RSB      R0,R1,#+512
   \   0000056E   0x4581             CMP      R9,R0
   \   00000570   0xBF98             IT       LS 
   \   00000572   0x4648             MOVLS    R0,R9
   \   00000574   0x1989             ADDS     R1,R1,R6
   \   00000576   0xB138             CBZ.N    R0,??f_printf_62
   \   00000578   0xEA4F 0x0300      MOV.W    R3,R0
   \                     ??f_printf_63: (+1)
   \   0000057C   0xF812 0x4B01      LDRB     R4,[R2], #+1
   \   00000580   0x1E5B             SUBS     R3,R3,#+1
   \   00000582   0xF801 0x4B01      STRB     R4,[R1], #+1
   \   00000586   0xD1F9             BNE.N    ??f_printf_63
   \                     ??f_printf_62: (+1)
   \   00000588   0xF896 0x1206      LDRB     R1,[R6, #+518]
   \   0000058C   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000590   0xF886 0x1206      STRB     R1,[R6, #+518]
   \                     ??f_printf_64: (+1)
   \   00000594   0xF8D6 0x1208      LDR      R1,[R6, #+520]
   \   00000598   0x19C7             ADDS     R7,R0,R7
   \   0000059A   0x4480             ADD      R8,R0,R8
   \   0000059C   0xEBA9 0x0900      SUB      R9,R9,R0
   \   000005A0   0x1841             ADDS     R1,R0,R1
   \   000005A2   0xF8C6 0x1208      STR      R1,[R6, #+520]
   \                     ??f_printf_58: (+1)
   \   000005A6   0xF1B9 0x0F00      CMP      R9,#+0
   \   000005AA   0xD0C1             BEQ.N    ??f_printf_59
   \   000005AC   0xF8D6 0x1208      LDR      R1,[R6, #+520]
   \   000005B0   0x05C8             LSLS     R0,R1,#+23
   \   000005B2   0xD1D5             BNE.N    ??f_printf_61
   \   000005B4   0xF8D6 0x0200      LDR      R0,[R6, #+512]
   \   000005B8   0xF890 0x3202      LDRB     R3,[R0, #+514]
   \   000005BC   0x1E5B             SUBS     R3,R3,#+1
   \   000005BE   0xEA03 0x2251      AND      R2,R3,R1, LSR #+9
   \   000005C2   0xB2D2             UXTB     R2,R2
   \   000005C4   0x2A00             CMP      R2,#+0
   \   000005C6   0x9200             STR      R2,[SP, #+0]
   \   000005C8   0xF040 0x80CE      BNE.W    ??f_printf_65
   \   000005CC   0x2900             CMP      R1,#+0
   \   000005CE   0xF040 0x80B7      BNE.W    ??f_printf_66
   \   000005D2   0xF8D6 0x1210      LDR      R1,[R6, #+528]
   \   000005D6   0x2900             CMP      R1,#+0
   \   000005D8   0xF040 0x80B7      BNE.W    ??f_printf_67
   \   000005DC   0x4604             MOV      R4,R0
   \   000005DE   0xF8D4 0xB20C      LDR      R11,[R4, #+524]
   \   000005E2   0xF1BB 0x0F00      CMP      R11,#+0
   \   000005E6   0xD003             BEQ.N    ??f_printf_68
   \   000005E8   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   000005EC   0x4583             CMP      R11,R0
   \   000005EE   0xD301             BCC.N    ??f_printf_69
   \                     ??f_printf_68: (+1)
   \   000005F0   0xF04F 0x0B01      MOV      R11,#+1
   \                     ??f_printf_69: (+1)
   \   000005F4   0xEA4F 0x050B      MOV.W    R5,R11
   \                     ??f_printf_70: (+1)
   \   000005F8   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   000005FC   0x1C6D             ADDS     R5,R5,#+1
   \   000005FE   0x4285             CMP      R5,R0
   \   00000600   0xD303             BCC.N    ??f_printf_71
   \   00000602   0x2502             MOVS     R5,#+2
   \   00000604   0xF1BB 0x0F02      CMP      R11,#+2
   \   00000608   0xD392             BCC.N    ??f_printf_59
   \                     ??f_printf_71: (+1)
   \   0000060A   0x4629             MOV      R1,R5
   \   0000060C   0x4620             MOV      R0,R4
   \   0000060E   0x.... 0x....      BL       get_fat
   \   00000612   0x0001             MOVS     R1,R0
   \   00000614   0xF040 0x808B      BNE.W    ??f_printf_72
   \   00000618   0x2D02             CMP      R5,#+2
   \   0000061A   0xD36D             BCC.N    ??f_printf_73
   \   0000061C   0xF8D4 0x0214      LDR      R0,[R4, #+532]
   \   00000620   0x4285             CMP      R5,R0
   \   00000622   0xD269             BCS.N    ??f_printf_73
   \   00000624   0xF894 0x0200      LDRB     R0,[R4, #+512]
   \   00000628   0x2801             CMP      R0,#+1
   \   0000062A   0xD034             BEQ.N    ??f_printf_74
   \   0000062C   0xD364             BCC.N    ??f_printf_73
   \   0000062E   0x2803             CMP      R0,#+3
   \   00000630   0xD001             BEQ.N    ??f_printf_75
   \   00000632   0xD31C             BCC.N    ??f_printf_76
   \   00000634   0xE060             B.N      ??f_printf_73
   \                     ??f_printf_75: (+1)
   \   00000636   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   0000063A   0xEB00 0x11D5      ADD      R1,R0,R5, LSR #+7
   \   0000063E   0x4620             MOV      R0,R4
   \   00000640   0x.... 0x....      BL       move_window
   \   00000644   0x2800             CMP      R0,#+0
   \   00000646   0xD158             BNE.N    ??f_printf_77
   \   00000648   0x00A9             LSLS     R1,R5,#+2
   \   0000064A   0x05C9             LSLS     R1,R1,#+23
   \   0000064C   0xEB14 0x51D1      ADDS     R1,R4,R1, LSR #+23
   \   00000650   0xF06F 0x4370      MVN      R3,#-268435456
   \   00000654   0x78CA             LDRB     R2,[R1, #+3]
   \   00000656   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   0000065A   0x23FF             MOVS     R3,#+255
   \   0000065C   0x700B             STRB     R3,[R1, #+0]
   \   0000065E   0x0E12             LSRS     R2,R2,#+24
   \   00000660   0x704B             STRB     R3,[R1, #+1]
   \   00000662   0x708B             STRB     R3,[R1, #+2]
   \   00000664   0x70CA             STRB     R2,[R1, #+3]
   \   00000666   0x2101             MOVS     R1,#+1
   \   00000668   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   0000066C   0xE045             B.N      ??f_printf_77
   \                     ??f_printf_76: (+1)
   \   0000066E   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   00000672   0xEB00 0x2115      ADD      R1,R0,R5, LSR #+8
   \   00000676   0x4620             MOV      R0,R4
   \   00000678   0x.... 0x....      BL       move_window
   \   0000067C   0x2800             CMP      R0,#+0
   \   0000067E   0xD13C             BNE.N    ??f_printf_77
   \   00000680   0x0069             LSLS     R1,R5,#+1
   \   00000682   0x05C9             LSLS     R1,R1,#+23
   \   00000684   0xEB14 0x51D1      ADDS     R1,R4,R1, LSR #+23
   \   00000688   0x22FF             MOVS     R2,#+255
   \   0000068A   0x700A             STRB     R2,[R1, #+0]
   \   0000068C   0x704A             STRB     R2,[R1, #+1]
   \   0000068E   0x2101             MOVS     R1,#+1
   \   00000690   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   00000694   0xE031             B.N      ??f_printf_77
   \                     ??f_printf_74: (+1)
   \   00000696   0xEB05 0x0B55      ADD      R11,R5,R5, LSR #+1
   \   0000069A   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   0000069E   0xEB00 0x215B      ADD      R1,R0,R11, LSR #+9
   \   000006A2   0x4620             MOV      R0,R4
   \   000006A4   0x.... 0x....      BL       move_window
   \   000006A8   0xBB38             CBNZ.N   R0,??f_printf_77
   \   000006AA   0xEA4F 0x50CB      LSL      R0,R11,#+23
   \   000006AE   0xF10B 0x0B01      ADD      R11,R11,#+1
   \   000006B2   0xEB14 0x51D0      ADDS     R1,R4,R0, LSR #+23
   \   000006B6   0x07E8             LSLS     R0,R5,#+31
   \   000006B8   0xBF46             ITTE     MI 
   \   000006BA   0x7808             LDRBMI   R0,[R1, #+0]
   \   000006BC   0xF040 0x00F0      ORRMI    R0,R0,#0xF0
   \   000006C0   0x20FF             MOVPL    R0,#+255
   \   000006C2   0x7008             STRB     R0,[R1, #+0]
   \   000006C4   0x2001             MOVS     R0,#+1
   \   000006C6   0xF884 0x0204      STRB     R0,[R4, #+516]
   \   000006CA   0xF8D4 0x0220      LDR      R0,[R4, #+544]
   \   000006CE   0xEB00 0x215B      ADD      R1,R0,R11, LSR #+9
   \   000006D2   0x4620             MOV      R0,R4
   \   000006D4   0x.... 0x....      BL       move_window
   \   000006D8   0xB978             CBNZ.N   R0,??f_printf_77
   \   000006DA   0xEA4F 0x51CB      LSL      R1,R11,#+23
   \   000006DE   0xEB14 0x51D1      ADDS     R1,R4,R1, LSR #+23
   \   000006E2   0x07EA             LSLS     R2,R5,#+31
   \   000006E4   0xBF4E             ITEE     MI 
   \   000006E6   0x22FF             MOVMI    R2,#+255
   \   000006E8   0x780A             LDRBPL   R2,[R1, #+0]
   \   000006EA   0xF042 0x020F      ORRPL    R2,R2,#0xF
   \   000006EE   0x700A             STRB     R2,[R1, #+0]
   \   000006F0   0x2101             MOVS     R1,#+1
   \   000006F2   0xF884 0x1204      STRB     R1,[R4, #+516]
   \   000006F6   0xE000             B.N      ??f_printf_77
   \                     ??f_printf_73: (+1)
   \   000006F8   0x2002             MOVS     R0,#+2
   \                     ??f_printf_77: (+1)
   \   000006FA   0xB988             CBNZ.N   R0,??f_printf_78
   \   000006FC   0xF8D4 0x0210      LDR      R0,[R4, #+528]
   \   00000700   0xF8C4 0x520C      STR      R5,[R4, #+524]
   \   00000704   0xF110 0x0F01      CMN      R0,#+1
   \   00000708   0xD00F             BEQ.N    ??f_printf_79
   \   0000070A   0x1E40             SUBS     R0,R0,#+1
   \   0000070C   0x4629             MOV      R1,R5
   \   0000070E   0xF8C4 0x0210      STR      R0,[R4, #+528]
   \   00000712   0xF894 0x0205      LDRB     R0,[R4, #+517]
   \   00000716   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000071A   0xF884 0x0205      STRB     R0,[R4, #+517]
   \   0000071E   0xE014             B.N      ??f_printf_67
   \                     ??f_printf_78: (+1)
   \   00000720   0x2801             CMP      R0,#+1
   \   00000722   0xBF0C             ITE      EQ 
   \   00000724   0xF04F 0x35FF      MOVEQ    R5,#-1
   \   00000728   0x2501             MOVNE    R5,#+1
   \                     ??f_printf_79: (+1)
   \   0000072A   0x4629             MOV      R1,R5
   \   0000072C   0xE00D             B.N      ??f_printf_67
   \                     ??f_printf_72: (+1)
   \   0000072E   0xF111 0x0F01      CMN      R1,#+1
   \   00000732   0xBF18             IT       NE 
   \   00000734   0x2901             CMPNE    R1,#+1
   \   00000736   0xD00B             BEQ.N    ??f_printf_80
   \   00000738   0x455D             CMP      R5,R11
   \   0000073A   0xF47F 0xAF5D      BNE.W    ??f_printf_70
   \   0000073E   0xE6F7             B.N      ??f_printf_59
   \                     ??f_printf_66: (+1)
   \   00000740   0xF8D6 0x1214      LDR      R1,[R6, #+532]
   \   00000744   0x.... 0x....      BL       create_chain
   \   00000748   0x4601             MOV      R1,R0
   \                     ??f_printf_67: (+1)
   \   0000074A   0x2900             CMP      R1,#+0
   \   0000074C   0xF43F 0xAEF0      BEQ.W    ??f_printf_59
   \                     ??f_printf_80: (+1)
   \   00000750   0x2901             CMP      R1,#+1
   \   00000752   0xD030             BEQ.N    ??f_printf_81
   \   00000754   0xF111 0x0F01      CMN      R1,#+1
   \   00000758   0xD070             BEQ.N    ??f_printf_82
   \   0000075A   0xF8D6 0x0210      LDR      R0,[R6, #+528]
   \   0000075E   0xF8C6 0x1214      STR      R1,[R6, #+532]
   \   00000762   0xB908             CBNZ.N   R0,??f_printf_65
   \   00000764   0xF8C6 0x1210      STR      R1,[R6, #+528]
   \                     ??f_printf_65: (+1)
   \   00000768   0xF896 0x0206      LDRB     R0,[R6, #+518]
   \   0000076C   0x0640             LSLS     R0,R0,#+25
   \   0000076E   0xD511             BPL.N    ??f_printf_83
   \   00000770   0xF8D6 0x0200      LDR      R0,[R6, #+512]
   \   00000774   0xF8D6 0x2218      LDR      R2,[R6, #+536]
   \   00000778   0x2301             MOVS     R3,#+1
   \   0000077A   0x4631             MOV      R1,R6
   \   0000077C   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   00000780   0x.... 0x....      BL       disk_write
   \   00000784   0x2800             CMP      R0,#+0
   \   00000786   0xD159             BNE.N    ??f_printf_82
   \   00000788   0xF896 0x0206      LDRB     R0,[R6, #+518]
   \   0000078C   0xF000 0x00BF      AND      R0,R0,#0xBF
   \   00000790   0xF886 0x0206      STRB     R0,[R6, #+518]
   \                     ??f_printf_83: (+1)
   \   00000794   0xF8D6 0x0200      LDR      R0,[R6, #+512]
   \   00000798   0xF8D6 0x2214      LDR      R2,[R6, #+532]
   \   0000079C   0xF500 0x7305      ADD      R3,R0,#+532
   \   000007A0   0x1E92             SUBS     R2,R2,#+2
   \   000007A2   0x681C             LDR      R4,[R3, #+0]
   \   000007A4   0x1EA4             SUBS     R4,R4,#+2
   \   000007A6   0x42A2             CMP      R2,R4
   \   000007A8   0xD205             BCS.N    ??f_printf_81
   \   000007AA   0xF890 0x1202      LDRB     R1,[R0, #+514]
   \   000007AE   0x695B             LDR      R3,[R3, #+20]
   \   000007B0   0xFB01 0x3202      MLA      R2,R1,R2,R3
   \   000007B4   0xB91A             CBNZ.N   R2,??f_printf_84
   \                     ??f_printf_81: (+1)
   \   000007B6   0x2002             MOVS     R0,#+2
   \   000007B8   0xF886 0x0207      STRB     R0,[R6, #+519]
   \   000007BC   0xE6C7             B.N      ??f_printf_57
   \                     ??f_printf_84: (+1)
   \   000007BE   0x9B00             LDR      R3,[SP, #+0]
   \   000007C0   0x189C             ADDS     R4,R3,R2
   \   000007C2   0xEA5F 0x2559      LSRS     R5,R9,#+9
   \   000007C6   0xD023             BEQ.N    ??f_printf_85
   \   000007C8   0x18EA             ADDS     R2,R5,R3
   \   000007CA   0x4291             CMP      R1,R2
   \   000007CC   0x4622             MOV      R2,R4
   \   000007CE   0xBF38             IT       CC 
   \   000007D0   0x1ACD             SUBCC    R5,R1,R3
   \   000007D2   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   000007D6   0x462B             MOV      R3,R5
   \   000007D8   0x4639             MOV      R1,R7
   \   000007DA   0x.... 0x....      BL       disk_write
   \   000007DE   0xBB68             CBNZ.N   R0,??f_printf_82
   \   000007E0   0xF8D6 0x0218      LDR      R0,[R6, #+536]
   \   000007E4   0x1B00             SUBS     R0,R0,R4
   \   000007E6   0x42A8             CMP      R0,R5
   \   000007E8   0xD210             BCS.N    ??f_printf_86
   \   000007EA   0x4631             MOV      R1,R6
   \   000007EC   0xEB07 0x2040      ADD      R0,R7,R0, LSL #+9
   \   000007F0   0xF44F 0x7200      MOV      R2,#+512
   \                     ??f_printf_87: (+1)
   \   000007F4   0xF810 0x3B01      LDRB     R3,[R0], #+1
   \   000007F8   0x1E52             SUBS     R2,R2,#+1
   \   000007FA   0xF801 0x3B01      STRB     R3,[R1], #+1
   \   000007FE   0xD1F9             BNE.N    ??f_printf_87
   \   00000800   0xF896 0x0206      LDRB     R0,[R6, #+518]
   \   00000804   0xF000 0x00BF      AND      R0,R0,#0xBF
   \   00000808   0xF886 0x0206      STRB     R0,[R6, #+518]
   \                     ??f_printf_86: (+1)
   \   0000080C   0x0268             LSLS     R0,R5,#+9
   \   0000080E   0xE6C1             B.N      ??f_printf_64
   \                     ??f_printf_85: (+1)
   \   00000810   0xF8D6 0x1218      LDR      R1,[R6, #+536]
   \   00000814   0x42A1             CMP      R1,R4
   \   00000816   0xF43F 0xAEA1      BEQ.W    ??f_printf_60
   \   0000081A   0xF8D6 0x1208      LDR      R1,[R6, #+520]
   \   0000081E   0xF8D6 0x220C      LDR      R2,[R6, #+524]
   \   00000822   0x4291             CMP      R1,R2
   \   00000824   0xF4BF 0xAE9A      BCS.W    ??f_printf_60
   \   00000828   0xF890 0x0201      LDRB     R0,[R0, #+513]
   \   0000082C   0x2301             MOVS     R3,#+1
   \   0000082E   0x4622             MOV      R2,R4
   \   00000830   0x4631             MOV      R1,R6
   \   00000832   0x.... 0x....      BL       disk_read
   \   00000836   0x2800             CMP      R0,#+0
   \   00000838   0xF43F 0xAE90      BEQ.W    ??f_printf_60
   \                     ??f_printf_82: (+1)
   \   0000083C   0x2001             MOVS     R0,#+1
   \   0000083E   0xF886 0x0207      STRB     R0,[R6, #+519]
   \   00000842   0xE684             B.N      ??f_printf_57
   4711          		case 'B' :					/* Binary */
   4712          			r = 2; break;
   \                     ??f_printf_9: (+1)
   \   00000844   0x2202             MOVS     R2,#+2
   4713          		case 'O' :					/* Octal */
   4714          			r = 8; break;
   4715          		case 'D' :					/* Signed decimal */
   4716          		case 'U' :					/* Unsigned decimal */
   4717          			r = 10; break;
   4718          		case 'X' :					/* Hexdecimal */
   4719          			r = 16; break;
   4720          		default:					/* Unknown type (pass-through) */
   4721          			putc_bfd(&pb, c); continue;
   4722          		}
   4723          
   4724          		/* Get an argument and put it in numeral */
   4725          		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
   \                     ??f_printf_88: (+1)
   \   00000846   0x0743             LSLS     R3,R0,#+29
   \   00000848   0xBF4C             ITE      MI 
   \   0000084A   0x9B03             LDRMI    R3,[SP, #+12]
   \   0000084C   0x9B03             LDRPL    R3,[SP, #+12]
   \   0000084E   0xE005             B.N      ??f_printf_89
   \                     ??f_printf_11: (+1)
   \   00000850   0x2208             MOVS     R2,#+8
   \   00000852   0xE7F8             B.N      ??f_printf_88
   \                     ??f_printf_10: (+1)
   \   00000854   0x220A             MOVS     R2,#+10
   \   00000856   0xE7F6             B.N      ??f_printf_88
   \                     ??f_printf_13: (+1)
   \   00000858   0x2210             MOVS     R2,#+16
   \   0000085A   0xE7F4             B.N      ??f_printf_88
   \                     ??f_printf_89: (+1)
   \   0000085C   0x1D1B             ADDS     R3,R3,#+4
   \   0000085E   0x9303             STR      R3,[SP, #+12]
   \   00000860   0x1F1B             SUBS     R3,R3,#+4
   4726          		if (d == 'D' && (v & 0x80000000)) {
   \   00000862   0x2C44             CMP      R4,#+68
   \   00000864   0x681B             LDR      R3,[R3, #+0]
   \   00000866   0xD104             BNE.N    ??f_printf_90
   \   00000868   0x2B00             CMP      R3,#+0
   \   0000086A   0xBF44             ITT      MI 
   \   0000086C   0x425B             RSBMI    R3,R3,#+0
   \   0000086E   0xF040 0x0008      ORRMI    R0,R0,#0x8
   4727          			v = 0 - v;
   4728          			f |= 8;
   4729          		}
   4730          		i = 0;
   \                     ??f_printf_90: (+1)
   \   00000872   0x2600             MOVS     R6,#+0
   \   00000874   0xF10D 0x0A64      ADD      R10,SP,#+100
   4731          		do {
   4732          			d = (TCHAR)(v % r); v /= r;
   \                     ??f_printf_91: (+1)
   \   00000878   0xFBB3 0xF7F2      UDIV     R7,R3,R2
   \   0000087C   0xFB02 0x3417      MLS      R4,R2,R7,R3
   \   00000880   0x463B             MOV      R3,R7
   \   00000882   0xB2E4             UXTB     R4,R4
   4733          			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
   \   00000884   0x2C0A             CMP      R4,#+10
   \   00000886   0xDB05             BLT.N    ??f_printf_92
   \   00000888   0x2978             CMP      R1,#+120
   \   0000088A   0xBF0C             ITE      EQ 
   \   0000088C   0x2727             MOVEQ    R7,#+39
   \   0000088E   0x2707             MOVNE    R7,#+7
   \   00000890   0x193C             ADDS     R4,R7,R4
   \   00000892   0xB2E4             UXTB     R4,R4
   4734          			s[i++] = d + '0';
   \                     ??f_printf_92: (+1)
   \   00000894   0x3430             ADDS     R4,R4,#+48
   \   00000896   0x1C76             ADDS     R6,R6,#+1
   \   00000898   0xF80A 0x4B01      STRB     R4,[R10], #+1
   4735          		} while (v && i < sizeof s / sizeof s[0]);
   \   0000089C   0xB10B             CBZ.N    R3,??f_printf_93
   \   0000089E   0x2E10             CMP      R6,#+16
   \   000008A0   0xD3EA             BCC.N    ??f_printf_91
   4736          		if (f & 8) s[i++] = '-';
   \                     ??f_printf_93: (+1)
   \   000008A2   0x0701             LSLS     R1,R0,#+28
   \   000008A4   0xD503             BPL.N    ??f_printf_94
   \   000008A6   0x212D             MOVS     R1,#+45
   \   000008A8   0xAA19             ADD      R2,SP,#+100
   \   000008AA   0x54B1             STRB     R1,[R6, R2]
   \   000008AC   0x1C76             ADDS     R6,R6,#+1
   4737          		j = i; d = (f & 1) ? '0' : ' ';
   \                     ??f_printf_94: (+1)
   \   000008AE   0x07C1             LSLS     R1,R0,#+31
   \   000008B0   0x46B2             MOV      R10,R6
   \   000008B2   0xBF4C             ITE      MI 
   \   000008B4   0x2430             MOVMI    R4,#+48
   \   000008B6   0x2420             MOVPL    R4,#+32
   4738          		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
   \   000008B8   0x0780             LSLS     R0,R0,#+30
   \   000008BA   0xD525             BPL.N    ??f_printf_95
   4739          		do putc_bfd(&pb, s[--i]); while (i);
   \                     ??f_printf_96: (+1)
   \   000008BC   0xA819             ADD      R0,SP,#+100
   \   000008BE   0x1E76             SUBS     R6,R6,#+1
   \   000008C0   0xF816 0x8000      LDRB     R8,[R6, R0]
   \   000008C4   0xF1B8 0x0F0A      CMP      R8,#+10
   \   000008C8   0xD103             BNE.N    ??f_printf_97
   \   000008CA   0x210D             MOVS     R1,#+13
   \   000008CC   0xA805             ADD      R0,SP,#+20
   \   000008CE   0x.... 0x....      BL       putc_bfd
   \                     ??f_printf_97: (+1)
   \   000008D2   0x9F06             LDR      R7,[SP, #+24]
   \   000008D4   0x2F00             CMP      R7,#+0
   \   000008D6   0xD43D             BMI.N    ??f_printf_98
   \   000008D8   0xA805             ADD      R0,SP,#+20
   \   000008DA   0x1838             ADDS     R0,R7,R0
   \   000008DC   0x1C7F             ADDS     R7,R7,#+1
   \   000008DE   0x2F3D             CMP      R7,#+61
   \   000008E0   0xF880 0x800C      STRB     R8,[R0, #+12]
   \   000008E4   0xDB32             BLT.N    ??f_printf_99
   \   000008E6   0x9805             LDR      R0,[SP, #+20]
   \   000008E8   0x466B             MOV      R3,SP
   \   000008EA   0x463A             MOV      R2,R7
   \   000008EC   0xA908             ADD      R1,SP,#+32
   \   000008EE   0x.... 0x....      BL       f_write
   \   000008F2   0x9800             LDR      R0,[SP, #+0]
   \   000008F4   0x42B8             CMP      R0,R7
   \   000008F6   0xBF0C             ITE      EQ 
   \   000008F8   0x2700             MOVEQ    R7,#+0
   \   000008FA   0xF04F 0x37FF      MOVNE    R7,#-1
   \   000008FE   0xE025             B.N      ??f_printf_99
   \                     ??f_printf_100: (+1)
   \   00000900   0x9807             LDR      R0,[SP, #+28]
   \   00000902   0x9706             STR      R7,[SP, #+24]
   \   00000904   0x1C40             ADDS     R0,R0,#+1
   \   00000906   0x9007             STR      R0,[SP, #+28]
   \                     ??f_printf_95: (+1)
   \   00000908   0x9902             LDR      R1,[SP, #+8]
   \   0000090A   0x4650             MOV      R0,R10
   \   0000090C   0xF100 0x0A01      ADD      R10,R0,#+1
   \   00000910   0x4288             CMP      R0,R1
   \   00000912   0xD2D3             BCS.N    ??f_printf_96
   \   00000914   0x2C0A             CMP      R4,#+10
   \   00000916   0xD103             BNE.N    ??f_printf_101
   \   00000918   0x210D             MOVS     R1,#+13
   \   0000091A   0xA805             ADD      R0,SP,#+20
   \   0000091C   0x.... 0x....      BL       putc_bfd
   \                     ??f_printf_101: (+1)
   \   00000920   0x9F06             LDR      R7,[SP, #+24]
   \   00000922   0x2F00             CMP      R7,#+0
   \   00000924   0xD4F0             BMI.N    ??f_printf_95
   \   00000926   0xA805             ADD      R0,SP,#+20
   \   00000928   0x1838             ADDS     R0,R7,R0
   \   0000092A   0x1C7F             ADDS     R7,R7,#+1
   \   0000092C   0x2F3D             CMP      R7,#+61
   \   0000092E   0x7304             STRB     R4,[R0, #+12]
   \   00000930   0xDBE6             BLT.N    ??f_printf_100
   \   00000932   0x9805             LDR      R0,[SP, #+20]
   \   00000934   0x466B             MOV      R3,SP
   \   00000936   0x463A             MOV      R2,R7
   \   00000938   0xA908             ADD      R1,SP,#+32
   \   0000093A   0x.... 0x....      BL       f_write
   \   0000093E   0x9800             LDR      R0,[SP, #+0]
   \   00000940   0x42B8             CMP      R0,R7
   \   00000942   0xBF0C             ITE      EQ 
   \   00000944   0x2700             MOVEQ    R7,#+0
   \   00000946   0xF04F 0x37FF      MOVNE    R7,#-1
   \   0000094A   0xE7D9             B.N      ??f_printf_100
   \                     ??f_printf_99: (+1)
   \   0000094C   0x9807             LDR      R0,[SP, #+28]
   \   0000094E   0x9706             STR      R7,[SP, #+24]
   \   00000950   0x1C40             ADDS     R0,R0,#+1
   \   00000952   0x9007             STR      R0,[SP, #+28]
   \                     ??f_printf_98: (+1)
   \   00000954   0x2E00             CMP      R6,#+0
   \   00000956   0xD1B1             BNE.N    ??f_printf_96
   4740          		while (j++ < w) putc_bfd(&pb, d);
   \                     ??f_printf_102: (+1)
   \   00000958   0x9802             LDR      R0,[SP, #+8]
   \   0000095A   0x4582             CMP      R10,R0
   \   0000095C   0xF4BF 0xAB64      BCS.W    ??f_printf_0
   \   00000960   0x2C0A             CMP      R4,#+10
   \   00000962   0xF10A 0x0A01      ADD      R10,R10,#+1
   \   00000966   0xD103             BNE.N    ??f_printf_103
   \   00000968   0x210D             MOVS     R1,#+13
   \   0000096A   0xA805             ADD      R0,SP,#+20
   \   0000096C   0x.... 0x....      BL       putc_bfd
   \                     ??f_printf_103: (+1)
   \   00000970   0x9F06             LDR      R7,[SP, #+24]
   \   00000972   0x2F00             CMP      R7,#+0
   \   00000974   0xD4F0             BMI.N    ??f_printf_102
   \   00000976   0xA805             ADD      R0,SP,#+20
   \   00000978   0x1838             ADDS     R0,R7,R0
   \   0000097A   0x1C7F             ADDS     R7,R7,#+1
   \   0000097C   0x2F3D             CMP      R7,#+61
   \   0000097E   0x7304             STRB     R4,[R0, #+12]
   \   00000980   0xDB0B             BLT.N    ??f_printf_104
   \   00000982   0x9805             LDR      R0,[SP, #+20]
   \   00000984   0x466B             MOV      R3,SP
   \   00000986   0x463A             MOV      R2,R7
   \   00000988   0xA908             ADD      R1,SP,#+32
   \   0000098A   0x.... 0x....      BL       f_write
   \   0000098E   0x9800             LDR      R0,[SP, #+0]
   \   00000990   0x42B8             CMP      R0,R7
   \   00000992   0xBF0C             ITE      EQ 
   \   00000994   0x2700             MOVEQ    R7,#+0
   \   00000996   0xF04F 0x37FF      MOVNE    R7,#-1
   \                     ??f_printf_104: (+1)
   \   0000099A   0x9807             LDR      R0,[SP, #+28]
   \   0000099C   0x9706             STR      R7,[SP, #+24]
   \   0000099E   0x1C40             ADDS     R0,R0,#+1
   \   000009A0   0x9007             STR      R0,[SP, #+28]
   \   000009A2   0xE7D9             B.N      ??f_printf_102
   4741          	}
   4742          
   4743          	va_end(arp);
   4744          
   4745          	if (   pb.idx >= 0		/* Flush buffered characters to the file */
   4746          		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
   4747          		&& (UINT)pb.idx == nw) return pb.nchr;
   \                     ??f_printf_3: (+1)
   \   000009A4   0x9A06             LDR      R2,[SP, #+24]
   \   000009A6   0x2A00             CMP      R2,#+0
   \   000009A8   0xD40B             BMI.N    ??f_printf_105
   \   000009AA   0x9805             LDR      R0,[SP, #+20]
   \   000009AC   0xAB18             ADD      R3,SP,#+96
   \   000009AE   0xA908             ADD      R1,SP,#+32
   \   000009B0   0x.... 0x....      BL       f_write
   \   000009B4   0x2800             CMP      R0,#+0
   \   000009B6   0xBF01             ITTTT    EQ 
   \   000009B8   0x9806             LDREQ    R0,[SP, #+24]
   \   000009BA   0x9918             LDREQ    R1,[SP, #+96]
   \   000009BC   0x4288             CMPEQ    R0,R1
   \   000009BE   0x9807             LDREQ    R0,[SP, #+28]
   \   000009C0   0xD001             BEQ.N    ??f_printf_106
   4748          	return EOF;
   \                     ??f_printf_105: (+1)
   \   000009C2   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??f_printf_106: (+1)
   \   000009C6   0xB01E             ADD      SP,SP,#+120
   \   000009C8   0xE8BD 0x0FF0      POP      {R4-R11}
   \   000009CC   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
   4749          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     Files

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x22 0x2A          DC8 "\"*+,:;<=>?[]|\177"
   \              0x2B 0x2C    
   \              0x3A 0x3B    
   \              0x3C 0x3D    
   \              0x3E 0x3F    
   \              0x5B 0x5D    
   \              0x7C 0x7F    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x00544146         DC32     0x544146

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     Files

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x41615252         DC32     0x41615252

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x61417272         DC32     0x61417272

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     Files

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x........         DC32     Files

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x00FFFF00         DC32     0xffff00

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0xEB 0xFE          DC8 "\353\376\220MSDOS5.0"
   \              0x90 0x4D    
   \              0x53 0x44    
   \              0x4F 0x53    
   \              0x35 0x2E    
   \              0x30 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x4E 0x4F          DC8 "NO NAME    FAT32   "
   \              0x20 0x4E    
   \              0x41 0x4D    
   \              0x45 0x20    
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x41 0x54    
   \              0x33 0x32    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x4E 0x4F          DC8 "NO NAME    FAT     "
   \              0x20 0x4E    
   \              0x41 0x4D    
   \              0x45 0x20    
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x41 0x54    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   4750          
   4751          #endif /* !_FS_READONLY */
   4752          #endif /* _USE_STRFUNC */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   check_fs
         8   -> move_window
      16   chk_lock
       0   clust2sect
      24   create_chain
        24   -> get_fat
        24   -> move_window
        24   -> put_fat
      32   create_name
        32   -> __aeabi_memset
       0   dec_lock
      24   dir_read
        24   -> disk_read
        24   -> get_fat
        24   -> sync_window
      24   dir_register
        24   -> __aeabi_memclr
        24   -> create_chain
        24   -> dir_sdi
        24   -> disk_read
        24   -> get_fat
        24   -> move_window
        24   -> sync_window
      16   dir_remove
        16   -> __aeabi_memclr
        16   -> dir_sdi
        16   -> move_window
      16   dir_sdi
        16   -> get_fat
     576   f_chmod
       576   -> find_volume
       576   -> follow_path
       576   -> sync_fs
       8   f_close
         8   -> dec_lock
         8   -> f_sync
         8   -> validate
      16   f_closedir
        16   -> disk_status
      40   f_getfree
        40   -> disk_read
        40   -> find_volume
        40   -> get_fat
        40   -> sync_window
      56   f_gets
        56   -> disk_read
        56   -> disk_write
        56   -> get_fat
        56   -> validate
      48   f_lseek
        48   -> disk_read
        48   -> disk_write
        48   -> get_fat
        48   -> move_window
        48   -> put_fat
        48   -> validate
     600   f_mkdir
       600   -> __aeabi_memclr
       600   -> __aeabi_memset
       600   -> dir_register
       600   -> disk_write
       600   -> find_volume
       600   -> follow_path
       600   -> get_fat
       600   -> get_fattime
       600   -> move_window
       600   -> remove_chain
       600   -> sync_fs
       600   -> sync_window
      64   f_mkfs
        64   -> __aeabi_memclr
        64   -> disk_initialize
        64   -> disk_ioctl
        64   -> disk_write
        64   -> get_fattime
      24   f_mount
        24   -> find_volume
     592   f_open
       592   -> chk_lock
       592   -> dir_register
       592   -> find_volume
       592   -> follow_path
       592   -> get_fattime
       592   -> inc_lock
       592   -> ld_clust
       592   -> move_window
       592   -> remove_chain
      40   f_opendir
        40   -> dir_sdi
        40   -> find_volume
        40   -> follow_path
        40   -> ld_clust
     168   f_printf
       168   -> create_chain
       168   -> disk_read
       168   -> disk_write
       168   -> f_write
       168   -> get_fat
       168   -> move_window
       168   -> putc_bfd
       168   -> validate
      96   f_putc
        96   -> f_write
        96   -> putc_bfd
     104   f_puts
       104   -> f_write
       104   -> putc_bfd
      32   f_read
        32   -> disk_read
        32   -> disk_write
        32   -> get_fat
        32   -> validate
      32   f_readdir
        32   -> dir_read
        32   -> dir_sdi
        32   -> get_fat
        32   -> get_fileinfo
        32   -> validate
    1144   f_rename
      1144   -> __aeabi_memcpy4
      1144   -> dir_register
      1144   -> dir_remove
      1144   -> find_volume
      1144   -> follow_path
      1144   -> ld_clust
      1144   -> move_window
      1144   -> sync_fs
     576   f_stat
       576   -> find_volume
       576   -> follow_path
       576   -> get_fileinfo
      16   f_sync
        16   -> disk_write
        16   -> get_fattime
        16   -> move_window
         0   -> sync_fs
        16   -> validate
      32   f_truncate
        32   -> disk_write
        32   -> get_fat
        32   -> move_window
        32   -> remove_chain
        32   -> validate
    1120   f_unlink
      1120   -> __aeabi_memcpy4
      1120   -> dir_read
      1120   -> dir_remove
      1120   -> dir_sdi
      1120   -> find_volume
      1120   -> follow_path
      1120   -> ld_clust
      1120   -> remove_chain
      1120   -> sync_fs
     568   f_utime
       568   -> find_volume
       568   -> follow_path
       568   -> sync_fs
      40   f_write
        40   -> create_chain
        40   -> disk_read
        40   -> disk_write
        40   -> get_fat
        40   -> move_window
        40   -> validate
      48   find_volume
        48   -> check_fs
        48   -> disk_initialize
        48   -> disk_status
        48   -> get_ldnumber
        48   -> move_window
      24   follow_path
        24   -> create_name
        24   -> dir_sdi
        24   -> disk_read
        24   -> get_fat
        24   -> sync_window
      24   get_fat
        24   -> move_window
       8   get_fileinfo
       0   get_ldnumber
      16   inc_lock
       0   ld_clust
      16   move_window
        16   -> disk_read
        16   -> sync_window
      24   put_fat
        24   -> move_window
      24   putc_bfd
        24   -> f_write
        24   -> putc_bfd
      24   remove_chain
        24   -> get_fat
        24   -> move_window
      16   sync_fs
        16   -> __aeabi_memclr
        16   -> disk_ioctl
        16   -> disk_write
        16   -> sync_window
      24   sync_window
        24   -> disk_write
       8   validate
         8   -> disk_status


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable17
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable9
      16  ?_0
      12  ?_1
      20  ?_2
      20  ?_3
     128  ExCvt
      32  Files
          Fsid
          FatFs
     114  check_fs
     100  chk_lock
      28  clust2sect
     408  create_chain
     274  create_name
      24  cst
      54  dec_lock
     278  dir_read
     480  dir_register
      68  dir_remove
     180  dir_sdi
      84  f_chmod
      36  f_close
     126  f_closedir
     252  f_getfree
     438  f_gets
    1380  f_lseek
     852  f_mkdir
    1428  f_mkfs
     128  f_mount
     430  f_open
     256  f_opendir
    2512  f_printf
     114  f_putc
     124  f_puts
     404  f_read
     248  f_readdir
     410  f_rename
      70  f_stat
     212  f_sync
     444  f_truncate
     214  f_unlink
      86  f_utime
     844  f_write
     808  find_volume
     542  follow_path
     218  get_fat
     104  get_fileinfo
      76  get_ldnumber
     138  inc_lock
      32  ld_clust
      56  move_window
     270  put_fat
      72  putc_bfd
     334  remove_chain
     218  sync_fs
     102  sync_window
      58  validate
      24  vst

 
     32 bytes in section .bss
 16 380 bytes in section .text
 
 16 380 bytes of CODE memory
     32 bytes of DATA memory

Errors: none
Warnings: none
