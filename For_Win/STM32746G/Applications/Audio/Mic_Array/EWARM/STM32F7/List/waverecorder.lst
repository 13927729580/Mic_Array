###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       10/Oct/2016  13:59:08
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#    Command line =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e
#        --char_is_signed --fpu=VFPv5_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waverecorder.lst
#    Object file  =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waverecorder.o
#
###############################################################################

D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waverecorder.c
      1          
      2          /*****************************************************************************
      3            *    Author: Phan Le Son                                                                                           
      4            *    Company: Autonomous.ai                                            
      5            *    email: plson03@gmail.com
      6            *****************************************************************************/
      7          
      8          
      9          
     10          /* Includes ------------------------------------------------------------------*/
     11          #include "waverecorder.h" 
     12          #include "string.h"
     13          //#include "stm32f7xx_hal_spi.h"
     14          #include "stm32f7xx_hal.h"
     15          #include "pdm_filter.h"
     16          #include "DSP.h"
     17          #include "main.h"
     18          
     19          
     20          /* Private typedef -----------------------------------------------------------*/
     21          /* Private define ------------------------------------------------------------*/
     22          
     23          
     24          /* SPI Configuration defines */
     25          #define SPI_SCK_PIN                       GPIO_PIN_10
     26          #define SPI_SCK_GPIO_PORT                 GPIOB
     27          #define SPI_SCK_GPIO_CLK                  1
     28          #define SPI_SCK_SOURCE                    1
     29          #define SPI_SCK_AF                        GPIO_AF5_SPI2
     30          
     31          #define SPI_MOSI_PIN                      GPIO_PIN_3
     32          #define SPI_MOSI_GPIO_PORT                GPIOC
     33          #define SPI_MOSI_GPIO_CLK                 1
     34          #define SPI_MOSI_SOURCE                   1
     35          #define SPI_MOSI_AF                       GPIO_AF5_SPI2
     36          
     37          
     38          /* sop1hc */
     39          #define SPI1_SCK_PIN                       GPIO_PIN_5
     40          #define SPI1_SCK_GPIO_PORT                 GPIOA
     41          #define SPI1_SCK_GPIO_CLK                  1
     42          #define SPI1_SCK_SOURCE                    1
     43          #define SPI1_SCK_AF                        GPIO_AF5_SPI1
     44          
     45          #define SPI1_MOSI_PIN                      GPIO_PIN_7
     46          #define SPI1_MOSI_GPIO_PORT                GPIOA
     47          #define SPI1_MOSI_GPIO_CLK                 1
     48          #define SPI1_MOSI_SOURCE                   1
     49          #define SPI1_MOSI_AF                       GPIO_AF5_SPI1
     50          
     51          #define SPI1_MISO_PIN                      GPIO_PIN_6
     52          #define SPI1_MISO_GPIO_PORT                GPIOA
     53          #define SPI1_MISO_GPIO_CLK                 1
     54          #define SPI1_MISO_SOURCE                   1
     55          #define SPI1_MISO_AF                       GPIO_AF5_SPI1
     56          
     57          

   \                                 In section .bss, align 4
     58          int16_t Frame7Old[SHIFT_CHNNL7];
     59          int16_t Frame8Old[SHIFT_CHNNL8];
     60          
     61          
     62          uint16_t idxMic8=0;
     63          uint16_t idxMic7=0;
     64          uint8_t pHeaderBuff[44];
     65          //uint16_t Buffer1[AUDIO_IN_PCM_BUFFER_SIZE];
     66          uint16_t volatile cntTransFinish;
     67          
     68          /* Private macro -------------------------------------------------------------*/
     69          /* Private variables ---------------------------------------------------------*/
     70          extern  AUDIO_IN_BufferTypeDef  stkBufferCtlRecIn,stkBuffer1, stkBuffer2;
     71          extern AUDIO_OUT_BufferTypeDef  BufferCtlPlayOut;
     72          extern uint16_t __IO idxSPI5DataBuf1, idxSPI5DataBuf2;
     73          extern WAVE_FormatTypeDef WaveFormat;
     74          extern FIL WavFile;
     75          extern AUDIO_DEMO_StateMachine AudioDemo;
     76          extern AUDIO_PLAYBACK_StateTypeDef AudioState;
     77          extern __IO uint8_t buffer_switch;
     78          extern __IO uint8_t volume;
     79          extern SPI_HandleTypeDef hspi4,hspi1;
     80          extern __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     81          extern __IO uint16_t  WaveRec_idxSens3,WaveRec_idxSens4;
     82          extern __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     83          extern __IO uint16_t  I2S2_idxTmp;
     84          extern SPI_HandleTypeDef     hspi4;
     85          extern DMA_HandleTypeDef     DmaHandle;
     86          
     87          #ifndef CS43L22_PLAY
     88          extern __IO uint8_t flgDlyUpd; 
     89          extern __IO uint32_t XferCplt;
     90          extern __IO uint16_t  idxSPI5DataBuf3;
     91          #endif
     92          
     93          //int16_t TestSDO12[4*AUDIO_OUT_BUFFER_SIZE];
     94          //int16_t TestSDO34[4*AUDIO_OUT_BUFFER_SIZE];
     95          //int32_t TestSDO56[4*AUDIO_OUT_BUFFER_SIZE];
     96          #pragma data_alignment = 64 
     97          uint16_t TestSDO7[8*AUDIO_OUT_BUFFER_SIZE];
     98          #pragma data_alignment = 64
     99          uint16_t TestSDO8[8*AUDIO_OUT_BUFFER_SIZE];
    100          
    101          //uint16_t TestSDO7_1[4*AUDIO_OUT_BUFFER_SIZE];
    102          //uint16_t TestSDO8_1[4*AUDIO_OUT_BUFFER_SIZE];
    103          __IO uint16_t  WaveRec_idxTest;
    104          __IO uint8_t flgRacing;
    105          __IO GPIO_PinState stMIC56=GPIO_PIN_SET;
    106          __IO GPIO_PinState stMIC56Old=GPIO_PIN_SET;
    107          __IO uint8_t Wave_cntClk=3;
    108          __IO uint8_t stLR;
    109          __IO uint8_t stLROld;
    110          
    111          
    112          SPI_HandleTypeDef hspi1,hspi2;
    113          SPI_HandleTypeDef spi1_ins,spi2_ins;
    114          I2S_HandleTypeDef hi2s1;
    115          I2S_HandleTypeDef hi2s2;
    116          SPI_HandleTypeDef hspi5,hspi6;
   \                     hspi5:
   \   00000000                      DS8 100
   \                     hspi6:
   \   00000064                      DS8 100
    117          DMA_HandleTypeDef hdma_spi2_tx;
    118          DMA_HandleTypeDef hdma_spi3_tx;
    119          DMA_HandleTypeDef     hdma_spi5_rx,hdma_spi6_rx;
    120          
    121          #if USB_STREAMING
    122          __IO uint16_t idxFrmPDMMic8;
    123          #endif
    124          
    125          uint16_t *bufPCMSens7;
    126          uint16_t *bufPCMSens8;
    127          __IO uint16_t cntPos;
    128          __IO uint16_t cntPos7;
    129          __IO static uint16_t iBuff;
    130          __IO static uint32_t uwVolume = 70;
    131          __IO PDMFilter_InitStruct Filter[2];
   \                     Filter:
   \   000000C8                      DS8 104
    132          __IO uint16_t  pDataMic8[64];//INTERNAL_BUFF_SIZE
    133          __IO uint16_t  pDataMic7[64];//INTERNAL_BUFF_SIZE
    134          __IO int16_t   pPDM2PCM[16];
    135          __IO uint16_t cntStrt;
    136          __IO uint16_t WaveRecord_flgIni;
    137          __IO uint8_t WaveRecord_flgInt;
    138          __IO GPIO_PinState Main_stLR;
    139          __IO GPIO_PinState Main_stLROld;
    140          
    141          uint16_t vRawSens1,vRawSens2,vRawSens4,vRawSens3,vRawSens5,vRawSens6;  
    142          __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
    143          __IO uint16_t iSDO12,iSDO34,iSDO56;
    144          __IO uint8_t swtSDO7,swtSDO8;
   \                     swtSDO7:
   \   00000130                      DS8 1
   \                     swtSDO8:
   \   00000131                      DS8 1
    145          __IO uint8_t WaveRecord_flgSDO7Finish, WaveRecord_flgSDO8Finish;
   \                     WaveRecord_flgSDO7Finish:
   \   00000132                      DS8 1
   \                     WaveRecord_flgSDO8Finish:
   \   00000133                      DS8 1
   \                     idxMic8:
   \   00000134                      DS8 2
   \                     idxMic7:
   \   00000136                      DS8 2
   \                     cntPos:
   \   00000138                      DS8 2
   \                     cntPos7:
   \   0000013A                      DS8 2
   \                     Frame7Old:
   \   0000013C                      DS8 12
   \                     Frame8Old:
   \   00000148                      DS8 12
   \                     bufPCMSens7:
   \   00000154                      DS8 4
   \                     bufPCMSens8:
   \   00000158                      DS8 4
   \                     pDataMic8:
   \   0000015C                      DS8 128
   \                     pDataMic7:
   \   000001DC                      DS8 128

   \                                 In section .bss, align 4
   \                     pHeaderBuff:
   \   00000000                      DS8 44

   \                                 In section .bss, align 2
   \                     cntTransFinish:
   \   00000000                      DS8 2

   \                                 In section .bss, align 64
   \                     TestSDO7:
   \   00000000                      DS8 16384

   \                                 In section .bss, align 64
   \                     TestSDO8:
   \   00000000                      DS8 16384

   \                                 In section .bss, align 4
   \                     hspi1:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hspi2:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi1_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     spi2_ins:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     hdma_spi2_tx:
   \   00000000                      DS8 88

   \                                 In section .bss, align 4
   \                     hdma_spi3_tx:
   \   00000000                      DS8 88

   \                                 In section .bss, align 4
   \                     hdma_spi5_rx:
   \   00000000                      DS8 88
   \                     hdma_spi6_rx:
   \   00000058                      DS8 88

   \                                 In section .bss, align 2
   \                     idxFrmPDMMic8:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     pPDM2PCM:
   \   00000000                      DS8 32

   \                                 In section .bss, align 2
   \                     cntStrt:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     WaveRecord_flgIni:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     SPI1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S1_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     I2S2_stNipple:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO34:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     iSDO56:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
    146          __IO uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
   \                     I2S1_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     I2S2_stPosShft:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     hi2s1:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000020   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000030   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     hi2s2:
   \   00000040   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000050   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000060   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000070   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     flgRacing:
   \   00000080   0x00               DC8 0
   \                     Wave_cntClk:
   \   00000081   0x03               DC8 3
   \                     stLR:
   \   00000082   0x00               DC8 0
   \                     stLROld:
   \   00000083   0x00               DC8 0
   \                     WaveRecord_flgInt:
   \   00000084   0x00               DC8 0
   \                     Main_stLR:
   \   00000085   0x00               DC8 0
   \                     Main_stLROld:
   \   00000086   0x00               DC8 0
   \                     SPI4_stPosShft:
   \   00000087   0x00               DC8 0
    147          __IO uint8_t I2S2_stLR, I2S2_stLROld;
   \                     I2S2_stLR:
   \   00000088   0x00               DC8 0
   \                     I2S2_stLROld:
   \   00000089   0x00               DC8 0
   \                     WaveRec_idxTest:
   \   0000008A   0x00 0x00          DC8 0, 0
   \                     vRawSens1:
   \   0000008C   0x00 0x00          DC8 0, 0
   \                     vRawSens2:
   \   0000008E   0x00 0x00          DC8 0, 0
   \                     vRawSens4:
   \   00000090   0x00 0x00          DC8 0, 0
   \                     vRawSens3:
   \   00000092   0x00 0x00          DC8 0, 0
   \                     vRawSens5:
   \   00000094   0x00 0x00          DC8 0, 0
   \                     vRawSens6:
   \   00000096   0x00 0x00          DC8 0, 0
   \                     SPI4_stNipple:
   \   00000098   0x00 0x00          DC8 0, 0

   \                                 In section .data, align 1
   \                     stMIC56:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
   \                     stMIC56Old:
   \   00000000   0x01               DC8 1
    148          
    149          /* Private function prototypes -----------------------------------------------*/
    150          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
    151          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
    152          static void I2S1_Init(void);
    153          static void I2S2_Init(void);
    154          
    155          #if EXT_RAM
    156          #pragma location=SDRAM_BANK_ADDR
    157          #endif
    158          #pragma data_alignment = 64

   \                                 In section .bss, align 64
    159          Mic_Array_Data Buffer1;
   \                     Buffer1:
   \   00000000                      DS8 16384
    160          
    161          #if EXT_RAM
    162          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE)
    163          #endif
    164          #pragma data_alignment = 64

   \                                 In section .bss, align 64
    165          Mic_Array_Data Buffer2 ;
   \                     Buffer2:
   \   00000000                      DS8 16384
    166          
    167          #if EXT_RAM
    168          #pragma location= (SDRAM_BANK_ADDR+ BUFFER_SIZE_BYTE + BUFFER_SIZE_BYTE)
    169          #endif
    170          #pragma data_alignment = 64

   \                                 In section .bss, align 64
    171          Mic_Array_Data Buffer3;
   \                     Buffer3:
   \   00000000                      DS8 16384
    172          

   \                                 In section .text, align 2, keep-with-next
    173          void SPI1_Ini(void)
    174          {
   \                     SPI1_Ini: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    175            GPIO_InitTypeDef GPIO_InitStructure;
    176          
    177           
    178             	 
    179            /* Enable SCK, MOSI and MISO GPIO clocks */
    180            __HAL_RCC_SPI1_CLK_ENABLE();
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023830
    181            __HAL_RCC_GPIOA_CLK_ENABLE();
    182          
    183            
    184            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
    185            GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
    186            GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
    187          
    188            /* SPI SCK pin configuration */
    189            GPIO_InitStructure.Alternate = SPI1_SCK_AF;
    190            GPIO_InitStructure.Pin = SPI1_SCK_PIN;
    191            HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&GPIO_InitStructure);
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable16_2  ;; 0x40020000
   \   00000010   0x6941             LDR      R1,[R0, #+20]
   \   00000012   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000016   0x6141             STR      R1,[R0, #+20]
   \   00000018   0x6941             LDR      R1,[R0, #+20]
   \   0000001A   0xF401 0x5180      AND      R1,R1,#0x1000
   \   0000001E   0x9100             STR      R1,[SP, #+0]
   \   00000020   0x9900             LDR      R1,[SP, #+0]
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x9100             STR      R1,[SP, #+0]
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000002C   0x6001             STR      R1,[R0, #+0]
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xA901             ADD      R1,SP,#+4
   \   00000032   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0x9002             STR      R0,[SP, #+8]
   \   0000003E   0x9003             STR      R0,[SP, #+12]
   \   00000040   0x2003             MOVS     R0,#+3
   \   00000042   0x9004             STR      R0,[SP, #+16]
   \   00000044   0x2005             MOVS     R0,#+5
   \   00000046   0x9005             STR      R0,[SP, #+20]
   \   00000048   0x2020             MOVS     R0,#+32
   \   0000004A   0x9001             STR      R0,[SP, #+4]
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       HAL_GPIO_Init
    192          
    193            /* SPI  MOSI pin configuration */
    194            GPIO_InitStructure.Alternate = SPI1_MOSI_SOURCE;
   \   00000052   0x2001             MOVS     R0,#+1
    195            GPIO_InitStructure.Pin =  SPI1_MOSI_PIN;
    196            HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT, &GPIO_InitStructure);
   \   00000054   0xA901             ADD      R1,SP,#+4
   \   00000056   0x9005             STR      R0,[SP, #+20]
   \   00000058   0x2080             MOVS     R0,#+128
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x4620             MOV      R0,R4
   \   0000005E   0x.... 0x....      BL       HAL_GPIO_Init
    197          
    198            /* SPI MISO pin configuration */
    199            GPIO_InitStructure.Alternate = SPI1_MISO_SOURCE;
   \   00000062   0x2001             MOVS     R0,#+1
    200            GPIO_InitStructure.Pin = SPI1_MISO_PIN;
    201            HAL_GPIO_Init(SPI1_MISO_GPIO_PORT, &GPIO_InitStructure);
   \   00000064   0xA901             ADD      R1,SP,#+4
   \   00000066   0x9005             STR      R0,[SP, #+20]
   \   00000068   0x2040             MOVS     R0,#+64
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       HAL_GPIO_Init
    202          
    203            /* SPI configuration -------------------------------------------------------*/
    204            //SPI_I2S_DeInit(SPI1);
    205            
    206            spi1_ins.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable16_3
   \   00000076   0xF44F 0x6180      MOV      R1,#+1024
   \   0000007A   0x6081             STR      R1,[R0, #+8]
    207            spi1_ins.Init.DataSize = SPI_DATASIZE_16BIT;
   \   0000007C   0xF44F 0x6170      MOV      R1,#+3840
   \   00000080   0x60C1             STR      R1,[R0, #+12]
    208            spi1_ins.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x6101             STR      R1,[R0, #+16]
    209            spi1_ins.Init.CLKPhase = SPI_PHASE_1EDGE;
    210            spi1_ins.Init.NSS = SPI_NSS_SOFT;
    211            spi1_ins.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
    212            spi1_ins.Init.FirstBit = SPI_FIRSTBIT_MSB;
    213            spi1_ins.Init.CRCPolynomial = 7;
    214            spi1_ins.Init.Mode = SPI_MODE_SLAVE;
   \   00000086   0x.... 0x....      LDR.W    R4,??DataTable20  ;; 0x40021000
   \   0000008A   0x6141             STR      R1,[R0, #+20]
   \   0000008C   0xF44F 0x7100      MOV      R1,#+512
   \   00000090   0x6181             STR      R1,[R0, #+24]
   \   00000092   0x2128             MOVS     R1,#+40
   \   00000094   0x61C1             STR      R1,[R0, #+28]
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x6201             STR      R1,[R0, #+32]
   \   0000009A   0x2107             MOVS     R1,#+7
   \   0000009C   0x62C1             STR      R1,[R0, #+44]
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0x6041             STR      R1,[R0, #+4]
    215            if(HAL_SPI_Init(&spi1_ins) != HAL_OK)
   \   000000A2   0x.... 0x....      BL       HAL_SPI_Init
    216            {
    217              /* Initialization Error */
    218              //Error_Handler();
    219            }
    220            
    221           
    222            GPIO_InitStructure.Pin = GPIO_PIN_3;
   \   000000A6   0x2008             MOVS     R0,#+8
    223            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
    224            GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
    225            GPIO_InitStructure.Pull = GPIO_PULLUP;
    226            //GPIO_InitStructure.Alternate 
    227            HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   000000A8   0xA901             ADD      R1,SP,#+4
   \   000000AA   0x9001             STR      R0,[SP, #+4]
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x9002             STR      R0,[SP, #+8]
   \   000000B0   0x2002             MOVS     R0,#+2
   \   000000B2   0x9004             STR      R0,[SP, #+16]
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0x9003             STR      R0,[SP, #+12]
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x.... 0x....      BL       HAL_GPIO_Init
    228          
    229            /* Deselect : Chip Select high */
    230            HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
   \   000000BE   0x2201             MOVS     R2,#+1
   \   000000C0   0x2108             MOVS     R1,#+8
   \   000000C2   0x4620             MOV      R0,R4
   \   000000C4   0x.... 0x....      BL       HAL_GPIO_WritePin
    231             /* sop1hc */
    232            /* Configure the SPI interrupt priority */
    233            HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   000000C8   0x2200             MOVS     R2,#+0
   \   000000CA   0x2100             MOVS     R1,#+0
   \   000000CC   0x2023             MOVS     R0,#+35
   \   000000CE   0x.... 0x....      BL       HAL_NVIC_SetPriority
    234          
    235            HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   000000D2   0x2023             MOVS     R0,#+35
   \   000000D4   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    236            //SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_RXNE, ENABLE);
    237            //__HAL_SPI_ENABLE_IT(SPI1,SPI_IT_TXE);
    238          
    239            /* Enable SPI1  */
    240            //__HAL_SPI_ENABLE(SPI1);
    241          
    242          }
   \   000000D8   0xB006             ADD      SP,SP,#+24
   \   000000DA   0xBD10             POP      {R4,PC}          ;; return
    243          

   \                                 In section .text, align 2, keep-with-next
    244          void mySPI_SendData(uint8_t adress, uint8_t data)
    245          {
   \                     mySPI_SendData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable16_3
   \   00000004   0x6812             LDR      R2,[R2, #+0]
    246           
    247          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_0: (+1)
   \   00000006   0x6893             LDR      R3,[R2, #+8]
   \   00000008   0x079B             LSLS     R3,R3,#+30
   \   0000000A   0xD5FC             BPL.N    ??mySPI_SendData_0
    248          SPI_I2S_SendData(SPI1, adress);
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable17  ;; 0x4001300c
   \   00000010   0x6018             STR      R0,[R3, #+0]
    249          
    250          while(!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_1: (+1)
   \   00000012   0x6890             LDR      R0,[R2, #+8]
   \   00000014   0x07C0             LSLS     R0,R0,#+31
   \   00000016   0xD5FC             BPL.N    ??mySPI_SendData_1
    251          SPI_I2S_ReceiveData(SPI1);
   \   00000018   0x6818             LDR      R0,[R3, #+0]
    252          
    253          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_TXE)); 
   \                     ??mySPI_SendData_2: (+1)
   \   0000001A   0x6890             LDR      R0,[R2, #+8]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD4FC             BMI.N    ??mySPI_SendData_2
    254          SPI_I2S_SendData(SPI1, data);
   \   00000020   0x6019             STR      R1,[R3, #+0]
    255          
    256          while(!!__HAL_SPI_GET_FLAG(&spi1_ins, SPI_FLAG_RXNE));
   \                     ??mySPI_SendData_3: (+1)
   \   00000022   0x6890             LDR      R0,[R2, #+8]
   \   00000024   0x07C0             LSLS     R0,R0,#+31
   \   00000026   0xD4FC             BMI.N    ??mySPI_SendData_3
    257          SPI_I2S_ReceiveData(SPI1);
   \   00000028   0x6818             LDR      R0,[R3, #+0]
    258           
    259          }
   \   0000002A   0x4770             BX       LR               ;; return
    260          
    261          /**
    262            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    263            * @param  None
    264            * @retval None
    265          */
    266          

   \                                 In section .text, align 2, keep-with-next
    267          void SPI1_IRQHandler(void)
    268          {  
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    269                int16_t tmpTest;
    270          	  
    271          	
    272          	  /* SPI in mode Receiver ----------------------------------------------------*/
    273          	  if(
    274          	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_OVR) == RESET)&&
    275          	     (__HAL_SPI_GET_FLAG(&hi2s1, SPI_FLAG_RXNE) != RESET)&&
    276          		 (__HAL_I2S_GET_IT_SOURCE(&hi2s1, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_1
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xF100 0x80A2      BMI.W    ??SPI1_IRQHandler_0
   \   00000010   0x6881             LDR      R1,[R0, #+8]
   \   00000012   0x07C9             LSLS     R1,R1,#+31
   \   00000014   0xF140 0x809E      BPL.W    ??SPI1_IRQHandler_0
   \   00000018   0x6840             LDR      R0,[R0, #+4]
   \   0000001A   0x0640             LSLS     R0,R0,#+25
   \   0000001C   0xF140 0x809A      BPL.W    ??SPI1_IRQHandler_0
    277          	  {
    278          	
    279          
    280          	   tmpTest =  (int16_t)SPI_I2S_ReceiveData(SPI1);
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable17  ;; 0x4001300c
   \   00000024   0x6800             LDR      R0,[R0, #+0]
    281          
    282                  
    283                  Wave_cntClk++;
   \   00000026   0xF894 0x1081      LDRB     R1,[R4, #+129]
   \   0000002A   0x1C49             ADDS     R1,R1,#+1
   \   0000002C   0xF884 0x1081      STRB     R1,[R4, #+129]
    284                  if (Wave_cntClk==4)
   \   00000030   0xF894 0x1081      LDRB     R1,[R4, #+129]
   \   00000034   0xB200             SXTH     R0,R0
   \   00000036   0x2904             CMP      R1,#+4
   \   00000038   0xD104             BNE.N    ??SPI1_IRQHandler_1
    285                  {
    286                      Wave_cntClk = 0;
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xF884 0x1081      STRB     R1,[R4, #+129]
    287                      stLR = GPIO_PIN_SET;
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0xE004             B.N      ??SPI1_IRQHandler_2
    288                      I2S2_stLR = GPIO_PIN_SET; 
    289                      Main_stLR = GPIO_PIN_SET;
    290                  }
    291                  else if (Wave_cntClk==1)
   \                     ??SPI1_IRQHandler_1: (+1)
   \   00000044   0xF894 0x1081      LDRB     R1,[R4, #+129]
   \   00000048   0x2901             CMP      R1,#+1
   \   0000004A   0xBF18             IT       NE 
   \   0000004C   0x2100             MOVNE    R1,#+0
    292                  {
    293                      stLR = GPIO_PIN_SET;
    294                      I2S2_stLR = GPIO_PIN_SET;
    295                      Main_stLR = GPIO_PIN_SET;
    296                  }
    297                  else
    298                  {
    299                      stLR = GPIO_PIN_RESET;
   \                     ??SPI1_IRQHandler_2: (+1)
   \   0000004E   0xF884 0x1082      STRB     R1,[R4, #+130]
    300                      I2S2_stLR = GPIO_PIN_RESET;
   \   00000052   0xF884 0x1088      STRB     R1,[R4, #+136]
    301                      Main_stLR = GPIO_PIN_RESET;
   \   00000056   0xF884 0x1085      STRB     R1,[R4, #+133]
    302                  }
    303                 
    304          
    305          	   /* Left-Right Mic data */
    306          	   //stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    307          	
    308          		if (stLR==GPIO_PIN_SET)
   \   0000005A   0xF894 0x1082      LDRB     R1,[R4, #+130]
   \   0000005E   0x2901             CMP      R1,#+1
   \   00000060   0xF894 0x1083      LDRB     R1,[R4, #+131]
   \   00000064   0xD135             BNE.N    ??SPI1_IRQHandler_3
    309          		{
    310          		       if(stLROld==GPIO_PIN_SET) 
   \   00000066   0x2901             CMP      R1,#+1
   \   00000068   0xD170             BNE.N    ??SPI1_IRQHandler_4
    311          		       {
    312          				   vRawSens1 = (tmpTest);
   \   0000006A   0xF8A4 0x008C      STRH     R0,[R4, #+140]
    313          			       WaveRec_idxTest++;
   \   0000006E   0xF8B4 0x008A      LDRH     R0,[R4, #+138]
   \   00000072   0x1C40             ADDS     R0,R0,#+1
   \   00000074   0xF8A4 0x008A      STRH     R0,[R4, #+138]
    314          				   /* Recording Audio Data */						 
    315          					if (WaveRec_idxSens1<AUDIO_OUT_BUFFER_SIZE) 
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable17_2
   \   0000007C   0x8801             LDRH     R1,[R0, #+0]
   \   0000007E   0xF5B1 0x6F80      CMP      R1,#+1024
   \   00000082   0xDA18             BGE.N    ??SPI1_IRQHandler_5
    316          					{
    317          					   switch (buffer_switch)
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable17_3
   \   00000088   0x7809             LDRB     R1,[R1, #+0]
   \   0000008A   0xB119             CBZ.N    R1,??SPI1_IRQHandler_6
   \   0000008C   0x2902             CMP      R1,#+2
   \   0000008E   0xD00B             BEQ.N    ??SPI1_IRQHandler_7
   \   00000090   0xD305             BCC.N    ??SPI1_IRQHandler_8
   \   00000092   0xE010             B.N      ??SPI1_IRQHandler_5
    318          					   {
    319                                        case BUF1_PLAY:
    320                                            Buffer2.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;								
   \                     ??SPI1_IRQHandler_6: (+1)
   \   00000094   0xF9B4 0x108C      LDRSH    R1,[R4, #+140]
   \   00000098   0x.... 0x....      LDR.W    R2,??DataTable17_4
   \   0000009C   0xE008             B.N      ??SPI1_IRQHandler_9
    321                                            break;
    322                                        case BUF2_PLAY:
    323                                            Buffer3.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;
   \                     ??SPI1_IRQHandler_8: (+1)
   \   0000009E   0xF9B4 0x108C      LDRSH    R1,[R4, #+140]
   \   000000A2   0x.... 0x....      LDR.W    R2,??DataTable17_5
   \   000000A6   0xE003             B.N      ??SPI1_IRQHandler_9
    324                                            break;
    325                                        case BUF3_PLAY:
    326                                            Buffer1.bufMIC1[WaveRec_idxSens1] = vRawSens1;//vRawSens1;									
   \                     ??SPI1_IRQHandler_7: (+1)
   \   000000A8   0xF9B4 0x108C      LDRSH    R1,[R4, #+140]
   \   000000AC   0x.... 0x....      LDR.W    R2,??DataTable22
   \                     ??SPI1_IRQHandler_9: (+1)
   \   000000B0   0x8803             LDRH     R3,[R0, #+0]
   \   000000B2   0xF822 0x1013      STRH     R1,[R2, R3, LSL #+1]
    327                                            break;
    328                                        default:
    329                                            break; 
    330          					   
    331          					   }
    332          					  
    333          					}
    334          
    335          					WaveRec_idxSens1++;
   \                     ??SPI1_IRQHandler_5: (+1)
   \   000000B6   0x8801             LDRH     R1,[R0, #+0]
   \   000000B8   0x1C49             ADDS     R1,R1,#+1
   \   000000BA   0x8001             STRH     R1,[R0, #+0]
    336                              if ((WaveRec_idxSens1 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x01;
   \   000000BC   0x8800             LDRH     R0,[R0, #+0]
   \   000000BE   0x210F             MOVS     R1,#+15
   \   000000C0   0x4208             TST      R0,R1
   \   000000C2   0xD13D             BNE.N    ??SPI1_IRQHandler_10
   \   000000C4   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000000C8   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000000CC   0xF884 0x0080      STRB     R0,[R4, #+128]
    337          			        if (flgRacing==0x3F)  SubFrameFinished();                    
   \   000000D0   0xE036             B.N      ??SPI1_IRQHandler_10
    338          		       	}
    339          		}
    340          		else
    341          		{		
    342                    if ((stLROld==GPIO_PIN_RESET))  
   \                     ??SPI1_IRQHandler_3: (+1)
   \   000000D2   0x2900             CMP      R1,#+0
   \   000000D4   0xD13A             BNE.N    ??SPI1_IRQHandler_4
    343                    {
    344          		      vRawSens2 = (tmpTest);
   \   000000D6   0xF8A4 0x008E      STRH     R0,[R4, #+142]
    345          		      WaveRec_idxTest++;
   \   000000DA   0xF8B4 0x008A      LDRH     R0,[R4, #+138]
   \   000000DE   0x1C40             ADDS     R0,R0,#+1
   \   000000E0   0xF8A4 0x008A      STRH     R0,[R4, #+138]
    346          			
    347          			  if (WaveRec_idxSens2<AUDIO_OUT_BUFFER_SIZE)
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable17_6
   \   000000E8   0x8801             LDRH     R1,[R0, #+0]
   \   000000EA   0xF5B1 0x6F80      CMP      R1,#+1024
   \   000000EE   0xDA1A             BGE.N    ??SPI1_IRQHandler_11
    348          			  {
    349          					/* Recording Audio Data */						 
    350          					switch (buffer_switch)
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable17_3
   \   000000F4   0x7809             LDRB     R1,[R1, #+0]
   \   000000F6   0xB119             CBZ.N    R1,??SPI1_IRQHandler_12
   \   000000F8   0x2902             CMP      R1,#+2
   \   000000FA   0xD00B             BEQ.N    ??SPI1_IRQHandler_13
   \   000000FC   0xD305             BCC.N    ??SPI1_IRQHandler_14
   \   000000FE   0xE012             B.N      ??SPI1_IRQHandler_11
    351          					{
    352          						case BUF1_PLAY:
    353          							Buffer2.bufMIC2[WaveRec_idxSens2] = vRawSens2;								
   \                     ??SPI1_IRQHandler_12: (+1)
   \   00000100   0xF9B4 0x108E      LDRSH    R1,[R4, #+142]
   \   00000104   0x.... 0x....      LDR.W    R2,??DataTable17_4
   \   00000108   0xE008             B.N      ??SPI1_IRQHandler_15
    354          							break;
    355          						case BUF2_PLAY:
    356          							Buffer3.bufMIC2[WaveRec_idxSens2] = vRawSens2;
   \                     ??SPI1_IRQHandler_14: (+1)
   \   0000010A   0xF9B4 0x108E      LDRSH    R1,[R4, #+142]
   \   0000010E   0x.... 0x....      LDR.W    R2,??DataTable17_5
   \   00000112   0xE003             B.N      ??SPI1_IRQHandler_15
    357          							break;
    358          						case BUF3_PLAY:
    359          							Buffer1.bufMIC2[WaveRec_idxSens2] = vRawSens2;									
   \                     ??SPI1_IRQHandler_13: (+1)
   \   00000114   0xF9B4 0x108E      LDRSH    R1,[R4, #+142]
   \   00000118   0x.... 0x....      LDR.W    R2,??DataTable22
   \                     ??SPI1_IRQHandler_15: (+1)
   \   0000011C   0x8803             LDRH     R3,[R0, #+0]
   \   0000011E   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000122   0xF8A2 0x1800      STRH     R1,[R2, #+2048]
    360          							break;
    361          						default:
    362          							break; 
    363          
    364          				    }
    365          					
    366                        }
    367          			 	
    368            	          WaveRec_idxSens2++;
   \                     ??SPI1_IRQHandler_11: (+1)
   \   00000126   0x8801             LDRH     R1,[R0, #+0]
   \   00000128   0x1C49             ADDS     R1,R1,#+1
   \   0000012A   0x8001             STRH     R1,[R0, #+0]
    369          		      if ((WaveRec_idxSens2 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x02;
   \   0000012C   0x8800             LDRH     R0,[R0, #+0]
   \   0000012E   0x210F             MOVS     R1,#+15
   \   00000130   0x4208             TST      R0,R1
   \   00000132   0xD105             BNE.N    ??SPI1_IRQHandler_10
   \   00000134   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   00000138   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000013C   0xF884 0x0080      STRB     R0,[R4, #+128]
    370          		      if (flgRacing==0x3F)  SubFrameFinished();			      					
   \                     ??SPI1_IRQHandler_10: (+1)
   \   00000140   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   00000144   0x283F             CMP      R0,#+63
   \   00000146   0xBF08             IT       EQ 
   \   00000148   0x.... 0x....      BLEQ     SubFrameFinished
    371          		    }
    372          		
    373          	    } 	
    374          
    375                  /* Update Old value */    
    376                  stLROld=stLR;
   \                     ??SPI1_IRQHandler_4: (+1)
   \   0000014C   0xF894 0x0082      LDRB     R0,[R4, #+130]
   \   00000150   0xF884 0x0083      STRB     R0,[R4, #+131]
    377          
    378          		
    379              }
    380          	   
    381          
    382          				 
    383          } 	 
   \                     ??SPI1_IRQHandler_0: (+1)
   \   00000154   0xBD10             POP      {R4,PC}          ;; return
    384          
    385          
    386          
    387          
    388          /**
    389            * @brief  This function handles AUDIO_REC_SPI global interrupt request.
    390            * @param  None
    391            * @retval None
    392          */
    393          

   \                                 In section .text, align 2, keep-with-next
    394          void SPI2_IRQHandler(void)
    395          {      
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    396              int16_t app;
    397              
    398          
    399            /* Check if data are available in SPI Data register */
    400             if (
    401          	   (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_OVR) == RESET)&&
    402             	    (__HAL_SPI_GET_FLAG(&hi2s2, SPI_FLAG_RXNE) != RESET)&&
    403             	    (__HAL_I2S_GET_IT_SOURCE(&hi2s2, SPI_IT_RXNE)!=RESET)
    404             	  )
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_1
   \   00000006   0x6C20             LDR      R0,[R4, #+64]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xF100 0x8081      BMI.W    ??SPI2_IRQHandler_0
   \   00000010   0x6881             LDR      R1,[R0, #+8]
   \   00000012   0x07C9             LSLS     R1,R1,#+31
   \   00000014   0xD57D             BPL.N    ??SPI2_IRQHandler_0
   \   00000016   0x6840             LDR      R0,[R0, #+4]
   \   00000018   0x0640             LSLS     R0,R0,#+25
   \   0000001A   0xD57A             BPL.N    ??SPI2_IRQHandler_0
    405             {
    406              
    407               app = (int16_t)SPI_I2S_ReceiveData(SPI2);   
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable21  ;; 0x4000380c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
    408               //SPI_I2S_SendData(SPI2, 3333);
    409          
    410          	 //I2S2_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    411               
    412          	 if (I2S2_stLR==GPIO_PIN_RESET)
   \   00000022   0xF894 0x1088      LDRB     R1,[R4, #+136]
   \   00000026   0x2900             CMP      R1,#+0
   \   00000028   0xF894 0x1089      LDRB     R1,[R4, #+137]
   \   0000002C   0xB200             SXTH     R0,R0
   \   0000002E   0xD133             BNE.N    ??SPI2_IRQHandler_1
    413          	 {		
    414          		if ((I2S2_stLROld==GPIO_PIN_RESET)) 
   \   00000030   0x2900             CMP      R1,#+0
   \   00000032   0xD16A             BNE.N    ??SPI2_IRQHandler_2
    415          		{
    416          			vRawSens4 = app;
   \   00000034   0xF8A4 0x0090      STRH     R0,[R4, #+144]
    417          	
    418          			if (WaveRec_idxSens4< AUDIO_OUT_BUFFER_SIZE)
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   0000003C   0x8801             LDRH     R1,[R0, #+0]
   \   0000003E   0xF5B1 0x6F80      CMP      R1,#+1024
   \   00000042   0xDA1B             BGE.N    ??SPI2_IRQHandler_3
    419          			{
    420          				switch (buffer_switch)
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable17_3
   \   00000048   0x7809             LDRB     R1,[R1, #+0]
   \   0000004A   0xB119             CBZ.N    R1,??SPI2_IRQHandler_4
   \   0000004C   0x2902             CMP      R1,#+2
   \   0000004E   0xD00B             BEQ.N    ??SPI2_IRQHandler_5
   \   00000050   0xD305             BCC.N    ??SPI2_IRQHandler_6
   \   00000052   0xE013             B.N      ??SPI2_IRQHandler_3
    421          				{
    422          					case BUF1_PLAY:
    423          						Buffer2.bufMIC4[WaveRec_idxSens4] = vRawSens4;								
   \                     ??SPI2_IRQHandler_4: (+1)
   \   00000054   0xF9B4 0x1090      LDRSH    R1,[R4, #+144]
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable17_4
   \   0000005C   0xE008             B.N      ??SPI2_IRQHandler_7
    424          						break;
    425          					case BUF2_PLAY:
    426          						Buffer3.bufMIC4[WaveRec_idxSens4] = vRawSens4;
   \                     ??SPI2_IRQHandler_6: (+1)
   \   0000005E   0xF9B4 0x1090      LDRSH    R1,[R4, #+144]
   \   00000062   0x.... 0x....      LDR.W    R2,??DataTable17_5
   \   00000066   0xE003             B.N      ??SPI2_IRQHandler_7
    427          						break;
    428          					case BUF3_PLAY:
    429          						Buffer1.bufMIC4[WaveRec_idxSens4] = vRawSens4;									
   \                     ??SPI2_IRQHandler_5: (+1)
   \   00000068   0xF9B4 0x1090      LDRSH    R1,[R4, #+144]
   \   0000006C   0x.... 0x....      LDR.W    R2,??DataTable22
   \                     ??SPI2_IRQHandler_7: (+1)
   \   00000070   0x8803             LDRH     R3,[R0, #+0]
   \   00000072   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   00000076   0xF502 0x52C0      ADD      R2,R2,#+6144
   \   0000007A   0x8011             STRH     R1,[R2, #+0]
    430          						break;
    431          					default:
    432          						break; 
    433          				}
    434          				
    435          			}									
    436          
    437          		    WaveRec_idxSens4++;
   \                     ??SPI2_IRQHandler_3: (+1)
   \   0000007C   0x8801             LDRH     R1,[R0, #+0]
   \   0000007E   0x1C49             ADDS     R1,R1,#+1
   \   00000080   0x8001             STRH     R1,[R0, #+0]
    438          
    439          			if ((WaveRec_idxSens4 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x08;
   \   00000082   0x8800             LDRH     R0,[R0, #+0]
   \   00000084   0x210F             MOVS     R1,#+15
   \   00000086   0x4208             TST      R0,R1
   \   00000088   0xD139             BNE.N    ??SPI2_IRQHandler_8
   \   0000008A   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   0000008E   0xF040 0x0008      ORR      R0,R0,#0x8
   \   00000092   0xF884 0x0080      STRB     R0,[R4, #+128]
    440          
    441          			if (flgRacing==0x3F)  SubFrameFinished();
   \   00000096   0xE032             B.N      ??SPI2_IRQHandler_8
    442          			
    443          		}
    444          		
    445          	 }
    446          	 else
    447          	 {
    448                      if ((I2S2_stLROld==GPIO_PIN_SET))   
   \                     ??SPI2_IRQHandler_1: (+1)
   \   00000098   0x2901             CMP      R1,#+1
   \   0000009A   0xD136             BNE.N    ??SPI2_IRQHandler_2
    449                      {
    450                          vRawSens3 =app;
   \   0000009C   0xF8A4 0x0092      STRH     R0,[R4, #+146]
    451                          if ((WaveRec_idxSens3<AUDIO_OUT_BUFFER_SIZE))
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable22_1
   \   000000A4   0x8801             LDRH     R1,[R0, #+0]
   \   000000A6   0xF5B1 0x6F80      CMP      R1,#+1024
   \   000000AA   0xDA1B             BGE.N    ??SPI2_IRQHandler_9
    452                          {
    453          	                switch (buffer_switch)
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable17_3
   \   000000B0   0x7809             LDRB     R1,[R1, #+0]
   \   000000B2   0xB119             CBZ.N    R1,??SPI2_IRQHandler_10
   \   000000B4   0x2902             CMP      R1,#+2
   \   000000B6   0xD00B             BEQ.N    ??SPI2_IRQHandler_11
   \   000000B8   0xD305             BCC.N    ??SPI2_IRQHandler_12
   \   000000BA   0xE013             B.N      ??SPI2_IRQHandler_9
    454          	                {	 
    455                                case BUF1_PLAY:
    456                                    Buffer2.bufMIC3[WaveRec_idxSens3] = vRawSens3;								
   \                     ??SPI2_IRQHandler_10: (+1)
   \   000000BC   0xF9B4 0x1092      LDRSH    R1,[R4, #+146]
   \   000000C0   0x.... 0x....      LDR.W    R2,??DataTable17_4
   \   000000C4   0xE008             B.N      ??SPI2_IRQHandler_13
    457                                    break;
    458                                case BUF2_PLAY:
    459                                    Buffer3.bufMIC3[WaveRec_idxSens3] = vRawSens3;
   \                     ??SPI2_IRQHandler_12: (+1)
   \   000000C6   0xF9B4 0x1092      LDRSH    R1,[R4, #+146]
   \   000000CA   0x.... 0x....      LDR.W    R2,??DataTable17_5
   \   000000CE   0xE003             B.N      ??SPI2_IRQHandler_13
    460                                    break;
    461                                case BUF3_PLAY:
    462                                    Buffer1.bufMIC3[WaveRec_idxSens3] = vRawSens3;									
   \                     ??SPI2_IRQHandler_11: (+1)
   \   000000D0   0xF9B4 0x1092      LDRSH    R1,[R4, #+146]
   \   000000D4   0x.... 0x....      LDR.W    R2,??DataTable22
   \                     ??SPI2_IRQHandler_13: (+1)
   \   000000D8   0x8803             LDRH     R3,[R0, #+0]
   \   000000DA   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000DE   0xF502 0x5280      ADD      R2,R2,#+4096
   \   000000E2   0x8011             STRH     R1,[R2, #+0]
    463                                    break;
    464                                default:
    465                                    break; 
    466          	                }						
    467                          }
    468                          WaveRec_idxSens3++;
   \                     ??SPI2_IRQHandler_9: (+1)
   \   000000E4   0x8801             LDRH     R1,[R0, #+0]
   \   000000E6   0x1C49             ADDS     R1,R1,#+1
   \   000000E8   0x8001             STRH     R1,[R0, #+0]
    469                          if ((WaveRec_idxSens3 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x04;
   \   000000EA   0x8800             LDRH     R0,[R0, #+0]
   \   000000EC   0x210F             MOVS     R1,#+15
   \   000000EE   0x4208             TST      R0,R1
   \   000000F0   0xD105             BNE.N    ??SPI2_IRQHandler_8
   \   000000F2   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000000F6   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000FA   0xF884 0x0080      STRB     R0,[R4, #+128]
    470                          if (flgRacing==0x3F)  SubFrameFinished();				  
   \                     ??SPI2_IRQHandler_8: (+1)
   \   000000FE   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   00000102   0x283F             CMP      R0,#+63
   \   00000104   0xBF08             IT       EQ 
   \   00000106   0x.... 0x....      BLEQ     SubFrameFinished
    471                              
    472                      }
    473          	    }//else	  
    474          	    I2S2_stLROld = I2S2_stLR;
   \                     ??SPI2_IRQHandler_2: (+1)
   \   0000010A   0xF894 0x0088      LDRB     R0,[R4, #+136]
   \   0000010E   0xF884 0x0089      STRB     R0,[R4, #+137]
    475             }
    476          
    477          }
   \                     ??SPI2_IRQHandler_0: (+1)
   \   00000112   0xBD10             POP      {R4,PC}          ;; return
    478          
    479          

   \                                 In section .text, align 2, keep-with-next
    480          void SPI4_IRQHandler(void)
    481          {
    482            uint16_t test;
    483            /* SPI in mode Receiver ----------------------------------------------------*/
    484            if(
    485              (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_OVR) == RESET)&&
    486              (__HAL_SPI_GET_FLAG(&hspi4, SPI_FLAG_RXNE) != RESET)&&
    487               (__HAL_SPI_GET_IT_SOURCE(&hspi4, SPI_IT_RXNE) != RESET))
   \                     SPI4_IRQHandler: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6881             LDR      R1,[R0, #+8]
   \   00000008   0x0649             LSLS     R1,R1,#+25
   \   0000000A   0xD500             BPL.N    ??SPI4_IRQHandler_0
   \   0000000C   0x4770             BX       LR
   \                     ??SPI4_IRQHandler_0: (+1)
   \   0000000E   0xB510             PUSH     {R4,LR}
   \   00000010   0x6881             LDR      R1,[R0, #+8]
   \   00000012   0x07C9             LSLS     R1,R1,#+31
   \   00000014   0xF140 0x8096      BPL.W    ??SPI4_IRQHandler_1
   \   00000018   0x6840             LDR      R0,[R0, #+4]
   \   0000001A   0x0640             LSLS     R0,R0,#+25
   \   0000001C   0xF140 0x8092      BPL.W    ??SPI4_IRQHandler_1
    488            {
    489          
    490              
    491              test =  SPI_I2S_ReceiveData(SPI4);
    492          
    493              /* Left-Right Mic data */
    494              //Main_stLR= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
    495              
    496          
    497              /* STM32F746 read data from STA321MP, the data is shifted few bit           */
    498              /* Data from STA321MP is 32bit formart                                      */
    499              /* SPI is just able to read 16 bit format                                   */
    500              /* Therefore, it needs to correct                                           */
    501              /*  First Case                                                              */
    502              /* -----------------|---------------++++++++++++++++|++++++++++++++++---------*/
    503              /*        000000000000000000000000000000001111111111111111111111111111110000*/  
    504              /*                        _____vRawSens6__              ______vRawSens5_    */       
    505              /*  Second Case                                                             */
    506            
    507          	if (Main_stLR==GPIO_PIN_RESET)
   \   00000020   0x.... 0x....      LDR.W    R4,??DataTable17_1
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable22_3  ;; 0x4001340c
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF994 0x1085      LDRSB    R1,[R4, #+133]
   \   0000002E   0xB280             UXTH     R0,R0
   \   00000030   0x2900             CMP      R1,#+0
   \   00000032   0xF994 0x1086      LDRSB    R1,[R4, #+134]
   \   00000036   0xD13F             BNE.N    ??SPI4_IRQHandler_2
    508          	{
    509                    if (Main_stLROld==GPIO_PIN_RESET)
   \   00000038   0x2900             CMP      R1,#+0
   \   0000003A   0xD17D             BNE.N    ??SPI4_IRQHandler_3
    510                    {
    511                       vRawSens6 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                              ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   0000003C   0xF894 0x1087      LDRB     R1,[R4, #+135]
   \   00000040   0xF9B4 0x2098      LDRSH    R2,[R4, #+152]
   \   00000044   0x40C8             LSRS     R0,R0,R1
   \   00000046   0xF894 0x1087      LDRB     R1,[R4, #+135]
   \   0000004A   0xF1C1 0x0110      RSB      R1,R1,#+16
   \   0000004E   0xFA02 0xF101      LSL      R1,R2,R1
   \   00000052   0x4301             ORRS     R1,R1,R0
    512          
    513                       if (WaveRec_idxSens6 < AUDIO_OUT_BUFFER_SIZE)
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable22_4
   \   00000058   0xF8A4 0x1096      STRH     R1,[R4, #+150]
   \   0000005C   0x8802             LDRH     R2,[R0, #+0]
   \   0000005E   0xF5B2 0x6F80      CMP      R2,#+1024
   \   00000062   0xDA15             BGE.N    ??SPI4_IRQHandler_4
    514                       {
    515                            /*-------------------------------------------------------------------------------------------------------------                                             
    516                            Sequence  Record Data                     Processing Data                 Player Data
    517                                              
    518                            1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    519                                              
    520                            2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    521                                              
    522                            3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    523                             ---------------------------------------------------------------------------------------------------------------*/                     
    524                             /* Recording Audio Data */			             
    525                             switch (buffer_switch)
   \   00000064   0x.... 0x....      LDR.W    R2,??DataTable17_3
   \   00000068   0x7812             LDRB     R2,[R2, #+0]
   \   0000006A   0xB11A             CBZ.N    R2,??SPI4_IRQHandler_5
   \   0000006C   0x2A02             CMP      R2,#+2
   \   0000006E   0xD007             BEQ.N    ??SPI4_IRQHandler_6
   \   00000070   0xD303             BCC.N    ??SPI4_IRQHandler_7
   \   00000072   0xE00D             B.N      ??SPI4_IRQHandler_4
    526                             {
    527                                 case BUF1_PLAY:
    528                                     Buffer2.bufMIC6[WaveRec_idxSens6] = vRawSens6;
   \                     ??SPI4_IRQHandler_5: (+1)
   \   00000074   0x.... 0x....      LDR.W    R2,??DataTable17_4
   \   00000078   0xE004             B.N      ??SPI4_IRQHandler_8
    529          
    530                                     break;
    531                                 case BUF2_PLAY:
    532                                     Buffer3.bufMIC6[WaveRec_idxSens6] = vRawSens6;
   \                     ??SPI4_IRQHandler_7: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R2,??DataTable17_5
   \   0000007E   0xE001             B.N      ??SPI4_IRQHandler_8
    533          
    534                                     break;
    535                                 case BUF3_PLAY:
    536                                     Buffer1.bufMIC6[WaveRec_idxSens6] = vRawSens6;
   \                     ??SPI4_IRQHandler_6: (+1)
   \   00000080   0x.... 0x....      LDR.W    R2,??DataTable26_22
   \                     ??SPI4_IRQHandler_8: (+1)
   \   00000084   0x8803             LDRH     R3,[R0, #+0]
   \   00000086   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000008A   0xF502 0x5220      ADD      R2,R2,#+10240
   \   0000008E   0x8011             STRH     R1,[R2, #+0]
    537          
    538                                     break;                          
    539                                 default:
    540                                     break;
    541                             }					
    542                                      			   
    543                             //if ((  WaveRec_idxSens1 - WaveRec_idxSens6 != 1)&&(WaveRec_idxSens6==100))
    544                             //{  
    545                                 //HAL_NVIC_SystemReset();
    546                             //} 
    547          			
    548          	           }
    549                         if (WaveRec_idxSens6 < WaveRec_idxSens5) WaveRec_idxSens6++;
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??SPI4_IRQHandler_4: (+1)
   \   00000090   0x.... 0x....      LDR.W    R2,??DataTable22_5
   \   00000094   0x8801             LDRH     R1,[R0, #+0]
   \   00000096   0x8812             LDRH     R2,[R2, #+0]
   \   00000098   0x4291             CMP      R1,R2
   \   0000009A   0xD202             BCS.N    ??SPI4_IRQHandler_9
   \   0000009C   0x8801             LDRH     R1,[R0, #+0]
   \   0000009E   0x1C49             ADDS     R1,R1,#+1
   \   000000A0   0x8001             STRH     R1,[R0, #+0]
    550                         if ((WaveRec_idxSens6 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x20;
   \                     ??SPI4_IRQHandler_9: (+1)
   \   000000A2   0x8800             LDRH     R0,[R0, #+0]
   \   000000A4   0x210F             MOVS     R1,#+15
   \   000000A6   0x4208             TST      R0,R1
   \   000000A8   0xD13F             BNE.N    ??SPI4_IRQHandler_10
   \   000000AA   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   000000AE   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000000B2   0xF884 0x0080      STRB     R0,[R4, #+128]
    551                         if (flgRacing==0x3F)  SubFrameFinished();	
   \   000000B6   0xE038             B.N      ??SPI4_IRQHandler_10
    552                 }
    553                 else
    554                 {
    555                     SPI4_stNipple = (test);      
    556                 }
    557                    
    558              }
    559          	else
    560          	{
    561          	    
    562                    if (Main_stLROld==GPIO_PIN_SET)
   \                     ??SPI4_IRQHandler_2: (+1)
   \   000000B8   0x2901             CMP      R1,#+1
   \   000000BA   0xD13D             BNE.N    ??SPI4_IRQHandler_3
    563                    {
    564                         vRawSens5 =((test>>SPI4_stPosShft)|(SPI4_stNipple<<(SDOLEN-SPI4_stPosShft)));
                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   000000BC   0xF894 0x1087      LDRB     R1,[R4, #+135]
   \   000000C0   0xF9B4 0x2098      LDRSH    R2,[R4, #+152]
   \   000000C4   0x40C8             LSRS     R0,R0,R1
   \   000000C6   0xF894 0x1087      LDRB     R1,[R4, #+135]
   \   000000CA   0xF1C1 0x0110      RSB      R1,R1,#+16
   \   000000CE   0xFA02 0xF101      LSL      R1,R2,R1
   \   000000D2   0x4301             ORRS     R1,R1,R0
    565          		   
    566                         if (WaveRec_idxSens5 < AUDIO_OUT_BUFFER_SIZE)
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000000D8   0xF8A4 0x1094      STRH     R1,[R4, #+148]
   \   000000DC   0x8802             LDRH     R2,[R0, #+0]
   \   000000DE   0xF5B2 0x6F80      CMP      R2,#+1024
   \   000000E2   0xDA15             BGE.N    ??SPI4_IRQHandler_11
    567                         {
    568                              /*-------------------------------------------------------------------------------------------------------------                                             
    569                              Sequence  Record Data                     Processing Data                 Player Data
    570                                                
    571                              1-------  Buffer1                         Buffer2                         Buffer3 BUF3_PLAY)
    572                                                
    573                              2-------  Buffer3                         Buffer1                         Buffer2 (BUF2_PLAY)		  
    574                                                
    575                              3-------  Buffer2                         Buffer3                         Buffer1 (BUF1_PLAY)
    576                               ---------------------------------------------------------------------------------------------------------------*/                 
    577                                /* Recording Audio Data */			             
    578                               switch (buffer_switch)
   \   000000E4   0x.... 0x....      LDR.W    R2,??DataTable17_3
   \   000000E8   0x7812             LDRB     R2,[R2, #+0]
   \   000000EA   0xB11A             CBZ.N    R2,??SPI4_IRQHandler_12
   \   000000EC   0x2A02             CMP      R2,#+2
   \   000000EE   0xD007             BEQ.N    ??SPI4_IRQHandler_13
   \   000000F0   0xD303             BCC.N    ??SPI4_IRQHandler_14
   \   000000F2   0xE00D             B.N      ??SPI4_IRQHandler_11
    579                               {
    580                                   case BUF1_PLAY:
    581                                       Buffer2.bufMIC5[WaveRec_idxSens5] = vRawSens5;
   \                     ??SPI4_IRQHandler_12: (+1)
   \   000000F4   0x.... 0x....      LDR.W    R2,??DataTable17_4
   \   000000F8   0xE004             B.N      ??SPI4_IRQHandler_15
    582           
    583                                       break;
    584                                   case BUF2_PLAY:
    585                                       Buffer3.bufMIC5[WaveRec_idxSens5] = vRawSens5;
   \                     ??SPI4_IRQHandler_14: (+1)
   \   000000FA   0x.... 0x....      LDR.W    R2,??DataTable17_5
   \   000000FE   0xE001             B.N      ??SPI4_IRQHandler_15
    586                 
    587                                       break;
    588                                   case BUF3_PLAY:
    589                                       Buffer1.bufMIC5[WaveRec_idxSens5] = vRawSens5;
   \                     ??SPI4_IRQHandler_13: (+1)
   \   00000100   0x.... 0x....      LDR.W    R2,??DataTable26_22
   \                     ??SPI4_IRQHandler_15: (+1)
   \   00000104   0x8803             LDRH     R3,[R0, #+0]
   \   00000106   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000010A   0xF502 0x5200      ADD      R2,R2,#+8192
   \   0000010E   0x8011             STRH     R1,[R2, #+0]
    590           
    591                                       break;                          
    592                                   default:
    593                                       break;
    594                               }	  
    595                         }
    596                         WaveRec_idxSens5++;
   \                     ??SPI4_IRQHandler_11: (+1)
   \   00000110   0x8801             LDRH     R1,[R0, #+0]
   \   00000112   0x1C49             ADDS     R1,R1,#+1
   \   00000114   0x8001             STRH     R1,[R0, #+0]
    597          		       if ((WaveRec_idxSens5 % (AUDIO_SAMPLING_FREQUENCY/1000)==0)) flgRacing |=0x10;
   \   00000116   0x8800             LDRH     R0,[R0, #+0]
   \   00000118   0x210F             MOVS     R1,#+15
   \   0000011A   0x4208             TST      R0,R1
   \   0000011C   0xD105             BNE.N    ??SPI4_IRQHandler_10
   \   0000011E   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   00000122   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000126   0xF884 0x0080      STRB     R0,[R4, #+128]
    598          	           if (flgRacing==0x3F)  SubFrameFinished();	
   \                     ??SPI4_IRQHandler_10: (+1)
   \   0000012A   0xF894 0x0080      LDRB     R0,[R4, #+128]
   \   0000012E   0x283F             CMP      R0,#+63
   \   00000130   0xD104             BNE.N    ??SPI4_IRQHandler_16
   \   00000132   0x.... 0x....      BL       SubFrameFinished
   \   00000136   0xE001             B.N      ??SPI4_IRQHandler_16
    599                    }    
    600                    else           
    601                    {
    602                        SPI4_stNipple = (test);	  
   \                     ??SPI4_IRQHandler_3: (+1)
   \   00000138   0xF8A4 0x0098      STRH     R0,[R4, #+152]
    603          
    604                    }
    605                    
    606          	}
    607          #if 0
    608          	/* The code to store data in to buffer for testing purpose */
    609          	if (iSDO56<4*AUDIO_OUT_BUFFER_SIZE)
    610          	{
    611          		TestSDO56[iSDO56++]=(temp<<16)|test;
    612          	}
    613          	else
    614          	{
    615          		iSDO56=0;
    616          	}
    617          #endif
    618          
    619          	/* Update Old value */	  
    620          	Main_stLROld=Main_stLR;	  
   \                     ??SPI4_IRQHandler_16: (+1)
   \   0000013C   0xF894 0x0085      LDRB     R0,[R4, #+133]
   \   00000140   0xF884 0x0086      STRB     R0,[R4, #+134]
    621              
    622            }      
    623          }
   \                     ??SPI4_IRQHandler_1: (+1)
   \   00000144   0xBD10             POP      {R4,PC}          ;; return
    624          
    625          
    626          
    627          

   \                                 In section .text, align 2, keep-with-next
    628          void SPI5_IRQHandler(void)
    629          {
   \                     SPI5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    630            //static uint16_t stNipple;
    631            //static uint8_t stLR, stOder;
    632          
    633            /* USER CODE BEGIN SPI5_IRQn 0 */
    634          
    635            /* USER CODE END SPI5_IRQn 0 */
    636            //HAL_SPI_IRQHandler(&hspi5);
    637            /* USER CODE BEGIN SPI5_IRQn 1 */
    638          
    639            /* USER CODE END SPI5_IRQn 1 */
    640              /* Check if data are available in SPI Data register */
    641            /* SPI in mode Receiver ----------------------------------------------------*/
    642            if(
    643               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_OVR) == RESET)&&
    644               (__HAL_SPI_GET_FLAG(&hspi5, SPI_FLAG_RXNE) != RESET)&&
    645               (__HAL_SPI_GET_IT_SOURCE(&hspi5, SPI_IT_RXNE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable25
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xD439             BMI.N    ??SPI5_IRQHandler_0
   \   0000000E   0x6881             LDR      R1,[R0, #+8]
   \   00000010   0x07C9             LSLS     R1,R1,#+31
   \   00000012   0xD536             BPL.N    ??SPI5_IRQHandler_0
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0x0640             LSLS     R0,R0,#+25
   \   00000018   0xD533             BPL.N    ??SPI5_IRQHandler_0
    646            {
    647          
    648          
    649             uint16_t test;
    650             test =  SPI_I2S_ReceiveData(SPI5);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable25_1  ;; 0x4001500c
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
    651             //SPI5->DR = 3333;
    652          
    653            pDataMic8[idxMic8++] =	HTONS(test);
   \   00000020   0xF8B4 0x1134      LDRH     R1,[R4, #+308]
   \   00000024   0xB282             UXTH     R2,R0
   \   00000026   0x0200             LSLS     R0,R0,#+8
   \   00000028   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   0000002C   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   00000030   0xF8A2 0x015C      STRH     R0,[R2, #+348]
   \   00000034   0x1C48             ADDS     R0,R1,#+1
   \   00000036   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    654            
    655            //volume = 64;
    656            
    657            if (idxMic8>=64)
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0x2840             CMP      R0,#+64
   \   0000003E   0xDB20             BLT.N    ??SPI5_IRQHandler_0
    658            {
    659          	if (buffer_switch != 1)
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable17_3
   \   00000044   0xF8D4 0x0158      LDR      R0,[R4, #+344]
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable26_25
   \   0000004C   0xF104 0x03C8      ADD      R3,R4,#+200
   \   00000050   0x7812             LDRB     R2,[R2, #+0]
   \   00000052   0x780A             LDRB     R2,[R1, #+0]
   \   00000054   0xF8B4 0x1138      LDRH     R1,[R4, #+312]
   \   00000058   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   0000005C   0xF504 0x70AE      ADD      R0,R4,#+348
    660          	{
    661          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume ,
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    662          						  (PDMFilter_InitStruct *)&Filter[0]);
    663          	}
    664          	else
    665          	{
    666          		PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(bufPCMSens8 + cntPos*16), volume , 
                 		^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    667          						  (PDMFilter_InitStruct *)&Filter[0]);   
   \   00000060   0x.... 0x....      BL       PDM_Filter_64_LSB
    668          	}
    669          	idxMic8=0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xF8A4 0x0134      STRH     R0,[R4, #+308]
    670          	cntPos++;
   \   0000006A   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0xF8A4 0x0138      STRH     R0,[R4, #+312]
    671          	if (cntPos>=256) cntPos=0;
   \   00000074   0xF8B4 0x0138      LDRH     R0,[R4, #+312]
   \   00000078   0x28FF             CMP      R0,#+255
   \   0000007A   0xBFC4             ITT      GT 
   \   0000007C   0x2000             MOVGT    R0,#+0
   \   0000007E   0xF8A4 0x0138      STRHGT   R0,[R4, #+312]
    672            }
    673              
    674            }
    675            
    676          }
   \                     ??SPI5_IRQHandler_0: (+1)
   \   00000082   0xBD10             POP      {R4,PC}          ;; return
    677          
    678          /* SPI5 init function */
    679          
    680          

   \                                 In section .text, align 2, keep-with-next
    681          void SPI6_IRQHandler(void)
    682          {
   \                     SPI6_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    683            /* SPI in mode Receiver ----------------------------------------------------*/
    684            if(
    685          //     (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_OVR) == RESET)&&
    686               (__HAL_SPI_GET_FLAG(&hspi6, SPI_FLAG_TXE) != RESET)&&
    687               (__HAL_SPI_GET_IT_SOURCE(&hspi6, SPI_IT_TXE) != RESET))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable25
   \   00000006   0x6E60             LDR      R0,[R4, #+100]
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x0789             LSLS     R1,R1,#+30
   \   0000000C   0xD536             BPL.N    ??SPI6_IRQHandler_0
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD533             BPL.N    ??SPI6_IRQHandler_0
    688            {
    689          
    690          
    691               uint16_t test;
    692               test =  SPI_I2S_ReceiveData(SPI6);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable26  ;; 0x4001540c
   \   00000018   0x6800             LDR      R0,[R0, #+0]
    693               //SPI6->DR = 3333;
    694          
    695              pDataMic7[idxMic7++] =	HTONS(test);
   \   0000001A   0xF8B4 0x1136      LDRH     R1,[R4, #+310]
   \   0000001E   0xB282             UXTH     R2,R0
   \   00000020   0x0200             LSLS     R0,R0,#+8
   \   00000022   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000026   0xEB04 0x0241      ADD      R2,R4,R1, LSL #+1
   \   0000002A   0xF8A2 0x01DC      STRH     R0,[R2, #+476]
   \   0000002E   0x1C48             ADDS     R0,R1,#+1
   \   00000030   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    696          
    697              //volume = 64;
    698          
    699              if (idxMic7>=64)
   \   00000034   0xB280             UXTH     R0,R0
   \   00000036   0x2840             CMP      R0,#+64
   \   00000038   0xDB20             BLT.N    ??SPI6_IRQHandler_0
    700              {
    701                if (buffer_switch != 1)
   \   0000003A   0x.... 0x....      LDR.W    R2,??DataTable17_3
   \   0000003E   0xF8D4 0x0154      LDR      R0,[R4, #+340]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable26_25
   \   00000046   0xF104 0x03FC      ADD      R3,R4,#+252
   \   0000004A   0x7812             LDRB     R2,[R2, #+0]
   \   0000004C   0x780A             LDRB     R2,[R1, #+0]
   \   0000004E   0xF8B4 0x113A      LDRH     R1,[R4, #+314]
   \   00000052   0xEB00 0x1141      ADD      R1,R0,R1, LSL #+5
   \   00000056   0xF504 0x70EE      ADD      R0,R4,#+476
    702                {
    703                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume ,
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    704                                                          (PDMFilter_InitStruct *)&Filter[1]);
    705                }
    706                else
    707                {
    708                        PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(bufPCMSens7 + cntPos7*16), volume , 
                               ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
    709                                                          (PDMFilter_InitStruct *)&Filter[1]);   
   \   0000005A   0x.... 0x....      BL       PDM_Filter_64_LSB
    710                }
    711                idxMic7=0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF8A4 0x0136      STRH     R0,[R4, #+310]
    712                cntPos7++;
   \   00000064   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0xF8A4 0x013A      STRH     R0,[R4, #+314]
    713                if (cntPos7>=256) cntPos7=0;
   \   0000006E   0xF8B4 0x013A      LDRH     R0,[R4, #+314]
   \   00000072   0x28FF             CMP      R0,#+255
   \   00000074   0xBFC4             ITT      GT 
   \   00000076   0x2000             MOVGT    R0,#+0
   \   00000078   0xF8A4 0x013A      STRHGT   R0,[R4, #+314]
    714              }
    715              
    716            }
    717          }
   \                     ??SPI6_IRQHandler_0: (+1)
   \   0000007C   0xBD10             POP      {R4,PC}          ;; return
    718          
    719          
    720          

   \                                 In section .text, align 2, keep-with-next
    721          void MIC1TO8_Init(void)
    722          {
   \                     MIC1TO8_Init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    723          
    724          
    725            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    726            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    727            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    728            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    729            //HAL_Delay(2);
    730          
    731          
    732          //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    733          //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    734            I2S1_Init(); /* I2S1   --> SDO12 */
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable17_1
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable26_1  ;; 0x40013000
   \   0000000A   0x6020             STR      R0,[R4, #+0]
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0x60A0             STR      R0,[R4, #+8]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x60E0             STR      R0,[R4, #+12]
   \   00000014   0xF44F 0x7580      MOV      R5,#+256
   \   00000018   0x6120             STR      R0,[R4, #+16]
   \   0000001A   0xF44F 0x567A      MOV      R6,#+16000
   \   0000001E   0x61A0             STR      R0,[R4, #+24]
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0x61E0             STR      R0,[R4, #+28]
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x6065             STR      R5,[R4, #+4]
   \   00000028   0x6166             STR      R6,[R4, #+20]
   \   0000002A   0x.... 0x....      BL       HAL_I2S_Init
    735          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    736          //  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    737            I2S2_Init(); /* I2S2   --> SDO34 */
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable26_4  ;; 0x40003800
   \   00000032   0x6465             STR      R5,[R4, #+68]
   \   00000034   0x6420             STR      R0,[R4, #+64]
   \   00000036   0x2020             MOVS     R0,#+32
   \   00000038   0x64A0             STR      R0,[R4, #+72]
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x64E0             STR      R0,[R4, #+76]
   \   0000003E   0x6520             STR      R0,[R4, #+80]
   \   00000040   0x65A0             STR      R0,[R4, #+88]
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0x65E0             STR      R0,[R4, #+92]
   \   00000046   0xF104 0x0040      ADD      R0,R4,#+64
   \   0000004A   0x6566             STR      R6,[R4, #+84]
   \   0000004C   0x.... 0x....      BL       HAL_I2S_Init
    738            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
    739            //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
    740            SPI4_Init(); /* SPI4   --> SDO56 */
   \   00000050   0x.... 0x....      BL       SPI4_Init
    741            SPI5_Init();
   \   00000054   0x.... 0x....      BL       SPI5_Init
    742            SPI6_Init(); 
   \   00000058   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000005C   0x....             B.N      SPI6_Init
    743            //StartRecMic7_8();
    744          }
    745          

   \                                 In section .text, align 2, keep-with-next
    746          void StartRecMic7_8 (void)
    747          {
   \                     StartRecMic7_8: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    748          	  HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,8*AUDIO_OUT_BUFFER_SIZE);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable25
   \   00000006   0xF44F 0x5200      MOV      R2,#+8192
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable26_2
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    749          #if (0)
    750          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*(AUDIO_SAMPLING_FREQUENCY/1000));
    751          #else
    752          	  HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,8*AUDIO_OUT_BUFFER_SIZE);
   \   00000014   0xF44F 0x5200      MOV      R2,#+8192
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable26_23
   \   0000001C   0xF104 0x0064      ADD      R0,R4,#+100
   \   00000020   0x.... 0x....      BL       HAL_SPI_Receive_DMA
    753          #endif
    754          	  swtSDO7 = 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xF884 0x0130      STRB     R0,[R4, #+304]
    755          	  swtSDO8 = 1;
   \   0000002A   0xF884 0x0131      STRB     R0,[R4, #+305]
    756          
    757          }
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    758          
    759          /* I2S1 init function */
    760          /* Read data of MIC12 */
    761          static void I2S1_Init(void)
    762          {
    763          #if 1
    764            hi2s1.Instance = SPI1;
    765            hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
    766            hi2s1.Init.Standard = I2S_STANDARD_LSB;
    767            hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
    768            hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    769            hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    770            hi2s1.Init.CPOL = I2S_CPOL_LOW;
    771            hi2s1.Init.ClockSource = I2S_CLOCK_SYSCLK;
    772            HAL_I2S_Init(&hi2s1);
    773          
    774          
    775          #else
    776          	hspi1.Instance = SPI1;
    777          	hspi1.Init.Mode = SPI_MODE_SLAVE;
    778          	hspi1.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    779          	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
    780          	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
    781          	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    782          	hspi1.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    783          	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    784          	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    785          	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    786          	hspi1.Init.CRCPolynomial = 7;
    787          	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    788          	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    789          	//hspi4.RxISR = SPI5_CallBack;
    790          	HAL_SPI_Init(&hspi1);
    791          	  //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    792            /* Enable TXE, RXNE and ERR interrupt */
    793           __HAL_SPI_ENABLE_IT(&hspi1, (SPI_IT_RXNE| SPI_IT_ERR));
    794           __HAL_SPI_ENABLE(&hspi1);
    795          #endif
    796          }
    797          

   \                                 In section .text, align 2, keep-with-next
    798          void I2S1_Enable(void)
    799          {
    800             /* Enable TXE and ERR interrupt */
    801           __HAL_I2S_ENABLE_IT(&hi2s1, (I2S_IT_RXNE));
   \                     I2S1_Enable: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable26_16
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6841             LDR      R1,[R0, #+4]
   \   00000008   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000000C   0x6041             STR      R1,[R0, #+4]
    802           
    803           __HAL_I2S_ENABLE(&hi2s1);
   \   0000000E   0x69C1             LDR      R1,[R0, #+28]
   \   00000010   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000014   0x61C1             STR      R1,[R0, #+28]
    804          }
   \   00000016   0x4770             BX       LR               ;; return
    805          
    806          
    807          /* I2S2 init function */
    808          /* Read data of MIC34 */
    809          
    810          static void I2S2_Init(void)
    811          {
    812          
    813          #if 1
    814           //HAL_I2S_DeInit(&hi2s2);
    815           hi2s2.Instance = SPI2;
    816           hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;//I2S_MODE_MASTER_RX
    817           hi2s2.Init.Standard = I2S_STANDARD_LSB;//I2S_STANDARD_LSB
    818           hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
    819           hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    820           hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
    821           hi2s2.Init.CPOL = I2S_CPOL_LOW;
    822           hi2s2.Init.ClockSource = I2S_CLOCK_SYSCLK;
    823          
    824           HAL_I2S_Init(&hi2s2);
    825          
    826          
    827          #else
    828             hspi2.Instance = SPI2;
    829             hspi2.Init.Mode = SPI_MODE_SLAVE;
    830             hspi2.Init.Direction = SPI_DIRECTION_2LINES;//SPI_DIRECTION_2LINES_RXONLY
    831             hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
    832             hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
    833             hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
    834             hspi2.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
    835             hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
    836             hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
    837             hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    838             hspi2.Init.CRCPolynomial = 7;
    839             hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    840             hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    841             HAL_SPI_Init(&hspi2);
    842          	 //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    843           /* Enable TXE, RXNE and ERR interrupt */
    844          __HAL_SPI_ENABLE_IT(&hspi2, (SPI_IT_RXNE| SPI_IT_ERR));
    845          __HAL_SPI_ENABLE(&hspi2);
    846          #endif
    847          
    848          
    849          }
    850          

   \                                 In section .text, align 2, keep-with-next
    851          void I2S2_Enable(void)
    852          {
   \                     I2S2_Enable: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable26_16
   \   00000004   0x6C00             LDR      R0,[R0, #+64]
   \   00000006   0x6841             LDR      R1,[R0, #+4]
   \   00000008   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000000C   0x6041             STR      R1,[R0, #+4]
    853              /* Enable TXE and ERR interrupt */
    854              __HAL_I2S_ENABLE_IT(&hi2s2, (I2S_IT_RXNE));
    855              __HAL_I2S_ENABLE(&hi2s2);
   \   0000000E   0x69C1             LDR      R1,[R0, #+28]
   \   00000010   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000014   0x61C1             STR      R1,[R0, #+28]
    856          }
   \   00000016   0x4770             BX       LR               ;; return
    857          
    858          
    859          /* SPI4 init function */

   \                                 In section .text, align 2, keep-with-next
    860          void SPI4_Init(void)
    861          {
    862          
    863            hspi4.Instance = SPI4;
   \                     SPI4_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable26_9  ;; 0x40013400
   \   00000008   0x6001             STR      R1,[R0, #+0]
    864            hspi4.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6041             STR      R1,[R0, #+4]
    865            hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x6081             STR      R1,[R0, #+8]
    866            hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x60C1             STR      R1,[R0, #+12]
    867            hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6101             STR      R1,[R0, #+16]
    868            hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x6141             STR      R1,[R0, #+20]
    869            hspi4.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x6181             STR      R1,[R0, #+24]
    870            hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x6201             STR      R1,[R0, #+32]
    871            hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002C   0x6241             STR      R1,[R0, #+36]
    872            hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000002E   0x6281             STR      R1,[R0, #+40]
    873            hspi4.Init.CRCPolynomial = 7;
   \   00000030   0x2107             MOVS     R1,#+7
   \   00000032   0x62C1             STR      R1,[R0, #+44]
    874            hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x6301             STR      R1,[R0, #+48]
    875            hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000038   0x6341             STR      R1,[R0, #+52]
    876            HAL_SPI_Init(&hspi4);
   \   0000003A   0x.... 0x....      B.W      HAL_SPI_Init
    877          
    878          
    879          }
    880          
    881          

   \                                 In section .text, align 2, keep-with-next
    882          void SPI4_Enable(void)
    883          {
    884           /* Enable TXE, RXNE and ERR interrupt */
    885           __HAL_SPI_ENABLE_IT(&hspi4, (SPI_IT_RXNE| SPI_IT_ERR));
   \                     SPI4_Enable: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6841             LDR      R1,[R0, #+4]
   \   00000008   0xF041 0x0160      ORR      R1,R1,#0x60
   \   0000000C   0x6041             STR      R1,[R0, #+4]
    886          
    887           __HAL_SPI_ENABLE(&hspi4);
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000014   0x6001             STR      R1,[R0, #+0]
    888          }
   \   00000016   0x4770             BX       LR               ;; return
    889          
    890          
    891          

   \                                 In section .text, align 4, keep-with-next
    892          void Mic7Rec(void)
    893          {
   \                     Mic7Rec: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    894              SPI5_Init();
   \   00000004   0x....             LDR.N    R0,??DataTable16_1  ;; 0x40023830
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable25
   \   0000000A   0x2602             MOVS     R6,#+2
   \   0000000C   0xED2D 0x8B02      VPUSH    {D8}
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0xF104 0x05C8      ADD      R5,R4,#+200
   \   00000016   0xF44F 0x577A      MOV      R7,#+16000
   \   0000001A   0xEEB3 0x8A0E      VMOV.F32 S16,#30.0
   \   0000001E   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000022   0xEDDF 0x....      VLDR.W   S17,??DataTable16  ;; 0x45fa0000
   \   00000026   0x6001             STR      R1,[R0, #+0]
   \                     ??Mic7Rec_0: (+1)
   \   00000028   0xEDC5 0x8A01      VSTR     S17,[R5, #+4]
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xED85 0x8A02      VSTR     S16,[R5, #+8]
   \   00000032   0x802F             STRH     R7,[R5, #+0]
   \   00000034   0x81E8             STRH     R0,[R5, #+14]
   \   00000036   0x81A8             STRH     R0,[R5, #+12]
   \   00000038   0x4628             MOV      R0,R5
   \   0000003A   0x.... 0x....      BL       PDM_Filter_Init
   \   0000003E   0x3534             ADDS     R5,R5,#+52
   \   00000040   0x1E76             SUBS     R6,R6,#+1
   \   00000042   0xD1F1             BNE.N    ??Mic7Rec_0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable26_10  ;; 0x40015000
   \   00000048   0x6020             STR      R0,[R4, #+0]
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x6060             STR      R0,[R4, #+4]
   \   0000004E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000052   0x60A0             STR      R0,[R4, #+8]
   \   00000054   0xF44F 0x6070      MOV      R0,#+3840
   \   00000058   0x60E0             STR      R0,[R4, #+12]
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x6120             STR      R0,[R4, #+16]
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x6160             STR      R0,[R4, #+20]
   \   00000062   0xF44F 0x7000      MOV      R0,#+512
   \   00000066   0x61A0             STR      R0,[R4, #+24]
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x6220             STR      R0,[R4, #+32]
   \   0000006C   0x6260             STR      R0,[R4, #+36]
   \   0000006E   0x62A0             STR      R0,[R4, #+40]
   \   00000070   0x2007             MOVS     R0,#+7
   \   00000072   0x62E0             STR      R0,[R4, #+44]
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x6320             STR      R0,[R4, #+48]
   \   00000078   0x6360             STR      R0,[R4, #+52]
   \   0000007A   0x4620             MOV      R0,R4
   \   0000007C   0xECBD 0x8B02      VPOP     {D8}
   \   00000080   0xB001             ADD      SP,SP,#+4
   \   00000082   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   00000086   0x.... 0x....      B.W      HAL_SPI_Init
    895          }
    896          

   \                                 In section .text, align 2, keep-with-next
    897          void Mic8Rec(void)
    898          {
    899              SPI6_Init();
   \                     Mic8Rec: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable25
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable26_12  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6741             STR      R1,[R0, #+116]
   \   0000001E   0x6781             STR      R1,[R0, #+120]
   \   00000020   0xF44F 0x7100      MOV      R1,#+512
   \   00000024   0x67C1             STR      R1,[R0, #+124]
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0xF8C0 0x1084      STR      R1,[R0, #+132]
   \   0000002C   0xF8C0 0x1088      STR      R1,[R0, #+136]
   \   00000030   0xF8C0 0x108C      STR      R1,[R0, #+140]
   \   00000034   0x2107             MOVS     R1,#+7
   \   00000036   0xF8C0 0x1090      STR      R1,[R0, #+144]
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xF8C0 0x1094      STR      R1,[R0, #+148]
   \   00000040   0xF8C0 0x1098      STR      R1,[R0, #+152]
   \   00000044   0x3064             ADDS     R0,R0,#+100
   \   00000046   0x.... 0x....      B.W      HAL_SPI_Init
    900          }
    901          
    902          
    903          /* SPI5 init function */

   \                                 In section .text, align 4, keep-with-next
    904          void SPI5_Init(void)
    905          {
   \                     SPI5_Init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    906          	
    907              /* Enable CRC module */
    908              RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
   \   00000004   0x....             LDR.N    R0,??DataTable16_1  ;; 0x40023830
    909          	for (char i=0; i< 2; i++)
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable25
   \   0000000A   0x2602             MOVS     R6,#+2
   \   0000000C   0xED2D 0x8B02      VPUSH    {D8}
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0xF104 0x05C8      ADD      R5,R4,#+200
   \   00000016   0xF44F 0x577A      MOV      R7,#+16000
   \   0000001A   0xEEB3 0x8A0E      VMOV.F32 S16,#30.0
   \   0000001E   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000022   0xEDDF 0x....      VLDR.W   S17,??DataTable16  ;; 0x45fa0000
   \   00000026   0x6001             STR      R1,[R0, #+0]
    910          	{
    911          		/* Filter LP & HP Init */
    912          		Filter[i].LP_HZ = 8000;   //sop1hc 8000
   \                     ??SPI5_Init_0: (+1)
   \   00000028   0xEDC5 0x8A01      VSTR     S17,[R5, #+4]
    913          		Filter[i].HP_HZ = 30;
    914          		Filter[i].Fs = 16000;    //sop1hc: 16000
    915          		Filter[i].Out_MicChannels = 1;
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xED85 0x8A02      VSTR     S16,[R5, #+8]
   \   00000032   0x802F             STRH     R7,[R5, #+0]
   \   00000034   0x81E8             STRH     R0,[R5, #+14]
    916          		Filter[i].In_MicChannels = 1;
   \   00000036   0x81A8             STRH     R0,[R5, #+12]
    917          		PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
   \   00000038   0x4628             MOV      R0,R5
   \   0000003A   0x.... 0x....      BL       PDM_Filter_Init
    918          	}
   \   0000003E   0x3534             ADDS     R5,R5,#+52
   \   00000040   0x1E76             SUBS     R6,R6,#+1
   \   00000042   0xD1F1             BNE.N    ??SPI5_Init_0
    919          
    920          
    921            hspi5.Instance = SPI5;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable26_10  ;; 0x40015000
   \   00000048   0x6020             STR      R0,[R4, #+0]
    922            hspi5.Init.Mode = SPI_MODE_SLAVE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x6060             STR      R0,[R4, #+4]
    923            hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000004E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000052   0x60A0             STR      R0,[R4, #+8]
    924            hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000054   0xF44F 0x6070      MOV      R0,#+3840
   \   00000058   0x60E0             STR      R0,[R4, #+12]
    925            hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x6120             STR      R0,[R4, #+16]
    926            hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x6160             STR      R0,[R4, #+20]
    927            hspi5.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000062   0xF44F 0x7000      MOV      R0,#+512
   \   00000066   0x61A0             STR      R0,[R4, #+24]
    928            hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x6220             STR      R0,[R4, #+32]
    929            hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000006C   0x6260             STR      R0,[R4, #+36]
    930            hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000006E   0x62A0             STR      R0,[R4, #+40]
    931            hspi5.Init.CRCPolynomial = 7;
   \   00000070   0x2007             MOVS     R0,#+7
   \   00000072   0x62E0             STR      R0,[R4, #+44]
    932            hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x6320             STR      R0,[R4, #+48]
    933            hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000078   0x6360             STR      R0,[R4, #+52]
    934            //hspi5.RxISR = SPI5_CallBack;
    935            HAL_SPI_Init(&hspi5);
   \   0000007A   0x4620             MOV      R0,R4
   \   0000007C   0xECBD 0x8B02      VPOP     {D8}
   \   00000080   0xB001             ADD      SP,SP,#+4
   \   00000082   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   00000086   0x.... 0x....      B.W      HAL_SPI_Init
    936          
    937          
    938            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    939            /* Enable TXE, RXNE and ERR interrupt */
    940           //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
    941          
    942           //__HAL_SPI_ENABLE(&hspi5);
    943          
    944          }
    945          

   \                                 In section .text, align 2, keep-with-next
    946          void SPI6_Init(void)
    947          {
    948          	
    949            hspi6.Instance = SPI6;
   \                     SPI6_Init: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable25
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable26_12  ;; 0x40015400
   \   00000008   0x6641             STR      R1,[R0, #+100]
    950            hspi6.Init.Mode = SPI_MODE_SLAVE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6681             STR      R1,[R0, #+104]
    951            hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;//SPI_DIRECTION_2LINES_RXONLY
   \   0000000E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000012   0x66C1             STR      R1,[R0, #+108]
    952            hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000014   0xF44F 0x6170      MOV      R1,#+3840
   \   00000018   0x6701             STR      R1,[R0, #+112]
    953            hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6741             STR      R1,[R0, #+116]
    954            hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000001E   0x6781             STR      R1,[R0, #+120]
    955            hspi6.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   00000020   0xF44F 0x7100      MOV      R1,#+512
   \   00000024   0x67C1             STR      R1,[R0, #+124]
    956            hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0xF8C0 0x1084      STR      R1,[R0, #+132]
    957            hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
   \   0000002C   0xF8C0 0x1088      STR      R1,[R0, #+136]
    958            hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   00000030   0xF8C0 0x108C      STR      R1,[R0, #+140]
    959            hspi6.Init.CRCPolynomial = 7;
   \   00000034   0x2107             MOVS     R1,#+7
   \   00000036   0xF8C0 0x1090      STR      R1,[R0, #+144]
    960            hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xF8C0 0x1094      STR      R1,[R0, #+148]
    961            hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000040   0xF8C0 0x1098      STR      R1,[R0, #+152]
    962            //hspi6.RxISR = SPI6_CallBack;
    963            HAL_SPI_Init(&hspi6);
   \   00000044   0x3064             ADDS     R0,R0,#+100
   \   00000046   0x.... 0x....      B.W      HAL_SPI_Init
    964          
    965          
    966            //HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,GPIO_PIN_SET);
    967            /* Enable TXE, RXNE and ERR interrupt */
    968           //__HAL_SPI_ENABLE_IT(&hspi6, (SPI_IT_RXNE| SPI_IT_ERR));
    969          
    970           //__HAL_SPI_ENABLE(&hspi6);
    971          
    972          }
    973          
    974          
    975          
    976          

   \                                 In section .text, align 2, keep-with-next
    977          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
    978          {
   \                     HAL_SPI_MspInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
    979          
    980            GPIO_InitTypeDef GPIO_InitStruct;
    981            if (hspi->Instance==SPI1)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable26_1  ;; 0x40013000
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD138             BNE.N    ??HAL_SPI_MspInit_0
    982            {
    983          	  /* USER CODE BEGIN SPI1_MspInit 0 */
    984          	  
    985          	  /* USER CODE END SPI1_MspInit 0 */
    986          	  /* Peripheral clock enable */
    987          	  __SPI1_CLK_ENABLE();
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable26_13  ;; 0x40023830
   \   00000016   0x9000             STR      R0,[SP, #+0]
    988          	  __GPIOA_CLK_ENABLE();
    989          	  __GPIOC_CLK_ENABLE();
    990          	  
    991          	  /**I2S1 GPIO Configuration	
    992          		PA4 	------> I2S1_WS --> LRCKO
    993          		PA5 	------> I2S1_CK --> BICKO
    994          		PA7 	------> I2S1_SD --> SDO12
    995          		PC4 	------> I2S1_MCK
    996          		*/
    997          		GPIO_InitStruct.Pin =  GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    998          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    999          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1000          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1001          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1002          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   00000018   0xA901             ADD      R1,SP,#+4
   \   0000001A   0x6968             LDR      R0,[R5, #+20]
   \   0000001C   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   00000020   0x6168             STR      R0,[R5, #+20]
   \   00000022   0x6968             LDR      R0,[R5, #+20]
   \   00000024   0xF400 0x5080      AND      R0,R0,#0x1000
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x9800             LDR      R0,[SP, #+0]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000036   0x6028             STR      R0,[R5, #+0]
   \   00000038   0x6828             LDR      R0,[R5, #+0]
   \   0000003A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0x6828             LDR      R0,[R5, #+0]
   \   00000048   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000004C   0x6028             STR      R0,[R5, #+0]
   \   0000004E   0x6828             LDR      R0,[R5, #+0]
   \   00000050   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x20F0             MOVS     R0,#+240
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x9002             STR      R0,[SP, #+8]
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x9003             STR      R0,[SP, #+12]
   \   00000064   0x2003             MOVS     R0,#+3
   \   00000066   0x9004             STR      R0,[SP, #+16]
   \   00000068   0x2005             MOVS     R0,#+5
   \   0000006A   0x9005             STR      R0,[SP, #+20]
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable26_3  ;; 0x40020000
   \   00000070   0x.... 0x....      BL       HAL_GPIO_Init
   1003          	  
   1004          		//GPIO_InitStruct.Pin = GPIO_PIN_4;
   1005          		//GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1006          		//GPIO_InitStruct.Pull = GPIO_NOPULL;
   1007          		//GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1008          		//GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   1009          		//HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   1010          		
   1011          	  /* Peripheral interrupt init*/
   1012          		HAL_NVIC_SetPriority(SPI1_IRQn, INTERRUPT_PRI_SDO12, 0);
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x2023             MOVS     R0,#+35
   \   0000007A   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1013          		HAL_NVIC_EnableIRQ(SPI1_IRQn);
   \   0000007E   0x2023             MOVS     R0,#+35
   \   00000080   0xE132             B.N      ??HAL_SPI_MspInit_1
   1014          	  /* USER CODE BEGIN SPI1_MspInit 1 */
   1015          	  
   1016          	  /* USER CODE END SPI1_MspInit 1 */
   1017          
   1018            }
   1019            else if (hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable26_4  ;; 0x40003800
   \   00000086   0x4288             CMP      R0,R1
   \   00000088   0xD152             BNE.N    ??HAL_SPI_MspInit_2
   1020            {
   1021          	  /* USER CODE BEGIN SPI2_MspInit 0 */
   1022          	  
   1023          	  /* USER CODE END SPI2_MspInit 0 */
   1024          		/* Peripheral clock enable */
   1025          		__SPI2_CLK_ENABLE();
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x.... 0x....      LDR.W    R5,??DataTable26_13  ;; 0x40023830
   \   00000090   0x9000             STR      R0,[SP, #+0]
   1026          		__GPIOI_CLK_ENABLE();
   1027          		__GPIOB_CLK_ENABLE();
   1028          		__GPIOC_CLK_ENABLE();
   1029          	  
   1030          		/**I2S2 GPIO Configuration	   
   1031          		PC1 	------> I2S2_SD  : PI3 PC1 PC3 PB15 	
   1032          		PB13	 ------> I2S2_CK :PD3 PB10 PB13 PA9 PI1 
   1033          		PB12	 ------> I2S2_WS : PB12 PI0 PB4 PB9  
   1034          	  
   1035          	  
   1036          		*/
   1037          		GPIO_InitStruct.Pin = GPIO_PIN_1; //SD
   1038          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1039          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1040          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1041          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1042          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000092   0xA901             ADD      R1,SP,#+4
   \   00000094   0x6928             LDR      R0,[R5, #+16]
   \   00000096   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   0000009A   0x6128             STR      R0,[R5, #+16]
   \   0000009C   0x6928             LDR      R0,[R5, #+16]
   \   0000009E   0xF400 0x4080      AND      R0,R0,#0x4000
   \   000000A2   0x9000             STR      R0,[SP, #+0]
   \   000000A4   0x9800             LDR      R0,[SP, #+0]
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x9000             STR      R0,[SP, #+0]
   \   000000AA   0x6828             LDR      R0,[R5, #+0]
   \   000000AC   0xF440 0x7080      ORR      R0,R0,#0x100
   \   000000B0   0x6028             STR      R0,[R5, #+0]
   \   000000B2   0x6828             LDR      R0,[R5, #+0]
   \   000000B4   0xF400 0x7080      AND      R0,R0,#0x100
   \   000000B8   0x9000             STR      R0,[SP, #+0]
   \   000000BA   0x9800             LDR      R0,[SP, #+0]
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0x6828             LDR      R0,[R5, #+0]
   \   000000C2   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000C6   0x6028             STR      R0,[R5, #+0]
   \   000000C8   0x6828             LDR      R0,[R5, #+0]
   \   000000CA   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \   000000D0   0x9800             LDR      R0,[SP, #+0]
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x9000             STR      R0,[SP, #+0]
   \   000000D6   0x6828             LDR      R0,[R5, #+0]
   \   000000D8   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000DC   0x6028             STR      R0,[R5, #+0]
   \   000000DE   0x6828             LDR      R0,[R5, #+0]
   \   000000E0   0xF000 0x0004      AND      R0,R0,#0x4
   \   000000E4   0x9000             STR      R0,[SP, #+0]
   \   000000E6   0x9800             LDR      R0,[SP, #+0]
   \   000000E8   0x2002             MOVS     R0,#+2
   \   000000EA   0x9001             STR      R0,[SP, #+4]
   \   000000EC   0x9002             STR      R0,[SP, #+8]
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x9003             STR      R0,[SP, #+12]
   \   000000F2   0x2003             MOVS     R0,#+3
   \   000000F4   0x9004             STR      R0,[SP, #+16]
   \   000000F6   0x2005             MOVS     R0,#+5
   \   000000F8   0x9005             STR      R0,[SP, #+20]
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable26_7  ;; 0x40020800
   \   000000FE   0x.... 0x....      BL       HAL_GPIO_Init
   1043          	  
   1044          		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;//WS --> GPIO_PIN_12
   \   00000102   0xF44F 0x5040      MOV      R0,#+12288
   1045          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1046          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   1047          		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1048          		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   1049          		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000106   0xA901             ADD      R1,SP,#+4
   \   00000108   0x9001             STR      R0,[SP, #+4]
   \   0000010A   0x2002             MOVS     R0,#+2
   \   0000010C   0x9002             STR      R0,[SP, #+8]
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x9003             STR      R0,[SP, #+12]
   \   00000112   0x2003             MOVS     R0,#+3
   \   00000114   0x9004             STR      R0,[SP, #+16]
   \   00000116   0x2005             MOVS     R0,#+5
   \   00000118   0x9005             STR      R0,[SP, #+20]
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable26_5  ;; 0x40020400
   \   0000011E   0x.... 0x....      BL       HAL_GPIO_Init
   1050          	  
   1051          	  
   1052          		/* Peripheral interrupt init*/
   1053          		HAL_NVIC_SetPriority(SPI2_IRQn, INTERRUPT_PRI_SDO34, 0);
   \   00000122   0x2200             MOVS     R2,#+0
   \   00000124   0x2101             MOVS     R1,#+1
   \   00000126   0x2024             MOVS     R0,#+36
   \   00000128   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1054          		HAL_NVIC_EnableIRQ(SPI2_IRQn);
   \   0000012C   0x2024             MOVS     R0,#+36
   \   0000012E   0xE0DB             B.N      ??HAL_SPI_MspInit_1
   1055          		/* USER CODE BEGIN SPI2_MspInit 1 */
   1056          	  
   1057          	  /* USER CODE END SPI2_MspInit 1 */
   1058          
   1059          
   1060            }
   1061            else if (hspi->Instance==SPI3)
   \                     ??HAL_SPI_MspInit_2: (+1)
   \   00000130   0x.... 0x....      LDR.W    R1,??DataTable26_6  ;; 0x40003c00
   \   00000134   0x4288             CMP      R0,R1
   \   00000136   0xF040 0x8098      BNE.W    ??HAL_SPI_MspInit_3
   1062            {
   1063          	  
   1064              /**I2S3 GPIO Configuration    
   1065                 PB2     ------> I2S3_SD
   1066                 PA15     ------> I2S3_WS (LRCK)
   1067                 PB3     ------> I2S3_CK 
   1068          	   PC7    ------> MCLK
   1069              */
   1070           
   1071            /* USER CODE BEGIN SPI3_MspInit 1 */
   1072            __SPI3_CLK_ENABLE();
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x.... 0x....      LDR.W    R5,??DataTable26_13  ;; 0x40023830
   \   00000140   0x9000             STR      R0,[SP, #+0]
   1073            __GPIOA_CLK_ENABLE();
   1074            __GPIOB_CLK_ENABLE();
   1075          
   1076            GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2; 
   1077            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1078            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1079            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1080            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1081            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000142   0xA901             ADD      R1,SP,#+4
   \   00000144   0x6928             LDR      R0,[R5, #+16]
   \   00000146   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   0000014A   0x6128             STR      R0,[R5, #+16]
   \   0000014C   0x6928             LDR      R0,[R5, #+16]
   \   0000014E   0xF400 0x4000      AND      R0,R0,#0x8000
   \   00000152   0x9000             STR      R0,[SP, #+0]
   \   00000154   0x9800             LDR      R0,[SP, #+0]
   \   00000156   0x2000             MOVS     R0,#+0
   \   00000158   0x9000             STR      R0,[SP, #+0]
   \   0000015A   0x6828             LDR      R0,[R5, #+0]
   \   0000015C   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000160   0x6028             STR      R0,[R5, #+0]
   \   00000162   0x6828             LDR      R0,[R5, #+0]
   \   00000164   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000168   0x9000             STR      R0,[SP, #+0]
   \   0000016A   0x9800             LDR      R0,[SP, #+0]
   \   0000016C   0x2000             MOVS     R0,#+0
   \   0000016E   0x9000             STR      R0,[SP, #+0]
   \   00000170   0x6828             LDR      R0,[R5, #+0]
   \   00000172   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000176   0x6028             STR      R0,[R5, #+0]
   \   00000178   0x6828             LDR      R0,[R5, #+0]
   \   0000017A   0xF000 0x0002      AND      R0,R0,#0x2
   \   0000017E   0x9000             STR      R0,[SP, #+0]
   \   00000180   0x9800             LDR      R0,[SP, #+0]
   \   00000182   0x200C             MOVS     R0,#+12
   \   00000184   0x9001             STR      R0,[SP, #+4]
   \   00000186   0x2002             MOVS     R0,#+2
   \   00000188   0x9002             STR      R0,[SP, #+8]
   \   0000018A   0x2003             MOVS     R0,#+3
   \   0000018C   0x9004             STR      R0,[SP, #+16]
   \   0000018E   0x2000             MOVS     R0,#+0
   \   00000190   0x9003             STR      R0,[SP, #+12]
   \   00000192   0x2006             MOVS     R0,#+6
   \   00000194   0x9005             STR      R0,[SP, #+20]
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable26_5  ;; 0x40020400
   \   0000019A   0x.... 0x....      BL       HAL_GPIO_Init
   1082          
   1083          
   1084            GPIO_InitStruct.Pin = GPIO_PIN_15;
   \   0000019E   0xF44F 0x4000      MOV      R0,#+32768
   1085            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1086            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1087            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   000001A2   0xA901             ADD      R1,SP,#+4
   \   000001A4   0x9001             STR      R0,[SP, #+4]
   \   000001A6   0x2002             MOVS     R0,#+2
   \   000001A8   0x9002             STR      R0,[SP, #+8]
   \   000001AA   0x2006             MOVS     R0,#+6
   \   000001AC   0x9005             STR      R0,[SP, #+20]
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable26_3  ;; 0x40020000
   \   000001B2   0x.... 0x....      BL       HAL_GPIO_Init
   1088          
   1089          #ifdef CODEC_MCLK_ENABLED
   1090            __GPIOC_CLK_ENABLE();
   \   000001B6   0x2000             MOVS     R0,#+0
   1091            GPIO_InitStruct.Pin = GPIO_PIN_7; 
   1092            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1093            GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1094            GPIO_InitStruct.Pull = GPIO_NOPULL;
   1095            GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   1096            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   000001B8   0xA901             ADD      R1,SP,#+4
   \   000001BA   0x9000             STR      R0,[SP, #+0]
   \   000001BC   0x6828             LDR      R0,[R5, #+0]
   \   000001BE   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000001C2   0x6028             STR      R0,[R5, #+0]
   \   000001C4   0x6828             LDR      R0,[R5, #+0]
   \   000001C6   0xF000 0x0004      AND      R0,R0,#0x4
   \   000001CA   0x9000             STR      R0,[SP, #+0]
   \   000001CC   0x9800             LDR      R0,[SP, #+0]
   \   000001CE   0x2080             MOVS     R0,#+128
   \   000001D0   0x9001             STR      R0,[SP, #+4]
   \   000001D2   0x2002             MOVS     R0,#+2
   \   000001D4   0x9002             STR      R0,[SP, #+8]
   \   000001D6   0x2003             MOVS     R0,#+3
   \   000001D8   0x9004             STR      R0,[SP, #+16]
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x9003             STR      R0,[SP, #+12]
   \   000001DE   0x2006             MOVS     R0,#+6
   \   000001E0   0x9005             STR      R0,[SP, #+20]
   \   000001E2   0x.... 0x....      LDR.W    R0,??DataTable26_7  ;; 0x40020800
   \   000001E6   0x.... 0x....      BL       HAL_GPIO_Init
   1097          
   1098          #endif /* CODEC_MCLK_ENABLED */ 
   1099          
   1100          #ifdef I2S_INTERRUPT   
   1101               /* Enable and set Button EXTI Interrupt to the lowest priority */
   1102               //HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 0x00, 0x01);
   1103               //HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
   1104          
   1105               /* Enable the I2S DMA request */
   1106               //__HAL_I2S_ENABLE_IT(&hi2s3, SPI_I2S_DMAReq_Tx);
   1107               //__HAL_I2S_ENABLE(&hi2s3);
   1108            	    /* Peripheral interrupt init*/
   1109          		HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
   1110          		HAL_NVIC_EnableIRQ(SPI3_IRQn);
   1111          #endif
   1112          
   1113                /* Enable the DMA clock */ 
   1114          	  __HAL_RCC_DMA1_CLK_ENABLE();
   \   000001EA   0x2000             MOVS     R0,#+0
   \   000001EC   0x9000             STR      R0,[SP, #+0]
   \   000001EE   0x6828             LDR      R0,[R5, #+0]
   \   000001F0   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000001F4   0x6028             STR      R0,[R5, #+0]
   \   000001F6   0x6828             LDR      R0,[R5, #+0]
   1115          
   1116                /* Configure the DMA Stream */
   1117                //HAL_DMA_DeInit(&DmaHandle);
   1118          
   1119                /* Set the parameters to be configured */ 
   1120          	  DmaHandle.Instance = DMA1_Stream7;
   \   000001F8   0x.... 0x....      LDR.W    R5,??DataTable26_8
   \   000001FC   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000200   0x9000             STR      R0,[SP, #+0]
   \   00000202   0x9800             LDR      R0,[SP, #+0]
   \   00000204   0x.... 0x....      LDR.W    R0,??DataTable26_26  ;; 0x400260b8
   \   00000208   0x6028             STR      R0,[R5, #+0]
   1121                DmaHandle.Init.Channel = DMA_CHANNEL_0;
   \   0000020A   0x2000             MOVS     R0,#+0
   \   0000020C   0x6068             STR      R0,[R5, #+4]
   1122          	  DmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \   0000020E   0x2040             MOVS     R0,#+64
   \   00000210   0x60A8             STR      R0,[R5, #+8]
   1123          	  DmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
   \   00000212   0x2000             MOVS     R0,#+0
   \   00000214   0x60E8             STR      R0,[R5, #+12]
   1124          	  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;
   \   00000216   0xF44F 0x6080      MOV      R0,#+1024
   \   0000021A   0x6128             STR      R0,[R5, #+16]
   1125          	  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   0000021C   0xF44F 0x6000      MOV      R0,#+2048
   \   00000220   0x6168             STR      R0,[R5, #+20]
   1126                DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; 
   \   00000222   0xF44F 0x5000      MOV      R0,#+8192
   \   00000226   0x61A8             STR      R0,[R5, #+24]
   1127          	  DmaHandle.Init.Mode = DMA_NORMAL;
   \   00000228   0x2000             MOVS     R0,#+0
   \   0000022A   0x61E8             STR      R0,[R5, #+28]
   1128                DmaHandle.Init.Priority = DMA_PRIORITY_HIGH; 
   \   0000022C   0xF44F 0x3000      MOV      R0,#+131072
   \   00000230   0x6228             STR      R0,[R5, #+32]
   1129          	  DmaHandle.Init.FIFOMode = DMA_FIFOMODE_ENABLE;//DMA_FIFOMODE_DISABLE
   \   00000232   0x2004             MOVS     R0,#+4
   \   00000234   0x6268             STR      R0,[R5, #+36]
   1130                DmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \   00000236   0x2003             MOVS     R0,#+3
   \   00000238   0x62A8             STR      R0,[R5, #+40]
   1131                DmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
   \   0000023A   0x2000             MOVS     R0,#+0
   \   0000023C   0x62E8             STR      R0,[R5, #+44]
   1132                DmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;	  
   \   0000023E   0x6328             STR      R0,[R5, #+48]
   1133                //DmaHandle.Instance->PAR =(uint32_t)&SPI3->DR;//CODEC_I2S_ADDRESS
   1134                //DmaHandle.Instance->M0AR = (uint32_t)0;
   1135                //DmaHandle.Instance->NDTR = (uint32_t)0xFFFE;
   1136                //DmaHandle.XferCpltCallback = &TC_Callback;
   1137           
   1138          
   1139                /* Associate the initialized DMA handle to the the SPI handle */
   1140                __HAL_LINKDMA(hspi, hdmatx, DmaHandle);
   1141                //__HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   1142          
   1143          	   /* Deinitialize the Stream for new transfer */
   1144                 HAL_DMA_DeInit(&DmaHandle);
   \   00000240   0x4628             MOV      R0,R5
   \   00000242   0x6565             STR      R5,[R4, #+84]
   \   00000244   0x63AC             STR      R4,[R5, #+56]
   \   00000246   0x.... 0x....      BL       HAL_DMA_DeInit
   1145                 /* Configure the DMA Stream */
   1146          	   HAL_DMA_Init(&DmaHandle);
   \   0000024A   0x4628             MOV      R0,R5
   \   0000024C   0x.... 0x....      BL       HAL_DMA_Init
   1147          
   1148                /* Set Interrupt Group Priority */
   1149                HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, INTERRUPT_PRI_DMA, 0);
   \   00000250   0x2200             MOVS     R2,#+0
   \   00000252   0x2107             MOVS     R1,#+7
   \   00000254   0x202F             MOVS     R0,#+47
   \   00000256   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1150                /* Enable the DMA STREAM global Interrupt */
   1151                HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);    
   \   0000025A   0x202F             MOVS     R0,#+47
   \   0000025C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1152          
   1153          	  __HAL_DMA_ENABLE_IT(&DmaHandle, DMA_IT_TC);
   \   00000260   0x6828             LDR      R0,[R5, #+0]
   \   00000262   0x6801             LDR      R1,[R0, #+0]
   \   00000264   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000268   0xE123             B.N      ??HAL_SPI_MspInit_4
   1154          	    
   1155            }
   1156            else if(hspi->Instance==SPI4)
   \                     ??HAL_SPI_MspInit_3: (+1)
   \   0000026A   0x.... 0x....      LDR.W    R1,??DataTable26_9  ;; 0x40013400
   \   0000026E   0x4288             CMP      R0,R1
   \   00000270   0xD13E             BNE.N    ??HAL_SPI_MspInit_5
   1157            {
   1158            /* USER CODE BEGIN SPI4_MspInit 0 */
   1159          
   1160            /* USER CODE END SPI4_MspInit 0 */
   1161              /* Peripheral clock enable */
   1162              __SPI4_CLK_ENABLE();
   \   00000272   0x2000             MOVS     R0,#+0
   \   00000274   0x.... 0x....      LDR.W    R5,??DataTable26_13  ;; 0x40023830
   \   00000278   0x9000             STR      R0,[SP, #+0]
   1163              __HAL_RCC_GPIOE_CLK_ENABLE();
   1164            
   1165            
   1166              /**SPI4 GPIO Configuration    
   1167              PE2     ------> SPI4_SCK
   1168              PE4     ------> SPI4_NSS
   1169              PE5     ------> SPI4_MISO
   1170              PE6     ------> SPI4_MOSI 
   1171              */
   1172              GPIO_InitStruct.Pin = GPIO_PIN_2;
   1173              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1174              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1175              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1176              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   1177              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   \   0000027A   0x....             LDR.N    R4,??DataTable20  ;; 0x40021000
   \   0000027C   0x6968             LDR      R0,[R5, #+20]
   \   0000027E   0xA901             ADD      R1,SP,#+4
   \   00000280   0xF440 0x5000      ORR      R0,R0,#0x2000
   \   00000284   0x6168             STR      R0,[R5, #+20]
   \   00000286   0x6968             LDR      R0,[R5, #+20]
   \   00000288   0xF400 0x5000      AND      R0,R0,#0x2000
   \   0000028C   0x9000             STR      R0,[SP, #+0]
   \   0000028E   0x9800             LDR      R0,[SP, #+0]
   \   00000290   0x2000             MOVS     R0,#+0
   \   00000292   0x9000             STR      R0,[SP, #+0]
   \   00000294   0x6828             LDR      R0,[R5, #+0]
   \   00000296   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000029A   0x6028             STR      R0,[R5, #+0]
   \   0000029C   0x6828             LDR      R0,[R5, #+0]
   \   0000029E   0xF000 0x0010      AND      R0,R0,#0x10
   \   000002A2   0x9000             STR      R0,[SP, #+0]
   \   000002A4   0x9800             LDR      R0,[SP, #+0]
   \   000002A6   0x2004             MOVS     R0,#+4
   \   000002A8   0x9001             STR      R0,[SP, #+4]
   \   000002AA   0x2002             MOVS     R0,#+2
   \   000002AC   0x9002             STR      R0,[SP, #+8]
   \   000002AE   0x2000             MOVS     R0,#+0
   \   000002B0   0x9003             STR      R0,[SP, #+12]
   \   000002B2   0x2003             MOVS     R0,#+3
   \   000002B4   0x9004             STR      R0,[SP, #+16]
   \   000002B6   0x2005             MOVS     R0,#+5
   \   000002B8   0x9005             STR      R0,[SP, #+20]
   \   000002BA   0x4620             MOV      R0,R4
   \   000002BC   0x.... 0x....      BL       HAL_GPIO_Init
   1178              
   1179              GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
   \   000002C0   0x2070             MOVS     R0,#+112
   1180              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1181              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1182              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1183              GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
   1184              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
   \   000002C2   0xA901             ADD      R1,SP,#+4
   \   000002C4   0x9001             STR      R0,[SP, #+4]
   \   000002C6   0x2002             MOVS     R0,#+2
   \   000002C8   0x9002             STR      R0,[SP, #+8]
   \   000002CA   0x2000             MOVS     R0,#+0
   \   000002CC   0x9003             STR      R0,[SP, #+12]
   \   000002CE   0x2003             MOVS     R0,#+3
   \   000002D0   0x9004             STR      R0,[SP, #+16]
   \   000002D2   0x2005             MOVS     R0,#+5
   \   000002D4   0x9005             STR      R0,[SP, #+20]
   \   000002D6   0x4620             MOV      R0,R4
   \   000002D8   0x.... 0x....      BL       HAL_GPIO_Init
   1185          
   1186          	/* Peripheral interrupt init*/
   1187              HAL_NVIC_SetPriority(SPI4_IRQn, INTERRUPT_PRI_SDO56, 0);
   \   000002DC   0x2200             MOVS     R2,#+0
   \   000002DE   0x2102             MOVS     R1,#+2
   \   000002E0   0x2054             MOVS     R0,#+84
   \   000002E2   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1188              HAL_NVIC_EnableIRQ(SPI4_IRQn);
   \   000002E6   0x2054             MOVS     R0,#+84
   \                     ??HAL_SPI_MspInit_1: (+1)
   \   000002E8   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1189          
   1190            /* USER CODE BEGIN SPI4_MspInit 1 */
   1191          
   1192            /* USER CODE END SPI4_MspInit 1 */
   1193            }
   1194            else if(hspi->Instance==SPI5)
   1195            {
   1196            /* USER CODE BEGIN SPI5_MspInit 0 */
   1197          
   1198            /* USER CODE END SPI5_MspInit 0 */
   1199              /* Peripheral clock enable */
   1200              __HAL_RCC_SPI5_CLK_ENABLE();
   1201              __HAL_RCC_GPIOF_CLK_ENABLE();
   1202            
   1203              /**SPI5 GPIO Configuration    
   1204              PF7     ------> SPI5_SCK  --> PF7
   1205              PF11     ------> SPI5_MOSI --> PF9
   1206                               SPI5_MISO --> PF8
   1207                                    NSS   -->  PF6
   1208              */
   1209              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
   1210              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   1211              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1212              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1213              GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
   1214              HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
   1215          
   1216          #if 0
   1217            /* Peripheral interrupt init*/
   1218              HAL_NVIC_SetPriority(SPI5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1219              HAL_NVIC_EnableIRQ(SPI5_IRQn);
   1220          #else
   1221          	/* Peripheral DMA init*/
   1222              __HAL_RCC_DMA2_CLK_ENABLE();
   1223          	hdma_spi5_rx.Instance = DMA2_Stream5;
   1224          	hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
   1225          	hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1226          	hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1227          	hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
   1228          	hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1229          	hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   1230          	hdma_spi5_rx.Init.Mode = DMA_CIRCULAR;
   1231          	hdma_spi5_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1232          	hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1233          	hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1234          	hdma_spi5_rx.Init.MemBurst = DMA_MBURST_INC4;
   1235          	hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_INC4;
   1236          	HAL_DMA_Init(&hdma_spi5_rx);
   1237          
   1238              __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
   1239          
   1240          	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, INTERRUPT_PRI_SDO7, 0);
   1241          	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
   1242          	  __HAL_DMA_ENABLE_IT(&hdma_spi5_rx, DMA_IT_TC);
   1243          	  __HAL_DMA_ENABLE_IT(&hdma_spi5_rx, DMA_IT_HT);
   1244          
   1245          #endif
   1246            /* USER CODE END SPI5_MspInit 1 */
   1247            }
   1248            else if(hspi->Instance==SPI6)
   1249            {
   1250            /* USER CODE BEGIN SPI6_MspInit 0 */
   1251          
   1252            /* USER CODE END SPI6_MspInit 0 */
   1253              /* Peripheral clock enable */
   1254              __SPI6_CLK_ENABLE();
   1255              __HAL_RCC_GPIOG_CLK_ENABLE();
   1256            
   1257              /**SPI6 GPIO Configuration    
   1258              PG13     ------> SPI6_SCK
   1259              PG14     ------> SPI6_MOSI 
   1260              */
   1261              GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
   1262              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1263              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1264              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1265              GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
   1266              HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
   1267          
   1268          #if 0
   1269          	  /* Peripheral interrupt init*/
   1270              HAL_NVIC_SetPriority(SPI6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1271              HAL_NVIC_EnableIRQ(SPI6_IRQn);
   1272          #else
   1273          	/* Peripheral DMA init*/
   1274          	__HAL_RCC_DMA2_CLK_ENABLE();
   1275          	hdma_spi6_rx.Instance = DMA2_Stream6;
   1276          	hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
   1277          	hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   1278          	hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   1279          	hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
   1280          	hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1281          	hdma_spi6_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
   1282          	hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
   1283          	hdma_spi6_rx.Init.Priority = DMA_PRIORITY_HIGH;
   1284          	hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
   1285          	hdma_spi6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   1286          	hdma_spi6_rx.Init.MemBurst = DMA_PBURST_INC4;
   1287          	hdma_spi6_rx.Init.PeriphBurst = DMA_PBURST_INC4;
   1288          	HAL_DMA_Init(&hdma_spi6_rx);
   1289          
   1290          	__HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
   1291          
   1292          	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, INTERRUPT_PRI_SDO8, 1);
   1293          	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
   1294          
   1295              __HAL_DMA_ENABLE_IT(&hdma_spi6_rx, DMA_IT_TC);
   1296          	__HAL_DMA_ENABLE_IT(&hdma_spi6_rx, DMA_IT_HT);
   1297          
   1298          #endif
   1299            }
   1300          
   1301          }
   \   000002EC   0xB007             ADD      SP,SP,#+28
   \   000002EE   0xBD30             POP      {R4,R5,PC}
   \                     ??HAL_SPI_MspInit_5: (+1)
   \   000002F0   0x.... 0x....      LDR.W    R1,??DataTable26_10  ;; 0x40015000
   \   000002F4   0x4288             CMP      R0,R1
   \   000002F6   0xD167             BNE.N    ??HAL_SPI_MspInit_6
   \   000002F8   0x2000             MOVS     R0,#+0
   \   000002FA   0x.... 0x....      LDR.W    R5,??DataTable26_13  ;; 0x40023830
   \   000002FE   0x9000             STR      R0,[SP, #+0]
   \   00000300   0xA901             ADD      R1,SP,#+4
   \   00000302   0x6968             LDR      R0,[R5, #+20]
   \   00000304   0xF440 0x1080      ORR      R0,R0,#0x100000
   \   00000308   0x6168             STR      R0,[R5, #+20]
   \   0000030A   0x6968             LDR      R0,[R5, #+20]
   \   0000030C   0xF400 0x1080      AND      R0,R0,#0x100000
   \   00000310   0x9000             STR      R0,[SP, #+0]
   \   00000312   0x9800             LDR      R0,[SP, #+0]
   \   00000314   0x2000             MOVS     R0,#+0
   \   00000316   0x9000             STR      R0,[SP, #+0]
   \   00000318   0x6828             LDR      R0,[R5, #+0]
   \   0000031A   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000031E   0x6028             STR      R0,[R5, #+0]
   \   00000320   0x6828             LDR      R0,[R5, #+0]
   \   00000322   0xF000 0x0020      AND      R0,R0,#0x20
   \   00000326   0x9000             STR      R0,[SP, #+0]
   \   00000328   0x9800             LDR      R0,[SP, #+0]
   \   0000032A   0xF44F 0x7070      MOV      R0,#+960
   \   0000032E   0x9001             STR      R0,[SP, #+4]
   \   00000330   0x2012             MOVS     R0,#+18
   \   00000332   0x9002             STR      R0,[SP, #+8]
   \   00000334   0x2001             MOVS     R0,#+1
   \   00000336   0x9003             STR      R0,[SP, #+12]
   \   00000338   0x2003             MOVS     R0,#+3
   \   0000033A   0x9004             STR      R0,[SP, #+16]
   \   0000033C   0x2005             MOVS     R0,#+5
   \   0000033E   0x9005             STR      R0,[SP, #+20]
   \   00000340   0x.... 0x....      LDR.W    R0,??DataTable26_11  ;; 0x40021400
   \   00000344   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000348   0x2000             MOVS     R0,#+0
   \   0000034A   0x9000             STR      R0,[SP, #+0]
   \   0000034C   0x6828             LDR      R0,[R5, #+0]
   \   0000034E   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   00000352   0x6028             STR      R0,[R5, #+0]
   \   00000354   0x6828             LDR      R0,[R5, #+0]
   \   00000356   0x.... 0x....      LDR.W    R5,??DataTable26_15
   \   0000035A   0xF400 0x0080      AND      R0,R0,#0x400000
   \   0000035E   0x9000             STR      R0,[SP, #+0]
   \   00000360   0x9800             LDR      R0,[SP, #+0]
   \   00000362   0x.... 0x....      LDR.W    R0,??DataTable26_26  ;; 0x400260b8
   \   00000366   0xF500 0x7074      ADD      R0,R0,#+976
   \   0000036A   0x6028             STR      R0,[R5, #+0]
   \   0000036C   0xF04F 0x6060      MOV      R0,#+234881024
   \   00000370   0x6068             STR      R0,[R5, #+4]
   \   00000372   0x2000             MOVS     R0,#+0
   \   00000374   0x60A8             STR      R0,[R5, #+8]
   \   00000376   0x60E8             STR      R0,[R5, #+12]
   \   00000378   0xF44F 0x6080      MOV      R0,#+1024
   \   0000037C   0x6128             STR      R0,[R5, #+16]
   \   0000037E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000382   0x6168             STR      R0,[R5, #+20]
   \   00000384   0xF44F 0x5000      MOV      R0,#+8192
   \   00000388   0x61A8             STR      R0,[R5, #+24]
   \   0000038A   0xF44F 0x7080      MOV      R0,#+256
   \   0000038E   0x61E8             STR      R0,[R5, #+28]
   \   00000390   0xF44F 0x3000      MOV      R0,#+131072
   \   00000394   0x6228             STR      R0,[R5, #+32]
   \   00000396   0x2000             MOVS     R0,#+0
   \   00000398   0x6268             STR      R0,[R5, #+36]
   \   0000039A   0x2003             MOVS     R0,#+3
   \   0000039C   0x62A8             STR      R0,[R5, #+40]
   \   0000039E   0xF44F 0x0000      MOV      R0,#+8388608
   \   000003A2   0x62E8             STR      R0,[R5, #+44]
   \   000003A4   0xF44F 0x1000      MOV      R0,#+2097152
   \   000003A8   0x6328             STR      R0,[R5, #+48]
   \   000003AA   0x4628             MOV      R0,R5
   \   000003AC   0x.... 0x....      BL       HAL_DMA_Init
   \   000003B0   0x65A5             STR      R5,[R4, #+88]
   \   000003B2   0x2200             MOVS     R2,#+0
   \   000003B4   0x63AC             STR      R4,[R5, #+56]
   \   000003B6   0x2104             MOVS     R1,#+4
   \   000003B8   0x2044             MOVS     R0,#+68
   \   000003BA   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   000003BE   0x2044             MOVS     R0,#+68
   \   000003C0   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   000003C4   0x6828             LDR      R0,[R5, #+0]
   \   000003C6   0xE06D             B.N      ??HAL_SPI_MspInit_7
   \                     ??HAL_SPI_MspInit_6: (+1)
   \   000003C8   0x.... 0x....      LDR.W    R1,??DataTable26_12  ;; 0x40015400
   \   000003CC   0x4288             CMP      R0,R1
   \   000003CE   0xD171             BNE.N    ??HAL_SPI_MspInit_8
   \   000003D0   0x2000             MOVS     R0,#+0
   \   000003D2   0x.... 0x....      LDR.W    R5,??DataTable26_13  ;; 0x40023830
   \   000003D6   0x9000             STR      R0,[SP, #+0]
   \   000003D8   0xA901             ADD      R1,SP,#+4
   \   000003DA   0x6968             LDR      R0,[R5, #+20]
   \   000003DC   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000003E0   0x6168             STR      R0,[R5, #+20]
   \   000003E2   0x6968             LDR      R0,[R5, #+20]
   \   000003E4   0xF400 0x1000      AND      R0,R0,#0x200000
   \   000003E8   0x9000             STR      R0,[SP, #+0]
   \   000003EA   0x9800             LDR      R0,[SP, #+0]
   \   000003EC   0x2000             MOVS     R0,#+0
   \   000003EE   0x9000             STR      R0,[SP, #+0]
   \   000003F0   0x6828             LDR      R0,[R5, #+0]
   \   000003F2   0xF040 0x0040      ORR      R0,R0,#0x40
   \   000003F6   0x6028             STR      R0,[R5, #+0]
   \   000003F8   0x6828             LDR      R0,[R5, #+0]
   \   000003FA   0xF000 0x0040      AND      R0,R0,#0x40
   \   000003FE   0x9000             STR      R0,[SP, #+0]
   \   00000400   0x9800             LDR      R0,[SP, #+0]
   \   00000402   0xF44F 0x40C0      MOV      R0,#+24576
   \   00000406   0x9001             STR      R0,[SP, #+4]
   \   00000408   0x2002             MOVS     R0,#+2
   \   0000040A   0x9002             STR      R0,[SP, #+8]
   \   0000040C   0x2000             MOVS     R0,#+0
   \   0000040E   0x9003             STR      R0,[SP, #+12]
   \   00000410   0x2003             MOVS     R0,#+3
   \   00000412   0x9004             STR      R0,[SP, #+16]
   \   00000414   0x2005             MOVS     R0,#+5
   \   00000416   0x9005             STR      R0,[SP, #+20]
   \   00000418   0x.... 0x....      LDR.W    R0,??DataTable26_14  ;; 0x40021800
   \   0000041C   0x.... 0x....      BL       HAL_GPIO_Init
   \   00000420   0x2000             MOVS     R0,#+0
   \   00000422   0x9000             STR      R0,[SP, #+0]
   \   00000424   0x6828             LDR      R0,[R5, #+0]
   \   00000426   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   0000042A   0x6028             STR      R0,[R5, #+0]
   \   0000042C   0x6828             LDR      R0,[R5, #+0]
   \   0000042E   0x.... 0x....      LDR.W    R5,??DataTable26_15
   \   00000432   0xF400 0x0080      AND      R0,R0,#0x400000
   \   00000436   0x9000             STR      R0,[SP, #+0]
   \   00000438   0x9800             LDR      R0,[SP, #+0]
   \   0000043A   0x.... 0x....      LDR.W    R0,??DataTable26_26  ;; 0x400260b8
   \   0000043E   0xF500 0x707A      ADD      R0,R0,#+1000
   \   00000442   0x65A8             STR      R0,[R5, #+88]
   \   00000444   0xF04F 0x7000      MOV      R0,#+33554432
   \   00000448   0x65E8             STR      R0,[R5, #+92]
   \   0000044A   0x2000             MOVS     R0,#+0
   \   0000044C   0x6628             STR      R0,[R5, #+96]
   \   0000044E   0x6668             STR      R0,[R5, #+100]
   \   00000450   0xF44F 0x6080      MOV      R0,#+1024
   \   00000454   0x66A8             STR      R0,[R5, #+104]
   \   00000456   0xF44F 0x6000      MOV      R0,#+2048
   \   0000045A   0x66E8             STR      R0,[R5, #+108]
   \   0000045C   0x6728             STR      R0,[R5, #+112]
   \   0000045E   0xF44F 0x7080      MOV      R0,#+256
   \   00000462   0x6768             STR      R0,[R5, #+116]
   \   00000464   0xF44F 0x3000      MOV      R0,#+131072
   \   00000468   0x67A8             STR      R0,[R5, #+120]
   \   0000046A   0x2000             MOVS     R0,#+0
   \   0000046C   0x67E8             STR      R0,[R5, #+124]
   \   0000046E   0x2003             MOVS     R0,#+3
   \   00000470   0xF8C5 0x0080      STR      R0,[R5, #+128]
   \   00000474   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000478   0xF8C5 0x0084      STR      R0,[R5, #+132]
   \   0000047C   0xF8C5 0x0088      STR      R0,[R5, #+136]
   \   00000480   0xF105 0x0058      ADD      R0,R5,#+88
   \   00000484   0x.... 0x....      BL       HAL_DMA_Init
   \   00000488   0xF105 0x0058      ADD      R0,R5,#+88
   \   0000048C   0x2201             MOVS     R2,#+1
   \   0000048E   0x65A0             STR      R0,[R4, #+88]
   \   00000490   0x2107             MOVS     R1,#+7
   \   00000492   0xF8C5 0x4090      STR      R4,[R5, #+144]
   \   00000496   0x2045             MOVS     R0,#+69
   \   00000498   0x.... 0x....      BL       HAL_NVIC_SetPriority
   \   0000049C   0x2045             MOVS     R0,#+69
   \   0000049E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   000004A2   0x6DA8             LDR      R0,[R5, #+88]
   \                     ??HAL_SPI_MspInit_7: (+1)
   \   000004A4   0x6801             LDR      R1,[R0, #+0]
   \   000004A6   0xF041 0x0110      ORR      R1,R1,#0x10
   \   000004AA   0x6001             STR      R1,[R0, #+0]
   \   000004AC   0x6801             LDR      R1,[R0, #+0]
   \   000004AE   0xF041 0x0108      ORR      R1,R1,#0x8
   \                     ??HAL_SPI_MspInit_4: (+1)
   \   000004B2   0x6001             STR      R1,[R0, #+0]
   \                     ??HAL_SPI_MspInit_8: (+1)
   \   000004B4   0xB007             ADD      SP,SP,#+28
   \   000004B6   0xBD30             POP      {R4,R5,PC}       ;; return
   1302          
   1303          
   1304          
   1305          
   1306          static void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
   1307          {
   1308            /* Check the parameters */
   1309            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1310            
   1311            /* Write in the DR register the data to be sent */
   1312            SPIx->DR = Data;
   1313          }
   1314          
   1315          
   1316          static uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
   1317          {
   1318            /* Check the parameters */
   1319            assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
   1320            
   1321            /* Return the data in the DR register */
   1322            return SPIx->DR;
   1323          }
   1324          
   1325          

   \                                 In section .text, align 2, keep-with-next
   1326          void RecordUpdBuf(void)
   1327          {
   1328          
   1329               if (WaveRecord_flgInt==2)
   \                     RecordUpdBuf: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable26_16
   \   00000004   0xF890 0x1084      LDRB     R1,[R0, #+132]
   \   00000008   0x2902             CMP      R1,#+2
   \   0000000A   0xD16F             BNE.N    ??RecordUpdBuf_0
   1330               {
   1331                  WaveRecord_flgInt=0;
   \   0000000C   0x2100             MOVS     R1,#+0
   1332          			if ((WaveRec_idxSens1 < (AUDIO_OUT_BUFFER_SIZE))&&(WaveRec_idxSens2 < (AUDIO_OUT_BUFFER_SIZE)))
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable26_17
   \   00000012   0xF880 0x1084      STRB     R1,[R0, #+132]
   \   00000016   0x8811             LDRH     R1,[R2, #+0]
   \   00000018   0xF5B1 0x6F80      CMP      R1,#+1024
   \   0000001C   0xBFBE             ITTT     LT 
   \   0000001E   0x.... 0x....      LDRLT.W  R1,??DataTable26_18
   \   00000022   0x880B             LDRHLT   R3,[R1, #+0]
   \   00000024   0xF5B3 0x6F80      CMPLT    R3,#+1024
   \   00000028   0xDA60             BGE.N    ??RecordUpdBuf_0
   1333          		//			  &&(stLR!=stLROld))
   1334          			{
   1335          		/*-------------------------------------------------------------------------------------------------------------
   1336          					  
   1337          			Sequence  Record Data					  Processing Data				  Player Data
   1338          					  
   1339          			1-------  Buffer1						  Buffer2						  Buffer3 BUF3_PLAY)
   1340          					  
   1341          			2-------  Buffer3						  Buffer1						  Buffer2 (BUF2_PLAY)		  
   1342          					  
   1343          			3-------  Buffer2						  Buffer3						  Buffer1 (BUF1_PLAY)
   1344          		 ---------------------------------------------------------------------------------------------------------------*/
   1345          					  /* Recording Audio Data */						 
   1346          					   switch (buffer_switch)
   \   0000002A   0x.... 0x....      LDR.W    R3,??DataTable26_19
   \   0000002E   0x781B             LDRB     R3,[R3, #+0]
   \   00000030   0xB11B             CBZ.N    R3,??RecordUpdBuf_1
   \   00000032   0x2B02             CMP      R3,#+2
   \   00000034   0xD011             BEQ.N    ??RecordUpdBuf_2
   \   00000036   0xD308             BCC.N    ??RecordUpdBuf_3
   \   00000038   0x4770             BX       LR
   1347          					   {
   1348          								case BUF1_PLAY:
   1349          
   1350          										Buffer2.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_1: (+1)
   \   0000003A   0x8813             LDRH     R3,[R2, #+0]
   \   0000003C   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000040   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000044   0x.... 0x....      LDR.W    R2,??DataTable26_20
   \   00000048   0xE00D             B.N      ??RecordUpdBuf_4
   1351          										Buffer2.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   1352          										Buffer2.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1353          										Buffer2.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   1354          										Buffer2.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1355          										Buffer2.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   1356          	
   1357          										break;
   1358          								case BUF2_PLAY:
   1359          
   1360          										Buffer3.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_3: (+1)
   \   0000004A   0x8813             LDRH     R3,[R2, #+0]
   \   0000004C   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000050   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000054   0x.... 0x....      LDR.W    R2,??DataTable26_21
   \   00000058   0xE005             B.N      ??RecordUpdBuf_4
   1361          										Buffer3.bufMIC2[WaveRec_idxSens2++] = vRawSens2;
   1362          										Buffer3.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   1363          										Buffer3.bufMIC4[WaveRec_idxSens4++] = vRawSens4;
   1364          										Buffer3.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   1365          										Buffer3.bufMIC6[WaveRec_idxSens6++] = vRawSens6;
   1366          		
   1367          
   1368          										break;
   1369          								case BUF3_PLAY:
   1370          
   1371          										Buffer1.bufMIC1[WaveRec_idxSens1++] = vRawSens1;
   \                     ??RecordUpdBuf_2: (+1)
   \   0000005A   0x8813             LDRH     R3,[R2, #+0]
   \   0000005C   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000060   0xF8A2 0xC000      STRH     R12,[R2, #+0]
   \   00000064   0x....             LDR.N    R2,??DataTable22
   \                     ??RecordUpdBuf_4: (+1)
   \   00000066   0xF9B0 0xC08C      LDRSH    R12,[R0, #+140]
   \   0000006A   0xF822 0xC013      STRH     R12,[R2, R3, LSL #+1]
   1372          										Buffer1.bufMIC2[ WaveRec_idxSens2++] = vRawSens2;
   \   0000006E   0x880B             LDRH     R3,[R1, #+0]
   \   00000070   0xF103 0x0C01      ADD      R12,R3,#+1
   \   00000074   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   00000078   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   0000007C   0xF9B0 0x108E      LDRSH    R1,[R0, #+142]
   \   00000080   0xF8A3 0x1800      STRH     R1,[R3, #+2048]
   1373          										Buffer1.bufMIC3[WaveRec_idxSens3++] = vRawSens3;
   \   00000084   0x....             LDR.N    R1,??DataTable22_1
   \   00000086   0x880B             LDRH     R3,[R1, #+0]
   \   00000088   0xF103 0x0C01      ADD      R12,R3,#+1
   \   0000008C   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   00000090   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   00000094   0xF9B0 0x1092      LDRSH    R1,[R0, #+146]
   \   00000098   0xF503 0x5380      ADD      R3,R3,#+4096
   \   0000009C   0x8019             STRH     R1,[R3, #+0]
   1374          										Buffer1.bufMIC4[ WaveRec_idxSens4++] = vRawSens4;
   \   0000009E   0x....             LDR.N    R1,??DataTable21_1
   \   000000A0   0x880B             LDRH     R3,[R1, #+0]
   \   000000A2   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000A6   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000AA   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000AE   0xF9B0 0x1090      LDRSH    R1,[R0, #+144]
   \   000000B2   0xF503 0x53C0      ADD      R3,R3,#+6144
   \   000000B6   0x8019             STRH     R1,[R3, #+0]
   1375          										Buffer1.bufMIC5[WaveRec_idxSens5++] = vRawSens5;
   \   000000B8   0x....             LDR.N    R1,??DataTable22_5
   \   000000BA   0x880B             LDRH     R3,[R1, #+0]
   \   000000BC   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000C0   0xEB02 0x0343      ADD      R3,R2,R3, LSL #+1
   \   000000C4   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000C8   0xF9B0 0x1094      LDRSH    R1,[R0, #+148]
   \   000000CC   0xF503 0x5300      ADD      R3,R3,#+8192
   \   000000D0   0x8019             STRH     R1,[R3, #+0]
   1376          										Buffer1.bufMIC6[ WaveRec_idxSens6++] = vRawSens6;
   \   000000D2   0x....             LDR.N    R1,??DataTable22_4
   \   000000D4   0x880B             LDRH     R3,[R1, #+0]
   \   000000D6   0xF103 0x0C01      ADD      R12,R3,#+1
   \   000000DA   0xF8A1 0xC000      STRH     R12,[R1, #+0]
   \   000000DE   0xF9B0 0x0096      LDRSH    R0,[R0, #+150]
   \   000000E2   0xEB02 0x0143      ADD      R1,R2,R3, LSL #+1
   \   000000E6   0xF501 0x5120      ADD      R1,R1,#+10240
   \   000000EA   0x8008             STRH     R0,[R1, #+0]
   1377          										break;
   1378          								default:
   1379          										break; 
   1380          					   }
   1381          				
   1382          				}
   1383                               
   1384               	}
   1385          }
   \                     ??RecordUpdBuf_0: (+1)
   \   000000EC   0x4770             BX       LR               ;; return
   1386          
   1387          

   \                                 In section .text, align 2, keep-with-next
   1388          void DMA2_Stream5_IRQHandler(void)
   1389          {
   1390            /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
   1391          
   1392            /* USER CODE END DMA2_Stream5_IRQn 0 */
   1393            HAL_DMA_IRQHandler(&hdma_spi5_rx);
   \                     DMA2_Stream5_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable26_15
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1394            /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
   1395          
   1396            /* USER CODE END DMA2_Stream5_IRQn 1 */
   1397          }
   1398          
   1399          /**
   1400          * @brief This function handles DMA2 stream6 global interrupt.
   1401          */

   \                                 In section .text, align 2, keep-with-next
   1402          void DMA2_Stream6_IRQHandler(void)
   1403          {
   1404            /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
   1405          
   1406            /* USER CODE END DMA2_Stream6_IRQn 0 */
   1407            HAL_DMA_IRQHandler(&hdma_spi6_rx);
   \                     DMA2_Stream6_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable26_27
   \   00000002   0x.... 0x....      B.W      HAL_DMA_IRQHandler
   1408            /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
   1409          
   1410            /* USER CODE END DMA2_Stream6_IRQn 1 */
   1411          }
   1412          

   \                                 In section .text, align 2, keep-with-next
   1413          void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
   1414          {
   1415          
   1416              if (hspi->Instance==SPI5) //MIC8
   \                     HAL_SPI_RxHalfCpltCallback: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x....             LDR.N    R2,??DataTable26_10  ;; 0x40015000
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0xD108             BNE.N    ??HAL_SPI_RxHalfCpltCallback_0
   1417              {
   1418                 swtSDO7=0x00;
   \   00000008   0x....             LDR.N    R1,??DataTable25
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0xF881 0x2130      STRB     R2,[R1, #+304]
   1419                 WaveRecord_flgSDO7Finish = 1;
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0xF881 0x2132      STRB     R2,[R1, #+306]
   1420            	   WaveRecord_flgSDO8Finish = 1;
   \   00000016   0xF881 0x2133      STRB     R2,[R1, #+307]
   1421              
   1422              }
   1423              if (hspi->Instance==SPI6)
   \                     ??HAL_SPI_RxHalfCpltCallback_0: (+1)
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x....             LDR.N    R1,??DataTable26_12  ;; 0x40015400
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xD103             BNE.N    ??HAL_SPI_RxHalfCpltCallback_1
   1424          	{
   1425          		swtSDO8=0x00;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR.N    R1,??DataTable25
   \   00000026   0xF881 0x0131      STRB     R0,[R1, #+305]
   1426                  
   1427          
   1428          	}
   1429          
   1430          }
   \                     ??HAL_SPI_RxHalfCpltCallback_1: (+1)
   \   0000002A   0x4770             BX       LR               ;; return
   1431          

   \                                 In section .text, align 2, keep-with-next
   1432          void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
   1433          {
   1434              if(hspi->Instance==SPI1)
   1435              {
   1436                  /* Copy Data to Record Buffer */
   1437          		//RecordUpdBuf();
   1438          		//XferCplt = 1;
   1439                  //Audio_Play_Out();
   1440              }
   1441              else if (hspi->Instance==SPI2)
   1442              {
   1443          
   1444              }
   1445              else if (hspi->Instance==SPI4)
   1446              {
   1447          
   1448              }
   1449          	else
   1450          	{
   1451          
   1452          	}
   1453          
   1454              if (hspi->Instance==SPI5)
   \                     HAL_SPI_RxCpltCallback: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x....             LDR.N    R2,??DataTable26_10  ;; 0x40015000
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0xD107             BNE.N    ??HAL_SPI_RxCpltCallback_0
   1455              {
   1456          		swtSDO7=0x01;
   \   00000008   0x....             LDR.N    R1,??DataTable25
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0xF881 0x2130      STRB     R2,[R1, #+304]
   1457          		WaveRecord_flgSDO7Finish = 1;
   \   00000010   0xF881 0x2132      STRB     R2,[R1, #+306]
   1458                 WaveRecord_flgSDO8Finish = 1;
   \   00000014   0xF881 0x2133      STRB     R2,[R1, #+307]
   1459              }
   1460              else
   1461              {
   1462                
   1463              }
   1464              
   1465              if (hspi->Instance==SPI6) //MIC8
   \                     ??HAL_SPI_RxCpltCallback_0: (+1)
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x....             LDR.N    R1,??DataTable26_12  ;; 0x40015400
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD103             BNE.N    ??HAL_SPI_RxCpltCallback_1
   1466              {
   1467          #if 0							
   1468              if (swtSDO8==0x01)
   1469             {
   1470                 HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8_1[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1471             }
   1472             else
   1473             {
   1474          	   HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)&TestSDO8[64*idxFrmPDMMic8],4*(AUDIO_SAMPLING_FREQUENCY/1000));
   1475             }      
   1476             AudioUSBSend(idxFrmPDMMic8++);
   1477             if(idxFrmPDMMic8==(4*AUDIO_OUT_BUFFER_SIZE/64))
   1478             {
   1479                 swtSDO8^=0x01;
   1480                 WaveRecord_flgSDO8Finish = 1;
   1481                 idxFrmPDMMic8 = 0;
   1482          		RESET_IDX
   1483          		XferCplt = 0; // clear DMA interrupt flag
   1484          		switch (buffer_switch)
   1485          		{
   1486          	        case BUF1_PLAY: 		
   1487          	          buffer_switch = BUF3_PLAY;
   1488          	          break;
   1489          	        case BUF2_PLAY: 
   1490          	          buffer_switch = BUF1_PLAY;		
   1491          	          break;
   1492          	        case BUF3_PLAY: 	
   1493          	          buffer_switch = BUF2_PLAY;
   1494          	          break;
   1495          	        default:
   1496          	          break;
   1497          		}
   1498          		/* Last player Frame is finished */
   1499          		AudioPlayerUpd(); 		
   1500          		
   1501          		//if (cntStrt<100) cntStrt++;		   
   1502                  
   1503             }
   1504          #else
   1505          
   1506          	//MIC7Rec();
   1507          	//MIC8Rec();   
   1508              swtSDO8 =0x01;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x....             LDR.N    R1,??DataTable25
   \   00000024   0xF881 0x0131      STRB     R0,[R1, #+305]
   1509              	
   1510          	
   1511          #endif
   1512          
   1513            }
   1514          }
   \                     ??HAL_SPI_RxCpltCallback_1: (+1)
   \   00000028   0x4770             BX       LR               ;; return
   1515          

   \                                 In section .text, align 4, keep-with-next
   1516          void PDM2PCMSDO78(void)
   1517          {
   \                     PDM2PCMSDO78: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   1518          //static int16_t Mic7LPOld,Mic8LPOld;
   1519          uint8_t buffer_switch_tmp;
   1520          
   1521          buffer_switch_tmp = buffer_switch;
   \   00000004   0x....             LDR.N    R0,??DataTable26_19
   \   00000006   0xB081             SUB      SP,SP,#+4
   1522          
   1523          /*-------------------------------------------------------------------------------------------------------------
   1524          			  
   1525          	Sequence  Record Data					  Processing Data				  Player Data
   1526          			  
   1527          	1-------  Buffer1						  Buffer2				  Buffer3 BUF3_PLAY)
   1528          			  
   1529          	2-------  Buffer3						  Buffer1				  Buffer2 (BUF2_PLAY)		  
   1530          			  
   1531          	3-------  Buffer2						  Buffer3				  Buffer1 (BUF1_PLAY)
   1532           ---------------------------------------------------------------------------------------------------------------*/
   1533          	/* Data in Mic8 finished recording */
   1534          
   1535              /* Data in Mic7 finished recording */
   1536              if ((WaveRecord_flgSDO7Finish==1)&&(WaveRecord_flgSDO8Finish==1))
   \   00000008   0x....             LDR.N    R5,??DataTable25
   \   0000000A   0x7804             LDRB     R4,[R0, #+0]
   \   0000000C   0xF895 0x0132      LDRB     R0,[R5, #+306]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xBF04             ITT      EQ 
   \   00000014   0xF895 0x0133      LDRBEQ   R0,[R5, #+307]
   \   00000018   0x2801             CMPEQ    R0,#+1
   \   0000001A   0xF040 0x80C3      BNE.W    ??PDM2PCMSDO78_0
   1537              {
   1538          		
   1539                  WaveRecord_flgSDO7Finish=0;
   \   0000001E   0x2000             MOVS     R0,#+0
   1540                  WaveRecord_flgSDO8Finish=0;
   1541          
   1542          		
   1543                  for (uint16_t i=0; i< 4*AUDIO_OUT_BUFFER_SIZE;i++)
   \   00000020   0x4683             MOV      R11,R0
   \   00000022   0xF885 0x0132      STRB     R0,[R5, #+306]
   \   00000026   0x....             LDR.N    R6,??DataTable26_2
   \   00000028   0xF885 0x0133      STRB     R0,[R5, #+307]
   \   0000002C   0x.... 0x....      LDR.W    R7,??DataTable26_23
   \   00000030   0x.... 0x....      LDR.W    R8,??DataTable26_21
   \   00000034   0x.... 0x....      LDR.W    R9,??DataTable26_22
   1544                  {
   1545          	        if(swtSDO7==0x00)
   \                     ??PDM2PCMSDO78_1: (+1)
   \   00000038   0xF895 0x0130      LDRB     R0,[R5, #+304]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xEA4F 0x106B      ASR      R0,R11,#+5
   \   00000042   0xEB0B 0x6090      ADD      R0,R11,R0, LSR #+26
   \   00000046   0xD10D             BNE.N    ??PDM2PCMSDO78_2
   1546          	        {
   1547          	            pDataMic7[i%64] = HTONS(TestSDO7[i]);	
   \   00000048   0x8831             LDRH     R1,[R6, #+0]
   \   0000004A   0x1180             ASRS     R0,R0,#+6
   \   0000004C   0xEBAB 0x1080      SUB      R0,R11,R0, LSL #+6
   \   00000050   0x460A             MOV      R2,R1
   \   00000052   0x0209             LSLS     R1,R1,#+8
   \   00000054   0xEB05 0x0040      ADD      R0,R5,R0, LSL #+1
   \   00000058   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   0000005C   0xF8A0 0x11DC      STRH     R1,[R0, #+476]
   1548          	            pDataMic8[i%64] = HTONS(TestSDO8[i]);
   \   00000060   0x8839             LDRH     R1,[R7, #+0]
   \   00000062   0xE00E             B.N      ??PDM2PCMSDO78_3
   1549          	        }
   1550          	        else
   1551          	        {
   1552          	            pDataMic7[i%64] = HTONS(TestSDO7[4*AUDIO_OUT_BUFFER_SIZE + i]);
   \                     ??PDM2PCMSDO78_2: (+1)
   \   00000064   0xF44F 0x5100      MOV      R1,#+8192
   \   00000068   0x1180             ASRS     R0,R0,#+6
   \   0000006A   0xEBAB 0x1080      SUB      R0,R11,R0, LSL #+6
   \   0000006E   0x5B8A             LDRH     R2,[R1, R6]
   \   00000070   0xEB05 0x0040      ADD      R0,R5,R0, LSL #+1
   \   00000074   0x4613             MOV      R3,R2
   \   00000076   0x0212             LSLS     R2,R2,#+8
   \   00000078   0xEA42 0x2213      ORR      R2,R2,R3, LSR #+8
   \   0000007C   0xF8A0 0x21DC      STRH     R2,[R0, #+476]
   1553          	            pDataMic8[i%64] = HTONS(TestSDO8[4*AUDIO_OUT_BUFFER_SIZE + i]);
   \   00000080   0x5BC9             LDRH     R1,[R1, R7]
   \                     ??PDM2PCMSDO78_3: (+1)
   \   00000082   0x460A             MOV      R2,R1
   \   00000084   0x0209             LSLS     R1,R1,#+8
   \   00000086   0xEA41 0x2112      ORR      R1,R1,R2, LSR #+8
   \   0000008A   0xF8A0 0x115C      STRH     R1,[R0, #+348]
   1554          	        }
   1555          
   1556          	        /* PDM conversion for frame of 64 inputs, 16 outputs */
   1557          	        if (i%64==63)
   \   0000008E   0xEA4F 0x106B      ASR      R0,R11,#+5
   \   00000092   0xEB0B 0x6090      ADD      R0,R11,R0, LSR #+26
   \   00000096   0x1180             ASRS     R0,R0,#+6
   \   00000098   0xEBAB 0x1180      SUB      R1,R11,R0, LSL #+6
   \   0000009C   0x293F             CMP      R1,#+63
   \   0000009E   0xD11F             BNE.N    ??PDM2PCMSDO78_4
   1558          	        {
   1559          				/* Put them in processing phase */
   1560          	          /* Recording Audio Data */						 
   1561          	          switch (buffer_switch_tmp)
   \   000000A0   0xB11C             CBZ.N    R4,??PDM2PCMSDO78_5
   \   000000A2   0x2C02             CMP      R4,#+2
   \   000000A4   0xD008             BEQ.N    ??PDM2PCMSDO78_6
   \   000000A6   0xD304             BCC.N    ??PDM2PCMSDO78_7
   \   000000A8   0xE01A             B.N      ??PDM2PCMSDO78_4
   1562          	          {
   1563          	              case BUF1_PLAY:								
   1564                                PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer2.bufMIC7 + (i/64)*16), 24 ,
   1565                                (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_5: (+1)
   \   000000AA   0x....             LDR.N    R1,??DataTable26_20
   \   000000AC   0xEB01 0x1A40      ADD      R10,R1,R0, LSL #+5
   \   000000B0   0xE004             B.N      ??PDM2PCMSDO78_8
   1566                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer2.bufMIC8 + (i/64)*16), 24 ,
   1567                                (PDMFilter_InitStruct *)&Filter[1]);				  
   1568                                 break;	               
   1569                            case BUF2_PLAY:
   1570                                PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer3.bufMIC7 + (i/64)*16), 24 ,
   1571                                (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_7: (+1)
   \   000000B2   0xEB08 0x1A40      ADD      R10,R8,R0, LSL #+5
   \   000000B6   0xE001             B.N      ??PDM2PCMSDO78_8
   1572                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer3.bufMIC8 + (i/64)*16), 24 ,
   1573                                (PDMFilter_InitStruct *)&Filter[1]);	
   1574                                break;
   1575                            case BUF3_PLAY:
   1576                                PDM_Filter_64_LSB((uint8_t *)pDataMic7,(uint16_t *)(Buffer1.bufMIC7 + (i/64)*16), 24 ,
   1577                                (PDMFilter_InitStruct *)&Filter[0]);	
   \                     ??PDM2PCMSDO78_6: (+1)
   \   000000B8   0xEB09 0x1A40      ADD      R10,R9,R0, LSL #+5
   \                     ??PDM2PCMSDO78_8: (+1)
   \   000000BC   0xF105 0x03C8      ADD      R3,R5,#+200
   \   000000C0   0x2218             MOVS     R2,#+24
   \   000000C2   0xF50A 0x5140      ADD      R1,R10,#+12288
   \   000000C6   0xF505 0x70EE      ADD      R0,R5,#+476
   \   000000CA   0x.... 0x....      BL       PDM_Filter_64_LSB
   1578                                PDM_Filter_64_LSB((uint8_t *)pDataMic8,(uint16_t *)(Buffer1.bufMIC8 + (i/64)*16), 24 ,
   1579                                (PDMFilter_InitStruct *)&Filter[1]);					
   \   000000CE   0xF105 0x03FC      ADD      R3,R5,#+252
   \   000000D2   0x2218             MOVS     R2,#+24
   \   000000D4   0xF50A 0x5160      ADD      R1,R10,#+14336
   \   000000D8   0xF505 0x70AE      ADD      R0,R5,#+348
   \   000000DC   0x.... 0x....      BL       PDM_Filter_64_LSB
   1580                                break;
   1581                            default:
   1582                                break; 
   1583          	          }
   1584          	        }
   1585          	     }
   \                     ??PDM2PCMSDO78_4: (+1)
   \   000000E0   0xF10B 0x0B01      ADD      R11,R11,#+1
   \   000000E4   0x1CBF             ADDS     R7,R7,#+2
   \   000000E6   0x1CB6             ADDS     R6,R6,#+2
   \   000000E8   0xF5BB 0x5F80      CMP      R11,#+4096
   \   000000EC   0xDBA4             BLT.N    ??PDM2PCMSDO78_1
   1586          #if 1
   1587                   for (uint16_t i=0; i < PAR_N; i++)
   \   000000EE   0xF642 0x76F6      MOVW     R6,#+12278
   \   000000F2   0x....             LDR.N    R3,??DataTable26_20
   \   000000F4   0xEB06 0x0108      ADD      R1,R6,R8
   \   000000F8   0xF505 0x729E      ADD      R2,R5,#+316
   \   000000FC   0x18F3             ADDS     R3,R6,R3
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0xF505 0x75A4      ADD      R5,R5,#+328
   \   00000104   0x444E             ADD      R6,R6,R9
   1588                   {
   1589                       switch (buffer_switch_tmp)
   \                     ??PDM2PCMSDO78_9: (+1)
   \   00000106   0xB11C             CBZ.N    R4,??PDM2PCMSDO78_10
   \   00000108   0x2C02             CMP      R4,#+2
   \   0000010A   0xD02D             BEQ.N    ??PDM2PCMSDO78_11
   \   0000010C   0xD316             BCC.N    ??PDM2PCMSDO78_12
   \   0000010E   0xE040             B.N      ??PDM2PCMSDO78_13
   1590                       {
   1591                           case BUF1_PLAY: //Buffer3 processing
   1592                               if (i < SHIFT_CHNNL7)
   \                     ??PDM2PCMSDO78_10: (+1)
   \   00000110   0x2805             CMP      R0,#+5
   \   00000112   0xDA0C             BGE.N    ??PDM2PCMSDO78_14
   1593                               {
   1594                                   Buffer3.bufMIC7[i] = Frame7Old[i];
   \   00000114   0x8817             LDRH     R7,[R2, #+0]
   \   00000116   0x814F             STRH     R7,[R1, #+10]
   1595                                   Frame7Old[i] = Buffer2.bufMIC7[AUDIO_OUT_BUFFER_SIZE-SHIFT_CHNNL7 + i];
   \   00000118   0xF8B3 0x7800      LDRH     R7,[R3, #+2048]
   \   0000011C   0x8017             STRH     R7,[R2, #+0]
   1596                                   Buffer3.bufMIC8[i] = Frame8Old[i];
   \   0000011E   0x882F             LDRH     R7,[R5, #+0]
   \   00000120   0xF8A1 0x780A      STRH     R7,[R1, #+2058]
   1597                                   Frame8Old[i] = Buffer2.bufMIC8[AUDIO_OUT_BUFFER_SIZE-SHIFT_CHNNL8 + i];
   \   00000124   0xF503 0x5780      ADD      R7,R3,#+4096
   \   00000128   0x883F             LDRH     R7,[R7, #+0]
   \   0000012A   0x802F             STRH     R7,[R5, #+0]
   \   0000012C   0xE031             B.N      ??PDM2PCMSDO78_13
   1598                               }
   1599                               else
   1600                               {
   1601                                   Buffer3.bufMIC7[i] = Buffer2.bufMIC7[i-SHIFT_CHNNL7];
   \                     ??PDM2PCMSDO78_14: (+1)
   \   0000012E   0x881F             LDRH     R7,[R3, #+0]
   \   00000130   0x814F             STRH     R7,[R1, #+10]
   1602                                   Buffer3.bufMIC8[i] = Buffer2.bufMIC8[i-SHIFT_CHNNL8];
   \   00000132   0xF8B3 0x7800      LDRH     R7,[R3, #+2048]
   \   00000136   0xF8A1 0x780A      STRH     R7,[R1, #+2058]
   \   0000013A   0xE02A             B.N      ??PDM2PCMSDO78_13
   1603                               }
   1604                               break;                  
   1605                           case BUF2_PLAY: //Buffer1 processing
   1606                               if (i < SHIFT_CHNNL7)
   \                     ??PDM2PCMSDO78_12: (+1)
   \   0000013C   0x2805             CMP      R0,#+5
   \   0000013E   0xDA0C             BGE.N    ??PDM2PCMSDO78_15
   1607                               {
   1608                                   Buffer1.bufMIC7[i] = Frame7Old[i];
   \   00000140   0x8817             LDRH     R7,[R2, #+0]
   \   00000142   0x8177             STRH     R7,[R6, #+10]
   1609                                   Frame7Old[i] = Buffer3.bufMIC7[AUDIO_OUT_BUFFER_SIZE-SHIFT_CHNNL7 + i];
   \   00000144   0xF8B1 0x7800      LDRH     R7,[R1, #+2048]
   \   00000148   0x8017             STRH     R7,[R2, #+0]
   1610                                   Buffer1.bufMIC8[i] = Frame8Old[i];
   \   0000014A   0x882F             LDRH     R7,[R5, #+0]
   \   0000014C   0xF8A6 0x780A      STRH     R7,[R6, #+2058]
   1611                                   Frame8Old[i] = Buffer3.bufMIC8[AUDIO_OUT_BUFFER_SIZE-SHIFT_CHNNL8 + i];
   \   00000150   0xF501 0x5780      ADD      R7,R1,#+4096
   \   00000154   0x883F             LDRH     R7,[R7, #+0]
   \   00000156   0x802F             STRH     R7,[R5, #+0]
   \   00000158   0xE01B             B.N      ??PDM2PCMSDO78_13
   1612                               }
   1613                               else
   1614                               {
   1615                                   Buffer1.bufMIC7[i] = Buffer3.bufMIC7[i-SHIFT_CHNNL7];
   \                     ??PDM2PCMSDO78_15: (+1)
   \   0000015A   0x880F             LDRH     R7,[R1, #+0]
   \   0000015C   0x8177             STRH     R7,[R6, #+10]
   1616                                   Buffer1.bufMIC8[i] = Buffer3.bufMIC8[i-SHIFT_CHNNL8];
   \   0000015E   0xF8B1 0x7800      LDRH     R7,[R1, #+2048]
   \   00000162   0xF8A6 0x780A      STRH     R7,[R6, #+2058]
   \   00000166   0xE014             B.N      ??PDM2PCMSDO78_13
   1617                               }
   1618                               break;
   1619                               
   1620                           case BUF3_PLAY: //Buffer2 processing
   1621                               if (i < SHIFT_CHNNL7)
   \                     ??PDM2PCMSDO78_11: (+1)
   \   00000168   0x2805             CMP      R0,#+5
   \   0000016A   0xDA0C             BGE.N    ??PDM2PCMSDO78_16
   1622                               {
   1623                                   Buffer2.bufMIC7[i] = Frame7Old[i];
   \   0000016C   0x8817             LDRH     R7,[R2, #+0]
   \   0000016E   0x815F             STRH     R7,[R3, #+10]
   1624                                   Frame7Old[i] = Buffer1.bufMIC7[AUDIO_OUT_BUFFER_SIZE-SHIFT_CHNNL7 + i];
   \   00000170   0xF8B6 0x7800      LDRH     R7,[R6, #+2048]
   \   00000174   0x8017             STRH     R7,[R2, #+0]
   1625                                   Buffer2.bufMIC8[i] = Frame8Old[i];
   \   00000176   0x882F             LDRH     R7,[R5, #+0]
   \   00000178   0xF8A3 0x780A      STRH     R7,[R3, #+2058]
   1626                                   Frame8Old[i] = Buffer1.bufMIC8[AUDIO_OUT_BUFFER_SIZE-SHIFT_CHNNL8 + i];
   \   0000017C   0xF506 0x5780      ADD      R7,R6,#+4096
   \   00000180   0x883F             LDRH     R7,[R7, #+0]
   \   00000182   0x802F             STRH     R7,[R5, #+0]
   \   00000184   0xE005             B.N      ??PDM2PCMSDO78_13
   1627                               }
   1628                               else
   1629                               {
   1630                                   Buffer2.bufMIC7[i] = Buffer1.bufMIC7[i-SHIFT_CHNNL7];
   \                     ??PDM2PCMSDO78_16: (+1)
   \   00000186   0x8837             LDRH     R7,[R6, #+0]
   \   00000188   0x815F             STRH     R7,[R3, #+10]
   1631                                   Buffer2.bufMIC8[i] = Buffer1.bufMIC8[i-SHIFT_CHNNL8];
   \   0000018A   0xF8B6 0x7800      LDRH     R7,[R6, #+2048]
   \   0000018E   0xF8A3 0x780A      STRH     R7,[R3, #+2058]
   1632                               }
   1633                               break;
   1634          
   1635                           default:
   1636                               break; 
   1637                       }
   1638          
   1639                   }
   \                     ??PDM2PCMSDO78_13: (+1)
   \   00000192   0x1C40             ADDS     R0,R0,#+1
   \   00000194   0x1CB6             ADDS     R6,R6,#+2
   \   00000196   0x1CAD             ADDS     R5,R5,#+2
   \   00000198   0x1C9B             ADDS     R3,R3,#+2
   \   0000019A   0x1C92             ADDS     R2,R2,#+2
   \   0000019C   0x1C89             ADDS     R1,R1,#+2
   \   0000019E   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000001A2   0xDBB0             BLT.N    ??PDM2PCMSDO78_9
   1640          #endif		
   1641             }//if (WaveRecord_flgSDO8Finish==1)
   1642          }
   \                     ??PDM2PCMSDO78_0: (+1)
   \   000001A4   0xB001             ADD      SP,SP,#+4
   \   000001A6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1643          

   \                                 In section .text, align 2, keep-with-next
   1644          void MIC7Rec (void)
   1645          {
   1646          	swtSDO7=0x01;
   \                     MIC7Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable25
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF880 0x1130      STRB     R1,[R0, #+304]
   1647          	WaveRecord_flgSDO7Finish = 1;
   \   00000008   0xF880 0x1132      STRB     R1,[R0, #+306]
   1648          	//HAL_SPI_DMAStop(&hspi5);
   1649          //	if (swtSDO7==0x01)
   1650          //	{
   1651          //          HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7_1,4*AUDIO_OUT_BUFFER_SIZE);
   1652          //	}
   1653          //	else
   1654          //	{
   1655          //          HAL_SPI_Receive_DMA(&hspi5,( uint8_t *)TestSDO7,4*AUDIO_OUT_BUFFER_SIZE);
   1656          //	} 
   1657          
   1658          }
   \   0000000C   0x4770             BX       LR               ;; return
   1659          

   \                                 In section .text, align 2, keep-with-next
   1660          void MIC8Rec (void)
   1661          {
   1662               swtSDO8^=0x01;
   \                     MIC8Rec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable25
   \   00000002   0xF890 0x1131      LDRB     R1,[R0, #+305]
   \   00000006   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000000A   0xF880 0x1131      STRB     R1,[R0, #+305]
   1663              WaveRecord_flgSDO8Finish = 1;
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0xF880 0x1133      STRB     R1,[R0, #+307]
   1664          	//HAL_SPI_DMAStop(&hspi6);
   1665          //    if (swtSDO8==0x01)
   1666          //    {
   1667          //        HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8_1,4*AUDIO_OUT_BUFFER_SIZE);
   1668          //    }
   1669          //    else
   1670          //    {
   1671          //        HAL_SPI_Receive_DMA(&hspi6,( uint8_t *)TestSDO8,4*AUDIO_OUT_BUFFER_SIZE);
   1672          //
   1673          //    }
   1674          
   1675          }
   \   00000014   0x4770             BX       LR               ;; return
   1676          

   \                                 In section .text, align 4, keep-with-next
   1677          uint8_t CheckEnergyEqual(int16_t * Channel_Ref, int16_t * Channel, int16_t len)
   1678          {
   \                     CheckEnergyEqual: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4606             MOV      R6,R0
   \   00000004   0x460F             MOV      R7,R1
   1679              int64_t Energy_Ref=0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0x2500             MOVS     R5,#+0
   \   0000000E   0xB081             SUB      SP,SP,#+4
   1680              int64_t Energy = 0;
   1681              float facEnergy;
   1682              for (int16_t i=0;i<len;i++)
   \   00000010   0x2A01             CMP      R2,#+1
   \   00000012   0xED2D 0x8B02      VPUSH    {D8}
   \   00000016   0xDB1C             BLT.N    ??CheckEnergyEqual_0
   \   00000018   0xEA4F 0x0C02      MOV.W    R12,R2
   1683              {
   1684                  Energy_Ref += Channel_Ref[i]*Channel_Ref[i];
   \                     ??CheckEnergyEqual_1: (+1)
   \   0000001C   0xF936 0x2B02      LDRSH    R2,[R6], #+2
   \   00000020   0xFB12 0xF202      SMULBB   R2,R2,R2
   \   00000024   0x18A4             ADDS     R4,R4,R2
   \   00000026   0xEB45 0x75E2      ADC      R5,R5,R2, ASR #+31
   1685                  Energy += Channel[i]*Channel[i];
   \   0000002A   0xF937 0x2B02      LDRSH    R2,[R7], #+2
   \   0000002E   0xFB12 0xF202      SMULBB   R2,R2,R2
   \   00000032   0x1880             ADDS     R0,R0,R2
   \   00000034   0xEB41 0x71E2      ADC      R1,R1,R2, ASR #+31
   1686              }
   \   00000038   0xF1BC 0x0C01      SUBS     R12,R12,#+1
   \   0000003C   0xD1EE             BNE.N    ??CheckEnergyEqual_1
   1687              
   1688              facEnergy = Energy_Ref/MAX(Energy,0.001);
   \   0000003E   0x2900             CMP      R1,#+0
   \   00000040   0xDB07             BLT.N    ??CheckEnergyEqual_0
   \   00000042   0xDC01             BGT.N    ??CheckEnergyEqual_2
   \   00000044   0x2801             CMP      R0,#+1
   \   00000046   0xD304             BCC.N    ??CheckEnergyEqual_0
   \                     ??CheckEnergyEqual_2: (+1)
   \   00000048   0x.... 0x....      BL       __aeabi_l2d
   \   0000004C   0xEC41 0x0B18      VMOV     D8,R0,R1
   \   00000050   0xE001             B.N      ??CheckEnergyEqual_3
   \                     ??CheckEnergyEqual_0: (+1)
   \   00000052   0xED9F 0x....      VLDR.W   D8,??DataTable26_24
   \                     ??CheckEnergyEqual_3: (+1)
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x4629             MOV      R1,R5
   \   0000005A   0x.... 0x....      BL       __aeabi_l2d
   \   0000005E   0xEC53 0x2B18      VMOV     R2,R3,D8
   \   00000062   0x.... 0x....      BL       __aeabi_ddiv
   \   00000066   0x.... 0x....      BL       __aeabi_d2f
   \   0000006A   0xEE00 0x0A10      VMOV     S0,R0
   1689              
   1690              if ((facEnergy>1.5)||(facEnergy<0.5))
   \   0000006E   0xEDDF 0x....      VLDR.W   S1,??DataTable26_28  ;; 0x3fc00001
   \   00000072   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000076   0xEEF1 0xFA10      FMSTAT   
   \   0000007A   0xDA06             BGE.N    ??CheckEnergyEqual_4
   \   0000007C   0xEEF6 0x0A00      VMOV.F32 S1,#0.5
   \   00000080   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000084   0xEEF1 0xFA10      FMSTAT   
   \   00000088   0xD504             BPL.N    ??CheckEnergyEqual_5
   1691              {
   1692                   return 1; 
   \                     ??CheckEnergyEqual_4: (+1)
   \   0000008A   0xECBD 0x8B02      VPOP     {D8}
   \   0000008E   0x2001             MOVS     R0,#+1
   \   00000090   0xB001             ADD      SP,SP,#+4
   \   00000092   0xBDF0             POP      {R4-R7,PC}
   1693              }
   1694              
   1695              return 0;
   \                     ??CheckEnergyEqual_5: (+1)
   \   00000094   0xECBD 0x8B02      VPOP     {D8}
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0xB001             ADD      SP,SP,#+4
   \   0000009C   0xBDF0             POP      {R4-R7,PC}       ;; return
   1696            
   1697          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x45FA0000         DC32     0x45fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x........         DC32     spi1_ins

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x4001300C         DC32     0x4001300c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x........         DC32     Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x4000380C         DC32     0x4000380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x........         DC32     WaveRec_idxSens4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   0x........         DC32     WaveRec_idxSens3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   0x........         DC32     hspi4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \   00000000   0x4001340C         DC32     0x4001340c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_4:
   \   00000000   0x........         DC32     WaveRec_idxSens6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_5:
   \   00000000   0x........         DC32     WaveRec_idxSens5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x........         DC32     hspi5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   0x4001500C         DC32     0x4001500c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   0x4001540C         DC32     0x4001540c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_1:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_2:
   \   00000000   0x........         DC32     TestSDO7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_3:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_4:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_5:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_6:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_7:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_8:
   \   00000000   0x........         DC32     DmaHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_9:
   \   00000000   0x40013400         DC32     0x40013400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_10:
   \   00000000   0x40015000         DC32     0x40015000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_11:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_12:
   \   00000000   0x40015400         DC32     0x40015400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_13:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_14:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_15:
   \   00000000   0x........         DC32     hdma_spi5_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_16:
   \   00000000   0x........         DC32     hi2s1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_17:
   \   00000000   0x........         DC32     WaveRec_idxSens1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_18:
   \   00000000   0x........         DC32     WaveRec_idxSens2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_19:
   \   00000000   0x........         DC32     buffer_switch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_20:
   \   00000000   0x........         DC32     Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_21:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_22:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_23:
   \   00000000   0x........         DC32     TestSDO8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_24:
   \   00000000   0xD2F1A9FC         DC32     0xD2F1A9FC,0x3F50624D
   \              0x3F50624D   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_25:
   \   00000000   0x........         DC32     volume

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_26:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_27:
   \   00000000   0x........         DC32     hdma_spi5_rx+0x58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_28:
   \   00000000   0x3FC00001         DC32     0x3fc00001
   1698          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   CheckEnergyEqual
        32   -> __aeabi_d2f
        32   -> __aeabi_ddiv
        32   -> __aeabi_l2d
       0   DMA2_Stream5_IRQHandler
         0   -> HAL_DMA_IRQHandler
       0   DMA2_Stream6_IRQHandler
         0   -> HAL_DMA_IRQHandler
      40   HAL_SPI_MspInit
        40   -> HAL_DMA_DeInit
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
       0   HAL_SPI_RxCpltCallback
       0   HAL_SPI_RxHalfCpltCallback
       0   I2S1_Enable
       0   I2S2_Enable
      16   MIC1TO8_Init
        16   -> HAL_I2S_Init
        16   -> SPI4_Init
        16   -> SPI5_Init
         0   -> SPI6_Init
       0   MIC7Rec
       0   MIC8Rec
      32   Mic7Rec
         0   -> HAL_SPI_Init
        32   -> PDM_Filter_Init
       0   Mic8Rec
         0   -> HAL_SPI_Init
      40   PDM2PCMSDO78
        40   -> PDM_Filter_64_LSB
       0   RecordUpdBuf
       8   SPI1_IRQHandler
         8   -> SubFrameFinished
      32   SPI1_Ini
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> HAL_SPI_Init
       8   SPI2_IRQHandler
         8   -> SubFrameFinished
       0   SPI4_Enable
       8   SPI4_IRQHandler
         8   -> SubFrameFinished
       0   SPI4_Init
         0   -> HAL_SPI_Init
       8   SPI5_IRQHandler
         8   -> PDM_Filter_64_LSB
      32   SPI5_Init
         0   -> HAL_SPI_Init
        32   -> PDM_Filter_Init
       8   SPI6_IRQHandler
         8   -> PDM_Filter_64_LSB
       0   SPI6_Init
         0   -> HAL_SPI_Init
       8   StartRecMic7_8
         8   -> HAL_SPI_Receive_DMA
       0   mySPI_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable20
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_2
       4  ??DataTable22_3
       4  ??DataTable22_4
       4  ??DataTable22_5
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable26
       4  ??DataTable26_1
       4  ??DataTable26_10
       4  ??DataTable26_11
       4  ??DataTable26_12
       4  ??DataTable26_13
       4  ??DataTable26_14
       4  ??DataTable26_15
       4  ??DataTable26_16
       4  ??DataTable26_17
       4  ??DataTable26_18
       4  ??DataTable26_19
       4  ??DataTable26_2
       4  ??DataTable26_20
       4  ??DataTable26_21
       4  ??DataTable26_22
       4  ??DataTable26_23
       8  ??DataTable26_24
       4  ??DataTable26_25
       4  ??DataTable26_26
       4  ??DataTable26_27
       4  ??DataTable26_28
       4  ??DataTable26_3
       4  ??DataTable26_4
       4  ??DataTable26_5
       4  ??DataTable26_6
       4  ??DataTable26_7
       4  ??DataTable26_8
       4  ??DataTable26_9
   16384  Buffer1
   16384  Buffer2
   16384  Buffer3
     158  CheckEnergyEqual
       6  DMA2_Stream5_IRQHandler
       6  DMA2_Stream6_IRQHandler
    1208  HAL_SPI_MspInit
      42  HAL_SPI_RxCpltCallback
      44  HAL_SPI_RxHalfCpltCallback
      24  I2S1_Enable
       2  I2S1_stNipple
       1  I2S1_stPosShft
      24  I2S2_Enable
       2  I2S2_stNipple
       1  I2S2_stPosShft
      94  MIC1TO8_Init
      14  MIC7Rec
      22  MIC8Rec
     138  Mic7Rec
      74  Mic8Rec
     426  PDM2PCMSDO78
     238  RecordUpdBuf
     342  SPI1_IRQHandler
     220  SPI1_Ini
       2  SPI1_stNipple
     276  SPI2_IRQHandler
      24  SPI4_Enable
     326  SPI4_IRQHandler
      62  SPI4_Init
     132  SPI5_IRQHandler
     138  SPI5_Init
     126  SPI6_IRQHandler
      74  SPI6_Init
      48  StartRecMic7_8
   16384  TestSDO7
   16384  TestSDO8
       2  WaveRecord_flgIni
       2  cntStrt
       2  cntTransFinish
      88  hdma_spi2_tx
      88  hdma_spi3_tx
     176  hdma_spi5_rx
          hdma_spi6_rx
     154  hi2s1
          hi2s2
          flgRacing
          Wave_cntClk
          stLR
          stLROld
          WaveRecord_flgInt
          Main_stLR
          Main_stLROld
          SPI4_stPosShft
          I2S2_stLR
          I2S2_stLROld
          WaveRec_idxTest
          vRawSens1
          vRawSens2
          vRawSens4
          vRawSens3
          vRawSens5
          vRawSens6
          SPI4_stNipple
     100  hspi1
     100  hspi2
     604  hspi5
          hspi6
          Filter
          swtSDO7
          swtSDO8
          WaveRecord_flgSDO7Finish
          WaveRecord_flgSDO8Finish
          idxMic8
          idxMic7
          cntPos
          cntPos7
          Frame7Old
          Frame8Old
          bufPCMSens7
          bufPCMSens8
          pDataMic8
          pDataMic7
       2  iSDO12
       2  iSDO34
       2  iSDO56
       2  idxFrmPDMMic8
      44  mySPI_SendData
      44  pHeaderBuff
      32  pPDM2PCM
     100  spi1_ins
     100  spi2_ins
       1  stMIC56
       1  stMIC56Old

 
 83 374 bytes in section .bss
    156 bytes in section .data
  4 538 bytes in section .text
 
  4 538 bytes of CODE memory
 83 530 bytes of DATA memory

Errors: none
Warnings: 7
