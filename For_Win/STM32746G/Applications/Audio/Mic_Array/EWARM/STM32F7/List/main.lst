###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       08/Nov/2016  10:26:23
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#    Command line =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e
#        --char_is_signed --fpu=VFPv5_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\main.lst
#    Object file  =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\main.o
#
###############################################################################

D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
      1          
      2          /******************************************************************************
      3           *    Author: Phan Le Son                                                                                                                                    
      4           *    email: plson03@gmail.com
      5           ******************************************************************************/
      6          
      7          
      8          
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "main.h"
     11          #include "DSP.h"
     12          //#include "waveplayer.h"
     13          #include "waverecorder.h"
     14          #include "stm32f7xx_hal_usart.h"
     15          #include "pdm_filter.h"
     16          #include "arm_math.h"
     17          #include <stdio.h>
     18          #include "DOA.h"
     19          
     20          /* Private typedef -----------------------------------------------------------*/
     21          /* Private define ------------------------------------------------------------*/
     22          /* Private macro -------------------------------------------------------------*/
     23          
     24          
     25          /* EXTERN VARIABLES ----------------------------------------------------------*/
     26          //extern __IO AUDIO_IN_BufferTypeDef Buffer1, Buffer2, BufferCtlRecIn;
     27          //AUDIO_IN_BufferTypeDef Buffer3;
     28          
     29          
     30          
     31          
     32          extern Mic_Array_Data Buffer1,Buffer2,Buffer3;
     33          
     34          extern __IO uint8_t XferCplt;
     35          extern __IO AUDIO_IN_BufferTypeDef BufferCtlRecIn;
     36          extern DMA_HandleTypeDef     DmaHandle;
     37          
     38          extern SAI_HandleTypeDef         haudio_out_sai;
     39          extern uint16_t WaveRecord_flgIni;
     40          extern uint32_t EnergySound,EnergyError;
     41          extern I2C_HandleTypeDef hi2c2;
     42          extern __IO uint16_t cntStrt;
     43          extern __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
     44          extern __IO   uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
     45          extern USBD_AUDIO_ItfTypeDef  USBD_AUDIO_fops;
     46          /* GLOBAL VARIABLE -----------------------------------------------------------*/

   \                                 In section .bss, align 4
     47          USBH_HandleTypeDef hUSBHost;
   \                     hUSBHost:
   \   00000000                      DS8 696
     48          USBD_HandleTypeDef hUSBDDevice;

   \                                 In section .bss, align 1
     49          AUDIO_ApplicationTypeDef appli_state = APPLICATION_IDLE;//APPLICATION_IDLE
   \                     appli_state:
   \   00000000                      DS8 1
     50          

   \                                 In section .bss, align 4
     51          UART_HandleTypeDef huart3;
   \                     huart3:
   \   00000000                      DS8 112

   \                                 In section .bss, align 4
     52          SPI_HandleTypeDef hspi4;
   \                     hspi4:
   \   00000000                      DS8 100
     53          GPIO_InitTypeDef GPIO_INS;

   \                                 In section .bss, align 4
     54          Mic_Array_Coef_f FacMic;
   \                     FacMic:
   \   00000000                      DS8 32
     55          	  

   \                                 In section .bss, align 4
     56          uint16_t bufferSum[6*AUDIO_OUT_BUFFER_SIZE+10];
   \                     bufferSum:
   \   00000000                      DS8 6164

   \                                 In section .bss, align 4
     57          float CrssCorVal78,CrssCorVal14,CrssCorVal25,CrssCorVal63;
   \                     CrssCorVal78:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     CrssCorVal14:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     CrssCorVal25:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     CrssCorVal63:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     58          __IO uint32_t  cntRisingEXTI;
   \                     cntRisingEXTI:
   \   00000000                      DS8 4
     59          __IO uint16_t  WaveRec_idxSens4,WaveRec_idxSens3,I2S2_idxTmp;
     60          __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     61          __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     62          __IO uint16_t  idxSPI5DataBuf3;
     63          __IO uint8_t   btnSW1,btnSW2;
     64          __IO uint8_t   flgDlyUpd; 
     65          __IO uint8_t   cntBtnPress;
     66          __IO uint8_t   flgShipping;
     67          extern __IO uint16_t  WaveRec_idxTest;
     68          extern __IO uint8_t  swtBufUSBOut;
     69          extern __IO uint8_t flgRacing;
     70          extern __IO GPIO_PinState stMIC56;
     71          extern __IO GPIO_PinState stMIC56Old;
     72          
     73          
     74          
     75          /* Buffer used for reception */

   \                                 In section .bss, align 4
     76          uint8_t aRxBuffer[1024];
   \                     aRxBuffer:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 1
     77          uint8_t idxDec,stFrstFrmStore;
   \                     idxDec:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     stFrstFrmStore:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     78          int16_t DeltaBuf1,DeltaBuf1Old;
   \                     DeltaBuf1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     DeltaBuf1Old:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     79          int16_t idxLatency13,idxLatency12,idxLatency14,idxLatency25,idxLatency63,idxLatency78;
   \                     idxLatency13:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency14:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency25:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency63:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency78:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     80          int16_t * LowPass_Mic1Old;
   \                     LowPass_Mic1Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     81          int16_t *LowPass_Mic2Old;
   \                     LowPass_Mic2Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     82          int16_t *LowPass_Mic3Old; 
   \                     LowPass_Mic3Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     83          int16_t *LowPass_Mic4Old;
   \                     LowPass_Mic4Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     84          int16_t *LowPass_Mic5Old;
   \                     LowPass_Mic5Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     85          int16_t *LowPass_Mic6Old;
   \                     LowPass_Mic6Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     86          int16_t *LowPass_Mic7Old;
   \                     LowPass_Mic7Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     87          int16_t *LowPass_Mic8Old;
   \                     LowPass_Mic8Old:
   \   00000000                      DS8 4
     88          
     89          __IO char flg10ms;

   \                                 In section .bss, align 1
     90          uint8_t flgSTAIni;
   \                     flgSTAIni:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     GPIO_INS:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     flgDlyUpd:
   \   00000014   0x00               DC8 0
   \                     flgShipping:
   \   00000015   0x00               DC8 0
   \                     flg10ms:
   \   00000016   0x00               DC8 0
     91          uint16_t cntTime200;
     92          
     93          uint8_t buffer_switch = 1;
   \                     buffer_switch:
   \   00000017   0x01               DC8 1
     94          uint8_t Command_index=1;
     95          uint8_t swtCase1Mic56;
   \                     swtCase1Mic56:
   \   00000018   0x00               DC8 0
     96          uint8_t Direction;
   \                     Direction:
   \   00000019   0x00               DC8 0
   \                     WaveRec_idxSens4:
   \   0000001A   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens3:
   \   0000001C   0x00 0x00          DC8 0, 0
   \                     I2S2_idxTmp:
   \   0000001E   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens1:
   \   00000020   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens2:
   \   00000022   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens5:
   \   00000024   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens6:
   \   00000026   0x00 0x00          DC8 0, 0
   \                     idxSPI5DataBuf3:
   \   00000028   0x00 0x00          DC8 0, 0
   \                     cntTime200:
   \   0000002A   0x00 0x00          DC8 0, 0
   \                     hUSBDDevice:
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000003C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000006C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000007C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000008C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000009C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000010C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000011C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000012C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000013C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000014C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000015C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000016C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000017C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000018C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000019C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000020C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000021C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000022C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000023C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 1
   \                     btnSW1:
   \   00000000   0x00               DC8 0
   \                     btnSW2:
   \   00000001   0x00               DC8 0
   \                     cntBtnPress:
   \   00000002   0x00               DC8 0
   \                     Command_index:
   \   00000003   0x01               DC8 1
     97          //int16_t PreCalcBuff[129][256];
     98          
     99          
    100          
    101          
    102          
    103          
    104          #if (DEBUG)
    105          uint8_t  pUARTBuf[128];
    106          uint32_t Main_CoefMor;
    107          uint8_t stDir,flgS2,flgS3,flgS4,flgS2Flt,flgS3Flt,flgS4Flt;
    108          uint8_t flgS2Ins,flgS3Ins,flgS4Ins;
    109          #endif
    110          
    111          #if USB_STREAMING
    112          extern __IO uint16_t idxFrmPDMMic8;
    113          #endif
    114          
    115          
    116          /* Private function prototypes -----------------------------------------------*/
    117          static void SystemClock_Config(void);
    118          static void CPU_CACHE_Enable(void);
    119          
    120          
    121          
    122          
    123          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c);
    124          void MX_I2C2_Init(void);
    125          void USART3_Init(void);
    126          void ReadSTASeq(uint8_t Addr, uint8_t *pBufOut,uint8_t Len );
    127          void WriteSTAByte(uint8_t Addr, uint8_t *pBufIn, uint8_t len);
    128          void SPI5_CallBack(SPI_HandleTypeDef *hspi);
    129          uint8_t StartPlay(void);
    130          
    131          
    132          /*--------------INLINE FUNCTION-----------------------------------------------*/
    133          
    134          inline static void FFT_Update(void)
    135          {
    136          
    137                      
    138                /* Hafl buffer is filled in by I2S data stream in */
    139                if((flgDlyUpd==0))
    140                {
    141                      
    142                      PDM2PCMSDO78();
    143                      
    144                      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15); 
    145                      //FactorUpd(&FacMic); 
    146                      //STM_EVAL_LEDOn(LED3);
    147                      flgDlyUpd = 1; 
    148          /*-------------------------------------------------------------------------------------------------------------
    149          			  
    150          	Sequence  Record Data                     Processing Data                 Player Data
    151          			  
    152          	1-------  Buffer1                         Buffer2                         Buffer3
    153          			  
    154          	2-------  Buffer3                         Buffer1                         Buffer2		  
    155          			  
    156          	3-------  Buffer2                         Buffer3                         Buffer1 
    157           ---------------------------------------------------------------------------------------------------------------*/
    158                      /* Processing Data */
    159          			switch (buffer_switch)  //buffer_switch
    160          			{             
    161          			    case BUF1_PLAY:
    162          #if MAIN_CRSCORR
    163                              for (uint16_t i=0; i<(_MAX_SS/_MAX_SS);i++)
    164                              {
    165                                  //uint16_t i=0;
    166                                      arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3[i*128],    (q15_t *)&bufferFFT[i*256]);
    167                                      arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3_1[i*128],   (q15_t *)&bufferFFT_1[i*256]);
    168                              
    169                                      arm_add_q15((q15_t *)&bufferFFT[i*256], (q15_t *)&bufferFFT_1[i*256],   (q15_t *)&bufferFFTSum[i*256],2*128);
    170                              
    171                                      //for (uint16_t j=0; j<256;j++)
    172                                      //{
    173                                      //	  bufferFFTSum[i*256+j]<<=6;
    174                                      //}
    175                                      
    176                                      arm_rfft_q15(&RealIFFT_Ins,    (q15_t *)&bufferFFTSum[i*256],    (q15_t *)&bufferSum[i*128]);
    177                              }
    178          #elif MAIN_FFT
    179                              
    180                              /* Sound Source Localization */
    181                              Direction = DOACalc(&Buffer3);
    182                              
    183                              /* Summing in Buffer3 */
    184                              BeamFormingSD(&Buffer3,3,(int16_t *)Buffer3.bufMIC8);
    185                              
    186                              //FFT_SUM((int16_t *)buffer3, (int16_t * )buffer3_1,fbuffer, 1024);				 	   
    187          #else
    188                              //LowPassIIR(Buffer3.bufMIC1,Buffer3.bufMIC1,LowPass_Mic1Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    189                              //LowPassIIR(Buffer3.bufMIC2,Buffer3.bufMIC2,LowPass_Mic2Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    190                              //LowPassIIR(Buffer3.bufMIC3,Buffer3.bufMIC3,LowPass_Mic3Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    191                              //LowPassIIR(Buffer3.bufMIC4,Buffer3.bufMIC4,LowPass_Mic4Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    192                              //LowPassIIR(Buffer3.bufMIC5,Buffer3.bufMIC5,LowPass_Mic5Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    193                              //LowPassIIR(Buffer3.bufMIC6,Buffer3.bufMIC6,LowPass_Mic6Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    194                              //LowPassIIR(Buffer3.bufMIC7,Buffer3.bufMIC7,LowPass_Mic7Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    195                              //LowPassIIR(Buffer3.bufMIC8,Buffer3.bufMIC8,LowPass_Mic8Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    196          
    197                              //idxLatency78 = GCC_PHAT(Buffer3.bufMIC7, Buffer3.bufMIC8, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal78);
    198                              //idxLatency14 = GCC_PHAT(Buffer3.bufMIC1, Buffer3.bufMIC4, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal14);
    199                              //idxLatency25 = GCC_PHAT(Buffer3.bufMIC5, Buffer3.bufMIC2, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal25);
    200                              //idxLatency63 = GCC_PHAT(Buffer3.bufMIC6, Buffer3.bufMIC3, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal63);
    201                             
    202          
    203                              SumDelay(&Buffer3);
    204          #endif
    205          					
    206          					break;
    207          				case BUF2_PLAY:
    208          
    209          #if MAIN_CRSCORR
    210                               for (uint16_t i=0; i<(_MAX_SS/128);i++)
    211                               { 
    212                                  //uint16_t i=0;
    213                                  arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1[i*128],(q15_t *)&bufferFFT[i*256]);
    214                                  arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    215          
    216                                  arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],
    217                                                  2*128);
    218          
    219                                  //for (uint16_t j=0; j<256;j++)
    220                                  //{
    221                                  //	   bufferFFTSum[i*256+j]<<=6;
    222                                  //}
    223          
    224          
    225                                  arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    226                               }
    227          #elif MAIN_FFT
    228                              /* Sound Source Localization */
    229                              Direction = DOACalc(&Buffer1);
    230                              /* Summing in Buffer3 */
    231                              BeamFormingSD(&Buffer1,3,(int16_t *)Buffer1.bufMIC8);
    232          
    233          #else
    234                          
    235                      //idxLatency13 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    236                      //idxLatency12 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    237                      //LowPassIIR(Buffer1.bufMIC1,Buffer1.bufMIC1,LowPass_Mic1Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    238                      //LowPassIIR(Buffer1.bufMIC2,Buffer1.bufMIC2,LowPass_Mic2Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    239                      //LowPassIIR(Buffer1.bufMIC3,Buffer1.bufMIC3,LowPass_Mic3Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    240                      //LowPassIIR(Buffer1.bufMIC4,Buffer1.bufMIC4,LowPass_Mic4Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    241                      //LowPassIIR(Buffer1.bufMIC5,Buffer1.bufMIC5,LowPass_Mic5Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    242                      //LowPassIIR(Buffer1.bufMIC6,Buffer1.bufMIC6,LowPass_Mic6Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    243                      //LowPassIIR(Buffer1.bufMIC7,Buffer1.bufMIC7,LowPass_Mic7Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    244                      //LowPassIIR(Buffer1.bufMIC8,Buffer1.bufMIC8,LowPass_Mic8Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    245          
    246                      //idxLatency78 = GCC_PHAT(Buffer1.bufMIC7, Buffer1.bufMIC8, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal78);	
    247                      //idxLatency14 = GCC_PHAT(Buffer1.bufMIC1, Buffer1.bufMIC4, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal14);
    248                      //idxLatency25 = GCC_PHAT(Buffer1.bufMIC5, Buffer1.bufMIC2, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal25);
    249                      //idxLatency63 = GCC_PHAT(Buffer1.bufMIC6, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal63);
    250          
    251          
    252          
    253                            SumDelay(&Buffer1);
    254          #endif
    255          	    break;
    256          					
    257          	   case BUF3_PLAY:
    258          #if MAIN_CRSCORR
    259                    for (uint16_t i=0; i<(_MAX_SS/128);i++)
    260                    {
    261                        arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2[i*128],(q15_t *)&bufferFFT[i*256]);
    262                        arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    263          
    264                        arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],	(q15_t *)&bufferFFTSum[i*256],
    265                                           2*128);
    266          
    267                        //for (uint16_t j=0; j<256;j++)
    268                        //{
    269                        //   bufferFFTSum[i*256+j]<<=6;
    270                        //}
    271          
    272          
    273                        arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    274                    }
    275          #elif MAIN_FFT
    276                  
    277                  /* Sound Source Localization */
    278                  Direction = DOACalc(&Buffer2);
    279                  /* Summing in Buffer3 */
    280                  BeamFormingSD(&Buffer2,3,(int16_t *)Buffer2.bufMIC8);
    281          
    282                  /* Summing in Buffer2 */
    283                  //Delay_Sum_FFT(&Buffer2,&FacMic, (int16_t * )Buffer2.bufMIC8, PAR_N);
    284                  //FFT_SUM((int16_t *)buffer2, (int16_t * )buffer2_1,fbuffer, 1024);				
    285          #else
    286          
    287                    //idxLatency13 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    288                    //idxLatency12 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    289          
    290          		  //LowPassIIR(Buffer2.bufMIC1,Buffer2.bufMIC1,LowPass_Mic1Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    291          		  //LowPassIIR(Buffer2.bufMIC2,Buffer2.bufMIC2,LowPass_Mic2Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    292          		  //LowPassIIR(Buffer2.bufMIC3,Buffer2.bufMIC3,LowPass_Mic3Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    293          		  //LowPassIIR(Buffer2.bufMIC4,Buffer2.bufMIC4,LowPass_Mic4Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    294          		  //LowPassIIR(Buffer2.bufMIC5,Buffer2.bufMIC5,LowPass_Mic5Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    295          		  //LowPassIIR(Buffer2.bufMIC6,Buffer2.bufMIC6,LowPass_Mic6Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    296          		  //LowPassIIR(Buffer2.bufMIC7,Buffer2.bufMIC7,LowPass_Mic7Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    297          		  //LowPassIIR(Buffer2.bufMIC8,Buffer2.bufMIC8,LowPass_Mic8Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    298          
    299                    //idxLatency78 = GCC_PHAT(Buffer2.bufMIC7, Buffer2.bufMIC8, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal78);
    300                    //idxLatency14 = GCC_PHAT(Buffer2.bufMIC1, Buffer2.bufMIC4, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal14);
    301                    //idxLatency25 = GCC_PHAT(Buffer2.bufMIC5, Buffer2.bufMIC2, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal25);
    302                    //idxLatency63 = GCC_PHAT(Buffer2.bufMIC6, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal63);
    303          
    304                    SumDelay(&Buffer2);
    305          #endif
    306          					break;
    307          					
    308          				default:
    309          					break;
    310                         
    311          			}
    312                      
    313          			AudioPlayerUpd();
    314                      if (Direction==3)
    315                      {
    316                          BSP_LED_Off(LED2);
    317                          BSP_LED_On(LED1);
    318                      }
    319                      else if ((Direction==2))
    320                      {
    321                          BSP_LED_On(LED1);
    322                          BSP_LED_On(LED2);
    323          
    324                      }
    325                      else if ((Direction==4))
    326                      {
    327                          BSP_LED_Off(LED1);
    328                          BSP_LED_Off(LED2);
    329          
    330                      }
    331                      else
    332                      {
    333                          BSP_LED_On(LED2);
    334                          BSP_LED_Off(LED1);
    335                      }
    336          	       //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
    337          	  }
    338          
    339          }
    340          
    341          
    342          inline static void Audio_Play_Out(void)
    343          {
    344          
    345          /*-------------------------------------------------------------------------------------------------------------
    346          			  
    347          	Sequence  Record Data                     Processing Data                 Player Data
    348          			  
    349          	1-------  Buffer1                         Buffer2                          Buffer3
    350          			  
    351          	2-------  Buffer3                         Buffer1                           Buffer2		  
    352          			  
    353          	3-------  Buffer2                         Buffer3                           Buffer1 
    354           ---------------------------------------------------------------------------------------------------------------*/
    355              //Audio_MAL_Play((uint32_t)&bufferSum[idxFrmPDMMic8*AUDIO_CHANNELS*(6*AUDIO_SAMPLING_FREQUENCY/1000)], 2*6*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
    356              //Audio_MAL_Play((uint32_t)&bufferSum, 2*3*AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE);
    357              flgRacing=0;
    358          
    359          #if USB_STREAMING
    360              AudioUSBSend(idxFrmPDMMic8);
    361          #endif
    362          
    363          
    364              ++idxFrmPDMMic8;
    365          	/* if player is finished for curent buffer                                  */ 
    366          	if (idxFrmPDMMic8 == PAR_N/(AUDIO_SAMPLING_FREQUENCY/1000))
    367          	{
    368          	       RESET_IDX
    369          		   //MIC7Rec();
    370          		   //MIC8Rec();
    371                     WaveRec_idxTest=0;
    372                     idxFrmPDMMic8=0;
    373                      switch (buffer_switch)
    374                      {
    375                          case BUF1_PLAY:
    376                                /* set flag for switch buffer */		  
    377                            buffer_switch = BUF3_PLAY;
    378                            break;
    379                          case BUF2_PLAY:
    380                            /* set flag for switch buffer */
    381                            buffer_switch = BUF1_PLAY;        
    382                            break;
    383                          case BUF3_PLAY:
    384                            /* set flag for switch buffer */		  
    385                            buffer_switch = BUF2_PLAY;
    386                            break;
    387                          default:
    388                            break;
    389                      }
    390          
    391                    //if (cntStrt==2) 	 StartRecMic7_8();
    392                    if (cntStrt<20) 
    393                    {  
    394                        cntStrt++;
    395                        WaveRecord_flgIni=0; 
    396                    }
    397          
    398          		 /* Tongle status to switch the USB audio buffer out */
    399          
    400          	}			 
    401          
    402          
    403          
    404          }
    405          
    406          
    407          /* Private functions ---------------------------------------------------------*/
    408          
    409          /**
    410            * @brief  Main program
    411            * @param  None
    412            * @retval None
    413            */

   \                                 In section .text, align 4, keep-with-next
    414          int main(void)
    415          {
   \                     main: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0A5             SUB      SP,SP,#+148
    416            /* Enable the CPU Cache */
    417            CPU_CACHE_Enable();
   \   00000006   0xF3BF 0x8F4F      DSB      
   \   0000000A   0xF3BF 0x8F6F      ISB      
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0xe000ed14
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xF8C0 0x123C      STR      R1,[R0, #+572]
   \   00000018   0x6801             LDR      R1,[R0, #+0]
   \   0000001A   0xF441 0x3100      ORR      R1,R1,#0x20000
   \   0000001E   0x6001             STR      R1,[R0, #+0]
   \   00000020   0xF3BF 0x8F4F      DSB      
   \   00000024   0xF3BF 0x8F6F      ISB      
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x6701             STR      R1,[R0, #+112]
   \   0000002C   0xF3BF 0x8F4F      DSB      
   \   00000030   0xF8D0 0x106C      LDR.W    R1,[R0, #+108]
   \   00000034   0xF3C1 0x324E      UBFX     R2,R1,#+13,#+15
   \                     ??main_0: (+1)
   \   00000038   0xF643 0x74E0      MOVW     R4,#+16352
   \   0000003C   0xF3C1 0x03C9      UBFX     R3,R1,#+3,#+10
   \   00000040   0xEA04 0x1442      AND      R4,R4,R2, LSL #+5
   \                     ??main_1: (+1)
   \   00000044   0xEA44 0x7583      ORR      R5,R4,R3, LSL #+30
   \   00000048   0xF8C0 0x524C      STR      R5,[R0, #+588]
   \   0000004C   0x461D             MOV      R5,R3
   \   0000004E   0x1E6B             SUBS     R3,R5,#+1
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xD1F7             BNE.N    ??main_1
   \   00000054   0x4613             MOV      R3,R2
   \   00000056   0x1E5A             SUBS     R2,R3,#+1
   \   00000058   0x2B00             CMP      R3,#+0
   \   0000005A   0xD1ED             BNE.N    ??main_0
   \   0000005C   0xF3BF 0x8F4F      DSB      
   \   00000060   0x6801             LDR      R1,[R0, #+0]
   \   00000062   0xF441 0x3180      ORR      R1,R1,#0x10000
   \   00000066   0x6001             STR      R1,[R0, #+0]
   \   00000068   0xF3BF 0x8F4F      DSB      
   \   0000006C   0xF3BF 0x8F6F      ISB      
    418            
    419            /* STM32F7xx HAL library initialization:
    420                 - Configure the Flash ART accelerator on ITCM interface
    421                 - Configure the Systick to generate an interrupt each 1 msec
    422                 - Set NVIC Group Priority to 4
    423                 - Global MSP (MCU Support Package) initialization
    424               */   
    425            HAL_Init();
   \   00000070   0x.... 0x....      BL       HAL_Init
    426            /* Configure the system clock to 216 MHz */
    427            //Test_SystemClock_Config(); 
    428            SystemClock_Config();
   \   00000074   0x.... 0x....      BL       SystemClock_Config
    429            BSP_AUDIO_OUT_ClockConfig(3*AUDIO_FREQ, NULL);
   \   00000078   0xA803             ADD      R0,SP,#+12
   \   0000007A   0x.... 0x....      LDR.W    R5,??DataTable12_1  ;; 0x40023830
   \   0000007E   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
   \   00000082   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000086   0x.... 0x....      LDR.W    R4,??DataTable12_2
   \   0000008A   0x9003             STR      R0,[SP, #+12]
   \   0000008C   0xF44F 0x0080      MOV      R0,#+4194304
   \   00000090   0x9013             STR      R0,[SP, #+76]
   \   00000092   0xF44F 0x70AC      MOV      R0,#+344
   \   00000096   0x9004             STR      R0,[SP, #+16]
   \   00000098   0x2007             MOVS     R0,#+7
   \   0000009A   0x9006             STR      R0,[SP, #+24]
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x900C             STR      R0,[SP, #+48]
   \   000000A0   0xA803             ADD      R0,SP,#+12
   \   000000A2   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    430          #if EXT_RAM  
    431            /* Initialize the SDRAM */
    432            BSP_SDRAM_Init();
    433          #endif
    434            BSP_LED_Init(LED1);
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x.... 0x....      LDR.W    R8,??DataTable12_3  ;; 0x40021000
   \   000000AC   0x.... 0x....      BL       BSP_LED_Init
    435            BSP_LED_Init(LED2);
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0x.... 0x....      BL       BSP_LED_Init
    436          
    437            /* Button Initialization */
    438            // sop1hc: removed on 22 June 2016, since do not install 2 buttons on this version 
    439            //ButtonInit();
    440          
    441            //BSP_PB_Init(BUTTON_KEY,BUTTON_MODE_EXTI);
    442          
    443            
    444            /* Init TS module */
    445             BeamFormingSD_Init();	
   \   000000B6   0x.... 0x....      BL       BeamFormingSD_Init
    446          
    447          
    448              /*-----------------------*/
    449          	/* ---------PA4: LCCKO(I2S2)-------------*/
    450              __GPIOA_CLK_ENABLE();
   \   000000BA   0x2000             MOVS     R0,#+0
    451              GPIO_INS.Pin = GPIO_PIN_4;
    452              GPIO_INS.Mode =GPIO_MODE_INPUT;
    453              GPIO_INS.Pull =GPIO_PULLUP;
    454              GPIO_INS.Speed =GPIO_SPEED_HIGH;
    455              HAL_GPIO_Init(GPIOA,&GPIO_INS);
   \   000000BC   0x4621             MOV      R1,R4
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0x6828             LDR      R0,[R5, #+0]
   \   000000C2   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000000C6   0x6028             STR      R0,[R5, #+0]
   \   000000C8   0x6828             LDR      R0,[R5, #+0]
   \   000000CA   0xF000 0x0001      AND      R0,R0,#0x1
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \   000000D0   0x9800             LDR      R0,[SP, #+0]
   \   000000D2   0x2010             MOVS     R0,#+16
   \   000000D4   0x6020             STR      R0,[R4, #+0]
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x6060             STR      R0,[R4, #+4]
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0x60A0             STR      R0,[R4, #+8]
   \   000000DE   0x2003             MOVS     R0,#+3
   \   000000E0   0x60E0             STR      R0,[R4, #+12]
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable12_4  ;; 0x40020000
   \   000000E6   0x.... 0x....      BL       HAL_GPIO_Init
    456          
    457              /* Enable and set Button EXTI Interrupt to the lowest priority */
    458              //HAL_NVIC_SetPriority((IRQn_Type)EXTI4_IRQn, INTERRUPT_PRI_EXT_LRCK, 0);
    459              //HAL_NVIC_EnableIRQ((IRQn_Type)EXTI4_IRQn);
    460          	
    461               /* ---------PB12: LCCKO (I2S2)-------------*/
    462              __GPIOB_CLK_ENABLE();
   \   000000EA   0x2000             MOVS     R0,#+0
    463              GPIO_INS.Pin = GPIO_PIN_12;
    464              GPIO_INS.Mode =GPIO_MODE_INPUT;
    465              GPIO_INS.Pull =GPIO_PULLUP;
    466              GPIO_INS.Speed =GPIO_SPEED_HIGH;
    467              HAL_GPIO_Init(GPIOB,&GPIO_INS);
   \   000000EC   0x4621             MOV      R1,R4
   \   000000EE   0x9000             STR      R0,[SP, #+0]
   \   000000F0   0x6828             LDR      R0,[R5, #+0]
   \   000000F2   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000F6   0x6028             STR      R0,[R5, #+0]
   \   000000F8   0x6828             LDR      R0,[R5, #+0]
   \   000000FA   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000FE   0x9000             STR      R0,[SP, #+0]
   \   00000100   0x9800             LDR      R0,[SP, #+0]
   \   00000102   0xF44F 0x5080      MOV      R0,#+4096
   \   00000106   0x6020             STR      R0,[R4, #+0]
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x6060             STR      R0,[R4, #+4]
   \   0000010C   0x2001             MOVS     R0,#+1
   \   0000010E   0x60A0             STR      R0,[R4, #+8]
   \   00000110   0x2003             MOVS     R0,#+3
   \   00000112   0x60E0             STR      R0,[R4, #+12]
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable12_5  ;; 0x40020400
   \   00000118   0x.... 0x....      BL       HAL_GPIO_Init
    468              /*-----------------------------------------*/
    469          
    470              /* ---------PE4: LCCKO --------------------*/
    471              __GPIOE_CLK_ENABLE();
   \   0000011C   0x2000             MOVS     R0,#+0
    472              GPIO_INS.Pin = GPIO_PIN_4;
    473              GPIO_INS.Mode =GPIO_MODE_INPUT;
    474              GPIO_INS.Pull =GPIO_PULLUP;
    475              GPIO_INS.Speed =GPIO_SPEED_HIGH;
    476              HAL_GPIO_Init(GPIOE,&GPIO_INS);
   \   0000011E   0x4621             MOV      R1,R4
   \   00000120   0x9000             STR      R0,[SP, #+0]
   \   00000122   0x6828             LDR      R0,[R5, #+0]
   \   00000124   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000128   0x6028             STR      R0,[R5, #+0]
   \   0000012A   0x6828             LDR      R0,[R5, #+0]
   \   0000012C   0xF000 0x0010      AND      R0,R0,#0x10
   \   00000130   0x9000             STR      R0,[SP, #+0]
   \   00000132   0x9800             LDR      R0,[SP, #+0]
   \   00000134   0x2010             MOVS     R0,#+16
   \   00000136   0x6020             STR      R0,[R4, #+0]
   \   00000138   0x2000             MOVS     R0,#+0
   \   0000013A   0x6060             STR      R0,[R4, #+4]
   \   0000013C   0x2001             MOVS     R0,#+1
   \   0000013E   0x60A0             STR      R0,[R4, #+8]
   \   00000140   0x2003             MOVS     R0,#+3
   \   00000142   0x60E0             STR      R0,[R4, #+12]
   \   00000144   0x4640             MOV      R0,R8
   \   00000146   0x.... 0x....      BL       HAL_GPIO_Init
    477              /*-----------------------------------------*/
    478          
    479              /*---------PE3: POWER DOWN-----------------*/
    480              __GPIOE_CLK_ENABLE();
   \   0000014A   0x2000             MOVS     R0,#+0
    481              GPIO_INS.Pin = GPIO_PIN_3;
    482              GPIO_INS.Mode = GPIO_MODE_OUTPUT_PP;
    483              GPIO_INS.Pull = GPIO_PULLUP;
    484              GPIO_INS.Speed = GPIO_SPEED_HIGH;
    485          
    486              HAL_GPIO_Init(GPIOE, &GPIO_INS);
   \   0000014C   0x4621             MOV      R1,R4
   \   0000014E   0x9000             STR      R0,[SP, #+0]
   \   00000150   0x6828             LDR      R0,[R5, #+0]
   \   00000152   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000156   0x6028             STR      R0,[R5, #+0]
   \   00000158   0x6828             LDR      R0,[R5, #+0]
   \   0000015A   0xF000 0x0010      AND      R0,R0,#0x10
   \   0000015E   0x9000             STR      R0,[SP, #+0]
   \   00000160   0x9800             LDR      R0,[SP, #+0]
   \   00000162   0x2008             MOVS     R0,#+8
   \   00000164   0x6020             STR      R0,[R4, #+0]
   \   00000166   0x2001             MOVS     R0,#+1
   \   00000168   0x6060             STR      R0,[R4, #+4]
   \   0000016A   0x60A0             STR      R0,[R4, #+8]
   \   0000016C   0x2003             MOVS     R0,#+3
   \   0000016E   0x60E0             STR      R0,[R4, #+12]
   \   00000170   0x4640             MOV      R0,R8
   \   00000172   0x.... 0x....      BL       HAL_GPIO_Init
    487          
    488              HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
   \   00000176   0x2200             MOVS     R2,#+0
   \   00000178   0x2108             MOVS     R1,#+8
   \   0000017A   0x4640             MOV      R0,R8
   \   0000017C   0x.... 0x....      BL       HAL_GPIO_WritePin
    489              //HAL_Delay(300);
    490              /*----------------------------------------*/
    491          
    492          #if (DEBUG)  
    493              /* UART for debug */
    494              USART3_Init();
    495          #endif
    496          
    497          #if (USB_STREAMING)	
    498          		/* Initialize USB descriptor basing on channels number and sampling frequency */
    499          		USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, 4*AUDIO_SAMPLING_FREQUENCY, AUDIO_CHANNELS);
   \   00000180   0x2202             MOVS     R2,#+2
   \   00000182   0xF44F 0x417A      MOV      R1,#+64000
   \   00000186   0xF104 0x002C      ADD      R0,R4,#+44
   \   0000018A   0x.... 0x....      BL       USBD_AUDIO_Init_Microphone_Descriptor
    500          		/* Init Device Library */
    501          		USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
   \   0000018E   0x2200             MOVS     R2,#+0
   \   00000190   0x.... 0x....      LDR.W    R1,??DataTable12_6
   \   00000194   0xF104 0x002C      ADD      R0,R4,#+44
   \   00000198   0x.... 0x....      BL       USBD_Init
    502          		/* Add Supported Class */
    503          		USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable12_7
   \   000001A0   0xF104 0x002C      ADD      R0,R4,#+44
   \   000001A4   0x.... 0x....      BL       USBD_RegisterClass
    504          		/* Add Interface callbacks for AUDIO Class */  
    505          		USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
   \   000001A8   0x.... 0x....      LDR.W    R1,??DataTable12_8
   \   000001AC   0xF104 0x002C      ADD      R0,R4,#+44
   \   000001B0   0x.... 0x....      BL       USBD_AUDIO_RegisterInterface
    506          		/* Start Device Process */
    507          		USBD_Start(&hUSBDDevice);
   \   000001B4   0xF104 0x002C      ADD      R0,R4,#+44
   \   000001B8   0x.... 0x....      BL       USBD_Start
    508          	
    509          		/* Init Host Library */
    510          		//test GIT //USBH_Init(&hUSBHost, USBH_UserProcess, 0);
    511          	
    512          		/* Add Supported Class */
    513          		//test GIT //USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
    514          		
    515          		/* Start Host Process */
    516          		//test GIT //USBH_Start(&hUSBHost); 					  
    517          #endif 
    518          
    519              
    520              AUDIO_InitApplication();
   \   000001BC   0x.... 0x....      BL       AUDIO_InitApplication
    521           
    522               /*------------------------PLAYER------------------------------------------*/
    523              Audio_MAL_Play((uint32_t)bufferSum,6*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
   \   000001C0   0x21C0             MOVS     R1,#+192
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   000001C6   0x.... 0x....      BL       Audio_MAL_Play
    524              /*------------------------------------------------------------------------*/ 
    525           					  
    526          
    527              /*----------------------------------------*/
    528              MX_I2C2_Init(); //for STA321MP
   \   000001CA   0x.... 0x....      BL       MX_I2C2_Init
    529              STA321MP_Ini();
   \   000001CE   0x.... 0x....      BL       STA321MP_Ini
    530              BSP_LED_Toggle(LED1);
   \   000001D2   0x2000             MOVS     R0,#+0
   \   000001D4   0x.... 0x....      BL       BSP_LED_Toggle
    531              /* Init Audio Application */
    532          #ifdef CS43L22_PLAY
    533              AUDIO_InitApplication();
    534          #endif
    535              BSP_LED_Toggle(LED2);
   \   000001D8   0x2001             MOVS     R0,#+1
   \   000001DA   0x.... 0x....      BL       BSP_LED_Toggle
    536          
    537              buffer_switch = BUF3_PLAY;		 /* record data to buffer1 */
   \   000001DE   0x2002             MOVS     R0,#+2
   \   000001E0   0x75E0             STRB     R0,[R4, #+23]
    538          
    539              __disable_irq();
   \   000001E2   0xB672             CPSID    I
    540              MIC1TO8_Init();
   \   000001E4   0x.... 0x....      BL       MIC1TO8_Init
    541              StartPlay();
   \   000001E8   0x.... 0x....      BL       I2S1_Enable
   \   000001EC   0x.... 0x....      BL       I2S2_Enable
   \   000001F0   0x.... 0x....      BL       SPI4_Enable
   \   000001F4   0x.... 0x....      BL       StartRecMic7_8
   \   000001F8   0x2000             MOVS     R0,#+0
   \   000001FA   0x.... 0x....      LDR.W    R1,??DataTable12_10
   \   000001FE   0x8420             STRH     R0,[R4, #+32]
   \   00000200   0x8460             STRH     R0,[R4, #+34]
   \   00000202   0x83A0             STRH     R0,[R4, #+28]
   \   00000204   0x8360             STRH     R0,[R4, #+26]
   \   00000206   0x84A0             STRH     R0,[R4, #+36]
   \   00000208   0x84E0             STRH     R0,[R4, #+38]
   \   0000020A   0x8008             STRH     R0,[R1, #+0]
   \   0000020C   0x75E0             STRB     R0,[R4, #+23]
    542              __enable_irq();
   \   0000020E   0xB662             CPSIE    I
    543              BSP_LED_Toggle(LED1);
   \   00000210   0x.... 0x....      BL       BSP_LED_Toggle
   \   00000214   0x.... 0x....      LDR.W    R5,??DataTable12_11
   \   00000218   0x.... 0x....      LDR.W    R8,??DataTable12_12
   \   0000021C   0xF505 0x50E0      ADD      R0,R5,#+7168
   \   00000220   0x.... 0x....      LDR.W    R11,??DataTable12_13
   \   00000224   0x9000             STR      R0,[SP, #+0]
   \   00000226   0xF508 0x50E0      ADD      R0,R8,#+7168
   \   0000022A   0x9002             STR      R0,[SP, #+8]
   \   0000022C   0xF50B 0x50E0      ADD      R0,R11,#+7168
   \   00000230   0x9001             STR      R0,[SP, #+4]
   \   00000232   0x.... 0x....      LDR.W    R6,??DataTable12_14
   \   00000236   0x.... 0x....      LDR.W    R9,??DataTable12_15
   \   0000023A   0x.... 0x....      LDR.W    R10,??DataTable12_16
   \   0000023E   0x.... 0x....      LDR.W    R7,??DataTable12_17
   \   00000242   0xE013             B.N      ??main_2
    544              
    545              
    546          	//EnergyNoiseCalc(AUDIO_OUT_BUFFER_SIZE/2);
    547              //Precalculation(Coef,PreCalcBuff);
    548              
    549              while (1)
    550              {   
   \                     ??main_3: (+1)
   \   00000244   0x2001             MOVS     R0,#+1
   \   00000246   0x.... 0x....      BL       BSP_LED_On
   \   0000024A   0x2000             MOVS     R0,#+0
   \                     ??main_4: (+1)
   \   0000024C   0x.... 0x....      BL       BSP_LED_Off
    551          		/* This calculation happens once time in power cycles */
    552          		/* After 5 times of full frame recieved interrupt */
    553                  
    554                  if ((cntStrt>=5)&&(cntStrt<20))
    555                  {
    556                      if ((WaveRecord_flgIni<900)&&(cntStrt<10))
    557                      {
    558                          if (ValBit(SPI4_stNipple,0)!=0)
    559                          {
    560                              swtCase1Mic56 = 1;    
    561                          }
    562                          WaveRecord_flgIni++;
    563                      }
    564                      else if ((WaveRecord_flgIni<1000)&&(cntStrt<10))
    565                      {
    566                          if (swtCase1Mic56==0)
    567                          {
    568                               stMIC56 = GPIO_PIN_SET;
    569                               stMIC56Old = GPIO_PIN_SET; 
    570                               SPI4_stPosShft = 0;
    571                          }
    572          
    573                          WaveRecord_flgIni++;
    574                          
    575          
    576                      }
    577                      else if ((cntStrt==10)&&(WaveRecord_flgIni<200))
    578                      {
    579                          for(char i=0;i<16;i++)
    580                          {
    581                               if (ValBit(SPI4_stNipple,i)!=0) 
    582                               {
    583                                    SPI4_stPosShft = MAX(SPI4_stPosShft,i+1);
    584                               }
    585                          }
    586                          
    587                          if (SPI4_stPosShft==16)  HAL_NVIC_SystemReset(); 
    588                  
    589                          WaveRecord_flgIni++;			
    590                      }
    591                      else
    592                      {
    593                          flgShipping = 0;
    594                          WaveRecord_flgIni = 0;
    595                      }
    596          					  
    597          
    598          		 }
    599          		 
    600          	
    601          		/* USB Host Background task */
    602          		//USBH_Process(&hUSBHost);
    603          
    604          		/* AUDIO Menu Process */
    605          		//AUDIO_MenuProcess();
    606          
    607          		FFT_Update();   
    608          
    609          		if (flg10ms==1)
   \                     ??main_5: (+1)
   \   00000250   0xF994 0x0016      LDRSB    R0,[R4, #+22]
   \   00000254   0x2801             CMP      R0,#+1
   \   00000256   0xD109             BNE.N    ??main_2
    610          		{
    611          		    flg10ms=0;		   		      
   \   00000258   0x2000             MOVS     R0,#+0
   \   0000025A   0x75A0             STRB     R0,[R4, #+22]
    612          	         cntTime200++;
   \   0000025C   0x8D60             LDRH     R0,[R4, #+42]
   \   0000025E   0x1C40             ADDS     R0,R0,#+1
   \   00000260   0x8560             STRH     R0,[R4, #+42]
    613          	         if (cntTime200==40)
   \   00000262   0xB280             UXTH     R0,R0
   \   00000264   0x2828             CMP      R0,#+40
   \   00000266   0xBF04             ITT      EQ 
   \   00000268   0x2000             MOVEQ    R0,#+0
   \   0000026A   0x8560             STRHEQ   R0,[R4, #+42]
    614          	         {
    615          #if (DEBUG)
    616                             uint32_t tmpSNR63,tmpSNR14,tmpSNR78,tmpSNR25;
    617                             tmpSNR78 = (uint32_t)(CrssCorVal78/EnergyError);
    618                             tmpSNR25 = (uint32_t)(CrssCorVal25/EnergyError);
    619          				   tmpSNR14 = (uint32_t)(CrssCorVal14/EnergyError);
    620          				   tmpSNR63 = (uint32_t)(CrssCorVal63/EnergyError);
    621                              //if (tmpSNR>10)
    622                              {
    623                                  int16_t test[5];
    624                                  static uint8_t flagNotMin;
    625                                  test[0] = 0;
    626          
    627          
    628          						if (((CrssCorVal63>10))||((CrssCorVal14>10))||((CrssCorVal25>10))||((CrssCorVal78>10)))
    629                                  {
    630                                       sprintf((char *)pUARTBuf,"%d:%d:%d:%d  ",idxLatency63,idxLatency14,idxLatency25,idxLatency78);
    631                                       flagNotMin=0 ;
    632                                        sprintf((char *)(pUARTBuf+15),"----------\r\n");
    633                                        if (test[3]>0)
    634                                        {
    635                                                sprintf((char *)(pUARTBuf+15),"Close Mic 5\r\n"); 
    636          									  flagNotMin=1;
    637                                        }
    638                                        else if (test[3]<0)
    639                                        {
    640                                              sprintf((char *)(pUARTBuf+15),"Clsoe Mic 2\r\n");
    641          									flagNotMin=1;
    642          
    643                                        }
    644                                        else
    645                                        {
    646                                             
    647                                        }	
    648          
    649          						
    650          				                if (test[2]>0)
    651          		                  	    {
    652          		                  	       if((CrssCorVal14>CrssCorVal25)||(flagNotMin==0))
    653          		                  	       {
    654          		                             sprintf((char *)(pUARTBuf+15),"Clsoe Mic 4\r\n");
    655          									 flagNotMin=2;
    656          		                  	       }
    657          		                  	    }
    658          		                        else if (test[2]<0)
    659          		                        {
    660          		                            if((CrssCorVal14>CrssCorVal25)||(flagNotMin==0))
    661          		                            {
    662          		                              sprintf((char *)(pUARTBuf+15),"Clsoe Mic 1\r\n");                             
    663          									  flagNotMin=2;
    664          		                            }
    665          		                        }
    666          		                        else
    667          		                        {
    668          
    669          		                        }
    670          
    671          						   
    672          		                        if (test[1]>0)
    673          		                  	    {
    674          		                  	       if((((CrssCorVal63>CrssCorVal25)&&(flagNotMin==1))||(flagNotMin==0))||((CrssCorVal63>CrssCorVal14)&&(flagNotMin==2)))
    675          		                  	       {
    676          								     sprintf((char *)(pUARTBuf+15),"Clsoe Mic 3\r\n");
    677          								     flagNotMin=3;
    678          		                  	       }
    679          		                  	    }
    680          		                        else if (test[1]<0)
    681          		                        {
    682          		                             if((((CrssCorVal63>CrssCorVal25)&&(flagNotMin==1))||(flagNotMin==0))||((CrssCorVal63>CrssCorVal14)&&(flagNotMin==2)))
    683          		                             {
    684          		                               sprintf((char *)(pUARTBuf+15),"Clsoe Mic 6\r\n"); 
    685          									   flagNotMin=3;
    686          		                             }
    687          		                        }
    688          		                        else
    689          		                        {
    690          
    691          		                        }
    692          
    693          
    694          	                            if ((test[4]>3))
    695          	                            {
    696          	                                if ((flagNotMin==0))                                     
    697          	                                    sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    698          								    else if ((flagNotMin==1))
    699          										if ((CrssCorVal78>CrssCorVal25))
    700          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    701          								    else if ((flagNotMin==2))
    702          										if ((CrssCorVal78>CrssCorVal14))
    703          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");	
    704          								    else if ((flagNotMin==3))
    705          										if ((CrssCorVal78>CrssCorVal63))
    706          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    707          									else
    708          										;
    709          									
    710          	                            }
    711          	                            else if (test<=0)
    712          	                            {
    713          	                                if ((flagNotMin==0))                                     
    714          	                                    sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    715          								    else if ((flagNotMin==1))
    716          										if ((CrssCorVal78>CrssCorVal25))
    717          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    718          								    else if ((flagNotMin==2))
    719          										if ((CrssCorVal78>CrssCorVal14))
    720          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");	
    721          								    else if ((flagNotMin==3))
    722          										if ((CrssCorVal78>CrssCorVal63))
    723          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    724          									else
    725          										;
    726          									
    727          	                            }                          
    728          	                            else
    729          	                            {
    730          	                            }
    731          
    732          
    733          			  //if (flagNotMin==0) sprintf((char *)(pUARTBuf+15),"----------- \r\n");
    734          									
    735                                    //HAL_UART_Transmit_IT(&huart3,pUARTBuf,15);
    736                                    SrvB_Debound(&flgS2Ins,&flgS2Flt, flgS2,2);
    737                                    SrvB_Debound(&flgS3Ins,&flgS3Flt, flgS3,2);
    738                                    SrvB_Debound(&flgS4Ins,&flgS4Flt, flgS4,2);
    739          
    740                                    stDir = (flgS2Flt<<2)|(flgS3Flt<<1)|(flgS4Flt); 
    741                                   
    742                                     sprintf((char *)(pUARTBuf+30),"%d:%d:%d:%d\n\r\n\r",CrssCorVal63,CrssCorVal14,CrssCorVal25,CrssCorVal78);
    743                                     HAL_UART_Transmit_IT(&huart3,pUARTBuf,15+15+15);		
    744                                   }
    745                              }//if(SNR)
    746          
    747          #endif
    748          	   	         cntTime200=0;
    749                        } //(cntTime200==40)
    750                }//if (flg10ms==1)	
   \                     ??main_2: (+1)
   \   0000026C   0x8838             LDRH     R0,[R7, #+0]
   \   0000026E   0x2805             CMP      R0,#+5
   \   00000270   0xDB4C             BLT.N    ??main_6
   \   00000272   0x8838             LDRH     R0,[R7, #+0]
   \   00000274   0x2814             CMP      R0,#+20
   \   00000276   0xDA49             BGE.N    ??main_6
   \   00000278   0xF8BA 0x0000      LDRH     R0,[R10, #+0]
   \   0000027C   0xF5B0 0x7F61      CMP      R0,#+900
   \   00000280   0xBFBC             ITT      LT 
   \   00000282   0x8839             LDRHLT   R1,[R7, #+0]
   \   00000284   0x290A             CMPLT    R1,#+10
   \   00000286   0xDA09             BGE.N    ??main_7
   \   00000288   0xF8B9 0x0000      LDRH     R0,[R9, #+0]
   \   0000028C   0x07C0             LSLS     R0,R0,#+31
   \   0000028E   0xD535             BPL.N    ??main_8
   \   00000290   0x2001             MOVS     R0,#+1
   \   00000292   0x7620             STRB     R0,[R4, #+24]
   \   00000294   0xF8BA 0x0000      LDRH     R0,[R10, #+0]
   \   00000298   0x1C40             ADDS     R0,R0,#+1
   \   0000029A   0xE035             B.N      ??main_9
   \                     ??main_7: (+1)
   \   0000029C   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000002A0   0xBFBC             ITT      LT 
   \   000002A2   0x8839             LDRHLT   R1,[R7, #+0]
   \   000002A4   0x290A             CMPLT    R1,#+10
   \   000002A6   0xDA0E             BGE.N    ??main_10
   \   000002A8   0x7E20             LDRB     R0,[R4, #+24]
   \   000002AA   0xBB38             CBNZ.N   R0,??main_8
   \   000002AC   0x2001             MOVS     R0,#+1
   \   000002AE   0x.... 0x....      LDR.W    R1,??DataTable12_18
   \   000002B2   0x7008             STRB     R0,[R1, #+0]
   \   000002B4   0x.... 0x....      LDR.W    R1,??DataTable12_19
   \   000002B8   0x7008             STRB     R0,[R1, #+0]
   \   000002BA   0x2000             MOVS     R0,#+0
   \   000002BC   0x7030             STRB     R0,[R6, #+0]
   \   000002BE   0xF8BA 0x0000      LDRH     R0,[R10, #+0]
   \   000002C2   0x1C40             ADDS     R0,R0,#+1
   \   000002C4   0xE020             B.N      ??main_9
   \                     ??main_10: (+1)
   \   000002C6   0x8839             LDRH     R1,[R7, #+0]
   \   000002C8   0x290A             CMP      R1,#+10
   \   000002CA   0xD11B             BNE.N    ??main_11
   \   000002CC   0x28C8             CMP      R0,#+200
   \   000002CE   0xDA19             BGE.N    ??main_11
   \   000002D0   0xF05F 0x0000      MOVS.W   R0,#+0
   \                     ??main_12: (+1)
   \   000002D4   0xF9B9 0x2000      LDRSH    R2,[R9, #+0]
   \   000002D8   0x1C41             ADDS     R1,R0,#+1
   \   000002DA   0x4102             ASRS     R2,R2,R0
   \   000002DC   0x07D2             LSLS     R2,R2,#+31
   \   000002DE   0xD505             BPL.N    ??main_13
   \   000002E0   0x7832             LDRB     R2,[R6, #+0]
   \   000002E2   0x4291             CMP      R1,R2
   \   000002E4   0xBFB4             ITE      LT 
   \   000002E6   0x7830             LDRBLT   R0,[R6, #+0]
   \   000002E8   0x1C40             ADDGE    R0,R0,#+1
   \   000002EA   0x7030             STRB     R0,[R6, #+0]
   \                     ??main_13: (+1)
   \   000002EC   0x4608             MOV      R0,R1
   \   000002EE   0x2810             CMP      R0,#+16
   \   000002F0   0xDBF0             BLT.N    ??main_12
   \   000002F2   0x7830             LDRB     R0,[R6, #+0]
   \   000002F4   0x2810             CMP      R0,#+16
   \   000002F6   0xBF08             IT       EQ 
   \   000002F8   0x.... 0x....      BLEQ     HAL_NVIC_SystemReset
   \                     ??main_8: (+1)
   \   000002FC   0xF8BA 0x0000      LDRH     R0,[R10, #+0]
   \   00000300   0x1C40             ADDS     R0,R0,#+1
   \   00000302   0xE001             B.N      ??main_9
   \                     ??main_11: (+1)
   \   00000304   0x2000             MOVS     R0,#+0
   \   00000306   0x7560             STRB     R0,[R4, #+21]
   \                     ??main_9: (+1)
   \   00000308   0xF8AA 0x0000      STRH     R0,[R10, #+0]
   \                     ??main_6: (+1)
   \   0000030C   0x7D20             LDRB     R0,[R4, #+20]
   \   0000030E   0x2800             CMP      R0,#+0
   \   00000310   0xD19E             BNE.N    ??main_5
   \   00000312   0x.... 0x....      BL       PDM2PCMSDO78
   \   00000316   0x2001             MOVS     R0,#+1
   \   00000318   0x7520             STRB     R0,[R4, #+20]
   \   0000031A   0x7DE0             LDRB     R0,[R4, #+23]
   \   0000031C   0xB198             CBZ.N    R0,??main_14
   \   0000031E   0x2802             CMP      R0,#+2
   \   00000320   0xD001             BEQ.N    ??main_15
   \   00000322   0xD308             BCC.N    ??main_16
   \   00000324   0xE018             B.N      ??main_17
   \                     ??main_15: (+1)
   \   00000326   0x4658             MOV      R0,R11
   \   00000328   0x.... 0x....      BL       DOACalc
   \   0000032C   0x7660             STRB     R0,[R4, #+25]
   \   0000032E   0x9A01             LDR      R2,[SP, #+4]
   \   00000330   0x2103             MOVS     R1,#+3
   \   00000332   0x4658             MOV      R0,R11
   \   00000334   0xE00E             B.N      ??main_18
   \                     ??main_16: (+1)
   \   00000336   0x4640             MOV      R0,R8
   \   00000338   0x.... 0x....      BL       DOACalc
   \   0000033C   0x7660             STRB     R0,[R4, #+25]
   \   0000033E   0x9A02             LDR      R2,[SP, #+8]
   \   00000340   0x2103             MOVS     R1,#+3
   \   00000342   0x4640             MOV      R0,R8
   \   00000344   0xE006             B.N      ??main_18
   \                     ??main_14: (+1)
   \   00000346   0x4628             MOV      R0,R5
   \   00000348   0x.... 0x....      BL       DOACalc
   \   0000034C   0x7660             STRB     R0,[R4, #+25]
   \   0000034E   0x9A00             LDR      R2,[SP, #+0]
   \   00000350   0x2103             MOVS     R1,#+3
   \   00000352   0x4628             MOV      R0,R5
   \                     ??main_18: (+1)
   \   00000354   0x.... 0x....      BL       BeamFormingSD
   \                     ??main_17: (+1)
   \   00000358   0x.... 0x....      BL       AudioPlayerUpd
   \   0000035C   0x7E60             LDRB     R0,[R4, #+25]
   \   0000035E   0x2803             CMP      R0,#+3
   \   00000360   0xD106             BNE.N    ??main_19
   \   00000362   0x2001             MOVS     R0,#+1
   \   00000364   0x.... 0x....      BL       BSP_LED_Off
   \   00000368   0x2000             MOVS     R0,#+0
   \                     ??main_20: (+1)
   \   0000036A   0x.... 0x....      BL       BSP_LED_On
   \   0000036E   0xE76F             B.N      ??main_5
   \                     ??main_19: (+1)
   \   00000370   0x2802             CMP      R0,#+2
   \   00000372   0xD104             BNE.N    ??main_21
   \   00000374   0x2000             MOVS     R0,#+0
   \   00000376   0x.... 0x....      BL       BSP_LED_On
   \   0000037A   0x2001             MOVS     R0,#+1
   \   0000037C   0xE7F5             B.N      ??main_20
   \                     ??main_21: (+1)
   \   0000037E   0x2804             CMP      R0,#+4
   \   00000380   0xF47F 0xAF60      BNE.W    ??main_3
   \   00000384   0x2000             MOVS     R0,#+0
   \   00000386   0x.... 0x....      BL       BSP_LED_Off
   \   0000038A   0x2001             MOVS     R0,#+1
   \   0000038C   0xE75E             B.N      ??main_4
    751            }
    752          }
    753          
    754          /**
    755            * @brief  Toggle Leds.
    756            * @param  None
    757            * @retval None
    758            */

   \                                 In section .text, align 2, keep-with-next
    759          void Toggle_Leds(void)
    760          {
    761            static uint32_t ticks = 0;
    762          
    763            if (ticks++ > 200)
   \                     Toggle_Leds: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable12_20
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x1C4A             ADDS     R2,R1,#+1
   \   00000008   0x29C9             CMP      R1,#+201
   \   0000000A   0xBF28             IT       CS 
   \   0000000C   0x2200             MOVCS    R2,#+0
    764            {
    765              //BSP_LED_Toggle(LED1);
    766              ticks = 0;
   \   0000000E   0x6002             STR      R2,[R0, #+0]
    767            }
    768          }
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??ticks:
   \   00000000                      DS8 4
    769          
    770          
    771          /**
    772            * @brief  System Clock Configuration
    773            *         The system Clock is configured as follow : 
    774            *            System Clock source            = PLL (HSE)
    775            *            SYSCLK(Hz)                     = 216000000
    776            *            HCLK(Hz)                       = 216000000
    777            *            AHB Prescaler                  = 1
    778            *            APB1 Prescaler                 = 4
    779            *            APB2 Prescaler                 = 2
    780            *            HSE Frequency(Hz)              = 25000000
    781            *            PLL_M                          = 25
    782            *            PLL_N                          = 432
    783            *            PLL_P                          = 2
    784            *            PLL_Q                          = 9
    785            *            VDD(V)                         = 3.3
    786            *            Main regulator output voltage  = Scale1 mode
    787            *            Flash Latency(WS)              = 7
    788            * @param  None
    789            * @retval None
    790            */

   \                                 In section .text, align 2, keep-with-next
    791          static void SystemClock_Config(void)
    792          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B2             SUB      SP,SP,#+200
    793            RCC_ClkInitTypeDef RCC_ClkInitStruct;
    794            RCC_OscInitTypeDef RCC_OscInitStruct;
    795            RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    796            HAL_StatusTypeDef ret = HAL_OK;
    797          
    798            /* Enable HSE Oscillator and activate PLL with HSE as source */
    799            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x9026             STR      R0,[SP, #+152]
    800            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   00000008   0xF44F 0x3080      MOV      R0,#+65536
   \   0000000C   0x9027             STR      R0,[SP, #+156]
    801            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x902C             STR      R0,[SP, #+176]
    802            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    803            RCC_OscInitStruct.PLL.PLLM = 25;
   \   00000012   0x2019             MOVS     R0,#+25
   \   00000014   0x902E             STR      R0,[SP, #+184]
    804            RCC_OscInitStruct.PLL.PLLN = 432;  // 432
   \   00000016   0xF44F 0x70D8      MOV      R0,#+432
   \   0000001A   0x902F             STR      R0,[SP, #+188]
    805            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x9030             STR      R0,[SP, #+192]
    806            RCC_OscInitStruct.PLL.PLLQ = 9;
   \   00000020   0x2009             MOVS     R0,#+9
   \   00000022   0xF44F 0x0480      MOV      R4,#+4194304
   \   00000026   0x9031             STR      R0,[SP, #+196]
   \   00000028   0x942D             STR      R4,[SP, #+180]
    807          
    808            ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
   \   0000002A   0xA826             ADD      R0,SP,#+152
   \   0000002C   0x.... 0x....      BL       HAL_RCC_OscConfig
    809            if(ret != HAL_OK)
    810            {
    811              //while(1) { ; }
    812            }
    813          
    814            /* Activate the OverDrive to reach the 216 MHz Frequency */
    815            ret = HAL_PWREx_EnableOverDrive();
   \   00000030   0x.... 0x....      BL       HAL_PWREx_EnableOverDrive
    816            if(ret != HAL_OK)
    817            {
    818              //while(1) { ; }
    819            }
    820          
    821            /* Select PLLSAI output as USB clock source */
    822            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48 ;
   \   00000034   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000038   0x9005             STR      R0,[SP, #+20]
    823            PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
   \   0000003A   0xF04F 0x6000      MOV      R0,#+134217728
   \   0000003E   0x9024             STR      R0,[SP, #+144]
    824          
    825            
    826            PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
   \   00000040   0x20C0             MOVS     R0,#+192
   \   00000042   0x900A             STR      R0,[SP, #+40]
    827            PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0x900B             STR      R0,[SP, #+44]
    828            PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x900D             STR      R0,[SP, #+52]
    829            PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0x900C             STR      R0,[SP, #+48]
    830          
    831          
    832            ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
   \   00000050   0xA805             ADD      R0,SP,#+20
   \   00000052   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    833            
    834            if(ret != HAL_OK)
    835            {
    836              //while(1) { ; }
    837            }
    838            
    839            /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
    840            RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
   \   00000056   0x200F             MOVS     R0,#+15
    841            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    842            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
    843            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
    844            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
    845          
    846            ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
   \   00000058   0x2107             MOVS     R1,#+7
   \   0000005A   0x9000             STR      R0,[SP, #+0]
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x9001             STR      R0,[SP, #+4]
   \   00000060   0x2080             MOVS     R0,#+128
   \   00000062   0x9002             STR      R0,[SP, #+8]
   \   00000064   0xF44F 0x50A0      MOV      R0,#+5120
   \   00000068   0x9003             STR      R0,[SP, #+12]
   \   0000006A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000006E   0x9004             STR      R0,[SP, #+16]
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x.... 0x....      BL       HAL_RCC_ClockConfig
    847            if(ret != HAL_OK)
    848            {
    849              //while(1) { ; }
    850            }
    851            
    852           //sop1hc 344/7 = 49.142 MHz
    853            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable12_21  ;; 0x100001
    854            PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   0000007A   0x9415             STR      R4,[SP, #+84]
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    855            PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x9012             STR      R0,[SP, #+72]
    856            PeriphClkInitStruct.PLLI2S.PLLI2SP = 8;
   \   00000082   0x2008             MOVS     R0,#+8
   \   00000084   0x9009             STR      R0,[SP, #+36]
    857            PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   00000086   0xF44F 0x70AC      MOV      R0,#+344
   \   0000008A   0x9006             STR      R0,[SP, #+24]
    858            PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
   \   0000008C   0x2007             MOVS     R0,#+7
   \   0000008E   0x9008             STR      R0,[SP, #+32]
    859            PeriphClkInitStruct.PLLI2S.PLLI2SR = 7;
   \   00000090   0x9007             STR      R0,[SP, #+28]
    860            PeriphClkInitStruct.PLLI2SDivQ = 1;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x900E             STR      R0,[SP, #+56]
    861            HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);	
   \   00000096   0xA805             ADD      R0,SP,#+20
   \   00000098   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    862          }
   \   0000009C   0xB032             ADD      SP,SP,#+200
   \   0000009E   0xBD10             POP      {R4,PC}          ;; return
    863          
    864          /**
    865            * @brief  Clock Config.
    866            * @param  hsai: might be required to set audio peripheral predivider if any.
    867            * @param  AudioFreq: Audio frequency used to play the audio stream.
    868            * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
    869            *         Being __weak it can be overwritten by the application     
    870            * @retval None
    871            */

   \                                 In section .text, align 2, keep-with-next
    872          void BSP_AUDIO_OUT_ClockConfig(uint32_t AudioFreq, void *Params)
    873          {
   \                     BSP_AUDIO_OUT_ClockConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0A2             SUB      SP,SP,#+136
   \   00000004   0x4604             MOV      R4,R0
    874            RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;
    875          
    876            HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
    877            
    878            /* Set the PLL configuration according to the audio frequency */
    879            if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
   \   0000000C   0xF642 0x3011      MOVW     R0,#+11025
   \   00000010   0x4284             CMP      R4,R0
   \   00000012   0xBF1F             ITTTT    NE 
   \   00000014   0xF245 0x6022      MOVWNE   R0,#+22050
   \   00000018   0x4284             CMPNE    R4,R0
   \   0000001A   0xF64A 0x4044      MOVWNE   R0,#+44100
   \   0000001E   0x4284             CMPNE    R4,R0
   \   00000020   0xD10E             BNE.N    ??BSP_AUDIO_OUT_ClockConfig_0
    880            {
    881              /* Configure PLLSAI prescalers */
    882              /* PLLI2S_VCO: VCO_429M
    883              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    884              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    885              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \   00000022   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000026   0x9000             STR      R0,[SP, #+0]
    886              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000028   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000002C   0x9010             STR      R0,[SP, #+64]
    887              RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
   \   0000002E   0x2008             MOVS     R0,#+8
   \   00000030   0x9004             STR      R0,[SP, #+16]
    888              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
   \   00000032   0xF240 0x10AD      MOVW     R0,#+429
   \   00000036   0x9001             STR      R0,[SP, #+4]
    889              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x9003             STR      R0,[SP, #+12]
    890              RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
   \   0000003C   0x2013             MOVS     R0,#+19
   \   0000003E   0xE00B             B.N      ??BSP_AUDIO_OUT_ClockConfig_1
    891              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
    892            }
    893            else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K), AUDIO_FREQUENCY_96K */
    894            {
    895              /* SAI clock config
    896              PLLI2S_VCO: VCO_344M
    897              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
    898              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 49.142/1 = 49.142 Mhz */
    899              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \                     ??BSP_AUDIO_OUT_ClockConfig_0: (+1)
   \   00000040   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000044   0x9000             STR      R0,[SP, #+0]
    900              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000046   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000004A   0x9010             STR      R0,[SP, #+64]
    901          	//RCC_ExCLKInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
    902          //    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    903              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   0000004C   0xF44F 0x70AC      MOV      R0,#+344
   \   00000050   0x9001             STR      R0,[SP, #+4]
    904              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
   \   00000052   0x2007             MOVS     R0,#+7
   \   00000054   0x9003             STR      R0,[SP, #+12]
    905          	//RCC_ExCLKInitStruct.PLLI2S.PLLI2SR = 1;
    906              RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \                     ??BSP_AUDIO_OUT_ClockConfig_1: (+1)
   \   00000058   0x9009             STR      R0,[SP, #+36]
    907              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    908            }
    909            
    910          }
   \   00000060   0xB022             ADD      SP,SP,#+136
   \   00000062   0xBD10             POP      {R4,PC}          ;; return
    911          
    912          
    913          
    914          #ifdef  USE_FULL_ASSERT
    915          /**
    916            * @brief  Reports the name of the source file and the source line number
    917            *         where the assert_param error has occurred.
    918            * @param  file: pointer to the source file name
    919            * @param  line: assert_param error line source number
    920            * @retval None
    921            */
    922          void assert_failed(uint8_t* file, uint32_t line)
    923          { 
    924            /* User can add his own implementation to report the file name and line number,
    925               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    926          
    927            /* Infinite loop */
    928            while (1)
    929            {
    930            }
    931          }
    932          #endif
    933          
    934          /**
    935            * @brief  CPU L1-Cache enable.
    936            * @param  None
    937            * @retval None
    938            */
    939          static void CPU_CACHE_Enable(void)
    940          {
    941            /* Enable I-Cache */
    942            SCB_EnableICache();
    943          
    944            /* Enable D-Cache */
    945            SCB_EnableDCache();
    946          }
    947          
    948          

   \                                 In section .text, align 2, keep-with-next
    949          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
    950          {
   \                     HAL_I2C_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    951          
    952            GPIO_InitTypeDef GPIO_InitStruct;
    953              
    954            if(hi2c->Instance==I2C1)
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable12_22  ;; 0x40005400
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD12E             BNE.N    ??HAL_I2C_MspInit_0
    955            {
    956          	/* USER CODE BEGIN I2C1_MspInit 0 */
    957          
    958          	/*##-1- Configure the I2C clock source. The clock is derived from the SYSCLK #*/
    959          	//RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
    960          	//RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    961          	//HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
    962          
    963          	/*##-2- Enable peripherals and GPIO Clocks #################################*/
    964          	/* Enable GPIO TX/RX clock */
    965          	__HAL_RCC_GPIOB_CLK_ENABLE();
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR.N    R4,??DataTable12_1  ;; 0x40023830
   \   00000012   0x9000             STR      R0,[SP, #+0]
    966          
    967          	/**I2C1 GPIO Configuration	
    968          	PB6	  ------> I2C1_SCL (PB6)
    969          	PB7	  ------> I2C1_SDA (PB7) 
    970          	*/
    971          	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    972          	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    973          	GPIO_InitStruct.Pull = GPIO_PULLUP;
    974          	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    975          	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    976          	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000014   0xA901             ADD      R1,SP,#+4
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000001C   0x6020             STR      R0,[R4, #+0]
   \   0000001E   0x6820             LDR      R0,[R4, #+0]
   \   00000020   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x20C0             MOVS     R0,#+192
   \   0000002A   0x9001             STR      R0,[SP, #+4]
   \   0000002C   0x2012             MOVS     R0,#+18
   \   0000002E   0x9002             STR      R0,[SP, #+8]
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x9003             STR      R0,[SP, #+12]
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0x9004             STR      R0,[SP, #+16]
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0x9005             STR      R0,[SP, #+20]
   \   0000003C   0x....             LDR.N    R0,??DataTable12_5  ;; 0x40020400
   \   0000003E   0x.... 0x....      BL       HAL_GPIO_Init
    977          
    978          	/* Peripheral clock enable */
    979          	__HAL_RCC_I2C1_CLK_ENABLE();
   \   00000042   0x2000             MOVS     R0,#+0
    980          	/* Peripheral interrupt init*/
    981          	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x9000             STR      R0,[SP, #+0]
   \   00000048   0x6920             LDR      R0,[R4, #+16]
   \   0000004A   0x2103             MOVS     R1,#+3
   \   0000004C   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   00000050   0x6120             STR      R0,[R4, #+16]
   \   00000052   0x6920             LDR      R0,[R4, #+16]
   \   00000054   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0x9800             LDR      R0,[SP, #+0]
   \   0000005C   0x201F             MOVS     R0,#+31
   \   0000005E   0x.... 0x....      BL       HAL_NVIC_SetPriority
    982          	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \   00000062   0x201F             MOVS     R0,#+31
   \   00000064   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    983          
    984            }
    985            else if(hi2c->Instance==I2C2)
    986            {
    987            /* USER CODE BEGIN I2C2_MspInit 0 */
    988          
    989            /* USER CODE END I2C2_MspInit 0 */
    990            
    991              /**I2C2 GPIO Configuration    
    992              PB10     ------> I2C2_SCL
    993              PB11     ------> I2C2_SDA 
    994              */
    995              __HAL_RCC_GPIOB_CLK_ENABLE();
    996              
    997              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    998              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    999              GPIO_InitStruct.Pull = GPIO_NOPULL;
   1000              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1001              GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
   1002              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   1003          
   1004              /* Peripheral clock enable */
   1005              __HAL_RCC_I2C2_CLK_ENABLE();
   1006              /* Peripheral interrupt init*/
   1007              //HAL_NVIC_SetPriority(I2C2_EV_IRQn, 3, 1);
   1008              //HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
   1009            }
   1010          
   1011          }
   \   00000068   0xB006             ADD      SP,SP,#+24
   \   0000006A   0xBD10             POP      {R4,PC}
   \                     ??HAL_I2C_MspInit_0: (+1)
   \   0000006C   0x....             LDR.N    R1,??DataTable12_23  ;; 0x40005800
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xD125             BNE.N    ??HAL_I2C_MspInit_1
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x....             LDR.N    R4,??DataTable12_1  ;; 0x40023830
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0xA901             ADD      R1,SP,#+4
   \   0000007A   0x6820             LDR      R0,[R4, #+0]
   \   0000007C   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000080   0x6020             STR      R0,[R4, #+0]
   \   00000082   0x6820             LDR      R0,[R4, #+0]
   \   00000084   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000088   0x9000             STR      R0,[SP, #+0]
   \   0000008A   0x9800             LDR      R0,[SP, #+0]
   \   0000008C   0xF44F 0x6040      MOV      R0,#+3072
   \   00000090   0x9001             STR      R0,[SP, #+4]
   \   00000092   0x2012             MOVS     R0,#+18
   \   00000094   0x9002             STR      R0,[SP, #+8]
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x9003             STR      R0,[SP, #+12]
   \   0000009A   0x2003             MOVS     R0,#+3
   \   0000009C   0x9004             STR      R0,[SP, #+16]
   \   0000009E   0x2004             MOVS     R0,#+4
   \   000000A0   0x9005             STR      R0,[SP, #+20]
   \   000000A2   0x....             LDR.N    R0,??DataTable12_5  ;; 0x40020400
   \   000000A4   0x.... 0x....      BL       HAL_GPIO_Init
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x9000             STR      R0,[SP, #+0]
   \   000000AC   0x6920             LDR      R0,[R4, #+16]
   \   000000AE   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000000B2   0x6120             STR      R0,[R4, #+16]
   \   000000B4   0x6920             LDR      R0,[R4, #+16]
   \   000000B6   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000000BA   0x9000             STR      R0,[SP, #+0]
   \   000000BC   0x9800             LDR      R0,[SP, #+0]
   \                     ??HAL_I2C_MspInit_1: (+1)
   \   000000BE   0xB006             ADD      SP,SP,#+24
   \   000000C0   0xBD10             POP      {R4,PC}          ;; return
   1012          
   1013          /*---------------------------------------------------*/
   1014          /*   UART                                            */
   1015          /* UART4 init function */

   \                                 In section .text, align 2, keep-with-next
   1016          void USART3_Init(void)
   1017          {
   1018          
   1019            huart3.Instance = USART3;
   \                     USART3_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12_24
   \   00000002   0x....             LDR.N    R1,??DataTable12_25  ;; 0x40004800
   \   00000004   0x6001             STR      R1,[R0, #+0]
   1020            huart3.Init.BaudRate = 115200;
   \   00000006   0xF44F 0x31E1      MOV      R1,#+115200
   \   0000000A   0x6041             STR      R1,[R0, #+4]
   1021            huart3.Init.WordLength = UART_WORDLENGTH_8B;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6081             STR      R1,[R0, #+8]
   1022            huart3.Init.StopBits = UART_STOPBITS_1;
   \   00000010   0x60C1             STR      R1,[R0, #+12]
   1023            huart3.Init.Parity = UART_PARITY_NONE;
   \   00000012   0x6101             STR      R1,[R0, #+16]
   1024            huart3.Init.Mode = UART_MODE_TX_RX;
   \   00000014   0x210C             MOVS     R1,#+12
   \   00000016   0x6141             STR      R1,[R0, #+20]
   1025            huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6181             STR      R1,[R0, #+24]
   1026            huart3.Init.OverSampling = UART_OVERSAMPLING_16;
   \   0000001C   0x61C1             STR      R1,[R0, #+28]
   1027            huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED ;
   \   0000001E   0x6201             STR      R1,[R0, #+32]
   1028            huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
   \   00000020   0x6241             STR      R1,[R0, #+36]
   1029            HAL_UART_Init(&huart3);
   \   00000022   0x.... 0x....      B.W      HAL_UART_Init
   1030          
   1031            //HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
   1032            //HAL_NVIC_EnableIRQ(USART3_IRQn);
   1033          
   1034          }
   1035          
   1036          

   \                                 In section .text, align 2, keep-with-next
   1037          void HAL_UART_MspInit(UART_HandleTypeDef *huart)
   1038          {
   1039          
   1040            GPIO_InitTypeDef GPIO_InitStruct;
   1041            if(huart->Instance==USART3)
   \                     HAL_UART_MspInit: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x....             LDR.N    R1,??DataTable12_25  ;; 0x40004800
   \   00000004   0x4288             CMP      R0,R1
   \   00000006   0xD000             BEQ.N    ??HAL_UART_MspInit_0
   \   00000008   0x4770             BX       LR
   1042            {
   1043          
   1044          
   1045            /* USER CODE END UART4_MspInit 0 */
   1046              /* Peripheral clock enable */
   1047              __USART3_CLK_ENABLE();
   \                     ??HAL_UART_MspInit_0: (+1)
   \   0000000A   0xB500             PUSH     {LR}
   \   0000000C   0xB087             SUB      SP,SP,#+28
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x....             LDR.N    R0,??DataTable12_1  ;; 0x40023830
   \   00000014   0x6901             LDR      R1,[R0, #+16]
   \   00000016   0xF441 0x2180      ORR      R1,R1,#0x40000
   \   0000001A   0x6101             STR      R1,[R0, #+16]
   \   0000001C   0x6901             LDR      R1,[R0, #+16]
   \   0000001E   0xF401 0x2180      AND      R1,R1,#0x40000
   \   00000022   0x9100             STR      R1,[SP, #+0]
   \   00000024   0x9900             LDR      R1,[SP, #+0]
   1048              __GPIOC_CLK_ENABLE();
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x9100             STR      R1,[SP, #+0]
   \   0000002A   0x6801             LDR      R1,[R0, #+0]
   \   0000002C   0xF041 0x0104      ORR      R1,R1,#0x4
   \   00000030   0x6001             STR      R1,[R0, #+0]
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   1049            
   1050              /**UART4 GPIO Configuration    
   1051              PC10     ------> USART3_TX
   1052              PC11     ------> USART3_RX
   1053              */
   1054              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
   1055              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1056              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1057              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1058              GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
   1059              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000034   0xA901             ADD      R1,SP,#+4
   \   00000036   0xF000 0x0004      AND      R0,R0,#0x4
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x9800             LDR      R0,[SP, #+0]
   \   0000003E   0xF44F 0x6040      MOV      R0,#+3072
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0x9002             STR      R0,[SP, #+8]
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x9003             STR      R0,[SP, #+12]
   \   0000004C   0x2003             MOVS     R0,#+3
   \   0000004E   0x9004             STR      R0,[SP, #+16]
   \   00000050   0x2007             MOVS     R0,#+7
   \   00000052   0x9005             STR      R0,[SP, #+20]
   \   00000054   0x....             LDR.N    R0,??DataTable12_26  ;; 0x40020800
   \   00000056   0x.... 0x....      BL       HAL_GPIO_Init
   1060          
   1061              /* NVIC for USART */
   1062              HAL_NVIC_SetPriority(USART3_IRQn, 7, 1);
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0x2107             MOVS     R1,#+7
   \   0000005E   0x2027             MOVS     R0,#+39
   \   00000060   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1063              HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   00000064   0x2027             MOVS     R0,#+39
   \   00000066   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1064          
   1065            }
   1066          
   1067          }
   \   0000006A   0xB007             ADD      SP,SP,#+28
   \   0000006C   0xBD00             POP      {PC}             ;; return
   1068          
   1069          
   1070          

   \                                 In section .text, align 2, keep-with-next
   1071          void EXTI4_IRQHandler(void)
   1072          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1073              /* EXTI line interrupt detected */
   1074            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable12_27  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x06C0             LSLS     R0,R0,#+27
   \   00000008   0xD514             BPL.N    ??EXTI4_IRQHandler_0
   1075            {
   1076              
   1077               if (cntRisingEXTI==32000)
   \   0000000A   0x....             LDR.N    R0,??DataTable12_28
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0xF5B1 0x4FFA      CMP      R1,#+32000
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xD105             BNE.N    ??EXTI4_IRQHandler_1
   1078               {
   1079              	/*--------------Enable read PCM data --------------------*/   
   1080                  //flgDlyUpd = 1;  
   1081                  //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1082          		//__HAL_UNLOCK(&hspi5);
   1083                  //__HAL_SPI_ENABLE(&hspi5);
   1084                  cntRisingEXTI++;
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0x6001             STR      R1,[R0, #+0]
   1085          
   1086                  /*Disable external interrupt */
   1087                  HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI4_IRQn));
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   00000020   0xE006             B.N      ??EXTI4_IRQHandler_2
   1088                  //HAL_GPIO_DeInit(GPIOB,GPIO_PIN_4);
   1089               }
   1090               else
   1091               {
   1092                  if (cntRisingEXTI < 32000 +2)
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   00000022   0xF647 0x5202      MOVW     R2,#+32002
   \   00000026   0x4291             CMP      R1,R2
   \   00000028   0xD202             BCS.N    ??EXTI4_IRQHandler_2
   1093                      cntRisingEXTI++;
   \   0000002A   0x6801             LDR      R1,[R0, #+0]
   \   0000002C   0x1C49             ADDS     R1,R1,#+1
   \   0000002E   0x6001             STR      R1,[R0, #+0]
   1094                  //__HAL_SPI_DISABLE(&hspi5);
   1095               }
   1096               
   1097                __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
   \                     ??EXTI4_IRQHandler_2: (+1)
   \   00000030   0x2010             MOVS     R0,#+16
   \   00000032   0x6020             STR      R0,[R4, #+0]
   1098          
   1099            }
   1100          }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
   1101                        

   \                                 In section .text, align 2, keep-with-next
   1102          void EXTI15_10_IRQHandler(void)
   1103          {
   1104          
   1105          }
   \                     EXTI15_10_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1106          
   1107          /* Events for Button Press */

   \                                 In section .text, align 2, keep-with-next
   1108          void EXTI9_5_IRQHandler(void)
   1109          {
   \                     EXTI9_5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1110          
   1111            /* EXTI line interrupt detected */
   1112            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable12_27  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0xD510             BPL.N    ??EXTI9_5_IRQHandler_0
   1113            {
   1114          	  btnSW2 = 1;
   \   0000000A   0x....             LDR.N    R0,??DataTable12_29
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x7041             STRB     R1,[R0, #+1]
   1115          	  if ((++cntBtnPress)==8) cntBtnPress=0;
   \   00000010   0x7881             LDRB     R1,[R0, #+2]
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0x7081             STRB     R1,[R0, #+2]
   \   00000016   0xB2C9             UXTB     R1,R1
   \   00000018   0x2908             CMP      R1,#+8
   \   0000001A   0xBF04             ITT      EQ 
   \   0000001C   0x2100             MOVEQ    R1,#+0
   \   0000001E   0x7081             STRBEQ   R1,[R0, #+2]
   1116          	  BSP_LED_Toggle(LED2);
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       BSP_LED_Toggle
   1117          	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
   \   00000026   0xF44F 0x7080      MOV      R0,#+256
   \   0000002A   0x6020             STR      R0,[R4, #+0]
   1118          
   1119            }
   1120          
   1121          
   1122            /* EXTI line interrupt detected */
   1123            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET)
   \                     ??EXTI9_5_IRQHandler_0: (+1)
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x0580             LSLS     R0,R0,#+22
   \   00000030   0xD50C             BPL.N    ??EXTI9_5_IRQHandler_1
   1124            {
   1125          		btnSW1 = 1;
   \   00000032   0x....             LDR.N    R0,??DataTable12_29
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x7001             STRB     R1,[R0, #+0]
   1126          		Command_index^=0x01;
   \   00000038   0x78C1             LDRB     R1,[R0, #+3]
   \   0000003A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000003E   0x70C1             STRB     R1,[R0, #+3]
   1127          		BSP_LED_Toggle(LED1);
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       BSP_LED_Toggle
   1128          
   1129          	   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
   \   00000046   0xF44F 0x7000      MOV      R0,#+512
   \   0000004A   0x6020             STR      R0,[R4, #+0]
   1130            }
   1131          
   1132          }
   \                     ??EXTI9_5_IRQHandler_1: (+1)
   \   0000004C   0xBD10             POP      {R4,PC}          ;; return
   1133          
   1134          
   1135          
   1136          

   \                                 In section .text, align 4, keep-with-next
   1137          void SumDelay(Mic_Array_Data *BufferIn)
   1138          {
   1139              //if (idxLatency12>idxLatency13)
   1140              // {
   1141              //     if (idxLatency13 > idxLatency14)
   1142              //     {
   1143              //         /* MIC2 --> MIC3 --> MIC4 */
   1144              //     }
   1145              //             else if (idxLatency14 > idxLatency12)
   1146              //             {
   1147              //        /* MIC4-->MIC2-->MIC3  */
   1148              //            }
   1149              //             else
   1150              //             {
   1151              //       /* MIC2-->MIC4-->MIC3  */
   1152              //             }
   1153              // }
   1154              //else // idxLatency13>idxLatency12
   1155              //     {
   1156              //    if (idxLatency12 > idxLatency14)
   1157              //    {
   1158              //        //MIC3 --> MIC2 --> MIC4 
   1159              //    }
   1160              //        else if (idxLatency14 > idxLatency13)
   1161              //        {
   1162              //        //MIC4 --> MIC3 --> MIC2
   1163              //        }
   1164              //        else
   1165              //        {
   1166              //        //MIC3 --> MIC4 --> MIC2
   1167              //	   }
   1168              //}
   1169          	
   1170              for(uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
   \                     SumDelay: (+1)
   \   00000000   0x....             LDR.N    R3,??DataTable12_30
   \   00000002   0x....             LDR.N    R1,??DataTable12_9
   \   00000004   0xF44F 0x7200      MOV      R2,#+512
   \   00000008   0xED93 0x0A03      VLDR     S0,[R3, #+12]
   \   0000000C   0xEDD3 0x0A02      VLDR     S1,[R3, #+8]
   \   00000010   0xED93 0x1A01      VLDR     S2,[R3, #+4]
   \   00000014   0xEDD3 0x1A00      VLDR     S3,[R3, #0]
   1171              {
   1172                bufferSum[6*i] = (uint16_t)(BufferIn->bufMIC1[i]*FacMic.facMIC1 + 
   1173                BufferIn->bufMIC2[i]*FacMic.facMIC2 + 
   1174                BufferIn->bufMIC3[i]*FacMic.facMIC3 + 
   1175                BufferIn->bufMIC4[i]*FacMic.facMIC4); 		
   \                     ??SumDelay_0: (+1)
   \   00000018   0xF9B0 0x3000      LDRSH    R3,[R0, #+0]
   \   0000001C   0xEE02 0x3A10      VMOV     S4,R3
   \   00000020   0xF9B0 0x3400      LDRSH    R3,[R0, #+1024]
   \   00000024   0xEEB8 0x2AC2      VCVT.F32.S32 S4,S4
   \   00000028   0xEE22 0x2A21      VMUL.F32 S4,S4,S3
   \   0000002C   0xEE02 0x3A90      VMOV     S5,R3
   \   00000030   0xF9B0 0x3800      LDRSH    R3,[R0, #+2048]
   \   00000034   0xEEF8 0x2AE2      VCVT.F32.S32 S5,S5
   \   00000038   0xEE02 0x2A81      VMLA.F32 S4,S5,S2
   \   0000003C   0xEE02 0x3A90      VMOV     S5,R3
   \   00000040   0xF9B0 0x3C00      LDRSH    R3,[R0, #+3072]
   \   00000044   0xEEF8 0x2AE2      VCVT.F32.S32 S5,S5
   1176                bufferSum[6*i+1] = bufferSum[6*i];
   1177          	  bufferSum[6*i+2] = bufferSum[6*i];
   1178          	  bufferSum[6*i+3] = bufferSum[6*i];
   1179          	  bufferSum[6*i+4] = bufferSum[6*i];
   1180          	  bufferSum[6*i+5] = bufferSum[6*i];
   1181              }
   \   00000048   0x1C80             ADDS     R0,R0,#+2
   \   0000004A   0xEE02 0x2AA0      VMLA.F32 S4,S5,S1
   \   0000004E   0xEE02 0x3A90      VMOV     S5,R3
   \   00000052   0xEEF8 0x2AE2      VCVT.F32.S32 S5,S5
   \   00000056   0xEE02 0x2A80      VMLA.F32 S4,S5,S0
   \   0000005A   0xEEBD 0x2AC2      VCVT.S32.F32 S4,S4
   \   0000005E   0xEE12 0x3A10      VMOV     R3,S4
   \   00000062   0x800B             STRH     R3,[R1, #+0]
   \   00000064   0x804B             STRH     R3,[R1, #+2]
   \   00000066   0x808B             STRH     R3,[R1, #+4]
   \   00000068   0x80CB             STRH     R3,[R1, #+6]
   \   0000006A   0x810B             STRH     R3,[R1, #+8]
   \   0000006C   0x814B             STRH     R3,[R1, #+10]
   \   0000006E   0x310C             ADDS     R1,R1,#+12
   \   00000070   0x1E52             SUBS     R2,R2,#+1
   \   00000072   0xD1D1             BNE.N    ??SumDelay_0
   1182            
   1183              
   1184          }
   \   00000074   0x4770             BX       LR               ;; return
   1185          
   1186          

   \                                 In section .text, align 2, keep-with-next
   1187          void ButtonInit(void)
   1188          {
   \                     ButtonInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   1189            /* PI8: SW2 */
   1190            /* PI9: SW1 */
   1191            /* ----------------------*/
   1192            __GPIOB_CLK_ENABLE();
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x....             LDR.N    R0,??DataTable12_1  ;; 0x40023830
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   1193            GPIO_INS.Pin = GPIO_PIN_8|GPIO_PIN_9;
   \   00000014   0x....             LDR.N    R1,??DataTable12_2
   \   00000016   0xF000 0x0002      AND      R0,R0,#0x2
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0xF44F 0x7040      MOV      R0,#+768
   \   00000022   0x6008             STR      R0,[R1, #+0]
   1194            GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   00000024   0x....             LDR.N    R0,??DataTable12_31  ;; 0x10110000
   \   00000026   0x6048             STR      R0,[R1, #+4]
   1195            GPIO_INS.Pull =GPIO_NOPULL;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x6088             STR      R0,[R1, #+8]
   1196            GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   0000002C   0x2003             MOVS     R0,#+3
   \   0000002E   0x60C8             STR      R0,[R1, #+12]
   1197            HAL_GPIO_Init(GPIOI,&GPIO_INS);
   \   00000030   0x....             LDR.N    R0,??DataTable12_32  ;; 0x40022000
   \   00000032   0x.... 0x....      BL       HAL_GPIO_Init
   1198          
   1199            /* Enable and set Button EXTI Interrupt to the lowest priority */
   1200            HAL_NVIC_SetPriority((IRQn_Type)EXTI9_5_IRQn, 0x0F, 0x00);
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0x210F             MOVS     R1,#+15
   \   0000003A   0x2017             MOVS     R0,#+23
   \   0000003C   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1201            HAL_NVIC_EnableIRQ((IRQn_Type)EXTI9_5_IRQn);
   \   00000040   0xB001             ADD      SP,SP,#+4
   \   00000042   0x2017             MOVS     R0,#+23
   \   00000044   0xF85D 0xEB04      POP      {LR}
   \   00000048   0x.... 0x....      B.W      HAL_NVIC_EnableIRQ
   1202            /*-----------------------*/
   1203          }
   1204          
   1205          
   1206          /* I2C2 init function */

   \                                 In section .text, align 2, keep-with-next
   1207          void MX_I2C2_Init(void)
   1208          {
   1209            __HAL_I2C_DISABLE(&hi2c2);
   \                     MX_I2C2_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12_33
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x680A             LDR      R2,[R1, #+0]
   \   00000006   0x0852             LSRS     R2,R2,#+1
   \   00000008   0x0052             LSLS     R2,R2,#+1
   \   0000000A   0x600A             STR      R2,[R1, #+0]
   1210            hi2c2.Instance = I2C2;
   \   0000000C   0x....             LDR.N    R1,??DataTable12_23  ;; 0x40005800
   \   0000000E   0x6001             STR      R1,[R0, #+0]
   1211            hi2c2.Init.Timing =0x00A0689A ;//I2C_TIMING  0x00303D5D 0x00A0689A
   \   00000010   0x....             LDR.N    R1,??DataTable12_34  ;; 0xa0689a
   \   00000012   0x6041             STR      R1,[R0, #+4]
   1212            hi2c2.Init.OwnAddress1 = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6081             STR      R1,[R0, #+8]
   1213            hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x60C1             STR      R1,[R0, #+12]
   1214            hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6101             STR      R1,[R0, #+16]
   1215            hi2c2.Init.OwnAddress2 = 0;
   \   00000020   0x6141             STR      R1,[R0, #+20]
   1216            hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   00000022   0x6181             STR      R1,[R0, #+24]
   1217            hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   00000024   0x61C1             STR      R1,[R0, #+28]
   1218            hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   00000026   0x6201             STR      R1,[R0, #+32]
   1219            HAL_I2C_Init(&hi2c2);
   \   00000028   0x.... 0x....      B.W      HAL_I2C_Init
   1220          
   1221            /**Configure Analogue filter 
   1222            */
   1223            //HAL_I2CEx_AnalogFilter_Config(&hi2c2, I2C_ANALOGFILTER_ENABLE);
   1224          
   1225          }
   1226          

   \                                 In section .text, align 2, keep-with-next
   1227           void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
   1228          {  
   1229            //Audio_Play_Out();  
   1230            #if (AUDIO_OUT_STREAM_NORMAL)
   1231                Audio_MAL_Play((uint32_t)&bufferSum[(6*AUDIO_SAMPLING_FREQUENCY/1000)], 6*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
   1232            #else
   1233          
   1234            #endif  
   1235          
   1236            
   1237          }
   \                     HAL_I2S_TxCpltCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1238          

   \                                 In section .text, align 2, keep-with-next
   1239           uint8_t StartPlay(void)
   1240           {
   \                     StartPlay: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   1241          
   1242          
   1243              	   	 
   1244              //HAL_Delay(100);
   1245              	
   1246              //HAL_Delay(1);
   1247              //for (uint32_t i=0; i<2000;i++)
   1248              //{
   1249              //  __NOP;
   1250              //  __NOP;
   1251              //  __NOP;
   1252              //  __NOP;
   1253              //}
   1254              //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   1255              //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   1256              
   1257              I2S1_Enable();
   \   00000004   0x.... 0x....      BL       I2S1_Enable
   1258              I2S2_Enable();
   \   00000008   0x.... 0x....      BL       I2S2_Enable
   1259              SPI4_Enable();
   \   0000000C   0x.... 0x....      BL       SPI4_Enable
   1260              StartRecMic7_8();
   \   00000010   0x.... 0x....      BL       StartRecMic7_8
   1261              WaveRec_idxSens1 = 0;//SHIFT_CHNNL1;
   \   00000014   0x....             LDR.N    R0,??DataTable12_2
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x8401             STRH     R1,[R0, #+32]
   1262              WaveRec_idxSens2 = 0;//SHIFT_CHNNL2;
   1263              WaveRec_idxSens3 = 0;//SHIFT_CHNNL3;
   1264              WaveRec_idxSens4 = 0;//SHIFT_CHNNL4;
   1265              WaveRec_idxSens5 = 0;//SHIFT_CHNNL5;
   1266              WaveRec_idxSens6 = 0;//SHIFT_CHNNL6; 
   1267              idxFrmPDMMic8 = 0;
   \   0000001A   0x....             LDR.N    R2,??DataTable12_10
   \   0000001C   0x8441             STRH     R1,[R0, #+34]
   \   0000001E   0x8381             STRH     R1,[R0, #+28]
   \   00000020   0x8341             STRH     R1,[R0, #+26]
   \   00000022   0x8481             STRH     R1,[R0, #+36]
   \   00000024   0x84C1             STRH     R1,[R0, #+38]
   \   00000026   0x8011             STRH     R1,[R2, #+0]
   1268              buffer_switch = BUF1_PLAY;
   \   00000028   0x75C1             STRB     R1,[R0, #+23]
   1269          
   1270          	return 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xB001             ADD      SP,SP,#+4
   \   0000002E   0xBD00             POP      {PC}             ;; return
   1271          	 
   1272           }
   1273          

   \                                 In section .text, align 2, keep-with-next
   1274          void SubFrameFinished(void)
   1275          {
   \                     SubFrameFinished: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1276              Audio_Play_Out();
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable12_35
   \   00000006   0x....             LDR.N    R4,??DataTable12_10
   \   00000008   0x7008             STRB     R0,[R1, #+0]
   \   0000000A   0x8820             LDRH     R0,[R4, #+0]
   \   0000000C   0x.... 0x....      BL       AudioUSBSend
   \   00000010   0x8820             LDRH     R0,[R4, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x8020             STRH     R0,[R4, #+0]
   \   00000016   0x8820             LDRH     R0,[R4, #+0]
   \   00000018   0x2820             CMP      R0,#+32
   \   0000001A   0xD123             BNE.N    ??SubFrameFinished_0
   \   0000001C   0x....             LDR.N    R0,??DataTable12_2
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x8401             STRH     R1,[R0, #+32]
   \   00000022   0x....             LDR.N    R2,??DataTable12_36
   \   00000024   0x8441             STRH     R1,[R0, #+34]
   \   00000026   0x8501             STRH     R1,[R0, #+40]
   \   00000028   0x8381             STRH     R1,[R0, #+28]
   \   0000002A   0x8341             STRH     R1,[R0, #+26]
   \   0000002C   0x83C1             STRH     R1,[R0, #+30]
   \   0000002E   0x8481             STRH     R1,[R0, #+36]
   \   00000030   0x84C1             STRH     R1,[R0, #+38]
   \   00000032   0x7501             STRB     R1,[R0, #+20]
   \   00000034   0x8011             STRH     R1,[R2, #+0]
   \   00000036   0x8021             STRH     R1,[R4, #+0]
   \   00000038   0x7DC1             LDRB     R1,[R0, #+23]
   \   0000003A   0xB139             CBZ.N    R1,??SubFrameFinished_1
   \   0000003C   0x2902             CMP      R1,#+2
   \   0000003E   0xD001             BEQ.N    ??SubFrameFinished_2
   \   00000040   0xD302             BCC.N    ??SubFrameFinished_3
   \   00000042   0xE005             B.N      ??SubFrameFinished_4
   \                     ??SubFrameFinished_2: (+1)
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0xE002             B.N      ??SubFrameFinished_5
   \                     ??SubFrameFinished_3: (+1)
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xE000             B.N      ??SubFrameFinished_5
   \                     ??SubFrameFinished_1: (+1)
   \   0000004C   0x2102             MOVS     R1,#+2
   \                     ??SubFrameFinished_5: (+1)
   \   0000004E   0x75C1             STRB     R1,[R0, #+23]
   \                     ??SubFrameFinished_4: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable12_17
   \   00000052   0x8801             LDRH     R1,[R0, #+0]
   \   00000054   0x2914             CMP      R1,#+20
   \   00000056   0xDA05             BGE.N    ??SubFrameFinished_0
   \   00000058   0x8801             LDRH     R1,[R0, #+0]
   \   0000005A   0x1C49             ADDS     R1,R1,#+1
   \   0000005C   0x8001             STRH     R1,[R0, #+0]
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x....             LDR.N    R1,??DataTable12_16
   \   00000062   0x8008             STRH     R0,[R1, #+0]
   1277          }
   \                     ??SubFrameFinished_0: (+1)
   \   00000064   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0xE000ED14         DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     GPIO_INS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x........         DC32     AUDIO_Desc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x........         DC32     USBD_AUDIO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x........         DC32     USBD_AUDIO_fops

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x........         DC32     bufferSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x........         DC32     idxFrmPDMMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x........         DC32     Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x........         DC32     SPI4_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x........         DC32     WaveRecord_flgIni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x........         DC32     cntStrt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x........         DC32     stMIC56

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \   00000000   0x........         DC32     stMIC56Old

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_20:
   \   00000000   0x........         DC32     ??ticks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_21:
   \   00000000   0x00100001         DC32     0x100001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_22:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_23:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_24:
   \   00000000   0x........         DC32     huart3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_25:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_26:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_27:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_28:
   \   00000000   0x........         DC32     cntRisingEXTI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_29:
   \   00000000   0x........         DC32     btnSW1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_30:
   \   00000000   0x........         DC32     FacMic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_31:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_32:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_33:
   \   00000000   0x........         DC32     hi2c2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_34:
   \   00000000   0x00A0689A         DC32     0xa0689a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_35:
   \   00000000   0x........         DC32     flgRacing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_36:
   \   00000000   0x........         DC32     WaveRec_idxTest
   1278          /*****************************END OF FILE**************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     144   BSP_AUDIO_OUT_ClockConfig
       144   -> HAL_RCCEx_GetPeriphCLKConfig
       144   -> HAL_RCCEx_PeriphCLKConfig
       8   ButtonInit
         8   -> HAL_GPIO_Init
         0   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
       0   EXTI15_10_IRQHandler
       8   EXTI4_IRQHandler
         8   -> HAL_NVIC_DisableIRQ
       8   EXTI9_5_IRQHandler
         8   -> BSP_LED_Toggle
      32   HAL_I2C_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       0   HAL_I2S_TxCpltCallback
      32   HAL_UART_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       0   MX_I2C2_Init
         0   -> HAL_I2C_Init
       8   StartPlay
         8   -> I2S1_Enable
         8   -> I2S2_Enable
         8   -> SPI4_Enable
         8   -> StartRecMic7_8
       8   SubFrameFinished
         8   -> AudioUSBSend
       0   SumDelay
     208   SystemClock_Config
       208   -> HAL_PWREx_EnableOverDrive
       208   -> HAL_RCCEx_PeriphCLKConfig
       208   -> HAL_RCC_ClockConfig
       208   -> HAL_RCC_OscConfig
       0   Toggle_Leds
       0   USART3_Init
         0   -> HAL_UART_Init
     184   main
       184   -> AUDIO_InitApplication
       184   -> AudioPlayerUpd
       184   -> Audio_MAL_Play
       184   -> BSP_LED_Init
       184   -> BSP_LED_Off
       184   -> BSP_LED_On
       184   -> BSP_LED_Toggle
       184   -> BeamFormingSD
       184   -> BeamFormingSD_Init
       184   -> DOACalc
       184   -> HAL_GPIO_Init
       184   -> HAL_GPIO_WritePin
       184   -> HAL_Init
       184   -> HAL_NVIC_SystemReset
       184   -> HAL_RCCEx_GetPeriphCLKConfig
       184   -> HAL_RCCEx_PeriphCLKConfig
       184   -> I2S1_Enable
       184   -> I2S2_Enable
       184   -> MIC1TO8_Init
       184   -> MX_I2C2_Init
       184   -> PDM2PCMSDO78
       184   -> SPI4_Enable
       184   -> STA321MP_Ini
       184   -> StartRecMic7_8
       184   -> SystemClock_Config
       184   -> USBD_AUDIO_Init_Microphone_Descriptor
       184   -> USBD_AUDIO_RegisterInterface
       184   -> USBD_Init
       184   -> USBD_RegisterClass
       184   -> USBD_Start


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_30
       4  ??DataTable12_31
       4  ??DataTable12_32
       4  ??DataTable12_33
       4  ??DataTable12_34
       4  ??DataTable12_35
       4  ??DataTable12_36
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
     100  BSP_AUDIO_OUT_ClockConfig
      76  ButtonInit
       4  CrssCorVal14
       4  CrssCorVal25
       4  CrssCorVal63
       4  CrssCorVal78
       2  DeltaBuf1
       2  DeltaBuf1Old
       2  EXTI15_10_IRQHandler
      54  EXTI4_IRQHandler
      78  EXTI9_5_IRQHandler
      32  FacMic
     592  GPIO_INS
          flgDlyUpd
          flgShipping
          flg10ms
          buffer_switch
          swtCase1Mic56
          Direction
          WaveRec_idxSens4
          WaveRec_idxSens3
          I2S2_idxTmp
          WaveRec_idxSens1
          WaveRec_idxSens2
          WaveRec_idxSens5
          WaveRec_idxSens6
          idxSPI5DataBuf3
          cntTime200
          hUSBDDevice
     194  HAL_I2C_MspInit
       2  HAL_I2S_TxCpltCallback
     110  HAL_UART_MspInit
       4  LowPass_Mic1Old
       4  LowPass_Mic2Old
       4  LowPass_Mic3Old
       4  LowPass_Mic4Old
       4  LowPass_Mic5Old
       4  LowPass_Mic6Old
       4  LowPass_Mic7Old
       4  LowPass_Mic8Old
      44  MX_I2C2_Init
      48  StartPlay
     102  SubFrameFinished
     118  SumDelay
     160  SystemClock_Config
      18  Toggle_Leds
      38  USART3_Init
    1024  aRxBuffer
       1  appli_state
       4  btnSW1
          btnSW2
          cntBtnPress
          Command_index
    6164  bufferSum
       4  cntRisingEXTI
       1  flgSTAIni
     696  hUSBHost
     100  hspi4
     112  huart3
       1  idxDec
       2  idxLatency12
       2  idxLatency13
       2  idxLatency14
       2  idxLatency25
       2  idxLatency63
       2  idxLatency78
     910  main
       1  stFrstFrmStore
       4  ticks

 
 8 204 bytes in section .bss
   596 bytes in section .data
 2 202 bytes in section .text
 
 2 202 bytes of CODE memory
 8 800 bytes of DATA memory

Errors: none
Warnings: none
