###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       10/Oct/2016  13:58:51
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#    Command line =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e
#        --char_is_signed --fpu=VFPv5_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\main.lst
#    Object file  =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\main.o
#
###############################################################################

D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\main.c
      1          
      2          /*****************************************************************************
      3            *    Author: Phan Le Son                                                                                           
      4            *    Company: Autonomous.ai                                            
      5            *    email: plson03@gmail.com
      6            *****************************************************************************/
      7          
      8          
      9          
     10          /* Includes ------------------------------------------------------------------*/
     11          #include "main.h"
     12          #include "DSP.h"
     13          //#include "waveplayer.h"
     14          #include "waverecorder.h"
     15          #include "stm32f7xx_hal_usart.h"
     16          #include "pdm_filter.h"
     17          #include "arm_math.h"
     18          #include <stdio.h>
     19          #include "DOA.h"
     20          
     21          /* Private typedef -----------------------------------------------------------*/
     22          /* Private define ------------------------------------------------------------*/
     23          /* Private macro -------------------------------------------------------------*/
     24          
     25          
     26          /* EXTERN VARIABLES ----------------------------------------------------------*/
     27          //extern __IO AUDIO_IN_BufferTypeDef Buffer1, Buffer2, BufferCtlRecIn;
     28          //AUDIO_IN_BufferTypeDef Buffer3;
     29          
     30          
     31          
     32          
     33          extern Mic_Array_Data Buffer1,Buffer2,Buffer3;
     34          
     35          extern __IO uint8_t XferCplt;
     36          extern __IO AUDIO_IN_BufferTypeDef BufferCtlRecIn;
     37          extern DMA_HandleTypeDef     DmaHandle;
     38          
     39          extern SAI_HandleTypeDef         haudio_out_sai;
     40          extern uint16_t WaveRecord_flgIni;
     41          extern uint32_t EnergySound,EnergyError;
     42          extern I2C_HandleTypeDef hi2c2;
     43          extern __IO uint16_t cntStrt;
     44          extern __IO int16_t SPI1_stNipple,I2S1_stNipple, I2S2_stNipple,SPI4_stNipple;
     45          extern __IO   uint8_t I2S1_stPosShft,I2S2_stPosShft,SPI4_stPosShft;
     46          extern USBD_AUDIO_ItfTypeDef  USBD_AUDIO_fops;
     47          /* GLOBAL VARIABLE -----------------------------------------------------------*/

   \                                 In section .bss, align 4
     48          USBH_HandleTypeDef hUSBHost;
   \                     hUSBHost:
   \   00000000                      DS8 696
     49          USBD_HandleTypeDef hUSBDDevice;

   \                                 In section .bss, align 1
     50          AUDIO_ApplicationTypeDef appli_state = APPLICATION_IDLE;//APPLICATION_IDLE
   \                     appli_state:
   \   00000000                      DS8 1
     51          

   \                                 In section .bss, align 4
     52          UART_HandleTypeDef huart3;
   \                     huart3:
   \   00000000                      DS8 112

   \                                 In section .bss, align 4
     53          SPI_HandleTypeDef hspi4;
   \                     hspi4:
   \   00000000                      DS8 100
     54          GPIO_InitTypeDef GPIO_INS;

   \                                 In section .bss, align 4
     55          Mic_Array_Coef_f FacMic;
   \                     FacMic:
   \   00000000                      DS8 32
     56          	  

   \                                 In section .bss, align 4
     57          uint16_t bufferSum[6*AUDIO_OUT_BUFFER_SIZE+10];
   \                     bufferSum:
   \   00000000                      DS8 12308

   \                                 In section .bss, align 4
     58          float CrssCorVal78,CrssCorVal14,CrssCorVal25,CrssCorVal63;
   \                     CrssCorVal78:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     CrssCorVal14:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     CrssCorVal25:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     CrssCorVal63:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     59          __IO uint32_t  cntRisingEXTI;
   \                     cntRisingEXTI:
   \   00000000                      DS8 4
     60          __IO uint16_t  WaveRec_idxSens4,WaveRec_idxSens3,I2S2_idxTmp;
     61          __IO uint16_t  WaveRec_idxSens1,WaveRec_idxSens2;
     62          __IO uint16_t  WaveRec_idxSens5,WaveRec_idxSens6;
     63          __IO uint16_t  idxSPI5DataBuf3;
     64          __IO uint8_t   btnSW1,btnSW2;
     65          __IO uint8_t   flgDlyUpd; 
     66          __IO uint8_t   cntBtnPress;
     67          __IO uint8_t   flgShipping;
     68          extern __IO uint16_t  WaveRec_idxTest;
     69          extern __IO uint8_t  swtBufUSBOut;
     70          extern __IO uint8_t flgRacing;
     71          extern __IO GPIO_PinState stMIC56;
     72          extern __IO GPIO_PinState stMIC56Old;
     73          
     74          
     75          
     76          /* Buffer used for reception */

   \                                 In section .bss, align 4
     77          uint8_t aRxBuffer[1024];
   \                     aRxBuffer:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 1
     78          uint8_t idxDec,stFrstFrmStore;
   \                     idxDec:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     stFrstFrmStore:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     79          int16_t DeltaBuf1,DeltaBuf1Old;
   \                     DeltaBuf1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     DeltaBuf1Old:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     80          int16_t idxLatency13,idxLatency12,idxLatency14,idxLatency25,idxLatency63,idxLatency78;
   \                     idxLatency13:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency12:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency14:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency25:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency63:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     idxLatency78:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     81          int16_t * LowPass_Mic1Old;
   \                     LowPass_Mic1Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     82          int16_t *LowPass_Mic2Old;
   \                     LowPass_Mic2Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     83          int16_t *LowPass_Mic3Old; 
   \                     LowPass_Mic3Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     84          int16_t *LowPass_Mic4Old;
   \                     LowPass_Mic4Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     85          int16_t *LowPass_Mic5Old;
   \                     LowPass_Mic5Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     86          int16_t *LowPass_Mic6Old;
   \                     LowPass_Mic6Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     87          int16_t *LowPass_Mic7Old;
   \                     LowPass_Mic7Old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     88          int16_t *LowPass_Mic8Old;
   \                     LowPass_Mic8Old:
   \   00000000                      DS8 4
     89          
     90          __IO char flg10ms;

   \                                 In section .bss, align 1
     91          uint8_t flgSTAIni;
   \                     flgSTAIni:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     GPIO_INS:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     flgDlyUpd:
   \   00000014   0x00               DC8 0
   \                     flgShipping:
   \   00000015   0x00               DC8 0
   \                     flg10ms:
   \   00000016   0x00               DC8 0
     92          uint16_t cntTime200;
     93          
     94          uint8_t buffer_switch = 1;
   \                     buffer_switch:
   \   00000017   0x01               DC8 1
     95          uint8_t Command_index=1;
     96          uint8_t swtCase1Mic56;
   \                     swtCase1Mic56:
   \   00000018   0x00               DC8 0
   \   00000019   0x00               DC8 0
   \                     WaveRec_idxSens4:
   \   0000001A   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens3:
   \   0000001C   0x00 0x00          DC8 0, 0
   \                     I2S2_idxTmp:
   \   0000001E   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens1:
   \   00000020   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens2:
   \   00000022   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens5:
   \   00000024   0x00 0x00          DC8 0, 0
   \                     WaveRec_idxSens6:
   \   00000026   0x00 0x00          DC8 0, 0
   \                     idxSPI5DataBuf3:
   \   00000028   0x00 0x00          DC8 0, 0
   \                     cntTime200:
   \   0000002A   0x00 0x00          DC8 0, 0
   \                     hUSBDDevice:
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000003C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000006C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000007C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000008C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000009C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000010C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000011C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000012C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000013C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000014C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000015C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000016C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000017C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000018C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000019C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000020C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000021C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000022C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000023C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 1
   \                     btnSW1:
   \   00000000   0x00               DC8 0
   \                     btnSW2:
   \   00000001   0x00               DC8 0
   \                     cntBtnPress:
   \   00000002   0x00               DC8 0
   \                     Command_index:
   \   00000003   0x01               DC8 1

   \                                 In section .bss, align 1
     97          uint8_t Direction;
   \                     Direction:
   \   00000000                      DS8 1
     98          //int16_t PreCalcBuff[129][256];
     99          
    100          
    101          
    102          
    103          
    104          
    105          #if (DEBUG)
    106          uint8_t  pUARTBuf[128];
    107          uint32_t Main_CoefMor;
    108          uint8_t stDir,flgS2,flgS3,flgS4,flgS2Flt,flgS3Flt,flgS4Flt;
    109          uint8_t flgS2Ins,flgS3Ins,flgS4Ins;
    110          #endif
    111          
    112          #if USB_STREAMING
    113          extern __IO uint16_t idxFrmPDMMic8;
    114          #endif
    115          
    116          
    117          /* Private function prototypes -----------------------------------------------*/
    118          static void SystemClock_Config(void);
    119          static void CPU_CACHE_Enable(void);
    120          
    121          
    122          
    123          
    124          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c);
    125          void MX_I2C2_Init(void);
    126          void USART3_Init(void);
    127          void ReadSTASeq(uint8_t Addr, uint8_t *pBufOut,uint8_t Len );
    128          void WriteSTAByte(uint8_t Addr, uint8_t *pBufIn, uint8_t len);
    129          void SPI5_CallBack(SPI_HandleTypeDef *hspi);
    130          uint8_t StartPlay(void);
    131          
    132          
    133          /*--------------INLINE FUNCTION-----------------------------------------------*/
    134          
    135          inline static void FFT_Update(void)
    136          {
    137          
    138                      
    139                /* Hafl buffer is filled in by I2S data stream in */
    140                if((flgDlyUpd==0))
    141                {
    142                      PDM2PCMSDO78();
    143                      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15); 
    144                      //FactorUpd(&FacMic); 
    145                      //STM_EVAL_LEDOn(LED3);
    146                      flgDlyUpd = 1; 
    147          /*-------------------------------------------------------------------------------------------------------------
    148          			  
    149          	Sequence  Record Data                     Processing Data                 Player Data
    150          			  
    151          	1-------  Buffer1                         Buffer2                         Buffer3
    152          			  
    153          	2-------  Buffer3                         Buffer1                         Buffer2		  
    154          			  
    155          	3-------  Buffer2                         Buffer3                         Buffer1 
    156           ---------------------------------------------------------------------------------------------------------------*/
    157                      /* Processing Data */
    158          			switch (buffer_switch)  //buffer_switch
    159          			{             
    160          			    case BUF1_PLAY:
    161          #if MAIN_CRSCORR
    162                              for (uint16_t i=0; i<(_MAX_SS/_MAX_SS);i++)
    163                              {
    164                                  //uint16_t i=0;
    165                                      arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3[i*128],    (q15_t *)&bufferFFT[i*256]);
    166                                      arm_rfft_q15(&RealFFT_Ins,    (q15_t *)&buffer3_1[i*128],   (q15_t *)&bufferFFT_1[i*256]);
    167                              
    168                                      arm_add_q15((q15_t *)&bufferFFT[i*256], (q15_t *)&bufferFFT_1[i*256],   (q15_t *)&bufferFFTSum[i*256],2*128);
    169                              
    170                                      //for (uint16_t j=0; j<256;j++)
    171                                      //{
    172                                      //	  bufferFFTSum[i*256+j]<<=6;
    173                                      //}
    174                                      
    175                                      arm_rfft_q15(&RealIFFT_Ins,    (q15_t *)&bufferFFTSum[i*256],    (q15_t *)&bufferSum[i*128]);
    176                              }
    177          #elif MAIN_FFT
    178                             
    179                              /* Sound Source Localization */
    180                              //Direction = DOACalc(&Buffer3);
    181                              /* Summing in Buffer3 */
    182                              //BeamFormingSD(&Buffer3,Direction,(int16_t *)Buffer3.bufMIC8);
    183                              //FFT_SUM((int16_t *)buffer3, (int16_t * )buffer3_1,fbuffer, 1024);				 	   
    184          #else
    185                              //LowPassIIR(Buffer3.bufMIC1,Buffer3.bufMIC1,LowPass_Mic1Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    186                              //LowPassIIR(Buffer3.bufMIC2,Buffer3.bufMIC2,LowPass_Mic2Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    187                              //LowPassIIR(Buffer3.bufMIC3,Buffer3.bufMIC3,LowPass_Mic3Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    188                              //LowPassIIR(Buffer3.bufMIC4,Buffer3.bufMIC4,LowPass_Mic4Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    189                              //LowPassIIR(Buffer3.bufMIC5,Buffer3.bufMIC5,LowPass_Mic5Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    190                              //LowPassIIR(Buffer3.bufMIC6,Buffer3.bufMIC6,LowPass_Mic6Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    191                              //LowPassIIR(Buffer3.bufMIC7,Buffer3.bufMIC7,LowPass_Mic7Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    192                              //LowPassIIR(Buffer3.bufMIC8,Buffer3.bufMIC8,LowPass_Mic8Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    193          
    194                              //idxLatency78 = GCC_PHAT(Buffer3.bufMIC7, Buffer3.bufMIC8, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal78);
    195                              //idxLatency14 = GCC_PHAT(Buffer3.bufMIC1, Buffer3.bufMIC4, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal14);
    196                              //idxLatency25 = GCC_PHAT(Buffer3.bufMIC5, Buffer3.bufMIC2, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal25);
    197                              //idxLatency63 = GCC_PHAT(Buffer3.bufMIC6, Buffer3.bufMIC3, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal63);
    198                             
    199          
    200                              SumDelay(&Buffer3);
    201          #endif
    202          					
    203          					break;
    204          				case BUF2_PLAY:
    205          
    206          #if MAIN_CRSCORR
    207                               for (uint16_t i=0; i<(_MAX_SS/128);i++)
    208                               { 
    209                                  //uint16_t i=0;
    210                                  arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1[i*128],(q15_t *)&bufferFFT[i*256]);
    211                                  arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer1_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    212          
    213                                  arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],    (q15_t *)&bufferFFTSum[i*256],
    214                                                  2*128);
    215          
    216                                  //for (uint16_t j=0; j<256;j++)
    217                                  //{
    218                                  //	   bufferFFTSum[i*256+j]<<=6;
    219                                  //}
    220          
    221          
    222                                  arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    223                               }
    224          #elif MAIN_FFT
    225                              /* Sound Source Localization */
    226                              //Direction = DOACalc(&Buffer1);
    227                              /* Summing in Buffer3 */
    228                              //BeamFormingSD(&Buffer1,Direction,(int16_t *)Buffer3.bufMIC8);
    229          
    230          #else
    231                          
    232                      //idxLatency13 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    233                      //idxLatency12 = CrssCor(Buffer1.bufMIC1, Buffer1.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    234                      //LowPassIIR(Buffer1.bufMIC1,Buffer1.bufMIC1,LowPass_Mic1Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    235                      //LowPassIIR(Buffer1.bufMIC2,Buffer1.bufMIC2,LowPass_Mic2Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    236                      //LowPassIIR(Buffer1.bufMIC3,Buffer1.bufMIC3,LowPass_Mic3Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    237                      //LowPassIIR(Buffer1.bufMIC4,Buffer1.bufMIC4,LowPass_Mic4Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    238                      //LowPassIIR(Buffer1.bufMIC5,Buffer1.bufMIC5,LowPass_Mic5Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    239                      //LowPassIIR(Buffer1.bufMIC6,Buffer1.bufMIC6,LowPass_Mic6Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    240                      //LowPassIIR(Buffer1.bufMIC7,Buffer1.bufMIC7,LowPass_Mic7Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    241                      //LowPassIIR(Buffer1.bufMIC8,Buffer1.bufMIC8,LowPass_Mic8Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    242          
    243                      //idxLatency78 = GCC_PHAT(Buffer1.bufMIC7, Buffer1.bufMIC8, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal78);	
    244                      //idxLatency14 = GCC_PHAT(Buffer1.bufMIC1, Buffer1.bufMIC4, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal14);
    245                      //idxLatency25 = GCC_PHAT(Buffer1.bufMIC5, Buffer1.bufMIC2, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal25);
    246                      //idxLatency63 = GCC_PHAT(Buffer1.bufMIC6, Buffer1.bufMIC3, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal63);
    247          
    248          
    249          
    250                            SumDelay(&Buffer1);
    251          #endif
    252          	    break;
    253          					
    254          	   case BUF3_PLAY:
    255          #if MAIN_CRSCORR
    256                    for (uint16_t i=0; i<(_MAX_SS/128);i++)
    257                    {
    258                        arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2[i*128],(q15_t *)&bufferFFT[i*256]);
    259                        arm_rfft_q15(&RealFFT_Ins,(q15_t *)&buffer2_1[i*128],(q15_t *)&bufferFFT_1[i*256]);
    260          
    261                        arm_add_q15((q15_t *)&bufferFFT[i*256],    (q15_t *)&bufferFFT_1[i*256],	(q15_t *)&bufferFFTSum[i*256],
    262                                           2*128);
    263          
    264                        //for (uint16_t j=0; j<256;j++)
    265                        //{
    266                        //   bufferFFTSum[i*256+j]<<=6;
    267                        //}
    268          
    269          
    270                        arm_rfft_q15(&RealIFFT_Ins,(q15_t *)&bufferFFTSum[i*256],(q15_t *)&bufferSum[i*128]);
    271                    }
    272          #elif MAIN_FFT
    273                  
    274                  /* Sound Source Localization */
    275                  //Direction = DOACalc(&Buffer2);
    276                  /* Summing in Buffer3 */
    277                  //BeamFormingSD(&Buffer2,Direction,(int16_t *)Buffer2.bufMIC8);
    278          
    279                  /* Summing in Buffer2 */
    280                  //Delay_Sum_FFT(&Buffer2,&FacMic, (int16_t * )Buffer2.bufMIC8, PAR_N);
    281                  //FFT_SUM((int16_t *)buffer2, (int16_t * )buffer2_1,fbuffer, 1024);				
    282          #else
    283          
    284                    //idxLatency13 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE/2); 
    285                    //idxLatency12 = CrssCor(Buffer2.bufMIC1, Buffer2.bufMIC2, AUDIO_OUT_BUFFER_SIZE/2);
    286          
    287          		  //LowPassIIR(Buffer2.bufMIC1,Buffer2.bufMIC1,LowPass_Mic1Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    288          		  //LowPassIIR(Buffer2.bufMIC2,Buffer2.bufMIC2,LowPass_Mic2Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    289          		  //LowPassIIR(Buffer2.bufMIC3,Buffer2.bufMIC3,LowPass_Mic3Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    290          		  //LowPassIIR(Buffer2.bufMIC4,Buffer2.bufMIC4,LowPass_Mic4Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    291          		  //LowPassIIR(Buffer2.bufMIC5,Buffer2.bufMIC5,LowPass_Mic5Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    292          		  //LowPassIIR(Buffer2.bufMIC6,Buffer2.bufMIC6,LowPass_Mic6Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    293          		  //LowPassIIR(Buffer2.bufMIC7,Buffer2.bufMIC7,LowPass_Mic7Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    294          		  //LowPassIIR(Buffer2.bufMIC8,Buffer2.bufMIC8,LowPass_Mic8Old,AUDIO_OUT_BUFFER_SIZE,COEFLOWPASS_MIC);
    295          
    296                    //idxLatency78 = GCC_PHAT(Buffer2.bufMIC7, Buffer2.bufMIC8, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal78);
    297                    //idxLatency14 = GCC_PHAT(Buffer2.bufMIC1, Buffer2.bufMIC4, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal14);
    298                    //idxLatency25 = GCC_PHAT(Buffer2.bufMIC5, Buffer2.bufMIC2, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal25);
    299                    //idxLatency63 = GCC_PHAT(Buffer2.bufMIC6, Buffer2.bufMIC3, AUDIO_OUT_BUFFER_SIZE,&CrssCorVal63);
    300          
    301                    SumDelay(&Buffer2);
    302          #endif
    303          					break;
    304          					
    305          				default:
    306          					break;
    307                         
    308          			}
    309          			AudioPlayerUpd();
    310          	       //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
    311          	  }
    312          	 
    313          
    314          }
    315          
    316          
    317          inline static void Audio_Play_Out(void)
    318          {
    319          
    320          /*-------------------------------------------------------------------------------------------------------------
    321          			  
    322          	Sequence  Record Data                     Processing Data                 Player Data
    323          			  
    324          	1-------  Buffer1                         Buffer2                          Buffer3
    325          			  
    326          	2-------  Buffer3                         Buffer1                           Buffer2		  
    327          			  
    328          	3-------  Buffer2                         Buffer3                           Buffer1 
    329           ---------------------------------------------------------------------------------------------------------------*/
    330              //Audio_MAL_Play((uint32_t)&bufferSum[idxFrmPDMMic8*AUDIO_CHANNELS*(6*AUDIO_SAMPLING_FREQUENCY/1000)], 2*6*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
    331              //Audio_MAL_Play((uint32_t)&bufferSum, 2*3*AUDIO_CHANNELS*AUDIO_OUT_BUFFER_SIZE);
    332              flgRacing=0;
    333          
    334          #if USB_STREAMING
    335          				  AudioUSBSend(idxFrmPDMMic8);
    336          #endif
    337          
    338          
    339              ++idxFrmPDMMic8;
    340          	/* if player is finished for curent buffer                                  */ 
    341          	if (idxFrmPDMMic8 == AUDIO_OUT_BUFFER_SIZE/(AUDIO_SAMPLING_FREQUENCY/1000))
    342          	{
    343          	       RESET_IDX
    344          		   //MIC7Rec();
    345          		   //MIC8Rec();
    346                     WaveRec_idxTest=0;
    347                     idxFrmPDMMic8=0;
    348                      switch (buffer_switch)
    349                      {
    350                          case BUF1_PLAY:
    351                                /* set flag for switch buffer */		  
    352                            buffer_switch = BUF3_PLAY;
    353                            break;
    354                          case BUF2_PLAY:
    355                            /* set flag for switch buffer */
    356                            buffer_switch = BUF1_PLAY;        
    357                            break;
    358                          case BUF3_PLAY:
    359                            /* set flag for switch buffer */		  
    360                            buffer_switch = BUF2_PLAY;
    361                            break;
    362                          default:
    363                            break;
    364                      }
    365          
    366                    //if (cntStrt==2) 	 StartRecMic7_8();
    367                    if (cntStrt<20) 
    368                    {  
    369                        cntStrt++;
    370                        WaveRecord_flgIni=0; 
    371                    }
    372          
    373          		 /* Tongle status to switch the USB audio buffer out */
    374          
    375          	}			 
    376          
    377          
    378          
    379          }
    380          
    381          
    382          /* Private functions ---------------------------------------------------------*/
    383          
    384          /**
    385            * @brief  Main program
    386            * @param  None
    387            * @retval None
    388            */

   \                                 In section .text, align 4, keep-with-next
    389          int main(void)
    390          {
   \                     main: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0A3             SUB      SP,SP,#+140
    391            /* Enable the CPU Cache */
    392            CPU_CACHE_Enable();
   \   00000006   0xF3BF 0x8F4F      DSB      
   \   0000000A   0xF3BF 0x8F6F      ISB      
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0xe000ed14
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xF8C0 0x123C      STR      R1,[R0, #+572]
   \   00000018   0x6801             LDR      R1,[R0, #+0]
   \   0000001A   0xF441 0x3100      ORR      R1,R1,#0x20000
   \   0000001E   0x6001             STR      R1,[R0, #+0]
   \   00000020   0xF3BF 0x8F4F      DSB      
   \   00000024   0xF3BF 0x8F6F      ISB      
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x6701             STR      R1,[R0, #+112]
   \   0000002C   0xF3BF 0x8F4F      DSB      
   \   00000030   0xF8D0 0x106C      LDR.W    R1,[R0, #+108]
   \   00000034   0xF3C1 0x324E      UBFX     R2,R1,#+13,#+15
   \                     ??main_0: (+1)
   \   00000038   0xF643 0x74E0      MOVW     R4,#+16352
   \   0000003C   0xF3C1 0x03C9      UBFX     R3,R1,#+3,#+10
   \   00000040   0xEA04 0x1442      AND      R4,R4,R2, LSL #+5
   \                     ??main_1: (+1)
   \   00000044   0xEA44 0x7583      ORR      R5,R4,R3, LSL #+30
   \   00000048   0xF8C0 0x524C      STR      R5,[R0, #+588]
   \   0000004C   0x461D             MOV      R5,R3
   \   0000004E   0x1E6B             SUBS     R3,R5,#+1
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xD1F7             BNE.N    ??main_1
   \   00000054   0x4613             MOV      R3,R2
   \   00000056   0x1E5A             SUBS     R2,R3,#+1
   \   00000058   0x2B00             CMP      R3,#+0
   \   0000005A   0xD1ED             BNE.N    ??main_0
   \   0000005C   0xF3BF 0x8F4F      DSB      
   \   00000060   0x6801             LDR      R1,[R0, #+0]
   \   00000062   0xF441 0x3180      ORR      R1,R1,#0x10000
   \   00000066   0x6001             STR      R1,[R0, #+0]
   \   00000068   0xF3BF 0x8F4F      DSB      
   \   0000006C   0xF3BF 0x8F6F      ISB      
    393            
    394            /* STM32F7xx HAL library initialization:
    395                 - Configure the Flash ART accelerator on ITCM interface
    396                 - Configure the Systick to generate an interrupt each 1 msec
    397                 - Set NVIC Group Priority to 4
    398                 - Global MSP (MCU Support Package) initialization
    399               */   
    400            HAL_Init();
   \   00000070   0x.... 0x....      BL       HAL_Init
    401            /* Configure the system clock to 216 MHz */
    402            //Test_SystemClock_Config(); 
    403            SystemClock_Config();
   \   00000074   0x.... 0x....      BL       SystemClock_Config
    404            BSP_AUDIO_OUT_ClockConfig(3*AUDIO_FREQ, NULL);
   \   00000078   0xA801             ADD      R0,SP,#+4
   \   0000007A   0x.... 0x....      LDR.W    R5,??DataTable12_1  ;; 0x40023830
   \   0000007E   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
   \   00000082   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000086   0x.... 0x....      LDR.W    R4,??DataTable12_2
   \   0000008A   0x9001             STR      R0,[SP, #+4]
   \   0000008C   0xF44F 0x0080      MOV      R0,#+4194304
   \   00000090   0x9011             STR      R0,[SP, #+68]
   \   00000092   0xF44F 0x70AC      MOV      R0,#+344
   \   00000096   0x9002             STR      R0,[SP, #+8]
   \   00000098   0x2007             MOVS     R0,#+7
   \   0000009A   0x9004             STR      R0,[SP, #+16]
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x900A             STR      R0,[SP, #+40]
   \   000000A0   0xA801             ADD      R0,SP,#+4
   \   000000A2   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    405          #if EXT_RAM  
    406            /* Initialize the SDRAM */
    407            BSP_SDRAM_Init();
    408          #endif
    409            BSP_LED_Init(LED1);
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x.... 0x....      LDR.W    R6,??DataTable12_3  ;; 0x40021000
   \   000000AC   0x.... 0x....      BL       BSP_LED_Init
    410            BSP_LED_Init(LED2);
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0x.... 0x....      BL       BSP_LED_Init
    411          
    412            /* Button Initialization */
    413            // sop1hc: removed on 22 June 2016, since do not install 2 buttons on this version 
    414            //ButtonInit();
    415          
    416            //BSP_PB_Init(BUTTON_KEY,BUTTON_MODE_EXTI);
    417          
    418            
    419            /* Init TS module */
    420             BeamFormingSD_Init();	
   \   000000B6   0x.... 0x....      BL       BeamFormingSD_Init
    421          
    422          
    423              /*-----------------------*/
    424          	/* ---------PA4: LCCKO(I2S2)-------------*/
    425              __GPIOA_CLK_ENABLE();
   \   000000BA   0x2000             MOVS     R0,#+0
    426              GPIO_INS.Pin = GPIO_PIN_4;
    427              GPIO_INS.Mode =GPIO_MODE_INPUT;
    428              GPIO_INS.Pull =GPIO_PULLUP;
    429              GPIO_INS.Speed =GPIO_SPEED_HIGH;
    430              HAL_GPIO_Init(GPIOA,&GPIO_INS);
   \   000000BC   0x4621             MOV      R1,R4
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0x6828             LDR      R0,[R5, #+0]
   \   000000C2   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000000C6   0x6028             STR      R0,[R5, #+0]
   \   000000C8   0x6828             LDR      R0,[R5, #+0]
   \   000000CA   0xF000 0x0001      AND      R0,R0,#0x1
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \   000000D0   0x9800             LDR      R0,[SP, #+0]
   \   000000D2   0x2010             MOVS     R0,#+16
   \   000000D4   0x6020             STR      R0,[R4, #+0]
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x6060             STR      R0,[R4, #+4]
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0x60A0             STR      R0,[R4, #+8]
   \   000000DE   0x2003             MOVS     R0,#+3
   \   000000E0   0x60E0             STR      R0,[R4, #+12]
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable12_4  ;; 0x40020000
   \   000000E6   0x.... 0x....      BL       HAL_GPIO_Init
    431          
    432              /* Enable and set Button EXTI Interrupt to the lowest priority */
    433              //HAL_NVIC_SetPriority((IRQn_Type)EXTI4_IRQn, INTERRUPT_PRI_EXT_LRCK, 0);
    434              //HAL_NVIC_EnableIRQ((IRQn_Type)EXTI4_IRQn);
    435          	
    436               /* ---------PB12: LCCKO (I2S2)-------------*/
    437              __GPIOB_CLK_ENABLE();
   \   000000EA   0x2000             MOVS     R0,#+0
    438              GPIO_INS.Pin = GPIO_PIN_12;
    439              GPIO_INS.Mode =GPIO_MODE_INPUT;
    440              GPIO_INS.Pull =GPIO_PULLUP;
    441              GPIO_INS.Speed =GPIO_SPEED_HIGH;
    442              HAL_GPIO_Init(GPIOB,&GPIO_INS);
   \   000000EC   0x4621             MOV      R1,R4
   \   000000EE   0x9000             STR      R0,[SP, #+0]
   \   000000F0   0x6828             LDR      R0,[R5, #+0]
   \   000000F2   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000000F6   0x6028             STR      R0,[R5, #+0]
   \   000000F8   0x6828             LDR      R0,[R5, #+0]
   \   000000FA   0xF000 0x0002      AND      R0,R0,#0x2
   \   000000FE   0x9000             STR      R0,[SP, #+0]
   \   00000100   0x9800             LDR      R0,[SP, #+0]
   \   00000102   0xF44F 0x5080      MOV      R0,#+4096
   \   00000106   0x6020             STR      R0,[R4, #+0]
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x6060             STR      R0,[R4, #+4]
   \   0000010C   0x2001             MOVS     R0,#+1
   \   0000010E   0x60A0             STR      R0,[R4, #+8]
   \   00000110   0x2003             MOVS     R0,#+3
   \   00000112   0x60E0             STR      R0,[R4, #+12]
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable12_5  ;; 0x40020400
   \   00000118   0x.... 0x....      BL       HAL_GPIO_Init
    443              /*-----------------------------------------*/
    444          
    445              /* ---------PE4: LCCKO --------------------*/
    446              __GPIOE_CLK_ENABLE();
   \   0000011C   0x2000             MOVS     R0,#+0
    447              GPIO_INS.Pin = GPIO_PIN_4;
    448              GPIO_INS.Mode =GPIO_MODE_INPUT;
    449              GPIO_INS.Pull =GPIO_PULLUP;
    450              GPIO_INS.Speed =GPIO_SPEED_HIGH;
    451              HAL_GPIO_Init(GPIOE,&GPIO_INS);
   \   0000011E   0x4621             MOV      R1,R4
   \   00000120   0x9000             STR      R0,[SP, #+0]
   \   00000122   0x6828             LDR      R0,[R5, #+0]
   \   00000124   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000128   0x6028             STR      R0,[R5, #+0]
   \   0000012A   0x6828             LDR      R0,[R5, #+0]
   \   0000012C   0xF000 0x0010      AND      R0,R0,#0x10
   \   00000130   0x9000             STR      R0,[SP, #+0]
   \   00000132   0x9800             LDR      R0,[SP, #+0]
   \   00000134   0x2010             MOVS     R0,#+16
   \   00000136   0x6020             STR      R0,[R4, #+0]
   \   00000138   0x2000             MOVS     R0,#+0
   \   0000013A   0x6060             STR      R0,[R4, #+4]
   \   0000013C   0x2001             MOVS     R0,#+1
   \   0000013E   0x60A0             STR      R0,[R4, #+8]
   \   00000140   0x2003             MOVS     R0,#+3
   \   00000142   0x60E0             STR      R0,[R4, #+12]
   \   00000144   0x4630             MOV      R0,R6
   \   00000146   0x.... 0x....      BL       HAL_GPIO_Init
    452              /*-----------------------------------------*/
    453          
    454              /*---------PE3: POWER DOWN-----------------*/
    455              __GPIOE_CLK_ENABLE();
   \   0000014A   0x2000             MOVS     R0,#+0
    456              GPIO_INS.Pin = GPIO_PIN_3;
    457              GPIO_INS.Mode = GPIO_MODE_OUTPUT_PP;
    458              GPIO_INS.Pull = GPIO_PULLUP;
    459              GPIO_INS.Speed = GPIO_SPEED_HIGH;
    460          
    461              HAL_GPIO_Init(GPIOE, &GPIO_INS);
   \   0000014C   0x4621             MOV      R1,R4
   \   0000014E   0x9000             STR      R0,[SP, #+0]
   \   00000150   0x6828             LDR      R0,[R5, #+0]
   \   00000152   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000156   0x6028             STR      R0,[R5, #+0]
   \   00000158   0x6828             LDR      R0,[R5, #+0]
   \   0000015A   0xF000 0x0010      AND      R0,R0,#0x10
   \   0000015E   0x9000             STR      R0,[SP, #+0]
   \   00000160   0x9800             LDR      R0,[SP, #+0]
   \   00000162   0x2008             MOVS     R0,#+8
   \   00000164   0x6020             STR      R0,[R4, #+0]
   \   00000166   0x2001             MOVS     R0,#+1
   \   00000168   0x6060             STR      R0,[R4, #+4]
   \   0000016A   0x60A0             STR      R0,[R4, #+8]
   \   0000016C   0x2003             MOVS     R0,#+3
   \   0000016E   0x60E0             STR      R0,[R4, #+12]
   \   00000170   0x4630             MOV      R0,R6
   \   00000172   0x.... 0x....      BL       HAL_GPIO_Init
    462          
    463              HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
   \   00000176   0x2200             MOVS     R2,#+0
   \   00000178   0x2108             MOVS     R1,#+8
   \   0000017A   0x4630             MOV      R0,R6
   \   0000017C   0x.... 0x....      BL       HAL_GPIO_WritePin
    464              //HAL_Delay(300);
    465              /*----------------------------------------*/
    466          
    467          #if (DEBUG)  
    468              /* UART for debug */
    469              USART3_Init();
    470          #endif
    471          
    472          #if (USB_STREAMING)	
    473          		/* Initialize USB descriptor basing on channels number and sampling frequency */
    474          		USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, 4*AUDIO_SAMPLING_FREQUENCY, AUDIO_CHANNELS);
   \   00000180   0x2202             MOVS     R2,#+2
   \   00000182   0xF44F 0x417A      MOV      R1,#+64000
   \   00000186   0xF104 0x002C      ADD      R0,R4,#+44
   \   0000018A   0x.... 0x....      BL       USBD_AUDIO_Init_Microphone_Descriptor
    475          		/* Init Device Library */
    476          		USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
   \   0000018E   0x2200             MOVS     R2,#+0
   \   00000190   0x.... 0x....      LDR.W    R1,??DataTable12_6
   \   00000194   0xF104 0x002C      ADD      R0,R4,#+44
   \   00000198   0x.... 0x....      BL       USBD_Init
    477          		/* Add Supported Class */
    478          		USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable12_7
   \   000001A0   0xF104 0x002C      ADD      R0,R4,#+44
   \   000001A4   0x.... 0x....      BL       USBD_RegisterClass
    479          		/* Add Interface callbacks for AUDIO Class */  
    480          		USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
   \   000001A8   0x.... 0x....      LDR.W    R1,??DataTable12_8
   \   000001AC   0xF104 0x002C      ADD      R0,R4,#+44
   \   000001B0   0x.... 0x....      BL       USBD_AUDIO_RegisterInterface
    481          		/* Start Device Process */
    482          		USBD_Start(&hUSBDDevice);
   \   000001B4   0xF104 0x002C      ADD      R0,R4,#+44
   \   000001B8   0x.... 0x....      BL       USBD_Start
    483          	
    484          		/* Init Host Library */
    485          		//test GIT //USBH_Init(&hUSBHost, USBH_UserProcess, 0);
    486          	
    487          		/* Add Supported Class */
    488          		//test GIT //USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
    489          		
    490          		/* Start Host Process */
    491          		//test GIT //USBH_Start(&hUSBHost); 					  
    492          #endif 
    493          
    494              
    495              AUDIO_InitApplication();
   \   000001BC   0x.... 0x....      BL       AUDIO_InitApplication
    496           
    497               /*------------------------PLAYER------------------------------------------*/
    498              Audio_MAL_Play((uint32_t)bufferSum,6*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
   \   000001C0   0x21C0             MOVS     R1,#+192
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable12_9
   \   000001C6   0x.... 0x....      BL       Audio_MAL_Play
    499              /*------------------------------------------------------------------------*/ 
    500           					  
    501          
    502              /*----------------------------------------*/
    503              MX_I2C2_Init(); //for STA321MP
   \   000001CA   0x.... 0x....      BL       MX_I2C2_Init
    504              STA321MP_Ini();
   \   000001CE   0x.... 0x....      BL       STA321MP_Ini
    505              BSP_LED_Toggle(LED1);
   \   000001D2   0x2000             MOVS     R0,#+0
   \   000001D4   0x.... 0x....      BL       BSP_LED_Toggle
    506              /* Init Audio Application */
    507          #ifdef CS43L22_PLAY
    508              AUDIO_InitApplication();
    509          #endif
    510              BSP_LED_Toggle(LED2);
   \   000001D8   0x2001             MOVS     R0,#+1
   \   000001DA   0x.... 0x....      BL       BSP_LED_Toggle
    511          
    512              buffer_switch = BUF3_PLAY;		 /* record data to buffer1 */
   \   000001DE   0x2002             MOVS     R0,#+2
   \   000001E0   0x75E0             STRB     R0,[R4, #+23]
    513          
    514              __disable_irq();
   \   000001E2   0xB672             CPSID    I
    515              MIC1TO8_Init();
   \   000001E4   0x.... 0x....      BL       MIC1TO8_Init
    516              StartPlay();
   \   000001E8   0x.... 0x....      BL       I2S1_Enable
   \   000001EC   0x.... 0x....      BL       I2S2_Enable
   \   000001F0   0x.... 0x....      BL       SPI4_Enable
   \   000001F4   0x.... 0x....      BL       StartRecMic7_8
   \   000001F8   0x2000             MOVS     R0,#+0
   \   000001FA   0x.... 0x....      LDR.W    R1,??DataTable12_10
   \   000001FE   0x8420             STRH     R0,[R4, #+32]
   \   00000200   0x8460             STRH     R0,[R4, #+34]
   \   00000202   0x83A0             STRH     R0,[R4, #+28]
   \   00000204   0x8360             STRH     R0,[R4, #+26]
   \   00000206   0x84A0             STRH     R0,[R4, #+36]
   \   00000208   0x84E0             STRH     R0,[R4, #+38]
   \   0000020A   0x8008             STRH     R0,[R1, #+0]
   \   0000020C   0x75E0             STRB     R0,[R4, #+23]
    517              __enable_irq();
   \   0000020E   0xB662             CPSIE    I
    518              BSP_LED_Toggle(LED1);
   \   00000210   0x.... 0x....      BL       BSP_LED_Toggle
   \   00000214   0x.... 0x....      LDR.W    R5,??DataTable12_11
   \   00000218   0x.... 0x....      LDR.W    R6,??DataTable12_12
   \   0000021C   0x.... 0x....      LDR.W    R11,??DataTable12_13
   \   00000220   0x.... 0x....      LDR.W    R8,??DataTable12_14
   \   00000224   0x.... 0x....      LDR.W    R9,??DataTable12_15
   \   00000228   0x.... 0x....      LDR.W    R10,??DataTable12_16
   \   0000022C   0x.... 0x....      LDR.W    R7,??DataTable12_17
   \   00000230   0xE014             B.N      ??main_2
   \   00000232   0xBF00             Nop      
    519              
    520              
    521          	//EnergyNoiseCalc(AUDIO_OUT_BUFFER_SIZE/2);
    522              //Precalculation(Coef,PreCalcBuff);
    523              
    524              while (1)
    525              {   
   \                     ??main_3: (+1)
   \   00000234   0x.... 0x....      LDR.W    R0,??DataTable12_18
   \                     ??main_4: (+1)
   \   00000238   0x.... 0x....      BL       SumDelay
   \                     ??main_5: (+1)
   \   0000023C   0x.... 0x....      BL       AudioPlayerUpd
    526          		/* This calculation happens once time in power cycles */
    527          		/* After 5 times of full frame recieved interrupt */
    528                  
    529                  if ((cntStrt>=5)&&(cntStrt<20))
    530                  {
    531                      if ((WaveRecord_flgIni<900)&&(cntStrt<10))
    532                      {
    533                          if (ValBit(SPI4_stNipple,0)!=0)
    534                          {
    535                              swtCase1Mic56 = 1;    
    536                          }
    537                          WaveRecord_flgIni++;
    538                      }
    539                      else if ((WaveRecord_flgIni<1000)&&(cntStrt<10))
    540                      {
    541                          if (swtCase1Mic56==0)
    542                          {
    543                               stMIC56 = GPIO_PIN_SET;
    544                               stMIC56Old = GPIO_PIN_SET; 
    545                               SPI4_stPosShft = 0;
    546                          }
    547          
    548                          WaveRecord_flgIni++;
    549                          
    550          
    551                      }
    552                      else if ((cntStrt==10)&&(WaveRecord_flgIni<200))
    553                      {
    554                          for(char i=0;i<16;i++)
    555                          {
    556                               if (ValBit(SPI4_stNipple,i)!=0) 
    557                               {
    558                                    SPI4_stPosShft = MAX(SPI4_stPosShft,i+1);
    559                               }
    560                          }
    561                          
    562                          if (SPI4_stPosShft==16)  HAL_NVIC_SystemReset(); 
    563                  
    564                          WaveRecord_flgIni++;			
    565                      }
    566                      else
    567                      {
    568                          flgShipping = 0;
    569                          WaveRecord_flgIni = 0;
    570                      }
    571          					  
    572          
    573          		 }
    574          		 
    575          	
    576          		/* USB Host Background task */
    577          		//USBH_Process(&hUSBHost);
    578          
    579          		/* AUDIO Menu Process */
    580          		//AUDIO_MenuProcess();
    581          
    582          		FFT_Update();   
    583          
    584          		if (flg10ms==1)
   \                     ??main_6: (+1)
   \   00000240   0xF994 0x0016      LDRSB    R0,[R4, #+22]
   \   00000244   0x2801             CMP      R0,#+1
   \   00000246   0xD109             BNE.N    ??main_2
    585          		{
    586          		    flg10ms=0;		   		      
   \   00000248   0x2000             MOVS     R0,#+0
   \   0000024A   0x75A0             STRB     R0,[R4, #+22]
    587          	         cntTime200++;
   \   0000024C   0x8D60             LDRH     R0,[R4, #+42]
   \   0000024E   0x1C40             ADDS     R0,R0,#+1
   \   00000250   0x8560             STRH     R0,[R4, #+42]
    588          	         if (cntTime200==40)
   \   00000252   0xB280             UXTH     R0,R0
   \   00000254   0x2828             CMP      R0,#+40
   \   00000256   0xBF04             ITT      EQ 
   \   00000258   0x2000             MOVEQ    R0,#+0
   \   0000025A   0x8560             STRHEQ   R0,[R4, #+42]
    589          	         {
    590          #if (DEBUG)
    591                             uint32_t tmpSNR63,tmpSNR14,tmpSNR78,tmpSNR25;
    592                             tmpSNR78 = (uint32_t)(CrssCorVal78/EnergyError);
    593                             tmpSNR25 = (uint32_t)(CrssCorVal25/EnergyError);
    594          				   tmpSNR14 = (uint32_t)(CrssCorVal14/EnergyError);
    595          				   tmpSNR63 = (uint32_t)(CrssCorVal63/EnergyError);
    596                              //if (tmpSNR>10)
    597                              {
    598                                  int16_t test[5];
    599                                  static uint8_t flagNotMin;
    600                                  test[0] = 0;
    601          						if (CrssCorVal63>10)						
    602                                      test[1]= idxLatency63;
    603          						else
    604          							test[1] = 0;
    605          
    606          						if (CrssCorVal14>10)
    607                                      test[2]= idxLatency14;
    608          						else
    609          							test[2] =0;
    610          
    611          						if (CrssCorVal25 > 10)
    612                                      test[3]= idxLatency25;
    613          						else
    614          							test[3] = 0;
    615          
    616                                  if (CrssCorVal78>10)
    617          						    test[4]= idxLatency78;                        
    618          						else
    619          							test[4]= 2;
    620          
    621          						if (((CrssCorVal63>10))||((CrssCorVal14>10))||((CrssCorVal25>10))||((CrssCorVal78>10)))
    622                                  {
    623                                       sprintf((char *)pUARTBuf,"%d:%d:%d:%d  ",idxLatency63,idxLatency14,idxLatency25,idxLatency78);
    624                                       flagNotMin=0 ;
    625                                        sprintf((char *)(pUARTBuf+15),"----------\r\n");
    626                                        if (test[3]>0)
    627                                        {
    628                                                sprintf((char *)(pUARTBuf+15),"Close Mic 5\r\n"); 
    629          									  flagNotMin=1;
    630                                        }
    631                                        else if (test[3]<0)
    632                                        {
    633                                              sprintf((char *)(pUARTBuf+15),"Clsoe Mic 2\r\n");
    634          									flagNotMin=1;
    635          
    636                                        }
    637                                        else
    638                                        {
    639                                             
    640                                        }	
    641          
    642          						
    643          				                if (test[2]>0)
    644          		                  	    {
    645          		                  	       if((CrssCorVal14>CrssCorVal25)||(flagNotMin==0))
    646          		                  	       {
    647          		                             sprintf((char *)(pUARTBuf+15),"Clsoe Mic 4\r\n");
    648          									 flagNotMin=2;
    649          		                  	       }
    650          		                  	    }
    651          		                        else if (test[2]<0)
    652          		                        {
    653          		                            if((CrssCorVal14>CrssCorVal25)||(flagNotMin==0))
    654          		                            {
    655          		                              sprintf((char *)(pUARTBuf+15),"Clsoe Mic 1\r\n");                             
    656          									  flagNotMin=2;
    657          		                            }
    658          		                        }
    659          		                        else
    660          		                        {
    661          
    662          		                        }
    663          
    664          						   
    665          		                        if (test[1]>0)
    666          		                  	    {
    667          		                  	       if((((CrssCorVal63>CrssCorVal25)&&(flagNotMin==1))||(flagNotMin==0))||((CrssCorVal63>CrssCorVal14)&&(flagNotMin==2)))
    668          		                  	       {
    669          								     sprintf((char *)(pUARTBuf+15),"Clsoe Mic 3\r\n");
    670          								     flagNotMin=3;
    671          		                  	       }
    672          		                  	    }
    673          		                        else if (test[1]<0)
    674          		                        {
    675          		                             if((((CrssCorVal63>CrssCorVal25)&&(flagNotMin==1))||(flagNotMin==0))||((CrssCorVal63>CrssCorVal14)&&(flagNotMin==2)))
    676          		                             {
    677          		                               sprintf((char *)(pUARTBuf+15),"Clsoe Mic 6\r\n"); 
    678          									   flagNotMin=3;
    679          		                             }
    680          		                        }
    681          		                        else
    682          		                        {
    683          
    684          		                        }
    685          
    686          
    687          	                            if ((test[4]>3))
    688          	                            {
    689          	                                if ((flagNotMin==0))                                     
    690          	                                    sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    691          								    else if ((flagNotMin==1))
    692          										if ((CrssCorVal78>CrssCorVal25))
    693          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    694          								    else if ((flagNotMin==2))
    695          										if ((CrssCorVal78>CrssCorVal14))
    696          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");	
    697          								    else if ((flagNotMin==3))
    698          										if ((CrssCorVal78>CrssCorVal63))
    699          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 7\r\n");
    700          									else
    701          										;
    702          									
    703          	                            }
    704          	                            else if (test<=0)
    705          	                            {
    706          	                                if ((flagNotMin==0))                                     
    707          	                                    sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    708          								    else if ((flagNotMin==1))
    709          										if ((CrssCorVal78>CrssCorVal25))
    710          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    711          								    else if ((flagNotMin==2))
    712          										if ((CrssCorVal78>CrssCorVal14))
    713          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");	
    714          								    else if ((flagNotMin==3))
    715          										if ((CrssCorVal78>CrssCorVal63))
    716          											sprintf((char *)(pUARTBuf+15),"Clsoe Mic 8\r\n");
    717          									else
    718          										;
    719          									
    720          	                            }                          
    721          	                            else
    722          	                            {
    723          	                            }
    724          
    725          
    726          			  //if (flagNotMin==0) sprintf((char *)(pUARTBuf+15),"----------- \r\n");
    727          									
    728                                    //HAL_UART_Transmit_IT(&huart3,pUARTBuf,15);
    729                                    SrvB_Debound(&flgS2Ins,&flgS2Flt, flgS2,2);
    730                                    SrvB_Debound(&flgS3Ins,&flgS3Flt, flgS3,2);
    731                                    SrvB_Debound(&flgS4Ins,&flgS4Flt, flgS4,2);
    732          
    733                                    stDir = (flgS2Flt<<2)|(flgS3Flt<<1)|(flgS4Flt); 
    734                                   
    735                                     sprintf((char *)(pUARTBuf+30),"%d:%d:%d:%d\n\r\n\r",CrssCorVal63,CrssCorVal14,CrssCorVal25,CrssCorVal78);
    736                                     HAL_UART_Transmit_IT(&huart3,pUARTBuf,15+15+15);		
    737                                   }
    738                              }//if(SNR)
    739          
    740          #endif
    741          	   	         cntTime200=0;
    742                        } //(cntTime200==40)
    743                }//if (flg10ms==1)	
   \                     ??main_2: (+1)
   \   0000025C   0x8838             LDRH     R0,[R7, #+0]
   \   0000025E   0x2805             CMP      R0,#+5
   \   00000260   0xDB4A             BLT.N    ??main_7
   \   00000262   0x8838             LDRH     R0,[R7, #+0]
   \   00000264   0x2814             CMP      R0,#+20
   \   00000266   0xDA47             BGE.N    ??main_7
   \   00000268   0xF8BA 0x0000      LDRH     R0,[R10, #+0]
   \   0000026C   0xF5B0 0x7F61      CMP      R0,#+900
   \   00000270   0xBFBC             ITT      LT 
   \   00000272   0x8839             LDRHLT   R1,[R7, #+0]
   \   00000274   0x290A             CMPLT    R1,#+10
   \   00000276   0xDA09             BGE.N    ??main_8
   \   00000278   0xF8B9 0x0000      LDRH     R0,[R9, #+0]
   \   0000027C   0x07C0             LSLS     R0,R0,#+31
   \   0000027E   0xD533             BPL.N    ??main_9
   \   00000280   0x2001             MOVS     R0,#+1
   \   00000282   0x7620             STRB     R0,[R4, #+24]
   \   00000284   0xF8BA 0x0000      LDRH     R0,[R10, #+0]
   \   00000288   0x1C40             ADDS     R0,R0,#+1
   \   0000028A   0xE033             B.N      ??main_10
   \                     ??main_8: (+1)
   \   0000028C   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000290   0xBFBC             ITT      LT 
   \   00000292   0x8839             LDRHLT   R1,[R7, #+0]
   \   00000294   0x290A             CMPLT    R1,#+10
   \   00000296   0xDA0C             BGE.N    ??main_11
   \   00000298   0x7E20             LDRB     R0,[R4, #+24]
   \   0000029A   0xBB28             CBNZ.N   R0,??main_9
   \   0000029C   0x2001             MOVS     R0,#+1
   \   0000029E   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   000002A2   0xF88B 0x0000      STRB     R0,[R11, #+0]
   \   000002A6   0x2000             MOVS     R0,#+0
   \   000002A8   0x7030             STRB     R0,[R6, #+0]
   \   000002AA   0xF8BA 0x0000      LDRH     R0,[R10, #+0]
   \   000002AE   0x1C40             ADDS     R0,R0,#+1
   \   000002B0   0xE020             B.N      ??main_10
   \                     ??main_11: (+1)
   \   000002B2   0x8839             LDRH     R1,[R7, #+0]
   \   000002B4   0x290A             CMP      R1,#+10
   \   000002B6   0xD11B             BNE.N    ??main_12
   \   000002B8   0x28C8             CMP      R0,#+200
   \   000002BA   0xDA19             BGE.N    ??main_12
   \   000002BC   0xF05F 0x0000      MOVS.W   R0,#+0
   \                     ??main_13: (+1)
   \   000002C0   0xF9B9 0x2000      LDRSH    R2,[R9, #+0]
   \   000002C4   0x1C41             ADDS     R1,R0,#+1
   \   000002C6   0x4102             ASRS     R2,R2,R0
   \   000002C8   0x07D2             LSLS     R2,R2,#+31
   \   000002CA   0xD505             BPL.N    ??main_14
   \   000002CC   0x7832             LDRB     R2,[R6, #+0]
   \   000002CE   0x4291             CMP      R1,R2
   \   000002D0   0xBFB4             ITE      LT 
   \   000002D2   0x7830             LDRBLT   R0,[R6, #+0]
   \   000002D4   0x1C40             ADDGE    R0,R0,#+1
   \   000002D6   0x7030             STRB     R0,[R6, #+0]
   \                     ??main_14: (+1)
   \   000002D8   0x4608             MOV      R0,R1
   \   000002DA   0x2810             CMP      R0,#+16
   \   000002DC   0xDBF0             BLT.N    ??main_13
   \   000002DE   0x7830             LDRB     R0,[R6, #+0]
   \   000002E0   0x2810             CMP      R0,#+16
   \   000002E2   0xBF08             IT       EQ 
   \   000002E4   0x.... 0x....      BLEQ     HAL_NVIC_SystemReset
   \                     ??main_9: (+1)
   \   000002E8   0xF8BA 0x0000      LDRH     R0,[R10, #+0]
   \   000002EC   0x1C40             ADDS     R0,R0,#+1
   \   000002EE   0xE001             B.N      ??main_10
   \                     ??main_12: (+1)
   \   000002F0   0x2000             MOVS     R0,#+0
   \   000002F2   0x7560             STRB     R0,[R4, #+21]
   \                     ??main_10: (+1)
   \   000002F4   0xF8AA 0x0000      STRH     R0,[R10, #+0]
   \                     ??main_7: (+1)
   \   000002F8   0x7D20             LDRB     R0,[R4, #+20]
   \   000002FA   0x2800             CMP      R0,#+0
   \   000002FC   0xD1A0             BNE.N    ??main_6
   \   000002FE   0x.... 0x....      BL       PDM2PCMSDO78
   \   00000302   0x2001             MOVS     R0,#+1
   \   00000304   0x7520             STRB     R0,[R4, #+20]
   \   00000306   0x7DE0             LDRB     R0,[R4, #+23]
   \   00000308   0x2800             CMP      R0,#+0
   \   0000030A   0xD093             BEQ.N    ??main_3
   \   0000030C   0x2802             CMP      R0,#+2
   \   0000030E   0xD001             BEQ.N    ??main_15
   \   00000310   0xD302             BCC.N    ??main_16
   \   00000312   0xE793             B.N      ??main_5
   \                     ??main_15: (+1)
   \   00000314   0x4628             MOV      R0,R5
   \   00000316   0xE78F             B.N      ??main_4
   \                     ??main_16: (+1)
   \   00000318   0x.... 0x....      LDR.W    R0,??DataTable12_19
   \   0000031C   0xE78C             B.N      ??main_4
    744            }
    745          }
    746          
    747          /**
    748            * @brief  Toggle Leds.
    749            * @param  None
    750            * @retval None
    751            */

   \                                 In section .text, align 2, keep-with-next
    752          void Toggle_Leds(void)
    753          {
    754            static uint32_t ticks = 0;
    755          
    756            if (ticks++ > 200)
   \                     Toggle_Leds: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable12_20
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x1C4A             ADDS     R2,R1,#+1
   \   00000008   0x29C9             CMP      R1,#+201
   \   0000000A   0xBF28             IT       CS 
   \   0000000C   0x2200             MOVCS    R2,#+0
    757            {
    758              //BSP_LED_Toggle(LED1);
    759              ticks = 0;
   \   0000000E   0x6002             STR      R2,[R0, #+0]
    760            }
    761          }
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     ??ticks:
   \   00000000                      DS8 4
    762          
    763          
    764          /**
    765            * @brief  System Clock Configuration
    766            *         The system Clock is configured as follow : 
    767            *            System Clock source            = PLL (HSE)
    768            *            SYSCLK(Hz)                     = 216000000
    769            *            HCLK(Hz)                       = 216000000
    770            *            AHB Prescaler                  = 1
    771            *            APB1 Prescaler                 = 4
    772            *            APB2 Prescaler                 = 2
    773            *            HSE Frequency(Hz)              = 25000000
    774            *            PLL_M                          = 25
    775            *            PLL_N                          = 432
    776            *            PLL_P                          = 2
    777            *            PLL_Q                          = 9
    778            *            VDD(V)                         = 3.3
    779            *            Main regulator output voltage  = Scale1 mode
    780            *            Flash Latency(WS)              = 7
    781            * @param  None
    782            * @retval None
    783            */

   \                                 In section .text, align 2, keep-with-next
    784          static void SystemClock_Config(void)
    785          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0B2             SUB      SP,SP,#+200
    786            RCC_ClkInitTypeDef RCC_ClkInitStruct;
    787            RCC_OscInitTypeDef RCC_OscInitStruct;
    788            RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    789            HAL_StatusTypeDef ret = HAL_OK;
    790          
    791            /* Enable HSE Oscillator and activate PLL with HSE as source */
    792            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x9026             STR      R0,[SP, #+152]
    793            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   00000008   0xF44F 0x3080      MOV      R0,#+65536
   \   0000000C   0x9027             STR      R0,[SP, #+156]
    794            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x902C             STR      R0,[SP, #+176]
    795            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    796            RCC_OscInitStruct.PLL.PLLM = 25;
   \   00000012   0x2019             MOVS     R0,#+25
   \   00000014   0x902E             STR      R0,[SP, #+184]
    797            RCC_OscInitStruct.PLL.PLLN = 432;  // 432
   \   00000016   0xF44F 0x70D8      MOV      R0,#+432
   \   0000001A   0x902F             STR      R0,[SP, #+188]
    798            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x9030             STR      R0,[SP, #+192]
    799            RCC_OscInitStruct.PLL.PLLQ = 9;
   \   00000020   0x2009             MOVS     R0,#+9
   \   00000022   0xF44F 0x0480      MOV      R4,#+4194304
   \   00000026   0x9031             STR      R0,[SP, #+196]
   \   00000028   0x942D             STR      R4,[SP, #+180]
    800          
    801            ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
   \   0000002A   0xA826             ADD      R0,SP,#+152
   \   0000002C   0x.... 0x....      BL       HAL_RCC_OscConfig
    802            if(ret != HAL_OK)
    803            {
    804              //while(1) { ; }
    805            }
    806          
    807            /* Activate the OverDrive to reach the 216 MHz Frequency */
    808            ret = HAL_PWREx_EnableOverDrive();
   \   00000030   0x.... 0x....      BL       HAL_PWREx_EnableOverDrive
    809            if(ret != HAL_OK)
    810            {
    811              //while(1) { ; }
    812            }
    813          
    814            /* Select PLLSAI output as USB clock source */
    815            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48 ;
   \   00000034   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000038   0x9005             STR      R0,[SP, #+20]
    816            PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
   \   0000003A   0xF04F 0x6000      MOV      R0,#+134217728
   \   0000003E   0x9024             STR      R0,[SP, #+144]
    817          
    818            
    819            PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
   \   00000040   0x20C0             MOVS     R0,#+192
   \   00000042   0x900A             STR      R0,[SP, #+40]
    820            PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0x900B             STR      R0,[SP, #+44]
    821            PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x900D             STR      R0,[SP, #+52]
    822            PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0x900C             STR      R0,[SP, #+48]
    823          
    824          
    825            ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
   \   00000050   0xA805             ADD      R0,SP,#+20
   \   00000052   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    826            
    827            if(ret != HAL_OK)
    828            {
    829              //while(1) { ; }
    830            }
    831            
    832            /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
    833            RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
   \   00000056   0x200F             MOVS     R0,#+15
    834            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    835            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
    836            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
    837            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
    838          
    839            ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
   \   00000058   0x2107             MOVS     R1,#+7
   \   0000005A   0x9000             STR      R0,[SP, #+0]
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x9001             STR      R0,[SP, #+4]
   \   00000060   0x2080             MOVS     R0,#+128
   \   00000062   0x9002             STR      R0,[SP, #+8]
   \   00000064   0xF44F 0x50A0      MOV      R0,#+5120
   \   00000068   0x9003             STR      R0,[SP, #+12]
   \   0000006A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000006E   0x9004             STR      R0,[SP, #+16]
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x.... 0x....      BL       HAL_RCC_ClockConfig
    840            if(ret != HAL_OK)
    841            {
    842              //while(1) { ; }
    843            }
    844            
    845           //sop1hc 344/7 = 49.142 MHz
    846            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable12_21  ;; 0x100001
    847            PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   0000007A   0x9415             STR      R4,[SP, #+84]
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    848            PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x9012             STR      R0,[SP, #+72]
    849            PeriphClkInitStruct.PLLI2S.PLLI2SP = 8;
   \   00000082   0x2008             MOVS     R0,#+8
   \   00000084   0x9009             STR      R0,[SP, #+36]
    850            PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   00000086   0xF44F 0x70AC      MOV      R0,#+344
   \   0000008A   0x9006             STR      R0,[SP, #+24]
    851            PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
   \   0000008C   0x2007             MOVS     R0,#+7
   \   0000008E   0x9008             STR      R0,[SP, #+32]
    852            PeriphClkInitStruct.PLLI2S.PLLI2SR = 7;
   \   00000090   0x9007             STR      R0,[SP, #+28]
    853            PeriphClkInitStruct.PLLI2SDivQ = 1;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x900E             STR      R0,[SP, #+56]
    854            HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);	
   \   00000096   0xA805             ADD      R0,SP,#+20
   \   00000098   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    855          }
   \   0000009C   0xB032             ADD      SP,SP,#+200
   \   0000009E   0xBD10             POP      {R4,PC}          ;; return
    856          
    857          /**
    858            * @brief  Clock Config.
    859            * @param  hsai: might be required to set audio peripheral predivider if any.
    860            * @param  AudioFreq: Audio frequency used to play the audio stream.
    861            * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
    862            *         Being __weak it can be overwritten by the application     
    863            * @retval None
    864            */

   \                                 In section .text, align 2, keep-with-next
    865          void BSP_AUDIO_OUT_ClockConfig(uint32_t AudioFreq, void *Params)
    866          {
   \                     BSP_AUDIO_OUT_ClockConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0A2             SUB      SP,SP,#+136
   \   00000004   0x4604             MOV      R4,R0
    867            RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;
    868          
    869            HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      BL       HAL_RCCEx_GetPeriphCLKConfig
    870            
    871            /* Set the PLL configuration according to the audio frequency */
    872            if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
   \   0000000C   0xF642 0x3011      MOVW     R0,#+11025
   \   00000010   0x4284             CMP      R4,R0
   \   00000012   0xBF1F             ITTTT    NE 
   \   00000014   0xF245 0x6022      MOVWNE   R0,#+22050
   \   00000018   0x4284             CMPNE    R4,R0
   \   0000001A   0xF64A 0x4044      MOVWNE   R0,#+44100
   \   0000001E   0x4284             CMPNE    R4,R0
   \   00000020   0xD10E             BNE.N    ??BSP_AUDIO_OUT_ClockConfig_0
    873            {
    874              /* Configure PLLSAI prescalers */
    875              /* PLLI2S_VCO: VCO_429M
    876              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    877              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    878              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \   00000022   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000026   0x9000             STR      R0,[SP, #+0]
    879              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000028   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000002C   0x9010             STR      R0,[SP, #+64]
    880              RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
   \   0000002E   0x2008             MOVS     R0,#+8
   \   00000030   0x9004             STR      R0,[SP, #+16]
    881              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
   \   00000032   0xF240 0x10AD      MOVW     R0,#+429
   \   00000036   0x9001             STR      R0,[SP, #+4]
    882              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x9003             STR      R0,[SP, #+12]
    883              RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
   \   0000003C   0x2013             MOVS     R0,#+19
   \   0000003E   0xE00B             B.N      ??BSP_AUDIO_OUT_ClockConfig_1
    884              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
    885            }
    886            else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_48K), AUDIO_FREQUENCY_96K */
    887            {
    888              /* SAI clock config
    889              PLLI2S_VCO: VCO_344M
    890              SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
    891              SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 49.142/1 = 49.142 Mhz */
    892              RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
   \                     ??BSP_AUDIO_OUT_ClockConfig_0: (+1)
   \   00000040   0xF44F 0x1080      MOV      R0,#+1048576
   \   00000044   0x9000             STR      R0,[SP, #+0]
    893              RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
   \   00000046   0xF44F 0x0080      MOV      R0,#+4194304
   \   0000004A   0x9010             STR      R0,[SP, #+64]
    894          	//RCC_ExCLKInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
    895          //    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    896              RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;//244
   \   0000004C   0xF44F 0x70AC      MOV      R0,#+344
   \   00000050   0x9001             STR      R0,[SP, #+4]
    897              RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
   \   00000052   0x2007             MOVS     R0,#+7
   \   00000054   0x9003             STR      R0,[SP, #+12]
    898          	//RCC_ExCLKInitStruct.PLLI2S.PLLI2SR = 1;
    899              RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \                     ??BSP_AUDIO_OUT_ClockConfig_1: (+1)
   \   00000058   0x9009             STR      R0,[SP, #+36]
    900              HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
    901            }
    902            
    903          }
   \   00000060   0xB022             ADD      SP,SP,#+136
   \   00000062   0xBD10             POP      {R4,PC}          ;; return
    904          
    905          
    906          
    907          #ifdef  USE_FULL_ASSERT
    908          /**
    909            * @brief  Reports the name of the source file and the source line number
    910            *         where the assert_param error has occurred.
    911            * @param  file: pointer to the source file name
    912            * @param  line: assert_param error line source number
    913            * @retval None
    914            */
    915          void assert_failed(uint8_t* file, uint32_t line)
    916          { 
    917            /* User can add his own implementation to report the file name and line number,
    918               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    919          
    920            /* Infinite loop */
    921            while (1)
    922            {
    923            }
    924          }
    925          #endif
    926          
    927          /**
    928            * @brief  CPU L1-Cache enable.
    929            * @param  None
    930            * @retval None
    931            */
    932          static void CPU_CACHE_Enable(void)
    933          {
    934            /* Enable I-Cache */
    935            SCB_EnableICache();
    936          
    937            /* Enable D-Cache */
    938            SCB_EnableDCache();
    939          }
    940          
    941          

   \                                 In section .text, align 2, keep-with-next
    942          void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
    943          {
   \                     HAL_I2C_MspInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    944          
    945            GPIO_InitTypeDef GPIO_InitStruct;
    946              
    947            if(hi2c->Instance==I2C1)
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable12_22  ;; 0x40005400
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD12E             BNE.N    ??HAL_I2C_MspInit_0
    948            {
    949          	/* USER CODE BEGIN I2C1_MspInit 0 */
    950          
    951          	/*##-1- Configure the I2C clock source. The clock is derived from the SYSCLK #*/
    952          	//RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
    953          	//RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    954          	//HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
    955          
    956          	/*##-2- Enable peripherals and GPIO Clocks #################################*/
    957          	/* Enable GPIO TX/RX clock */
    958          	__HAL_RCC_GPIOB_CLK_ENABLE();
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR.N    R4,??DataTable12_1  ;; 0x40023830
   \   00000012   0x9000             STR      R0,[SP, #+0]
    959          
    960          	/**I2C1 GPIO Configuration	
    961          	PB6	  ------> I2C1_SCL (PB6)
    962          	PB7	  ------> I2C1_SDA (PB7) 
    963          	*/
    964          	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    965          	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    966          	GPIO_InitStruct.Pull = GPIO_PULLUP;
    967          	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    968          	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    969          	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \   00000014   0xA901             ADD      R1,SP,#+4
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000001C   0x6020             STR      R0,[R4, #+0]
   \   0000001E   0x6820             LDR      R0,[R4, #+0]
   \   00000020   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x20C0             MOVS     R0,#+192
   \   0000002A   0x9001             STR      R0,[SP, #+4]
   \   0000002C   0x2012             MOVS     R0,#+18
   \   0000002E   0x9002             STR      R0,[SP, #+8]
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x9003             STR      R0,[SP, #+12]
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0x9004             STR      R0,[SP, #+16]
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0x9005             STR      R0,[SP, #+20]
   \   0000003C   0x....             LDR.N    R0,??DataTable12_5  ;; 0x40020400
   \   0000003E   0x.... 0x....      BL       HAL_GPIO_Init
    970          
    971          	/* Peripheral clock enable */
    972          	__HAL_RCC_I2C1_CLK_ENABLE();
   \   00000042   0x2000             MOVS     R0,#+0
    973          	/* Peripheral interrupt init*/
    974          	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x9000             STR      R0,[SP, #+0]
   \   00000048   0x6920             LDR      R0,[R4, #+16]
   \   0000004A   0x2103             MOVS     R1,#+3
   \   0000004C   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   00000050   0x6120             STR      R0,[R4, #+16]
   \   00000052   0x6920             LDR      R0,[R4, #+16]
   \   00000054   0xF400 0x1000      AND      R0,R0,#0x200000
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0x9800             LDR      R0,[SP, #+0]
   \   0000005C   0x201F             MOVS     R0,#+31
   \   0000005E   0x.... 0x....      BL       HAL_NVIC_SetPriority
    975          	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \   00000062   0x201F             MOVS     R0,#+31
   \   00000064   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    976          
    977            }
    978            else if(hi2c->Instance==I2C2)
    979            {
    980            /* USER CODE BEGIN I2C2_MspInit 0 */
    981          
    982            /* USER CODE END I2C2_MspInit 0 */
    983            
    984              /**I2C2 GPIO Configuration    
    985              PB10     ------> I2C2_SCL
    986              PB11     ------> I2C2_SDA 
    987              */
    988              __HAL_RCC_GPIOB_CLK_ENABLE();
    989              
    990              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    991              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    992              GPIO_InitStruct.Pull = GPIO_NOPULL;
    993              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    994              GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    995              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    996          
    997              /* Peripheral clock enable */
    998              __HAL_RCC_I2C2_CLK_ENABLE();
    999              /* Peripheral interrupt init*/
   1000              //HAL_NVIC_SetPriority(I2C2_EV_IRQn, 3, 1);
   1001              //HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
   1002            }
   1003          
   1004          }
   \   00000068   0xB006             ADD      SP,SP,#+24
   \   0000006A   0xBD10             POP      {R4,PC}
   \                     ??HAL_I2C_MspInit_0: (+1)
   \   0000006C   0x....             LDR.N    R1,??DataTable12_23  ;; 0x40005800
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xD125             BNE.N    ??HAL_I2C_MspInit_1
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x....             LDR.N    R4,??DataTable12_1  ;; 0x40023830
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0xA901             ADD      R1,SP,#+4
   \   0000007A   0x6820             LDR      R0,[R4, #+0]
   \   0000007C   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000080   0x6020             STR      R0,[R4, #+0]
   \   00000082   0x6820             LDR      R0,[R4, #+0]
   \   00000084   0xF000 0x0002      AND      R0,R0,#0x2
   \   00000088   0x9000             STR      R0,[SP, #+0]
   \   0000008A   0x9800             LDR      R0,[SP, #+0]
   \   0000008C   0xF44F 0x6040      MOV      R0,#+3072
   \   00000090   0x9001             STR      R0,[SP, #+4]
   \   00000092   0x2012             MOVS     R0,#+18
   \   00000094   0x9002             STR      R0,[SP, #+8]
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x9003             STR      R0,[SP, #+12]
   \   0000009A   0x2003             MOVS     R0,#+3
   \   0000009C   0x9004             STR      R0,[SP, #+16]
   \   0000009E   0x2004             MOVS     R0,#+4
   \   000000A0   0x9005             STR      R0,[SP, #+20]
   \   000000A2   0x....             LDR.N    R0,??DataTable12_5  ;; 0x40020400
   \   000000A4   0x.... 0x....      BL       HAL_GPIO_Init
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x9000             STR      R0,[SP, #+0]
   \   000000AC   0x6920             LDR      R0,[R4, #+16]
   \   000000AE   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000000B2   0x6120             STR      R0,[R4, #+16]
   \   000000B4   0x6920             LDR      R0,[R4, #+16]
   \   000000B6   0xF400 0x0080      AND      R0,R0,#0x400000
   \   000000BA   0x9000             STR      R0,[SP, #+0]
   \   000000BC   0x9800             LDR      R0,[SP, #+0]
   \                     ??HAL_I2C_MspInit_1: (+1)
   \   000000BE   0xB006             ADD      SP,SP,#+24
   \   000000C0   0xBD10             POP      {R4,PC}          ;; return
   1005          
   1006          /*---------------------------------------------------*/
   1007          /*   UART                                            */
   1008          /* UART4 init function */

   \                                 In section .text, align 2, keep-with-next
   1009          void USART3_Init(void)
   1010          {
   1011          
   1012            huart3.Instance = USART3;
   \                     USART3_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12_24
   \   00000002   0x....             LDR.N    R1,??DataTable12_25  ;; 0x40004800
   \   00000004   0x6001             STR      R1,[R0, #+0]
   1013            huart3.Init.BaudRate = 115200;
   \   00000006   0xF44F 0x31E1      MOV      R1,#+115200
   \   0000000A   0x6041             STR      R1,[R0, #+4]
   1014            huart3.Init.WordLength = UART_WORDLENGTH_8B;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6081             STR      R1,[R0, #+8]
   1015            huart3.Init.StopBits = UART_STOPBITS_1;
   \   00000010   0x60C1             STR      R1,[R0, #+12]
   1016            huart3.Init.Parity = UART_PARITY_NONE;
   \   00000012   0x6101             STR      R1,[R0, #+16]
   1017            huart3.Init.Mode = UART_MODE_TX_RX;
   \   00000014   0x210C             MOVS     R1,#+12
   \   00000016   0x6141             STR      R1,[R0, #+20]
   1018            huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6181             STR      R1,[R0, #+24]
   1019            huart3.Init.OverSampling = UART_OVERSAMPLING_16;
   \   0000001C   0x61C1             STR      R1,[R0, #+28]
   1020            huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED ;
   \   0000001E   0x6201             STR      R1,[R0, #+32]
   1021            huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
   \   00000020   0x6241             STR      R1,[R0, #+36]
   1022            HAL_UART_Init(&huart3);
   \   00000022   0x.... 0x....      B.W      HAL_UART_Init
   1023          
   1024            //HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
   1025            //HAL_NVIC_EnableIRQ(USART3_IRQn);
   1026          
   1027          }
   1028          
   1029          

   \                                 In section .text, align 2, keep-with-next
   1030          void HAL_UART_MspInit(UART_HandleTypeDef *huart)
   1031          {
   1032          
   1033            GPIO_InitTypeDef GPIO_InitStruct;
   1034            if(huart->Instance==USART3)
   \                     HAL_UART_MspInit: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x....             LDR.N    R1,??DataTable12_25  ;; 0x40004800
   \   00000004   0x4288             CMP      R0,R1
   \   00000006   0xD000             BEQ.N    ??HAL_UART_MspInit_0
   \   00000008   0x4770             BX       LR
   1035            {
   1036          
   1037          
   1038            /* USER CODE END UART4_MspInit 0 */
   1039              /* Peripheral clock enable */
   1040              __USART3_CLK_ENABLE();
   \                     ??HAL_UART_MspInit_0: (+1)
   \   0000000A   0xB500             PUSH     {LR}
   \   0000000C   0xB087             SUB      SP,SP,#+28
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x....             LDR.N    R0,??DataTable12_1  ;; 0x40023830
   \   00000014   0x6901             LDR      R1,[R0, #+16]
   \   00000016   0xF441 0x2180      ORR      R1,R1,#0x40000
   \   0000001A   0x6101             STR      R1,[R0, #+16]
   \   0000001C   0x6901             LDR      R1,[R0, #+16]
   \   0000001E   0xF401 0x2180      AND      R1,R1,#0x40000
   \   00000022   0x9100             STR      R1,[SP, #+0]
   \   00000024   0x9900             LDR      R1,[SP, #+0]
   1041              __GPIOC_CLK_ENABLE();
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x9100             STR      R1,[SP, #+0]
   \   0000002A   0x6801             LDR      R1,[R0, #+0]
   \   0000002C   0xF041 0x0104      ORR      R1,R1,#0x4
   \   00000030   0x6001             STR      R1,[R0, #+0]
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   1042            
   1043              /**UART4 GPIO Configuration    
   1044              PC10     ------> USART3_TX
   1045              PC11     ------> USART3_RX
   1046              */
   1047              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
   1048              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   1049              GPIO_InitStruct.Pull = GPIO_PULLUP;
   1050              GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
   1051              GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
   1052              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000034   0xA901             ADD      R1,SP,#+4
   \   00000036   0xF000 0x0004      AND      R0,R0,#0x4
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x9800             LDR      R0,[SP, #+0]
   \   0000003E   0xF44F 0x6040      MOV      R0,#+3072
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0x9002             STR      R0,[SP, #+8]
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x9003             STR      R0,[SP, #+12]
   \   0000004C   0x2003             MOVS     R0,#+3
   \   0000004E   0x9004             STR      R0,[SP, #+16]
   \   00000050   0x2007             MOVS     R0,#+7
   \   00000052   0x9005             STR      R0,[SP, #+20]
   \   00000054   0x....             LDR.N    R0,??DataTable12_26  ;; 0x40020800
   \   00000056   0x.... 0x....      BL       HAL_GPIO_Init
   1053          
   1054              /* NVIC for USART */
   1055              HAL_NVIC_SetPriority(USART3_IRQn, 7, 1);
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0x2107             MOVS     R1,#+7
   \   0000005E   0x2027             MOVS     R0,#+39
   \   00000060   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1056              HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   00000064   0x2027             MOVS     R0,#+39
   \   00000066   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1057          
   1058            }
   1059          
   1060          }
   \   0000006A   0xB007             ADD      SP,SP,#+28
   \   0000006C   0xBD00             POP      {PC}             ;; return
   1061          
   1062          
   1063          

   \                                 In section .text, align 2, keep-with-next
   1064          void EXTI4_IRQHandler(void)
   1065          {
   \                     EXTI4_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1066              /* EXTI line interrupt detected */
   1067            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable12_27  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x06C0             LSLS     R0,R0,#+27
   \   00000008   0xD514             BPL.N    ??EXTI4_IRQHandler_0
   1068            {
   1069              
   1070               if (cntRisingEXTI==32000)
   \   0000000A   0x....             LDR.N    R0,??DataTable12_28
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0xF5B1 0x4FFA      CMP      R1,#+32000
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xD105             BNE.N    ??EXTI4_IRQHandler_1
   1071               {
   1072              	/*--------------Enable read PCM data --------------------*/   
   1073                  //flgDlyUpd = 1;  
   1074                  //__HAL_SPI_ENABLE_IT(&hspi5, (SPI_IT_RXNE| SPI_IT_ERR));
   1075          		//__HAL_UNLOCK(&hspi5);
   1076                  //__HAL_SPI_ENABLE(&hspi5);
   1077                  cntRisingEXTI++;
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0x6001             STR      R1,[R0, #+0]
   1078          
   1079                  /*Disable external interrupt */
   1080                  HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI4_IRQn));
   \   0000001A   0x200A             MOVS     R0,#+10
   \   0000001C   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \   00000020   0xE006             B.N      ??EXTI4_IRQHandler_2
   1081                  //HAL_GPIO_DeInit(GPIOB,GPIO_PIN_4);
   1082               }
   1083               else
   1084               {
   1085                  if (cntRisingEXTI < 32000 +2)
   \                     ??EXTI4_IRQHandler_1: (+1)
   \   00000022   0xF647 0x5202      MOVW     R2,#+32002
   \   00000026   0x4291             CMP      R1,R2
   \   00000028   0xD202             BCS.N    ??EXTI4_IRQHandler_2
   1086                      cntRisingEXTI++;
   \   0000002A   0x6801             LDR      R1,[R0, #+0]
   \   0000002C   0x1C49             ADDS     R1,R1,#+1
   \   0000002E   0x6001             STR      R1,[R0, #+0]
   1087                  //__HAL_SPI_DISABLE(&hspi5);
   1088               }
   1089               
   1090                __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
   \                     ??EXTI4_IRQHandler_2: (+1)
   \   00000030   0x2010             MOVS     R0,#+16
   \   00000032   0x6020             STR      R0,[R4, #+0]
   1091          
   1092            }
   1093          }
   \                     ??EXTI4_IRQHandler_0: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
   1094                        

   \                                 In section .text, align 2, keep-with-next
   1095          void EXTI15_10_IRQHandler(void)
   1096          {
   1097          
   1098          }
   \                     EXTI15_10_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1099          
   1100          /* Events for Button Press */

   \                                 In section .text, align 2, keep-with-next
   1101          void EXTI9_5_IRQHandler(void)
   1102          {
   \                     EXTI9_5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1103          
   1104            /* EXTI line interrupt detected */
   1105            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
   \   00000002   0x....             LDR.N    R4,??DataTable12_27  ;; 0x40013c14
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0xD510             BPL.N    ??EXTI9_5_IRQHandler_0
   1106            {
   1107          	  btnSW2 = 1;
   \   0000000A   0x....             LDR.N    R0,??DataTable12_29
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x7041             STRB     R1,[R0, #+1]
   1108          	  if ((++cntBtnPress)==8) cntBtnPress=0;
   \   00000010   0x7881             LDRB     R1,[R0, #+2]
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0x7081             STRB     R1,[R0, #+2]
   \   00000016   0xB2C9             UXTB     R1,R1
   \   00000018   0x2908             CMP      R1,#+8
   \   0000001A   0xBF04             ITT      EQ 
   \   0000001C   0x2100             MOVEQ    R1,#+0
   \   0000001E   0x7081             STRBEQ   R1,[R0, #+2]
   1109          	  BSP_LED_Toggle(LED2);
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       BSP_LED_Toggle
   1110          	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
   \   00000026   0xF44F 0x7080      MOV      R0,#+256
   \   0000002A   0x6020             STR      R0,[R4, #+0]
   1111          
   1112            }
   1113          
   1114          
   1115            /* EXTI line interrupt detected */
   1116            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET)
   \                     ??EXTI9_5_IRQHandler_0: (+1)
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x0580             LSLS     R0,R0,#+22
   \   00000030   0xD50C             BPL.N    ??EXTI9_5_IRQHandler_1
   1117            {
   1118          		btnSW1 = 1;
   \   00000032   0x....             LDR.N    R0,??DataTable12_29
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x7001             STRB     R1,[R0, #+0]
   1119          		Command_index^=0x01;
   \   00000038   0x78C1             LDRB     R1,[R0, #+3]
   \   0000003A   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000003E   0x70C1             STRB     R1,[R0, #+3]
   1120          		BSP_LED_Toggle(LED1);
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       BSP_LED_Toggle
   1121          
   1122          	   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
   \   00000046   0xF44F 0x7000      MOV      R0,#+512
   \   0000004A   0x6020             STR      R0,[R4, #+0]
   1123            }
   1124          
   1125          }
   \                     ??EXTI9_5_IRQHandler_1: (+1)
   \   0000004C   0xBD10             POP      {R4,PC}          ;; return
   1126          
   1127          
   1128          
   1129          

   \                                 In section .text, align 4, keep-with-next
   1130          void SumDelay(Mic_Array_Data *BufferIn)
   1131          {
   1132              //if (idxLatency12>idxLatency13)
   1133              // {
   1134              //     if (idxLatency13 > idxLatency14)
   1135              //     {
   1136              //         /* MIC2 --> MIC3 --> MIC4 */
   1137              //     }
   1138              //             else if (idxLatency14 > idxLatency12)
   1139              //             {
   1140              //        /* MIC4-->MIC2-->MIC3  */
   1141              //            }
   1142              //             else
   1143              //             {
   1144              //       /* MIC2-->MIC4-->MIC3  */
   1145              //             }
   1146              // }
   1147              //else // idxLatency13>idxLatency12
   1148              //     {
   1149              //    if (idxLatency12 > idxLatency14)
   1150              //    {
   1151              //        //MIC3 --> MIC2 --> MIC4 
   1152              //    }
   1153              //        else if (idxLatency14 > idxLatency13)
   1154              //        {
   1155              //        //MIC4 --> MIC3 --> MIC2
   1156              //        }
   1157              //        else
   1158              //        {
   1159              //        //MIC3 --> MIC4 --> MIC2
   1160              //	   }
   1161              //}
   1162          	
   1163              for(uint16_t i=0;i<AUDIO_OUT_BUFFER_SIZE;i++)
   \                     SumDelay: (+1)
   \   00000000   0x....             LDR.N    R3,??DataTable12_30
   \   00000002   0x....             LDR.N    R1,??DataTable12_9
   \   00000004   0xF44F 0x6280      MOV      R2,#+1024
   \   00000008   0xED93 0x0A03      VLDR     S0,[R3, #+12]
   \   0000000C   0xEDD3 0x0A02      VLDR     S1,[R3, #+8]
   \   00000010   0xED93 0x1A01      VLDR     S2,[R3, #+4]
   \   00000014   0xEDD3 0x1A00      VLDR     S3,[R3, #0]
   1164              {
   1165                bufferSum[6*i] = (uint16_t)(BufferIn->bufMIC1[i]*FacMic.facMIC1 + 
   1166                BufferIn->bufMIC2[i]*FacMic.facMIC2 + 
   1167                BufferIn->bufMIC3[i]*FacMic.facMIC3 + 
   1168                BufferIn->bufMIC4[i]*FacMic.facMIC4); 		
   \                     ??SumDelay_0: (+1)
   \   00000018   0xF9B0 0xC000      LDRSH    R12,[R0, #+0]
   \   0000001C   0xF500 0x5380      ADD      R3,R0,#+4096
   \   00000020   0xEE02 0xCA10      VMOV     S4,R12
   \   00000024   0xF9B0 0xC800      LDRSH    R12,[R0, #+2048]
   \   00000028   0xEEB8 0x2AC2      VCVT.F32.S32 S4,S4
   1169                bufferSum[6*i+1] = bufferSum[6*i];
   1170          	  bufferSum[6*i+2] = bufferSum[6*i];
   1171          	  bufferSum[6*i+3] = bufferSum[6*i];
   1172          	  bufferSum[6*i+4] = bufferSum[6*i];
   1173          	  bufferSum[6*i+5] = bufferSum[6*i];
   1174              }
   \   0000002C   0x1C80             ADDS     R0,R0,#+2
   \   0000002E   0xEE22 0x2A21      VMUL.F32 S4,S4,S3
   \   00000032   0xEE02 0xCA90      VMOV     S5,R12
   \   00000036   0xF9B3 0xC000      LDRSH    R12,[R3, #+0]
   \   0000003A   0xEEF8 0x2AE2      VCVT.F32.S32 S5,S5
   \   0000003E   0xF9B3 0x3800      LDRSH    R3,[R3, #+2048]
   \   00000042   0xEE02 0x2A81      VMLA.F32 S4,S5,S2
   \   00000046   0xEE02 0xCA90      VMOV     S5,R12
   \   0000004A   0xEEF8 0x2AE2      VCVT.F32.S32 S5,S5
   \   0000004E   0xEE02 0x2AA0      VMLA.F32 S4,S5,S1
   \   00000052   0xEE02 0x3A90      VMOV     S5,R3
   \   00000056   0xEEF8 0x2AE2      VCVT.F32.S32 S5,S5
   \   0000005A   0xEE02 0x2A80      VMLA.F32 S4,S5,S0
   \   0000005E   0xEEBD 0x2AC2      VCVT.S32.F32 S4,S4
   \   00000062   0xEE12 0x3A10      VMOV     R3,S4
   \   00000066   0x800B             STRH     R3,[R1, #+0]
   \   00000068   0x804B             STRH     R3,[R1, #+2]
   \   0000006A   0x808B             STRH     R3,[R1, #+4]
   \   0000006C   0x80CB             STRH     R3,[R1, #+6]
   \   0000006E   0x810B             STRH     R3,[R1, #+8]
   \   00000070   0x814B             STRH     R3,[R1, #+10]
   \   00000072   0x310C             ADDS     R1,R1,#+12
   \   00000074   0x1E52             SUBS     R2,R2,#+1
   \   00000076   0xD1CF             BNE.N    ??SumDelay_0
   1175            
   1176              
   1177          }
   \   00000078   0x4770             BX       LR               ;; return
   1178          
   1179          

   \                                 In section .text, align 2, keep-with-next
   1180          void ButtonInit(void)
   1181          {
   \                     ButtonInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   1182            /* PI8: SW2 */
   1183            /* PI9: SW1 */
   1184            /* ----------------------*/
   1185            __GPIOB_CLK_ENABLE();
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x....             LDR.N    R0,??DataTable12_1  ;; 0x40023830
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   1186            GPIO_INS.Pin = GPIO_PIN_8|GPIO_PIN_9;
   \   00000014   0x....             LDR.N    R1,??DataTable12_2
   \   00000016   0xF000 0x0002      AND      R0,R0,#0x2
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0xF44F 0x7040      MOV      R0,#+768
   \   00000022   0x6008             STR      R0,[R1, #+0]
   1187            GPIO_INS.Mode =GPIO_MODE_IT_RISING;
   \   00000024   0x....             LDR.N    R0,??DataTable12_31  ;; 0x10110000
   \   00000026   0x6048             STR      R0,[R1, #+4]
   1188            GPIO_INS.Pull =GPIO_NOPULL;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x6088             STR      R0,[R1, #+8]
   1189            GPIO_INS.Speed =GPIO_SPEED_HIGH;
   \   0000002C   0x2003             MOVS     R0,#+3
   \   0000002E   0x60C8             STR      R0,[R1, #+12]
   1190            HAL_GPIO_Init(GPIOI,&GPIO_INS);
   \   00000030   0x....             LDR.N    R0,??DataTable12_32  ;; 0x40022000
   \   00000032   0x.... 0x....      BL       HAL_GPIO_Init
   1191          
   1192            /* Enable and set Button EXTI Interrupt to the lowest priority */
   1193            HAL_NVIC_SetPriority((IRQn_Type)EXTI9_5_IRQn, 0x0F, 0x00);
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0x210F             MOVS     R1,#+15
   \   0000003A   0x2017             MOVS     R0,#+23
   \   0000003C   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1194            HAL_NVIC_EnableIRQ((IRQn_Type)EXTI9_5_IRQn);
   \   00000040   0xB001             ADD      SP,SP,#+4
   \   00000042   0x2017             MOVS     R0,#+23
   \   00000044   0xF85D 0xEB04      POP      {LR}
   \   00000048   0x.... 0x....      B.W      HAL_NVIC_EnableIRQ
   1195            /*-----------------------*/
   1196          }
   1197          
   1198          
   1199          /* I2C2 init function */

   \                                 In section .text, align 2, keep-with-next
   1200          void MX_I2C2_Init(void)
   1201          {
   1202            __HAL_I2C_DISABLE(&hi2c2);
   \                     MX_I2C2_Init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12_33
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x680A             LDR      R2,[R1, #+0]
   \   00000006   0x0852             LSRS     R2,R2,#+1
   \   00000008   0x0052             LSLS     R2,R2,#+1
   \   0000000A   0x600A             STR      R2,[R1, #+0]
   1203            hi2c2.Instance = I2C2;
   \   0000000C   0x....             LDR.N    R1,??DataTable12_23  ;; 0x40005800
   \   0000000E   0x6001             STR      R1,[R0, #+0]
   1204            hi2c2.Init.Timing =0x00A0689A ;//I2C_TIMING  0x00303D5D 0x00A0689A
   \   00000010   0x....             LDR.N    R1,??DataTable12_34  ;; 0xa0689a
   \   00000012   0x6041             STR      R1,[R0, #+4]
   1205            hi2c2.Init.OwnAddress1 = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6081             STR      R1,[R0, #+8]
   1206            hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x60C1             STR      R1,[R0, #+12]
   1207            hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6101             STR      R1,[R0, #+16]
   1208            hi2c2.Init.OwnAddress2 = 0;
   \   00000020   0x6141             STR      R1,[R0, #+20]
   1209            hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
   \   00000022   0x6181             STR      R1,[R0, #+24]
   1210            hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
   \   00000024   0x61C1             STR      R1,[R0, #+28]
   1211            hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
   \   00000026   0x6201             STR      R1,[R0, #+32]
   1212            HAL_I2C_Init(&hi2c2);
   \   00000028   0x.... 0x....      B.W      HAL_I2C_Init
   1213          
   1214            /**Configure Analogue filter 
   1215            */
   1216            //HAL_I2CEx_AnalogFilter_Config(&hi2c2, I2C_ANALOGFILTER_ENABLE);
   1217          
   1218          }
   1219          

   \                                 In section .text, align 2, keep-with-next
   1220           void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
   1221          {  
   1222            //Audio_Play_Out();  
   1223            #if (AUDIO_OUT_STREAM_NORMAL)
   1224                Audio_MAL_Play((uint32_t)&bufferSum[(6*AUDIO_SAMPLING_FREQUENCY/1000)], 6*AUDIO_CHANNELS*(AUDIO_SAMPLING_FREQUENCY/1000));
   1225            #else
   1226          
   1227            #endif  
   1228          
   1229            
   1230          }
   \                     HAL_I2S_TxCpltCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1231          

   \                                 In section .text, align 2, keep-with-next
   1232           uint8_t StartPlay(void)
   1233           {
   \                     StartPlay: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   1234          
   1235          
   1236              	   	 
   1237              //HAL_Delay(100);
   1238              	
   1239              //HAL_Delay(1);
   1240              //for (uint32_t i=0; i<2000;i++)
   1241              //{
   1242              //  __NOP;
   1243              //  __NOP;
   1244              //  __NOP;
   1245              //  __NOP;
   1246              //}
   1247              //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET);
   1248              //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
   1249              
   1250              I2S1_Enable();
   \   00000004   0x.... 0x....      BL       I2S1_Enable
   1251              I2S2_Enable();
   \   00000008   0x.... 0x....      BL       I2S2_Enable
   1252              SPI4_Enable();
   \   0000000C   0x.... 0x....      BL       SPI4_Enable
   1253              StartRecMic7_8();
   \   00000010   0x.... 0x....      BL       StartRecMic7_8
   1254              WaveRec_idxSens1 = 0;//SHIFT_CHNNL1;
   \   00000014   0x....             LDR.N    R0,??DataTable12_2
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x8401             STRH     R1,[R0, #+32]
   1255              WaveRec_idxSens2 = 0;//SHIFT_CHNNL2;
   1256              WaveRec_idxSens3 = 0;//SHIFT_CHNNL3;
   1257              WaveRec_idxSens4 = 0;//SHIFT_CHNNL4;
   1258              WaveRec_idxSens5 = 0;//SHIFT_CHNNL5;
   1259              WaveRec_idxSens6 = 0;//SHIFT_CHNNL6; 
   1260              idxFrmPDMMic8 = 0;
   \   0000001A   0x....             LDR.N    R2,??DataTable12_10
   \   0000001C   0x8441             STRH     R1,[R0, #+34]
   \   0000001E   0x8381             STRH     R1,[R0, #+28]
   \   00000020   0x8341             STRH     R1,[R0, #+26]
   \   00000022   0x8481             STRH     R1,[R0, #+36]
   \   00000024   0x84C1             STRH     R1,[R0, #+38]
   \   00000026   0x8011             STRH     R1,[R2, #+0]
   1261              buffer_switch = BUF1_PLAY;
   \   00000028   0x75C1             STRB     R1,[R0, #+23]
   1262          
   1263          	return 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xB001             ADD      SP,SP,#+4
   \   0000002E   0xBD00             POP      {PC}             ;; return
   1264          	 
   1265           }
   1266          

   \                                 In section .text, align 2, keep-with-next
   1267          void SubFrameFinished(void)
   1268          {
   \                     SubFrameFinished: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1269              Audio_Play_Out();
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable12_35
   \   00000006   0x....             LDR.N    R4,??DataTable12_10
   \   00000008   0x7008             STRB     R0,[R1, #+0]
   \   0000000A   0x8820             LDRH     R0,[R4, #+0]
   \   0000000C   0x.... 0x....      BL       AudioUSBSend
   \   00000010   0x8820             LDRH     R0,[R4, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x8020             STRH     R0,[R4, #+0]
   \   00000016   0x8820             LDRH     R0,[R4, #+0]
   \   00000018   0x2840             CMP      R0,#+64
   \   0000001A   0xD123             BNE.N    ??SubFrameFinished_0
   \   0000001C   0x....             LDR.N    R0,??DataTable12_2
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x8401             STRH     R1,[R0, #+32]
   \   00000022   0x....             LDR.N    R2,??DataTable12_36
   \   00000024   0x8441             STRH     R1,[R0, #+34]
   \   00000026   0x8501             STRH     R1,[R0, #+40]
   \   00000028   0x8381             STRH     R1,[R0, #+28]
   \   0000002A   0x8341             STRH     R1,[R0, #+26]
   \   0000002C   0x83C1             STRH     R1,[R0, #+30]
   \   0000002E   0x8481             STRH     R1,[R0, #+36]
   \   00000030   0x84C1             STRH     R1,[R0, #+38]
   \   00000032   0x7501             STRB     R1,[R0, #+20]
   \   00000034   0x8011             STRH     R1,[R2, #+0]
   \   00000036   0x8021             STRH     R1,[R4, #+0]
   \   00000038   0x7DC1             LDRB     R1,[R0, #+23]
   \   0000003A   0xB139             CBZ.N    R1,??SubFrameFinished_1
   \   0000003C   0x2902             CMP      R1,#+2
   \   0000003E   0xD001             BEQ.N    ??SubFrameFinished_2
   \   00000040   0xD302             BCC.N    ??SubFrameFinished_3
   \   00000042   0xE005             B.N      ??SubFrameFinished_4
   \                     ??SubFrameFinished_2: (+1)
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0xE002             B.N      ??SubFrameFinished_5
   \                     ??SubFrameFinished_3: (+1)
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xE000             B.N      ??SubFrameFinished_5
   \                     ??SubFrameFinished_1: (+1)
   \   0000004C   0x2102             MOVS     R1,#+2
   \                     ??SubFrameFinished_5: (+1)
   \   0000004E   0x75C1             STRB     R1,[R0, #+23]
   \                     ??SubFrameFinished_4: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable12_17
   \   00000052   0x8801             LDRH     R1,[R0, #+0]
   \   00000054   0x2914             CMP      R1,#+20
   \   00000056   0xDA05             BGE.N    ??SubFrameFinished_0
   \   00000058   0x8801             LDRH     R1,[R0, #+0]
   \   0000005A   0x1C49             ADDS     R1,R1,#+1
   \   0000005C   0x8001             STRH     R1,[R0, #+0]
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x....             LDR.N    R1,??DataTable12_16
   \   00000062   0x8008             STRH     R0,[R1, #+0]
   1270          }
   \                     ??SubFrameFinished_0: (+1)
   \   00000064   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0xE000ED14         DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     GPIO_INS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x........         DC32     AUDIO_Desc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x........         DC32     USBD_AUDIO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x........         DC32     USBD_AUDIO_fops

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x........         DC32     bufferSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x........         DC32     idxFrmPDMMic8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x........         DC32     Buffer2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x........         DC32     SPI4_stPosShft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x........         DC32     stMIC56Old

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x........         DC32     stMIC56

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x........         DC32     SPI4_stNipple

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x........         DC32     WaveRecord_flgIni

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x........         DC32     cntStrt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x........         DC32     Buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \   00000000   0x........         DC32     Buffer1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_20:
   \   00000000   0x........         DC32     ??ticks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_21:
   \   00000000   0x00100001         DC32     0x100001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_22:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_23:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_24:
   \   00000000   0x........         DC32     huart3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_25:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_26:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_27:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_28:
   \   00000000   0x........         DC32     cntRisingEXTI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_29:
   \   00000000   0x........         DC32     btnSW1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_30:
   \   00000000   0x........         DC32     FacMic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_31:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_32:
   \   00000000   0x40022000         DC32     0x40022000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_33:
   \   00000000   0x........         DC32     hi2c2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_34:
   \   00000000   0x00A0689A         DC32     0xa0689a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_35:
   \   00000000   0x........         DC32     flgRacing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_36:
   \   00000000   0x........         DC32     WaveRec_idxTest
   1271          /*****************************END OF FILE**************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     144   BSP_AUDIO_OUT_ClockConfig
       144   -> HAL_RCCEx_GetPeriphCLKConfig
       144   -> HAL_RCCEx_PeriphCLKConfig
       8   ButtonInit
         8   -> HAL_GPIO_Init
         0   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
       0   EXTI15_10_IRQHandler
       8   EXTI4_IRQHandler
         8   -> HAL_NVIC_DisableIRQ
       8   EXTI9_5_IRQHandler
         8   -> BSP_LED_Toggle
      32   HAL_I2C_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       0   HAL_I2S_TxCpltCallback
      32   HAL_UART_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
       0   MX_I2C2_Init
         0   -> HAL_I2C_Init
       8   StartPlay
         8   -> I2S1_Enable
         8   -> I2S2_Enable
         8   -> SPI4_Enable
         8   -> StartRecMic7_8
       8   SubFrameFinished
         8   -> AudioUSBSend
       0   SumDelay
     208   SystemClock_Config
       208   -> HAL_PWREx_EnableOverDrive
       208   -> HAL_RCCEx_PeriphCLKConfig
       208   -> HAL_RCC_ClockConfig
       208   -> HAL_RCC_OscConfig
       0   Toggle_Leds
       0   USART3_Init
         0   -> HAL_UART_Init
     176   main
       176   -> AUDIO_InitApplication
       176   -> AudioPlayerUpd
       176   -> Audio_MAL_Play
       176   -> BSP_LED_Init
       176   -> BSP_LED_Toggle
       176   -> BeamFormingSD_Init
       176   -> HAL_GPIO_Init
       176   -> HAL_GPIO_WritePin
       176   -> HAL_Init
       176   -> HAL_NVIC_SystemReset
       176   -> HAL_RCCEx_GetPeriphCLKConfig
       176   -> HAL_RCCEx_PeriphCLKConfig
       176   -> I2S1_Enable
       176   -> I2S2_Enable
       176   -> MIC1TO8_Init
       176   -> MX_I2C2_Init
       176   -> PDM2PCMSDO78
       176   -> SPI4_Enable
       176   -> STA321MP_Ini
       176   -> StartRecMic7_8
       176   -> SumDelay
       176   -> SystemClock_Config
       176   -> USBD_AUDIO_Init_Microphone_Descriptor
       176   -> USBD_AUDIO_RegisterInterface
       176   -> USBD_Init
       176   -> USBD_RegisterClass
       176   -> USBD_Start


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_30
       4  ??DataTable12_31
       4  ??DataTable12_32
       4  ??DataTable12_33
       4  ??DataTable12_34
       4  ??DataTable12_35
       4  ??DataTable12_36
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
     100  BSP_AUDIO_OUT_ClockConfig
      76  ButtonInit
       4  CrssCorVal14
       4  CrssCorVal25
       4  CrssCorVal63
       4  CrssCorVal78
       2  DeltaBuf1
       2  DeltaBuf1Old
       1  Direction
       2  EXTI15_10_IRQHandler
      54  EXTI4_IRQHandler
      78  EXTI9_5_IRQHandler
      32  FacMic
     592  GPIO_INS
          flgDlyUpd
          flgShipping
          flg10ms
          buffer_switch
          swtCase1Mic56
          WaveRec_idxSens4
          WaveRec_idxSens3
          I2S2_idxTmp
          WaveRec_idxSens1
          WaveRec_idxSens2
          WaveRec_idxSens5
          WaveRec_idxSens6
          idxSPI5DataBuf3
          cntTime200
          hUSBDDevice
     194  HAL_I2C_MspInit
       2  HAL_I2S_TxCpltCallback
     110  HAL_UART_MspInit
       4  LowPass_Mic1Old
       4  LowPass_Mic2Old
       4  LowPass_Mic3Old
       4  LowPass_Mic4Old
       4  LowPass_Mic5Old
       4  LowPass_Mic6Old
       4  LowPass_Mic7Old
       4  LowPass_Mic8Old
      44  MX_I2C2_Init
      48  StartPlay
     102  SubFrameFinished
     122  SumDelay
     160  SystemClock_Config
      18  Toggle_Leds
      38  USART3_Init
    1024  aRxBuffer
       1  appli_state
       4  btnSW1
          btnSW2
          cntBtnPress
          Command_index
   12308  bufferSum
       4  cntRisingEXTI
       1  flgSTAIni
     696  hUSBHost
     100  hspi4
     112  huart3
       1  idxDec
       2  idxLatency12
       2  idxLatency13
       2  idxLatency14
       2  idxLatency25
       2  idxLatency63
       2  idxLatency78
     798  main
       1  stFrstFrmStore
       4  ticks

 
 14 349 bytes in section .bss
    596 bytes in section .data
  2 094 bytes in section .text
 
  2 094 bytes of CODE memory
 14 945 bytes of DATA memory

Errors: none
Warnings: none
