###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       08/Nov/2016  10:26:40
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waveplayer
#        _CS43L22.c
#    Command line =  
#        "D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waveplayer
#        _CS43L22.c" -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e
#        --char_is_signed --fpu=VFPv5_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\waveplayer
#        _CS43L22.lst
#    Object file  =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\waveplayer
#        _CS43L22.o
#
###############################################################################

D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\waveplayer _CS43L22.c
      1          /*******************************************************************************
      2            *    Author: Phan Le Son (porting from ST Lib                                                                                           
      3            *    Company: Autonomous.ai                                            
      4            *    email: plson03@gmail.com
      5            *****************************************************************************/
      6          
      7          /* Includes ------------------------------------------------------------------*/
      8          #include "main.h"
      9          
     10          /** @addtogroup STM32F4-Discovery_Audio_Player_Recorder
     11          * @{
     12          */ 
     13          
     14          /* Private typedef -----------------------------------------------------------*/
     15          /* Private define ------------------------------------------------------------*/
     16          /* Private macro -------------------------------------------------------------*/
     17          /* Private variables ---------------------------------------------------------*/
     18          #if defined MEDIA_USB_KEY
     19           extern __IO uint8_t Command_index;
     20           static uint32_t wavelen = 0;
     21           static char* WaveFileName ;
     22           static __IO uint32_t SpeechDataOffset = 0x00;
     23          
     24           __IO ErrorCode WaveFileStatus = Unvalid_RIFF_ID;
     25           UINT BytesRead;
     26           WAVE_FormatTypeDef WAVE_Format;
     27           uint16_t buffer1[2*_MAX_SS] ={0x00};
     28           uint16_t buffer2[2*_MAX_SS] ={0x00};
     29          
     30          
     31           extern FATFS fatfs;
     32           extern FIL file;
     33           extern FIL fileR;
     34           extern DIR dir;
     35           extern FILINFO fno;
     36           extern uint16_t *CurrentPos;
     37           extern USB_OTG_CORE_HANDLE USB_OTG_Core;
     38           extern uint8_t WaveRecStatus;
     39          #endif
     40          extern uint8_t buffer_switch;

   \                                 In section .bss, align 4
     41          __IO uint32_t XferCplt = 0;
   \                     XferCplt:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
     42          extern uint8_t volume = 80;
   \                     volume:
   \   00000000   0x50               DC8 80

   \                                 In section .bss, align 1
     43          __IO uint8_t AudioPlayStart = 0; 
   \                     AudioPlayStart:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     44          __IO uint32_t WaveCounter;
   \                     WaveCounter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     45          uint8_t Buffer[6];
   \                     Buffer:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     46          __IO uint32_t WaveDataLength = 0;
   \                     WaveDataLength:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     47          I2S_HandleTypeDef     hi2s3;
   \                     hi2s3:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
     48          SPI_HandleTypeDef     hspi3;
   \                     hspi3:
   \   00000000                      DS8 100
     49          

   \                                 In section .bss, align 4
     50          static __IO uint32_t TimingDelay;
   \                     TimingDelay:
   \   00000000                      DS8 4
     51          
     52          /* Private function prototypes -----------------------------------------------*/
     53          /* Private functions ---------------------------------------------------------*/
     54          
     55          /**
     56            * @brief  Play wave from a mass storge
     57            * @param  AudioFreq: Audio Sampling Frequency
     58            * @retval None
     59          */
     60          

   \                                 In section .text, align 2, keep-with-next
     61          void WavePlayBack(uint32_t AudioFreq)
     62          { 
     63            /* 
     64            Normal mode description:
     65            Start playing the audio file (using DMA stream) .
     66            Using this mode, the application can run other tasks in parallel since 
     67            the DMA is handling the Audio Transfer instead of the CPU.
     68            The only task remaining for the CPU will be the management of the DMA 
     69            Transfer Complete interrupt or the Half Transfer Complete interrupt in 
     70            order to load again the buffer and to calculate the remaining data.  
     71            Circular mode description:
     72            Start playing the file from a circular buffer, once the DMA is enabled it 
     73            always run. User has to fill periodically the buffer with the audio data 
     74            using Transfer complete and/or half transfer complete interrupts callbacks 
     75            (EVAL_AUDIO_TransferComplete_CallBack() or EVAL_AUDIO_HalfTransfer_CallBack()...
     76            In this case the audio data file is smaller than the DMA max buffer 
     77            size 65535 so there is no need to load buffer continuously or manage the 
     78            transfer complete or Half transfer interrupts callbacks. */  
     79            
     80            /* Start playing */
     81            AudioPlayStart = 1;
   \                     WavePlayBack: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable4
   \   00000004   0x7008             STRB     R0,[R1, #+0]
     82          
     83          #if defined MEDIA_IntFLASH 
     84            
     85            /* Initialize wave player (Codec, DMA, I2C) */
     86            WavePlayerInit(AudioFreq); //1 sop1hc: Audio Sampling Frequency: 48000??
     87            
     88            /* Play on */
     89            //AudioFlashPlay((uint16_t*)(AUDIO_SAMPLE + AUIDO_START_ADDRESS),AUDIO_FILE_SZE,AUIDO_START_ADDRESS);
     90            // AUDIO_SAMPLE: Data
     91            //AUIDO_START_ADDRESS = 58: Offset ralative to audio file header size
     92            //AUDIO_FILE_SZE = 990000
     93            
     94            
     95            /* LED Blue Start toggling */
     96            LED_Toggle = 6;
     97            
     98            /* Infinite loop */
     99            while(1)
    100            { 
    101              /* check on the repeate status */
    102              if (RepeatState == 0)
    103              {
    104                if (PauseResumeStatus == 0)
    105                {
    106                  /* LED Blue Stop Toggling */
    107                  LED_Toggle = 0;
    108                  /* Pause playing */
    109                  WavePlayerPauseResume(PauseResumeStatus);
    110                  PauseResumeStatus = 2;
    111                }
    112                else if (PauseResumeStatus == 1)
    113                {
    114                  /* LED Blue Toggling */
    115                  LED_Toggle = 6;
    116                  /* Resume playing */
    117                  WavePlayerPauseResume(PauseResumeStatus);
    118                  PauseResumeStatus = 2;
    119                }
    120              }
    121              else
    122              {
    123                /* Stop playing */
    124                WavePlayerStop();
    125                /* Green LED toggling */
    126                LED_Toggle = 4;
    127              }
    128            }
    129            
    130          #elif defined MEDIA_USB_KEY
    131            /* Initialize wave player (Codec, DMA, I2C) */
    132            WavePlayerInit(AudioFreq);
    133            AudioRemSize   = 0; 
    134          
    135            /* Get Data from USB Key */
    136            f_lseek(&fileR, WaveCounter);
    137            f_read (&fileR, buffer1, _MAX_SS, &BytesRead); 
    138            f_read (&fileR, buffer2, _MAX_SS, &BytesRead);
    139           
    140            /* Start playing wave */
    141            Audio_MAL_Play((uint16_t *)buffer1, _MAX_SS);
    142            buffer_switch = 1;
    143            XferCplt = 0;
    144            LED_Toggle = 6;
    145            PauseResumeStatus = 1;
    146            Count = 0;
    147           
    148            while((WaveDataLength != 0) &&  HCD_IsDeviceConnected(&USB_OTG_Core))
    149            { 
    150              /* Test on the command: Playing */
    151              if (Command_index == 0)
    152              { 
    153                /* wait for DMA transfert complete */
    154                while((XferCplt == 0) &&  HCD_IsDeviceConnected(&USB_OTG_Core))
    155                {
    156                  if (PauseResumeStatus == 0)
    157                  {
    158                    /* Pause Playing wave */
    159                    LED_Toggle = 0;
    160                    WavePlayerPauseResume(PauseResumeStatus);
    161                    PauseResumeStatus = 2;
    162                  }
    163                  else if (PauseResumeStatus == 1)
    164                  {
    165                    LED_Toggle = 6;
    166                    /* Resume Playing wave */
    167                    WavePlayerPauseResume(PauseResumeStatus);
    168                    PauseResumeStatus = 2;
    169                  }  
    170                }
    171                XferCplt = 0;
    172          
    173                if(buffer_switch == 0)
    174                {
    175                  /* Play data from buffer1 */
    176                  Audio_MAL_Play((uint16_t)buffer1, _MAX_SS);
    177                  /* Store data in buffer2 */
    178                  f_read (&fileR, buffer2, _MAX_SS, &BytesRead);
    179                  buffer_switch = 1;
    180                }
    181                else 
    182                {   
    183                  /* Play data from buffer2 */
    184                  Audio_MAL_Play((uint16_t)buffer2, _MAX_SS);
    185                  /* Store data in buffer1 */
    186                  f_read (&fileR, buffer1, _MAX_SS, &BytesRead);
    187                  buffer_switch = 0;
    188                } 
    189              }
    190              else 
    191              {
    192                WavePlayerStop();
    193                WaveDataLength = 0;
    194                RepeatState =0;
    195                break;
    196              }
    197            }
    198          #if defined PLAY_REPEAT_OFF 
    199            RepeatState = 1;
    200            WavePlayerStop();
    201            if (Command_index == 0)
    202              LED_Toggle = 4;
    203          #else 
    204            LED_Toggle = 7;
    205            RepeatState = 0;
    206            AudioPlayStart = 0;
    207            WavePlayerStop();
    208          #endif
    209          #endif 
    210          
    211          }
   \   00000006   0x4770             BX       LR               ;; return
    212          
    213          /**
    214            * @brief  Pause or Resume a played wave
    215            * @param  state: if it is equal to 0 pause Playing else resume playing
    216            * @retval None
    217            */

   \                                 In section .text, align 2, keep-with-next
    218          void WavePlayerPauseResume(uint8_t state)
    219          { 
    220            AUDIO_PauseResume(state);   
   \                     WavePlayerPauseResume: (+1)
   \   00000000   0x.... 0x....      B.W      AUDIO_PauseResume
    221          }
    222          
    223          /**
    224            * @brief  Configure the volune
    225            * @param  vol: volume value
    226            * @retval None
    227            */

   \                                 In section .text, align 2, keep-with-next
    228          uint8_t WaveplayerCtrlVolume(uint8_t vol)
    229          { 
   \                     WaveplayerCtrlVolume: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    230            AUDIO_VolumeCtl(vol);
   \   00000004   0x.... 0x....      BL       AUDIO_VolumeCtl
    231            return 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xB001             ADD      SP,SP,#+4
   \   0000000C   0xBD00             POP      {PC}             ;; return
    232          }
    233          
    234          
    235          /**
    236            * @brief  Stop playing wave
    237            * @param  None
    238            * @retval None
    239            */

   \                                 In section .text, align 2, keep-with-next
    240          void WavePlayerStop(void)
    241          { 
    242            AUDIO_Stop(CODEC_PDWN_SW);
   \                     WavePlayerStop: (+1)
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x.... 0x....      B.W      AUDIO_Stop
    243          }
    244           
    245          /**
    246          * @brief  Initializes the wave player
    247          * @param  AudioFreq: Audio sampling frequency
    248          * @retval None
    249          */

   \                                 In section .text, align 2, keep-with-next
    250          int WavePlayerInit(uint32_t AudioFreq)
    251          { 
   \                     WavePlayerInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
    252          
    253            
    254            /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
    255            AUDIO_Init(OUTPUT_DEVICE_AUTO, 80, AudioFreq );  
   \   00000002   0x4602             MOV      R2,R0
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x2150             MOVS     R1,#+80
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0x.... 0x....      BL       AUDIO_Init
    256            
    257            return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xB001             ADD      SP,SP,#+4
   \   00000012   0xBD00             POP      {PC}             ;; return
    258          }
    259          
    260          
    261          /**
    262          * @brief  Play wave file from internal Flash
    263          * @param  None
    264          * @retval None
    265          */

   \                                 In section .text, align 2, keep-with-next
    266          uint32_t AudioFlashPlay(uint16_t* pBuffer, uint32_t FullSize, uint32_t StartAdd)
    267          { 
   \                     AudioFlashPlay: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    268            AUDIO_Play((uint16_t*)pBuffer, (FullSize - StartAdd));
   \   00000004   0x1A89             SUBS     R1,R1,R2
   \   00000006   0x.... 0x....      BL       AUDIO_Play
    269            return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xB001             ADD      SP,SP,#+4
   \   0000000E   0xBD00             POP      {PC}             ;; return
    270          }
    271          

   \                                 In section .text, align 2, keep-with-next
    272          void TC_Callback(struct __DMA_HandleTypeDef * hdma)
    273          {	
    274                /* Replay from the beginning */
    275             
    276          }
   \                     TC_Callback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    277          
    278          /**
    279          * @brief  Manages the DMA Half Transfer complete interrupt.
    280          * @param  None
    281          * @retval None
    282          */

   \                                 In section .text, align 2, keep-with-next
    283          void AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
    284          {  
    285          
    286          }
   \                     AUDIO_HalfTransfer_CallBack: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    287          
    288          
    289          
    290          #ifndef USE_DEFAULT_TIMEOUT_CALLBACK
    291          /**
    292            * @brief  Basic management of the timeout situation.
    293            * @param  None.
    294            * @retval None.
    295            */

   \                                 In section .text, align 2, keep-with-next
    296          uint32_t Codec_TIMEOUT_UserCallback(void)
    297          {   
    298            return (0);
   \                     Codec_TIMEOUT_UserCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    299          }
    300          #endif /* USE_DEFAULT_TIMEOUT_CALLBACK */
    301          /*----------------------------------------------------------------------------*/
    302          
    303          /**
    304            * @brief  Inserts a delay time.
    305            * @param  nTime: specifies the delay time length, in 10 ms.
    306            * @retval None
    307            */

   \                                 In section .text, align 2, keep-with-next
    308          void Delay(__IO uint32_t nTime)
    309          {
   \                     Delay: (+1)
   \   00000000   0xB401             PUSH     {R0}
    310            TimingDelay = nTime;
   \   00000002   0x....             LDR.N    R0,??DataTable4_1
   \   00000004   0x9900             LDR      R1,[SP, #+0]
   \   00000006   0x6001             STR      R1,[R0, #+0]
    311            
    312            while(TimingDelay != 0);
   \                     ??Delay_0: (+1)
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD1FC             BNE.N    ??Delay_0
    313          }
   \   0000000E   0xB001             ADD      SP,SP,#+4
   \   00000010   0x4770             BX       LR               ;; return
    314          
    315          /**
    316            * @brief  Decrements the TimingDelay variable.
    317            * @param  None
    318            * @retval None
    319            */

   \                                 In section .text, align 2, keep-with-next
    320          void TimingDelay_Decrement(void)
    321          {
    322            if (TimingDelay != 0x00)
   \                     TimingDelay_Decrement: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_1
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xB111             CBZ.N    R1,??TimingDelay_Decrement_0
    323            { 
    324              TimingDelay--;
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x1E49             SUBS     R1,R1,#+1
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    325            }
    326          }
   \                     ??TimingDelay_Decrement_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
    327          
    328          

   \                                 In section .text, align 2, keep-with-next
    329          void I2S3_Init(uint32_t AudioFreq)
    330          {
   \                     I2S3_Init: (+1)
   \   00000000   0xB082             SUB      SP,SP,#+8
    331          
    332            // static I2S_HandleTypeDef hi2s3;
    333            /* Enable the CODEC_I2S peripheral clock */
    334            __HAL_RCC_SPI3_CLK_ENABLE();
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x9100             STR      R1,[SP, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40023840
   \   00000008   0x680A             LDR      R2,[R1, #+0]
   \   0000000A   0xF442 0x4200      ORR      R2,R2,#0x8000
   \   0000000E   0x600A             STR      R2,[R1, #+0]
   \   00000010   0x6809             LDR      R1,[R1, #+0]
    335          
    336            hi2s3.Instance = SPI3;
   \   00000012   0x....             LDR.N    R2,??DataTable4_3  ;; 0x40003c00
   \   00000014   0xF401 0x4100      AND      R1,R1,#0x8000
   \   00000018   0x9100             STR      R1,[SP, #+0]
   \   0000001A   0x9900             LDR      R1,[SP, #+0]
   \   0000001C   0x....             LDR.N    R1,??DataTable4_4
   \   0000001E   0x600A             STR      R2,[R1, #+0]
    337            /* Disable I2S3 peripheral to allow access to I2S internal registers */
    338            __HAL_I2S_DISABLE(&hi2s3);
   \   00000020   0x69D3             LDR      R3,[R2, #+28]
   \   00000022   0xF423 0x6380      BIC      R3,R3,#0x400
   \   00000026   0x61D3             STR      R3,[R2, #+28]
    339            
    340            hi2s3.Init.Standard = I2S_STANDARD;//I2S_STANDARD_PHILIPS
   \   00000028   0x2200             MOVS     R2,#+0
    341            hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
    342            hi2s3.Init.AudioFreq = AudioFreq;
   \   0000002A   0x6148             STR      R0,[R1, #+20]
    343            hi2s3.Init.CPOL = I2S_CPOL_LOW;
    344            hi2s3.Init.ClockSource = I2S_CLOCK_SYSCLK;
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0x61C8             STR      R0,[R1, #+28]
    345            hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
   \   00000030   0xF44F 0x7000      MOV      R0,#+512
   \   00000034   0x608A             STR      R2,[R1, #+8]
   \   00000036   0x60CA             STR      R2,[R1, #+12]
   \   00000038   0x618A             STR      R2,[R1, #+24]
   \   0000003A   0x6048             STR      R0,[R1, #+4]
    346          
    347          #ifdef CODEC_MCLK_ENABLED
    348            hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
   \   0000003C   0x6108             STR      R0,[R1, #+16]
    349          #elif defined(CODEC_MCLK_DISABLED)
    350            hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    351          #else
    352          #error "No selection for the MCLK output has been defined !"
    353          #endif /* CODEC_MCLK_ENABLED */
    354            
    355            /* Initialize the I2S peripheral with the structure above */
    356            HAL_I2S_Init(&hi2s3);
   \   0000003E   0x4608             MOV      R0,R1
   \   00000040   0xB002             ADD      SP,SP,#+8
   \   00000042   0x.... 0x....      B.W      HAL_I2S_Init
    357            
    358          
    359            /* Enable I2S peripheral */    
    360            //__HAL_I2S_ENABLE(&hi2s3);
    361                /* Enable the Peripheral */
    362            //__HAL_DMA_ENABLE(&DmaHandle);
    363          
    364          
    365          }
    366          
    367          

   \                                 In section .text, align 2, keep-with-next
    368          void SPI3_Init(uint32_t AudioFreq)
    369          {
   \                     SPI3_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    370          
    371            // static I2S_HandleTypeDef hi2s3;
    372            /* Enable the CODEC_I2S peripheral clock */
    373            __SPI3_CLK_ENABLE();
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40023840
    374          
    375            hspi3.Instance = SPI3;
   \   0000000A   0x....             LDR.N    R4,??DataTable4_5
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   00000012   0x6001             STR      R1,[R0, #+0]
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF400 0x4000      AND      R0,R0,#0x8000
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0x....             LDR.N    R0,??DataTable4_3  ;; 0x40003c00
   \   00000020   0x6020             STR      R0,[R4, #+0]
    376            hspi3.Init.Mode = SPI_MODE_MASTER;
   \   00000022   0xF44F 0x7082      MOV      R0,#+260
   \   00000026   0x6060             STR      R0,[R4, #+4]
    377            hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
   \   00000028   0x2018             MOVS     R0,#+24
   \   0000002A   0x61E0             STR      R0,[R4, #+28]
    378            hspi3.Init.Direction = SPI_DIRECTION_1LINE;
   \   0000002C   0xF44F 0x4000      MOV      R0,#+32768
   \   00000030   0x60A0             STR      R0,[R4, #+8]
    379            hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
   \   00000032   0xF44F 0x6070      MOV      R0,#+3840
   \   00000036   0x60E0             STR      R0,[R4, #+12]
    380            hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x6120             STR      R0,[R4, #+16]
    381            hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
   \   0000003C   0x6160             STR      R0,[R4, #+20]
    382            hspi3.Init.NSS = SPI_NSS_SOFT;//SPI_NSS_HARD_INPUT
   \   0000003E   0xF44F 0x7000      MOV      R0,#+512
   \   00000042   0x61A0             STR      R0,[R4, #+24]
    383            hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x6220             STR      R0,[R4, #+32]
    384            hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
   \   00000048   0x6260             STR      R0,[R4, #+36]
    385            hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
   \   0000004A   0x62A0             STR      R0,[R4, #+40]
    386            hspi3.Init.CRCPolynomial = 7;
   \   0000004C   0x2007             MOVS     R0,#+7
   \   0000004E   0x62E0             STR      R0,[R4, #+44]
    387            hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x6320             STR      R0,[R4, #+48]
    388            hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
   \   00000054   0x6360             STR      R0,[R4, #+52]
    389            //hspi4.RxISR = SPI5_CallBack;
    390            HAL_SPI_Init(&hspi3);
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       HAL_SPI_Init
    391            
    392            __HAL_SPI_ENABLE(&hspi3);
   \   0000005C   0x6820             LDR      R0,[R4, #+0]
   \   0000005E   0x6801             LDR      R1,[R0, #+0]
   \   00000060   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000064   0x6001             STR      R1,[R0, #+0]
    393            
    394          
    395            /* The I2S peripheral will be enabled only in the AUDIO_Play() function 
    396                 or by user functions if DMA mode not enabled */
    397          
    398          }
   \   00000066   0xB002             ADD      SP,SP,#+8
   \   00000068   0xBD10             POP      {R4,PC}          ;; return
    399          
    400          

   \                                 In section .text, align 2, keep-with-next
    401          void AUDIO_InitApplication(void)
    402          {
    403            WavePlayerInit(3*AUDIO_FREQ);
   \                     AUDIO_InitApplication: (+1)
   \   00000000   0xF64B 0x3280      MOVW     R2,#+48000
   \   00000004   0x2150             MOVS     R1,#+80
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0x.... 0x....      B.W      AUDIO_Init
    404          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     AudioPlayStart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     TimingDelay

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40003C00         DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     hi2s3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     hspi3
    405          
    406          
    407          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   AUDIO_HalfTransfer_CallBack
       0   AUDIO_InitApplication
         0   -> AUDIO_Init
       8   AudioFlashPlay
         8   -> AUDIO_Play
       0   Codec_TIMEOUT_UserCallback
       4   Delay
       8   I2S3_Init
         0   -> HAL_I2S_Init
      16   SPI3_Init
        16   -> HAL_SPI_Init
       0   TC_Callback
       0   TimingDelay_Decrement
       0   WavePlayBack
       8   WavePlayerInit
         8   -> AUDIO_Init
       0   WavePlayerPauseResume
         0   -> AUDIO_PauseResume
       0   WavePlayerStop
         0   -> AUDIO_Stop
       8   WaveplayerCtrlVolume
         8   -> AUDIO_VolumeCtl


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       2  AUDIO_HalfTransfer_CallBack
      12  AUDIO_InitApplication
      16  AudioFlashPlay
       1  AudioPlayStart
       8  Buffer
       4  Codec_TIMEOUT_UserCallback
      18  Delay
      70  I2S3_Init
     106  SPI3_Init
       2  TC_Callback
       4  TimingDelay
      14  TimingDelay_Decrement
       4  WaveCounter
       4  WaveDataLength
       8  WavePlayBack
      20  WavePlayerInit
       4  WavePlayerPauseResume
       6  WavePlayerStop
      14  WaveplayerCtrlVolume
       4  XferCplt
      64  hi2s3
     100  hspi3
       1  volume

 
 189 bytes in section .bss
   1 byte  in section .data
 320 bytes in section .text
 
 320 bytes of CODE memory
 190 bytes of DATA memory

Errors: none
Warnings: none
