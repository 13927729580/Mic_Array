###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       08/Nov/2016  10:26:35
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\stm32f7xx_it.c
#    Command line =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\stm32f7xx_it.c
#        -D USE_HAL_DRIVER -D STM32F746xx -D USE_STM32746G_DISCO -D
#        USE_IOEXPANDER -D USE_USB_FS -lC
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -lA
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List
#        -o
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M7 -e
#        --char_is_signed --fpu=VFPv5_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F7xx\Include\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\STM32F7xx_HAL_Driver\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\STM32746G-Discovery\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Drivers\BSP\Components\Common\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Log\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\Fonts\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Utilities\CPU\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Core\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_HOST_Library\Class\MSC\Inc\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\Third_Party\FatFs\src\drivers\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_Audio\Addons\PDM\
#        -I
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\..\..\..\..\..\..\Middlewares\ST\STM32_USB_Device_Library\Class\AUDIO\Inc\
#        -Ohs --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM7 --relaxed_fp
#    List file    =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\List\stm32f7xx_it.lst
#    Object file  =  
#        D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\EWARM\STM32F7\Obj\stm32f7xx_it.o
#
###############################################################################

D:\sop1hc\Mic\Mic_Array\For_Window\Projects\STM32746G\Applications\Audio\Mic_Array\Src\stm32f7xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    Audio/Audio_playback_and_record/Src/stm32f7xx_it.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    25-June-2015
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and 
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
     14            *
     15            * Redistribution and use in source and binary forms, with or without modification,
     16            * are permitted provided that the following conditions are met:
     17            *   1. Redistributions of source code must retain the above copyright notice,
     18            *      this list of conditions and the following disclaimer.
     19            *   2. Redistributions in binary form must reproduce the above copyright notice,
     20            *      this list of conditions and the following disclaimer in the documentation
     21            *      and/or other materials provided with the distribution.
     22            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     23            *      may be used to endorse or promote products derived from this software
     24            *      without specific prior written permission.
     25            *
     26            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     27            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     28            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     29            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     30            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     31            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     32            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     33            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     34            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     35            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     36            *
     37            ******************************************************************************
     38            */
     39          
     40          /* Includes ------------------------------------------------------------------*/
     41          #include "main.h"
     42          #include "stm32f7xx_it.h"
     43          
     44          /* Private typedef -----------------------------------------------------------*/
     45          /* Private define ------------------------------------------------------------*/
     46          /* Private macro -------------------------------------------------------------*/
     47          /* Private variables ---------------------------------------------------------*/
     48          extern HCD_HandleTypeDef hhcd;
     49          extern PCD_HandleTypeDef hpcd;
     50          extern __IO  char flg10ms;
     51          extern __IO uint8_t   flgShipping;
     52          extern __IO uint16_t WaveRecord_flgIni;

   \                                 In section .bss, align 4
     53          __IO uint32_t cntOS,cntOSCheckShft;
   \                     cntOS:
   \   00000000                      DS8 4
   \                     cntOSCheckShft:
   \   00000004                      DS8 4
     54          
     55          
     56          extern I2C_HandleTypeDef hi2c1,hi2c2;
     57          extern UART_HandleTypeDef huart3;
     58          extern SPI_HandleTypeDef hspi5;
     59          extern Mic_Array_Data Buffer1;
     60          /* Private function prototypes -----------------------------------------------*/
     61          /* Private functions ---------------------------------------------------------*/
     62          
     63          /******************************************************************************/
     64          /*            Cortex-M7 Processor Exceptions Handlers                         */
     65          /******************************************************************************/
     66          
     67          /**
     68            * @brief  This function handles NMI exception.
     69            * @param  None
     70            * @retval None
     71            */

   \                                 In section .text, align 2, keep-with-next
     72          void NMI_Handler(void)
     73          {
     74          }
   \                     NMI_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     75          
     76          /**
     77            * @brief  This function handles Hard Fault exception.
     78            * @param  None
     79            * @retval None
     80            */

   \                                 In section .text, align 2, keep-with-next
     81          void HardFault_Handler(void)
     82          {
     83            /* Go to infinite loop when Hard Fault exception occurs */
     84            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??HardFault_Handler_0
     85            {
     86            }
     87          }
     88          
     89          /**
     90            * @brief  This function handles Memory Manage exception.
     91            * @param  None
     92            * @retval None
     93            */

   \                                 In section .text, align 2, keep-with-next
     94          void MemManage_Handler(void)
     95          {
     96            /* Go to infinite loop when Memory Manage exception occurs */
     97            while (1)
   \                     MemManage_Handler: (+1)
   \                     ??MemManage_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??MemManage_Handler_0
     98            {
     99            }
    100          }
    101          
    102          /**
    103            * @brief  This function handles Bus Fault exception.
    104            * @param  None
    105            * @retval None
    106            */

   \                                 In section .text, align 2, keep-with-next
    107          void BusFault_Handler(void)
    108          {
    109            /* Go to infinite loop when Bus Fault exception occurs */
    110            while (1)
   \                     BusFault_Handler: (+1)
   \                     ??BusFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??BusFault_Handler_0
    111            {
    112            }
    113          }
    114          
    115          /**
    116            * @brief  This function handles Usage Fault exception.
    117            * @param  None
    118            * @retval None
    119            */

   \                                 In section .text, align 2, keep-with-next
    120          void UsageFault_Handler(void)
    121          {
    122            /* Go to infinite loop when Usage Fault exception occurs */
    123            while (1)
   \                     UsageFault_Handler: (+1)
   \                     ??UsageFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??UsageFault_Handler_0
    124            {
    125            }
    126          }
    127          
    128          /**
    129            * @brief  This function handles SVCall exception.
    130            * @param  None
    131            * @retval None
    132            */

   \                                 In section .text, align 2, keep-with-next
    133          void SVC_Handler(void)
    134          {
    135          }
   \                     SVC_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    136          
    137          /**
    138            * @brief  This function handles Debug Monitor exception.
    139            * @param  None
    140            * @retval None
    141            */

   \                                 In section .text, align 2, keep-with-next
    142          void DebugMon_Handler(void)
    143          {
    144          }
   \                     DebugMon_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    145          
    146          /**
    147            * @brief  This function handles PendSVC exception.
    148            * @param  None
    149            * @retval None
    150            */

   \                                 In section .text, align 2, keep-with-next
    151          void PendSV_Handler(void)
    152          {
    153          }
   \                     PendSV_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    154          
    155          /**
    156            * @brief  This function handles SysTick Handler.
    157            * @param  None
    158            * @retval None
    159            */

   \                                 In section .text, align 2, keep-with-next
    160          void SysTick_Handler(void)
    161          {
   \                     SysTick_Handler: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    162            HAL_IncTick(); 
   \   00000004   0x.... 0x....      BL       HAL_IncTick
    163            //Toggle_Leds();
    164          
    165            cntOS++;
   \   00000008   0x....             LDR.N    R0,??DataTable4
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    166            
    167          #if USB_STREAMING
    168            //if(cntOS%2==0)
    169            //{
    170             //AudioProcess();
    171            //}
    172            //SubFrameFinished();
    173          #endif   
    174            if (cntOS==10)
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0x290A             CMP      R1,#+10
   \   00000014   0xD104             BNE.N    ??SysTick_Handler_0
    175            {
    176                cntOS=0;
   \   00000016   0x2100             MOVS     R1,#+0
    177                flg10ms = 1;
   \   00000018   0x....             LDR.N    R2,??DataTable4_1
   \   0000001A   0x6001             STR      R1,[R0, #+0]
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x7011             STRB     R1,[R2, #+0]
    178                
    179            }
    180            
    181            if ((cntOSCheckShft>3000)&&(cntOSCheckShft<3003))
   \                     ??SysTick_Handler_0: (+1)
   \   00000020   0x6841             LDR      R1,[R0, #+4]
   \   00000022   0xF640 0x32B9      MOVW     R2,#+3001
   \   00000026   0x4291             CMP      R1,R2
   \   00000028   0xD304             BCC.N    ??SysTick_Handler_1
   \   0000002A   0x6841             LDR      R1,[R0, #+4]
   \   0000002C   0xF640 0x32BB      MOVW     R2,#+3003
   \   00000030   0x4291             CMP      R1,R2
   \   00000032   0xD304             BCC.N    ??SysTick_Handler_2
    182            {
    183               //flgShipping = CheckEnergyEqual(&Buffer1.bufMIC1[0], &Buffer1.bufMIC5[0], 100); 
    184               //WaveRecord_flgIni=0;
    185               //if (CheckEnergyEqual(&Buffer1.bufMIC1[0], &Buffer1.bufMIC5[0], 100))
    186               //{
    187                   /* SW reset here */
    188                   //HAL_NVIC_SystemReset();  
    189               //}
    190               
    191               //HAL_NVIC_SystemReset();
    192               //BSP_LED_Toggle(LED2);
    193               cntOSCheckShft++;
    194            }
    195            else
    196            {
    197                if (cntOSCheckShft<3000+10)
   \                     ??SysTick_Handler_1: (+1)
   \   00000034   0x6841             LDR      R1,[R0, #+4]
   \   00000036   0xF640 0x32C2      MOVW     R2,#+3010
   \   0000003A   0x4291             CMP      R1,R2
   \   0000003C   0xD202             BCS.N    ??SysTick_Handler_3
    198                       cntOSCheckShft++;     
   \                     ??SysTick_Handler_2: (+1)
   \   0000003E   0x6841             LDR      R1,[R0, #+4]
   \   00000040   0x1C49             ADDS     R1,R1,#+1
   \   00000042   0x6041             STR      R1,[R0, #+4]
    199            }
    200          
    201            	
    202          }
   \                     ??SysTick_Handler_3: (+1)
   \   00000044   0xB001             ADD      SP,SP,#+4
   \   00000046   0xBD00             POP      {PC}             ;; return
    203          

   \                                 In section .text, align 2, keep-with-next
    204          void USART6_IRQHandler(void)
    205          {
    206          //  HAL_UART_IRQHandler(&huart6);
    207          }
   \                     USART6_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    208          

   \                                 In section .text, align 2, keep-with-next
    209          void USART3_IRQHandler(void)
    210          {
    211            HAL_UART_IRQHandler(&huart3);
   \                     USART3_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_2
   \   00000002   0x.... 0x....      B.W      HAL_UART_IRQHandler
    212          }
    213          
    214          

   \                                 In section .text, align 2, keep-with-next
    215          void I2C1_EV_IRQHandler(void)
    216          {
    217            /* USER CODE BEGIN I2C1_EV_IRQn 0 */
    218          
    219            /* USER CODE END I2C1_EV_IRQn 0 */
    220            HAL_I2C_EV_IRQHandler(&hi2c1);
   \                     I2C1_EV_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_3
   \   00000002   0x.... 0x....      B.W      HAL_I2C_EV_IRQHandler
    221            /* USER CODE BEGIN I2C1_EV_IRQn 1 */
    222          
    223            /* USER CODE END I2C1_EV_IRQn 1 */
    224          }
    225          
    226          

   \                                 In section .text, align 2, keep-with-next
    227          void I2C2_EV_IRQHandler(void)
    228          {
    229            /* USER CODE BEGIN I2C1_EV_IRQn 0 */
    230          
    231            /* USER CODE END I2C1_EV_IRQn 0 */
    232            HAL_I2C_EV_IRQHandler(&hi2c2);
   \                     I2C2_EV_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_4
   \   00000002   0x.... 0x....      B.W      HAL_I2C_EV_IRQHandler
    233            /* USER CODE BEGIN I2C1_EV_IRQn 1 */
    234          
    235            /* USER CODE END I2C1_EV_IRQn 1 */
    236          }
    237          
    238          
    239          
    240          
    241          
    242          
    243          /******************************************************************************/
    244          /*                 STM32F7xx Peripherals Interrupt Handlers                   */
    245          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    246          /*  available peripheral interrupt handler's name please refer to the startup */
    247          /*  file (startup_stm32f7xx.s).                                               */
    248          /******************************************************************************/
    249          
    250          /**
    251            * @brief  This function handles USB-On-The-Go FS/HS global interrupt request.
    252            * @param  None
    253            * @retval None
    254            */
    255          #ifdef USE_USB_FS

   \                                 In section .text, align 2, keep-with-next
    256          void OTG_FS_IRQHandler(void)
    257          #else
    258          void OTG_HS_IRQHandler(void)
    259          #endif
    260          {
    261            //sop1hc HAL_HCD_IRQHandler(&hhcd);
    262            HAL_PCD_IRQHandler(&hpcd);
   \                     OTG_FS_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_5
   \   00000002   0x.... 0x....      B.W      HAL_PCD_IRQHandler
    263          }
    264          
    265          /**
    266            * @brief This function handles DMA2 Stream 4 interrupt request.
    267            * @param None
    268            * @retval None
    269            */

   \                                 In section .text, align 2, keep-with-next
    270          void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
    271          {
    272            //HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
    273          }
   \                     DMA2_Stream4_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    274          
    275          /**
    276            * @brief This function handles DMA2 Stream 7 interrupt request.
    277            * @param None
    278            * @retval None
    279            */

   \                                 In section .text, align 2, keep-with-next
    280          void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
    281          {
    282            //HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
    283          }
   \                     DMA2_Stream7_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     cntOS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     flg10ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     huart3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     hi2c1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     hi2c2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     hpcd
    284          
    285          /**
    286            * @brief  This function handles PPP interrupt request.
    287            * @param  None
    288            * @retval None
    289            */
    290          /*void PPP_IRQHandler(void)
    291          {
    292          }*/
    293          
    294          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DMA2_Stream4_IRQHandler
       0   DMA2_Stream7_IRQHandler
       0   DebugMon_Handler
       0   HardFault_Handler
       0   I2C1_EV_IRQHandler
         0   -> HAL_I2C_EV_IRQHandler
       0   I2C2_EV_IRQHandler
         0   -> HAL_I2C_EV_IRQHandler
       0   MemManage_Handler
       0   NMI_Handler
       0   OTG_FS_IRQHandler
         0   -> HAL_PCD_IRQHandler
       0   PendSV_Handler
       0   SVC_Handler
       8   SysTick_Handler
         8   -> HAL_IncTick
       0   USART3_IRQHandler
         0   -> HAL_UART_IRQHandler
       0   USART6_IRQHandler
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       2  BusFault_Handler
       2  DMA2_Stream4_IRQHandler
       2  DMA2_Stream7_IRQHandler
       2  DebugMon_Handler
       2  HardFault_Handler
       6  I2C1_EV_IRQHandler
       6  I2C2_EV_IRQHandler
       2  MemManage_Handler
       2  NMI_Handler
       6  OTG_FS_IRQHandler
       2  PendSV_Handler
       2  SVC_Handler
      72  SysTick_Handler
       6  USART3_IRQHandler
       2  USART6_IRQHandler
       2  UsageFault_Handler
       8  cntOS
          cntOSCheckShft

 
   8 bytes in section .bss
 142 bytes in section .text
 
 142 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
